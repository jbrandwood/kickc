
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::idx#0 = 0
  *((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_P+OFFSET_STRUCT_POINT_X) = main::v1_p_x
  *((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_P+OFFSET_STRUCT_POINT_Y) = main::v1_p_y
  *((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_X) = main::v1_q_x
  *((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_Y) = main::v1_q_y
  main::v2 = struct-unwound {*((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_P+OFFSET_STRUCT_POINT_X), *((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_P+OFFSET_STRUCT_POINT_Y), *((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_X), *((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_Y)}
  *((struct Point*)&main::v3+OFFSET_STRUCT_VECTOR_P) = memcpy(*((struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_P), struct Point, SIZEOF_STRUCT_POINT)
  *((struct Point*)&main::v3+OFFSET_STRUCT_VECTOR_Q) = memcpy(*(&$0), struct Point, SIZEOF_STRUCT_POINT)
  main::v3 = struct-unwound {*((struct Point*)&main::v3+OFFSET_STRUCT_VECTOR_P), *((struct Point*)&main::v3+OFFSET_STRUCT_VECTOR_Q)}
  *(&main::v4) = memcpy(*(&main::v3), struct Vector, SIZEOF_STRUCT_VECTOR)
  main::v4 = struct-unwound {*(&main::v4)}
  main::v5_p_x#0 = *((byte*)(struct Point*)&main::v4+OFFSET_STRUCT_VECTOR_P+OFFSET_STRUCT_POINT_X)
  main::v5_p_y#0 = *((byte*)(struct Point*)&main::v4+OFFSET_STRUCT_VECTOR_P+OFFSET_STRUCT_POINT_Y)
  SCREEN[main::idx#0] = main::v1_p_x
  main::idx#1 = ++ main::idx#0
  SCREEN[main::idx#1] = main::v1_p_y
  main::idx#2 = ++ main::idx#1
  SCREEN[main::idx#2] = main::v1_q_x
  main::idx#3 = ++ main::idx#2
  SCREEN[main::idx#3] = main::v1_q_y
  main::idx#4 = ++ main::idx#3
  SCREEN[main::idx#4] = *((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_P+OFFSET_STRUCT_POINT_X)
  main::idx#5 = ++ main::idx#4
  SCREEN[main::idx#5] = *((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_P+OFFSET_STRUCT_POINT_Y)
  main::idx#6 = ++ main::idx#5
  SCREEN[main::idx#6] = *((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_X)
  main::idx#7 = ++ main::idx#6
  SCREEN[main::idx#7] = *((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_Y)
  main::idx#8 = ++ main::idx#7
  SCREEN[main::idx#8] = *((byte*)(struct Point*)&main::v3+OFFSET_STRUCT_VECTOR_P+OFFSET_STRUCT_POINT_X)
  main::idx#9 = ++ main::idx#8
  SCREEN[main::idx#9] = *((byte*)(struct Point*)&main::v3+OFFSET_STRUCT_VECTOR_P+OFFSET_STRUCT_POINT_Y)
  main::idx#10 = ++ main::idx#9
  SCREEN[main::idx#10] = *((byte*)(struct Point*)&main::v3+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_X)
  main::idx#11 = ++ main::idx#10
  SCREEN[main::idx#11] = *((byte*)(struct Point*)&main::v3+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_Y)
  main::idx#12 = ++ main::idx#11
  SCREEN[main::idx#12] = *((byte*)(struct Point*)&main::v4+OFFSET_STRUCT_VECTOR_P+OFFSET_STRUCT_POINT_X)
  main::idx#13 = ++ main::idx#12
  SCREEN[main::idx#13] = *((byte*)(struct Point*)&main::v4+OFFSET_STRUCT_VECTOR_P+OFFSET_STRUCT_POINT_Y)
  main::idx#14 = ++ main::idx#13
  SCREEN[main::idx#14] = *((byte*)(struct Point*)&main::v4+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_X)
  main::idx#15 = ++ main::idx#14
  SCREEN[main::idx#15] = *((byte*)(struct Point*)&main::v4+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_Y)
  main::idx#16 = ++ main::idx#15
  SCREEN[main::idx#16] = main::v5_p_x#0
  main::idx#17 = ++ main::idx#16
  SCREEN[main::idx#17] = main::v5_p_y#0
  main::idx#18 = ++ main::idx#17
  SCREEN[main::idx#18] = main::v5_q_x
  main::idx#19 = ++ main::idx#18
  SCREEN[main::idx#19] = main::v5_q_y
  main::idx#20 = ++ main::idx#19
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
const struct Point $0 = { x: 6, y: 7 }
const byte OFFSET_STRUCT_POINT_X = 0
const byte OFFSET_STRUCT_POINT_Y = 1
const byte OFFSET_STRUCT_VECTOR_P = 0
const byte OFFSET_STRUCT_VECTOR_Q = 2
byte Point::x
byte Point::y
const nomodify byte* SCREEN = (byte*)$400
const byte SIZEOF_STRUCT_POINT = 2
const byte SIZEOF_STRUCT_VECTOR = 4
struct Point Vector::p
struct Point Vector::q
void __start()
label __start::@1
label __start::@return
void main()
label main::@return
byte main::idx
byte main::idx#0
byte main::idx#1
byte main::idx#10
byte main::idx#11
byte main::idx#12
byte main::idx#13
byte main::idx#14
byte main::idx#15
byte main::idx#16
byte main::idx#17
byte main::idx#18
byte main::idx#19
byte main::idx#2
byte main::idx#20
byte main::idx#3
byte main::idx#4
byte main::idx#5
byte main::idx#6
byte main::idx#7
byte main::idx#8
byte main::idx#9
struct Point main::v1_p
const byte main::v1_p_x = 2
const byte main::v1_p_y = 3
struct Point main::v1_q
const byte main::v1_q_x = 4
const byte main::v1_q_y = 5
struct Vector main::v2 loadstore
struct Vector main::v3 loadstore
struct Vector main::v4 loadstore
struct Point main::v5_p
byte main::v5_p_x
byte main::v5_p_x#0
byte main::v5_p_y
byte main::v5_p_y#0
struct Point main::v5_q
const byte main::v5_q_x = 8
const byte main::v5_q_y = 9

Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Removing C-classic struct-unwound assignment [5] main::v2 = struct-unwound {*((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_P+OFFSET_STRUCT_POINT_X), *((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_P+OFFSET_STRUCT_POINT_Y), *((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_X), *((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_Y)}
Removing C-classic struct-unwound assignment [8] main::v3 = struct-unwound {*((struct Point*)&main::v3+OFFSET_STRUCT_VECTOR_P), *((struct Point*)&main::v3+OFFSET_STRUCT_VECTOR_Q)}
Removing C-classic struct-unwound assignment [10] main::v4 = struct-unwound {*(&main::v4)}
Constant main::idx#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero (byte*)(struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_P in [1] *((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_P+OFFSET_STRUCT_POINT_X) = main::v1_p_x
Simplifying expression containing zero (struct Point*)&main::v2 in [1] *((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_P) = main::v1_p_x
Simplifying expression containing zero (struct Point*)&main::v2 in [2] *((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_P+OFFSET_STRUCT_POINT_Y) = main::v1_p_y
Simplifying expression containing zero (byte*)(struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_Q in [3] *((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_X) = main::v1_q_x
Simplifying expression containing zero (struct Point*)&main::v2 in [6] *((struct Point*)&main::v3+OFFSET_STRUCT_VECTOR_P) = memcpy(*((struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_P), struct Point, SIZEOF_STRUCT_POINT)
Simplifying expression containing zero (struct Point*)&main::v3 in [6] *((struct Point*)&main::v3+OFFSET_STRUCT_VECTOR_P) = memcpy(*((struct Point*)&main::v2), struct Point, SIZEOF_STRUCT_POINT)
Simplifying expression containing zero (byte*)(struct Point*)&main::v4+OFFSET_STRUCT_VECTOR_P in [11] main::v5_p_x#0 = *((byte*)(struct Point*)&main::v4+OFFSET_STRUCT_VECTOR_P+OFFSET_STRUCT_POINT_X)
Simplifying expression containing zero (struct Point*)&main::v4 in [11] main::v5_p_x#0 = *((byte*)(struct Point*)&main::v4+OFFSET_STRUCT_VECTOR_P)
Simplifying expression containing zero (struct Point*)&main::v4 in [12] main::v5_p_y#0 = *((byte*)(struct Point*)&main::v4+OFFSET_STRUCT_VECTOR_P+OFFSET_STRUCT_POINT_Y)
Simplifying expression containing zero SCREEN in [13] SCREEN[main::idx#0] = main::v1_p_x
Simplifying expression containing zero (byte*)(struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_P in [21] SCREEN[main::idx#4] = *((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_P+OFFSET_STRUCT_POINT_X)
Simplifying expression containing zero (struct Point*)&main::v2 in [21] SCREEN[main::idx#4] = *((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_P)
Simplifying expression containing zero (struct Point*)&main::v2 in [23] SCREEN[main::idx#5] = *((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_P+OFFSET_STRUCT_POINT_Y)
Simplifying expression containing zero (byte*)(struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_Q in [25] SCREEN[main::idx#6] = *((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_X)
Simplifying expression containing zero (byte*)(struct Point*)&main::v3+OFFSET_STRUCT_VECTOR_P in [29] SCREEN[main::idx#8] = *((byte*)(struct Point*)&main::v3+OFFSET_STRUCT_VECTOR_P+OFFSET_STRUCT_POINT_X)
Simplifying expression containing zero (struct Point*)&main::v3 in [29] SCREEN[main::idx#8] = *((byte*)(struct Point*)&main::v3+OFFSET_STRUCT_VECTOR_P)
Simplifying expression containing zero (struct Point*)&main::v3 in [31] SCREEN[main::idx#9] = *((byte*)(struct Point*)&main::v3+OFFSET_STRUCT_VECTOR_P+OFFSET_STRUCT_POINT_Y)
Simplifying expression containing zero (byte*)(struct Point*)&main::v3+OFFSET_STRUCT_VECTOR_Q in [33] SCREEN[main::idx#10] = *((byte*)(struct Point*)&main::v3+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_X)
Simplifying expression containing zero (byte*)(struct Point*)&main::v4+OFFSET_STRUCT_VECTOR_P in [37] SCREEN[main::idx#12] = *((byte*)(struct Point*)&main::v4+OFFSET_STRUCT_VECTOR_P+OFFSET_STRUCT_POINT_X)
Simplifying expression containing zero (struct Point*)&main::v4 in [37] SCREEN[main::idx#12] = *((byte*)(struct Point*)&main::v4+OFFSET_STRUCT_VECTOR_P)
Simplifying expression containing zero (struct Point*)&main::v4 in [39] SCREEN[main::idx#13] = *((byte*)(struct Point*)&main::v4+OFFSET_STRUCT_VECTOR_P+OFFSET_STRUCT_POINT_Y)
Simplifying expression containing zero (byte*)(struct Point*)&main::v4+OFFSET_STRUCT_VECTOR_Q in [41] SCREEN[main::idx#14] = *((byte*)(struct Point*)&main::v4+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_X)
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable main::idx#20 and assignment [48] main::idx#20 = ++ main::idx#19
Eliminating unused constant OFFSET_STRUCT_VECTOR_P
Eliminating unused constant OFFSET_STRUCT_POINT_X
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Constant right-side identified [10] main::idx#1 = ++ main::idx#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::idx#1 = ++main::idx#0
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [11] main::idx#2 = ++ main::idx#1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::idx#2 = ++main::idx#1
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [12] main::idx#3 = ++ main::idx#2
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::idx#3 = ++main::idx#2
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [13] main::idx#4 = ++ main::idx#3
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::idx#4 = ++main::idx#3
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [14] main::idx#5 = ++ main::idx#4
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::idx#5 = ++main::idx#4
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [15] main::idx#6 = ++ main::idx#5
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::idx#6 = ++main::idx#5
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [16] main::idx#7 = ++ main::idx#6
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::idx#7 = ++main::idx#6
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [17] main::idx#8 = ++ main::idx#7
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::idx#8 = ++main::idx#7
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [18] main::idx#9 = ++ main::idx#8
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::idx#9 = ++main::idx#8
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [19] main::idx#10 = ++ main::idx#9
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::idx#10 = ++main::idx#9
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [20] main::idx#11 = ++ main::idx#10
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::idx#11 = ++main::idx#10
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [21] main::idx#12 = ++ main::idx#11
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::idx#12 = ++main::idx#11
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [22] main::idx#13 = ++ main::idx#12
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::idx#13 = ++main::idx#12
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [23] main::idx#14 = ++ main::idx#13
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::idx#14 = ++main::idx#13
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [24] main::idx#15 = ++ main::idx#14
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::idx#15 = ++main::idx#14
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [25] main::idx#16 = ++ main::idx#15
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::idx#16 = ++main::idx#15
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [26] main::idx#17 = ++ main::idx#16
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::idx#17 = ++main::idx#16
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [27] main::idx#18 = ++ main::idx#17
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::idx#18 = ++main::idx#17
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [28] main::idx#19 = ++ main::idx#18
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::idx#19 = ++main::idx#18
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with different constant siblings main::idx#0
Inlining constant with different constant siblings main::idx#1
Inlining constant with different constant siblings main::idx#2
Inlining constant with different constant siblings main::idx#3
Inlining constant with different constant siblings main::idx#4
Inlining constant with different constant siblings main::idx#5
Inlining constant with different constant siblings main::idx#6
Inlining constant with different constant siblings main::idx#7
Inlining constant with different constant siblings main::idx#8
Inlining constant with different constant siblings main::idx#9
Inlining constant with different constant siblings main::idx#10
Inlining constant with different constant siblings main::idx#11
Inlining constant with different constant siblings main::idx#12
Inlining constant with different constant siblings main::idx#13
Inlining constant with different constant siblings main::idx#14
Inlining constant with different constant siblings main::idx#15
Inlining constant with different constant siblings main::idx#16
Inlining constant with different constant siblings main::idx#17
Inlining constant with different constant siblings main::idx#18
Inlining constant with different constant siblings main::idx#19
Constant inlined main::idx#16 = ++++++++++++++++++++++++++++++++0
Constant inlined main::idx#17 = ++++++++++++++++++++++++++++++++++0
Constant inlined main::idx#18 = ++++++++++++++++++++++++++++++++++++0
Constant inlined main::idx#19 = ++++++++++++++++++++++++++++++++++++++0
Constant inlined main::idx#12 = ++++++++++++++++++++++++0
Constant inlined main::idx#13 = ++++++++++++++++++++++++++0
Constant inlined main::idx#14 = ++++++++++++++++++++++++++++0
Constant inlined main::idx#15 = ++++++++++++++++++++++++++++++0
Constant inlined main::idx#0 = 0
Constant inlined main::idx#1 = ++0
Constant inlined main::idx#2 = ++++0
Constant inlined main::idx#3 = ++++++0
Constant inlined main::idx#4 = ++++++++0
Constant inlined main::idx#5 = ++++++++++0
Constant inlined main::idx#6 = ++++++++++++0
Constant inlined main::idx#7 = ++++++++++++++0
Constant inlined main::idx#8 = ++++++++++++++++0
Constant inlined main::idx#9 = ++++++++++++++++++0
Constant inlined main::idx#10 = ++++++++++++++++++++0
Constant inlined main::idx#11 = ++++++++++++++++++++++0
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(SCREEN+++0)
Consolidated array index constant in *(SCREEN+++++0)
Consolidated array index constant in *(SCREEN+++++++0)
Consolidated array index constant in *(SCREEN+++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++++++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++++++++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++++++++++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++++++++++++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++++++++++++++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++++++++++++++++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++++++++++++++++++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++++++++++++++++++++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++++++++++++++++++++++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++++++++++++++++++++++++++++++0)
Successful SSA optimization Pass2ConstantAdditionElimination
Simplifying constant integer increment ++0
Simplifying constant integer increment ++0
Simplifying constant integer increment ++1
Simplifying constant integer increment ++2
Simplifying constant integer increment ++3
Simplifying constant integer increment ++4
Simplifying constant integer increment ++5
Simplifying constant integer increment ++6
Simplifying constant integer increment ++7
Simplifying constant integer increment ++8
Simplifying constant integer increment ++9
Simplifying constant integer increment ++$a
Simplifying constant integer increment ++$b
Simplifying constant integer increment ++$c
Simplifying constant integer increment ++$d
Simplifying constant integer increment ++$e
Simplifying constant integer increment ++$f
Simplifying constant integer increment ++$10
Simplifying constant integer increment ++$11
Successful SSA optimization Pass2ConstantSimplification
Simplifying constant integer increment ++1
Simplifying constant integer increment ++2
Simplifying constant integer increment ++3
Simplifying constant integer increment ++4
Simplifying constant integer increment ++5
Simplifying constant integer increment ++6
Simplifying constant integer increment ++7
Simplifying constant integer increment ++8
Simplifying constant integer increment ++9
Simplifying constant integer increment ++$a
Simplifying constant integer increment ++$b
Simplifying constant integer increment ++$c
Simplifying constant integer increment ++$d
Simplifying constant integer increment ++$e
Simplifying constant integer increment ++$f
Simplifying constant integer increment ++$10
Simplifying constant integer increment ++$11
Simplifying constant integer increment ++$12
Successful SSA optimization Pass2ConstantSimplification
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] *((byte*)(struct Point*)&main::v2) = main::v1_p_x
  [1] *((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_POINT_Y) = main::v1_p_y
  [2] *((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_Q) = main::v1_q_x
  [3] *((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_Y) = main::v1_q_y
  [4] *((struct Point*)&main::v3) = memcpy(*((struct Point*)&main::v2), struct Point, SIZEOF_STRUCT_POINT)
  [5] *((struct Point*)&main::v3+OFFSET_STRUCT_VECTOR_Q) = memcpy(*(&$0), struct Point, SIZEOF_STRUCT_POINT)
  [6] *(&main::v4) = memcpy(*(&main::v3), struct Vector, SIZEOF_STRUCT_VECTOR)
  [7] main::v5_p_x#0 = *((byte*)(struct Point*)&main::v4)
  [8] main::v5_p_y#0 = *((byte*)(struct Point*)&main::v4+OFFSET_STRUCT_POINT_Y)
  [9] *SCREEN = main::v1_p_x
  [10] *(SCREEN+1) = main::v1_p_y
  [11] *(SCREEN+2) = main::v1_q_x
  [12] *(SCREEN+3) = main::v1_q_y
  [13] *(SCREEN+4) = *((byte*)(struct Point*)&main::v2)
  [14] *(SCREEN+5) = *((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_POINT_Y)
  [15] *(SCREEN+6) = *((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_Q)
  [16] *(SCREEN+7) = *((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_Y)
  [17] *(SCREEN+8) = *((byte*)(struct Point*)&main::v3)
  [18] *(SCREEN+9) = *((byte*)(struct Point*)&main::v3+OFFSET_STRUCT_POINT_Y)
  [19] *(SCREEN+$a) = *((byte*)(struct Point*)&main::v3+OFFSET_STRUCT_VECTOR_Q)
  [20] *(SCREEN+$b) = *((byte*)(struct Point*)&main::v3+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_Y)
  [21] *(SCREEN+$c) = *((byte*)(struct Point*)&main::v4)
  [22] *(SCREEN+$d) = *((byte*)(struct Point*)&main::v4+OFFSET_STRUCT_POINT_Y)
  [23] *(SCREEN+$e) = *((byte*)(struct Point*)&main::v4+OFFSET_STRUCT_VECTOR_Q)
  [24] *(SCREEN+$f) = *((byte*)(struct Point*)&main::v4+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_Y)
  [25] *(SCREEN+$10) = main::v5_p_x#0
  [26] *(SCREEN+$11) = main::v5_p_y#0
  [27] *(SCREEN+$12) = main::v5_q_x
  [28] *(SCREEN+$13) = main::v5_q_y
  to:main::@return
main::@return: scope:[main]  from main
  [29] return 
  to:@return


VARIABLE REGISTER WEIGHTS
byte Point::x
byte Point::y
struct Point Vector::p
struct Point Vector::q
void main()
byte main::idx
struct Point main::v1_p
struct Point main::v1_q
struct Vector main::v2 loadstore
struct Vector main::v3 loadstore
struct Vector main::v4 loadstore
struct Point main::v5_p
byte main::v5_p_x
byte main::v5_p_x#0 0.2222222222222222
byte main::v5_p_y
byte main::v5_p_y#0 0.2222222222222222
struct Point main::v5_q

Initial phi equivalence classes
Added variable main::v5_p_x#0 to live range equivalence class [ main::v5_p_x#0 ]
Added variable main::v5_p_y#0 to live range equivalence class [ main::v5_p_y#0 ]
Added variable main::v2 to live range equivalence class [ main::v2 ]
Added variable main::v3 to live range equivalence class [ main::v3 ]
Added variable main::v4 to live range equivalence class [ main::v4 ]
Complete equivalence classes
[ main::v5_p_x#0 ]
[ main::v5_p_y#0 ]
[ main::v2 ]
[ main::v3 ]
[ main::v4 ]
Allocated zp[1]:2 [ main::v5_p_x#0 ]
Allocated zp[1]:3 [ main::v5_p_y#0 ]
Allocated zp[4]:4 [ main::v2 ]
Allocated zp[4]:8 [ main::v3 ]
Allocated zp[4]:12 [ main::v4 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *((byte*)(struct Point*)&main::v2) = main::v1_p_x [ main::v2 main::v3 main::v4 ] (  [ main::v2 main::v3 main::v4 ] { }  ) always clobbers reg byte a 
Statement [1] *((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_POINT_Y) = main::v1_p_y [ main::v2 main::v3 main::v4 ] (  [ main::v2 main::v3 main::v4 ] { }  ) always clobbers reg byte a 
Statement [2] *((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_Q) = main::v1_q_x [ main::v2 main::v3 main::v4 ] (  [ main::v2 main::v3 main::v4 ] { }  ) always clobbers reg byte a 
Statement [3] *((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_Y) = main::v1_q_y [ main::v2 main::v3 main::v4 ] (  [ main::v2 main::v3 main::v4 ] { }  ) always clobbers reg byte a 
Statement [4] *((struct Point*)&main::v3) = memcpy(*((struct Point*)&main::v2), struct Point, SIZEOF_STRUCT_POINT) [ main::v2 main::v3 main::v4 ] (  [ main::v2 main::v3 main::v4 ] { }  ) always clobbers reg byte a reg byte y 
Statement [5] *((struct Point*)&main::v3+OFFSET_STRUCT_VECTOR_Q) = memcpy(*(&$0), struct Point, SIZEOF_STRUCT_POINT) [ main::v2 main::v3 main::v4 ] (  [ main::v2 main::v3 main::v4 ] { }  ) always clobbers reg byte a reg byte y 
Statement [6] *(&main::v4) = memcpy(*(&main::v3), struct Vector, SIZEOF_STRUCT_VECTOR) [ main::v2 main::v3 main::v4 ] (  [ main::v2 main::v3 main::v4 ] { }  ) always clobbers reg byte a reg byte y 
Statement [9] *SCREEN = main::v1_p_x [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] (  [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::v5_p_x#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::v5_p_y#0 ]
Statement [10] *(SCREEN+1) = main::v1_p_y [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] (  [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [11] *(SCREEN+2) = main::v1_q_x [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] (  [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [12] *(SCREEN+3) = main::v1_q_y [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] (  [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [13] *(SCREEN+4) = *((byte*)(struct Point*)&main::v2) [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] (  [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [14] *(SCREEN+5) = *((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_POINT_Y) [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] (  [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [15] *(SCREEN+6) = *((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_Q) [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] (  [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [16] *(SCREEN+7) = *((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_Y) [ main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] (  [ main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [17] *(SCREEN+8) = *((byte*)(struct Point*)&main::v3) [ main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] (  [ main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [18] *(SCREEN+9) = *((byte*)(struct Point*)&main::v3+OFFSET_STRUCT_POINT_Y) [ main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] (  [ main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [19] *(SCREEN+$a) = *((byte*)(struct Point*)&main::v3+OFFSET_STRUCT_VECTOR_Q) [ main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] (  [ main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [20] *(SCREEN+$b) = *((byte*)(struct Point*)&main::v3+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_Y) [ main::v4 main::v5_p_x#0 main::v5_p_y#0 ] (  [ main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [21] *(SCREEN+$c) = *((byte*)(struct Point*)&main::v4) [ main::v4 main::v5_p_x#0 main::v5_p_y#0 ] (  [ main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [22] *(SCREEN+$d) = *((byte*)(struct Point*)&main::v4+OFFSET_STRUCT_POINT_Y) [ main::v4 main::v5_p_x#0 main::v5_p_y#0 ] (  [ main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [23] *(SCREEN+$e) = *((byte*)(struct Point*)&main::v4+OFFSET_STRUCT_VECTOR_Q) [ main::v4 main::v5_p_x#0 main::v5_p_y#0 ] (  [ main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [24] *(SCREEN+$f) = *((byte*)(struct Point*)&main::v4+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_Y) [ main::v5_p_x#0 main::v5_p_y#0 ] (  [ main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [27] *(SCREEN+$12) = main::v5_q_x [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [28] *(SCREEN+$13) = main::v5_q_y [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [0] *((byte*)(struct Point*)&main::v2) = main::v1_p_x [ main::v2 main::v3 main::v4 ] (  [ main::v2 main::v3 main::v4 ] { }  ) always clobbers reg byte a 
Statement [1] *((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_POINT_Y) = main::v1_p_y [ main::v2 main::v3 main::v4 ] (  [ main::v2 main::v3 main::v4 ] { }  ) always clobbers reg byte a 
Statement [2] *((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_Q) = main::v1_q_x [ main::v2 main::v3 main::v4 ] (  [ main::v2 main::v3 main::v4 ] { }  ) always clobbers reg byte a 
Statement [3] *((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_Y) = main::v1_q_y [ main::v2 main::v3 main::v4 ] (  [ main::v2 main::v3 main::v4 ] { }  ) always clobbers reg byte a 
Statement [4] *((struct Point*)&main::v3) = memcpy(*((struct Point*)&main::v2), struct Point, SIZEOF_STRUCT_POINT) [ main::v2 main::v3 main::v4 ] (  [ main::v2 main::v3 main::v4 ] { }  ) always clobbers reg byte a reg byte y 
Statement [5] *((struct Point*)&main::v3+OFFSET_STRUCT_VECTOR_Q) = memcpy(*(&$0), struct Point, SIZEOF_STRUCT_POINT) [ main::v2 main::v3 main::v4 ] (  [ main::v2 main::v3 main::v4 ] { }  ) always clobbers reg byte a reg byte y 
Statement [6] *(&main::v4) = memcpy(*(&main::v3), struct Vector, SIZEOF_STRUCT_VECTOR) [ main::v2 main::v3 main::v4 ] (  [ main::v2 main::v3 main::v4 ] { }  ) always clobbers reg byte a reg byte y 
Statement [9] *SCREEN = main::v1_p_x [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] (  [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [10] *(SCREEN+1) = main::v1_p_y [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] (  [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [11] *(SCREEN+2) = main::v1_q_x [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] (  [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [12] *(SCREEN+3) = main::v1_q_y [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] (  [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [13] *(SCREEN+4) = *((byte*)(struct Point*)&main::v2) [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] (  [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [14] *(SCREEN+5) = *((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_POINT_Y) [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] (  [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [15] *(SCREEN+6) = *((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_Q) [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] (  [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [16] *(SCREEN+7) = *((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_Y) [ main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] (  [ main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [17] *(SCREEN+8) = *((byte*)(struct Point*)&main::v3) [ main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] (  [ main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [18] *(SCREEN+9) = *((byte*)(struct Point*)&main::v3+OFFSET_STRUCT_POINT_Y) [ main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] (  [ main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [19] *(SCREEN+$a) = *((byte*)(struct Point*)&main::v3+OFFSET_STRUCT_VECTOR_Q) [ main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] (  [ main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [20] *(SCREEN+$b) = *((byte*)(struct Point*)&main::v3+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_Y) [ main::v4 main::v5_p_x#0 main::v5_p_y#0 ] (  [ main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [21] *(SCREEN+$c) = *((byte*)(struct Point*)&main::v4) [ main::v4 main::v5_p_x#0 main::v5_p_y#0 ] (  [ main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [22] *(SCREEN+$d) = *((byte*)(struct Point*)&main::v4+OFFSET_STRUCT_POINT_Y) [ main::v4 main::v5_p_x#0 main::v5_p_y#0 ] (  [ main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [23] *(SCREEN+$e) = *((byte*)(struct Point*)&main::v4+OFFSET_STRUCT_VECTOR_Q) [ main::v4 main::v5_p_x#0 main::v5_p_y#0 ] (  [ main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [24] *(SCREEN+$f) = *((byte*)(struct Point*)&main::v4+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_Y) [ main::v5_p_x#0 main::v5_p_y#0 ] (  [ main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [27] *(SCREEN+$12) = main::v5_q_x [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [28] *(SCREEN+$13) = main::v5_q_y [ ] (  [ ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::v5_p_x#0 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::v5_p_y#0 ] : zp[1]:3 , reg byte x , reg byte y , 
Potential registers zp[4]:4 [ main::v2 ] : zp[4]:4 , 
Potential registers zp[4]:8 [ main::v3 ] : zp[4]:8 , 
Potential registers zp[4]:12 [ main::v4 ] : zp[4]:12 , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 0.22: zp[1]:2 [ main::v5_p_x#0 ] 0.22: zp[1]:3 [ main::v5_p_y#0 ] 0: zp[4]:4 [ main::v2 ] 0: zp[4]:8 [ main::v3 ] 0: zp[4]:12 [ main::v4 ] 
Uplift Scope [Point] 
Uplift Scope [Vector] 
Uplift Scope [] 

Uplifting [main] best 224 combination reg byte y [ main::v5_p_x#0 ] reg byte x [ main::v5_p_y#0 ] zp[4]:4 [ main::v2 ] zp[4]:8 [ main::v3 ] zp[4]:12 [ main::v4 ] 
Uplifting [Point] best 224 combination 
Uplifting [Vector] best 224 combination 
Uplifting [] best 224 combination 
Allocated (was zp[4]:4) zp[4]:2 [ main::v2 ]
Allocated (was zp[4]:8) zp[4]:6 [ main::v3 ]
Allocated (was zp[4]:12) zp[4]:10 [ main::v4 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Minimal struct with Unwound behavior - struct containing struct copying
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFSET_STRUCT_POINT_Y = 1
  .const OFFSET_STRUCT_VECTOR_Q = 2
  .const SIZEOF_STRUCT_POINT = 2
  .const SIZEOF_STRUCT_VECTOR = 4
  .label SCREEN = $400
  // main
main: {
    .const v1_p_x = 2
    .const v1_p_y = 3
    .const v1_q_x = 4
    .const v1_q_y = 5
    .const v5_q_x = 8
    .const v5_q_y = 9
    .label v2 = 2
    .label v3 = 6
    .label v4 = $a
    // [0] *((byte*)(struct Point*)&main::v2) = main::v1_p_x -- _deref_pbuc1=vbuc2 
    lda #v1_p_x
    sta.z v2
    // [1] *((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_POINT_Y) = main::v1_p_y -- _deref_pbuc1=vbuc2 
    lda #v1_p_y
    sta v2+OFFSET_STRUCT_POINT_Y
    // [2] *((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_Q) = main::v1_q_x -- _deref_pbuc1=vbuc2 
    lda #v1_q_x
    sta v2+OFFSET_STRUCT_VECTOR_Q
    // [3] *((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_Y) = main::v1_q_y -- _deref_pbuc1=vbuc2 
    lda #v1_q_y
    sta v2+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_Y
    // [4] *((struct Point*)&main::v3) = memcpy(*((struct Point*)&main::v2), struct Point, SIZEOF_STRUCT_POINT) -- _deref_pssc1=_deref_pssc2_memcpy_vbuc3 
    ldy #SIZEOF_STRUCT_POINT
  !:
    lda v2-1,y
    sta v3-1,y
    dey
    bne !-
    // [5] *((struct Point*)&main::v3+OFFSET_STRUCT_VECTOR_Q) = memcpy(*(&$0), struct Point, SIZEOF_STRUCT_POINT) -- _deref_pssc1=_deref_pssc2_memcpy_vbuc3 
    ldy #SIZEOF_STRUCT_POINT
  !:
    lda __0-1,y
    sta v3+OFFSET_STRUCT_VECTOR_Q-1,y
    dey
    bne !-
    // [6] *(&main::v4) = memcpy(*(&main::v3), struct Vector, SIZEOF_STRUCT_VECTOR) -- _deref_pssc1=_deref_pssc2_memcpy_vbuc3 
    ldy #SIZEOF_STRUCT_VECTOR
  !:
    lda v3-1,y
    sta v4-1,y
    dey
    bne !-
    // [7] main::v5_p_x#0 = *((byte*)(struct Point*)&main::v4) -- vbuyy=_deref_pbuc1 
    ldy.z v4
    // [8] main::v5_p_y#0 = *((byte*)(struct Point*)&main::v4+OFFSET_STRUCT_POINT_Y) -- vbuxx=_deref_pbuc1 
    ldx v4+OFFSET_STRUCT_POINT_Y
    // [9] *SCREEN = main::v1_p_x -- _deref_pbuc1=vbuc2 
    lda #v1_p_x
    sta SCREEN
    // [10] *(SCREEN+1) = main::v1_p_y -- _deref_pbuc1=vbuc2 
    lda #v1_p_y
    sta SCREEN+1
    // [11] *(SCREEN+2) = main::v1_q_x -- _deref_pbuc1=vbuc2 
    lda #v1_q_x
    sta SCREEN+2
    // [12] *(SCREEN+3) = main::v1_q_y -- _deref_pbuc1=vbuc2 
    lda #v1_q_y
    sta SCREEN+3
    // [13] *(SCREEN+4) = *((byte*)(struct Point*)&main::v2) -- _deref_pbuc1=_deref_pbuc2 
    lda.z v2
    sta SCREEN+4
    // [14] *(SCREEN+5) = *((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda v2+OFFSET_STRUCT_POINT_Y
    sta SCREEN+5
    // [15] *(SCREEN+6) = *((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_Q) -- _deref_pbuc1=_deref_pbuc2 
    lda v2+OFFSET_STRUCT_VECTOR_Q
    sta SCREEN+6
    // [16] *(SCREEN+7) = *((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda v2+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_Y
    sta SCREEN+7
    // [17] *(SCREEN+8) = *((byte*)(struct Point*)&main::v3) -- _deref_pbuc1=_deref_pbuc2 
    lda.z v3
    sta SCREEN+8
    // [18] *(SCREEN+9) = *((byte*)(struct Point*)&main::v3+OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda v3+OFFSET_STRUCT_POINT_Y
    sta SCREEN+9
    // [19] *(SCREEN+$a) = *((byte*)(struct Point*)&main::v3+OFFSET_STRUCT_VECTOR_Q) -- _deref_pbuc1=_deref_pbuc2 
    lda v3+OFFSET_STRUCT_VECTOR_Q
    sta SCREEN+$a
    // [20] *(SCREEN+$b) = *((byte*)(struct Point*)&main::v3+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda v3+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_Y
    sta SCREEN+$b
    // [21] *(SCREEN+$c) = *((byte*)(struct Point*)&main::v4) -- _deref_pbuc1=_deref_pbuc2 
    lda.z v4
    sta SCREEN+$c
    // [22] *(SCREEN+$d) = *((byte*)(struct Point*)&main::v4+OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda v4+OFFSET_STRUCT_POINT_Y
    sta SCREEN+$d
    // [23] *(SCREEN+$e) = *((byte*)(struct Point*)&main::v4+OFFSET_STRUCT_VECTOR_Q) -- _deref_pbuc1=_deref_pbuc2 
    lda v4+OFFSET_STRUCT_VECTOR_Q
    sta SCREEN+$e
    // [24] *(SCREEN+$f) = *((byte*)(struct Point*)&main::v4+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda v4+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_Y
    sta SCREEN+$f
    // [25] *(SCREEN+$10) = main::v5_p_x#0 -- _deref_pbuc1=vbuyy 
    sty SCREEN+$10
    // [26] *(SCREEN+$11) = main::v5_p_y#0 -- _deref_pbuc1=vbuxx 
    stx SCREEN+$11
    // [27] *(SCREEN+$12) = main::v5_q_x -- _deref_pbuc1=vbuc2 
    lda #v5_q_x
    sta SCREEN+$12
    // [28] *(SCREEN+$13) = main::v5_q_y -- _deref_pbuc1=vbuc2 
    lda #v5_q_y
    sta SCREEN+$13
    jmp __breturn
    // main::@return
  __breturn:
    // [29] return 
    rts
}
  // File Data
  __0: .byte 6, 7

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction lda.z v4 with TYA
Replacing instruction lda v4+OFFSET_STRUCT_POINT_Y with TXA
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
const struct Point $0 = { x: 6, y: 7 }
const byte OFFSET_STRUCT_POINT_Y = 1
const byte OFFSET_STRUCT_VECTOR_Q = 2
byte Point::x
byte Point::y
const nomodify byte* SCREEN = (byte*) 1024
const byte SIZEOF_STRUCT_POINT = 2
const byte SIZEOF_STRUCT_VECTOR = 4
struct Point Vector::p
struct Point Vector::q
void main()
label main::@return
byte main::idx
struct Point main::v1_p
const byte main::v1_p_x = 2
const byte main::v1_p_y = 3
struct Point main::v1_q
const byte main::v1_q_x = 4
const byte main::v1_q_y = 5
struct Vector main::v2 loadstore zp[4]:2
struct Vector main::v3 loadstore zp[4]:6
struct Vector main::v4 loadstore zp[4]:10
struct Point main::v5_p
byte main::v5_p_x
byte main::v5_p_x#0 reg byte y 0.2222222222222222
byte main::v5_p_y
byte main::v5_p_y#0 reg byte x 0.2222222222222222
struct Point main::v5_q
const byte main::v5_q_x = 8
const byte main::v5_q_y = 9

reg byte y [ main::v5_p_x#0 ]
reg byte x [ main::v5_p_y#0 ]
zp[4]:2 [ main::v2 ]
zp[4]:6 [ main::v3 ]
zp[4]:10 [ main::v4 ]


FINAL ASSEMBLER
Score: 218

  // File Comments
// Minimal struct with Unwound behavior - struct containing struct copying
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFSET_STRUCT_POINT_Y = 1
  .const OFFSET_STRUCT_VECTOR_Q = 2
  .const SIZEOF_STRUCT_POINT = 2
  .const SIZEOF_STRUCT_VECTOR = 4
  .label SCREEN = $400
  // main
main: {
    .const v1_p_x = 2
    .const v1_p_y = 3
    .const v1_q_x = 4
    .const v1_q_y = 5
    .const v5_q_x = 8
    .const v5_q_y = 9
    .label v2 = 2
    .label v3 = 6
    .label v4 = $a
    // v2 = v1
    // [0] *((byte*)(struct Point*)&main::v2) = main::v1_p_x -- _deref_pbuc1=vbuc2 
    lda #v1_p_x
    sta.z v2
    // [1] *((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_POINT_Y) = main::v1_p_y -- _deref_pbuc1=vbuc2 
    lda #v1_p_y
    sta v2+OFFSET_STRUCT_POINT_Y
    // [2] *((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_Q) = main::v1_q_x -- _deref_pbuc1=vbuc2 
    lda #v1_q_x
    sta v2+OFFSET_STRUCT_VECTOR_Q
    // [3] *((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_Y) = main::v1_q_y -- _deref_pbuc1=vbuc2 
    lda #v1_q_y
    sta v2+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_Y
    // v3 = { v2.p, {6, 7} }
    // [4] *((struct Point*)&main::v3) = memcpy(*((struct Point*)&main::v2), struct Point, SIZEOF_STRUCT_POINT) -- _deref_pssc1=_deref_pssc2_memcpy_vbuc3 
    ldy #SIZEOF_STRUCT_POINT
  !:
    lda v2-1,y
    sta v3-1,y
    dey
    bne !-
    // [5] *((struct Point*)&main::v3+OFFSET_STRUCT_VECTOR_Q) = memcpy(*(&$0), struct Point, SIZEOF_STRUCT_POINT) -- _deref_pssc1=_deref_pssc2_memcpy_vbuc3 
    ldy #SIZEOF_STRUCT_POINT
  !:
    lda __0-1,y
    sta v3+OFFSET_STRUCT_VECTOR_Q-1,y
    dey
    bne !-
    // v4 = v3
    // [6] *(&main::v4) = memcpy(*(&main::v3), struct Vector, SIZEOF_STRUCT_VECTOR) -- _deref_pssc1=_deref_pssc2_memcpy_vbuc3 
    ldy #SIZEOF_STRUCT_VECTOR
  !:
    lda v3-1,y
    sta v4-1,y
    dey
    bne !-
    // v5 = { {v4.p.x, v4.p.y }, {8, 9} }
    // [7] main::v5_p_x#0 = *((byte*)(struct Point*)&main::v4) -- vbuyy=_deref_pbuc1 
    ldy.z v4
    // [8] main::v5_p_y#0 = *((byte*)(struct Point*)&main::v4+OFFSET_STRUCT_POINT_Y) -- vbuxx=_deref_pbuc1 
    ldx v4+OFFSET_STRUCT_POINT_Y
    // SCREEN[idx++] = v1.p.x
    // [9] *SCREEN = main::v1_p_x -- _deref_pbuc1=vbuc2 
    lda #v1_p_x
    sta SCREEN
    // SCREEN[idx++] = v1.p.y
    // [10] *(SCREEN+1) = main::v1_p_y -- _deref_pbuc1=vbuc2 
    lda #v1_p_y
    sta SCREEN+1
    // SCREEN[idx++] = v1.q.x
    // [11] *(SCREEN+2) = main::v1_q_x -- _deref_pbuc1=vbuc2 
    lda #v1_q_x
    sta SCREEN+2
    // SCREEN[idx++] = v1.q.y
    // [12] *(SCREEN+3) = main::v1_q_y -- _deref_pbuc1=vbuc2 
    lda #v1_q_y
    sta SCREEN+3
    // SCREEN[idx++] = v2.p.x
    // [13] *(SCREEN+4) = *((byte*)(struct Point*)&main::v2) -- _deref_pbuc1=_deref_pbuc2 
    lda.z v2
    sta SCREEN+4
    // SCREEN[idx++] = v2.p.y
    // [14] *(SCREEN+5) = *((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda v2+OFFSET_STRUCT_POINT_Y
    sta SCREEN+5
    // SCREEN[idx++] = v2.q.x
    // [15] *(SCREEN+6) = *((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_Q) -- _deref_pbuc1=_deref_pbuc2 
    lda v2+OFFSET_STRUCT_VECTOR_Q
    sta SCREEN+6
    // SCREEN[idx++] = v2.q.y
    // [16] *(SCREEN+7) = *((byte*)(struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda v2+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_Y
    sta SCREEN+7
    // SCREEN[idx++] = v3.p.x
    // [17] *(SCREEN+8) = *((byte*)(struct Point*)&main::v3) -- _deref_pbuc1=_deref_pbuc2 
    lda.z v3
    sta SCREEN+8
    // SCREEN[idx++] = v3.p.y
    // [18] *(SCREEN+9) = *((byte*)(struct Point*)&main::v3+OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda v3+OFFSET_STRUCT_POINT_Y
    sta SCREEN+9
    // SCREEN[idx++] = v3.q.x
    // [19] *(SCREEN+$a) = *((byte*)(struct Point*)&main::v3+OFFSET_STRUCT_VECTOR_Q) -- _deref_pbuc1=_deref_pbuc2 
    lda v3+OFFSET_STRUCT_VECTOR_Q
    sta SCREEN+$a
    // SCREEN[idx++] = v3.q.y
    // [20] *(SCREEN+$b) = *((byte*)(struct Point*)&main::v3+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda v3+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_Y
    sta SCREEN+$b
    // SCREEN[idx++] = v4.p.x
    // [21] *(SCREEN+$c) = *((byte*)(struct Point*)&main::v4) -- _deref_pbuc1=_deref_pbuc2 
    tya
    sta SCREEN+$c
    // SCREEN[idx++] = v4.p.y
    // [22] *(SCREEN+$d) = *((byte*)(struct Point*)&main::v4+OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    txa
    sta SCREEN+$d
    // SCREEN[idx++] = v4.q.x
    // [23] *(SCREEN+$e) = *((byte*)(struct Point*)&main::v4+OFFSET_STRUCT_VECTOR_Q) -- _deref_pbuc1=_deref_pbuc2 
    lda v4+OFFSET_STRUCT_VECTOR_Q
    sta SCREEN+$e
    // SCREEN[idx++] = v4.q.y
    // [24] *(SCREEN+$f) = *((byte*)(struct Point*)&main::v4+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda v4+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_Y
    sta SCREEN+$f
    // SCREEN[idx++] = v5.p.x
    // [25] *(SCREEN+$10) = main::v5_p_x#0 -- _deref_pbuc1=vbuyy 
    sty SCREEN+$10
    // SCREEN[idx++] = v5.p.y
    // [26] *(SCREEN+$11) = main::v5_p_y#0 -- _deref_pbuc1=vbuxx 
    stx SCREEN+$11
    // SCREEN[idx++] = v5.q.x
    // [27] *(SCREEN+$12) = main::v5_q_x -- _deref_pbuc1=vbuc2 
    lda #v5_q_x
    sta SCREEN+$12
    // SCREEN[idx++] = v5.q.y
    // [28] *(SCREEN+$13) = main::v5_q_y -- _deref_pbuc1=vbuc2 
    lda #v5_q_y
    sta SCREEN+$13
    // main::@return
    // }
    // [29] return 
    rts
}
  // File Data
  __0: .byte 6, 7

