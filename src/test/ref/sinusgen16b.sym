__constant const unsigned long PI2_u4f28 = $6487ed51
__constant const unsigned int PI_HALF_u4f12 = $1922
__constant const unsigned long PI_HALF_u4f28 = $1921fb54
__constant const unsigned int PI_u4f12 = $3244
__constant const unsigned long PI_u4f28 = $3243f6a9
__constant char RADIX::BINARY = 2
__constant char RADIX::DECIMAL = $a
__constant char RADIX::HEXADECIMAL = $10
__constant char RADIX::OCTAL = 8
__constant char SIZEOF_INT = 2
unsigned long div32u16u(unsigned long dividend , unsigned int divisor)
unsigned long div32u16u::dividend
unsigned int div32u16u::divisor
unsigned long div32u16u::quotient
unsigned int div32u16u::quotient_hi
unsigned int div32u16u::quotient_hi#0 // quotient_hi zp[2]:26 40.4
unsigned int div32u16u::quotient_lo
unsigned int div32u16u::quotient_lo#0 // quotient_lo zp[2]:10 202.0
unsigned long div32u16u::return
unsigned long div32u16u::return#0 // return zp[4]:34 22.0
unsigned long div32u16u::return#1 // return zp[4]:34 30.75
unsigned long div32u16u::return#3 // return zp[4]:34 22.0
unsigned int divr16u(unsigned int dividend , unsigned int divisor , unsigned int rem)
char divr16u::$1 // reg byte a 20002.0
char divr16u::$2 // reg byte a 20002.0
unsigned int divr16u::dividend
unsigned int divr16u::dividend#0 // dividend zp[2]:18 2500.25
unsigned int divr16u::dividend#3 // dividend zp[2]:18 4429.142857142857
unsigned int divr16u::dividend#5 // dividend zp[2]:18 1001.0
unsigned int divr16u::divisor
char divr16u::i
char divr16u::i#1 // reg byte x 15001.5
char divr16u::i#2 // reg byte x 1538.6153846153845
unsigned int divr16u::quotient
unsigned int divr16u::quotient#1 // quotient zp[2]:10 15001.5
unsigned int divr16u::quotient#2 // quotient zp[2]:10 10001.0
unsigned int divr16u::quotient#3 // quotient zp[2]:10 2500.25
unsigned int divr16u::rem
unsigned int divr16u::rem#0 // rem zp[2]:12 7500.75
unsigned int divr16u::rem#1 // rem zp[2]:12 20002.0
unsigned int divr16u::rem#10 // rem zp[2]:12 1102.0
unsigned int divr16u::rem#11 // rem zp[2]:12 10334.666666666666
unsigned int divr16u::rem#2 // rem zp[2]:12 20002.0
unsigned int divr16u::rem#4 // rem zp[2]:12 202.0
unsigned int divr16u::rem#5 // rem zp[2]:12 21003.0
unsigned int divr16u::rem#6 // rem zp[2]:12 10001.0
unsigned int divr16u::return
unsigned int divr16u::return#0 // return zp[2]:10 4315.0
unsigned int divr16u::return#2 // return zp[2]:10 202.0
unsigned int divr16u::return#3 // return zp[2]:10 202.0
void main()
char main::i
char main::i#1 // i zp[1]:38 16.5
char main::i#2 // i zp[1]:38 1.8333333333333333
__constant int main::sintab1[$78] = { fill( $78, 0) }
__constant int main::sintab2[$78] = { fill( $78, 0) }
int *main::st1
int *main::st1#1 // st1 zp[2]:41 5.5
int *main::st1#2 // st1 zp[2]:41 3.3000000000000003
int *main::st2
int *main::st2#1 // st2 zp[2]:39 7.333333333333333
int *main::st2#2 // st2 zp[2]:39 3.0
__constant char main::str[4] = "   "
__constant char main::str1[2] = " "
int main::sw
int main::sw#0 // sw zp[2]:24 6.6000000000000005
__constant unsigned int main::wavelength = $78
void * memset(void *str , char c , unsigned int num)
char memset::c
__constant char memset::c#0 = ' ' // c
char *memset::dst
char *memset::dst#1 // dst zp[2]:16 2002.0
char *memset::dst#2 // dst zp[2]:16 1334.6666666666667
char *memset::end
__constant char *memset::end#0 = (char *)memset::str#0+memset::num#0 // end
unsigned int memset::num
__constant unsigned int memset::num#0 = $3e8 // num
void *memset::return
void *memset::str
__constant void *memset::str#0 = (void *)print_screen#0 // str
unsigned long mul16u(unsigned int a , unsigned int b)
char mul16u::$1 // reg byte a 2.0000002E7
unsigned int mul16u::a
unsigned int mul16u::a#0 // a zp[2]:10 36667.33333333333
unsigned int mul16u::a#1 // a zp[2]:10 1.0000001E7
unsigned int mul16u::a#2 // a zp[2]:10 6683334.166666666
unsigned int mul16u::b
unsigned int mul16u::b#0 // b zp[2]:18 10001.0
unsigned long mul16u::mb
unsigned long mul16u::mb#0 // mb zp[4]:6 200002.0
unsigned long mul16u::mb#1 // mb zp[4]:6 2.0000002E7
unsigned long mul16u::mb#2 // mb zp[4]:6 4300000.571428571
unsigned long mul16u::res
unsigned long mul16u::res#1 // res zp[4]:2 2.0000002E7
unsigned long mul16u::res#2 // res zp[4]:2 5001667.333333333
unsigned long mul16u::res#6 // res zp[4]:2 1.0000001E7
unsigned long mul16u::return
unsigned long mul16u::return#0 // return zp[4]:2 20002.0
unsigned int mulu16_sel(unsigned int v1 , unsigned int v2 , char select)
unsigned long mulu16_sel::$0 // zp[4]:2 20002.0
unsigned long mulu16_sel::$1 // zp[4]:2 20002.0
unsigned int mulu16_sel::return
unsigned int mulu16_sel::return#0 // return zp[2]:10 2002.0
unsigned int mulu16_sel::return#1 // return_1 zp[2]:12 2002.0
unsigned int mulu16_sel::return#10 // return_1 zp[2]:12 2002.0
unsigned int mulu16_sel::return#11 // return zp[2]:10 2002.0
unsigned int mulu16_sel::return#14 // return zp[2]:10 2002.0
unsigned int mulu16_sel::return#15 // return_1 zp[2]:12 2002.0
unsigned int mulu16_sel::return#16 // return zp[2]:10 2002.0
unsigned int mulu16_sel::return#17 // return zp[2]:10 1667.5833333333333
unsigned int mulu16_sel::return#18 // return_1 zp[2]:12 2002.0
unsigned int mulu16_sel::return#19 // return_1 zp[2]:12 2002.0
unsigned int mulu16_sel::return#20 // return zp[2]:10 2002.0
char mulu16_sel::select
char mulu16_sel::select#10 // reg byte x 1666.8333333333333
unsigned int mulu16_sel::v1
unsigned int mulu16_sel::v1#0 // v1 zp[2]:12 1001.0
unsigned int mulu16_sel::v1#1 // v1 zp[2]:12 1001.0
unsigned int mulu16_sel::v1#10 // v1 zp[2]:12 20011.0
unsigned int mulu16_sel::v1#2 // v1 zp[2]:12 2002.0
unsigned int mulu16_sel::v1#3 // v1 zp[2]:12 1001.0
unsigned int mulu16_sel::v1#4 // v1 zp[2]:12 1001.0
unsigned int mulu16_sel::v1#5 // v1 zp[2]:12 1001.0
unsigned int mulu16_sel::v1#6 // v1 zp[2]:12 1001.0
unsigned int mulu16_sel::v1#7 // v1 zp[2]:12 2002.0
unsigned int mulu16_sel::v1#8 // v1 zp[2]:12 1001.0
unsigned int mulu16_sel::v1#9 // v1 zp[2]:12 1001.0
unsigned int mulu16_sel::v2
unsigned int mulu16_sel::v2#0 // v2 zp[2]:18 2002.0
unsigned int mulu16_sel::v2#1 // v2 zp[2]:18 2002.0
unsigned int mulu16_sel::v2#10 // v2 zp[2]:18 9004.5
unsigned int mulu16_sel::v2#3 // v2 zp[2]:18 2002.0
unsigned int mulu16_sel::v2#4 // v2 zp[2]:18 2002.0
unsigned int mulu16_sel::v2#5 // v2 zp[2]:18 2002.0
unsigned int mulu16_sel::v2#6 // v2 zp[2]:18 2002.0
unsigned int mulu16_sel::v2#8 // v2 zp[2]:18 2002.0
unsigned int mulu16_sel::v2#9 // v2 zp[2]:18 2002.0
void print_char(char ch)
char print_char::ch
char print_char::ch#0 // reg byte a 20002.0
char print_char::ch#3 // reg byte a 20002.0
char print_char::ch#4 // reg byte a 20002.0
char print_char::ch#5 // reg byte a 130004.0
char *print_char_cursor
char *print_char_cursor#1 // print_char_cursor zp[2]:14 2012.5
char *print_char_cursor#12 // print_char_cursor zp[2]:14 5000.576923076923
char *print_char_cursor#36 // print_char_cursor zp[2]:14 115103.5
char *print_char_cursor#54 // print_char_cursor zp[2]:14 44.8
char *print_char_cursor#55 // print_char_cursor zp[2]:14 8.25
char *print_char_cursor#57 // print_char_cursor zp[2]:14 123.0
void print_cls()
__constant const char print_hextab[] = "0123456789abcdef"z
char *print_line_cursor
char *print_screen
__constant char *print_screen#0 = (char *) 1024 // print_screen
void print_sint(int w)
int print_sint::w
int print_sint::w#0 // w zp[2]:24 202.0
int print_sint::w#1 // w zp[2]:24 52.33333333333333
int print_sint::w#4 // w zp[2]:24 202.0
void print_str(char *str)
char *print_str::str
char *print_str::str#0 // str zp[2]:16 20002.0
char *print_str::str#3 // str zp[2]:16 10026.25
char *print_str::str#6 // str zp[2]:16 101.0
void print_uchar(char b)
char print_uchar::$0 // reg byte a 20002.0
char print_uchar::$2 // reg byte x 20002.0
char print_uchar::b
char print_uchar::b#0 // reg byte x 2002.0
char print_uchar::b#1 // reg byte x 2002.0
char print_uchar::b#2 // reg byte x 5501.0
void print_uint(unsigned int w)
unsigned int print_uint::w
unsigned int print_uint::w#0 // w zp[2]:24 701.0
unsigned int rem16u
unsigned int rem16u#17 // rem16u zp[2]:12 220.39999999999998
int sin16s(unsigned long x)
unsigned long sin16s::$4 // zp[4]:2 2002.0
char sin16s::isUpper
char sin16s::isUpper#2 // reg byte y 30.333333333333332
int sin16s::return
int sin16s::return#0 // return zp[2]:16 202.0
int sin16s::return#1 // return zp[2]:16 701.0
int sin16s::return#5 // return zp[2]:16 2002.0
int sin16s::sinx
int sin16s::sinx#1 // sinx zp[2]:16 2002.0
unsigned int sin16s::usinx
unsigned int sin16s::usinx#0 // usinx zp[2]:16 166.83333333333334
unsigned int sin16s::usinx#1 // usinx zp[2]:16 500.5
unsigned long sin16s::x
unsigned long sin16s::x#0 // x zp[4]:20 1552.0
unsigned long sin16s::x#1 // x zp[4]:20 2002.0
unsigned long sin16s::x#2 // x zp[4]:20 2002.0
unsigned long sin16s::x#4 // x zp[4]:20 2502.5
unsigned long sin16s::x#6 // x zp[4]:20 3003.0
unsigned int sin16s::x1
unsigned int sin16s::x1#0 // x1 zp[2]:26 318.5
unsigned int sin16s::x2
unsigned int sin16s::x2#0 // x2 zp[2]:12 2002.0
unsigned int sin16s::x3
unsigned int sin16s::x3#0 // x3 zp[2]:12 500.5
unsigned int sin16s::x3_6
unsigned int sin16s::x3_6#0 // x3_6 zp[2]:10 2002.0
unsigned int sin16s::x4
unsigned int sin16s::x4#0 // x4 zp[2]:12 2002.0
unsigned int sin16s::x5
unsigned int sin16s::x5#0 // x5 zp[2]:10 2002.0
unsigned int sin16s::x5_128
unsigned int sin16s::x5_128#0 // x5_128 zp[2]:10 2002.0
void sin16s_gen(int *sintab , unsigned int wavelength)
int sin16s_gen::$2 // zp[2]:16 202.0
unsigned int sin16s_gen::i
unsigned int sin16s_gen::i#1 // i zp[2]:24 202.0
unsigned int sin16s_gen::i#2 // i zp[2]:24 33.666666666666664
int *sin16s_gen::sintab
int *sin16s_gen::sintab#0 // sintab zp[2]:32 67.33333333333333
int *sin16s_gen::sintab#2 // sintab zp[2]:32 43.285714285714285
unsigned long sin16s_gen::step
unsigned long sin16s_gen::step#0 // step zp[4]:34 10.181818181818182
unsigned int sin16s_gen::wavelength
unsigned long sin16s_gen::x
unsigned long sin16s_gen::x#1 // x zp[4]:28 101.0
unsigned long sin16s_gen::x#2 // x zp[4]:28 37.875
void sin16s_genb(int *sintab , unsigned int wavelength)
int sin16s_genb::$3 // zp[2]:14 202.0
unsigned int sin16s_genb::i
unsigned int sin16s_genb::i#1 // i zp[2]:24 202.0
unsigned int sin16s_genb::i#2 // i zp[2]:24 33.666666666666664
int *sin16s_genb::sintab
int *sin16s_genb::sintab#0 // sintab zp[2]:32 67.33333333333333
int *sin16s_genb::sintab#2 // sintab zp[2]:32 43.285714285714285
unsigned long sin16s_genb::step
unsigned long sin16s_genb::step#0 // step zp[4]:34 10.181818181818182
unsigned int sin16s_genb::wavelength
unsigned long sin16s_genb::x
unsigned long sin16s_genb::x#1 // x zp[4]:28 101.0
unsigned long sin16s_genb::x#2 // x zp[4]:28 37.875
int sin16sb(unsigned int x)
char sin16sb::isUpper
char sin16sb::isUpper#2 // reg byte y 31.28125
int sin16sb::return
int sin16sb::return#0 // return zp[2]:14 202.0
int sin16sb::return#1 // return zp[2]:14 701.0
int sin16sb::return#5 // return zp[2]:14 2002.0
int sin16sb::sinx
int sin16sb::sinx#1 // sinx zp[2]:14 2002.0
unsigned int sin16sb::usinx
unsigned int sin16sb::usinx#0 // usinx zp[2]:14 166.83333333333334
unsigned int sin16sb::usinx#1 // usinx zp[2]:14 500.5
unsigned int sin16sb::x
unsigned int sin16sb::x#0 // x zp[2]:16 1552.0
unsigned int sin16sb::x#1 // x zp[2]:16 2002.0
unsigned int sin16sb::x#2 // x zp[2]:16 2002.0
unsigned int sin16sb::x#4 // x zp[2]:16 2502.5
unsigned int sin16sb::x#6 // x zp[2]:16 3003.0
unsigned int sin16sb::x1
unsigned int sin16sb::x1#0 // x1 zp[2]:16 318.5
unsigned int sin16sb::x2
unsigned int sin16sb::x2#0 // x2 zp[2]:12 2002.0
unsigned int sin16sb::x3
unsigned int sin16sb::x3#0 // x3 zp[2]:12 500.5
unsigned int sin16sb::x3_6
unsigned int sin16sb::x3_6#0 // x3_6 zp[2]:10 2002.0
unsigned int sin16sb::x4
unsigned int sin16sb::x4#0 // x4 zp[2]:12 2002.0
unsigned int sin16sb::x5
unsigned int sin16sb::x5#0 // x5 zp[2]:10 2002.0
unsigned int sin16sb::x5_128
unsigned int sin16sb::x5_128#0 // x5_128 zp[2]:10 2002.0

zp[2]:41 [ main::st1#2 main::st1#1 ]
zp[2]:39 [ main::st2#2 main::st2#1 ]
zp[1]:38 [ main::i#2 main::i#1 ]
zp[4]:28 [ sin16s_genb::x#2 sin16s_genb::x#1 sin16s_gen::x#2 sin16s_gen::x#1 ]
zp[2]:32 [ sin16s_genb::sintab#2 sin16s_genb::sintab#0 sin16s_gen::sintab#2 sin16s_gen::sintab#0 ]
zp[2]:24 [ print_sint::w#4 print_sint::w#0 print_sint::w#1 main::sw#0 print_uint::w#0 sin16s_genb::i#2 sin16s_genb::i#1 sin16s_gen::i#2 sin16s_gen::i#1 ]
reg byte y [ sin16s::isUpper#2 ]
zp[4]:20 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ]
reg byte y [ sin16sb::isUpper#2 ]
zp[2]:16 [ memset::dst#2 memset::dst#1 sin16sb::x#6 sin16sb::x#4 sin16sb::x#0 sin16sb::x#1 sin16sb::x#2 sin16sb::x1#0 sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 sin16s::return#0 sin16s_gen::$2 sin16s::usinx#0 print_str::str#3 print_str::str#6 print_str::str#0 ]
reg byte a [ print_char::ch#5 print_char::ch#0 print_char::ch#3 print_char::ch#4 ]
zp[2]:14 [ print_char_cursor#36 print_char_cursor#57 print_char_cursor#54 print_char_cursor#55 print_char_cursor#1 print_char_cursor#12 sin16sb::return#1 sin16sb::return#5 sin16sb::sinx#1 sin16sb::usinx#1 sin16sb::return#0 sin16s_genb::$3 sin16sb::usinx#0 ]
reg byte x [ divr16u::i#2 divr16u::i#1 ]
zp[2]:12 [ mulu16_sel::v1#10 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 mulu16_sel::v1#9 mulu16_sel::v1#5 mulu16_sel::v1#6 mulu16_sel::v1#7 mulu16_sel::v1#8 sin16s::x3#0 sin16sb::x3#0 sin16s::x2#0 sin16s::x4#0 sin16sb::x2#0 sin16sb::x4#0 mulu16_sel::return#1 mulu16_sel::return#15 mulu16_sel::return#18 mulu16_sel::return#19 mulu16_sel::return#10 divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 rem16u#17 ]
zp[2]:18 [ mulu16_sel::v2#10 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#3 mulu16_sel::v2#9 mulu16_sel::v2#5 mulu16_sel::v2#6 mulu16_sel::v2#8 mul16u::b#0 divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 ]
reg byte x [ mulu16_sel::select#10 ]
reg byte x [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
zp[4]:6 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
zp[4]:34 [ div32u16u::return#0 sin16s_gen::step#0 div32u16u::return#1 div32u16u::return#3 sin16s_genb::step#0 ]
zp[4]:2 [ sin16s::$4 mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#0 mulu16_sel::$0 mulu16_sel::$1 ]
zp[2]:26 [ sin16s::x1#0 div32u16u::quotient_hi#0 ]
zp[2]:10 [ mulu16_sel::return#0 mulu16_sel::return#17 mulu16_sel::return#14 sin16s::x3_6#0 mulu16_sel::return#16 sin16s::x5#0 mulu16_sel::return#20 sin16sb::x3_6#0 mulu16_sel::return#11 sin16sb::x5#0 sin16s::x5_128#0 sin16sb::x5_128#0 mul16u::a#2 mul16u::a#0 mul16u::a#1 divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 div32u16u::quotient_lo#0 ]
reg byte a [ divr16u::$1 ]
reg byte a [ divr16u::$2 ]
reg byte a [ print_uchar::$0 ]
reg byte x [ print_uchar::$2 ]
reg byte a [ mul16u::$1 ]
