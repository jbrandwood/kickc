Resolving typeid() (byte~) testUnsigned::$0 ← typeid  (byte/signed byte/word/signed word/dword/signed dword) $7b
Resolving typeid() (byte~) testUnsigned::$1 ← typeid  (byte) testUnsigned::ubv1
Resolving typeid() (byte~) testUnsigned::$3 ← typeid  (byte/word/signed word/dword/signed dword~) testUnsigned::$2
Resolving typeid() (byte~) testUnsigned::$5 ← typeid  (byte/signed word/word/dword/signed dword~) testUnsigned::$4
Resolving typeid() (byte~) testUnsigned::$7 ← typeid  (byte/signed word/word/dword/signed dword~) testUnsigned::$6
Resolving typeid() (byte~) testUnsigned::$9 ← typeid  (byte~) testUnsigned::$8
Resolving typeid() (byte~) testSigned::$1 ← typeid  (signed byte/signed word/signed dword~) testSigned::$0
Resolving typeid() (byte~) testSigned::$2 ← typeid  (signed byte) testSigned::sbv1
Resolving typeid() (byte~) testSigned::$6 ← typeid  (signed byte/signed word/signed dword~) testSigned::$5
Resolving typeid() (byte~) testSigned::$9 ← typeid  (signed word/signed byte/signed dword~) testSigned::$8
Resolving typeid() (byte~) testSigned::$12 ← typeid  (signed byte/signed word/signed dword~) testSigned::$11
Resolving typeid() (byte~) testSigned::$15 ← typeid  (signed byte/signed word/signed dword~) testSigned::$14
Resolving typeid() (byte~) testSigned::$17 ← typeid  (signed word/signed byte/signed dword~) testSigned::$16
Resolving typeid() (byte~) testSigned::$19 ← typeid  (signed byte~) testSigned::$18

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word/dword/signed dword) $400
  (byte) idx#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@3
main: scope:[main]  from @3
  (byte) idx#1 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  call testUnsigned 
  to:main::@1
main::@1: scope:[main]  from main
  (byte) idx#23 ← phi( main/(byte) idx#12 )
  (byte) idx#2 ← (byte) idx#23
  (byte) idx#3 ← (byte/signed byte/word/signed word/dword/signed dword) $28
  call testSigned 
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte) idx#24 ← phi( main::@1/(byte) idx#21 )
  (byte) idx#4 ← (byte) idx#24
  to:main::@return
main::@return: scope:[main]  from main::@2
  (byte) idx#25 ← phi( main::@2/(byte) idx#4 )
  (byte) idx#5 ← (byte) idx#25
  return 
  to:@return
testUnsigned: scope:[testUnsigned]  from main
  (byte) idx#26 ← phi( main/(byte) idx#1 )
  (byte) testUnsigned::ubv1#0 ← (byte/signed byte/word/signed word/dword/signed dword) $5b
  (byte~) testUnsigned::$0 ← (const byte) TYPEID_BYTE
  *((byte*) SCREEN#0 + (byte) idx#26) ← (byte~) testUnsigned::$0
  (byte) idx#6 ← ++ (byte) idx#26
  (byte~) testUnsigned::$1 ← (const byte) TYPEID_BYTE
  *((byte*) SCREEN#0 + (byte) idx#6) ← (byte~) testUnsigned::$1
  (byte) idx#7 ← ++ (byte) idx#6
  (byte~) testUnsigned::$3 ← (const byte) TYPEID_BYTE
  *((byte*) SCREEN#0 + (byte) idx#7) ← (byte~) testUnsigned::$3
  (byte) idx#8 ← ++ (byte) idx#7
  (byte~) testUnsigned::$5 ← (const byte) TYPEID_BYTE
  *((byte*) SCREEN#0 + (byte) idx#8) ← (byte~) testUnsigned::$5
  (byte) idx#9 ← ++ (byte) idx#8
  (byte~) testUnsigned::$7 ← (const byte) TYPEID_BYTE
  *((byte*) SCREEN#0 + (byte) idx#9) ← (byte~) testUnsigned::$7
  (byte) idx#10 ← ++ (byte) idx#9
  (byte~) testUnsigned::$9 ← (const byte) TYPEID_BYTE
  *((byte*) SCREEN#0 + (byte) idx#10) ← (byte~) testUnsigned::$9
  (byte) idx#11 ← ++ (byte) idx#10
  to:testUnsigned::@return
testUnsigned::@return: scope:[testUnsigned]  from testUnsigned
  (byte) idx#27 ← phi( testUnsigned/(byte) idx#11 )
  (byte) idx#12 ← (byte) idx#27
  return 
  to:@return
testSigned: scope:[testSigned]  from main::@1
  (byte) idx#28 ← phi( main::@1/(byte) idx#3 )
  (signed byte) testSigned::sbv1#0 ← (byte/signed byte/word/signed word/dword/signed dword) $13
  (byte~) testSigned::$1 ← (const byte) TYPEID_SIGNED_BYTE
  *((byte*) SCREEN#0 + (byte) idx#28) ← (byte~) testSigned::$1
  (byte) idx#13 ← ++ (byte) idx#28
  (byte~) testSigned::$2 ← (const byte) TYPEID_SIGNED_BYTE
  *((byte*) SCREEN#0 + (byte) idx#13) ← (byte~) testSigned::$2
  (byte) idx#14 ← ++ (byte) idx#13
  (byte~) testSigned::$6 ← (const byte) TYPEID_SIGNED_BYTE
  *((byte*) SCREEN#0 + (byte) idx#14) ← (byte~) testSigned::$6
  (byte) idx#15 ← ++ (byte) idx#14
  (byte~) testSigned::$9 ← (const byte) TYPEID_SIGNED_BYTE
  *((byte*) SCREEN#0 + (byte) idx#15) ← (byte~) testSigned::$9
  (byte) idx#16 ← ++ (byte) idx#15
  (byte~) testSigned::$12 ← (const byte) TYPEID_SIGNED_BYTE
  *((byte*) SCREEN#0 + (byte) idx#16) ← (byte~) testSigned::$12
  (byte) idx#17 ← ++ (byte) idx#16
  (byte~) testSigned::$15 ← (const byte) TYPEID_SIGNED_BYTE
  *((byte*) SCREEN#0 + (byte) idx#17) ← (byte~) testSigned::$15
  (byte) idx#18 ← ++ (byte) idx#17
  (byte~) testSigned::$17 ← (const byte) TYPEID_SIGNED_BYTE
  *((byte*) SCREEN#0 + (byte) idx#18) ← (byte~) testSigned::$17
  (byte) idx#19 ← ++ (byte) idx#18
  (byte~) testSigned::$19 ← (const byte) TYPEID_SIGNED_BYTE
  *((byte*) SCREEN#0 + (byte) idx#19) ← (byte~) testSigned::$19
  (byte) idx#20 ← ++ (byte) idx#19
  to:testSigned::@return
testSigned::@return: scope:[testSigned]  from testSigned
  (byte) idx#29 ← phi( testSigned/(byte) idx#20 )
  (byte) idx#21 ← (byte) idx#29
  return 
  to:@return
@3: scope:[]  from @begin
  (byte) idx#31 ← phi( @begin/(byte) idx#0 )
  call main 
  to:@4
@4: scope:[]  from @3
  (byte) idx#30 ← phi( @3/(byte) idx#5 )
  (byte) idx#22 ← (byte) idx#30
  to:@end
@end: scope:[]  from @4

SYMBOL TABLE SSA
(label) @3
(label) @4
(label) @begin
(label) @end
(byte*) SCREEN
(byte*) SCREEN#0
(const byte) TYPEID_BYTE = (byte/signed byte/word/signed word/dword/signed dword) 1
(const byte) TYPEID_SIGNED_BYTE = (byte/signed byte/word/signed word/dword/signed dword) 2
(byte) idx
(byte) idx#0
(byte) idx#1
(byte) idx#10
(byte) idx#11
(byte) idx#12
(byte) idx#13
(byte) idx#14
(byte) idx#15
(byte) idx#16
(byte) idx#17
(byte) idx#18
(byte) idx#19
(byte) idx#2
(byte) idx#20
(byte) idx#21
(byte) idx#22
(byte) idx#23
(byte) idx#24
(byte) idx#25
(byte) idx#26
(byte) idx#27
(byte) idx#28
(byte) idx#29
(byte) idx#3
(byte) idx#30
(byte) idx#31
(byte) idx#4
(byte) idx#5
(byte) idx#6
(byte) idx#7
(byte) idx#8
(byte) idx#9
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(void()) testSigned()
(byte~) testSigned::$1
(byte~) testSigned::$12
(byte~) testSigned::$15
(byte~) testSigned::$17
(byte~) testSigned::$19
(byte~) testSigned::$2
(byte~) testSigned::$6
(byte~) testSigned::$9
(label) testSigned::@return
(signed byte) testSigned::sbv1
(signed byte) testSigned::sbv1#0
(void()) testUnsigned()
(byte~) testUnsigned::$0
(byte~) testUnsigned::$1
(byte~) testUnsigned::$3
(byte~) testUnsigned::$5
(byte~) testUnsigned::$7
(byte~) testUnsigned::$9
(label) testUnsigned::@return
(byte) testUnsigned::ubv1
(byte) testUnsigned::ubv1#0

Alias (byte) idx#2 = (byte) idx#23 
Alias (byte) idx#24 = (byte) idx#4 (byte) idx#25 (byte) idx#5 
Alias (byte) idx#11 = (byte) idx#27 (byte) idx#12 
Alias (byte) idx#20 = (byte) idx#29 (byte) idx#21 
Alias (byte) idx#0 = (byte) idx#31 
Alias (byte) idx#22 = (byte) idx#30 
Successful SSA optimization Pass2AliasElimination
Redundant Phi (byte) idx#2 (byte) idx#11
Redundant Phi (byte) idx#24 (byte) idx#20
Redundant Phi (byte) idx#26 (byte) idx#1
Redundant Phi (byte) idx#28 (byte) idx#3
Redundant Phi (byte) idx#22 (byte) idx#24
Successful SSA optimization Pass2RedundantPhiElimination
Constant (const byte*) SCREEN#0 = ((byte*))$400
Constant (const byte) idx#0 = 0
Constant (const byte) idx#1 = 0
Constant (const byte) idx#3 = $28
Constant (const byte) testUnsigned::$0 = TYPEID_BYTE
Constant (const byte) testUnsigned::$1 = TYPEID_BYTE
Constant (const byte) testUnsigned::$3 = TYPEID_BYTE
Constant (const byte) testUnsigned::$5 = TYPEID_BYTE
Constant (const byte) testUnsigned::$7 = TYPEID_BYTE
Constant (const byte) testUnsigned::$9 = TYPEID_BYTE
Constant (const byte) testSigned::$1 = TYPEID_SIGNED_BYTE
Constant (const byte) testSigned::$2 = TYPEID_SIGNED_BYTE
Constant (const byte) testSigned::$6 = TYPEID_SIGNED_BYTE
Constant (const byte) testSigned::$9 = TYPEID_SIGNED_BYTE
Constant (const byte) testSigned::$12 = TYPEID_SIGNED_BYTE
Constant (const byte) testSigned::$15 = TYPEID_SIGNED_BYTE
Constant (const byte) testSigned::$17 = TYPEID_SIGNED_BYTE
Constant (const byte) testSigned::$19 = TYPEID_SIGNED_BYTE
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) idx#6 = ++idx#1
Constant (const byte) idx#13 = ++idx#3
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) idx#7 = ++idx#6
Constant (const byte) idx#14 = ++idx#13
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) idx#8 = ++idx#7
Constant (const byte) idx#15 = ++idx#14
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) idx#9 = ++idx#8
Constant (const byte) idx#16 = ++idx#15
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) idx#10 = ++idx#9
Constant (const byte) idx#17 = ++idx#16
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) idx#11 = ++idx#10
Constant (const byte) idx#18 = ++idx#17
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) idx#19 = ++idx#18
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) idx#20 = ++idx#19
Successful SSA optimization Pass2ConstantIdentification
Consolidated array index constant in *(SCREEN#0+idx#1)
Consolidated array index constant in *(SCREEN#0+idx#6)
Consolidated array index constant in *(SCREEN#0+idx#7)
Consolidated array index constant in *(SCREEN#0+idx#8)
Consolidated array index constant in *(SCREEN#0+idx#9)
Consolidated array index constant in *(SCREEN#0+idx#10)
Consolidated array index constant in *(SCREEN#0+idx#3)
Consolidated array index constant in *(SCREEN#0+idx#13)
Consolidated array index constant in *(SCREEN#0+idx#14)
Consolidated array index constant in *(SCREEN#0+idx#15)
Consolidated array index constant in *(SCREEN#0+idx#16)
Consolidated array index constant in *(SCREEN#0+idx#17)
Consolidated array index constant in *(SCREEN#0+idx#18)
Consolidated array index constant in *(SCREEN#0+idx#19)
Successful SSA optimization Pass2ConstantAdditionElimination
Eliminating unused constant (const byte) idx#0
Eliminating unused constant (const byte) idx#11
Eliminating unused constant (const byte) idx#20
Successful SSA optimization PassNEliminateUnusedVars
Culled Empty Block (label) main::@2
Culled Empty Block (label) @4
Successful SSA optimization Pass2CullEmptyBlocks
Inlining constant with different constant siblings (const byte) idx#1
Inlining constant with different constant siblings (const byte) idx#3
Inlining constant with different constant siblings (const byte) idx#6
Inlining constant with different constant siblings (const byte) idx#13
Inlining constant with different constant siblings (const byte) idx#7
Inlining constant with different constant siblings (const byte) idx#14
Inlining constant with different constant siblings (const byte) idx#8
Inlining constant with different constant siblings (const byte) idx#15
Inlining constant with different constant siblings (const byte) idx#9
Inlining constant with different constant siblings (const byte) idx#16
Inlining constant with different constant siblings (const byte) idx#10
Inlining constant with different constant siblings (const byte) idx#17
Inlining constant with different constant siblings (const byte) idx#18
Inlining constant with different constant siblings (const byte) idx#19
Constant inlined testUnsigned::$3 = (const byte) TYPEID_BYTE
Constant inlined idx#10 = ++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined testUnsigned::$1 = (const byte) TYPEID_BYTE
Constant inlined idx#8 = ++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined testUnsigned::$0 = (const byte) TYPEID_BYTE
Constant inlined idx#9 = ++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined idx#6 = ++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined idx#7 = ++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined idx#18 = ++++++++++++(byte/signed byte/word/signed word/dword/signed dword) $28
Constant inlined idx#17 = ++++++++++(byte/signed byte/word/signed word/dword/signed dword) $28
Constant inlined testUnsigned::$9 = (const byte) TYPEID_BYTE
Constant inlined idx#19 = ++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) $28
Constant inlined testUnsigned::$7 = (const byte) TYPEID_BYTE
Constant inlined idx#14 = ++++(byte/signed byte/word/signed word/dword/signed dword) $28
Constant inlined idx#13 = ++(byte/signed byte/word/signed word/dword/signed dword) $28
Constant inlined testUnsigned::$5 = (const byte) TYPEID_BYTE
Constant inlined idx#16 = ++++++++(byte/signed byte/word/signed word/dword/signed dword) $28
Constant inlined idx#15 = ++++++(byte/signed byte/word/signed word/dword/signed dword) $28
Constant inlined idx#3 = (byte/signed byte/word/signed word/dword/signed dword) $28
Constant inlined testSigned::$6 = (const byte) TYPEID_SIGNED_BYTE
Constant inlined idx#1 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined testSigned::$9 = (const byte) TYPEID_SIGNED_BYTE
Constant inlined testSigned::$2 = (const byte) TYPEID_SIGNED_BYTE
Constant inlined testSigned::$17 = (const byte) TYPEID_SIGNED_BYTE
Constant inlined testSigned::$19 = (const byte) TYPEID_SIGNED_BYTE
Constant inlined testSigned::$1 = (const byte) TYPEID_SIGNED_BYTE
Constant inlined testSigned::$15 = (const byte) TYPEID_SIGNED_BYTE
Constant inlined testSigned::$12 = (const byte) TYPEID_SIGNED_BYTE
Successful SSA optimization Pass2ConstantInlining
Simplifying constant plus zero SCREEN#0+0
Simplifying constant integer increment ++0
Simplifying constant integer increment ++0
Simplifying constant integer increment ++1
Simplifying constant integer increment ++2
Simplifying constant integer increment ++3
Simplifying constant integer increment ++$28
Simplifying constant integer increment ++$28
Simplifying constant integer increment ++$29
Simplifying constant integer increment ++$2a
Simplifying constant integer increment ++$2b
Simplifying constant integer increment ++$2c
Simplifying constant integer increment ++$2d
Successful SSA optimization Pass2ConstantSimplification
Simplifying constant integer increment ++1
Simplifying constant integer increment ++2
Simplifying constant integer increment ++3
Simplifying constant integer increment ++4
Simplifying constant integer increment ++$29
Simplifying constant integer increment ++$2a
Simplifying constant integer increment ++$2b
Simplifying constant integer increment ++$2c
Simplifying constant integer increment ++$2d
Simplifying constant integer increment ++$2e
Successful SSA optimization Pass2ConstantSimplification
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @3
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to testUnsigned:5 testSigned:7 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Renumbering block @3 to @1
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  [5] call testUnsigned 
  to:main::@1
main::@1: scope:[main]  from main
  [6] phi()
  [7] call testSigned 
  to:main::@return
main::@return: scope:[main]  from main::@1
  [8] return 
  to:@return
testSigned: scope:[testSigned]  from main::@1
  [9] (signed byte) testSigned::sbv1#0 ← (byte/signed byte/word/signed word/dword/signed dword) $13
  [10] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $28) ← (const byte) TYPEID_SIGNED_BYTE
  [11] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $29) ← (const byte) TYPEID_SIGNED_BYTE
  [12] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $2a) ← (const byte) TYPEID_SIGNED_BYTE
  [13] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $2b) ← (const byte) TYPEID_SIGNED_BYTE
  [14] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $2c) ← (const byte) TYPEID_SIGNED_BYTE
  [15] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $2d) ← (const byte) TYPEID_SIGNED_BYTE
  [16] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $2e) ← (const byte) TYPEID_SIGNED_BYTE
  [17] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $2f) ← (const byte) TYPEID_SIGNED_BYTE
  to:testSigned::@return
testSigned::@return: scope:[testSigned]  from testSigned
  [18] return 
  to:@return
testUnsigned: scope:[testUnsigned]  from main
  [19] (byte) testUnsigned::ubv1#0 ← (byte/signed byte/word/signed word/dword/signed dword) $5b
  [20] *((const byte*) SCREEN#0) ← (const byte) TYPEID_BYTE
  [21] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (const byte) TYPEID_BYTE
  [22] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (const byte) TYPEID_BYTE
  [23] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (const byte) TYPEID_BYTE
  [24] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (const byte) TYPEID_BYTE
  [25] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 5) ← (const byte) TYPEID_BYTE
  to:testUnsigned::@return
testUnsigned::@return: scope:[testUnsigned]  from testUnsigned
  [26] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte*) SCREEN
(byte) idx
(void()) main()
(void()) testSigned()
(signed byte) testSigned::sbv1
(signed byte) testSigned::sbv1#0 20.0
(void()) testUnsigned()
(byte) testUnsigned::ubv1
(byte) testUnsigned::ubv1#0 20.0

Initial phi equivalence classes
Complete equivalence classes
[ testUnsigned::ubv1#0 ]
[ testSigned::sbv1#0 ]
Allocated zp ZP_BYTE:2 [ testUnsigned::ubv1#0 ]
Allocated zp ZP_BYTE:3 [ testSigned::sbv1#0 ]

INITIAL ASM
//SEG0 File Comments
// Test that plus creates the expected type for all legal combinations of bytes (signed/unsigned - constant/variable)
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .const TYPEID_BYTE = 1
  .const TYPEID_SIGNED_BYTE = 2
  .label SCREEN = $400
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
  //SEG11 [5] call testUnsigned 
    jsr testUnsigned
  //SEG12 [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    jmp b1
  //SEG13 main::@1
  b1:
  //SEG14 [7] call testSigned 
    jsr testSigned
    jmp breturn
  //SEG15 main::@return
  breturn:
  //SEG16 [8] return 
    rts
}
//SEG17 testSigned
testSigned: {
    .label sbv1 = 3
  //SEG18 [9] (signed byte) testSigned::sbv1#0 ← (byte/signed byte/word/signed word/dword/signed dword) $13 -- vbsz1=vbuc1 
    lda #$13
    sta sbv1
  //SEG19 [10] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $28) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_SIGNED_BYTE
    sta SCREEN+$28
  //SEG20 [11] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $29) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_SIGNED_BYTE
    sta SCREEN+$29
  //SEG21 [12] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $2a) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_SIGNED_BYTE
    sta SCREEN+$2a
  //SEG22 [13] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $2b) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_SIGNED_BYTE
    sta SCREEN+$2b
  //SEG23 [14] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $2c) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_SIGNED_BYTE
    sta SCREEN+$2c
  //SEG24 [15] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $2d) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_SIGNED_BYTE
    sta SCREEN+$2d
  //SEG25 [16] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $2e) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_SIGNED_BYTE
    sta SCREEN+$2e
  //SEG26 [17] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $2f) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_SIGNED_BYTE
    sta SCREEN+$2f
    jmp breturn
  //SEG27 testSigned::@return
  breturn:
  //SEG28 [18] return 
    rts
}
//SEG29 testUnsigned
testUnsigned: {
    .label ubv1 = 2
  //SEG30 [19] (byte) testUnsigned::ubv1#0 ← (byte/signed byte/word/signed word/dword/signed dword) $5b -- vbuz1=vbuc1 
    lda #$5b
    sta ubv1
  //SEG31 [20] *((const byte*) SCREEN#0) ← (const byte) TYPEID_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_BYTE
    sta SCREEN
  //SEG32 [21] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (const byte) TYPEID_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_BYTE
    sta SCREEN+1
  //SEG33 [22] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (const byte) TYPEID_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_BYTE
    sta SCREEN+2
  //SEG34 [23] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (const byte) TYPEID_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_BYTE
    sta SCREEN+3
  //SEG35 [24] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (const byte) TYPEID_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_BYTE
    sta SCREEN+4
  //SEG36 [25] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 5) ← (const byte) TYPEID_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_BYTE
    sta SCREEN+5
    jmp breturn
  //SEG37 testUnsigned::@return
  breturn:
  //SEG38 [26] return 
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [9] (signed byte) testSigned::sbv1#0 ← (byte/signed byte/word/signed word/dword/signed dword) $13 [ ] ( main:2::testSigned:7 [ ] ) always clobbers reg byte a 
Statement [10] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $28) ← (const byte) TYPEID_SIGNED_BYTE [ ] ( main:2::testSigned:7 [ ] ) always clobbers reg byte a 
Statement [11] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $29) ← (const byte) TYPEID_SIGNED_BYTE [ ] ( main:2::testSigned:7 [ ] ) always clobbers reg byte a 
Statement [12] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $2a) ← (const byte) TYPEID_SIGNED_BYTE [ ] ( main:2::testSigned:7 [ ] ) always clobbers reg byte a 
Statement [13] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $2b) ← (const byte) TYPEID_SIGNED_BYTE [ ] ( main:2::testSigned:7 [ ] ) always clobbers reg byte a 
Statement [14] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $2c) ← (const byte) TYPEID_SIGNED_BYTE [ ] ( main:2::testSigned:7 [ ] ) always clobbers reg byte a 
Statement [15] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $2d) ← (const byte) TYPEID_SIGNED_BYTE [ ] ( main:2::testSigned:7 [ ] ) always clobbers reg byte a 
Statement [16] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $2e) ← (const byte) TYPEID_SIGNED_BYTE [ ] ( main:2::testSigned:7 [ ] ) always clobbers reg byte a 
Statement [17] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $2f) ← (const byte) TYPEID_SIGNED_BYTE [ ] ( main:2::testSigned:7 [ ] ) always clobbers reg byte a 
Statement [19] (byte) testUnsigned::ubv1#0 ← (byte/signed byte/word/signed word/dword/signed dword) $5b [ ] ( main:2::testUnsigned:5 [ ] ) always clobbers reg byte a 
Statement [20] *((const byte*) SCREEN#0) ← (const byte) TYPEID_BYTE [ ] ( main:2::testUnsigned:5 [ ] ) always clobbers reg byte a 
Statement [21] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (const byte) TYPEID_BYTE [ ] ( main:2::testUnsigned:5 [ ] ) always clobbers reg byte a 
Statement [22] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (const byte) TYPEID_BYTE [ ] ( main:2::testUnsigned:5 [ ] ) always clobbers reg byte a 
Statement [23] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (const byte) TYPEID_BYTE [ ] ( main:2::testUnsigned:5 [ ] ) always clobbers reg byte a 
Statement [24] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (const byte) TYPEID_BYTE [ ] ( main:2::testUnsigned:5 [ ] ) always clobbers reg byte a 
Statement [25] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 5) ← (const byte) TYPEID_BYTE [ ] ( main:2::testUnsigned:5 [ ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ testUnsigned::ubv1#0 ] : zp ZP_BYTE:2 , 
Potential registers zp ZP_BYTE:3 [ testSigned::sbv1#0 ] : zp ZP_BYTE:3 , 

REGISTER UPLIFT SCOPES
Uplift Scope [testUnsigned] 20: zp ZP_BYTE:2 [ testUnsigned::ubv1#0 ] 
Uplift Scope [testSigned] 20: zp ZP_BYTE:3 [ testSigned::sbv1#0 ] 
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [testUnsigned] best 148 combination zp ZP_BYTE:2 [ testUnsigned::ubv1#0 ] 
Uplifting [testSigned] best 148 combination zp ZP_BYTE:3 [ testSigned::sbv1#0 ] 
Uplifting [main] best 148 combination 
Uplifting [] best 148 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ testUnsigned::ubv1#0 ]
Uplifting [testUnsigned] best 148 combination zp ZP_BYTE:2 [ testUnsigned::ubv1#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:3 [ testSigned::sbv1#0 ]
Uplifting [testSigned] best 148 combination zp ZP_BYTE:3 [ testSigned::sbv1#0 ] 

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 File Comments
// Test that plus creates the expected type for all legal combinations of bytes (signed/unsigned - constant/variable)
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .const TYPEID_BYTE = 1
  .const TYPEID_SIGNED_BYTE = 2
  .label SCREEN = $400
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
  //SEG11 [5] call testUnsigned 
    jsr testUnsigned
  //SEG12 [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    jmp b1
  //SEG13 main::@1
  b1:
  //SEG14 [7] call testSigned 
    jsr testSigned
    jmp breturn
  //SEG15 main::@return
  breturn:
  //SEG16 [8] return 
    rts
}
//SEG17 testSigned
testSigned: {
    .label sbv1 = 3
  //SEG18 [9] (signed byte) testSigned::sbv1#0 ← (byte/signed byte/word/signed word/dword/signed dword) $13 -- vbsz1=vbuc1 
    lda #$13
    sta sbv1
  //SEG19 [10] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $28) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_SIGNED_BYTE
    sta SCREEN+$28
  //SEG20 [11] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $29) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_SIGNED_BYTE
    sta SCREEN+$29
  //SEG21 [12] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $2a) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_SIGNED_BYTE
    sta SCREEN+$2a
  //SEG22 [13] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $2b) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_SIGNED_BYTE
    sta SCREEN+$2b
  //SEG23 [14] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $2c) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_SIGNED_BYTE
    sta SCREEN+$2c
  //SEG24 [15] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $2d) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_SIGNED_BYTE
    sta SCREEN+$2d
  //SEG25 [16] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $2e) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_SIGNED_BYTE
    sta SCREEN+$2e
  //SEG26 [17] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $2f) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_SIGNED_BYTE
    sta SCREEN+$2f
    jmp breturn
  //SEG27 testSigned::@return
  breturn:
  //SEG28 [18] return 
    rts
}
//SEG29 testUnsigned
testUnsigned: {
    .label ubv1 = 2
  //SEG30 [19] (byte) testUnsigned::ubv1#0 ← (byte/signed byte/word/signed word/dword/signed dword) $5b -- vbuz1=vbuc1 
    lda #$5b
    sta ubv1
  //SEG31 [20] *((const byte*) SCREEN#0) ← (const byte) TYPEID_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_BYTE
    sta SCREEN
  //SEG32 [21] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (const byte) TYPEID_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_BYTE
    sta SCREEN+1
  //SEG33 [22] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (const byte) TYPEID_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_BYTE
    sta SCREEN+2
  //SEG34 [23] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (const byte) TYPEID_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_BYTE
    sta SCREEN+3
  //SEG35 [24] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (const byte) TYPEID_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_BYTE
    sta SCREEN+4
  //SEG36 [25] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 5) ← (const byte) TYPEID_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_BYTE
    sta SCREEN+5
    jmp breturn
  //SEG37 testUnsigned::@return
  breturn:
  //SEG38 [26] return 
    rts
}

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #TYPEID_SIGNED_BYTE
Removing instruction lda #TYPEID_SIGNED_BYTE
Removing instruction lda #TYPEID_SIGNED_BYTE
Removing instruction lda #TYPEID_SIGNED_BYTE
Removing instruction lda #TYPEID_SIGNED_BYTE
Removing instruction lda #TYPEID_SIGNED_BYTE
Removing instruction lda #TYPEID_SIGNED_BYTE
Removing instruction lda #TYPEID_BYTE
Removing instruction lda #TYPEID_BYTE
Removing instruction lda #TYPEID_BYTE
Removing instruction lda #TYPEID_BYTE
Removing instruction lda #TYPEID_BYTE
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b1_from_main:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction b1:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = ((byte*))(word/signed word/dword/signed dword) $400
(const byte) TYPEID_BYTE TYPEID_BYTE = (byte/signed byte/word/signed word/dword/signed dword) 1
(const byte) TYPEID_SIGNED_BYTE TYPEID_SIGNED_BYTE = (byte/signed byte/word/signed word/dword/signed dword) 2
(byte) idx
(void()) main()
(label) main::@1
(label) main::@return
(void()) testSigned()
(label) testSigned::@return
(signed byte) testSigned::sbv1
(signed byte) testSigned::sbv1#0 sbv1 zp ZP_BYTE:3 20.0
(void()) testUnsigned()
(label) testUnsigned::@return
(byte) testUnsigned::ubv1
(byte) testUnsigned::ubv1#0 ubv1 zp ZP_BYTE:2 20.0

zp ZP_BYTE:2 [ testUnsigned::ubv1#0 ]
zp ZP_BYTE:3 [ testSigned::sbv1#0 ]


FINAL ASSEMBLER
Score: 100

//SEG0 File Comments
// Test that plus creates the expected type for all legal combinations of bytes (signed/unsigned - constant/variable)
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .const TYPEID_BYTE = 1
  .const TYPEID_SIGNED_BYTE = 2
  .label SCREEN = $400
//SEG3 @begin
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG5 @1
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
//SEG9 @end
//SEG10 main
main: {
  //SEG11 [5] call testUnsigned 
    jsr testUnsigned
  //SEG12 [6] phi from main to main::@1 [phi:main->main::@1]
  //SEG13 main::@1
  //SEG14 [7] call testSigned 
    jsr testSigned
  //SEG15 main::@return
  //SEG16 [8] return 
    rts
}
//SEG17 testSigned
testSigned: {
    .label sbv1 = 3
  //SEG18 [9] (signed byte) testSigned::sbv1#0 ← (byte/signed byte/word/signed word/dword/signed dword) $13 -- vbsz1=vbuc1 
    lda #$13
    sta sbv1
  //SEG19 [10] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $28) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_SIGNED_BYTE
    sta SCREEN+$28
  //SEG20 [11] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $29) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    sta SCREEN+$29
  //SEG21 [12] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $2a) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    sta SCREEN+$2a
  //SEG22 [13] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $2b) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    sta SCREEN+$2b
  //SEG23 [14] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $2c) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    sta SCREEN+$2c
  //SEG24 [15] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $2d) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    sta SCREEN+$2d
  //SEG25 [16] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $2e) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    sta SCREEN+$2e
  //SEG26 [17] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $2f) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    sta SCREEN+$2f
  //SEG27 testSigned::@return
  //SEG28 [18] return 
    rts
}
//SEG29 testUnsigned
testUnsigned: {
    .label ubv1 = 2
  //SEG30 [19] (byte) testUnsigned::ubv1#0 ← (byte/signed byte/word/signed word/dword/signed dword) $5b -- vbuz1=vbuc1 
    lda #$5b
    sta ubv1
  //SEG31 [20] *((const byte*) SCREEN#0) ← (const byte) TYPEID_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_BYTE
    sta SCREEN
  //SEG32 [21] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (const byte) TYPEID_BYTE -- _deref_pbuc1=vbuc2 
    sta SCREEN+1
  //SEG33 [22] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (const byte) TYPEID_BYTE -- _deref_pbuc1=vbuc2 
    sta SCREEN+2
  //SEG34 [23] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (const byte) TYPEID_BYTE -- _deref_pbuc1=vbuc2 
    sta SCREEN+3
  //SEG35 [24] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (const byte) TYPEID_BYTE -- _deref_pbuc1=vbuc2 
    sta SCREEN+4
  //SEG36 [25] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 5) ← (const byte) TYPEID_BYTE -- _deref_pbuc1=vbuc2 
    sta SCREEN+5
  //SEG37 testUnsigned::@return
  //SEG38 [26] return 
    rts
}

