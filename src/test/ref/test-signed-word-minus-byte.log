Fixing pointer addition (word*~) bsearch16u::$7 ← (word*) bsearch16u::items + (byte~) bsearch16u::$6
Fixing pointer addition (word*~) bsearch16u::$15 ← (word*) bsearch16u::pivot + (number) 1
Fixing pointer addition (word*~) bsearch16u::$1 ← (word*) bsearch16u::items - (number) 1
Fixing pointer array-indexing *((word*) utoa::digit_values + (byte) utoa::digit)
Fixing pointer array-indexing *((dword*) ultoa::digit_values + (byte) ultoa::digit)
Warning! Adding boolean cast to non-boolean condition *((byte*) strcpy::src)
Warning! Adding boolean cast to non-boolean condition *((byte*) print_str_lines::str)
Warning! Adding boolean cast to non-boolean condition (byte) print_str_lines::ch
Warning! Adding boolean cast to non-boolean condition *((byte*) print_str::str)
Warning! Adding boolean cast to non-boolean condition *((byte*) print_str_at::str)
Warning! Adding boolean cast to non-boolean sub-expression (byte) print_str_lines::ch
Identified constant variable (byte*) HEAP_TOP
Culled Empty Block (label) @1
Culled Empty Block (label) @2
Culled Empty Block (label) memset::@7
Culled Empty Block (label) memset::@6
Culled Empty Block (label) memset::@8
Culled Empty Block (label) memset::@9
Culled Empty Block (label) memset::@3
Culled Empty Block (label) @3
Culled Empty Block (label) @4
Culled Empty Block (label) @5
Culled Empty Block (label) @6
Culled Empty Block (label) @7
Culled Empty Block (label) @8
Culled Empty Block (label) @9
Culled Empty Block (label) @10
Culled Empty Block (label) @11
Culled Empty Block (label) @13
Culled Empty Block (label) @14
Culled Empty Block (label) @15
Culled Empty Block (label) @16
Culled Empty Block (label) @17
Culled Empty Block (label) print_sword::@4
Culled Empty Block (label) @18
Culled Empty Block (label) @19
Culled Empty Block (label) @20
Culled Empty Block (label) @21
Culled Empty Block (label) @22
Culled Empty Block (label) @23
Culled Empty Block (label) @24
Culled Empty Block (label) @25
Culled Empty Block (label) @26
Culled Empty Block (label) @27
Culled Empty Block (label) @28
Culled Empty Block (label) @29
Culled Empty Block (label) @30
Culled Empty Block (label) @31
Culled Empty Block (label) @32
Culled Empty Block (label) @33
Culled Empty Block (label) @34
Culled Empty Block (label) @35
Culled Empty Block (label) @36
Culled Empty Block (label) main::@2

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@12

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  (byte) memset::c#4 ← phi( print_cls/(byte) memset::c#0 )
  (void*) memset::str#3 ← phi( print_cls/(void*) memset::str#0 )
  (word) memset::num#1 ← phi( print_cls/(word) memset::num#0 )
  (bool~) memset::$0 ← (word) memset::num#1 > (number) 0
  (bool~) memset::$1 ← ! (bool~) memset::$0
  if((bool~) memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@4
  (void*) memset::str#1 ← phi( memset/(void*) memset::str#3 memset::@4/(void*) memset::str#4 )
  (void*) memset::return#0 ← (void*) memset::str#1
  to:memset::@return
memset::@2: scope:[memset]  from memset
  (byte) memset::c#3 ← phi( memset/(byte) memset::c#4 )
  (word) memset::num#2 ← phi( memset/(word) memset::num#1 )
  (void*) memset::str#2 ← phi( memset/(void*) memset::str#3 )
  (byte*~) memset::$2 ← ((byte*)) (void*) memset::str#2
  (byte*~) memset::$3 ← (byte*~) memset::$2 + (word) memset::num#2
  (byte*) memset::end#0 ← (byte*~) memset::$3
  (byte*) memset::dst#0 ← ((byte*)) (void*) memset::str#2
  to:memset::@4
memset::@4: scope:[memset]  from memset::@2 memset::@5
  (byte) memset::c#2 ← phi( memset::@2/(byte) memset::c#3 memset::@5/(byte) memset::c#1 )
  (void*) memset::str#4 ← phi( memset::@2/(void*) memset::str#2 memset::@5/(void*) memset::str#5 )
  (byte*) memset::end#1 ← phi( memset::@2/(byte*) memset::end#0 memset::@5/(byte*) memset::end#2 )
  (byte*) memset::dst#2 ← phi( memset::@2/(byte*) memset::dst#0 memset::@5/(byte*) memset::dst#1 )
  (bool~) memset::$4 ← (byte*) memset::dst#2 != (byte*) memset::end#1
  if((bool~) memset::$4) goto memset::@5
  to:memset::@1
memset::@5: scope:[memset]  from memset::@4
  (void*) memset::str#5 ← phi( memset::@4/(void*) memset::str#4 )
  (byte*) memset::end#2 ← phi( memset::@4/(byte*) memset::end#1 )
  (byte*) memset::dst#3 ← phi( memset::@4/(byte*) memset::dst#2 )
  (byte) memset::c#1 ← phi( memset::@4/(byte) memset::c#2 )
  *((byte*) memset::dst#3) ← (byte) memset::c#1
  (byte*) memset::dst#1 ← ++ (byte*) memset::dst#3
  to:memset::@4
memset::@return: scope:[memset]  from memset::@1
  (void*) memset::return#3 ← phi( memset::@1/(void*) memset::return#0 )
  (void*) memset::return#1 ← (void*) memset::return#3
  return 
  to:@return
@12: scope:[]  from @begin
  (byte*) print_screen#0 ← ((byte*)) (number) $400
  (byte*) print_line_cursor#0 ← (byte*) print_screen#0
  (byte*) print_char_cursor#0 ← (byte*) print_line_cursor#0
  to:@37

(void()) print_ln()
print_ln: scope:[print_ln]  from main::@6
  (byte*) print_char_cursor#46 ← phi( main::@6/(byte*) print_char_cursor#20 )
  (byte*) print_line_cursor#17 ← phi( main::@6/(byte*) print_line_cursor#19 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  (byte*) print_char_cursor#24 ← phi( print_ln/(byte*) print_char_cursor#46 print_ln::@1/(byte*) print_char_cursor#24 )
  (byte*) print_line_cursor#9 ← phi( print_ln/(byte*) print_line_cursor#17 print_ln::@1/(byte*) print_line_cursor#1 )
  (byte*~) print_ln::$0 ← (byte*) print_line_cursor#9 + (number) $28
  (byte*) print_line_cursor#1 ← (byte*~) print_ln::$0
  (bool~) print_ln::$1 ← (byte*) print_line_cursor#1 < (byte*) print_char_cursor#24
  if((bool~) print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  (byte*) print_line_cursor#10 ← phi( print_ln::@1/(byte*) print_line_cursor#1 )
  (byte*) print_char_cursor#1 ← (byte*) print_line_cursor#10
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  (byte*) print_char_cursor#25 ← phi( print_ln::@2/(byte*) print_char_cursor#1 )
  (byte*) print_line_cursor#11 ← phi( print_ln::@2/(byte*) print_line_cursor#10 )
  (byte*) print_line_cursor#2 ← (byte*) print_line_cursor#11
  (byte*) print_char_cursor#2 ← (byte*) print_char_cursor#25
  return 
  to:@return

(void()) print_sword((signed word) print_sword::w)
print_sword: scope:[print_sword]  from main::@1 main::@5
  (byte*) print_char_cursor#55 ← phi( main::@1/(byte*) print_char_cursor#53 main::@5/(byte*) print_char_cursor#19 )
  (signed word) print_sword::w#3 ← phi( main::@1/(signed word) print_sword::w#1 main::@5/(signed word) print_sword::w#2 )
  (bool~) print_sword::$0 ← (signed word) print_sword::w#3 < (number) 0
  if((bool~) print_sword::$0) goto print_sword::@1
  to:print_sword::@3
print_sword::@1: scope:[print_sword]  from print_sword
  (signed word) print_sword::w#6 ← phi( print_sword/(signed word) print_sword::w#3 )
  (byte*) print_char_cursor#47 ← phi( print_sword/(byte*) print_char_cursor#55 )
  (byte) print_char::ch#0 ← (byte) '-'
  call print_char 
  to:print_sword::@5
print_sword::@5: scope:[print_sword]  from print_sword::@1
  (signed word) print_sword::w#4 ← phi( print_sword::@1/(signed word) print_sword::w#6 )
  (byte*) print_char_cursor#26 ← phi( print_sword::@1/(byte*) print_char_cursor#14 )
  (byte*) print_char_cursor#3 ← (byte*) print_char_cursor#26
  (signed word~) print_sword::$5 ← - (signed word) print_sword::w#4
  (signed word) print_sword::w#0 ← (signed word~) print_sword::$5
  to:print_sword::@2
print_sword::@3: scope:[print_sword]  from print_sword
  (signed word) print_sword::w#8 ← phi( print_sword/(signed word) print_sword::w#3 )
  (byte*) print_char_cursor#48 ← phi( print_sword/(byte*) print_char_cursor#55 )
  (byte) print_char::ch#1 ← (byte) ' '
  call print_char 
  to:print_sword::@6
print_sword::@6: scope:[print_sword]  from print_sword::@3
  (signed word) print_sword::w#7 ← phi( print_sword::@3/(signed word) print_sword::w#8 )
  (byte*) print_char_cursor#27 ← phi( print_sword::@3/(byte*) print_char_cursor#14 )
  (byte*) print_char_cursor#4 ← (byte*) print_char_cursor#27
  to:print_sword::@2
print_sword::@2: scope:[print_sword]  from print_sword::@5 print_sword::@6
  (byte*) print_char_cursor#49 ← phi( print_sword::@5/(byte*) print_char_cursor#3 print_sword::@6/(byte*) print_char_cursor#4 )
  (signed word) print_sword::w#5 ← phi( print_sword::@5/(signed word) print_sword::w#0 print_sword::@6/(signed word) print_sword::w#7 )
  (word~) print_sword::$1 ← ((word)) (signed word) print_sword::w#5
  (word) print_word::w#0 ← (word~) print_sword::$1
  call print_word 
  to:print_sword::@7
print_sword::@7: scope:[print_sword]  from print_sword::@2
  (byte*) print_char_cursor#28 ← phi( print_sword::@2/(byte*) print_char_cursor#9 )
  (byte*) print_char_cursor#5 ← (byte*) print_char_cursor#28
  to:print_sword::@return
print_sword::@return: scope:[print_sword]  from print_sword::@7
  (byte*) print_char_cursor#29 ← phi( print_sword::@7/(byte*) print_char_cursor#5 )
  (byte*) print_char_cursor#6 ← (byte*) print_char_cursor#29
  return 
  to:@return

(void()) print_word((word) print_word::w)
print_word: scope:[print_word]  from print_sword::@2
  (byte*) print_char_cursor#50 ← phi( print_sword::@2/(byte*) print_char_cursor#49 )
  (word) print_word::w#1 ← phi( print_sword::@2/(word) print_word::w#0 )
  (byte~) print_word::$0 ← > (word) print_word::w#1
  (byte) print_byte::b#0 ← (byte~) print_word::$0
  call print_byte 
  to:print_word::@1
print_word::@1: scope:[print_word]  from print_word
  (word) print_word::w#2 ← phi( print_word/(word) print_word::w#1 )
  (byte*) print_char_cursor#30 ← phi( print_word/(byte*) print_char_cursor#12 )
  (byte*) print_char_cursor#7 ← (byte*) print_char_cursor#30
  (byte~) print_word::$2 ← < (word) print_word::w#2
  (byte) print_byte::b#1 ← (byte~) print_word::$2
  call print_byte 
  to:print_word::@2
print_word::@2: scope:[print_word]  from print_word::@1
  (byte*) print_char_cursor#31 ← phi( print_word::@1/(byte*) print_char_cursor#12 )
  (byte*) print_char_cursor#8 ← (byte*) print_char_cursor#31
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word::@2
  (byte*) print_char_cursor#32 ← phi( print_word::@2/(byte*) print_char_cursor#8 )
  (byte*) print_char_cursor#9 ← (byte*) print_char_cursor#32
  return 
  to:@return

(void()) print_byte((byte) print_byte::b)
print_byte: scope:[print_byte]  from print_word print_word::@1
  (byte*) print_char_cursor#51 ← phi( print_word/(byte*) print_char_cursor#50 print_word::@1/(byte*) print_char_cursor#7 )
  (byte) print_byte::b#2 ← phi( print_word/(byte) print_byte::b#0 print_word::@1/(byte) print_byte::b#1 )
  (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (number) 4
  (byte) print_char::ch#2 ← *((const byte*) print_hextab + (byte~) print_byte::$0)
  call print_char 
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  (byte) print_byte::b#3 ← phi( print_byte/(byte) print_byte::b#2 )
  (byte*) print_char_cursor#33 ← phi( print_byte/(byte*) print_char_cursor#14 )
  (byte*) print_char_cursor#10 ← (byte*) print_char_cursor#33
  (number~) print_byte::$2 ← (byte) print_byte::b#3 & (number) $f
  (byte) print_char::ch#3 ← *((const byte*) print_hextab + (number~) print_byte::$2)
  call print_char 
  to:print_byte::@2
print_byte::@2: scope:[print_byte]  from print_byte::@1
  (byte*) print_char_cursor#34 ← phi( print_byte::@1/(byte*) print_char_cursor#14 )
  (byte*) print_char_cursor#11 ← (byte*) print_char_cursor#34
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@2
  (byte*) print_char_cursor#35 ← phi( print_byte::@2/(byte*) print_char_cursor#11 )
  (byte*) print_char_cursor#12 ← (byte*) print_char_cursor#35
  return 
  to:@return

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from main::@4 print_byte print_byte::@1 print_sword::@1 print_sword::@3
  (byte*) print_char_cursor#36 ← phi( main::@4/(byte*) print_char_cursor#18 print_byte/(byte*) print_char_cursor#51 print_byte::@1/(byte*) print_char_cursor#10 print_sword::@1/(byte*) print_char_cursor#47 print_sword::@3/(byte*) print_char_cursor#48 )
  (byte) print_char::ch#5 ← phi( main::@4/(byte) print_char::ch#4 print_byte/(byte) print_char::ch#2 print_byte::@1/(byte) print_char::ch#3 print_sword::@1/(byte) print_char::ch#0 print_sword::@3/(byte) print_char::ch#1 )
  *((byte*) print_char_cursor#36) ← (byte) print_char::ch#5
  (byte*) print_char_cursor#13 ← ++ (byte*) print_char_cursor#36
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  (byte*) print_char_cursor#37 ← phi( print_char/(byte*) print_char_cursor#13 )
  (byte*) print_char_cursor#14 ← (byte*) print_char_cursor#37
  return 
  to:@return

(void()) print_cls()
print_cls: scope:[print_cls]  from main
  (byte*) print_screen#1 ← phi( main/(byte*) print_screen#3 )
  (void*) memset::str#0 ← (void*)(byte*) print_screen#1
  (byte) memset::c#0 ← (byte) ' '
  (word) memset::num#0 ← (number) $3e8
  call memset 
  (void*) memset::return#2 ← (void*) memset::return#1
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls
  (byte*) print_screen#2 ← phi( print_cls/(byte*) print_screen#1 )
  (byte*) print_line_cursor#3 ← (byte*) print_screen#2
  (byte*) print_char_cursor#15 ← (byte*) print_line_cursor#3
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  (byte*) print_char_cursor#38 ← phi( print_cls::@1/(byte*) print_char_cursor#15 )
  (byte*) print_line_cursor#12 ← phi( print_cls::@1/(byte*) print_line_cursor#3 )
  (byte*) print_line_cursor#4 ← (byte*) print_line_cursor#12
  (byte*) print_char_cursor#16 ← (byte*) print_char_cursor#38
  return 
  to:@return

(void()) main()
main: scope:[main]  from @37
  (byte*) print_char_cursor#52 ← phi( @37/(byte*) print_char_cursor#54 )
  (byte*) print_line_cursor#18 ← phi( @37/(byte*) print_line_cursor#20 )
  (byte*) print_screen#3 ← phi( @37/(byte*) print_screen#4 )
  (signed word) main::w1#0 ← (number) $4d2
  call print_cls 
  to:main::@3
main::@3: scope:[main]  from main
  (signed word) main::w1#3 ← phi( main/(signed word) main::w1#0 )
  (byte*) print_char_cursor#39 ← phi( main/(byte*) print_char_cursor#16 )
  (byte*) print_line_cursor#13 ← phi( main/(byte*) print_line_cursor#4 )
  (byte*) print_line_cursor#5 ← (byte*) print_line_cursor#13
  (byte*) print_char_cursor#17 ← (byte*) print_char_cursor#39
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main::@3 main::@7
  (byte) main::i#6 ← phi( main::@3/(byte) main::i#0 main::@7/(byte) main::i#1 )
  (byte*) print_line_cursor#23 ← phi( main::@3/(byte*) print_line_cursor#5 main::@7/(byte*) print_line_cursor#6 )
  (byte*) print_char_cursor#53 ← phi( main::@3/(byte*) print_char_cursor#17 main::@7/(byte*) print_char_cursor#21 )
  (signed word) main::w1#2 ← phi( main::@3/(signed word) main::w1#3 main::@7/(signed word) main::w1#4 )
  (number~) main::$1 ← (signed word) main::w1#2 - (number) $5b
  (signed word) main::w2#0 ← (number~) main::$1
  (number~) main::$2 ← (signed word) main::w2#0 - (number) $29
  (signed word) main::w1#1 ← (number~) main::$2
  (signed word) print_sword::w#1 ← (signed word) main::w1#1
  call print_sword 
  to:main::@4
main::@4: scope:[main]  from main::@1
  (signed word) main::w1#7 ← phi( main::@1/(signed word) main::w1#1 )
  (byte) main::i#5 ← phi( main::@1/(byte) main::i#6 )
  (byte*) print_line_cursor#22 ← phi( main::@1/(byte*) print_line_cursor#23 )
  (signed word) main::w2#2 ← phi( main::@1/(signed word) main::w2#0 )
  (byte*) print_char_cursor#40 ← phi( main::@1/(byte*) print_char_cursor#6 )
  (byte*) print_char_cursor#18 ← (byte*) print_char_cursor#40
  (byte) print_char::ch#4 ← (byte) ' '
  call print_char 
  to:main::@5
main::@5: scope:[main]  from main::@4
  (signed word) main::w1#6 ← phi( main::@4/(signed word) main::w1#7 )
  (byte) main::i#4 ← phi( main::@4/(byte) main::i#5 )
  (byte*) print_line_cursor#21 ← phi( main::@4/(byte*) print_line_cursor#22 )
  (signed word) main::w2#1 ← phi( main::@4/(signed word) main::w2#2 )
  (byte*) print_char_cursor#41 ← phi( main::@4/(byte*) print_char_cursor#14 )
  (byte*) print_char_cursor#19 ← (byte*) print_char_cursor#41
  (signed word) print_sword::w#2 ← (signed word) main::w2#1
  call print_sword 
  to:main::@6
main::@6: scope:[main]  from main::@5
  (signed word) main::w1#5 ← phi( main::@5/(signed word) main::w1#6 )
  (byte) main::i#3 ← phi( main::@5/(byte) main::i#4 )
  (byte*) print_line_cursor#19 ← phi( main::@5/(byte*) print_line_cursor#21 )
  (byte*) print_char_cursor#42 ← phi( main::@5/(byte*) print_char_cursor#6 )
  (byte*) print_char_cursor#20 ← (byte*) print_char_cursor#42
  call print_ln 
  to:main::@7
main::@7: scope:[main]  from main::@6
  (signed word) main::w1#4 ← phi( main::@6/(signed word) main::w1#5 )
  (byte) main::i#2 ← phi( main::@6/(byte) main::i#3 )
  (byte*) print_char_cursor#43 ← phi( main::@6/(byte*) print_char_cursor#2 )
  (byte*) print_line_cursor#14 ← phi( main::@6/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#6 ← (byte*) print_line_cursor#14
  (byte*) print_char_cursor#21 ← (byte*) print_char_cursor#43
  (byte) main::i#1 ← (byte) main::i#2 + rangenext(0,$a)
  (bool~) main::$7 ← (byte) main::i#1 != rangelast(0,$a)
  if((bool~) main::$7) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@7
  (byte*) print_char_cursor#44 ← phi( main::@7/(byte*) print_char_cursor#21 )
  (byte*) print_line_cursor#15 ← phi( main::@7/(byte*) print_line_cursor#6 )
  (byte*) print_line_cursor#7 ← (byte*) print_line_cursor#15
  (byte*) print_char_cursor#22 ← (byte*) print_char_cursor#44
  return 
  to:@return
@37: scope:[]  from @12
  (byte*) print_screen#4 ← phi( @12/(byte*) print_screen#0 )
  (byte*) print_char_cursor#54 ← phi( @12/(byte*) print_char_cursor#0 )
  (byte*) print_line_cursor#20 ← phi( @12/(byte*) print_line_cursor#0 )
  call main 
  to:@38
@38: scope:[]  from @37
  (byte*) print_char_cursor#45 ← phi( @37/(byte*) print_char_cursor#22 )
  (byte*) print_line_cursor#16 ← phi( @37/(byte*) print_line_cursor#7 )
  (byte*) print_line_cursor#8 ← (byte*) print_line_cursor#16
  (byte*) print_char_cursor#23 ← (byte*) print_char_cursor#45
  to:@end
@end: scope:[]  from @38

SYMBOL TABLE SSA
(label) @12
(label) @37
(label) @38
(label) @begin
(label) @end
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(void()) main()
(number~) main::$1
(number~) main::$2
(bool~) main::$7
(label) main::@1
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3
(byte) main::i#4
(byte) main::i#5
(byte) main::i#6
(signed word) main::w1
(signed word) main::w1#0
(signed word) main::w1#1
(signed word) main::w1#2
(signed word) main::w1#3
(signed word) main::w1#4
(signed word) main::w1#5
(signed word) main::w1#6
(signed word) main::w1#7
(signed word) main::w2
(signed word) main::w2#0
(signed word) main::w2#1
(signed word) main::w2#2
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(bool~) memset::$0
(bool~) memset::$1
(byte*~) memset::$2
(byte*~) memset::$3
(bool~) memset::$4
(label) memset::@1
(label) memset::@2
(label) memset::@4
(label) memset::@5
(label) memset::@return
(byte) memset::c
(byte) memset::c#0
(byte) memset::c#1
(byte) memset::c#2
(byte) memset::c#3
(byte) memset::c#4
(byte*) memset::dst
(byte*) memset::dst#0
(byte*) memset::dst#1
(byte*) memset::dst#2
(byte*) memset::dst#3
(byte*) memset::end
(byte*) memset::end#0
(byte*) memset::end#1
(byte*) memset::end#2
(word) memset::num
(word) memset::num#0
(word) memset::num#1
(word) memset::num#2
(void*) memset::return
(void*) memset::return#0
(void*) memset::return#1
(void*) memset::return#2
(void*) memset::return#3
(void*) memset::str
(void*) memset::str#0
(void*) memset::str#1
(void*) memset::str#2
(void*) memset::str#3
(void*) memset::str#4
(void*) memset::str#5
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0
(number~) print_byte::$2
(label) print_byte::@1
(label) print_byte::@2
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#0
(byte) print_byte::b#1
(byte) print_byte::b#2
(byte) print_byte::b#3
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0
(byte) print_char::ch#1
(byte) print_char::ch#2
(byte) print_char::ch#3
(byte) print_char::ch#4
(byte) print_char::ch#5
(byte*) print_char_cursor
(byte*) print_char_cursor#0
(byte*) print_char_cursor#1
(byte*) print_char_cursor#10
(byte*) print_char_cursor#11
(byte*) print_char_cursor#12
(byte*) print_char_cursor#13
(byte*) print_char_cursor#14
(byte*) print_char_cursor#15
(byte*) print_char_cursor#16
(byte*) print_char_cursor#17
(byte*) print_char_cursor#18
(byte*) print_char_cursor#19
(byte*) print_char_cursor#2
(byte*) print_char_cursor#20
(byte*) print_char_cursor#21
(byte*) print_char_cursor#22
(byte*) print_char_cursor#23
(byte*) print_char_cursor#24
(byte*) print_char_cursor#25
(byte*) print_char_cursor#26
(byte*) print_char_cursor#27
(byte*) print_char_cursor#28
(byte*) print_char_cursor#29
(byte*) print_char_cursor#3
(byte*) print_char_cursor#30
(byte*) print_char_cursor#31
(byte*) print_char_cursor#32
(byte*) print_char_cursor#33
(byte*) print_char_cursor#34
(byte*) print_char_cursor#35
(byte*) print_char_cursor#36
(byte*) print_char_cursor#37
(byte*) print_char_cursor#38
(byte*) print_char_cursor#39
(byte*) print_char_cursor#4
(byte*) print_char_cursor#40
(byte*) print_char_cursor#41
(byte*) print_char_cursor#42
(byte*) print_char_cursor#43
(byte*) print_char_cursor#44
(byte*) print_char_cursor#45
(byte*) print_char_cursor#46
(byte*) print_char_cursor#47
(byte*) print_char_cursor#48
(byte*) print_char_cursor#49
(byte*) print_char_cursor#5
(byte*) print_char_cursor#50
(byte*) print_char_cursor#51
(byte*) print_char_cursor#52
(byte*) print_char_cursor#53
(byte*) print_char_cursor#54
(byte*) print_char_cursor#55
(byte*) print_char_cursor#6
(byte*) print_char_cursor#7
(byte*) print_char_cursor#8
(byte*) print_char_cursor#9
(void()) print_cls()
(label) print_cls::@1
(label) print_cls::@return
(const byte*) print_hextab = (string) "0123456789abcdef"z
(byte*) print_line_cursor
(byte*) print_line_cursor#0
(byte*) print_line_cursor#1
(byte*) print_line_cursor#10
(byte*) print_line_cursor#11
(byte*) print_line_cursor#12
(byte*) print_line_cursor#13
(byte*) print_line_cursor#14
(byte*) print_line_cursor#15
(byte*) print_line_cursor#16
(byte*) print_line_cursor#17
(byte*) print_line_cursor#18
(byte*) print_line_cursor#19
(byte*) print_line_cursor#2
(byte*) print_line_cursor#20
(byte*) print_line_cursor#21
(byte*) print_line_cursor#22
(byte*) print_line_cursor#23
(byte*) print_line_cursor#3
(byte*) print_line_cursor#4
(byte*) print_line_cursor#5
(byte*) print_line_cursor#6
(byte*) print_line_cursor#7
(byte*) print_line_cursor#8
(byte*) print_line_cursor#9
(void()) print_ln()
(byte*~) print_ln::$0
(bool~) print_ln::$1
(label) print_ln::@1
(label) print_ln::@2
(label) print_ln::@return
(byte*) print_screen
(byte*) print_screen#0
(byte*) print_screen#1
(byte*) print_screen#2
(byte*) print_screen#3
(byte*) print_screen#4
(void()) print_sword((signed word) print_sword::w)
(bool~) print_sword::$0
(word~) print_sword::$1
(signed word~) print_sword::$5
(label) print_sword::@1
(label) print_sword::@2
(label) print_sword::@3
(label) print_sword::@5
(label) print_sword::@6
(label) print_sword::@7
(label) print_sword::@return
(signed word) print_sword::w
(signed word) print_sword::w#0
(signed word) print_sword::w#1
(signed word) print_sword::w#2
(signed word) print_sword::w#3
(signed word) print_sword::w#4
(signed word) print_sword::w#5
(signed word) print_sword::w#6
(signed word) print_sword::w#7
(signed word) print_sword::w#8
(void()) print_word((word) print_word::w)
(byte~) print_word::$0
(byte~) print_word::$2
(label) print_word::@1
(label) print_word::@2
(label) print_word::@return
(word) print_word::w
(word) print_word::w#0
(word) print_word::w#1
(word) print_word::w#2

Adding number conversion cast (unumber) 0 in (bool~) memset::$0 ← (word) memset::num#1 > (number) 0
Adding number conversion cast (unumber) $28 in (byte*~) print_ln::$0 ← (byte*) print_line_cursor#9 + (number) $28
Adding number conversion cast (snumber) 0 in (bool~) print_sword::$0 ← (signed word) print_sword::w#3 < (number) 0
Adding number conversion cast (unumber) 4 in (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (number) 4
Adding number conversion cast (unumber) $f in (number~) print_byte::$2 ← (byte) print_byte::b#3 & (number) $f
Adding number conversion cast (unumber) print_byte::$2 in (number~) print_byte::$2 ← (byte) print_byte::b#3 & (unumber)(number) $f
Adding number conversion cast (unumber) $3e8 in (word) memset::num#0 ← (number) $3e8
Adding number conversion cast (snumber) $4d2 in (signed word) main::w1#0 ← (number) $4d2
Adding number conversion cast (snumber) $5b in (number~) main::$1 ← (signed word) main::w1#2 - (number) $5b
Adding number conversion cast (snumber) main::$1 in (number~) main::$1 ← (signed word) main::w1#2 - (snumber)(number) $5b
Adding number conversion cast (snumber) $29 in (number~) main::$2 ← (signed word) main::w2#0 - (number) $29
Adding number conversion cast (snumber) main::$2 in (number~) main::$2 ← (signed word) main::w2#0 - (snumber)(number) $29
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*~) memset::$2 ← (byte*)(void*) memset::str#2
Inlining cast (byte*) memset::dst#0 ← (byte*)(void*) memset::str#2
Inlining cast (byte*) print_screen#0 ← (byte*)(number) $400
Inlining cast (word~) print_sword::$1 ← (word)(signed word) print_sword::w#5
Inlining cast (word) memset::num#0 ← (unumber)(number) $3e8
Inlining cast (signed word) main::w1#0 ← (snumber)(number) $4d2
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast 0
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast $3e8
Simplifying constant integer cast $4d2
Simplifying constant integer cast $5b
Simplifying constant integer cast $29
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (word) $3e8
Finalized signed number type (signed word) $4d2
Finalized signed number type (signed byte) $5b
Finalized signed number type (signed byte) $29
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) print_byte::$2 ← (byte) print_byte::b#3 & (byte) $f
Inferred type updated to signed word in (snumber~) main::$1 ← (signed word) main::w1#2 - (signed byte) $5b
Inferred type updated to signed word in (snumber~) main::$2 ← (signed word) main::w2#0 - (signed byte) $29
Inversing boolean not [2] (bool~) memset::$1 ← (word) memset::num#1 <= (byte) 0 from [1] (bool~) memset::$0 ← (word) memset::num#1 > (byte) 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias (void*) memset::return#0 = (void*) memset::str#1 (void*) memset::return#3 (void*) memset::return#1 
Alias (void*) memset::str#2 = (void*) memset::str#3 
Alias (word) memset::num#1 = (word) memset::num#2 
Alias (byte) memset::c#3 = (byte) memset::c#4 
Alias (byte*) memset::end#0 = (byte*~) memset::$3 
Alias (byte) memset::c#1 = (byte) memset::c#2 
Alias (byte*) memset::dst#2 = (byte*) memset::dst#3 
Alias (byte*) memset::end#1 = (byte*) memset::end#2 
Alias (void*) memset::str#4 = (void*) memset::str#5 
Alias (byte*) print_line_cursor#0 = (byte*) print_screen#0 (byte*) print_char_cursor#0 (byte*) print_line_cursor#20 (byte*) print_char_cursor#54 (byte*) print_screen#4 
Alias (byte*) print_line_cursor#1 = (byte*~) print_ln::$0 (byte*) print_line_cursor#10 (byte*) print_char_cursor#1 (byte*) print_line_cursor#11 (byte*) print_char_cursor#25 (byte*) print_line_cursor#2 (byte*) print_char_cursor#2 
Alias (byte*) print_char_cursor#47 = (byte*) print_char_cursor#55 (byte*) print_char_cursor#48 
Alias (signed word) print_sword::w#3 = (signed word) print_sword::w#6 (signed word) print_sword::w#4 (signed word) print_sword::w#8 (signed word) print_sword::w#7 
Alias (byte*) print_char_cursor#26 = (byte*) print_char_cursor#3 
Alias (signed word) print_sword::w#0 = (signed word~) print_sword::$5 
Alias (byte*) print_char_cursor#27 = (byte*) print_char_cursor#4 
Alias (word) print_word::w#0 = (word~) print_sword::$1 
Alias (byte*) print_char_cursor#28 = (byte*) print_char_cursor#5 (byte*) print_char_cursor#29 (byte*) print_char_cursor#6 
Alias (byte) print_byte::b#0 = (byte~) print_word::$0 
Alias (word) print_word::w#1 = (word) print_word::w#2 
Alias (byte*) print_char_cursor#30 = (byte*) print_char_cursor#7 
Alias (byte) print_byte::b#1 = (byte~) print_word::$2 
Alias (byte*) print_char_cursor#31 = (byte*) print_char_cursor#8 (byte*) print_char_cursor#32 (byte*) print_char_cursor#9 
Alias (byte) print_byte::b#2 = (byte) print_byte::b#3 
Alias (byte*) print_char_cursor#10 = (byte*) print_char_cursor#33 
Alias (byte*) print_char_cursor#11 = (byte*) print_char_cursor#34 (byte*) print_char_cursor#35 (byte*) print_char_cursor#12 
Alias (byte*) print_char_cursor#13 = (byte*) print_char_cursor#37 (byte*) print_char_cursor#14 
Alias (byte*) print_line_cursor#12 = (byte*) print_screen#2 (byte*) print_screen#1 (byte*) print_line_cursor#3 (byte*) print_char_cursor#15 (byte*) print_char_cursor#38 (byte*) print_line_cursor#4 (byte*) print_char_cursor#16 
Alias (signed word) main::w1#0 = (signed word) main::w1#3 
Alias (byte*) print_line_cursor#13 = (byte*) print_line_cursor#5 
Alias (byte*) print_char_cursor#17 = (byte*) print_char_cursor#39 
Alias (signed word) main::w2#0 = (signed word~) main::$1 (signed word) main::w2#2 (signed word) main::w2#1 
Alias (signed word) main::w1#1 = (signed word~) main::$2 (signed word) main::w1#7 (signed word) main::w1#6 (signed word) main::w1#5 (signed word) main::w1#4 
Alias (byte*) print_line_cursor#19 = (byte*) print_line_cursor#22 (byte*) print_line_cursor#23 (byte*) print_line_cursor#21 
Alias (byte) main::i#2 = (byte) main::i#5 (byte) main::i#6 (byte) main::i#4 (byte) main::i#3 
Alias (byte*) print_char_cursor#18 = (byte*) print_char_cursor#40 
Alias (byte*) print_char_cursor#19 = (byte*) print_char_cursor#41 
Alias (byte*) print_char_cursor#20 = (byte*) print_char_cursor#42 
Alias (byte*) print_line_cursor#14 = (byte*) print_line_cursor#6 (byte*) print_line_cursor#15 (byte*) print_line_cursor#7 
Alias (byte*) print_char_cursor#21 = (byte*) print_char_cursor#43 (byte*) print_char_cursor#44 (byte*) print_char_cursor#22 
Alias (byte*) print_line_cursor#16 = (byte*) print_line_cursor#8 
Alias (byte*) print_char_cursor#23 = (byte*) print_char_cursor#45 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (word) memset::num#1 (word) memset::num#0
Identical Phi Values (void*) memset::str#2 (void*) memset::str#0
Identical Phi Values (byte) memset::c#3 (byte) memset::c#0
Identical Phi Values (byte*) memset::end#1 (byte*) memset::end#0
Identical Phi Values (void*) memset::str#4 (void*) memset::str#2
Identical Phi Values (byte) memset::c#1 (byte) memset::c#3
Identical Phi Values (byte*) print_line_cursor#17 (byte*) print_line_cursor#19
Identical Phi Values (byte*) print_char_cursor#46 (byte*) print_char_cursor#20
Identical Phi Values (byte*) print_char_cursor#24 (byte*) print_char_cursor#46
Identical Phi Values (byte*) print_char_cursor#26 (byte*) print_char_cursor#13
Identical Phi Values (byte*) print_char_cursor#27 (byte*) print_char_cursor#13
Identical Phi Values (byte*) print_char_cursor#28 (byte*) print_char_cursor#31
Identical Phi Values (word) print_word::w#1 (word) print_word::w#0
Identical Phi Values (byte*) print_char_cursor#50 (byte*) print_char_cursor#49
Identical Phi Values (byte*) print_char_cursor#30 (byte*) print_char_cursor#11
Identical Phi Values (byte*) print_char_cursor#31 (byte*) print_char_cursor#11
Identical Phi Values (byte*) print_char_cursor#10 (byte*) print_char_cursor#13
Identical Phi Values (byte*) print_char_cursor#11 (byte*) print_char_cursor#13
Identical Phi Values (byte*) print_line_cursor#12 (byte*) print_screen#3
Identical Phi Values (byte*) print_screen#3 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_line_cursor#18 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_char_cursor#52 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_line_cursor#13 (byte*) print_line_cursor#12
Identical Phi Values (byte*) print_char_cursor#17 (byte*) print_line_cursor#12
Identical Phi Values (byte*) print_char_cursor#18 (byte*) print_char_cursor#28
Identical Phi Values (byte*) print_char_cursor#19 (byte*) print_char_cursor#13
Identical Phi Values (byte*) print_char_cursor#20 (byte*) print_char_cursor#28
Identical Phi Values (byte*) print_line_cursor#14 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_char_cursor#21 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_line_cursor#16 (byte*) print_line_cursor#14
Identical Phi Values (byte*) print_char_cursor#23 (byte*) print_char_cursor#21
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (void*) memset::return#0 (void*) memset::str#0
Identical Phi Values (byte*) print_char_cursor#49 (byte*) print_char_cursor#13
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (byte*) print_char_cursor#51 (byte*) print_char_cursor#13
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) memset::$1 [3] if((word) memset::num#0<=(byte) 0) goto memset::@1
Simple Condition (bool~) memset::$4 [13] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@5
Simple Condition (bool~) print_ln::$1 [28] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#13) goto print_ln::@1
Simple Condition (bool~) print_sword::$0 [37] if((signed word) print_sword::w#3<(signed byte) 0) goto print_sword::@1
Simple Condition (bool~) main::$7 [136] if((byte) main::i#1!=rangelast(0,$a)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) print_line_cursor#0 = (byte*) 1024
Constant (const byte) print_char::ch#0 = '-'
Constant (const byte) print_char::ch#1 = ' '
Constant (const byte) memset::c#0 = ' '
Constant (const word) memset::num#0 = $3e8
Constant (const signed word) main::w1#0 = $4d2
Constant (const byte) main::i#0 = 0
Constant (const byte) print_char::ch#4 = ' '
Successful SSA optimization Pass2ConstantIdentification
Constant (const void*) memset::str#0 = (void*)print_line_cursor#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) memset::$2 = (byte*)memset::str#0
Constant (const byte*) memset::dst#0 = (byte*)memset::str#0
Constant (const void*) memset::return#2 = memset::str#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [3] if((const word) memset::num#0<=(byte) 0) goto memset::@1
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [134] main::i#1 ← ++ main::i#2 to ++
Resolved ranged comparison value [136] if(main::i#1!=rangelast(0,$a)) goto main::@1 to (number) $b
Eliminating unused constant (const void*) memset::return#2
Successful SSA optimization PassNEliminateUnusedVars
Adding number conversion cast (unumber) $b in if((byte) main::i#1!=(number) $b) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $b
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $b
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [0] (byte*) memset::end#0 ← (const byte*) memset::$2 + (const word) memset::num#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) memset::end#0 = memset::$2+memset::num#0
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with var siblings (const byte*) memset::dst#0
Inlining constant with var siblings (const byte) print_char::ch#0
Inlining constant with var siblings (const byte) print_char::ch#1
Inlining constant with var siblings (const byte) print_char::ch#4
Inlining constant with var siblings (const signed word) main::w1#0
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte*) print_line_cursor#0
Constant inlined memset::$2 = (byte*)(const void*) memset::str#0
Constant inlined print_char::ch#4 = (byte) ' '
Constant inlined print_char::ch#1 = (byte) ' '
Constant inlined print_line_cursor#0 = (byte*) 1024
Constant inlined print_char::ch#0 = (byte) '-'
Constant inlined main::i#0 = (byte) 0
Constant inlined memset::dst#0 = (byte*)(const void*) memset::str#0
Constant inlined main::w1#0 = (signed word) $4d2
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting print_ln::@3(between print_ln::@1 and print_ln::@1)
Added new block during phi lifting main::@8(between main::@7 and main::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @12
Adding NOP phi() at start of @37
Adding NOP phi() at start of @38
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of print_ln::@2
Adding NOP phi() at start of print_sword::@7
Adding NOP phi() at start of print_word::@2
Adding NOP phi() at start of print_byte::@2
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of print_cls::@1
Adding NOP phi() at start of memset
Adding NOP phi() at start of memset::@2
Adding NOP phi() at start of memset::@1
CALL GRAPH
Calls in [] to main:3 
Calls in [main] to print_cls:7 print_sword:15 print_char:17 print_sword:21 print_ln:23 
Calls in [print_sword] to print_char:41 print_word:45 print_char:49 
Calls in [print_word] to print_byte:58 print_byte:61 
Calls in [print_byte] to print_char:69 print_char:74 
Calls in [print_cls] to memset:78 

Created 12 initial phi equivalence classes
Coalesced [13] print_sword::w#9 ← print_sword::w#1
Coalesced [14] print_char_cursor#56 ← print_char_cursor#53
Coalesced [16] print_char_cursor#58 ← print_char_cursor#13
Coalesced [19] print_sword::w#10 ← print_sword::w#2
Coalesced [20] print_char_cursor#57 ← print_char_cursor#13
Coalesced [27] main::w1#8 ← main::w1#1
Not coalescing [28] print_char_cursor#63 ← print_line_cursor#1
Coalesced [29] print_line_cursor#26 ← print_line_cursor#1
Coalesced [30] main::i#7 ← main::i#1
Coalesced [31] print_line_cursor#24 ← print_line_cursor#19
Coalesced (already) [37] print_line_cursor#25 ← print_line_cursor#1
Coalesced (already) [40] print_char_cursor#62 ← print_char_cursor#47
Coalesced [42] print_sword::w#12 ← print_sword::w#3
Coalesced (already) [48] print_char_cursor#61 ← print_char_cursor#47
Coalesced [51] print_sword::w#11 ← print_sword::w#0
Coalesced [57] print_byte::b#4 ← print_byte::b#0
Coalesced [60] print_byte::b#5 ← print_byte::b#1
Coalesced [67] print_char::ch#6 ← print_char::ch#2
Coalesced (already) [68] print_char_cursor#59 ← print_char_cursor#13
Coalesced [72] print_char::ch#7 ← print_char::ch#3
Coalesced (already) [73] print_char_cursor#60 ← print_char_cursor#13
Coalesced [89] memset::dst#4 ← memset::dst#1
Coalesced down to 8 phi equivalence classes
Culled Empty Block (label) @12
Culled Empty Block (label) @38
Culled Empty Block (label) main::@3
Culled Empty Block (label) print_ln::@2
Culled Empty Block (label) print_ln::@3
Culled Empty Block (label) print_sword::@6
Culled Empty Block (label) print_sword::@7
Culled Empty Block (label) print_word::@2
Culled Empty Block (label) print_byte::@2
Culled Empty Block (label) print_cls::@1
Culled Empty Block (label) memset::@2
Culled Empty Block (label) memset::@1
Renumbering block @37 to @1
Renumbering block memset::@4 to memset::@1
Renumbering block memset::@5 to memset::@2
Renumbering block print_sword::@5 to print_sword::@4
Renumbering block main::@4 to main::@2
Renumbering block main::@5 to main::@3
Renumbering block main::@6 to main::@4
Renumbering block main::@7 to main::@5
Renumbering block main::@8 to main::@6
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of print_ln
Adding NOP phi() at start of print_sword::@3
Adding NOP phi() at start of print_sword::@1
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of memset

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  [5] call print_cls 
  to:main::@1
main::@1: scope:[main]  from main main::@6
  [6] (byte) main::i#2 ← phi( main/(byte) 0 main::@6/(byte) main::i#1 )
  [6] (byte*) print_line_cursor#19 ← phi( main/(byte*) 1024 main::@6/(byte*) print_line_cursor#1 )
  [6] (byte*) print_char_cursor#53 ← phi( main/(byte*) 1024 main::@6/(byte*) print_char_cursor#63 )
  [6] (signed word) main::w1#2 ← phi( main/(signed word) $4d2 main::@6/(signed word) main::w1#1 )
  [7] (signed word) main::w2#0 ← (signed word) main::w1#2 - (signed byte) $5b
  [8] (signed word) main::w1#1 ← (signed word) main::w2#0 - (signed byte) $29
  [9] (signed word) print_sword::w#1 ← (signed word) main::w1#1
  [10] call print_sword 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [11] phi()
  [12] call print_char 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [13] (signed word) print_sword::w#2 ← (signed word) main::w2#0
  [14] call print_sword 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [15] phi()
  [16] call print_ln 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [17] (byte) main::i#1 ← ++ (byte) main::i#2
  [18] if((byte) main::i#1!=(byte) $b) goto main::@6
  to:main::@return
main::@return: scope:[main]  from main::@5
  [19] return 
  to:@return
main::@6: scope:[main]  from main::@5
  [20] (byte*) print_char_cursor#63 ← (byte*) print_line_cursor#1
  to:main::@1

(void()) print_ln()
print_ln: scope:[print_ln]  from main::@4
  [21] phi()
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [22] (byte*) print_line_cursor#9 ← phi( print_ln/(byte*) print_line_cursor#19 print_ln::@1/(byte*) print_line_cursor#1 )
  [23] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte) $28
  [24] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#13) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [25] return 
  to:@return

(void()) print_sword((signed word) print_sword::w)
print_sword: scope:[print_sword]  from main::@1 main::@3
  [26] (byte*) print_char_cursor#47 ← phi( main::@1/(byte*) print_char_cursor#53 main::@3/(byte*) print_char_cursor#13 )
  [26] (signed word) print_sword::w#3 ← phi( main::@1/(signed word) print_sword::w#1 main::@3/(signed word) print_sword::w#2 )
  [27] if((signed word) print_sword::w#3<(signed byte) 0) goto print_sword::@1
  to:print_sword::@3
print_sword::@3: scope:[print_sword]  from print_sword
  [28] phi()
  [29] call print_char 
  to:print_sword::@2
print_sword::@2: scope:[print_sword]  from print_sword::@3 print_sword::@4
  [30] (signed word) print_sword::w#5 ← phi( print_sword::@4/(signed word) print_sword::w#0 print_sword::@3/(signed word) print_sword::w#3 )
  [31] (word) print_word::w#0 ← (word)(signed word) print_sword::w#5
  [32] call print_word 
  to:print_sword::@return
print_sword::@return: scope:[print_sword]  from print_sword::@2
  [33] return 
  to:@return
print_sword::@1: scope:[print_sword]  from print_sword
  [34] phi()
  [35] call print_char 
  to:print_sword::@4
print_sword::@4: scope:[print_sword]  from print_sword::@1
  [36] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#3
  to:print_sword::@2

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from main::@2 print_byte print_byte::@1 print_sword::@1 print_sword::@3
  [37] (byte*) print_char_cursor#36 ← phi( main::@2/(byte*) print_char_cursor#13 print_byte/(byte*) print_char_cursor#13 print_byte::@1/(byte*) print_char_cursor#13 print_sword::@1/(byte*) print_char_cursor#47 print_sword::@3/(byte*) print_char_cursor#47 )
  [37] (byte) print_char::ch#5 ← phi( main::@2/(byte) ' ' print_byte/(byte) print_char::ch#2 print_byte::@1/(byte) print_char::ch#3 print_sword::@1/(byte) '-' print_sword::@3/(byte) ' ' )
  [38] *((byte*) print_char_cursor#36) ← (byte) print_char::ch#5
  [39] (byte*) print_char_cursor#13 ← ++ (byte*) print_char_cursor#36
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [40] return 
  to:@return

(void()) print_word((word) print_word::w)
print_word: scope:[print_word]  from print_sword::@2
  [41] (byte) print_byte::b#0 ← > (word) print_word::w#0
  [42] call print_byte 
  to:print_word::@1
print_word::@1: scope:[print_word]  from print_word
  [43] (byte) print_byte::b#1 ← < (word) print_word::w#0
  [44] call print_byte 
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word::@1
  [45] return 
  to:@return

(void()) print_byte((byte) print_byte::b)
print_byte: scope:[print_byte]  from print_word print_word::@1
  [46] (byte) print_byte::b#2 ← phi( print_word/(byte) print_byte::b#0 print_word::@1/(byte) print_byte::b#1 )
  [47] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte) 4
  [48] (byte) print_char::ch#2 ← *((const byte*) print_hextab + (byte~) print_byte::$0)
  [49] call print_char 
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  [50] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte) $f
  [51] (byte) print_char::ch#3 ← *((const byte*) print_hextab + (byte~) print_byte::$2)
  [52] call print_char 
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@1
  [53] return 
  to:@return

(void()) print_cls()
print_cls: scope:[print_cls]  from main
  [54] phi()
  [55] call memset 
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls
  [56] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  [57] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [58] (byte*) memset::dst#2 ← phi( memset/(byte*)(const void*) memset::str#0 memset::@2/(byte*) memset::dst#1 )
  [59] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [60] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [61] *((byte*) memset::dst#2) ← (const byte) memset::c#0
  [62] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@1


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte) main::i
(byte) main::i#1 11.0
(byte) main::i#2 2.0
(signed word) main::w1
(signed word) main::w1#1 2.75
(signed word) main::w1#2 22.0
(signed word) main::w2
(signed word) main::w2#0 5.5
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(byte) memset::c
(byte*) memset::dst
(byte*) memset::dst#1 22.0
(byte*) memset::dst#2 14.666666666666666
(byte*) memset::end
(word) memset::num
(void*) memset::return
(void*) memset::str
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 4.0
(byte~) print_byte::$2 4.0
(byte) print_byte::b
(byte) print_byte::b#0 4.0
(byte) print_byte::b#1 4.0
(byte) print_byte::b#2 2.0
(void()) print_char((byte) print_char::ch)
(byte) print_char::ch
(byte) print_char::ch#2 4.0
(byte) print_char::ch#3 4.0
(byte) print_char::ch#5 6.0
(byte*) print_char_cursor
(byte*) print_char_cursor#13 4.03125
(byte*) print_char_cursor#36 11.5
(byte*) print_char_cursor#47 6.5
(byte*) print_char_cursor#53 5.5
(byte*) print_char_cursor#63 22.0
(void()) print_cls()
(byte*) print_line_cursor
(byte*) print_line_cursor#1 46.42857142857143
(byte*) print_line_cursor#19 1.1818181818181819
(byte*) print_line_cursor#9 204.0
(void()) print_ln()
(byte*) print_screen
(void()) print_sword((signed word) print_sword::w)
(signed word) print_sword::w
(signed word) print_sword::w#0 4.0
(signed word) print_sword::w#1 22.0
(signed word) print_sword::w#2 22.0
(signed word) print_sword::w#3 4.666666666666666
(signed word) print_sword::w#5 4.0
(void()) print_word((word) print_word::w)
(word) print_word::w
(word) print_word::w#0 2.0

Initial phi equivalence classes
[ main::w1#2 main::w1#1 ]
[ main::i#2 main::i#1 ]
[ print_line_cursor#9 print_line_cursor#19 print_line_cursor#1 ]
[ print_sword::w#5 print_sword::w#0 print_sword::w#3 print_sword::w#1 print_sword::w#2 ]
[ print_char::ch#5 print_char::ch#2 print_char::ch#3 ]
[ print_char_cursor#36 print_char_cursor#47 print_char_cursor#53 print_char_cursor#63 print_char_cursor#13 ]
[ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
[ memset::dst#2 memset::dst#1 ]
Added variable main::w2#0 to live range equivalence class [ main::w2#0 ]
Added variable print_word::w#0 to live range equivalence class [ print_word::w#0 ]
Added variable print_byte::$0 to live range equivalence class [ print_byte::$0 ]
Added variable print_byte::$2 to live range equivalence class [ print_byte::$2 ]
Complete equivalence classes
[ main::w1#2 main::w1#1 ]
[ main::i#2 main::i#1 ]
[ print_line_cursor#9 print_line_cursor#19 print_line_cursor#1 ]
[ print_sword::w#5 print_sword::w#0 print_sword::w#3 print_sword::w#1 print_sword::w#2 ]
[ print_char::ch#5 print_char::ch#2 print_char::ch#3 ]
[ print_char_cursor#36 print_char_cursor#47 print_char_cursor#53 print_char_cursor#63 print_char_cursor#13 ]
[ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
[ memset::dst#2 memset::dst#1 ]
[ main::w2#0 ]
[ print_word::w#0 ]
[ print_byte::$0 ]
[ print_byte::$2 ]
Allocated zp[2]:2 [ main::w1#2 main::w1#1 ]
Allocated zp[1]:4 [ main::i#2 main::i#1 ]
Allocated zp[2]:5 [ print_line_cursor#9 print_line_cursor#19 print_line_cursor#1 ]
Allocated zp[2]:7 [ print_sword::w#5 print_sword::w#0 print_sword::w#3 print_sword::w#1 print_sword::w#2 ]
Allocated zp[1]:9 [ print_char::ch#5 print_char::ch#2 print_char::ch#3 ]
Allocated zp[2]:10 [ print_char_cursor#36 print_char_cursor#47 print_char_cursor#53 print_char_cursor#63 print_char_cursor#13 ]
Allocated zp[1]:12 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Allocated zp[2]:13 [ memset::dst#2 memset::dst#1 ]
Allocated zp[2]:15 [ main::w2#0 ]
Allocated zp[2]:17 [ print_word::w#0 ]
Allocated zp[1]:19 [ print_byte::$0 ]
Allocated zp[1]:20 [ print_byte::$2 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Tests subtracting bytes from signed words
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label print_line_cursor = 5
  .label print_char_cursor = $a
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label w2 = $f
    .label w1 = 2
    .label i = 4
    // [5] call print_cls 
    // [54] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
    // [6] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [6] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [6] phi (byte*) print_line_cursor#19 = (byte*) 1024 [phi:main->main::@1#1] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_line_cursor
    lda #>$400
    sta.z print_line_cursor+1
    // [6] phi (byte*) print_char_cursor#53 = (byte*) 1024 [phi:main->main::@1#2] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_char_cursor
    lda #>$400
    sta.z print_char_cursor+1
    // [6] phi (signed word) main::w1#2 = (signed word) $4d2 [phi:main->main::@1#3] -- vwsz1=vwsc1 
    lda #<$4d2
    sta.z w1
    lda #>$4d2
    sta.z w1+1
    jmp __b1
    // main::@1
  __b1:
    // [7] (signed word) main::w2#0 ← (signed word) main::w1#2 - (signed byte) $5b -- vwsz1=vwsz2_minus_vbsc1 
    lda.z w1
    sec
    sbc #$5b
    sta.z w2
    lda.z w1+1
    sbc #>$5b
    sta.z w2+1
    // [8] (signed word) main::w1#1 ← (signed word) main::w2#0 - (signed byte) $29 -- vwsz1=vwsz2_minus_vbsc1 
    lda.z w2
    sec
    sbc #$29
    sta.z w1
    lda.z w2+1
    sbc #>$29
    sta.z w1+1
    // [9] (signed word) print_sword::w#1 ← (signed word) main::w1#1 -- vwsz1=vwsz2 
    lda.z w1
    sta.z print_sword.w
    lda.z w1+1
    sta.z print_sword.w+1
    // [10] call print_sword 
    // [26] phi from main::@1 to print_sword [phi:main::@1->print_sword]
  print_sword_from___b1:
    // [26] phi (byte*) print_char_cursor#47 = (byte*) print_char_cursor#53 [phi:main::@1->print_sword#0] -- register_copy 
    // [26] phi (signed word) print_sword::w#3 = (signed word) print_sword::w#1 [phi:main::@1->print_sword#1] -- register_copy 
    jsr print_sword
    // [11] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [12] call print_char 
    // [37] phi from main::@2 to print_char [phi:main::@2->print_char]
  print_char_from___b2:
    // [37] phi (byte*) print_char_cursor#36 = (byte*) print_char_cursor#13 [phi:main::@2->print_char#0] -- register_copy 
    // [37] phi (byte) print_char::ch#5 = (byte) ' ' [phi:main::@2->print_char#1] -- vbuz1=vbuc1 
    lda #' '
    sta.z print_char.ch
    jsr print_char
    jmp __b3
    // main::@3
  __b3:
    // [13] (signed word) print_sword::w#2 ← (signed word) main::w2#0 -- vwsz1=vwsz2 
    lda.z w2
    sta.z print_sword.w
    lda.z w2+1
    sta.z print_sword.w+1
    // [14] call print_sword 
    // [26] phi from main::@3 to print_sword [phi:main::@3->print_sword]
  print_sword_from___b3:
    // [26] phi (byte*) print_char_cursor#47 = (byte*) print_char_cursor#13 [phi:main::@3->print_sword#0] -- register_copy 
    // [26] phi (signed word) print_sword::w#3 = (signed word) print_sword::w#2 [phi:main::@3->print_sword#1] -- register_copy 
    jsr print_sword
    // [15] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  __b4_from___b3:
    jmp __b4
    // main::@4
  __b4:
    // [16] call print_ln 
    // [21] phi from main::@4 to print_ln [phi:main::@4->print_ln]
  print_ln_from___b4:
    jsr print_ln
    jmp __b5
    // main::@5
  __b5:
    // [17] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [18] if((byte) main::i#1!=(byte) $b) goto main::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #$b
    cmp.z i
    bne __b6
    jmp __breturn
    // main::@return
  __breturn:
    // [19] return 
    rts
    // main::@6
  __b6:
    // [20] (byte*) print_char_cursor#63 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [6] phi from main::@6 to main::@1 [phi:main::@6->main::@1]
  __b1_from___b6:
    // [6] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@6->main::@1#0] -- register_copy 
    // [6] phi (byte*) print_line_cursor#19 = (byte*) print_line_cursor#1 [phi:main::@6->main::@1#1] -- register_copy 
    // [6] phi (byte*) print_char_cursor#53 = (byte*) print_char_cursor#63 [phi:main::@6->main::@1#2] -- register_copy 
    // [6] phi (signed word) main::w1#2 = (signed word) main::w1#1 [phi:main::@6->main::@1#3] -- register_copy 
    jmp __b1
}
  // print_ln
// Print a newline
print_ln: {
    // [22] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  __b1_from_print_ln:
  __b1_from___b1:
    // [22] phi (byte*) print_line_cursor#9 = (byte*) print_line_cursor#19 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp __b1
    // print_ln::@1
  __b1:
    // [23] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // [24] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#13) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1_from___b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1_from___b1
  !:
    jmp __breturn
    // print_ln::@return
  __breturn:
    // [25] return 
    rts
}
  // print_sword
// Print a signed word as HEX
// print_sword(signed word zeropage(7) w)
print_sword: {
    .label w = 7
    // [27] if((signed word) print_sword::w#3<(signed byte) 0) goto print_sword::@1 -- vwsz1_lt_0_then_la1 
    lda.z w+1
    bmi __b1_from_print_sword
    // [28] phi from print_sword to print_sword::@3 [phi:print_sword->print_sword::@3]
  __b3_from_print_sword:
    jmp __b3
    // print_sword::@3
  __b3:
    // [29] call print_char 
    // [37] phi from print_sword::@3 to print_char [phi:print_sword::@3->print_char]
  print_char_from___b3:
    // [37] phi (byte*) print_char_cursor#36 = (byte*) print_char_cursor#47 [phi:print_sword::@3->print_char#0] -- register_copy 
    // [37] phi (byte) print_char::ch#5 = (byte) ' ' [phi:print_sword::@3->print_char#1] -- vbuz1=vbuc1 
    lda #' '
    sta.z print_char.ch
    jsr print_char
    // [30] phi from print_sword::@3 print_sword::@4 to print_sword::@2 [phi:print_sword::@3/print_sword::@4->print_sword::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [30] phi (signed word) print_sword::w#5 = (signed word) print_sword::w#3 [phi:print_sword::@3/print_sword::@4->print_sword::@2#0] -- register_copy 
    jmp __b2
    // print_sword::@2
  __b2:
    // [31] (word) print_word::w#0 ← (word)(signed word) print_sword::w#5 -- vwuz1=vwuz2 
    lda.z w
    sta.z print_word.w
    lda.z w+1
    sta.z print_word.w+1
    // [32] call print_word 
    jsr print_word
    jmp __breturn
    // print_sword::@return
  __breturn:
    // [33] return 
    rts
    // [34] phi from print_sword to print_sword::@1 [phi:print_sword->print_sword::@1]
  __b1_from_print_sword:
    jmp __b1
    // print_sword::@1
  __b1:
    // [35] call print_char 
    // [37] phi from print_sword::@1 to print_char [phi:print_sword::@1->print_char]
  print_char_from___b1:
    // [37] phi (byte*) print_char_cursor#36 = (byte*) print_char_cursor#47 [phi:print_sword::@1->print_char#0] -- register_copy 
    // [37] phi (byte) print_char::ch#5 = (byte) '-' [phi:print_sword::@1->print_char#1] -- vbuz1=vbuc1 
    lda #'-'
    sta.z print_char.ch
    jsr print_char
    jmp __b4
    // print_sword::@4
  __b4:
    // [36] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#3 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z w
    sta.z w
    lda #0
    sbc.z w+1
    sta.z w+1
    jmp __b2_from___b4
}
  // print_char
// Print a single char
// print_char(byte zeropage(9) ch)
print_char: {
    .label ch = 9
    // [38] *((byte*) print_char_cursor#36) ← (byte) print_char::ch#5 -- _deref_pbuz1=vbuz2 
    lda.z ch
    ldy #0
    sta (print_char_cursor),y
    // [39] (byte*) print_char_cursor#13 ← ++ (byte*) print_char_cursor#36 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp __breturn
    // print_char::@return
  __breturn:
    // [40] return 
    rts
}
  // print_word
// Print a word as HEX
// print_word(word zeropage($11) w)
print_word: {
    .label w = $11
    // [41] (byte) print_byte::b#0 ← > (word) print_word::w#0 -- vbuz1=_hi_vwuz2 
    lda.z w+1
    sta.z print_byte.b
    // [42] call print_byte 
    // [46] phi from print_word to print_byte [phi:print_word->print_byte]
  print_byte_from_print_word:
    // [46] phi (byte) print_byte::b#2 = (byte) print_byte::b#0 [phi:print_word->print_byte#0] -- register_copy 
    jsr print_byte
    jmp __b1
    // print_word::@1
  __b1:
    // [43] (byte) print_byte::b#1 ← < (word) print_word::w#0 -- vbuz1=_lo_vwuz2 
    lda.z w
    sta.z print_byte.b
    // [44] call print_byte 
    // [46] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  print_byte_from___b1:
    // [46] phi (byte) print_byte::b#2 = (byte) print_byte::b#1 [phi:print_word::@1->print_byte#0] -- register_copy 
    jsr print_byte
    jmp __breturn
    // print_word::@return
  __breturn:
    // [45] return 
    rts
}
  // print_byte
// Print a byte as HEX
// print_byte(byte zeropage($c) b)
print_byte: {
    .label __0 = $13
    .label __2 = $14
    .label b = $c
    // [47] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda.z b
    lsr
    lsr
    lsr
    lsr
    sta.z __0
    // [48] (byte) print_char::ch#2 ← *((const byte*) print_hextab + (byte~) print_byte::$0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __0
    lda print_hextab,y
    sta.z print_char.ch
    // [49] call print_char 
    // [37] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
    // [37] phi (byte*) print_char_cursor#36 = (byte*) print_char_cursor#13 [phi:print_byte->print_char#0] -- register_copy 
    // [37] phi (byte) print_char::ch#5 = (byte) print_char::ch#2 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp __b1
    // print_byte::@1
  __b1:
    // [50] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and.z b
    sta.z __2
    // [51] (byte) print_char::ch#3 ← *((const byte*) print_hextab + (byte~) print_byte::$2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __2
    lda print_hextab,y
    sta.z print_char.ch
    // [52] call print_char 
    // [37] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from___b1:
    // [37] phi (byte*) print_char_cursor#36 = (byte*) print_char_cursor#13 [phi:print_byte::@1->print_char#0] -- register_copy 
    // [37] phi (byte) print_char::ch#5 = (byte) print_char::ch#3 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp __breturn
    // print_byte::@return
  __breturn:
    // [53] return 
    rts
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // [55] call memset 
    // [57] phi from print_cls to memset [phi:print_cls->memset]
  memset_from_print_cls:
    jsr memset
    jmp __breturn
    // print_cls::@return
  __breturn:
    // [56] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = $400
    .label end = str+num
    .label dst = $d
    // [58] phi from memset to memset::@1 [phi:memset->memset::@1]
  __b1_from_memset:
    // [58] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    jmp __b1
    // memset::@1
  __b1:
    // [59] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    jmp __breturn
    // memset::@return
  __breturn:
    // [60] return 
    rts
    // memset::@2
  __b2:
    // [61] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // [62] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [58] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
  __b1_from___b2:
    // [58] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
  print_hextab: .text "0123456789abcdef"

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [7] (signed word) main::w2#0 ← (signed word) main::w1#2 - (signed byte) $5b [ print_char_cursor#53 print_line_cursor#19 main::i#2 main::w2#0 ] ( main:2 [ print_char_cursor#53 print_line_cursor#19 main::i#2 main::w2#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:4 [ main::i#2 main::i#1 ]
Statement [8] (signed word) main::w1#1 ← (signed word) main::w2#0 - (signed byte) $29 [ print_char_cursor#53 print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 ] ( main:2 [ print_char_cursor#53 print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 ] ) always clobbers reg byte a 
Statement [9] (signed word) print_sword::w#1 ← (signed word) main::w1#1 [ print_char_cursor#53 print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_sword::w#1 ] ( main:2 [ print_char_cursor#53 print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_sword::w#1 ] ) always clobbers reg byte a 
Statement [13] (signed word) print_sword::w#2 ← (signed word) main::w2#0 [ print_line_cursor#19 main::i#2 main::w1#1 print_sword::w#2 print_char_cursor#13 ] ( main:2 [ print_line_cursor#19 main::i#2 main::w1#1 print_sword::w#2 print_char_cursor#13 ] ) always clobbers reg byte a 
Statement [20] (byte*) print_char_cursor#63 ← (byte*) print_line_cursor#1 [ main::w1#1 print_char_cursor#63 print_line_cursor#1 main::i#1 ] ( main:2 [ main::w1#1 print_char_cursor#63 print_line_cursor#1 main::i#1 ] ) always clobbers reg byte a 
Statement [23] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte) $28 [ print_line_cursor#1 print_char_cursor#13 ] ( main:2::print_ln:16 [ main::i#2 main::w1#1 print_line_cursor#1 print_char_cursor#13 ] ) always clobbers reg byte a 
Statement [24] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#13) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#13 ] ( main:2::print_ln:16 [ main::i#2 main::w1#1 print_line_cursor#1 print_char_cursor#13 ] ) always clobbers reg byte a 
Statement [27] if((signed word) print_sword::w#3<(signed byte) 0) goto print_sword::@1 [ print_sword::w#3 print_char_cursor#47 ] ( main:2::print_sword:10 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_sword::w#3 print_char_cursor#47 ] main:2::print_sword:14 [ print_line_cursor#19 main::i#2 main::w1#1 print_sword::w#3 print_char_cursor#47 ] ) always clobbers reg byte a 
Statement [31] (word) print_word::w#0 ← (word)(signed word) print_sword::w#5 [ print_char_cursor#13 print_word::w#0 ] ( main:2::print_sword:10 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_char_cursor#13 print_word::w#0 ] main:2::print_sword:14 [ print_line_cursor#19 main::i#2 main::w1#1 print_char_cursor#13 print_word::w#0 ] ) always clobbers reg byte a 
Statement [36] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#3 [ print_char_cursor#13 print_sword::w#0 ] ( main:2::print_sword:10 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_char_cursor#13 print_sword::w#0 ] main:2::print_sword:14 [ print_line_cursor#19 main::i#2 main::w1#1 print_char_cursor#13 print_sword::w#0 ] ) always clobbers reg byte a 
Statement [38] *((byte*) print_char_cursor#36) ← (byte) print_char::ch#5 [ print_char_cursor#36 ] ( main:2::print_char:12 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_char_cursor#36 ] main:2::print_sword:10::print_char:29 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_sword::w#3 print_char_cursor#36 ] main:2::print_sword:14::print_char:29 [ print_line_cursor#19 main::i#2 main::w1#1 print_sword::w#3 print_char_cursor#36 ] main:2::print_sword:10::print_char:35 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_sword::w#3 print_char_cursor#36 ] main:2::print_sword:14::print_char:35 [ print_line_cursor#19 main::i#2 main::w1#1 print_sword::w#3 print_char_cursor#36 ] main:2::print_sword:10::print_word:32::print_byte:42::print_char:49 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_word::w#0 print_byte::b#2 print_char_cursor#36 ] main:2::print_sword:14::print_word:32::print_byte:42::print_char:49 [ print_line_cursor#19 main::i#2 main::w1#1 print_word::w#0 print_byte::b#2 print_char_cursor#36 ] main:2::print_sword:10::print_word:32::print_byte:44::print_char:49 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_byte::b#2 print_char_cursor#36 ] main:2::print_sword:14::print_word:32::print_byte:44::print_char:49 [ print_line_cursor#19 main::i#2 main::w1#1 print_byte::b#2 print_char_cursor#36 ] main:2::print_sword:10::print_word:32::print_byte:42::print_char:52 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_word::w#0 print_char_cursor#36 ] main:2::print_sword:14::print_word:32::print_byte:42::print_char:52 [ print_line_cursor#19 main::i#2 main::w1#1 print_word::w#0 print_char_cursor#36 ] main:2::print_sword:10::print_word:32::print_byte:44::print_char:52 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_char_cursor#36 ] main:2::print_sword:14::print_word:32::print_byte:44::print_char:52 [ print_line_cursor#19 main::i#2 main::w1#1 print_char_cursor#36 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:4 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:12 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Statement [41] (byte) print_byte::b#0 ← > (word) print_word::w#0 [ print_char_cursor#13 print_word::w#0 print_byte::b#0 ] ( main:2::print_sword:10::print_word:32 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_char_cursor#13 print_word::w#0 print_byte::b#0 ] main:2::print_sword:14::print_word:32 [ print_line_cursor#19 main::i#2 main::w1#1 print_char_cursor#13 print_word::w#0 print_byte::b#0 ] ) always clobbers reg byte a 
Statement [43] (byte) print_byte::b#1 ← < (word) print_word::w#0 [ print_char_cursor#13 print_byte::b#1 ] ( main:2::print_sword:10::print_word:32 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_char_cursor#13 print_byte::b#1 ] main:2::print_sword:14::print_word:32 [ print_line_cursor#19 main::i#2 main::w1#1 print_char_cursor#13 print_byte::b#1 ] ) always clobbers reg byte a 
Statement [47] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte) 4 [ print_char_cursor#13 print_byte::b#2 print_byte::$0 ] ( main:2::print_sword:10::print_word:32::print_byte:42 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_word::w#0 print_char_cursor#13 print_byte::b#2 print_byte::$0 ] main:2::print_sword:14::print_word:32::print_byte:42 [ print_line_cursor#19 main::i#2 main::w1#1 print_word::w#0 print_char_cursor#13 print_byte::b#2 print_byte::$0 ] main:2::print_sword:10::print_word:32::print_byte:44 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_char_cursor#13 print_byte::b#2 print_byte::$0 ] main:2::print_sword:14::print_word:32::print_byte:44 [ print_line_cursor#19 main::i#2 main::w1#1 print_char_cursor#13 print_byte::b#2 print_byte::$0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:12 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Statement [50] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte) $f [ print_char_cursor#13 print_byte::$2 ] ( main:2::print_sword:10::print_word:32::print_byte:42 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_word::w#0 print_char_cursor#13 print_byte::$2 ] main:2::print_sword:14::print_word:32::print_byte:42 [ print_line_cursor#19 main::i#2 main::w1#1 print_word::w#0 print_char_cursor#13 print_byte::$2 ] main:2::print_sword:10::print_word:32::print_byte:44 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_char_cursor#13 print_byte::$2 ] main:2::print_sword:14::print_word:32::print_byte:44 [ print_line_cursor#19 main::i#2 main::w1#1 print_char_cursor#13 print_byte::$2 ] ) always clobbers reg byte a 
Statement [59] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 [ memset::dst#2 ] ( main:2::print_cls:5::memset:55 [ memset::dst#2 ] ) always clobbers reg byte a 
Statement [61] *((byte*) memset::dst#2) ← (const byte) memset::c#0 [ memset::dst#2 ] ( main:2::print_cls:5::memset:55 [ memset::dst#2 ] ) always clobbers reg byte a reg byte y 
Statement [7] (signed word) main::w2#0 ← (signed word) main::w1#2 - (signed byte) $5b [ print_char_cursor#53 print_line_cursor#19 main::i#2 main::w2#0 ] ( main:2 [ print_char_cursor#53 print_line_cursor#19 main::i#2 main::w2#0 ] ) always clobbers reg byte a 
Statement [8] (signed word) main::w1#1 ← (signed word) main::w2#0 - (signed byte) $29 [ print_char_cursor#53 print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 ] ( main:2 [ print_char_cursor#53 print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 ] ) always clobbers reg byte a 
Statement [9] (signed word) print_sword::w#1 ← (signed word) main::w1#1 [ print_char_cursor#53 print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_sword::w#1 ] ( main:2 [ print_char_cursor#53 print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_sword::w#1 ] ) always clobbers reg byte a 
Statement [13] (signed word) print_sword::w#2 ← (signed word) main::w2#0 [ print_line_cursor#19 main::i#2 main::w1#1 print_sword::w#2 print_char_cursor#13 ] ( main:2 [ print_line_cursor#19 main::i#2 main::w1#1 print_sword::w#2 print_char_cursor#13 ] ) always clobbers reg byte a 
Statement [20] (byte*) print_char_cursor#63 ← (byte*) print_line_cursor#1 [ main::w1#1 print_char_cursor#63 print_line_cursor#1 main::i#1 ] ( main:2 [ main::w1#1 print_char_cursor#63 print_line_cursor#1 main::i#1 ] ) always clobbers reg byte a 
Statement [23] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte) $28 [ print_line_cursor#1 print_char_cursor#13 ] ( main:2::print_ln:16 [ main::i#2 main::w1#1 print_line_cursor#1 print_char_cursor#13 ] ) always clobbers reg byte a 
Statement [24] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#13) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#13 ] ( main:2::print_ln:16 [ main::i#2 main::w1#1 print_line_cursor#1 print_char_cursor#13 ] ) always clobbers reg byte a 
Statement [27] if((signed word) print_sword::w#3<(signed byte) 0) goto print_sword::@1 [ print_sword::w#3 print_char_cursor#47 ] ( main:2::print_sword:10 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_sword::w#3 print_char_cursor#47 ] main:2::print_sword:14 [ print_line_cursor#19 main::i#2 main::w1#1 print_sword::w#3 print_char_cursor#47 ] ) always clobbers reg byte a 
Statement [31] (word) print_word::w#0 ← (word)(signed word) print_sword::w#5 [ print_char_cursor#13 print_word::w#0 ] ( main:2::print_sword:10 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_char_cursor#13 print_word::w#0 ] main:2::print_sword:14 [ print_line_cursor#19 main::i#2 main::w1#1 print_char_cursor#13 print_word::w#0 ] ) always clobbers reg byte a 
Statement [36] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#3 [ print_char_cursor#13 print_sword::w#0 ] ( main:2::print_sword:10 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_char_cursor#13 print_sword::w#0 ] main:2::print_sword:14 [ print_line_cursor#19 main::i#2 main::w1#1 print_char_cursor#13 print_sword::w#0 ] ) always clobbers reg byte a 
Statement [38] *((byte*) print_char_cursor#36) ← (byte) print_char::ch#5 [ print_char_cursor#36 ] ( main:2::print_char:12 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_char_cursor#36 ] main:2::print_sword:10::print_char:29 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_sword::w#3 print_char_cursor#36 ] main:2::print_sword:14::print_char:29 [ print_line_cursor#19 main::i#2 main::w1#1 print_sword::w#3 print_char_cursor#36 ] main:2::print_sword:10::print_char:35 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_sword::w#3 print_char_cursor#36 ] main:2::print_sword:14::print_char:35 [ print_line_cursor#19 main::i#2 main::w1#1 print_sword::w#3 print_char_cursor#36 ] main:2::print_sword:10::print_word:32::print_byte:42::print_char:49 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_word::w#0 print_byte::b#2 print_char_cursor#36 ] main:2::print_sword:14::print_word:32::print_byte:42::print_char:49 [ print_line_cursor#19 main::i#2 main::w1#1 print_word::w#0 print_byte::b#2 print_char_cursor#36 ] main:2::print_sword:10::print_word:32::print_byte:44::print_char:49 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_byte::b#2 print_char_cursor#36 ] main:2::print_sword:14::print_word:32::print_byte:44::print_char:49 [ print_line_cursor#19 main::i#2 main::w1#1 print_byte::b#2 print_char_cursor#36 ] main:2::print_sword:10::print_word:32::print_byte:42::print_char:52 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_word::w#0 print_char_cursor#36 ] main:2::print_sword:14::print_word:32::print_byte:42::print_char:52 [ print_line_cursor#19 main::i#2 main::w1#1 print_word::w#0 print_char_cursor#36 ] main:2::print_sword:10::print_word:32::print_byte:44::print_char:52 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_char_cursor#36 ] main:2::print_sword:14::print_word:32::print_byte:44::print_char:52 [ print_line_cursor#19 main::i#2 main::w1#1 print_char_cursor#36 ] ) always clobbers reg byte y 
Statement [41] (byte) print_byte::b#0 ← > (word) print_word::w#0 [ print_char_cursor#13 print_word::w#0 print_byte::b#0 ] ( main:2::print_sword:10::print_word:32 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_char_cursor#13 print_word::w#0 print_byte::b#0 ] main:2::print_sword:14::print_word:32 [ print_line_cursor#19 main::i#2 main::w1#1 print_char_cursor#13 print_word::w#0 print_byte::b#0 ] ) always clobbers reg byte a 
Statement [43] (byte) print_byte::b#1 ← < (word) print_word::w#0 [ print_char_cursor#13 print_byte::b#1 ] ( main:2::print_sword:10::print_word:32 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_char_cursor#13 print_byte::b#1 ] main:2::print_sword:14::print_word:32 [ print_line_cursor#19 main::i#2 main::w1#1 print_char_cursor#13 print_byte::b#1 ] ) always clobbers reg byte a 
Statement [47] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte) 4 [ print_char_cursor#13 print_byte::b#2 print_byte::$0 ] ( main:2::print_sword:10::print_word:32::print_byte:42 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_word::w#0 print_char_cursor#13 print_byte::b#2 print_byte::$0 ] main:2::print_sword:14::print_word:32::print_byte:42 [ print_line_cursor#19 main::i#2 main::w1#1 print_word::w#0 print_char_cursor#13 print_byte::b#2 print_byte::$0 ] main:2::print_sword:10::print_word:32::print_byte:44 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_char_cursor#13 print_byte::b#2 print_byte::$0 ] main:2::print_sword:14::print_word:32::print_byte:44 [ print_line_cursor#19 main::i#2 main::w1#1 print_char_cursor#13 print_byte::b#2 print_byte::$0 ] ) always clobbers reg byte a 
Statement [50] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte) $f [ print_char_cursor#13 print_byte::$2 ] ( main:2::print_sword:10::print_word:32::print_byte:42 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_word::w#0 print_char_cursor#13 print_byte::$2 ] main:2::print_sword:14::print_word:32::print_byte:42 [ print_line_cursor#19 main::i#2 main::w1#1 print_word::w#0 print_char_cursor#13 print_byte::$2 ] main:2::print_sword:10::print_word:32::print_byte:44 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_char_cursor#13 print_byte::$2 ] main:2::print_sword:14::print_word:32::print_byte:44 [ print_line_cursor#19 main::i#2 main::w1#1 print_char_cursor#13 print_byte::$2 ] ) always clobbers reg byte a 
Statement [59] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 [ memset::dst#2 ] ( main:2::print_cls:5::memset:55 [ memset::dst#2 ] ) always clobbers reg byte a 
Statement [61] *((byte*) memset::dst#2) ← (const byte) memset::c#0 [ memset::dst#2 ] ( main:2::print_cls:5::memset:55 [ memset::dst#2 ] ) always clobbers reg byte a reg byte y 
Potential registers zp[2]:2 [ main::w1#2 main::w1#1 ] : zp[2]:2 , 
Potential registers zp[1]:4 [ main::i#2 main::i#1 ] : zp[1]:4 , reg byte x , 
Potential registers zp[2]:5 [ print_line_cursor#9 print_line_cursor#19 print_line_cursor#1 ] : zp[2]:5 , 
Potential registers zp[2]:7 [ print_sword::w#5 print_sword::w#0 print_sword::w#3 print_sword::w#1 print_sword::w#2 ] : zp[2]:7 , 
Potential registers zp[1]:9 [ print_char::ch#5 print_char::ch#2 print_char::ch#3 ] : zp[1]:9 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:10 [ print_char_cursor#36 print_char_cursor#47 print_char_cursor#53 print_char_cursor#63 print_char_cursor#13 ] : zp[2]:10 , 
Potential registers zp[1]:12 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ] : zp[1]:12 , reg byte x , 
Potential registers zp[2]:13 [ memset::dst#2 memset::dst#1 ] : zp[2]:13 , 
Potential registers zp[2]:15 [ main::w2#0 ] : zp[2]:15 , 
Potential registers zp[2]:17 [ print_word::w#0 ] : zp[2]:17 , 
Potential registers zp[1]:19 [ print_byte::$0 ] : zp[1]:19 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:20 [ print_byte::$2 ] : zp[1]:20 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 251.61: zp[2]:5 [ print_line_cursor#9 print_line_cursor#19 print_line_cursor#1 ] 49.53: zp[2]:10 [ print_char_cursor#36 print_char_cursor#47 print_char_cursor#53 print_char_cursor#63 print_char_cursor#13 ] 
Uplift Scope [print_sword] 56.67: zp[2]:7 [ print_sword::w#5 print_sword::w#0 print_sword::w#3 print_sword::w#1 print_sword::w#2 ] 
Uplift Scope [main] 24.75: zp[2]:2 [ main::w1#2 main::w1#1 ] 13: zp[1]:4 [ main::i#2 main::i#1 ] 5.5: zp[2]:15 [ main::w2#0 ] 
Uplift Scope [memset] 36.67: zp[2]:13 [ memset::dst#2 memset::dst#1 ] 
Uplift Scope [print_byte] 10: zp[1]:12 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ] 4: zp[1]:19 [ print_byte::$0 ] 4: zp[1]:20 [ print_byte::$2 ] 
Uplift Scope [print_char] 14: zp[1]:9 [ print_char::ch#5 print_char::ch#2 print_char::ch#3 ] 
Uplift Scope [print_word] 2: zp[2]:17 [ print_word::w#0 ] 
Uplift Scope [RADIX] 
Uplift Scope [print_ln] 
Uplift Scope [print_cls] 

Uplifting [] best 6517 combination zp[2]:5 [ print_line_cursor#9 print_line_cursor#19 print_line_cursor#1 ] zp[2]:10 [ print_char_cursor#36 print_char_cursor#47 print_char_cursor#53 print_char_cursor#63 print_char_cursor#13 ] 
Uplifting [print_sword] best 6517 combination zp[2]:7 [ print_sword::w#5 print_sword::w#0 print_sword::w#3 print_sword::w#1 print_sword::w#2 ] 
Uplifting [main] best 6427 combination zp[2]:2 [ main::w1#2 main::w1#1 ] reg byte x [ main::i#2 main::i#1 ] zp[2]:15 [ main::w2#0 ] 
Uplifting [memset] best 6427 combination zp[2]:13 [ memset::dst#2 memset::dst#1 ] 
Uplifting [print_byte] best 6419 combination zp[1]:12 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ] reg byte a [ print_byte::$0 ] reg byte a [ print_byte::$2 ] 
Uplifting [print_char] best 6401 combination reg byte a [ print_char::ch#5 print_char::ch#2 print_char::ch#3 ] 
Uplifting [print_word] best 6401 combination zp[2]:17 [ print_word::w#0 ] 
Uplifting [RADIX] best 6401 combination 
Uplifting [print_ln] best 6401 combination 
Uplifting [print_cls] best 6401 combination 
Attempting to uplift remaining variables inzp[1]:12 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Uplifting [print_byte] best 6401 combination zp[1]:12 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ] 
Coalescing zero page register [ zp[2]:7 [ print_sword::w#5 print_sword::w#0 print_sword::w#3 print_sword::w#1 print_sword::w#2 ] ] with [ zp[2]:17 [ print_word::w#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:13 [ memset::dst#2 memset::dst#1 ] ] with [ zp[2]:2 [ main::w1#2 main::w1#1 ] ]
Allocated (was zp[2]:5) zp[2]:2 [ print_line_cursor#9 print_line_cursor#19 print_line_cursor#1 ]
Allocated (was zp[2]:7) zp[2]:4 [ print_sword::w#5 print_sword::w#0 print_sword::w#3 print_sword::w#1 print_sword::w#2 print_word::w#0 ]
Allocated (was zp[2]:10) zp[2]:6 [ print_char_cursor#36 print_char_cursor#47 print_char_cursor#53 print_char_cursor#63 print_char_cursor#13 ]
Allocated (was zp[1]:12) zp[1]:8 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Allocated (was zp[2]:13) zp[2]:9 [ memset::dst#2 memset::dst#1 main::w1#2 main::w1#1 ]
Allocated (was zp[2]:15) zp[2]:11 [ main::w2#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests subtracting bytes from signed words
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label print_line_cursor = 2
  .label print_char_cursor = 6
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label w2 = $b
    .label w1 = 9
    // [5] call print_cls 
    // [54] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
    // [6] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [6] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [6] phi (byte*) print_line_cursor#19 = (byte*) 1024 [phi:main->main::@1#1] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_line_cursor
    lda #>$400
    sta.z print_line_cursor+1
    // [6] phi (byte*) print_char_cursor#53 = (byte*) 1024 [phi:main->main::@1#2] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_char_cursor
    lda #>$400
    sta.z print_char_cursor+1
    // [6] phi (signed word) main::w1#2 = (signed word) $4d2 [phi:main->main::@1#3] -- vwsz1=vwsc1 
    lda #<$4d2
    sta.z w1
    lda #>$4d2
    sta.z w1+1
    jmp __b1
    // main::@1
  __b1:
    // [7] (signed word) main::w2#0 ← (signed word) main::w1#2 - (signed byte) $5b -- vwsz1=vwsz2_minus_vbsc1 
    lda.z w1
    sec
    sbc #$5b
    sta.z w2
    lda.z w1+1
    sbc #>$5b
    sta.z w2+1
    // [8] (signed word) main::w1#1 ← (signed word) main::w2#0 - (signed byte) $29 -- vwsz1=vwsz2_minus_vbsc1 
    lda.z w2
    sec
    sbc #$29
    sta.z w1
    lda.z w2+1
    sbc #>$29
    sta.z w1+1
    // [9] (signed word) print_sword::w#1 ← (signed word) main::w1#1 -- vwsz1=vwsz2 
    lda.z w1
    sta.z print_sword.w
    lda.z w1+1
    sta.z print_sword.w+1
    // [10] call print_sword 
    // [26] phi from main::@1 to print_sword [phi:main::@1->print_sword]
  print_sword_from___b1:
    // [26] phi (byte*) print_char_cursor#47 = (byte*) print_char_cursor#53 [phi:main::@1->print_sword#0] -- register_copy 
    // [26] phi (signed word) print_sword::w#3 = (signed word) print_sword::w#1 [phi:main::@1->print_sword#1] -- register_copy 
    jsr print_sword
    // [11] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [12] call print_char 
    // [37] phi from main::@2 to print_char [phi:main::@2->print_char]
  print_char_from___b2:
    // [37] phi (byte*) print_char_cursor#36 = (byte*) print_char_cursor#13 [phi:main::@2->print_char#0] -- register_copy 
    // [37] phi (byte) print_char::ch#5 = (byte) ' ' [phi:main::@2->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    jmp __b3
    // main::@3
  __b3:
    // [13] (signed word) print_sword::w#2 ← (signed word) main::w2#0 -- vwsz1=vwsz2 
    lda.z w2
    sta.z print_sword.w
    lda.z w2+1
    sta.z print_sword.w+1
    // [14] call print_sword 
    // [26] phi from main::@3 to print_sword [phi:main::@3->print_sword]
  print_sword_from___b3:
    // [26] phi (byte*) print_char_cursor#47 = (byte*) print_char_cursor#13 [phi:main::@3->print_sword#0] -- register_copy 
    // [26] phi (signed word) print_sword::w#3 = (signed word) print_sword::w#2 [phi:main::@3->print_sword#1] -- register_copy 
    jsr print_sword
    // [15] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  __b4_from___b3:
    jmp __b4
    // main::@4
  __b4:
    // [16] call print_ln 
    // [21] phi from main::@4 to print_ln [phi:main::@4->print_ln]
  print_ln_from___b4:
    jsr print_ln
    jmp __b5
    // main::@5
  __b5:
    // [17] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [18] if((byte) main::i#1!=(byte) $b) goto main::@6 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$b
    bne __b6
    jmp __breturn
    // main::@return
  __breturn:
    // [19] return 
    rts
    // main::@6
  __b6:
    // [20] (byte*) print_char_cursor#63 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [6] phi from main::@6 to main::@1 [phi:main::@6->main::@1]
  __b1_from___b6:
    // [6] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@6->main::@1#0] -- register_copy 
    // [6] phi (byte*) print_line_cursor#19 = (byte*) print_line_cursor#1 [phi:main::@6->main::@1#1] -- register_copy 
    // [6] phi (byte*) print_char_cursor#53 = (byte*) print_char_cursor#63 [phi:main::@6->main::@1#2] -- register_copy 
    // [6] phi (signed word) main::w1#2 = (signed word) main::w1#1 [phi:main::@6->main::@1#3] -- register_copy 
    jmp __b1
}
  // print_ln
// Print a newline
print_ln: {
    // [22] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  __b1_from_print_ln:
  __b1_from___b1:
    // [22] phi (byte*) print_line_cursor#9 = (byte*) print_line_cursor#19 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp __b1
    // print_ln::@1
  __b1:
    // [23] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // [24] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#13) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1_from___b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1_from___b1
  !:
    jmp __breturn
    // print_ln::@return
  __breturn:
    // [25] return 
    rts
}
  // print_sword
// Print a signed word as HEX
// print_sword(signed word zeropage(4) w)
print_sword: {
    .label w = 4
    // [27] if((signed word) print_sword::w#3<(signed byte) 0) goto print_sword::@1 -- vwsz1_lt_0_then_la1 
    lda.z w+1
    bmi __b1_from_print_sword
    // [28] phi from print_sword to print_sword::@3 [phi:print_sword->print_sword::@3]
  __b3_from_print_sword:
    jmp __b3
    // print_sword::@3
  __b3:
    // [29] call print_char 
    // [37] phi from print_sword::@3 to print_char [phi:print_sword::@3->print_char]
  print_char_from___b3:
    // [37] phi (byte*) print_char_cursor#36 = (byte*) print_char_cursor#47 [phi:print_sword::@3->print_char#0] -- register_copy 
    // [37] phi (byte) print_char::ch#5 = (byte) ' ' [phi:print_sword::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // [30] phi from print_sword::@3 print_sword::@4 to print_sword::@2 [phi:print_sword::@3/print_sword::@4->print_sword::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [30] phi (signed word) print_sword::w#5 = (signed word) print_sword::w#3 [phi:print_sword::@3/print_sword::@4->print_sword::@2#0] -- register_copy 
    jmp __b2
    // print_sword::@2
  __b2:
    // [31] (word) print_word::w#0 ← (word)(signed word) print_sword::w#5
    // [32] call print_word 
    jsr print_word
    jmp __breturn
    // print_sword::@return
  __breturn:
    // [33] return 
    rts
    // [34] phi from print_sword to print_sword::@1 [phi:print_sword->print_sword::@1]
  __b1_from_print_sword:
    jmp __b1
    // print_sword::@1
  __b1:
    // [35] call print_char 
    // [37] phi from print_sword::@1 to print_char [phi:print_sword::@1->print_char]
  print_char_from___b1:
    // [37] phi (byte*) print_char_cursor#36 = (byte*) print_char_cursor#47 [phi:print_sword::@1->print_char#0] -- register_copy 
    // [37] phi (byte) print_char::ch#5 = (byte) '-' [phi:print_sword::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    jmp __b4
    // print_sword::@4
  __b4:
    // [36] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#3 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z w
    sta.z w
    lda #0
    sbc.z w+1
    sta.z w+1
    jmp __b2_from___b4
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // [38] *((byte*) print_char_cursor#36) ← (byte) print_char::ch#5 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // [39] (byte*) print_char_cursor#13 ← ++ (byte*) print_char_cursor#36 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp __breturn
    // print_char::@return
  __breturn:
    // [40] return 
    rts
}
  // print_word
// Print a word as HEX
// print_word(word zeropage(4) w)
print_word: {
    .label w = 4
    // [41] (byte) print_byte::b#0 ← > (word) print_word::w#0 -- vbuz1=_hi_vwuz2 
    lda.z w+1
    sta.z print_byte.b
    // [42] call print_byte 
    // [46] phi from print_word to print_byte [phi:print_word->print_byte]
  print_byte_from_print_word:
    // [46] phi (byte) print_byte::b#2 = (byte) print_byte::b#0 [phi:print_word->print_byte#0] -- register_copy 
    jsr print_byte
    jmp __b1
    // print_word::@1
  __b1:
    // [43] (byte) print_byte::b#1 ← < (word) print_word::w#0 -- vbuz1=_lo_vwuz2 
    lda.z w
    sta.z print_byte.b
    // [44] call print_byte 
    // [46] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  print_byte_from___b1:
    // [46] phi (byte) print_byte::b#2 = (byte) print_byte::b#1 [phi:print_word::@1->print_byte#0] -- register_copy 
    jsr print_byte
    jmp __breturn
    // print_word::@return
  __breturn:
    // [45] return 
    rts
}
  // print_byte
// Print a byte as HEX
// print_byte(byte zeropage(8) b)
print_byte: {
    .label b = 8
    // [47] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte) 4 -- vbuaa=vbuz1_ror_4 
    lda.z b
    lsr
    lsr
    lsr
    lsr
    // [48] (byte) print_char::ch#2 ← *((const byte*) print_hextab + (byte~) print_byte::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [49] call print_char 
    // [37] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
    // [37] phi (byte*) print_char_cursor#36 = (byte*) print_char_cursor#13 [phi:print_byte->print_char#0] -- register_copy 
    // [37] phi (byte) print_char::ch#5 = (byte) print_char::ch#2 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp __b1
    // print_byte::@1
  __b1:
    // [50] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z b
    // [51] (byte) print_char::ch#3 ← *((const byte*) print_hextab + (byte~) print_byte::$2) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [52] call print_char 
    // [37] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from___b1:
    // [37] phi (byte*) print_char_cursor#36 = (byte*) print_char_cursor#13 [phi:print_byte::@1->print_char#0] -- register_copy 
    // [37] phi (byte) print_char::ch#5 = (byte) print_char::ch#3 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp __breturn
    // print_byte::@return
  __breturn:
    // [53] return 
    rts
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // [55] call memset 
    // [57] phi from print_cls to memset [phi:print_cls->memset]
  memset_from_print_cls:
    jsr memset
    jmp __breturn
    // print_cls::@return
  __breturn:
    // [56] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = $400
    .label end = str+num
    .label dst = 9
    // [58] phi from memset to memset::@1 [phi:memset->memset::@1]
  __b1_from_memset:
    // [58] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    jmp __b1
    // memset::@1
  __b1:
    // [59] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    jmp __breturn
    // memset::@return
  __breturn:
    // [60] return 
    rts
    // memset::@2
  __b2:
    // [61] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // [62] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [58] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
  __b1_from___b2:
    // [58] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
  print_hextab: .text "0123456789abcdef"

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __bbegin with __b1
Replacing label __b1_from___b1 with __b1
Replacing label __b1_from___b1 with __b1
Replacing label __b1_from_print_sword with __b1
Replacing label __b2_from___b4 with __b2
Removing instruction __bbegin:
Removing instruction __b1_from___bbegin:
Removing instruction main_from___b1:
Removing instruction __bend_from___b1:
Removing instruction __b2_from___b1:
Removing instruction print_char_from___b2:
Removing instruction __b4_from___b3:
Removing instruction print_ln_from___b4:
Removing instruction __b1_from_print_ln:
Removing instruction __b1_from___b1:
Removing instruction __b3_from_print_sword:
Removing instruction print_char_from___b3:
Removing instruction __b2_from___b3:
Removing instruction __b2_from___b4:
Removing instruction __b1_from_print_sword:
Removing instruction print_char_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction print_cls_from_main:
Removing instruction __b1_from_main:
Removing instruction print_sword_from___b1:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction print_sword_from___b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __breturn:
Removing instruction __b1_from___b6:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __breturn:
Removing instruction print_byte_from_print_word:
Removing instruction __b1:
Removing instruction print_byte_from___b1:
Removing instruction __breturn:
Removing instruction print_char_from_print_byte:
Removing instruction __b1:
Removing instruction print_char_from___b1:
Removing instruction __breturn:
Removing instruction memset_from_print_cls:
Removing instruction __breturn:
Removing instruction __b1_from_memset:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction __b1:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@return
(byte) main::i
(byte) main::i#1 reg byte x 11.0
(byte) main::i#2 reg byte x 2.0
(signed word) main::w1
(signed word) main::w1#1 w1 zp[2]:9 2.75
(signed word) main::w1#2 w1 zp[2]:9 22.0
(signed word) main::w2
(signed word) main::w2#0 w2 zp[2]:11 5.5
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@return
(byte) memset::c
(const byte) memset::c#0 c = (byte) ' '
(byte*) memset::dst
(byte*) memset::dst#1 dst zp[2]:9 22.0
(byte*) memset::dst#2 dst zp[2]:9 14.666666666666666
(byte*) memset::end
(const byte*) memset::end#0 end = (byte*)(const void*) memset::str#0+(const word) memset::num#0
(word) memset::num
(const word) memset::num#0 num = (word) $3e8
(void*) memset::return
(void*) memset::str
(const void*) memset::str#0 str = (void*)(byte*) 1024
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 reg byte a 4.0
(byte~) print_byte::$2 reg byte a 4.0
(label) print_byte::@1
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#0 b zp[1]:8 4.0
(byte) print_byte::b#1 b zp[1]:8 4.0
(byte) print_byte::b#2 b zp[1]:8 2.0
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#2 reg byte a 4.0
(byte) print_char::ch#3 reg byte a 4.0
(byte) print_char::ch#5 reg byte a 6.0
(byte*) print_char_cursor
(byte*) print_char_cursor#13 print_char_cursor zp[2]:6 4.03125
(byte*) print_char_cursor#36 print_char_cursor zp[2]:6 11.5
(byte*) print_char_cursor#47 print_char_cursor zp[2]:6 6.5
(byte*) print_char_cursor#53 print_char_cursor zp[2]:6 5.5
(byte*) print_char_cursor#63 print_char_cursor zp[2]:6 22.0
(void()) print_cls()
(label) print_cls::@return
(const byte*) print_hextab = (string) "0123456789abcdef"z
(byte*) print_line_cursor
(byte*) print_line_cursor#1 print_line_cursor zp[2]:2 46.42857142857143
(byte*) print_line_cursor#19 print_line_cursor zp[2]:2 1.1818181818181819
(byte*) print_line_cursor#9 print_line_cursor zp[2]:2 204.0
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(byte*) print_screen
(void()) print_sword((signed word) print_sword::w)
(label) print_sword::@1
(label) print_sword::@2
(label) print_sword::@3
(label) print_sword::@4
(label) print_sword::@return
(signed word) print_sword::w
(signed word) print_sword::w#0 w zp[2]:4 4.0
(signed word) print_sword::w#1 w zp[2]:4 22.0
(signed word) print_sword::w#2 w zp[2]:4 22.0
(signed word) print_sword::w#3 w zp[2]:4 4.666666666666666
(signed word) print_sword::w#5 w zp[2]:4 4.0
(void()) print_word((word) print_word::w)
(label) print_word::@1
(label) print_word::@return
(word) print_word::w
(word) print_word::w#0 w zp[2]:4 2.0

reg byte x [ main::i#2 main::i#1 ]
zp[2]:2 [ print_line_cursor#9 print_line_cursor#19 print_line_cursor#1 ]
zp[2]:4 [ print_sword::w#5 print_sword::w#0 print_sword::w#3 print_sword::w#1 print_sword::w#2 print_word::w#0 ]
reg byte a [ print_char::ch#5 print_char::ch#2 print_char::ch#3 ]
zp[2]:6 [ print_char_cursor#36 print_char_cursor#47 print_char_cursor#53 print_char_cursor#63 print_char_cursor#13 ]
zp[1]:8 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
zp[2]:9 [ memset::dst#2 memset::dst#1 main::w1#2 main::w1#1 ]
zp[2]:11 [ main::w2#0 ]
reg byte a [ print_byte::$0 ]
reg byte a [ print_byte::$2 ]


FINAL ASSEMBLER
Score: 5558

  // File Comments
// Tests subtracting bytes from signed words
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label print_line_cursor = 2
  .label print_char_cursor = 6
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label w2 = $b
    .label w1 = 9
    // print_cls()
    // [5] call print_cls 
    // [54] phi from main to print_cls [phi:main->print_cls]
    jsr print_cls
    // [6] phi from main to main::@1 [phi:main->main::@1]
    // [6] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [6] phi (byte*) print_line_cursor#19 = (byte*) 1024 [phi:main->main::@1#1] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_line_cursor
    lda #>$400
    sta.z print_line_cursor+1
    // [6] phi (byte*) print_char_cursor#53 = (byte*) 1024 [phi:main->main::@1#2] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_char_cursor
    lda #>$400
    sta.z print_char_cursor+1
    // [6] phi (signed word) main::w1#2 = (signed word) $4d2 [phi:main->main::@1#3] -- vwsz1=vwsc1 
    lda #<$4d2
    sta.z w1
    lda #>$4d2
    sta.z w1+1
    // main::@1
  __b1:
    // w2 = w1 - 91
    // [7] (signed word) main::w2#0 ← (signed word) main::w1#2 - (signed byte) $5b -- vwsz1=vwsz2_minus_vbsc1 
    lda.z w1
    sec
    sbc #$5b
    sta.z w2
    lda.z w1+1
    sbc #>$5b
    sta.z w2+1
    // w1 = w2 - 41
    // [8] (signed word) main::w1#1 ← (signed word) main::w2#0 - (signed byte) $29 -- vwsz1=vwsz2_minus_vbsc1 
    lda.z w2
    sec
    sbc #$29
    sta.z w1
    lda.z w2+1
    sbc #>$29
    sta.z w1+1
    // print_sword(w1)
    // [9] (signed word) print_sword::w#1 ← (signed word) main::w1#1 -- vwsz1=vwsz2 
    lda.z w1
    sta.z print_sword.w
    lda.z w1+1
    sta.z print_sword.w+1
    // [10] call print_sword 
    // [26] phi from main::@1 to print_sword [phi:main::@1->print_sword]
    // [26] phi (byte*) print_char_cursor#47 = (byte*) print_char_cursor#53 [phi:main::@1->print_sword#0] -- register_copy 
    // [26] phi (signed word) print_sword::w#3 = (signed word) print_sword::w#1 [phi:main::@1->print_sword#1] -- register_copy 
    jsr print_sword
    // [11] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // main::@2
    // print_char(' ')
    // [12] call print_char 
    // [37] phi from main::@2 to print_char [phi:main::@2->print_char]
    // [37] phi (byte*) print_char_cursor#36 = (byte*) print_char_cursor#13 [phi:main::@2->print_char#0] -- register_copy 
    // [37] phi (byte) print_char::ch#5 = (byte) ' ' [phi:main::@2->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // main::@3
    // print_sword(w2)
    // [13] (signed word) print_sword::w#2 ← (signed word) main::w2#0 -- vwsz1=vwsz2 
    lda.z w2
    sta.z print_sword.w
    lda.z w2+1
    sta.z print_sword.w+1
    // [14] call print_sword 
    // [26] phi from main::@3 to print_sword [phi:main::@3->print_sword]
    // [26] phi (byte*) print_char_cursor#47 = (byte*) print_char_cursor#13 [phi:main::@3->print_sword#0] -- register_copy 
    // [26] phi (signed word) print_sword::w#3 = (signed word) print_sword::w#2 [phi:main::@3->print_sword#1] -- register_copy 
    jsr print_sword
    // [15] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
    // main::@4
    // print_ln()
    // [16] call print_ln 
    // [21] phi from main::@4 to print_ln [phi:main::@4->print_ln]
    jsr print_ln
    // main::@5
    // for( byte i: 0..10 )
    // [17] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [18] if((byte) main::i#1!=(byte) $b) goto main::@6 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$b
    bne __b6
    // main::@return
    // }
    // [19] return 
    rts
    // main::@6
  __b6:
    // [20] (byte*) print_char_cursor#63 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [6] phi from main::@6 to main::@1 [phi:main::@6->main::@1]
    // [6] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@6->main::@1#0] -- register_copy 
    // [6] phi (byte*) print_line_cursor#19 = (byte*) print_line_cursor#1 [phi:main::@6->main::@1#1] -- register_copy 
    // [6] phi (byte*) print_char_cursor#53 = (byte*) print_char_cursor#63 [phi:main::@6->main::@1#2] -- register_copy 
    // [6] phi (signed word) main::w1#2 = (signed word) main::w1#1 [phi:main::@6->main::@1#3] -- register_copy 
    jmp __b1
}
  // print_ln
// Print a newline
print_ln: {
    // [22] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
    // [22] phi (byte*) print_line_cursor#9 = (byte*) print_line_cursor#19 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    // print_ln::@1
  __b1:
    // print_line_cursor + $28
    // [23] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // while (print_line_cursor<print_char_cursor)
    // [24] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#13) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1
  !:
    // print_ln::@return
    // }
    // [25] return 
    rts
}
  // print_sword
// Print a signed word as HEX
// print_sword(signed word zeropage(4) w)
print_sword: {
    .label w = 4
    // if(w<0)
    // [27] if((signed word) print_sword::w#3<(signed byte) 0) goto print_sword::@1 -- vwsz1_lt_0_then_la1 
    lda.z w+1
    bmi __b1
    // [28] phi from print_sword to print_sword::@3 [phi:print_sword->print_sword::@3]
    // print_sword::@3
    // print_char(' ')
    // [29] call print_char 
    // [37] phi from print_sword::@3 to print_char [phi:print_sword::@3->print_char]
    // [37] phi (byte*) print_char_cursor#36 = (byte*) print_char_cursor#47 [phi:print_sword::@3->print_char#0] -- register_copy 
    // [37] phi (byte) print_char::ch#5 = (byte) ' ' [phi:print_sword::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // [30] phi from print_sword::@3 print_sword::@4 to print_sword::@2 [phi:print_sword::@3/print_sword::@4->print_sword::@2]
    // [30] phi (signed word) print_sword::w#5 = (signed word) print_sword::w#3 [phi:print_sword::@3/print_sword::@4->print_sword::@2#0] -- register_copy 
    // print_sword::@2
  __b2:
    // print_word((word)w)
    // [31] (word) print_word::w#0 ← (word)(signed word) print_sword::w#5
    // [32] call print_word 
    jsr print_word
    // print_sword::@return
    // }
    // [33] return 
    rts
    // [34] phi from print_sword to print_sword::@1 [phi:print_sword->print_sword::@1]
    // print_sword::@1
  __b1:
    // print_char('-')
    // [35] call print_char 
    // [37] phi from print_sword::@1 to print_char [phi:print_sword::@1->print_char]
    // [37] phi (byte*) print_char_cursor#36 = (byte*) print_char_cursor#47 [phi:print_sword::@1->print_char#0] -- register_copy 
    // [37] phi (byte) print_char::ch#5 = (byte) '-' [phi:print_sword::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    // print_sword::@4
    // w = -w
    // [36] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#3 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z w
    sta.z w
    lda #0
    sbc.z w+1
    sta.z w+1
    jmp __b2
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // *(print_char_cursor++) = ch
    // [38] *((byte*) print_char_cursor#36) ← (byte) print_char::ch#5 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // *(print_char_cursor++) = ch;
    // [39] (byte*) print_char_cursor#13 ← ++ (byte*) print_char_cursor#36 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    // print_char::@return
    // }
    // [40] return 
    rts
}
  // print_word
// Print a word as HEX
// print_word(word zeropage(4) w)
print_word: {
    .label w = 4
    // print_byte(>w)
    // [41] (byte) print_byte::b#0 ← > (word) print_word::w#0 -- vbuz1=_hi_vwuz2 
    lda.z w+1
    sta.z print_byte.b
    // [42] call print_byte 
    // [46] phi from print_word to print_byte [phi:print_word->print_byte]
    // [46] phi (byte) print_byte::b#2 = (byte) print_byte::b#0 [phi:print_word->print_byte#0] -- register_copy 
    jsr print_byte
    // print_word::@1
    // print_byte(<w)
    // [43] (byte) print_byte::b#1 ← < (word) print_word::w#0 -- vbuz1=_lo_vwuz2 
    lda.z w
    sta.z print_byte.b
    // [44] call print_byte 
    // [46] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
    // [46] phi (byte) print_byte::b#2 = (byte) print_byte::b#1 [phi:print_word::@1->print_byte#0] -- register_copy 
    jsr print_byte
    // print_word::@return
    // }
    // [45] return 
    rts
}
  // print_byte
// Print a byte as HEX
// print_byte(byte zeropage(8) b)
print_byte: {
    .label b = 8
    // b>>4
    // [47] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte) 4 -- vbuaa=vbuz1_ror_4 
    lda.z b
    lsr
    lsr
    lsr
    lsr
    // print_char(print_hextab[b>>4])
    // [48] (byte) print_char::ch#2 ← *((const byte*) print_hextab + (byte~) print_byte::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [49] call print_char 
    // [37] phi from print_byte to print_char [phi:print_byte->print_char]
    // [37] phi (byte*) print_char_cursor#36 = (byte*) print_char_cursor#13 [phi:print_byte->print_char#0] -- register_copy 
    // [37] phi (byte) print_char::ch#5 = (byte) print_char::ch#2 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    // print_byte::@1
    // b&$f
    // [50] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z b
    // print_char(print_hextab[b&$f])
    // [51] (byte) print_char::ch#3 ← *((const byte*) print_hextab + (byte~) print_byte::$2) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [52] call print_char 
    // [37] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
    // [37] phi (byte*) print_char_cursor#36 = (byte*) print_char_cursor#13 [phi:print_byte::@1->print_char#0] -- register_copy 
    // [37] phi (byte) print_char::ch#5 = (byte) print_char::ch#3 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    // print_byte::@return
    // }
    // [53] return 
    rts
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // memset(print_screen, ' ', 1000)
    // [55] call memset 
    // [57] phi from print_cls to memset [phi:print_cls->memset]
    jsr memset
    // print_cls::@return
    // }
    // [56] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = $400
    .label end = str+num
    .label dst = 9
    // [58] phi from memset to memset::@1 [phi:memset->memset::@1]
    // [58] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    // memset::@1
  __b1:
    // for(char* dst = str; dst!=end; dst++)
    // [59] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    // memset::@return
    // }
    // [60] return 
    rts
    // memset::@2
  __b2:
    // *dst = c
    // [61] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [62] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [58] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
    // [58] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
  print_hextab: .text "0123456789abcdef"

