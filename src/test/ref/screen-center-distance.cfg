@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  [5] call init_font_hex 
  to:main::toD0181
main::toD0181: scope:[main]  from main
  [6] phi()
  to:main::@10
main::@10: scope:[main]  from main::toD0181
  [7] *((const byte*) D018#0) ← (const byte) main::toD0181_return#0
  [8] call init_squares 
  to:main::@1
main::@1: scope:[main]  from main::@10 main::@9
  [9] (byte*) main::screen_bottomline#10 ← phi( main::@9/(byte*) main::screen_bottomline#1 main::@10/(const byte*) SCREEN#0+(word)(number) $28*(number) $18 )
  [9] (byte*) main::screen_topline#10 ← phi( main::@9/(byte*) main::screen_topline#1 main::@10/(const byte*) SCREEN#0 )
  [9] (byte) main::y#10 ← phi( main::@9/(byte) main::y#1 main::@10/(byte) 0 )
  [10] (byte) main::y2#0 ← (byte) main::y#10 << (byte) 1
  [11] if((byte) main::y2#0>=(byte) $18) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1
  [12] (byte~) main::$7 ← (byte) $18 - (byte) main::y2#0
  to:main::@4
main::@4: scope:[main]  from main::@2 main::@3
  [13] (byte) main::yd#0 ← phi( main::@2/(byte~) main::$9 main::@3/(byte~) main::$7 )
  [14] (byte) sqr::val#0 ← (byte) main::yd#0
  [15] call sqr 
  [16] (word) sqr::return#2 ← (word) sqr::return#0
  to:main::@11
main::@11: scope:[main]  from main::@4
  [17] (word) main::yds#0 ← (word) sqr::return#2
  to:main::@5
main::@5: scope:[main]  from main::@11 main::@13
  [18] (byte) main::xb#2 ← phi( main::@11/(byte) $27 main::@13/(byte) main::xb#1 )
  [18] (byte) main::x#2 ← phi( main::@11/(byte) 0 main::@13/(byte) main::x#1 )
  [19] (byte) main::x2#0 ← (byte) main::x#2 << (byte) 1
  [20] if((byte) main::x2#0>=(byte) $27) goto main::@6
  to:main::@7
main::@7: scope:[main]  from main::@5
  [21] (byte~) main::$15 ← (byte) $27 - (byte) main::x2#0
  to:main::@8
main::@8: scope:[main]  from main::@6 main::@7
  [22] (byte) main::xd#0 ← phi( main::@6/(byte~) main::$17 main::@7/(byte~) main::$15 )
  [23] (byte) sqr::val#1 ← (byte) main::xd#0
  [24] call sqr 
  [25] (word) sqr::return#3 ← (word) sqr::return#0
  to:main::@12
main::@12: scope:[main]  from main::@8
  [26] (word) main::xds#0 ← (word) sqr::return#3
  [27] (word) main::ds#0 ← (word) main::xds#0 + (word) main::yds#0
  [28] (word) sqrt::val#0 ← (word) main::ds#0
  [29] call sqrt 
  [30] (byte) sqrt::return#2 ← (byte) sqrt::return#0
  to:main::@13
main::@13: scope:[main]  from main::@12
  [31] (byte) main::d#0 ← (byte) sqrt::return#2
  [32] *((byte*) main::screen_topline#10 + (byte) main::x#2) ← (byte) main::d#0
  [33] *((byte*) main::screen_bottomline#10 + (byte) main::x#2) ← (byte) main::d#0
  [34] *((byte*) main::screen_topline#10 + (byte) main::xb#2) ← (byte) main::d#0
  [35] *((byte*) main::screen_bottomline#10 + (byte) main::xb#2) ← (byte) main::d#0
  [36] (byte) main::x#1 ← ++ (byte) main::x#2
  [37] (byte) main::xb#1 ← -- (byte) main::xb#2
  [38] if((byte) main::x#1<(byte) $13+(byte) 1) goto main::@5
  to:main::@9
main::@9: scope:[main]  from main::@13
  [39] (byte*) main::screen_topline#1 ← (byte*) main::screen_topline#10 + (byte) $28
  [40] (byte*) main::screen_bottomline#1 ← (byte*) main::screen_bottomline#10 - (byte) $28
  [41] (byte) main::y#1 ← ++ (byte) main::y#10
  [42] if((byte) main::y#1!=(byte) $d) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@9
  [43] return 
  to:@return
main::@6: scope:[main]  from main::@5
  [44] (byte~) main::$17 ← (byte) main::x2#0 - (byte) $27
  to:main::@8
main::@2: scope:[main]  from main::@1
  [45] (byte~) main::$9 ← (byte) main::y2#0 - (byte) $18
  to:main::@4
sqrt: scope:[sqrt]  from main::@12
  [46] (word) bsearch16u::key#0 ← (word) sqrt::val#0
  [47] call bsearch16u 
  [48] (word*) bsearch16u::return#3 ← (word*) bsearch16u::return#1
  to:sqrt::@1
sqrt::@1: scope:[sqrt]  from sqrt
  [49] (word*) sqrt::found#0 ← (word*) bsearch16u::return#3
  [50] (word~) sqrt::$3 ← (word*) sqrt::found#0 - (const word*) SQUARES#1
  [51] (word~) sqrt::$1 ← (word~) sqrt::$3 >> (byte) 1
  [52] (byte) sqrt::return#0 ← (byte)(word~) sqrt::$1
  to:sqrt::@return
sqrt::@return: scope:[sqrt]  from sqrt::@1
  [53] return 
  to:@return
bsearch16u: scope:[bsearch16u]  from sqrt
  [54] phi()
  to:bsearch16u::@3
bsearch16u::@3: scope:[bsearch16u]  from bsearch16u bsearch16u::@7
  [55] (word*) bsearch16u::items#2 ← phi( bsearch16u/(const word*) SQUARES#1 bsearch16u::@7/(word*) bsearch16u::items#8 )
  [55] (byte) bsearch16u::num#3 ← phi( bsearch16u/(const byte) NUM_SQUARES#1 bsearch16u::@7/(byte) bsearch16u::num#0 )
  [56] if((byte) bsearch16u::num#3>(byte) 0) goto bsearch16u::@4
  to:bsearch16u::@5
bsearch16u::@5: scope:[bsearch16u]  from bsearch16u::@3
  [57] if(*((word*) bsearch16u::items#2)<=(word) bsearch16u::key#0) goto bsearch16u::@2
  to:bsearch16u::@1
bsearch16u::@1: scope:[bsearch16u]  from bsearch16u::@5
  [58] (word*~) bsearch16u::$2 ← (word*) bsearch16u::items#2 - (byte) 1*(const byte) SIZEOF_WORD
  to:bsearch16u::@2
bsearch16u::@2: scope:[bsearch16u]  from bsearch16u::@1 bsearch16u::@5
  [59] (word*) bsearch16u::return#2 ← phi( bsearch16u::@5/(word*) bsearch16u::items#2 bsearch16u::@1/(word*~) bsearch16u::$2 )
  to:bsearch16u::@return
bsearch16u::@return: scope:[bsearch16u]  from bsearch16u::@2 bsearch16u::@8
  [60] (word*) bsearch16u::return#1 ← phi( bsearch16u::@8/(word*~) bsearch16u::return#6 bsearch16u::@2/(word*) bsearch16u::return#2 )
  [61] return 
  to:@return
bsearch16u::@4: scope:[bsearch16u]  from bsearch16u::@3
  [62] (byte~) bsearch16u::$6 ← (byte) bsearch16u::num#3 >> (byte) 1
  [63] (byte~) bsearch16u::$16 ← (byte~) bsearch16u::$6 << (byte) 1
  [64] (word*) bsearch16u::pivot#0 ← (word*) bsearch16u::items#2 + (byte~) bsearch16u::$16
  [65] (signed word) bsearch16u::result#0 ← (signed word)(word) bsearch16u::key#0 - (signed word)*((word*) bsearch16u::pivot#0)
  [66] if((signed word) bsearch16u::result#0!=(signed byte) 0) goto bsearch16u::@6
  to:bsearch16u::@8
bsearch16u::@8: scope:[bsearch16u]  from bsearch16u::@4
  [67] (word*~) bsearch16u::return#6 ← (word*) bsearch16u::pivot#0
  to:bsearch16u::@return
bsearch16u::@6: scope:[bsearch16u]  from bsearch16u::@4
  [68] if((signed word) bsearch16u::result#0<=(signed byte) 0) goto bsearch16u::@7
  to:bsearch16u::@9
bsearch16u::@9: scope:[bsearch16u]  from bsearch16u::@6
  [69] (word*) bsearch16u::items#0 ← (word*) bsearch16u::pivot#0 + (byte) 1*(const byte) SIZEOF_WORD
  [70] (byte) bsearch16u::num#1 ← -- (byte) bsearch16u::num#3
  to:bsearch16u::@7
bsearch16u::@7: scope:[bsearch16u]  from bsearch16u::@6 bsearch16u::@9
  [71] (word*) bsearch16u::items#8 ← phi( bsearch16u::@9/(word*) bsearch16u::items#0 bsearch16u::@6/(word*) bsearch16u::items#2 )
  [71] (byte) bsearch16u::num#5 ← phi( bsearch16u::@9/(byte) bsearch16u::num#1 bsearch16u::@6/(byte) bsearch16u::num#3 )
  [72] (byte) bsearch16u::num#0 ← (byte) bsearch16u::num#5 >> (byte) 1
  to:bsearch16u::@3
sqr: scope:[sqr]  from main::@4 main::@8
  [73] (byte) sqr::val#2 ← phi( main::@4/(byte) sqr::val#0 main::@8/(byte) sqr::val#1 )
  [74] (byte~) sqr::$0 ← (byte) sqr::val#2 << (byte) 1
  [75] (word) sqr::return#0 ← *((const word*) SQUARES#1 + (byte~) sqr::$0)
  to:sqr::@return
sqr::@return: scope:[sqr]  from sqr
  [76] return 
  to:@return
init_squares: scope:[init_squares]  from main::@10
  [77] phi()
  [78] call malloc 
  to:init_squares::@1
init_squares::@1: scope:[init_squares]  from init_squares init_squares::@1
  [79] (byte) init_squares::i#2 ← phi( init_squares::@1/(byte) init_squares::i#1 init_squares/(byte) 0 )
  [79] (word*) init_squares::squares#2 ← phi( init_squares::@1/(word*) init_squares::squares#1 init_squares/(const word*) SQUARES#1 )
  [79] (word) init_squares::sqr#2 ← phi( init_squares::@1/(word) init_squares::sqr#1 init_squares/(byte) 0 )
  [80] *((word*) init_squares::squares#2) ← (word) init_squares::sqr#2
  [81] (word*) init_squares::squares#1 ← (word*) init_squares::squares#2 + (const byte) SIZEOF_WORD
  [82] (byte~) init_squares::$3 ← (byte) init_squares::i#2 << (byte) 1
  [83] (byte~) init_squares::$4 ← (byte~) init_squares::$3 + (byte) 1
  [84] (word) init_squares::sqr#1 ← (word) init_squares::sqr#2 + (byte~) init_squares::$4
  [85] (byte) init_squares::i#1 ← ++ (byte) init_squares::i#2
  [86] if((byte) init_squares::i#1!=(const byte) NUM_SQUARES#1-(byte) 1+(byte) 1) goto init_squares::@1
  to:init_squares::@return
init_squares::@return: scope:[init_squares]  from init_squares::@1
  [87] return 
  to:@return
malloc: scope:[malloc]  from init_squares
  [88] phi()
  to:malloc::@return
malloc::@return: scope:[malloc]  from malloc
  [89] return 
  to:@return
init_font_hex: scope:[init_font_hex]  from main
  [90] phi()
  to:init_font_hex::@1
init_font_hex::@1: scope:[init_font_hex]  from init_font_hex init_font_hex::@5
  [91] (byte) init_font_hex::c#6 ← phi( init_font_hex/(byte) 0 init_font_hex::@5/(byte) init_font_hex::c#1 )
  [91] (byte*) init_font_hex::proto_hi#6 ← phi( init_font_hex/(const byte[]) FONT_HEX_PROTO#0 init_font_hex::@5/(byte*) init_font_hex::proto_hi#1 )
  [91] (byte*) init_font_hex::charset#5 ← phi( init_font_hex/(const byte*) CHARSET#0 init_font_hex::@5/(byte*) init_font_hex::charset#0 )
  to:init_font_hex::@2
init_font_hex::@2: scope:[init_font_hex]  from init_font_hex::@1 init_font_hex::@4
  [92] (byte) init_font_hex::c1#4 ← phi( init_font_hex::@1/(byte) 0 init_font_hex::@4/(byte) init_font_hex::c1#1 )
  [92] (byte*) init_font_hex::proto_lo#4 ← phi( init_font_hex::@1/(const byte[]) FONT_HEX_PROTO#0 init_font_hex::@4/(byte*) init_font_hex::proto_lo#1 )
  [92] (byte*) init_font_hex::charset#2 ← phi( init_font_hex::@1/(byte*) init_font_hex::charset#5 init_font_hex::@4/(byte*) init_font_hex::charset#0 )
  [93] *((byte*) init_font_hex::charset#2) ← (byte) 0
  to:init_font_hex::@3
init_font_hex::@3: scope:[init_font_hex]  from init_font_hex::@2 init_font_hex::@3
  [94] (byte) init_font_hex::idx#5 ← phi( init_font_hex::@2/(byte) 1 init_font_hex::@3/(byte) init_font_hex::idx#2 )
  [94] (byte) init_font_hex::i#2 ← phi( init_font_hex::@2/(byte) 0 init_font_hex::@3/(byte) init_font_hex::i#1 )
  [95] (byte~) init_font_hex::$0 ← *((byte*) init_font_hex::proto_hi#6 + (byte) init_font_hex::i#2) << (byte) 4
  [96] (byte~) init_font_hex::$1 ← *((byte*) init_font_hex::proto_lo#4 + (byte) init_font_hex::i#2) << (byte) 1
  [97] (byte~) init_font_hex::$2 ← (byte~) init_font_hex::$0 | (byte~) init_font_hex::$1
  [98] *((byte*) init_font_hex::charset#2 + (byte) init_font_hex::idx#5) ← (byte~) init_font_hex::$2
  [99] (byte) init_font_hex::idx#2 ← ++ (byte) init_font_hex::idx#5
  [100] (byte) init_font_hex::i#1 ← ++ (byte) init_font_hex::i#2
  [101] if((byte) init_font_hex::i#1!=(byte) 5) goto init_font_hex::@3
  to:init_font_hex::@4
init_font_hex::@4: scope:[init_font_hex]  from init_font_hex::@3
  [102] *((byte*) init_font_hex::charset#2 + (byte) init_font_hex::idx#2) ← (byte) 0
  [103] (byte) init_font_hex::idx#3 ← ++ (byte) init_font_hex::idx#2
  [104] *((byte*) init_font_hex::charset#2 + (byte) init_font_hex::idx#3) ← (byte) 0
  [105] (byte*) init_font_hex::proto_lo#1 ← (byte*) init_font_hex::proto_lo#4 + (byte) 5
  [106] (byte*) init_font_hex::charset#0 ← (byte*) init_font_hex::charset#2 + (byte) 8
  [107] (byte) init_font_hex::c1#1 ← ++ (byte) init_font_hex::c1#4
  [108] if((byte) init_font_hex::c1#1!=(byte) $10) goto init_font_hex::@2
  to:init_font_hex::@5
init_font_hex::@5: scope:[init_font_hex]  from init_font_hex::@4
  [109] (byte*) init_font_hex::proto_hi#1 ← (byte*) init_font_hex::proto_hi#6 + (byte) 5
  [110] (byte) init_font_hex::c#1 ← ++ (byte) init_font_hex::c#6
  [111] if((byte) init_font_hex::c#1!=(byte) $10) goto init_font_hex::@1
  to:init_font_hex::@return
init_font_hex::@return: scope:[init_font_hex]  from init_font_hex::@5
  [112] return 
  to:@return
