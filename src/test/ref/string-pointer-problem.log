Inlined call call __init 

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  set_process_name::name#0 = main::name
  call set_process_name 
  to:main::@1
main::@1: scope:[main]  from main
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void set_process_name(byte* set_process_name::name)
set_process_name: scope:[set_process_name]  from main
  set_process_name::name#3 = phi( main/set_process_name::name#0 )
  set_process_name::j#0 = 0
  to:set_process_name::@1
set_process_name::@1: scope:[set_process_name]  from set_process_name set_process_name::@2
  set_process_name::name#2 = phi( set_process_name/set_process_name::name#3, set_process_name::@2/set_process_name::name#1 )
  set_process_name::j#2 = phi( set_process_name/set_process_name::j#0, set_process_name::@2/set_process_name::j#1 )
  set_process_name::$0 = set_process_name::j#2 < $11
  if(set_process_name::$0) goto set_process_name::@2
  to:set_process_name::@return
set_process_name::@2: scope:[set_process_name]  from set_process_name::@1
  set_process_name::j#3 = phi( set_process_name::@1/set_process_name::j#2 )
  set_process_name::name#1 = phi( set_process_name::@1/set_process_name::name#2 )
  process_name[set_process_name::j#3] = set_process_name::name#1[set_process_name::j#3]
  set_process_name::j#1 = ++ set_process_name::j#3
  to:set_process_name::@1
set_process_name::@return: scope:[set_process_name]  from set_process_name::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
void main()
const byte* main::name[9]  = "keyboard"
const byte* process_name = (byte*)$400
void set_process_name(byte* set_process_name::name)
bool~ set_process_name::$0
signed word set_process_name::j
signed word set_process_name::j#0
signed word set_process_name::j#1
signed word set_process_name::j#2
signed word set_process_name::j#3
byte* set_process_name::name
byte* set_process_name::name#0
byte* set_process_name::name#1
byte* set_process_name::name#2
byte* set_process_name::name#3

Adding number conversion cast (snumber) $11 in set_process_name::$0 = set_process_name::j#2 < $11
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $11
Successful SSA optimization PassNCastSimplification
Finalized signed number type $11
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias set_process_name::name#1 = set_process_name::name#2 
Alias set_process_name::j#2 = set_process_name::j#3 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values set_process_name::name#3 set_process_name::name#0
Identical Phi Values set_process_name::name#1 set_process_name::name#3
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition set_process_name::$0 [7] if(set_process_name::j#2<$11) goto set_process_name::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant set_process_name::name#0 = main::name
Constant set_process_name::j#0 = 0
Successful SSA optimization Pass2ConstantIdentification
De-inlining pointer[w] to *(pointer+w)   [8] process_name[set_process_name::j#2] = set_process_name::name#0[set_process_name::j#2]
De-inlining pointer[w] to *(pointer+w)   [8] process_name[set_process_name::j#2] = *set_process_name::$1
Successful SSA optimization Pass2DeInlineWordDerefIdx
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings set_process_name::j#0
Constant inlined set_process_name::name#0 = main::name
Constant inlined set_process_name::j#0 = 0
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of set_process_name
CALL GRAPH
Calls in [main] to set_process_name:1 

Created 1 initial phi equivalence classes
Coalesced [12] set_process_name::j#4 = set_process_name::j#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block label main::@1
Adding NOP phi() at start of main
Adding NOP phi() at start of set_process_name

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  [1] call set_process_name 
  to:main::@return
main::@return: scope:[main]  from main
  [2] return 
  to:@return

void set_process_name(byte* set_process_name::name)
set_process_name: scope:[set_process_name]  from main
  [3] phi()
  to:set_process_name::@1
set_process_name::@1: scope:[set_process_name]  from set_process_name set_process_name::@2
  [4] set_process_name::j#2 = phi( set_process_name/0, set_process_name::@2/set_process_name::j#1 )
  [5] if(set_process_name::j#2<$11) goto set_process_name::@2
  to:set_process_name::@return
set_process_name::@return: scope:[set_process_name]  from set_process_name::@1
  [6] return 
  to:@return
set_process_name::@2: scope:[set_process_name]  from set_process_name::@1
  [7] set_process_name::$1 = main::name + set_process_name::j#2
  [8] set_process_name::$2 = process_name + set_process_name::j#2
  [9] *set_process_name::$2 = *set_process_name::$1
  [10] set_process_name::j#1 = ++ set_process_name::j#2
  to:set_process_name::@1


VARIABLE REGISTER WEIGHTS
void main()
void set_process_name(byte* set_process_name::name)
byte*~ set_process_name::$1 101.0
byte*~ set_process_name::$2 202.0
signed word set_process_name::j
signed word set_process_name::j#1 202.0
signed word set_process_name::j#2 101.0
byte* set_process_name::name

Initial phi equivalence classes
[ set_process_name::j#2 set_process_name::j#1 ]
Added variable set_process_name::$1 to live range equivalence class [ set_process_name::$1 ]
Added variable set_process_name::$2 to live range equivalence class [ set_process_name::$2 ]
Complete equivalence classes
[ set_process_name::j#2 set_process_name::j#1 ]
[ set_process_name::$1 ]
[ set_process_name::$2 ]
Allocated zp[2]:2 [ set_process_name::j#2 set_process_name::j#1 ]
Allocated zp[2]:4 [ set_process_name::$1 ]
Allocated zp[2]:6 [ set_process_name::$2 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [5] if(set_process_name::j#2<$11) goto set_process_name::@2 [ set_process_name::j#2 ] ( set_process_name:1 [ set_process_name::j#2 ] { }  ) always clobbers reg byte a 
Statement [7] set_process_name::$1 = main::name + set_process_name::j#2 [ set_process_name::j#2 set_process_name::$1 ] ( set_process_name:1 [ set_process_name::j#2 set_process_name::$1 ] { }  ) always clobbers reg byte a 
Statement [8] set_process_name::$2 = process_name + set_process_name::j#2 [ set_process_name::j#2 set_process_name::$1 set_process_name::$2 ] ( set_process_name:1 [ set_process_name::j#2 set_process_name::$1 set_process_name::$2 ] { }  ) always clobbers reg byte a 
Statement [9] *set_process_name::$2 = *set_process_name::$1 [ set_process_name::j#2 ] ( set_process_name:1 [ set_process_name::j#2 ] { }  ) always clobbers reg byte a reg byte y 
Potential registers zp[2]:2 [ set_process_name::j#2 set_process_name::j#1 ] : zp[2]:2 , 
Potential registers zp[2]:4 [ set_process_name::$1 ] : zp[2]:4 , 
Potential registers zp[2]:6 [ set_process_name::$2 ] : zp[2]:6 , 

REGISTER UPLIFT SCOPES
Uplift Scope [set_process_name] 303: zp[2]:2 [ set_process_name::j#2 set_process_name::j#1 ] 202: zp[2]:6 [ set_process_name::$2 ] 101: zp[2]:4 [ set_process_name::$1 ] 
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [set_process_name] best 1051 combination zp[2]:2 [ set_process_name::j#2 set_process_name::j#1 ] zp[2]:6 [ set_process_name::$2 ] zp[2]:4 [ set_process_name::$1 ] 
Uplifting [main] best 1051 combination 
Uplifting [] best 1051 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test adding integer index to a pointer that is a literal string
// https://gitlab.com/camelot/kickc/issues/315
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label process_name = $400
  // main
main: {
    // [1] call set_process_name 
    // [3] phi from main to set_process_name [phi:main->set_process_name]
  set_process_name_from_main:
    jsr set_process_name
    jmp __breturn
    // main::@return
  __breturn:
    // [2] return 
    rts
    name: .text "keyboard"
    .byte 0
}
  // set_process_name
set_process_name: {
    .label j = 2
    .label __1 = 4
    .label __2 = 6
    // [4] phi from set_process_name to set_process_name::@1 [phi:set_process_name->set_process_name::@1]
  __b1_from_set_process_name:
    // [4] phi set_process_name::j#2 = 0 [phi:set_process_name->set_process_name::@1#0] -- vwsz1=vwsc1 
    lda #<0
    sta.z j
    lda #>0
    sta.z j+1
    jmp __b1
    // set_process_name::@1
  __b1:
    // [5] if(set_process_name::j#2<$11) goto set_process_name::@2 -- vwsz1_lt_vwuc1_then_la1 
    lda.z j+1
    bmi __b2
    cmp #>$11
    bcc __b2
    bne !+
    lda.z j
    cmp #<$11
    bcc __b2
  !:
    jmp __breturn
    // set_process_name::@return
  __breturn:
    // [6] return 
    rts
    // set_process_name::@2
  __b2:
    // [7] set_process_name::$1 = main::name + set_process_name::j#2 -- pbuz1=pbuc1_plus_vwsz2 
    lda #<main.name
    clc
    adc.z j
    sta.z __1
    lda #>main.name
    adc.z j+1
    sta.z __1+1
    // [8] set_process_name::$2 = process_name + set_process_name::j#2 -- pbuz1=pbuc1_plus_vwsz2 
    lda #<process_name
    clc
    adc.z j
    sta.z __2
    lda #>process_name
    adc.z j+1
    sta.z __2+1
    // [9] *set_process_name::$2 = *set_process_name::$1 -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (__1),y
    ldy #0
    sta (__2),y
    // [10] set_process_name::j#1 = ++ set_process_name::j#2 -- vwsz1=_inc_vwsz1 
    inc.z j
    bne !+
    inc.z j+1
  !:
    // [4] phi from set_process_name::@2 to set_process_name::@1 [phi:set_process_name::@2->set_process_name::@1]
  __b1_from___b2:
    // [4] phi set_process_name::j#2 = set_process_name::j#1 [phi:set_process_name::@2->set_process_name::@1#0] -- register_copy 
    jmp __b1
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #>0
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction set_process_name_from_main:
Removing instruction __breturn:
Removing instruction __b1_from_set_process_name:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
void main()
const byte* main::name[9]  = "keyboard"
const byte* process_name = (byte*) 1024
void set_process_name(byte* set_process_name::name)
byte*~ set_process_name::$1 zp[2]:4 101.0
byte*~ set_process_name::$2 zp[2]:6 202.0
signed word set_process_name::j
signed word set_process_name::j#1 j zp[2]:2 202.0
signed word set_process_name::j#2 j zp[2]:2 101.0
byte* set_process_name::name

zp[2]:2 [ set_process_name::j#2 set_process_name::j#1 ]
zp[2]:4 [ set_process_name::$1 ]
zp[2]:6 [ set_process_name::$2 ]


FINAL ASSEMBLER
Score: 948

  // File Comments
// Test adding integer index to a pointer that is a literal string
// https://gitlab.com/camelot/kickc/issues/315
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label process_name = $400
  // main
main: {
    // set_process_name("keyboard")
    // [1] call set_process_name 
    // [3] phi from main to set_process_name [phi:main->set_process_name]
    jsr set_process_name
    // main::@return
    // }
    // [2] return 
    rts
    name: .text "keyboard"
    .byte 0
}
  // set_process_name
set_process_name: {
    .label j = 2
    .label __1 = 4
    .label __2 = 6
    // [4] phi from set_process_name to set_process_name::@1 [phi:set_process_name->set_process_name::@1]
    // [4] phi set_process_name::j#2 = 0 [phi:set_process_name->set_process_name::@1#0] -- vwsz1=vwsc1 
    lda #<0
    sta.z j
    sta.z j+1
    // set_process_name::@1
  __b1:
    // for(signed int j = 0; j < 17; j++)
    // [5] if(set_process_name::j#2<$11) goto set_process_name::@2 -- vwsz1_lt_vwuc1_then_la1 
    lda.z j+1
    bmi __b2
    cmp #>$11
    bcc __b2
    bne !+
    lda.z j
    cmp #<$11
    bcc __b2
  !:
    // set_process_name::@return
    // }
    // [6] return 
    rts
    // set_process_name::@2
  __b2:
    // process_name[j]=name[j]
    // [7] set_process_name::$1 = main::name + set_process_name::j#2 -- pbuz1=pbuc1_plus_vwsz2 
    lda #<main.name
    clc
    adc.z j
    sta.z __1
    lda #>main.name
    adc.z j+1
    sta.z __1+1
    // [8] set_process_name::$2 = process_name + set_process_name::j#2 -- pbuz1=pbuc1_plus_vwsz2 
    lda #<process_name
    clc
    adc.z j
    sta.z __2
    lda #>process_name
    adc.z j+1
    sta.z __2+1
    // [9] *set_process_name::$2 = *set_process_name::$1 -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (__1),y
    sta (__2),y
    // for(signed int j = 0; j < 17; j++)
    // [10] set_process_name::j#1 = ++ set_process_name::j#2 -- vwsz1=_inc_vwsz1 
    inc.z j
    bne !+
    inc.z j+1
  !:
    // [4] phi from set_process_name::@2 to set_process_name::@1 [phi:set_process_name::@2->set_process_name::@1]
    // [4] phi set_process_name::j#2 = set_process_name::j#1 [phi:set_process_name::@2->set_process_name::@1#0] -- register_copy 
    jmp __b1
}
  // File Data

