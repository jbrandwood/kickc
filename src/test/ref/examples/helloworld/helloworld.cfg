
void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] conio_cursor_x = 0
  [2] conio_cursor_y = 0
  [3] conio_line_text = DEFAULT_SCREEN
  [4] conio_line_color = COLORRAM
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [5] phi()
  [6] call main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [7] return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  [8] phi()
  [9] call cputs 
  to:main::@return
main::@return: scope:[main]  from main
  [10] return 
  to:@return

void cputs(to_nomodify byte* cputs::s)
cputs: scope:[cputs]  from main
  [11] phi()
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@2
  [12] cputs::s#2 = phi( cputs/main::s, cputs::@2/cputs::s#0 )
  [13] cputs::c#1 = *cputs::s#2
  [14] cputs::s#0 = ++ cputs::s#2
  [15] if(0!=cputs::c#1) goto cputs::@2
  to:cputs::@return
cputs::@return: scope:[cputs]  from cputs::@1
  [16] return 
  to:@return
cputs::@2: scope:[cputs]  from cputs::@1
  [17] cputc::c#0 = cputs::c#1
  [18] call cputc 
  to:cputs::@1

void cputc(byte cputc::c)
cputc: scope:[cputc]  from cputs::@2
  [19] if(cputc::c#0=='
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [20] conio_line_text[conio_cursor_x] = cputc::c#0
  [21] conio_line_color[conio_cursor_x] = LIGHT_BLUE
  [22] conio_cursor_x = ++ conio_cursor_x
  [23] if(conio_cursor_x!=$28) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  [24] phi()
  [25] call cputln 
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@3
  [26] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [27] phi()
  [28] call cputln 
  to:cputc::@return

void cputln()
cputln: scope:[cputln]  from cputc::@1 cputc::@3
  [29] conio_line_text = conio_line_text + $28
  [30] conio_line_color = conio_line_color + $28
  [31] conio_cursor_x = 0
  [32] conio_cursor_y = ++ conio_cursor_y
  [33] call cscroll 
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [34] return 
  to:@return

void cscroll()
cscroll: scope:[cscroll]  from cputln
  [35] if(conio_cursor_y!=$19) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  [36] phi()
  [37] call memcpy 
  to:cscroll::@2
cscroll::@2: scope:[cscroll]  from cscroll::@1
  [38] phi()
  [39] call memcpy 
  to:cscroll::@3
cscroll::@3: scope:[cscroll]  from cscroll::@2
  [40] phi()
  [41] call memset 
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  [42] phi()
  [43] call memset 
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  [44] conio_line_text = conio_line_text - $28
  [45] conio_line_color = conio_line_color - $28
  [46] conio_cursor_y = -- conio_cursor_y
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@5
  [47] return 
  to:@return

void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@1 cscroll::@2
  [48] memcpy::destination#2 = phi( cscroll::@1/(void*)DEFAULT_SCREEN, cscroll::@2/(void*)COLORRAM )
  [48] memcpy::source#2 = phi( cscroll::@1/(void*)DEFAULT_SCREEN+$28, cscroll::@2/(void*)COLORRAM+$28 )
  [49] memcpy::src_end#0 = (byte*)memcpy::source#2 + (word)$19*$28-$28
  [50] memcpy::src#4 = (byte*)memcpy::source#2
  [51] memcpy::dst#4 = (byte*)memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [52] memcpy::dst#2 = phi( memcpy/memcpy::dst#4, memcpy::@2/memcpy::dst#1 )
  [52] memcpy::src#2 = phi( memcpy/memcpy::src#4, memcpy::@2/memcpy::src#1 )
  [53] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [54] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [55] *memcpy::dst#2 = *memcpy::src#2
  [56] memcpy::dst#1 = ++ memcpy::dst#2
  [57] memcpy::src#1 = ++ memcpy::src#2
  to:memcpy::@1

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from cscroll::@3 cscroll::@4
  [58] memset::c#4 = phi( cscroll::@3/' ', cscroll::@4/LIGHT_BLUE )
  [58] memset::str#3 = phi( cscroll::@3/(void*)DEFAULT_SCREEN+(word)$19*$28-$28, cscroll::@4/(void*)COLORRAM+(word)$19*$28-$28 )
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [59] memset::end#0 = (byte*)memset::str#3 + $28
  [60] memset::dst#4 = (byte*)memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [61] memset::dst#2 = phi( memset::@1/memset::dst#4, memset::@3/memset::dst#1 )
  [62] if(memset::dst#2!=memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [63] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [64] *memset::dst#2 = memset::c#4
  [65] memset::dst#1 = ++ memset::dst#2
  to:memset::@2
