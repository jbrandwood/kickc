@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] (byte) conio_cursor_x ← (byte) 0
  [2] (byte) conio_cursor_y ← (byte) 0
  [3] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT
  [4] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS
  to:@2
@2: scope:[]  from @1
  [5] phi()
  [6] call main 
  to:@end
@end: scope:[]  from @2
  [7] phi()

(void()) main()
main: scope:[main]  from @2
  [8] (byte) tod_init::tod_TENTHS#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO)
  [9] (byte) tod_init::tod_SEC#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_SEC)
  [10] (byte) tod_init::tod_MIN#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_MIN)
  [11] (byte) tod_init::tod_HOURS#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_HOURS)
  [12] call tod_init 
  to:main::@1
main::@1: scope:[main]  from main main::@4
  [13] phi()
  [14] call gotoxy 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [15] phi()
  [16] call tod_read 
  [17] (byte) tod_read::return_TENTHS#2 ← (byte) tod_read::return_TENTHS#0
  [18] (byte) tod_read::return_SEC#2 ← (byte) tod_read::return_SEC#0
  [19] (byte) tod_read::return_MIN#2 ← (byte) tod_read::return_MIN#0
  [20] (byte) tod_read::return_HOURS#2 ← (byte) tod_read::return_HOURS#0
  to:main::@3
main::@3: scope:[main]  from main::@2
  [21] (byte) tod_str::tod_TENTHS#0 ← (byte) tod_read::return_TENTHS#2
  [22] (byte) tod_str::tod_SEC#0 ← (byte) tod_read::return_SEC#2
  [23] (byte) tod_str::tod_MIN#0 ← (byte) tod_read::return_MIN#2
  [24] (byte) tod_str::tod_HOURS#0 ← (byte) tod_read::return_HOURS#2
  [25] call tod_str 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [26] phi()
  [27] call cputs 
  to:main::@1

(void()) cputs((to_nomodify byte*) cputs::s)
cputs: scope:[cputs]  from main::@4
  [28] phi()
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@2
  [29] (to_nomodify byte*) cputs::s#2 ← phi( cputs/(const byte*) tod_buffer cputs::@2/(to_nomodify byte*) cputs::s#0 )
  [30] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#2)
  [31] (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#2
  [32] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2
  to:cputs::@return
cputs::@return: scope:[cputs]  from cputs::@1
  [33] return 
  to:@return
cputs::@2: scope:[cputs]  from cputs::@1
  [34] (byte) cputc::c#0 ← (byte) cputs::c#1
  [35] call cputc 
  to:cputs::@1

(void()) cputc((byte) cputc::c)
cputc: scope:[cputc]  from cputs::@2
  [36] if((byte) cputc::c#0==(byte) '
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [37] *((byte*) conio_cursor_text) ← (byte) cputc::c#0
  [38] (byte*) conio_cursor_text ← ++ (byte*) conio_cursor_text
  [39] *((byte*) conio_cursor_color) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT
  [40] (byte*) conio_cursor_color ← ++ (byte*) conio_cursor_color
  [41] (byte) conio_cursor_x ← ++ (byte) conio_cursor_x
  [42] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  [43] (byte) conio_cursor_x ← (byte) 0
  [44] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y
  [45] call cscroll 
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@3
  [46] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [47] phi()
  [48] call cputln 
  to:cputc::@return

(void()) cputln()
cputln: scope:[cputln]  from cputc::@1
  [49] (byte*~) cputln::$0 ← (byte*) conio_cursor_text - (byte) conio_cursor_x
  [50] (byte*~) cputln::$1 ← (byte*~) cputln::$0 + (byte) $28
  [51] (byte*) conio_cursor_text ← (byte*~) cputln::$1
  [52] (byte*~) cputln::$2 ← (byte*) conio_cursor_color - (byte) conio_cursor_x
  [53] (byte*~) cputln::$3 ← (byte*~) cputln::$2 + (byte) $28
  [54] (byte*) conio_cursor_color ← (byte*~) cputln::$3
  [55] (byte) conio_cursor_x ← (byte) 0
  [56] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y
  [57] call cscroll 
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [58] return 
  to:@return

(void()) cscroll()
cscroll: scope:[cscroll]  from cputc::@3 cputln
  [59] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  [60] phi()
  [61] call memcpy 
  to:cscroll::@2
cscroll::@2: scope:[cscroll]  from cscroll::@1
  [62] phi()
  [63] call memcpy 
  to:cscroll::@3
cscroll::@3: scope:[cscroll]  from cscroll::@2
  [64] phi()
  [65] call memset 
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  [66] phi()
  [67] call memset 
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  [68] (byte*~) cscroll::$7 ← (byte*) conio_cursor_text - (byte) $28
  [69] (byte*) conio_cursor_text ← (byte*~) cscroll::$7
  [70] (byte*~) cscroll::$8 ← (byte*) conio_cursor_color - (byte) $28
  [71] (byte*) conio_cursor_color ← (byte*~) cscroll::$8
  [72] (byte) conio_cursor_y ← -- (byte) conio_cursor_y
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@5
  [73] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from cscroll::@3 cscroll::@4
  [74] (byte) memset::c#4 ← phi( cscroll::@3/(byte) ' ' cscroll::@4/(const nomodify byte) CONIO_TEXTCOLOR_DEFAULT )
  [74] (void*) memset::str#3 ← phi( cscroll::@3/(void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(word)(number) $19*(number) $28-(byte) $28 cscroll::@4/(void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(word)(number) $19*(number) $28-(byte) $28 )
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [75] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (byte) $28
  [76] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [77] (byte*) memset::dst#2 ← phi( memset::@1/(byte*) memset::dst#4 memset::@3/(byte*) memset::dst#1 )
  [78] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [79] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [80] *((byte*) memset::dst#2) ← (byte) memset::c#4
  [81] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@2

(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@1 cscroll::@2
  [82] (void*) memcpy::destination#2 ← phi( cscroll::@1/(void*)(const nomodify byte*) CONIO_SCREEN_TEXT cscroll::@2/(void*)(const nomodify byte*) CONIO_SCREEN_COLORS )
  [82] (void*) memcpy::source#2 ← phi( cscroll::@1/(void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(byte) $28 cscroll::@2/(void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(byte) $28 )
  [83] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28
  [84] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2
  [85] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [86] (byte*) memcpy::dst#2 ← phi( memcpy/(byte*) memcpy::dst#4 memcpy::@2/(byte*) memcpy::dst#1 )
  [86] (byte*) memcpy::src#2 ← phi( memcpy/(byte*) memcpy::src#4 memcpy::@2/(byte*) memcpy::src#1 )
  [87] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [88] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [89] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2)
  [90] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2
  [91] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2
  to:memcpy::@1

(byte*()) tod_str((byte) tod_str::tod_TENTHS , (byte) tod_str::tod_SEC , (byte) tod_str::tod_MIN , (byte) tod_str::tod_HOURS)
tod_str: scope:[tod_str]  from main::@3
  [92] (byte~) tod_str::$0 ← (byte) tod_str::tod_HOURS#0 >> (byte) 4
  [93] (byte~) tod_str::$1 ← (byte) '0' + (byte~) tod_str::$0
  [94] *((const byte*) tod_buffer) ← (byte~) tod_str::$1
  [95] (byte~) tod_str::$2 ← (byte) tod_str::tod_HOURS#0 & (byte) $f
  [96] (byte~) tod_str::$3 ← (byte) '0' + (byte~) tod_str::$2
  [97] *((const byte*) tod_buffer+(byte) 1) ← (byte~) tod_str::$3
  [98] (byte~) tod_str::$4 ← (byte) tod_str::tod_MIN#0 >> (byte) 4
  [99] (byte~) tod_str::$5 ← (byte) '0' + (byte~) tod_str::$4
  [100] *((const byte*) tod_buffer+(byte) 3) ← (byte~) tod_str::$5
  [101] (byte~) tod_str::$6 ← (byte) tod_str::tod_MIN#0 & (byte) $f
  [102] (byte~) tod_str::$7 ← (byte) '0' + (byte~) tod_str::$6
  [103] *((const byte*) tod_buffer+(byte) 4) ← (byte~) tod_str::$7
  [104] (byte~) tod_str::$8 ← (byte) tod_str::tod_SEC#0 >> (byte) 4
  [105] (byte~) tod_str::$9 ← (byte) '0' + (byte~) tod_str::$8
  [106] *((const byte*) tod_buffer+(byte) 6) ← (byte~) tod_str::$9
  [107] (byte~) tod_str::$10 ← (byte) tod_str::tod_SEC#0 & (byte) $f
  [108] (byte~) tod_str::$11 ← (byte) '0' + (byte~) tod_str::$10
  [109] *((const byte*) tod_buffer+(byte) 7) ← (byte~) tod_str::$11
  [110] (byte~) tod_str::$12 ← (byte) tod_str::tod_TENTHS#0 >> (byte) 4
  [111] (byte~) tod_str::$13 ← (byte) '0' + (byte~) tod_str::$12
  [112] *((const byte*) tod_buffer+(byte) 9) ← (byte~) tod_str::$13
  [113] (byte~) tod_str::$14 ← (byte) tod_str::tod_TENTHS#0 & (byte) $f
  [114] (byte~) tod_str::$15 ← (byte) '0' + (byte~) tod_str::$14
  [115] *((const byte*) tod_buffer+(byte) $a) ← (byte~) tod_str::$15
  to:tod_str::@return
tod_str::@return: scope:[tod_str]  from tod_str
  [116] return 
  to:@return

(struct TIME_OF_DAY()) tod_read()
tod_read: scope:[tod_read]  from main::@2
  [117] (byte) tod_read::return_HOURS#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS)
  [118] (byte) tod_read::return_MIN#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN)
  [119] (byte) tod_read::return_SEC#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC)
  [120] (byte) tod_read::return_TENTHS#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS)
  to:tod_read::@return
tod_read::@return: scope:[tod_read]  from tod_read
  [121] return 
  to:@return

(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
gotoxy: scope:[gotoxy]  from main::@1
  [122] phi()
  to:gotoxy::@1
gotoxy::@1: scope:[gotoxy]  from gotoxy
  [123] (byte) conio_cursor_x ← (const byte) gotoxy::x#2
  [124] (byte) conio_cursor_y ← (const byte) gotoxy::y#2
  [125] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT
  [126] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS
  to:gotoxy::@return
gotoxy::@return: scope:[gotoxy]  from gotoxy::@1
  [127] return 
  to:@return

(void()) tod_init((byte) tod_init::tod_TENTHS , (byte) tod_init::tod_SEC , (byte) tod_init::tod_MIN , (byte) tod_init::tod_HOURS)
tod_init: scope:[tod_init]  from main
  [128] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) | (byte) $80
  [129] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) & (byte) $7f
  [130] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS) ← (byte) tod_init::tod_HOURS#0
  [131] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN) ← (byte) tod_init::tod_MIN#0
  [132] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC) ← (byte) tod_init::tod_SEC#0
  [133] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS) ← (byte) tod_init::tod_TENTHS#0
  to:tod_init::@return
tod_init::@return: scope:[tod_init]  from tod_init
  [134] return 
  to:@return
