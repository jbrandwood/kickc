// Implementation of the Seriously Fast Multiplication
// See http://codebase64.org/doku.php?id=base:seriously_fast_multiplication
// Utilizes the fact that a*b = ((a+b)/2)^2 - ((a-b)/2)^2

byte* BGCOL = $d021;

void main() {
    init_mul_tables();
    init_mul_tables_asm();
    mul_tables_compare();
}

// mul_sqr tables will contain f(x)=int(x*x/4).
byte[512] mul_sqr_lo;
byte[512] mul_sqr_hi;

void init_mul_tables() {
  // If f(x) = x*x/4 then f(x+1) = f(x) + x/2 + 1/4
  word sqr = 0;
  // First do bytes 1-255 - byte 0 is already zero
  for(byte i : 1..255) {
    // sqr++ on even numbers because 1 = 2*1/4 (from the two previous numbers) + 1/2 (half of the previous uneven number)
    if((i&1)==0) sqr++;
    mul_sqr_lo[i] = <sqr;
    mul_sqr_hi[i] = >sqr;
    // sqr = sqr + i/2 (when uneven 1/2 is not added here)
    sqr = sqr + i>>1;
  }
  // Then do bytes 256-511
  for(i : 0..255) {
    // sqr++ on even numbers because 1 = 2*1/4 (from the two previous numbers) + 1/2 (half of the previous uneven number)
    if((i&1)==0) sqr++;
    (mul_sqr_lo+$100)[i] = <sqr;
    (mul_sqr_hi+$100)[i] = >sqr;
    // sqr = sqr + i/2 (when uneven 1/2 is not added here)
    sqr = sqr + 128 + i>>1;
  }

}

// ASM based multiplication tables
byte[512] asm_mul_sqr_lo;
byte[512] asm_mul_sqr_hi;
// Initialize the multiplication tables using ASM code from
// http://codebase64.org/doku.php?id=base:seriously_fast_multiplication
void init_mul_tables_asm() {
    asm{
        ldx #$00
        txa
        .byte $c9
    lb1:
        tya
        adc #$00
    ml1:
        sta asm_mul_sqr_hi,x
        tay
        cmp #$40
        txa
        ror
    ml9:
        adc #$00
        sta ml9+1
        inx
    ml0:
        sta asm_mul_sqr_lo,x
        bne lb1
        inc ml0+2
        inc ml1+2
        clc
        iny
        bne lb1
    }
}

// Compare the ASM-based mul tables with the KC-based mul tables
// Red screen on failure - green on success
void mul_tables_compare() {
     *BGCOL = 5;
    for( byte i: 0..255) {
        if(mul_sqr_lo[i] != asm_mul_sqr_lo[i])
            *BGCOL = 2;
        if((mul_sqr_hi+$100)[i] != (asm_mul_sqr_hi+$100)[i])
            *BGCOL = 2;
        if(mul_sqr_lo[i] != asm_mul_sqr_lo[i])
            *BGCOL = 2;
        if((mul_sqr_hi+$100)[i] != (asm_mul_sqr_hi+$100)[i])
            *BGCOL = 2;
    }
}
Adding pre/post-modifier (word) init_mul_tables::sqr ← ++ (word) init_mul_tables::sqr
Adding pre/post-modifier (word) init_mul_tables::sqr ← ++ (word) init_mul_tables::sqr
PROGRAM
  (byte*) BGCOL ← (word) 53281
proc (void()) main()
  (void~) main::$0 ← call init_mul_tables 
  (void~) main::$1 ← call init_mul_tables_asm 
  (void~) main::$2 ← call mul_tables_compare 
main::@return:
  return 
endproc // main()
  (byte[512]) mul_sqr_lo ← { fill( 512, 0) }
  (byte[512]) mul_sqr_hi ← { fill( 512, 0) }
proc (void()) init_mul_tables()
  (word) init_mul_tables::sqr ← (byte/signed byte/word/signed word) 0
  (byte) init_mul_tables::i ← (byte/signed byte/word/signed word) 1
init_mul_tables::@1:
  (byte~) init_mul_tables::$0 ← (byte) init_mul_tables::i & (byte/signed byte/word/signed word) 1
  (boolean~) init_mul_tables::$1 ← (byte~) init_mul_tables::$0 == (byte/signed byte/word/signed word) 0
  (boolean~) init_mul_tables::$2 ← ! (boolean~) init_mul_tables::$1
  if((boolean~) init_mul_tables::$2) goto init_mul_tables::@2
  (word) init_mul_tables::sqr ← ++ (word) init_mul_tables::sqr
init_mul_tables::@2:
  (byte~) init_mul_tables::$3 ← < (word) init_mul_tables::sqr
  *((byte[512]) mul_sqr_lo + (byte) init_mul_tables::i) ← (byte~) init_mul_tables::$3
  (byte~) init_mul_tables::$4 ← > (word) init_mul_tables::sqr
  *((byte[512]) mul_sqr_hi + (byte) init_mul_tables::i) ← (byte~) init_mul_tables::$4
  (byte~) init_mul_tables::$5 ← (byte) init_mul_tables::i >> (byte/signed byte/word/signed word) 1
  (word~) init_mul_tables::$6 ← (word) init_mul_tables::sqr + (byte~) init_mul_tables::$5
  (word) init_mul_tables::sqr ← (word~) init_mul_tables::$6
  (byte) init_mul_tables::i ← ++ (byte) init_mul_tables::i
  (boolean~) init_mul_tables::$7 ← (byte) init_mul_tables::i != (byte/signed byte/word/signed word) 0
  if((boolean~) init_mul_tables::$7) goto init_mul_tables::@1
  (byte) init_mul_tables::i ← (byte/signed byte/word/signed word) 0
init_mul_tables::@3:
  (byte~) init_mul_tables::$8 ← (byte) init_mul_tables::i & (byte/signed byte/word/signed word) 1
  (boolean~) init_mul_tables::$9 ← (byte~) init_mul_tables::$8 == (byte/signed byte/word/signed word) 0
  (boolean~) init_mul_tables::$10 ← ! (boolean~) init_mul_tables::$9
  if((boolean~) init_mul_tables::$10) goto init_mul_tables::@4
  (word) init_mul_tables::sqr ← ++ (word) init_mul_tables::sqr
init_mul_tables::@4:
  (byte*~) init_mul_tables::$11 ← (byte[512]) mul_sqr_lo + (word/signed word) 256
  (byte~) init_mul_tables::$12 ← < (word) init_mul_tables::sqr
  *((byte*~) init_mul_tables::$11 + (byte) init_mul_tables::i) ← (byte~) init_mul_tables::$12
  (byte*~) init_mul_tables::$13 ← (byte[512]) mul_sqr_hi + (word/signed word) 256
  (byte~) init_mul_tables::$14 ← > (word) init_mul_tables::sqr
  *((byte*~) init_mul_tables::$13 + (byte) init_mul_tables::i) ← (byte~) init_mul_tables::$14
  (word~) init_mul_tables::$15 ← (word) init_mul_tables::sqr + (byte/word/signed word) 128
  (byte~) init_mul_tables::$16 ← (byte) init_mul_tables::i >> (byte/signed byte/word/signed word) 1
  (word~) init_mul_tables::$17 ← (word~) init_mul_tables::$15 + (byte~) init_mul_tables::$16
  (word) init_mul_tables::sqr ← (word~) init_mul_tables::$17
  (byte) init_mul_tables::i ← ++ (byte) init_mul_tables::i
  (boolean~) init_mul_tables::$18 ← (byte) init_mul_tables::i != (byte/signed byte/word/signed word) 0
  if((boolean~) init_mul_tables::$18) goto init_mul_tables::@3
init_mul_tables::@return:
  return 
endproc // init_mul_tables()
  (byte[512]) asm_mul_sqr_lo ← { fill( 512, 0) }
  (byte[512]) asm_mul_sqr_hi ← { fill( 512, 0) }
proc (void()) init_mul_tables_asm()
  asm { ldx#$00txa.byte$c9lb1:tyaadc#$00ml1:staasm_mul_sqr_hi,xtaycmp#$40txarorml9:adc#$00staml9+1inxml0:staasm_mul_sqr_lo,xbnelb1incml0+2incml1+2clcinybnelb1 }
init_mul_tables_asm::@return:
  return 
endproc // init_mul_tables_asm()
proc (void()) mul_tables_compare()
  *((byte*) BGCOL) ← (byte/signed byte/word/signed word) 5
  (byte) mul_tables_compare::i ← (byte/signed byte/word/signed word) 0
mul_tables_compare::@1:
  (boolean~) mul_tables_compare::$0 ← *((byte[512]) mul_sqr_lo + (byte) mul_tables_compare::i) != *((byte[512]) asm_mul_sqr_lo + (byte) mul_tables_compare::i)
  (boolean~) mul_tables_compare::$1 ← ! (boolean~) mul_tables_compare::$0
  if((boolean~) mul_tables_compare::$1) goto mul_tables_compare::@2
  *((byte*) BGCOL) ← (byte/signed byte/word/signed word) 2
mul_tables_compare::@2:
  (byte*~) mul_tables_compare::$2 ← (byte[512]) mul_sqr_hi + (word/signed word) 256
  (byte*~) mul_tables_compare::$3 ← (byte[512]) asm_mul_sqr_hi + (word/signed word) 256
  (boolean~) mul_tables_compare::$4 ← *((byte*~) mul_tables_compare::$2 + (byte) mul_tables_compare::i) != *((byte*~) mul_tables_compare::$3 + (byte) mul_tables_compare::i)
  (boolean~) mul_tables_compare::$5 ← ! (boolean~) mul_tables_compare::$4
  if((boolean~) mul_tables_compare::$5) goto mul_tables_compare::@3
  *((byte*) BGCOL) ← (byte/signed byte/word/signed word) 2
mul_tables_compare::@3:
  (boolean~) mul_tables_compare::$6 ← *((byte[512]) mul_sqr_lo + (byte) mul_tables_compare::i) != *((byte[512]) asm_mul_sqr_lo + (byte) mul_tables_compare::i)
  (boolean~) mul_tables_compare::$7 ← ! (boolean~) mul_tables_compare::$6
  if((boolean~) mul_tables_compare::$7) goto mul_tables_compare::@4
  *((byte*) BGCOL) ← (byte/signed byte/word/signed word) 2
mul_tables_compare::@4:
  (byte*~) mul_tables_compare::$8 ← (byte[512]) mul_sqr_hi + (word/signed word) 256
  (byte*~) mul_tables_compare::$9 ← (byte[512]) asm_mul_sqr_hi + (word/signed word) 256
  (boolean~) mul_tables_compare::$10 ← *((byte*~) mul_tables_compare::$8 + (byte) mul_tables_compare::i) != *((byte*~) mul_tables_compare::$9 + (byte) mul_tables_compare::i)
  (boolean~) mul_tables_compare::$11 ← ! (boolean~) mul_tables_compare::$10
  if((boolean~) mul_tables_compare::$11) goto mul_tables_compare::@5
  *((byte*) BGCOL) ← (byte/signed byte/word/signed word) 2
mul_tables_compare::@5:
  (byte) mul_tables_compare::i ← ++ (byte) mul_tables_compare::i
  (boolean~) mul_tables_compare::$12 ← (byte) mul_tables_compare::i != (byte/signed byte/word/signed word) 0
  if((boolean~) mul_tables_compare::$12) goto mul_tables_compare::@1
mul_tables_compare::@return:
  return 
endproc // mul_tables_compare()
  call main 

SYMBOLS
(byte*) BGCOL
(byte[512]) asm_mul_sqr_hi
(byte[512]) asm_mul_sqr_lo
(void()) init_mul_tables()
(byte~) init_mul_tables::$0
(boolean~) init_mul_tables::$1
(boolean~) init_mul_tables::$10
(byte*~) init_mul_tables::$11
(byte~) init_mul_tables::$12
(byte*~) init_mul_tables::$13
(byte~) init_mul_tables::$14
(word~) init_mul_tables::$15
(byte~) init_mul_tables::$16
(word~) init_mul_tables::$17
(boolean~) init_mul_tables::$18
(boolean~) init_mul_tables::$2
(byte~) init_mul_tables::$3
(byte~) init_mul_tables::$4
(byte~) init_mul_tables::$5
(word~) init_mul_tables::$6
(boolean~) init_mul_tables::$7
(byte~) init_mul_tables::$8
(boolean~) init_mul_tables::$9
(label) init_mul_tables::@1
(label) init_mul_tables::@2
(label) init_mul_tables::@3
(label) init_mul_tables::@4
(label) init_mul_tables::@return
(byte) init_mul_tables::i
(word) init_mul_tables::sqr
(void()) init_mul_tables_asm()
(label) init_mul_tables_asm::@return
(void()) main()
(void~) main::$0
(void~) main::$1
(void~) main::$2
(label) main::@return
(byte[512]) mul_sqr_hi
(byte[512]) mul_sqr_lo
(void()) mul_tables_compare()
(boolean~) mul_tables_compare::$0
(boolean~) mul_tables_compare::$1
(boolean~) mul_tables_compare::$10
(boolean~) mul_tables_compare::$11
(boolean~) mul_tables_compare::$12
(byte*~) mul_tables_compare::$2
(byte*~) mul_tables_compare::$3
(boolean~) mul_tables_compare::$4
(boolean~) mul_tables_compare::$5
(boolean~) mul_tables_compare::$6
(boolean~) mul_tables_compare::$7
(byte*~) mul_tables_compare::$8
(byte*~) mul_tables_compare::$9
(label) mul_tables_compare::@1
(label) mul_tables_compare::@2
(label) mul_tables_compare::@3
(label) mul_tables_compare::@4
(label) mul_tables_compare::@5
(label) mul_tables_compare::@return
(byte) mul_tables_compare::i

Promoting word to byte* in BGCOL ← ((byte*)) 53281
INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) BGCOL ← ((byte*)) (word) 53281
  to:@1
main: scope:[main]  from
  (void~) main::$0 ← call init_mul_tables 
  (void~) main::$1 ← call init_mul_tables_asm 
  (void~) main::$2 ← call mul_tables_compare 
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  (byte[512]) mul_sqr_lo ← { fill( 512, 0) }
  (byte[512]) mul_sqr_hi ← { fill( 512, 0) }
  to:@2
init_mul_tables: scope:[init_mul_tables]  from
  (word) init_mul_tables::sqr ← (byte/signed byte/word/signed word) 0
  (byte) init_mul_tables::i ← (byte/signed byte/word/signed word) 1
  to:init_mul_tables::@1
init_mul_tables::@1: scope:[init_mul_tables]  from init_mul_tables init_mul_tables::@2
  (byte~) init_mul_tables::$0 ← (byte) init_mul_tables::i & (byte/signed byte/word/signed word) 1
  (boolean~) init_mul_tables::$1 ← (byte~) init_mul_tables::$0 == (byte/signed byte/word/signed word) 0
  (boolean~) init_mul_tables::$2 ← ! (boolean~) init_mul_tables::$1
  if((boolean~) init_mul_tables::$2) goto init_mul_tables::@2
  to:init_mul_tables::@5
init_mul_tables::@2: scope:[init_mul_tables]  from init_mul_tables::@1 init_mul_tables::@5
  (byte~) init_mul_tables::$3 ← < (word) init_mul_tables::sqr
  *((byte[512]) mul_sqr_lo + (byte) init_mul_tables::i) ← (byte~) init_mul_tables::$3
  (byte~) init_mul_tables::$4 ← > (word) init_mul_tables::sqr
  *((byte[512]) mul_sqr_hi + (byte) init_mul_tables::i) ← (byte~) init_mul_tables::$4
  (byte~) init_mul_tables::$5 ← (byte) init_mul_tables::i >> (byte/signed byte/word/signed word) 1
  (word~) init_mul_tables::$6 ← (word) init_mul_tables::sqr + (byte~) init_mul_tables::$5
  (word) init_mul_tables::sqr ← (word~) init_mul_tables::$6
  (byte) init_mul_tables::i ← ++ (byte) init_mul_tables::i
  (boolean~) init_mul_tables::$7 ← (byte) init_mul_tables::i != (byte/signed byte/word/signed word) 0
  if((boolean~) init_mul_tables::$7) goto init_mul_tables::@1
  to:init_mul_tables::@6
init_mul_tables::@5: scope:[init_mul_tables]  from init_mul_tables::@1
  (word) init_mul_tables::sqr ← ++ (word) init_mul_tables::sqr
  to:init_mul_tables::@2
init_mul_tables::@6: scope:[init_mul_tables]  from init_mul_tables::@2
  (byte) init_mul_tables::i ← (byte/signed byte/word/signed word) 0
  to:init_mul_tables::@3
init_mul_tables::@3: scope:[init_mul_tables]  from init_mul_tables::@4 init_mul_tables::@6
  (byte~) init_mul_tables::$8 ← (byte) init_mul_tables::i & (byte/signed byte/word/signed word) 1
  (boolean~) init_mul_tables::$9 ← (byte~) init_mul_tables::$8 == (byte/signed byte/word/signed word) 0
  (boolean~) init_mul_tables::$10 ← ! (boolean~) init_mul_tables::$9
  if((boolean~) init_mul_tables::$10) goto init_mul_tables::@4
  to:init_mul_tables::@7
init_mul_tables::@4: scope:[init_mul_tables]  from init_mul_tables::@3 init_mul_tables::@7
  (byte*~) init_mul_tables::$11 ← (byte[512]) mul_sqr_lo + (word/signed word) 256
  (byte~) init_mul_tables::$12 ← < (word) init_mul_tables::sqr
  *((byte*~) init_mul_tables::$11 + (byte) init_mul_tables::i) ← (byte~) init_mul_tables::$12
  (byte*~) init_mul_tables::$13 ← (byte[512]) mul_sqr_hi + (word/signed word) 256
  (byte~) init_mul_tables::$14 ← > (word) init_mul_tables::sqr
  *((byte*~) init_mul_tables::$13 + (byte) init_mul_tables::i) ← (byte~) init_mul_tables::$14
  (word~) init_mul_tables::$15 ← (word) init_mul_tables::sqr + (byte/word/signed word) 128
  (byte~) init_mul_tables::$16 ← (byte) init_mul_tables::i >> (byte/signed byte/word/signed word) 1
  (word~) init_mul_tables::$17 ← (word~) init_mul_tables::$15 + (byte~) init_mul_tables::$16
  (word) init_mul_tables::sqr ← (word~) init_mul_tables::$17
  (byte) init_mul_tables::i ← ++ (byte) init_mul_tables::i
  (boolean~) init_mul_tables::$18 ← (byte) init_mul_tables::i != (byte/signed byte/word/signed word) 0
  if((boolean~) init_mul_tables::$18) goto init_mul_tables::@3
  to:init_mul_tables::@8
init_mul_tables::@7: scope:[init_mul_tables]  from init_mul_tables::@3
  (word) init_mul_tables::sqr ← ++ (word) init_mul_tables::sqr
  to:init_mul_tables::@4
init_mul_tables::@8: scope:[init_mul_tables]  from init_mul_tables::@4
  to:init_mul_tables::@return
init_mul_tables::@return: scope:[init_mul_tables]  from init_mul_tables::@8
  return 
  to:@return
@2: scope:[]  from @1
  (byte[512]) asm_mul_sqr_lo ← { fill( 512, 0) }
  (byte[512]) asm_mul_sqr_hi ← { fill( 512, 0) }
  to:@3
init_mul_tables_asm: scope:[init_mul_tables_asm]  from
  asm { ldx#$00txa.byte$c9lb1:tyaadc#$00ml1:staasm_mul_sqr_hi,xtaycmp#$40txarorml9:adc#$00staml9+1inxml0:staasm_mul_sqr_lo,xbnelb1incml0+2incml1+2clcinybnelb1 }
  to:init_mul_tables_asm::@return
init_mul_tables_asm::@return: scope:[init_mul_tables_asm]  from init_mul_tables_asm
  return 
  to:@return
@3: scope:[]  from @2
  to:@4
mul_tables_compare: scope:[mul_tables_compare]  from
  *((byte*) BGCOL) ← (byte/signed byte/word/signed word) 5
  (byte) mul_tables_compare::i ← (byte/signed byte/word/signed word) 0
  to:mul_tables_compare::@1
mul_tables_compare::@1: scope:[mul_tables_compare]  from mul_tables_compare mul_tables_compare::@5
  (boolean~) mul_tables_compare::$0 ← *((byte[512]) mul_sqr_lo + (byte) mul_tables_compare::i) != *((byte[512]) asm_mul_sqr_lo + (byte) mul_tables_compare::i)
  (boolean~) mul_tables_compare::$1 ← ! (boolean~) mul_tables_compare::$0
  if((boolean~) mul_tables_compare::$1) goto mul_tables_compare::@2
  to:mul_tables_compare::@6
mul_tables_compare::@2: scope:[mul_tables_compare]  from mul_tables_compare::@1 mul_tables_compare::@6
  (byte*~) mul_tables_compare::$2 ← (byte[512]) mul_sqr_hi + (word/signed word) 256
  (byte*~) mul_tables_compare::$3 ← (byte[512]) asm_mul_sqr_hi + (word/signed word) 256
  (boolean~) mul_tables_compare::$4 ← *((byte*~) mul_tables_compare::$2 + (byte) mul_tables_compare::i) != *((byte*~) mul_tables_compare::$3 + (byte) mul_tables_compare::i)
  (boolean~) mul_tables_compare::$5 ← ! (boolean~) mul_tables_compare::$4
  if((boolean~) mul_tables_compare::$5) goto mul_tables_compare::@3
  to:mul_tables_compare::@7
mul_tables_compare::@6: scope:[mul_tables_compare]  from mul_tables_compare::@1
  *((byte*) BGCOL) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@2
mul_tables_compare::@3: scope:[mul_tables_compare]  from mul_tables_compare::@2 mul_tables_compare::@7
  (boolean~) mul_tables_compare::$6 ← *((byte[512]) mul_sqr_lo + (byte) mul_tables_compare::i) != *((byte[512]) asm_mul_sqr_lo + (byte) mul_tables_compare::i)
  (boolean~) mul_tables_compare::$7 ← ! (boolean~) mul_tables_compare::$6
  if((boolean~) mul_tables_compare::$7) goto mul_tables_compare::@4
  to:mul_tables_compare::@8
mul_tables_compare::@7: scope:[mul_tables_compare]  from mul_tables_compare::@2
  *((byte*) BGCOL) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@3
mul_tables_compare::@4: scope:[mul_tables_compare]  from mul_tables_compare::@3 mul_tables_compare::@8
  (byte*~) mul_tables_compare::$8 ← (byte[512]) mul_sqr_hi + (word/signed word) 256
  (byte*~) mul_tables_compare::$9 ← (byte[512]) asm_mul_sqr_hi + (word/signed word) 256
  (boolean~) mul_tables_compare::$10 ← *((byte*~) mul_tables_compare::$8 + (byte) mul_tables_compare::i) != *((byte*~) mul_tables_compare::$9 + (byte) mul_tables_compare::i)
  (boolean~) mul_tables_compare::$11 ← ! (boolean~) mul_tables_compare::$10
  if((boolean~) mul_tables_compare::$11) goto mul_tables_compare::@5
  to:mul_tables_compare::@9
mul_tables_compare::@8: scope:[mul_tables_compare]  from mul_tables_compare::@3
  *((byte*) BGCOL) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@4
mul_tables_compare::@5: scope:[mul_tables_compare]  from mul_tables_compare::@4 mul_tables_compare::@9
  (byte) mul_tables_compare::i ← ++ (byte) mul_tables_compare::i
  (boolean~) mul_tables_compare::$12 ← (byte) mul_tables_compare::i != (byte/signed byte/word/signed word) 0
  if((boolean~) mul_tables_compare::$12) goto mul_tables_compare::@1
  to:mul_tables_compare::@10
mul_tables_compare::@9: scope:[mul_tables_compare]  from mul_tables_compare::@4
  *((byte*) BGCOL) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@5
mul_tables_compare::@10: scope:[mul_tables_compare]  from mul_tables_compare::@5
  to:mul_tables_compare::@return
mul_tables_compare::@return: scope:[mul_tables_compare]  from mul_tables_compare::@10
  return 
  to:@return
@4: scope:[]  from @3
  call main 
  to:@end
@end: scope:[]  from @4

Eliminating unused variable - keeping the call (void~) main::$0
Eliminating unused variable - keeping the call (void~) main::$1
Eliminating unused variable - keeping the call (void~) main::$2
Removing empty block init_mul_tables::@8
Removing empty block @3
Removing empty block mul_tables_compare::@10
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) BGCOL ← ((byte*)) (word) 53281
  to:@1
main: scope:[main]  from
  call init_mul_tables 
  call init_mul_tables_asm 
  call mul_tables_compare 
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  (byte[512]) mul_sqr_lo ← { fill( 512, 0) }
  (byte[512]) mul_sqr_hi ← { fill( 512, 0) }
  to:@2
init_mul_tables: scope:[init_mul_tables]  from
  (word) init_mul_tables::sqr ← (byte/signed byte/word/signed word) 0
  (byte) init_mul_tables::i ← (byte/signed byte/word/signed word) 1
  to:init_mul_tables::@1
init_mul_tables::@1: scope:[init_mul_tables]  from init_mul_tables init_mul_tables::@2
  (byte~) init_mul_tables::$0 ← (byte) init_mul_tables::i & (byte/signed byte/word/signed word) 1
  (boolean~) init_mul_tables::$1 ← (byte~) init_mul_tables::$0 == (byte/signed byte/word/signed word) 0
  (boolean~) init_mul_tables::$2 ← ! (boolean~) init_mul_tables::$1
  if((boolean~) init_mul_tables::$2) goto init_mul_tables::@2
  to:init_mul_tables::@5
init_mul_tables::@2: scope:[init_mul_tables]  from init_mul_tables::@1 init_mul_tables::@5
  (byte~) init_mul_tables::$3 ← < (word) init_mul_tables::sqr
  *((byte[512]) mul_sqr_lo + (byte) init_mul_tables::i) ← (byte~) init_mul_tables::$3
  (byte~) init_mul_tables::$4 ← > (word) init_mul_tables::sqr
  *((byte[512]) mul_sqr_hi + (byte) init_mul_tables::i) ← (byte~) init_mul_tables::$4
  (byte~) init_mul_tables::$5 ← (byte) init_mul_tables::i >> (byte/signed byte/word/signed word) 1
  (word~) init_mul_tables::$6 ← (word) init_mul_tables::sqr + (byte~) init_mul_tables::$5
  (word) init_mul_tables::sqr ← (word~) init_mul_tables::$6
  (byte) init_mul_tables::i ← ++ (byte) init_mul_tables::i
  (boolean~) init_mul_tables::$7 ← (byte) init_mul_tables::i != (byte/signed byte/word/signed word) 0
  if((boolean~) init_mul_tables::$7) goto init_mul_tables::@1
  to:init_mul_tables::@6
init_mul_tables::@5: scope:[init_mul_tables]  from init_mul_tables::@1
  (word) init_mul_tables::sqr ← ++ (word) init_mul_tables::sqr
  to:init_mul_tables::@2
init_mul_tables::@6: scope:[init_mul_tables]  from init_mul_tables::@2
  (byte) init_mul_tables::i ← (byte/signed byte/word/signed word) 0
  to:init_mul_tables::@3
init_mul_tables::@3: scope:[init_mul_tables]  from init_mul_tables::@4 init_mul_tables::@6
  (byte~) init_mul_tables::$8 ← (byte) init_mul_tables::i & (byte/signed byte/word/signed word) 1
  (boolean~) init_mul_tables::$9 ← (byte~) init_mul_tables::$8 == (byte/signed byte/word/signed word) 0
  (boolean~) init_mul_tables::$10 ← ! (boolean~) init_mul_tables::$9
  if((boolean~) init_mul_tables::$10) goto init_mul_tables::@4
  to:init_mul_tables::@7
init_mul_tables::@4: scope:[init_mul_tables]  from init_mul_tables::@3 init_mul_tables::@7
  (byte*~) init_mul_tables::$11 ← (byte[512]) mul_sqr_lo + (word/signed word) 256
  (byte~) init_mul_tables::$12 ← < (word) init_mul_tables::sqr
  *((byte*~) init_mul_tables::$11 + (byte) init_mul_tables::i) ← (byte~) init_mul_tables::$12
  (byte*~) init_mul_tables::$13 ← (byte[512]) mul_sqr_hi + (word/signed word) 256
  (byte~) init_mul_tables::$14 ← > (word) init_mul_tables::sqr
  *((byte*~) init_mul_tables::$13 + (byte) init_mul_tables::i) ← (byte~) init_mul_tables::$14
  (word~) init_mul_tables::$15 ← (word) init_mul_tables::sqr + (byte/word/signed word) 128
  (byte~) init_mul_tables::$16 ← (byte) init_mul_tables::i >> (byte/signed byte/word/signed word) 1
  (word~) init_mul_tables::$17 ← (word~) init_mul_tables::$15 + (byte~) init_mul_tables::$16
  (word) init_mul_tables::sqr ← (word~) init_mul_tables::$17
  (byte) init_mul_tables::i ← ++ (byte) init_mul_tables::i
  (boolean~) init_mul_tables::$18 ← (byte) init_mul_tables::i != (byte/signed byte/word/signed word) 0
  if((boolean~) init_mul_tables::$18) goto init_mul_tables::@3
  to:init_mul_tables::@return
init_mul_tables::@7: scope:[init_mul_tables]  from init_mul_tables::@3
  (word) init_mul_tables::sqr ← ++ (word) init_mul_tables::sqr
  to:init_mul_tables::@4
init_mul_tables::@return: scope:[init_mul_tables]  from init_mul_tables::@4
  return 
  to:@return
@2: scope:[]  from @1
  (byte[512]) asm_mul_sqr_lo ← { fill( 512, 0) }
  (byte[512]) asm_mul_sqr_hi ← { fill( 512, 0) }
  to:@4
init_mul_tables_asm: scope:[init_mul_tables_asm]  from
  asm { ldx#$00txa.byte$c9lb1:tyaadc#$00ml1:staasm_mul_sqr_hi,xtaycmp#$40txarorml9:adc#$00staml9+1inxml0:staasm_mul_sqr_lo,xbnelb1incml0+2incml1+2clcinybnelb1 }
  to:init_mul_tables_asm::@return
init_mul_tables_asm::@return: scope:[init_mul_tables_asm]  from init_mul_tables_asm
  return 
  to:@return
mul_tables_compare: scope:[mul_tables_compare]  from
  *((byte*) BGCOL) ← (byte/signed byte/word/signed word) 5
  (byte) mul_tables_compare::i ← (byte/signed byte/word/signed word) 0
  to:mul_tables_compare::@1
mul_tables_compare::@1: scope:[mul_tables_compare]  from mul_tables_compare mul_tables_compare::@5
  (boolean~) mul_tables_compare::$0 ← *((byte[512]) mul_sqr_lo + (byte) mul_tables_compare::i) != *((byte[512]) asm_mul_sqr_lo + (byte) mul_tables_compare::i)
  (boolean~) mul_tables_compare::$1 ← ! (boolean~) mul_tables_compare::$0
  if((boolean~) mul_tables_compare::$1) goto mul_tables_compare::@2
  to:mul_tables_compare::@6
mul_tables_compare::@2: scope:[mul_tables_compare]  from mul_tables_compare::@1 mul_tables_compare::@6
  (byte*~) mul_tables_compare::$2 ← (byte[512]) mul_sqr_hi + (word/signed word) 256
  (byte*~) mul_tables_compare::$3 ← (byte[512]) asm_mul_sqr_hi + (word/signed word) 256
  (boolean~) mul_tables_compare::$4 ← *((byte*~) mul_tables_compare::$2 + (byte) mul_tables_compare::i) != *((byte*~) mul_tables_compare::$3 + (byte) mul_tables_compare::i)
  (boolean~) mul_tables_compare::$5 ← ! (boolean~) mul_tables_compare::$4
  if((boolean~) mul_tables_compare::$5) goto mul_tables_compare::@3
  to:mul_tables_compare::@7
mul_tables_compare::@6: scope:[mul_tables_compare]  from mul_tables_compare::@1
  *((byte*) BGCOL) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@2
mul_tables_compare::@3: scope:[mul_tables_compare]  from mul_tables_compare::@2 mul_tables_compare::@7
  (boolean~) mul_tables_compare::$6 ← *((byte[512]) mul_sqr_lo + (byte) mul_tables_compare::i) != *((byte[512]) asm_mul_sqr_lo + (byte) mul_tables_compare::i)
  (boolean~) mul_tables_compare::$7 ← ! (boolean~) mul_tables_compare::$6
  if((boolean~) mul_tables_compare::$7) goto mul_tables_compare::@4
  to:mul_tables_compare::@8
mul_tables_compare::@7: scope:[mul_tables_compare]  from mul_tables_compare::@2
  *((byte*) BGCOL) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@3
mul_tables_compare::@4: scope:[mul_tables_compare]  from mul_tables_compare::@3 mul_tables_compare::@8
  (byte*~) mul_tables_compare::$8 ← (byte[512]) mul_sqr_hi + (word/signed word) 256
  (byte*~) mul_tables_compare::$9 ← (byte[512]) asm_mul_sqr_hi + (word/signed word) 256
  (boolean~) mul_tables_compare::$10 ← *((byte*~) mul_tables_compare::$8 + (byte) mul_tables_compare::i) != *((byte*~) mul_tables_compare::$9 + (byte) mul_tables_compare::i)
  (boolean~) mul_tables_compare::$11 ← ! (boolean~) mul_tables_compare::$10
  if((boolean~) mul_tables_compare::$11) goto mul_tables_compare::@5
  to:mul_tables_compare::@9
mul_tables_compare::@8: scope:[mul_tables_compare]  from mul_tables_compare::@3
  *((byte*) BGCOL) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@4
mul_tables_compare::@5: scope:[mul_tables_compare]  from mul_tables_compare::@4 mul_tables_compare::@9
  (byte) mul_tables_compare::i ← ++ (byte) mul_tables_compare::i
  (boolean~) mul_tables_compare::$12 ← (byte) mul_tables_compare::i != (byte/signed byte/word/signed word) 0
  if((boolean~) mul_tables_compare::$12) goto mul_tables_compare::@1
  to:mul_tables_compare::@return
mul_tables_compare::@9: scope:[mul_tables_compare]  from mul_tables_compare::@4
  *((byte*) BGCOL) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@5
mul_tables_compare::@return: scope:[mul_tables_compare]  from mul_tables_compare::@5
  return 
  to:@return
@4: scope:[]  from @2
  call main 
  to:@end
@end: scope:[]  from @4

PROCEDURE MODIFY VARIABLE ANALYSIS

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL
@begin: scope:[]  from
  (byte*) BGCOL ← ((byte*)) (word) 53281
  to:@1
main: scope:[main]  from @4
  call init_mul_tables param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  call init_mul_tables_asm param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  call mul_tables_compare param-assignment
  to:main::@3
main::@3: scope:[main]  from main::@2
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
@1: scope:[]  from @begin
  (byte[512]) mul_sqr_lo ← { fill( 512, 0) }
  (byte[512]) mul_sqr_hi ← { fill( 512, 0) }
  to:@2
init_mul_tables: scope:[init_mul_tables]  from main
  (word) init_mul_tables::sqr ← (byte/signed byte/word/signed word) 0
  (byte) init_mul_tables::i ← (byte/signed byte/word/signed word) 1
  to:init_mul_tables::@1
init_mul_tables::@1: scope:[init_mul_tables]  from init_mul_tables init_mul_tables::@2
  (byte~) init_mul_tables::$0 ← (byte) init_mul_tables::i & (byte/signed byte/word/signed word) 1
  (boolean~) init_mul_tables::$1 ← (byte~) init_mul_tables::$0 == (byte/signed byte/word/signed word) 0
  (boolean~) init_mul_tables::$2 ← ! (boolean~) init_mul_tables::$1
  if((boolean~) init_mul_tables::$2) goto init_mul_tables::@2
  to:init_mul_tables::@5
init_mul_tables::@2: scope:[init_mul_tables]  from init_mul_tables::@1 init_mul_tables::@5
  (byte~) init_mul_tables::$3 ← < (word) init_mul_tables::sqr
  *((byte[512]) mul_sqr_lo + (byte) init_mul_tables::i) ← (byte~) init_mul_tables::$3
  (byte~) init_mul_tables::$4 ← > (word) init_mul_tables::sqr
  *((byte[512]) mul_sqr_hi + (byte) init_mul_tables::i) ← (byte~) init_mul_tables::$4
  (byte~) init_mul_tables::$5 ← (byte) init_mul_tables::i >> (byte/signed byte/word/signed word) 1
  (word~) init_mul_tables::$6 ← (word) init_mul_tables::sqr + (byte~) init_mul_tables::$5
  (word) init_mul_tables::sqr ← (word~) init_mul_tables::$6
  (byte) init_mul_tables::i ← ++ (byte) init_mul_tables::i
  (boolean~) init_mul_tables::$7 ← (byte) init_mul_tables::i != (byte/signed byte/word/signed word) 0
  if((boolean~) init_mul_tables::$7) goto init_mul_tables::@1
  to:init_mul_tables::@6
init_mul_tables::@5: scope:[init_mul_tables]  from init_mul_tables::@1
  (word) init_mul_tables::sqr ← ++ (word) init_mul_tables::sqr
  to:init_mul_tables::@2
init_mul_tables::@6: scope:[init_mul_tables]  from init_mul_tables::@2
  (byte) init_mul_tables::i ← (byte/signed byte/word/signed word) 0
  to:init_mul_tables::@3
init_mul_tables::@3: scope:[init_mul_tables]  from init_mul_tables::@4 init_mul_tables::@6
  (byte~) init_mul_tables::$8 ← (byte) init_mul_tables::i & (byte/signed byte/word/signed word) 1
  (boolean~) init_mul_tables::$9 ← (byte~) init_mul_tables::$8 == (byte/signed byte/word/signed word) 0
  (boolean~) init_mul_tables::$10 ← ! (boolean~) init_mul_tables::$9
  if((boolean~) init_mul_tables::$10) goto init_mul_tables::@4
  to:init_mul_tables::@7
init_mul_tables::@4: scope:[init_mul_tables]  from init_mul_tables::@3 init_mul_tables::@7
  (byte*~) init_mul_tables::$11 ← (byte[512]) mul_sqr_lo + (word/signed word) 256
  (byte~) init_mul_tables::$12 ← < (word) init_mul_tables::sqr
  *((byte*~) init_mul_tables::$11 + (byte) init_mul_tables::i) ← (byte~) init_mul_tables::$12
  (byte*~) init_mul_tables::$13 ← (byte[512]) mul_sqr_hi + (word/signed word) 256
  (byte~) init_mul_tables::$14 ← > (word) init_mul_tables::sqr
  *((byte*~) init_mul_tables::$13 + (byte) init_mul_tables::i) ← (byte~) init_mul_tables::$14
  (word~) init_mul_tables::$15 ← (word) init_mul_tables::sqr + (byte/word/signed word) 128
  (byte~) init_mul_tables::$16 ← (byte) init_mul_tables::i >> (byte/signed byte/word/signed word) 1
  (word~) init_mul_tables::$17 ← (word~) init_mul_tables::$15 + (byte~) init_mul_tables::$16
  (word) init_mul_tables::sqr ← (word~) init_mul_tables::$17
  (byte) init_mul_tables::i ← ++ (byte) init_mul_tables::i
  (boolean~) init_mul_tables::$18 ← (byte) init_mul_tables::i != (byte/signed byte/word/signed word) 0
  if((boolean~) init_mul_tables::$18) goto init_mul_tables::@3
  to:init_mul_tables::@return
init_mul_tables::@7: scope:[init_mul_tables]  from init_mul_tables::@3
  (word) init_mul_tables::sqr ← ++ (word) init_mul_tables::sqr
  to:init_mul_tables::@4
init_mul_tables::@return: scope:[init_mul_tables]  from init_mul_tables::@4
  return 
  to:@return
@2: scope:[]  from @1
  (byte[512]) asm_mul_sqr_lo ← { fill( 512, 0) }
  (byte[512]) asm_mul_sqr_hi ← { fill( 512, 0) }
  to:@4
init_mul_tables_asm: scope:[init_mul_tables_asm]  from main::@1
  asm { ldx#$00txa.byte$c9lb1:tyaadc#$00ml1:staasm_mul_sqr_hi,xtaycmp#$40txarorml9:adc#$00staml9+1inxml0:staasm_mul_sqr_lo,xbnelb1incml0+2incml1+2clcinybnelb1 }
  to:init_mul_tables_asm::@return
init_mul_tables_asm::@return: scope:[init_mul_tables_asm]  from init_mul_tables_asm
  return 
  to:@return
mul_tables_compare: scope:[mul_tables_compare]  from main::@2
  *((byte*) BGCOL) ← (byte/signed byte/word/signed word) 5
  (byte) mul_tables_compare::i ← (byte/signed byte/word/signed word) 0
  to:mul_tables_compare::@1
mul_tables_compare::@1: scope:[mul_tables_compare]  from mul_tables_compare mul_tables_compare::@5
  (boolean~) mul_tables_compare::$0 ← *((byte[512]) mul_sqr_lo + (byte) mul_tables_compare::i) != *((byte[512]) asm_mul_sqr_lo + (byte) mul_tables_compare::i)
  (boolean~) mul_tables_compare::$1 ← ! (boolean~) mul_tables_compare::$0
  if((boolean~) mul_tables_compare::$1) goto mul_tables_compare::@2
  to:mul_tables_compare::@6
mul_tables_compare::@2: scope:[mul_tables_compare]  from mul_tables_compare::@1 mul_tables_compare::@6
  (byte*~) mul_tables_compare::$2 ← (byte[512]) mul_sqr_hi + (word/signed word) 256
  (byte*~) mul_tables_compare::$3 ← (byte[512]) asm_mul_sqr_hi + (word/signed word) 256
  (boolean~) mul_tables_compare::$4 ← *((byte*~) mul_tables_compare::$2 + (byte) mul_tables_compare::i) != *((byte*~) mul_tables_compare::$3 + (byte) mul_tables_compare::i)
  (boolean~) mul_tables_compare::$5 ← ! (boolean~) mul_tables_compare::$4
  if((boolean~) mul_tables_compare::$5) goto mul_tables_compare::@3
  to:mul_tables_compare::@7
mul_tables_compare::@6: scope:[mul_tables_compare]  from mul_tables_compare::@1
  *((byte*) BGCOL) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@2
mul_tables_compare::@3: scope:[mul_tables_compare]  from mul_tables_compare::@2 mul_tables_compare::@7
  (boolean~) mul_tables_compare::$6 ← *((byte[512]) mul_sqr_lo + (byte) mul_tables_compare::i) != *((byte[512]) asm_mul_sqr_lo + (byte) mul_tables_compare::i)
  (boolean~) mul_tables_compare::$7 ← ! (boolean~) mul_tables_compare::$6
  if((boolean~) mul_tables_compare::$7) goto mul_tables_compare::@4
  to:mul_tables_compare::@8
mul_tables_compare::@7: scope:[mul_tables_compare]  from mul_tables_compare::@2
  *((byte*) BGCOL) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@3
mul_tables_compare::@4: scope:[mul_tables_compare]  from mul_tables_compare::@3 mul_tables_compare::@8
  (byte*~) mul_tables_compare::$8 ← (byte[512]) mul_sqr_hi + (word/signed word) 256
  (byte*~) mul_tables_compare::$9 ← (byte[512]) asm_mul_sqr_hi + (word/signed word) 256
  (boolean~) mul_tables_compare::$10 ← *((byte*~) mul_tables_compare::$8 + (byte) mul_tables_compare::i) != *((byte*~) mul_tables_compare::$9 + (byte) mul_tables_compare::i)
  (boolean~) mul_tables_compare::$11 ← ! (boolean~) mul_tables_compare::$10
  if((boolean~) mul_tables_compare::$11) goto mul_tables_compare::@5
  to:mul_tables_compare::@9
mul_tables_compare::@8: scope:[mul_tables_compare]  from mul_tables_compare::@3
  *((byte*) BGCOL) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@4
mul_tables_compare::@5: scope:[mul_tables_compare]  from mul_tables_compare::@4 mul_tables_compare::@9
  (byte) mul_tables_compare::i ← ++ (byte) mul_tables_compare::i
  (boolean~) mul_tables_compare::$12 ← (byte) mul_tables_compare::i != (byte/signed byte/word/signed word) 0
  if((boolean~) mul_tables_compare::$12) goto mul_tables_compare::@1
  to:mul_tables_compare::@return
mul_tables_compare::@9: scope:[mul_tables_compare]  from mul_tables_compare::@4
  *((byte*) BGCOL) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@5
mul_tables_compare::@return: scope:[mul_tables_compare]  from mul_tables_compare::@5
  return 
  to:@return
@4: scope:[]  from @2
  call main param-assignment
  to:@5
@5: scope:[]  from @4
  to:@end
@end: scope:[]  from @5

Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) BGCOL#0 ← ((byte*)) (word) 53281
  to:@1
main: scope:[main]  from @4
  (byte*) BGCOL#13 ← phi( @4/(byte*) BGCOL#14 )
  call init_mul_tables param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  (byte*) BGCOL#11 ← phi( main/(byte*) BGCOL#13 )
  call init_mul_tables_asm param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte*) BGCOL#6 ← phi( main::@1/(byte*) BGCOL#11 )
  call mul_tables_compare param-assignment
  to:main::@3
main::@3: scope:[main]  from main::@2
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
@1: scope:[]  from @begin
  (byte*) BGCOL#16 ← phi( @begin/(byte*) BGCOL#0 )
  (byte[512]) mul_sqr_lo#0 ← { fill( 512, 0) }
  (byte[512]) mul_sqr_hi#0 ← { fill( 512, 0) }
  to:@2
init_mul_tables: scope:[init_mul_tables]  from main
  (word) init_mul_tables::sqr#0 ← (byte/signed byte/word/signed word) 0
  (byte) init_mul_tables::i#0 ← (byte/signed byte/word/signed word) 1
  to:init_mul_tables::@1
init_mul_tables::@1: scope:[init_mul_tables]  from init_mul_tables init_mul_tables::@2
  (word) init_mul_tables::sqr#9 ← phi( init_mul_tables/(word) init_mul_tables::sqr#0 init_mul_tables::@2/(word) init_mul_tables::sqr#1 )
  (byte) init_mul_tables::i#4 ← phi( init_mul_tables/(byte) init_mul_tables::i#0 init_mul_tables::@2/(byte) init_mul_tables::i#1 )
  (byte~) init_mul_tables::$0 ← (byte) init_mul_tables::i#4 & (byte/signed byte/word/signed word) 1
  (boolean~) init_mul_tables::$1 ← (byte~) init_mul_tables::$0 == (byte/signed byte/word/signed word) 0
  (boolean~) init_mul_tables::$2 ← ! (boolean~) init_mul_tables::$1
  if((boolean~) init_mul_tables::$2) goto init_mul_tables::@2
  to:init_mul_tables::@5
init_mul_tables::@2: scope:[init_mul_tables]  from init_mul_tables::@1 init_mul_tables::@5
  (byte) init_mul_tables::i#5 ← phi( init_mul_tables::@1/(byte) init_mul_tables::i#4 init_mul_tables::@5/(byte) init_mul_tables::i#8 )
  (word) init_mul_tables::sqr#5 ← phi( init_mul_tables::@1/(word) init_mul_tables::sqr#9 init_mul_tables::@5/(word) init_mul_tables::sqr#2 )
  (byte~) init_mul_tables::$3 ← < (word) init_mul_tables::sqr#5
  *((byte[512]) mul_sqr_lo#0 + (byte) init_mul_tables::i#5) ← (byte~) init_mul_tables::$3
  (byte~) init_mul_tables::$4 ← > (word) init_mul_tables::sqr#5
  *((byte[512]) mul_sqr_hi#0 + (byte) init_mul_tables::i#5) ← (byte~) init_mul_tables::$4
  (byte~) init_mul_tables::$5 ← (byte) init_mul_tables::i#5 >> (byte/signed byte/word/signed word) 1
  (word~) init_mul_tables::$6 ← (word) init_mul_tables::sqr#5 + (byte~) init_mul_tables::$5
  (word) init_mul_tables::sqr#1 ← (word~) init_mul_tables::$6
  (byte) init_mul_tables::i#1 ← ++ (byte) init_mul_tables::i#5
  (boolean~) init_mul_tables::$7 ← (byte) init_mul_tables::i#1 != (byte/signed byte/word/signed word) 0
  if((boolean~) init_mul_tables::$7) goto init_mul_tables::@1
  to:init_mul_tables::@6
init_mul_tables::@5: scope:[init_mul_tables]  from init_mul_tables::@1
  (byte) init_mul_tables::i#8 ← phi( init_mul_tables::@1/(byte) init_mul_tables::i#4 )
  (word) init_mul_tables::sqr#6 ← phi( init_mul_tables::@1/(word) init_mul_tables::sqr#9 )
  (word) init_mul_tables::sqr#2 ← ++ (word) init_mul_tables::sqr#6
  to:init_mul_tables::@2
init_mul_tables::@6: scope:[init_mul_tables]  from init_mul_tables::@2
  (word) init_mul_tables::sqr#11 ← phi( init_mul_tables::@2/(word) init_mul_tables::sqr#1 )
  (byte) init_mul_tables::i#2 ← (byte/signed byte/word/signed word) 0
  to:init_mul_tables::@3
init_mul_tables::@3: scope:[init_mul_tables]  from init_mul_tables::@4 init_mul_tables::@6
  (word) init_mul_tables::sqr#10 ← phi( init_mul_tables::@4/(word) init_mul_tables::sqr#3 init_mul_tables::@6/(word) init_mul_tables::sqr#11 )
  (byte) init_mul_tables::i#6 ← phi( init_mul_tables::@4/(byte) init_mul_tables::i#3 init_mul_tables::@6/(byte) init_mul_tables::i#2 )
  (byte~) init_mul_tables::$8 ← (byte) init_mul_tables::i#6 & (byte/signed byte/word/signed word) 1
  (boolean~) init_mul_tables::$9 ← (byte~) init_mul_tables::$8 == (byte/signed byte/word/signed word) 0
  (boolean~) init_mul_tables::$10 ← ! (boolean~) init_mul_tables::$9
  if((boolean~) init_mul_tables::$10) goto init_mul_tables::@4
  to:init_mul_tables::@7
init_mul_tables::@4: scope:[init_mul_tables]  from init_mul_tables::@3 init_mul_tables::@7
  (byte) init_mul_tables::i#7 ← phi( init_mul_tables::@3/(byte) init_mul_tables::i#6 init_mul_tables::@7/(byte) init_mul_tables::i#9 )
  (word) init_mul_tables::sqr#7 ← phi( init_mul_tables::@3/(word) init_mul_tables::sqr#10 init_mul_tables::@7/(word) init_mul_tables::sqr#4 )
  (byte*~) init_mul_tables::$11 ← (byte[512]) mul_sqr_lo#0 + (word/signed word) 256
  (byte~) init_mul_tables::$12 ← < (word) init_mul_tables::sqr#7
  *((byte*~) init_mul_tables::$11 + (byte) init_mul_tables::i#7) ← (byte~) init_mul_tables::$12
  (byte*~) init_mul_tables::$13 ← (byte[512]) mul_sqr_hi#0 + (word/signed word) 256
  (byte~) init_mul_tables::$14 ← > (word) init_mul_tables::sqr#7
  *((byte*~) init_mul_tables::$13 + (byte) init_mul_tables::i#7) ← (byte~) init_mul_tables::$14
  (word~) init_mul_tables::$15 ← (word) init_mul_tables::sqr#7 + (byte/word/signed word) 128
  (byte~) init_mul_tables::$16 ← (byte) init_mul_tables::i#7 >> (byte/signed byte/word/signed word) 1
  (word~) init_mul_tables::$17 ← (word~) init_mul_tables::$15 + (byte~) init_mul_tables::$16
  (word) init_mul_tables::sqr#3 ← (word~) init_mul_tables::$17
  (byte) init_mul_tables::i#3 ← ++ (byte) init_mul_tables::i#7
  (boolean~) init_mul_tables::$18 ← (byte) init_mul_tables::i#3 != (byte/signed byte/word/signed word) 0
  if((boolean~) init_mul_tables::$18) goto init_mul_tables::@3
  to:init_mul_tables::@return
init_mul_tables::@7: scope:[init_mul_tables]  from init_mul_tables::@3
  (byte) init_mul_tables::i#9 ← phi( init_mul_tables::@3/(byte) init_mul_tables::i#6 )
  (word) init_mul_tables::sqr#8 ← phi( init_mul_tables::@3/(word) init_mul_tables::sqr#10 )
  (word) init_mul_tables::sqr#4 ← ++ (word) init_mul_tables::sqr#8
  to:init_mul_tables::@4
init_mul_tables::@return: scope:[init_mul_tables]  from init_mul_tables::@4
  return 
  to:@return
@2: scope:[]  from @1
  (byte*) BGCOL#15 ← phi( @1/(byte*) BGCOL#16 )
  (byte[512]) asm_mul_sqr_lo#0 ← { fill( 512, 0) }
  (byte[512]) asm_mul_sqr_hi#0 ← { fill( 512, 0) }
  to:@4
init_mul_tables_asm: scope:[init_mul_tables_asm]  from main::@1
  asm { ldx#$00txa.byte$c9lb1:tyaadc#$00ml1:staasm_mul_sqr_hi,xtaycmp#$40txarorml9:adc#$00staml9+1inxml0:staasm_mul_sqr_lo,xbnelb1incml0+2incml1+2clcinybnelb1 }
  to:init_mul_tables_asm::@return
init_mul_tables_asm::@return: scope:[init_mul_tables_asm]  from init_mul_tables_asm
  return 
  to:@return
mul_tables_compare: scope:[mul_tables_compare]  from main::@2
  (byte*) BGCOL#1 ← phi( main::@2/(byte*) BGCOL#6 )
  *((byte*) BGCOL#1) ← (byte/signed byte/word/signed word) 5
  (byte) mul_tables_compare::i#0 ← (byte/signed byte/word/signed word) 0
  to:mul_tables_compare::@1
mul_tables_compare::@1: scope:[mul_tables_compare]  from mul_tables_compare mul_tables_compare::@5
  (byte*) BGCOL#7 ← phi( mul_tables_compare/(byte*) BGCOL#1 mul_tables_compare::@5/(byte*) BGCOL#12 )
  (byte) mul_tables_compare::i#2 ← phi( mul_tables_compare/(byte) mul_tables_compare::i#0 mul_tables_compare::@5/(byte) mul_tables_compare::i#1 )
  (boolean~) mul_tables_compare::$0 ← *((byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#2) != *((byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#2)
  (boolean~) mul_tables_compare::$1 ← ! (boolean~) mul_tables_compare::$0
  if((boolean~) mul_tables_compare::$1) goto mul_tables_compare::@2
  to:mul_tables_compare::@6
mul_tables_compare::@2: scope:[mul_tables_compare]  from mul_tables_compare::@1 mul_tables_compare::@6
  (byte*) BGCOL#8 ← phi( mul_tables_compare::@1/(byte*) BGCOL#7 mul_tables_compare::@6/(byte*) BGCOL#2 )
  (byte) mul_tables_compare::i#3 ← phi( mul_tables_compare::@1/(byte) mul_tables_compare::i#2 mul_tables_compare::@6/(byte) mul_tables_compare::i#7 )
  (byte*~) mul_tables_compare::$2 ← (byte[512]) mul_sqr_hi#0 + (word/signed word) 256
  (byte*~) mul_tables_compare::$3 ← (byte[512]) asm_mul_sqr_hi#0 + (word/signed word) 256
  (boolean~) mul_tables_compare::$4 ← *((byte*~) mul_tables_compare::$2 + (byte) mul_tables_compare::i#3) != *((byte*~) mul_tables_compare::$3 + (byte) mul_tables_compare::i#3)
  (boolean~) mul_tables_compare::$5 ← ! (boolean~) mul_tables_compare::$4
  if((boolean~) mul_tables_compare::$5) goto mul_tables_compare::@3
  to:mul_tables_compare::@7
mul_tables_compare::@6: scope:[mul_tables_compare]  from mul_tables_compare::@1
  (byte) mul_tables_compare::i#7 ← phi( mul_tables_compare::@1/(byte) mul_tables_compare::i#2 )
  (byte*) BGCOL#2 ← phi( mul_tables_compare::@1/(byte*) BGCOL#7 )
  *((byte*) BGCOL#2) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@2
mul_tables_compare::@3: scope:[mul_tables_compare]  from mul_tables_compare::@2 mul_tables_compare::@7
  (byte*) BGCOL#9 ← phi( mul_tables_compare::@2/(byte*) BGCOL#8 mul_tables_compare::@7/(byte*) BGCOL#3 )
  (byte) mul_tables_compare::i#4 ← phi( mul_tables_compare::@2/(byte) mul_tables_compare::i#3 mul_tables_compare::@7/(byte) mul_tables_compare::i#8 )
  (boolean~) mul_tables_compare::$6 ← *((byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#4) != *((byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#4)
  (boolean~) mul_tables_compare::$7 ← ! (boolean~) mul_tables_compare::$6
  if((boolean~) mul_tables_compare::$7) goto mul_tables_compare::@4
  to:mul_tables_compare::@8
mul_tables_compare::@7: scope:[mul_tables_compare]  from mul_tables_compare::@2
  (byte) mul_tables_compare::i#8 ← phi( mul_tables_compare::@2/(byte) mul_tables_compare::i#3 )
  (byte*) BGCOL#3 ← phi( mul_tables_compare::@2/(byte*) BGCOL#8 )
  *((byte*) BGCOL#3) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@3
mul_tables_compare::@4: scope:[mul_tables_compare]  from mul_tables_compare::@3 mul_tables_compare::@8
  (byte*) BGCOL#10 ← phi( mul_tables_compare::@3/(byte*) BGCOL#9 mul_tables_compare::@8/(byte*) BGCOL#4 )
  (byte) mul_tables_compare::i#5 ← phi( mul_tables_compare::@3/(byte) mul_tables_compare::i#4 mul_tables_compare::@8/(byte) mul_tables_compare::i#9 )
  (byte*~) mul_tables_compare::$8 ← (byte[512]) mul_sqr_hi#0 + (word/signed word) 256
  (byte*~) mul_tables_compare::$9 ← (byte[512]) asm_mul_sqr_hi#0 + (word/signed word) 256
  (boolean~) mul_tables_compare::$10 ← *((byte*~) mul_tables_compare::$8 + (byte) mul_tables_compare::i#5) != *((byte*~) mul_tables_compare::$9 + (byte) mul_tables_compare::i#5)
  (boolean~) mul_tables_compare::$11 ← ! (boolean~) mul_tables_compare::$10
  if((boolean~) mul_tables_compare::$11) goto mul_tables_compare::@5
  to:mul_tables_compare::@9
mul_tables_compare::@8: scope:[mul_tables_compare]  from mul_tables_compare::@3
  (byte) mul_tables_compare::i#9 ← phi( mul_tables_compare::@3/(byte) mul_tables_compare::i#4 )
  (byte*) BGCOL#4 ← phi( mul_tables_compare::@3/(byte*) BGCOL#9 )
  *((byte*) BGCOL#4) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@4
mul_tables_compare::@5: scope:[mul_tables_compare]  from mul_tables_compare::@4 mul_tables_compare::@9
  (byte*) BGCOL#12 ← phi( mul_tables_compare::@4/(byte*) BGCOL#10 mul_tables_compare::@9/(byte*) BGCOL#5 )
  (byte) mul_tables_compare::i#6 ← phi( mul_tables_compare::@4/(byte) mul_tables_compare::i#5 mul_tables_compare::@9/(byte) mul_tables_compare::i#10 )
  (byte) mul_tables_compare::i#1 ← ++ (byte) mul_tables_compare::i#6
  (boolean~) mul_tables_compare::$12 ← (byte) mul_tables_compare::i#1 != (byte/signed byte/word/signed word) 0
  if((boolean~) mul_tables_compare::$12) goto mul_tables_compare::@1
  to:mul_tables_compare::@return
mul_tables_compare::@9: scope:[mul_tables_compare]  from mul_tables_compare::@4
  (byte) mul_tables_compare::i#10 ← phi( mul_tables_compare::@4/(byte) mul_tables_compare::i#5 )
  (byte*) BGCOL#5 ← phi( mul_tables_compare::@4/(byte*) BGCOL#10 )
  *((byte*) BGCOL#5) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@5
mul_tables_compare::@return: scope:[mul_tables_compare]  from mul_tables_compare::@5
  return 
  to:@return
@4: scope:[]  from @2
  (byte*) BGCOL#14 ← phi( @2/(byte*) BGCOL#15 )
  call main param-assignment
  to:@5
@5: scope:[]  from @4
  to:@end
@end: scope:[]  from @5

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  (byte*) BGCOL#0 ← ((byte*)) (word) 53281
  to:@1
main: scope:[main]  from @4
  (byte*) BGCOL#13 ← phi( @4/(byte*) BGCOL#14 )
  call init_mul_tables param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  (byte*) BGCOL#11 ← phi( main/(byte*) BGCOL#13 )
  call init_mul_tables_asm param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte*) BGCOL#6 ← phi( main::@1/(byte*) BGCOL#11 )
  call mul_tables_compare param-assignment
  to:main::@3
main::@3: scope:[main]  from main::@2
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
@1: scope:[]  from @begin
  (byte*) BGCOL#16 ← phi( @begin/(byte*) BGCOL#0 )
  (byte[512]) mul_sqr_lo#0 ← { fill( 512, 0) }
  (byte[512]) mul_sqr_hi#0 ← { fill( 512, 0) }
  to:@2
init_mul_tables: scope:[init_mul_tables]  from main
  (word) init_mul_tables::sqr#0 ← (byte/signed byte/word/signed word) 0
  (byte) init_mul_tables::i#0 ← (byte/signed byte/word/signed word) 1
  to:init_mul_tables::@1
init_mul_tables::@1: scope:[init_mul_tables]  from init_mul_tables init_mul_tables::@2
  (word) init_mul_tables::sqr#9 ← phi( init_mul_tables/(word) init_mul_tables::sqr#0 init_mul_tables::@2/(word) init_mul_tables::sqr#1 )
  (byte) init_mul_tables::i#4 ← phi( init_mul_tables/(byte) init_mul_tables::i#0 init_mul_tables::@2/(byte) init_mul_tables::i#1 )
  (byte~) init_mul_tables::$0 ← (byte) init_mul_tables::i#4 & (byte/signed byte/word/signed word) 1
  (boolean~) init_mul_tables::$1 ← (byte~) init_mul_tables::$0 == (byte/signed byte/word/signed word) 0
  (boolean~) init_mul_tables::$2 ← ! (boolean~) init_mul_tables::$1
  if((boolean~) init_mul_tables::$2) goto init_mul_tables::@2
  to:init_mul_tables::@5
init_mul_tables::@2: scope:[init_mul_tables]  from init_mul_tables::@1 init_mul_tables::@5
  (byte) init_mul_tables::i#5 ← phi( init_mul_tables::@1/(byte) init_mul_tables::i#4 init_mul_tables::@5/(byte) init_mul_tables::i#8 )
  (word) init_mul_tables::sqr#5 ← phi( init_mul_tables::@1/(word) init_mul_tables::sqr#9 init_mul_tables::@5/(word) init_mul_tables::sqr#2 )
  (byte~) init_mul_tables::$3 ← < (word) init_mul_tables::sqr#5
  *((byte[512]) mul_sqr_lo#0 + (byte) init_mul_tables::i#5) ← (byte~) init_mul_tables::$3
  (byte~) init_mul_tables::$4 ← > (word) init_mul_tables::sqr#5
  *((byte[512]) mul_sqr_hi#0 + (byte) init_mul_tables::i#5) ← (byte~) init_mul_tables::$4
  (byte~) init_mul_tables::$5 ← (byte) init_mul_tables::i#5 >> (byte/signed byte/word/signed word) 1
  (word~) init_mul_tables::$6 ← (word) init_mul_tables::sqr#5 + (byte~) init_mul_tables::$5
  (word) init_mul_tables::sqr#1 ← (word~) init_mul_tables::$6
  (byte) init_mul_tables::i#1 ← ++ (byte) init_mul_tables::i#5
  (boolean~) init_mul_tables::$7 ← (byte) init_mul_tables::i#1 != (byte/signed byte/word/signed word) 0
  if((boolean~) init_mul_tables::$7) goto init_mul_tables::@1
  to:init_mul_tables::@6
init_mul_tables::@5: scope:[init_mul_tables]  from init_mul_tables::@1
  (byte) init_mul_tables::i#8 ← phi( init_mul_tables::@1/(byte) init_mul_tables::i#4 )
  (word) init_mul_tables::sqr#6 ← phi( init_mul_tables::@1/(word) init_mul_tables::sqr#9 )
  (word) init_mul_tables::sqr#2 ← ++ (word) init_mul_tables::sqr#6
  to:init_mul_tables::@2
init_mul_tables::@6: scope:[init_mul_tables]  from init_mul_tables::@2
  (word) init_mul_tables::sqr#11 ← phi( init_mul_tables::@2/(word) init_mul_tables::sqr#1 )
  (byte) init_mul_tables::i#2 ← (byte/signed byte/word/signed word) 0
  to:init_mul_tables::@3
init_mul_tables::@3: scope:[init_mul_tables]  from init_mul_tables::@4 init_mul_tables::@6
  (word) init_mul_tables::sqr#10 ← phi( init_mul_tables::@4/(word) init_mul_tables::sqr#3 init_mul_tables::@6/(word) init_mul_tables::sqr#11 )
  (byte) init_mul_tables::i#6 ← phi( init_mul_tables::@4/(byte) init_mul_tables::i#3 init_mul_tables::@6/(byte) init_mul_tables::i#2 )
  (byte~) init_mul_tables::$8 ← (byte) init_mul_tables::i#6 & (byte/signed byte/word/signed word) 1
  (boolean~) init_mul_tables::$9 ← (byte~) init_mul_tables::$8 == (byte/signed byte/word/signed word) 0
  (boolean~) init_mul_tables::$10 ← ! (boolean~) init_mul_tables::$9
  if((boolean~) init_mul_tables::$10) goto init_mul_tables::@4
  to:init_mul_tables::@7
init_mul_tables::@4: scope:[init_mul_tables]  from init_mul_tables::@3 init_mul_tables::@7
  (byte) init_mul_tables::i#7 ← phi( init_mul_tables::@3/(byte) init_mul_tables::i#6 init_mul_tables::@7/(byte) init_mul_tables::i#9 )
  (word) init_mul_tables::sqr#7 ← phi( init_mul_tables::@3/(word) init_mul_tables::sqr#10 init_mul_tables::@7/(word) init_mul_tables::sqr#4 )
  (byte*~) init_mul_tables::$11 ← (byte[512]) mul_sqr_lo#0 + (word/signed word) 256
  (byte~) init_mul_tables::$12 ← < (word) init_mul_tables::sqr#7
  *((byte*~) init_mul_tables::$11 + (byte) init_mul_tables::i#7) ← (byte~) init_mul_tables::$12
  (byte*~) init_mul_tables::$13 ← (byte[512]) mul_sqr_hi#0 + (word/signed word) 256
  (byte~) init_mul_tables::$14 ← > (word) init_mul_tables::sqr#7
  *((byte*~) init_mul_tables::$13 + (byte) init_mul_tables::i#7) ← (byte~) init_mul_tables::$14
  (word~) init_mul_tables::$15 ← (word) init_mul_tables::sqr#7 + (byte/word/signed word) 128
  (byte~) init_mul_tables::$16 ← (byte) init_mul_tables::i#7 >> (byte/signed byte/word/signed word) 1
  (word~) init_mul_tables::$17 ← (word~) init_mul_tables::$15 + (byte~) init_mul_tables::$16
  (word) init_mul_tables::sqr#3 ← (word~) init_mul_tables::$17
  (byte) init_mul_tables::i#3 ← ++ (byte) init_mul_tables::i#7
  (boolean~) init_mul_tables::$18 ← (byte) init_mul_tables::i#3 != (byte/signed byte/word/signed word) 0
  if((boolean~) init_mul_tables::$18) goto init_mul_tables::@3
  to:init_mul_tables::@return
init_mul_tables::@7: scope:[init_mul_tables]  from init_mul_tables::@3
  (byte) init_mul_tables::i#9 ← phi( init_mul_tables::@3/(byte) init_mul_tables::i#6 )
  (word) init_mul_tables::sqr#8 ← phi( init_mul_tables::@3/(word) init_mul_tables::sqr#10 )
  (word) init_mul_tables::sqr#4 ← ++ (word) init_mul_tables::sqr#8
  to:init_mul_tables::@4
init_mul_tables::@return: scope:[init_mul_tables]  from init_mul_tables::@4
  return 
  to:@return
@2: scope:[]  from @1
  (byte*) BGCOL#15 ← phi( @1/(byte*) BGCOL#16 )
  (byte[512]) asm_mul_sqr_lo#0 ← { fill( 512, 0) }
  (byte[512]) asm_mul_sqr_hi#0 ← { fill( 512, 0) }
  to:@4
init_mul_tables_asm: scope:[init_mul_tables_asm]  from main::@1
  asm { ldx#$00txa.byte$c9lb1:tyaadc#$00ml1:staasm_mul_sqr_hi,xtaycmp#$40txarorml9:adc#$00staml9+1inxml0:staasm_mul_sqr_lo,xbnelb1incml0+2incml1+2clcinybnelb1 }
  to:init_mul_tables_asm::@return
init_mul_tables_asm::@return: scope:[init_mul_tables_asm]  from init_mul_tables_asm
  return 
  to:@return
mul_tables_compare: scope:[mul_tables_compare]  from main::@2
  (byte*) BGCOL#1 ← phi( main::@2/(byte*) BGCOL#6 )
  *((byte*) BGCOL#1) ← (byte/signed byte/word/signed word) 5
  (byte) mul_tables_compare::i#0 ← (byte/signed byte/word/signed word) 0
  to:mul_tables_compare::@1
mul_tables_compare::@1: scope:[mul_tables_compare]  from mul_tables_compare mul_tables_compare::@5
  (byte*) BGCOL#7 ← phi( mul_tables_compare/(byte*) BGCOL#1 mul_tables_compare::@5/(byte*) BGCOL#12 )
  (byte) mul_tables_compare::i#2 ← phi( mul_tables_compare/(byte) mul_tables_compare::i#0 mul_tables_compare::@5/(byte) mul_tables_compare::i#1 )
  (boolean~) mul_tables_compare::$0 ← *((byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#2) != *((byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#2)
  (boolean~) mul_tables_compare::$1 ← ! (boolean~) mul_tables_compare::$0
  if((boolean~) mul_tables_compare::$1) goto mul_tables_compare::@2
  to:mul_tables_compare::@6
mul_tables_compare::@2: scope:[mul_tables_compare]  from mul_tables_compare::@1 mul_tables_compare::@6
  (byte*) BGCOL#8 ← phi( mul_tables_compare::@1/(byte*) BGCOL#7 mul_tables_compare::@6/(byte*) BGCOL#2 )
  (byte) mul_tables_compare::i#3 ← phi( mul_tables_compare::@1/(byte) mul_tables_compare::i#2 mul_tables_compare::@6/(byte) mul_tables_compare::i#7 )
  (byte*~) mul_tables_compare::$2 ← (byte[512]) mul_sqr_hi#0 + (word/signed word) 256
  (byte*~) mul_tables_compare::$3 ← (byte[512]) asm_mul_sqr_hi#0 + (word/signed word) 256
  (boolean~) mul_tables_compare::$4 ← *((byte*~) mul_tables_compare::$2 + (byte) mul_tables_compare::i#3) != *((byte*~) mul_tables_compare::$3 + (byte) mul_tables_compare::i#3)
  (boolean~) mul_tables_compare::$5 ← ! (boolean~) mul_tables_compare::$4
  if((boolean~) mul_tables_compare::$5) goto mul_tables_compare::@3
  to:mul_tables_compare::@7
mul_tables_compare::@6: scope:[mul_tables_compare]  from mul_tables_compare::@1
  (byte) mul_tables_compare::i#7 ← phi( mul_tables_compare::@1/(byte) mul_tables_compare::i#2 )
  (byte*) BGCOL#2 ← phi( mul_tables_compare::@1/(byte*) BGCOL#7 )
  *((byte*) BGCOL#2) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@2
mul_tables_compare::@3: scope:[mul_tables_compare]  from mul_tables_compare::@2 mul_tables_compare::@7
  (byte*) BGCOL#9 ← phi( mul_tables_compare::@2/(byte*) BGCOL#8 mul_tables_compare::@7/(byte*) BGCOL#3 )
  (byte) mul_tables_compare::i#4 ← phi( mul_tables_compare::@2/(byte) mul_tables_compare::i#3 mul_tables_compare::@7/(byte) mul_tables_compare::i#8 )
  (boolean~) mul_tables_compare::$6 ← *((byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#4) != *((byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#4)
  (boolean~) mul_tables_compare::$7 ← ! (boolean~) mul_tables_compare::$6
  if((boolean~) mul_tables_compare::$7) goto mul_tables_compare::@4
  to:mul_tables_compare::@8
mul_tables_compare::@7: scope:[mul_tables_compare]  from mul_tables_compare::@2
  (byte) mul_tables_compare::i#8 ← phi( mul_tables_compare::@2/(byte) mul_tables_compare::i#3 )
  (byte*) BGCOL#3 ← phi( mul_tables_compare::@2/(byte*) BGCOL#8 )
  *((byte*) BGCOL#3) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@3
mul_tables_compare::@4: scope:[mul_tables_compare]  from mul_tables_compare::@3 mul_tables_compare::@8
  (byte*) BGCOL#10 ← phi( mul_tables_compare::@3/(byte*) BGCOL#9 mul_tables_compare::@8/(byte*) BGCOL#4 )
  (byte) mul_tables_compare::i#5 ← phi( mul_tables_compare::@3/(byte) mul_tables_compare::i#4 mul_tables_compare::@8/(byte) mul_tables_compare::i#9 )
  (byte*~) mul_tables_compare::$8 ← (byte[512]) mul_sqr_hi#0 + (word/signed word) 256
  (byte*~) mul_tables_compare::$9 ← (byte[512]) asm_mul_sqr_hi#0 + (word/signed word) 256
  (boolean~) mul_tables_compare::$10 ← *((byte*~) mul_tables_compare::$8 + (byte) mul_tables_compare::i#5) != *((byte*~) mul_tables_compare::$9 + (byte) mul_tables_compare::i#5)
  (boolean~) mul_tables_compare::$11 ← ! (boolean~) mul_tables_compare::$10
  if((boolean~) mul_tables_compare::$11) goto mul_tables_compare::@5
  to:mul_tables_compare::@9
mul_tables_compare::@8: scope:[mul_tables_compare]  from mul_tables_compare::@3
  (byte) mul_tables_compare::i#9 ← phi( mul_tables_compare::@3/(byte) mul_tables_compare::i#4 )
  (byte*) BGCOL#4 ← phi( mul_tables_compare::@3/(byte*) BGCOL#9 )
  *((byte*) BGCOL#4) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@4
mul_tables_compare::@5: scope:[mul_tables_compare]  from mul_tables_compare::@4 mul_tables_compare::@9
  (byte*) BGCOL#12 ← phi( mul_tables_compare::@4/(byte*) BGCOL#10 mul_tables_compare::@9/(byte*) BGCOL#5 )
  (byte) mul_tables_compare::i#6 ← phi( mul_tables_compare::@4/(byte) mul_tables_compare::i#5 mul_tables_compare::@9/(byte) mul_tables_compare::i#10 )
  (byte) mul_tables_compare::i#1 ← ++ (byte) mul_tables_compare::i#6
  (boolean~) mul_tables_compare::$12 ← (byte) mul_tables_compare::i#1 != (byte/signed byte/word/signed word) 0
  if((boolean~) mul_tables_compare::$12) goto mul_tables_compare::@1
  to:mul_tables_compare::@return
mul_tables_compare::@9: scope:[mul_tables_compare]  from mul_tables_compare::@4
  (byte) mul_tables_compare::i#10 ← phi( mul_tables_compare::@4/(byte) mul_tables_compare::i#5 )
  (byte*) BGCOL#5 ← phi( mul_tables_compare::@4/(byte*) BGCOL#10 )
  *((byte*) BGCOL#5) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@5
mul_tables_compare::@return: scope:[mul_tables_compare]  from mul_tables_compare::@5
  return 
  to:@return
@4: scope:[]  from @2
  (byte*) BGCOL#14 ← phi( @2/(byte*) BGCOL#15 )
  call main param-assignment
  to:@5
@5: scope:[]  from @4
  to:@end
@end: scope:[]  from @5

INITIAL SSA SYMBOL TABLE
(label) @1
(label) @2
(label) @4
(label) @5
(label) @begin
(label) @end
(byte*) BGCOL
(byte*) BGCOL#0
(byte*) BGCOL#1
(byte*) BGCOL#10
(byte*) BGCOL#11
(byte*) BGCOL#12
(byte*) BGCOL#13
(byte*) BGCOL#14
(byte*) BGCOL#15
(byte*) BGCOL#16
(byte*) BGCOL#2
(byte*) BGCOL#3
(byte*) BGCOL#4
(byte*) BGCOL#5
(byte*) BGCOL#6
(byte*) BGCOL#7
(byte*) BGCOL#8
(byte*) BGCOL#9
(byte[512]) asm_mul_sqr_hi
(byte[512]) asm_mul_sqr_hi#0
(byte[512]) asm_mul_sqr_lo
(byte[512]) asm_mul_sqr_lo#0
(void()) init_mul_tables()
(byte~) init_mul_tables::$0
(boolean~) init_mul_tables::$1
(boolean~) init_mul_tables::$10
(byte*~) init_mul_tables::$11
(byte~) init_mul_tables::$12
(byte*~) init_mul_tables::$13
(byte~) init_mul_tables::$14
(word~) init_mul_tables::$15
(byte~) init_mul_tables::$16
(word~) init_mul_tables::$17
(boolean~) init_mul_tables::$18
(boolean~) init_mul_tables::$2
(byte~) init_mul_tables::$3
(byte~) init_mul_tables::$4
(byte~) init_mul_tables::$5
(word~) init_mul_tables::$6
(boolean~) init_mul_tables::$7
(byte~) init_mul_tables::$8
(boolean~) init_mul_tables::$9
(label) init_mul_tables::@1
(label) init_mul_tables::@2
(label) init_mul_tables::@3
(label) init_mul_tables::@4
(label) init_mul_tables::@5
(label) init_mul_tables::@6
(label) init_mul_tables::@7
(label) init_mul_tables::@return
(byte) init_mul_tables::i
(byte) init_mul_tables::i#0
(byte) init_mul_tables::i#1
(byte) init_mul_tables::i#2
(byte) init_mul_tables::i#3
(byte) init_mul_tables::i#4
(byte) init_mul_tables::i#5
(byte) init_mul_tables::i#6
(byte) init_mul_tables::i#7
(byte) init_mul_tables::i#8
(byte) init_mul_tables::i#9
(word) init_mul_tables::sqr
(word) init_mul_tables::sqr#0
(word) init_mul_tables::sqr#1
(word) init_mul_tables::sqr#10
(word) init_mul_tables::sqr#11
(word) init_mul_tables::sqr#2
(word) init_mul_tables::sqr#3
(word) init_mul_tables::sqr#4
(word) init_mul_tables::sqr#5
(word) init_mul_tables::sqr#6
(word) init_mul_tables::sqr#7
(word) init_mul_tables::sqr#8
(word) init_mul_tables::sqr#9
(void()) init_mul_tables_asm()
(label) init_mul_tables_asm::@return
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte[512]) mul_sqr_hi
(byte[512]) mul_sqr_hi#0
(byte[512]) mul_sqr_lo
(byte[512]) mul_sqr_lo#0
(void()) mul_tables_compare()
(boolean~) mul_tables_compare::$0
(boolean~) mul_tables_compare::$1
(boolean~) mul_tables_compare::$10
(boolean~) mul_tables_compare::$11
(boolean~) mul_tables_compare::$12
(byte*~) mul_tables_compare::$2
(byte*~) mul_tables_compare::$3
(boolean~) mul_tables_compare::$4
(boolean~) mul_tables_compare::$5
(boolean~) mul_tables_compare::$6
(boolean~) mul_tables_compare::$7
(byte*~) mul_tables_compare::$8
(byte*~) mul_tables_compare::$9
(label) mul_tables_compare::@1
(label) mul_tables_compare::@2
(label) mul_tables_compare::@3
(label) mul_tables_compare::@4
(label) mul_tables_compare::@5
(label) mul_tables_compare::@6
(label) mul_tables_compare::@7
(label) mul_tables_compare::@8
(label) mul_tables_compare::@9
(label) mul_tables_compare::@return
(byte) mul_tables_compare::i
(byte) mul_tables_compare::i#0
(byte) mul_tables_compare::i#1
(byte) mul_tables_compare::i#10
(byte) mul_tables_compare::i#2
(byte) mul_tables_compare::i#3
(byte) mul_tables_compare::i#4
(byte) mul_tables_compare::i#5
(byte) mul_tables_compare::i#6
(byte) mul_tables_compare::i#7
(byte) mul_tables_compare::i#8
(byte) mul_tables_compare::i#9

Culled Empty Block (label) main::@3
Culled Empty Block (label) @5
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) BGCOL#0 ← ((byte*)) (word) 53281
  to:@1
main: scope:[main]  from @4
  (byte*) BGCOL#13 ← phi( @4/(byte*) BGCOL#14 )
  call init_mul_tables param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  (byte*) BGCOL#11 ← phi( main/(byte*) BGCOL#13 )
  call init_mul_tables_asm param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte*) BGCOL#6 ← phi( main::@1/(byte*) BGCOL#11 )
  call mul_tables_compare param-assignment
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  (byte*) BGCOL#16 ← phi( @begin/(byte*) BGCOL#0 )
  (byte[512]) mul_sqr_lo#0 ← { fill( 512, 0) }
  (byte[512]) mul_sqr_hi#0 ← { fill( 512, 0) }
  to:@2
init_mul_tables: scope:[init_mul_tables]  from main
  (word) init_mul_tables::sqr#0 ← (byte/signed byte/word/signed word) 0
  (byte) init_mul_tables::i#0 ← (byte/signed byte/word/signed word) 1
  to:init_mul_tables::@1
init_mul_tables::@1: scope:[init_mul_tables]  from init_mul_tables init_mul_tables::@2
  (word) init_mul_tables::sqr#9 ← phi( init_mul_tables/(word) init_mul_tables::sqr#0 init_mul_tables::@2/(word) init_mul_tables::sqr#1 )
  (byte) init_mul_tables::i#4 ← phi( init_mul_tables/(byte) init_mul_tables::i#0 init_mul_tables::@2/(byte) init_mul_tables::i#1 )
  (byte~) init_mul_tables::$0 ← (byte) init_mul_tables::i#4 & (byte/signed byte/word/signed word) 1
  (boolean~) init_mul_tables::$1 ← (byte~) init_mul_tables::$0 == (byte/signed byte/word/signed word) 0
  (boolean~) init_mul_tables::$2 ← ! (boolean~) init_mul_tables::$1
  if((boolean~) init_mul_tables::$2) goto init_mul_tables::@2
  to:init_mul_tables::@5
init_mul_tables::@2: scope:[init_mul_tables]  from init_mul_tables::@1 init_mul_tables::@5
  (byte) init_mul_tables::i#5 ← phi( init_mul_tables::@1/(byte) init_mul_tables::i#4 init_mul_tables::@5/(byte) init_mul_tables::i#8 )
  (word) init_mul_tables::sqr#5 ← phi( init_mul_tables::@1/(word) init_mul_tables::sqr#9 init_mul_tables::@5/(word) init_mul_tables::sqr#2 )
  (byte~) init_mul_tables::$3 ← < (word) init_mul_tables::sqr#5
  *((byte[512]) mul_sqr_lo#0 + (byte) init_mul_tables::i#5) ← (byte~) init_mul_tables::$3
  (byte~) init_mul_tables::$4 ← > (word) init_mul_tables::sqr#5
  *((byte[512]) mul_sqr_hi#0 + (byte) init_mul_tables::i#5) ← (byte~) init_mul_tables::$4
  (byte~) init_mul_tables::$5 ← (byte) init_mul_tables::i#5 >> (byte/signed byte/word/signed word) 1
  (word~) init_mul_tables::$6 ← (word) init_mul_tables::sqr#5 + (byte~) init_mul_tables::$5
  (word) init_mul_tables::sqr#1 ← (word~) init_mul_tables::$6
  (byte) init_mul_tables::i#1 ← ++ (byte) init_mul_tables::i#5
  (boolean~) init_mul_tables::$7 ← (byte) init_mul_tables::i#1 != (byte/signed byte/word/signed word) 0
  if((boolean~) init_mul_tables::$7) goto init_mul_tables::@1
  to:init_mul_tables::@6
init_mul_tables::@5: scope:[init_mul_tables]  from init_mul_tables::@1
  (byte) init_mul_tables::i#8 ← phi( init_mul_tables::@1/(byte) init_mul_tables::i#4 )
  (word) init_mul_tables::sqr#6 ← phi( init_mul_tables::@1/(word) init_mul_tables::sqr#9 )
  (word) init_mul_tables::sqr#2 ← ++ (word) init_mul_tables::sqr#6
  to:init_mul_tables::@2
init_mul_tables::@6: scope:[init_mul_tables]  from init_mul_tables::@2
  (word) init_mul_tables::sqr#11 ← phi( init_mul_tables::@2/(word) init_mul_tables::sqr#1 )
  (byte) init_mul_tables::i#2 ← (byte/signed byte/word/signed word) 0
  to:init_mul_tables::@3
init_mul_tables::@3: scope:[init_mul_tables]  from init_mul_tables::@4 init_mul_tables::@6
  (word) init_mul_tables::sqr#10 ← phi( init_mul_tables::@4/(word) init_mul_tables::sqr#3 init_mul_tables::@6/(word) init_mul_tables::sqr#11 )
  (byte) init_mul_tables::i#6 ← phi( init_mul_tables::@4/(byte) init_mul_tables::i#3 init_mul_tables::@6/(byte) init_mul_tables::i#2 )
  (byte~) init_mul_tables::$8 ← (byte) init_mul_tables::i#6 & (byte/signed byte/word/signed word) 1
  (boolean~) init_mul_tables::$9 ← (byte~) init_mul_tables::$8 == (byte/signed byte/word/signed word) 0
  (boolean~) init_mul_tables::$10 ← ! (boolean~) init_mul_tables::$9
  if((boolean~) init_mul_tables::$10) goto init_mul_tables::@4
  to:init_mul_tables::@7
init_mul_tables::@4: scope:[init_mul_tables]  from init_mul_tables::@3 init_mul_tables::@7
  (byte) init_mul_tables::i#7 ← phi( init_mul_tables::@3/(byte) init_mul_tables::i#6 init_mul_tables::@7/(byte) init_mul_tables::i#9 )
  (word) init_mul_tables::sqr#7 ← phi( init_mul_tables::@3/(word) init_mul_tables::sqr#10 init_mul_tables::@7/(word) init_mul_tables::sqr#4 )
  (byte*~) init_mul_tables::$11 ← (byte[512]) mul_sqr_lo#0 + (word/signed word) 256
  (byte~) init_mul_tables::$12 ← < (word) init_mul_tables::sqr#7
  *((byte*~) init_mul_tables::$11 + (byte) init_mul_tables::i#7) ← (byte~) init_mul_tables::$12
  (byte*~) init_mul_tables::$13 ← (byte[512]) mul_sqr_hi#0 + (word/signed word) 256
  (byte~) init_mul_tables::$14 ← > (word) init_mul_tables::sqr#7
  *((byte*~) init_mul_tables::$13 + (byte) init_mul_tables::i#7) ← (byte~) init_mul_tables::$14
  (word~) init_mul_tables::$15 ← (word) init_mul_tables::sqr#7 + (byte/word/signed word) 128
  (byte~) init_mul_tables::$16 ← (byte) init_mul_tables::i#7 >> (byte/signed byte/word/signed word) 1
  (word~) init_mul_tables::$17 ← (word~) init_mul_tables::$15 + (byte~) init_mul_tables::$16
  (word) init_mul_tables::sqr#3 ← (word~) init_mul_tables::$17
  (byte) init_mul_tables::i#3 ← ++ (byte) init_mul_tables::i#7
  (boolean~) init_mul_tables::$18 ← (byte) init_mul_tables::i#3 != (byte/signed byte/word/signed word) 0
  if((boolean~) init_mul_tables::$18) goto init_mul_tables::@3
  to:init_mul_tables::@return
init_mul_tables::@7: scope:[init_mul_tables]  from init_mul_tables::@3
  (byte) init_mul_tables::i#9 ← phi( init_mul_tables::@3/(byte) init_mul_tables::i#6 )
  (word) init_mul_tables::sqr#8 ← phi( init_mul_tables::@3/(word) init_mul_tables::sqr#10 )
  (word) init_mul_tables::sqr#4 ← ++ (word) init_mul_tables::sqr#8
  to:init_mul_tables::@4
init_mul_tables::@return: scope:[init_mul_tables]  from init_mul_tables::@4
  return 
  to:@return
@2: scope:[]  from @1
  (byte*) BGCOL#15 ← phi( @1/(byte*) BGCOL#16 )
  (byte[512]) asm_mul_sqr_lo#0 ← { fill( 512, 0) }
  (byte[512]) asm_mul_sqr_hi#0 ← { fill( 512, 0) }
  to:@4
init_mul_tables_asm: scope:[init_mul_tables_asm]  from main::@1
  asm { ldx#$00txa.byte$c9lb1:tyaadc#$00ml1:staasm_mul_sqr_hi,xtaycmp#$40txarorml9:adc#$00staml9+1inxml0:staasm_mul_sqr_lo,xbnelb1incml0+2incml1+2clcinybnelb1 }
  to:init_mul_tables_asm::@return
init_mul_tables_asm::@return: scope:[init_mul_tables_asm]  from init_mul_tables_asm
  return 
  to:@return
mul_tables_compare: scope:[mul_tables_compare]  from main::@2
  (byte*) BGCOL#1 ← phi( main::@2/(byte*) BGCOL#6 )
  *((byte*) BGCOL#1) ← (byte/signed byte/word/signed word) 5
  (byte) mul_tables_compare::i#0 ← (byte/signed byte/word/signed word) 0
  to:mul_tables_compare::@1
mul_tables_compare::@1: scope:[mul_tables_compare]  from mul_tables_compare mul_tables_compare::@5
  (byte*) BGCOL#7 ← phi( mul_tables_compare/(byte*) BGCOL#1 mul_tables_compare::@5/(byte*) BGCOL#12 )
  (byte) mul_tables_compare::i#2 ← phi( mul_tables_compare/(byte) mul_tables_compare::i#0 mul_tables_compare::@5/(byte) mul_tables_compare::i#1 )
  (boolean~) mul_tables_compare::$0 ← *((byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#2) != *((byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#2)
  (boolean~) mul_tables_compare::$1 ← ! (boolean~) mul_tables_compare::$0
  if((boolean~) mul_tables_compare::$1) goto mul_tables_compare::@2
  to:mul_tables_compare::@6
mul_tables_compare::@2: scope:[mul_tables_compare]  from mul_tables_compare::@1 mul_tables_compare::@6
  (byte*) BGCOL#8 ← phi( mul_tables_compare::@1/(byte*) BGCOL#7 mul_tables_compare::@6/(byte*) BGCOL#2 )
  (byte) mul_tables_compare::i#3 ← phi( mul_tables_compare::@1/(byte) mul_tables_compare::i#2 mul_tables_compare::@6/(byte) mul_tables_compare::i#7 )
  (byte*~) mul_tables_compare::$2 ← (byte[512]) mul_sqr_hi#0 + (word/signed word) 256
  (byte*~) mul_tables_compare::$3 ← (byte[512]) asm_mul_sqr_hi#0 + (word/signed word) 256
  (boolean~) mul_tables_compare::$4 ← *((byte*~) mul_tables_compare::$2 + (byte) mul_tables_compare::i#3) != *((byte*~) mul_tables_compare::$3 + (byte) mul_tables_compare::i#3)
  (boolean~) mul_tables_compare::$5 ← ! (boolean~) mul_tables_compare::$4
  if((boolean~) mul_tables_compare::$5) goto mul_tables_compare::@3
  to:mul_tables_compare::@7
mul_tables_compare::@6: scope:[mul_tables_compare]  from mul_tables_compare::@1
  (byte) mul_tables_compare::i#7 ← phi( mul_tables_compare::@1/(byte) mul_tables_compare::i#2 )
  (byte*) BGCOL#2 ← phi( mul_tables_compare::@1/(byte*) BGCOL#7 )
  *((byte*) BGCOL#2) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@2
mul_tables_compare::@3: scope:[mul_tables_compare]  from mul_tables_compare::@2 mul_tables_compare::@7
  (byte*) BGCOL#9 ← phi( mul_tables_compare::@2/(byte*) BGCOL#8 mul_tables_compare::@7/(byte*) BGCOL#3 )
  (byte) mul_tables_compare::i#4 ← phi( mul_tables_compare::@2/(byte) mul_tables_compare::i#3 mul_tables_compare::@7/(byte) mul_tables_compare::i#8 )
  (boolean~) mul_tables_compare::$6 ← *((byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#4) != *((byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#4)
  (boolean~) mul_tables_compare::$7 ← ! (boolean~) mul_tables_compare::$6
  if((boolean~) mul_tables_compare::$7) goto mul_tables_compare::@4
  to:mul_tables_compare::@8
mul_tables_compare::@7: scope:[mul_tables_compare]  from mul_tables_compare::@2
  (byte) mul_tables_compare::i#8 ← phi( mul_tables_compare::@2/(byte) mul_tables_compare::i#3 )
  (byte*) BGCOL#3 ← phi( mul_tables_compare::@2/(byte*) BGCOL#8 )
  *((byte*) BGCOL#3) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@3
mul_tables_compare::@4: scope:[mul_tables_compare]  from mul_tables_compare::@3 mul_tables_compare::@8
  (byte*) BGCOL#10 ← phi( mul_tables_compare::@3/(byte*) BGCOL#9 mul_tables_compare::@8/(byte*) BGCOL#4 )
  (byte) mul_tables_compare::i#5 ← phi( mul_tables_compare::@3/(byte) mul_tables_compare::i#4 mul_tables_compare::@8/(byte) mul_tables_compare::i#9 )
  (byte*~) mul_tables_compare::$8 ← (byte[512]) mul_sqr_hi#0 + (word/signed word) 256
  (byte*~) mul_tables_compare::$9 ← (byte[512]) asm_mul_sqr_hi#0 + (word/signed word) 256
  (boolean~) mul_tables_compare::$10 ← *((byte*~) mul_tables_compare::$8 + (byte) mul_tables_compare::i#5) != *((byte*~) mul_tables_compare::$9 + (byte) mul_tables_compare::i#5)
  (boolean~) mul_tables_compare::$11 ← ! (boolean~) mul_tables_compare::$10
  if((boolean~) mul_tables_compare::$11) goto mul_tables_compare::@5
  to:mul_tables_compare::@9
mul_tables_compare::@8: scope:[mul_tables_compare]  from mul_tables_compare::@3
  (byte) mul_tables_compare::i#9 ← phi( mul_tables_compare::@3/(byte) mul_tables_compare::i#4 )
  (byte*) BGCOL#4 ← phi( mul_tables_compare::@3/(byte*) BGCOL#9 )
  *((byte*) BGCOL#4) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@4
mul_tables_compare::@5: scope:[mul_tables_compare]  from mul_tables_compare::@4 mul_tables_compare::@9
  (byte*) BGCOL#12 ← phi( mul_tables_compare::@4/(byte*) BGCOL#10 mul_tables_compare::@9/(byte*) BGCOL#5 )
  (byte) mul_tables_compare::i#6 ← phi( mul_tables_compare::@4/(byte) mul_tables_compare::i#5 mul_tables_compare::@9/(byte) mul_tables_compare::i#10 )
  (byte) mul_tables_compare::i#1 ← ++ (byte) mul_tables_compare::i#6
  (boolean~) mul_tables_compare::$12 ← (byte) mul_tables_compare::i#1 != (byte/signed byte/word/signed word) 0
  if((boolean~) mul_tables_compare::$12) goto mul_tables_compare::@1
  to:mul_tables_compare::@return
mul_tables_compare::@9: scope:[mul_tables_compare]  from mul_tables_compare::@4
  (byte) mul_tables_compare::i#10 ← phi( mul_tables_compare::@4/(byte) mul_tables_compare::i#5 )
  (byte*) BGCOL#5 ← phi( mul_tables_compare::@4/(byte*) BGCOL#10 )
  *((byte*) BGCOL#5) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@5
mul_tables_compare::@return: scope:[mul_tables_compare]  from mul_tables_compare::@5
  return 
  to:@return
@4: scope:[]  from @2
  (byte*) BGCOL#14 ← phi( @2/(byte*) BGCOL#15 )
  call main param-assignment
  to:@end
@end: scope:[]  from @4

Inversing boolean not (boolean~) init_mul_tables::$2 ← (byte~) init_mul_tables::$0 != (byte/signed byte/word/signed word) 0 from (boolean~) init_mul_tables::$1 ← (byte~) init_mul_tables::$0 == (byte/signed byte/word/signed word) 0
Inversing boolean not (boolean~) init_mul_tables::$10 ← (byte~) init_mul_tables::$8 != (byte/signed byte/word/signed word) 0 from (boolean~) init_mul_tables::$9 ← (byte~) init_mul_tables::$8 == (byte/signed byte/word/signed word) 0
Inversing boolean not (boolean~) mul_tables_compare::$1 ← *((byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#2) == *((byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#2) from (boolean~) mul_tables_compare::$0 ← *((byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#2) != *((byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#2)
Inversing boolean not (boolean~) mul_tables_compare::$5 ← *((byte*~) mul_tables_compare::$2 + (byte) mul_tables_compare::i#3) == *((byte*~) mul_tables_compare::$3 + (byte) mul_tables_compare::i#3) from (boolean~) mul_tables_compare::$4 ← *((byte*~) mul_tables_compare::$2 + (byte) mul_tables_compare::i#3) != *((byte*~) mul_tables_compare::$3 + (byte) mul_tables_compare::i#3)
Inversing boolean not (boolean~) mul_tables_compare::$7 ← *((byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#4) == *((byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#4) from (boolean~) mul_tables_compare::$6 ← *((byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#4) != *((byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#4)
Inversing boolean not (boolean~) mul_tables_compare::$11 ← *((byte*~) mul_tables_compare::$8 + (byte) mul_tables_compare::i#5) == *((byte*~) mul_tables_compare::$9 + (byte) mul_tables_compare::i#5) from (boolean~) mul_tables_compare::$10 ← *((byte*~) mul_tables_compare::$8 + (byte) mul_tables_compare::i#5) != *((byte*~) mul_tables_compare::$9 + (byte) mul_tables_compare::i#5)
Succesful SSA optimization Pass2UnaryNotSimplification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) BGCOL#0 ← ((byte*)) (word) 53281
  to:@1
main: scope:[main]  from @4
  (byte*) BGCOL#13 ← phi( @4/(byte*) BGCOL#14 )
  call init_mul_tables param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  (byte*) BGCOL#11 ← phi( main/(byte*) BGCOL#13 )
  call init_mul_tables_asm param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte*) BGCOL#6 ← phi( main::@1/(byte*) BGCOL#11 )
  call mul_tables_compare param-assignment
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  (byte*) BGCOL#16 ← phi( @begin/(byte*) BGCOL#0 )
  (byte[512]) mul_sqr_lo#0 ← { fill( 512, 0) }
  (byte[512]) mul_sqr_hi#0 ← { fill( 512, 0) }
  to:@2
init_mul_tables: scope:[init_mul_tables]  from main
  (word) init_mul_tables::sqr#0 ← (byte/signed byte/word/signed word) 0
  (byte) init_mul_tables::i#0 ← (byte/signed byte/word/signed word) 1
  to:init_mul_tables::@1
init_mul_tables::@1: scope:[init_mul_tables]  from init_mul_tables init_mul_tables::@2
  (word) init_mul_tables::sqr#9 ← phi( init_mul_tables/(word) init_mul_tables::sqr#0 init_mul_tables::@2/(word) init_mul_tables::sqr#1 )
  (byte) init_mul_tables::i#4 ← phi( init_mul_tables/(byte) init_mul_tables::i#0 init_mul_tables::@2/(byte) init_mul_tables::i#1 )
  (byte~) init_mul_tables::$0 ← (byte) init_mul_tables::i#4 & (byte/signed byte/word/signed word) 1
  (boolean~) init_mul_tables::$2 ← (byte~) init_mul_tables::$0 != (byte/signed byte/word/signed word) 0
  if((boolean~) init_mul_tables::$2) goto init_mul_tables::@2
  to:init_mul_tables::@5
init_mul_tables::@2: scope:[init_mul_tables]  from init_mul_tables::@1 init_mul_tables::@5
  (byte) init_mul_tables::i#5 ← phi( init_mul_tables::@1/(byte) init_mul_tables::i#4 init_mul_tables::@5/(byte) init_mul_tables::i#8 )
  (word) init_mul_tables::sqr#5 ← phi( init_mul_tables::@1/(word) init_mul_tables::sqr#9 init_mul_tables::@5/(word) init_mul_tables::sqr#2 )
  (byte~) init_mul_tables::$3 ← < (word) init_mul_tables::sqr#5
  *((byte[512]) mul_sqr_lo#0 + (byte) init_mul_tables::i#5) ← (byte~) init_mul_tables::$3
  (byte~) init_mul_tables::$4 ← > (word) init_mul_tables::sqr#5
  *((byte[512]) mul_sqr_hi#0 + (byte) init_mul_tables::i#5) ← (byte~) init_mul_tables::$4
  (byte~) init_mul_tables::$5 ← (byte) init_mul_tables::i#5 >> (byte/signed byte/word/signed word) 1
  (word~) init_mul_tables::$6 ← (word) init_mul_tables::sqr#5 + (byte~) init_mul_tables::$5
  (word) init_mul_tables::sqr#1 ← (word~) init_mul_tables::$6
  (byte) init_mul_tables::i#1 ← ++ (byte) init_mul_tables::i#5
  (boolean~) init_mul_tables::$7 ← (byte) init_mul_tables::i#1 != (byte/signed byte/word/signed word) 0
  if((boolean~) init_mul_tables::$7) goto init_mul_tables::@1
  to:init_mul_tables::@6
init_mul_tables::@5: scope:[init_mul_tables]  from init_mul_tables::@1
  (byte) init_mul_tables::i#8 ← phi( init_mul_tables::@1/(byte) init_mul_tables::i#4 )
  (word) init_mul_tables::sqr#6 ← phi( init_mul_tables::@1/(word) init_mul_tables::sqr#9 )
  (word) init_mul_tables::sqr#2 ← ++ (word) init_mul_tables::sqr#6
  to:init_mul_tables::@2
init_mul_tables::@6: scope:[init_mul_tables]  from init_mul_tables::@2
  (word) init_mul_tables::sqr#11 ← phi( init_mul_tables::@2/(word) init_mul_tables::sqr#1 )
  (byte) init_mul_tables::i#2 ← (byte/signed byte/word/signed word) 0
  to:init_mul_tables::@3
init_mul_tables::@3: scope:[init_mul_tables]  from init_mul_tables::@4 init_mul_tables::@6
  (word) init_mul_tables::sqr#10 ← phi( init_mul_tables::@4/(word) init_mul_tables::sqr#3 init_mul_tables::@6/(word) init_mul_tables::sqr#11 )
  (byte) init_mul_tables::i#6 ← phi( init_mul_tables::@4/(byte) init_mul_tables::i#3 init_mul_tables::@6/(byte) init_mul_tables::i#2 )
  (byte~) init_mul_tables::$8 ← (byte) init_mul_tables::i#6 & (byte/signed byte/word/signed word) 1
  (boolean~) init_mul_tables::$10 ← (byte~) init_mul_tables::$8 != (byte/signed byte/word/signed word) 0
  if((boolean~) init_mul_tables::$10) goto init_mul_tables::@4
  to:init_mul_tables::@7
init_mul_tables::@4: scope:[init_mul_tables]  from init_mul_tables::@3 init_mul_tables::@7
  (byte) init_mul_tables::i#7 ← phi( init_mul_tables::@3/(byte) init_mul_tables::i#6 init_mul_tables::@7/(byte) init_mul_tables::i#9 )
  (word) init_mul_tables::sqr#7 ← phi( init_mul_tables::@3/(word) init_mul_tables::sqr#10 init_mul_tables::@7/(word) init_mul_tables::sqr#4 )
  (byte*~) init_mul_tables::$11 ← (byte[512]) mul_sqr_lo#0 + (word/signed word) 256
  (byte~) init_mul_tables::$12 ← < (word) init_mul_tables::sqr#7
  *((byte*~) init_mul_tables::$11 + (byte) init_mul_tables::i#7) ← (byte~) init_mul_tables::$12
  (byte*~) init_mul_tables::$13 ← (byte[512]) mul_sqr_hi#0 + (word/signed word) 256
  (byte~) init_mul_tables::$14 ← > (word) init_mul_tables::sqr#7
  *((byte*~) init_mul_tables::$13 + (byte) init_mul_tables::i#7) ← (byte~) init_mul_tables::$14
  (word~) init_mul_tables::$15 ← (word) init_mul_tables::sqr#7 + (byte/word/signed word) 128
  (byte~) init_mul_tables::$16 ← (byte) init_mul_tables::i#7 >> (byte/signed byte/word/signed word) 1
  (word~) init_mul_tables::$17 ← (word~) init_mul_tables::$15 + (byte~) init_mul_tables::$16
  (word) init_mul_tables::sqr#3 ← (word~) init_mul_tables::$17
  (byte) init_mul_tables::i#3 ← ++ (byte) init_mul_tables::i#7
  (boolean~) init_mul_tables::$18 ← (byte) init_mul_tables::i#3 != (byte/signed byte/word/signed word) 0
  if((boolean~) init_mul_tables::$18) goto init_mul_tables::@3
  to:init_mul_tables::@return
init_mul_tables::@7: scope:[init_mul_tables]  from init_mul_tables::@3
  (byte) init_mul_tables::i#9 ← phi( init_mul_tables::@3/(byte) init_mul_tables::i#6 )
  (word) init_mul_tables::sqr#8 ← phi( init_mul_tables::@3/(word) init_mul_tables::sqr#10 )
  (word) init_mul_tables::sqr#4 ← ++ (word) init_mul_tables::sqr#8
  to:init_mul_tables::@4
init_mul_tables::@return: scope:[init_mul_tables]  from init_mul_tables::@4
  return 
  to:@return
@2: scope:[]  from @1
  (byte*) BGCOL#15 ← phi( @1/(byte*) BGCOL#16 )
  (byte[512]) asm_mul_sqr_lo#0 ← { fill( 512, 0) }
  (byte[512]) asm_mul_sqr_hi#0 ← { fill( 512, 0) }
  to:@4
init_mul_tables_asm: scope:[init_mul_tables_asm]  from main::@1
  asm { ldx#$00txa.byte$c9lb1:tyaadc#$00ml1:staasm_mul_sqr_hi,xtaycmp#$40txarorml9:adc#$00staml9+1inxml0:staasm_mul_sqr_lo,xbnelb1incml0+2incml1+2clcinybnelb1 }
  to:init_mul_tables_asm::@return
init_mul_tables_asm::@return: scope:[init_mul_tables_asm]  from init_mul_tables_asm
  return 
  to:@return
mul_tables_compare: scope:[mul_tables_compare]  from main::@2
  (byte*) BGCOL#1 ← phi( main::@2/(byte*) BGCOL#6 )
  *((byte*) BGCOL#1) ← (byte/signed byte/word/signed word) 5
  (byte) mul_tables_compare::i#0 ← (byte/signed byte/word/signed word) 0
  to:mul_tables_compare::@1
mul_tables_compare::@1: scope:[mul_tables_compare]  from mul_tables_compare mul_tables_compare::@5
  (byte*) BGCOL#7 ← phi( mul_tables_compare/(byte*) BGCOL#1 mul_tables_compare::@5/(byte*) BGCOL#12 )
  (byte) mul_tables_compare::i#2 ← phi( mul_tables_compare/(byte) mul_tables_compare::i#0 mul_tables_compare::@5/(byte) mul_tables_compare::i#1 )
  (boolean~) mul_tables_compare::$1 ← *((byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#2) == *((byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#2)
  if((boolean~) mul_tables_compare::$1) goto mul_tables_compare::@2
  to:mul_tables_compare::@6
mul_tables_compare::@2: scope:[mul_tables_compare]  from mul_tables_compare::@1 mul_tables_compare::@6
  (byte*) BGCOL#8 ← phi( mul_tables_compare::@1/(byte*) BGCOL#7 mul_tables_compare::@6/(byte*) BGCOL#2 )
  (byte) mul_tables_compare::i#3 ← phi( mul_tables_compare::@1/(byte) mul_tables_compare::i#2 mul_tables_compare::@6/(byte) mul_tables_compare::i#7 )
  (byte*~) mul_tables_compare::$2 ← (byte[512]) mul_sqr_hi#0 + (word/signed word) 256
  (byte*~) mul_tables_compare::$3 ← (byte[512]) asm_mul_sqr_hi#0 + (word/signed word) 256
  (boolean~) mul_tables_compare::$5 ← *((byte*~) mul_tables_compare::$2 + (byte) mul_tables_compare::i#3) == *((byte*~) mul_tables_compare::$3 + (byte) mul_tables_compare::i#3)
  if((boolean~) mul_tables_compare::$5) goto mul_tables_compare::@3
  to:mul_tables_compare::@7
mul_tables_compare::@6: scope:[mul_tables_compare]  from mul_tables_compare::@1
  (byte) mul_tables_compare::i#7 ← phi( mul_tables_compare::@1/(byte) mul_tables_compare::i#2 )
  (byte*) BGCOL#2 ← phi( mul_tables_compare::@1/(byte*) BGCOL#7 )
  *((byte*) BGCOL#2) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@2
mul_tables_compare::@3: scope:[mul_tables_compare]  from mul_tables_compare::@2 mul_tables_compare::@7
  (byte*) BGCOL#9 ← phi( mul_tables_compare::@2/(byte*) BGCOL#8 mul_tables_compare::@7/(byte*) BGCOL#3 )
  (byte) mul_tables_compare::i#4 ← phi( mul_tables_compare::@2/(byte) mul_tables_compare::i#3 mul_tables_compare::@7/(byte) mul_tables_compare::i#8 )
  (boolean~) mul_tables_compare::$7 ← *((byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#4) == *((byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#4)
  if((boolean~) mul_tables_compare::$7) goto mul_tables_compare::@4
  to:mul_tables_compare::@8
mul_tables_compare::@7: scope:[mul_tables_compare]  from mul_tables_compare::@2
  (byte) mul_tables_compare::i#8 ← phi( mul_tables_compare::@2/(byte) mul_tables_compare::i#3 )
  (byte*) BGCOL#3 ← phi( mul_tables_compare::@2/(byte*) BGCOL#8 )
  *((byte*) BGCOL#3) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@3
mul_tables_compare::@4: scope:[mul_tables_compare]  from mul_tables_compare::@3 mul_tables_compare::@8
  (byte*) BGCOL#10 ← phi( mul_tables_compare::@3/(byte*) BGCOL#9 mul_tables_compare::@8/(byte*) BGCOL#4 )
  (byte) mul_tables_compare::i#5 ← phi( mul_tables_compare::@3/(byte) mul_tables_compare::i#4 mul_tables_compare::@8/(byte) mul_tables_compare::i#9 )
  (byte*~) mul_tables_compare::$8 ← (byte[512]) mul_sqr_hi#0 + (word/signed word) 256
  (byte*~) mul_tables_compare::$9 ← (byte[512]) asm_mul_sqr_hi#0 + (word/signed word) 256
  (boolean~) mul_tables_compare::$11 ← *((byte*~) mul_tables_compare::$8 + (byte) mul_tables_compare::i#5) == *((byte*~) mul_tables_compare::$9 + (byte) mul_tables_compare::i#5)
  if((boolean~) mul_tables_compare::$11) goto mul_tables_compare::@5
  to:mul_tables_compare::@9
mul_tables_compare::@8: scope:[mul_tables_compare]  from mul_tables_compare::@3
  (byte) mul_tables_compare::i#9 ← phi( mul_tables_compare::@3/(byte) mul_tables_compare::i#4 )
  (byte*) BGCOL#4 ← phi( mul_tables_compare::@3/(byte*) BGCOL#9 )
  *((byte*) BGCOL#4) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@4
mul_tables_compare::@5: scope:[mul_tables_compare]  from mul_tables_compare::@4 mul_tables_compare::@9
  (byte*) BGCOL#12 ← phi( mul_tables_compare::@4/(byte*) BGCOL#10 mul_tables_compare::@9/(byte*) BGCOL#5 )
  (byte) mul_tables_compare::i#6 ← phi( mul_tables_compare::@4/(byte) mul_tables_compare::i#5 mul_tables_compare::@9/(byte) mul_tables_compare::i#10 )
  (byte) mul_tables_compare::i#1 ← ++ (byte) mul_tables_compare::i#6
  (boolean~) mul_tables_compare::$12 ← (byte) mul_tables_compare::i#1 != (byte/signed byte/word/signed word) 0
  if((boolean~) mul_tables_compare::$12) goto mul_tables_compare::@1
  to:mul_tables_compare::@return
mul_tables_compare::@9: scope:[mul_tables_compare]  from mul_tables_compare::@4
  (byte) mul_tables_compare::i#10 ← phi( mul_tables_compare::@4/(byte) mul_tables_compare::i#5 )
  (byte*) BGCOL#5 ← phi( mul_tables_compare::@4/(byte*) BGCOL#10 )
  *((byte*) BGCOL#5) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@5
mul_tables_compare::@return: scope:[mul_tables_compare]  from mul_tables_compare::@5
  return 
  to:@return
@4: scope:[]  from @2
  (byte*) BGCOL#14 ← phi( @2/(byte*) BGCOL#15 )
  call main param-assignment
  to:@end
@end: scope:[]  from @4

Not aliassing across scopes: BGCOL#13 BGCOL#14
Not aliassing across scopes: BGCOL#1 BGCOL#6
Alias (byte*) BGCOL#11 = (byte*) BGCOL#13 (byte*) BGCOL#6 
Alias (byte*) BGCOL#0 = (byte*) BGCOL#16 (byte*) BGCOL#15 (byte*) BGCOL#14 
Alias (word) init_mul_tables::sqr#1 = (word~) init_mul_tables::$6 (word) init_mul_tables::sqr#11 
Alias (word) init_mul_tables::sqr#6 = (word) init_mul_tables::sqr#9 
Alias (byte) init_mul_tables::i#4 = (byte) init_mul_tables::i#8 
Alias (word) init_mul_tables::sqr#3 = (word~) init_mul_tables::$17 
Alias (word) init_mul_tables::sqr#10 = (word) init_mul_tables::sqr#8 
Alias (byte) init_mul_tables::i#6 = (byte) init_mul_tables::i#9 
Alias (byte*) BGCOL#2 = (byte*) BGCOL#7 
Alias (byte) mul_tables_compare::i#2 = (byte) mul_tables_compare::i#7 
Alias (byte*) BGCOL#3 = (byte*) BGCOL#8 
Alias (byte) mul_tables_compare::i#3 = (byte) mul_tables_compare::i#8 
Alias (byte*) BGCOL#4 = (byte*) BGCOL#9 
Alias (byte) mul_tables_compare::i#4 = (byte) mul_tables_compare::i#9 
Alias (byte*) BGCOL#10 = (byte*) BGCOL#5 
Alias (byte) mul_tables_compare::i#10 = (byte) mul_tables_compare::i#5 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) BGCOL#0 ← ((byte*)) (word) 53281
  to:@1
main: scope:[main]  from @4
  (byte*) BGCOL#11 ← phi( @4/(byte*) BGCOL#0 )
  call init_mul_tables param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  call init_mul_tables_asm param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  call mul_tables_compare param-assignment
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  (byte[512]) mul_sqr_lo#0 ← { fill( 512, 0) }
  (byte[512]) mul_sqr_hi#0 ← { fill( 512, 0) }
  to:@2
init_mul_tables: scope:[init_mul_tables]  from main
  (word) init_mul_tables::sqr#0 ← (byte/signed byte/word/signed word) 0
  (byte) init_mul_tables::i#0 ← (byte/signed byte/word/signed word) 1
  to:init_mul_tables::@1
init_mul_tables::@1: scope:[init_mul_tables]  from init_mul_tables init_mul_tables::@2
  (word) init_mul_tables::sqr#6 ← phi( init_mul_tables/(word) init_mul_tables::sqr#0 init_mul_tables::@2/(word) init_mul_tables::sqr#1 )
  (byte) init_mul_tables::i#4 ← phi( init_mul_tables/(byte) init_mul_tables::i#0 init_mul_tables::@2/(byte) init_mul_tables::i#1 )
  (byte~) init_mul_tables::$0 ← (byte) init_mul_tables::i#4 & (byte/signed byte/word/signed word) 1
  (boolean~) init_mul_tables::$2 ← (byte~) init_mul_tables::$0 != (byte/signed byte/word/signed word) 0
  if((boolean~) init_mul_tables::$2) goto init_mul_tables::@2
  to:init_mul_tables::@5
init_mul_tables::@2: scope:[init_mul_tables]  from init_mul_tables::@1 init_mul_tables::@5
  (byte) init_mul_tables::i#5 ← phi( init_mul_tables::@1/(byte) init_mul_tables::i#4 init_mul_tables::@5/(byte) init_mul_tables::i#4 )
  (word) init_mul_tables::sqr#5 ← phi( init_mul_tables::@1/(word) init_mul_tables::sqr#6 init_mul_tables::@5/(word) init_mul_tables::sqr#2 )
  (byte~) init_mul_tables::$3 ← < (word) init_mul_tables::sqr#5
  *((byte[512]) mul_sqr_lo#0 + (byte) init_mul_tables::i#5) ← (byte~) init_mul_tables::$3
  (byte~) init_mul_tables::$4 ← > (word) init_mul_tables::sqr#5
  *((byte[512]) mul_sqr_hi#0 + (byte) init_mul_tables::i#5) ← (byte~) init_mul_tables::$4
  (byte~) init_mul_tables::$5 ← (byte) init_mul_tables::i#5 >> (byte/signed byte/word/signed word) 1
  (word) init_mul_tables::sqr#1 ← (word) init_mul_tables::sqr#5 + (byte~) init_mul_tables::$5
  (byte) init_mul_tables::i#1 ← ++ (byte) init_mul_tables::i#5
  (boolean~) init_mul_tables::$7 ← (byte) init_mul_tables::i#1 != (byte/signed byte/word/signed word) 0
  if((boolean~) init_mul_tables::$7) goto init_mul_tables::@1
  to:init_mul_tables::@6
init_mul_tables::@5: scope:[init_mul_tables]  from init_mul_tables::@1
  (word) init_mul_tables::sqr#2 ← ++ (word) init_mul_tables::sqr#6
  to:init_mul_tables::@2
init_mul_tables::@6: scope:[init_mul_tables]  from init_mul_tables::@2
  (byte) init_mul_tables::i#2 ← (byte/signed byte/word/signed word) 0
  to:init_mul_tables::@3
init_mul_tables::@3: scope:[init_mul_tables]  from init_mul_tables::@4 init_mul_tables::@6
  (word) init_mul_tables::sqr#10 ← phi( init_mul_tables::@4/(word) init_mul_tables::sqr#3 init_mul_tables::@6/(word) init_mul_tables::sqr#1 )
  (byte) init_mul_tables::i#6 ← phi( init_mul_tables::@4/(byte) init_mul_tables::i#3 init_mul_tables::@6/(byte) init_mul_tables::i#2 )
  (byte~) init_mul_tables::$8 ← (byte) init_mul_tables::i#6 & (byte/signed byte/word/signed word) 1
  (boolean~) init_mul_tables::$10 ← (byte~) init_mul_tables::$8 != (byte/signed byte/word/signed word) 0
  if((boolean~) init_mul_tables::$10) goto init_mul_tables::@4
  to:init_mul_tables::@7
init_mul_tables::@4: scope:[init_mul_tables]  from init_mul_tables::@3 init_mul_tables::@7
  (byte) init_mul_tables::i#7 ← phi( init_mul_tables::@3/(byte) init_mul_tables::i#6 init_mul_tables::@7/(byte) init_mul_tables::i#6 )
  (word) init_mul_tables::sqr#7 ← phi( init_mul_tables::@3/(word) init_mul_tables::sqr#10 init_mul_tables::@7/(word) init_mul_tables::sqr#4 )
  (byte*~) init_mul_tables::$11 ← (byte[512]) mul_sqr_lo#0 + (word/signed word) 256
  (byte~) init_mul_tables::$12 ← < (word) init_mul_tables::sqr#7
  *((byte*~) init_mul_tables::$11 + (byte) init_mul_tables::i#7) ← (byte~) init_mul_tables::$12
  (byte*~) init_mul_tables::$13 ← (byte[512]) mul_sqr_hi#0 + (word/signed word) 256
  (byte~) init_mul_tables::$14 ← > (word) init_mul_tables::sqr#7
  *((byte*~) init_mul_tables::$13 + (byte) init_mul_tables::i#7) ← (byte~) init_mul_tables::$14
  (word~) init_mul_tables::$15 ← (word) init_mul_tables::sqr#7 + (byte/word/signed word) 128
  (byte~) init_mul_tables::$16 ← (byte) init_mul_tables::i#7 >> (byte/signed byte/word/signed word) 1
  (word) init_mul_tables::sqr#3 ← (word~) init_mul_tables::$15 + (byte~) init_mul_tables::$16
  (byte) init_mul_tables::i#3 ← ++ (byte) init_mul_tables::i#7
  (boolean~) init_mul_tables::$18 ← (byte) init_mul_tables::i#3 != (byte/signed byte/word/signed word) 0
  if((boolean~) init_mul_tables::$18) goto init_mul_tables::@3
  to:init_mul_tables::@return
init_mul_tables::@7: scope:[init_mul_tables]  from init_mul_tables::@3
  (word) init_mul_tables::sqr#4 ← ++ (word) init_mul_tables::sqr#10
  to:init_mul_tables::@4
init_mul_tables::@return: scope:[init_mul_tables]  from init_mul_tables::@4
  return 
  to:@return
@2: scope:[]  from @1
  (byte[512]) asm_mul_sqr_lo#0 ← { fill( 512, 0) }
  (byte[512]) asm_mul_sqr_hi#0 ← { fill( 512, 0) }
  to:@4
init_mul_tables_asm: scope:[init_mul_tables_asm]  from main::@1
  asm { ldx#$00txa.byte$c9lb1:tyaadc#$00ml1:staasm_mul_sqr_hi,xtaycmp#$40txarorml9:adc#$00staml9+1inxml0:staasm_mul_sqr_lo,xbnelb1incml0+2incml1+2clcinybnelb1 }
  to:init_mul_tables_asm::@return
init_mul_tables_asm::@return: scope:[init_mul_tables_asm]  from init_mul_tables_asm
  return 
  to:@return
mul_tables_compare: scope:[mul_tables_compare]  from main::@2
  (byte*) BGCOL#1 ← phi( main::@2/(byte*) BGCOL#11 )
  *((byte*) BGCOL#1) ← (byte/signed byte/word/signed word) 5
  (byte) mul_tables_compare::i#0 ← (byte/signed byte/word/signed word) 0
  to:mul_tables_compare::@1
mul_tables_compare::@1: scope:[mul_tables_compare]  from mul_tables_compare mul_tables_compare::@5
  (byte*) BGCOL#2 ← phi( mul_tables_compare/(byte*) BGCOL#1 mul_tables_compare::@5/(byte*) BGCOL#12 )
  (byte) mul_tables_compare::i#2 ← phi( mul_tables_compare/(byte) mul_tables_compare::i#0 mul_tables_compare::@5/(byte) mul_tables_compare::i#1 )
  (boolean~) mul_tables_compare::$1 ← *((byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#2) == *((byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#2)
  if((boolean~) mul_tables_compare::$1) goto mul_tables_compare::@2
  to:mul_tables_compare::@6
mul_tables_compare::@2: scope:[mul_tables_compare]  from mul_tables_compare::@1 mul_tables_compare::@6
  (byte*) BGCOL#3 ← phi( mul_tables_compare::@1/(byte*) BGCOL#2 mul_tables_compare::@6/(byte*) BGCOL#2 )
  (byte) mul_tables_compare::i#3 ← phi( mul_tables_compare::@1/(byte) mul_tables_compare::i#2 mul_tables_compare::@6/(byte) mul_tables_compare::i#2 )
  (byte*~) mul_tables_compare::$2 ← (byte[512]) mul_sqr_hi#0 + (word/signed word) 256
  (byte*~) mul_tables_compare::$3 ← (byte[512]) asm_mul_sqr_hi#0 + (word/signed word) 256
  (boolean~) mul_tables_compare::$5 ← *((byte*~) mul_tables_compare::$2 + (byte) mul_tables_compare::i#3) == *((byte*~) mul_tables_compare::$3 + (byte) mul_tables_compare::i#3)
  if((boolean~) mul_tables_compare::$5) goto mul_tables_compare::@3
  to:mul_tables_compare::@7
mul_tables_compare::@6: scope:[mul_tables_compare]  from mul_tables_compare::@1
  *((byte*) BGCOL#2) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@2
mul_tables_compare::@3: scope:[mul_tables_compare]  from mul_tables_compare::@2 mul_tables_compare::@7
  (byte*) BGCOL#4 ← phi( mul_tables_compare::@2/(byte*) BGCOL#3 mul_tables_compare::@7/(byte*) BGCOL#3 )
  (byte) mul_tables_compare::i#4 ← phi( mul_tables_compare::@2/(byte) mul_tables_compare::i#3 mul_tables_compare::@7/(byte) mul_tables_compare::i#3 )
  (boolean~) mul_tables_compare::$7 ← *((byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#4) == *((byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#4)
  if((boolean~) mul_tables_compare::$7) goto mul_tables_compare::@4
  to:mul_tables_compare::@8
mul_tables_compare::@7: scope:[mul_tables_compare]  from mul_tables_compare::@2
  *((byte*) BGCOL#3) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@3
mul_tables_compare::@4: scope:[mul_tables_compare]  from mul_tables_compare::@3 mul_tables_compare::@8
  (byte*) BGCOL#10 ← phi( mul_tables_compare::@3/(byte*) BGCOL#4 mul_tables_compare::@8/(byte*) BGCOL#4 )
  (byte) mul_tables_compare::i#10 ← phi( mul_tables_compare::@3/(byte) mul_tables_compare::i#4 mul_tables_compare::@8/(byte) mul_tables_compare::i#4 )
  (byte*~) mul_tables_compare::$8 ← (byte[512]) mul_sqr_hi#0 + (word/signed word) 256
  (byte*~) mul_tables_compare::$9 ← (byte[512]) asm_mul_sqr_hi#0 + (word/signed word) 256
  (boolean~) mul_tables_compare::$11 ← *((byte*~) mul_tables_compare::$8 + (byte) mul_tables_compare::i#10) == *((byte*~) mul_tables_compare::$9 + (byte) mul_tables_compare::i#10)
  if((boolean~) mul_tables_compare::$11) goto mul_tables_compare::@5
  to:mul_tables_compare::@9
mul_tables_compare::@8: scope:[mul_tables_compare]  from mul_tables_compare::@3
  *((byte*) BGCOL#4) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@4
mul_tables_compare::@5: scope:[mul_tables_compare]  from mul_tables_compare::@4 mul_tables_compare::@9
  (byte*) BGCOL#12 ← phi( mul_tables_compare::@4/(byte*) BGCOL#10 mul_tables_compare::@9/(byte*) BGCOL#10 )
  (byte) mul_tables_compare::i#6 ← phi( mul_tables_compare::@4/(byte) mul_tables_compare::i#10 mul_tables_compare::@9/(byte) mul_tables_compare::i#10 )
  (byte) mul_tables_compare::i#1 ← ++ (byte) mul_tables_compare::i#6
  (boolean~) mul_tables_compare::$12 ← (byte) mul_tables_compare::i#1 != (byte/signed byte/word/signed word) 0
  if((boolean~) mul_tables_compare::$12) goto mul_tables_compare::@1
  to:mul_tables_compare::@return
mul_tables_compare::@9: scope:[mul_tables_compare]  from mul_tables_compare::@4
  *((byte*) BGCOL#10) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@5
mul_tables_compare::@return: scope:[mul_tables_compare]  from mul_tables_compare::@5
  return 
  to:@return
@4: scope:[]  from @2
  call main param-assignment
  to:@end
@end: scope:[]  from @4

Not aliassing across scopes: BGCOL#11 BGCOL#0
Not aliassing across scopes: BGCOL#1 BGCOL#11
Alias (byte) init_mul_tables::i#4 = (byte) init_mul_tables::i#5 
Alias (byte) init_mul_tables::i#6 = (byte) init_mul_tables::i#7 
Alias (byte) mul_tables_compare::i#10 = (byte) mul_tables_compare::i#3 (byte) mul_tables_compare::i#2 (byte) mul_tables_compare::i#4 (byte) mul_tables_compare::i#6 
Alias (byte*) BGCOL#10 = (byte*) BGCOL#3 (byte*) BGCOL#2 (byte*) BGCOL#4 (byte*) BGCOL#12 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) BGCOL#0 ← ((byte*)) (word) 53281
  to:@1
main: scope:[main]  from @4
  (byte*) BGCOL#11 ← phi( @4/(byte*) BGCOL#0 )
  call init_mul_tables param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  call init_mul_tables_asm param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  call mul_tables_compare param-assignment
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  (byte[512]) mul_sqr_lo#0 ← { fill( 512, 0) }
  (byte[512]) mul_sqr_hi#0 ← { fill( 512, 0) }
  to:@2
init_mul_tables: scope:[init_mul_tables]  from main
  (word) init_mul_tables::sqr#0 ← (byte/signed byte/word/signed word) 0
  (byte) init_mul_tables::i#0 ← (byte/signed byte/word/signed word) 1
  to:init_mul_tables::@1
init_mul_tables::@1: scope:[init_mul_tables]  from init_mul_tables init_mul_tables::@2
  (word) init_mul_tables::sqr#6 ← phi( init_mul_tables/(word) init_mul_tables::sqr#0 init_mul_tables::@2/(word) init_mul_tables::sqr#1 )
  (byte) init_mul_tables::i#4 ← phi( init_mul_tables/(byte) init_mul_tables::i#0 init_mul_tables::@2/(byte) init_mul_tables::i#1 )
  (byte~) init_mul_tables::$0 ← (byte) init_mul_tables::i#4 & (byte/signed byte/word/signed word) 1
  (boolean~) init_mul_tables::$2 ← (byte~) init_mul_tables::$0 != (byte/signed byte/word/signed word) 0
  if((boolean~) init_mul_tables::$2) goto init_mul_tables::@2
  to:init_mul_tables::@5
init_mul_tables::@2: scope:[init_mul_tables]  from init_mul_tables::@1 init_mul_tables::@5
  (word) init_mul_tables::sqr#5 ← phi( init_mul_tables::@1/(word) init_mul_tables::sqr#6 init_mul_tables::@5/(word) init_mul_tables::sqr#2 )
  (byte~) init_mul_tables::$3 ← < (word) init_mul_tables::sqr#5
  *((byte[512]) mul_sqr_lo#0 + (byte) init_mul_tables::i#4) ← (byte~) init_mul_tables::$3
  (byte~) init_mul_tables::$4 ← > (word) init_mul_tables::sqr#5
  *((byte[512]) mul_sqr_hi#0 + (byte) init_mul_tables::i#4) ← (byte~) init_mul_tables::$4
  (byte~) init_mul_tables::$5 ← (byte) init_mul_tables::i#4 >> (byte/signed byte/word/signed word) 1
  (word) init_mul_tables::sqr#1 ← (word) init_mul_tables::sqr#5 + (byte~) init_mul_tables::$5
  (byte) init_mul_tables::i#1 ← ++ (byte) init_mul_tables::i#4
  (boolean~) init_mul_tables::$7 ← (byte) init_mul_tables::i#1 != (byte/signed byte/word/signed word) 0
  if((boolean~) init_mul_tables::$7) goto init_mul_tables::@1
  to:init_mul_tables::@6
init_mul_tables::@5: scope:[init_mul_tables]  from init_mul_tables::@1
  (word) init_mul_tables::sqr#2 ← ++ (word) init_mul_tables::sqr#6
  to:init_mul_tables::@2
init_mul_tables::@6: scope:[init_mul_tables]  from init_mul_tables::@2
  (byte) init_mul_tables::i#2 ← (byte/signed byte/word/signed word) 0
  to:init_mul_tables::@3
init_mul_tables::@3: scope:[init_mul_tables]  from init_mul_tables::@4 init_mul_tables::@6
  (word) init_mul_tables::sqr#10 ← phi( init_mul_tables::@4/(word) init_mul_tables::sqr#3 init_mul_tables::@6/(word) init_mul_tables::sqr#1 )
  (byte) init_mul_tables::i#6 ← phi( init_mul_tables::@4/(byte) init_mul_tables::i#3 init_mul_tables::@6/(byte) init_mul_tables::i#2 )
  (byte~) init_mul_tables::$8 ← (byte) init_mul_tables::i#6 & (byte/signed byte/word/signed word) 1
  (boolean~) init_mul_tables::$10 ← (byte~) init_mul_tables::$8 != (byte/signed byte/word/signed word) 0
  if((boolean~) init_mul_tables::$10) goto init_mul_tables::@4
  to:init_mul_tables::@7
init_mul_tables::@4: scope:[init_mul_tables]  from init_mul_tables::@3 init_mul_tables::@7
  (word) init_mul_tables::sqr#7 ← phi( init_mul_tables::@3/(word) init_mul_tables::sqr#10 init_mul_tables::@7/(word) init_mul_tables::sqr#4 )
  (byte*~) init_mul_tables::$11 ← (byte[512]) mul_sqr_lo#0 + (word/signed word) 256
  (byte~) init_mul_tables::$12 ← < (word) init_mul_tables::sqr#7
  *((byte*~) init_mul_tables::$11 + (byte) init_mul_tables::i#6) ← (byte~) init_mul_tables::$12
  (byte*~) init_mul_tables::$13 ← (byte[512]) mul_sqr_hi#0 + (word/signed word) 256
  (byte~) init_mul_tables::$14 ← > (word) init_mul_tables::sqr#7
  *((byte*~) init_mul_tables::$13 + (byte) init_mul_tables::i#6) ← (byte~) init_mul_tables::$14
  (word~) init_mul_tables::$15 ← (word) init_mul_tables::sqr#7 + (byte/word/signed word) 128
  (byte~) init_mul_tables::$16 ← (byte) init_mul_tables::i#6 >> (byte/signed byte/word/signed word) 1
  (word) init_mul_tables::sqr#3 ← (word~) init_mul_tables::$15 + (byte~) init_mul_tables::$16
  (byte) init_mul_tables::i#3 ← ++ (byte) init_mul_tables::i#6
  (boolean~) init_mul_tables::$18 ← (byte) init_mul_tables::i#3 != (byte/signed byte/word/signed word) 0
  if((boolean~) init_mul_tables::$18) goto init_mul_tables::@3
  to:init_mul_tables::@return
init_mul_tables::@7: scope:[init_mul_tables]  from init_mul_tables::@3
  (word) init_mul_tables::sqr#4 ← ++ (word) init_mul_tables::sqr#10
  to:init_mul_tables::@4
init_mul_tables::@return: scope:[init_mul_tables]  from init_mul_tables::@4
  return 
  to:@return
@2: scope:[]  from @1
  (byte[512]) asm_mul_sqr_lo#0 ← { fill( 512, 0) }
  (byte[512]) asm_mul_sqr_hi#0 ← { fill( 512, 0) }
  to:@4
init_mul_tables_asm: scope:[init_mul_tables_asm]  from main::@1
  asm { ldx#$00txa.byte$c9lb1:tyaadc#$00ml1:staasm_mul_sqr_hi,xtaycmp#$40txarorml9:adc#$00staml9+1inxml0:staasm_mul_sqr_lo,xbnelb1incml0+2incml1+2clcinybnelb1 }
  to:init_mul_tables_asm::@return
init_mul_tables_asm::@return: scope:[init_mul_tables_asm]  from init_mul_tables_asm
  return 
  to:@return
mul_tables_compare: scope:[mul_tables_compare]  from main::@2
  (byte*) BGCOL#1 ← phi( main::@2/(byte*) BGCOL#11 )
  *((byte*) BGCOL#1) ← (byte/signed byte/word/signed word) 5
  (byte) mul_tables_compare::i#0 ← (byte/signed byte/word/signed word) 0
  to:mul_tables_compare::@1
mul_tables_compare::@1: scope:[mul_tables_compare]  from mul_tables_compare mul_tables_compare::@5
  (byte*) BGCOL#10 ← phi( mul_tables_compare/(byte*) BGCOL#1 mul_tables_compare::@5/(byte*) BGCOL#10 )
  (byte) mul_tables_compare::i#10 ← phi( mul_tables_compare/(byte) mul_tables_compare::i#0 mul_tables_compare::@5/(byte) mul_tables_compare::i#1 )
  (boolean~) mul_tables_compare::$1 ← *((byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10) == *((byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)
  if((boolean~) mul_tables_compare::$1) goto mul_tables_compare::@2
  to:mul_tables_compare::@6
mul_tables_compare::@2: scope:[mul_tables_compare]  from mul_tables_compare::@1 mul_tables_compare::@6
  (byte*~) mul_tables_compare::$2 ← (byte[512]) mul_sqr_hi#0 + (word/signed word) 256
  (byte*~) mul_tables_compare::$3 ← (byte[512]) asm_mul_sqr_hi#0 + (word/signed word) 256
  (boolean~) mul_tables_compare::$5 ← *((byte*~) mul_tables_compare::$2 + (byte) mul_tables_compare::i#10) == *((byte*~) mul_tables_compare::$3 + (byte) mul_tables_compare::i#10)
  if((boolean~) mul_tables_compare::$5) goto mul_tables_compare::@3
  to:mul_tables_compare::@7
mul_tables_compare::@6: scope:[mul_tables_compare]  from mul_tables_compare::@1
  *((byte*) BGCOL#10) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@2
mul_tables_compare::@3: scope:[mul_tables_compare]  from mul_tables_compare::@2 mul_tables_compare::@7
  (boolean~) mul_tables_compare::$7 ← *((byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10) == *((byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)
  if((boolean~) mul_tables_compare::$7) goto mul_tables_compare::@4
  to:mul_tables_compare::@8
mul_tables_compare::@7: scope:[mul_tables_compare]  from mul_tables_compare::@2
  *((byte*) BGCOL#10) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@3
mul_tables_compare::@4: scope:[mul_tables_compare]  from mul_tables_compare::@3 mul_tables_compare::@8
  (byte*~) mul_tables_compare::$8 ← (byte[512]) mul_sqr_hi#0 + (word/signed word) 256
  (byte*~) mul_tables_compare::$9 ← (byte[512]) asm_mul_sqr_hi#0 + (word/signed word) 256
  (boolean~) mul_tables_compare::$11 ← *((byte*~) mul_tables_compare::$8 + (byte) mul_tables_compare::i#10) == *((byte*~) mul_tables_compare::$9 + (byte) mul_tables_compare::i#10)
  if((boolean~) mul_tables_compare::$11) goto mul_tables_compare::@5
  to:mul_tables_compare::@9
mul_tables_compare::@8: scope:[mul_tables_compare]  from mul_tables_compare::@3
  *((byte*) BGCOL#10) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@4
mul_tables_compare::@5: scope:[mul_tables_compare]  from mul_tables_compare::@4 mul_tables_compare::@9
  (byte) mul_tables_compare::i#1 ← ++ (byte) mul_tables_compare::i#10
  (boolean~) mul_tables_compare::$12 ← (byte) mul_tables_compare::i#1 != (byte/signed byte/word/signed word) 0
  if((boolean~) mul_tables_compare::$12) goto mul_tables_compare::@1
  to:mul_tables_compare::@return
mul_tables_compare::@9: scope:[mul_tables_compare]  from mul_tables_compare::@4
  *((byte*) BGCOL#10) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@5
mul_tables_compare::@return: scope:[mul_tables_compare]  from mul_tables_compare::@5
  return 
  to:@return
@4: scope:[]  from @2
  call main param-assignment
  to:@end
@end: scope:[]  from @4

Not aliassing across scopes: BGCOL#11 BGCOL#0
Not aliassing across scopes: BGCOL#1 BGCOL#11
Self Phi Eliminated (byte*) BGCOL#10
Succesful SSA optimization Pass2SelfPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) BGCOL#0 ← ((byte*)) (word) 53281
  to:@1
main: scope:[main]  from @4
  (byte*) BGCOL#11 ← phi( @4/(byte*) BGCOL#0 )
  call init_mul_tables param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  call init_mul_tables_asm param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  call mul_tables_compare param-assignment
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  (byte[512]) mul_sqr_lo#0 ← { fill( 512, 0) }
  (byte[512]) mul_sqr_hi#0 ← { fill( 512, 0) }
  to:@2
init_mul_tables: scope:[init_mul_tables]  from main
  (word) init_mul_tables::sqr#0 ← (byte/signed byte/word/signed word) 0
  (byte) init_mul_tables::i#0 ← (byte/signed byte/word/signed word) 1
  to:init_mul_tables::@1
init_mul_tables::@1: scope:[init_mul_tables]  from init_mul_tables init_mul_tables::@2
  (word) init_mul_tables::sqr#6 ← phi( init_mul_tables/(word) init_mul_tables::sqr#0 init_mul_tables::@2/(word) init_mul_tables::sqr#1 )
  (byte) init_mul_tables::i#4 ← phi( init_mul_tables/(byte) init_mul_tables::i#0 init_mul_tables::@2/(byte) init_mul_tables::i#1 )
  (byte~) init_mul_tables::$0 ← (byte) init_mul_tables::i#4 & (byte/signed byte/word/signed word) 1
  (boolean~) init_mul_tables::$2 ← (byte~) init_mul_tables::$0 != (byte/signed byte/word/signed word) 0
  if((boolean~) init_mul_tables::$2) goto init_mul_tables::@2
  to:init_mul_tables::@5
init_mul_tables::@2: scope:[init_mul_tables]  from init_mul_tables::@1 init_mul_tables::@5
  (word) init_mul_tables::sqr#5 ← phi( init_mul_tables::@1/(word) init_mul_tables::sqr#6 init_mul_tables::@5/(word) init_mul_tables::sqr#2 )
  (byte~) init_mul_tables::$3 ← < (word) init_mul_tables::sqr#5
  *((byte[512]) mul_sqr_lo#0 + (byte) init_mul_tables::i#4) ← (byte~) init_mul_tables::$3
  (byte~) init_mul_tables::$4 ← > (word) init_mul_tables::sqr#5
  *((byte[512]) mul_sqr_hi#0 + (byte) init_mul_tables::i#4) ← (byte~) init_mul_tables::$4
  (byte~) init_mul_tables::$5 ← (byte) init_mul_tables::i#4 >> (byte/signed byte/word/signed word) 1
  (word) init_mul_tables::sqr#1 ← (word) init_mul_tables::sqr#5 + (byte~) init_mul_tables::$5
  (byte) init_mul_tables::i#1 ← ++ (byte) init_mul_tables::i#4
  (boolean~) init_mul_tables::$7 ← (byte) init_mul_tables::i#1 != (byte/signed byte/word/signed word) 0
  if((boolean~) init_mul_tables::$7) goto init_mul_tables::@1
  to:init_mul_tables::@6
init_mul_tables::@5: scope:[init_mul_tables]  from init_mul_tables::@1
  (word) init_mul_tables::sqr#2 ← ++ (word) init_mul_tables::sqr#6
  to:init_mul_tables::@2
init_mul_tables::@6: scope:[init_mul_tables]  from init_mul_tables::@2
  (byte) init_mul_tables::i#2 ← (byte/signed byte/word/signed word) 0
  to:init_mul_tables::@3
init_mul_tables::@3: scope:[init_mul_tables]  from init_mul_tables::@4 init_mul_tables::@6
  (word) init_mul_tables::sqr#10 ← phi( init_mul_tables::@4/(word) init_mul_tables::sqr#3 init_mul_tables::@6/(word) init_mul_tables::sqr#1 )
  (byte) init_mul_tables::i#6 ← phi( init_mul_tables::@4/(byte) init_mul_tables::i#3 init_mul_tables::@6/(byte) init_mul_tables::i#2 )
  (byte~) init_mul_tables::$8 ← (byte) init_mul_tables::i#6 & (byte/signed byte/word/signed word) 1
  (boolean~) init_mul_tables::$10 ← (byte~) init_mul_tables::$8 != (byte/signed byte/word/signed word) 0
  if((boolean~) init_mul_tables::$10) goto init_mul_tables::@4
  to:init_mul_tables::@7
init_mul_tables::@4: scope:[init_mul_tables]  from init_mul_tables::@3 init_mul_tables::@7
  (word) init_mul_tables::sqr#7 ← phi( init_mul_tables::@3/(word) init_mul_tables::sqr#10 init_mul_tables::@7/(word) init_mul_tables::sqr#4 )
  (byte*~) init_mul_tables::$11 ← (byte[512]) mul_sqr_lo#0 + (word/signed word) 256
  (byte~) init_mul_tables::$12 ← < (word) init_mul_tables::sqr#7
  *((byte*~) init_mul_tables::$11 + (byte) init_mul_tables::i#6) ← (byte~) init_mul_tables::$12
  (byte*~) init_mul_tables::$13 ← (byte[512]) mul_sqr_hi#0 + (word/signed word) 256
  (byte~) init_mul_tables::$14 ← > (word) init_mul_tables::sqr#7
  *((byte*~) init_mul_tables::$13 + (byte) init_mul_tables::i#6) ← (byte~) init_mul_tables::$14
  (word~) init_mul_tables::$15 ← (word) init_mul_tables::sqr#7 + (byte/word/signed word) 128
  (byte~) init_mul_tables::$16 ← (byte) init_mul_tables::i#6 >> (byte/signed byte/word/signed word) 1
  (word) init_mul_tables::sqr#3 ← (word~) init_mul_tables::$15 + (byte~) init_mul_tables::$16
  (byte) init_mul_tables::i#3 ← ++ (byte) init_mul_tables::i#6
  (boolean~) init_mul_tables::$18 ← (byte) init_mul_tables::i#3 != (byte/signed byte/word/signed word) 0
  if((boolean~) init_mul_tables::$18) goto init_mul_tables::@3
  to:init_mul_tables::@return
init_mul_tables::@7: scope:[init_mul_tables]  from init_mul_tables::@3
  (word) init_mul_tables::sqr#4 ← ++ (word) init_mul_tables::sqr#10
  to:init_mul_tables::@4
init_mul_tables::@return: scope:[init_mul_tables]  from init_mul_tables::@4
  return 
  to:@return
@2: scope:[]  from @1
  (byte[512]) asm_mul_sqr_lo#0 ← { fill( 512, 0) }
  (byte[512]) asm_mul_sqr_hi#0 ← { fill( 512, 0) }
  to:@4
init_mul_tables_asm: scope:[init_mul_tables_asm]  from main::@1
  asm { ldx#$00txa.byte$c9lb1:tyaadc#$00ml1:staasm_mul_sqr_hi,xtaycmp#$40txarorml9:adc#$00staml9+1inxml0:staasm_mul_sqr_lo,xbnelb1incml0+2incml1+2clcinybnelb1 }
  to:init_mul_tables_asm::@return
init_mul_tables_asm::@return: scope:[init_mul_tables_asm]  from init_mul_tables_asm
  return 
  to:@return
mul_tables_compare: scope:[mul_tables_compare]  from main::@2
  (byte*) BGCOL#1 ← phi( main::@2/(byte*) BGCOL#11 )
  *((byte*) BGCOL#1) ← (byte/signed byte/word/signed word) 5
  (byte) mul_tables_compare::i#0 ← (byte/signed byte/word/signed word) 0
  to:mul_tables_compare::@1
mul_tables_compare::@1: scope:[mul_tables_compare]  from mul_tables_compare mul_tables_compare::@5
  (byte*) BGCOL#10 ← phi( mul_tables_compare/(byte*) BGCOL#1 )
  (byte) mul_tables_compare::i#10 ← phi( mul_tables_compare/(byte) mul_tables_compare::i#0 mul_tables_compare::@5/(byte) mul_tables_compare::i#1 )
  (boolean~) mul_tables_compare::$1 ← *((byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10) == *((byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)
  if((boolean~) mul_tables_compare::$1) goto mul_tables_compare::@2
  to:mul_tables_compare::@6
mul_tables_compare::@2: scope:[mul_tables_compare]  from mul_tables_compare::@1 mul_tables_compare::@6
  (byte*~) mul_tables_compare::$2 ← (byte[512]) mul_sqr_hi#0 + (word/signed word) 256
  (byte*~) mul_tables_compare::$3 ← (byte[512]) asm_mul_sqr_hi#0 + (word/signed word) 256
  (boolean~) mul_tables_compare::$5 ← *((byte*~) mul_tables_compare::$2 + (byte) mul_tables_compare::i#10) == *((byte*~) mul_tables_compare::$3 + (byte) mul_tables_compare::i#10)
  if((boolean~) mul_tables_compare::$5) goto mul_tables_compare::@3
  to:mul_tables_compare::@7
mul_tables_compare::@6: scope:[mul_tables_compare]  from mul_tables_compare::@1
  *((byte*) BGCOL#10) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@2
mul_tables_compare::@3: scope:[mul_tables_compare]  from mul_tables_compare::@2 mul_tables_compare::@7
  (boolean~) mul_tables_compare::$7 ← *((byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10) == *((byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)
  if((boolean~) mul_tables_compare::$7) goto mul_tables_compare::@4
  to:mul_tables_compare::@8
mul_tables_compare::@7: scope:[mul_tables_compare]  from mul_tables_compare::@2
  *((byte*) BGCOL#10) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@3
mul_tables_compare::@4: scope:[mul_tables_compare]  from mul_tables_compare::@3 mul_tables_compare::@8
  (byte*~) mul_tables_compare::$8 ← (byte[512]) mul_sqr_hi#0 + (word/signed word) 256
  (byte*~) mul_tables_compare::$9 ← (byte[512]) asm_mul_sqr_hi#0 + (word/signed word) 256
  (boolean~) mul_tables_compare::$11 ← *((byte*~) mul_tables_compare::$8 + (byte) mul_tables_compare::i#10) == *((byte*~) mul_tables_compare::$9 + (byte) mul_tables_compare::i#10)
  if((boolean~) mul_tables_compare::$11) goto mul_tables_compare::@5
  to:mul_tables_compare::@9
mul_tables_compare::@8: scope:[mul_tables_compare]  from mul_tables_compare::@3
  *((byte*) BGCOL#10) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@4
mul_tables_compare::@5: scope:[mul_tables_compare]  from mul_tables_compare::@4 mul_tables_compare::@9
  (byte) mul_tables_compare::i#1 ← ++ (byte) mul_tables_compare::i#10
  (boolean~) mul_tables_compare::$12 ← (byte) mul_tables_compare::i#1 != (byte/signed byte/word/signed word) 0
  if((boolean~) mul_tables_compare::$12) goto mul_tables_compare::@1
  to:mul_tables_compare::@return
mul_tables_compare::@9: scope:[mul_tables_compare]  from mul_tables_compare::@4
  *((byte*) BGCOL#10) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@5
mul_tables_compare::@return: scope:[mul_tables_compare]  from mul_tables_compare::@5
  return 
  to:@return
@4: scope:[]  from @2
  call main param-assignment
  to:@end
@end: scope:[]  from @4

Redundant Phi (byte*) BGCOL#11 (byte*) BGCOL#0
Redundant Phi (byte*) BGCOL#1 (byte*) BGCOL#11
Redundant Phi (byte*) BGCOL#10 (byte*) BGCOL#1
Succesful SSA optimization Pass2RedundantPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) BGCOL#0 ← ((byte*)) (word) 53281
  to:@1
main: scope:[main]  from @4
  call init_mul_tables param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  call init_mul_tables_asm param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  call mul_tables_compare param-assignment
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  (byte[512]) mul_sqr_lo#0 ← { fill( 512, 0) }
  (byte[512]) mul_sqr_hi#0 ← { fill( 512, 0) }
  to:@2
init_mul_tables: scope:[init_mul_tables]  from main
  (word) init_mul_tables::sqr#0 ← (byte/signed byte/word/signed word) 0
  (byte) init_mul_tables::i#0 ← (byte/signed byte/word/signed word) 1
  to:init_mul_tables::@1
init_mul_tables::@1: scope:[init_mul_tables]  from init_mul_tables init_mul_tables::@2
  (word) init_mul_tables::sqr#6 ← phi( init_mul_tables/(word) init_mul_tables::sqr#0 init_mul_tables::@2/(word) init_mul_tables::sqr#1 )
  (byte) init_mul_tables::i#4 ← phi( init_mul_tables/(byte) init_mul_tables::i#0 init_mul_tables::@2/(byte) init_mul_tables::i#1 )
  (byte~) init_mul_tables::$0 ← (byte) init_mul_tables::i#4 & (byte/signed byte/word/signed word) 1
  (boolean~) init_mul_tables::$2 ← (byte~) init_mul_tables::$0 != (byte/signed byte/word/signed word) 0
  if((boolean~) init_mul_tables::$2) goto init_mul_tables::@2
  to:init_mul_tables::@5
init_mul_tables::@2: scope:[init_mul_tables]  from init_mul_tables::@1 init_mul_tables::@5
  (word) init_mul_tables::sqr#5 ← phi( init_mul_tables::@1/(word) init_mul_tables::sqr#6 init_mul_tables::@5/(word) init_mul_tables::sqr#2 )
  (byte~) init_mul_tables::$3 ← < (word) init_mul_tables::sqr#5
  *((byte[512]) mul_sqr_lo#0 + (byte) init_mul_tables::i#4) ← (byte~) init_mul_tables::$3
  (byte~) init_mul_tables::$4 ← > (word) init_mul_tables::sqr#5
  *((byte[512]) mul_sqr_hi#0 + (byte) init_mul_tables::i#4) ← (byte~) init_mul_tables::$4
  (byte~) init_mul_tables::$5 ← (byte) init_mul_tables::i#4 >> (byte/signed byte/word/signed word) 1
  (word) init_mul_tables::sqr#1 ← (word) init_mul_tables::sqr#5 + (byte~) init_mul_tables::$5
  (byte) init_mul_tables::i#1 ← ++ (byte) init_mul_tables::i#4
  (boolean~) init_mul_tables::$7 ← (byte) init_mul_tables::i#1 != (byte/signed byte/word/signed word) 0
  if((boolean~) init_mul_tables::$7) goto init_mul_tables::@1
  to:init_mul_tables::@6
init_mul_tables::@5: scope:[init_mul_tables]  from init_mul_tables::@1
  (word) init_mul_tables::sqr#2 ← ++ (word) init_mul_tables::sqr#6
  to:init_mul_tables::@2
init_mul_tables::@6: scope:[init_mul_tables]  from init_mul_tables::@2
  (byte) init_mul_tables::i#2 ← (byte/signed byte/word/signed word) 0
  to:init_mul_tables::@3
init_mul_tables::@3: scope:[init_mul_tables]  from init_mul_tables::@4 init_mul_tables::@6
  (word) init_mul_tables::sqr#10 ← phi( init_mul_tables::@4/(word) init_mul_tables::sqr#3 init_mul_tables::@6/(word) init_mul_tables::sqr#1 )
  (byte) init_mul_tables::i#6 ← phi( init_mul_tables::@4/(byte) init_mul_tables::i#3 init_mul_tables::@6/(byte) init_mul_tables::i#2 )
  (byte~) init_mul_tables::$8 ← (byte) init_mul_tables::i#6 & (byte/signed byte/word/signed word) 1
  (boolean~) init_mul_tables::$10 ← (byte~) init_mul_tables::$8 != (byte/signed byte/word/signed word) 0
  if((boolean~) init_mul_tables::$10) goto init_mul_tables::@4
  to:init_mul_tables::@7
init_mul_tables::@4: scope:[init_mul_tables]  from init_mul_tables::@3 init_mul_tables::@7
  (word) init_mul_tables::sqr#7 ← phi( init_mul_tables::@3/(word) init_mul_tables::sqr#10 init_mul_tables::@7/(word) init_mul_tables::sqr#4 )
  (byte*~) init_mul_tables::$11 ← (byte[512]) mul_sqr_lo#0 + (word/signed word) 256
  (byte~) init_mul_tables::$12 ← < (word) init_mul_tables::sqr#7
  *((byte*~) init_mul_tables::$11 + (byte) init_mul_tables::i#6) ← (byte~) init_mul_tables::$12
  (byte*~) init_mul_tables::$13 ← (byte[512]) mul_sqr_hi#0 + (word/signed word) 256
  (byte~) init_mul_tables::$14 ← > (word) init_mul_tables::sqr#7
  *((byte*~) init_mul_tables::$13 + (byte) init_mul_tables::i#6) ← (byte~) init_mul_tables::$14
  (word~) init_mul_tables::$15 ← (word) init_mul_tables::sqr#7 + (byte/word/signed word) 128
  (byte~) init_mul_tables::$16 ← (byte) init_mul_tables::i#6 >> (byte/signed byte/word/signed word) 1
  (word) init_mul_tables::sqr#3 ← (word~) init_mul_tables::$15 + (byte~) init_mul_tables::$16
  (byte) init_mul_tables::i#3 ← ++ (byte) init_mul_tables::i#6
  (boolean~) init_mul_tables::$18 ← (byte) init_mul_tables::i#3 != (byte/signed byte/word/signed word) 0
  if((boolean~) init_mul_tables::$18) goto init_mul_tables::@3
  to:init_mul_tables::@return
init_mul_tables::@7: scope:[init_mul_tables]  from init_mul_tables::@3
  (word) init_mul_tables::sqr#4 ← ++ (word) init_mul_tables::sqr#10
  to:init_mul_tables::@4
init_mul_tables::@return: scope:[init_mul_tables]  from init_mul_tables::@4
  return 
  to:@return
@2: scope:[]  from @1
  (byte[512]) asm_mul_sqr_lo#0 ← { fill( 512, 0) }
  (byte[512]) asm_mul_sqr_hi#0 ← { fill( 512, 0) }
  to:@4
init_mul_tables_asm: scope:[init_mul_tables_asm]  from main::@1
  asm { ldx#$00txa.byte$c9lb1:tyaadc#$00ml1:staasm_mul_sqr_hi,xtaycmp#$40txarorml9:adc#$00staml9+1inxml0:staasm_mul_sqr_lo,xbnelb1incml0+2incml1+2clcinybnelb1 }
  to:init_mul_tables_asm::@return
init_mul_tables_asm::@return: scope:[init_mul_tables_asm]  from init_mul_tables_asm
  return 
  to:@return
mul_tables_compare: scope:[mul_tables_compare]  from main::@2
  *((byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 5
  (byte) mul_tables_compare::i#0 ← (byte/signed byte/word/signed word) 0
  to:mul_tables_compare::@1
mul_tables_compare::@1: scope:[mul_tables_compare]  from mul_tables_compare mul_tables_compare::@5
  (byte) mul_tables_compare::i#10 ← phi( mul_tables_compare/(byte) mul_tables_compare::i#0 mul_tables_compare::@5/(byte) mul_tables_compare::i#1 )
  (boolean~) mul_tables_compare::$1 ← *((byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10) == *((byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)
  if((boolean~) mul_tables_compare::$1) goto mul_tables_compare::@2
  to:mul_tables_compare::@6
mul_tables_compare::@2: scope:[mul_tables_compare]  from mul_tables_compare::@1 mul_tables_compare::@6
  (byte*~) mul_tables_compare::$2 ← (byte[512]) mul_sqr_hi#0 + (word/signed word) 256
  (byte*~) mul_tables_compare::$3 ← (byte[512]) asm_mul_sqr_hi#0 + (word/signed word) 256
  (boolean~) mul_tables_compare::$5 ← *((byte*~) mul_tables_compare::$2 + (byte) mul_tables_compare::i#10) == *((byte*~) mul_tables_compare::$3 + (byte) mul_tables_compare::i#10)
  if((boolean~) mul_tables_compare::$5) goto mul_tables_compare::@3
  to:mul_tables_compare::@7
mul_tables_compare::@6: scope:[mul_tables_compare]  from mul_tables_compare::@1
  *((byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@2
mul_tables_compare::@3: scope:[mul_tables_compare]  from mul_tables_compare::@2 mul_tables_compare::@7
  (boolean~) mul_tables_compare::$7 ← *((byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10) == *((byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)
  if((boolean~) mul_tables_compare::$7) goto mul_tables_compare::@4
  to:mul_tables_compare::@8
mul_tables_compare::@7: scope:[mul_tables_compare]  from mul_tables_compare::@2
  *((byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@3
mul_tables_compare::@4: scope:[mul_tables_compare]  from mul_tables_compare::@3 mul_tables_compare::@8
  (byte*~) mul_tables_compare::$8 ← (byte[512]) mul_sqr_hi#0 + (word/signed word) 256
  (byte*~) mul_tables_compare::$9 ← (byte[512]) asm_mul_sqr_hi#0 + (word/signed word) 256
  (boolean~) mul_tables_compare::$11 ← *((byte*~) mul_tables_compare::$8 + (byte) mul_tables_compare::i#10) == *((byte*~) mul_tables_compare::$9 + (byte) mul_tables_compare::i#10)
  if((boolean~) mul_tables_compare::$11) goto mul_tables_compare::@5
  to:mul_tables_compare::@9
mul_tables_compare::@8: scope:[mul_tables_compare]  from mul_tables_compare::@3
  *((byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@4
mul_tables_compare::@5: scope:[mul_tables_compare]  from mul_tables_compare::@4 mul_tables_compare::@9
  (byte) mul_tables_compare::i#1 ← ++ (byte) mul_tables_compare::i#10
  (boolean~) mul_tables_compare::$12 ← (byte) mul_tables_compare::i#1 != (byte/signed byte/word/signed word) 0
  if((boolean~) mul_tables_compare::$12) goto mul_tables_compare::@1
  to:mul_tables_compare::@return
mul_tables_compare::@9: scope:[mul_tables_compare]  from mul_tables_compare::@4
  *((byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@5
mul_tables_compare::@return: scope:[mul_tables_compare]  from mul_tables_compare::@5
  return 
  to:@return
@4: scope:[]  from @2
  call main param-assignment
  to:@end
@end: scope:[]  from @4

Simple Condition (boolean~) init_mul_tables::$2 if((byte~) init_mul_tables::$0!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@2
Simple Condition (boolean~) init_mul_tables::$7 if((byte) init_mul_tables::i#1!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@1
Simple Condition (boolean~) init_mul_tables::$10 if((byte~) init_mul_tables::$8!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@4
Simple Condition (boolean~) init_mul_tables::$18 if((byte) init_mul_tables::i#3!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@3
Simple Condition (boolean~) mul_tables_compare::$1 if(*((byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@2
Simple Condition (boolean~) mul_tables_compare::$5 if(*((byte*~) mul_tables_compare::$2 + (byte) mul_tables_compare::i#10)==*((byte*~) mul_tables_compare::$3 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@3
Simple Condition (boolean~) mul_tables_compare::$7 if(*((byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@4
Simple Condition (boolean~) mul_tables_compare::$11 if(*((byte*~) mul_tables_compare::$8 + (byte) mul_tables_compare::i#10)==*((byte*~) mul_tables_compare::$9 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@5
Simple Condition (boolean~) mul_tables_compare::$12 if((byte) mul_tables_compare::i#1!=(byte/signed byte/word/signed word) 0) goto mul_tables_compare::@1
Succesful SSA optimization Pass2ConditionalJumpSimplification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) BGCOL#0 ← ((byte*)) (word) 53281
  to:@1
main: scope:[main]  from @4
  call init_mul_tables param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  call init_mul_tables_asm param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  call mul_tables_compare param-assignment
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  (byte[512]) mul_sqr_lo#0 ← { fill( 512, 0) }
  (byte[512]) mul_sqr_hi#0 ← { fill( 512, 0) }
  to:@2
init_mul_tables: scope:[init_mul_tables]  from main
  (word) init_mul_tables::sqr#0 ← (byte/signed byte/word/signed word) 0
  (byte) init_mul_tables::i#0 ← (byte/signed byte/word/signed word) 1
  to:init_mul_tables::@1
init_mul_tables::@1: scope:[init_mul_tables]  from init_mul_tables init_mul_tables::@2
  (word) init_mul_tables::sqr#6 ← phi( init_mul_tables/(word) init_mul_tables::sqr#0 init_mul_tables::@2/(word) init_mul_tables::sqr#1 )
  (byte) init_mul_tables::i#4 ← phi( init_mul_tables/(byte) init_mul_tables::i#0 init_mul_tables::@2/(byte) init_mul_tables::i#1 )
  (byte~) init_mul_tables::$0 ← (byte) init_mul_tables::i#4 & (byte/signed byte/word/signed word) 1
  if((byte~) init_mul_tables::$0!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@2
  to:init_mul_tables::@5
init_mul_tables::@2: scope:[init_mul_tables]  from init_mul_tables::@1 init_mul_tables::@5
  (word) init_mul_tables::sqr#5 ← phi( init_mul_tables::@1/(word) init_mul_tables::sqr#6 init_mul_tables::@5/(word) init_mul_tables::sqr#2 )
  (byte~) init_mul_tables::$3 ← < (word) init_mul_tables::sqr#5
  *((byte[512]) mul_sqr_lo#0 + (byte) init_mul_tables::i#4) ← (byte~) init_mul_tables::$3
  (byte~) init_mul_tables::$4 ← > (word) init_mul_tables::sqr#5
  *((byte[512]) mul_sqr_hi#0 + (byte) init_mul_tables::i#4) ← (byte~) init_mul_tables::$4
  (byte~) init_mul_tables::$5 ← (byte) init_mul_tables::i#4 >> (byte/signed byte/word/signed word) 1
  (word) init_mul_tables::sqr#1 ← (word) init_mul_tables::sqr#5 + (byte~) init_mul_tables::$5
  (byte) init_mul_tables::i#1 ← ++ (byte) init_mul_tables::i#4
  if((byte) init_mul_tables::i#1!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@1
  to:init_mul_tables::@6
init_mul_tables::@5: scope:[init_mul_tables]  from init_mul_tables::@1
  (word) init_mul_tables::sqr#2 ← ++ (word) init_mul_tables::sqr#6
  to:init_mul_tables::@2
init_mul_tables::@6: scope:[init_mul_tables]  from init_mul_tables::@2
  (byte) init_mul_tables::i#2 ← (byte/signed byte/word/signed word) 0
  to:init_mul_tables::@3
init_mul_tables::@3: scope:[init_mul_tables]  from init_mul_tables::@4 init_mul_tables::@6
  (word) init_mul_tables::sqr#10 ← phi( init_mul_tables::@4/(word) init_mul_tables::sqr#3 init_mul_tables::@6/(word) init_mul_tables::sqr#1 )
  (byte) init_mul_tables::i#6 ← phi( init_mul_tables::@4/(byte) init_mul_tables::i#3 init_mul_tables::@6/(byte) init_mul_tables::i#2 )
  (byte~) init_mul_tables::$8 ← (byte) init_mul_tables::i#6 & (byte/signed byte/word/signed word) 1
  if((byte~) init_mul_tables::$8!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@4
  to:init_mul_tables::@7
init_mul_tables::@4: scope:[init_mul_tables]  from init_mul_tables::@3 init_mul_tables::@7
  (word) init_mul_tables::sqr#7 ← phi( init_mul_tables::@3/(word) init_mul_tables::sqr#10 init_mul_tables::@7/(word) init_mul_tables::sqr#4 )
  (byte*~) init_mul_tables::$11 ← (byte[512]) mul_sqr_lo#0 + (word/signed word) 256
  (byte~) init_mul_tables::$12 ← < (word) init_mul_tables::sqr#7
  *((byte*~) init_mul_tables::$11 + (byte) init_mul_tables::i#6) ← (byte~) init_mul_tables::$12
  (byte*~) init_mul_tables::$13 ← (byte[512]) mul_sqr_hi#0 + (word/signed word) 256
  (byte~) init_mul_tables::$14 ← > (word) init_mul_tables::sqr#7
  *((byte*~) init_mul_tables::$13 + (byte) init_mul_tables::i#6) ← (byte~) init_mul_tables::$14
  (word~) init_mul_tables::$15 ← (word) init_mul_tables::sqr#7 + (byte/word/signed word) 128
  (byte~) init_mul_tables::$16 ← (byte) init_mul_tables::i#6 >> (byte/signed byte/word/signed word) 1
  (word) init_mul_tables::sqr#3 ← (word~) init_mul_tables::$15 + (byte~) init_mul_tables::$16
  (byte) init_mul_tables::i#3 ← ++ (byte) init_mul_tables::i#6
  if((byte) init_mul_tables::i#3!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@3
  to:init_mul_tables::@return
init_mul_tables::@7: scope:[init_mul_tables]  from init_mul_tables::@3
  (word) init_mul_tables::sqr#4 ← ++ (word) init_mul_tables::sqr#10
  to:init_mul_tables::@4
init_mul_tables::@return: scope:[init_mul_tables]  from init_mul_tables::@4
  return 
  to:@return
@2: scope:[]  from @1
  (byte[512]) asm_mul_sqr_lo#0 ← { fill( 512, 0) }
  (byte[512]) asm_mul_sqr_hi#0 ← { fill( 512, 0) }
  to:@4
init_mul_tables_asm: scope:[init_mul_tables_asm]  from main::@1
  asm { ldx#$00txa.byte$c9lb1:tyaadc#$00ml1:staasm_mul_sqr_hi,xtaycmp#$40txarorml9:adc#$00staml9+1inxml0:staasm_mul_sqr_lo,xbnelb1incml0+2incml1+2clcinybnelb1 }
  to:init_mul_tables_asm::@return
init_mul_tables_asm::@return: scope:[init_mul_tables_asm]  from init_mul_tables_asm
  return 
  to:@return
mul_tables_compare: scope:[mul_tables_compare]  from main::@2
  *((byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 5
  (byte) mul_tables_compare::i#0 ← (byte/signed byte/word/signed word) 0
  to:mul_tables_compare::@1
mul_tables_compare::@1: scope:[mul_tables_compare]  from mul_tables_compare mul_tables_compare::@5
  (byte) mul_tables_compare::i#10 ← phi( mul_tables_compare/(byte) mul_tables_compare::i#0 mul_tables_compare::@5/(byte) mul_tables_compare::i#1 )
  if(*((byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@2
  to:mul_tables_compare::@6
mul_tables_compare::@2: scope:[mul_tables_compare]  from mul_tables_compare::@1 mul_tables_compare::@6
  (byte*~) mul_tables_compare::$2 ← (byte[512]) mul_sqr_hi#0 + (word/signed word) 256
  (byte*~) mul_tables_compare::$3 ← (byte[512]) asm_mul_sqr_hi#0 + (word/signed word) 256
  if(*((byte*~) mul_tables_compare::$2 + (byte) mul_tables_compare::i#10)==*((byte*~) mul_tables_compare::$3 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@3
  to:mul_tables_compare::@7
mul_tables_compare::@6: scope:[mul_tables_compare]  from mul_tables_compare::@1
  *((byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@2
mul_tables_compare::@3: scope:[mul_tables_compare]  from mul_tables_compare::@2 mul_tables_compare::@7
  if(*((byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@4
  to:mul_tables_compare::@8
mul_tables_compare::@7: scope:[mul_tables_compare]  from mul_tables_compare::@2
  *((byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@3
mul_tables_compare::@4: scope:[mul_tables_compare]  from mul_tables_compare::@3 mul_tables_compare::@8
  (byte*~) mul_tables_compare::$8 ← (byte[512]) mul_sqr_hi#0 + (word/signed word) 256
  (byte*~) mul_tables_compare::$9 ← (byte[512]) asm_mul_sqr_hi#0 + (word/signed word) 256
  if(*((byte*~) mul_tables_compare::$8 + (byte) mul_tables_compare::i#10)==*((byte*~) mul_tables_compare::$9 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@5
  to:mul_tables_compare::@9
mul_tables_compare::@8: scope:[mul_tables_compare]  from mul_tables_compare::@3
  *((byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@4
mul_tables_compare::@5: scope:[mul_tables_compare]  from mul_tables_compare::@4 mul_tables_compare::@9
  (byte) mul_tables_compare::i#1 ← ++ (byte) mul_tables_compare::i#10
  if((byte) mul_tables_compare::i#1!=(byte/signed byte/word/signed word) 0) goto mul_tables_compare::@1
  to:mul_tables_compare::@return
mul_tables_compare::@9: scope:[mul_tables_compare]  from mul_tables_compare::@4
  *((byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@5
mul_tables_compare::@return: scope:[mul_tables_compare]  from mul_tables_compare::@5
  return 
  to:@return
@4: scope:[]  from @2
  call main param-assignment
  to:@end
@end: scope:[]  from @4

Constant (const byte*) BGCOL#0 = ((byte*))53281
Constant (const byte[512]) mul_sqr_lo#0 = { fill( 512, 0) }
Constant (const byte[512]) mul_sqr_hi#0 = { fill( 512, 0) }
Constant (const word) init_mul_tables::sqr#0 = 0
Constant (const byte) init_mul_tables::i#0 = 1
Constant (const byte) init_mul_tables::i#2 = 0
Constant (const byte[512]) asm_mul_sqr_lo#0 = { fill( 512, 0) }
Constant (const byte[512]) asm_mul_sqr_hi#0 = { fill( 512, 0) }
Constant (const byte) mul_tables_compare::i#0 = 0
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @4
  call init_mul_tables param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  call init_mul_tables_asm param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  call mul_tables_compare param-assignment
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  to:@2
init_mul_tables: scope:[init_mul_tables]  from main
  to:init_mul_tables::@1
init_mul_tables::@1: scope:[init_mul_tables]  from init_mul_tables init_mul_tables::@2
  (word) init_mul_tables::sqr#6 ← phi( init_mul_tables/(const word) init_mul_tables::sqr#0 init_mul_tables::@2/(word) init_mul_tables::sqr#1 )
  (byte) init_mul_tables::i#4 ← phi( init_mul_tables/(const byte) init_mul_tables::i#0 init_mul_tables::@2/(byte) init_mul_tables::i#1 )
  (byte~) init_mul_tables::$0 ← (byte) init_mul_tables::i#4 & (byte/signed byte/word/signed word) 1
  if((byte~) init_mul_tables::$0!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@2
  to:init_mul_tables::@5
init_mul_tables::@2: scope:[init_mul_tables]  from init_mul_tables::@1 init_mul_tables::@5
  (word) init_mul_tables::sqr#5 ← phi( init_mul_tables::@1/(word) init_mul_tables::sqr#6 init_mul_tables::@5/(word) init_mul_tables::sqr#2 )
  (byte~) init_mul_tables::$3 ← < (word) init_mul_tables::sqr#5
  *((const byte[512]) mul_sqr_lo#0 + (byte) init_mul_tables::i#4) ← (byte~) init_mul_tables::$3
  (byte~) init_mul_tables::$4 ← > (word) init_mul_tables::sqr#5
  *((const byte[512]) mul_sqr_hi#0 + (byte) init_mul_tables::i#4) ← (byte~) init_mul_tables::$4
  (byte~) init_mul_tables::$5 ← (byte) init_mul_tables::i#4 >> (byte/signed byte/word/signed word) 1
  (word) init_mul_tables::sqr#1 ← (word) init_mul_tables::sqr#5 + (byte~) init_mul_tables::$5
  (byte) init_mul_tables::i#1 ← ++ (byte) init_mul_tables::i#4
  if((byte) init_mul_tables::i#1!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@1
  to:init_mul_tables::@6
init_mul_tables::@5: scope:[init_mul_tables]  from init_mul_tables::@1
  (word) init_mul_tables::sqr#2 ← ++ (word) init_mul_tables::sqr#6
  to:init_mul_tables::@2
init_mul_tables::@6: scope:[init_mul_tables]  from init_mul_tables::@2
  to:init_mul_tables::@3
init_mul_tables::@3: scope:[init_mul_tables]  from init_mul_tables::@4 init_mul_tables::@6
  (word) init_mul_tables::sqr#10 ← phi( init_mul_tables::@4/(word) init_mul_tables::sqr#3 init_mul_tables::@6/(word) init_mul_tables::sqr#1 )
  (byte) init_mul_tables::i#6 ← phi( init_mul_tables::@4/(byte) init_mul_tables::i#3 init_mul_tables::@6/(const byte) init_mul_tables::i#2 )
  (byte~) init_mul_tables::$8 ← (byte) init_mul_tables::i#6 & (byte/signed byte/word/signed word) 1
  if((byte~) init_mul_tables::$8!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@4
  to:init_mul_tables::@7
init_mul_tables::@4: scope:[init_mul_tables]  from init_mul_tables::@3 init_mul_tables::@7
  (word) init_mul_tables::sqr#7 ← phi( init_mul_tables::@3/(word) init_mul_tables::sqr#10 init_mul_tables::@7/(word) init_mul_tables::sqr#4 )
  (byte*~) init_mul_tables::$11 ← (const byte[512]) mul_sqr_lo#0 + (word/signed word) 256
  (byte~) init_mul_tables::$12 ← < (word) init_mul_tables::sqr#7
  *((byte*~) init_mul_tables::$11 + (byte) init_mul_tables::i#6) ← (byte~) init_mul_tables::$12
  (byte*~) init_mul_tables::$13 ← (const byte[512]) mul_sqr_hi#0 + (word/signed word) 256
  (byte~) init_mul_tables::$14 ← > (word) init_mul_tables::sqr#7
  *((byte*~) init_mul_tables::$13 + (byte) init_mul_tables::i#6) ← (byte~) init_mul_tables::$14
  (word~) init_mul_tables::$15 ← (word) init_mul_tables::sqr#7 + (byte/word/signed word) 128
  (byte~) init_mul_tables::$16 ← (byte) init_mul_tables::i#6 >> (byte/signed byte/word/signed word) 1
  (word) init_mul_tables::sqr#3 ← (word~) init_mul_tables::$15 + (byte~) init_mul_tables::$16
  (byte) init_mul_tables::i#3 ← ++ (byte) init_mul_tables::i#6
  if((byte) init_mul_tables::i#3!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@3
  to:init_mul_tables::@return
init_mul_tables::@7: scope:[init_mul_tables]  from init_mul_tables::@3
  (word) init_mul_tables::sqr#4 ← ++ (word) init_mul_tables::sqr#10
  to:init_mul_tables::@4
init_mul_tables::@return: scope:[init_mul_tables]  from init_mul_tables::@4
  return 
  to:@return
@2: scope:[]  from @1
  to:@4
init_mul_tables_asm: scope:[init_mul_tables_asm]  from main::@1
  asm { ldx#$00txa.byte$c9lb1:tyaadc#$00ml1:staasm_mul_sqr_hi,xtaycmp#$40txarorml9:adc#$00staml9+1inxml0:staasm_mul_sqr_lo,xbnelb1incml0+2incml1+2clcinybnelb1 }
  to:init_mul_tables_asm::@return
init_mul_tables_asm::@return: scope:[init_mul_tables_asm]  from init_mul_tables_asm
  return 
  to:@return
mul_tables_compare: scope:[mul_tables_compare]  from main::@2
  *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 5
  to:mul_tables_compare::@1
mul_tables_compare::@1: scope:[mul_tables_compare]  from mul_tables_compare mul_tables_compare::@5
  (byte) mul_tables_compare::i#10 ← phi( mul_tables_compare/(const byte) mul_tables_compare::i#0 mul_tables_compare::@5/(byte) mul_tables_compare::i#1 )
  if(*((const byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@2
  to:mul_tables_compare::@6
mul_tables_compare::@2: scope:[mul_tables_compare]  from mul_tables_compare::@1 mul_tables_compare::@6
  (byte*~) mul_tables_compare::$2 ← (const byte[512]) mul_sqr_hi#0 + (word/signed word) 256
  (byte*~) mul_tables_compare::$3 ← (const byte[512]) asm_mul_sqr_hi#0 + (word/signed word) 256
  if(*((byte*~) mul_tables_compare::$2 + (byte) mul_tables_compare::i#10)==*((byte*~) mul_tables_compare::$3 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@3
  to:mul_tables_compare::@7
mul_tables_compare::@6: scope:[mul_tables_compare]  from mul_tables_compare::@1
  *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@2
mul_tables_compare::@3: scope:[mul_tables_compare]  from mul_tables_compare::@2 mul_tables_compare::@7
  if(*((const byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@4
  to:mul_tables_compare::@8
mul_tables_compare::@7: scope:[mul_tables_compare]  from mul_tables_compare::@2
  *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@3
mul_tables_compare::@4: scope:[mul_tables_compare]  from mul_tables_compare::@3 mul_tables_compare::@8
  (byte*~) mul_tables_compare::$8 ← (const byte[512]) mul_sqr_hi#0 + (word/signed word) 256
  (byte*~) mul_tables_compare::$9 ← (const byte[512]) asm_mul_sqr_hi#0 + (word/signed word) 256
  if(*((byte*~) mul_tables_compare::$8 + (byte) mul_tables_compare::i#10)==*((byte*~) mul_tables_compare::$9 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@5
  to:mul_tables_compare::@9
mul_tables_compare::@8: scope:[mul_tables_compare]  from mul_tables_compare::@3
  *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@4
mul_tables_compare::@5: scope:[mul_tables_compare]  from mul_tables_compare::@4 mul_tables_compare::@9
  (byte) mul_tables_compare::i#1 ← ++ (byte) mul_tables_compare::i#10
  if((byte) mul_tables_compare::i#1!=(byte/signed byte/word/signed word) 0) goto mul_tables_compare::@1
  to:mul_tables_compare::@return
mul_tables_compare::@9: scope:[mul_tables_compare]  from mul_tables_compare::@4
  *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@5
mul_tables_compare::@return: scope:[mul_tables_compare]  from mul_tables_compare::@5
  return 
  to:@return
@4: scope:[]  from @2
  call main param-assignment
  to:@end
@end: scope:[]  from @4

Constant (const byte*) init_mul_tables::$11 = mul_sqr_lo#0+256
Constant (const byte*) init_mul_tables::$13 = mul_sqr_hi#0+256
Constant (const byte*) mul_tables_compare::$2 = mul_sqr_hi#0+256
Constant (const byte*) mul_tables_compare::$3 = asm_mul_sqr_hi#0+256
Constant (const byte*) mul_tables_compare::$8 = mul_sqr_hi#0+256
Constant (const byte*) mul_tables_compare::$9 = asm_mul_sqr_hi#0+256
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @4
  call init_mul_tables param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  call init_mul_tables_asm param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  call mul_tables_compare param-assignment
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  to:@2
init_mul_tables: scope:[init_mul_tables]  from main
  to:init_mul_tables::@1
init_mul_tables::@1: scope:[init_mul_tables]  from init_mul_tables init_mul_tables::@2
  (word) init_mul_tables::sqr#6 ← phi( init_mul_tables/(const word) init_mul_tables::sqr#0 init_mul_tables::@2/(word) init_mul_tables::sqr#1 )
  (byte) init_mul_tables::i#4 ← phi( init_mul_tables/(const byte) init_mul_tables::i#0 init_mul_tables::@2/(byte) init_mul_tables::i#1 )
  (byte~) init_mul_tables::$0 ← (byte) init_mul_tables::i#4 & (byte/signed byte/word/signed word) 1
  if((byte~) init_mul_tables::$0!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@2
  to:init_mul_tables::@5
init_mul_tables::@2: scope:[init_mul_tables]  from init_mul_tables::@1 init_mul_tables::@5
  (word) init_mul_tables::sqr#5 ← phi( init_mul_tables::@1/(word) init_mul_tables::sqr#6 init_mul_tables::@5/(word) init_mul_tables::sqr#2 )
  (byte~) init_mul_tables::$3 ← < (word) init_mul_tables::sqr#5
  *((const byte[512]) mul_sqr_lo#0 + (byte) init_mul_tables::i#4) ← (byte~) init_mul_tables::$3
  (byte~) init_mul_tables::$4 ← > (word) init_mul_tables::sqr#5
  *((const byte[512]) mul_sqr_hi#0 + (byte) init_mul_tables::i#4) ← (byte~) init_mul_tables::$4
  (byte~) init_mul_tables::$5 ← (byte) init_mul_tables::i#4 >> (byte/signed byte/word/signed word) 1
  (word) init_mul_tables::sqr#1 ← (word) init_mul_tables::sqr#5 + (byte~) init_mul_tables::$5
  (byte) init_mul_tables::i#1 ← ++ (byte) init_mul_tables::i#4
  if((byte) init_mul_tables::i#1!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@1
  to:init_mul_tables::@6
init_mul_tables::@5: scope:[init_mul_tables]  from init_mul_tables::@1
  (word) init_mul_tables::sqr#2 ← ++ (word) init_mul_tables::sqr#6
  to:init_mul_tables::@2
init_mul_tables::@6: scope:[init_mul_tables]  from init_mul_tables::@2
  to:init_mul_tables::@3
init_mul_tables::@3: scope:[init_mul_tables]  from init_mul_tables::@4 init_mul_tables::@6
  (word) init_mul_tables::sqr#10 ← phi( init_mul_tables::@4/(word) init_mul_tables::sqr#3 init_mul_tables::@6/(word) init_mul_tables::sqr#1 )
  (byte) init_mul_tables::i#6 ← phi( init_mul_tables::@4/(byte) init_mul_tables::i#3 init_mul_tables::@6/(const byte) init_mul_tables::i#2 )
  (byte~) init_mul_tables::$8 ← (byte) init_mul_tables::i#6 & (byte/signed byte/word/signed word) 1
  if((byte~) init_mul_tables::$8!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@4
  to:init_mul_tables::@7
init_mul_tables::@4: scope:[init_mul_tables]  from init_mul_tables::@3 init_mul_tables::@7
  (word) init_mul_tables::sqr#7 ← phi( init_mul_tables::@3/(word) init_mul_tables::sqr#10 init_mul_tables::@7/(word) init_mul_tables::sqr#4 )
  (byte~) init_mul_tables::$12 ← < (word) init_mul_tables::sqr#7
  *((const byte*) init_mul_tables::$11 + (byte) init_mul_tables::i#6) ← (byte~) init_mul_tables::$12
  (byte~) init_mul_tables::$14 ← > (word) init_mul_tables::sqr#7
  *((const byte*) init_mul_tables::$13 + (byte) init_mul_tables::i#6) ← (byte~) init_mul_tables::$14
  (word~) init_mul_tables::$15 ← (word) init_mul_tables::sqr#7 + (byte/word/signed word) 128
  (byte~) init_mul_tables::$16 ← (byte) init_mul_tables::i#6 >> (byte/signed byte/word/signed word) 1
  (word) init_mul_tables::sqr#3 ← (word~) init_mul_tables::$15 + (byte~) init_mul_tables::$16
  (byte) init_mul_tables::i#3 ← ++ (byte) init_mul_tables::i#6
  if((byte) init_mul_tables::i#3!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@3
  to:init_mul_tables::@return
init_mul_tables::@7: scope:[init_mul_tables]  from init_mul_tables::@3
  (word) init_mul_tables::sqr#4 ← ++ (word) init_mul_tables::sqr#10
  to:init_mul_tables::@4
init_mul_tables::@return: scope:[init_mul_tables]  from init_mul_tables::@4
  return 
  to:@return
@2: scope:[]  from @1
  to:@4
init_mul_tables_asm: scope:[init_mul_tables_asm]  from main::@1
  asm { ldx#$00txa.byte$c9lb1:tyaadc#$00ml1:staasm_mul_sqr_hi,xtaycmp#$40txarorml9:adc#$00staml9+1inxml0:staasm_mul_sqr_lo,xbnelb1incml0+2incml1+2clcinybnelb1 }
  to:init_mul_tables_asm::@return
init_mul_tables_asm::@return: scope:[init_mul_tables_asm]  from init_mul_tables_asm
  return 
  to:@return
mul_tables_compare: scope:[mul_tables_compare]  from main::@2
  *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 5
  to:mul_tables_compare::@1
mul_tables_compare::@1: scope:[mul_tables_compare]  from mul_tables_compare mul_tables_compare::@5
  (byte) mul_tables_compare::i#10 ← phi( mul_tables_compare/(const byte) mul_tables_compare::i#0 mul_tables_compare::@5/(byte) mul_tables_compare::i#1 )
  if(*((const byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@2
  to:mul_tables_compare::@6
mul_tables_compare::@2: scope:[mul_tables_compare]  from mul_tables_compare::@1 mul_tables_compare::@6
  if(*((const byte*) mul_tables_compare::$2 + (byte) mul_tables_compare::i#10)==*((const byte*) mul_tables_compare::$3 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@3
  to:mul_tables_compare::@7
mul_tables_compare::@6: scope:[mul_tables_compare]  from mul_tables_compare::@1
  *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@2
mul_tables_compare::@3: scope:[mul_tables_compare]  from mul_tables_compare::@2 mul_tables_compare::@7
  if(*((const byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@4
  to:mul_tables_compare::@8
mul_tables_compare::@7: scope:[mul_tables_compare]  from mul_tables_compare::@2
  *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@3
mul_tables_compare::@4: scope:[mul_tables_compare]  from mul_tables_compare::@3 mul_tables_compare::@8
  if(*((const byte*) mul_tables_compare::$8 + (byte) mul_tables_compare::i#10)==*((const byte*) mul_tables_compare::$9 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@5
  to:mul_tables_compare::@9
mul_tables_compare::@8: scope:[mul_tables_compare]  from mul_tables_compare::@3
  *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@4
mul_tables_compare::@5: scope:[mul_tables_compare]  from mul_tables_compare::@4 mul_tables_compare::@9
  (byte) mul_tables_compare::i#1 ← ++ (byte) mul_tables_compare::i#10
  if((byte) mul_tables_compare::i#1!=(byte/signed byte/word/signed word) 0) goto mul_tables_compare::@1
  to:mul_tables_compare::@return
mul_tables_compare::@9: scope:[mul_tables_compare]  from mul_tables_compare::@4
  *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@5
mul_tables_compare::@return: scope:[mul_tables_compare]  from mul_tables_compare::@5
  return 
  to:@return
@4: scope:[]  from @2
  call main param-assignment
  to:@end
@end: scope:[]  from @4

Multiple usages for variable. Not optimizing sub-constant (byte) init_mul_tables::i#4
Multiple usages for variable. Not optimizing sub-constant (byte) init_mul_tables::i#4
Multiple usages for variable. Not optimizing sub-constant (byte) init_mul_tables::i#6
Multiple usages for variable. Not optimizing sub-constant (byte) init_mul_tables::i#6
Multiple usages for variable. Not optimizing sub-constant (word) init_mul_tables::sqr#7
Culled Empty Block (label) @1
Culled Empty Block (label) init_mul_tables::@6
Culled Empty Block (label) @2
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@4
main: scope:[main]  from @4
  call init_mul_tables param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  call init_mul_tables_asm param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  call mul_tables_compare param-assignment
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
init_mul_tables: scope:[init_mul_tables]  from main
  to:init_mul_tables::@1
init_mul_tables::@1: scope:[init_mul_tables]  from init_mul_tables init_mul_tables::@2
  (word) init_mul_tables::sqr#6 ← phi( init_mul_tables/(const word) init_mul_tables::sqr#0 init_mul_tables::@2/(word) init_mul_tables::sqr#1 )
  (byte) init_mul_tables::i#4 ← phi( init_mul_tables/(const byte) init_mul_tables::i#0 init_mul_tables::@2/(byte) init_mul_tables::i#1 )
  (byte~) init_mul_tables::$0 ← (byte) init_mul_tables::i#4 & (byte/signed byte/word/signed word) 1
  if((byte~) init_mul_tables::$0!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@2
  to:init_mul_tables::@5
init_mul_tables::@2: scope:[init_mul_tables]  from init_mul_tables::@1 init_mul_tables::@5
  (word) init_mul_tables::sqr#5 ← phi( init_mul_tables::@1/(word) init_mul_tables::sqr#6 init_mul_tables::@5/(word) init_mul_tables::sqr#2 )
  (byte~) init_mul_tables::$3 ← < (word) init_mul_tables::sqr#5
  *((const byte[512]) mul_sqr_lo#0 + (byte) init_mul_tables::i#4) ← (byte~) init_mul_tables::$3
  (byte~) init_mul_tables::$4 ← > (word) init_mul_tables::sqr#5
  *((const byte[512]) mul_sqr_hi#0 + (byte) init_mul_tables::i#4) ← (byte~) init_mul_tables::$4
  (byte~) init_mul_tables::$5 ← (byte) init_mul_tables::i#4 >> (byte/signed byte/word/signed word) 1
  (word) init_mul_tables::sqr#1 ← (word) init_mul_tables::sqr#5 + (byte~) init_mul_tables::$5
  (byte) init_mul_tables::i#1 ← ++ (byte) init_mul_tables::i#4
  if((byte) init_mul_tables::i#1!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@1
  to:init_mul_tables::@3
init_mul_tables::@5: scope:[init_mul_tables]  from init_mul_tables::@1
  (word) init_mul_tables::sqr#2 ← ++ (word) init_mul_tables::sqr#6
  to:init_mul_tables::@2
init_mul_tables::@3: scope:[init_mul_tables]  from init_mul_tables::@2 init_mul_tables::@4
  (word) init_mul_tables::sqr#10 ← phi( init_mul_tables::@4/(word) init_mul_tables::sqr#3 init_mul_tables::@2/(word) init_mul_tables::sqr#1 )
  (byte) init_mul_tables::i#6 ← phi( init_mul_tables::@4/(byte) init_mul_tables::i#3 init_mul_tables::@2/(const byte) init_mul_tables::i#2 )
  (byte~) init_mul_tables::$8 ← (byte) init_mul_tables::i#6 & (byte/signed byte/word/signed word) 1
  if((byte~) init_mul_tables::$8!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@4
  to:init_mul_tables::@7
init_mul_tables::@4: scope:[init_mul_tables]  from init_mul_tables::@3 init_mul_tables::@7
  (word) init_mul_tables::sqr#7 ← phi( init_mul_tables::@3/(word) init_mul_tables::sqr#10 init_mul_tables::@7/(word) init_mul_tables::sqr#4 )
  (byte~) init_mul_tables::$12 ← < (word) init_mul_tables::sqr#7
  *((const byte*) init_mul_tables::$11 + (byte) init_mul_tables::i#6) ← (byte~) init_mul_tables::$12
  (byte~) init_mul_tables::$14 ← > (word) init_mul_tables::sqr#7
  *((const byte*) init_mul_tables::$13 + (byte) init_mul_tables::i#6) ← (byte~) init_mul_tables::$14
  (word~) init_mul_tables::$15 ← (word) init_mul_tables::sqr#7 + (byte/word/signed word) 128
  (byte~) init_mul_tables::$16 ← (byte) init_mul_tables::i#6 >> (byte/signed byte/word/signed word) 1
  (word) init_mul_tables::sqr#3 ← (word~) init_mul_tables::$15 + (byte~) init_mul_tables::$16
  (byte) init_mul_tables::i#3 ← ++ (byte) init_mul_tables::i#6
  if((byte) init_mul_tables::i#3!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@3
  to:init_mul_tables::@return
init_mul_tables::@7: scope:[init_mul_tables]  from init_mul_tables::@3
  (word) init_mul_tables::sqr#4 ← ++ (word) init_mul_tables::sqr#10
  to:init_mul_tables::@4
init_mul_tables::@return: scope:[init_mul_tables]  from init_mul_tables::@4
  return 
  to:@return
init_mul_tables_asm: scope:[init_mul_tables_asm]  from main::@1
  asm { ldx#$00txa.byte$c9lb1:tyaadc#$00ml1:staasm_mul_sqr_hi,xtaycmp#$40txarorml9:adc#$00staml9+1inxml0:staasm_mul_sqr_lo,xbnelb1incml0+2incml1+2clcinybnelb1 }
  to:init_mul_tables_asm::@return
init_mul_tables_asm::@return: scope:[init_mul_tables_asm]  from init_mul_tables_asm
  return 
  to:@return
mul_tables_compare: scope:[mul_tables_compare]  from main::@2
  *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 5
  to:mul_tables_compare::@1
mul_tables_compare::@1: scope:[mul_tables_compare]  from mul_tables_compare mul_tables_compare::@5
  (byte) mul_tables_compare::i#10 ← phi( mul_tables_compare/(const byte) mul_tables_compare::i#0 mul_tables_compare::@5/(byte) mul_tables_compare::i#1 )
  if(*((const byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@2
  to:mul_tables_compare::@6
mul_tables_compare::@2: scope:[mul_tables_compare]  from mul_tables_compare::@1 mul_tables_compare::@6
  if(*((const byte*) mul_tables_compare::$2 + (byte) mul_tables_compare::i#10)==*((const byte*) mul_tables_compare::$3 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@3
  to:mul_tables_compare::@7
mul_tables_compare::@6: scope:[mul_tables_compare]  from mul_tables_compare::@1
  *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@2
mul_tables_compare::@3: scope:[mul_tables_compare]  from mul_tables_compare::@2 mul_tables_compare::@7
  if(*((const byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@4
  to:mul_tables_compare::@8
mul_tables_compare::@7: scope:[mul_tables_compare]  from mul_tables_compare::@2
  *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@3
mul_tables_compare::@4: scope:[mul_tables_compare]  from mul_tables_compare::@3 mul_tables_compare::@8
  if(*((const byte*) mul_tables_compare::$8 + (byte) mul_tables_compare::i#10)==*((const byte*) mul_tables_compare::$9 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@5
  to:mul_tables_compare::@9
mul_tables_compare::@8: scope:[mul_tables_compare]  from mul_tables_compare::@3
  *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@4
mul_tables_compare::@5: scope:[mul_tables_compare]  from mul_tables_compare::@4 mul_tables_compare::@9
  (byte) mul_tables_compare::i#1 ← ++ (byte) mul_tables_compare::i#10
  if((byte) mul_tables_compare::i#1!=(byte/signed byte/word/signed word) 0) goto mul_tables_compare::@1
  to:mul_tables_compare::@return
mul_tables_compare::@9: scope:[mul_tables_compare]  from mul_tables_compare::@4
  *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@5
mul_tables_compare::@return: scope:[mul_tables_compare]  from mul_tables_compare::@5
  return 
  to:@return
@4: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @4

Multiple usages for variable. Not optimizing sub-constant (byte) init_mul_tables::i#4
Multiple usages for variable. Not optimizing sub-constant (byte) init_mul_tables::i#4
Multiple usages for variable. Not optimizing sub-constant (byte) init_mul_tables::i#6
Multiple usages for variable. Not optimizing sub-constant (byte) init_mul_tables::i#6
Multiple usages for variable. Not optimizing sub-constant (word) init_mul_tables::sqr#7
Multiple usages for variable. Not optimizing sub-constant (byte) init_mul_tables::i#4
Multiple usages for variable. Not optimizing sub-constant (byte) init_mul_tables::i#4
Multiple usages for variable. Not optimizing sub-constant (byte) init_mul_tables::i#6
Multiple usages for variable. Not optimizing sub-constant (byte) init_mul_tables::i#6
Multiple usages for variable. Not optimizing sub-constant (word) init_mul_tables::sqr#7
Inlining constant with var siblings (const word) init_mul_tables::sqr#0
Inlining constant with var siblings (const word) init_mul_tables::sqr#0
Inlining constant with var siblings (const word) init_mul_tables::sqr#0
Inlining constant with var siblings (const word) init_mul_tables::sqr#0
Inlining constant with var siblings (const word) init_mul_tables::sqr#0
Inlining constant with var siblings (const word) init_mul_tables::sqr#0
Inlining constant with var siblings (const word) init_mul_tables::sqr#0
Inlining constant with var siblings (const word) init_mul_tables::sqr#0
Inlining constant with var siblings (const byte) init_mul_tables::i#0
Inlining constant with var siblings (const byte) init_mul_tables::i#0
Inlining constant with var siblings (const byte) init_mul_tables::i#0
Inlining constant with var siblings (const byte) init_mul_tables::i#0
Inlining constant with different constant siblings (const byte) init_mul_tables::i#0
Inlining constant with var siblings (const byte) init_mul_tables::i#2
Inlining constant with var siblings (const byte) init_mul_tables::i#2
Inlining constant with var siblings (const byte) init_mul_tables::i#2
Inlining constant with var siblings (const byte) init_mul_tables::i#2
Inlining constant with different constant siblings (const byte) init_mul_tables::i#2
Inlining constant with var siblings (const byte) mul_tables_compare::i#0
Inlining constant with var siblings (const byte) mul_tables_compare::i#0
Constant inlined init_mul_tables::i#2 = (byte/signed byte/word/signed word) 0
Constant inlined mul_tables_compare::i#0 = (byte/signed byte/word/signed word) 0
Constant inlined init_mul_tables::sqr#0 = (byte/signed byte/word/signed word) 0
Constant inlined mul_tables_compare::$3 = (const byte[512]) asm_mul_sqr_hi#0+(word/signed word) 256
Constant inlined mul_tables_compare::$2 = (const byte[512]) mul_sqr_hi#0+(word/signed word) 256
Constant inlined mul_tables_compare::$9 = (const byte[512]) asm_mul_sqr_hi#0+(word/signed word) 256
Constant inlined mul_tables_compare::$8 = (const byte[512]) mul_sqr_hi#0+(word/signed word) 256
Constant inlined init_mul_tables::$11 = (const byte[512]) mul_sqr_lo#0+(word/signed word) 256
Constant inlined init_mul_tables::i#0 = (byte/signed byte/word/signed word) 1
Constant inlined init_mul_tables::$13 = (const byte[512]) mul_sqr_hi#0+(word/signed word) 256
Succesful SSA optimization Pass2ConstantInlining
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@4
main: scope:[main]  from @4
  call init_mul_tables param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  call init_mul_tables_asm param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  call mul_tables_compare param-assignment
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
init_mul_tables: scope:[init_mul_tables]  from main
  to:init_mul_tables::@1
init_mul_tables::@1: scope:[init_mul_tables]  from init_mul_tables init_mul_tables::@2
  (word) init_mul_tables::sqr#6 ← phi( init_mul_tables/(byte/signed byte/word/signed word) 0 init_mul_tables::@2/(word) init_mul_tables::sqr#1 )
  (byte) init_mul_tables::i#4 ← phi( init_mul_tables/(byte/signed byte/word/signed word) 1 init_mul_tables::@2/(byte) init_mul_tables::i#1 )
  (byte~) init_mul_tables::$0 ← (byte) init_mul_tables::i#4 & (byte/signed byte/word/signed word) 1
  if((byte~) init_mul_tables::$0!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@2
  to:init_mul_tables::@5
init_mul_tables::@2: scope:[init_mul_tables]  from init_mul_tables::@1 init_mul_tables::@5
  (word) init_mul_tables::sqr#5 ← phi( init_mul_tables::@1/(word) init_mul_tables::sqr#6 init_mul_tables::@5/(word) init_mul_tables::sqr#2 )
  (byte~) init_mul_tables::$3 ← < (word) init_mul_tables::sqr#5
  *((const byte[512]) mul_sqr_lo#0 + (byte) init_mul_tables::i#4) ← (byte~) init_mul_tables::$3
  (byte~) init_mul_tables::$4 ← > (word) init_mul_tables::sqr#5
  *((const byte[512]) mul_sqr_hi#0 + (byte) init_mul_tables::i#4) ← (byte~) init_mul_tables::$4
  (byte~) init_mul_tables::$5 ← (byte) init_mul_tables::i#4 >> (byte/signed byte/word/signed word) 1
  (word) init_mul_tables::sqr#1 ← (word) init_mul_tables::sqr#5 + (byte~) init_mul_tables::$5
  (byte) init_mul_tables::i#1 ← ++ (byte) init_mul_tables::i#4
  if((byte) init_mul_tables::i#1!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@1
  to:init_mul_tables::@3
init_mul_tables::@5: scope:[init_mul_tables]  from init_mul_tables::@1
  (word) init_mul_tables::sqr#2 ← ++ (word) init_mul_tables::sqr#6
  to:init_mul_tables::@2
init_mul_tables::@3: scope:[init_mul_tables]  from init_mul_tables::@2 init_mul_tables::@4
  (word) init_mul_tables::sqr#10 ← phi( init_mul_tables::@4/(word) init_mul_tables::sqr#3 init_mul_tables::@2/(word) init_mul_tables::sqr#1 )
  (byte) init_mul_tables::i#6 ← phi( init_mul_tables::@4/(byte) init_mul_tables::i#3 init_mul_tables::@2/(byte/signed byte/word/signed word) 0 )
  (byte~) init_mul_tables::$8 ← (byte) init_mul_tables::i#6 & (byte/signed byte/word/signed word) 1
  if((byte~) init_mul_tables::$8!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@4
  to:init_mul_tables::@7
init_mul_tables::@4: scope:[init_mul_tables]  from init_mul_tables::@3 init_mul_tables::@7
  (word) init_mul_tables::sqr#7 ← phi( init_mul_tables::@3/(word) init_mul_tables::sqr#10 init_mul_tables::@7/(word) init_mul_tables::sqr#4 )
  (byte~) init_mul_tables::$12 ← < (word) init_mul_tables::sqr#7
  *((const byte[512]) mul_sqr_lo#0+(word/signed word) 256 + (byte) init_mul_tables::i#6) ← (byte~) init_mul_tables::$12
  (byte~) init_mul_tables::$14 ← > (word) init_mul_tables::sqr#7
  *((const byte[512]) mul_sqr_hi#0+(word/signed word) 256 + (byte) init_mul_tables::i#6) ← (byte~) init_mul_tables::$14
  (word~) init_mul_tables::$15 ← (word) init_mul_tables::sqr#7 + (byte/word/signed word) 128
  (byte~) init_mul_tables::$16 ← (byte) init_mul_tables::i#6 >> (byte/signed byte/word/signed word) 1
  (word) init_mul_tables::sqr#3 ← (word~) init_mul_tables::$15 + (byte~) init_mul_tables::$16
  (byte) init_mul_tables::i#3 ← ++ (byte) init_mul_tables::i#6
  if((byte) init_mul_tables::i#3!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@3
  to:init_mul_tables::@return
init_mul_tables::@7: scope:[init_mul_tables]  from init_mul_tables::@3
  (word) init_mul_tables::sqr#4 ← ++ (word) init_mul_tables::sqr#10
  to:init_mul_tables::@4
init_mul_tables::@return: scope:[init_mul_tables]  from init_mul_tables::@4
  return 
  to:@return
init_mul_tables_asm: scope:[init_mul_tables_asm]  from main::@1
  asm { ldx#$00txa.byte$c9lb1:tyaadc#$00ml1:staasm_mul_sqr_hi,xtaycmp#$40txarorml9:adc#$00staml9+1inxml0:staasm_mul_sqr_lo,xbnelb1incml0+2incml1+2clcinybnelb1 }
  to:init_mul_tables_asm::@return
init_mul_tables_asm::@return: scope:[init_mul_tables_asm]  from init_mul_tables_asm
  return 
  to:@return
mul_tables_compare: scope:[mul_tables_compare]  from main::@2
  *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 5
  to:mul_tables_compare::@1
mul_tables_compare::@1: scope:[mul_tables_compare]  from mul_tables_compare mul_tables_compare::@5
  (byte) mul_tables_compare::i#10 ← phi( mul_tables_compare/(byte/signed byte/word/signed word) 0 mul_tables_compare::@5/(byte) mul_tables_compare::i#1 )
  if(*((const byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@2
  to:mul_tables_compare::@6
mul_tables_compare::@2: scope:[mul_tables_compare]  from mul_tables_compare::@1 mul_tables_compare::@6
  if(*((const byte[512]) mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@3
  to:mul_tables_compare::@7
mul_tables_compare::@6: scope:[mul_tables_compare]  from mul_tables_compare::@1
  *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@2
mul_tables_compare::@3: scope:[mul_tables_compare]  from mul_tables_compare::@2 mul_tables_compare::@7
  if(*((const byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@4
  to:mul_tables_compare::@8
mul_tables_compare::@7: scope:[mul_tables_compare]  from mul_tables_compare::@2
  *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@3
mul_tables_compare::@4: scope:[mul_tables_compare]  from mul_tables_compare::@3 mul_tables_compare::@8
  if(*((const byte[512]) mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@5
  to:mul_tables_compare::@9
mul_tables_compare::@8: scope:[mul_tables_compare]  from mul_tables_compare::@3
  *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@4
mul_tables_compare::@5: scope:[mul_tables_compare]  from mul_tables_compare::@4 mul_tables_compare::@9
  (byte) mul_tables_compare::i#1 ← ++ (byte) mul_tables_compare::i#10
  if((byte) mul_tables_compare::i#1!=(byte/signed byte/word/signed word) 0) goto mul_tables_compare::@1
  to:mul_tables_compare::@return
mul_tables_compare::@9: scope:[mul_tables_compare]  from mul_tables_compare::@4
  *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@5
mul_tables_compare::@return: scope:[mul_tables_compare]  from mul_tables_compare::@5
  return 
  to:@return
@4: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @4

FINAL SYMBOL TABLE
(label) @4
(label) @begin
(label) @end
(byte*) BGCOL
(const byte*) BGCOL#0 = ((byte*))(word) 53281
(byte[512]) asm_mul_sqr_hi
(const byte[512]) asm_mul_sqr_hi#0 = { fill( 512, 0) }
(byte[512]) asm_mul_sqr_lo
(const byte[512]) asm_mul_sqr_lo#0 = { fill( 512, 0) }
(void()) init_mul_tables()
(byte~) init_mul_tables::$0
(byte~) init_mul_tables::$12
(byte~) init_mul_tables::$14
(word~) init_mul_tables::$15
(byte~) init_mul_tables::$16
(byte~) init_mul_tables::$3
(byte~) init_mul_tables::$4
(byte~) init_mul_tables::$5
(byte~) init_mul_tables::$8
(label) init_mul_tables::@1
(label) init_mul_tables::@2
(label) init_mul_tables::@3
(label) init_mul_tables::@4
(label) init_mul_tables::@5
(label) init_mul_tables::@7
(label) init_mul_tables::@return
(byte) init_mul_tables::i
(byte) init_mul_tables::i#1
(byte) init_mul_tables::i#3
(byte) init_mul_tables::i#4
(byte) init_mul_tables::i#6
(word) init_mul_tables::sqr
(word) init_mul_tables::sqr#1
(word) init_mul_tables::sqr#10
(word) init_mul_tables::sqr#2
(word) init_mul_tables::sqr#3
(word) init_mul_tables::sqr#4
(word) init_mul_tables::sqr#5
(word) init_mul_tables::sqr#6
(word) init_mul_tables::sqr#7
(void()) init_mul_tables_asm()
(label) init_mul_tables_asm::@return
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(byte[512]) mul_sqr_hi
(const byte[512]) mul_sqr_hi#0 = { fill( 512, 0) }
(byte[512]) mul_sqr_lo
(const byte[512]) mul_sqr_lo#0 = { fill( 512, 0) }
(void()) mul_tables_compare()
(label) mul_tables_compare::@1
(label) mul_tables_compare::@2
(label) mul_tables_compare::@3
(label) mul_tables_compare::@4
(label) mul_tables_compare::@5
(label) mul_tables_compare::@6
(label) mul_tables_compare::@7
(label) mul_tables_compare::@8
(label) mul_tables_compare::@9
(label) mul_tables_compare::@return
(byte) mul_tables_compare::i
(byte) mul_tables_compare::i#1
(byte) mul_tables_compare::i#10

Block Sequence Planned @begin @4 @end main main::@1 main::@2 main::@return mul_tables_compare mul_tables_compare::@1 mul_tables_compare::@6 mul_tables_compare::@2 mul_tables_compare::@7 mul_tables_compare::@3 mul_tables_compare::@8 mul_tables_compare::@4 mul_tables_compare::@9 mul_tables_compare::@5 mul_tables_compare::@return init_mul_tables_asm init_mul_tables_asm::@return init_mul_tables init_mul_tables::@1 init_mul_tables::@5 init_mul_tables::@2 init_mul_tables::@3 init_mul_tables::@7 init_mul_tables::@4 init_mul_tables::@return 
Added new block during phi lifting mul_tables_compare::@11(between mul_tables_compare::@5 and mul_tables_compare::@1)
Added new block during phi lifting init_mul_tables::@9(between init_mul_tables::@2 and init_mul_tables::@1)
Added new block during phi lifting init_mul_tables::@10(between init_mul_tables::@1 and init_mul_tables::@2)
Added new block during phi lifting init_mul_tables::@11(between init_mul_tables::@4 and init_mul_tables::@3)
Added new block during phi lifting init_mul_tables::@12(between init_mul_tables::@2 and init_mul_tables::@3)
Added new block during phi lifting init_mul_tables::@13(between init_mul_tables::@3 and init_mul_tables::@4)
Block Sequence Planned @begin @4 @end main main::@1 main::@2 main::@return mul_tables_compare mul_tables_compare::@1 mul_tables_compare::@6 mul_tables_compare::@2 mul_tables_compare::@7 mul_tables_compare::@3 mul_tables_compare::@8 mul_tables_compare::@4 mul_tables_compare::@9 mul_tables_compare::@5 mul_tables_compare::@return mul_tables_compare::@11 init_mul_tables_asm init_mul_tables_asm::@return init_mul_tables init_mul_tables::@1 init_mul_tables::@5 init_mul_tables::@2 init_mul_tables::@12 init_mul_tables::@3 init_mul_tables::@7 init_mul_tables::@4 init_mul_tables::@return init_mul_tables::@11 init_mul_tables::@13 init_mul_tables::@9 init_mul_tables::@10 
CONTROL FLOW GRAPH - PHI LIFTED
@begin: scope:[]  from
  to:@4
@4: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @4
main: scope:[main]  from @4
  call init_mul_tables param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  call init_mul_tables_asm param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  call mul_tables_compare param-assignment
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
mul_tables_compare: scope:[mul_tables_compare]  from main::@2
  *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 5
  to:mul_tables_compare::@1
mul_tables_compare::@1: scope:[mul_tables_compare]  from mul_tables_compare mul_tables_compare::@11
  (byte) mul_tables_compare::i#10 ← phi( mul_tables_compare/(byte/signed byte/word/signed word) 0 mul_tables_compare::@11/(byte~) mul_tables_compare::i#11 )
  if(*((const byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@2
  to:mul_tables_compare::@6
mul_tables_compare::@6: scope:[mul_tables_compare]  from mul_tables_compare::@1
  *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@2
mul_tables_compare::@2: scope:[mul_tables_compare]  from mul_tables_compare::@1 mul_tables_compare::@6
  if(*((const byte[512]) mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@3
  to:mul_tables_compare::@7
mul_tables_compare::@7: scope:[mul_tables_compare]  from mul_tables_compare::@2
  *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@3
mul_tables_compare::@3: scope:[mul_tables_compare]  from mul_tables_compare::@2 mul_tables_compare::@7
  if(*((const byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@4
  to:mul_tables_compare::@8
mul_tables_compare::@8: scope:[mul_tables_compare]  from mul_tables_compare::@3
  *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@4
mul_tables_compare::@4: scope:[mul_tables_compare]  from mul_tables_compare::@3 mul_tables_compare::@8
  if(*((const byte[512]) mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@5
  to:mul_tables_compare::@9
mul_tables_compare::@9: scope:[mul_tables_compare]  from mul_tables_compare::@4
  *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@5
mul_tables_compare::@5: scope:[mul_tables_compare]  from mul_tables_compare::@4 mul_tables_compare::@9
  (byte) mul_tables_compare::i#1 ← ++ (byte) mul_tables_compare::i#10
  if((byte) mul_tables_compare::i#1!=(byte/signed byte/word/signed word) 0) goto mul_tables_compare::@11
  to:mul_tables_compare::@return
mul_tables_compare::@return: scope:[mul_tables_compare]  from mul_tables_compare::@5
  return 
  to:@return
mul_tables_compare::@11: scope:[mul_tables_compare]  from mul_tables_compare::@5
  (byte~) mul_tables_compare::i#11 ← (byte) mul_tables_compare::i#1
  to:mul_tables_compare::@1
init_mul_tables_asm: scope:[init_mul_tables_asm]  from main::@1
  asm { ldx#$00txa.byte$c9lb1:tyaadc#$00ml1:staasm_mul_sqr_hi,xtaycmp#$40txarorml9:adc#$00staml9+1inxml0:staasm_mul_sqr_lo,xbnelb1incml0+2incml1+2clcinybnelb1 }
  to:init_mul_tables_asm::@return
init_mul_tables_asm::@return: scope:[init_mul_tables_asm]  from init_mul_tables_asm
  return 
  to:@return
init_mul_tables: scope:[init_mul_tables]  from main
  to:init_mul_tables::@1
init_mul_tables::@1: scope:[init_mul_tables]  from init_mul_tables init_mul_tables::@9
  (word) init_mul_tables::sqr#6 ← phi( init_mul_tables/(byte/signed byte/word/signed word) 0 init_mul_tables::@9/(word~) init_mul_tables::sqr#12 )
  (byte) init_mul_tables::i#4 ← phi( init_mul_tables/(byte/signed byte/word/signed word) 1 init_mul_tables::@9/(byte~) init_mul_tables::i#10 )
  (byte~) init_mul_tables::$0 ← (byte) init_mul_tables::i#4 & (byte/signed byte/word/signed word) 1
  if((byte~) init_mul_tables::$0!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@10
  to:init_mul_tables::@5
init_mul_tables::@5: scope:[init_mul_tables]  from init_mul_tables::@1
  (word) init_mul_tables::sqr#2 ← ++ (word) init_mul_tables::sqr#6
  (word~) init_mul_tables::sqr#14 ← (word) init_mul_tables::sqr#2
  to:init_mul_tables::@2
init_mul_tables::@2: scope:[init_mul_tables]  from init_mul_tables::@10 init_mul_tables::@5
  (word) init_mul_tables::sqr#5 ← phi( init_mul_tables::@10/(word~) init_mul_tables::sqr#13 init_mul_tables::@5/(word~) init_mul_tables::sqr#14 )
  (byte~) init_mul_tables::$3 ← < (word) init_mul_tables::sqr#5
  *((const byte[512]) mul_sqr_lo#0 + (byte) init_mul_tables::i#4) ← (byte~) init_mul_tables::$3
  (byte~) init_mul_tables::$4 ← > (word) init_mul_tables::sqr#5
  *((const byte[512]) mul_sqr_hi#0 + (byte) init_mul_tables::i#4) ← (byte~) init_mul_tables::$4
  (byte~) init_mul_tables::$5 ← (byte) init_mul_tables::i#4 >> (byte/signed byte/word/signed word) 1
  (word) init_mul_tables::sqr#1 ← (word) init_mul_tables::sqr#5 + (byte~) init_mul_tables::$5
  (byte) init_mul_tables::i#1 ← ++ (byte) init_mul_tables::i#4
  if((byte) init_mul_tables::i#1!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@9
  to:init_mul_tables::@12
init_mul_tables::@12: scope:[init_mul_tables]  from init_mul_tables::@2
  (word~) init_mul_tables::sqr#16 ← (word) init_mul_tables::sqr#1
  to:init_mul_tables::@3
init_mul_tables::@3: scope:[init_mul_tables]  from init_mul_tables::@11 init_mul_tables::@12
  (word) init_mul_tables::sqr#10 ← phi( init_mul_tables::@11/(word~) init_mul_tables::sqr#15 init_mul_tables::@12/(word~) init_mul_tables::sqr#16 )
  (byte) init_mul_tables::i#6 ← phi( init_mul_tables::@11/(byte~) init_mul_tables::i#11 init_mul_tables::@2/(byte/signed byte/word/signed word) 0 )
  (byte~) init_mul_tables::$8 ← (byte) init_mul_tables::i#6 & (byte/signed byte/word/signed word) 1
  if((byte~) init_mul_tables::$8!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@13
  to:init_mul_tables::@7
init_mul_tables::@7: scope:[init_mul_tables]  from init_mul_tables::@3
  (word) init_mul_tables::sqr#4 ← ++ (word) init_mul_tables::sqr#10
  (word~) init_mul_tables::sqr#18 ← (word) init_mul_tables::sqr#4
  to:init_mul_tables::@4
init_mul_tables::@4: scope:[init_mul_tables]  from init_mul_tables::@13 init_mul_tables::@7
  (word) init_mul_tables::sqr#7 ← phi( init_mul_tables::@13/(word~) init_mul_tables::sqr#17 init_mul_tables::@7/(word~) init_mul_tables::sqr#18 )
  (byte~) init_mul_tables::$12 ← < (word) init_mul_tables::sqr#7
  *((const byte[512]) mul_sqr_lo#0+(word/signed word) 256 + (byte) init_mul_tables::i#6) ← (byte~) init_mul_tables::$12
  (byte~) init_mul_tables::$14 ← > (word) init_mul_tables::sqr#7
  *((const byte[512]) mul_sqr_hi#0+(word/signed word) 256 + (byte) init_mul_tables::i#6) ← (byte~) init_mul_tables::$14
  (word~) init_mul_tables::$15 ← (word) init_mul_tables::sqr#7 + (byte/word/signed word) 128
  (byte~) init_mul_tables::$16 ← (byte) init_mul_tables::i#6 >> (byte/signed byte/word/signed word) 1
  (word) init_mul_tables::sqr#3 ← (word~) init_mul_tables::$15 + (byte~) init_mul_tables::$16
  (byte) init_mul_tables::i#3 ← ++ (byte) init_mul_tables::i#6
  if((byte) init_mul_tables::i#3!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@11
  to:init_mul_tables::@return
init_mul_tables::@return: scope:[init_mul_tables]  from init_mul_tables::@4
  return 
  to:@return
init_mul_tables::@11: scope:[init_mul_tables]  from init_mul_tables::@4
  (byte~) init_mul_tables::i#11 ← (byte) init_mul_tables::i#3
  (word~) init_mul_tables::sqr#15 ← (word) init_mul_tables::sqr#3
  to:init_mul_tables::@3
init_mul_tables::@13: scope:[init_mul_tables]  from init_mul_tables::@3
  (word~) init_mul_tables::sqr#17 ← (word) init_mul_tables::sqr#10
  to:init_mul_tables::@4
init_mul_tables::@9: scope:[init_mul_tables]  from init_mul_tables::@2
  (byte~) init_mul_tables::i#10 ← (byte) init_mul_tables::i#1
  (word~) init_mul_tables::sqr#12 ← (word) init_mul_tables::sqr#1
  to:init_mul_tables::@1
init_mul_tables::@10: scope:[init_mul_tables]  from init_mul_tables::@1
  (word~) init_mul_tables::sqr#13 ← (word) init_mul_tables::sqr#6
  to:init_mul_tables::@2

Adding NOP phi() at start of @begin
Adding NOP phi() at start of @4
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of init_mul_tables
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to init_mul_tables:5 init_mul_tables_asm:7 mul_tables_compare:9 

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - LIVE RANGES FOUND
@begin: scope:[]  from
  [0] phi() [ ]
  to:@4
@4: scope:[]  from @begin
  [1] phi() [ ]
  [2] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @4
  [3] phi() [ ]
main: scope:[main]  from @4
  [4] phi() [ ]
  [5] call init_mul_tables param-assignment [ ]
  to:main::@1
main::@1: scope:[main]  from main
  [6] phi() [ ]
  [7] call init_mul_tables_asm param-assignment [ ]
  to:main::@2
main::@2: scope:[main]  from main::@1
  [8] phi() [ ]
  [9] call mul_tables_compare param-assignment [ ]
  to:main::@return
main::@return: scope:[main]  from main::@2
  [10] return  [ ]
  to:@return
mul_tables_compare: scope:[mul_tables_compare]  from main::@2
  [11] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 5 [ ]
  to:mul_tables_compare::@1
mul_tables_compare::@1: scope:[mul_tables_compare]  from mul_tables_compare mul_tables_compare::@11
  [12] (byte) mul_tables_compare::i#10 ← phi( mul_tables_compare/(byte/signed byte/word/signed word) 0 mul_tables_compare::@11/(byte~) mul_tables_compare::i#11 ) [ mul_tables_compare::i#10 ]
  [13] if(*((const byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@2 [ mul_tables_compare::i#10 ]
  to:mul_tables_compare::@6
mul_tables_compare::@6: scope:[mul_tables_compare]  from mul_tables_compare::@1
  [14] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ]
  to:mul_tables_compare::@2
mul_tables_compare::@2: scope:[mul_tables_compare]  from mul_tables_compare::@1 mul_tables_compare::@6
  [15] if(*((const byte[512]) mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@3 [ mul_tables_compare::i#10 ]
  to:mul_tables_compare::@7
mul_tables_compare::@7: scope:[mul_tables_compare]  from mul_tables_compare::@2
  [16] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ]
  to:mul_tables_compare::@3
mul_tables_compare::@3: scope:[mul_tables_compare]  from mul_tables_compare::@2 mul_tables_compare::@7
  [17] if(*((const byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@4 [ mul_tables_compare::i#10 ]
  to:mul_tables_compare::@8
mul_tables_compare::@8: scope:[mul_tables_compare]  from mul_tables_compare::@3
  [18] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ]
  to:mul_tables_compare::@4
mul_tables_compare::@4: scope:[mul_tables_compare]  from mul_tables_compare::@3 mul_tables_compare::@8
  [19] if(*((const byte[512]) mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@5 [ mul_tables_compare::i#10 ]
  to:mul_tables_compare::@9
mul_tables_compare::@9: scope:[mul_tables_compare]  from mul_tables_compare::@4
  [20] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ]
  to:mul_tables_compare::@5
mul_tables_compare::@5: scope:[mul_tables_compare]  from mul_tables_compare::@4 mul_tables_compare::@9
  [21] (byte) mul_tables_compare::i#1 ← ++ (byte) mul_tables_compare::i#10 [ mul_tables_compare::i#1 ]
  [22] if((byte) mul_tables_compare::i#1!=(byte/signed byte/word/signed word) 0) goto mul_tables_compare::@11 [ mul_tables_compare::i#1 ]
  to:mul_tables_compare::@return
mul_tables_compare::@return: scope:[mul_tables_compare]  from mul_tables_compare::@5
  [23] return  [ ]
  to:@return
mul_tables_compare::@11: scope:[mul_tables_compare]  from mul_tables_compare::@5
  [24] (byte~) mul_tables_compare::i#11 ← (byte) mul_tables_compare::i#1 [ mul_tables_compare::i#11 ]
  to:mul_tables_compare::@1
init_mul_tables_asm: scope:[init_mul_tables_asm]  from main::@1
  asm { ldx#$00txa.byte$c9lb1:tyaadc#$00ml1:staasm_mul_sqr_hi,xtaycmp#$40txarorml9:adc#$00staml9+1inxml0:staasm_mul_sqr_lo,xbnelb1incml0+2incml1+2clcinybnelb1 }
  to:init_mul_tables_asm::@return
init_mul_tables_asm::@return: scope:[init_mul_tables_asm]  from init_mul_tables_asm
  [26] return  [ ]
  to:@return
init_mul_tables: scope:[init_mul_tables]  from main
  [27] phi() [ ]
  to:init_mul_tables::@1
init_mul_tables::@1: scope:[init_mul_tables]  from init_mul_tables init_mul_tables::@9
  [28] (word) init_mul_tables::sqr#6 ← phi( init_mul_tables/(byte/signed byte/word/signed word) 0 init_mul_tables::@9/(word~) init_mul_tables::sqr#12 ) [ init_mul_tables::i#4 init_mul_tables::sqr#6 ]
  [28] (byte) init_mul_tables::i#4 ← phi( init_mul_tables/(byte/signed byte/word/signed word) 1 init_mul_tables::@9/(byte~) init_mul_tables::i#10 ) [ init_mul_tables::i#4 init_mul_tables::sqr#6 ]
  [29] (byte~) init_mul_tables::$0 ← (byte) init_mul_tables::i#4 & (byte/signed byte/word/signed word) 1 [ init_mul_tables::i#4 init_mul_tables::sqr#6 init_mul_tables::$0 ]
  [30] if((byte~) init_mul_tables::$0!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@10 [ init_mul_tables::i#4 init_mul_tables::sqr#6 ]
  to:init_mul_tables::@5
init_mul_tables::@5: scope:[init_mul_tables]  from init_mul_tables::@1
  [31] (word) init_mul_tables::sqr#2 ← ++ (word) init_mul_tables::sqr#6 [ init_mul_tables::i#4 init_mul_tables::sqr#2 ]
  [32] (word~) init_mul_tables::sqr#14 ← (word) init_mul_tables::sqr#2 [ init_mul_tables::i#4 init_mul_tables::sqr#14 ]
  to:init_mul_tables::@2
init_mul_tables::@2: scope:[init_mul_tables]  from init_mul_tables::@10 init_mul_tables::@5
  [33] (word) init_mul_tables::sqr#5 ← phi( init_mul_tables::@10/(word~) init_mul_tables::sqr#13 init_mul_tables::@5/(word~) init_mul_tables::sqr#14 ) [ init_mul_tables::i#4 init_mul_tables::sqr#5 ]
  [34] (byte~) init_mul_tables::$3 ← < (word) init_mul_tables::sqr#5 [ init_mul_tables::i#4 init_mul_tables::sqr#5 init_mul_tables::$3 ]
  [35] *((const byte[512]) mul_sqr_lo#0 + (byte) init_mul_tables::i#4) ← (byte~) init_mul_tables::$3 [ init_mul_tables::i#4 init_mul_tables::sqr#5 ]
  [36] (byte~) init_mul_tables::$4 ← > (word) init_mul_tables::sqr#5 [ init_mul_tables::i#4 init_mul_tables::sqr#5 init_mul_tables::$4 ]
  [37] *((const byte[512]) mul_sqr_hi#0 + (byte) init_mul_tables::i#4) ← (byte~) init_mul_tables::$4 [ init_mul_tables::i#4 init_mul_tables::sqr#5 ]
  [38] (byte~) init_mul_tables::$5 ← (byte) init_mul_tables::i#4 >> (byte/signed byte/word/signed word) 1 [ init_mul_tables::i#4 init_mul_tables::sqr#5 init_mul_tables::$5 ]
  [39] (word) init_mul_tables::sqr#1 ← (word) init_mul_tables::sqr#5 + (byte~) init_mul_tables::$5 [ init_mul_tables::i#4 init_mul_tables::sqr#1 ]
  [40] (byte) init_mul_tables::i#1 ← ++ (byte) init_mul_tables::i#4 [ init_mul_tables::sqr#1 init_mul_tables::i#1 ]
  [41] if((byte) init_mul_tables::i#1!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@9 [ init_mul_tables::sqr#1 init_mul_tables::i#1 ]
  to:init_mul_tables::@12
init_mul_tables::@12: scope:[init_mul_tables]  from init_mul_tables::@2
  [42] (word~) init_mul_tables::sqr#16 ← (word) init_mul_tables::sqr#1 [ init_mul_tables::sqr#16 ]
  to:init_mul_tables::@3
init_mul_tables::@3: scope:[init_mul_tables]  from init_mul_tables::@11 init_mul_tables::@12
  [43] (word) init_mul_tables::sqr#10 ← phi( init_mul_tables::@11/(word~) init_mul_tables::sqr#15 init_mul_tables::@12/(word~) init_mul_tables::sqr#16 ) [ init_mul_tables::i#6 init_mul_tables::sqr#10 ]
  [43] (byte) init_mul_tables::i#6 ← phi( init_mul_tables::@11/(byte~) init_mul_tables::i#11 init_mul_tables::@2/(byte/signed byte/word/signed word) 0 ) [ init_mul_tables::i#6 init_mul_tables::sqr#10 ]
  [44] (byte~) init_mul_tables::$8 ← (byte) init_mul_tables::i#6 & (byte/signed byte/word/signed word) 1 [ init_mul_tables::i#6 init_mul_tables::sqr#10 init_mul_tables::$8 ]
  [45] if((byte~) init_mul_tables::$8!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@13 [ init_mul_tables::i#6 init_mul_tables::sqr#10 ]
  to:init_mul_tables::@7
init_mul_tables::@7: scope:[init_mul_tables]  from init_mul_tables::@3
  [46] (word) init_mul_tables::sqr#4 ← ++ (word) init_mul_tables::sqr#10 [ init_mul_tables::i#6 init_mul_tables::sqr#4 ]
  [47] (word~) init_mul_tables::sqr#18 ← (word) init_mul_tables::sqr#4 [ init_mul_tables::i#6 init_mul_tables::sqr#18 ]
  to:init_mul_tables::@4
init_mul_tables::@4: scope:[init_mul_tables]  from init_mul_tables::@13 init_mul_tables::@7
  [48] (word) init_mul_tables::sqr#7 ← phi( init_mul_tables::@13/(word~) init_mul_tables::sqr#17 init_mul_tables::@7/(word~) init_mul_tables::sqr#18 ) [ init_mul_tables::i#6 init_mul_tables::sqr#7 ]
  [49] (byte~) init_mul_tables::$12 ← < (word) init_mul_tables::sqr#7 [ init_mul_tables::i#6 init_mul_tables::sqr#7 init_mul_tables::$12 ]
  [50] *((const byte[512]) mul_sqr_lo#0+(word/signed word) 256 + (byte) init_mul_tables::i#6) ← (byte~) init_mul_tables::$12 [ init_mul_tables::i#6 init_mul_tables::sqr#7 ]
  [51] (byte~) init_mul_tables::$14 ← > (word) init_mul_tables::sqr#7 [ init_mul_tables::i#6 init_mul_tables::sqr#7 init_mul_tables::$14 ]
  [52] *((const byte[512]) mul_sqr_hi#0+(word/signed word) 256 + (byte) init_mul_tables::i#6) ← (byte~) init_mul_tables::$14 [ init_mul_tables::i#6 init_mul_tables::sqr#7 ]
  [53] (word~) init_mul_tables::$15 ← (word) init_mul_tables::sqr#7 + (byte/word/signed word) 128 [ init_mul_tables::i#6 init_mul_tables::$15 ]
  [54] (byte~) init_mul_tables::$16 ← (byte) init_mul_tables::i#6 >> (byte/signed byte/word/signed word) 1 [ init_mul_tables::i#6 init_mul_tables::$15 init_mul_tables::$16 ]
  [55] (word) init_mul_tables::sqr#3 ← (word~) init_mul_tables::$15 + (byte~) init_mul_tables::$16 [ init_mul_tables::i#6 init_mul_tables::sqr#3 ]
  [56] (byte) init_mul_tables::i#3 ← ++ (byte) init_mul_tables::i#6 [ init_mul_tables::sqr#3 init_mul_tables::i#3 ]
  [57] if((byte) init_mul_tables::i#3!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@11 [ init_mul_tables::sqr#3 init_mul_tables::i#3 ]
  to:init_mul_tables::@return
init_mul_tables::@return: scope:[init_mul_tables]  from init_mul_tables::@4
  [58] return  [ ]
  to:@return
init_mul_tables::@11: scope:[init_mul_tables]  from init_mul_tables::@4
  [59] (byte~) init_mul_tables::i#11 ← (byte) init_mul_tables::i#3 [ init_mul_tables::i#11 init_mul_tables::sqr#3 ]
  [60] (word~) init_mul_tables::sqr#15 ← (word) init_mul_tables::sqr#3 [ init_mul_tables::i#11 init_mul_tables::sqr#15 ]
  to:init_mul_tables::@3
init_mul_tables::@13: scope:[init_mul_tables]  from init_mul_tables::@3
  [61] (word~) init_mul_tables::sqr#17 ← (word) init_mul_tables::sqr#10 [ init_mul_tables::i#6 init_mul_tables::sqr#17 ]
  to:init_mul_tables::@4
init_mul_tables::@9: scope:[init_mul_tables]  from init_mul_tables::@2
  [62] (byte~) init_mul_tables::i#10 ← (byte) init_mul_tables::i#1 [ init_mul_tables::i#10 init_mul_tables::sqr#1 ]
  [63] (word~) init_mul_tables::sqr#12 ← (word) init_mul_tables::sqr#1 [ init_mul_tables::i#10 init_mul_tables::sqr#12 ]
  to:init_mul_tables::@1
init_mul_tables::@10: scope:[init_mul_tables]  from init_mul_tables::@1
  [64] (word~) init_mul_tables::sqr#13 ← (word) init_mul_tables::sqr#6 [ init_mul_tables::i#4 init_mul_tables::sqr#13 ]
  to:init_mul_tables::@2

Created 7 initial phi equivalence classes
Coalesced [24] mul_tables_compare::i#11 ← mul_tables_compare::i#1
Coalesced [32] init_mul_tables::sqr#14 ← init_mul_tables::sqr#2
Coalesced [42] init_mul_tables::sqr#16 ← init_mul_tables::sqr#1
Coalesced [47] init_mul_tables::sqr#18 ← init_mul_tables::sqr#4
Coalesced [59] init_mul_tables::i#11 ← init_mul_tables::i#3
Coalesced [60] init_mul_tables::sqr#15 ← init_mul_tables::sqr#3
Coalesced [61] init_mul_tables::sqr#17 ← init_mul_tables::sqr#10
Coalesced [62] init_mul_tables::i#10 ← init_mul_tables::i#1
Coalesced [63] init_mul_tables::sqr#12 ← init_mul_tables::sqr#1
Coalesced [64] init_mul_tables::sqr#13 ← init_mul_tables::sqr#6
Coalesced down to 4 phi equivalence classes
Culled Empty Block (label) mul_tables_compare::@11
Culled Empty Block (label) init_mul_tables::@12
Culled Empty Block (label) init_mul_tables::@11
Culled Empty Block (label) init_mul_tables::@13
Culled Empty Block (label) init_mul_tables::@9
Culled Empty Block (label) init_mul_tables::@10
Block Sequence Planned @begin @4 @end main main::@1 main::@2 main::@return mul_tables_compare mul_tables_compare::@1 mul_tables_compare::@6 mul_tables_compare::@2 mul_tables_compare::@7 mul_tables_compare::@3 mul_tables_compare::@8 mul_tables_compare::@4 mul_tables_compare::@9 mul_tables_compare::@5 mul_tables_compare::@return init_mul_tables_asm init_mul_tables_asm::@return init_mul_tables init_mul_tables::@1 init_mul_tables::@5 init_mul_tables::@2 init_mul_tables::@3 init_mul_tables::@7 init_mul_tables::@4 init_mul_tables::@return 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @4
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of init_mul_tables
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - BEFORE EFFECTIVE LIVE RANGES
@begin: scope:[]  from
  [0] phi() [ ]
  to:@4
@4: scope:[]  from @begin
  [1] phi() [ ]
  [2] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @4
  [3] phi() [ ]
main: scope:[main]  from @4
  [4] phi() [ ]
  [5] call init_mul_tables param-assignment [ ]
  to:main::@1
main::@1: scope:[main]  from main
  [6] phi() [ ]
  [7] call init_mul_tables_asm param-assignment [ ]
  to:main::@2
main::@2: scope:[main]  from main::@1
  [8] phi() [ ]
  [9] call mul_tables_compare param-assignment [ ]
  to:main::@return
main::@return: scope:[main]  from main::@2
  [10] return  [ ]
  to:@return
mul_tables_compare: scope:[mul_tables_compare]  from main::@2
  [11] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 5 [ ]
  to:mul_tables_compare::@1
mul_tables_compare::@1: scope:[mul_tables_compare]  from mul_tables_compare mul_tables_compare::@5
  [12] (byte) mul_tables_compare::i#10 ← phi( mul_tables_compare/(byte/signed byte/word/signed word) 0 mul_tables_compare::@5/(byte) mul_tables_compare::i#1 ) [ mul_tables_compare::i#10 ]
  [13] if(*((const byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@2 [ mul_tables_compare::i#10 ]
  to:mul_tables_compare::@6
mul_tables_compare::@6: scope:[mul_tables_compare]  from mul_tables_compare::@1
  [14] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ]
  to:mul_tables_compare::@2
mul_tables_compare::@2: scope:[mul_tables_compare]  from mul_tables_compare::@1 mul_tables_compare::@6
  [15] if(*((const byte[512]) mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@3 [ mul_tables_compare::i#10 ]
  to:mul_tables_compare::@7
mul_tables_compare::@7: scope:[mul_tables_compare]  from mul_tables_compare::@2
  [16] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ]
  to:mul_tables_compare::@3
mul_tables_compare::@3: scope:[mul_tables_compare]  from mul_tables_compare::@2 mul_tables_compare::@7
  [17] if(*((const byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@4 [ mul_tables_compare::i#10 ]
  to:mul_tables_compare::@8
mul_tables_compare::@8: scope:[mul_tables_compare]  from mul_tables_compare::@3
  [18] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ]
  to:mul_tables_compare::@4
mul_tables_compare::@4: scope:[mul_tables_compare]  from mul_tables_compare::@3 mul_tables_compare::@8
  [19] if(*((const byte[512]) mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@5 [ mul_tables_compare::i#10 ]
  to:mul_tables_compare::@9
mul_tables_compare::@9: scope:[mul_tables_compare]  from mul_tables_compare::@4
  [20] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ]
  to:mul_tables_compare::@5
mul_tables_compare::@5: scope:[mul_tables_compare]  from mul_tables_compare::@4 mul_tables_compare::@9
  [21] (byte) mul_tables_compare::i#1 ← ++ (byte) mul_tables_compare::i#10 [ mul_tables_compare::i#1 ]
  [22] if((byte) mul_tables_compare::i#1!=(byte/signed byte/word/signed word) 0) goto mul_tables_compare::@1 [ mul_tables_compare::i#1 ]
  to:mul_tables_compare::@return
mul_tables_compare::@return: scope:[mul_tables_compare]  from mul_tables_compare::@5
  [23] return  [ ]
  to:@return
init_mul_tables_asm: scope:[init_mul_tables_asm]  from main::@1
  asm { ldx#$00txa.byte$c9lb1:tyaadc#$00ml1:staasm_mul_sqr_hi,xtaycmp#$40txarorml9:adc#$00staml9+1inxml0:staasm_mul_sqr_lo,xbnelb1incml0+2incml1+2clcinybnelb1 }
  to:init_mul_tables_asm::@return
init_mul_tables_asm::@return: scope:[init_mul_tables_asm]  from init_mul_tables_asm
  [25] return  [ ]
  to:@return
init_mul_tables: scope:[init_mul_tables]  from main
  [26] phi() [ ]
  to:init_mul_tables::@1
init_mul_tables::@1: scope:[init_mul_tables]  from init_mul_tables init_mul_tables::@2
  [27] (word) init_mul_tables::sqr#6 ← phi( init_mul_tables/(byte/signed byte/word/signed word) 0 init_mul_tables::@2/(word) init_mul_tables::sqr#1 ) [ init_mul_tables::i#4 init_mul_tables::sqr#6 ]
  [27] (byte) init_mul_tables::i#4 ← phi( init_mul_tables/(byte/signed byte/word/signed word) 1 init_mul_tables::@2/(byte) init_mul_tables::i#1 ) [ init_mul_tables::i#4 init_mul_tables::sqr#6 ]
  [28] (byte~) init_mul_tables::$0 ← (byte) init_mul_tables::i#4 & (byte/signed byte/word/signed word) 1 [ init_mul_tables::i#4 init_mul_tables::sqr#6 init_mul_tables::$0 ]
  [29] if((byte~) init_mul_tables::$0!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@2 [ init_mul_tables::i#4 init_mul_tables::sqr#6 ]
  to:init_mul_tables::@5
init_mul_tables::@5: scope:[init_mul_tables]  from init_mul_tables::@1
  [30] (word) init_mul_tables::sqr#2 ← ++ (word) init_mul_tables::sqr#6 [ init_mul_tables::i#4 init_mul_tables::sqr#2 ]
  to:init_mul_tables::@2
init_mul_tables::@2: scope:[init_mul_tables]  from init_mul_tables::@1 init_mul_tables::@5
  [31] (word) init_mul_tables::sqr#5 ← phi( init_mul_tables::@1/(word) init_mul_tables::sqr#6 init_mul_tables::@5/(word) init_mul_tables::sqr#2 ) [ init_mul_tables::i#4 init_mul_tables::sqr#5 ]
  [32] (byte~) init_mul_tables::$3 ← < (word) init_mul_tables::sqr#5 [ init_mul_tables::i#4 init_mul_tables::sqr#5 init_mul_tables::$3 ]
  [33] *((const byte[512]) mul_sqr_lo#0 + (byte) init_mul_tables::i#4) ← (byte~) init_mul_tables::$3 [ init_mul_tables::i#4 init_mul_tables::sqr#5 ]
  [34] (byte~) init_mul_tables::$4 ← > (word) init_mul_tables::sqr#5 [ init_mul_tables::i#4 init_mul_tables::sqr#5 init_mul_tables::$4 ]
  [35] *((const byte[512]) mul_sqr_hi#0 + (byte) init_mul_tables::i#4) ← (byte~) init_mul_tables::$4 [ init_mul_tables::i#4 init_mul_tables::sqr#5 ]
  [36] (byte~) init_mul_tables::$5 ← (byte) init_mul_tables::i#4 >> (byte/signed byte/word/signed word) 1 [ init_mul_tables::i#4 init_mul_tables::sqr#5 init_mul_tables::$5 ]
  [37] (word) init_mul_tables::sqr#1 ← (word) init_mul_tables::sqr#5 + (byte~) init_mul_tables::$5 [ init_mul_tables::i#4 init_mul_tables::sqr#1 ]
  [38] (byte) init_mul_tables::i#1 ← ++ (byte) init_mul_tables::i#4 [ init_mul_tables::i#1 init_mul_tables::sqr#1 ]
  [39] if((byte) init_mul_tables::i#1!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@1 [ init_mul_tables::i#1 init_mul_tables::sqr#1 ]
  to:init_mul_tables::@3
init_mul_tables::@3: scope:[init_mul_tables]  from init_mul_tables::@2 init_mul_tables::@4
  [40] (word) init_mul_tables::sqr#10 ← phi( init_mul_tables::@4/(word) init_mul_tables::sqr#3 init_mul_tables::@2/(word) init_mul_tables::sqr#1 ) [ init_mul_tables::i#6 init_mul_tables::sqr#10 ]
  [40] (byte) init_mul_tables::i#6 ← phi( init_mul_tables::@4/(byte) init_mul_tables::i#3 init_mul_tables::@2/(byte/signed byte/word/signed word) 0 ) [ init_mul_tables::i#6 init_mul_tables::sqr#10 ]
  [41] (byte~) init_mul_tables::$8 ← (byte) init_mul_tables::i#6 & (byte/signed byte/word/signed word) 1 [ init_mul_tables::i#6 init_mul_tables::sqr#10 init_mul_tables::$8 ]
  [42] if((byte~) init_mul_tables::$8!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@4 [ init_mul_tables::i#6 init_mul_tables::sqr#10 ]
  to:init_mul_tables::@7
init_mul_tables::@7: scope:[init_mul_tables]  from init_mul_tables::@3
  [43] (word) init_mul_tables::sqr#4 ← ++ (word) init_mul_tables::sqr#10 [ init_mul_tables::i#6 init_mul_tables::sqr#4 ]
  to:init_mul_tables::@4
init_mul_tables::@4: scope:[init_mul_tables]  from init_mul_tables::@3 init_mul_tables::@7
  [44] (word) init_mul_tables::sqr#7 ← phi( init_mul_tables::@3/(word) init_mul_tables::sqr#10 init_mul_tables::@7/(word) init_mul_tables::sqr#4 ) [ init_mul_tables::i#6 init_mul_tables::sqr#7 ]
  [45] (byte~) init_mul_tables::$12 ← < (word) init_mul_tables::sqr#7 [ init_mul_tables::i#6 init_mul_tables::sqr#7 init_mul_tables::$12 ]
  [46] *((const byte[512]) mul_sqr_lo#0+(word/signed word) 256 + (byte) init_mul_tables::i#6) ← (byte~) init_mul_tables::$12 [ init_mul_tables::i#6 init_mul_tables::sqr#7 ]
  [47] (byte~) init_mul_tables::$14 ← > (word) init_mul_tables::sqr#7 [ init_mul_tables::i#6 init_mul_tables::sqr#7 init_mul_tables::$14 ]
  [48] *((const byte[512]) mul_sqr_hi#0+(word/signed word) 256 + (byte) init_mul_tables::i#6) ← (byte~) init_mul_tables::$14 [ init_mul_tables::i#6 init_mul_tables::sqr#7 ]
  [49] (word~) init_mul_tables::$15 ← (word) init_mul_tables::sqr#7 + (byte/word/signed word) 128 [ init_mul_tables::i#6 init_mul_tables::$15 ]
  [50] (byte~) init_mul_tables::$16 ← (byte) init_mul_tables::i#6 >> (byte/signed byte/word/signed word) 1 [ init_mul_tables::i#6 init_mul_tables::$15 init_mul_tables::$16 ]
  [51] (word) init_mul_tables::sqr#3 ← (word~) init_mul_tables::$15 + (byte~) init_mul_tables::$16 [ init_mul_tables::i#6 init_mul_tables::sqr#3 ]
  [52] (byte) init_mul_tables::i#3 ← ++ (byte) init_mul_tables::i#6 [ init_mul_tables::i#3 init_mul_tables::sqr#3 ]
  [53] if((byte) init_mul_tables::i#3!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@3 [ init_mul_tables::i#3 init_mul_tables::sqr#3 ]
  to:init_mul_tables::@return
init_mul_tables::@return: scope:[init_mul_tables]  from init_mul_tables::@4
  [54] return  [ ]
  to:@return

CONTROL FLOW GRAPH - PHI MEM COALESCED
@begin: scope:[]  from
  [0] phi() [ ] ( )
  to:@4
@4: scope:[]  from @begin
  [1] phi() [ ] ( )
  [2] call main param-assignment [ ] ( )
  to:@end
@end: scope:[]  from @4
  [3] phi() [ ] ( )
main: scope:[main]  from @4
  [4] phi() [ ] ( main:2 [ ] )
  [5] call init_mul_tables param-assignment [ ] ( main:2 [ ] )
  to:main::@1
main::@1: scope:[main]  from main
  [6] phi() [ ] ( main:2 [ ] )
  [7] call init_mul_tables_asm param-assignment [ ] ( main:2 [ ] )
  to:main::@2
main::@2: scope:[main]  from main::@1
  [8] phi() [ ] ( main:2 [ ] )
  [9] call mul_tables_compare param-assignment [ ] ( main:2 [ ] )
  to:main::@return
main::@return: scope:[main]  from main::@2
  [10] return  [ ] ( main:2 [ ] )
  to:@return
mul_tables_compare: scope:[mul_tables_compare]  from main::@2
  [11] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 5 [ ] ( main:2::mul_tables_compare:9 [ ] )
  to:mul_tables_compare::@1
mul_tables_compare::@1: scope:[mul_tables_compare]  from mul_tables_compare mul_tables_compare::@5
  [12] (byte) mul_tables_compare::i#10 ← phi( mul_tables_compare/(byte/signed byte/word/signed word) 0 mul_tables_compare::@5/(byte) mul_tables_compare::i#1 ) [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] )
  [13] if(*((const byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] )
  to:mul_tables_compare::@6
mul_tables_compare::@6: scope:[mul_tables_compare]  from mul_tables_compare::@1
  [14] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] )
  to:mul_tables_compare::@2
mul_tables_compare::@2: scope:[mul_tables_compare]  from mul_tables_compare::@1 mul_tables_compare::@6
  [15] if(*((const byte[512]) mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@3 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] )
  to:mul_tables_compare::@7
mul_tables_compare::@7: scope:[mul_tables_compare]  from mul_tables_compare::@2
  [16] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] )
  to:mul_tables_compare::@3
mul_tables_compare::@3: scope:[mul_tables_compare]  from mul_tables_compare::@2 mul_tables_compare::@7
  [17] if(*((const byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@4 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] )
  to:mul_tables_compare::@8
mul_tables_compare::@8: scope:[mul_tables_compare]  from mul_tables_compare::@3
  [18] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] )
  to:mul_tables_compare::@4
mul_tables_compare::@4: scope:[mul_tables_compare]  from mul_tables_compare::@3 mul_tables_compare::@8
  [19] if(*((const byte[512]) mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@5 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] )
  to:mul_tables_compare::@9
mul_tables_compare::@9: scope:[mul_tables_compare]  from mul_tables_compare::@4
  [20] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] )
  to:mul_tables_compare::@5
mul_tables_compare::@5: scope:[mul_tables_compare]  from mul_tables_compare::@4 mul_tables_compare::@9
  [21] (byte) mul_tables_compare::i#1 ← ++ (byte) mul_tables_compare::i#10 [ mul_tables_compare::i#1 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#1 ] )
  [22] if((byte) mul_tables_compare::i#1!=(byte/signed byte/word/signed word) 0) goto mul_tables_compare::@1 [ mul_tables_compare::i#1 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#1 ] )
  to:mul_tables_compare::@return
mul_tables_compare::@return: scope:[mul_tables_compare]  from mul_tables_compare::@5
  [23] return  [ ] ( main:2::mul_tables_compare:9 [ ] )
  to:@return
init_mul_tables_asm: scope:[init_mul_tables_asm]  from main::@1
  asm { ldx#$00txa.byte$c9lb1:tyaadc#$00ml1:staasm_mul_sqr_hi,xtaycmp#$40txarorml9:adc#$00staml9+1inxml0:staasm_mul_sqr_lo,xbnelb1incml0+2incml1+2clcinybnelb1 }
  to:init_mul_tables_asm::@return
init_mul_tables_asm::@return: scope:[init_mul_tables_asm]  from init_mul_tables_asm
  [25] return  [ ] ( main:2::init_mul_tables_asm:7 [ ] )
  to:@return
init_mul_tables: scope:[init_mul_tables]  from main
  [26] phi() [ ] ( main:2::init_mul_tables:5 [ ] )
  to:init_mul_tables::@1
init_mul_tables::@1: scope:[init_mul_tables]  from init_mul_tables init_mul_tables::@2
  [27] (word) init_mul_tables::sqr#6 ← phi( init_mul_tables/(byte/signed byte/word/signed word) 0 init_mul_tables::@2/(word) init_mul_tables::sqr#1 ) [ init_mul_tables::i#4 init_mul_tables::sqr#6 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#4 init_mul_tables::sqr#6 ] )
  [27] (byte) init_mul_tables::i#4 ← phi( init_mul_tables/(byte/signed byte/word/signed word) 1 init_mul_tables::@2/(byte) init_mul_tables::i#1 ) [ init_mul_tables::i#4 init_mul_tables::sqr#6 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#4 init_mul_tables::sqr#6 ] )
  [28] (byte~) init_mul_tables::$0 ← (byte) init_mul_tables::i#4 & (byte/signed byte/word/signed word) 1 [ init_mul_tables::i#4 init_mul_tables::sqr#6 init_mul_tables::$0 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#4 init_mul_tables::sqr#6 init_mul_tables::$0 ] )
  [29] if((byte~) init_mul_tables::$0!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@2 [ init_mul_tables::i#4 init_mul_tables::sqr#6 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#4 init_mul_tables::sqr#6 ] )
  to:init_mul_tables::@5
init_mul_tables::@5: scope:[init_mul_tables]  from init_mul_tables::@1
  [30] (word) init_mul_tables::sqr#2 ← ++ (word) init_mul_tables::sqr#6 [ init_mul_tables::i#4 init_mul_tables::sqr#2 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#4 init_mul_tables::sqr#2 ] )
  to:init_mul_tables::@2
init_mul_tables::@2: scope:[init_mul_tables]  from init_mul_tables::@1 init_mul_tables::@5
  [31] (word) init_mul_tables::sqr#5 ← phi( init_mul_tables::@1/(word) init_mul_tables::sqr#6 init_mul_tables::@5/(word) init_mul_tables::sqr#2 ) [ init_mul_tables::i#4 init_mul_tables::sqr#5 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#4 init_mul_tables::sqr#5 ] )
  [32] (byte~) init_mul_tables::$3 ← < (word) init_mul_tables::sqr#5 [ init_mul_tables::i#4 init_mul_tables::sqr#5 init_mul_tables::$3 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#4 init_mul_tables::sqr#5 init_mul_tables::$3 ] )
  [33] *((const byte[512]) mul_sqr_lo#0 + (byte) init_mul_tables::i#4) ← (byte~) init_mul_tables::$3 [ init_mul_tables::i#4 init_mul_tables::sqr#5 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#4 init_mul_tables::sqr#5 ] )
  [34] (byte~) init_mul_tables::$4 ← > (word) init_mul_tables::sqr#5 [ init_mul_tables::i#4 init_mul_tables::sqr#5 init_mul_tables::$4 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#4 init_mul_tables::sqr#5 init_mul_tables::$4 ] )
  [35] *((const byte[512]) mul_sqr_hi#0 + (byte) init_mul_tables::i#4) ← (byte~) init_mul_tables::$4 [ init_mul_tables::i#4 init_mul_tables::sqr#5 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#4 init_mul_tables::sqr#5 ] )
  [36] (byte~) init_mul_tables::$5 ← (byte) init_mul_tables::i#4 >> (byte/signed byte/word/signed word) 1 [ init_mul_tables::i#4 init_mul_tables::sqr#5 init_mul_tables::$5 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#4 init_mul_tables::sqr#5 init_mul_tables::$5 ] )
  [37] (word) init_mul_tables::sqr#1 ← (word) init_mul_tables::sqr#5 + (byte~) init_mul_tables::$5 [ init_mul_tables::i#4 init_mul_tables::sqr#1 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#4 init_mul_tables::sqr#1 ] )
  [38] (byte) init_mul_tables::i#1 ← ++ (byte) init_mul_tables::i#4 [ init_mul_tables::i#1 init_mul_tables::sqr#1 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#1 init_mul_tables::sqr#1 ] )
  [39] if((byte) init_mul_tables::i#1!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@1 [ init_mul_tables::i#1 init_mul_tables::sqr#1 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#1 init_mul_tables::sqr#1 ] )
  to:init_mul_tables::@3
init_mul_tables::@3: scope:[init_mul_tables]  from init_mul_tables::@2 init_mul_tables::@4
  [40] (word) init_mul_tables::sqr#10 ← phi( init_mul_tables::@4/(word) init_mul_tables::sqr#3 init_mul_tables::@2/(word) init_mul_tables::sqr#1 ) [ init_mul_tables::i#6 init_mul_tables::sqr#10 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::sqr#10 ] )
  [40] (byte) init_mul_tables::i#6 ← phi( init_mul_tables::@4/(byte) init_mul_tables::i#3 init_mul_tables::@2/(byte/signed byte/word/signed word) 0 ) [ init_mul_tables::i#6 init_mul_tables::sqr#10 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::sqr#10 ] )
  [41] (byte~) init_mul_tables::$8 ← (byte) init_mul_tables::i#6 & (byte/signed byte/word/signed word) 1 [ init_mul_tables::i#6 init_mul_tables::sqr#10 init_mul_tables::$8 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::sqr#10 init_mul_tables::$8 ] )
  [42] if((byte~) init_mul_tables::$8!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@4 [ init_mul_tables::i#6 init_mul_tables::sqr#10 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::sqr#10 ] )
  to:init_mul_tables::@7
init_mul_tables::@7: scope:[init_mul_tables]  from init_mul_tables::@3
  [43] (word) init_mul_tables::sqr#4 ← ++ (word) init_mul_tables::sqr#10 [ init_mul_tables::i#6 init_mul_tables::sqr#4 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::sqr#4 ] )
  to:init_mul_tables::@4
init_mul_tables::@4: scope:[init_mul_tables]  from init_mul_tables::@3 init_mul_tables::@7
  [44] (word) init_mul_tables::sqr#7 ← phi( init_mul_tables::@3/(word) init_mul_tables::sqr#10 init_mul_tables::@7/(word) init_mul_tables::sqr#4 ) [ init_mul_tables::i#6 init_mul_tables::sqr#7 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::sqr#7 ] )
  [45] (byte~) init_mul_tables::$12 ← < (word) init_mul_tables::sqr#7 [ init_mul_tables::i#6 init_mul_tables::sqr#7 init_mul_tables::$12 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::sqr#7 init_mul_tables::$12 ] )
  [46] *((const byte[512]) mul_sqr_lo#0+(word/signed word) 256 + (byte) init_mul_tables::i#6) ← (byte~) init_mul_tables::$12 [ init_mul_tables::i#6 init_mul_tables::sqr#7 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::sqr#7 ] )
  [47] (byte~) init_mul_tables::$14 ← > (word) init_mul_tables::sqr#7 [ init_mul_tables::i#6 init_mul_tables::sqr#7 init_mul_tables::$14 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::sqr#7 init_mul_tables::$14 ] )
  [48] *((const byte[512]) mul_sqr_hi#0+(word/signed word) 256 + (byte) init_mul_tables::i#6) ← (byte~) init_mul_tables::$14 [ init_mul_tables::i#6 init_mul_tables::sqr#7 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::sqr#7 ] )
  [49] (word~) init_mul_tables::$15 ← (word) init_mul_tables::sqr#7 + (byte/word/signed word) 128 [ init_mul_tables::i#6 init_mul_tables::$15 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::$15 ] )
  [50] (byte~) init_mul_tables::$16 ← (byte) init_mul_tables::i#6 >> (byte/signed byte/word/signed word) 1 [ init_mul_tables::i#6 init_mul_tables::$15 init_mul_tables::$16 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::$15 init_mul_tables::$16 ] )
  [51] (word) init_mul_tables::sqr#3 ← (word~) init_mul_tables::$15 + (byte~) init_mul_tables::$16 [ init_mul_tables::i#6 init_mul_tables::sqr#3 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::sqr#3 ] )
  [52] (byte) init_mul_tables::i#3 ← ++ (byte) init_mul_tables::i#6 [ init_mul_tables::i#3 init_mul_tables::sqr#3 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#3 init_mul_tables::sqr#3 ] )
  [53] if((byte) init_mul_tables::i#3!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@3 [ init_mul_tables::i#3 init_mul_tables::sqr#3 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#3 init_mul_tables::sqr#3 ] )
  to:init_mul_tables::@return
init_mul_tables::@return: scope:[init_mul_tables]  from init_mul_tables::@4
  [54] return  [ ] ( main:2::init_mul_tables:5 [ ] )
  to:@return

DOMINATORS
@begin dominated by  @begin 
@4 dominated by  @begin @4 
@end dominated by  @end @begin @4 
main dominated by  main @begin @4 
main::@1 dominated by  main main::@1 @begin @4 
main::@2 dominated by  main main::@1 main::@2 @begin @4 
main::@return dominated by  main::@return main main::@1 main::@2 @begin @4 
mul_tables_compare dominated by  main main::@1 main::@2 @begin mul_tables_compare @4 
mul_tables_compare::@1 dominated by  main main::@1 main::@2 @begin mul_tables_compare @4 mul_tables_compare::@1 
mul_tables_compare::@6 dominated by  main main::@1 main::@2 @begin mul_tables_compare @4 mul_tables_compare::@1 mul_tables_compare::@6 
mul_tables_compare::@2 dominated by  main main::@1 main::@2 @begin mul_tables_compare @4 mul_tables_compare::@1 mul_tables_compare::@2 
mul_tables_compare::@7 dominated by  main main::@1 main::@2 @begin mul_tables_compare @4 mul_tables_compare::@1 mul_tables_compare::@2 mul_tables_compare::@7 
mul_tables_compare::@3 dominated by  main main::@1 main::@2 @begin mul_tables_compare @4 mul_tables_compare::@1 mul_tables_compare::@3 mul_tables_compare::@2 
mul_tables_compare::@8 dominated by  main main::@1 main::@2 @begin mul_tables_compare @4 mul_tables_compare::@1 mul_tables_compare::@3 mul_tables_compare::@2 mul_tables_compare::@8 
mul_tables_compare::@4 dominated by  main main::@1 main::@2 @begin mul_tables_compare @4 mul_tables_compare::@1 mul_tables_compare::@3 mul_tables_compare::@2 mul_tables_compare::@4 
mul_tables_compare::@9 dominated by  main main::@1 main::@2 @begin mul_tables_compare @4 mul_tables_compare::@1 mul_tables_compare::@3 mul_tables_compare::@2 mul_tables_compare::@4 mul_tables_compare::@9 
mul_tables_compare::@5 dominated by  main main::@1 main::@2 @begin mul_tables_compare @4 mul_tables_compare::@1 mul_tables_compare::@3 mul_tables_compare::@2 mul_tables_compare::@5 mul_tables_compare::@4 
mul_tables_compare::@return dominated by  main main::@1 main::@2 @begin mul_tables_compare mul_tables_compare::@return @4 mul_tables_compare::@1 mul_tables_compare::@3 mul_tables_compare::@2 mul_tables_compare::@5 mul_tables_compare::@4 
init_mul_tables_asm dominated by  main init_mul_tables_asm main::@1 @begin @4 
init_mul_tables_asm::@return dominated by  main init_mul_tables_asm::@return init_mul_tables_asm main::@1 @begin @4 
init_mul_tables dominated by  main init_mul_tables @begin @4 
init_mul_tables::@1 dominated by  main init_mul_tables @begin @4 init_mul_tables::@1 
init_mul_tables::@5 dominated by  main init_mul_tables @begin init_mul_tables::@5 @4 init_mul_tables::@1 
init_mul_tables::@2 dominated by  main init_mul_tables @begin @4 init_mul_tables::@2 init_mul_tables::@1 
init_mul_tables::@3 dominated by  main init_mul_tables @begin @4 init_mul_tables::@2 init_mul_tables::@1 init_mul_tables::@3 
init_mul_tables::@7 dominated by  main init_mul_tables @begin init_mul_tables::@7 @4 init_mul_tables::@2 init_mul_tables::@1 init_mul_tables::@3 
init_mul_tables::@4 dominated by  main init_mul_tables @begin @4 init_mul_tables::@2 init_mul_tables::@1 init_mul_tables::@4 init_mul_tables::@3 
init_mul_tables::@return dominated by  main init_mul_tables init_mul_tables::@return @begin @4 init_mul_tables::@2 init_mul_tables::@1 init_mul_tables::@4 init_mul_tables::@3 

Found back edge: Loop head: mul_tables_compare::@1 tails: mul_tables_compare::@5 blocks: null
Found back edge: Loop head: init_mul_tables::@1 tails: init_mul_tables::@2 blocks: null
Found back edge: Loop head: init_mul_tables::@3 tails: init_mul_tables::@4 blocks: null
Populated: Loop head: mul_tables_compare::@1 tails: mul_tables_compare::@5 blocks: mul_tables_compare::@5 mul_tables_compare::@4 mul_tables_compare::@9 mul_tables_compare::@3 mul_tables_compare::@8 mul_tables_compare::@2 mul_tables_compare::@7 mul_tables_compare::@1 mul_tables_compare::@6 
Populated: Loop head: init_mul_tables::@1 tails: init_mul_tables::@2 blocks: init_mul_tables::@2 init_mul_tables::@1 init_mul_tables::@5 
Populated: Loop head: init_mul_tables::@3 tails: init_mul_tables::@4 blocks: init_mul_tables::@4 init_mul_tables::@3 init_mul_tables::@7 
NATURAL LOOPS
Loop head: mul_tables_compare::@1 tails: mul_tables_compare::@5 blocks: mul_tables_compare::@5 mul_tables_compare::@4 mul_tables_compare::@9 mul_tables_compare::@3 mul_tables_compare::@8 mul_tables_compare::@2 mul_tables_compare::@7 mul_tables_compare::@1 mul_tables_compare::@6 
Loop head: init_mul_tables::@1 tails: init_mul_tables::@2 blocks: init_mul_tables::@2 init_mul_tables::@1 init_mul_tables::@5 
Loop head: init_mul_tables::@3 tails: init_mul_tables::@4 blocks: init_mul_tables::@4 init_mul_tables::@3 init_mul_tables::@7 

Found 0 loops in scope []
Found 0 loops in scope [main]
Found 2 loops in scope [init_mul_tables]
  Loop head: init_mul_tables::@1 tails: init_mul_tables::@2 blocks: init_mul_tables::@2 init_mul_tables::@1 init_mul_tables::@5 
  Loop head: init_mul_tables::@3 tails: init_mul_tables::@4 blocks: init_mul_tables::@4 init_mul_tables::@3 init_mul_tables::@7 
Found 0 loops in scope [init_mul_tables_asm]
Found 1 loops in scope [mul_tables_compare]
  Loop head: mul_tables_compare::@1 tails: mul_tables_compare::@5 blocks: mul_tables_compare::@5 mul_tables_compare::@4 mul_tables_compare::@9 mul_tables_compare::@3 mul_tables_compare::@8 mul_tables_compare::@2 mul_tables_compare::@7 mul_tables_compare::@1 mul_tables_compare::@6 
NATURAL LOOPS WITH DEPTH
Loop head: mul_tables_compare::@1 tails: mul_tables_compare::@5 blocks: mul_tables_compare::@5 mul_tables_compare::@4 mul_tables_compare::@9 mul_tables_compare::@3 mul_tables_compare::@8 mul_tables_compare::@2 mul_tables_compare::@7 mul_tables_compare::@1 mul_tables_compare::@6  depth: 1
Loop head: init_mul_tables::@1 tails: init_mul_tables::@2 blocks: init_mul_tables::@2 init_mul_tables::@1 init_mul_tables::@5  depth: 1
Loop head: init_mul_tables::@3 tails: init_mul_tables::@4 blocks: init_mul_tables::@4 init_mul_tables::@3 init_mul_tables::@7  depth: 1


VARIABLE REGISTER WEIGHTS
(byte*) BGCOL
(byte[512]) asm_mul_sqr_hi
(byte[512]) asm_mul_sqr_lo
(void()) init_mul_tables()
(byte~) init_mul_tables::$0 22.0
(byte~) init_mul_tables::$12 22.0
(byte~) init_mul_tables::$14 22.0
(word~) init_mul_tables::$15 11.0
(byte~) init_mul_tables::$16 22.0
(byte~) init_mul_tables::$3 22.0
(byte~) init_mul_tables::$4 22.0
(byte~) init_mul_tables::$5 22.0
(byte~) init_mul_tables::$8 22.0
(byte) init_mul_tables::i
(byte) init_mul_tables::i#1 16.5
(byte) init_mul_tables::i#3 16.5
(byte) init_mul_tables::i#4 6.0
(byte) init_mul_tables::i#6 5.5
(word) init_mul_tables::sqr
(word) init_mul_tables::sqr#1 11.0
(word) init_mul_tables::sqr#10 14.666666666666666
(word) init_mul_tables::sqr#2 22.0
(word) init_mul_tables::sqr#3 7.333333333333333
(word) init_mul_tables::sqr#4 22.0
(word) init_mul_tables::sqr#5 9.166666666666666
(word) init_mul_tables::sqr#6 11.0
(word) init_mul_tables::sqr#7 11.0
(void()) init_mul_tables_asm()
(void()) main()
(byte[512]) mul_sqr_hi
(byte[512]) mul_sqr_lo
(void()) mul_tables_compare()
(byte) mul_tables_compare::i
(byte) mul_tables_compare::i#1 16.5
(byte) mul_tables_compare::i#10 12.222222222222221

Initial phi equivalence classes
[ mul_tables_compare::i#10 mul_tables_compare::i#1 ]
[ init_mul_tables::i#4 init_mul_tables::i#1 ]
[ init_mul_tables::i#6 init_mul_tables::i#3 ]
[ init_mul_tables::sqr#7 init_mul_tables::sqr#10 init_mul_tables::sqr#3 init_mul_tables::sqr#5 init_mul_tables::sqr#6 init_mul_tables::sqr#1 init_mul_tables::sqr#2 init_mul_tables::sqr#4 ]
Added variable init_mul_tables::$0 to zero page equivalence class [ init_mul_tables::$0 ]
Added variable init_mul_tables::$3 to zero page equivalence class [ init_mul_tables::$3 ]
Added variable init_mul_tables::$4 to zero page equivalence class [ init_mul_tables::$4 ]
Added variable init_mul_tables::$5 to zero page equivalence class [ init_mul_tables::$5 ]
Added variable init_mul_tables::$8 to zero page equivalence class [ init_mul_tables::$8 ]
Added variable init_mul_tables::$12 to zero page equivalence class [ init_mul_tables::$12 ]
Added variable init_mul_tables::$14 to zero page equivalence class [ init_mul_tables::$14 ]
Added variable init_mul_tables::$15 to zero page equivalence class [ init_mul_tables::$15 ]
Added variable init_mul_tables::$16 to zero page equivalence class [ init_mul_tables::$16 ]
Complete equivalence classes
[ mul_tables_compare::i#10 mul_tables_compare::i#1 ]
[ init_mul_tables::i#4 init_mul_tables::i#1 ]
[ init_mul_tables::i#6 init_mul_tables::i#3 ]
[ init_mul_tables::sqr#7 init_mul_tables::sqr#10 init_mul_tables::sqr#3 init_mul_tables::sqr#5 init_mul_tables::sqr#6 init_mul_tables::sqr#1 init_mul_tables::sqr#2 init_mul_tables::sqr#4 ]
[ init_mul_tables::$0 ]
[ init_mul_tables::$3 ]
[ init_mul_tables::$4 ]
[ init_mul_tables::$5 ]
[ init_mul_tables::$8 ]
[ init_mul_tables::$12 ]
[ init_mul_tables::$14 ]
[ init_mul_tables::$15 ]
[ init_mul_tables::$16 ]
Allocated zp ZP_BYTE:2 [ mul_tables_compare::i#10 mul_tables_compare::i#1 ]
Allocated zp ZP_BYTE:3 [ init_mul_tables::i#4 init_mul_tables::i#1 ]
Allocated zp ZP_BYTE:4 [ init_mul_tables::i#6 init_mul_tables::i#3 ]
Allocated zp ZP_WORD:5 [ init_mul_tables::sqr#7 init_mul_tables::sqr#10 init_mul_tables::sqr#3 init_mul_tables::sqr#5 init_mul_tables::sqr#6 init_mul_tables::sqr#1 init_mul_tables::sqr#2 init_mul_tables::sqr#4 ]
Allocated zp ZP_BYTE:7 [ init_mul_tables::$0 ]
Allocated zp ZP_BYTE:8 [ init_mul_tables::$3 ]
Allocated zp ZP_BYTE:9 [ init_mul_tables::$4 ]
Allocated zp ZP_BYTE:10 [ init_mul_tables::$5 ]
Allocated zp ZP_BYTE:11 [ init_mul_tables::$8 ]
Allocated zp ZP_BYTE:12 [ init_mul_tables::$12 ]
Allocated zp ZP_BYTE:13 [ init_mul_tables::$14 ]
Allocated zp ZP_WORD:14 [ init_mul_tables::$15 ]
Allocated zp ZP_BYTE:16 [ init_mul_tables::$16 ]
Attempting fragment synthesis _deref_pbuc1=vbuc2
Succesfully loaded fragment _deref_vwuc1=vbuc2
Succesfully synthesized fragment _deref_pbuc1=vbuc2 (from _deref_vwuc1=vbuc2)
Attempting fragment synthesis vbuz1=vbuc1
Succesfully loaded fragment vbuaa=vbuc1
Succesfully synthesized fragment vbuz1=vbuc1 (from vbuaa=vbuc1)
Attempting fragment synthesis pbuc1_derefidx_vbuz1_eq_pbuc2_derefidx_vbuz1_then_la1
Attempting fragment synthesis pbuc1_derefidx_vbuz1_eq_vwuc2_derefidx_vbuz1_then_la1
Attempting fragment synthesis vwuc1_derefidx_vbuz1_eq_vwuc2_derefidx_vbuz1_then_la1
Attempting fragment synthesis vwuc1_derefidx_vbuxx_eq_vwuc2_derefidx_vbuxx_then_la1
Attempting fragment synthesis vwuc1_derefidx_vbuyy_eq_vwuc2_derefidx_vbuyy_then_la1
Attempting fragment synthesis pbuc1_derefidx_vbuxx_eq_vwuc2_derefidx_vbuxx_then_la1
Attempting fragment synthesis vwuc1_derefidx_vbuxx_eq_vwuc2_derefidx_vbuxx_then_la1
Attempting fragment synthesis vbuaa_eq_vwuc1_derefidx_vbuxx_then_la1
Attempting fragment synthesis pbuc1_derefidx_vbuyy_eq_vwuc2_derefidx_vbuyy_then_la1
Attempting fragment synthesis vwuc1_derefidx_vbuyy_eq_vwuc2_derefidx_vbuyy_then_la1
Attempting fragment synthesis vbuaa_eq_vwuc1_derefidx_vbuyy_then_la1
Attempting fragment synthesis pbuc1_derefidx_vbuxx_eq_pbuc2_derefidx_vbuxx_then_la1
Attempting fragment synthesis pbuc1_derefidx_vbuxx_eq_vwuc2_derefidx_vbuxx_then_la1
Attempting fragment synthesis vwuc1_derefidx_vbuxx_eq_vwuc2_derefidx_vbuxx_then_la1
Attempting fragment synthesis vbuaa_eq_vwuc1_derefidx_vbuxx_then_la1
Succesfully loaded fragment vbuaa_eq_pbuc1_derefidx_vbuxx_then_la1
Succesfully synthesized fragment pbuc1_derefidx_vbuxx_eq_pbuc2_derefidx_vbuxx_then_la1 (from vbuaa_eq_pbuc1_derefidx_vbuxx_then_la1)
Succesfully synthesized fragment pbuc1_derefidx_vbuz1_eq_pbuc2_derefidx_vbuz1_then_la1 (from pbuc1_derefidx_vbuxx_eq_pbuc2_derefidx_vbuxx_then_la1)
Succesfully loaded fragment vbuz1=_inc_vbuz1
Succesfully loaded fragment vbuz1_neq_0_then_la1
Attempting fragment synthesis vwuz1=vbuc1
Succesfully loaded fragment vwuz1=vbuaa
Succesfully synthesized fragment vwuz1=vbuc1 (from vwuz1=vbuaa)
Attempting fragment synthesis vbuz1=vbuz2_band_vbuc1
Attempting fragment synthesis vbuaa=vbuz1_band_vbuc1
Succesfully loaded fragment vbuaa=vbuaa_band_vbuc1
Succesfully synthesized fragment vbuaa=vbuz1_band_vbuc1 (from vbuaa=vbuaa_band_vbuc1)
Succesfully synthesized fragment vbuz1=vbuz2_band_vbuc1 (from vbuaa=vbuz1_band_vbuc1)
Succesfully loaded fragment vwuz1=_inc_vwuz1
Attempting fragment synthesis vbuz1=_lo_vwuz2
Succesfully loaded fragment vbuaa=_lo_vwuz1
Succesfully synthesized fragment vbuz1=_lo_vwuz2 (from vbuaa=_lo_vwuz1)
Attempting fragment synthesis pbuc1_derefidx_vbuz1=vbuz2
Attempting fragment synthesis vwuc1_derefidx_vbuz1=vbuz2
Succesfully loaded fragment vwuc1_derefidx_vbuz1=vbuaa
Succesfully synthesized fragment vwuc1_derefidx_vbuz1=vbuz2 (from vwuc1_derefidx_vbuz1=vbuaa)
Succesfully synthesized fragment pbuc1_derefidx_vbuz1=vbuz2 (from vwuc1_derefidx_vbuz1=vbuz2)
Attempting fragment synthesis vbuz1=_hi_vwuz2
Succesfully loaded fragment vbuaa=_hi_vwuz1
Succesfully synthesized fragment vbuz1=_hi_vwuz2 (from vbuaa=_hi_vwuz1)
Attempting fragment synthesis vbuz1=vbuz2_ror_1
Attempting fragment synthesis vbuaa=vbuz1_ror_1
Succesfully loaded fragment vbuaa=vbuaa_ror_1
Succesfully synthesized fragment vbuaa=vbuz1_ror_1 (from vbuaa=vbuaa_ror_1)
Succesfully synthesized fragment vbuz1=vbuz2_ror_1 (from vbuaa=vbuz1_ror_1)
Attempting fragment synthesis vwuz1=vwuz1_plus_vbuz2
Attempting fragment synthesis vwuz1=vwuz1_plus_vbuaa
Succesfully loaded fragment vwuz1=vbuaa_plus_vwuz1
Succesfully synthesized fragment vwuz1=vwuz1_plus_vbuaa (from vwuz1=vbuaa_plus_vwuz1)
Succesfully synthesized fragment vwuz1=vwuz1_plus_vbuz2 (from vwuz1=vwuz1_plus_vbuaa)
Succesfully loaded fragment vwuz1=vwuz2_plus_vbuc1
Attempting fragment synthesis vwuz1=vwuz2_plus_vbuz3
Attempting fragment synthesis vwuz1=vwuz2_plus_vbuaa
Succesfully loaded fragment vwuz1=vbuaa_plus_vwuz2
Succesfully synthesized fragment vwuz1=vwuz2_plus_vbuaa (from vwuz1=vbuaa_plus_vwuz2)
Succesfully synthesized fragment vwuz1=vwuz2_plus_vbuz3 (from vwuz1=vwuz2_plus_vbuaa)
INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const BGCOL = $d021
  mul_sqr_lo: .fill 512, 0
  mul_sqr_hi: .fill 512, 0
  asm_mul_sqr_lo: .fill 512, 0
  asm_mul_sqr_hi: .fill 512, 0
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @4 [phi:@begin->@4]
b4_from_bbegin:
  jmp b4
//SEG4 @4
b4:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @4 to main [phi:@4->main]
main_from_b4:
  jsr main
//SEG7 [3] phi from @4 to @end [phi:@4->@end]
bend_from_b4:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
  //SEG10 [5] call init_mul_tables param-assignment [ ] ( main:2 [ ] )
  //SEG11 [26] phi from main to init_mul_tables [phi:main->init_mul_tables]
  init_mul_tables_from_main:
    jsr init_mul_tables
  //SEG12 [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    jmp b1
  //SEG13 main::@1
  b1:
  //SEG14 [7] call init_mul_tables_asm param-assignment [ ] ( main:2 [ ] )
    jsr init_mul_tables_asm
  //SEG15 [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
  //SEG16 main::@2
  b2:
  //SEG17 [9] call mul_tables_compare param-assignment [ ] ( main:2 [ ] )
    jsr mul_tables_compare
    jmp breturn
  //SEG18 main::@return
  breturn:
  //SEG19 [10] return  [ ] ( main:2 [ ] )
    rts
}
//SEG20 mul_tables_compare
mul_tables_compare: {
    .label i = 2
  //SEG21 [11] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 5 [ ] ( main:2::mul_tables_compare:9 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #5
    sta BGCOL
  //SEG22 [12] phi from mul_tables_compare to mul_tables_compare::@1 [phi:mul_tables_compare->mul_tables_compare::@1]
  b1_from_mul_tables_compare:
  //SEG23 [12] phi (byte) mul_tables_compare::i#10 = (byte/signed byte/word/signed word) 0 [phi:mul_tables_compare->mul_tables_compare::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG24 [12] phi from mul_tables_compare::@5 to mul_tables_compare::@1 [phi:mul_tables_compare::@5->mul_tables_compare::@1]
  b1_from_b5:
  //SEG25 [12] phi (byte) mul_tables_compare::i#10 = (byte) mul_tables_compare::i#1 [phi:mul_tables_compare::@5->mul_tables_compare::@1#0] -- register_copy 
    jmp b1
  //SEG26 mul_tables_compare::@1
  b1:
  //SEG27 [13] if(*((const byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) -- pbuc1_derefidx_vbuz1_eq_pbuc2_derefidx_vbuz1_then_la1 
    lda mul_sqr_lo,x
    cmp asm_mul_sqr_lo,x
    beq b2
    ldx i
    jmp b6
  //SEG28 mul_tables_compare::@6
  b6:
  //SEG29 [14] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) -- _deref_pbuc1=vbuc2 
    lda #2
    sta BGCOL
    jmp b2
  //SEG30 mul_tables_compare::@2
  b2:
  //SEG31 [15] if(*((const byte[512]) mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@3 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) -- pbuc1_derefidx_vbuz1_eq_pbuc2_derefidx_vbuz1_then_la1 
    lda mul_sqr_hi+$100,x
    cmp asm_mul_sqr_hi+$100,x
    beq b3
    ldx i
    jmp b7
  //SEG32 mul_tables_compare::@7
  b7:
  //SEG33 [16] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) -- _deref_pbuc1=vbuc2 
    lda #2
    sta BGCOL
    jmp b3
  //SEG34 mul_tables_compare::@3
  b3:
  //SEG35 [17] if(*((const byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@4 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) -- pbuc1_derefidx_vbuz1_eq_pbuc2_derefidx_vbuz1_then_la1 
    lda mul_sqr_lo,x
    cmp asm_mul_sqr_lo,x
    beq b4
    ldx i
    jmp b8
  //SEG36 mul_tables_compare::@8
  b8:
  //SEG37 [18] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) -- _deref_pbuc1=vbuc2 
    lda #2
    sta BGCOL
    jmp b4
  //SEG38 mul_tables_compare::@4
  b4:
  //SEG39 [19] if(*((const byte[512]) mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@5 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) -- pbuc1_derefidx_vbuz1_eq_pbuc2_derefidx_vbuz1_then_la1 
    lda mul_sqr_hi+$100,x
    cmp asm_mul_sqr_hi+$100,x
    beq b5
    ldx i
    jmp b9
  //SEG40 mul_tables_compare::@9
  b9:
  //SEG41 [20] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) -- _deref_pbuc1=vbuc2 
    lda #2
    sta BGCOL
    jmp b5
  //SEG42 mul_tables_compare::@5
  b5:
  //SEG43 [21] (byte) mul_tables_compare::i#1 ← ++ (byte) mul_tables_compare::i#10 [ mul_tables_compare::i#1 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG44 [22] if((byte) mul_tables_compare::i#1!=(byte/signed byte/word/signed word) 0) goto mul_tables_compare::@1 [ mul_tables_compare::i#1 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#1 ] ) -- vbuz1_neq_0_then_la1 
    lda i
    bne b1_from_b5
    jmp breturn
  //SEG45 mul_tables_compare::@return
  breturn:
  //SEG46 [23] return  [ ] ( main:2::mul_tables_compare:9 [ ] )
    rts
}
//SEG47 init_mul_tables_asm
init_mul_tables_asm: {
  //SEG48 asm { ldx#$00txa.byte$c9lb1:tyaadc#$00ml1:staasm_mul_sqr_hi,xtaycmp#$40txarorml9:adc#$00staml9+1inxml0:staasm_mul_sqr_lo,xbnelb1incml0+2incml1+2clcinybnelb1 }
    ldx #0
    txa
    .byte $c9
  lb1:
    tya
    adc #0
  ml1:
    sta asm_mul_sqr_hi,x
    tay
    cmp #$40
    txa
    ror
  ml9:
    adc #0
    sta ml9+1
    inx
  ml0:
    sta asm_mul_sqr_lo,x
    bne lb1
    inc ml0+2
    inc ml1+2
    clc
    iny
    bne lb1
    jmp breturn
  //SEG49 init_mul_tables_asm::@return
  breturn:
  //SEG50 [25] return  [ ] ( main:2::init_mul_tables_asm:7 [ ] )
    rts
}
//SEG51 init_mul_tables
init_mul_tables: {
    .label _0 = 7
    .label _3 = 8
    .label _4 = 9
    .label _5 = $a
    .label _8 = $b
    .label _12 = $c
    .label _14 = $d
    .label _15 = $e
    .label _16 = $10
    .label sqr = 5
    .label i = 3
    .label i_3 = 4
    .label i_6 = 4
  //SEG52 [27] phi from init_mul_tables to init_mul_tables::@1 [phi:init_mul_tables->init_mul_tables::@1]
  b1_from_init_mul_tables:
  //SEG53 [27] phi (word) init_mul_tables::sqr#6 = (byte/signed byte/word/signed word) 0 [phi:init_mul_tables->init_mul_tables::@1#0] -- vwuz1=vbuc1 
    lda #0
    sta sqr
    lda #0
    sta sqr+1
  //SEG54 [27] phi (byte) init_mul_tables::i#4 = (byte/signed byte/word/signed word) 1 [phi:init_mul_tables->init_mul_tables::@1#1] -- vbuz1=vbuc1 
    lda #1
    sta i
    jmp b1
  //SEG55 [27] phi from init_mul_tables::@2 to init_mul_tables::@1 [phi:init_mul_tables::@2->init_mul_tables::@1]
  b1_from_b2:
  //SEG56 [27] phi (word) init_mul_tables::sqr#6 = (word) init_mul_tables::sqr#1 [phi:init_mul_tables::@2->init_mul_tables::@1#0] -- register_copy 
  //SEG57 [27] phi (byte) init_mul_tables::i#4 = (byte) init_mul_tables::i#1 [phi:init_mul_tables::@2->init_mul_tables::@1#1] -- register_copy 
    jmp b1
  //SEG58 init_mul_tables::@1
  b1:
  //SEG59 [28] (byte~) init_mul_tables::$0 ← (byte) init_mul_tables::i#4 & (byte/signed byte/word/signed word) 1 [ init_mul_tables::i#4 init_mul_tables::sqr#6 init_mul_tables::$0 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#4 init_mul_tables::sqr#6 init_mul_tables::$0 ] ) -- vbuz1=vbuz2_band_vbuc1 
    lda i
    and #1
    sta _0
  //SEG60 [29] if((byte~) init_mul_tables::$0!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@2 [ init_mul_tables::i#4 init_mul_tables::sqr#6 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#4 init_mul_tables::sqr#6 ] ) -- vbuz1_neq_0_then_la1 
    lda _0
    bne b2_from_b1
    jmp b5
  //SEG61 init_mul_tables::@5
  b5:
  //SEG62 [30] (word) init_mul_tables::sqr#2 ← ++ (word) init_mul_tables::sqr#6 [ init_mul_tables::i#4 init_mul_tables::sqr#2 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#4 init_mul_tables::sqr#2 ] ) -- vwuz1=_inc_vwuz1 
    inc sqr
    bne !+
    inc sqr+1
  !:
  //SEG63 [31] phi from init_mul_tables::@1 init_mul_tables::@5 to init_mul_tables::@2 [phi:init_mul_tables::@1/init_mul_tables::@5->init_mul_tables::@2]
  b2_from_b1:
  b2_from_b5:
  //SEG64 [31] phi (word) init_mul_tables::sqr#5 = (word) init_mul_tables::sqr#6 [phi:init_mul_tables::@1/init_mul_tables::@5->init_mul_tables::@2#0] -- register_copy 
    jmp b2
  //SEG65 init_mul_tables::@2
  b2:
  //SEG66 [32] (byte~) init_mul_tables::$3 ← < (word) init_mul_tables::sqr#5 [ init_mul_tables::i#4 init_mul_tables::sqr#5 init_mul_tables::$3 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#4 init_mul_tables::sqr#5 init_mul_tables::$3 ] ) -- vbuz1=_lo_vwuz2 
    lda sqr
    sta _3
  //SEG67 [33] *((const byte[512]) mul_sqr_lo#0 + (byte) init_mul_tables::i#4) ← (byte~) init_mul_tables::$3 [ init_mul_tables::i#4 init_mul_tables::sqr#5 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#4 init_mul_tables::sqr#5 ] ) -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _3
    ldx i
    sta mul_sqr_lo,x
  //SEG68 [34] (byte~) init_mul_tables::$4 ← > (word) init_mul_tables::sqr#5 [ init_mul_tables::i#4 init_mul_tables::sqr#5 init_mul_tables::$4 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#4 init_mul_tables::sqr#5 init_mul_tables::$4 ] ) -- vbuz1=_hi_vwuz2 
    lda sqr+1
    sta _4
  //SEG69 [35] *((const byte[512]) mul_sqr_hi#0 + (byte) init_mul_tables::i#4) ← (byte~) init_mul_tables::$4 [ init_mul_tables::i#4 init_mul_tables::sqr#5 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#4 init_mul_tables::sqr#5 ] ) -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _4
    ldx i
    sta mul_sqr_hi,x
  //SEG70 [36] (byte~) init_mul_tables::$5 ← (byte) init_mul_tables::i#4 >> (byte/signed byte/word/signed word) 1 [ init_mul_tables::i#4 init_mul_tables::sqr#5 init_mul_tables::$5 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#4 init_mul_tables::sqr#5 init_mul_tables::$5 ] ) -- vbuz1=vbuz2_ror_1 
    lda i
    lsr
    sta _5
  //SEG71 [37] (word) init_mul_tables::sqr#1 ← (word) init_mul_tables::sqr#5 + (byte~) init_mul_tables::$5 [ init_mul_tables::i#4 init_mul_tables::sqr#1 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#4 init_mul_tables::sqr#1 ] ) -- vwuz1=vwuz1_plus_vbuz2 
    lda _5
    clc
    adc sqr
    sta sqr
    bcc !+
    inc sqr+1
  !:
  //SEG72 [38] (byte) init_mul_tables::i#1 ← ++ (byte) init_mul_tables::i#4 [ init_mul_tables::i#1 init_mul_tables::sqr#1 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#1 init_mul_tables::sqr#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG73 [39] if((byte) init_mul_tables::i#1!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@1 [ init_mul_tables::i#1 init_mul_tables::sqr#1 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#1 init_mul_tables::sqr#1 ] ) -- vbuz1_neq_0_then_la1 
    lda i
    bne b1_from_b2
  //SEG74 [40] phi from init_mul_tables::@2 to init_mul_tables::@3 [phi:init_mul_tables::@2->init_mul_tables::@3]
  b3_from_b2:
  //SEG75 [40] phi (word) init_mul_tables::sqr#10 = (word) init_mul_tables::sqr#1 [phi:init_mul_tables::@2->init_mul_tables::@3#0] -- register_copy 
  //SEG76 [40] phi (byte) init_mul_tables::i#6 = (byte/signed byte/word/signed word) 0 [phi:init_mul_tables::@2->init_mul_tables::@3#1] -- vbuz1=vbuc1 
    lda #0
    sta i_6
    jmp b3
  //SEG77 [40] phi from init_mul_tables::@4 to init_mul_tables::@3 [phi:init_mul_tables::@4->init_mul_tables::@3]
  b3_from_b4:
  //SEG78 [40] phi (word) init_mul_tables::sqr#10 = (word) init_mul_tables::sqr#3 [phi:init_mul_tables::@4->init_mul_tables::@3#0] -- register_copy 
  //SEG79 [40] phi (byte) init_mul_tables::i#6 = (byte) init_mul_tables::i#3 [phi:init_mul_tables::@4->init_mul_tables::@3#1] -- register_copy 
    jmp b3
  //SEG80 init_mul_tables::@3
  b3:
  //SEG81 [41] (byte~) init_mul_tables::$8 ← (byte) init_mul_tables::i#6 & (byte/signed byte/word/signed word) 1 [ init_mul_tables::i#6 init_mul_tables::sqr#10 init_mul_tables::$8 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::sqr#10 init_mul_tables::$8 ] ) -- vbuz1=vbuz2_band_vbuc1 
    lda i_6
    and #1
    sta _8
  //SEG82 [42] if((byte~) init_mul_tables::$8!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@4 [ init_mul_tables::i#6 init_mul_tables::sqr#10 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::sqr#10 ] ) -- vbuz1_neq_0_then_la1 
    lda _8
    bne b4_from_b3
    jmp b7
  //SEG83 init_mul_tables::@7
  b7:
  //SEG84 [43] (word) init_mul_tables::sqr#4 ← ++ (word) init_mul_tables::sqr#10 [ init_mul_tables::i#6 init_mul_tables::sqr#4 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::sqr#4 ] ) -- vwuz1=_inc_vwuz1 
    inc sqr
    bne !+
    inc sqr+1
  !:
  //SEG85 [44] phi from init_mul_tables::@3 init_mul_tables::@7 to init_mul_tables::@4 [phi:init_mul_tables::@3/init_mul_tables::@7->init_mul_tables::@4]
  b4_from_b3:
  b4_from_b7:
  //SEG86 [44] phi (word) init_mul_tables::sqr#7 = (word) init_mul_tables::sqr#10 [phi:init_mul_tables::@3/init_mul_tables::@7->init_mul_tables::@4#0] -- register_copy 
    jmp b4
  //SEG87 init_mul_tables::@4
  b4:
  //SEG88 [45] (byte~) init_mul_tables::$12 ← < (word) init_mul_tables::sqr#7 [ init_mul_tables::i#6 init_mul_tables::sqr#7 init_mul_tables::$12 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::sqr#7 init_mul_tables::$12 ] ) -- vbuz1=_lo_vwuz2 
    lda sqr
    sta _12
  //SEG89 [46] *((const byte[512]) mul_sqr_lo#0+(word/signed word) 256 + (byte) init_mul_tables::i#6) ← (byte~) init_mul_tables::$12 [ init_mul_tables::i#6 init_mul_tables::sqr#7 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::sqr#7 ] ) -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _12
    ldx i_6
    sta mul_sqr_lo+$100,x
  //SEG90 [47] (byte~) init_mul_tables::$14 ← > (word) init_mul_tables::sqr#7 [ init_mul_tables::i#6 init_mul_tables::sqr#7 init_mul_tables::$14 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::sqr#7 init_mul_tables::$14 ] ) -- vbuz1=_hi_vwuz2 
    lda sqr+1
    sta _14
  //SEG91 [48] *((const byte[512]) mul_sqr_hi#0+(word/signed word) 256 + (byte) init_mul_tables::i#6) ← (byte~) init_mul_tables::$14 [ init_mul_tables::i#6 init_mul_tables::sqr#7 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::sqr#7 ] ) -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _14
    ldx i_6
    sta mul_sqr_hi+$100,x
  //SEG92 [49] (word~) init_mul_tables::$15 ← (word) init_mul_tables::sqr#7 + (byte/word/signed word) 128 [ init_mul_tables::i#6 init_mul_tables::$15 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::$15 ] ) -- vwuz1=vwuz2_plus_vbuc1 
    lda sqr
    clc
    adc #<$80
    sta _15
    lda sqr+1
    adc #0
    sta _15+1
  //SEG93 [50] (byte~) init_mul_tables::$16 ← (byte) init_mul_tables::i#6 >> (byte/signed byte/word/signed word) 1 [ init_mul_tables::i#6 init_mul_tables::$15 init_mul_tables::$16 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::$15 init_mul_tables::$16 ] ) -- vbuz1=vbuz2_ror_1 
    lda i_6
    lsr
    sta _16
  //SEG94 [51] (word) init_mul_tables::sqr#3 ← (word~) init_mul_tables::$15 + (byte~) init_mul_tables::$16 [ init_mul_tables::i#6 init_mul_tables::sqr#3 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::sqr#3 ] ) -- vwuz1=vwuz2_plus_vbuz3 
    lda _16
    clc
    adc _15
    sta sqr
    lda #0
    adc _15+1
    sta sqr+1
  //SEG95 [52] (byte) init_mul_tables::i#3 ← ++ (byte) init_mul_tables::i#6 [ init_mul_tables::i#3 init_mul_tables::sqr#3 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#3 init_mul_tables::sqr#3 ] ) -- vbuz1=_inc_vbuz1 
    inc i_3
  //SEG96 [53] if((byte) init_mul_tables::i#3!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@3 [ init_mul_tables::i#3 init_mul_tables::sqr#3 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#3 init_mul_tables::sqr#3 ] ) -- vbuz1_neq_0_then_la1 
    lda i_3
    bne b3_from_b4
    jmp breturn
  //SEG97 init_mul_tables::@return
  breturn:
  //SEG98 [54] return  [ ] ( main:2::init_mul_tables:5 [ ] )
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [11] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 5 [ ] ( main:2::mul_tables_compare:9 [ ] ) always clobbers reg byte a 
Attempting fragment synthesis pbuc1_derefidx_vbuaa_eq_pbuc2_derefidx_vbuaa_then_la1
Attempting fragment synthesis pbuc1_derefidx_vbuaa_eq_vwuc2_derefidx_vbuaa_then_la1
Attempting fragment synthesis vwuc1_derefidx_vbuaa_eq_vwuc2_derefidx_vbuaa_then_la1
Unknown fragment pbuc1_derefidx_vbuaa_eq_pbuc2_derefidx_vbuaa_then_la1
Potential register analysis [13] if(*(mul_sqr_lo#0 + mul_tables_compare::i#10)==*(asm_mul_sqr_lo#0 + mul_tables_compare::i#10)) goto mul_tables_compare::@2 missing fragment pbuc1_derefidx_vbuaa_eq_pbuc2_derefidx_vbuaa_then_la1 allocation: reg byte a [ mul_tables_compare::i#10 mul_tables_compare::i#1 ] 
Attempting fragment synthesis pbuc1_derefidx_vbuxx_eq_pbuc2_derefidx_vbuxx_then_la1
Attempting fragment synthesis pbuc1_derefidx_vbuxx_eq_vwuc2_derefidx_vbuxx_then_la1
Attempting fragment synthesis vwuc1_derefidx_vbuxx_eq_vwuc2_derefidx_vbuxx_then_la1
Attempting fragment synthesis vbuaa_eq_vwuc1_derefidx_vbuxx_then_la1
Succesfully loaded fragment vbuaa_eq_pbuc1_derefidx_vbuxx_then_la1
Succesfully synthesized fragment pbuc1_derefidx_vbuxx_eq_pbuc2_derefidx_vbuxx_then_la1 (from vbuaa_eq_pbuc1_derefidx_vbuxx_then_la1)
Attempting fragment synthesis pbuc1_derefidx_vbuyy_eq_pbuc2_derefidx_vbuyy_then_la1
Attempting fragment synthesis pbuc1_derefidx_vbuyy_eq_vwuc2_derefidx_vbuyy_then_la1
Attempting fragment synthesis vwuc1_derefidx_vbuyy_eq_vwuc2_derefidx_vbuyy_then_la1
Attempting fragment synthesis vbuaa_eq_vwuc1_derefidx_vbuyy_then_la1
Attempting fragment synthesis vbuaa_eq_pbuc1_derefidx_vbuyy_then_la1
Attempting fragment synthesis vbuaa_eq_vwuc1_derefidx_vbuyy_then_la1
Unknown fragment pbuc1_derefidx_vbuyy_eq_pbuc2_derefidx_vbuyy_then_la1
Potential register analysis [13] if(*(mul_sqr_lo#0 + mul_tables_compare::i#10)==*(asm_mul_sqr_lo#0 + mul_tables_compare::i#10)) goto mul_tables_compare::@2 missing fragment pbuc1_derefidx_vbuyy_eq_pbuc2_derefidx_vbuyy_then_la1 allocation: reg byte y [ mul_tables_compare::i#10 mul_tables_compare::i#1 ] 
MISSING FRAGMENTS
  pbuc1_derefidx_vbuaa_eq_pbuc2_derefidx_vbuaa_then_la1
  pbuc1_derefidx_vbuyy_eq_pbuc2_derefidx_vbuyy_then_la1
Statement [13] if(*((const byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ mul_tables_compare::i#10 mul_tables_compare::i#1 ]
Statement [14] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) always clobbers reg byte a 
Unknown fragment pbuc1_derefidx_vbuyy_eq_pbuc2_derefidx_vbuyy_then_la1
Potential register analysis [15] if(*(mul_sqr_hi#0+256 + mul_tables_compare::i#10)==*(asm_mul_sqr_hi#0+256 + mul_tables_compare::i#10)) goto mul_tables_compare::@3 missing fragment pbuc1_derefidx_vbuyy_eq_pbuc2_derefidx_vbuyy_then_la1 allocation: reg byte y [ mul_tables_compare::i#10 mul_tables_compare::i#1 ] 
MISSING FRAGMENTS
  pbuc1_derefidx_vbuyy_eq_pbuc2_derefidx_vbuyy_then_la1
Statement [15] if(*((const byte[512]) mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@3 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) always clobbers reg byte a 
Statement [16] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) always clobbers reg byte a 
Unknown fragment pbuc1_derefidx_vbuyy_eq_pbuc2_derefidx_vbuyy_then_la1
Potential register analysis [17] if(*(mul_sqr_lo#0 + mul_tables_compare::i#10)==*(asm_mul_sqr_lo#0 + mul_tables_compare::i#10)) goto mul_tables_compare::@4 missing fragment pbuc1_derefidx_vbuyy_eq_pbuc2_derefidx_vbuyy_then_la1 allocation: reg byte y [ mul_tables_compare::i#10 mul_tables_compare::i#1 ] 
MISSING FRAGMENTS
  pbuc1_derefidx_vbuyy_eq_pbuc2_derefidx_vbuyy_then_la1
Statement [17] if(*((const byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@4 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) always clobbers reg byte a 
Statement [18] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) always clobbers reg byte a 
Unknown fragment pbuc1_derefidx_vbuyy_eq_pbuc2_derefidx_vbuyy_then_la1
Potential register analysis [19] if(*(mul_sqr_hi#0+256 + mul_tables_compare::i#10)==*(asm_mul_sqr_hi#0+256 + mul_tables_compare::i#10)) goto mul_tables_compare::@5 missing fragment pbuc1_derefidx_vbuyy_eq_pbuc2_derefidx_vbuyy_then_la1 allocation: reg byte y [ mul_tables_compare::i#10 mul_tables_compare::i#1 ] 
MISSING FRAGMENTS
  pbuc1_derefidx_vbuyy_eq_pbuc2_derefidx_vbuyy_then_la1
Statement [19] if(*((const byte[512]) mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@5 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) always clobbers reg byte a 
Statement [20] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) always clobbers reg byte a 
Succesfully loaded fragment vbuxx_neq_0_then_la1
Statement asm { ldx#$00txa.byte$c9lb1:tyaadc#$00ml1:staasm_mul_sqr_hi,xtaycmp#$40txarorml9:adc#$00staml9+1inxml0:staasm_mul_sqr_lo,xbnelb1incml0+2incml1+2clcinybnelb1 } always clobbers reg byte a reg byte x reg byte y 
Attempting fragment synthesis vbuz1=vbuaa_band_vbuc1
Succesfully loaded fragment vbuaa=vbuaa_band_vbuc1
Succesfully synthesized fragment vbuz1=vbuaa_band_vbuc1 (from vbuaa=vbuaa_band_vbuc1)
Attempting fragment synthesis vbuz1=vbuxx_band_vbuc1
Attempting fragment synthesis vbuaa=vbuxx_band_vbuc1
Succesfully loaded fragment vbuaa=vbuaa_band_vbuc1
Succesfully synthesized fragment vbuaa=vbuxx_band_vbuc1 (from vbuaa=vbuaa_band_vbuc1)
Succesfully synthesized fragment vbuz1=vbuxx_band_vbuc1 (from vbuaa=vbuxx_band_vbuc1)
Attempting fragment synthesis vbuz1=vbuyy_band_vbuc1
Attempting fragment synthesis vbuaa=vbuyy_band_vbuc1
Succesfully loaded fragment vbuaa=vbuaa_band_vbuc1
Succesfully synthesized fragment vbuaa=vbuyy_band_vbuc1 (from vbuaa=vbuaa_band_vbuc1)
Succesfully synthesized fragment vbuz1=vbuyy_band_vbuc1 (from vbuaa=vbuyy_band_vbuc1)
Attempting fragment synthesis vbuaa=vbuz1_band_vbuc1
Succesfully loaded fragment vbuaa=vbuaa_band_vbuc1
Succesfully synthesized fragment vbuaa=vbuz1_band_vbuc1 (from vbuaa=vbuaa_band_vbuc1)
Succesfully loaded fragment vbuaa=vbuaa_band_vbuc1
Attempting fragment synthesis vbuaa=vbuxx_band_vbuc1
Succesfully loaded fragment vbuaa=vbuaa_band_vbuc1
Succesfully synthesized fragment vbuaa=vbuxx_band_vbuc1 (from vbuaa=vbuaa_band_vbuc1)
Attempting fragment synthesis vbuaa=vbuyy_band_vbuc1
Succesfully loaded fragment vbuaa=vbuaa_band_vbuc1
Succesfully synthesized fragment vbuaa=vbuyy_band_vbuc1 (from vbuaa=vbuaa_band_vbuc1)
Attempting fragment synthesis vbuxx=vbuz1_band_vbuc1
Attempting fragment synthesis vbuaa=vbuz1_band_vbuc1
Succesfully loaded fragment vbuaa=vbuaa_band_vbuc1
Succesfully synthesized fragment vbuaa=vbuz1_band_vbuc1 (from vbuaa=vbuaa_band_vbuc1)
Succesfully synthesized fragment vbuxx=vbuz1_band_vbuc1 (from vbuaa=vbuz1_band_vbuc1)
Attempting fragment synthesis vbuxx=vbuaa_band_vbuc1
Succesfully loaded fragment vbuaa=vbuaa_band_vbuc1
Succesfully synthesized fragment vbuxx=vbuaa_band_vbuc1 (from vbuaa=vbuaa_band_vbuc1)
Attempting fragment synthesis vbuxx=vbuxx_band_vbuc1
Attempting fragment synthesis vbuaa=vbuxx_band_vbuc1
Succesfully loaded fragment vbuaa=vbuaa_band_vbuc1
Succesfully synthesized fragment vbuaa=vbuxx_band_vbuc1 (from vbuaa=vbuaa_band_vbuc1)
Succesfully synthesized fragment vbuxx=vbuxx_band_vbuc1 (from vbuaa=vbuxx_band_vbuc1)
Attempting fragment synthesis vbuxx=vbuyy_band_vbuc1
Attempting fragment synthesis vbuaa=vbuyy_band_vbuc1
Succesfully loaded fragment vbuaa=vbuaa_band_vbuc1
Succesfully synthesized fragment vbuaa=vbuyy_band_vbuc1 (from vbuaa=vbuaa_band_vbuc1)
Succesfully synthesized fragment vbuxx=vbuyy_band_vbuc1 (from vbuaa=vbuyy_band_vbuc1)
Attempting fragment synthesis vbuyy=vbuz1_band_vbuc1
Attempting fragment synthesis vbuaa=vbuz1_band_vbuc1
Succesfully loaded fragment vbuaa=vbuaa_band_vbuc1
Succesfully synthesized fragment vbuaa=vbuz1_band_vbuc1 (from vbuaa=vbuaa_band_vbuc1)
Succesfully synthesized fragment vbuyy=vbuz1_band_vbuc1 (from vbuaa=vbuz1_band_vbuc1)
Attempting fragment synthesis vbuyy=vbuaa_band_vbuc1
Succesfully loaded fragment vbuaa=vbuaa_band_vbuc1
Succesfully synthesized fragment vbuyy=vbuaa_band_vbuc1 (from vbuaa=vbuaa_band_vbuc1)
Attempting fragment synthesis vbuyy=vbuxx_band_vbuc1
Attempting fragment synthesis vbuaa=vbuxx_band_vbuc1
Succesfully loaded fragment vbuaa=vbuaa_band_vbuc1
Succesfully synthesized fragment vbuaa=vbuxx_band_vbuc1 (from vbuaa=vbuaa_band_vbuc1)
Succesfully synthesized fragment vbuyy=vbuxx_band_vbuc1 (from vbuaa=vbuxx_band_vbuc1)
Attempting fragment synthesis vbuyy=vbuyy_band_vbuc1
Attempting fragment synthesis vbuaa=vbuyy_band_vbuc1
Succesfully loaded fragment vbuaa=vbuaa_band_vbuc1
Succesfully synthesized fragment vbuaa=vbuyy_band_vbuc1 (from vbuaa=vbuaa_band_vbuc1)
Succesfully synthesized fragment vbuyy=vbuyy_band_vbuc1 (from vbuaa=vbuyy_band_vbuc1)
Statement [28] (byte~) init_mul_tables::$0 ← (byte) init_mul_tables::i#4 & (byte/signed byte/word/signed word) 1 [ init_mul_tables::i#4 init_mul_tables::sqr#6 init_mul_tables::$0 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#4 init_mul_tables::sqr#6 init_mul_tables::$0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:3 [ init_mul_tables::i#4 init_mul_tables::i#1 ]
Succesfully loaded fragment vbuaa_neq_0_then_la1
Succesfully loaded fragment vbuaa=_lo_vwuz1
Attempting fragment synthesis vbuxx=_lo_vwuz1
Succesfully loaded fragment vbuaa=_lo_vwuz1
Succesfully synthesized fragment vbuxx=_lo_vwuz1 (from vbuaa=_lo_vwuz1)
Attempting fragment synthesis vbuyy=_lo_vwuz1
Succesfully loaded fragment vbuaa=_lo_vwuz1
Succesfully synthesized fragment vbuyy=_lo_vwuz1 (from vbuaa=_lo_vwuz1)
Statement [32] (byte~) init_mul_tables::$3 ← < (word) init_mul_tables::sqr#5 [ init_mul_tables::i#4 init_mul_tables::sqr#5 init_mul_tables::$3 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#4 init_mul_tables::sqr#5 init_mul_tables::$3 ] ) always clobbers reg byte a 
Attempting fragment synthesis pbuc1_derefidx_vbuxx=vbuz1
Succesfully loaded fragment vwuc1_derefidx_vbuxx=vbuz1
Succesfully synthesized fragment pbuc1_derefidx_vbuxx=vbuz1 (from vwuc1_derefidx_vbuxx=vbuz1)
Attempting fragment synthesis pbuc1_derefidx_vbuyy=vbuz1
Succesfully loaded fragment vwuc1_derefidx_vbuyy=vbuz1
Succesfully synthesized fragment pbuc1_derefidx_vbuyy=vbuz1 (from vwuc1_derefidx_vbuyy=vbuz1)
Attempting fragment synthesis pbuc1_derefidx_vbuz1=vbuaa
Succesfully loaded fragment vwuc1_derefidx_vbuz1=vbuaa
Succesfully synthesized fragment pbuc1_derefidx_vbuz1=vbuaa (from vwuc1_derefidx_vbuz1=vbuaa)
Succesfully loaded fragment vbuaa=_hi_vwuz1
Attempting fragment synthesis vbuxx=_hi_vwuz1
Succesfully loaded fragment vbuaa=_hi_vwuz1
Succesfully synthesized fragment vbuxx=_hi_vwuz1 (from vbuaa=_hi_vwuz1)
Attempting fragment synthesis vbuyy=_hi_vwuz1
Succesfully loaded fragment vbuaa=_hi_vwuz1
Succesfully synthesized fragment vbuyy=_hi_vwuz1 (from vbuaa=_hi_vwuz1)
Statement [34] (byte~) init_mul_tables::$4 ← > (word) init_mul_tables::sqr#5 [ init_mul_tables::i#4 init_mul_tables::sqr#5 init_mul_tables::$4 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#4 init_mul_tables::sqr#5 init_mul_tables::$4 ] ) always clobbers reg byte a 
Attempting fragment synthesis vbuz1=vbuxx_ror_1
Attempting fragment synthesis vbuaa=vbuxx_ror_1
Succesfully loaded fragment vbuaa=vbuaa_ror_1
Succesfully synthesized fragment vbuaa=vbuxx_ror_1 (from vbuaa=vbuaa_ror_1)
Succesfully synthesized fragment vbuz1=vbuxx_ror_1 (from vbuaa=vbuxx_ror_1)
Attempting fragment synthesis vbuz1=vbuyy_ror_1
Attempting fragment synthesis vbuaa=vbuyy_ror_1
Succesfully loaded fragment vbuaa=vbuaa_ror_1
Succesfully synthesized fragment vbuaa=vbuyy_ror_1 (from vbuaa=vbuaa_ror_1)
Succesfully synthesized fragment vbuz1=vbuyy_ror_1 (from vbuaa=vbuyy_ror_1)
Attempting fragment synthesis vbuaa=vbuz1_ror_1
Succesfully loaded fragment vbuaa=vbuaa_ror_1
Succesfully synthesized fragment vbuaa=vbuz1_ror_1 (from vbuaa=vbuaa_ror_1)
Attempting fragment synthesis vbuaa=vbuxx_ror_1
Succesfully loaded fragment vbuaa=vbuaa_ror_1
Succesfully synthesized fragment vbuaa=vbuxx_ror_1 (from vbuaa=vbuaa_ror_1)
Attempting fragment synthesis vbuaa=vbuyy_ror_1
Succesfully loaded fragment vbuaa=vbuaa_ror_1
Succesfully synthesized fragment vbuaa=vbuyy_ror_1 (from vbuaa=vbuaa_ror_1)
Attempting fragment synthesis vbuxx=vbuz1_ror_1
Attempting fragment synthesis vbuaa=vbuz1_ror_1
Succesfully loaded fragment vbuaa=vbuaa_ror_1
Succesfully synthesized fragment vbuaa=vbuz1_ror_1 (from vbuaa=vbuaa_ror_1)
Succesfully synthesized fragment vbuxx=vbuz1_ror_1 (from vbuaa=vbuz1_ror_1)
Attempting fragment synthesis vbuxx=vbuxx_ror_1
Attempting fragment synthesis vbuaa=vbuxx_ror_1
Succesfully loaded fragment vbuaa=vbuaa_ror_1
Succesfully synthesized fragment vbuaa=vbuxx_ror_1 (from vbuaa=vbuaa_ror_1)
Succesfully synthesized fragment vbuxx=vbuxx_ror_1 (from vbuaa=vbuxx_ror_1)
Attempting fragment synthesis vbuxx=vbuyy_ror_1
Attempting fragment synthesis vbuaa=vbuyy_ror_1
Succesfully loaded fragment vbuaa=vbuaa_ror_1
Succesfully synthesized fragment vbuaa=vbuyy_ror_1 (from vbuaa=vbuaa_ror_1)
Succesfully synthesized fragment vbuxx=vbuyy_ror_1 (from vbuaa=vbuyy_ror_1)
Attempting fragment synthesis vbuyy=vbuz1_ror_1
Attempting fragment synthesis vbuaa=vbuz1_ror_1
Succesfully loaded fragment vbuaa=vbuaa_ror_1
Succesfully synthesized fragment vbuaa=vbuz1_ror_1 (from vbuaa=vbuaa_ror_1)
Succesfully synthesized fragment vbuyy=vbuz1_ror_1 (from vbuaa=vbuz1_ror_1)
Attempting fragment synthesis vbuyy=vbuxx_ror_1
Attempting fragment synthesis vbuaa=vbuxx_ror_1
Succesfully loaded fragment vbuaa=vbuaa_ror_1
Succesfully synthesized fragment vbuaa=vbuxx_ror_1 (from vbuaa=vbuaa_ror_1)
Succesfully synthesized fragment vbuyy=vbuxx_ror_1 (from vbuaa=vbuxx_ror_1)
Attempting fragment synthesis vbuyy=vbuyy_ror_1
Attempting fragment synthesis vbuaa=vbuyy_ror_1
Succesfully loaded fragment vbuaa=vbuaa_ror_1
Succesfully synthesized fragment vbuaa=vbuyy_ror_1 (from vbuaa=vbuaa_ror_1)
Succesfully synthesized fragment vbuyy=vbuyy_ror_1 (from vbuaa=vbuyy_ror_1)
Statement [36] (byte~) init_mul_tables::$5 ← (byte) init_mul_tables::i#4 >> (byte/signed byte/word/signed word) 1 [ init_mul_tables::i#4 init_mul_tables::sqr#5 init_mul_tables::$5 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#4 init_mul_tables::sqr#5 init_mul_tables::$5 ] ) always clobbers reg byte a 
Attempting fragment synthesis vwuz1=vwuz1_plus_vbuaa
Succesfully loaded fragment vwuz1=vbuaa_plus_vwuz1
Succesfully synthesized fragment vwuz1=vwuz1_plus_vbuaa (from vwuz1=vbuaa_plus_vwuz1)
Attempting fragment synthesis vwuz1=vwuz1_plus_vbuxx
Attempting fragment synthesis vwuz1=vbuxx_plus_vwuz1
Succesfully loaded fragment vwuz1=vbuaa_plus_vwuz1
Succesfully synthesized fragment vwuz1=vbuxx_plus_vwuz1 (from vwuz1=vbuaa_plus_vwuz1)
Succesfully synthesized fragment vwuz1=vwuz1_plus_vbuxx (from vwuz1=vbuxx_plus_vwuz1)
Attempting fragment synthesis vwuz1=vwuz1_plus_vbuyy
Attempting fragment synthesis vwuz1=vbuyy_plus_vwuz1
Succesfully loaded fragment vwuz1=vbuaa_plus_vwuz1
Succesfully synthesized fragment vwuz1=vbuyy_plus_vwuz1 (from vwuz1=vbuaa_plus_vwuz1)
Succesfully synthesized fragment vwuz1=vwuz1_plus_vbuyy (from vwuz1=vbuyy_plus_vwuz1)
Statement [37] (word) init_mul_tables::sqr#1 ← (word) init_mul_tables::sqr#5 + (byte~) init_mul_tables::$5 [ init_mul_tables::i#4 init_mul_tables::sqr#1 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#4 init_mul_tables::sqr#1 ] ) always clobbers reg byte a 
Statement [41] (byte~) init_mul_tables::$8 ← (byte) init_mul_tables::i#6 & (byte/signed byte/word/signed word) 1 [ init_mul_tables::i#6 init_mul_tables::sqr#10 init_mul_tables::$8 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::sqr#10 init_mul_tables::$8 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:4 [ init_mul_tables::i#6 init_mul_tables::i#3 ]
Statement [45] (byte~) init_mul_tables::$12 ← < (word) init_mul_tables::sqr#7 [ init_mul_tables::i#6 init_mul_tables::sqr#7 init_mul_tables::$12 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::sqr#7 init_mul_tables::$12 ] ) always clobbers reg byte a 
Statement [47] (byte~) init_mul_tables::$14 ← > (word) init_mul_tables::sqr#7 [ init_mul_tables::i#6 init_mul_tables::sqr#7 init_mul_tables::$14 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::sqr#7 init_mul_tables::$14 ] ) always clobbers reg byte a 
Attempting fragment synthesis pbuc1_derefidx_vbuz1=vbuxx
Succesfully loaded fragment vwuc1_derefidx_vbuz1=vbuxx
Succesfully synthesized fragment pbuc1_derefidx_vbuz1=vbuxx (from vwuc1_derefidx_vbuz1=vbuxx)
Attempting fragment synthesis pbuc1_derefidx_vbuz1=vbuyy
Succesfully loaded fragment vwuc1_derefidx_vbuz1=vbuyy
Succesfully synthesized fragment pbuc1_derefidx_vbuz1=vbuyy (from vwuc1_derefidx_vbuz1=vbuyy)
Statement [49] (word~) init_mul_tables::$15 ← (word) init_mul_tables::sqr#7 + (byte/word/signed word) 128 [ init_mul_tables::i#6 init_mul_tables::$15 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::$15 ] ) always clobbers reg byte a 
Statement [50] (byte~) init_mul_tables::$16 ← (byte) init_mul_tables::i#6 >> (byte/signed byte/word/signed word) 1 [ init_mul_tables::i#6 init_mul_tables::$15 init_mul_tables::$16 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::$15 init_mul_tables::$16 ] ) always clobbers reg byte a 
Attempting fragment synthesis vwuz1=vwuz2_plus_vbuaa
Succesfully loaded fragment vwuz1=vbuaa_plus_vwuz2
Succesfully synthesized fragment vwuz1=vwuz2_plus_vbuaa (from vwuz1=vbuaa_plus_vwuz2)
Attempting fragment synthesis vwuz1=vwuz2_plus_vbuxx
Attempting fragment synthesis vwuz1=vbuxx_plus_vwuz2
Succesfully loaded fragment vwuz1=vbuaa_plus_vwuz2
Succesfully synthesized fragment vwuz1=vbuxx_plus_vwuz2 (from vwuz1=vbuaa_plus_vwuz2)
Succesfully synthesized fragment vwuz1=vwuz2_plus_vbuxx (from vwuz1=vbuxx_plus_vwuz2)
Attempting fragment synthesis vwuz1=vwuz2_plus_vbuyy
Attempting fragment synthesis vwuz1=vbuyy_plus_vwuz2
Succesfully loaded fragment vwuz1=vbuaa_plus_vwuz2
Succesfully synthesized fragment vwuz1=vbuyy_plus_vwuz2 (from vwuz1=vbuaa_plus_vwuz2)
Succesfully synthesized fragment vwuz1=vwuz2_plus_vbuyy (from vwuz1=vbuyy_plus_vwuz2)
Statement [51] (word) init_mul_tables::sqr#3 ← (word~) init_mul_tables::$15 + (byte~) init_mul_tables::$16 [ init_mul_tables::i#6 init_mul_tables::sqr#3 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::sqr#3 ] ) always clobbers reg byte a 
Statement [11] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 5 [ ] ( main:2::mul_tables_compare:9 [ ] ) always clobbers reg byte a 
Unknown fragment pbuc1_derefidx_vbuyy_eq_pbuc2_derefidx_vbuyy_then_la1
Potential register analysis [13] if(*(mul_sqr_lo#0 + mul_tables_compare::i#10)==*(asm_mul_sqr_lo#0 + mul_tables_compare::i#10)) goto mul_tables_compare::@2 missing fragment pbuc1_derefidx_vbuyy_eq_pbuc2_derefidx_vbuyy_then_la1 allocation: reg byte y [ mul_tables_compare::i#10 mul_tables_compare::i#1 ] 
MISSING FRAGMENTS
  pbuc1_derefidx_vbuyy_eq_pbuc2_derefidx_vbuyy_then_la1
Statement [13] if(*((const byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) always clobbers reg byte a 
Statement [14] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) always clobbers reg byte a 
Unknown fragment pbuc1_derefidx_vbuyy_eq_pbuc2_derefidx_vbuyy_then_la1
Potential register analysis [15] if(*(mul_sqr_hi#0+256 + mul_tables_compare::i#10)==*(asm_mul_sqr_hi#0+256 + mul_tables_compare::i#10)) goto mul_tables_compare::@3 missing fragment pbuc1_derefidx_vbuyy_eq_pbuc2_derefidx_vbuyy_then_la1 allocation: reg byte y [ mul_tables_compare::i#10 mul_tables_compare::i#1 ] 
MISSING FRAGMENTS
  pbuc1_derefidx_vbuyy_eq_pbuc2_derefidx_vbuyy_then_la1
Statement [15] if(*((const byte[512]) mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@3 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) always clobbers reg byte a 
Statement [16] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) always clobbers reg byte a 
Unknown fragment pbuc1_derefidx_vbuyy_eq_pbuc2_derefidx_vbuyy_then_la1
Potential register analysis [17] if(*(mul_sqr_lo#0 + mul_tables_compare::i#10)==*(asm_mul_sqr_lo#0 + mul_tables_compare::i#10)) goto mul_tables_compare::@4 missing fragment pbuc1_derefidx_vbuyy_eq_pbuc2_derefidx_vbuyy_then_la1 allocation: reg byte y [ mul_tables_compare::i#10 mul_tables_compare::i#1 ] 
MISSING FRAGMENTS
  pbuc1_derefidx_vbuyy_eq_pbuc2_derefidx_vbuyy_then_la1
Statement [17] if(*((const byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@4 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) always clobbers reg byte a 
Statement [18] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) always clobbers reg byte a 
Unknown fragment pbuc1_derefidx_vbuyy_eq_pbuc2_derefidx_vbuyy_then_la1
Potential register analysis [19] if(*(mul_sqr_hi#0+256 + mul_tables_compare::i#10)==*(asm_mul_sqr_hi#0+256 + mul_tables_compare::i#10)) goto mul_tables_compare::@5 missing fragment pbuc1_derefidx_vbuyy_eq_pbuc2_derefidx_vbuyy_then_la1 allocation: reg byte y [ mul_tables_compare::i#10 mul_tables_compare::i#1 ] 
MISSING FRAGMENTS
  pbuc1_derefidx_vbuyy_eq_pbuc2_derefidx_vbuyy_then_la1
Statement [19] if(*((const byte[512]) mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@5 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) always clobbers reg byte a 
Statement [20] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) always clobbers reg byte a 
Statement asm { ldx#$00txa.byte$c9lb1:tyaadc#$00ml1:staasm_mul_sqr_hi,xtaycmp#$40txarorml9:adc#$00staml9+1inxml0:staasm_mul_sqr_lo,xbnelb1incml0+2incml1+2clcinybnelb1 } always clobbers reg byte a reg byte x reg byte y 
Statement [28] (byte~) init_mul_tables::$0 ← (byte) init_mul_tables::i#4 & (byte/signed byte/word/signed word) 1 [ init_mul_tables::i#4 init_mul_tables::sqr#6 init_mul_tables::$0 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#4 init_mul_tables::sqr#6 init_mul_tables::$0 ] ) always clobbers reg byte a 
Statement [32] (byte~) init_mul_tables::$3 ← < (word) init_mul_tables::sqr#5 [ init_mul_tables::i#4 init_mul_tables::sqr#5 init_mul_tables::$3 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#4 init_mul_tables::sqr#5 init_mul_tables::$3 ] ) always clobbers reg byte a 
Statement [34] (byte~) init_mul_tables::$4 ← > (word) init_mul_tables::sqr#5 [ init_mul_tables::i#4 init_mul_tables::sqr#5 init_mul_tables::$4 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#4 init_mul_tables::sqr#5 init_mul_tables::$4 ] ) always clobbers reg byte a 
Statement [36] (byte~) init_mul_tables::$5 ← (byte) init_mul_tables::i#4 >> (byte/signed byte/word/signed word) 1 [ init_mul_tables::i#4 init_mul_tables::sqr#5 init_mul_tables::$5 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#4 init_mul_tables::sqr#5 init_mul_tables::$5 ] ) always clobbers reg byte a 
Statement [37] (word) init_mul_tables::sqr#1 ← (word) init_mul_tables::sqr#5 + (byte~) init_mul_tables::$5 [ init_mul_tables::i#4 init_mul_tables::sqr#1 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#4 init_mul_tables::sqr#1 ] ) always clobbers reg byte a 
Statement [41] (byte~) init_mul_tables::$8 ← (byte) init_mul_tables::i#6 & (byte/signed byte/word/signed word) 1 [ init_mul_tables::i#6 init_mul_tables::sqr#10 init_mul_tables::$8 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::sqr#10 init_mul_tables::$8 ] ) always clobbers reg byte a 
Statement [45] (byte~) init_mul_tables::$12 ← < (word) init_mul_tables::sqr#7 [ init_mul_tables::i#6 init_mul_tables::sqr#7 init_mul_tables::$12 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::sqr#7 init_mul_tables::$12 ] ) always clobbers reg byte a 
Statement [47] (byte~) init_mul_tables::$14 ← > (word) init_mul_tables::sqr#7 [ init_mul_tables::i#6 init_mul_tables::sqr#7 init_mul_tables::$14 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::sqr#7 init_mul_tables::$14 ] ) always clobbers reg byte a 
Statement [49] (word~) init_mul_tables::$15 ← (word) init_mul_tables::sqr#7 + (byte/word/signed word) 128 [ init_mul_tables::i#6 init_mul_tables::$15 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::$15 ] ) always clobbers reg byte a 
Statement [50] (byte~) init_mul_tables::$16 ← (byte) init_mul_tables::i#6 >> (byte/signed byte/word/signed word) 1 [ init_mul_tables::i#6 init_mul_tables::$15 init_mul_tables::$16 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::$15 init_mul_tables::$16 ] ) always clobbers reg byte a 
Statement [51] (word) init_mul_tables::sqr#3 ← (word~) init_mul_tables::$15 + (byte~) init_mul_tables::$16 [ init_mul_tables::i#6 init_mul_tables::sqr#3 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::sqr#3 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ mul_tables_compare::i#10 mul_tables_compare::i#1 ] : zp ZP_BYTE:2 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 [ init_mul_tables::i#4 init_mul_tables::i#1 ] : zp ZP_BYTE:3 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:4 [ init_mul_tables::i#6 init_mul_tables::i#3 ] : zp ZP_BYTE:4 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:5 [ init_mul_tables::sqr#7 init_mul_tables::sqr#10 init_mul_tables::sqr#3 init_mul_tables::sqr#5 init_mul_tables::sqr#6 init_mul_tables::sqr#1 init_mul_tables::sqr#2 init_mul_tables::sqr#4 ] : zp ZP_WORD:5 , 
Potential registers zp ZP_BYTE:7 [ init_mul_tables::$0 ] : zp ZP_BYTE:7 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:8 [ init_mul_tables::$3 ] : zp ZP_BYTE:8 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:9 [ init_mul_tables::$4 ] : zp ZP_BYTE:9 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:10 [ init_mul_tables::$5 ] : zp ZP_BYTE:10 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:11 [ init_mul_tables::$8 ] : zp ZP_BYTE:11 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:12 [ init_mul_tables::$12 ] : zp ZP_BYTE:12 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:13 [ init_mul_tables::$14 ] : zp ZP_BYTE:13 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:14 [ init_mul_tables::$15 ] : zp ZP_WORD:14 , 
Potential registers zp ZP_BYTE:16 [ init_mul_tables::$16 ] : zp ZP_BYTE:16 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [init_mul_tables] 108.17: zp ZP_WORD:5 [ init_mul_tables::sqr#7 init_mul_tables::sqr#10 init_mul_tables::sqr#3 init_mul_tables::sqr#5 init_mul_tables::sqr#6 init_mul_tables::sqr#1 init_mul_tables::sqr#2 init_mul_tables::sqr#4 ] 22.5: zp ZP_BYTE:3 [ init_mul_tables::i#4 init_mul_tables::i#1 ] 22: zp ZP_BYTE:4 [ init_mul_tables::i#6 init_mul_tables::i#3 ] 22: zp ZP_BYTE:7 [ init_mul_tables::$0 ] 22: zp ZP_BYTE:8 [ init_mul_tables::$3 ] 22: zp ZP_BYTE:9 [ init_mul_tables::$4 ] 22: zp ZP_BYTE:10 [ init_mul_tables::$5 ] 22: zp ZP_BYTE:11 [ init_mul_tables::$8 ] 22: zp ZP_BYTE:12 [ init_mul_tables::$12 ] 22: zp ZP_BYTE:13 [ init_mul_tables::$14 ] 22: zp ZP_BYTE:16 [ init_mul_tables::$16 ] 11: zp ZP_WORD:14 [ init_mul_tables::$15 ] 
Uplift Scope [mul_tables_compare] 28.72: zp ZP_BYTE:2 [ mul_tables_compare::i#10 mul_tables_compare::i#1 ] 
Uplift Scope [main] 
Uplift Scope [init_mul_tables_asm] 
Uplift Scope [] 

Succesfully loaded fragment vbuxx=vbuc1
Succesfully loaded fragment vbuxx=_inc_vbuxx
Succesfully loaded fragment vbuyy=vbuc1
Succesfully loaded fragment vbuyy=_inc_vbuyy
Succesfully loaded fragment vbuyy_neq_0_then_la1
Attempting fragment synthesis pbuc1_derefidx_vbuxx=vbuaa
Succesfully loaded fragment vwuc1_derefidx_vbuxx=vbuaa
Succesfully synthesized fragment pbuc1_derefidx_vbuxx=vbuaa (from vwuc1_derefidx_vbuxx=vbuaa)
Attempting fragment synthesis pbuc1_derefidx_vbuyy=vbuaa
Succesfully loaded fragment vwuc1_derefidx_vbuyy=vbuaa
Succesfully synthesized fragment pbuc1_derefidx_vbuyy=vbuaa (from vwuc1_derefidx_vbuyy=vbuaa)
Attempting fragment synthesis pbuc1_derefidx_vbuyy=vbuxx
Succesfully loaded fragment vwuc1_derefidx_vbuyy=vbuxx
Succesfully synthesized fragment pbuc1_derefidx_vbuyy=vbuxx (from vwuc1_derefidx_vbuyy=vbuxx)
Attempting fragment synthesis pbuc1_derefidx_vbuxx=vbuyy
Succesfully loaded fragment vwuc1_derefidx_vbuxx=vbuyy
Succesfully synthesized fragment pbuc1_derefidx_vbuxx=vbuyy (from vwuc1_derefidx_vbuxx=vbuyy)
Uplift attempts [init_mul_tables] 10000/589824 (limiting to 10000)
Uplifting [init_mul_tables] best 3547 combination zp ZP_WORD:5 [ init_mul_tables::sqr#7 init_mul_tables::sqr#10 init_mul_tables::sqr#3 init_mul_tables::sqr#5 init_mul_tables::sqr#6 init_mul_tables::sqr#1 init_mul_tables::sqr#2 init_mul_tables::sqr#4 ] reg byte x [ init_mul_tables::i#4 init_mul_tables::i#1 ] reg byte x [ init_mul_tables::i#6 init_mul_tables::i#3 ] reg byte a [ init_mul_tables::$0 ] reg byte a [ init_mul_tables::$3 ] reg byte a [ init_mul_tables::$4 ] reg byte a [ init_mul_tables::$5 ] zp ZP_BYTE:11 [ init_mul_tables::$8 ] reg byte a [ init_mul_tables::$12 ] zp ZP_BYTE:13 [ init_mul_tables::$14 ] zp ZP_BYTE:16 [ init_mul_tables::$16 ] zp ZP_WORD:14 [ init_mul_tables::$15 ] 
Limited combination testing to 10000 combinations of 589824 possible.
Unknown fragment pbuc1_derefidx_vbuyy_eq_pbuc2_derefidx_vbuyy_then_la1
Uplifting [mul_tables_compare] best 3357 combination reg byte x [ mul_tables_compare::i#10 mul_tables_compare::i#1 ] 
Uplifting [main] best 3357 combination 
Uplifting [init_mul_tables_asm] best 3357 combination 
Uplifting [] best 3357 combination 
MISSING FRAGMENTS
  pbuc1_derefidx_vbuyy_eq_pbuc2_derefidx_vbuyy_then_la1
Attempting to uplift remaining variables inzp ZP_BYTE:11 [ init_mul_tables::$8 ]
Uplifting [init_mul_tables] best 3317 combination reg byte a [ init_mul_tables::$8 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:13 [ init_mul_tables::$14 ]
Uplifting [init_mul_tables] best 3257 combination reg byte a [ init_mul_tables::$14 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:16 [ init_mul_tables::$16 ]
Uplifting [init_mul_tables] best 3197 combination reg byte a [ init_mul_tables::$16 ] 
Coalescing zero page register [ zp ZP_WORD:5 [ init_mul_tables::sqr#7 init_mul_tables::sqr#10 init_mul_tables::sqr#3 init_mul_tables::sqr#5 init_mul_tables::sqr#6 init_mul_tables::sqr#1 init_mul_tables::sqr#2 init_mul_tables::sqr#4 ] ] with [ zp ZP_WORD:14 [ init_mul_tables::$15 ] ]
Allocated (was zp ZP_WORD:5) zp ZP_WORD:2 [ init_mul_tables::sqr#7 init_mul_tables::sqr#10 init_mul_tables::sqr#3 init_mul_tables::sqr#5 init_mul_tables::sqr#6 init_mul_tables::sqr#1 init_mul_tables::sqr#2 init_mul_tables::sqr#4 init_mul_tables::$15 ]
Succesfully loaded fragment vwuz1=vwuz1_plus_vbuc1

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const BGCOL = $d021
  mul_sqr_lo: .fill 512, 0
  mul_sqr_hi: .fill 512, 0
  asm_mul_sqr_lo: .fill 512, 0
  asm_mul_sqr_hi: .fill 512, 0
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @4 [phi:@begin->@4]
b4_from_bbegin:
  jmp b4
//SEG4 @4
b4:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @4 to main [phi:@4->main]
main_from_b4:
  jsr main
//SEG7 [3] phi from @4 to @end [phi:@4->@end]
bend_from_b4:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
  //SEG10 [5] call init_mul_tables param-assignment [ ] ( main:2 [ ] )
  //SEG11 [26] phi from main to init_mul_tables [phi:main->init_mul_tables]
  init_mul_tables_from_main:
    jsr init_mul_tables
  //SEG12 [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    jmp b1
  //SEG13 main::@1
  b1:
  //SEG14 [7] call init_mul_tables_asm param-assignment [ ] ( main:2 [ ] )
    jsr init_mul_tables_asm
  //SEG15 [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
  //SEG16 main::@2
  b2:
  //SEG17 [9] call mul_tables_compare param-assignment [ ] ( main:2 [ ] )
    jsr mul_tables_compare
    jmp breturn
  //SEG18 main::@return
  breturn:
  //SEG19 [10] return  [ ] ( main:2 [ ] )
    rts
}
//SEG20 mul_tables_compare
mul_tables_compare: {
  //SEG21 [11] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 5 [ ] ( main:2::mul_tables_compare:9 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #5
    sta BGCOL
  //SEG22 [12] phi from mul_tables_compare to mul_tables_compare::@1 [phi:mul_tables_compare->mul_tables_compare::@1]
  b1_from_mul_tables_compare:
  //SEG23 [12] phi (byte) mul_tables_compare::i#10 = (byte/signed byte/word/signed word) 0 [phi:mul_tables_compare->mul_tables_compare::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  //SEG24 [12] phi from mul_tables_compare::@5 to mul_tables_compare::@1 [phi:mul_tables_compare::@5->mul_tables_compare::@1]
  b1_from_b5:
  //SEG25 [12] phi (byte) mul_tables_compare::i#10 = (byte) mul_tables_compare::i#1 [phi:mul_tables_compare::@5->mul_tables_compare::@1#0] -- register_copy 
    jmp b1
  //SEG26 mul_tables_compare::@1
  b1:
  //SEG27 [13] if(*((const byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) -- pbuc1_derefidx_vbuxx_eq_pbuc2_derefidx_vbuxx_then_la1 
    lda mul_sqr_lo,x
    cmp asm_mul_sqr_lo,x
    beq b2
    jmp b6
  //SEG28 mul_tables_compare::@6
  b6:
  //SEG29 [14] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) -- _deref_pbuc1=vbuc2 
    lda #2
    sta BGCOL
    jmp b2
  //SEG30 mul_tables_compare::@2
  b2:
  //SEG31 [15] if(*((const byte[512]) mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@3 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) -- pbuc1_derefidx_vbuxx_eq_pbuc2_derefidx_vbuxx_then_la1 
    lda mul_sqr_hi+$100,x
    cmp asm_mul_sqr_hi+$100,x
    beq b3
    jmp b7
  //SEG32 mul_tables_compare::@7
  b7:
  //SEG33 [16] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) -- _deref_pbuc1=vbuc2 
    lda #2
    sta BGCOL
    jmp b3
  //SEG34 mul_tables_compare::@3
  b3:
  //SEG35 [17] if(*((const byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@4 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) -- pbuc1_derefidx_vbuxx_eq_pbuc2_derefidx_vbuxx_then_la1 
    lda mul_sqr_lo,x
    cmp asm_mul_sqr_lo,x
    beq b4
    jmp b8
  //SEG36 mul_tables_compare::@8
  b8:
  //SEG37 [18] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) -- _deref_pbuc1=vbuc2 
    lda #2
    sta BGCOL
    jmp b4
  //SEG38 mul_tables_compare::@4
  b4:
  //SEG39 [19] if(*((const byte[512]) mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@5 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) -- pbuc1_derefidx_vbuxx_eq_pbuc2_derefidx_vbuxx_then_la1 
    lda mul_sqr_hi+$100,x
    cmp asm_mul_sqr_hi+$100,x
    beq b5
    jmp b9
  //SEG40 mul_tables_compare::@9
  b9:
  //SEG41 [20] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) -- _deref_pbuc1=vbuc2 
    lda #2
    sta BGCOL
    jmp b5
  //SEG42 mul_tables_compare::@5
  b5:
  //SEG43 [21] (byte) mul_tables_compare::i#1 ← ++ (byte) mul_tables_compare::i#10 [ mul_tables_compare::i#1 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG44 [22] if((byte) mul_tables_compare::i#1!=(byte/signed byte/word/signed word) 0) goto mul_tables_compare::@1 [ mul_tables_compare::i#1 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#1 ] ) -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b1_from_b5
    jmp breturn
  //SEG45 mul_tables_compare::@return
  breturn:
  //SEG46 [23] return  [ ] ( main:2::mul_tables_compare:9 [ ] )
    rts
}
//SEG47 init_mul_tables_asm
init_mul_tables_asm: {
  //SEG48 asm { ldx#$00txa.byte$c9lb1:tyaadc#$00ml1:staasm_mul_sqr_hi,xtaycmp#$40txarorml9:adc#$00staml9+1inxml0:staasm_mul_sqr_lo,xbnelb1incml0+2incml1+2clcinybnelb1 }
    ldx #0
    txa
    .byte $c9
  lb1:
    tya
    adc #0
  ml1:
    sta asm_mul_sqr_hi,x
    tay
    cmp #$40
    txa
    ror
  ml9:
    adc #0
    sta ml9+1
    inx
  ml0:
    sta asm_mul_sqr_lo,x
    bne lb1
    inc ml0+2
    inc ml1+2
    clc
    iny
    bne lb1
    jmp breturn
  //SEG49 init_mul_tables_asm::@return
  breturn:
  //SEG50 [25] return  [ ] ( main:2::init_mul_tables_asm:7 [ ] )
    rts
}
//SEG51 init_mul_tables
init_mul_tables: {
    .label _15 = 2
    .label sqr = 2
  //SEG52 [27] phi from init_mul_tables to init_mul_tables::@1 [phi:init_mul_tables->init_mul_tables::@1]
  b1_from_init_mul_tables:
  //SEG53 [27] phi (word) init_mul_tables::sqr#6 = (byte/signed byte/word/signed word) 0 [phi:init_mul_tables->init_mul_tables::@1#0] -- vwuz1=vbuc1 
    lda #0
    sta sqr
    lda #0
    sta sqr+1
  //SEG54 [27] phi (byte) init_mul_tables::i#4 = (byte/signed byte/word/signed word) 1 [phi:init_mul_tables->init_mul_tables::@1#1] -- vbuxx=vbuc1 
    ldx #1
    jmp b1
  //SEG55 [27] phi from init_mul_tables::@2 to init_mul_tables::@1 [phi:init_mul_tables::@2->init_mul_tables::@1]
  b1_from_b2:
  //SEG56 [27] phi (word) init_mul_tables::sqr#6 = (word) init_mul_tables::sqr#1 [phi:init_mul_tables::@2->init_mul_tables::@1#0] -- register_copy 
  //SEG57 [27] phi (byte) init_mul_tables::i#4 = (byte) init_mul_tables::i#1 [phi:init_mul_tables::@2->init_mul_tables::@1#1] -- register_copy 
    jmp b1
  //SEG58 init_mul_tables::@1
  b1:
  //SEG59 [28] (byte~) init_mul_tables::$0 ← (byte) init_mul_tables::i#4 & (byte/signed byte/word/signed word) 1 [ init_mul_tables::i#4 init_mul_tables::sqr#6 init_mul_tables::$0 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#4 init_mul_tables::sqr#6 init_mul_tables::$0 ] ) -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
  //SEG60 [29] if((byte~) init_mul_tables::$0!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@2 [ init_mul_tables::i#4 init_mul_tables::sqr#6 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#4 init_mul_tables::sqr#6 ] ) -- vbuaa_neq_0_then_la1 
    cmp #0
    bne b2_from_b1
    jmp b5
  //SEG61 init_mul_tables::@5
  b5:
  //SEG62 [30] (word) init_mul_tables::sqr#2 ← ++ (word) init_mul_tables::sqr#6 [ init_mul_tables::i#4 init_mul_tables::sqr#2 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#4 init_mul_tables::sqr#2 ] ) -- vwuz1=_inc_vwuz1 
    inc sqr
    bne !+
    inc sqr+1
  !:
  //SEG63 [31] phi from init_mul_tables::@1 init_mul_tables::@5 to init_mul_tables::@2 [phi:init_mul_tables::@1/init_mul_tables::@5->init_mul_tables::@2]
  b2_from_b1:
  b2_from_b5:
  //SEG64 [31] phi (word) init_mul_tables::sqr#5 = (word) init_mul_tables::sqr#6 [phi:init_mul_tables::@1/init_mul_tables::@5->init_mul_tables::@2#0] -- register_copy 
    jmp b2
  //SEG65 init_mul_tables::@2
  b2:
  //SEG66 [32] (byte~) init_mul_tables::$3 ← < (word) init_mul_tables::sqr#5 [ init_mul_tables::i#4 init_mul_tables::sqr#5 init_mul_tables::$3 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#4 init_mul_tables::sqr#5 init_mul_tables::$3 ] ) -- vbuaa=_lo_vwuz1 
    lda sqr
  //SEG67 [33] *((const byte[512]) mul_sqr_lo#0 + (byte) init_mul_tables::i#4) ← (byte~) init_mul_tables::$3 [ init_mul_tables::i#4 init_mul_tables::sqr#5 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#4 init_mul_tables::sqr#5 ] ) -- pbuc1_derefidx_vbuxx=vbuaa 
    sta mul_sqr_lo,x
  //SEG68 [34] (byte~) init_mul_tables::$4 ← > (word) init_mul_tables::sqr#5 [ init_mul_tables::i#4 init_mul_tables::sqr#5 init_mul_tables::$4 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#4 init_mul_tables::sqr#5 init_mul_tables::$4 ] ) -- vbuaa=_hi_vwuz1 
    lda sqr+1
  //SEG69 [35] *((const byte[512]) mul_sqr_hi#0 + (byte) init_mul_tables::i#4) ← (byte~) init_mul_tables::$4 [ init_mul_tables::i#4 init_mul_tables::sqr#5 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#4 init_mul_tables::sqr#5 ] ) -- pbuc1_derefidx_vbuxx=vbuaa 
    sta mul_sqr_hi,x
  //SEG70 [36] (byte~) init_mul_tables::$5 ← (byte) init_mul_tables::i#4 >> (byte/signed byte/word/signed word) 1 [ init_mul_tables::i#4 init_mul_tables::sqr#5 init_mul_tables::$5 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#4 init_mul_tables::sqr#5 init_mul_tables::$5 ] ) -- vbuaa=vbuxx_ror_1 
    txa
    lsr
  //SEG71 [37] (word) init_mul_tables::sqr#1 ← (word) init_mul_tables::sqr#5 + (byte~) init_mul_tables::$5 [ init_mul_tables::i#4 init_mul_tables::sqr#1 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#4 init_mul_tables::sqr#1 ] ) -- vwuz1=vwuz1_plus_vbuaa 
    clc
    adc sqr
    sta sqr
    bcc !+
    inc sqr+1
  !:
  //SEG72 [38] (byte) init_mul_tables::i#1 ← ++ (byte) init_mul_tables::i#4 [ init_mul_tables::i#1 init_mul_tables::sqr#1 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#1 init_mul_tables::sqr#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG73 [39] if((byte) init_mul_tables::i#1!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@1 [ init_mul_tables::i#1 init_mul_tables::sqr#1 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#1 init_mul_tables::sqr#1 ] ) -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b1_from_b2
  //SEG74 [40] phi from init_mul_tables::@2 to init_mul_tables::@3 [phi:init_mul_tables::@2->init_mul_tables::@3]
  b3_from_b2:
  //SEG75 [40] phi (word) init_mul_tables::sqr#10 = (word) init_mul_tables::sqr#1 [phi:init_mul_tables::@2->init_mul_tables::@3#0] -- register_copy 
  //SEG76 [40] phi (byte) init_mul_tables::i#6 = (byte/signed byte/word/signed word) 0 [phi:init_mul_tables::@2->init_mul_tables::@3#1] -- vbuxx=vbuc1 
    ldx #0
    jmp b3
  //SEG77 [40] phi from init_mul_tables::@4 to init_mul_tables::@3 [phi:init_mul_tables::@4->init_mul_tables::@3]
  b3_from_b4:
  //SEG78 [40] phi (word) init_mul_tables::sqr#10 = (word) init_mul_tables::sqr#3 [phi:init_mul_tables::@4->init_mul_tables::@3#0] -- register_copy 
  //SEG79 [40] phi (byte) init_mul_tables::i#6 = (byte) init_mul_tables::i#3 [phi:init_mul_tables::@4->init_mul_tables::@3#1] -- register_copy 
    jmp b3
  //SEG80 init_mul_tables::@3
  b3:
  //SEG81 [41] (byte~) init_mul_tables::$8 ← (byte) init_mul_tables::i#6 & (byte/signed byte/word/signed word) 1 [ init_mul_tables::i#6 init_mul_tables::sqr#10 init_mul_tables::$8 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::sqr#10 init_mul_tables::$8 ] ) -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
  //SEG82 [42] if((byte~) init_mul_tables::$8!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@4 [ init_mul_tables::i#6 init_mul_tables::sqr#10 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::sqr#10 ] ) -- vbuaa_neq_0_then_la1 
    cmp #0
    bne b4_from_b3
    jmp b7
  //SEG83 init_mul_tables::@7
  b7:
  //SEG84 [43] (word) init_mul_tables::sqr#4 ← ++ (word) init_mul_tables::sqr#10 [ init_mul_tables::i#6 init_mul_tables::sqr#4 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::sqr#4 ] ) -- vwuz1=_inc_vwuz1 
    inc sqr
    bne !+
    inc sqr+1
  !:
  //SEG85 [44] phi from init_mul_tables::@3 init_mul_tables::@7 to init_mul_tables::@4 [phi:init_mul_tables::@3/init_mul_tables::@7->init_mul_tables::@4]
  b4_from_b3:
  b4_from_b7:
  //SEG86 [44] phi (word) init_mul_tables::sqr#7 = (word) init_mul_tables::sqr#10 [phi:init_mul_tables::@3/init_mul_tables::@7->init_mul_tables::@4#0] -- register_copy 
    jmp b4
  //SEG87 init_mul_tables::@4
  b4:
  //SEG88 [45] (byte~) init_mul_tables::$12 ← < (word) init_mul_tables::sqr#7 [ init_mul_tables::i#6 init_mul_tables::sqr#7 init_mul_tables::$12 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::sqr#7 init_mul_tables::$12 ] ) -- vbuaa=_lo_vwuz1 
    lda sqr
  //SEG89 [46] *((const byte[512]) mul_sqr_lo#0+(word/signed word) 256 + (byte) init_mul_tables::i#6) ← (byte~) init_mul_tables::$12 [ init_mul_tables::i#6 init_mul_tables::sqr#7 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::sqr#7 ] ) -- pbuc1_derefidx_vbuxx=vbuaa 
    sta mul_sqr_lo+$100,x
  //SEG90 [47] (byte~) init_mul_tables::$14 ← > (word) init_mul_tables::sqr#7 [ init_mul_tables::i#6 init_mul_tables::sqr#7 init_mul_tables::$14 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::sqr#7 init_mul_tables::$14 ] ) -- vbuaa=_hi_vwuz1 
    lda sqr+1
  //SEG91 [48] *((const byte[512]) mul_sqr_hi#0+(word/signed word) 256 + (byte) init_mul_tables::i#6) ← (byte~) init_mul_tables::$14 [ init_mul_tables::i#6 init_mul_tables::sqr#7 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::sqr#7 ] ) -- pbuc1_derefidx_vbuxx=vbuaa 
    sta mul_sqr_hi+$100,x
  //SEG92 [49] (word~) init_mul_tables::$15 ← (word) init_mul_tables::sqr#7 + (byte/word/signed word) 128 [ init_mul_tables::i#6 init_mul_tables::$15 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::$15 ] ) -- vwuz1=vwuz1_plus_vbuc1 
    lda _15
    clc
    adc #<$80
    sta _15
    bcc !+
    inc _15+1
  !:
  //SEG93 [50] (byte~) init_mul_tables::$16 ← (byte) init_mul_tables::i#6 >> (byte/signed byte/word/signed word) 1 [ init_mul_tables::i#6 init_mul_tables::$15 init_mul_tables::$16 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::$15 init_mul_tables::$16 ] ) -- vbuaa=vbuxx_ror_1 
    txa
    lsr
  //SEG94 [51] (word) init_mul_tables::sqr#3 ← (word~) init_mul_tables::$15 + (byte~) init_mul_tables::$16 [ init_mul_tables::i#6 init_mul_tables::sqr#3 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::sqr#3 ] ) -- vwuz1=vwuz1_plus_vbuaa 
    clc
    adc sqr
    sta sqr
    bcc !+
    inc sqr+1
  !:
  //SEG95 [52] (byte) init_mul_tables::i#3 ← ++ (byte) init_mul_tables::i#6 [ init_mul_tables::i#3 init_mul_tables::sqr#3 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#3 init_mul_tables::sqr#3 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG96 [53] if((byte) init_mul_tables::i#3!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@3 [ init_mul_tables::i#3 init_mul_tables::sqr#3 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#3 init_mul_tables::sqr#3 ] ) -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b3_from_b4
    jmp breturn
  //SEG97 init_mul_tables::@return
  breturn:
  //SEG98 [54] return  [ ] ( main:2::init_mul_tables:5 [ ] )
    rts
}

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b4
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b6
Removing instruction jmp b2
Removing instruction jmp b7
Removing instruction jmp b3
Removing instruction jmp b8
Removing instruction jmp b4
Removing instruction jmp b9
Removing instruction jmp b5
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b5
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b7
Removing instruction jmp b4
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b1_from_b5 with b1
Replacing label b2_from_b1 with b2
Replacing label b1_from_b2 with b1
Replacing label b4_from_b3 with b4
Replacing label b3_from_b4 with b3
Removing instruction bbegin:
Removing instruction b4_from_bbegin:
Removing instruction main_from_b4:
Removing instruction bend_from_b4:
Removing instruction b1_from_main:
Removing instruction b2_from_b1:
Removing instruction b1_from_b5:
Removing instruction b1_from_b2:
Removing instruction b2_from_b1:
Removing instruction b2_from_b5:
Removing instruction b3_from_b4:
Removing instruction b4_from_b3:
Removing instruction b4_from_b7:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction b4:
Removing instruction bend:
Removing instruction init_mul_tables_from_main:
Removing instruction b1:
Removing instruction b2:
Removing instruction breturn:
Removing instruction b1_from_mul_tables_compare:
Removing instruction b6:
Removing instruction b7:
Removing instruction b8:
Removing instruction b9:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction b1_from_init_mul_tables:
Removing instruction b5:
Removing instruction b3_from_b2:
Removing instruction b7:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b3
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
(label) @4
(label) @begin
(label) @end
(byte*) BGCOL
(const byte*) BGCOL#0 BGCOL = ((byte*))(word) 53281
(byte[512]) asm_mul_sqr_hi
(const byte[512]) asm_mul_sqr_hi#0 asm_mul_sqr_hi = { fill( 512, 0) }
(byte[512]) asm_mul_sqr_lo
(const byte[512]) asm_mul_sqr_lo#0 asm_mul_sqr_lo = { fill( 512, 0) }
(void()) init_mul_tables()
(byte~) init_mul_tables::$0 reg byte a 22.0
(byte~) init_mul_tables::$12 reg byte a 22.0
(byte~) init_mul_tables::$14 reg byte a 22.0
(word~) init_mul_tables::$15 $15 zp ZP_WORD:2 11.0
(byte~) init_mul_tables::$16 reg byte a 22.0
(byte~) init_mul_tables::$3 reg byte a 22.0
(byte~) init_mul_tables::$4 reg byte a 22.0
(byte~) init_mul_tables::$5 reg byte a 22.0
(byte~) init_mul_tables::$8 reg byte a 22.0
(label) init_mul_tables::@1
(label) init_mul_tables::@2
(label) init_mul_tables::@3
(label) init_mul_tables::@4
(label) init_mul_tables::@5
(label) init_mul_tables::@7
(label) init_mul_tables::@return
(byte) init_mul_tables::i
(byte) init_mul_tables::i#1 reg byte x 16.5
(byte) init_mul_tables::i#3 reg byte x 16.5
(byte) init_mul_tables::i#4 reg byte x 6.0
(byte) init_mul_tables::i#6 reg byte x 5.5
(word) init_mul_tables::sqr
(word) init_mul_tables::sqr#1 sqr zp ZP_WORD:2 11.0
(word) init_mul_tables::sqr#10 sqr zp ZP_WORD:2 14.666666666666666
(word) init_mul_tables::sqr#2 sqr zp ZP_WORD:2 22.0
(word) init_mul_tables::sqr#3 sqr zp ZP_WORD:2 7.333333333333333
(word) init_mul_tables::sqr#4 sqr zp ZP_WORD:2 22.0
(word) init_mul_tables::sqr#5 sqr zp ZP_WORD:2 9.166666666666666
(word) init_mul_tables::sqr#6 sqr zp ZP_WORD:2 11.0
(word) init_mul_tables::sqr#7 sqr zp ZP_WORD:2 11.0
(void()) init_mul_tables_asm()
(label) init_mul_tables_asm::@return
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(byte[512]) mul_sqr_hi
(const byte[512]) mul_sqr_hi#0 mul_sqr_hi = { fill( 512, 0) }
(byte[512]) mul_sqr_lo
(const byte[512]) mul_sqr_lo#0 mul_sqr_lo = { fill( 512, 0) }
(void()) mul_tables_compare()
(label) mul_tables_compare::@1
(label) mul_tables_compare::@2
(label) mul_tables_compare::@3
(label) mul_tables_compare::@4
(label) mul_tables_compare::@5
(label) mul_tables_compare::@6
(label) mul_tables_compare::@7
(label) mul_tables_compare::@8
(label) mul_tables_compare::@9
(label) mul_tables_compare::@return
(byte) mul_tables_compare::i
(byte) mul_tables_compare::i#1 reg byte x 16.5
(byte) mul_tables_compare::i#10 reg byte x 12.222222222222221

reg byte x [ mul_tables_compare::i#10 mul_tables_compare::i#1 ]
reg byte x [ init_mul_tables::i#4 init_mul_tables::i#1 ]
reg byte x [ init_mul_tables::i#6 init_mul_tables::i#3 ]
zp ZP_WORD:2 [ init_mul_tables::sqr#7 init_mul_tables::sqr#10 init_mul_tables::sqr#3 init_mul_tables::sqr#5 init_mul_tables::sqr#6 init_mul_tables::sqr#1 init_mul_tables::sqr#2 init_mul_tables::sqr#4 init_mul_tables::$15 ]
reg byte a [ init_mul_tables::$0 ]
reg byte a [ init_mul_tables::$3 ]
reg byte a [ init_mul_tables::$4 ]
reg byte a [ init_mul_tables::$5 ]
reg byte a [ init_mul_tables::$8 ]
reg byte a [ init_mul_tables::$12 ]
reg byte a [ init_mul_tables::$14 ]
reg byte a [ init_mul_tables::$16 ]

FINAL CODE
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const BGCOL = $d021
  mul_sqr_lo: .fill 512, 0
  mul_sqr_hi: .fill 512, 0
  asm_mul_sqr_lo: .fill 512, 0
  asm_mul_sqr_hi: .fill 512, 0
//SEG2 @begin
//SEG3 [1] phi from @begin to @4 [phi:@begin->@4]
//SEG4 @4
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @4 to main [phi:@4->main]
  jsr main
//SEG7 [3] phi from @4 to @end [phi:@4->@end]
//SEG8 @end
//SEG9 main
main: {
  //SEG10 [5] call init_mul_tables param-assignment [ ] ( main:2 [ ] )
  //SEG11 [26] phi from main to init_mul_tables [phi:main->init_mul_tables]
    jsr init_mul_tables
  //SEG12 [6] phi from main to main::@1 [phi:main->main::@1]
  //SEG13 main::@1
  //SEG14 [7] call init_mul_tables_asm param-assignment [ ] ( main:2 [ ] )
    jsr init_mul_tables_asm
  //SEG15 [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  //SEG16 main::@2
  //SEG17 [9] call mul_tables_compare param-assignment [ ] ( main:2 [ ] )
    jsr mul_tables_compare
  //SEG18 main::@return
  //SEG19 [10] return  [ ] ( main:2 [ ] )
    rts
}
//SEG20 mul_tables_compare
mul_tables_compare: {
  //SEG21 [11] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 5 [ ] ( main:2::mul_tables_compare:9 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #5
    sta BGCOL
  //SEG22 [12] phi from mul_tables_compare to mul_tables_compare::@1 [phi:mul_tables_compare->mul_tables_compare::@1]
  //SEG23 [12] phi (byte) mul_tables_compare::i#10 = (byte/signed byte/word/signed word) 0 [phi:mul_tables_compare->mul_tables_compare::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG24 [12] phi from mul_tables_compare::@5 to mul_tables_compare::@1 [phi:mul_tables_compare::@5->mul_tables_compare::@1]
  //SEG25 [12] phi (byte) mul_tables_compare::i#10 = (byte) mul_tables_compare::i#1 [phi:mul_tables_compare::@5->mul_tables_compare::@1#0] -- register_copy 
  //SEG26 mul_tables_compare::@1
  b1:
  //SEG27 [13] if(*((const byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) -- pbuc1_derefidx_vbuxx_eq_pbuc2_derefidx_vbuxx_then_la1 
    lda mul_sqr_lo,x
    cmp asm_mul_sqr_lo,x
    beq b2
  //SEG28 mul_tables_compare::@6
  //SEG29 [14] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) -- _deref_pbuc1=vbuc2 
    lda #2
    sta BGCOL
  //SEG30 mul_tables_compare::@2
  b2:
  //SEG31 [15] if(*((const byte[512]) mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@3 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) -- pbuc1_derefidx_vbuxx_eq_pbuc2_derefidx_vbuxx_then_la1 
    lda mul_sqr_hi+$100,x
    cmp asm_mul_sqr_hi+$100,x
    beq b3
  //SEG32 mul_tables_compare::@7
  //SEG33 [16] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) -- _deref_pbuc1=vbuc2 
    lda #2
    sta BGCOL
  //SEG34 mul_tables_compare::@3
  b3:
  //SEG35 [17] if(*((const byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@4 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) -- pbuc1_derefidx_vbuxx_eq_pbuc2_derefidx_vbuxx_then_la1 
    lda mul_sqr_lo,x
    cmp asm_mul_sqr_lo,x
    beq b4
  //SEG36 mul_tables_compare::@8
  //SEG37 [18] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) -- _deref_pbuc1=vbuc2 
    lda #2
    sta BGCOL
  //SEG38 mul_tables_compare::@4
  b4:
  //SEG39 [19] if(*((const byte[512]) mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@5 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) -- pbuc1_derefidx_vbuxx_eq_pbuc2_derefidx_vbuxx_then_la1 
    lda mul_sqr_hi+$100,x
    cmp asm_mul_sqr_hi+$100,x
    beq b5
  //SEG40 mul_tables_compare::@9
  //SEG41 [20] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) -- _deref_pbuc1=vbuc2 
    lda #2
    sta BGCOL
  //SEG42 mul_tables_compare::@5
  b5:
  //SEG43 [21] (byte) mul_tables_compare::i#1 ← ++ (byte) mul_tables_compare::i#10 [ mul_tables_compare::i#1 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG44 [22] if((byte) mul_tables_compare::i#1!=(byte/signed byte/word/signed word) 0) goto mul_tables_compare::@1 [ mul_tables_compare::i#1 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#1 ] ) -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b1
  //SEG45 mul_tables_compare::@return
  //SEG46 [23] return  [ ] ( main:2::mul_tables_compare:9 [ ] )
    rts
}
//SEG47 init_mul_tables_asm
init_mul_tables_asm: {
  //SEG48 asm { ldx#$00txa.byte$c9lb1:tyaadc#$00ml1:staasm_mul_sqr_hi,xtaycmp#$40txarorml9:adc#$00staml9+1inxml0:staasm_mul_sqr_lo,xbnelb1incml0+2incml1+2clcinybnelb1 }
    ldx #0
    txa
    .byte $c9
  lb1:
    tya
    adc #0
  ml1:
    sta asm_mul_sqr_hi,x
    tay
    cmp #$40
    txa
    ror
  ml9:
    adc #0
    sta ml9+1
    inx
  ml0:
    sta asm_mul_sqr_lo,x
    bne lb1
    inc ml0+2
    inc ml1+2
    clc
    iny
    bne lb1
  //SEG49 init_mul_tables_asm::@return
  //SEG50 [25] return  [ ] ( main:2::init_mul_tables_asm:7 [ ] )
    rts
}
//SEG51 init_mul_tables
init_mul_tables: {
    .label _15 = 2
    .label sqr = 2
  //SEG52 [27] phi from init_mul_tables to init_mul_tables::@1 [phi:init_mul_tables->init_mul_tables::@1]
  //SEG53 [27] phi (word) init_mul_tables::sqr#6 = (byte/signed byte/word/signed word) 0 [phi:init_mul_tables->init_mul_tables::@1#0] -- vwuz1=vbuc1 
    lda #0
    sta sqr
    sta sqr+1
  //SEG54 [27] phi (byte) init_mul_tables::i#4 = (byte/signed byte/word/signed word) 1 [phi:init_mul_tables->init_mul_tables::@1#1] -- vbuxx=vbuc1 
    ldx #1
  //SEG55 [27] phi from init_mul_tables::@2 to init_mul_tables::@1 [phi:init_mul_tables::@2->init_mul_tables::@1]
  //SEG56 [27] phi (word) init_mul_tables::sqr#6 = (word) init_mul_tables::sqr#1 [phi:init_mul_tables::@2->init_mul_tables::@1#0] -- register_copy 
  //SEG57 [27] phi (byte) init_mul_tables::i#4 = (byte) init_mul_tables::i#1 [phi:init_mul_tables::@2->init_mul_tables::@1#1] -- register_copy 
  //SEG58 init_mul_tables::@1
  b1:
  //SEG59 [28] (byte~) init_mul_tables::$0 ← (byte) init_mul_tables::i#4 & (byte/signed byte/word/signed word) 1 [ init_mul_tables::i#4 init_mul_tables::sqr#6 init_mul_tables::$0 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#4 init_mul_tables::sqr#6 init_mul_tables::$0 ] ) -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
  //SEG60 [29] if((byte~) init_mul_tables::$0!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@2 [ init_mul_tables::i#4 init_mul_tables::sqr#6 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#4 init_mul_tables::sqr#6 ] ) -- vbuaa_neq_0_then_la1 
    cmp #0
    bne b2
  //SEG61 init_mul_tables::@5
  //SEG62 [30] (word) init_mul_tables::sqr#2 ← ++ (word) init_mul_tables::sqr#6 [ init_mul_tables::i#4 init_mul_tables::sqr#2 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#4 init_mul_tables::sqr#2 ] ) -- vwuz1=_inc_vwuz1 
    inc sqr
    bne !+
    inc sqr+1
  !:
  //SEG63 [31] phi from init_mul_tables::@1 init_mul_tables::@5 to init_mul_tables::@2 [phi:init_mul_tables::@1/init_mul_tables::@5->init_mul_tables::@2]
  //SEG64 [31] phi (word) init_mul_tables::sqr#5 = (word) init_mul_tables::sqr#6 [phi:init_mul_tables::@1/init_mul_tables::@5->init_mul_tables::@2#0] -- register_copy 
  //SEG65 init_mul_tables::@2
  b2:
  //SEG66 [32] (byte~) init_mul_tables::$3 ← < (word) init_mul_tables::sqr#5 [ init_mul_tables::i#4 init_mul_tables::sqr#5 init_mul_tables::$3 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#4 init_mul_tables::sqr#5 init_mul_tables::$3 ] ) -- vbuaa=_lo_vwuz1 
    lda sqr
  //SEG67 [33] *((const byte[512]) mul_sqr_lo#0 + (byte) init_mul_tables::i#4) ← (byte~) init_mul_tables::$3 [ init_mul_tables::i#4 init_mul_tables::sqr#5 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#4 init_mul_tables::sqr#5 ] ) -- pbuc1_derefidx_vbuxx=vbuaa 
    sta mul_sqr_lo,x
  //SEG68 [34] (byte~) init_mul_tables::$4 ← > (word) init_mul_tables::sqr#5 [ init_mul_tables::i#4 init_mul_tables::sqr#5 init_mul_tables::$4 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#4 init_mul_tables::sqr#5 init_mul_tables::$4 ] ) -- vbuaa=_hi_vwuz1 
    lda sqr+1
  //SEG69 [35] *((const byte[512]) mul_sqr_hi#0 + (byte) init_mul_tables::i#4) ← (byte~) init_mul_tables::$4 [ init_mul_tables::i#4 init_mul_tables::sqr#5 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#4 init_mul_tables::sqr#5 ] ) -- pbuc1_derefidx_vbuxx=vbuaa 
    sta mul_sqr_hi,x
  //SEG70 [36] (byte~) init_mul_tables::$5 ← (byte) init_mul_tables::i#4 >> (byte/signed byte/word/signed word) 1 [ init_mul_tables::i#4 init_mul_tables::sqr#5 init_mul_tables::$5 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#4 init_mul_tables::sqr#5 init_mul_tables::$5 ] ) -- vbuaa=vbuxx_ror_1 
    txa
    lsr
  //SEG71 [37] (word) init_mul_tables::sqr#1 ← (word) init_mul_tables::sqr#5 + (byte~) init_mul_tables::$5 [ init_mul_tables::i#4 init_mul_tables::sqr#1 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#4 init_mul_tables::sqr#1 ] ) -- vwuz1=vwuz1_plus_vbuaa 
    clc
    adc sqr
    sta sqr
    bcc !+
    inc sqr+1
  !:
  //SEG72 [38] (byte) init_mul_tables::i#1 ← ++ (byte) init_mul_tables::i#4 [ init_mul_tables::i#1 init_mul_tables::sqr#1 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#1 init_mul_tables::sqr#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG73 [39] if((byte) init_mul_tables::i#1!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@1 [ init_mul_tables::i#1 init_mul_tables::sqr#1 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#1 init_mul_tables::sqr#1 ] ) -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b1
  //SEG74 [40] phi from init_mul_tables::@2 to init_mul_tables::@3 [phi:init_mul_tables::@2->init_mul_tables::@3]
  //SEG75 [40] phi (word) init_mul_tables::sqr#10 = (word) init_mul_tables::sqr#1 [phi:init_mul_tables::@2->init_mul_tables::@3#0] -- register_copy 
  //SEG76 [40] phi (byte) init_mul_tables::i#6 = (byte/signed byte/word/signed word) 0 [phi:init_mul_tables::@2->init_mul_tables::@3#1] -- vbuxx=vbuc1 
    ldx #0
  //SEG77 [40] phi from init_mul_tables::@4 to init_mul_tables::@3 [phi:init_mul_tables::@4->init_mul_tables::@3]
  //SEG78 [40] phi (word) init_mul_tables::sqr#10 = (word) init_mul_tables::sqr#3 [phi:init_mul_tables::@4->init_mul_tables::@3#0] -- register_copy 
  //SEG79 [40] phi (byte) init_mul_tables::i#6 = (byte) init_mul_tables::i#3 [phi:init_mul_tables::@4->init_mul_tables::@3#1] -- register_copy 
  //SEG80 init_mul_tables::@3
  b3:
  //SEG81 [41] (byte~) init_mul_tables::$8 ← (byte) init_mul_tables::i#6 & (byte/signed byte/word/signed word) 1 [ init_mul_tables::i#6 init_mul_tables::sqr#10 init_mul_tables::$8 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::sqr#10 init_mul_tables::$8 ] ) -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
  //SEG82 [42] if((byte~) init_mul_tables::$8!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@4 [ init_mul_tables::i#6 init_mul_tables::sqr#10 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::sqr#10 ] ) -- vbuaa_neq_0_then_la1 
    cmp #0
    bne b4
  //SEG83 init_mul_tables::@7
  //SEG84 [43] (word) init_mul_tables::sqr#4 ← ++ (word) init_mul_tables::sqr#10 [ init_mul_tables::i#6 init_mul_tables::sqr#4 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::sqr#4 ] ) -- vwuz1=_inc_vwuz1 
    inc sqr
    bne !+
    inc sqr+1
  !:
  //SEG85 [44] phi from init_mul_tables::@3 init_mul_tables::@7 to init_mul_tables::@4 [phi:init_mul_tables::@3/init_mul_tables::@7->init_mul_tables::@4]
  //SEG86 [44] phi (word) init_mul_tables::sqr#7 = (word) init_mul_tables::sqr#10 [phi:init_mul_tables::@3/init_mul_tables::@7->init_mul_tables::@4#0] -- register_copy 
  //SEG87 init_mul_tables::@4
  b4:
  //SEG88 [45] (byte~) init_mul_tables::$12 ← < (word) init_mul_tables::sqr#7 [ init_mul_tables::i#6 init_mul_tables::sqr#7 init_mul_tables::$12 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::sqr#7 init_mul_tables::$12 ] ) -- vbuaa=_lo_vwuz1 
    lda sqr
  //SEG89 [46] *((const byte[512]) mul_sqr_lo#0+(word/signed word) 256 + (byte) init_mul_tables::i#6) ← (byte~) init_mul_tables::$12 [ init_mul_tables::i#6 init_mul_tables::sqr#7 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::sqr#7 ] ) -- pbuc1_derefidx_vbuxx=vbuaa 
    sta mul_sqr_lo+$100,x
  //SEG90 [47] (byte~) init_mul_tables::$14 ← > (word) init_mul_tables::sqr#7 [ init_mul_tables::i#6 init_mul_tables::sqr#7 init_mul_tables::$14 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::sqr#7 init_mul_tables::$14 ] ) -- vbuaa=_hi_vwuz1 
    lda sqr+1
  //SEG91 [48] *((const byte[512]) mul_sqr_hi#0+(word/signed word) 256 + (byte) init_mul_tables::i#6) ← (byte~) init_mul_tables::$14 [ init_mul_tables::i#6 init_mul_tables::sqr#7 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::sqr#7 ] ) -- pbuc1_derefidx_vbuxx=vbuaa 
    sta mul_sqr_hi+$100,x
  //SEG92 [49] (word~) init_mul_tables::$15 ← (word) init_mul_tables::sqr#7 + (byte/word/signed word) 128 [ init_mul_tables::i#6 init_mul_tables::$15 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::$15 ] ) -- vwuz1=vwuz1_plus_vbuc1 
    lda _15
    clc
    adc #<$80
    sta _15
    bcc !+
    inc _15+1
  !:
  //SEG93 [50] (byte~) init_mul_tables::$16 ← (byte) init_mul_tables::i#6 >> (byte/signed byte/word/signed word) 1 [ init_mul_tables::i#6 init_mul_tables::$15 init_mul_tables::$16 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::$15 init_mul_tables::$16 ] ) -- vbuaa=vbuxx_ror_1 
    txa
    lsr
  //SEG94 [51] (word) init_mul_tables::sqr#3 ← (word~) init_mul_tables::$15 + (byte~) init_mul_tables::$16 [ init_mul_tables::i#6 init_mul_tables::sqr#3 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#6 init_mul_tables::sqr#3 ] ) -- vwuz1=vwuz1_plus_vbuaa 
    clc
    adc sqr
    sta sqr
    bcc !+
    inc sqr+1
  !:
  //SEG95 [52] (byte) init_mul_tables::i#3 ← ++ (byte) init_mul_tables::i#6 [ init_mul_tables::i#3 init_mul_tables::sqr#3 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#3 init_mul_tables::sqr#3 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG96 [53] if((byte) init_mul_tables::i#3!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@3 [ init_mul_tables::i#3 init_mul_tables::sqr#3 ] ( main:2::init_mul_tables:5 [ init_mul_tables::i#3 init_mul_tables::sqr#3 ] ) -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b3
  //SEG97 init_mul_tables::@return
  //SEG98 [54] return  [ ] ( main:2::init_mul_tables:5 [ ] )
    rts
}

