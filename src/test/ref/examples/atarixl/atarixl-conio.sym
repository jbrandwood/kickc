__constant char * const CH = (char *) 764
__constant unsigned int *COLCRS = (unsigned int *) 85
__constant char * const COLOR1 = (char *) 709
__constant char * const COLOR2 = (char *) 710
__constant char * const COLOR4 = (char *) 712
__constant char * const CRSINH = (char *) 752
__constant const char DARK_ORANGE = $30
__constant char DIGITS[] = "0123456789abcdef"atz
__constant const char MEDIUM_BLUE = $80
__constant char OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
__constant char ** const OLDADR = (char **) 94
__constant char * const OLDCHR = (char *) 93
__constant char RADIX::BINARY = 2
__constant char RADIX::DECIMAL = $a
__constant char RADIX::HEXADECIMAL = $10
__constant char RADIX::OCTAL = 8
__constant unsigned int RADIX_DECIMAL_VALUES[] = { $2710, $3e8, $64, $a }
__constant char *ROWCRS = (char *) 84
__constant char ** const SAVMSC = (char **) 88
__constant char SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = $c
__constant unsigned int STACK_BASE = $103
__constant const char WHITE = $fe
void __start()
char bgcolor(char color)
char bgcolor::color
char bgcolor::old
char bgcolor::return
char bordercolor(char color)
char bordercolor::color
char bordercolor::old
char bordercolor::return
void clrscr()
__loadstore char conio_display_cursor // zp[1]:143 677853.0536912751
__loadstore char conio_reverse_value // zp[1]:145 10640.478723404254
__loadstore char conio_scroll_enable // zp[1]:146 8621.58620689655
__stackcall void cputc(volatile char c)
__constant char cputc::OFFSET_STACK_C = 0
__loadstore volatile char cputc::c // zp[1]:144 133334.66666666666
char cputc::convertToScreenCode1_return
char cputc::convertToScreenCode1_return#0 // reg byte x 183333.6666666667
char *cputc::convertToScreenCode1_v
__constant char *cputc::convertToScreenCode1_v#0 = &cputc::c // convertToScreenCode1_v
void cputs(const char *s)
char cputs::c
char cputs::c#1 // reg byte a 10001.0
const char *cputs::s
const char *cputs::s#0 // s zp[2]:140 4000.4
const char *cputs::s#2 // s zp[2]:140 15001.5
void cputsxy(char x , char y , const char *s)
const char *cputsxy::s
char cputsxy::x
__constant char cputsxy::x#0 = 0 // x
char cputsxy::y
__constant char cputsxy::y#0 = 1 // y
char cursor(char onoff)
char cursor::oldValue
char cursor::onoff
__constant char cursor::onoff#0 = 0 // onoff
char cursor::return
char * cursorLocation()
unsigned int cursorLocation::$0 // zp[2]:130 2.000000002E9
char *cursorLocation::$1 // zp[2]:130 2.000000002E9
unsigned int cursorLocation::$3 // zp[2]:130 1.5000000015E9
unsigned int cursorLocation::$4 // zp[2]:138 2.000000002E9
unsigned int cursorLocation::$5 // zp[2]:130 2.000000002E9
char *cursorLocation::return
char *cursorLocation::return#0 // return zp[2]:130 2000002.0
char *cursorLocation::return#1 // return zp[2]:130 2.7525000075E8
char *cursorLocation::return#3 // return zp[2]:130 2.00000002E8
void gotoxy(char x , char y)
char gotoxy::x
char gotoxy::x#4 // reg byte a 1.0000001E7
char gotoxy::y
char gotoxy::y#4 // reg byte x 5000000.5
char kbhit()
char kbhit::return
char kbhit::return#2 // reg byte a 333.6666666666667
char kbhit::return#3 // reg byte a 2002.0
void main()
int main::i
int main::i#1 // i zp[2]:147 151.5
int main::i#2 // i zp[2]:147 50.5
int main::i1
int main::i1#1 // i1 zp[2]:149 151.5
int main::i1#2 // i1 zp[2]:149 50.5
__constant char *main::name = "Mark"at
__constant char main::s[$f] = "Hello, World!
"at
__constant char main::s1[8] = "Hello, "at
__constant char main::s2[$11] = " - press a key!
"at
__constant char main::s3[$15] = "Scrolling lines ... "at
__constant char main::s4[2] = "
"at
__constant char main::s5[$19] = "Some wrapping lines ... "at
void * memcpy(void *destination , void *source , unsigned int num)
void *memcpy::destination
void *memcpy::destination#0 // destination zp[2]:130 333333.6666666667
char *memcpy::dst
char *memcpy::dst#1 // dst zp[2]:130 1.000000001E9
char *memcpy::dst#2 // dst zp[2]:130 1.0033333346666667E9
char *memcpy::dst#4 // dst zp[2]:130 2.0000002E7
unsigned int memcpy::num
__constant unsigned int memcpy::num#0 = (unsigned int)$28*$17 // num
void *memcpy::return
void *memcpy::source
char *memcpy::source#0 // source zp[2]:136 333333.6666666667
char *memcpy::src
char *memcpy::src#1 // src zp[2]:136 2.000000002E9
char *memcpy::src#2 // src zp[2]:136 1.00250000125E9
char *memcpy::src#4 // src zp[2]:136 1.0000001E7
char *memcpy::src_end
char *memcpy::src_end#0 // src_end zp[2]:138 1.2625000025E8
void * memset(void *str , char c , unsigned int num)
char memset::c
char *memset::dst
char *memset::dst#1 // dst zp[2]:132 2.000000002E9
char *memset::dst#2 // dst zp[2]:132 1.3366666683333335E9
char *memset::dst#4 // dst zp[2]:132 2.0000002E7
char *memset::end
char *memset::end#0 // end zp[2]:136 1.683333336666667E8
unsigned int memset::num
unsigned int memset::num#2 // num zp[2]:136 1.0000001E7
void *memset::return
void *memset::str
char *memset::str#1 // str zp[2]:132 1000001.0
void *memset::str#3 // str zp[2]:132 333367.3333333334
void *memset::str#7 // str zp[2]:132 202.0
void *memset::str#8 // str zp[2]:132 2000002.0
void newline()
char *newline::start
char *newline::start#0 // start zp[2]:132 750000.75
__loadstore struct printf_buffer_number printf_buffer = {} // mem[12]
void printf_number_buffer(void (*putc)(char) , char buffer_sign , char *buffer_digits , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
struct printf_buffer_number printf_number_buffer::buffer
char *printf_number_buffer::buffer_digits
__constant char *printf_number_buffer::buffer_digits#0 = (char *)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS // buffer_digits
char printf_number_buffer::buffer_sign
char printf_number_buffer::buffer_sign#0 // reg byte a 7001.0
struct printf_format_number printf_number_buffer::format
char printf_number_buffer::format_justify_left
char printf_number_buffer::format_min_length
char printf_number_buffer::format_radix
char printf_number_buffer::format_sign_always
char printf_number_buffer::format_upper_case
char printf_number_buffer::format_zero_padding
signed char printf_number_buffer::len
signed char printf_number_buffer::padding
void (*printf_number_buffer::putc)(char)
__constant void (*printf_number_buffer::putc#0)(char) = &cputc // putc
void printf_sint(void (*putc)(char) , int value , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
struct printf_format_number printf_sint::format
char printf_sint::format_justify_left
char printf_sint::format_min_length
char printf_sint::format_radix
char printf_sint::format_sign_always
char printf_sint::format_upper_case
char printf_sint::format_zero_padding
void (*printf_sint::putc)(char)
unsigned int printf_sint::uvalue
int printf_sint::value
int printf_sint::value#0 // value zp[2]:128 1001.0
int printf_sint::value#1 // value zp[2]:128 202.0
int printf_sint::value#2 // value zp[2]:128 202.0
int printf_sint::value#3 // value zp[2]:128 1068.3333333333335
int printf_sint::value#5 // value zp[2]:128 2002.0
void printf_str(void (*putc)(char) , const char *s)
char printf_str::c
char printf_str::c#1 // reg byte a 1.0000001E7
void (*printf_str::putc)(char)
void (*printf_str::putc#10)(char) // putc zp[2]:128
const char *printf_str::s
const char *printf_str::s#0 // s zp[2]:140 1.0000001E7
const char *printf_str::s#10 // s zp[2]:140 100001.0
const char *printf_str::s#9 // s zp[2]:140 1.5050002E7
void printf_string(void (*putc)(char) , char *str , char format_min_length , char format_justify_left)
struct printf_format_string printf_string::format
char printf_string::format_justify_left
char printf_string::format_min_length
signed char printf_string::len
signed char printf_string::padding
void (*printf_string::putc)(char)
__constant void (*printf_string::putc#0)(char) = &cputc // putc
char *printf_string::str
void putchar(char code)
char putchar::code
char *putchar::loc
char *putchar::loc#0 // loc zp[2]:130 1000001.0
char putchar::newChar
char putchar::newChar#0 // reg byte a 1500001.5
__constant char rawmap[$100] = kickasm {{ .var ht = Hashtable().put(0,64, 1,0, 2,32, 3,96) // the table for converting bit 6,7 into ora value
	.for(var i=0; i<256; i++) {
		.var idx = (i & $60) / 32
		.var mask = i & $9f
		.byte mask | ht.get(idx)
	}
 }}
char revers(char onoff)
char revers::old
char revers::onoff
char revers::onoff#2 // reg byte a 101.0
char revers::return
char scroll(char onoff)
char scroll::old
char scroll::onoff
__constant char scroll::onoff#0 = 0 // onoff
char scroll::return
void setcursor()
char setcursor::c
char setcursor::c#0 // reg byte x 6.6666667333333336E7
char setcursor::c#1 // reg byte x 2.00000002E8
char setcursor::c#3 // reg byte x 3.00000003E8
char *setcursor::loc
char *setcursor::loc#0 // loc zp[2]:130 1.00000001E8
char textcolor(char color)
char textcolor::color
char textcolor::old
char textcolor::return
void utoa(unsigned int value , char *buffer , char radix)
char utoa::$10 // reg byte a 2000002.0
char utoa::$11 // reg byte x 20002.0
char *utoa::buffer
char *utoa::buffer#11 // buffer zp[2]:140 287143.2857142857
char *utoa::buffer#14 // buffer zp[2]:140 1500001.5
char *utoa::buffer#3 // buffer zp[2]:140 20002.0
char *utoa::buffer#4 // buffer zp[2]:140 2000002.0
char utoa::digit
char utoa::digit#1 // digit zp[1]:142 2000002.0
char utoa::digit#2 // digit zp[1]:142 285714.5714285714
unsigned int utoa::digit_value
unsigned int utoa::digit_value#0 // digit_value zp[2]:134 600000.6000000001
unsigned int *utoa::digit_values
char utoa::max_digits
char utoa::radix
char utoa::started
char utoa::started#2 // reg byte x 500000.5
char utoa::started#4 // reg byte x 1000001.0
unsigned int utoa::value
unsigned int utoa::value#0 // value zp[2]:128 1000001.0
unsigned int utoa::value#1 // value zp[2]:128 5501.0
unsigned int utoa::value#2 // value zp[2]:128 572857.857142857
unsigned int utoa::value#6 // value zp[2]:128 1500001.5
unsigned int utoa_append(char *buffer , unsigned int value , unsigned int sub)
char *utoa_append::buffer
char *utoa_append::buffer#0 // buffer zp[2]:140 1375000.25
char utoa_append::digit
char utoa_append::digit#1 // reg byte x 1.0000000001E10
char utoa_append::digit#2 // reg byte x 1.00050000015E10
unsigned int utoa_append::return
unsigned int utoa_append::return#0 // return zp[2]:128 2000002.0
unsigned int utoa_append::sub
unsigned int utoa_append::sub#0 // sub zp[2]:134 3.3335000005E9
unsigned int utoa_append::value
unsigned int utoa_append::value#0 // value zp[2]:128 3666667.333333333
unsigned int utoa_append::value#1 // value zp[2]:128 2.0000000002E10
unsigned int utoa_append::value#2 // value zp[2]:128 5.001833334166666E9
void waitkey()
char waitkey::$1 // reg byte a 2002.0

zp[2]:147 [ main::i#2 main::i#1 ]
zp[2]:149 [ main::i1#2 main::i1#1 ]
reg byte x [ setcursor::c#3 setcursor::c#0 setcursor::c#1 ]
reg byte a [ gotoxy::x#4 ]
reg byte x [ gotoxy::y#4 ]
reg byte a [ revers::onoff#2 ]
zp[2]:128 [ printf_sint::value#5 printf_sint::value#0 printf_sint::value#3 printf_sint::value#1 printf_sint::value#2 utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 printf_str::putc#10 ]
zp[2]:136 [ memset::num#2 memset::end#0 memcpy::src#2 memcpy::src#4 memcpy::src#1 memcpy::source#0 ]
zp[2]:132 [ memset::str#3 memset::str#7 memset::str#8 memset::dst#2 memset::dst#4 memset::dst#1 memset::str#1 newline::start#0 ]
reg byte a [ kbhit::return#2 ]
zp[1]:142 [ utoa::digit#2 utoa::digit#1 ]
reg byte x [ utoa::started#2 utoa::started#4 ]
zp[2]:140 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 cputs::s#2 cputs::s#0 printf_str::s#9 printf_str::s#10 printf_str::s#0 ]
reg byte x [ utoa_append::digit#2 utoa_append::digit#1 ]
zp[1]:145 [ conio_reverse_value ]
zp[1]:143 [ conio_display_cursor ]
zp[1]:146 [ conio_scroll_enable ]
zp[1]:144 [ cputc::c ]
reg byte x [ cputc::convertToScreenCode1_return#0 ]
zp[2]:130 [ cursorLocation::return#0 putchar::loc#0 cursorLocation::return#1 cursorLocation::return#3 setcursor::loc#0 cursorLocation::$0 cursorLocation::$1 cursorLocation::$3 cursorLocation::$5 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 memcpy::destination#0 ]
reg byte a [ putchar::newChar#0 ]
reg byte a [ printf_str::c#1 ]
reg byte a [ kbhit::return#3 ]
reg byte a [ waitkey::$1 ]
reg byte a [ printf_number_buffer::buffer_sign#0 ]
zp[2]:138 [ memcpy::src_end#0 cursorLocation::$4 ]
reg byte a [ cputs::c#1 ]
reg byte x [ utoa::$11 ]
reg byte a [ utoa::$10 ]
zp[2]:134 [ utoa::digit_value#0 utoa_append::sub#0 ]
mem[12] [ printf_buffer ]
