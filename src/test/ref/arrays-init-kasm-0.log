Inlined call call __init 

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  SCREEN[0] = SINTAB[0]
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
const byte* SCREEN = (byte*)$400
const byte* SINTAB[$100]  = kickasm {{ .fill 256, 128 + 128*sin(i*2*PI/256)
 }}
void __start()
label __start::@1
label __start::@2
label __start::@return
label __start::__init1
void main()
label main::@return

Adding number conversion cast (unumber) 0 in SCREEN[0] = SINTAB[0]
Adding number conversion cast (unumber) 0 in SCREEN[0] = SINTAB[(unumber)0]
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 0
Finalized unsigned number type 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simplifying expression containing zero SINTAB in [0] SCREEN[0] = SINTAB[0]
Simplifying expression containing zero SCREEN in [0] SCREEN[0] = *SINTAB
Successful SSA optimization PassNSimplifyExpressionWithZero
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] *SCREEN = *SINTAB
  to:main::@return
main::@return: scope:[main]  from main
  [1] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()

Initial phi equivalence classes
Complete equivalence classes
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *SCREEN = *SINTAB [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 17 combination 
Uplifting [] best 17 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test initializing array using KickAssembler
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    // [0] *SCREEN = *SINTAB -- _deref_pbuc1=_deref_pbuc2 
    lda SINTAB
    sta SCREEN
    jmp __breturn
    // main::@return
  __breturn:
    // [1] return 
    rts
}
  // File Data
// Sinus table
SINTAB:
.fill 256, 128 + 128*sin(i*2*PI/256)


ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
const byte* SCREEN = (byte*) 1024
const byte* SINTAB[$100]  = kickasm {{ .fill 256, 128 + 128*sin(i*2*PI/256)
 }}
void main()
label main::@return



FINAL ASSEMBLER
Score: 14

  // File Comments
// Test initializing array using KickAssembler
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    // SCREEN[0] = SINTAB[0]
    // [0] *SCREEN = *SINTAB -- _deref_pbuc1=_deref_pbuc2 
    lda SINTAB
    sta SCREEN
    // main::@return
    // }
    // [1] return 
    rts
}
  // File Data
// Sinus table
SINTAB:
.fill 256, 128 + 128*sin(i*2*PI/256)


