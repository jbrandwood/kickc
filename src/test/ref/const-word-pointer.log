Setting inferred volatile on symbol affected by address-of (word*~) main::$0 ← & (word) main::w
Identified constant variable (byte*) main::screen

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte*) main::screen#0 ← ((byte*)) (number) $400
  (word) main::w#0 ← (number) $d03
  (word*~) main::$0 ← & (word) main::w#0
  (word*) main::wp#0 ← (word*~) main::$0
  (byte~) main::$1 ← < *((word*) main::wp#0)
  *((byte*) main::screen#0 + (number) 0) ← (byte~) main::$1
  (byte~) main::$2 ← > *((word*) main::wp#0)
  *((byte*) main::screen#0 + (number) 1) ← (byte~) main::$2
  *((word*) main::wp#0) ← (number) $210c
  (byte~) main::$3 ← < *((word*) main::wp#0)
  *((byte*) main::screen#0 + (number) 2) ← (byte~) main::$3
  (byte~) main::$4 ← > *((word*) main::wp#0)
  *((byte*) main::screen#0 + (number) 3) ← (byte~) main::$4
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(void()) main()
(word*~) main::$0
(byte~) main::$1
(byte~) main::$2
(byte~) main::$3
(byte~) main::$4
(label) main::@return
(byte*) main::screen
(byte*) main::screen#0
(word) main::w
(word) main::w#0
(word*) main::wp
(word*) main::wp#0

Adding number conversion cast (unumber) $d03 in (word) main::w#0 ← (number) $d03
Adding number conversion cast (unumber) 0 in *((byte*) main::screen#0 + (number) 0) ← (byte~) main::$1
Adding number conversion cast (unumber) 1 in *((byte*) main::screen#0 + (number) 1) ← (byte~) main::$2
Adding number conversion cast (unumber) $210c in *((word*) main::wp#0) ← (number) $210c
Adding number conversion cast (unumber) 2 in *((byte*) main::screen#0 + (number) 2) ← (byte~) main::$3
Adding number conversion cast (unumber) 3 in *((byte*) main::screen#0 + (number) 3) ← (byte~) main::$4
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) main::screen#0 ← (byte*)(number) $400
Inlining cast (word) main::w#0 ← (unumber)(number) $d03
Inlining cast *((word*) main::wp#0) ← (unumber)(number) $210c
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $d03
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast $210c
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (word) $d03
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (word) $210c
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias (word*) main::wp#0 = (word*~) main::$0 
Successful SSA optimization Pass2AliasElimination
Constant right-side identified [2] (word*) main::wp#0 ← & (word) main::w#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) main::screen#0 = (byte*) 1024
Constant (const word*) main::wp#0 = &main::w#0
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero main::screen#0 in [5] *((const byte*) main::screen#0 + (byte) 0) ← (byte~) main::$1
Successful SSA optimization PassNSimplifyExpressionWithZero
Consolidated array index constant in *(main::screen#0+1)
Consolidated array index constant in *(main::screen#0+2)
Consolidated array index constant in *(main::screen#0+3)
Successful SSA optimization Pass2ConstantAdditionElimination
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) @2
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] (word) main::w#0 ← (word) $d03
  [5] (byte~) main::$1 ← < *((const word*) main::wp#0)
  [6] *((const byte*) main::screen#0) ← (byte~) main::$1
  [7] (byte~) main::$2 ← > *((const word*) main::wp#0)
  [8] *((const byte*) main::screen#0+(byte) 1) ← (byte~) main::$2
  [9] *((const word*) main::wp#0) ← (word) $210c
  [10] (byte~) main::$3 ← < *((const word*) main::wp#0)
  [11] *((const byte*) main::screen#0+(byte) 2) ← (byte~) main::$3
  [12] (byte~) main::$4 ← > *((const word*) main::wp#0)
  [13] *((const byte*) main::screen#0+(byte) 3) ← (byte~) main::$4
  to:main::@return
main::@return: scope:[main]  from main
  [14] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte~) main::$1 4.0
(byte~) main::$2 4.0
(byte~) main::$3 4.0
(byte~) main::$4 4.0
(byte*) main::screen
(word) main::w
(word) main::w#0 20.0
(word*) main::wp

Initial phi equivalence classes
Added variable main::$1 to zero page equivalence class [ main::$1 ]
Added variable main::$2 to zero page equivalence class [ main::$2 ]
Added variable main::$3 to zero page equivalence class [ main::$3 ]
Added variable main::$4 to zero page equivalence class [ main::$4 ]
Complete equivalence classes
[ main::w#0 ]
[ main::$1 ]
[ main::$2 ]
[ main::$3 ]
[ main::$4 ]
Allocated zp ZP_WORD:2 [ main::w#0 ]
Allocated zp ZP_BYTE:4 [ main::$1 ]
Allocated zp ZP_BYTE:5 [ main::$2 ]
Allocated zp ZP_BYTE:6 [ main::$3 ]
Allocated zp ZP_BYTE:7 [ main::$4 ]

INITIAL ASM
Target platform is c64basic
  // File Comments
// Test a constant word pointers (pointing to a word placed on zeropage).
// The result when running is "CML!" on the screen.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    .label screen = $400
    .label wp = w
    .label _1 = 4
    .label _2 = 5
    .label _3 = 6
    .label _4 = 7
    .label w = 2
    // [4] (word) main::w#0 ← (word) $d03 -- vwuz1=vwuc1 
    lda #<$d03
    sta w
    lda #>$d03
    sta w+1
    // [5] (byte~) main::$1 ← < *((const word*) main::wp#0) -- vbuz1=_lo__deref_pwuc1 
    lda wp
    sta _1
    // [6] *((const byte*) main::screen#0) ← (byte~) main::$1 -- _deref_pbuc1=vbuz1 
    lda _1
    sta screen
    // [7] (byte~) main::$2 ← > *((const word*) main::wp#0) -- vbuz1=_hi__deref_pwuc1 
    lda wp+1
    sta _2
    // [8] *((const byte*) main::screen#0+(byte) 1) ← (byte~) main::$2 -- _deref_pbuc1=vbuz1 
    lda _2
    sta screen+1
    // [9] *((const word*) main::wp#0) ← (word) $210c -- _deref_pwuc1=vwuc2 
    lda #<$210c
    sta wp
    lda #>$210c
    sta wp+1
    // [10] (byte~) main::$3 ← < *((const word*) main::wp#0) -- vbuz1=_lo__deref_pwuc1 
    lda wp
    sta _3
    // [11] *((const byte*) main::screen#0+(byte) 2) ← (byte~) main::$3 -- _deref_pbuc1=vbuz1 
    lda _3
    sta screen+2
    // [12] (byte~) main::$4 ← > *((const word*) main::wp#0) -- vbuz1=_hi__deref_pwuc1 
    lda wp+1
    sta _4
    // [13] *((const byte*) main::screen#0+(byte) 3) ← (byte~) main::$4 -- _deref_pbuc1=vbuz1 
    lda _4
    sta screen+3
    jmp breturn
    // main::@return
  breturn:
    // [14] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] (word) main::w#0 ← (word) $d03 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [9] *((const word*) main::wp#0) ← (word) $210c [ ] ( main:2 [ ] ) always clobbers reg byte a 
Potential registers zp ZP_WORD:2 [ main::w#0 ] : zp ZP_WORD:2 , 
Potential registers zp ZP_BYTE:4 [ main::$1 ] : zp ZP_BYTE:4 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:5 [ main::$2 ] : zp ZP_BYTE:5 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:6 [ main::$3 ] : zp ZP_BYTE:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:7 [ main::$4 ] : zp ZP_BYTE:7 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 20: zp ZP_WORD:2 [ main::w#0 ] 4: zp ZP_BYTE:4 [ main::$1 ] 4: zp ZP_BYTE:5 [ main::$2 ] 4: zp ZP_BYTE:6 [ main::$3 ] 4: zp ZP_BYTE:7 [ main::$4 ] 
Uplift Scope [] 

Uplifting [main] best 75 combination zp ZP_WORD:2 [ main::w#0 ] reg byte a [ main::$1 ] reg byte a [ main::$2 ] reg byte a [ main::$3 ] reg byte a [ main::$4 ] 
Limited combination testing to 100 combinations of 256 possible.
Uplifting [] best 75 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test a constant word pointers (pointing to a word placed on zeropage).
// The result when running is "CML!" on the screen.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    .label screen = $400
    .label wp = w
    .label w = 2
    // [4] (word) main::w#0 ← (word) $d03 -- vwuz1=vwuc1 
    lda #<$d03
    sta w
    lda #>$d03
    sta w+1
    // [5] (byte~) main::$1 ← < *((const word*) main::wp#0) -- vbuaa=_lo__deref_pwuc1 
    lda wp
    // [6] *((const byte*) main::screen#0) ← (byte~) main::$1 -- _deref_pbuc1=vbuaa 
    sta screen
    // [7] (byte~) main::$2 ← > *((const word*) main::wp#0) -- vbuaa=_hi__deref_pwuc1 
    lda wp+1
    // [8] *((const byte*) main::screen#0+(byte) 1) ← (byte~) main::$2 -- _deref_pbuc1=vbuaa 
    sta screen+1
    // [9] *((const word*) main::wp#0) ← (word) $210c -- _deref_pwuc1=vwuc2 
    lda #<$210c
    sta wp
    lda #>$210c
    sta wp+1
    // [10] (byte~) main::$3 ← < *((const word*) main::wp#0) -- vbuaa=_lo__deref_pwuc1 
    lda wp
    // [11] *((const byte*) main::screen#0+(byte) 2) ← (byte~) main::$3 -- _deref_pbuc1=vbuaa 
    sta screen+2
    // [12] (byte~) main::$4 ← > *((const word*) main::wp#0) -- vbuaa=_hi__deref_pwuc1 
    lda wp+1
    // [13] *((const byte*) main::screen#0+(byte) 3) ← (byte~) main::$4 -- _deref_pbuc1=vbuaa 
    sta screen+3
    jmp breturn
    // main::@return
  breturn:
    // [14] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction bend_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(byte~) main::$1 reg byte a 4.0
(byte~) main::$2 reg byte a 4.0
(byte~) main::$3 reg byte a 4.0
(byte~) main::$4 reg byte a 4.0
(label) main::@return
(byte*) main::screen
(const byte*) main::screen#0 screen = (byte*) 1024
(word) main::w
(word) main::w#0 w zp ZP_WORD:2 20.0
(word*) main::wp
(const word*) main::wp#0 wp = &(word) main::w#0

zp ZP_WORD:2 [ main::w#0 ]
reg byte a [ main::$1 ]
reg byte a [ main::$2 ]
reg byte a [ main::$3 ]
reg byte a [ main::$4 ]


FINAL ASSEMBLER
Score: 60

  // File Comments
// Test a constant word pointers (pointing to a word placed on zeropage).
// The result when running is "CML!" on the screen.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label screen = $400
    .label wp = w
    .label w = 2
    // w = $0d03
    // [4] (word) main::w#0 ← (word) $d03 -- vwuz1=vwuc1 
    lda #<$d03
    sta w
    lda #>$d03
    sta w+1
    // <*wp
    // [5] (byte~) main::$1 ← < *((const word*) main::wp#0) -- vbuaa=_lo__deref_pwuc1 
    lda wp
    // screen[0] = <*wp
    // [6] *((const byte*) main::screen#0) ← (byte~) main::$1 -- _deref_pbuc1=vbuaa 
    sta screen
    // >*wp
    // [7] (byte~) main::$2 ← > *((const word*) main::wp#0) -- vbuaa=_hi__deref_pwuc1 
    lda wp+1
    // screen[1] = >*wp
    // [8] *((const byte*) main::screen#0+(byte) 1) ← (byte~) main::$2 -- _deref_pbuc1=vbuaa 
    sta screen+1
    // *wp = $210c
    // [9] *((const word*) main::wp#0) ← (word) $210c -- _deref_pwuc1=vwuc2 
    lda #<$210c
    sta wp
    lda #>$210c
    sta wp+1
    // <*wp
    // [10] (byte~) main::$3 ← < *((const word*) main::wp#0) -- vbuaa=_lo__deref_pwuc1 
    lda wp
    // screen[2] = <*wp
    // [11] *((const byte*) main::screen#0+(byte) 2) ← (byte~) main::$3 -- _deref_pbuc1=vbuaa 
    sta screen+2
    // >*wp
    // [12] (byte~) main::$4 ← > *((const word*) main::wp#0) -- vbuaa=_hi__deref_pwuc1 
    lda wp+1
    // screen[3] = >*wp
    // [13] *((const byte*) main::screen#0+(byte) 3) ← (byte~) main::$4 -- _deref_pbuc1=vbuaa 
    sta screen+3
    // main::@return
    // }
    // [14] return 
    rts
}
  // File Data

