const byte RADIX::BINARY = 2
const byte RADIX::DECIMAL = $a
const byte RADIX::HEXADECIMAL = $10
const byte RADIX::OCTAL = 8
void main()
byte~ main::$8 reg byte a 22.0
byte main::i
byte main::i#1 reg byte y 16.5
byte main::i#2 reg byte y 7.857142857142857
byte main::j
byte main::j#1 j zp[1]:2 11.0
byte main::j#2 j zp[1]:2 5.5
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
const byte memset::c#0 c = ' '
byte* memset::dst
byte* memset::dst#1 dst zp[2]:5 2002.0
byte* memset::dst#2 dst zp[2]:5 1334.6666666666667
byte* memset::end
const byte* memset::end#0 end = (byte*)memset::str#0+memset::num#0
word memset::num
const word memset::num#0 num = $3e8
void* memset::return
void* memset::str
const void* memset::str#0 str = (void*)print_screen#0
void print_char(byte print_char::ch)
byte print_char::ch
byte print_char::ch#2 reg byte a 20002.0
byte print_char::ch#3 reg byte a 20002.0
byte print_char::ch#4 reg byte a 120003.0
byte* print_char_cursor
byte* print_char_cursor#12 print_char_cursor zp[2]:7 4643.0
byte* print_char_cursor#35 print_char_cursor zp[2]:7 110103.0
byte* print_char_cursor#51 print_char_cursor zp[2]:7 35.5
byte* print_char_cursor#63 print_char_cursor zp[2]:7 22.0
void print_cls()
const to_nomodify byte* print_hextab[]  = "0123456789abcdef"z
byte* print_line_cursor
byte* print_line_cursor#0 print_line_cursor zp[2]:3 4289.285714285714
byte* print_line_cursor#10 print_line_cursor zp[2]:3 20103.0
byte* print_line_cursor#21 print_line_cursor zp[2]:3 18.666666666666664
void print_ln()
byte* print_screen
const byte* print_screen#0 print_screen = (byte*) 1024
void print_sint(signed word print_sint::w)
signed word print_sint::w
signed word print_sint::w#0 w zp[2]:5 202.0
signed word print_sint::w#1 w zp[2]:5 52.33333333333333
signed word print_sint::w#4 w zp[2]:5 202.0
void print_uchar(byte print_uchar::b)
byte~ print_uchar::$0 reg byte a 20002.0
byte~ print_uchar::$2 reg byte x 20002.0
byte print_uchar::b
byte print_uchar::b#0 reg byte x 2002.0
byte print_uchar::b#1 reg byte x 2002.0
byte print_uchar::b#2 reg byte x 5501.0
void print_uint(word print_uint::w)
word print_uint::w
word print_uint::w#0 w zp[2]:5 701.0
void sub(byte sub::idx , byte sub::s)
byte~ sub::$0 reg byte a 303.0
byte sub::idx
byte sub::idx#0 reg byte a 22.0
byte sub::idx#1 reg byte a 22.0
byte sub::idx#2 reg byte a 22.0
byte sub::idx#3 reg byte a 134.0
byte sub::s
byte sub::s#3 reg byte x 50.5
const signed word* words[]  = { -$6000, -$600, -$60, -6, 0, 6, $60, $600, $6000 }

reg byte y [ main::i#2 main::i#1 ]
zp[1]:2 [ main::j#2 main::j#1 ]
reg byte a [ sub::idx#3 sub::idx#0 sub::idx#1 sub::idx#2 ]
reg byte x [ sub::s#3 ]
zp[2]:3 [ print_line_cursor#10 print_line_cursor#21 print_line_cursor#0 ]
zp[2]:5 [ memset::dst#2 memset::dst#1 print_sint::w#4 print_sint::w#0 print_sint::w#1 print_uint::w#0 ]
reg byte a [ print_char::ch#4 print_char::ch#2 print_char::ch#3 ]
zp[2]:7 [ print_char_cursor#35 print_char_cursor#51 print_char_cursor#63 print_char_cursor#12 ]
reg byte x [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
reg byte a [ main::$8 ]
reg byte a [ sub::$0 ]
reg byte a [ print_uchar::$0 ]
reg byte x [ print_uchar::$2 ]
