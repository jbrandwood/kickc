Fixing pointer array-indexing *((byte*[]) screens + (byte) getScreen::id)
Inlined call (byte*~) main::$0 ← call getScreen (byte/signed byte/word/signed word/dword/signed dword) 0 
Inlined call (byte*~) main::$1 ← call spritePtr (byte*) main::screen 

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*~) $0 ← ((byte*)) (word/signed word/dword/signed dword) $400
  (byte*~) $1 ← ((byte*)) (word/signed word/dword/signed dword) $1400
  (byte*[]) screens#0 ← { (byte*~) $0, (byte*~) $1 }
  to:@3
main: scope:[main]  from @3
  (byte*) main::screen#0 ← (byte*) 0
  (byte) main::getScreen1_id#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:main::getScreen1
main::getScreen1: scope:[main]  from main
  (byte) main::getScreen1_id#1 ← phi( main/(byte) main::getScreen1_id#0 )
  (byte) main::getScreen1_$0#0 ← (byte) main::getScreen1_id#1 * (const byte) SIZEOF_POINTER
  (byte*) main::getScreen1_return#0 ← *((byte*[]) screens#0 + (byte) main::getScreen1_$0#0)
  to:main::getScreen1_@return
main::getScreen1_@return: scope:[main]  from main::getScreen1
  (byte*) main::getScreen1_return#2 ← phi( main::getScreen1/(byte*) main::getScreen1_return#0 )
  (byte*) main::getScreen1_return#1 ← (byte*) main::getScreen1_return#2
  to:main::@1
main::@1: scope:[main]  from main::getScreen1_@return
  (byte*) main::getScreen1_return#3 ← phi( main::getScreen1_@return/(byte*) main::getScreen1_return#1 )
  (byte*~) main::$0 ← (byte*) main::getScreen1_return#3
  (byte*) main::screen#1 ← (byte*~) main::$0
  (byte*) main::spritePtr1_screen#0 ← (byte*) main::screen#1
  to:main::spritePtr1
main::spritePtr1: scope:[main]  from main::@1
  (byte*) main::spritePtr1_screen#1 ← phi( main::@1/(byte*) main::spritePtr1_screen#0 )
  (byte*) main::spritePtr1_$0#0 ← (byte*) main::spritePtr1_screen#1 + (word/signed word/dword/signed dword) $378
  (byte*) main::spritePtr1_$1#0 ← ((byte*)) (byte*) main::spritePtr1_$0#0
  (byte*) main::spritePtr1_return#0 ← (byte*) main::spritePtr1_$1#0
  to:main::spritePtr1_@return
main::spritePtr1_@return: scope:[main]  from main::spritePtr1
  (byte*) main::spritePtr1_return#2 ← phi( main::spritePtr1/(byte*) main::spritePtr1_return#0 )
  (byte*) main::spritePtr1_return#1 ← (byte*) main::spritePtr1_return#2
  to:main::@2
main::@2: scope:[main]  from main::spritePtr1_@return
  (byte*) main::spritePtr1_return#3 ← phi( main::spritePtr1_@return/(byte*) main::spritePtr1_return#1 )
  (byte*~) main::$1 ← (byte*) main::spritePtr1_return#3
  *((byte*~) main::$1) ← (byte/signed byte/word/signed word/dword/signed dword) $22
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@3: scope:[]  from @begin
  call main 
  to:@4
@4: scope:[]  from @3
  to:@end
@end: scope:[]  from @4

SYMBOL TABLE SSA
(byte*~) $0
(byte*~) $1
(label) @3
(label) @4
(label) @begin
(label) @end
(const byte) SIZEOF_POINTER = (byte/signed byte/word/signed word/dword/signed dword) 2
(void()) main()
(byte*~) main::$0
(byte*~) main::$1
(label) main::@1
(label) main::@2
(label) main::@return
(label) main::getScreen1
(byte) main::getScreen1_$0
(byte) main::getScreen1_$0#0
(label) main::getScreen1_@return
(byte) main::getScreen1_id
(byte) main::getScreen1_id#0
(byte) main::getScreen1_id#1
(byte*) main::getScreen1_return
(byte*) main::getScreen1_return#0
(byte*) main::getScreen1_return#1
(byte*) main::getScreen1_return#2
(byte*) main::getScreen1_return#3
(byte*) main::screen
(byte*) main::screen#0
(byte*) main::screen#1
(label) main::spritePtr1
(byte*~) main::spritePtr1_$0
(byte*) main::spritePtr1_$0#0
(byte*~) main::spritePtr1_$1
(byte*) main::spritePtr1_$1#0
(label) main::spritePtr1_@return
(byte*) main::spritePtr1_return
(byte*) main::spritePtr1_return#0
(byte*) main::spritePtr1_return#1
(byte*) main::spritePtr1_return#2
(byte*) main::spritePtr1_return#3
(byte*) main::spritePtr1_screen
(byte*) main::spritePtr1_screen#0
(byte*) main::spritePtr1_screen#1
(byte*[]) screens
(byte*[]) screens#0

Culled Empty Block (label) @4
Successful SSA optimization Pass2CullEmptyBlocks
Alias (byte) main::getScreen1_id#0 = (byte) main::getScreen1_id#1 
Alias (byte*) main::getScreen1_return#0 = (byte*) main::getScreen1_return#2 (byte*) main::getScreen1_return#1 (byte*) main::getScreen1_return#3 (byte*~) main::$0 (byte*) main::screen#1 (byte*) main::spritePtr1_screen#0 (byte*) main::spritePtr1_screen#1 
Alias (byte*) main::spritePtr1_return#0 = (byte*) main::spritePtr1_$1#0 (byte*) main::spritePtr1_return#2 (byte*) main::spritePtr1_return#1 (byte*) main::spritePtr1_return#3 (byte*~) main::$1 
Successful SSA optimization Pass2AliasElimination
Constant (const byte*) $0 = ((byte*))$400
Constant (const byte*) $1 = ((byte*))$1400
Constant (const byte*) main::screen#0 = 0
Constant (const byte) main::getScreen1_id#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*[]) screens#0 = { $0, $1 }
Constant (const byte) main::getScreen1_$0#0 = main::getScreen1_id#0*SIZEOF_POINTER
Successful SSA optimization Pass2ConstantIdentification
Consolidated array index constant in *(screens#0+main::getScreen1_$0#0)
Successful SSA optimization Pass2ConstantAdditionElimination
Successful SSA optimization PassNEliminateUnusedVars
Removing redundant cast (byte*) main::spritePtr1_return#0 ← ((byte*)) (byte*) main::spritePtr1_$0#0
Successful SSA optimization Pass2EliminateRedundantCasts
Culled Empty Block (label) main::getScreen1_@return
Culled Empty Block (label) main::@1
Culled Empty Block (label) main::spritePtr1_@return
Successful SSA optimization Pass2CullEmptyBlocks
Alias (byte*) main::spritePtr1_return#0 = (byte*) main::spritePtr1_$0#0 
Successful SSA optimization Pass2AliasElimination
Constant inlined $0 = ((byte*))(word/signed word/dword/signed dword) $400
Constant inlined $1 = ((byte*))(word/signed word/dword/signed dword) $1400
Constant inlined main::getScreen1_$0#0 = (const byte) main::getScreen1_id#0*(const byte) SIZEOF_POINTER
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @3
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to main:2 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Renumbering block @3 to @1
Renumbering block main::@2 to main::@1
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  to:main::getScreen1
main::getScreen1: scope:[main]  from main
  [5] (byte*) main::getScreen1_return#0 ← *((const byte*[]) screens#0+(const byte) main::getScreen1_id#0*(const byte) SIZEOF_POINTER)
  to:main::spritePtr1
main::spritePtr1: scope:[main]  from main::getScreen1
  [6] (byte*) main::spritePtr1_return#0 ← (byte*) main::getScreen1_return#0 + (word/signed word/dword/signed dword) $378
  to:main::@1
main::@1: scope:[main]  from main::spritePtr1
  [7] *((byte*) main::spritePtr1_return#0) ← (byte/signed byte/word/signed word/dword/signed dword) $22
  to:main::@return
main::@return: scope:[main]  from main::@1
  [8] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte) main::getScreen1_$0
(byte) main::getScreen1_id
(byte*) main::getScreen1_return
(byte*) main::getScreen1_return#0 4.0
(byte*) main::screen
(byte*~) main::spritePtr1_$0
(byte*~) main::spritePtr1_$1
(byte*) main::spritePtr1_return
(byte*) main::spritePtr1_return#0 4.0
(byte*) main::spritePtr1_screen
(byte*[]) screens

Initial phi equivalence classes
Added variable main::getScreen1_return#0 to zero page equivalence class [ main::getScreen1_return#0 ]
Added variable main::spritePtr1_return#0 to zero page equivalence class [ main::spritePtr1_return#0 ]
Complete equivalence classes
[ main::getScreen1_return#0 ]
[ main::spritePtr1_return#0 ]
Allocated zp ZP_WORD:2 [ main::getScreen1_return#0 ]
Allocated zp ZP_WORD:4 [ main::spritePtr1_return#0 ]

INITIAL ASM
//SEG0 File Comments
// Tests a cast that is not needed
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .const SIZEOF_POINTER = 2
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
    .const getScreen1_id = 0
    .label getScreen1_return = 2
    .label spritePtr1_return = 4
    jmp getScreen1
  //SEG11 main::getScreen1
  getScreen1:
  //SEG12 [5] (byte*) main::getScreen1_return#0 ← *((const byte*[]) screens#0+(const byte) main::getScreen1_id#0*(const byte) SIZEOF_POINTER) -- pbuz1=_deref_pptc1 
    lda screens+getScreen1_id*SIZEOF_POINTER
    sta getScreen1_return
    lda screens+getScreen1_id*SIZEOF_POINTER+1
    sta getScreen1_return+1
    jmp spritePtr1
  //SEG13 main::spritePtr1
  spritePtr1:
  //SEG14 [6] (byte*) main::spritePtr1_return#0 ← (byte*) main::getScreen1_return#0 + (word/signed word/dword/signed dword) $378 -- pbuz1=pbuz2_plus_vwuc1 
    lda getScreen1_return
    clc
    adc #<$378
    sta spritePtr1_return
    lda getScreen1_return+1
    adc #>$378
    sta spritePtr1_return+1
    jmp b1
  //SEG15 main::@1
  b1:
  //SEG16 [7] *((byte*) main::spritePtr1_return#0) ← (byte/signed byte/word/signed word/dword/signed dword) $22 -- _deref_pbuz1=vbuc1 
    lda #$22
    ldy #0
    sta (spritePtr1_return),y
    jmp breturn
  //SEG17 main::@return
  breturn:
  //SEG18 [8] return 
    rts
}
  screens: .word $400, $1400

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [5] (byte*) main::getScreen1_return#0 ← *((const byte*[]) screens#0+(const byte) main::getScreen1_id#0*(const byte) SIZEOF_POINTER) [ main::getScreen1_return#0 ] ( main:2 [ main::getScreen1_return#0 ] ) always clobbers reg byte a 
Statement [6] (byte*) main::spritePtr1_return#0 ← (byte*) main::getScreen1_return#0 + (word/signed word/dword/signed dword) $378 [ main::spritePtr1_return#0 ] ( main:2 [ main::spritePtr1_return#0 ] ) always clobbers reg byte a 
Statement [7] *((byte*) main::spritePtr1_return#0) ← (byte/signed byte/word/signed word/dword/signed dword) $22 [ ] ( main:2 [ ] ) always clobbers reg byte a reg byte y 
Potential registers zp ZP_WORD:2 [ main::getScreen1_return#0 ] : zp ZP_WORD:2 , 
Potential registers zp ZP_WORD:4 [ main::spritePtr1_return#0 ] : zp ZP_WORD:4 , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 4: zp ZP_WORD:2 [ main::getScreen1_return#0 ] 4: zp ZP_WORD:4 [ main::spritePtr1_return#0 ] 
Uplift Scope [] 

Uplifting [main] best 99 combination zp ZP_WORD:2 [ main::getScreen1_return#0 ] zp ZP_WORD:4 [ main::spritePtr1_return#0 ] 
Uplifting [] best 99 combination 
Coalescing zero page register with common assignment [ zp ZP_WORD:2 [ main::getScreen1_return#0 ] ] with [ zp ZP_WORD:4 [ main::spritePtr1_return#0 ] ] - score: 1

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 File Comments
// Tests a cast that is not needed
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .const SIZEOF_POINTER = 2
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
    .const getScreen1_id = 0
    .label getScreen1_return = 2
    .label spritePtr1_return = 2
    jmp getScreen1
  //SEG11 main::getScreen1
  getScreen1:
  //SEG12 [5] (byte*) main::getScreen1_return#0 ← *((const byte*[]) screens#0+(const byte) main::getScreen1_id#0*(const byte) SIZEOF_POINTER) -- pbuz1=_deref_pptc1 
    lda screens+getScreen1_id*SIZEOF_POINTER
    sta getScreen1_return
    lda screens+getScreen1_id*SIZEOF_POINTER+1
    sta getScreen1_return+1
    jmp spritePtr1
  //SEG13 main::spritePtr1
  spritePtr1:
  //SEG14 [6] (byte*) main::spritePtr1_return#0 ← (byte*) main::getScreen1_return#0 + (word/signed word/dword/signed dword) $378 -- pbuz1=pbuz1_plus_vwuc1 
    clc
    lda spritePtr1_return
    adc #<$378
    sta spritePtr1_return
    lda spritePtr1_return+1
    adc #>$378
    sta spritePtr1_return+1
    jmp b1
  //SEG15 main::@1
  b1:
  //SEG16 [7] *((byte*) main::spritePtr1_return#0) ← (byte/signed byte/word/signed word/dword/signed dword) $22 -- _deref_pbuz1=vbuc1 
    lda #$22
    ldy #0
    sta (spritePtr1_return),y
    jmp breturn
  //SEG17 main::@return
  breturn:
  //SEG18 [8] return 
    rts
}
  screens: .word $400, $1400

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp getScreen1
Removing instruction jmp spritePtr1
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction getScreen1:
Removing instruction spritePtr1:
Removing instruction b1:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const byte) SIZEOF_POINTER SIZEOF_POINTER = (byte/signed byte/word/signed word/dword/signed dword) 2
(void()) main()
(label) main::@1
(label) main::@return
(label) main::getScreen1
(byte) main::getScreen1_$0
(byte) main::getScreen1_id
(const byte) main::getScreen1_id#0 getScreen1_id = (byte/signed byte/word/signed word/dword/signed dword) 0
(byte*) main::getScreen1_return
(byte*) main::getScreen1_return#0 getScreen1_return zp ZP_WORD:2 4.0
(byte*) main::screen
(label) main::spritePtr1
(byte*~) main::spritePtr1_$0
(byte*~) main::spritePtr1_$1
(byte*) main::spritePtr1_return
(byte*) main::spritePtr1_return#0 spritePtr1_return zp ZP_WORD:2 4.0
(byte*) main::spritePtr1_screen
(byte*[]) screens
(const byte*[]) screens#0 screens = { ((byte*))(word/signed word/dword/signed dword) $400, ((byte*))(word/signed word/dword/signed dword) $1400 }

zp ZP_WORD:2 [ main::getScreen1_return#0 main::spritePtr1_return#0 ]


FINAL ASSEMBLER
Score: 48

//SEG0 File Comments
// Tests a cast that is not needed
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .const SIZEOF_POINTER = 2
//SEG3 @begin
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG5 @1
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
//SEG9 @end
//SEG10 main
main: {
    .const getScreen1_id = 0
    .label getScreen1_return = 2
    .label spritePtr1_return = 2
  //SEG11 main::getScreen1
  //SEG12 [5] (byte*) main::getScreen1_return#0 ← *((const byte*[]) screens#0+(const byte) main::getScreen1_id#0*(const byte) SIZEOF_POINTER) -- pbuz1=_deref_pptc1 
    lda screens+getScreen1_id*SIZEOF_POINTER
    sta getScreen1_return
    lda screens+getScreen1_id*SIZEOF_POINTER+1
    sta getScreen1_return+1
  //SEG13 main::spritePtr1
  //SEG14 [6] (byte*) main::spritePtr1_return#0 ← (byte*) main::getScreen1_return#0 + (word/signed word/dword/signed dword) $378 -- pbuz1=pbuz1_plus_vwuc1 
    clc
    lda spritePtr1_return
    adc #<$378
    sta spritePtr1_return
    lda spritePtr1_return+1
    adc #>$378
    sta spritePtr1_return+1
  //SEG15 main::@1
  //SEG16 [7] *((byte*) main::spritePtr1_return#0) ← (byte/signed byte/word/signed word/dword/signed dword) $22 -- _deref_pbuz1=vbuc1 
    lda #$22
    ldy #0
    sta (spritePtr1_return),y
  //SEG17 main::@return
  //SEG18 [8] return 
    rts
}
  screens: .word $400, $1400

