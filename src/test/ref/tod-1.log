Inlined call vicSelectGfxBank::$0 = call toDd00 vicSelectGfxBank::gfx 
Inlined call call __init 
Eliminating unused variable with no statement main::$2
Unwinding list assignment { main::$2_TENTHS, main::$2_SEC, main::$2_MIN, main::$2_HOURS } = { tod_read::return_TENTHS, tod_read::return_SEC, tod_read::return_MIN, tod_read::return_HOURS }
Unwinding list assignment { tod_read::return_TENTHS#2, tod_read::return_SEC#2, tod_read::return_MIN#2, tod_read::return_HOURS#2 } = { tod_read::return_TENTHS#1, tod_read::return_SEC#1, tod_read::return_MIN#1, tod_read::return_HOURS#1 }

CONTROL FLOW GRAPH SSA

void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@3 cscroll::@4
  memcpy::num#2 = phi( cscroll::@3/memcpy::num#0, cscroll::@4/memcpy::num#1 )
  memcpy::destination#2 = phi( cscroll::@3/memcpy::destination#0, cscroll::@4/memcpy::destination#1 )
  memcpy::source#2 = phi( cscroll::@3/memcpy::source#0, cscroll::@4/memcpy::source#1 )
  memcpy::src#0 = ((byte*)) memcpy::source#2
  memcpy::dst#0 = ((byte*)) memcpy::destination#2
  memcpy::$2 = (byte*)memcpy::source#2
  memcpy::$0 = memcpy::$2 + memcpy::num#2
  memcpy::src_end#0 = memcpy::$0
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  memcpy::destination#4 = phi( memcpy/memcpy::destination#2, memcpy::@2/memcpy::destination#5 )
  memcpy::dst#3 = phi( memcpy/memcpy::dst#0, memcpy::@2/memcpy::dst#1 )
  memcpy::src_end#1 = phi( memcpy/memcpy::src_end#0, memcpy::@2/memcpy::src_end#2 )
  memcpy::src#2 = phi( memcpy/memcpy::src#0, memcpy::@2/memcpy::src#1 )
  memcpy::$1 = memcpy::src#2 != memcpy::src_end#1
  if(memcpy::$1) goto memcpy::@2
  to:memcpy::@3
memcpy::@2: scope:[memcpy]  from memcpy::@1
  memcpy::destination#5 = phi( memcpy::@1/memcpy::destination#4 )
  memcpy::src_end#2 = phi( memcpy::@1/memcpy::src_end#1 )
  memcpy::dst#2 = phi( memcpy::@1/memcpy::dst#3 )
  memcpy::src#3 = phi( memcpy::@1/memcpy::src#2 )
  *memcpy::dst#2 = *memcpy::src#3
  memcpy::dst#1 = ++ memcpy::dst#2
  memcpy::src#1 = ++ memcpy::src#3
  to:memcpy::@1
memcpy::@3: scope:[memcpy]  from memcpy::@1
  memcpy::destination#3 = phi( memcpy::@1/memcpy::destination#4 )
  memcpy::return#0 = memcpy::destination#3
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@3
  memcpy::return#4 = phi( memcpy::@3/memcpy::return#0 )
  memcpy::return#1 = memcpy::return#4
  return 
  to:@return

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from cscroll::@5 cscroll::@6
  memset::c#5 = phi( cscroll::@5/memset::c#0, cscroll::@6/memset::c#1 )
  memset::str#4 = phi( cscroll::@5/memset::str#0, cscroll::@6/memset::str#1 )
  memset::num#2 = phi( cscroll::@5/memset::num#0, cscroll::@6/memset::num#1 )
  memset::$0 = memset::num#2 > 0
  memset::$1 = ! memset::$0
  if(memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@3
  memset::str#2 = phi( memset/memset::str#4, memset::@3/memset::str#5 )
  memset::return#0 = memset::str#2
  to:memset::@return
memset::@2: scope:[memset]  from memset
  memset::c#4 = phi( memset/memset::c#5 )
  memset::num#3 = phi( memset/memset::num#2 )
  memset::str#3 = phi( memset/memset::str#4 )
  memset::$4 = (byte*)memset::str#3
  memset::$2 = memset::$4 + memset::num#3
  memset::end#0 = memset::$2
  memset::dst#0 = ((byte*)) memset::str#3
  to:memset::@3
memset::@3: scope:[memset]  from memset::@2 memset::@4
  memset::c#3 = phi( memset::@2/memset::c#4, memset::@4/memset::c#2 )
  memset::str#5 = phi( memset::@2/memset::str#3, memset::@4/memset::str#6 )
  memset::end#1 = phi( memset::@2/memset::end#0, memset::@4/memset::end#2 )
  memset::dst#2 = phi( memset::@2/memset::dst#0, memset::@4/memset::dst#1 )
  memset::$3 = memset::dst#2 != memset::end#1
  if(memset::$3) goto memset::@4
  to:memset::@1
memset::@4: scope:[memset]  from memset::@3
  memset::str#6 = phi( memset::@3/memset::str#5 )
  memset::end#2 = phi( memset::@3/memset::end#1 )
  memset::dst#3 = phi( memset::@3/memset::dst#2 )
  memset::c#2 = phi( memset::@3/memset::c#3 )
  *memset::dst#3 = memset::c#2
  memset::dst#1 = ++ memset::dst#3
  to:memset::@3
memset::@return: scope:[memset]  from memset::@1
  memset::return#4 = phi( memset::@1/memset::return#0 )
  memset::return#1 = memset::return#4
  return 
  to:@return

void gotoxy(byte gotoxy::x , byte gotoxy::y)
gotoxy: scope:[gotoxy]  from cscroll::@2 main::@2
  gotoxy::x#5 = phi( cscroll::@2/gotoxy::x#1, main::@2/gotoxy::x#2 )
  gotoxy::y#3 = phi( cscroll::@2/gotoxy::y#1, main::@2/gotoxy::y#2 )
  gotoxy::$0 = gotoxy::y#3 > $19
  gotoxy::$1 = ! gotoxy::$0
  if(gotoxy::$1) goto gotoxy::@1
  to:gotoxy::@3
gotoxy::@1: scope:[gotoxy]  from gotoxy gotoxy::@3
  gotoxy::y#5 = phi( gotoxy/gotoxy::y#3, gotoxy::@3/gotoxy::y#0 )
  gotoxy::x#3 = phi( gotoxy/gotoxy::x#5, gotoxy::@3/gotoxy::x#6 )
  gotoxy::$2 = gotoxy::x#3 >= $28
  gotoxy::$3 = ! gotoxy::$2
  if(gotoxy::$3) goto gotoxy::@2
  to:gotoxy::@4
gotoxy::@3: scope:[gotoxy]  from gotoxy
  gotoxy::x#6 = phi( gotoxy/gotoxy::x#5 )
  gotoxy::y#0 = 0
  to:gotoxy::@1
gotoxy::@2: scope:[gotoxy]  from gotoxy::@1 gotoxy::@4
  gotoxy::y#4 = phi( gotoxy::@1/gotoxy::y#5, gotoxy::@4/gotoxy::y#6 )
  gotoxy::x#4 = phi( gotoxy::@1/gotoxy::x#3, gotoxy::@4/gotoxy::x#0 )
  conio_cursor_x = gotoxy::x#4
  conio_cursor_y = gotoxy::y#4
  gotoxy::$7 = (word)gotoxy::y#4
  gotoxy::$4 = gotoxy::$7 * $28
  gotoxy::line_offset#0 = gotoxy::$4
  gotoxy::$5 = CONIO_SCREEN_TEXT + gotoxy::line_offset#0
  conio_line_text = gotoxy::$5
  gotoxy::$6 = CONIO_SCREEN_COLORS + gotoxy::line_offset#0
  conio_line_color = gotoxy::$6
  to:gotoxy::@return
gotoxy::@4: scope:[gotoxy]  from gotoxy::@1
  gotoxy::y#6 = phi( gotoxy::@1/gotoxy::y#5 )
  gotoxy::x#0 = 0
  to:gotoxy::@2
gotoxy::@return: scope:[gotoxy]  from gotoxy::@2
  return 
  to:@return

void cputc(byte cputc::c)
cputc: scope:[cputc]  from cputs::@2
  cputc::c#1 = phi( cputs::@2/cputc::c#0 )
  cputc::$0 = cputc::c#1 == '
'
  if(cputc::$0) goto cputc::@1
  to:cputc::@2
cputc::@1: scope:[cputc]  from cputc
  call cputln 
  to:cputc::@4
cputc::@4: scope:[cputc]  from cputc::@1
  to:cputc::@return
cputc::@2: scope:[cputc]  from cputc
  cputc::c#2 = phi( cputc/cputc::c#1 )
  conio_line_text[conio_cursor_x] = cputc::c#2
  conio_line_color[conio_cursor_x] = conio_textcolor
  conio_cursor_x = ++ conio_cursor_x
  cputc::$1 = conio_cursor_x == $28
  cputc::$2 = ! cputc::$1
  if(cputc::$2) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  call cputln 
  to:cputc::@5
cputc::@5: scope:[cputc]  from cputc::@3
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@2 cputc::@4 cputc::@5
  return 
  to:@return

void cputln()
cputln: scope:[cputln]  from cputc::@1 cputc::@3
  conio_line_text = conio_line_text + $28
  conio_line_color = conio_line_color + $28
  conio_cursor_x = 0
  conio_cursor_y = ++ conio_cursor_y
  call cscroll 
  to:cputln::@1
cputln::@1: scope:[cputln]  from cputln
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln::@1
  return 
  to:@return

void cscroll()
cscroll: scope:[cscroll]  from cputln
  cscroll::$0 = conio_cursor_y == $19
  cscroll::$1 = ! cscroll::$0
  if(cscroll::$1) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  cscroll::$7 = 0 != conio_scroll_enable
  if(cscroll::$7) goto cscroll::@3
  to:cscroll::@2
cscroll::@3: scope:[cscroll]  from cscroll::@1
  memcpy::destination#0 = (void*)CONIO_SCREEN_TEXT
  memcpy::source#0 = (void*)CONIO_SCREEN_TEXT+$28
  memcpy::num#0 = $19*$28-$28
  call memcpy 
  memcpy::return#2 = memcpy::return#1
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  memcpy::destination#1 = (void*)CONIO_SCREEN_COLORS
  memcpy::source#1 = (void*)CONIO_SCREEN_COLORS+$28
  memcpy::num#1 = $19*$28-$28
  call memcpy 
  memcpy::return#3 = memcpy::return#1
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  memset::str#0 = (void*)CONIO_SCREEN_TEXT+$19*$28-$28
  memset::c#0 = ' '
  memset::num#0 = $28
  call memset 
  memset::return#2 = memset::return#1
  to:cscroll::@6
cscroll::@6: scope:[cscroll]  from cscroll::@5
  memset::str#1 = (void*)CONIO_SCREEN_COLORS+$19*$28-$28
  memset::c#1 = conio_textcolor
  memset::num#1 = $28
  call memset 
  memset::return#3 = memset::return#1
  to:cscroll::@7
cscroll::@7: scope:[cscroll]  from cscroll::@6
  conio_line_text = conio_line_text - $28
  conio_line_color = conio_line_color - $28
  conio_cursor_y = -- conio_cursor_y
  to:cscroll::@return
cscroll::@2: scope:[cscroll]  from cscroll::@1
  gotoxy::x#1 = 0
  gotoxy::y#1 = 0
  call gotoxy 
  to:cscroll::@8
cscroll::@8: scope:[cscroll]  from cscroll::@2
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@7 cscroll::@8
  return 
  to:@return

void cputs(to_nomodify byte* cputs::s)
cputs: scope:[cputs]  from main::@6
  cputs::s#3 = phi( main::@6/cputs::s#1 )
  cputs::c#0 = 0
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@3
  cputs::s#2 = phi( cputs/cputs::s#3, cputs::@3/cputs::s#4 )
  cputs::c#1 = *cputs::s#2
  cputs::$0 = cputs::c#1
  cputs::s#0 = ++ cputs::s#2
  cputs::$2 = 0 != cputs::$0
  if(cputs::$2) goto cputs::@2
  to:cputs::@return
cputs::@2: scope:[cputs]  from cputs::@1
  cputs::s#5 = phi( cputs::@1/cputs::s#0 )
  cputs::c#2 = phi( cputs::@1/cputs::c#1 )
  cputc::c#0 = cputs::c#2
  call cputc 
  to:cputs::@3
cputs::@3: scope:[cputs]  from cputs::@2
  cputs::s#4 = phi( cputs::@2/cputs::s#5 )
  to:cputs::@1
cputs::@return: scope:[cputs]  from cputs::@1
  return 
  to:@return

void tod_init(byte tod_init::tod_TENTHS , byte tod_init::tod_SEC , byte tod_init::tod_MIN , byte tod_init::tod_HOURS)
tod_init: scope:[tod_init]  from main
  tod_init::tod_TENTHS#1 = phi( main/tod_init::tod_TENTHS#0 )
  tod_init::tod_SEC#1 = phi( main/tod_init::tod_SEC#0 )
  tod_init::tod_MIN#1 = phi( main/tod_init::tod_MIN#0 )
  tod_init::tod_HOURS#1 = phi( main/tod_init::tod_HOURS#0 )
  *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) | $80
  *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) & $7f
  *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS) = tod_init::tod_HOURS#1
  *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_MIN) = tod_init::tod_MIN#1
  *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_SEC) = tod_init::tod_SEC#1
  *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_10THS) = tod_init::tod_TENTHS#1
  to:tod_init::@return
tod_init::@return: scope:[tod_init]  from tod_init
  return 
  to:@return

struct TIME_OF_DAY tod_read()
tod_read: scope:[tod_read]  from main::@4
  tod_read::hours#0 = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS)
  tod_read::mins#0 = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_MIN)
  tod_read::secs#0 = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_SEC)
  tod_read::tenths#0 = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_10THS)
  tod_read::tod_TENTHS#0 = tod_read::tenths#0
  tod_read::tod_SEC#0 = tod_read::secs#0
  tod_read::tod_MIN#0 = tod_read::mins#0
  tod_read::tod_HOURS#0 = tod_read::hours#0
  tod_read::return_TENTHS#0 = tod_read::tod_TENTHS#0
  tod_read::return_SEC#0 = tod_read::tod_SEC#0
  tod_read::return_MIN#0 = tod_read::tod_MIN#0
  tod_read::return_HOURS#0 = tod_read::tod_HOURS#0
  tod_read::return#0 = struct-unwound {tod_read::return_TENTHS#0, tod_read::return_SEC#0, tod_read::return_MIN#0, tod_read::return_HOURS#0}
  to:tod_read::@return
tod_read::@return: scope:[tod_read]  from tod_read
  tod_read::return_HOURS#3 = phi( tod_read/tod_read::return_HOURS#0 )
  tod_read::return_MIN#3 = phi( tod_read/tod_read::return_MIN#0 )
  tod_read::return_SEC#3 = phi( tod_read/tod_read::return_SEC#0 )
  tod_read::return_TENTHS#3 = phi( tod_read/tod_read::return_TENTHS#0 )
  tod_read::return_TENTHS#1 = tod_read::return_TENTHS#3
  tod_read::return_SEC#1 = tod_read::return_SEC#3
  tod_read::return_MIN#1 = tod_read::return_MIN#3
  tod_read::return_HOURS#1 = tod_read::return_HOURS#3
  tod_read::return#1 = struct-unwound {tod_read::return_TENTHS#1, tod_read::return_SEC#1, tod_read::return_MIN#1, tod_read::return_HOURS#1}
  return 
  to:@return

byte* tod_str(byte tod_str::tod_TENTHS , byte tod_str::tod_SEC , byte tod_str::tod_MIN , byte tod_str::tod_HOURS)
tod_str: scope:[tod_str]  from main::@5
  tod_str::tod_TENTHS#1 = phi( main::@5/tod_str::tod_TENTHS#0 )
  tod_str::tod_SEC#1 = phi( main::@5/tod_str::tod_SEC#0 )
  tod_str::tod_MIN#1 = phi( main::@5/tod_str::tod_MIN#0 )
  tod_str::tod_HOURS#1 = phi( main::@5/tod_str::tod_HOURS#0 )
  tod_str::$0 = tod_str::tod_HOURS#1 >> 4
  tod_str::$1 = '0' + tod_str::$0
  tod_buffer[0] = tod_str::$1
  tod_str::$2 = tod_str::tod_HOURS#1 & $f
  tod_str::$3 = '0' + tod_str::$2
  tod_buffer[1] = tod_str::$3
  tod_str::$4 = tod_str::tod_MIN#1 >> 4
  tod_str::$5 = '0' + tod_str::$4
  tod_buffer[3] = tod_str::$5
  tod_str::$6 = tod_str::tod_MIN#1 & $f
  tod_str::$7 = '0' + tod_str::$6
  tod_buffer[4] = tod_str::$7
  tod_str::$8 = tod_str::tod_SEC#1 >> 4
  tod_str::$9 = '0' + tod_str::$8
  tod_buffer[6] = tod_str::$9
  tod_str::$10 = tod_str::tod_SEC#1 & $f
  tod_str::$11 = '0' + tod_str::$10
  tod_buffer[7] = tod_str::$11
  tod_str::$12 = tod_str::tod_TENTHS#1 >> 4
  tod_str::$13 = '0' + tod_str::$12
  tod_buffer[9] = tod_str::$13
  tod_str::$14 = tod_str::tod_TENTHS#1 & $f
  tod_str::$15 = '0' + tod_str::$14
  tod_buffer[$a] = tod_str::$15
  tod_str::return#0 = tod_buffer
  to:tod_str::@return
tod_str::@return: scope:[tod_str]  from tod_str
  tod_str::return#3 = phi( tod_str/tod_str::return#0 )
  tod_str::return#1 = tod_str::return#3
  return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  tod_init::tod_TENTHS#0 = *((byte*)&TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_TENTHS)
  tod_init::tod_SEC#0 = *((byte*)&TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_SEC)
  tod_init::tod_MIN#0 = *((byte*)&TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_MIN)
  tod_init::tod_HOURS#0 = *((byte*)&TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_HOURS)
  call tod_init 
  to:main::@3
main::@3: scope:[main]  from main
  to:main::@1
main::@1: scope:[main]  from main::@3 main::@7
  main::$5 = 0 != 1
  if(main::$5) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  gotoxy::x#2 = 0
  gotoxy::y#2 = 0
  call gotoxy 
  to:main::@4
main::@4: scope:[main]  from main::@2
  call tod_read 
  tod_read::return_TENTHS#2 = tod_read::return_TENTHS#1
  tod_read::return_SEC#2 = tod_read::return_SEC#1
  tod_read::return_MIN#2 = tod_read::return_MIN#1
  tod_read::return_HOURS#2 = tod_read::return_HOURS#1
  to:main::@5
main::@5: scope:[main]  from main::@4
  tod_read::return_HOURS#4 = phi( main::@4/tod_read::return_HOURS#2 )
  tod_read::return_MIN#4 = phi( main::@4/tod_read::return_MIN#2 )
  tod_read::return_SEC#4 = phi( main::@4/tod_read::return_SEC#2 )
  tod_read::return_TENTHS#4 = phi( main::@4/tod_read::return_TENTHS#2 )
  main::$2_TENTHS = tod_read::return_TENTHS#4
  main::$2_SEC = tod_read::return_SEC#4
  main::$2_MIN = tod_read::return_MIN#4
  main::$2_HOURS = tod_read::return_HOURS#4
  tod_str::tod_TENTHS#0 = main::$2_TENTHS
  tod_str::tod_SEC#0 = main::$2_SEC
  tod_str::tod_MIN#0 = main::$2_MIN
  tod_str::tod_HOURS#0 = main::$2_HOURS
  call tod_str 
  tod_str::return#2 = tod_str::return#1
  to:main::@6
main::@6: scope:[main]  from main::@5
  tod_str::return#4 = phi( main::@5/tod_str::return#2 )
  main::$3 = tod_str::return#4
  cputs::s#1 = main::$3
  call cputs 
  to:main::@7
main::@7: scope:[main]  from main::@6
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  conio_cursor_x = 0
  conio_cursor_y = 0
  conio_line_text = CONIO_SCREEN_TEXT
  conio_line_color = CONIO_SCREEN_COLORS
  conio_textcolor = CONIO_TEXTCOLOR_DEFAULT
  conio_scroll_enable = 1
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
const nomodify struct MOS6526_CIA* CIA1 = (struct MOS6526_CIA*)$dc00
const nomodify byte* COLORRAM = (byte*)$d800
const nomodify byte* CONIO_SCREEN_COLORS = COLORRAM
const nomodify byte* CONIO_SCREEN_TEXT = DEFAULT_SCREEN
const nomodify byte CONIO_TEXTCOLOR_DEFAULT = LIGHT_BLUE
const nomodify byte* DEFAULT_SCREEN = (byte*)$400
const nomodify byte LIGHT_BLUE = $e
const byte OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL = $e
const byte OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL = $f
const byte OFFSET_STRUCT_MOS6526_CIA_TOD_10THS = 8
const byte OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS = $b
const byte OFFSET_STRUCT_MOS6526_CIA_TOD_MIN = $a
const byte OFFSET_STRUCT_MOS6526_CIA_TOD_SEC = 9
const byte OFFSET_STRUCT_TIME_OF_DAY_HOURS = 3
const byte OFFSET_STRUCT_TIME_OF_DAY_MIN = 2
const byte OFFSET_STRUCT_TIME_OF_DAY_SEC = 1
const byte OFFSET_STRUCT_TIME_OF_DAY_TENTHS = 0
struct TIME_OF_DAY TOD_ZERO loadstore = { TENTHS: 0, SEC: 0, MIN: 0, HOURS: 0 }
void __start()
byte conio_cursor_x loadstore
byte conio_cursor_y loadstore
byte* conio_line_color loadstore
byte* conio_line_text loadstore
byte conio_scroll_enable loadstore
byte conio_textcolor loadstore
void cputc(byte cputc::c)
bool~ cputc::$0
bool~ cputc::$1
bool~ cputc::$2
byte cputc::c
byte cputc::c#0
byte cputc::c#1
byte cputc::c#2
void cputln()
void cputs(to_nomodify byte* cputs::s)
byte~ cputs::$0
bool~ cputs::$2
byte cputs::c
byte cputs::c#0
byte cputs::c#1
byte cputs::c#2
to_nomodify byte* cputs::s
to_nomodify byte* cputs::s#0
to_nomodify byte* cputs::s#1
to_nomodify byte* cputs::s#2
to_nomodify byte* cputs::s#3
to_nomodify byte* cputs::s#4
to_nomodify byte* cputs::s#5
void cscroll()
bool~ cscroll::$0
bool~ cscroll::$1
bool~ cscroll::$7
void gotoxy(byte gotoxy::x , byte gotoxy::y)
bool~ gotoxy::$0
bool~ gotoxy::$1
bool~ gotoxy::$2
bool~ gotoxy::$3
number~ gotoxy::$4
byte*~ gotoxy::$5
byte*~ gotoxy::$6
word~ gotoxy::$7
word gotoxy::line_offset
word gotoxy::line_offset#0
byte gotoxy::x
byte gotoxy::x#0
byte gotoxy::x#1
byte gotoxy::x#2
byte gotoxy::x#3
byte gotoxy::x#4
byte gotoxy::x#5
byte gotoxy::x#6
byte gotoxy::y
byte gotoxy::y#0
byte gotoxy::y#1
byte gotoxy::y#2
byte gotoxy::y#3
byte gotoxy::y#4
byte gotoxy::y#5
byte gotoxy::y#6
void main()
byte~ main::$2_HOURS
byte~ main::$2_MIN
byte~ main::$2_SEC
byte~ main::$2_TENTHS
byte*~ main::$3
bool~ main::$5
void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
byte*~ memcpy::$0
bool~ memcpy::$1
byte*~ memcpy::$2
void* memcpy::destination
void* memcpy::destination#0
void* memcpy::destination#1
void* memcpy::destination#2
void* memcpy::destination#3
void* memcpy::destination#4
void* memcpy::destination#5
byte* memcpy::dst
byte* memcpy::dst#0
byte* memcpy::dst#1
byte* memcpy::dst#2
byte* memcpy::dst#3
word memcpy::num
word memcpy::num#0
word memcpy::num#1
word memcpy::num#2
void* memcpy::return
void* memcpy::return#0
void* memcpy::return#1
void* memcpy::return#2
void* memcpy::return#3
void* memcpy::return#4
void* memcpy::source
void* memcpy::source#0
void* memcpy::source#1
void* memcpy::source#2
byte* memcpy::src
byte* memcpy::src#0
byte* memcpy::src#1
byte* memcpy::src#2
byte* memcpy::src#3
byte* memcpy::src_end
byte* memcpy::src_end#0
byte* memcpy::src_end#1
byte* memcpy::src_end#2
void* memset(void* memset::str , byte memset::c , word memset::num)
bool~ memset::$0
bool~ memset::$1
byte*~ memset::$2
bool~ memset::$3
byte*~ memset::$4
byte memset::c
byte memset::c#0
byte memset::c#1
byte memset::c#2
byte memset::c#3
byte memset::c#4
byte memset::c#5
byte* memset::dst
byte* memset::dst#0
byte* memset::dst#1
byte* memset::dst#2
byte* memset::dst#3
byte* memset::end
byte* memset::end#0
byte* memset::end#1
byte* memset::end#2
word memset::num
word memset::num#0
word memset::num#1
word memset::num#2
word memset::num#3
void* memset::return
void* memset::return#0
void* memset::return#1
void* memset::return#2
void* memset::return#3
void* memset::return#4
void* memset::str
void* memset::str#0
void* memset::str#1
void* memset::str#2
void* memset::str#3
void* memset::str#4
void* memset::str#5
void* memset::str#6
const byte* tod_buffer[]  = "00:00:00:00"
void tod_init(byte tod_init::tod_TENTHS , byte tod_init::tod_SEC , byte tod_init::tod_MIN , byte tod_init::tod_HOURS)
struct TIME_OF_DAY tod_init::tod
byte tod_init::tod_HOURS
byte tod_init::tod_HOURS#0
byte tod_init::tod_HOURS#1
byte tod_init::tod_MIN
byte tod_init::tod_MIN#0
byte tod_init::tod_MIN#1
byte tod_init::tod_SEC
byte tod_init::tod_SEC#0
byte tod_init::tod_SEC#1
byte tod_init::tod_TENTHS
byte tod_init::tod_TENTHS#0
byte tod_init::tod_TENTHS#1
struct TIME_OF_DAY tod_read()
byte tod_read::hours
byte tod_read::hours#0
byte tod_read::mins
byte tod_read::mins#0
struct TIME_OF_DAY tod_read::return
struct TIME_OF_DAY tod_read::return#0
struct TIME_OF_DAY tod_read::return#1
byte tod_read::return_HOURS
byte tod_read::return_HOURS#0
byte tod_read::return_HOURS#1
byte tod_read::return_HOURS#2
byte tod_read::return_HOURS#3
byte tod_read::return_HOURS#4
byte tod_read::return_MIN
byte tod_read::return_MIN#0
byte tod_read::return_MIN#1
byte tod_read::return_MIN#2
byte tod_read::return_MIN#3
byte tod_read::return_MIN#4
byte tod_read::return_SEC
byte tod_read::return_SEC#0
byte tod_read::return_SEC#1
byte tod_read::return_SEC#2
byte tod_read::return_SEC#3
byte tod_read::return_SEC#4
byte tod_read::return_TENTHS
byte tod_read::return_TENTHS#0
byte tod_read::return_TENTHS#1
byte tod_read::return_TENTHS#2
byte tod_read::return_TENTHS#3
byte tod_read::return_TENTHS#4
byte tod_read::secs
byte tod_read::secs#0
byte tod_read::tenths
byte tod_read::tenths#0
byte tod_read::tod_HOURS
byte tod_read::tod_HOURS#0
byte tod_read::tod_MIN
byte tod_read::tod_MIN#0
byte tod_read::tod_SEC
byte tod_read::tod_SEC#0
byte tod_read::tod_TENTHS
byte tod_read::tod_TENTHS#0
byte* tod_str(byte tod_str::tod_TENTHS , byte tod_str::tod_SEC , byte tod_str::tod_MIN , byte tod_str::tod_HOURS)
byte~ tod_str::$0
byte~ tod_str::$1
number~ tod_str::$10
number~ tod_str::$11
byte~ tod_str::$12
byte~ tod_str::$13
number~ tod_str::$14
number~ tod_str::$15
number~ tod_str::$2
number~ tod_str::$3
byte~ tod_str::$4
byte~ tod_str::$5
number~ tod_str::$6
number~ tod_str::$7
byte~ tod_str::$8
byte~ tod_str::$9
byte* tod_str::return
byte* tod_str::return#0
byte* tod_str::return#1
byte* tod_str::return#2
byte* tod_str::return#3
byte* tod_str::return#4
struct TIME_OF_DAY tod_str::tod
byte tod_str::tod_HOURS
byte tod_str::tod_HOURS#0
byte tod_str::tod_HOURS#1
byte tod_str::tod_MIN
byte tod_str::tod_MIN#0
byte tod_str::tod_MIN#1
byte tod_str::tod_SEC
byte tod_str::tod_SEC#0
byte tod_str::tod_SEC#1
byte tod_str::tod_TENTHS
byte tod_str::tod_TENTHS#0
byte tod_str::tod_TENTHS#1

Adding number conversion cast (unumber) 0 in memset::$0 = memset::num#2 > 0
Adding number conversion cast (unumber) $19 in gotoxy::$0 = gotoxy::y#3 > $19
Adding number conversion cast (unumber) $28 in gotoxy::$2 = gotoxy::x#3 >= $28
Adding number conversion cast (unumber) 0 in gotoxy::y#0 = 0
Adding number conversion cast (unumber) $28 in gotoxy::$4 = gotoxy::$7 * $28
Adding number conversion cast (unumber) gotoxy::$4 in gotoxy::$4 = gotoxy::$7 * (unumber)$28
Adding number conversion cast (unumber) 0 in gotoxy::x#0 = 0
Adding number conversion cast (unumber) $28 in cputc::$1 = conio_cursor_x == $28
Adding number conversion cast (unumber) $28 in conio_line_text = conio_line_text + $28
Adding number conversion cast (unumber) $28 in conio_line_color = conio_line_color + $28
Adding number conversion cast (unumber) 0 in conio_cursor_x = 0
Adding number conversion cast (unumber) $19 in cscroll::$0 = conio_cursor_y == $19
Adding number conversion cast (unumber) 0 in cscroll::$7 = 0 != conio_scroll_enable
Adding number conversion cast (unumber) $28 in memcpy::source#0 = (void*)CONIO_SCREEN_TEXT+$28
Adding number conversion cast (unumber) $19*$28-$28 in memcpy::num#0 = $19*$28-$28
Adding number conversion cast (unumber) $28 in memcpy::source#1 = (void*)CONIO_SCREEN_COLORS+$28
Adding number conversion cast (unumber) $19*$28-$28 in memcpy::num#1 = $19*$28-$28
Adding number conversion cast (unumber) $28 in memset::str#0 = (void*)CONIO_SCREEN_TEXT+$19*$28-$28
Adding number conversion cast (unumber) $19*$28 in memset::str#0 = (void*)CONIO_SCREEN_TEXT+$19*$28-(unumber)$28
Adding number conversion cast (unumber) $28 in memset::num#0 = $28
Adding number conversion cast (unumber) $28 in memset::str#1 = (void*)CONIO_SCREEN_COLORS+$19*$28-$28
Adding number conversion cast (unumber) $19*$28 in memset::str#1 = (void*)CONIO_SCREEN_COLORS+$19*$28-(unumber)$28
Adding number conversion cast (unumber) $28 in memset::num#1 = $28
Adding number conversion cast (unumber) $28 in conio_line_text = conio_line_text - $28
Adding number conversion cast (unumber) $28 in conio_line_color = conio_line_color - $28
Adding number conversion cast (unumber) 0 in gotoxy::x#1 = 0
Adding number conversion cast (unumber) 0 in gotoxy::y#1 = 0
Adding number conversion cast (unumber) 0 in cputs::$2 = 0 != cputs::$0
Adding number conversion cast (unumber) $80 in *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) | $80
Adding number conversion cast (unumber) $7f in *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) & $7f
Adding number conversion cast (unumber) 4 in tod_str::$0 = tod_str::tod_HOURS#1 >> 4
Adding number conversion cast (unumber) 0 in tod_buffer[0] = tod_str::$1
Adding number conversion cast (unumber) $f in tod_str::$2 = tod_str::tod_HOURS#1 & $f
Adding number conversion cast (unumber) tod_str::$2 in tod_str::$2 = tod_str::tod_HOURS#1 & (unumber)$f
Adding number conversion cast (unumber) tod_str::$3 in tod_str::$3 = '0' + tod_str::$2
Adding number conversion cast (unumber) 1 in tod_buffer[1] = tod_str::$3
Adding number conversion cast (unumber) 4 in tod_str::$4 = tod_str::tod_MIN#1 >> 4
Adding number conversion cast (unumber) 3 in tod_buffer[3] = tod_str::$5
Adding number conversion cast (unumber) $f in tod_str::$6 = tod_str::tod_MIN#1 & $f
Adding number conversion cast (unumber) tod_str::$6 in tod_str::$6 = tod_str::tod_MIN#1 & (unumber)$f
Adding number conversion cast (unumber) tod_str::$7 in tod_str::$7 = '0' + tod_str::$6
Adding number conversion cast (unumber) 4 in tod_buffer[4] = tod_str::$7
Adding number conversion cast (unumber) 4 in tod_str::$8 = tod_str::tod_SEC#1 >> 4
Adding number conversion cast (unumber) 6 in tod_buffer[6] = tod_str::$9
Adding number conversion cast (unumber) $f in tod_str::$10 = tod_str::tod_SEC#1 & $f
Adding number conversion cast (unumber) tod_str::$10 in tod_str::$10 = tod_str::tod_SEC#1 & (unumber)$f
Adding number conversion cast (unumber) tod_str::$11 in tod_str::$11 = '0' + tod_str::$10
Adding number conversion cast (unumber) 7 in tod_buffer[7] = tod_str::$11
Adding number conversion cast (unumber) 4 in tod_str::$12 = tod_str::tod_TENTHS#1 >> 4
Adding number conversion cast (unumber) 9 in tod_buffer[9] = tod_str::$13
Adding number conversion cast (unumber) $f in tod_str::$14 = tod_str::tod_TENTHS#1 & $f
Adding number conversion cast (unumber) tod_str::$14 in tod_str::$14 = tod_str::tod_TENTHS#1 & (unumber)$f
Adding number conversion cast (unumber) tod_str::$15 in tod_str::$15 = '0' + tod_str::$14
Adding number conversion cast (unumber) $a in tod_buffer[$a] = tod_str::$15
Adding number conversion cast (unumber) 0 in gotoxy::x#2 = 0
Adding number conversion cast (unumber) 0 in gotoxy::y#2 = 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast memcpy::src#0 = (byte*)memcpy::source#2
Inlining cast memcpy::dst#0 = (byte*)memcpy::destination#2
Inlining cast memset::dst#0 = (byte*)memset::str#3
Inlining cast gotoxy::y#0 = (unumber)0
Inlining cast gotoxy::x#0 = (unumber)0
Inlining cast conio_cursor_x = (unumber)0
Inlining cast memcpy::num#0 = (unumber)$19*$28-$28
Inlining cast memcpy::num#1 = (unumber)$19*$28-$28
Inlining cast memset::num#0 = (unumber)$28
Inlining cast memset::num#1 = (unumber)$28
Inlining cast gotoxy::x#1 = (unumber)0
Inlining cast gotoxy::y#1 = (unumber)0
Inlining cast gotoxy::x#2 = (unumber)0
Inlining cast gotoxy::y#2 = (unumber)0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 55296
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (struct MOS6526_CIA*) 56320
Simplifying constant integer cast 0
Simplifying constant integer cast $19
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $19
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $80
Simplifying constant integer cast $7f
Simplifying constant integer cast 4
Simplifying constant integer cast 0
Simplifying constant integer cast $f
Simplifying constant integer cast 1
Simplifying constant integer cast 4
Simplifying constant integer cast 3
Simplifying constant integer cast $f
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast 6
Simplifying constant integer cast $f
Simplifying constant integer cast 7
Simplifying constant integer cast 4
Simplifying constant integer cast 9
Simplifying constant integer cast $f
Simplifying constant integer cast $a
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 0
Finalized unsigned number type $19
Finalized unsigned number type $28
Finalized unsigned number type 0
Finalized unsigned number type $28
Finalized unsigned number type 0
Finalized unsigned number type $28
Finalized unsigned number type $28
Finalized unsigned number type $28
Finalized unsigned number type 0
Finalized unsigned number type $19
Finalized unsigned number type 0
Finalized unsigned number type $28
Finalized unsigned number type $28
Finalized unsigned number type $28
Finalized unsigned number type $28
Finalized unsigned number type $28
Finalized unsigned number type $28
Finalized unsigned number type $28
Finalized unsigned number type $28
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type $80
Finalized unsigned number type $7f
Finalized unsigned number type 4
Finalized unsigned number type 0
Finalized unsigned number type $f
Finalized unsigned number type 1
Finalized unsigned number type 4
Finalized unsigned number type 3
Finalized unsigned number type $f
Finalized unsigned number type 4
Finalized unsigned number type 4
Finalized unsigned number type 6
Finalized unsigned number type $f
Finalized unsigned number type 7
Finalized unsigned number type 4
Finalized unsigned number type 9
Finalized unsigned number type $f
Finalized unsigned number type $a
Finalized unsigned number type 0
Finalized unsigned number type 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to word in gotoxy::$4 = gotoxy::$7 * $28
Inferred type updated to byte in tod_str::$2 = tod_str::tod_HOURS#1 & $f
Inferred type updated to byte in tod_str::$3 = '0' + tod_str::$2
Inferred type updated to byte in tod_str::$6 = tod_str::tod_MIN#1 & $f
Inferred type updated to byte in tod_str::$7 = '0' + tod_str::$6
Inferred type updated to byte in tod_str::$10 = tod_str::tod_SEC#1 & $f
Inferred type updated to byte in tod_str::$11 = '0' + tod_str::$10
Inferred type updated to byte in tod_str::$14 = tod_str::tod_TENTHS#1 & $f
Inferred type updated to byte in tod_str::$15 = '0' + tod_str::$14
Inversing boolean not [20] memset::$1 = memset::num#2 <= 0 from [19] memset::$0 = memset::num#2 > 0
Inversing boolean not [40] gotoxy::$1 = gotoxy::y#3 <= $19 from [39] gotoxy::$0 = gotoxy::y#3 > $19
Inversing boolean not [44] gotoxy::$3 = gotoxy::x#3 < $28 from [43] gotoxy::$2 = gotoxy::x#3 >= $28
Inversing boolean not [70] cputc::$2 = conio_cursor_x != $28 from [69] cputc::$1 = conio_cursor_x == $28
Inversing boolean not [81] cscroll::$1 = conio_cursor_y != $19 from [80] cscroll::$0 = conio_cursor_y == $19
Successful SSA optimization Pass2UnaryNotSimplification
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Alias memcpy::src_end#0 = memcpy::$0 
Alias memcpy::src#2 = memcpy::src#3 
Alias memcpy::dst#2 = memcpy::dst#3 
Alias memcpy::src_end#1 = memcpy::src_end#2 
Alias memcpy::destination#3 = memcpy::destination#5 memcpy::destination#4 memcpy::return#0 memcpy::return#4 memcpy::return#1 
Alias memset::return#0 = memset::str#2 memset::return#4 memset::return#1 
Alias memset::str#3 = memset::str#4 
Alias memset::num#2 = memset::num#3 
Alias memset::c#4 = memset::c#5 
Alias memset::end#0 = memset::$2 
Alias memset::c#2 = memset::c#3 
Alias memset::dst#2 = memset::dst#3 
Alias memset::end#1 = memset::end#2 
Alias memset::str#5 = memset::str#6 
Alias gotoxy::x#5 = gotoxy::x#6 
Alias gotoxy::line_offset#0 = gotoxy::$4 
Alias gotoxy::y#5 = gotoxy::y#6 
Alias cputc::c#1 = cputc::c#2 
Alias cputs::c#1 = cputs::$0 cputs::c#2 
Alias cputs::s#0 = cputs::s#5 cputs::s#4 
Alias tod_read::return_TENTHS#0 = tod_read::tod_TENTHS#0 tod_read::tenths#0 tod_read::return_TENTHS#3 tod_read::return_TENTHS#1 
Alias tod_read::return_SEC#0 = tod_read::tod_SEC#0 tod_read::secs#0 tod_read::return_SEC#3 tod_read::return_SEC#1 
Alias tod_read::return_MIN#0 = tod_read::tod_MIN#0 tod_read::mins#0 tod_read::return_MIN#3 tod_read::return_MIN#1 
Alias tod_read::return_HOURS#0 = tod_read::tod_HOURS#0 tod_read::hours#0 tod_read::return_HOURS#3 tod_read::return_HOURS#1 
Alias tod_str::return#0 = tod_str::return#3 tod_str::return#1 
Alias tod_read::return_TENTHS#2 = tod_read::return_TENTHS#4 
Alias tod_read::return_SEC#2 = tod_read::return_SEC#4 
Alias tod_read::return_MIN#2 = tod_read::return_MIN#4 
Alias tod_read::return_HOURS#2 = tod_read::return_HOURS#4 
Alias tod_str::tod_TENTHS#0 = main::$2_TENTHS 
Alias tod_str::tod_SEC#0 = main::$2_SEC 
Alias tod_str::tod_MIN#0 = main::$2_MIN 
Alias tod_str::tod_HOURS#0 = main::$2_HOURS 
Alias tod_str::return#2 = tod_str::return#4 
Alias cputs::s#1 = main::$3 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Alias gotoxy::x#3 = gotoxy::x#5 
Alias gotoxy::y#4 = gotoxy::y#5 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Identical Phi Values memcpy::src_end#1 memcpy::src_end#0
Identical Phi Values memcpy::destination#3 memcpy::destination#2
Identical Phi Values memset::end#1 memset::end#0
Identical Phi Values memset::str#5 memset::str#3
Identical Phi Values memset::c#2 memset::c#4
Identical Phi Values cputc::c#1 cputc::c#0
Identical Phi Values cputs::s#3 cputs::s#1
Identical Phi Values tod_init::tod_HOURS#1 tod_init::tod_HOURS#0
Identical Phi Values tod_init::tod_MIN#1 tod_init::tod_MIN#0
Identical Phi Values tod_init::tod_SEC#1 tod_init::tod_SEC#0
Identical Phi Values tod_init::tod_TENTHS#1 tod_init::tod_TENTHS#0
Identical Phi Values tod_str::tod_HOURS#1 tod_str::tod_HOURS#0
Identical Phi Values tod_str::tod_MIN#1 tod_str::tod_MIN#0
Identical Phi Values tod_str::tod_SEC#1 tod_str::tod_SEC#0
Identical Phi Values tod_str::tod_TENTHS#1 tod_str::tod_TENTHS#0
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values memset::return#0 memset::str#3
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition memcpy::$1 [7] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2
Simple Condition memset::$1 [14] if(memset::num#2<=0) goto memset::@1
Simple Condition memset::$3 [21] if(memset::dst#2!=memset::end#0) goto memset::@4
Simple Condition gotoxy::$1 [27] if(gotoxy::y#3<=$19) goto gotoxy::@1
Simple Condition gotoxy::$3 [30] if(gotoxy::x#3<$28) goto gotoxy::@2
Simple Condition cputc::$0 [45] if(cputc::c#0=='
') goto cputc::@1
Simple Condition cputc::$2 [51] if(conio_cursor_x!=$28) goto cputc::@return
Simple Condition cscroll::$1 [61] if(conio_cursor_y!=$19) goto cscroll::@return
Simple Condition cscroll::$7 [63] if(0!=conio_scroll_enable) goto cscroll::@3
Simple Condition cputs::$2 [97] if(0!=cputs::c#1) goto cputs::@2
Simple Condition main::$5 [149] if(0!=1) goto main::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [66] memcpy::num#0 = (unumber)$19*$28-$28
Constant right-side identified [71] memcpy::num#1 = (unumber)$19*$28-$28
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant gotoxy::y#0 = 0
Constant gotoxy::x#0 = 0
Constant memcpy::destination#0 = (void*)CONIO_SCREEN_TEXT
Constant memcpy::source#0 = (void*)CONIO_SCREEN_TEXT+$28
Constant memcpy::num#0 = (unumber)$19*$28-$28
Constant memcpy::destination#1 = (void*)CONIO_SCREEN_COLORS
Constant memcpy::source#1 = (void*)CONIO_SCREEN_COLORS+$28
Constant memcpy::num#1 = (unumber)$19*$28-$28
Constant memset::str#0 = (void*)CONIO_SCREEN_TEXT+(word)$19*$28-$28
Constant memset::c#0 = ' '
Constant memset::num#0 = $28
Constant memset::str#1 = (void*)CONIO_SCREEN_COLORS+(word)$19*$28-$28
Constant memset::num#1 = $28
Constant gotoxy::x#1 = 0
Constant gotoxy::y#1 = 0
Constant cputs::c#0 = 0
Constant tod_str::return#0 = tod_buffer
Constant gotoxy::x#2 = 0
Constant gotoxy::y#2 = 0
Constant conio_textcolor = CONIO_TEXTCOLOR_DEFAULT
Constant conio_scroll_enable = 1
Successful SSA optimization Pass2ConstantIdentification
Constant memset::c#1 = conio_textcolor
Constant tod_str::return#2 = tod_str::return#0
Successful SSA optimization Pass2ConstantIdentification
Constant cputs::s#1 = tod_str::return#2
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [63] if(0!=conio_scroll_enable) goto cscroll::@3
if() condition always true - replacing block destination [149] if(0!=1) goto main::@2
Successful SSA optimization Pass2ConstantIfs
Rewriting conditional comparison [27] if(gotoxy::y#3<=$19) goto gotoxy::@1
Simplifying expression containing zero tod_buffer in [119] tod_buffer[0] = tod_str::$1
Simplifying expression containing zero (byte*)&TOD_ZERO in [143] tod_init::tod_TENTHS#0 = *((byte*)&TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_TENTHS)
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable memcpy::return#2 and assignment [51] memcpy::return#2 = memcpy::destination#2
Eliminating unused variable memcpy::return#3 and assignment [53] memcpy::return#3 = memcpy::destination#2
Eliminating unused variable memset::return#2 and assignment [55] memset::return#2 = memset::str#3
Eliminating unused variable memset::return#3 and assignment [57] memset::return#3 = memset::str#3
Eliminating unused variable tod_read::return#0 and assignment [81] tod_read::return#0 = struct-unwound {tod_read::return_TENTHS#0, tod_read::return_SEC#0, tod_read::return_MIN#0, tod_read::return_HOURS#0}
Eliminating unused variable tod_read::return#1 and assignment [82] tod_read::return#1 = struct-unwound {tod_read::return_TENTHS#0, tod_read::return_SEC#0, tod_read::return_MIN#0, tod_read::return_HOURS#0}
Eliminating unused constant cputs::c#0
Eliminating unused constant OFFSET_STRUCT_TIME_OF_DAY_TENTHS
Eliminating unused constant conio_scroll_enable
Successful SSA optimization PassNEliminateUnusedVars
Removing PHI-reference to removed block (cscroll::@2) in block gotoxy
Removing PHI-reference to removed block (cscroll::@2) in block gotoxy
Removing unused block cscroll::@2
Removing unused block cscroll::@8
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Adding number conversion cast (unumber) $19+1 in if(gotoxy::y#3<$19+1) goto gotoxy::@1
Adding number conversion cast (unumber) 1 in if(gotoxy::y#3<(unumber)$19+1) goto gotoxy::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $19+(unumber)1
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Identical Phi Values gotoxy::y#3 gotoxy::y#2
Identical Phi Values gotoxy::x#3 gotoxy::x#2
Successful SSA optimization Pass2IdenticalPhiElimination
if() condition always true - replacing block destination [22] if(gotoxy::y#2<$19+1) goto gotoxy::@1
if() condition always true - replacing block destination [24] if(gotoxy::x#2<$28) goto gotoxy::@2
Successful SSA optimization Pass2ConstantIfs
Eliminating unused constant gotoxy::x#1
Eliminating unused constant gotoxy::y#1
Successful SSA optimization PassNEliminateUnusedVars
Removing PHI-reference to removed block (gotoxy::@3) in block gotoxy::@1
Removing unused block gotoxy::@3
Removing PHI-reference to removed block (gotoxy::@4) in block gotoxy::@2
Removing unused block gotoxy::@4
Successful SSA optimization Pass2EliminateUnusedBlocks
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Identical Phi Values gotoxy::y#4 gotoxy::y#2
Identical Phi Values gotoxy::x#4 gotoxy::x#2
Successful SSA optimization Pass2IdenticalPhiElimination
Constant right-side identified [25] gotoxy::$7 = (word)gotoxy::y#2
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant gotoxy::$7 = (word)gotoxy::y#2
Successful SSA optimization Pass2ConstantIdentification
Simplifying constant evaluating to zero (word)gotoxy::y#2 in 
Successful SSA optimization PassNSimplifyConstantZero
Eliminating unused constant gotoxy::y#0
Eliminating unused constant gotoxy::x#0
Successful SSA optimization PassNEliminateUnusedVars
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Constant right-side identified [23] gotoxy::line_offset#0 = gotoxy::$7 * $28
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant gotoxy::line_offset#0 = gotoxy::$7*$28
Successful SSA optimization Pass2ConstantIdentification
Simplifying constant evaluating to zero gotoxy::$7*$28 in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero CONIO_SCREEN_TEXT in [24] gotoxy::$5 = CONIO_SCREEN_TEXT + gotoxy::line_offset#0
Simplifying expression containing zero CONIO_SCREEN_COLORS in [26] gotoxy::$6 = CONIO_SCREEN_COLORS + gotoxy::line_offset#0
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant gotoxy::$7
Eliminating unused constant gotoxy::line_offset#0
Successful SSA optimization PassNEliminateUnusedVars
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Constant gotoxy::$5 = CONIO_SCREEN_TEXT
Constant gotoxy::$6 = CONIO_SCREEN_COLORS
Successful SSA optimization Pass2ConstantIdentification
Inlining Noop Cast [1] memcpy::src#0 = (byte*)memcpy::source#2 keeping memcpy::source#2
Inlining Noop Cast [2] memcpy::dst#0 = (byte*)memcpy::destination#2 keeping memcpy::destination#2
Inlining Noop Cast [3] memcpy::$2 = (byte*)memcpy::source#2 keeping memcpy::source#2
Inlining Noop Cast [13] memset::$4 = (byte*)memset::str#3 keeping memset::str#3
Inlining Noop Cast [15] memset::dst#0 = (byte*)memset::str#3 keeping memset::str#3
Successful SSA optimization Pass2NopCastInlining
Inlining constant with var siblings memcpy::destination#0
Inlining constant with var siblings memcpy::source#0
Inlining constant with var siblings memcpy::num#0
Inlining constant with var siblings memcpy::destination#1
Inlining constant with var siblings memcpy::source#1
Inlining constant with var siblings memcpy::num#1
Inlining constant with var siblings memset::str#0
Inlining constant with var siblings memset::c#0
Inlining constant with var siblings memset::num#0
Inlining constant with var siblings memset::str#1
Inlining constant with var siblings memset::num#1
Inlining constant with var siblings memset::c#1
Inlining constant with var siblings cputs::s#1
Constant inlined memset::str#1 = (void*)COLORRAM+(word)$19*$28-$28
Constant inlined memset::str#0 = (void*)DEFAULT_SCREEN+(word)$19*$28-$28
Constant inlined CONIO_SCREEN_COLORS = COLORRAM
Constant inlined cputs::s#1 = tod_buffer
Constant inlined gotoxy::$6 = COLORRAM
Constant inlined conio_textcolor = LIGHT_BLUE
Constant inlined memcpy::destination#0 = (void*)DEFAULT_SCREEN
Constant inlined memset::num#1 = $28
Constant inlined gotoxy::$5 = DEFAULT_SCREEN
Constant inlined memcpy::destination#1 = (void*)COLORRAM
Constant inlined memset::num#0 = $28
Constant inlined memcpy::source#0 = (void*)DEFAULT_SCREEN+$28
Constant inlined memcpy::num#1 = (word)$19*$28-$28
Constant inlined memcpy::num#0 = (word)$19*$28-$28
Constant inlined memcpy::source#1 = (void*)COLORRAM+$28
Constant inlined CONIO_SCREEN_TEXT = DEFAULT_SCREEN
Constant inlined memset::c#0 = ' '
Constant inlined memset::c#1 = LIGHT_BLUE
Constant inlined tod_str::return#2 = tod_buffer
Constant inlined tod_str::return#0 = tod_buffer
Constant inlined CONIO_TEXTCOLOR_DEFAULT = LIGHT_BLUE
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(tod_buffer+1)
Consolidated array index constant in *(tod_buffer+3)
Consolidated array index constant in *(tod_buffer+4)
Consolidated array index constant in *(tod_buffer+6)
Consolidated array index constant in *(tod_buffer+7)
Consolidated array index constant in *(tod_buffer+9)
Consolidated array index constant in *(tod_buffer+$a)
Successful SSA optimization Pass2ConstantAdditionElimination
Identical Phi Values memcpy::num#2 (word)$19*$28-$28
Identical Phi Values memset::num#2 $28
Successful SSA optimization Pass2IdenticalPhiElimination
if() condition always false - eliminating [9] if($28<=0) goto memset::@1
Successful SSA optimization Pass2ConstantIfs
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of __start::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of gotoxy
Adding NOP phi() at start of gotoxy::@1
Adding NOP phi() at start of cputs
Adding NOP phi() at start of cputc::@3
Adding NOP phi() at start of cputc::@5
Adding NOP phi() at start of cputc::@1
Adding NOP phi() at start of cputc::@4
Adding NOP phi() at start of cputln::@1
Adding NOP phi() at start of cscroll::@1
Adding NOP phi() at start of cscroll::@3
Adding NOP phi() at start of cscroll::@4
Adding NOP phi() at start of cscroll::@5
Adding NOP phi() at start of cscroll::@6
Adding NOP phi() at start of memcpy::@3
Adding NOP phi() at start of memset::@1
CALL GRAPH
Calls in [__start] to main:6 
Calls in [main] to tod_init:13 gotoxy:17 tod_read:19 tod_str:28 cputs:30 
Calls in [cputs] to cputc:83 
Calls in [cputc] to cputln:91 cputln:95 
Calls in [cputln] to cscroll:101 
Calls in [cscroll] to memcpy:107 memcpy:109 memset:111 memset:113 

Created 8 initial phi equivalence classes
Coalesced [84] cputs::s#6 = cputs::s#0
Coalesced [129] memcpy::src#5 = memcpy::src#1
Coalesced [130] memcpy::dst#5 = memcpy::dst#1
Coalesced [140] memset::dst#5 = memset::dst#1
Coalesced down to 8 phi equivalence classes
Culled Empty Block label __start::@2
Culled Empty Block label main::@3
Culled Empty Block label main::@1
Culled Empty Block label main::@7
Culled Empty Block label gotoxy::@1
Culled Empty Block label cputs::@3
Culled Empty Block label cputc::@5
Culled Empty Block label cputc::@4
Culled Empty Block label cputln::@1
Culled Empty Block label cscroll::@1
Culled Empty Block label memcpy::@3
Culled Empty Block label memset::@1
Renumbering block memset::@2 to memset::@1
Renumbering block memset::@3 to memset::@2
Renumbering block memset::@4 to memset::@3
Renumbering block gotoxy::@2 to gotoxy::@1
Renumbering block cscroll::@3 to cscroll::@1
Renumbering block cscroll::@4 to cscroll::@2
Renumbering block cscroll::@5 to cscroll::@3
Renumbering block cscroll::@6 to cscroll::@4
Renumbering block cscroll::@7 to cscroll::@5
Renumbering block main::@2 to main::@1
Renumbering block main::@4 to main::@2
Renumbering block main::@5 to main::@3
Renumbering block main::@6 to main::@4
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of gotoxy
Adding NOP phi() at start of cputs
Adding NOP phi() at start of cputc::@3
Adding NOP phi() at start of cputc::@1
Adding NOP phi() at start of cscroll::@1
Adding NOP phi() at start of cscroll::@2
Adding NOP phi() at start of cscroll::@3
Adding NOP phi() at start of cscroll::@4

FINAL CONTROL FLOW GRAPH

void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] conio_cursor_x = 0
  [2] conio_cursor_y = 0
  [3] conio_line_text = DEFAULT_SCREEN
  [4] conio_line_color = COLORRAM
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [5] phi()
  [6] call main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [7] return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  [8] tod_init::tod_TENTHS#0 = *((byte*)&TOD_ZERO)
  [9] tod_init::tod_SEC#0 = *((byte*)&TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_SEC)
  [10] tod_init::tod_MIN#0 = *((byte*)&TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_MIN)
  [11] tod_init::tod_HOURS#0 = *((byte*)&TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_HOURS)
  [12] call tod_init 
  to:main::@1
main::@1: scope:[main]  from main main::@4
  [13] phi()
  [14] call gotoxy 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [15] phi()
  [16] call tod_read 
  [17] tod_read::return_TENTHS#2 = tod_read::return_TENTHS#0
  [18] tod_read::return_SEC#2 = tod_read::return_SEC#0
  [19] tod_read::return_MIN#2 = tod_read::return_MIN#0
  [20] tod_read::return_HOURS#2 = tod_read::return_HOURS#0
  to:main::@3
main::@3: scope:[main]  from main::@2
  [21] tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2
  [22] tod_str::tod_SEC#0 = tod_read::return_SEC#2
  [23] tod_str::tod_MIN#0 = tod_read::return_MIN#2
  [24] tod_str::tod_HOURS#0 = tod_read::return_HOURS#2
  [25] call tod_str 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [26] phi()
  [27] call cputs 
  to:main::@1

void tod_init(byte tod_init::tod_TENTHS , byte tod_init::tod_SEC , byte tod_init::tod_MIN , byte tod_init::tod_HOURS)
tod_init: scope:[tod_init]  from main
  [28] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) | $80
  [29] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) & $7f
  [30] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS) = tod_init::tod_HOURS#0
  [31] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_MIN) = tod_init::tod_MIN#0
  [32] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_SEC) = tod_init::tod_SEC#0
  [33] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_10THS) = tod_init::tod_TENTHS#0
  to:tod_init::@return
tod_init::@return: scope:[tod_init]  from tod_init
  [34] return 
  to:@return

void gotoxy(byte gotoxy::x , byte gotoxy::y)
gotoxy: scope:[gotoxy]  from main::@1
  [35] phi()
  to:gotoxy::@1
gotoxy::@1: scope:[gotoxy]  from gotoxy
  [36] conio_cursor_x = gotoxy::x#2
  [37] conio_cursor_y = gotoxy::y#2
  [38] conio_line_text = DEFAULT_SCREEN
  [39] conio_line_color = COLORRAM
  to:gotoxy::@return
gotoxy::@return: scope:[gotoxy]  from gotoxy::@1
  [40] return 
  to:@return

struct TIME_OF_DAY tod_read()
tod_read: scope:[tod_read]  from main::@2
  [41] tod_read::return_HOURS#0 = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS)
  [42] tod_read::return_MIN#0 = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_MIN)
  [43] tod_read::return_SEC#0 = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_SEC)
  [44] tod_read::return_TENTHS#0 = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_10THS)
  to:tod_read::@return
tod_read::@return: scope:[tod_read]  from tod_read
  [45] return 
  to:@return

byte* tod_str(byte tod_str::tod_TENTHS , byte tod_str::tod_SEC , byte tod_str::tod_MIN , byte tod_str::tod_HOURS)
tod_str: scope:[tod_str]  from main::@3
  [46] tod_str::$0 = tod_str::tod_HOURS#0 >> 4
  [47] tod_str::$1 = '0' + tod_str::$0
  [48] *tod_buffer = tod_str::$1
  [49] tod_str::$2 = tod_str::tod_HOURS#0 & $f
  [50] tod_str::$3 = '0' + tod_str::$2
  [51] *(tod_buffer+1) = tod_str::$3
  [52] tod_str::$4 = tod_str::tod_MIN#0 >> 4
  [53] tod_str::$5 = '0' + tod_str::$4
  [54] *(tod_buffer+3) = tod_str::$5
  [55] tod_str::$6 = tod_str::tod_MIN#0 & $f
  [56] tod_str::$7 = '0' + tod_str::$6
  [57] *(tod_buffer+4) = tod_str::$7
  [58] tod_str::$8 = tod_str::tod_SEC#0 >> 4
  [59] tod_str::$9 = '0' + tod_str::$8
  [60] *(tod_buffer+6) = tod_str::$9
  [61] tod_str::$10 = tod_str::tod_SEC#0 & $f
  [62] tod_str::$11 = '0' + tod_str::$10
  [63] *(tod_buffer+7) = tod_str::$11
  [64] tod_str::$12 = tod_str::tod_TENTHS#0 >> 4
  [65] tod_str::$13 = '0' + tod_str::$12
  [66] *(tod_buffer+9) = tod_str::$13
  [67] tod_str::$14 = tod_str::tod_TENTHS#0 & $f
  [68] tod_str::$15 = '0' + tod_str::$14
  [69] *(tod_buffer+$a) = tod_str::$15
  to:tod_str::@return
tod_str::@return: scope:[tod_str]  from tod_str
  [70] return 
  to:@return

void cputs(to_nomodify byte* cputs::s)
cputs: scope:[cputs]  from main::@4
  [71] phi()
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@2
  [72] cputs::s#2 = phi( cputs/tod_buffer, cputs::@2/cputs::s#0 )
  [73] cputs::c#1 = *cputs::s#2
  [74] cputs::s#0 = ++ cputs::s#2
  [75] if(0!=cputs::c#1) goto cputs::@2
  to:cputs::@return
cputs::@return: scope:[cputs]  from cputs::@1
  [76] return 
  to:@return
cputs::@2: scope:[cputs]  from cputs::@1
  [77] cputc::c#0 = cputs::c#1
  [78] call cputc 
  to:cputs::@1

void cputc(byte cputc::c)
cputc: scope:[cputc]  from cputs::@2
  [79] if(cputc::c#0=='
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [80] conio_line_text[conio_cursor_x] = cputc::c#0
  [81] conio_line_color[conio_cursor_x] = LIGHT_BLUE
  [82] conio_cursor_x = ++ conio_cursor_x
  [83] if(conio_cursor_x!=$28) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  [84] phi()
  [85] call cputln 
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@3
  [86] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [87] phi()
  [88] call cputln 
  to:cputc::@return

void cputln()
cputln: scope:[cputln]  from cputc::@1 cputc::@3
  [89] conio_line_text = conio_line_text + $28
  [90] conio_line_color = conio_line_color + $28
  [91] conio_cursor_x = 0
  [92] conio_cursor_y = ++ conio_cursor_y
  [93] call cscroll 
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [94] return 
  to:@return

void cscroll()
cscroll: scope:[cscroll]  from cputln
  [95] if(conio_cursor_y!=$19) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  [96] phi()
  [97] call memcpy 
  to:cscroll::@2
cscroll::@2: scope:[cscroll]  from cscroll::@1
  [98] phi()
  [99] call memcpy 
  to:cscroll::@3
cscroll::@3: scope:[cscroll]  from cscroll::@2
  [100] phi()
  [101] call memset 
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  [102] phi()
  [103] call memset 
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  [104] conio_line_text = conio_line_text - $28
  [105] conio_line_color = conio_line_color - $28
  [106] conio_cursor_y = -- conio_cursor_y
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@5
  [107] return 
  to:@return

void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@1 cscroll::@2
  [108] memcpy::destination#2 = phi( cscroll::@1/(void*)DEFAULT_SCREEN, cscroll::@2/(void*)COLORRAM )
  [108] memcpy::source#2 = phi( cscroll::@1/(void*)DEFAULT_SCREEN+$28, cscroll::@2/(void*)COLORRAM+$28 )
  [109] memcpy::src_end#0 = (byte*)memcpy::source#2 + (word)$19*$28-$28
  [110] memcpy::src#4 = (byte*)memcpy::source#2
  [111] memcpy::dst#4 = (byte*)memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [112] memcpy::dst#2 = phi( memcpy/memcpy::dst#4, memcpy::@2/memcpy::dst#1 )
  [112] memcpy::src#2 = phi( memcpy/memcpy::src#4, memcpy::@2/memcpy::src#1 )
  [113] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [114] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [115] *memcpy::dst#2 = *memcpy::src#2
  [116] memcpy::dst#1 = ++ memcpy::dst#2
  [117] memcpy::src#1 = ++ memcpy::src#2
  to:memcpy::@1

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from cscroll::@3 cscroll::@4
  [118] memset::c#4 = phi( cscroll::@3/' ', cscroll::@4/LIGHT_BLUE )
  [118] memset::str#3 = phi( cscroll::@3/(void*)DEFAULT_SCREEN+(word)$19*$28-$28, cscroll::@4/(void*)COLORRAM+(word)$19*$28-$28 )
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [119] memset::end#0 = (byte*)memset::str#3 + $28
  [120] memset::dst#4 = (byte*)memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [121] memset::dst#2 = phi( memset::@1/memset::dst#4, memset::@3/memset::dst#1 )
  [122] if(memset::dst#2!=memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [123] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [124] *memset::dst#2 = memset::c#4
  [125] memset::dst#1 = ++ memset::dst#2
  to:memset::@2


VARIABLE REGISTER WEIGHTS
struct TIME_OF_DAY TOD_ZERO loadstore = { TENTHS: 0, SEC: 0, MIN: 0, HOURS: 0 }
void __start()
byte conio_cursor_x loadstore 405432.6756756756
byte conio_cursor_y loadstore 6037754.867924528
byte* conio_line_color loadstore 4333353.098039215
byte* conio_line_text loadstore 4250019.384615384
void cputc(byte cputc::c)
byte cputc::c
byte cputc::c#0 1050001.5
void cputln()
void cputs(to_nomodify byte* cputs::s)
byte cputs::c
byte cputs::c#1 100001.0
to_nomodify byte* cputs::s
to_nomodify byte* cputs::s#0 50000.5
to_nomodify byte* cputs::s#2 150001.5
void cscroll()
void gotoxy(byte gotoxy::x , byte gotoxy::y)
word gotoxy::line_offset
byte gotoxy::x
byte gotoxy::y
void main()
void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
void* memcpy::destination
void* memcpy::destination#2
byte* memcpy::dst
byte* memcpy::dst#1 1.000000000001E12
byte* memcpy::dst#2 1.0003333333346667E12
byte* memcpy::dst#4 2.000000002E9
word memcpy::num
void* memcpy::return
void* memcpy::source
void* memcpy::source#2
byte* memcpy::src
byte* memcpy::src#1 2.000000000002E12
byte* memcpy::src#2 1.00025000000125E12
byte* memcpy::src#4 1.000000001E9
byte* memcpy::src_end
byte* memcpy::src_end#0 1.2512500000025E11
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
byte memset::c#4 1.428571428572857E11
byte* memset::dst
byte* memset::dst#1 2.000000000002E12
byte* memset::dst#2 1.3336666666683335E12
byte* memset::dst#4 2.000000002E9
byte* memset::end
byte* memset::end#0 1.668333333336667E11
word memset::num
void* memset::return
void* memset::str
void* memset::str#3
void tod_init(byte tod_init::tod_TENTHS , byte tod_init::tod_SEC , byte tod_init::tod_MIN , byte tod_init::tod_HOURS)
struct TIME_OF_DAY tod_init::tod
byte tod_init::tod_HOURS
byte tod_init::tod_HOURS#0 37.33333333333333
byte tod_init::tod_MIN
byte tod_init::tod_MIN#0 22.4
byte tod_init::tod_SEC
byte tod_init::tod_SEC#0 16.0
byte tod_init::tod_TENTHS
byte tod_init::tod_TENTHS#0 12.444444444444443
struct TIME_OF_DAY tod_read()
byte tod_read::hours
byte tod_read::mins
struct TIME_OF_DAY tod_read::return
byte tod_read::return_HOURS
byte tod_read::return_HOURS#0 122.44444444444446
byte tod_read::return_HOURS#2 50.5
byte tod_read::return_MIN
byte tod_read::return_MIN#0 157.42857142857142
byte tod_read::return_MIN#2 50.5
byte tod_read::return_SEC
byte tod_read::return_SEC#0 220.39999999999998
byte tod_read::return_SEC#2 50.5
byte tod_read::return_TENTHS
byte tod_read::return_TENTHS#0 367.33333333333337
byte tod_read::return_TENTHS#2 50.5
byte tod_read::secs
byte tod_read::tenths
byte tod_read::tod_HOURS
byte tod_read::tod_MIN
byte tod_read::tod_SEC
byte tod_read::tod_TENTHS
byte* tod_str(byte tod_str::tod_TENTHS , byte tod_str::tod_SEC , byte tod_str::tod_MIN , byte tod_str::tod_HOURS)
byte~ tod_str::$0 2002.0
byte~ tod_str::$1 2002.0
byte~ tod_str::$10 2002.0
byte~ tod_str::$11 2002.0
byte~ tod_str::$12 2002.0
byte~ tod_str::$13 2002.0
byte~ tod_str::$14 2002.0
byte~ tod_str::$15 2002.0
byte~ tod_str::$2 2002.0
byte~ tod_str::$3 2002.0
byte~ tod_str::$4 2002.0
byte~ tod_str::$5 2002.0
byte~ tod_str::$6 2002.0
byte~ tod_str::$7 2002.0
byte~ tod_str::$8 2002.0
byte~ tod_str::$9 2002.0
byte* tod_str::return
struct TIME_OF_DAY tod_str::tod
byte tod_str::tod_HOURS
byte tod_str::tod_HOURS#0 525.75
byte tod_str::tod_MIN
byte tod_str::tod_MIN#0 191.1818181818182
byte tod_str::tod_SEC
byte tod_str::tod_SEC#0 116.83333333333334
byte tod_str::tod_TENTHS
byte tod_str::tod_TENTHS#0 84.12

Initial phi equivalence classes
[ cputs::s#2 cputs::s#0 ]
[ memcpy::source#2 ]
[ memcpy::destination#2 ]
[ memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
[ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
[ memset::str#3 ]
[ memset::c#4 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
Added variable conio_cursor_x to live range equivalence class [ conio_cursor_x ]
Added variable conio_cursor_y to live range equivalence class [ conio_cursor_y ]
Added variable conio_line_text to live range equivalence class [ conio_line_text ]
Added variable conio_line_color to live range equivalence class [ conio_line_color ]
Added variable tod_init::tod_TENTHS#0 to live range equivalence class [ tod_init::tod_TENTHS#0 ]
Added variable tod_init::tod_SEC#0 to live range equivalence class [ tod_init::tod_SEC#0 ]
Added variable tod_init::tod_MIN#0 to live range equivalence class [ tod_init::tod_MIN#0 ]
Added variable tod_init::tod_HOURS#0 to live range equivalence class [ tod_init::tod_HOURS#0 ]
Added variable tod_read::return_TENTHS#2 to live range equivalence class [ tod_read::return_TENTHS#2 ]
Added variable tod_read::return_SEC#2 to live range equivalence class [ tod_read::return_SEC#2 ]
Added variable tod_read::return_MIN#2 to live range equivalence class [ tod_read::return_MIN#2 ]
Added variable tod_read::return_HOURS#2 to live range equivalence class [ tod_read::return_HOURS#2 ]
Added variable tod_str::tod_TENTHS#0 to live range equivalence class [ tod_str::tod_TENTHS#0 ]
Added variable tod_str::tod_SEC#0 to live range equivalence class [ tod_str::tod_SEC#0 ]
Added variable tod_str::tod_MIN#0 to live range equivalence class [ tod_str::tod_MIN#0 ]
Added variable tod_str::tod_HOURS#0 to live range equivalence class [ tod_str::tod_HOURS#0 ]
Added variable tod_read::return_HOURS#0 to live range equivalence class [ tod_read::return_HOURS#0 ]
Added variable tod_read::return_MIN#0 to live range equivalence class [ tod_read::return_MIN#0 ]
Added variable tod_read::return_SEC#0 to live range equivalence class [ tod_read::return_SEC#0 ]
Added variable tod_read::return_TENTHS#0 to live range equivalence class [ tod_read::return_TENTHS#0 ]
Added variable tod_str::$0 to live range equivalence class [ tod_str::$0 ]
Added variable tod_str::$1 to live range equivalence class [ tod_str::$1 ]
Added variable tod_str::$2 to live range equivalence class [ tod_str::$2 ]
Added variable tod_str::$3 to live range equivalence class [ tod_str::$3 ]
Added variable tod_str::$4 to live range equivalence class [ tod_str::$4 ]
Added variable tod_str::$5 to live range equivalence class [ tod_str::$5 ]
Added variable tod_str::$6 to live range equivalence class [ tod_str::$6 ]
Added variable tod_str::$7 to live range equivalence class [ tod_str::$7 ]
Added variable tod_str::$8 to live range equivalence class [ tod_str::$8 ]
Added variable tod_str::$9 to live range equivalence class [ tod_str::$9 ]
Added variable tod_str::$10 to live range equivalence class [ tod_str::$10 ]
Added variable tod_str::$11 to live range equivalence class [ tod_str::$11 ]
Added variable tod_str::$12 to live range equivalence class [ tod_str::$12 ]
Added variable tod_str::$13 to live range equivalence class [ tod_str::$13 ]
Added variable tod_str::$14 to live range equivalence class [ tod_str::$14 ]
Added variable tod_str::$15 to live range equivalence class [ tod_str::$15 ]
Added variable cputs::c#1 to live range equivalence class [ cputs::c#1 ]
Added variable cputc::c#0 to live range equivalence class [ cputc::c#0 ]
Added variable memcpy::src_end#0 to live range equivalence class [ memcpy::src_end#0 ]
Added variable memset::end#0 to live range equivalence class [ memset::end#0 ]
Added variable TOD_ZERO to live range equivalence class [ TOD_ZERO ]
Complete equivalence classes
[ cputs::s#2 cputs::s#0 ]
[ memcpy::source#2 ]
[ memcpy::destination#2 ]
[ memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
[ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
[ memset::str#3 ]
[ memset::c#4 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
[ conio_cursor_x ]
[ conio_cursor_y ]
[ conio_line_text ]
[ conio_line_color ]
[ tod_init::tod_TENTHS#0 ]
[ tod_init::tod_SEC#0 ]
[ tod_init::tod_MIN#0 ]
[ tod_init::tod_HOURS#0 ]
[ tod_read::return_TENTHS#2 ]
[ tod_read::return_SEC#2 ]
[ tod_read::return_MIN#2 ]
[ tod_read::return_HOURS#2 ]
[ tod_str::tod_TENTHS#0 ]
[ tod_str::tod_SEC#0 ]
[ tod_str::tod_MIN#0 ]
[ tod_str::tod_HOURS#0 ]
[ tod_read::return_HOURS#0 ]
[ tod_read::return_MIN#0 ]
[ tod_read::return_SEC#0 ]
[ tod_read::return_TENTHS#0 ]
[ tod_str::$0 ]
[ tod_str::$1 ]
[ tod_str::$2 ]
[ tod_str::$3 ]
[ tod_str::$4 ]
[ tod_str::$5 ]
[ tod_str::$6 ]
[ tod_str::$7 ]
[ tod_str::$8 ]
[ tod_str::$9 ]
[ tod_str::$10 ]
[ tod_str::$11 ]
[ tod_str::$12 ]
[ tod_str::$13 ]
[ tod_str::$14 ]
[ tod_str::$15 ]
[ cputs::c#1 ]
[ cputc::c#0 ]
[ memcpy::src_end#0 ]
[ memset::end#0 ]
[ TOD_ZERO ]
Allocated zp[2]:2 [ cputs::s#2 cputs::s#0 ]
Allocated zp[2]:4 [ memcpy::source#2 ]
Allocated zp[2]:6 [ memcpy::destination#2 ]
Allocated zp[2]:8 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
Allocated zp[2]:10 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
Allocated zp[2]:12 [ memset::str#3 ]
Allocated zp[1]:14 [ memset::c#4 ]
Allocated zp[2]:15 [ memset::dst#2 memset::dst#4 memset::dst#1 ]
Allocated zp[1]:17 [ conio_cursor_x ]
Allocated zp[1]:18 [ conio_cursor_y ]
Allocated zp[2]:19 [ conio_line_text ]
Allocated zp[2]:21 [ conio_line_color ]
Allocated zp[1]:23 [ tod_init::tod_TENTHS#0 ]
Allocated zp[1]:24 [ tod_init::tod_SEC#0 ]
Allocated zp[1]:25 [ tod_init::tod_MIN#0 ]
Allocated zp[1]:26 [ tod_init::tod_HOURS#0 ]
Allocated zp[1]:27 [ tod_read::return_TENTHS#2 ]
Allocated zp[1]:28 [ tod_read::return_SEC#2 ]
Allocated zp[1]:29 [ tod_read::return_MIN#2 ]
Allocated zp[1]:30 [ tod_read::return_HOURS#2 ]
Allocated zp[1]:31 [ tod_str::tod_TENTHS#0 ]
Allocated zp[1]:32 [ tod_str::tod_SEC#0 ]
Allocated zp[1]:33 [ tod_str::tod_MIN#0 ]
Allocated zp[1]:34 [ tod_str::tod_HOURS#0 ]
Allocated zp[1]:35 [ tod_read::return_HOURS#0 ]
Allocated zp[1]:36 [ tod_read::return_MIN#0 ]
Allocated zp[1]:37 [ tod_read::return_SEC#0 ]
Allocated zp[1]:38 [ tod_read::return_TENTHS#0 ]
Allocated zp[1]:39 [ tod_str::$0 ]
Allocated zp[1]:40 [ tod_str::$1 ]
Allocated zp[1]:41 [ tod_str::$2 ]
Allocated zp[1]:42 [ tod_str::$3 ]
Allocated zp[1]:43 [ tod_str::$4 ]
Allocated zp[1]:44 [ tod_str::$5 ]
Allocated zp[1]:45 [ tod_str::$6 ]
Allocated zp[1]:46 [ tod_str::$7 ]
Allocated zp[1]:47 [ tod_str::$8 ]
Allocated zp[1]:48 [ tod_str::$9 ]
Allocated zp[1]:49 [ tod_str::$10 ]
Allocated zp[1]:50 [ tod_str::$11 ]
Allocated zp[1]:51 [ tod_str::$12 ]
Allocated zp[1]:52 [ tod_str::$13 ]
Allocated zp[1]:53 [ tod_str::$14 ]
Allocated zp[1]:54 [ tod_str::$15 ]
Allocated zp[1]:55 [ cputs::c#1 ]
Allocated zp[1]:56 [ cputc::c#0 ]
Allocated zp[2]:57 [ memcpy::src_end#0 ]
Allocated zp[2]:59 [ memset::end#0 ]
Allocated mem[4] [ TOD_ZERO ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] conio_cursor_x = 0 [ TOD_ZERO ] (  [ TOD_ZERO ] { }  ) always clobbers reg byte a 
Statement [2] conio_cursor_y = 0 [ TOD_ZERO ] (  [ TOD_ZERO ] { }  ) always clobbers reg byte a 
Statement [3] conio_line_text = DEFAULT_SCREEN [ TOD_ZERO ] (  [ TOD_ZERO ] { }  ) always clobbers reg byte a 
Statement [4] conio_line_color = COLORRAM [ TOD_ZERO ] (  [ TOD_ZERO ] { }  ) always clobbers reg byte a 
Statement [28] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) | $80 [ tod_init::tod_TENTHS#0 tod_init::tod_SEC#0 tod_init::tod_MIN#0 tod_init::tod_HOURS#0 ] ( main:6::tod_init:12 [ tod_init::tod_TENTHS#0 tod_init::tod_SEC#0 tod_init::tod_MIN#0 tod_init::tod_HOURS#0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:23 [ tod_init::tod_TENTHS#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:24 [ tod_init::tod_SEC#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:25 [ tod_init::tod_MIN#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:26 [ tod_init::tod_HOURS#0 ]
Statement [29] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) & $7f [ tod_init::tod_TENTHS#0 tod_init::tod_SEC#0 tod_init::tod_MIN#0 tod_init::tod_HOURS#0 ] ( main:6::tod_init:12 [ tod_init::tod_TENTHS#0 tod_init::tod_SEC#0 tod_init::tod_MIN#0 tod_init::tod_HOURS#0 ] { }  ) always clobbers reg byte a 
Statement [36] conio_cursor_x = gotoxy::x#2 [ conio_cursor_x ] ( main:6::gotoxy:14 [ conio_cursor_x ] { }  ) always clobbers reg byte a 
Statement [37] conio_cursor_y = gotoxy::y#2 [ conio_cursor_x conio_cursor_y ] ( main:6::gotoxy:14 [ conio_cursor_x conio_cursor_y ] { }  ) always clobbers reg byte a 
Statement [38] conio_line_text = DEFAULT_SCREEN [ conio_cursor_x conio_cursor_y conio_line_text ] ( main:6::gotoxy:14 [ conio_cursor_x conio_cursor_y conio_line_text ] { }  ) always clobbers reg byte a 
Statement [39] conio_line_color = COLORRAM [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::gotoxy:14 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { }  ) always clobbers reg byte a 
Statement [46] tod_str::$0 = tod_str::tod_HOURS#0 >> 4 [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::tod_HOURS#0 tod_str::$0 ] ( main:6::tod_str:25 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::tod_HOURS#0 tod_str::$0 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:31 [ tod_str::tod_TENTHS#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:32 [ tod_str::tod_SEC#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:33 [ tod_str::tod_MIN#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:34 [ tod_str::tod_HOURS#0 ]
Statement [49] tod_str::$2 = tod_str::tod_HOURS#0 & $f [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::$2 ] ( main:6::tod_str:25 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::$2 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [52] tod_str::$4 = tod_str::tod_MIN#0 >> 4 [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::$4 ] ( main:6::tod_str:25 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::$4 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [55] tod_str::$6 = tod_str::tod_MIN#0 & $f [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::$6 ] ( main:6::tod_str:25 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::$6 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [58] tod_str::$8 = tod_str::tod_SEC#0 >> 4 [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::$8 ] ( main:6::tod_str:25 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::$8 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [61] tod_str::$10 = tod_str::tod_SEC#0 & $f [ tod_str::tod_TENTHS#0 tod_str::$10 ] ( main:6::tod_str:25 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color tod_str::tod_TENTHS#0 tod_str::$10 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [64] tod_str::$12 = tod_str::tod_TENTHS#0 >> 4 [ tod_str::tod_TENTHS#0 tod_str::$12 ] ( main:6::tod_str:25 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color tod_str::tod_TENTHS#0 tod_str::$12 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [67] tod_str::$14 = tod_str::tod_TENTHS#0 & $f [ tod_str::$14 ] ( main:6::tod_str:25 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color tod_str::$14 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [73] cputs::c#1 = *cputs::s#2 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#2 cputs::c#1 ] ( main:6::cputs:27 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#2 cputs::c#1 ] { }  ) always clobbers reg byte a reg byte y 
Statement [80] conio_line_text[conio_cursor_x] = cputc::c#0 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:27::cputc:78 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte y 
Statement [81] conio_line_color[conio_cursor_x] = LIGHT_BLUE [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:27::cputc:78 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a reg byte y 
Statement [83] if(conio_cursor_x!=$28) goto cputc::@return [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:27::cputc:78 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [89] conio_line_text = conio_line_text + $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:27::cputc:78::cputln:85 [ cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:88 [ cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [90] conio_line_color = conio_line_color + $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:27::cputc:78::cputln:85 [ cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:88 [ cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [91] conio_cursor_x = 0 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:27::cputc:78::cputln:85 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:88 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [95] if(conio_cursor_y!=$19) goto cscroll::@return [ conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:27::cputc:78::cputln:85::cscroll:93 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:88::cscroll:93 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [104] conio_line_text = conio_line_text - $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:27::cputc:78::cputln:85::cscroll:93 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:88::cscroll:93 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [105] conio_line_color = conio_line_color - $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:27::cputc:78::cputln:85::cscroll:93 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:88::cscroll:93 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [109] memcpy::src_end#0 = (byte*)memcpy::source#2 + (word)$19*$28-$28 [ memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] ( main:6::cputs:27::cputc:78::cputln:85::cscroll:93::memcpy:97 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:88::cscroll:93::memcpy:97 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:85::cscroll:93::memcpy:99 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:88::cscroll:93::memcpy:99 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [110] memcpy::src#4 = (byte*)memcpy::source#2 [ memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] ( main:6::cputs:27::cputc:78::cputln:85::cscroll:93::memcpy:97 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:88::cscroll:93::memcpy:97 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:85::cscroll:93::memcpy:99 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:88::cscroll:93::memcpy:99 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [111] memcpy::dst#4 = (byte*)memcpy::destination#2 [ memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] ( main:6::cputs:27::cputc:78::cputln:85::cscroll:93::memcpy:97 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:88::cscroll:93::memcpy:97 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:85::cscroll:93::memcpy:99 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:88::cscroll:93::memcpy:99 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [113] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2 [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( main:6::cputs:27::cputc:78::cputln:85::cscroll:93::memcpy:97 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:88::cscroll:93::memcpy:97 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:85::cscroll:93::memcpy:99 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:88::cscroll:93::memcpy:99 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [115] *memcpy::dst#2 = *memcpy::src#2 [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( main:6::cputs:27::cputc:78::cputln:85::cscroll:93::memcpy:97 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:88::cscroll:93::memcpy:97 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:85::cscroll:93::memcpy:99 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:88::cscroll:93::memcpy:99 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a reg byte y 
Statement [119] memset::end#0 = (byte*)memset::str#3 + $28 [ memset::str#3 memset::c#4 memset::end#0 ] ( main:6::cputs:27::cputc:78::cputln:85::cscroll:93::memset:101 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:88::cscroll:93::memset:101 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:85::cscroll:93::memset:103 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:88::cscroll:93::memset:103 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:14 [ memset::c#4 ]
Statement [120] memset::dst#4 = (byte*)memset::str#3 [ memset::c#4 memset::end#0 memset::dst#4 ] ( main:6::cputs:27::cputc:78::cputln:85::cscroll:93::memset:101 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:88::cscroll:93::memset:101 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:85::cscroll:93::memset:103 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:88::cscroll:93::memset:103 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [122] if(memset::dst#2!=memset::end#0) goto memset::@3 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:6::cputs:27::cputc:78::cputln:85::cscroll:93::memset:101 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:88::cscroll:93::memset:101 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:85::cscroll:93::memset:103 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:88::cscroll:93::memset:103 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [124] *memset::dst#2 = memset::c#4 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:6::cputs:27::cputc:78::cputln:85::cscroll:93::memset:101 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:88::cscroll:93::memset:101 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:85::cscroll:93::memset:103 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:88::cscroll:93::memset:103 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:14 [ memset::c#4 ]
Statement [1] conio_cursor_x = 0 [ TOD_ZERO ] (  [ TOD_ZERO ] { }  ) always clobbers reg byte a 
Statement [2] conio_cursor_y = 0 [ TOD_ZERO ] (  [ TOD_ZERO ] { }  ) always clobbers reg byte a 
Statement [3] conio_line_text = DEFAULT_SCREEN [ TOD_ZERO ] (  [ TOD_ZERO ] { }  ) always clobbers reg byte a 
Statement [4] conio_line_color = COLORRAM [ TOD_ZERO ] (  [ TOD_ZERO ] { }  ) always clobbers reg byte a 
Statement [28] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) | $80 [ tod_init::tod_TENTHS#0 tod_init::tod_SEC#0 tod_init::tod_MIN#0 tod_init::tod_HOURS#0 ] ( main:6::tod_init:12 [ tod_init::tod_TENTHS#0 tod_init::tod_SEC#0 tod_init::tod_MIN#0 tod_init::tod_HOURS#0 ] { }  ) always clobbers reg byte a 
Statement [29] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) & $7f [ tod_init::tod_TENTHS#0 tod_init::tod_SEC#0 tod_init::tod_MIN#0 tod_init::tod_HOURS#0 ] ( main:6::tod_init:12 [ tod_init::tod_TENTHS#0 tod_init::tod_SEC#0 tod_init::tod_MIN#0 tod_init::tod_HOURS#0 ] { }  ) always clobbers reg byte a 
Statement [36] conio_cursor_x = gotoxy::x#2 [ conio_cursor_x ] ( main:6::gotoxy:14 [ conio_cursor_x ] { }  ) always clobbers reg byte a 
Statement [37] conio_cursor_y = gotoxy::y#2 [ conio_cursor_x conio_cursor_y ] ( main:6::gotoxy:14 [ conio_cursor_x conio_cursor_y ] { }  ) always clobbers reg byte a 
Statement [38] conio_line_text = DEFAULT_SCREEN [ conio_cursor_x conio_cursor_y conio_line_text ] ( main:6::gotoxy:14 [ conio_cursor_x conio_cursor_y conio_line_text ] { }  ) always clobbers reg byte a 
Statement [39] conio_line_color = COLORRAM [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::gotoxy:14 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { }  ) always clobbers reg byte a 
Statement [46] tod_str::$0 = tod_str::tod_HOURS#0 >> 4 [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::tod_HOURS#0 tod_str::$0 ] ( main:6::tod_str:25 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::tod_HOURS#0 tod_str::$0 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [49] tod_str::$2 = tod_str::tod_HOURS#0 & $f [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::$2 ] ( main:6::tod_str:25 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::$2 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [52] tod_str::$4 = tod_str::tod_MIN#0 >> 4 [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::$4 ] ( main:6::tod_str:25 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::$4 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [55] tod_str::$6 = tod_str::tod_MIN#0 & $f [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::$6 ] ( main:6::tod_str:25 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::$6 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [58] tod_str::$8 = tod_str::tod_SEC#0 >> 4 [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::$8 ] ( main:6::tod_str:25 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::$8 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [61] tod_str::$10 = tod_str::tod_SEC#0 & $f [ tod_str::tod_TENTHS#0 tod_str::$10 ] ( main:6::tod_str:25 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color tod_str::tod_TENTHS#0 tod_str::$10 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [64] tod_str::$12 = tod_str::tod_TENTHS#0 >> 4 [ tod_str::tod_TENTHS#0 tod_str::$12 ] ( main:6::tod_str:25 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color tod_str::tod_TENTHS#0 tod_str::$12 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [67] tod_str::$14 = tod_str::tod_TENTHS#0 & $f [ tod_str::$14 ] ( main:6::tod_str:25 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color tod_str::$14 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [73] cputs::c#1 = *cputs::s#2 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#2 cputs::c#1 ] ( main:6::cputs:27 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#2 cputs::c#1 ] { }  ) always clobbers reg byte a reg byte y 
Statement [80] conio_line_text[conio_cursor_x] = cputc::c#0 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:27::cputc:78 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte y 
Statement [81] conio_line_color[conio_cursor_x] = LIGHT_BLUE [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:27::cputc:78 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a reg byte y 
Statement [83] if(conio_cursor_x!=$28) goto cputc::@return [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:27::cputc:78 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [89] conio_line_text = conio_line_text + $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:27::cputc:78::cputln:85 [ cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:88 [ cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [90] conio_line_color = conio_line_color + $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:27::cputc:78::cputln:85 [ cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:88 [ cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [91] conio_cursor_x = 0 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:27::cputc:78::cputln:85 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:88 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [95] if(conio_cursor_y!=$19) goto cscroll::@return [ conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:27::cputc:78::cputln:85::cscroll:93 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:88::cscroll:93 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [104] conio_line_text = conio_line_text - $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:27::cputc:78::cputln:85::cscroll:93 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:88::cscroll:93 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [105] conio_line_color = conio_line_color - $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:27::cputc:78::cputln:85::cscroll:93 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:88::cscroll:93 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [109] memcpy::src_end#0 = (byte*)memcpy::source#2 + (word)$19*$28-$28 [ memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] ( main:6::cputs:27::cputc:78::cputln:85::cscroll:93::memcpy:97 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:88::cscroll:93::memcpy:97 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:85::cscroll:93::memcpy:99 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:88::cscroll:93::memcpy:99 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [110] memcpy::src#4 = (byte*)memcpy::source#2 [ memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] ( main:6::cputs:27::cputc:78::cputln:85::cscroll:93::memcpy:97 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:88::cscroll:93::memcpy:97 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:85::cscroll:93::memcpy:99 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:88::cscroll:93::memcpy:99 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [111] memcpy::dst#4 = (byte*)memcpy::destination#2 [ memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] ( main:6::cputs:27::cputc:78::cputln:85::cscroll:93::memcpy:97 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:88::cscroll:93::memcpy:97 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:85::cscroll:93::memcpy:99 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:88::cscroll:93::memcpy:99 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [113] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2 [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( main:6::cputs:27::cputc:78::cputln:85::cscroll:93::memcpy:97 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:88::cscroll:93::memcpy:97 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:85::cscroll:93::memcpy:99 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:88::cscroll:93::memcpy:99 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [115] *memcpy::dst#2 = *memcpy::src#2 [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( main:6::cputs:27::cputc:78::cputln:85::cscroll:93::memcpy:97 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:88::cscroll:93::memcpy:97 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:85::cscroll:93::memcpy:99 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:88::cscroll:93::memcpy:99 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a reg byte y 
Statement [119] memset::end#0 = (byte*)memset::str#3 + $28 [ memset::str#3 memset::c#4 memset::end#0 ] ( main:6::cputs:27::cputc:78::cputln:85::cscroll:93::memset:101 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:88::cscroll:93::memset:101 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:85::cscroll:93::memset:103 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:88::cscroll:93::memset:103 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [120] memset::dst#4 = (byte*)memset::str#3 [ memset::c#4 memset::end#0 memset::dst#4 ] ( main:6::cputs:27::cputc:78::cputln:85::cscroll:93::memset:101 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:88::cscroll:93::memset:101 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:85::cscroll:93::memset:103 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:88::cscroll:93::memset:103 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [122] if(memset::dst#2!=memset::end#0) goto memset::@3 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:6::cputs:27::cputc:78::cputln:85::cscroll:93::memset:101 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:88::cscroll:93::memset:101 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:85::cscroll:93::memset:103 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:88::cscroll:93::memset:103 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [124] *memset::dst#2 = memset::c#4 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:6::cputs:27::cputc:78::cputln:85::cscroll:93::memset:101 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:88::cscroll:93::memset:101 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:85::cscroll:93::memset:103 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:78::cputln:88::cscroll:93::memset:103 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a reg byte y 
Potential registers zp[2]:2 [ cputs::s#2 cputs::s#0 ] : zp[2]:2 , 
Potential registers zp[2]:4 [ memcpy::source#2 ] : zp[2]:4 , 
Potential registers zp[2]:6 [ memcpy::destination#2 ] : zp[2]:6 , 
Potential registers zp[2]:8 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] : zp[2]:8 , 
Potential registers zp[2]:10 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] : zp[2]:10 , 
Potential registers zp[2]:12 [ memset::str#3 ] : zp[2]:12 , 
Potential registers zp[1]:14 [ memset::c#4 ] : zp[1]:14 , reg byte x , 
Potential registers zp[2]:15 [ memset::dst#2 memset::dst#4 memset::dst#1 ] : zp[2]:15 , 
Potential registers zp[1]:17 [ conio_cursor_x ] : zp[1]:17 , 
Potential registers zp[1]:18 [ conio_cursor_y ] : zp[1]:18 , 
Potential registers zp[2]:19 [ conio_line_text ] : zp[2]:19 , 
Potential registers zp[2]:21 [ conio_line_color ] : zp[2]:21 , 
Potential registers zp[1]:23 [ tod_init::tod_TENTHS#0 ] : zp[1]:23 , reg byte x , reg byte y , 
Potential registers zp[1]:24 [ tod_init::tod_SEC#0 ] : zp[1]:24 , reg byte x , reg byte y , 
Potential registers zp[1]:25 [ tod_init::tod_MIN#0 ] : zp[1]:25 , reg byte x , reg byte y , 
Potential registers zp[1]:26 [ tod_init::tod_HOURS#0 ] : zp[1]:26 , reg byte x , reg byte y , 
Potential registers zp[1]:27 [ tod_read::return_TENTHS#2 ] : zp[1]:27 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:28 [ tod_read::return_SEC#2 ] : zp[1]:28 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:29 [ tod_read::return_MIN#2 ] : zp[1]:29 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:30 [ tod_read::return_HOURS#2 ] : zp[1]:30 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:31 [ tod_str::tod_TENTHS#0 ] : zp[1]:31 , reg byte x , reg byte y , 
Potential registers zp[1]:32 [ tod_str::tod_SEC#0 ] : zp[1]:32 , reg byte x , reg byte y , 
Potential registers zp[1]:33 [ tod_str::tod_MIN#0 ] : zp[1]:33 , reg byte x , reg byte y , 
Potential registers zp[1]:34 [ tod_str::tod_HOURS#0 ] : zp[1]:34 , reg byte x , reg byte y , 
Potential registers zp[1]:35 [ tod_read::return_HOURS#0 ] : zp[1]:35 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:36 [ tod_read::return_MIN#0 ] : zp[1]:36 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:37 [ tod_read::return_SEC#0 ] : zp[1]:37 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:38 [ tod_read::return_TENTHS#0 ] : zp[1]:38 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:39 [ tod_str::$0 ] : zp[1]:39 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:40 [ tod_str::$1 ] : zp[1]:40 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:41 [ tod_str::$2 ] : zp[1]:41 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:42 [ tod_str::$3 ] : zp[1]:42 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:43 [ tod_str::$4 ] : zp[1]:43 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:44 [ tod_str::$5 ] : zp[1]:44 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:45 [ tod_str::$6 ] : zp[1]:45 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:46 [ tod_str::$7 ] : zp[1]:46 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:47 [ tod_str::$8 ] : zp[1]:47 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:48 [ tod_str::$9 ] : zp[1]:48 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:49 [ tod_str::$10 ] : zp[1]:49 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:50 [ tod_str::$11 ] : zp[1]:50 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:51 [ tod_str::$12 ] : zp[1]:51 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:52 [ tod_str::$13 ] : zp[1]:52 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:53 [ tod_str::$14 ] : zp[1]:53 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:54 [ tod_str::$15 ] : zp[1]:54 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:55 [ cputs::c#1 ] : zp[1]:55 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:56 [ cputc::c#0 ] : zp[1]:56 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:57 [ memcpy::src_end#0 ] : zp[2]:57 , 
Potential registers zp[2]:59 [ memset::end#0 ] : zp[2]:59 , 
Potential registers mem[4] [ TOD_ZERO ] : mem[4] , 

REGISTER UPLIFT SCOPES
Uplift Scope [memcpy] 3,001,250,000,004.25: zp[2]:8 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] 2,002,333,333,337.67: zp[2]:10 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] 125,125,000,000.25: zp[2]:57 [ memcpy::src_end#0 ] 0: zp[2]:4 [ memcpy::source#2 ] 0: zp[2]:6 [ memcpy::destination#2 ] 
Uplift Scope [memset] 3,335,666,666,672.33: zp[2]:15 [ memset::dst#2 memset::dst#4 memset::dst#1 ] 166,833,333,333.67: zp[2]:59 [ memset::end#0 ] 142,857,142,857.29: zp[1]:14 [ memset::c#4 ] 0: zp[2]:12 [ memset::str#3 ] 
Uplift Scope [] 6,037,754.87: zp[1]:18 [ conio_cursor_y ] 4,333,353.1: zp[2]:21 [ conio_line_color ] 4,250,019.38: zp[2]:19 [ conio_line_text ] 405,432.68: zp[1]:17 [ conio_cursor_x ] 0: mem[4] [ TOD_ZERO ] 
Uplift Scope [cputc] 1,050,001.5: zp[1]:56 [ cputc::c#0 ] 
Uplift Scope [cputs] 200,002: zp[2]:2 [ cputs::s#2 cputs::s#0 ] 100,001: zp[1]:55 [ cputs::c#1 ] 
Uplift Scope [tod_str] 2,002: zp[1]:39 [ tod_str::$0 ] 2,002: zp[1]:40 [ tod_str::$1 ] 2,002: zp[1]:41 [ tod_str::$2 ] 2,002: zp[1]:42 [ tod_str::$3 ] 2,002: zp[1]:43 [ tod_str::$4 ] 2,002: zp[1]:44 [ tod_str::$5 ] 2,002: zp[1]:45 [ tod_str::$6 ] 2,002: zp[1]:46 [ tod_str::$7 ] 2,002: zp[1]:47 [ tod_str::$8 ] 2,002: zp[1]:48 [ tod_str::$9 ] 2,002: zp[1]:49 [ tod_str::$10 ] 2,002: zp[1]:50 [ tod_str::$11 ] 2,002: zp[1]:51 [ tod_str::$12 ] 2,002: zp[1]:52 [ tod_str::$13 ] 2,002: zp[1]:53 [ tod_str::$14 ] 2,002: zp[1]:54 [ tod_str::$15 ] 525.75: zp[1]:34 [ tod_str::tod_HOURS#0 ] 191.18: zp[1]:33 [ tod_str::tod_MIN#0 ] 116.83: zp[1]:32 [ tod_str::tod_SEC#0 ] 84.12: zp[1]:31 [ tod_str::tod_TENTHS#0 ] 
Uplift Scope [tod_read] 367.33: zp[1]:38 [ tod_read::return_TENTHS#0 ] 220.4: zp[1]:37 [ tod_read::return_SEC#0 ] 157.43: zp[1]:36 [ tod_read::return_MIN#0 ] 122.44: zp[1]:35 [ tod_read::return_HOURS#0 ] 50.5: zp[1]:27 [ tod_read::return_TENTHS#2 ] 50.5: zp[1]:28 [ tod_read::return_SEC#2 ] 50.5: zp[1]:29 [ tod_read::return_MIN#2 ] 50.5: zp[1]:30 [ tod_read::return_HOURS#2 ] 
Uplift Scope [tod_init] 37.33: zp[1]:26 [ tod_init::tod_HOURS#0 ] 22.4: zp[1]:25 [ tod_init::tod_MIN#0 ] 16: zp[1]:24 [ tod_init::tod_SEC#0 ] 12.44: zp[1]:23 [ tod_init::tod_TENTHS#0 ] 
Uplift Scope [MOS6526_CIA] 
Uplift Scope [MOS6569_VICII] 
Uplift Scope [MOS6581_SID] 
Uplift Scope [gotoxy] 
Uplift Scope [cputln] 
Uplift Scope [cscroll] 
Uplift Scope [TIME_OF_DAY] 
Uplift Scope [main] 
Uplift Scope [__start] 

Uplifting [memcpy] best 123797 combination zp[2]:8 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] zp[2]:10 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] zp[2]:57 [ memcpy::src_end#0 ] zp[2]:4 [ memcpy::source#2 ] zp[2]:6 [ memcpy::destination#2 ] 
Uplifting [memset] best 122791 combination zp[2]:15 [ memset::dst#2 memset::dst#4 memset::dst#1 ] zp[2]:59 [ memset::end#0 ] reg byte x [ memset::c#4 ] zp[2]:12 [ memset::str#3 ] 
Uplifting [] best 122791 combination zp[1]:18 [ conio_cursor_y ] zp[2]:21 [ conio_line_color ] zp[2]:19 [ conio_line_text ] zp[1]:17 [ conio_cursor_x ] mem[4] [ TOD_ZERO ] 
Uplifting [cputc] best 122485 combination reg byte a [ cputc::c#0 ] 
Uplifting [cputs] best 121585 combination zp[2]:2 [ cputs::s#2 cputs::s#0 ] reg byte a [ cputs::c#1 ] 
Uplifting [tod_read] best 121486 combination reg byte y [ tod_read::return_TENTHS#0 ] reg byte x [ tod_read::return_SEC#0 ] reg byte a [ tod_read::return_MIN#0 ] zp[1]:35 [ tod_read::return_HOURS#0 ] zp[1]:27 [ tod_read::return_TENTHS#2 ] zp[1]:28 [ tod_read::return_SEC#2 ] zp[1]:29 [ tod_read::return_MIN#2 ] zp[1]:30 [ tod_read::return_HOURS#2 ] 
Limited combination testing to 100 combinations of 65536 possible.
Uplifting [tod_init] best 121474 combination reg byte y [ tod_init::tod_HOURS#0 ] reg byte x [ tod_init::tod_MIN#0 ] zp[1]:24 [ tod_init::tod_SEC#0 ] zp[1]:23 [ tod_init::tod_TENTHS#0 ] 
Uplifting [MOS6526_CIA] best 121474 combination 
Uplifting [MOS6569_VICII] best 121474 combination 
Uplifting [MOS6581_SID] best 121474 combination 
Uplifting [gotoxy] best 121474 combination 
Uplifting [cputln] best 121474 combination 
Uplifting [cscroll] best 121474 combination 
Uplifting [TIME_OF_DAY] best 121474 combination 
Uplifting [main] best 121474 combination 
Uplifting [__start] best 121474 combination 
Attempting to uplift remaining variables inzp[1]:18 [ conio_cursor_y ]
Uplifting [] best 121474 combination zp[1]:18 [ conio_cursor_y ] 
Attempting to uplift remaining variables inzp[1]:17 [ conio_cursor_x ]
Uplifting [] best 121474 combination zp[1]:17 [ conio_cursor_x ] 
Attempting to uplift remaining variables inzp[1]:39 [ tod_str::$0 ]
Uplifting [tod_str] best 121470 combination reg byte a [ tod_str::$0 ] 
Attempting to uplift remaining variables inzp[1]:40 [ tod_str::$1 ]
Uplifting [tod_str] best 121464 combination reg byte a [ tod_str::$1 ] 
Attempting to uplift remaining variables inzp[1]:41 [ tod_str::$2 ]
Uplifting [tod_str] best 121460 combination reg byte a [ tod_str::$2 ] 
Attempting to uplift remaining variables inzp[1]:42 [ tod_str::$3 ]
Uplifting [tod_str] best 121454 combination reg byte a [ tod_str::$3 ] 
Attempting to uplift remaining variables inzp[1]:43 [ tod_str::$4 ]
Uplifting [tod_str] best 121450 combination reg byte a [ tod_str::$4 ] 
Attempting to uplift remaining variables inzp[1]:44 [ tod_str::$5 ]
Uplifting [tod_str] best 121444 combination reg byte a [ tod_str::$5 ] 
Attempting to uplift remaining variables inzp[1]:45 [ tod_str::$6 ]
Uplifting [tod_str] best 121440 combination reg byte a [ tod_str::$6 ] 
Attempting to uplift remaining variables inzp[1]:46 [ tod_str::$7 ]
Uplifting [tod_str] best 121434 combination reg byte a [ tod_str::$7 ] 
Attempting to uplift remaining variables inzp[1]:47 [ tod_str::$8 ]
Uplifting [tod_str] best 121430 combination reg byte a [ tod_str::$8 ] 
Attempting to uplift remaining variables inzp[1]:48 [ tod_str::$9 ]
Uplifting [tod_str] best 121424 combination reg byte a [ tod_str::$9 ] 
Attempting to uplift remaining variables inzp[1]:49 [ tod_str::$10 ]
Uplifting [tod_str] best 121420 combination reg byte a [ tod_str::$10 ] 
Attempting to uplift remaining variables inzp[1]:50 [ tod_str::$11 ]
Uplifting [tod_str] best 121414 combination reg byte a [ tod_str::$11 ] 
Attempting to uplift remaining variables inzp[1]:51 [ tod_str::$12 ]
Uplifting [tod_str] best 121410 combination reg byte a [ tod_str::$12 ] 
Attempting to uplift remaining variables inzp[1]:52 [ tod_str::$13 ]
Uplifting [tod_str] best 121404 combination reg byte a [ tod_str::$13 ] 
Attempting to uplift remaining variables inzp[1]:53 [ tod_str::$14 ]
Uplifting [tod_str] best 121400 combination reg byte a [ tod_str::$14 ] 
Attempting to uplift remaining variables inzp[1]:54 [ tod_str::$15 ]
Uplifting [tod_str] best 121394 combination reg byte a [ tod_str::$15 ] 
Attempting to uplift remaining variables inzp[1]:34 [ tod_str::tod_HOURS#0 ]
Uplifting [tod_str] best 121362 combination reg byte x [ tod_str::tod_HOURS#0 ] 
Attempting to uplift remaining variables inzp[1]:33 [ tod_str::tod_MIN#0 ]
Uplifting [tod_str] best 121330 combination reg byte y [ tod_str::tod_MIN#0 ] 
Attempting to uplift remaining variables inzp[1]:35 [ tod_read::return_HOURS#0 ]
Uplifting [tod_read] best 121330 combination zp[1]:35 [ tod_read::return_HOURS#0 ] 
Attempting to uplift remaining variables inzp[1]:32 [ tod_str::tod_SEC#0 ]
Uplifting [tod_str] best 121330 combination zp[1]:32 [ tod_str::tod_SEC#0 ] 
Attempting to uplift remaining variables inzp[1]:31 [ tod_str::tod_TENTHS#0 ]
Uplifting [tod_str] best 121330 combination zp[1]:31 [ tod_str::tod_TENTHS#0 ] 
Attempting to uplift remaining variables inzp[1]:27 [ tod_read::return_TENTHS#2 ]
Uplifting [tod_read] best 121270 combination reg byte y [ tod_read::return_TENTHS#2 ] 
Attempting to uplift remaining variables inzp[1]:28 [ tod_read::return_SEC#2 ]
Uplifting [tod_read] best 121210 combination reg byte x [ tod_read::return_SEC#2 ] 
Attempting to uplift remaining variables inzp[1]:29 [ tod_read::return_MIN#2 ]
Uplifting [tod_read] best 121210 combination zp[1]:29 [ tod_read::return_MIN#2 ] 
Attempting to uplift remaining variables inzp[1]:30 [ tod_read::return_HOURS#2 ]
Uplifting [tod_read] best 121170 combination reg byte a [ tod_read::return_HOURS#2 ] 
Attempting to uplift remaining variables inzp[1]:24 [ tod_init::tod_SEC#0 ]
Uplifting [tod_init] best 121170 combination zp[1]:24 [ tod_init::tod_SEC#0 ] 
Attempting to uplift remaining variables inzp[1]:23 [ tod_init::tod_TENTHS#0 ]
Uplifting [tod_init] best 121170 combination zp[1]:23 [ tod_init::tod_TENTHS#0 ] 
Coalescing zero page register [ zp[2]:4 [ memcpy::source#2 ] ] with [ zp[2]:8 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:6 [ memcpy::destination#2 ] ] with [ zp[2]:10 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:12 [ memset::str#3 ] ] with [ zp[2]:15 [ memset::dst#2 memset::dst#4 memset::dst#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:12 [ memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ] ] with [ zp[2]:4 [ memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 ] ]
Coalescing zero page register [ zp[1]:23 [ tod_init::tod_TENTHS#0 ] ] with [ zp[1]:17 [ conio_cursor_x ] ]
Coalescing zero page register [ zp[1]:24 [ tod_init::tod_SEC#0 ] ] with [ zp[1]:18 [ conio_cursor_y ] ]
Coalescing zero page register [ zp[1]:35 [ tod_read::return_HOURS#0 ] ] with [ zp[1]:31 [ tod_str::tod_TENTHS#0 ] ]
Coalescing zero page register [ zp[2]:59 [ memset::end#0 ] ] with [ zp[2]:6 [ memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] ]
Allocated (was zp[2]:12) zp[2]:4 [ memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
Allocated (was zp[2]:19) zp[2]:6 [ conio_line_text ]
Allocated (was zp[2]:21) zp[2]:8 [ conio_line_color ]
Allocated (was zp[1]:23) zp[1]:10 [ tod_init::tod_TENTHS#0 conio_cursor_x ]
Allocated (was zp[1]:24) zp[1]:11 [ tod_init::tod_SEC#0 conio_cursor_y ]
Allocated (was zp[1]:29) zp[1]:12 [ tod_read::return_MIN#2 ]
Allocated (was zp[1]:32) zp[1]:13 [ tod_str::tod_SEC#0 ]
Allocated (was zp[1]:35) zp[1]:14 [ tod_read::return_HOURS#0 tod_str::tod_TENTHS#0 ]
Allocated (was zp[2]:57) zp[2]:15 [ memcpy::src_end#0 ]
Allocated (was zp[2]:59) zp[2]:17 [ memset::end#0 memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Time of Day / RTOS test using the 6526 CIA on C64
// Provides provide console input/output
// Implements similar functions as conio.h from CC65 for compatibility
// See https://github.com/cc65/cc65/blob/master/include/conio.h
//
// Currently C64/PLUS4/VIC20 platforms are supported
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__start)
.pc = $80d "Program"
  // Global Constants & labels
  .const LIGHT_BLUE = $e
  .const OFFSET_STRUCT_TIME_OF_DAY_SEC = 1
  .const OFFSET_STRUCT_TIME_OF_DAY_MIN = 2
  .const OFFSET_STRUCT_TIME_OF_DAY_HOURS = 3
  .const OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL = $e
  .const OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL = $f
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS = $b
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_MIN = $a
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_SEC = 9
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_10THS = 8
  // Color Ram
  .label COLORRAM = $d800
  // Default address of screen character matrix
  .label DEFAULT_SCREEN = $400
  // The CIA#1: keyboard matrix, joystick #1/#2
  .label CIA1 = $dc00
  // The number of bytes on the screen
  // The current cursor x-position
  .label conio_cursor_x = $a
  // The current cursor y-position
  .label conio_cursor_y = $b
  // The current text cursor line start
  .label conio_line_text = 6
  // The current color cursor line start
  .label conio_line_color = 8
  // __start
__start: {
    jmp __init1
    // __start::__init1
  __init1:
    // [1] conio_cursor_x = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [2] conio_cursor_y = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_y
    // [3] conio_line_text = DEFAULT_SCREEN -- pbuz1=pbuc1 
    lda #<DEFAULT_SCREEN
    sta.z conio_line_text
    lda #>DEFAULT_SCREEN
    sta.z conio_line_text+1
    // [4] conio_line_color = COLORRAM -- pbuz1=pbuc1 
    lda #<COLORRAM
    sta.z conio_line_color
    lda #>COLORRAM
    sta.z conio_line_color+1
    // [5] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
  __b1_from___init1:
    jmp __b1
    // __start::@1
  __b1:
    // [6] call main 
    jsr main
    jmp __breturn
    // __start::@return
  __breturn:
    // [7] return 
    rts
}
  // main
main: {
    // [8] tod_init::tod_TENTHS#0 = *((byte*)&TOD_ZERO) -- vbuz1=_deref_pbuc1 
    lda TOD_ZERO
    sta.z tod_init.tod_TENTHS
    // [9] tod_init::tod_SEC#0 = *((byte*)&TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_SEC) -- vbuz1=_deref_pbuc1 
    lda TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_SEC
    sta.z tod_init.tod_SEC
    // [10] tod_init::tod_MIN#0 = *((byte*)&TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_MIN) -- vbuxx=_deref_pbuc1 
    ldx TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_MIN
    // [11] tod_init::tod_HOURS#0 = *((byte*)&TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_HOURS) -- vbuyy=_deref_pbuc1 
    ldy TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_HOURS
    // [12] call tod_init 
    jsr tod_init
    // [13] phi from main main::@4 to main::@1 [phi:main/main::@4->main::@1]
  __b1_from_main:
  __b1_from___b4:
    jmp __b1
    // main::@1
  __b1:
    // [14] call gotoxy 
    // [35] phi from main::@1 to gotoxy [phi:main::@1->gotoxy]
  gotoxy_from___b1:
    jsr gotoxy
    // [15] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [16] call tod_read 
    jsr tod_read
    // [17] tod_read::return_TENTHS#2 = tod_read::return_TENTHS#0
    // [18] tod_read::return_SEC#2 = tod_read::return_SEC#0
    // [19] tod_read::return_MIN#2 = tod_read::return_MIN#0 -- vbuz1=vbuaa 
    sta.z tod_read.return_MIN
    // [20] tod_read::return_HOURS#2 = tod_read::return_HOURS#0 -- vbuaa=vbuz1 
    lda.z tod_read.return_HOURS
    jmp __b3
    // main::@3
  __b3:
    // [21] tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 -- vbuz1=vbuyy 
    sty.z tod_str.tod_TENTHS
    // [22] tod_str::tod_SEC#0 = tod_read::return_SEC#2 -- vbuz1=vbuxx 
    stx.z tod_str.tod_SEC
    // [23] tod_str::tod_MIN#0 = tod_read::return_MIN#2 -- vbuyy=vbuz1 
    ldy.z tod_read.return_MIN
    // [24] tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 -- vbuxx=vbuaa 
    tax
    // [25] call tod_str 
    jsr tod_str
    // [26] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  __b4_from___b3:
    jmp __b4
    // main::@4
  __b4:
    // [27] call cputs 
    // [71] phi from main::@4 to cputs [phi:main::@4->cputs]
  cputs_from___b4:
    jsr cputs
    jmp __b1_from___b4
}
  // tod_init
// Initialize time-of-day clock
// This uses the MOS6526 CIA#1
// tod_init(byte zp($a) tod_TENTHS, byte zp($b) tod_SEC, byte register(X) tod_MIN, byte register(Y) tod_HOURS)
tod_init: {
    .label tod_TENTHS = $a
    .label tod_SEC = $b
    // [28] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) | $80 -- _deref_pbuc1=_deref_pbuc1_bor_vbuc2 
    // Set 50hz (this assumes PAL!) (bit7=1)
    lda #$80
    ora CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL
    // [29] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) & $7f -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    // Writing TOD clock (bit7=0)
    lda #$7f
    and CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL
    // [30] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS) = tod_init::tod_HOURS#0 -- _deref_pbuc1=vbuyy 
    // Reset TOD clock
    // Writing sequence is important. TOD stops when hours is written and starts when 10ths is written.
    sty CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS
    // [31] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_MIN) = tod_init::tod_MIN#0 -- _deref_pbuc1=vbuxx 
    stx CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_MIN
    // [32] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_SEC) = tod_init::tod_SEC#0 -- _deref_pbuc1=vbuz1 
    lda.z tod_SEC
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_SEC
    // [33] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_10THS) = tod_init::tod_TENTHS#0 -- _deref_pbuc1=vbuz1 
    lda.z tod_TENTHS
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_10THS
    jmp __breturn
    // tod_init::@return
  __breturn:
    // [34] return 
    rts
}
  // gotoxy
// Set the cursor to the specified position
gotoxy: {
    .const x = 0
    .const y = 0
    jmp __b1
    // gotoxy::@1
  __b1:
    // [36] conio_cursor_x = gotoxy::x#2 -- vbuz1=vbuc1 
    lda #x
    sta.z conio_cursor_x
    // [37] conio_cursor_y = gotoxy::y#2 -- vbuz1=vbuc1 
    lda #y
    sta.z conio_cursor_y
    // [38] conio_line_text = DEFAULT_SCREEN -- pbuz1=pbuc1 
    lda #<DEFAULT_SCREEN
    sta.z conio_line_text
    lda #>DEFAULT_SCREEN
    sta.z conio_line_text+1
    // [39] conio_line_color = COLORRAM -- pbuz1=pbuc1 
    lda #<COLORRAM
    sta.z conio_line_color
    lda #>COLORRAM
    sta.z conio_line_color+1
    jmp __breturn
    // gotoxy::@return
  __breturn:
    // [40] return 
    rts
}
  // tod_read
// Read time of day
tod_read: {
    .label return_HOURS = $e
    .label return_MIN = $c
    // [41] tod_read::return_HOURS#0 = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS) -- vbuz1=_deref_pbuc1 
    // Reading sequence is important. TOD latches on reading hours until 10ths is read.
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS
    sta.z return_HOURS
    // [42] tod_read::return_MIN#0 = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_MIN) -- vbuaa=_deref_pbuc1 
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_MIN
    // [43] tod_read::return_SEC#0 = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_SEC) -- vbuxx=_deref_pbuc1 
    ldx CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_SEC
    // [44] tod_read::return_TENTHS#0 = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_10THS) -- vbuyy=_deref_pbuc1 
    ldy CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_10THS
    jmp __breturn
    // tod_read::@return
  __breturn:
    // [45] return 
    rts
}
  // tod_str
// Convert time of day to a human-readable string "hh:mm:ss:10"
// tod_str(byte zp($e) tod_TENTHS, byte zp($d) tod_SEC, byte register(Y) tod_MIN, byte register(X) tod_HOURS)
tod_str: {
    .label tod_TENTHS = $e
    .label tod_SEC = $d
    // [46] tod_str::$0 = tod_str::tod_HOURS#0 >> 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // [47] tod_str::$1 = '0' + tod_str::$0 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // [48] *tod_buffer = tod_str::$1 -- _deref_pbuc1=vbuaa 
    sta tod_buffer
    // [49] tod_str::$2 = tod_str::tod_HOURS#0 & $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
    // [50] tod_str::$3 = '0' + tod_str::$2 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // [51] *(tod_buffer+1) = tod_str::$3 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+1
    // [52] tod_str::$4 = tod_str::tod_MIN#0 >> 4 -- vbuaa=vbuyy_ror_4 
    tya
    lsr
    lsr
    lsr
    lsr
    // [53] tod_str::$5 = '0' + tod_str::$4 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // [54] *(tod_buffer+3) = tod_str::$5 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+3
    // [55] tod_str::$6 = tod_str::tod_MIN#0 & $f -- vbuaa=vbuyy_band_vbuc1 
    tya
    and #$f
    // [56] tod_str::$7 = '0' + tod_str::$6 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // [57] *(tod_buffer+4) = tod_str::$7 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+4
    // [58] tod_str::$8 = tod_str::tod_SEC#0 >> 4 -- vbuaa=vbuz1_ror_4 
    lda.z tod_SEC
    lsr
    lsr
    lsr
    lsr
    // [59] tod_str::$9 = '0' + tod_str::$8 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // [60] *(tod_buffer+6) = tod_str::$9 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+6
    // [61] tod_str::$10 = tod_str::tod_SEC#0 & $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z tod_SEC
    // [62] tod_str::$11 = '0' + tod_str::$10 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // [63] *(tod_buffer+7) = tod_str::$11 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+7
    // [64] tod_str::$12 = tod_str::tod_TENTHS#0 >> 4 -- vbuaa=vbuz1_ror_4 
    lda.z tod_TENTHS
    lsr
    lsr
    lsr
    lsr
    // [65] tod_str::$13 = '0' + tod_str::$12 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // [66] *(tod_buffer+9) = tod_str::$13 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+9
    // [67] tod_str::$14 = tod_str::tod_TENTHS#0 & $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z tod_TENTHS
    // [68] tod_str::$15 = '0' + tod_str::$14 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // [69] *(tod_buffer+$a) = tod_str::$15 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+$a
    jmp __breturn
    // tod_str::@return
  __breturn:
    // [70] return 
    rts
}
  // cputs
// Output a NUL-terminated string at the current cursor position
// cputs(byte* zp(2) s)
cputs: {
    .label s = 2
    // [72] phi from cputs to cputs::@1 [phi:cputs->cputs::@1]
  __b1_from_cputs:
    // [72] phi cputs::s#2 = tod_buffer [phi:cputs->cputs::@1#0] -- pbuz1=pbuc1 
    lda #<tod_buffer
    sta.z s
    lda #>tod_buffer
    sta.z s+1
    jmp __b1
    // cputs::@1
  __b1:
    // [73] cputs::c#1 = *cputs::s#2 -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (s),y
    // [74] cputs::s#0 = ++ cputs::s#2 -- pbuz1=_inc_pbuz1 
    inc.z s
    bne !+
    inc.z s+1
  !:
    // [75] if(0!=cputs::c#1) goto cputs::@2 -- vbuc1_neq_vbuaa_then_la1 
    cmp #0
    bne __b2
    jmp __breturn
    // cputs::@return
  __breturn:
    // [76] return 
    rts
    // cputs::@2
  __b2:
    // [77] cputc::c#0 = cputs::c#1
    // [78] call cputc 
    jsr cputc
    // [72] phi from cputs::@2 to cputs::@1 [phi:cputs::@2->cputs::@1]
  __b1_from___b2:
    // [72] phi cputs::s#2 = cputs::s#0 [phi:cputs::@2->cputs::@1#0] -- register_copy 
    jmp __b1
}
  // cputc
// Output one character at the current cursor position
// Moves the cursor forward. Scrolls the entire screen if needed
// cputc(byte register(A) c)
cputc: {
    // [79] if(cputc::c#0==' ') goto cputc::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #'\n'
    beq __b1_from_cputc
    jmp __b2
    // cputc::@2
  __b2:
    // [80] conio_line_text[conio_cursor_x] = cputc::c#0 -- pbuz1_derefidx_vbuz2=vbuaa 
    ldy.z conio_cursor_x
    sta (conio_line_text),y
    // [81] conio_line_color[conio_cursor_x] = LIGHT_BLUE -- pbuz1_derefidx_vbuz2=vbuc1 
    lda #LIGHT_BLUE
    ldy.z conio_cursor_x
    sta (conio_line_color),y
    // [82] conio_cursor_x = ++ conio_cursor_x -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_x
    // [83] if(conio_cursor_x!=$28) goto cputc::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z conio_cursor_x
    bne __breturn
    // [84] phi from cputc::@2 to cputc::@3 [phi:cputc::@2->cputc::@3]
  __b3_from___b2:
    jmp __b3
    // cputc::@3
  __b3:
    // [85] call cputln 
    jsr cputln
    jmp __breturn
    // cputc::@return
  __breturn:
    // [86] return 
    rts
    // [87] phi from cputc to cputc::@1 [phi:cputc->cputc::@1]
  __b1_from_cputc:
    jmp __b1
    // cputc::@1
  __b1:
    // [88] call cputln 
    jsr cputln
    jmp __breturn
}
  // cputln
// Print a newline
cputln: {
    // [89] conio_line_text = conio_line_text + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z conio_line_text
    sta.z conio_line_text
    bcc !+
    inc.z conio_line_text+1
  !:
    // [90] conio_line_color = conio_line_color + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z conio_line_color
    sta.z conio_line_color
    bcc !+
    inc.z conio_line_color+1
  !:
    // [91] conio_cursor_x = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [92] conio_cursor_y = ++ conio_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // [93] call cscroll 
    jsr cscroll
    jmp __breturn
    // cputln::@return
  __breturn:
    // [94] return 
    rts
}
  // cscroll
// Scroll the entire screen if the cursor is beyond the last line
cscroll: {
    // [95] if(conio_cursor_y!=$19) goto cscroll::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z conio_cursor_y
    bne __breturn
    // [96] phi from cscroll to cscroll::@1 [phi:cscroll->cscroll::@1]
  __b1_from_cscroll:
    jmp __b1
    // cscroll::@1
  __b1:
    // [97] call memcpy 
    // [108] phi from cscroll::@1 to memcpy [phi:cscroll::@1->memcpy]
  memcpy_from___b1:
    // [108] phi memcpy::destination#2 = (void*)DEFAULT_SCREEN [phi:cscroll::@1->memcpy#0] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN
    sta.z memcpy.destination
    lda #>DEFAULT_SCREEN
    sta.z memcpy.destination+1
    // [108] phi memcpy::source#2 = (void*)DEFAULT_SCREEN+$28 [phi:cscroll::@1->memcpy#1] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN+$28
    sta.z memcpy.source
    lda #>DEFAULT_SCREEN+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [98] phi from cscroll::@1 to cscroll::@2 [phi:cscroll::@1->cscroll::@2]
  __b2_from___b1:
    jmp __b2
    // cscroll::@2
  __b2:
    // [99] call memcpy 
    // [108] phi from cscroll::@2 to memcpy [phi:cscroll::@2->memcpy]
  memcpy_from___b2:
    // [108] phi memcpy::destination#2 = (void*)COLORRAM [phi:cscroll::@2->memcpy#0] -- pvoz1=pvoc1 
    lda #<COLORRAM
    sta.z memcpy.destination
    lda #>COLORRAM
    sta.z memcpy.destination+1
    // [108] phi memcpy::source#2 = (void*)COLORRAM+$28 [phi:cscroll::@2->memcpy#1] -- pvoz1=pvoc1 
    lda #<COLORRAM+$28
    sta.z memcpy.source
    lda #>COLORRAM+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [100] phi from cscroll::@2 to cscroll::@3 [phi:cscroll::@2->cscroll::@3]
  __b3_from___b2:
    jmp __b3
    // cscroll::@3
  __b3:
    // [101] call memset 
    // [118] phi from cscroll::@3 to memset [phi:cscroll::@3->memset]
  memset_from___b3:
    // [118] phi memset::c#4 = ' ' [phi:cscroll::@3->memset#0] -- vbuxx=vbuc1 
    ldx #' '
    // [118] phi memset::str#3 = (void*)DEFAULT_SCREEN+(word)$19*$28-$28 [phi:cscroll::@3->memset#1] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN+$19*$28-$28
    sta.z memset.str
    lda #>DEFAULT_SCREEN+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    // [102] phi from cscroll::@3 to cscroll::@4 [phi:cscroll::@3->cscroll::@4]
  __b4_from___b3:
    jmp __b4
    // cscroll::@4
  __b4:
    // [103] call memset 
    // [118] phi from cscroll::@4 to memset [phi:cscroll::@4->memset]
  memset_from___b4:
    // [118] phi memset::c#4 = LIGHT_BLUE [phi:cscroll::@4->memset#0] -- vbuxx=vbuc1 
    ldx #LIGHT_BLUE
    // [118] phi memset::str#3 = (void*)COLORRAM+(word)$19*$28-$28 [phi:cscroll::@4->memset#1] -- pvoz1=pvoc1 
    lda #<COLORRAM+$19*$28-$28
    sta.z memset.str
    lda #>COLORRAM+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    jmp __b5
    // cscroll::@5
  __b5:
    // [104] conio_line_text = conio_line_text - $28 -- pbuz1=pbuz1_minus_vbuc1 
    sec
    lda.z conio_line_text
    sbc #$28
    sta.z conio_line_text
    lda.z conio_line_text+1
    sbc #0
    sta.z conio_line_text+1
    // [105] conio_line_color = conio_line_color - $28 -- pbuz1=pbuz1_minus_vbuc1 
    sec
    lda.z conio_line_color
    sbc #$28
    sta.z conio_line_color
    lda.z conio_line_color+1
    sbc #0
    sta.z conio_line_color+1
    // [106] conio_cursor_y = -- conio_cursor_y -- vbuz1=_dec_vbuz1 
    dec.z conio_cursor_y
    jmp __breturn
    // cscroll::@return
  __breturn:
    // [107] return 
    rts
}
  // memcpy
// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
// memcpy(void* zp($11) destination, void* zp(4) source)
memcpy: {
    .label src_end = $f
    .label dst = $11
    .label src = 4
    .label source = 4
    .label destination = $11
    // [109] memcpy::src_end#0 = (byte*)memcpy::source#2 + (word)$19*$28-$28 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z source
    clc
    adc #<$19*$28-$28
    sta.z src_end
    lda.z source+1
    adc #>$19*$28-$28
    sta.z src_end+1
    // [110] memcpy::src#4 = (byte*)memcpy::source#2
    // [111] memcpy::dst#4 = (byte*)memcpy::destination#2
    // [112] phi from memcpy memcpy::@2 to memcpy::@1 [phi:memcpy/memcpy::@2->memcpy::@1]
  __b1_from_memcpy:
  __b1_from___b2:
    // [112] phi memcpy::dst#2 = memcpy::dst#4 [phi:memcpy/memcpy::@2->memcpy::@1#0] -- register_copy 
    // [112] phi memcpy::src#2 = memcpy::src#4 [phi:memcpy/memcpy::@2->memcpy::@1#1] -- register_copy 
    jmp __b1
    // memcpy::@1
  __b1:
    // [113] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2 -- pbuz1_neq_pbuz2_then_la1 
    lda.z src+1
    cmp.z src_end+1
    bne __b2
    lda.z src
    cmp.z src_end
    bne __b2
    jmp __breturn
    // memcpy::@return
  __breturn:
    // [114] return 
    rts
    // memcpy::@2
  __b2:
    // [115] *memcpy::dst#2 = *memcpy::src#2 -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    ldy #0
    sta (dst),y
    // [116] memcpy::dst#1 = ++ memcpy::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [117] memcpy::src#1 = ++ memcpy::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    jmp __b1_from___b2
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp(4) str, byte register(X) c)
memset: {
    .label end = $11
    .label dst = 4
    .label str = 4
    jmp __b1
    // memset::@1
  __b1:
    // [119] memset::end#0 = (byte*)memset::str#3 + $28 -- pbuz1=pbuz2_plus_vbuc1 
    lda #$28
    clc
    adc.z str
    sta.z end
    lda #0
    adc.z str+1
    sta.z end+1
    // [120] memset::dst#4 = (byte*)memset::str#3
    // [121] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [121] phi memset::dst#2 = memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    jmp __b2
    // memset::@2
  __b2:
    // [122] if(memset::dst#2!=memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    jmp __breturn
    // memset::@return
  __breturn:
    // [123] return 
    rts
    // memset::@3
  __b3:
    // [124] *memset::dst#2 = memset::c#4 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // [125] memset::dst#1 = ++ memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2_from___b3
}
  // File Data
  // The buffer used by tod_str()
  tod_buffer: .text "00:00:00:00"
  .byte 0
  // Time of Day 00:00:00:00
  TOD_ZERO: .byte 0, 0, 0, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __init1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction ldy.z conio_cursor_x
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1_from___b4 with __b1
Replacing label __b1_from_cputc with __b1
Replacing label __b1_from___b2 with __b1
Replacing label __b2_from___b3 with __b2
Removing instruction __b1_from___init1:
Removing instruction __b1_from_main:
Removing instruction __b1_from___b4:
Removing instruction gotoxy_from___b1:
Removing instruction __b2_from___b1:
Removing instruction __b4_from___b3:
Removing instruction cputs_from___b4:
Removing instruction __b3_from___b2:
Removing instruction __b1_from_cputc:
Removing instruction __b1_from_cscroll:
Removing instruction memcpy_from___b1:
Removing instruction __b2_from___b1:
Removing instruction memcpy_from___b2:
Removing instruction __b3_from___b2:
Removing instruction memset_from___b3:
Removing instruction __b4_from___b3:
Removing instruction memset_from___b4:
Removing instruction __b1_from_memcpy:
Removing instruction __b1_from___b2:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b3:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __init1:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b1_from_cputs:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Replacing jump to rts with rts in jmp __breturn
Succesful ASM optimization Pass5DoubleJumpElimination

FINAL SYMBOL TABLE
const nomodify struct MOS6526_CIA* CIA1 = (struct MOS6526_CIA*) 56320
const nomodify byte* COLORRAM = (byte*) 55296
const nomodify byte* DEFAULT_SCREEN = (byte*) 1024
const nomodify byte LIGHT_BLUE = $e
const byte OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL = $e
const byte OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL = $f
const byte OFFSET_STRUCT_MOS6526_CIA_TOD_10THS = 8
const byte OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS = $b
const byte OFFSET_STRUCT_MOS6526_CIA_TOD_MIN = $a
const byte OFFSET_STRUCT_MOS6526_CIA_TOD_SEC = 9
const byte OFFSET_STRUCT_TIME_OF_DAY_HOURS = 3
const byte OFFSET_STRUCT_TIME_OF_DAY_MIN = 2
const byte OFFSET_STRUCT_TIME_OF_DAY_SEC = 1
struct TIME_OF_DAY TOD_ZERO loadstore mem[4] = { TENTHS: 0, SEC: 0, MIN: 0, HOURS: 0 }
void __start()
byte conio_cursor_x loadstore zp[1]:10 405432.6756756756
byte conio_cursor_y loadstore zp[1]:11 6037754.867924528
byte* conio_line_color loadstore zp[2]:8 4333353.098039215
byte* conio_line_text loadstore zp[2]:6 4250019.384615384
void cputc(byte cputc::c)
byte cputc::c
byte cputc::c#0 reg byte a 1050001.5
void cputln()
void cputs(to_nomodify byte* cputs::s)
byte cputs::c
byte cputs::c#1 reg byte a 100001.0
to_nomodify byte* cputs::s
to_nomodify byte* cputs::s#0 s zp[2]:2 50000.5
to_nomodify byte* cputs::s#2 s zp[2]:2 150001.5
void cscroll()
void gotoxy(byte gotoxy::x , byte gotoxy::y)
word gotoxy::line_offset
byte gotoxy::x
const byte gotoxy::x#2 x = 0
byte gotoxy::y
const byte gotoxy::y#2 y = 0
void main()
void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
void* memcpy::destination
void* memcpy::destination#2 destination zp[2]:17
byte* memcpy::dst
byte* memcpy::dst#1 dst zp[2]:17 1.000000000001E12
byte* memcpy::dst#2 dst zp[2]:17 1.0003333333346667E12
byte* memcpy::dst#4 dst zp[2]:17 2.000000002E9
word memcpy::num
void* memcpy::return
void* memcpy::source
void* memcpy::source#2 source zp[2]:4
byte* memcpy::src
byte* memcpy::src#1 src zp[2]:4 2.000000000002E12
byte* memcpy::src#2 src zp[2]:4 1.00025000000125E12
byte* memcpy::src#4 src zp[2]:4 1.000000001E9
byte* memcpy::src_end
byte* memcpy::src_end#0 src_end zp[2]:15 1.2512500000025E11
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
byte memset::c#4 reg byte x 1.428571428572857E11
byte* memset::dst
byte* memset::dst#1 dst zp[2]:4 2.000000000002E12
byte* memset::dst#2 dst zp[2]:4 1.3336666666683335E12
byte* memset::dst#4 dst zp[2]:4 2.000000002E9
byte* memset::end
byte* memset::end#0 end zp[2]:17 1.668333333336667E11
word memset::num
void* memset::return
void* memset::str
void* memset::str#3 str zp[2]:4
const byte* tod_buffer[]  = "00:00:00:00"
void tod_init(byte tod_init::tod_TENTHS , byte tod_init::tod_SEC , byte tod_init::tod_MIN , byte tod_init::tod_HOURS)
struct TIME_OF_DAY tod_init::tod
byte tod_init::tod_HOURS
byte tod_init::tod_HOURS#0 reg byte y 37.33333333333333
byte tod_init::tod_MIN
byte tod_init::tod_MIN#0 reg byte x 22.4
byte tod_init::tod_SEC
byte tod_init::tod_SEC#0 tod_SEC zp[1]:11 16.0
byte tod_init::tod_TENTHS
byte tod_init::tod_TENTHS#0 tod_TENTHS zp[1]:10 12.444444444444443
struct TIME_OF_DAY tod_read()
byte tod_read::hours
byte tod_read::mins
struct TIME_OF_DAY tod_read::return
byte tod_read::return_HOURS
byte tod_read::return_HOURS#0 return_HOURS zp[1]:14 122.44444444444446
byte tod_read::return_HOURS#2 reg byte a 50.5
byte tod_read::return_MIN
byte tod_read::return_MIN#0 reg byte a 157.42857142857142
byte tod_read::return_MIN#2 return_MIN zp[1]:12 50.5
byte tod_read::return_SEC
byte tod_read::return_SEC#0 reg byte x 220.39999999999998
byte tod_read::return_SEC#2 reg byte x 50.5
byte tod_read::return_TENTHS
byte tod_read::return_TENTHS#0 reg byte y 367.33333333333337
byte tod_read::return_TENTHS#2 reg byte y 50.5
byte tod_read::secs
byte tod_read::tenths
byte tod_read::tod_HOURS
byte tod_read::tod_MIN
byte tod_read::tod_SEC
byte tod_read::tod_TENTHS
byte* tod_str(byte tod_str::tod_TENTHS , byte tod_str::tod_SEC , byte tod_str::tod_MIN , byte tod_str::tod_HOURS)
byte~ tod_str::$0 reg byte a 2002.0
byte~ tod_str::$1 reg byte a 2002.0
byte~ tod_str::$10 reg byte a 2002.0
byte~ tod_str::$11 reg byte a 2002.0
byte~ tod_str::$12 reg byte a 2002.0
byte~ tod_str::$13 reg byte a 2002.0
byte~ tod_str::$14 reg byte a 2002.0
byte~ tod_str::$15 reg byte a 2002.0
byte~ tod_str::$2 reg byte a 2002.0
byte~ tod_str::$3 reg byte a 2002.0
byte~ tod_str::$4 reg byte a 2002.0
byte~ tod_str::$5 reg byte a 2002.0
byte~ tod_str::$6 reg byte a 2002.0
byte~ tod_str::$7 reg byte a 2002.0
byte~ tod_str::$8 reg byte a 2002.0
byte~ tod_str::$9 reg byte a 2002.0
byte* tod_str::return
struct TIME_OF_DAY tod_str::tod
byte tod_str::tod_HOURS
byte tod_str::tod_HOURS#0 reg byte x 525.75
byte tod_str::tod_MIN
byte tod_str::tod_MIN#0 reg byte y 191.1818181818182
byte tod_str::tod_SEC
byte tod_str::tod_SEC#0 tod_SEC zp[1]:13 116.83333333333334
byte tod_str::tod_TENTHS
byte tod_str::tod_TENTHS#0 tod_TENTHS zp[1]:14 84.12

zp[2]:2 [ cputs::s#2 cputs::s#0 ]
zp[2]:4 [ memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
reg byte x [ memset::c#4 ]
zp[2]:6 [ conio_line_text ]
zp[2]:8 [ conio_line_color ]
zp[1]:10 [ tod_init::tod_TENTHS#0 conio_cursor_x ]
zp[1]:11 [ tod_init::tod_SEC#0 conio_cursor_y ]
reg byte x [ tod_init::tod_MIN#0 ]
reg byte y [ tod_init::tod_HOURS#0 ]
reg byte y [ tod_read::return_TENTHS#2 ]
reg byte x [ tod_read::return_SEC#2 ]
zp[1]:12 [ tod_read::return_MIN#2 ]
reg byte a [ tod_read::return_HOURS#2 ]
zp[1]:13 [ tod_str::tod_SEC#0 ]
reg byte y [ tod_str::tod_MIN#0 ]
reg byte x [ tod_str::tod_HOURS#0 ]
zp[1]:14 [ tod_read::return_HOURS#0 tod_str::tod_TENTHS#0 ]
reg byte a [ tod_read::return_MIN#0 ]
reg byte x [ tod_read::return_SEC#0 ]
reg byte y [ tod_read::return_TENTHS#0 ]
reg byte a [ tod_str::$0 ]
reg byte a [ tod_str::$1 ]
reg byte a [ tod_str::$2 ]
reg byte a [ tod_str::$3 ]
reg byte a [ tod_str::$4 ]
reg byte a [ tod_str::$5 ]
reg byte a [ tod_str::$6 ]
reg byte a [ tod_str::$7 ]
reg byte a [ tod_str::$8 ]
reg byte a [ tod_str::$9 ]
reg byte a [ tod_str::$10 ]
reg byte a [ tod_str::$11 ]
reg byte a [ tod_str::$12 ]
reg byte a [ tod_str::$13 ]
reg byte a [ tod_str::$14 ]
reg byte a [ tod_str::$15 ]
reg byte a [ cputs::c#1 ]
reg byte a [ cputc::c#0 ]
zp[2]:15 [ memcpy::src_end#0 ]
zp[2]:17 [ memset::end#0 memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
mem[4] [ TOD_ZERO ]


FINAL ASSEMBLER
Score: 106271

  // File Comments
// Time of Day / RTOS test using the 6526 CIA on C64
// Provides provide console input/output
// Implements similar functions as conio.h from CC65 for compatibility
// See https://github.com/cc65/cc65/blob/master/include/conio.h
//
// Currently C64/PLUS4/VIC20 platforms are supported
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__start)
.pc = $80d "Program"
  // Global Constants & labels
  .const LIGHT_BLUE = $e
  .const OFFSET_STRUCT_TIME_OF_DAY_SEC = 1
  .const OFFSET_STRUCT_TIME_OF_DAY_MIN = 2
  .const OFFSET_STRUCT_TIME_OF_DAY_HOURS = 3
  .const OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL = $e
  .const OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL = $f
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS = $b
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_MIN = $a
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_SEC = 9
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_10THS = 8
  // Color Ram
  .label COLORRAM = $d800
  // Default address of screen character matrix
  .label DEFAULT_SCREEN = $400
  // The CIA#1: keyboard matrix, joystick #1/#2
  .label CIA1 = $dc00
  // The number of bytes on the screen
  // The current cursor x-position
  .label conio_cursor_x = $a
  // The current cursor y-position
  .label conio_cursor_y = $b
  // The current text cursor line start
  .label conio_line_text = 6
  // The current color cursor line start
  .label conio_line_color = 8
  // __start
__start: {
    // __start::__init1
    // conio_cursor_x = 0
    // [1] conio_cursor_x = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // conio_cursor_y = 0
    // [2] conio_cursor_y = 0 -- vbuz1=vbuc1 
    sta.z conio_cursor_y
    // conio_line_text = CONIO_SCREEN_TEXT
    // [3] conio_line_text = DEFAULT_SCREEN -- pbuz1=pbuc1 
    lda #<DEFAULT_SCREEN
    sta.z conio_line_text
    lda #>DEFAULT_SCREEN
    sta.z conio_line_text+1
    // conio_line_color = CONIO_SCREEN_COLORS
    // [4] conio_line_color = COLORRAM -- pbuz1=pbuc1 
    lda #<COLORRAM
    sta.z conio_line_color
    lda #>COLORRAM
    sta.z conio_line_color+1
    // [5] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
    // __start::@1
    // [6] call main 
    jsr main
    // __start::@return
    // [7] return 
    rts
}
  // main
main: {
    // tod_init(TOD_ZERO)
    // [8] tod_init::tod_TENTHS#0 = *((byte*)&TOD_ZERO) -- vbuz1=_deref_pbuc1 
    lda TOD_ZERO
    sta.z tod_init.tod_TENTHS
    // [9] tod_init::tod_SEC#0 = *((byte*)&TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_SEC) -- vbuz1=_deref_pbuc1 
    lda TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_SEC
    sta.z tod_init.tod_SEC
    // [10] tod_init::tod_MIN#0 = *((byte*)&TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_MIN) -- vbuxx=_deref_pbuc1 
    ldx TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_MIN
    // [11] tod_init::tod_HOURS#0 = *((byte*)&TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_HOURS) -- vbuyy=_deref_pbuc1 
    ldy TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_HOURS
    // [12] call tod_init 
    jsr tod_init
    // [13] phi from main main::@4 to main::@1 [phi:main/main::@4->main::@1]
    // main::@1
  __b1:
    // gotoxy(0,0)
    // [14] call gotoxy 
    // [35] phi from main::@1 to gotoxy [phi:main::@1->gotoxy]
    jsr gotoxy
    // [15] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // main::@2
    // tod_read()
    // [16] call tod_read 
    jsr tod_read
    // [17] tod_read::return_TENTHS#2 = tod_read::return_TENTHS#0
    // [18] tod_read::return_SEC#2 = tod_read::return_SEC#0
    // [19] tod_read::return_MIN#2 = tod_read::return_MIN#0 -- vbuz1=vbuaa 
    sta.z tod_read.return_MIN
    // [20] tod_read::return_HOURS#2 = tod_read::return_HOURS#0 -- vbuaa=vbuz1 
    lda.z tod_read.return_HOURS
    // main::@3
    // tod_str(tod_read())
    // [21] tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 -- vbuz1=vbuyy 
    sty.z tod_str.tod_TENTHS
    // [22] tod_str::tod_SEC#0 = tod_read::return_SEC#2 -- vbuz1=vbuxx 
    stx.z tod_str.tod_SEC
    // [23] tod_str::tod_MIN#0 = tod_read::return_MIN#2 -- vbuyy=vbuz1 
    ldy.z tod_read.return_MIN
    // [24] tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 -- vbuxx=vbuaa 
    tax
    // [25] call tod_str 
    jsr tod_str
    // [26] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
    // main::@4
    // cputs(tod_str(tod_read()))
    // [27] call cputs 
    // [71] phi from main::@4 to cputs [phi:main::@4->cputs]
    jsr cputs
    jmp __b1
}
  // tod_init
// Initialize time-of-day clock
// This uses the MOS6526 CIA#1
// tod_init(byte zp($a) tod_TENTHS, byte zp($b) tod_SEC, byte register(X) tod_MIN, byte register(Y) tod_HOURS)
tod_init: {
    .label tod_TENTHS = $a
    .label tod_SEC = $b
    // CIA1->TIMER_A_CONTROL |= 0x80
    // [28] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) | $80 -- _deref_pbuc1=_deref_pbuc1_bor_vbuc2 
    // Set 50hz (this assumes PAL!) (bit7=1)
    lda #$80
    ora CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL
    // CIA1->TIMER_B_CONTROL &= 0x7f
    // [29] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) & $7f -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    // Writing TOD clock (bit7=0)
    lda #$7f
    and CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL
    // CIA1->TOD_HOURS = tod.HOURS
    // [30] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS) = tod_init::tod_HOURS#0 -- _deref_pbuc1=vbuyy 
    // Reset TOD clock
    // Writing sequence is important. TOD stops when hours is written and starts when 10ths is written.
    sty CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS
    // CIA1->TOD_MIN = tod.MIN
    // [31] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_MIN) = tod_init::tod_MIN#0 -- _deref_pbuc1=vbuxx 
    stx CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_MIN
    // CIA1->TOD_SEC = tod.SEC
    // [32] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_SEC) = tod_init::tod_SEC#0 -- _deref_pbuc1=vbuz1 
    lda.z tod_SEC
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_SEC
    // CIA1->TOD_10THS = tod.TENTHS
    // [33] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_10THS) = tod_init::tod_TENTHS#0 -- _deref_pbuc1=vbuz1 
    lda.z tod_TENTHS
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_10THS
    // tod_init::@return
    // }
    // [34] return 
    rts
}
  // gotoxy
// Set the cursor to the specified position
gotoxy: {
    .const x = 0
    .const y = 0
    // gotoxy::@1
    // conio_cursor_x = x
    // [36] conio_cursor_x = gotoxy::x#2 -- vbuz1=vbuc1 
    lda #x
    sta.z conio_cursor_x
    // conio_cursor_y = y
    // [37] conio_cursor_y = gotoxy::y#2 -- vbuz1=vbuc1 
    lda #y
    sta.z conio_cursor_y
    // conio_line_text = CONIO_SCREEN_TEXT + line_offset
    // [38] conio_line_text = DEFAULT_SCREEN -- pbuz1=pbuc1 
    lda #<DEFAULT_SCREEN
    sta.z conio_line_text
    lda #>DEFAULT_SCREEN
    sta.z conio_line_text+1
    // conio_line_color = CONIO_SCREEN_COLORS + line_offset
    // [39] conio_line_color = COLORRAM -- pbuz1=pbuc1 
    lda #<COLORRAM
    sta.z conio_line_color
    lda #>COLORRAM
    sta.z conio_line_color+1
    // gotoxy::@return
    // }
    // [40] return 
    rts
}
  // tod_read
// Read time of day
tod_read: {
    .label return_HOURS = $e
    .label return_MIN = $c
    // hours = CIA1->TOD_HOURS
    // [41] tod_read::return_HOURS#0 = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS) -- vbuz1=_deref_pbuc1 
    // Reading sequence is important. TOD latches on reading hours until 10ths is read.
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS
    sta.z return_HOURS
    // mins = CIA1->TOD_MIN
    // [42] tod_read::return_MIN#0 = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_MIN) -- vbuaa=_deref_pbuc1 
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_MIN
    // secs = CIA1->TOD_SEC
    // [43] tod_read::return_SEC#0 = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_SEC) -- vbuxx=_deref_pbuc1 
    ldx CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_SEC
    // tenths = CIA1->TOD_10THS
    // [44] tod_read::return_TENTHS#0 = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_10THS) -- vbuyy=_deref_pbuc1 
    ldy CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_10THS
    // tod_read::@return
    // }
    // [45] return 
    rts
}
  // tod_str
// Convert time of day to a human-readable string "hh:mm:ss:10"
// tod_str(byte zp($e) tod_TENTHS, byte zp($d) tod_SEC, byte register(Y) tod_MIN, byte register(X) tod_HOURS)
tod_str: {
    .label tod_TENTHS = $e
    .label tod_SEC = $d
    // tod.HOURS>>4
    // [46] tod_str::$0 = tod_str::tod_HOURS#0 >> 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // '0'+(tod.HOURS>>4)
    // [47] tod_str::$1 = '0' + tod_str::$0 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // tod_buffer[0] = '0'+(tod.HOURS>>4)
    // [48] *tod_buffer = tod_str::$1 -- _deref_pbuc1=vbuaa 
    sta tod_buffer
    // tod.HOURS&0x0f
    // [49] tod_str::$2 = tod_str::tod_HOURS#0 & $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
    // '0'+(tod.HOURS&0x0f)
    // [50] tod_str::$3 = '0' + tod_str::$2 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // tod_buffer[1] = '0'+(tod.HOURS&0x0f)
    // [51] *(tod_buffer+1) = tod_str::$3 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+1
    // tod.MIN>>4
    // [52] tod_str::$4 = tod_str::tod_MIN#0 >> 4 -- vbuaa=vbuyy_ror_4 
    tya
    lsr
    lsr
    lsr
    lsr
    // '0'+(tod.MIN>>4)
    // [53] tod_str::$5 = '0' + tod_str::$4 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // tod_buffer[3] = '0'+(tod.MIN>>4)
    // [54] *(tod_buffer+3) = tod_str::$5 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+3
    // tod.MIN&0x0f
    // [55] tod_str::$6 = tod_str::tod_MIN#0 & $f -- vbuaa=vbuyy_band_vbuc1 
    tya
    and #$f
    // '0'+(tod.MIN&0x0f)
    // [56] tod_str::$7 = '0' + tod_str::$6 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // tod_buffer[4] = '0'+(tod.MIN&0x0f)
    // [57] *(tod_buffer+4) = tod_str::$7 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+4
    // tod.SEC>>4
    // [58] tod_str::$8 = tod_str::tod_SEC#0 >> 4 -- vbuaa=vbuz1_ror_4 
    lda.z tod_SEC
    lsr
    lsr
    lsr
    lsr
    // '0'+(tod.SEC>>4)
    // [59] tod_str::$9 = '0' + tod_str::$8 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // tod_buffer[6] = '0'+(tod.SEC>>4)
    // [60] *(tod_buffer+6) = tod_str::$9 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+6
    // tod.SEC&0x0f
    // [61] tod_str::$10 = tod_str::tod_SEC#0 & $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z tod_SEC
    // '0'+(tod.SEC&0x0f)
    // [62] tod_str::$11 = '0' + tod_str::$10 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // tod_buffer[7] = '0'+(tod.SEC&0x0f)
    // [63] *(tod_buffer+7) = tod_str::$11 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+7
    // tod.TENTHS>>4
    // [64] tod_str::$12 = tod_str::tod_TENTHS#0 >> 4 -- vbuaa=vbuz1_ror_4 
    lda.z tod_TENTHS
    lsr
    lsr
    lsr
    lsr
    // '0'+(tod.TENTHS>>4)
    // [65] tod_str::$13 = '0' + tod_str::$12 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // tod_buffer[9] = '0'+(tod.TENTHS>>4)
    // [66] *(tod_buffer+9) = tod_str::$13 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+9
    // tod.TENTHS&0x0f
    // [67] tod_str::$14 = tod_str::tod_TENTHS#0 & $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z tod_TENTHS
    // '0'+(tod.TENTHS&0x0f)
    // [68] tod_str::$15 = '0' + tod_str::$14 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // tod_buffer[10] = '0'+(tod.TENTHS&0x0f)
    // [69] *(tod_buffer+$a) = tod_str::$15 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+$a
    // tod_str::@return
    // }
    // [70] return 
    rts
}
  // cputs
// Output a NUL-terminated string at the current cursor position
// cputs(byte* zp(2) s)
cputs: {
    .label s = 2
    // [72] phi from cputs to cputs::@1 [phi:cputs->cputs::@1]
    // [72] phi cputs::s#2 = tod_buffer [phi:cputs->cputs::@1#0] -- pbuz1=pbuc1 
    lda #<tod_buffer
    sta.z s
    lda #>tod_buffer
    sta.z s+1
    // cputs::@1
  __b1:
    // while(c=*s++)
    // [73] cputs::c#1 = *cputs::s#2 -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (s),y
    // [74] cputs::s#0 = ++ cputs::s#2 -- pbuz1=_inc_pbuz1 
    inc.z s
    bne !+
    inc.z s+1
  !:
    // [75] if(0!=cputs::c#1) goto cputs::@2 -- vbuc1_neq_vbuaa_then_la1 
    cmp #0
    bne __b2
    // cputs::@return
    // }
    // [76] return 
    rts
    // cputs::@2
  __b2:
    // cputc(c)
    // [77] cputc::c#0 = cputs::c#1
    // [78] call cputc 
    jsr cputc
    // [72] phi from cputs::@2 to cputs::@1 [phi:cputs::@2->cputs::@1]
    // [72] phi cputs::s#2 = cputs::s#0 [phi:cputs::@2->cputs::@1#0] -- register_copy 
    jmp __b1
}
  // cputc
// Output one character at the current cursor position
// Moves the cursor forward. Scrolls the entire screen if needed
// cputc(byte register(A) c)
cputc: {
    // if(c=='\n')
    // [79] if(cputc::c#0==' ') goto cputc::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #'\n'
    beq __b1
    // cputc::@2
    // conio_line_text[conio_cursor_x] = c
    // [80] conio_line_text[conio_cursor_x] = cputc::c#0 -- pbuz1_derefidx_vbuz2=vbuaa 
    ldy.z conio_cursor_x
    sta (conio_line_text),y
    // conio_line_color[conio_cursor_x] = conio_textcolor
    // [81] conio_line_color[conio_cursor_x] = LIGHT_BLUE -- pbuz1_derefidx_vbuz2=vbuc1 
    lda #LIGHT_BLUE
    sta (conio_line_color),y
    // if(++conio_cursor_x==CONIO_WIDTH)
    // [82] conio_cursor_x = ++ conio_cursor_x -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_x
    // [83] if(conio_cursor_x!=$28) goto cputc::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z conio_cursor_x
    bne __breturn
    // [84] phi from cputc::@2 to cputc::@3 [phi:cputc::@2->cputc::@3]
    // cputc::@3
    // cputln()
    // [85] call cputln 
    jsr cputln
    // cputc::@return
  __breturn:
    // }
    // [86] return 
    rts
    // [87] phi from cputc to cputc::@1 [phi:cputc->cputc::@1]
    // cputc::@1
  __b1:
    // cputln()
    // [88] call cputln 
    jsr cputln
    rts
}
  // cputln
// Print a newline
cputln: {
    // conio_line_text +=  CONIO_WIDTH
    // [89] conio_line_text = conio_line_text + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z conio_line_text
    sta.z conio_line_text
    bcc !+
    inc.z conio_line_text+1
  !:
    // conio_line_color += CONIO_WIDTH
    // [90] conio_line_color = conio_line_color + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z conio_line_color
    sta.z conio_line_color
    bcc !+
    inc.z conio_line_color+1
  !:
    // conio_cursor_x = 0
    // [91] conio_cursor_x = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // conio_cursor_y++;
    // [92] conio_cursor_y = ++ conio_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // cscroll()
    // [93] call cscroll 
    jsr cscroll
    // cputln::@return
    // }
    // [94] return 
    rts
}
  // cscroll
// Scroll the entire screen if the cursor is beyond the last line
cscroll: {
    // if(conio_cursor_y==CONIO_HEIGHT)
    // [95] if(conio_cursor_y!=$19) goto cscroll::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z conio_cursor_y
    bne __breturn
    // [96] phi from cscroll to cscroll::@1 [phi:cscroll->cscroll::@1]
    // cscroll::@1
    // memcpy(CONIO_SCREEN_TEXT, CONIO_SCREEN_TEXT+CONIO_WIDTH, CONIO_BYTES-CONIO_WIDTH)
    // [97] call memcpy 
    // [108] phi from cscroll::@1 to memcpy [phi:cscroll::@1->memcpy]
    // [108] phi memcpy::destination#2 = (void*)DEFAULT_SCREEN [phi:cscroll::@1->memcpy#0] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN
    sta.z memcpy.destination
    lda #>DEFAULT_SCREEN
    sta.z memcpy.destination+1
    // [108] phi memcpy::source#2 = (void*)DEFAULT_SCREEN+$28 [phi:cscroll::@1->memcpy#1] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN+$28
    sta.z memcpy.source
    lda #>DEFAULT_SCREEN+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [98] phi from cscroll::@1 to cscroll::@2 [phi:cscroll::@1->cscroll::@2]
    // cscroll::@2
    // memcpy(CONIO_SCREEN_COLORS, CONIO_SCREEN_COLORS+CONIO_WIDTH, CONIO_BYTES-CONIO_WIDTH)
    // [99] call memcpy 
    // [108] phi from cscroll::@2 to memcpy [phi:cscroll::@2->memcpy]
    // [108] phi memcpy::destination#2 = (void*)COLORRAM [phi:cscroll::@2->memcpy#0] -- pvoz1=pvoc1 
    lda #<COLORRAM
    sta.z memcpy.destination
    lda #>COLORRAM
    sta.z memcpy.destination+1
    // [108] phi memcpy::source#2 = (void*)COLORRAM+$28 [phi:cscroll::@2->memcpy#1] -- pvoz1=pvoc1 
    lda #<COLORRAM+$28
    sta.z memcpy.source
    lda #>COLORRAM+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [100] phi from cscroll::@2 to cscroll::@3 [phi:cscroll::@2->cscroll::@3]
    // cscroll::@3
    // memset(CONIO_SCREEN_TEXT+CONIO_BYTES-CONIO_WIDTH, ' ', CONIO_WIDTH)
    // [101] call memset 
    // [118] phi from cscroll::@3 to memset [phi:cscroll::@3->memset]
    // [118] phi memset::c#4 = ' ' [phi:cscroll::@3->memset#0] -- vbuxx=vbuc1 
    ldx #' '
    // [118] phi memset::str#3 = (void*)DEFAULT_SCREEN+(word)$19*$28-$28 [phi:cscroll::@3->memset#1] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN+$19*$28-$28
    sta.z memset.str
    lda #>DEFAULT_SCREEN+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    // [102] phi from cscroll::@3 to cscroll::@4 [phi:cscroll::@3->cscroll::@4]
    // cscroll::@4
    // memset(CONIO_SCREEN_COLORS+CONIO_BYTES-CONIO_WIDTH, conio_textcolor, CONIO_WIDTH)
    // [103] call memset 
    // [118] phi from cscroll::@4 to memset [phi:cscroll::@4->memset]
    // [118] phi memset::c#4 = LIGHT_BLUE [phi:cscroll::@4->memset#0] -- vbuxx=vbuc1 
    ldx #LIGHT_BLUE
    // [118] phi memset::str#3 = (void*)COLORRAM+(word)$19*$28-$28 [phi:cscroll::@4->memset#1] -- pvoz1=pvoc1 
    lda #<COLORRAM+$19*$28-$28
    sta.z memset.str
    lda #>COLORRAM+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    // cscroll::@5
    // conio_line_text -= CONIO_WIDTH
    // [104] conio_line_text = conio_line_text - $28 -- pbuz1=pbuz1_minus_vbuc1 
    sec
    lda.z conio_line_text
    sbc #$28
    sta.z conio_line_text
    lda.z conio_line_text+1
    sbc #0
    sta.z conio_line_text+1
    // conio_line_color -= CONIO_WIDTH
    // [105] conio_line_color = conio_line_color - $28 -- pbuz1=pbuz1_minus_vbuc1 
    sec
    lda.z conio_line_color
    sbc #$28
    sta.z conio_line_color
    lda.z conio_line_color+1
    sbc #0
    sta.z conio_line_color+1
    // conio_cursor_y--;
    // [106] conio_cursor_y = -- conio_cursor_y -- vbuz1=_dec_vbuz1 
    dec.z conio_cursor_y
    // cscroll::@return
  __breturn:
    // }
    // [107] return 
    rts
}
  // memcpy
// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
// memcpy(void* zp($11) destination, void* zp(4) source)
memcpy: {
    .label src_end = $f
    .label dst = $11
    .label src = 4
    .label source = 4
    .label destination = $11
    // src_end = (char*)source+num
    // [109] memcpy::src_end#0 = (byte*)memcpy::source#2 + (word)$19*$28-$28 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z source
    clc
    adc #<$19*$28-$28
    sta.z src_end
    lda.z source+1
    adc #>$19*$28-$28
    sta.z src_end+1
    // [110] memcpy::src#4 = (byte*)memcpy::source#2
    // [111] memcpy::dst#4 = (byte*)memcpy::destination#2
    // [112] phi from memcpy memcpy::@2 to memcpy::@1 [phi:memcpy/memcpy::@2->memcpy::@1]
    // [112] phi memcpy::dst#2 = memcpy::dst#4 [phi:memcpy/memcpy::@2->memcpy::@1#0] -- register_copy 
    // [112] phi memcpy::src#2 = memcpy::src#4 [phi:memcpy/memcpy::@2->memcpy::@1#1] -- register_copy 
    // memcpy::@1
  __b1:
    // while(src!=src_end)
    // [113] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2 -- pbuz1_neq_pbuz2_then_la1 
    lda.z src+1
    cmp.z src_end+1
    bne __b2
    lda.z src
    cmp.z src_end
    bne __b2
    // memcpy::@return
    // }
    // [114] return 
    rts
    // memcpy::@2
  __b2:
    // *dst++ = *src++
    // [115] *memcpy::dst#2 = *memcpy::src#2 -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    sta (dst),y
    // *dst++ = *src++;
    // [116] memcpy::dst#1 = ++ memcpy::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [117] memcpy::src#1 = ++ memcpy::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    jmp __b1
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp(4) str, byte register(X) c)
memset: {
    .label end = $11
    .label dst = 4
    .label str = 4
    // memset::@1
    // end = (char*)str + num
    // [119] memset::end#0 = (byte*)memset::str#3 + $28 -- pbuz1=pbuz2_plus_vbuc1 
    lda #$28
    clc
    adc.z str
    sta.z end
    lda #0
    adc.z str+1
    sta.z end+1
    // [120] memset::dst#4 = (byte*)memset::str#3
    // [121] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
    // [121] phi memset::dst#2 = memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    // memset::@2
  __b2:
    // for(char* dst = str; dst!=end; dst++)
    // [122] if(memset::dst#2!=memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    // memset::@return
    // }
    // [123] return 
    rts
    // memset::@3
  __b3:
    // *dst = c
    // [124] *memset::dst#2 = memset::c#4 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [125] memset::dst#1 = ++ memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2
}
  // File Data
  // The buffer used by tod_str()
  tod_buffer: .text "00:00:00:00"
  .byte 0
  // Time of Day 00:00:00:00
  TOD_ZERO: .byte 0, 0, 0, 0

