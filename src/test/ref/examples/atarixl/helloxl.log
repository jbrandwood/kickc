Resolved forward reference DISPLAY_LIST to (const byte*) DISPLAY_LIST
Fixing struct type size struct ATARI_GTIA_READ to 32
Fixing struct type size struct ATARI_POKEY_READ to 16
Fixing struct type SIZE_OF struct ATARI_GTIA_READ to 32
Fixing struct type SIZE_OF struct ATARI_POKEY_READ to 16
Fixing struct type SIZE_OF struct ATARI_GTIA_READ to 32
Fixing struct type SIZE_OF struct ATARI_POKEY_READ to 16
Inlined call call __init 

CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from __start::@1
  *((const nomodify byte*) SDMCTL) ← (number) $21
  *((const nomodify byte**) SDLST) ← (const byte*) DISPLAY_LIST
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (bool~) main::$0 ← (number) 0 != (number) 1
  if((bool~) main::$0) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return

(void()) __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
(byte) ATARI_ANTIC::CHACTL
(byte) ATARI_ANTIC::CHBASE
(byte*) ATARI_ANTIC::DLIST
(byte) ATARI_ANTIC::DMACTL
(byte) ATARI_ANTIC::HSCROL
(byte) ATARI_ANTIC::NMIEN
(byte) ATARI_ANTIC::NMIST
(byte) ATARI_ANTIC::PENH
(byte) ATARI_ANTIC::PENV
(byte) ATARI_ANTIC::PMBASE
(byte) ATARI_ANTIC::UNUSED1
(byte) ATARI_ANTIC::UNUSED2
(byte) ATARI_ANTIC::VCOUNT
(byte) ATARI_ANTIC::VSCROL
(byte) ATARI_ANTIC::WSYNC
(byte) ATARI_GTIA_READ::CONSOL
(byte) ATARI_GTIA_READ::M0PF
(byte) ATARI_GTIA_READ::M0PL
(byte) ATARI_GTIA_READ::M1PF
(byte) ATARI_GTIA_READ::M1PL
(byte) ATARI_GTIA_READ::M2PF
(byte) ATARI_GTIA_READ::M2PL
(byte) ATARI_GTIA_READ::M3PF
(byte) ATARI_GTIA_READ::M3PL
(byte) ATARI_GTIA_READ::P0PF
(byte) ATARI_GTIA_READ::P0PL
(byte) ATARI_GTIA_READ::P1PF
(byte) ATARI_GTIA_READ::P1PL
(byte) ATARI_GTIA_READ::P2PF
(byte) ATARI_GTIA_READ::P2PL
(byte) ATARI_GTIA_READ::P3PF
(byte) ATARI_GTIA_READ::P3PL
(byte) ATARI_GTIA_READ::PAL
(byte) ATARI_GTIA_READ::TRIG0
(byte) ATARI_GTIA_READ::TRIG1
(byte) ATARI_GTIA_READ::TRIG2
(byte) ATARI_GTIA_READ::TRIG3
(const byte*) ATARI_GTIA_READ::UNUSED[(number) $a]  = { fill( $a, 0) }
(byte) ATARI_GTIA_WRITE::COLBK
(byte) ATARI_GTIA_WRITE::COLPF0
(byte) ATARI_GTIA_WRITE::COLPF1
(byte) ATARI_GTIA_WRITE::COLPF2
(byte) ATARI_GTIA_WRITE::COLPF3
(byte) ATARI_GTIA_WRITE::COLPM0
(byte) ATARI_GTIA_WRITE::COLPM1
(byte) ATARI_GTIA_WRITE::COLPM2
(byte) ATARI_GTIA_WRITE::COLPM3
(byte) ATARI_GTIA_WRITE::CONSPK
(byte) ATARI_GTIA_WRITE::GRACTL
(byte) ATARI_GTIA_WRITE::GRAFM
(byte) ATARI_GTIA_WRITE::GRAFP0
(byte) ATARI_GTIA_WRITE::GRAFP1
(byte) ATARI_GTIA_WRITE::GRAFP2
(byte) ATARI_GTIA_WRITE::GRAFP3
(byte) ATARI_GTIA_WRITE::HITCLR
(byte) ATARI_GTIA_WRITE::HPOSM0
(byte) ATARI_GTIA_WRITE::HPOSM1
(byte) ATARI_GTIA_WRITE::HPOSM2
(byte) ATARI_GTIA_WRITE::HPOSM3
(byte) ATARI_GTIA_WRITE::HPOSP0
(byte) ATARI_GTIA_WRITE::HPOSP1
(byte) ATARI_GTIA_WRITE::HPOSP2
(byte) ATARI_GTIA_WRITE::HPOSP3
(byte) ATARI_GTIA_WRITE::PRIOR
(byte) ATARI_GTIA_WRITE::SIZEM
(byte) ATARI_GTIA_WRITE::SIZEP0
(byte) ATARI_GTIA_WRITE::SIZEP1
(byte) ATARI_GTIA_WRITE::SIZEP2
(byte) ATARI_GTIA_WRITE::SIZEP3
(byte) ATARI_GTIA_WRITE::VDELAY
(byte) ATARI_POKEY_READ::ALLPOT
(byte) ATARI_POKEY_READ::IRQST
(byte) ATARI_POKEY_READ::KBCODE
(byte) ATARI_POKEY_READ::POT0
(byte) ATARI_POKEY_READ::POT1
(byte) ATARI_POKEY_READ::POT2
(byte) ATARI_POKEY_READ::POT3
(byte) ATARI_POKEY_READ::POT4
(byte) ATARI_POKEY_READ::POT5
(byte) ATARI_POKEY_READ::POT6
(byte) ATARI_POKEY_READ::POT7
(byte) ATARI_POKEY_READ::RANDOM
(byte) ATARI_POKEY_READ::SERIN
(byte) ATARI_POKEY_READ::SKSTAT
(const byte*) ATARI_POKEY_READ::UNUSED[(number) 2]  = { fill( 2, 0) }
(byte) ATARI_POKEY_WRITE::AUDC1
(byte) ATARI_POKEY_WRITE::AUDC2
(byte) ATARI_POKEY_WRITE::AUDC3
(byte) ATARI_POKEY_WRITE::AUDC4
(byte) ATARI_POKEY_WRITE::AUDCTL
(byte) ATARI_POKEY_WRITE::AUDF1
(byte) ATARI_POKEY_WRITE::AUDF2
(byte) ATARI_POKEY_WRITE::AUDF3
(byte) ATARI_POKEY_WRITE::AUDF4
(byte) ATARI_POKEY_WRITE::IRQEN
(byte) ATARI_POKEY_WRITE::POTGO
(byte) ATARI_POKEY_WRITE::SEROUT
(byte) ATARI_POKEY_WRITE::SKCTL
(byte) ATARI_POKEY_WRITE::SKREST
(byte) ATARI_POKEY_WRITE::STIMER
(byte) ATARI_POKEY_WRITE::UNUSED
(const byte*) DISPLAY_LIST[]  = { (byte) $70, (byte) $70, (byte) $70, (byte) $47, <(const byte*) TEXT, >(const byte*) TEXT, (byte) $70, (byte) 2, (byte) $41, <(const byte*) DISPLAY_LIST, >(const byte*) DISPLAY_LIST }
(const nomodify byte**) SDLST = (byte**)(number) $230
(const nomodify byte*) SDMCTL = (byte*)(number) $22f
(const byte*) TEXT[]  = (byte*) "HELLO atari 8BITDemonstrates ANTIC display list"sa
(void()) __start()
(label) __start::@1
(label) __start::@2
(label) __start::@return
(label) __start::__init1
(void()) main()
(bool~) main::$0
(label) main::@1
(label) main::@return

Adding number conversion cast (unumber) $21 in *((const nomodify byte*) SDMCTL) ← (number) $21
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast *((const nomodify byte*) SDMCTL) ← (unumber)(number) $21
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 559
Simplifying constant pointer cast (byte**) 560
Simplifying constant integer cast $21
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $21
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simple Condition (bool~) main::$0 [3] if((number) 0!=(number) 1) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
if() condition always true - replacing block destination [3] if((number) 0!=(number) 1) goto main::@1
Successful SSA optimization Pass2ConstantIfs
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding NOP phi() at start of main::@1
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Adding NOP phi() at start of main::@1

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] *((const nomodify byte*) SDMCTL) ← (byte) $21
  [1] *((const nomodify byte**) SDLST) ← (const byte*) DISPLAY_LIST
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [2] phi()
  to:main::@1


VARIABLE REGISTER WEIGHTS
(byte) ATARI_ANTIC::CHACTL
(byte) ATARI_ANTIC::CHBASE
(byte*) ATARI_ANTIC::DLIST
(byte) ATARI_ANTIC::DMACTL
(byte) ATARI_ANTIC::HSCROL
(byte) ATARI_ANTIC::NMIEN
(byte) ATARI_ANTIC::NMIST
(byte) ATARI_ANTIC::PENH
(byte) ATARI_ANTIC::PENV
(byte) ATARI_ANTIC::PMBASE
(byte) ATARI_ANTIC::UNUSED1
(byte) ATARI_ANTIC::UNUSED2
(byte) ATARI_ANTIC::VCOUNT
(byte) ATARI_ANTIC::VSCROL
(byte) ATARI_ANTIC::WSYNC
(byte) ATARI_GTIA_READ::CONSOL
(byte) ATARI_GTIA_READ::M0PF
(byte) ATARI_GTIA_READ::M0PL
(byte) ATARI_GTIA_READ::M1PF
(byte) ATARI_GTIA_READ::M1PL
(byte) ATARI_GTIA_READ::M2PF
(byte) ATARI_GTIA_READ::M2PL
(byte) ATARI_GTIA_READ::M3PF
(byte) ATARI_GTIA_READ::M3PL
(byte) ATARI_GTIA_READ::P0PF
(byte) ATARI_GTIA_READ::P0PL
(byte) ATARI_GTIA_READ::P1PF
(byte) ATARI_GTIA_READ::P1PL
(byte) ATARI_GTIA_READ::P2PF
(byte) ATARI_GTIA_READ::P2PL
(byte) ATARI_GTIA_READ::P3PF
(byte) ATARI_GTIA_READ::P3PL
(byte) ATARI_GTIA_READ::PAL
(byte) ATARI_GTIA_READ::TRIG0
(byte) ATARI_GTIA_READ::TRIG1
(byte) ATARI_GTIA_READ::TRIG2
(byte) ATARI_GTIA_READ::TRIG3
(byte) ATARI_GTIA_WRITE::COLBK
(byte) ATARI_GTIA_WRITE::COLPF0
(byte) ATARI_GTIA_WRITE::COLPF1
(byte) ATARI_GTIA_WRITE::COLPF2
(byte) ATARI_GTIA_WRITE::COLPF3
(byte) ATARI_GTIA_WRITE::COLPM0
(byte) ATARI_GTIA_WRITE::COLPM1
(byte) ATARI_GTIA_WRITE::COLPM2
(byte) ATARI_GTIA_WRITE::COLPM3
(byte) ATARI_GTIA_WRITE::CONSPK
(byte) ATARI_GTIA_WRITE::GRACTL
(byte) ATARI_GTIA_WRITE::GRAFM
(byte) ATARI_GTIA_WRITE::GRAFP0
(byte) ATARI_GTIA_WRITE::GRAFP1
(byte) ATARI_GTIA_WRITE::GRAFP2
(byte) ATARI_GTIA_WRITE::GRAFP3
(byte) ATARI_GTIA_WRITE::HITCLR
(byte) ATARI_GTIA_WRITE::HPOSM0
(byte) ATARI_GTIA_WRITE::HPOSM1
(byte) ATARI_GTIA_WRITE::HPOSM2
(byte) ATARI_GTIA_WRITE::HPOSM3
(byte) ATARI_GTIA_WRITE::HPOSP0
(byte) ATARI_GTIA_WRITE::HPOSP1
(byte) ATARI_GTIA_WRITE::HPOSP2
(byte) ATARI_GTIA_WRITE::HPOSP3
(byte) ATARI_GTIA_WRITE::PRIOR
(byte) ATARI_GTIA_WRITE::SIZEM
(byte) ATARI_GTIA_WRITE::SIZEP0
(byte) ATARI_GTIA_WRITE::SIZEP1
(byte) ATARI_GTIA_WRITE::SIZEP2
(byte) ATARI_GTIA_WRITE::SIZEP3
(byte) ATARI_GTIA_WRITE::VDELAY
(byte) ATARI_POKEY_READ::ALLPOT
(byte) ATARI_POKEY_READ::IRQST
(byte) ATARI_POKEY_READ::KBCODE
(byte) ATARI_POKEY_READ::POT0
(byte) ATARI_POKEY_READ::POT1
(byte) ATARI_POKEY_READ::POT2
(byte) ATARI_POKEY_READ::POT3
(byte) ATARI_POKEY_READ::POT4
(byte) ATARI_POKEY_READ::POT5
(byte) ATARI_POKEY_READ::POT6
(byte) ATARI_POKEY_READ::POT7
(byte) ATARI_POKEY_READ::RANDOM
(byte) ATARI_POKEY_READ::SERIN
(byte) ATARI_POKEY_READ::SKSTAT
(byte) ATARI_POKEY_WRITE::AUDC1
(byte) ATARI_POKEY_WRITE::AUDC2
(byte) ATARI_POKEY_WRITE::AUDC3
(byte) ATARI_POKEY_WRITE::AUDC4
(byte) ATARI_POKEY_WRITE::AUDCTL
(byte) ATARI_POKEY_WRITE::AUDF1
(byte) ATARI_POKEY_WRITE::AUDF2
(byte) ATARI_POKEY_WRITE::AUDF3
(byte) ATARI_POKEY_WRITE::AUDF4
(byte) ATARI_POKEY_WRITE::IRQEN
(byte) ATARI_POKEY_WRITE::POTGO
(byte) ATARI_POKEY_WRITE::SEROUT
(byte) ATARI_POKEY_WRITE::SKCTL
(byte) ATARI_POKEY_WRITE::SKREST
(byte) ATARI_POKEY_WRITE::STIMER
(byte) ATARI_POKEY_WRITE::UNUSED
(void()) main()

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is atarixl / MOS6502X
  // File Comments
// Hello World for Atari XL / XE
// XEX file format https://www.atarimax.com/jindroush.atari.org/afmtexe.html
// Minimal Hello World https://atariage.com/forums/topic/229742-help-with-hello-world-in-mads/
// Display Lists atariarchives.org/mapping/appendix8.php
  // Upstart
  // Atari XL/XE XEX file minimal file
// https://www.atarimax.com/jindroush.atari.org/afmtexe.html
.file [name="helloxl.xex", type="bin", segments="XexFile"]
.segmentdef XexFile
.segment XexFile
// Binary File Header
.byte $ff, $ff
// Program segment [start address, end address, data]
.word ProgramStart, ProgramEnd-1
.segmentout [ segments="Program" ]
// RunAd - Run Address Segment [start address, end address, data]
.word $02e0, $02e1
.word main
.segmentdef Program [segments="ProgramStart, Code, Data, ProgramEnd"]
.segmentdef ProgramStart [start=$2000]
.segment ProgramStart
ProgramStart:
.segmentdef Code [startAfter="ProgramStart"]
.segmentdef Data [startAfter="Code"]
.segmentdef ProgramEnd [startAfter="Data"]
.segment ProgramEnd
ProgramEnd:

  // Global Constants & labels
  // OS Shadow ANTIC Direct Memory Access Control ($D400)
  .label SDMCTL = $22f
  // OS Shadow ANTIC Display List Pointer ($D402)
  .label SDLST = $230
.segment Code
  // main
main: {
    // [0] *((const nomodify byte*) SDMCTL) ← (byte) $21 -- _deref_pbuc1=vbuc2 
    // Enable DMA, Narrow Playfield into Shadow ANTIC Direct Memory Access Control
    lda #$21
    sta SDMCTL
    // [1] *((const nomodify byte**) SDLST) ← (const byte*) DISPLAY_LIST -- _deref_qbuc1=pbuc2 
    // Set Shadow ANTIC Display List Pointer
    lda #<DISPLAY_LIST
    sta SDLST
    lda #>DISPLAY_LIST
    sta SDLST+1
    // [2] phi from main main::@1 to main::@1 [phi:main/main::@1->main::@1]
  __b1_from_main:
  __b1_from___b1:
    jmp __b1
  // Loop forever
    // main::@1
  __b1:
    jmp __b1_from___b1
}
  // File Data
.segment Data
  // Message to show
.encoding "ascii"
  TEXT: .text @"\$28\$25\$2c\$2c\$2f\$00atari\$00\$18\$22\$29\$34\$24emonstrates\$00\$21\$2e\$34\$29\$23\$00display\$00list"
  .byte 0
  // ANTIC Display List Program
  // https://en.wikipedia.org/wiki/ANTIC
  DISPLAY_LIST: .byte $70, $70, $70, $47, <TEXT, >TEXT, $70, 2, $41, <DISPLAY_LIST, >DISPLAY_LIST

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *((const nomodify byte*) SDMCTL) ← (byte) $21 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *((const nomodify byte**) SDLST) ← (const byte*) DISPLAY_LIST [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [ATARI_ANTIC] 
Uplift Scope [ATARI_GTIA_READ] 
Uplift Scope [ATARI_GTIA_WRITE] 
Uplift Scope [ATARI_POKEY_READ] 
Uplift Scope [ATARI_POKEY_WRITE] 
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [ATARI_ANTIC] best 78 combination 
Uplifting [ATARI_GTIA_READ] best 78 combination 
Uplifting [ATARI_GTIA_WRITE] best 78 combination 
Uplifting [ATARI_POKEY_READ] best 78 combination 
Uplifting [ATARI_POKEY_WRITE] best 78 combination 
Uplifting [main] best 78 combination 
Uplifting [] best 78 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Hello World for Atari XL / XE
// XEX file format https://www.atarimax.com/jindroush.atari.org/afmtexe.html
// Minimal Hello World https://atariage.com/forums/topic/229742-help-with-hello-world-in-mads/
// Display Lists atariarchives.org/mapping/appendix8.php
  // Upstart
  // Atari XL/XE XEX file minimal file
// https://www.atarimax.com/jindroush.atari.org/afmtexe.html
.file [name="helloxl.xex", type="bin", segments="XexFile"]
.segmentdef XexFile
.segment XexFile
// Binary File Header
.byte $ff, $ff
// Program segment [start address, end address, data]
.word ProgramStart, ProgramEnd-1
.segmentout [ segments="Program" ]
// RunAd - Run Address Segment [start address, end address, data]
.word $02e0, $02e1
.word main
.segmentdef Program [segments="ProgramStart, Code, Data, ProgramEnd"]
.segmentdef ProgramStart [start=$2000]
.segment ProgramStart
ProgramStart:
.segmentdef Code [startAfter="ProgramStart"]
.segmentdef Data [startAfter="Code"]
.segmentdef ProgramEnd [startAfter="Data"]
.segment ProgramEnd
ProgramEnd:

  // Global Constants & labels
  // OS Shadow ANTIC Direct Memory Access Control ($D400)
  .label SDMCTL = $22f
  // OS Shadow ANTIC Display List Pointer ($D402)
  .label SDLST = $230
.segment Code
  // main
main: {
    // [0] *((const nomodify byte*) SDMCTL) ← (byte) $21 -- _deref_pbuc1=vbuc2 
    // Enable DMA, Narrow Playfield into Shadow ANTIC Direct Memory Access Control
    lda #$21
    sta SDMCTL
    // [1] *((const nomodify byte**) SDLST) ← (const byte*) DISPLAY_LIST -- _deref_qbuc1=pbuc2 
    // Set Shadow ANTIC Display List Pointer
    lda #<DISPLAY_LIST
    sta SDLST
    lda #>DISPLAY_LIST
    sta SDLST+1
    // [2] phi from main main::@1 to main::@1 [phi:main/main::@1->main::@1]
  __b1_from_main:
  __b1_from___b1:
    jmp __b1
  // Loop forever
    // main::@1
  __b1:
    jmp __b1_from___b1
}
  // File Data
.segment Data
  // Message to show
.encoding "ascii"
  TEXT: .text @"\$28\$25\$2c\$2c\$2f\$00atari\$00\$18\$22\$29\$34\$24emonstrates\$00\$21\$2e\$34\$29\$23\$00display\$00list"
  .byte 0
  // ANTIC Display List Program
  // https://en.wikipedia.org/wiki/ANTIC
  DISPLAY_LIST: .byte $70, $70, $70, $47, <TEXT, >TEXT, $70, 2, $41, <DISPLAY_LIST, >DISPLAY_LIST

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from_main:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1:
Succesful ASM optimization Pass5UnusedLabelElimination
Relabelling long label __b1_from___b1 to __b1
Succesful ASM optimization Pass5RelabelLongLabels

FINAL SYMBOL TABLE
(byte) ATARI_ANTIC::CHACTL
(byte) ATARI_ANTIC::CHBASE
(byte*) ATARI_ANTIC::DLIST
(byte) ATARI_ANTIC::DMACTL
(byte) ATARI_ANTIC::HSCROL
(byte) ATARI_ANTIC::NMIEN
(byte) ATARI_ANTIC::NMIST
(byte) ATARI_ANTIC::PENH
(byte) ATARI_ANTIC::PENV
(byte) ATARI_ANTIC::PMBASE
(byte) ATARI_ANTIC::UNUSED1
(byte) ATARI_ANTIC::UNUSED2
(byte) ATARI_ANTIC::VCOUNT
(byte) ATARI_ANTIC::VSCROL
(byte) ATARI_ANTIC::WSYNC
(byte) ATARI_GTIA_READ::CONSOL
(byte) ATARI_GTIA_READ::M0PF
(byte) ATARI_GTIA_READ::M0PL
(byte) ATARI_GTIA_READ::M1PF
(byte) ATARI_GTIA_READ::M1PL
(byte) ATARI_GTIA_READ::M2PF
(byte) ATARI_GTIA_READ::M2PL
(byte) ATARI_GTIA_READ::M3PF
(byte) ATARI_GTIA_READ::M3PL
(byte) ATARI_GTIA_READ::P0PF
(byte) ATARI_GTIA_READ::P0PL
(byte) ATARI_GTIA_READ::P1PF
(byte) ATARI_GTIA_READ::P1PL
(byte) ATARI_GTIA_READ::P2PF
(byte) ATARI_GTIA_READ::P2PL
(byte) ATARI_GTIA_READ::P3PF
(byte) ATARI_GTIA_READ::P3PL
(byte) ATARI_GTIA_READ::PAL
(byte) ATARI_GTIA_READ::TRIG0
(byte) ATARI_GTIA_READ::TRIG1
(byte) ATARI_GTIA_READ::TRIG2
(byte) ATARI_GTIA_READ::TRIG3
(const byte*) ATARI_GTIA_READ::UNUSED[(number) $a]  = { fill( $a, 0) }
(byte) ATARI_GTIA_WRITE::COLBK
(byte) ATARI_GTIA_WRITE::COLPF0
(byte) ATARI_GTIA_WRITE::COLPF1
(byte) ATARI_GTIA_WRITE::COLPF2
(byte) ATARI_GTIA_WRITE::COLPF3
(byte) ATARI_GTIA_WRITE::COLPM0
(byte) ATARI_GTIA_WRITE::COLPM1
(byte) ATARI_GTIA_WRITE::COLPM2
(byte) ATARI_GTIA_WRITE::COLPM3
(byte) ATARI_GTIA_WRITE::CONSPK
(byte) ATARI_GTIA_WRITE::GRACTL
(byte) ATARI_GTIA_WRITE::GRAFM
(byte) ATARI_GTIA_WRITE::GRAFP0
(byte) ATARI_GTIA_WRITE::GRAFP1
(byte) ATARI_GTIA_WRITE::GRAFP2
(byte) ATARI_GTIA_WRITE::GRAFP3
(byte) ATARI_GTIA_WRITE::HITCLR
(byte) ATARI_GTIA_WRITE::HPOSM0
(byte) ATARI_GTIA_WRITE::HPOSM1
(byte) ATARI_GTIA_WRITE::HPOSM2
(byte) ATARI_GTIA_WRITE::HPOSM3
(byte) ATARI_GTIA_WRITE::HPOSP0
(byte) ATARI_GTIA_WRITE::HPOSP1
(byte) ATARI_GTIA_WRITE::HPOSP2
(byte) ATARI_GTIA_WRITE::HPOSP3
(byte) ATARI_GTIA_WRITE::PRIOR
(byte) ATARI_GTIA_WRITE::SIZEM
(byte) ATARI_GTIA_WRITE::SIZEP0
(byte) ATARI_GTIA_WRITE::SIZEP1
(byte) ATARI_GTIA_WRITE::SIZEP2
(byte) ATARI_GTIA_WRITE::SIZEP3
(byte) ATARI_GTIA_WRITE::VDELAY
(byte) ATARI_POKEY_READ::ALLPOT
(byte) ATARI_POKEY_READ::IRQST
(byte) ATARI_POKEY_READ::KBCODE
(byte) ATARI_POKEY_READ::POT0
(byte) ATARI_POKEY_READ::POT1
(byte) ATARI_POKEY_READ::POT2
(byte) ATARI_POKEY_READ::POT3
(byte) ATARI_POKEY_READ::POT4
(byte) ATARI_POKEY_READ::POT5
(byte) ATARI_POKEY_READ::POT6
(byte) ATARI_POKEY_READ::POT7
(byte) ATARI_POKEY_READ::RANDOM
(byte) ATARI_POKEY_READ::SERIN
(byte) ATARI_POKEY_READ::SKSTAT
(const byte*) ATARI_POKEY_READ::UNUSED[(number) 2]  = { fill( 2, 0) }
(byte) ATARI_POKEY_WRITE::AUDC1
(byte) ATARI_POKEY_WRITE::AUDC2
(byte) ATARI_POKEY_WRITE::AUDC3
(byte) ATARI_POKEY_WRITE::AUDC4
(byte) ATARI_POKEY_WRITE::AUDCTL
(byte) ATARI_POKEY_WRITE::AUDF1
(byte) ATARI_POKEY_WRITE::AUDF2
(byte) ATARI_POKEY_WRITE::AUDF3
(byte) ATARI_POKEY_WRITE::AUDF4
(byte) ATARI_POKEY_WRITE::IRQEN
(byte) ATARI_POKEY_WRITE::POTGO
(byte) ATARI_POKEY_WRITE::SEROUT
(byte) ATARI_POKEY_WRITE::SKCTL
(byte) ATARI_POKEY_WRITE::SKREST
(byte) ATARI_POKEY_WRITE::STIMER
(byte) ATARI_POKEY_WRITE::UNUSED
(const byte*) DISPLAY_LIST[]  = { (byte) $70, (byte) $70, (byte) $70, (byte) $47, <(const byte*) TEXT, >(const byte*) TEXT, (byte) $70, (byte) 2, (byte) $41, <(const byte*) DISPLAY_LIST, >(const byte*) DISPLAY_LIST }
(const nomodify byte**) SDLST = (byte**) 560
(const nomodify byte*) SDMCTL = (byte*) 559
(const byte*) TEXT[]  = (byte*) "HELLO atari 8BITDemonstrates ANTIC display list"sa
(void()) main()
(label) main::@1



FINAL ASSEMBLER
Score: 48

  // File Comments
// Hello World for Atari XL / XE
// XEX file format https://www.atarimax.com/jindroush.atari.org/afmtexe.html
// Minimal Hello World https://atariage.com/forums/topic/229742-help-with-hello-world-in-mads/
// Display Lists atariarchives.org/mapping/appendix8.php
  // Upstart
  // Atari XL/XE XEX file minimal file
// https://www.atarimax.com/jindroush.atari.org/afmtexe.html
.file [name="helloxl.xex", type="bin", segments="XexFile"]
.segmentdef XexFile
.segment XexFile
// Binary File Header
.byte $ff, $ff
// Program segment [start address, end address, data]
.word ProgramStart, ProgramEnd-1
.segmentout [ segments="Program" ]
// RunAd - Run Address Segment [start address, end address, data]
.word $02e0, $02e1
.word main
.segmentdef Program [segments="ProgramStart, Code, Data, ProgramEnd"]
.segmentdef ProgramStart [start=$2000]
.segment ProgramStart
ProgramStart:
.segmentdef Code [startAfter="ProgramStart"]
.segmentdef Data [startAfter="Code"]
.segmentdef ProgramEnd [startAfter="Data"]
.segment ProgramEnd
ProgramEnd:

  // Global Constants & labels
  // OS Shadow ANTIC Direct Memory Access Control ($D400)
  .label SDMCTL = $22f
  // OS Shadow ANTIC Display List Pointer ($D402)
  .label SDLST = $230
.segment Code
  // main
main: {
    // *SDMCTL = 0x21
    // [0] *((const nomodify byte*) SDMCTL) ← (byte) $21 -- _deref_pbuc1=vbuc2 
    // Enable DMA, Narrow Playfield into Shadow ANTIC Direct Memory Access Control
    lda #$21
    sta SDMCTL
    // *SDLST = DISPLAY_LIST
    // [1] *((const nomodify byte**) SDLST) ← (const byte*) DISPLAY_LIST -- _deref_qbuc1=pbuc2 
    // Set Shadow ANTIC Display List Pointer
    lda #<DISPLAY_LIST
    sta SDLST
    lda #>DISPLAY_LIST
    sta SDLST+1
    // [2] phi from main main::@1 to main::@1 [phi:main/main::@1->main::@1]
  __b1:
  // Loop forever
    // main::@1
    jmp __b1
}
  // File Data
.segment Data
  // Message to show
.encoding "ascii"
  TEXT: .text @"\$28\$25\$2c\$2c\$2f\$00atari\$00\$18\$22\$29\$34\$24emonstrates\$00\$21\$2e\$34\$29\$23\$00display\$00list"
  .byte 0
  // ANTIC Display List Program
  // https://en.wikipedia.org/wiki/ANTIC
  DISPLAY_LIST: .byte $70, $70, $70, $47, <TEXT, >TEXT, $70, 2, $41, <DISPLAY_LIST, >DISPLAY_LIST

