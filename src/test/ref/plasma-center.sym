__constant const char BLACK = 0
__constant char * const CHARSET = (char *) 8192
__constant char * const COLS = (char *) 55296
__constant unsigned int CORDIC_ATAN2_ANGLES_16[CORDIC_ITERATIONS_16] = kickasm {{ .for (var i=0; i<CORDIC_ITERATIONS_16; i++)
        .word 256*2*256*atan(1/pow(2,i))/PI/2
 }}
__constant const char CORDIC_ITERATIONS_16 = $f
__constant char * const D018 = (char *) 53272
__constant char *HEAP_TOP = (char *) 40960
char NUM_SQUARES
__constant char NUM_SQUARES#2 = $30 // NUM_SQUARES
__constant char OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL = $12
__constant char OFFSET_STRUCT_MOS6581_SID_CH3_FREQ = $e
__constant char OFFSET_STRUCT_MOS6581_SID_CH3_OSC = $1b
__constant char RADIX::BINARY = 2
__constant char RADIX::DECIMAL = $a
__constant char RADIX::HEXADECIMAL = $10
__constant char RADIX::OCTAL = 8
__constant char * const SCREEN1 = (char *) 10240
__constant char * const SCREEN2 = (char *) 11264
char *SCREEN_ANGLE
char *SCREEN_ANGLE#0 // SCREEN_ANGLE zp[2]:26 27.405405405405403
char *SCREEN_DIST
char *SCREEN_DIST#0 // SCREEN_DIST zp[2]:28 26.0
__constant struct MOS6581_SID * const SID = (struct MOS6581_SID *) 54272
__constant const char SID_CONTROL_NOISE = $80
__constant const char SINTABLE[$200] = kickasm {{ .for(var i=0;i<$200;i++)
        .byte round(127.5+127.5*sin(2*PI*i/256))
 }}
__constant char SIZEOF_UNSIGNED_INT = 2
unsigned int *SQUARES
void *SQUARES#0 // SQUARES zp[2]:23 16.14516129032258
void __start()
unsigned int atan2_16(int x , int y)
int atan2_16::$2 // zp[2]:4 200002.0
char atan2_16::$22 // reg byte a 2.00000002E8
char atan2_16::$23 // reg byte a 2.00000002E8
int atan2_16::$7 // zp[2]:10 200002.0
unsigned int atan2_16::angle
unsigned int atan2_16::angle#1 // angle zp[2]:8 150001.5
unsigned int atan2_16::angle#11 // angle zp[2]:8 200002.0
unsigned int atan2_16::angle#12 // angle zp[2]:8 1.904761923809524E7
unsigned int atan2_16::angle#13 // angle zp[2]:8 1.3333333466666667E8
unsigned int atan2_16::angle#2 // angle zp[2]:8 2.00000002E8
unsigned int atan2_16::angle#3 // angle zp[2]:8 2.00000002E8
unsigned int atan2_16::angle#4 // angle zp[2]:8 200002.0
unsigned int atan2_16::angle#5 // angle zp[2]:8 200002.0
unsigned int atan2_16::angle#6 // angle zp[2]:8 2.00100003E8
char atan2_16::i
char atan2_16::i#1 // reg byte x 1.500000015E8
char atan2_16::i#2 // reg byte x 2.0833333541666668E7
unsigned int atan2_16::return
unsigned int atan2_16::return#0 // return zp[2]:8 70001.0
unsigned int atan2_16::return#2 // return zp[2]:8 20002.0
char atan2_16::shift
char atan2_16::shift#1 // reg byte y 2.000000002E9
char atan2_16::shift#2 // reg byte y 8.0000000125E8
char atan2_16::shift#5 // reg byte y 6.6666667333333336E7
int atan2_16::x
int atan2_16::x#0 // x zp[2]:20 10789.605263157895
int atan2_16::xd
int atan2_16::xd#1 // xd zp[2]:2 6.666666673333334E8
int atan2_16::xd#10 // xd zp[2]:2 1.00000001E8
int atan2_16::xd#2 // xd zp[2]:2 1.00000001E8
int atan2_16::xd#3 // xd zp[2]:2 7.666666683333335E8
int atan2_16::xd#5 // xd zp[2]:2 1.00000001E8
int atan2_16::xi
int atan2_16::xi#0 // xi zp[2]:10 300003.0
int atan2_16::xi#1 // xi zp[2]:10 5.00000005E7
int atan2_16::xi#13 // xi zp[2]:10 200002.0
int atan2_16::xi#2 // xi zp[2]:10 5.00000005E7
int atan2_16::xi#3 // xi zp[2]:10 2.6673333666666668E7
int atan2_16::xi#8 // xi zp[2]:10 1.00000001E8
int atan2_16::y
int atan2_16::y#0 // y zp[2]:18 10250.125
int atan2_16::yd
int atan2_16::yd#1 // yd zp[2]:6 1.000000001E9
int atan2_16::yd#10 // yd zp[2]:6 2.00000002E8
int atan2_16::yd#2 // yd zp[2]:6 2.00000002E8
int atan2_16::yd#3 // yd zp[2]:6 4.6000000099999994E8
int atan2_16::yd#5 // yd zp[2]:6 2.00000002E8
int atan2_16::yi
int atan2_16::yi#0 // yi zp[2]:4 60000.600000000006
int atan2_16::yi#1 // yi zp[2]:4 6.6666667333333336E7
int atan2_16::yi#16 // yi zp[2]:4 200002.0
int atan2_16::yi#2 // yi zp[2]:4 6.6666667333333336E7
int atan2_16::yi#3 // yi zp[2]:4 3.53000004117647E7
int atan2_16::yi#8 // yi zp[2]:4 1.00000001E8
unsigned int * bsearch16u(unsigned int key , unsigned int *items , char num)
char bsearch16u::$14 // reg byte a 2.000000002E9
unsigned int *bsearch16u::$2 // zp[2]:4 2000002.0
char bsearch16u::$6 // reg byte a 2.000000002E9
unsigned int *bsearch16u::items
unsigned int *bsearch16u::items#0 // items zp[2]:4 1.000000001E9
unsigned int *bsearch16u::items#1 // items zp[2]:4 550001.0
unsigned int *bsearch16u::items#2 // items zp[2]:4 3.337777785555556E8
unsigned int *bsearch16u::items#8 // items zp[2]:4 1.5000000015E9
unsigned int bsearch16u::key
unsigned int bsearch16u::key#0 // key zp[2]:8 73333.46666666667
char bsearch16u::num
char bsearch16u::num#0 // reg byte x 2.000000002E9
char bsearch16u::num#1 // reg byte x 2.000000002E9
char bsearch16u::num#3 // reg byte x 5.555555561111112E8
char bsearch16u::num#5 // reg byte x 3.000000003E9
unsigned int *bsearch16u::pivot
unsigned int *bsearch16u::pivot#0 // pivot zp[2]:6 5.0025000075E8
int bsearch16u::result
int bsearch16u::result#0 // result zp[2]:2 1.5000000015E9
unsigned int *bsearch16u::return
unsigned int *bsearch16u::return#1 // return zp[2]:4 700001.0
unsigned int *bsearch16u::return#2 // return zp[2]:4 3000003.0
unsigned int *bsearch16u::return#3 // return zp[2]:4 200002.0
unsigned int *bsearch16u::return#7 // return zp[2]:4 2000002.0
void doplasma(char *screen)
char doplasma::$2 // reg byte a 2000002.0
char *doplasma::angle
char *doplasma::angle#0 // angle zp[2]:15 500.5
char *doplasma::angle#1 // angle zp[2]:15 50000.5
char *doplasma::angle#4 // angle zp[2]:15 171571.99999999997
char *doplasma::dist
char *doplasma::dist#0 // dist zp[2]:4 667.3333333333334
char *doplasma::dist#1 // dist zp[2]:4 66667.33333333333
char *doplasma::dist#4 // dist zp[2]:4 150125.5
char *doplasma::screen
char *doplasma::screen#2 // screen zp[2]:10 40000.4
char *doplasma::screen#5 // screen zp[2]:10 200167.33333333334
char *doplasma::screen#6 // screen zp[2]:10 200.2
char *doplasma::sin_x
char *doplasma::sin_x#0 // sin_x zp[2]:20 77000.15384615384
char *doplasma::sin_y
char *doplasma::sin_y#0 // sin_y zp[2]:18 83416.83333333334
char doplasma::x
char doplasma::x#1 // reg byte x 1500001.5
char doplasma::x#2 // reg byte x 1666668.3333333335
char doplasma::y
char doplasma::y#1 // y zp[1]:17 150001.5
char doplasma::y#4 // y zp[1]:17 22222.444444444445
char *heap_head
char *heap_head#0 // heap_head zp[2]:15 1100.4
char *heap_head#13 // heap_head zp[2]:15 11004.0
void init_angle_screen(char *screen)
char init_angle_screen::$11 // reg byte a 20002.0
char init_angle_screen::$12 // reg byte a 20002.0
char init_angle_screen::$13 // reg byte a 20002.0
char init_angle_screen::$3 // reg byte a 20002.0
char init_angle_screen::$4 // reg byte a 20002.0
char init_angle_screen::$6 // reg byte a 20002.0
unsigned int init_angle_screen::$9 // zp[2]:8 20002.0
char init_angle_screen::ang_w
char init_angle_screen::ang_w#0 // ang_w zp[1]:25 8334.166666666666
unsigned int init_angle_screen::angle_w
unsigned int init_angle_screen::angle_w#0 // angle_w zp[2]:8 20002.0
char *init_angle_screen::screen
char *init_angle_screen::screen#0 // screen zp[2]:12 112.0
char *init_angle_screen::screen_bottomline
char *init_angle_screen::screen_bottomline#0 // screen_bottomline zp[2]:12 151.5
char *init_angle_screen::screen_bottomline#1 // screen_bottomline zp[2]:12 667.3333333333334
char *init_angle_screen::screen_bottomline#6 // screen_bottomline zp[2]:12 884.2
char *init_angle_screen::screen_topline
char *init_angle_screen::screen_topline#1 // screen_topline zp[2]:23 500.5
char *init_angle_screen::screen_topline#6 // screen_topline zp[2]:23 921.0416666666666
char *init_angle_screen::screen_topline#7 // screen_topline zp[2]:23 202.0
char init_angle_screen::x
char init_angle_screen::x#1 // x zp[1]:17 10001.0
char init_angle_screen::x#2 // x zp[1]:17 2857.4285714285716
char init_angle_screen::xb
char init_angle_screen::xb#1 // xb zp[1]:14 20002.0
char init_angle_screen::xb#2 // xb zp[1]:14 1818.3636363636363
int init_angle_screen::xw
unsigned int init_angle_screen::xw#0 // xw zp[2]:20 3333.6666666666665
char init_angle_screen::y
char init_angle_screen::y#1 // y zp[1]:22 1501.5
char init_angle_screen::y#5 // y zp[1]:22 461.65384615384613
int init_angle_screen::yw
unsigned int init_angle_screen::yw#0 // yw zp[2]:18 5000.5
void init_dist_screen(char *screen)
char init_dist_screen::$14 // reg byte a 20002.0
char init_dist_screen::$16 // reg byte a 20002.0
char init_dist_screen::$5 // reg byte a 2002.0
char init_dist_screen::$7 // reg byte a 2002.0
char init_dist_screen::d
char init_dist_screen::d#0 // reg byte a 12501.25
unsigned int init_dist_screen::ds
unsigned int init_dist_screen::ds#0 // ds zp[2]:8 20002.0
char *init_dist_screen::screen
char *init_dist_screen::screen#0 // screen zp[2]:12 53.25
char *init_dist_screen::screen_bottomline
char *init_dist_screen::screen_bottomline#0 // screen_bottomline zp[2]:15 202.0
char *init_dist_screen::screen_bottomline#1 // screen_bottomline zp[2]:15 667.3333333333334
char *init_dist_screen::screen_bottomline#11 // screen_bottomline zp[2]:15 669.8484848484848
char *init_dist_screen::screen_topline
char *init_dist_screen::screen_topline#1 // screen_topline zp[2]:12 500.5
char *init_dist_screen::screen_topline#11 // screen_topline zp[2]:12 690.78125
char init_dist_screen::x
char init_dist_screen::x#1 // x zp[1]:17 10001.0
char init_dist_screen::x#2 // x zp[1]:17 3000.3
char init_dist_screen::x2
char init_dist_screen::x2#0 // reg byte a 20002.0
char init_dist_screen::xb
char init_dist_screen::xb#1 // xb zp[1]:14 20002.0
char init_dist_screen::xb#2 // xb zp[1]:14 1904.952380952381
char init_dist_screen::xd
char init_dist_screen::xd#0 // reg byte a 30003.0
unsigned int init_dist_screen::xds
unsigned int init_dist_screen::xds#0 // xds zp[2]:8 20002.0
char init_dist_screen::y
char init_dist_screen::y#1 // y zp[1]:22 1501.5
char init_dist_screen::y#10 // y zp[1]:22 88.32352941176471
char init_dist_screen::y2
char init_dist_screen::y2#0 // reg byte a 2002.0
char init_dist_screen::yd
char init_dist_screen::yd#0 // reg byte a 3003.0
unsigned int init_dist_screen::yds
unsigned int init_dist_screen::yds#0 // yds zp[2]:10 478.3478260869565
void init_squares()
char init_squares::$3 // reg byte a 20002.0
char init_squares::$4 // reg byte a 20002.0
char init_squares::i
char init_squares::i#1 // reg byte x 20002.0
char init_squares::i#2 // reg byte x 5714.857142857143
unsigned int init_squares::sqr
unsigned int init_squares::sqr#1 // sqr zp[2]:4 10001.0
unsigned int init_squares::sqr#2 // sqr zp[2]:4 5000.5
unsigned int *init_squares::squares
unsigned int *init_squares::squares#0 // squares zp[2]:10 2002.0
unsigned int *init_squares::squares#1 // squares zp[2]:10 4000.4
unsigned int *init_squares::squares#2 // squares zp[2]:10 10334.666666666666
void main()
char *main::toD0181_gfx
char main::toD0181_return
__constant char main::toD0181_return#0 = byte1 (unsigned int)SCREEN1&$3fff*4|byte1 (unsigned int)CHARSET/4&$f // toD0181_return
char *main::toD0181_screen
char *main::toD0182_gfx
char main::toD0182_return
__constant char main::toD0182_return#0 = byte1 (unsigned int)SCREEN2&$3fff*4|byte1 (unsigned int)CHARSET/4&$f // toD0182_return
char *main::toD0182_screen
void make_plasma_charset(char *charset)
unsigned int make_plasma_charset::$10 // zp[2]:6 20002.0
unsigned int make_plasma_charset::$11 // zp[2]:6 20002.0
char make_plasma_charset::$12 // reg byte a 2002.0
char *make_plasma_charset::$16 // zp[2]:6 20002.0
char make_plasma_charset::$3 // reg byte x 2002.0
char make_plasma_charset::$7 // zp[1]:14 200002.0
char make_plasma_charset::b
char make_plasma_charset::b#1 // reg byte y 200002.0
char make_plasma_charset::b#2 // reg byte y 38750.5
char make_plasma_charset::b#6 // reg byte y 150001.5
__constant const char make_plasma_charset::bittab[8] = { 1, 2, 4, 8, $10, $20, $40, $80 }
unsigned int make_plasma_charset::c
unsigned int make_plasma_charset::c#1 // c zp[2]:15 2002.0
unsigned int make_plasma_charset::c#2 // c zp[2]:15 625.25
char *make_plasma_charset::charset
char make_plasma_charset::i
char make_plasma_charset::i#1 // i zp[1]:22 20002.0
char make_plasma_charset::i#2 // i zp[1]:22 2857.4285714285716
char make_plasma_charset::ii
char make_plasma_charset::ii#1 // reg byte x 200002.0
char make_plasma_charset::ii#2 // reg byte x 57143.42857142857
char make_plasma_charset::s
char make_plasma_charset::s#0 // s zp[1]:17 6312.625
char make_plasma_charset::sid_rnd1_return
char make_plasma_charset::sid_rnd1_return#0 // reg byte a 200002.0
void * malloc(unsigned int size)
char *malloc::mem
char *malloc::mem#0 // mem zp[2]:23 3333.6666666666665
void *malloc::return
unsigned int malloc::size
unsigned int malloc::size#3 // size zp[2]:23 10001.0
void * memset(void *str , char c , unsigned int num)
char memset::c
char memset::c#4 // reg byte x 14285.857142857143
char *memset::dst
char *memset::dst#1 // dst zp[2]:12 200002.0
char *memset::dst#2 // dst zp[2]:12 136668.3333333333
char *memset::dst#4 // dst zp[2]:12 20002.0
char *memset::end
char *memset::end#0 // end zp[2]:2 18333.666666666664
unsigned int memset::num
void *memset::return
void *memset::str
void *memset::str#3 // str zp[2]:12
void print_char(char ch)
char print_char::ch
__constant char print_char::ch#0 = '.' // ch
char *print_char_cursor
char *print_char_cursor#0 // print_char_cursor zp[2]:12 3667.333333333333
char *print_char_cursor#19 // print_char_cursor zp[2]:12 956.695652173913
char *print_char_cursor#32 // print_char_cursor zp[2]:12 1501.5
void print_cls()
char *print_line_cursor
char *print_screen
__constant char *print_screen#0 = (char *) 1024 // print_screen
char sin_offset_x
char sin_offset_x#10 // sin_offset_x zp[1]:22 101.0
char sin_offset_x#11 // sin_offset_x zp[1]:22 137.75
char sin_offset_x#13 // sin_offset_x zp[1]:22 133.66666666666669
char sin_offset_y
char sin_offset_y#10 // sin_offset_y zp[1]:25 101.0
char sin_offset_y#11 // sin_offset_y zp[1]:25 129.64705882352942
char sin_offset_y#13 // sin_offset_y zp[1]:25 150.375
unsigned int sqr(char val)
char sqr::$0 // reg byte a 200002.0
unsigned int sqr::return
unsigned int sqr::return#0 // return zp[2]:8 27750.75
unsigned int sqr::return#2 // return_1 zp[2]:10 2002.0
unsigned int sqr::return#3 // return zp[2]:8 20002.0
char sqr::val
char sqr::val#0 // reg byte a 2002.0
char sqr::val#1 // reg byte a 20002.0
char sqr::val#2 // reg byte a 111003.0
char sqrt(unsigned int val)
unsigned int sqrt::$1 // zp[2]:4 100001.0
unsigned int sqrt::$2 // zp[2]:4 200002.0
unsigned int *sqrt::found
unsigned int *sqrt::found#0 // found zp[2]:4 200002.0
char sqrt::return
char sqrt::return#0 // reg byte a 36667.33333333333
char sqrt::return#2 // reg byte a 20002.0
char sqrt::sq
unsigned int sqrt::val
unsigned int sqrt::val#0 // val zp[2]:8 110002.0

reg byte a [ init_dist_screen::yd#0 init_dist_screen::$7 init_dist_screen::$5 ]
reg byte a [ init_dist_screen::xd#0 init_dist_screen::$16 init_dist_screen::$14 ]
zp[2]:23 [ init_angle_screen::screen_topline#6 init_angle_screen::screen_topline#7 init_angle_screen::screen_topline#1 malloc::size#3 malloc::mem#0 SQUARES#0 ]
reg byte x [ make_plasma_charset::ii#2 make_plasma_charset::ii#1 ]
reg byte y [ make_plasma_charset::b#2 make_plasma_charset::b#6 make_plasma_charset::b#1 ]
zp[2]:12 [ memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 print_char_cursor#19 print_char_cursor#32 print_char_cursor#0 init_angle_screen::screen_bottomline#6 init_angle_screen::screen_bottomline#0 init_angle_screen::screen_bottomline#1 init_angle_screen::screen#0 init_dist_screen::screen_topline#11 init_dist_screen::screen#0 init_dist_screen::screen_topline#1 ]
reg byte x [ memset::c#4 ]
zp[1]:22 [ sin_offset_x#11 sin_offset_x#10 sin_offset_x#13 make_plasma_charset::i#2 make_plasma_charset::i#1 init_angle_screen::y#5 init_angle_screen::y#1 init_dist_screen::y#10 init_dist_screen::y#1 ]
zp[2]:15 [ doplasma::angle#4 doplasma::angle#0 doplasma::angle#1 make_plasma_charset::c#2 make_plasma_charset::c#1 init_dist_screen::screen_bottomline#11 init_dist_screen::screen_bottomline#0 init_dist_screen::screen_bottomline#1 heap_head#13 heap_head#0 ]
reg byte x [ doplasma::x#2 doplasma::x#1 ]
reg byte x [ init_squares::i#2 init_squares::i#1 ]
reg byte a [ sqr::val#2 sqr::val#1 sqr::val#0 ]
reg byte x [ atan2_16::i#2 atan2_16::i#1 ]
reg byte y [ atan2_16::shift#2 atan2_16::shift#5 atan2_16::shift#1 ]
zp[2]:4 [ bsearch16u::return#1 bsearch16u::return#2 bsearch16u::items#2 bsearch16u::items#1 bsearch16u::items#8 bsearch16u::$2 bsearch16u::return#7 bsearch16u::items#0 bsearch16u::return#3 sqrt::found#0 sqrt::$2 sqrt::$1 atan2_16::yi#3 atan2_16::yi#8 atan2_16::yi#0 atan2_16::yi#16 atan2_16::$2 atan2_16::yi#1 atan2_16::yi#2 init_squares::sqr#2 init_squares::sqr#1 doplasma::dist#4 doplasma::dist#0 doplasma::dist#1 ]
reg byte x [ bsearch16u::num#5 bsearch16u::num#1 bsearch16u::num#3 bsearch16u::num#0 ]
zp[2]:28 [ SCREEN_DIST#0 ]
zp[2]:26 [ SCREEN_ANGLE#0 ]
reg byte a [ init_dist_screen::y2#0 ]
zp[2]:10 [ sqr::return#2 init_dist_screen::yds#0 atan2_16::xi#3 atan2_16::xi#8 atan2_16::xi#0 atan2_16::xi#13 atan2_16::$7 atan2_16::xi#1 atan2_16::xi#2 init_squares::squares#2 init_squares::squares#1 init_squares::squares#0 doplasma::screen#5 doplasma::screen#6 doplasma::screen#2 ]
reg byte a [ init_dist_screen::x2#0 ]
zp[2]:8 [ sqr::return#3 init_dist_screen::xds#0 sqr::return#0 init_dist_screen::ds#0 sqrt::val#0 bsearch16u::key#0 atan2_16::angle#6 atan2_16::angle#12 atan2_16::angle#13 atan2_16::angle#2 atan2_16::angle#3 atan2_16::return#0 atan2_16::angle#11 atan2_16::angle#1 atan2_16::angle#4 atan2_16::angle#5 atan2_16::return#2 init_angle_screen::angle_w#0 init_angle_screen::$9 ]
reg byte a [ sqrt::return#2 ]
reg byte a [ init_dist_screen::d#0 ]
reg byte a [ init_angle_screen::$3 ]
reg byte a [ init_angle_screen::$4 ]
reg byte a [ init_angle_screen::$6 ]
zp[1]:25 [ init_angle_screen::ang_w#0 sin_offset_y#11 sin_offset_y#10 sin_offset_y#13 ]
reg byte a [ init_angle_screen::$11 ]
reg byte a [ init_angle_screen::$12 ]
reg byte a [ init_angle_screen::$13 ]
reg byte x [ make_plasma_charset::$3 ]
zp[1]:17 [ make_plasma_charset::s#0 doplasma::y#4 doplasma::y#1 init_angle_screen::x#2 init_angle_screen::x#1 init_dist_screen::x#2 init_dist_screen::x#1 ]
reg byte a [ make_plasma_charset::$12 ]
reg byte a [ make_plasma_charset::sid_rnd1_return#0 ]
zp[1]:14 [ make_plasma_charset::$7 init_angle_screen::xb#2 init_angle_screen::xb#1 init_dist_screen::xb#2 init_dist_screen::xb#1 ]
zp[2]:20 [ doplasma::sin_x#0 init_angle_screen::xw#0 atan2_16::x#0 ]
zp[2]:18 [ doplasma::sin_y#0 init_angle_screen::yw#0 atan2_16::y#0 ]
reg byte a [ doplasma::$2 ]
reg byte a [ init_squares::$3 ]
reg byte a [ init_squares::$4 ]
reg byte a [ sqr::$0 ]
reg byte a [ sqrt::return#0 ]
reg byte a [ atan2_16::$23 ]
reg byte a [ atan2_16::$22 ]
reg byte a [ bsearch16u::$6 ]
reg byte a [ bsearch16u::$14 ]
zp[2]:6 [ bsearch16u::pivot#0 make_plasma_charset::$10 make_plasma_charset::$11 make_plasma_charset::$16 atan2_16::yd#5 atan2_16::yd#3 atan2_16::yd#10 atan2_16::yd#1 atan2_16::yd#2 ]
zp[2]:2 [ bsearch16u::result#0 memset::end#0 atan2_16::xd#5 atan2_16::xd#3 atan2_16::xd#10 atan2_16::xd#1 atan2_16::xd#2 ]
