void main() {
  byte i=10;
  byte s=0;
  do {
    if(i>5) {
      s=s+i;
    }
    i--;
  } while (i>0)
}
Adding pre/post-modifier (byte) main::i ← -- (byte) main::i
PROGRAM
proc (void()) main()
  (byte) main::i ← (byte) 10
  (byte) main::s ← (byte) 0
main::@1:
  (boolean~) main::$0 ← (byte) main::i > (byte) 5
  (boolean~) main::$1 ← ! (boolean~) main::$0
  if((boolean~) main::$1) goto main::@2
  (byte~) main::$2 ← (byte) main::s + (byte) main::i
  (byte) main::s ← (byte~) main::$2
main::@2:
  (byte) main::i ← -- (byte) main::i
  (boolean~) main::$3 ← (byte) main::i > (byte) 0
  if((boolean~) main::$3) goto main::@1
main::@return:
  return 
endproc // main()
  call main 

SYMBOLS
(void()) main()
(boolean~) main::$0
(boolean~) main::$1
(byte~) main::$2
(boolean~) main::$3
(label) main::@1
(label) main::@2
(label) main::@return
(byte) main::i
(byte) main::s

INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from
  (byte) main::i ← (byte) 10
  (byte) main::s ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (boolean~) main::$0 ← (byte) main::i > (byte) 5
  (boolean~) main::$1 ← ! (boolean~) main::$0
  if((boolean~) main::$1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::i ← -- (byte) main::i
  (boolean~) main::$3 ← (byte) main::i > (byte) 0
  if((boolean~) main::$3) goto main::@1
  to:main::@4
main::@3: scope:[main]  from main::@1
  (byte~) main::$2 ← (byte) main::s + (byte) main::i
  (byte) main::s ← (byte~) main::$2
  to:main::@2
main::@4: scope:[main]  from main::@2
  to:main::@return
main::@return: scope:[main]  from main::@4
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@end
@end: scope:[]  from @1

Removing empty block main::@4
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from
  (byte) main::i ← (byte) 10
  (byte) main::s ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (boolean~) main::$0 ← (byte) main::i > (byte) 5
  (boolean~) main::$1 ← ! (boolean~) main::$0
  if((boolean~) main::$1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::i ← -- (byte) main::i
  (boolean~) main::$3 ← (byte) main::i > (byte) 0
  if((boolean~) main::$3) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte~) main::$2 ← (byte) main::s + (byte) main::i
  (byte) main::s ← (byte~) main::$2
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@end
@end: scope:[]  from @1

PROCEDURE MODIFY VARIABLE ANALYSIS

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte) main::i ← (byte) 10
  (byte) main::s ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (boolean~) main::$0 ← (byte) main::i > (byte) 5
  (boolean~) main::$1 ← ! (boolean~) main::$0
  if((boolean~) main::$1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::i ← -- (byte) main::i
  (boolean~) main::$3 ← (byte) main::i > (byte) 0
  if((boolean~) main::$3) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte~) main::$2 ← (byte) main::s + (byte) main::i
  (byte) main::s ← (byte~) main::$2
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte) main::i#0 ← (byte) 10
  (byte) main::s#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::s#3 ← phi( main/(byte) main::s#0 main::@2/(byte) main::s#4 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  (boolean~) main::$0 ← (byte) main::i#2 > (byte) 5
  (boolean~) main::$1 ← ! (boolean~) main::$0
  if((boolean~) main::$1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::s#4 ← phi( main::@1/(byte) main::s#3 main::@3/(byte) main::s#1 )
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 main::@3/(byte) main::i#4 )
  (byte) main::i#1 ← -- (byte) main::i#3
  (boolean~) main::$3 ← (byte) main::i#1 > (byte) 0
  if((boolean~) main::$3) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte) main::i#4 ← phi( main::@1/(byte) main::i#2 )
  (byte) main::s#2 ← phi( main::@1/(byte) main::s#3 )
  (byte~) main::$2 ← (byte) main::s#2 + (byte) main::i#4
  (byte) main::s#1 ← (byte~) main::$2
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte) main::i#0 ← (byte) 10
  (byte) main::s#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::s#3 ← phi( main/(byte) main::s#0 main::@2/(byte) main::s#4 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  (boolean~) main::$0 ← (byte) main::i#2 > (byte) 5
  (boolean~) main::$1 ← ! (boolean~) main::$0
  if((boolean~) main::$1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::s#4 ← phi( main::@1/(byte) main::s#3 main::@3/(byte) main::s#1 )
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 main::@3/(byte) main::i#4 )
  (byte) main::i#1 ← -- (byte) main::i#3
  (boolean~) main::$3 ← (byte) main::i#1 > (byte) 0
  if((boolean~) main::$3) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte) main::i#4 ← phi( main::@1/(byte) main::i#2 )
  (byte) main::s#2 ← phi( main::@1/(byte) main::s#3 )
  (byte~) main::$2 ← (byte) main::s#2 + (byte) main::i#4
  (byte) main::s#1 ← (byte~) main::$2
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

INITIAL SSA SYMBOL TABLE
(label) @1
(label) @2
(label) @begin
(label) @end
(void()) main()
(boolean~) main::$0
(boolean~) main::$1
(byte~) main::$2
(boolean~) main::$3
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3
(byte) main::i#4
(byte) main::s
(byte) main::s#0
(byte) main::s#1
(byte) main::s#2
(byte) main::s#3
(byte) main::s#4

Culled Empty Block (label) @2
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte) main::i#0 ← (byte) 10
  (byte) main::s#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::s#3 ← phi( main/(byte) main::s#0 main::@2/(byte) main::s#4 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  (boolean~) main::$0 ← (byte) main::i#2 > (byte) 5
  (boolean~) main::$1 ← ! (boolean~) main::$0
  if((boolean~) main::$1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::s#4 ← phi( main::@1/(byte) main::s#3 main::@3/(byte) main::s#1 )
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 main::@3/(byte) main::i#4 )
  (byte) main::i#1 ← -- (byte) main::i#3
  (boolean~) main::$3 ← (byte) main::i#1 > (byte) 0
  if((boolean~) main::$3) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte) main::i#4 ← phi( main::@1/(byte) main::i#2 )
  (byte) main::s#2 ← phi( main::@1/(byte) main::s#3 )
  (byte~) main::$2 ← (byte) main::s#2 + (byte) main::i#4
  (byte) main::s#1 ← (byte~) main::$2
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Inversing boolean not (boolean~) main::$1 ← (byte) main::i#2 <= (byte) 5 from (boolean~) main::$0 ← (byte) main::i#2 > (byte) 5
Succesful SSA optimization Pass2UnaryNotSimplification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte) main::i#0 ← (byte) 10
  (byte) main::s#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::s#3 ← phi( main/(byte) main::s#0 main::@2/(byte) main::s#4 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  (boolean~) main::$1 ← (byte) main::i#2 <= (byte) 5
  if((boolean~) main::$1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::s#4 ← phi( main::@1/(byte) main::s#3 main::@3/(byte) main::s#1 )
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 main::@3/(byte) main::i#4 )
  (byte) main::i#1 ← -- (byte) main::i#3
  (boolean~) main::$3 ← (byte) main::i#1 > (byte) 0
  if((boolean~) main::$3) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte) main::i#4 ← phi( main::@1/(byte) main::i#2 )
  (byte) main::s#2 ← phi( main::@1/(byte) main::s#3 )
  (byte~) main::$2 ← (byte) main::s#2 + (byte) main::i#4
  (byte) main::s#1 ← (byte~) main::$2
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Alias (byte) main::s#2 = (byte) main::s#3 
Alias (byte) main::i#2 = (byte) main::i#4 
Alias (byte) main::s#1 = (byte~) main::$2 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte) main::i#0 ← (byte) 10
  (byte) main::s#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::s#2 ← phi( main/(byte) main::s#0 main::@2/(byte) main::s#4 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  (boolean~) main::$1 ← (byte) main::i#2 <= (byte) 5
  if((boolean~) main::$1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::s#4 ← phi( main::@1/(byte) main::s#2 main::@3/(byte) main::s#1 )
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 main::@3/(byte) main::i#2 )
  (byte) main::i#1 ← -- (byte) main::i#3
  (boolean~) main::$3 ← (byte) main::i#1 > (byte) 0
  if((boolean~) main::$3) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte) main::s#1 ← (byte) main::s#2 + (byte) main::i#2
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Alias (byte) main::i#2 = (byte) main::i#3 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte) main::i#0 ← (byte) 10
  (byte) main::s#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::s#2 ← phi( main/(byte) main::s#0 main::@2/(byte) main::s#4 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  (boolean~) main::$1 ← (byte) main::i#2 <= (byte) 5
  if((boolean~) main::$1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::s#4 ← phi( main::@1/(byte) main::s#2 main::@3/(byte) main::s#1 )
  (byte) main::i#1 ← -- (byte) main::i#2
  (boolean~) main::$3 ← (byte) main::i#1 > (byte) 0
  if((boolean~) main::$3) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte) main::s#1 ← (byte) main::s#2 + (byte) main::i#2
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Simple Condition (boolean~) main::$1 if((byte) main::i#2<=(byte) 5) goto main::@2
Simple Condition (boolean~) main::$3 if((byte) main::i#1>(byte) 0) goto main::@1
Succesful SSA optimization Pass2ConditionalJumpSimplification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte) main::i#0 ← (byte) 10
  (byte) main::s#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::s#2 ← phi( main/(byte) main::s#0 main::@2/(byte) main::s#4 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  if((byte) main::i#2<=(byte) 5) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::s#4 ← phi( main::@1/(byte) main::s#2 main::@3/(byte) main::s#1 )
  (byte) main::i#1 ← -- (byte) main::i#2
  if((byte) main::i#1>(byte) 0) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte) main::s#1 ← (byte) main::s#2 + (byte) main::i#2
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Constant (const byte) main::i#0 = 10
Constant (const byte) main::s#0 = 0
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::s#2 ← phi( main/(const byte) main::s#0 main::@2/(byte) main::s#4 )
  (byte) main::i#2 ← phi( main/(const byte) main::i#0 main::@2/(byte) main::i#1 )
  if((byte) main::i#2<=(byte) 5) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::s#4 ← phi( main::@1/(byte) main::s#2 main::@3/(byte) main::s#1 )
  (byte) main::i#1 ← -- (byte) main::i#2
  if((byte) main::i#1>(byte) 0) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte) main::s#1 ← (byte) main::s#2 + (byte) main::i#2
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) main::s#0
Inlining constant with var siblings (const byte) main::s#0
Inlining constant with var siblings (const byte) main::s#0
Constant inlined main::s#0 = (byte) 0
Constant inlined main::i#0 = (byte) 10
Succesful SSA optimization Pass2ConstantInlining
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::s#2 ← phi( main/(byte) 0 main::@2/(byte) main::s#4 )
  (byte) main::i#2 ← phi( main/(byte) 10 main::@2/(byte) main::i#1 )
  if((byte) main::i#2<=(byte) 5) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::s#4 ← phi( main::@1/(byte) main::s#2 main::@3/(byte) main::s#1 )
  (byte) main::i#1 ← -- (byte) main::i#2
  if((byte) main::i#1>(byte) 0) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte) main::s#1 ← (byte) main::s#2 + (byte) main::i#2
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte) main::i
(byte) main::i#1
(byte) main::i#2
(byte) main::s
(byte) main::s#1
(byte) main::s#2
(byte) main::s#4

Block Sequence Planned @begin @1 @end main main::@1 main::@3 main::@2 main::@return 
Added new block during phi lifting main::@5(between main::@2 and main::@1)
Added new block during phi lifting main::@6(between main::@1 and main::@2)
Block Sequence Planned @begin @1 @end main main::@1 main::@3 main::@2 main::@return main::@5 main::@6 
CONTROL FLOW GRAPH - PHI LIFTED
@begin: scope:[]  from
  to:@1
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1
main: scope:[main]  from @1
  to:main::@1
main::@1: scope:[main]  from main main::@5
  (byte) main::s#2 ← phi( main/(byte) 0 main::@5/(byte~) main::s#5 )
  (byte) main::i#2 ← phi( main/(byte) 10 main::@5/(byte~) main::i#5 )
  if((byte) main::i#2<=(byte) 5) goto main::@6
  to:main::@3
main::@3: scope:[main]  from main::@1
  (byte) main::s#1 ← (byte) main::s#2 + (byte) main::i#2
  (byte~) main::s#7 ← (byte) main::s#1
  to:main::@2
main::@2: scope:[main]  from main::@3 main::@6
  (byte) main::s#4 ← phi( main::@6/(byte~) main::s#6 main::@3/(byte~) main::s#7 )
  (byte) main::i#1 ← -- (byte) main::i#2
  if((byte) main::i#1>(byte) 0) goto main::@5
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
main::@5: scope:[main]  from main::@2
  (byte~) main::i#5 ← (byte) main::i#1
  (byte~) main::s#5 ← (byte) main::s#4
  to:main::@1
main::@6: scope:[main]  from main::@1
  (byte~) main::s#6 ← (byte) main::s#2
  to:main::@2

Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to 0:main 

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - LIVE RANGES FOUND
@begin: scope:[]  from
  to:@1
@1: scope:[]  from @begin
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @1
main: scope:[main]  from @1
  [1] phi() [ ]
  to:main::@1
main::@1: scope:[main]  from main main::@5
  [2] (byte) main::s#2 ← phi( main/(byte) 0 main::@5/(byte~) main::s#5 ) [ main::i#2 main::s#2 ]
  [2] (byte) main::i#2 ← phi( main/(byte) 10 main::@5/(byte~) main::i#5 ) [ main::i#2 main::s#2 ]
  [3] if((byte) main::i#2<=(byte) 5) goto main::@6 [ main::i#2 main::s#2 ]
  to:main::@3
main::@3: scope:[main]  from main::@1
  [4] (byte) main::s#1 ← (byte) main::s#2 + (byte) main::i#2 [ main::i#2 main::s#1 ]
  [5] (byte~) main::s#7 ← (byte) main::s#1 [ main::i#2 main::s#7 ]
  to:main::@2
main::@2: scope:[main]  from main::@3 main::@6
  [6] (byte) main::s#4 ← phi( main::@6/(byte~) main::s#6 main::@3/(byte~) main::s#7 ) [ main::i#2 main::s#4 ]
  [7] (byte) main::i#1 ← -- (byte) main::i#2 [ main::s#4 main::i#1 ]
  [8] if((byte) main::i#1>(byte) 0) goto main::@5 [ main::s#4 main::i#1 ]
  to:main::@return
main::@return: scope:[main]  from main::@2
  [9] return  [ ]
  to:@return
main::@5: scope:[main]  from main::@2
  [10] (byte~) main::i#5 ← (byte) main::i#1 [ main::i#5 main::s#4 ]
  [11] (byte~) main::s#5 ← (byte) main::s#4 [ main::i#5 main::s#5 ]
  to:main::@1
main::@6: scope:[main]  from main::@1
  [12] (byte~) main::s#6 ← (byte) main::s#2 [ main::i#2 main::s#6 ]
  to:main::@2

Created 3 initial phi equivalence classes
Coalesced [5] main::s#7 ← main::s#1
Coalesced [10] main::i#5 ← main::i#1
Coalesced [11] main::s#5 ← main::s#4
Coalesced (already) [12] main::s#6 ← main::s#2
Coalesced down to 2 phi equivalence classes
Culled Empty Block (label) main::@5
Culled Empty Block (label) main::@6
Block Sequence Planned @begin @1 @end main main::@1 main::@3 main::@2 main::@return 
Adding NOP phi() at start of main
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - PHI MEM COALESCED
@begin: scope:[]  from
  to:@1
@1: scope:[]  from @begin
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @1
main: scope:[main]  from @1
  [1] phi() [ ]
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [2] (byte) main::s#2 ← phi( main/(byte) 0 main::@2/(byte) main::s#4 ) [ main::i#2 main::s#2 ]
  [2] (byte) main::i#2 ← phi( main/(byte) 10 main::@2/(byte) main::i#1 ) [ main::i#2 main::s#2 ]
  [3] if((byte) main::i#2<=(byte) 5) goto main::@2 [ main::i#2 main::s#2 ]
  to:main::@3
main::@3: scope:[main]  from main::@1
  [4] (byte) main::s#1 ← (byte) main::s#2 + (byte) main::i#2 [ main::i#2 main::s#1 ]
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@3
  [5] (byte) main::s#4 ← phi( main::@1/(byte) main::s#2 main::@3/(byte) main::s#1 ) [ main::i#2 main::s#4 ]
  [6] (byte) main::i#1 ← -- (byte) main::i#2 [ main::i#1 main::s#4 ]
  [7] if((byte) main::i#1>(byte) 0) goto main::@1 [ main::i#1 main::s#4 ]
  to:main::@return
main::@return: scope:[main]  from main::@2
  [8] return  [ ]
  to:@return

DOMINATORS
@begin dominated by  @begin 
@1 dominated by  @1 @begin 
@end dominated by  @1 @end @begin 
main dominated by  @1 @begin main 
main::@1 dominated by  @1 @begin main::@1 main 
main::@3 dominated by  @1 @begin main::@1 main::@3 main 
main::@2 dominated by  @1 @begin main::@2 main::@1 main 
main::@return dominated by  @1 main::@return @begin main::@2 main::@1 main 

Found back edge: Loop head: main::@1 tails: main::@2 blocks: null
Populated: Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1 main::@3 
NATURAL LOOPS
Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1 main::@3 

Found 0 loops in scope []
Found 1 loops in scope [main]
  Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1 main::@3 
NATURAL LOOPS WITH DEPTH
Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1 main::@3  depth: 1


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 11.0
(byte) main::s
(byte) main::s#1 22.0
(byte) main::s#2 16.5
(byte) main::s#4 11.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::s#2 main::s#4 main::s#1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::s#2 main::s#4 main::s#1 ]
Allocated zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Allocated zp ZP_BYTE:3 [ main::s#2 main::s#4 main::s#1 ]
INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
//SEG2 @begin
bbegin:
  jmp b1
//SEG3 @1
b1:
//SEG4 [0] call main param-assignment [ ]
//SEG5 [1] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  jmp bend
//SEG6 @end
bend:
//SEG7 main
main: {
    .label i = 2
    .label s = 3
  //SEG8 [2] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG9 [2] phi (byte) main::s#2 = (byte) 0 [phi:main->main::@1#0] -- zpby1=coby1 
    lda #0
    sta s
  //SEG10 [2] phi (byte) main::i#2 = (byte) 10 [phi:main->main::@1#1] -- zpby1=coby1 
    lda #$a
    sta i
    jmp b1
  //SEG11 [2] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  b1_from_b2:
  //SEG12 [2] phi (byte) main::s#2 = (byte) main::s#4 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG13 [2] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#1] -- register_copy 
    jmp b1
  //SEG14 main::@1
  b1:
  //SEG15 [3] if((byte) main::i#2<=(byte) 5) goto main::@2 [ main::i#2 main::s#2 ] -- zpby1_le_coby1_then_la1 
    lda i
    cmp #5
    bcc b2_from_b1
    beq b2_from_b1
    jmp b3
  //SEG16 main::@3
  b3:
  //SEG17 [4] (byte) main::s#1 ← (byte) main::s#2 + (byte) main::i#2 [ main::i#2 main::s#1 ] -- zpby1=zpby1_plus_zpby2 
    lda s
    clc
    adc i
    sta s
  //SEG18 [5] phi from main::@1 main::@3 to main::@2 [phi:main::@1/main::@3->main::@2]
  b2_from_b1:
  b2_from_b3:
  //SEG19 [5] phi (byte) main::s#4 = (byte) main::s#2 [phi:main::@1/main::@3->main::@2#0] -- register_copy 
    jmp b2
  //SEG20 main::@2
  b2:
  //SEG21 [6] (byte) main::i#1 ← -- (byte) main::i#2 [ main::i#1 main::s#4 ] -- zpby1=_dec_zpby1 
    dec i
  //SEG22 [7] if((byte) main::i#1>(byte) 0) goto main::@1 [ main::i#1 main::s#4 ] -- zpby1_gt_0_then_la1 
    lda i
    bne b1_from_b2
    jmp breturn
  //SEG23 main::@return
  breturn:
  //SEG24 [8] return  [ ]
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp ZP_BYTE:2 [ main::i#2 main::i#1 ] : zp ZP_BYTE:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 [ main::s#2 main::s#4 main::s#1 ] : zp ZP_BYTE:3 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 49.5: zp ZP_BYTE:3 [ main::s#2 main::s#4 main::s#1 ] 27.5: zp ZP_BYTE:2 [ main::i#2 main::i#1 ] 
Uplift Scope [] 

Uplifting [main] best 450 combination reg byte a [ main::s#2 main::s#4 main::s#1 ] reg byte x [ main::i#2 main::i#1 ] 
Uplifting [] best 450 combination 
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp b2
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
//SEG2 @begin
bbegin:
//SEG3 @1
b1:
//SEG4 [0] call main param-assignment [ ]
//SEG5 [1] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG6 @end
bend:
//SEG7 main
main: {
  //SEG8 [2] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG9 [2] phi (byte) main::s#2 = (byte) 0 [phi:main->main::@1#0] -- aby=coby1 
    lda #0
  //SEG10 [2] phi (byte) main::i#2 = (byte) 10 [phi:main->main::@1#1] -- xby=coby1 
    ldx #$a
    jmp b1
  //SEG11 [2] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  b1_from_b2:
  //SEG12 [2] phi (byte) main::s#2 = (byte) main::s#4 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG13 [2] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#1] -- register_copy 
  //SEG14 main::@1
  b1:
  //SEG15 [3] if((byte) main::i#2<=(byte) 5) goto main::@2 [ main::i#2 main::s#2 ] -- xby_le_coby1_then_la1 
    cpx #5
    bcc b2_from_b1
    beq b2_from_b1
  //SEG16 main::@3
  b3:
  //SEG17 [4] (byte) main::s#1 ← (byte) main::s#2 + (byte) main::i#2 [ main::i#2 main::s#1 ] -- aby=aby_plus_xby 
    stx $ff
    clc
    adc $ff
  //SEG18 [5] phi from main::@1 main::@3 to main::@2 [phi:main::@1/main::@3->main::@2]
  b2_from_b1:
  b2_from_b3:
  //SEG19 [5] phi (byte) main::s#4 = (byte) main::s#2 [phi:main::@1/main::@3->main::@2#0] -- register_copy 
  //SEG20 main::@2
  b2:
  //SEG21 [6] (byte) main::i#1 ← -- (byte) main::i#2 [ main::i#1 main::s#4 ] -- xby=_dec_xby 
    dex
  //SEG22 [7] if((byte) main::i#1>(byte) 0) goto main::@1 [ main::i#1 main::s#4 ] -- xby_gt_0_then_la1 
    cpx #0
    bne b1_from_b2
  //SEG23 main::@return
  breturn:
  //SEG24 [8] return  [ ]
    rts
}

Replacing label b2_from_b1 with b2
Replacing label b2_from_b1 with b2
Replacing label b1_from_b2 with b1
Removing instruction bbegin:
Removing instruction main_from_b1:
Removing instruction b1_from_b2:
Removing instruction b2_from_b1:
Removing instruction b2_from_b3:
Succesful ASM optimization Pass5RedundantLabelElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
//SEG2 @begin
//SEG3 @1
b1:
//SEG4 [0] call main param-assignment [ ]
//SEG5 [1] phi from @1 to main [phi:@1->main]
  jsr main
//SEG6 @end
bend:
//SEG7 main
main: {
  //SEG8 [2] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG9 [2] phi (byte) main::s#2 = (byte) 0 [phi:main->main::@1#0] -- aby=coby1 
    lda #0
  //SEG10 [2] phi (byte) main::i#2 = (byte) 10 [phi:main->main::@1#1] -- xby=coby1 
    ldx #$a
    jmp b1
  //SEG11 [2] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  //SEG12 [2] phi (byte) main::s#2 = (byte) main::s#4 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG13 [2] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#1] -- register_copy 
  //SEG14 main::@1
  b1:
  //SEG15 [3] if((byte) main::i#2<=(byte) 5) goto main::@2 [ main::i#2 main::s#2 ] -- xby_le_coby1_then_la1 
    cpx #5
    bcc b2
    beq b2
  //SEG16 main::@3
  b3:
  //SEG17 [4] (byte) main::s#1 ← (byte) main::s#2 + (byte) main::i#2 [ main::i#2 main::s#1 ] -- aby=aby_plus_xby 
    stx $ff
    clc
    adc $ff
  //SEG18 [5] phi from main::@1 main::@3 to main::@2 [phi:main::@1/main::@3->main::@2]
  //SEG19 [5] phi (byte) main::s#4 = (byte) main::s#2 [phi:main::@1/main::@3->main::@2#0] -- register_copy 
  //SEG20 main::@2
  b2:
  //SEG21 [6] (byte) main::i#1 ← -- (byte) main::i#2 [ main::i#1 main::s#4 ] -- xby=_dec_xby 
    dex
  //SEG22 [7] if((byte) main::i#1>(byte) 0) goto main::@1 [ main::i#1 main::s#4 ] -- xby_gt_0_then_la1 
    cpx #0
    bne b1
  //SEG23 main::@return
  breturn:
  //SEG24 [8] return  [ ]
    rts
}

Removing instruction b1:
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction b3:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
//SEG2 @begin
//SEG3 @1
//SEG4 [0] call main param-assignment [ ]
//SEG5 [1] phi from @1 to main [phi:@1->main]
  jsr main
//SEG6 @end
//SEG7 main
main: {
  //SEG8 [2] phi from main to main::@1 [phi:main->main::@1]
  //SEG9 [2] phi (byte) main::s#2 = (byte) 0 [phi:main->main::@1#0] -- aby=coby1 
    lda #0
  //SEG10 [2] phi (byte) main::i#2 = (byte) 10 [phi:main->main::@1#1] -- xby=coby1 
    ldx #$a
    jmp b1
  //SEG11 [2] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  //SEG12 [2] phi (byte) main::s#2 = (byte) main::s#4 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG13 [2] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#1] -- register_copy 
  //SEG14 main::@1
  b1:
  //SEG15 [3] if((byte) main::i#2<=(byte) 5) goto main::@2 [ main::i#2 main::s#2 ] -- xby_le_coby1_then_la1 
    cpx #5
    bcc b2
    beq b2
  //SEG16 main::@3
  //SEG17 [4] (byte) main::s#1 ← (byte) main::s#2 + (byte) main::i#2 [ main::i#2 main::s#1 ] -- aby=aby_plus_xby 
    stx $ff
    clc
    adc $ff
  //SEG18 [5] phi from main::@1 main::@3 to main::@2 [phi:main::@1/main::@3->main::@2]
  //SEG19 [5] phi (byte) main::s#4 = (byte) main::s#2 [phi:main::@1/main::@3->main::@2#0] -- register_copy 
  //SEG20 main::@2
  b2:
  //SEG21 [6] (byte) main::i#1 ← -- (byte) main::i#2 [ main::i#1 main::s#4 ] -- xby=_dec_xby 
    dex
  //SEG22 [7] if((byte) main::i#1>(byte) 0) goto main::@1 [ main::i#1 main::s#4 ] -- xby_gt_0_then_la1 
    cpx #0
    bne b1
  //SEG23 main::@return
  //SEG24 [8] return  [ ]
    rts
}

Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
//SEG2 @begin
//SEG3 @1
//SEG4 [0] call main param-assignment [ ]
//SEG5 [1] phi from @1 to main [phi:@1->main]
  jsr main
//SEG6 @end
//SEG7 main
main: {
  //SEG8 [2] phi from main to main::@1 [phi:main->main::@1]
  //SEG9 [2] phi (byte) main::s#2 = (byte) 0 [phi:main->main::@1#0] -- aby=coby1 
    lda #0
  //SEG10 [2] phi (byte) main::i#2 = (byte) 10 [phi:main->main::@1#1] -- xby=coby1 
    ldx #$a
  //SEG11 [2] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  //SEG12 [2] phi (byte) main::s#2 = (byte) main::s#4 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG13 [2] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#1] -- register_copy 
  //SEG14 main::@1
  b1:
  //SEG15 [3] if((byte) main::i#2<=(byte) 5) goto main::@2 [ main::i#2 main::s#2 ] -- xby_le_coby1_then_la1 
    cpx #5
    bcc b2
    beq b2
  //SEG16 main::@3
  //SEG17 [4] (byte) main::s#1 ← (byte) main::s#2 + (byte) main::i#2 [ main::i#2 main::s#1 ] -- aby=aby_plus_xby 
    stx $ff
    clc
    adc $ff
  //SEG18 [5] phi from main::@1 main::@3 to main::@2 [phi:main::@1/main::@3->main::@2]
  //SEG19 [5] phi (byte) main::s#4 = (byte) main::s#2 [phi:main::@1/main::@3->main::@2#0] -- register_copy 
  //SEG20 main::@2
  b2:
  //SEG21 [6] (byte) main::i#1 ← -- (byte) main::i#2 [ main::i#1 main::s#4 ] -- xby=_dec_xby 
    dex
  //SEG22 [7] if((byte) main::i#1>(byte) 0) goto main::@1 [ main::i#1 main::s#4 ] -- xby_gt_0_then_la1 
    cpx #0
    bne b1
  //SEG23 main::@return
  //SEG24 [8] return  [ ]
    rts
}

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte) main::i
(byte) main::i#1 reg byte x 16.5
(byte) main::i#2 reg byte x 11.0
(byte) main::s
(byte) main::s#1 reg byte a 22.0
(byte) main::s#2 reg byte a 16.5
(byte) main::s#4 reg byte a 11.0

reg byte x [ main::i#2 main::i#1 ]
reg byte a [ main::s#2 main::s#4 main::s#1 ]

FINAL CODE
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
//SEG2 @begin
//SEG3 @1
//SEG4 [0] call main param-assignment [ ]
//SEG5 [1] phi from @1 to main [phi:@1->main]
  jsr main
//SEG6 @end
//SEG7 main
main: {
  //SEG8 [2] phi from main to main::@1 [phi:main->main::@1]
  //SEG9 [2] phi (byte) main::s#2 = (byte) 0 [phi:main->main::@1#0] -- aby=coby1 
    lda #0
  //SEG10 [2] phi (byte) main::i#2 = (byte) 10 [phi:main->main::@1#1] -- xby=coby1 
    ldx #$a
  //SEG11 [2] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  //SEG12 [2] phi (byte) main::s#2 = (byte) main::s#4 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG13 [2] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#1] -- register_copy 
  //SEG14 main::@1
  b1:
  //SEG15 [3] if((byte) main::i#2<=(byte) 5) goto main::@2 [ main::i#2 main::s#2 ] -- xby_le_coby1_then_la1 
    cpx #5
    bcc b2
    beq b2
  //SEG16 main::@3
  //SEG17 [4] (byte) main::s#1 ← (byte) main::s#2 + (byte) main::i#2 [ main::i#2 main::s#1 ] -- aby=aby_plus_xby 
    stx $ff
    clc
    adc $ff
  //SEG18 [5] phi from main::@1 main::@3 to main::@2 [phi:main::@1/main::@3->main::@2]
  //SEG19 [5] phi (byte) main::s#4 = (byte) main::s#2 [phi:main::@1/main::@3->main::@2#0] -- register_copy 
  //SEG20 main::@2
  b2:
  //SEG21 [6] (byte) main::i#1 ← -- (byte) main::i#2 [ main::i#1 main::s#4 ] -- xby=_dec_xby 
    dex
  //SEG22 [7] if((byte) main::i#1>(byte) 0) goto main::@1 [ main::i#1 main::s#4 ] -- xby_gt_0_then_la1 
    cpx #0
    bne b1
  //SEG23 main::@return
  //SEG24 [8] return  [ ]
    rts
}

