@begin: scope:[]  from
  [0] (byte) col ← (byte) 0
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] *((const void()**) KERNEL_IRQ) ← &interrupt(KERNEL_MIN)(void()) irq()
  to:main::@1
main::@1: scope:[main]  from main main::@1 main::@2
  [5] if((byte) col<(byte) $a+(byte) 1) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  [6] (byte) col ← (byte) 0
  to:main::@1

interrupt(KERNEL_MIN)(void()) irq()
irq: scope:[irq]  from
  asm { lda$dc0d  }
  [8] *((const byte*) BGCOL) ← (byte) col
  [9] if((byte) col!=(byte) 0) goto irq::@1
  to:irq::@2
irq::@2: scope:[irq]  from irq
  [10] (byte) col ← (byte) col + (byte) 2
  to:irq::@return
irq::@return: scope:[irq]  from irq::@1 irq::@2
  [11] return 
  to:@return
irq::@1: scope:[irq]  from irq
  [12] (byte) col ← ++ (byte) col
  to:irq::@return
