
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::sw#0 = $1234
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  main::sw#2 = phi( main/main::sw#0, main::@1/main::sw#1 )
  main::i#2 = phi( main/main::i#0, main::@1/main::i#1 )
  main::$2 = (signed byte)main::i#2
  main::sw#1 = main::sw#2 + main::$2
  main::$1 = main::i#2 * SIZEOF_SIGNED_WORD
  main::screen[main::$1] = main::sw#1
  main::i#1 = main::i#2 + rangenext(0,$a)
  main::$0 = main::i#1 != rangelast(0,$a)
  if(main::$0) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
const byte SIZEOF_SIGNED_WORD = 2
void __start()
void main()
bool~ main::$0
byte~ main::$1
signed byte~ main::$2
byte main::i
byte main::i#0
byte main::i#1
byte main::i#2
const nomodify signed word* main::screen = (signed word*)$400
signed word main::sw
signed word main::sw#0
signed word main::sw#1
signed word main::sw#2

Simplifying constant pointer cast (signed word*) 1024
Successful SSA optimization PassNCastSimplification
Simple Condition main::$0 [9] if(main::i#1!=rangelast(0,$a)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::sw#0 = $1234
Constant main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [7] main::i#1 = ++ main::i#2 to ++
Resolved ranged comparison value [9] if(main::i#1!=rangelast(0,$a)) goto main::@1 to $b
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) $b in [6] if(main::i#1!=$b) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $b
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $b
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining Noop Cast [1] main::$2 = (signed byte)main::i#2 keeping main::i#2
Successful SSA optimization Pass2NopCastInlining
Rewriting multiplication to use shift [3] main::$1 = main::i#2 * SIZEOF_SIGNED_WORD
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings main::sw#0
Inlining constant with var siblings main::i#0
Constant inlined main::i#0 = 0
Constant inlined main::sw#0 = $1234
Successful SSA optimization Pass2ConstantInlining
Eliminating unused constant SIZEOF_SIGNED_WORD
Successful SSA optimization PassNEliminateUnusedVars
Added new block during phi lifting main::@2(between main::@1 and main::@1)
Adding NOP phi() at start of main
CALL GRAPH

Created 2 initial phi equivalence classes
Coalesced [8] main::i#3 = main::i#1
Coalesced [9] main::sw#3 = main::sw#1
Coalesced down to 2 phi equivalence classes
Culled Empty Block label main::@2
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [1] main::sw#2 = phi( main/$1234, main::@1/main::sw#1 )
  [1] main::i#2 = phi( main/0, main::@1/main::i#1 )
  [2] main::sw#1 = main::sw#2 + (signed byte)main::i#2
  [3] main::$1 = main::i#2 << 1
  [4] main::screen[main::$1] = main::sw#1
  [5] main::i#1 = ++ main::i#2
  [6] if(main::i#1!=$b) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [7] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
byte~ main::$1 22.0
byte main::i
byte main::i#1 16.5
byte main::i#2 8.25
signed word main::sw
signed word main::sw#1 6.6000000000000005
signed word main::sw#2 22.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::sw#2 main::sw#1 ]
Added variable main::$1 to live range equivalence class [ main::$1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::sw#2 main::sw#1 ]
[ main::$1 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[2]:3 [ main::sw#2 main::sw#1 ]
Allocated zp[1]:5 [ main::$1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] main::sw#1 = main::sw#2 + (signed byte)main::i#2 [ main::i#2 main::sw#1 ] (  [ main::i#2 main::sw#1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [3] main::$1 = main::i#2 << 1 [ main::i#2 main::sw#1 main::$1 ] (  [ main::i#2 main::sw#1 main::$1 ] { }  ) always clobbers reg byte a 
Statement [4] main::screen[main::$1] = main::sw#1 [ main::i#2 main::sw#1 ] (  [ main::i#2 main::sw#1 ] { }  ) always clobbers reg byte a 
Statement [2] main::sw#1 = main::sw#2 + (signed byte)main::i#2 [ main::i#2 main::sw#1 ] (  [ main::i#2 main::sw#1 ] { }  ) always clobbers reg byte a 
Statement [3] main::$1 = main::i#2 << 1 [ main::i#2 main::sw#1 main::$1 ] (  [ main::i#2 main::sw#1 main::$1 ] { }  ) always clobbers reg byte a 
Statement [4] main::screen[main::$1] = main::sw#1 [ main::i#2 main::sw#1 ] (  [ main::i#2 main::sw#1 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[2]:3 [ main::sw#2 main::sw#1 ] : zp[2]:3 , 
Potential registers zp[1]:5 [ main::$1 ] : zp[1]:5 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 28.6: zp[2]:3 [ main::sw#2 main::sw#1 ] 24.75: zp[1]:2 [ main::i#2 main::i#1 ] 22: zp[1]:5 [ main::$1 ] 
Uplift Scope [] 

Uplifting [main] best 796 combination zp[2]:3 [ main::sw#2 main::sw#1 ] reg byte x [ main::i#2 main::i#1 ] reg byte a [ main::$1 ] 
Uplifting [] best 796 combination 
Allocated (was zp[2]:3) zp[2]:2 [ main::sw#2 main::sw#1 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test elimination of noop-casts (signed byte to byte)
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label screen = $400
    .label sw = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::sw#2 = $1234 [phi:main->main::@1#0] -- vwsz1=vwsc1 
    lda #<$1234
    sta.z sw
    lda #>$1234
    sta.z sw+1
    // [1] phi main::i#2 = 0 [phi:main->main::@1#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [1] phi main::sw#2 = main::sw#1 [phi:main::@1->main::@1#0] -- register_copy 
    // [1] phi main::i#2 = main::i#1 [phi:main::@1->main::@1#1] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] main::sw#1 = main::sw#2 + (signed byte)main::i#2 -- vwsz1=vwsz1_plus_vbsxx 
    txa
    pha
    clc
    adc.z sw
    sta.z sw
    pla
    ora #$7f
    bmi !+
    lda #0
  !:
    adc.z sw+1
    sta.z sw+1
    // [3] main::$1 = main::i#2 << 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
    // [4] main::screen[main::$1] = main::sw#1 -- pwsc1_derefidx_vbuaa=vwsz1 
    tay
    lda.z sw
    sta screen,y
    lda.z sw+1
    sta screen+1,y
    // [5] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [6] if(main::i#1!=$b) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$b
    bne __b1_from___b1
    jmp __breturn
    // main::@return
  __breturn:
    // [7] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b1 with __b1
Removing instruction __b1_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
void main()
byte~ main::$1 reg byte a 22.0
byte main::i
byte main::i#1 reg byte x 16.5
byte main::i#2 reg byte x 8.25
const nomodify signed word* main::screen = (signed word*) 1024
signed word main::sw
signed word main::sw#1 sw zp[2]:2 6.6000000000000005
signed word main::sw#2 sw zp[2]:2 22.0

reg byte x [ main::i#2 main::i#1 ]
zp[2]:2 [ main::sw#2 main::sw#1 ]
reg byte a [ main::$1 ]


FINAL ASSEMBLER
Score: 706

  // File Comments
// Test elimination of noop-casts (signed byte to byte)
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label screen = $400
    .label sw = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::sw#2 = $1234 [phi:main->main::@1#0] -- vwsz1=vwsc1 
    lda #<$1234
    sta.z sw
    lda #>$1234
    sta.z sw+1
    // [1] phi main::i#2 = 0 [phi:main->main::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [1] phi main::sw#2 = main::sw#1 [phi:main::@1->main::@1#0] -- register_copy 
    // [1] phi main::i#2 = main::i#1 [phi:main::@1->main::@1#1] -- register_copy 
    // main::@1
  __b1:
    // sw += (signed byte)i
    // [2] main::sw#1 = main::sw#2 + (signed byte)main::i#2 -- vwsz1=vwsz1_plus_vbsxx 
    txa
    pha
    clc
    adc.z sw
    sta.z sw
    pla
    ora #$7f
    bmi !+
    lda #0
  !:
    adc.z sw+1
    sta.z sw+1
    // screen[i] = sw
    // [3] main::$1 = main::i#2 << 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
    // [4] main::screen[main::$1] = main::sw#1 -- pwsc1_derefidx_vbuaa=vwsz1 
    tay
    lda.z sw
    sta screen,y
    lda.z sw+1
    sta screen+1,y
    // for( byte i: 0..10)
    // [5] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [6] if(main::i#1!=$b) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$b
    bne __b1
    // main::@return
    // }
    // [7] return 
    rts
}
  // File Data

