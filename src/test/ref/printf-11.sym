const byte RADIX::BINARY = 2
const byte RADIX::DECIMAL = $a
const byte RADIX::HEXADECIMAL = $10
const byte RADIX::OCTAL = 8
void cputs(byte* cputs::str)
byte* cputs::str
byte* cputs::str#0 str zp[2]:2 202.0
byte* cputs::str#3 str zp[2]:2 103.75
byte* cputs::str#5 str zp[2]:2 11.0
void main()
const word main::pct = $156
const byte* main::str[$e]  = "Commodore is "
const byte* main::str1[6]  = " cool"
const to_nomodify byte* printf_hextab[]  = "0123456789abcdef"z
void printf_uint(word printf_uint::uvalue , byte printf_uint::format_min_length , byte printf_uint::format_justify_left , byte printf_uint::format_sign_always , byte printf_uint::format_zero_padding , byte printf_uint::format_upper_case , byte printf_uint::format_radix)
struct printf_format_number printf_uint::format
byte printf_uint::format_justify_left
byte printf_uint::format_min_length
byte printf_uint::format_radix
byte printf_uint::format_sign_always
byte printf_uint::format_upper_case
byte printf_uint::format_zero_padding
word printf_uint::uvalue
byte* screen
byte* screen#0 screen zp[2]:4 101.0
byte* screen#1 screen zp[2]:4 48.0
byte* screen#17 screen zp[2]:4 3.25
byte* screen#2 screen zp[2]:4 16.5
byte* screen#27 screen zp[2]:4 13.0
byte* screen#3 screen zp[2]:4 16.5
byte* screen#4 screen zp[2]:4 16.5

zp[2]:2 [ cputs::str#3 cputs::str#5 cputs::str#0 ]
zp[2]:4 [ screen#1 screen#27 screen#17 screen#0 screen#2 screen#4 screen#3 ]
