Converting parameter in __varcall procedure to load/store plus::a
Converting parameter in __varcall procedure to load/store plus::b
Converting return in __varcall procedure to load/store plus::return
Calling convention __varcall adding prepare/execute/finalize for main::$0 = call plus main::a 1 
Calling convention __varcall adding prepare/execute/finalize for main::$1 = call plus main::a main::a 
Calling convention VAR_CALL adding return value assignment main::$0 = plus::return
Calling convention VAR_CALL adding return value assignment main::$1 = plus::return

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::a#0 = 1
  *BGCOL = main::a#0
  plus::a = main::a#0
  plus::b = 1
  callexecute plus 
  main::$0 = plus::return
  main::a#1 = main::$0
  *BGCOL = main::a#1
  plus::a = main::a#1
  plus::b = main::a#1
  callexecute plus 
  main::$1 = plus::return
  main::a#2 = main::$1
  *BGCOL = main::a#2
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

__varcall byte plus(byte plus::a , byte plus::b)
plus: scope:[plus]  from
  plus::$0 = plus::a + plus::b
  plus::return = plus::$0
  to:plus::@return
plus::@return: scope:[plus]  from plus
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
const nomodify byte* BGCOL = (byte*)$d021
void __start()
void main()
byte~ main::$0
byte~ main::$1
byte main::a
byte main::a#0
byte main::a#1
byte main::a#2
__varcall byte plus(byte plus::a , byte plus::b)
byte~ plus::$0
byte plus::a loadstore
byte plus::b loadstore
byte plus::return loadstore

Adding number conversion cast (unumber) 1 in plus::b = 1
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast plus::b = (unumber)1
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 53281
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias candidate removed (volatile)plus::return = plus::$0 
Alias main::a#1 = main::$0 
Alias main::a#2 = main::$1 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)plus::return = plus::$0 
Constant main::a#0 = 1
Successful SSA optimization Pass2ConstantIdentification
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Alias candidate removed (volatile)plus::return = plus::$0 
Inlining constant with var siblings main::a#0
Constant inlined main::a#0 = 1
Successful SSA optimization Pass2ConstantInlining
Alias candidate removed (volatile)plus::return = plus::$0 
Alias candidate removed (volatile)plus::return = plus::$0 
Alias candidate removed (volatile)plus::return = plus::$0 
CALL GRAPH
Calls in [main] to plus:6 plus:11 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

__varcall byte plus(byte plus::a , byte plus::b)
plus: scope:[plus]  from
  [0] plus::$0 = plus::a + plus::b
  [1] plus::return = plus::$0
  to:plus::@return
plus::@return: scope:[plus]  from plus
  [2] return 
  to:@return

void main()
main: scope:[main]  from
  [3] *BGCOL = 1
  [4] plus::a = 1
  [5] plus::b = 1
  [6] callexecute plus 
  [7] main::a#1 = plus::return
  [8] *BGCOL = main::a#1
  [9] plus::a = main::a#1
  [10] plus::b = main::a#1
  [11] callexecute plus 
  [12] main::a#2 = plus::return
  [13] *BGCOL = main::a#2
  to:main::@return
main::@return: scope:[main]  from main
  [14] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
byte main::a
byte main::a#1 2.6666666666666665
byte main::a#2 4.0
__varcall byte plus(byte plus::a , byte plus::b)
byte~ plus::$0 22.0
byte plus::a loadstore 3.75
byte plus::b loadstore 7.5
byte plus::return loadstore 3.75

Initial phi equivalence classes
Added variable plus::$0 to live range equivalence class [ plus::$0 ]
Added variable plus::return to live range equivalence class [ plus::return ]
Added variable plus::a to live range equivalence class [ plus::a ]
Added variable plus::b to live range equivalence class [ plus::b ]
Added variable main::a#1 to live range equivalence class [ main::a#1 ]
Added variable main::a#2 to live range equivalence class [ main::a#2 ]
Complete equivalence classes
[ plus::$0 ]
[ plus::return ]
[ plus::a ]
[ plus::b ]
[ main::a#1 ]
[ main::a#2 ]
Allocated zp[1]:2 [ plus::$0 ]
Allocated zp[1]:3 [ plus::return ]
Allocated zp[1]:4 [ plus::a ]
Allocated zp[1]:5 [ plus::b ]
Allocated zp[1]:6 [ main::a#1 ]
Allocated zp[1]:7 [ main::a#2 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] plus::$0 = plus::a + plus::b [ plus::$0 ] ( plus:6 [ plus::$0 ] { { main::a#1 = plus::a plus::b } }  plus:11 [ plus::$0 ] { { main::a#1 = plus::a plus::b } }  ) always clobbers reg byte a 
Statement [3] *BGCOL = 1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [4] plus::a = 1 [ plus::a ] (  [ plus::a ] { }  ) always clobbers reg byte a 
Statement [5] plus::b = 1 [ plus::a plus::b ] (  [ plus::a plus::b ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ plus::$0 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ plus::return ] : zp[1]:3 , 
Potential registers zp[1]:4 [ plus::a ] : zp[1]:4 , 
Potential registers zp[1]:5 [ plus::b ] : zp[1]:5 , 
Potential registers zp[1]:6 [ main::a#1 ] : zp[1]:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:7 [ main::a#2 ] : zp[1]:7 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [plus] 22: zp[1]:2 [ plus::$0 ] 7.5: zp[1]:5 [ plus::b ] 3.75: zp[1]:3 [ plus::return ] 3.75: zp[1]:4 [ plus::a ] 
Uplift Scope [main] 4: zp[1]:7 [ main::a#2 ] 2.67: zp[1]:6 [ main::a#1 ] 
Uplift Scope [] 

Uplifting [plus] best 95 combination reg byte a [ plus::$0 ] zp[1]:5 [ plus::b ] zp[1]:3 [ plus::return ] zp[1]:4 [ plus::a ] 
Uplifting [main] best 77 combination reg byte a [ main::a#2 ] reg byte a [ main::a#1 ] 
Uplifting [] best 77 combination 
Attempting to uplift remaining variables inzp[1]:5 [ plus::b ]
Uplifting [plus] best 77 combination zp[1]:5 [ plus::b ] 
Attempting to uplift remaining variables inzp[1]:3 [ plus::return ]
Uplifting [plus] best 77 combination zp[1]:3 [ plus::return ] 
Attempting to uplift remaining variables inzp[1]:4 [ plus::a ]
Uplifting [plus] best 77 combination zp[1]:4 [ plus::a ] 
Allocated (was zp[1]:3) zp[1]:2 [ plus::return ]
Allocated (was zp[1]:4) zp[1]:3 [ plus::a ]
Allocated (was zp[1]:5) zp[1]:4 [ plus::b ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test __varcall calling convention
// Return value
  // Upstart
  // Commodore 64 PRG executable file
.file [name="varcall-2.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label BGCOL = $d021
.segment Code
  // plus
// plus(byte zp(3) a, byte zp(4) b)
plus: {
    .label return = 2
    .label a = 3
    .label b = 4
    // [0] plus::$0 = plus::a + plus::b -- vbuaa=vbuz1_plus_vbuz2 
    lda.z a
    clc
    adc.z b
    // [1] plus::return = plus::$0 -- vbuz1=vbuaa 
    sta.z return
    jmp __breturn
    // plus::@return
  __breturn:
    // [2] return 
    rts
}
  // main
main: {
    // [3] *BGCOL = 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta BGCOL
    // [4] plus::a = 1 -- vbuz1=vbuc1 
    lda #1
    sta.z plus.a
    // [5] plus::b = 1 -- vbuz1=vbuc1 
    lda #1
    sta.z plus.b
    // [6] callexecute plus  -- jsr 
    jsr plus
    // [7] main::a#1 = plus::return -- vbuaa=vbuz1 
    lda.z plus.return
    // [8] *BGCOL = main::a#1 -- _deref_pbuc1=vbuaa 
    sta BGCOL
    // [9] plus::a = main::a#1 -- vbuz1=vbuaa 
    sta.z plus.a
    // [10] plus::b = main::a#1 -- vbuz1=vbuaa 
    sta.z plus.b
    // [11] callexecute plus  -- jsr 
    jsr plus
    // [12] main::a#2 = plus::return -- vbuaa=vbuz1 
    lda.z plus.return
    // [13] *BGCOL = main::a#2 -- _deref_pbuc1=vbuaa 
    sta BGCOL
    jmp __breturn
    // main::@return
  __breturn:
    // [14] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #1
Removing instruction lda #1
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
const nomodify byte* BGCOL = (byte*) 53281
void main()
byte main::a
byte main::a#1 reg byte a 2.6666666666666665
byte main::a#2 reg byte a 4.0
__varcall byte plus(byte plus::a , byte plus::b)
byte~ plus::$0 reg byte a 22.0
byte plus::a loadstore zp[1]:3 3.75
byte plus::b loadstore zp[1]:4 7.5
byte plus::return loadstore zp[1]:2 3.75

reg byte a [ plus::$0 ]
zp[1]:2 [ plus::return ]
zp[1]:3 [ plus::a ]
zp[1]:4 [ plus::b ]
reg byte a [ main::a#1 ]
reg byte a [ main::a#2 ]


FINAL ASSEMBLER
Score: 67

  // File Comments
// Test __varcall calling convention
// Return value
  // Upstart
  // Commodore 64 PRG executable file
.file [name="varcall-2.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label BGCOL = $d021
.segment Code
  // plus
// plus(byte zp(3) a, byte zp(4) b)
plus: {
    .label return = 2
    .label a = 3
    .label b = 4
    // a+b
    // [0] plus::$0 = plus::a + plus::b -- vbuaa=vbuz1_plus_vbuz2 
    lda.z a
    clc
    adc.z b
    // return a+b;
    // [1] plus::return = plus::$0 -- vbuz1=vbuaa 
    sta.z return
    // plus::@return
    // }
    // [2] return 
    rts
}
  // main
main: {
    // *BGCOL = a
    // [3] *BGCOL = 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta BGCOL
    // plus(a, 1)
    // [4] plus::a = 1 -- vbuz1=vbuc1 
    sta.z plus.a
    // [5] plus::b = 1 -- vbuz1=vbuc1 
    sta.z plus.b
    // [6] callexecute plus  -- jsr 
    jsr plus
    // a = plus(a, 1)
    // [7] main::a#1 = plus::return -- vbuaa=vbuz1 
    lda.z plus.return
    // *BGCOL = a
    // [8] *BGCOL = main::a#1 -- _deref_pbuc1=vbuaa 
    sta BGCOL
    // plus(a, a)
    // [9] plus::a = main::a#1 -- vbuz1=vbuaa 
    sta.z plus.a
    // [10] plus::b = main::a#1 -- vbuz1=vbuaa 
    sta.z plus.b
    // [11] callexecute plus  -- jsr 
    jsr plus
    // a = plus(a, a)
    // [12] main::a#2 = plus::return -- vbuaa=vbuz1 
    lda.z plus.return
    // *BGCOL = a
    // [13] *BGCOL = main::a#2 -- _deref_pbuc1=vbuaa 
    sta BGCOL
    // main::@return
    // }
    // [14] return 
    rts
}
  // File Data

