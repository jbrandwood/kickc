Inlined call (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(void()) dtvSetCpuBankSegment1((byte) dtvSetCpuBankSegment1::cpuBankIdx)
dtvSetCpuBankSegment1: scope:[dtvSetCpuBankSegment1]  from gfx_init_plane_8bppchunky gfx_init_plane_8bppchunky::@4 gfx_init_plane_8bppchunky::@6 gfx_init_plane_charset8 gfx_init_plane_charset8::@8 gfx_init_plane_fill gfx_init_plane_fill::@4 gfx_init_plane_horisontal gfx_init_plane_horisontal2 gfx_init_plane_horisontal2::@4 gfx_init_plane_horisontal::@7 gfx_init_plane_vertical gfx_init_plane_vertical::@4
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 ← phi( gfx_init_plane_8bppchunky/(byte) dtvSetCpuBankSegment1::cpuBankIdx#0 gfx_init_plane_8bppchunky::@4/(byte) dtvSetCpuBankSegment1::cpuBankIdx#1 gfx_init_plane_8bppchunky::@6/(byte) dtvSetCpuBankSegment1::cpuBankIdx#2 gfx_init_plane_charset8/(byte) dtvSetCpuBankSegment1::cpuBankIdx#9 gfx_init_plane_charset8::@8/(byte) dtvSetCpuBankSegment1::cpuBankIdx#10 gfx_init_plane_fill/(byte) dtvSetCpuBankSegment1::cpuBankIdx#11 gfx_init_plane_fill::@4/(byte) dtvSetCpuBankSegment1::cpuBankIdx#12 gfx_init_plane_horisontal/(byte) dtvSetCpuBankSegment1::cpuBankIdx#3 gfx_init_plane_horisontal2/(byte) dtvSetCpuBankSegment1::cpuBankIdx#5 gfx_init_plane_horisontal2::@4/(byte) dtvSetCpuBankSegment1::cpuBankIdx#6 gfx_init_plane_horisontal::@7/(byte) dtvSetCpuBankSegment1::cpuBankIdx#4 gfx_init_plane_vertical/(byte) dtvSetCpuBankSegment1::cpuBankIdx#7 gfx_init_plane_vertical::@4/(byte) dtvSetCpuBankSegment1::cpuBankIdx#8 )
  *((const byte*) dtvSetCpuBankSegment1::cpuBank) ← (byte) dtvSetCpuBankSegment1::cpuBankIdx#13
  asm { .byte$32,$dd lda$ff .byte$32,$00  }
  to:dtvSetCpuBankSegment1::@return
dtvSetCpuBankSegment1::@return: scope:[dtvSetCpuBankSegment1]  from dtvSetCpuBankSegment1
  return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  (byte) memset::c#4 ← phi( print_cls/(byte) memset::c#0 )
  (void*) memset::str#3 ← phi( print_cls/(void*) memset::str#0 )
  (word) memset::num#1 ← phi( print_cls/(word) memset::num#0 )
  (bool~) memset::$0 ← (word) memset::num#1 > (number) 0
  (bool~) memset::$1 ← ! (bool~) memset::$0
  if((bool~) memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@3
  (void*) memset::str#1 ← phi( memset/(void*) memset::str#3 memset::@3/(void*) memset::str#4 )
  (void*) memset::return#0 ← (void*) memset::str#1
  to:memset::@return
memset::@2: scope:[memset]  from memset
  (byte) memset::c#3 ← phi( memset/(byte) memset::c#4 )
  (word) memset::num#2 ← phi( memset/(word) memset::num#1 )
  (void*) memset::str#2 ← phi( memset/(void*) memset::str#3 )
  (byte*~) memset::$4 ← (byte*)(void*) memset::str#2
  (byte*~) memset::$2 ← (byte*~) memset::$4 + (word) memset::num#2
  (byte*) memset::end#0 ← (byte*~) memset::$2
  (byte*) memset::dst#0 ← ((byte*)) (void*) memset::str#2
  to:memset::@3
memset::@3: scope:[memset]  from memset::@2 memset::@4
  (byte) memset::c#2 ← phi( memset::@2/(byte) memset::c#3 memset::@4/(byte) memset::c#1 )
  (void*) memset::str#4 ← phi( memset::@2/(void*) memset::str#2 memset::@4/(void*) memset::str#5 )
  (byte*) memset::end#1 ← phi( memset::@2/(byte*) memset::end#0 memset::@4/(byte*) memset::end#2 )
  (byte*) memset::dst#2 ← phi( memset::@2/(byte*) memset::dst#0 memset::@4/(byte*) memset::dst#1 )
  (bool~) memset::$3 ← (byte*) memset::dst#2 != (byte*) memset::end#1
  if((bool~) memset::$3) goto memset::@4
  to:memset::@1
memset::@4: scope:[memset]  from memset::@3
  (void*) memset::str#5 ← phi( memset::@3/(void*) memset::str#4 )
  (byte*) memset::end#2 ← phi( memset::@3/(byte*) memset::end#1 )
  (byte*) memset::dst#3 ← phi( memset::@3/(byte*) memset::dst#2 )
  (byte) memset::c#1 ← phi( memset::@3/(byte) memset::c#2 )
  *((byte*) memset::dst#3) ← (byte) memset::c#1
  (byte*) memset::dst#1 ← ++ (byte*) memset::dst#3
  to:memset::@3
memset::@return: scope:[memset]  from memset::@1
  (void*) memset::return#3 ← phi( memset::@1/(void*) memset::return#0 )
  (void*) memset::return#1 ← (void*) memset::return#3
  return 
  to:@return
@1: scope:[]  from @begin
  (byte*) print_screen#0 ← (byte*)(number) $400
  (byte*) print_line_cursor#0 ← (byte*) print_screen#0
  (byte*) print_char_cursor#0 ← (byte*) print_line_cursor#0
  to:@2

(void()) print_str_lines((byte*) print_str_lines::str)
print_str_lines: scope:[print_str_lines]  from form_mode::@12 form_mode::@9
  (byte*) print_line_cursor#45 ← phi( form_mode::@12/(byte*) print_line_cursor#15 form_mode::@9/(byte*) print_line_cursor#12 )
  (byte*) print_char_cursor#51 ← phi( form_mode::@12/(byte*) print_char_cursor#18 form_mode::@9/(byte*) print_char_cursor#15 )
  (byte*) print_str_lines::str#5 ← phi( form_mode::@12/(byte*) print_str_lines::str#2 form_mode::@9/(byte*) print_str_lines::str#1 )
  to:print_str_lines::@1
print_str_lines::@1: scope:[print_str_lines]  from print_str_lines print_str_lines::@7
  (byte*) print_line_cursor#37 ← phi( print_str_lines/(byte*) print_line_cursor#45 print_str_lines::@7/(byte*) print_line_cursor#1 )
  (byte*) print_char_cursor#43 ← phi( print_str_lines/(byte*) print_char_cursor#51 print_str_lines::@7/(byte*) print_char_cursor#2 )
  (byte*) print_str_lines::str#3 ← phi( print_str_lines/(byte*) print_str_lines::str#5 print_str_lines::@7/(byte*) print_str_lines::str#6 )
  (bool~) print_str_lines::$3 ← (number) 0 != *((byte*) print_str_lines::str#3)
  if((bool~) print_str_lines::$3) goto print_str_lines::@2
  to:print_str_lines::@return
print_str_lines::@2: scope:[print_str_lines]  from print_str_lines::@1 print_str_lines::@3
  (byte*) print_line_cursor#54 ← phi( print_str_lines::@1/(byte*) print_line_cursor#37 print_str_lines::@3/(byte*) print_line_cursor#46 )
  (byte*) print_char_cursor#52 ← phi( print_str_lines::@1/(byte*) print_char_cursor#43 print_str_lines::@3/(byte*) print_char_cursor#53 )
  (byte*) print_str_lines::str#4 ← phi( print_str_lines::@1/(byte*) print_str_lines::str#3 print_str_lines::@3/(byte*) print_str_lines::str#7 )
  (byte) print_str_lines::ch#0 ← *((byte*) print_str_lines::str#4)
  (byte*) print_str_lines::str#0 ← ++ (byte*) print_str_lines::str#4
  (bool~) print_str_lines::$5 ← (number) 0 != (byte) print_str_lines::ch#0
  (bool~) print_str_lines::$0 ← ! (bool~) print_str_lines::$5
  if((bool~) print_str_lines::$0) goto print_str_lines::@3
  to:print_str_lines::@4
print_str_lines::@3: scope:[print_str_lines]  from print_str_lines::@2 print_str_lines::@6
  (byte*) print_char_cursor#53 ← phi( print_str_lines::@2/(byte*) print_char_cursor#52 print_str_lines::@6/(byte*) print_char_cursor#1 )
  (byte*) print_line_cursor#46 ← phi( print_str_lines::@2/(byte*) print_line_cursor#54 print_str_lines::@6/(byte*) print_line_cursor#55 )
  (byte*) print_str_lines::str#7 ← phi( print_str_lines::@2/(byte*) print_str_lines::str#0 print_str_lines::@6/(byte*) print_str_lines::str#8 )
  (byte) print_str_lines::ch#1 ← phi( print_str_lines::@2/(byte) print_str_lines::ch#0 print_str_lines::@6/(byte) print_str_lines::ch#3 )
  (bool~) print_str_lines::$4 ← (number) 0 != (byte) print_str_lines::ch#1
  if((bool~) print_str_lines::$4) goto print_str_lines::@2
  to:print_str_lines::@5
print_str_lines::@4: scope:[print_str_lines]  from print_str_lines::@2
  (byte*) print_line_cursor#61 ← phi( print_str_lines::@2/(byte*) print_line_cursor#54 )
  (byte*) print_str_lines::str#10 ← phi( print_str_lines::@2/(byte*) print_str_lines::str#0 )
  (byte*) print_char_cursor#41 ← phi( print_str_lines::@2/(byte*) print_char_cursor#52 )
  (byte) print_str_lines::ch#2 ← phi( print_str_lines::@2/(byte) print_str_lines::ch#0 )
  (byte) print_char::ch#0 ← (byte) print_str_lines::ch#2
  call print_char 
  to:print_str_lines::@6
print_str_lines::@6: scope:[print_str_lines]  from print_str_lines::@4
  (byte*) print_line_cursor#55 ← phi( print_str_lines::@4/(byte*) print_line_cursor#61 )
  (byte*) print_str_lines::str#8 ← phi( print_str_lines::@4/(byte*) print_str_lines::str#10 )
  (byte) print_str_lines::ch#3 ← phi( print_str_lines::@4/(byte) print_str_lines::ch#2 )
  (byte*) print_char_cursor#22 ← phi( print_str_lines::@4/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#1 ← (byte*) print_char_cursor#22
  to:print_str_lines::@3
print_str_lines::@5: scope:[print_str_lines]  from print_str_lines::@3
  (byte*) print_str_lines::str#9 ← phi( print_str_lines::@3/(byte*) print_str_lines::str#7 )
  (byte*) print_char_cursor#42 ← phi( print_str_lines::@3/(byte*) print_char_cursor#53 )
  (byte*) print_line_cursor#36 ← phi( print_str_lines::@3/(byte*) print_line_cursor#46 )
  call print_ln 
  to:print_str_lines::@7
print_str_lines::@7: scope:[print_str_lines]  from print_str_lines::@5
  (byte*) print_str_lines::str#6 ← phi( print_str_lines::@5/(byte*) print_str_lines::str#9 )
  (byte*) print_char_cursor#23 ← phi( print_str_lines::@5/(byte*) print_char_cursor#5 )
  (byte*) print_line_cursor#19 ← phi( print_str_lines::@5/(byte*) print_line_cursor#4 )
  (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#19
  (byte*) print_char_cursor#2 ← (byte*) print_char_cursor#23
  to:print_str_lines::@1
print_str_lines::@return: scope:[print_str_lines]  from print_str_lines::@1
  (byte*) print_line_cursor#20 ← phi( print_str_lines::@1/(byte*) print_line_cursor#37 )
  (byte*) print_char_cursor#24 ← phi( print_str_lines::@1/(byte*) print_char_cursor#43 )
  (byte*) print_char_cursor#3 ← (byte*) print_char_cursor#24
  (byte*) print_line_cursor#2 ← (byte*) print_line_cursor#20
  return 
  to:@return

(void()) print_str_at((byte*) print_str_at::str , (byte*) print_str_at::at)
print_str_at: scope:[print_str_at]  from render_preset_name::@12
  (byte*) print_str_at::at#4 ← phi( render_preset_name::@12/(byte*) print_str_at::at#1 )
  (byte*) print_str_at::str#4 ← phi( render_preset_name::@12/(byte*) print_str_at::str#1 )
  to:print_str_at::@1
print_str_at::@1: scope:[print_str_at]  from print_str_at print_str_at::@2
  (byte*) print_str_at::at#3 ← phi( print_str_at/(byte*) print_str_at::at#4 print_str_at::@2/(byte*) print_str_at::at#0 )
  (byte*) print_str_at::str#2 ← phi( print_str_at/(byte*) print_str_at::str#4 print_str_at::@2/(byte*) print_str_at::str#0 )
  (bool~) print_str_at::$0 ← (number) 0 != *((byte*) print_str_at::str#2)
  if((bool~) print_str_at::$0) goto print_str_at::@2
  to:print_str_at::@return
print_str_at::@2: scope:[print_str_at]  from print_str_at::@1
  (byte*) print_str_at::at#2 ← phi( print_str_at::@1/(byte*) print_str_at::at#3 )
  (byte*) print_str_at::str#3 ← phi( print_str_at::@1/(byte*) print_str_at::str#2 )
  *((byte*) print_str_at::at#2) ← *((byte*) print_str_at::str#3)
  (byte*) print_str_at::at#0 ← ++ (byte*) print_str_at::at#2
  (byte*) print_str_at::str#0 ← ++ (byte*) print_str_at::str#3
  to:print_str_at::@1
print_str_at::@return: scope:[print_str_at]  from print_str_at::@1
  return 
  to:@return

(void()) print_ln()
print_ln: scope:[print_ln]  from print_str_lines::@5
  (byte*) print_char_cursor#44 ← phi( print_str_lines::@5/(byte*) print_char_cursor#42 )
  (byte*) print_line_cursor#38 ← phi( print_str_lines::@5/(byte*) print_line_cursor#36 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  (byte*) print_char_cursor#25 ← phi( print_ln/(byte*) print_char_cursor#44 print_ln::@1/(byte*) print_char_cursor#25 )
  (byte*) print_line_cursor#21 ← phi( print_ln/(byte*) print_line_cursor#38 print_ln::@1/(byte*) print_line_cursor#3 )
  (byte*~) print_ln::$0 ← (byte*) print_line_cursor#21 + (number) $28
  (byte*) print_line_cursor#3 ← (byte*~) print_ln::$0
  (bool~) print_ln::$1 ← (byte*) print_line_cursor#3 < (byte*) print_char_cursor#25
  if((bool~) print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  (byte*) print_line_cursor#22 ← phi( print_ln::@1/(byte*) print_line_cursor#3 )
  (byte*) print_char_cursor#4 ← (byte*) print_line_cursor#22
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  (byte*) print_char_cursor#26 ← phi( print_ln::@2/(byte*) print_char_cursor#4 )
  (byte*) print_line_cursor#23 ← phi( print_ln::@2/(byte*) print_line_cursor#22 )
  (byte*) print_line_cursor#4 ← (byte*) print_line_cursor#23
  (byte*) print_char_cursor#5 ← (byte*) print_char_cursor#26
  return 
  to:@return

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from print_str_lines::@4
  (byte*) print_char_cursor#27 ← phi( print_str_lines::@4/(byte*) print_char_cursor#41 )
  (byte) print_char::ch#1 ← phi( print_str_lines::@4/(byte) print_char::ch#0 )
  *((byte*) print_char_cursor#27) ← (byte) print_char::ch#1
  (byte*) print_char_cursor#6 ← ++ (byte*) print_char_cursor#27
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  (byte*) print_char_cursor#28 ← phi( print_char/(byte*) print_char_cursor#6 )
  (byte*) print_char_cursor#7 ← (byte*) print_char_cursor#28
  return 
  to:@return

(void()) print_cls()
print_cls: scope:[print_cls]  from form_mode::@11 form_mode::@8
  (byte*) print_screen#9 ← phi( form_mode::@11/(byte*) print_screen#6 form_mode::@8/(byte*) print_screen#5 )
  (void*) memset::str#0 ← (void*)(byte*) print_screen#9
  (byte) memset::c#0 ← (byte) ' '
  (word) memset::num#0 ← (number) $3e8
  call memset 
  (void*) memset::return#2 ← (void*) memset::return#1
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls
  (byte*) print_screen#10 ← phi( print_cls/(byte*) print_screen#9 )
  (byte*) print_line_cursor#5 ← (byte*) print_screen#10
  (byte*) print_char_cursor#8 ← (byte*) print_line_cursor#5
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  (byte*) print_char_cursor#29 ← phi( print_cls::@1/(byte*) print_char_cursor#8 )
  (byte*) print_line_cursor#24 ← phi( print_cls::@1/(byte*) print_line_cursor#5 )
  (byte*) print_line_cursor#6 ← (byte*) print_line_cursor#24
  (byte*) print_char_cursor#9 ← (byte*) print_char_cursor#29
  return 
  to:@return

(void()) print_set_screen((byte*) print_set_screen::screen)
print_set_screen: scope:[print_set_screen]  from form_mode form_mode::@10
  (byte*) print_set_screen::screen#2 ← phi( form_mode/(byte*) print_set_screen::screen#0 form_mode::@10/(byte*) print_set_screen::screen#1 )
  (byte*) print_screen#1 ← (byte*) print_set_screen::screen#2
  (byte*) print_line_cursor#7 ← (byte*) print_screen#1
  (byte*) print_char_cursor#10 ← (byte*) print_line_cursor#7
  to:print_set_screen::@return
print_set_screen::@return: scope:[print_set_screen]  from print_set_screen
  (byte*) print_char_cursor#30 ← phi( print_set_screen/(byte*) print_char_cursor#10 )
  (byte*) print_line_cursor#25 ← phi( print_set_screen/(byte*) print_line_cursor#7 )
  (byte*) print_screen#11 ← phi( print_set_screen/(byte*) print_screen#1 )
  (byte*) print_screen#2 ← (byte*) print_screen#11
  (byte*) print_line_cursor#8 ← (byte*) print_line_cursor#25
  (byte*) print_char_cursor#11 ← (byte*) print_char_cursor#30
  return 
  to:@return

(void()) keyboard_init()
keyboard_init: scope:[keyboard_init]  from main
  *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) ← (number) $ff
  *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_B_DDR) ← (number) 0
  to:keyboard_init::@return
keyboard_init::@return: scope:[keyboard_init]  from keyboard_init
  return 
  to:@return

(byte()) keyboard_matrix_read((byte) keyboard_matrix_read::rowid)
keyboard_matrix_read: scope:[keyboard_matrix_read]  from keyboard_event_scan::@7
  (byte) keyboard_matrix_read::rowid#1 ← phi( keyboard_event_scan::@7/(byte) keyboard_matrix_read::rowid#0 )
  *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A) ← *((const byte*) keyboard_matrix_row_bitmask + (byte) keyboard_matrix_read::rowid#1)
  (byte~) keyboard_matrix_read::$0 ← ~ *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_B)
  (byte) keyboard_matrix_read::row_pressed_bits#0 ← (byte~) keyboard_matrix_read::$0
  (byte) keyboard_matrix_read::return#0 ← (byte) keyboard_matrix_read::row_pressed_bits#0
  to:keyboard_matrix_read::@return
keyboard_matrix_read::@return: scope:[keyboard_matrix_read]  from keyboard_matrix_read
  (byte) keyboard_matrix_read::return#3 ← phi( keyboard_matrix_read/(byte) keyboard_matrix_read::return#0 )
  (byte) keyboard_matrix_read::return#1 ← (byte) keyboard_matrix_read::return#3
  return 
  to:@return
@2: scope:[]  from @1
  (byte*) print_char_cursor#65 ← phi( @1/(byte*) print_char_cursor#0 )
  (byte*) print_line_cursor#60 ← phi( @1/(byte*) print_line_cursor#0 )
  (byte*) print_screen#37 ← phi( @1/(byte*) print_screen#0 )
  (byte) keyboard_events_size#0 ← (byte) 0
  (byte) keyboard_modifiers#0 ← (byte) 0
  to:@3

(void()) keyboard_event_scan()
keyboard_event_scan: scope:[keyboard_event_scan]  from form_control::@3 gfx_mode::@29
  (byte) keyboard_events_size#97 ← phi( form_control::@3/(byte) keyboard_events_size#48 gfx_mode::@29/(byte) keyboard_events_size#44 )
  (byte) keyboard_event_scan::keycode#0 ← (byte) 0
  (byte) keyboard_event_scan::row#0 ← (byte) 0
  to:keyboard_event_scan::@7
keyboard_event_scan::@7: scope:[keyboard_event_scan]  from keyboard_event_scan keyboard_event_scan::@9
  (byte) keyboard_events_size#89 ← phi( keyboard_event_scan/(byte) keyboard_events_size#97 keyboard_event_scan::@9/(byte) keyboard_events_size#98 )
  (byte) keyboard_event_scan::keycode#11 ← phi( keyboard_event_scan/(byte) keyboard_event_scan::keycode#0 keyboard_event_scan::@9/(byte) keyboard_event_scan::keycode#13 )
  (byte) keyboard_event_scan::row#2 ← phi( keyboard_event_scan/(byte) keyboard_event_scan::row#0 keyboard_event_scan::@9/(byte) keyboard_event_scan::row#1 )
  (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_event_scan::row#2
  call keyboard_matrix_read 
  (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#1
  to:keyboard_event_scan::@20
keyboard_event_scan::@20: scope:[keyboard_event_scan]  from keyboard_event_scan::@7
  (byte) keyboard_events_size#77 ← phi( keyboard_event_scan::@7/(byte) keyboard_events_size#89 )
  (byte) keyboard_event_scan::keycode#7 ← phi( keyboard_event_scan::@7/(byte) keyboard_event_scan::keycode#11 )
  (byte) keyboard_event_scan::row#3 ← phi( keyboard_event_scan::@7/(byte) keyboard_event_scan::row#2 )
  (byte) keyboard_matrix_read::return#4 ← phi( keyboard_event_scan::@7/(byte) keyboard_matrix_read::return#2 )
  (byte~) keyboard_event_scan::$12 ← (byte) keyboard_matrix_read::return#4
  (byte) keyboard_event_scan::row_scan#0 ← (byte~) keyboard_event_scan::$12
  (bool~) keyboard_event_scan::$13 ← (byte) keyboard_event_scan::row_scan#0 != *((const byte*) keyboard_scan_values + (byte) keyboard_event_scan::row#3)
  if((bool~) keyboard_event_scan::$13) goto keyboard_event_scan::@8
  to:keyboard_event_scan::@17
keyboard_event_scan::@8: scope:[keyboard_event_scan]  from keyboard_event_scan::@20
  (byte) keyboard_events_size#55 ← phi( keyboard_event_scan::@20/(byte) keyboard_events_size#77 )
  (byte) keyboard_event_scan::keycode#12 ← phi( keyboard_event_scan::@20/(byte) keyboard_event_scan::keycode#7 )
  (byte) keyboard_event_scan::row#9 ← phi( keyboard_event_scan::@20/(byte) keyboard_event_scan::row#3 )
  (byte) keyboard_event_scan::row_scan#5 ← phi( keyboard_event_scan::@20/(byte) keyboard_event_scan::row_scan#0 )
  (byte) keyboard_event_scan::col#0 ← (byte) 0
  to:keyboard_event_scan::@10
keyboard_event_scan::@17: scope:[keyboard_event_scan]  from keyboard_event_scan::@20
  (byte) keyboard_events_size#106 ← phi( keyboard_event_scan::@20/(byte) keyboard_events_size#77 )
  (byte) keyboard_event_scan::row#7 ← phi( keyboard_event_scan::@20/(byte) keyboard_event_scan::row#3 )
  (byte) keyboard_event_scan::keycode#3 ← phi( keyboard_event_scan::@20/(byte) keyboard_event_scan::keycode#7 )
  (number~) keyboard_event_scan::$14 ← (byte) keyboard_event_scan::keycode#3 + (number) 8
  (byte) keyboard_event_scan::keycode#1 ← (number~) keyboard_event_scan::$14
  to:keyboard_event_scan::@9
keyboard_event_scan::@9: scope:[keyboard_event_scan]  from keyboard_event_scan::@16 keyboard_event_scan::@17
  (byte) keyboard_events_size#98 ← phi( keyboard_event_scan::@16/(byte) keyboard_events_size#105 keyboard_event_scan::@17/(byte) keyboard_events_size#106 )
  (byte) keyboard_event_scan::keycode#13 ← phi( keyboard_event_scan::@16/(byte) keyboard_event_scan::keycode#14 keyboard_event_scan::@17/(byte) keyboard_event_scan::keycode#1 )
  (byte) keyboard_event_scan::row#4 ← phi( keyboard_event_scan::@16/(byte) keyboard_event_scan::row#6 keyboard_event_scan::@17/(byte) keyboard_event_scan::row#7 )
  (byte) keyboard_event_scan::row#1 ← (byte) keyboard_event_scan::row#4 + rangenext(0,7)
  (bool~) keyboard_event_scan::$25 ← (byte) keyboard_event_scan::row#1 != rangelast(0,7)
  if((bool~) keyboard_event_scan::$25) goto keyboard_event_scan::@7
  to:keyboard_event_scan::@18
keyboard_event_scan::@10: scope:[keyboard_event_scan]  from keyboard_event_scan::@11 keyboard_event_scan::@8
  (byte) keyboard_events_size#37 ← phi( keyboard_event_scan::@11/(byte) keyboard_events_size#54 keyboard_event_scan::@8/(byte) keyboard_events_size#55 )
  (byte) keyboard_event_scan::keycode#8 ← phi( keyboard_event_scan::@11/(byte) keyboard_event_scan::keycode#2 keyboard_event_scan::@8/(byte) keyboard_event_scan::keycode#12 )
  (byte) keyboard_event_scan::col#2 ← phi( keyboard_event_scan::@11/(byte) keyboard_event_scan::col#1 keyboard_event_scan::@8/(byte) keyboard_event_scan::col#0 )
  (byte) keyboard_event_scan::row#5 ← phi( keyboard_event_scan::@11/(byte) keyboard_event_scan::row#8 keyboard_event_scan::@8/(byte) keyboard_event_scan::row#9 )
  (byte) keyboard_event_scan::row_scan#1 ← phi( keyboard_event_scan::@11/(byte) keyboard_event_scan::row_scan#4 keyboard_event_scan::@8/(byte) keyboard_event_scan::row_scan#5 )
  (byte~) keyboard_event_scan::$15 ← (byte) keyboard_event_scan::row_scan#1 ^ *((const byte*) keyboard_scan_values + (byte) keyboard_event_scan::row#5)
  (byte~) keyboard_event_scan::$16 ← (byte~) keyboard_event_scan::$15 & *((const byte*) keyboard_matrix_col_bitmask + (byte) keyboard_event_scan::col#2)
  (bool~) keyboard_event_scan::$17 ← (byte~) keyboard_event_scan::$16 != (number) 0
  (bool~) keyboard_event_scan::$18 ← ! (bool~) keyboard_event_scan::$17
  if((bool~) keyboard_event_scan::$18) goto keyboard_event_scan::@11
  to:keyboard_event_scan::@13
keyboard_event_scan::@11: scope:[keyboard_event_scan]  from keyboard_event_scan::@10 keyboard_event_scan::@12 keyboard_event_scan::@13 keyboard_event_scan::@15
  (byte) keyboard_events_size#54 ← phi( keyboard_event_scan::@10/(byte) keyboard_events_size#37 keyboard_event_scan::@12/(byte) keyboard_events_size#1 keyboard_event_scan::@13/(byte) keyboard_events_size#18 keyboard_event_scan::@15/(byte) keyboard_events_size#2 )
  (byte) keyboard_event_scan::row#8 ← phi( keyboard_event_scan::@10/(byte) keyboard_event_scan::row#5 keyboard_event_scan::@12/(byte) keyboard_event_scan::row#10 keyboard_event_scan::@13/(byte) keyboard_event_scan::row#11 keyboard_event_scan::@15/(byte) keyboard_event_scan::row#12 )
  (byte) keyboard_event_scan::row_scan#4 ← phi( keyboard_event_scan::@10/(byte) keyboard_event_scan::row_scan#1 keyboard_event_scan::@12/(byte) keyboard_event_scan::row_scan#7 keyboard_event_scan::@13/(byte) keyboard_event_scan::row_scan#6 keyboard_event_scan::@15/(byte) keyboard_event_scan::row_scan#8 )
  (byte) keyboard_event_scan::col#3 ← phi( keyboard_event_scan::@10/(byte) keyboard_event_scan::col#2 keyboard_event_scan::@12/(byte) keyboard_event_scan::col#5 keyboard_event_scan::@13/(byte) keyboard_event_scan::col#6 keyboard_event_scan::@15/(byte) keyboard_event_scan::col#7 )
  (byte) keyboard_event_scan::keycode#4 ← phi( keyboard_event_scan::@10/(byte) keyboard_event_scan::keycode#8 keyboard_event_scan::@12/(byte) keyboard_event_scan::keycode#5 keyboard_event_scan::@13/(byte) keyboard_event_scan::keycode#9 keyboard_event_scan::@15/(byte) keyboard_event_scan::keycode#6 )
  (byte) keyboard_event_scan::keycode#2 ← ++ (byte) keyboard_event_scan::keycode#4
  (byte) keyboard_event_scan::col#1 ← (byte) keyboard_event_scan::col#3 + rangenext(0,7)
  (bool~) keyboard_event_scan::$24 ← (byte) keyboard_event_scan::col#1 != rangelast(0,7)
  if((bool~) keyboard_event_scan::$24) goto keyboard_event_scan::@10
  to:keyboard_event_scan::@16
keyboard_event_scan::@13: scope:[keyboard_event_scan]  from keyboard_event_scan::@10
  (byte) keyboard_event_scan::row#11 ← phi( keyboard_event_scan::@10/(byte) keyboard_event_scan::row#5 )
  (byte) keyboard_event_scan::row_scan#6 ← phi( keyboard_event_scan::@10/(byte) keyboard_event_scan::row_scan#1 )
  (byte) keyboard_event_scan::col#6 ← phi( keyboard_event_scan::@10/(byte) keyboard_event_scan::col#2 )
  (byte) keyboard_event_scan::keycode#9 ← phi( keyboard_event_scan::@10/(byte) keyboard_event_scan::keycode#8 )
  (byte) keyboard_events_size#18 ← phi( keyboard_event_scan::@10/(byte) keyboard_events_size#37 )
  (bool~) keyboard_event_scan::$19 ← (byte) keyboard_events_size#18 != (number) 8
  (bool~) keyboard_event_scan::$20 ← ! (bool~) keyboard_event_scan::$19
  if((bool~) keyboard_event_scan::$20) goto keyboard_event_scan::@11
  to:keyboard_event_scan::@14
keyboard_event_scan::@14: scope:[keyboard_event_scan]  from keyboard_event_scan::@13
  (byte) keyboard_event_scan::row#13 ← phi( keyboard_event_scan::@13/(byte) keyboard_event_scan::row#11 )
  (byte) keyboard_events_size#38 ← phi( keyboard_event_scan::@13/(byte) keyboard_events_size#18 )
  (byte) keyboard_event_scan::keycode#10 ← phi( keyboard_event_scan::@13/(byte) keyboard_event_scan::keycode#9 )
  (byte) keyboard_event_scan::col#4 ← phi( keyboard_event_scan::@13/(byte) keyboard_event_scan::col#6 )
  (byte) keyboard_event_scan::row_scan#2 ← phi( keyboard_event_scan::@13/(byte) keyboard_event_scan::row_scan#6 )
  (byte~) keyboard_event_scan::$21 ← (byte) keyboard_event_scan::row_scan#2 & *((const byte*) keyboard_matrix_col_bitmask + (byte) keyboard_event_scan::col#4)
  (byte) keyboard_event_scan::event_type#0 ← (byte~) keyboard_event_scan::$21
  (bool~) keyboard_event_scan::$22 ← (byte) keyboard_event_scan::event_type#0 == (number) 0
  if((bool~) keyboard_event_scan::$22) goto keyboard_event_scan::@12
  to:keyboard_event_scan::@15
keyboard_event_scan::@12: scope:[keyboard_event_scan]  from keyboard_event_scan::@14
  (byte) keyboard_event_scan::row#10 ← phi( keyboard_event_scan::@14/(byte) keyboard_event_scan::row#13 )
  (byte) keyboard_event_scan::row_scan#7 ← phi( keyboard_event_scan::@14/(byte) keyboard_event_scan::row_scan#2 )
  (byte) keyboard_event_scan::col#5 ← phi( keyboard_event_scan::@14/(byte) keyboard_event_scan::col#4 )
  (byte) keyboard_events_size#19 ← phi( keyboard_event_scan::@14/(byte) keyboard_events_size#38 )
  (byte) keyboard_event_scan::keycode#5 ← phi( keyboard_event_scan::@14/(byte) keyboard_event_scan::keycode#10 )
  (number~) keyboard_event_scan::$23 ← (byte) keyboard_event_scan::keycode#5 | (number) $40
  *((const byte*) keyboard_events + (byte) keyboard_events_size#19) ← (number~) keyboard_event_scan::$23
  (byte) keyboard_events_size#1 ← ++ (byte) keyboard_events_size#19
  to:keyboard_event_scan::@11
keyboard_event_scan::@15: scope:[keyboard_event_scan]  from keyboard_event_scan::@14
  (byte) keyboard_event_scan::row#12 ← phi( keyboard_event_scan::@14/(byte) keyboard_event_scan::row#13 )
  (byte) keyboard_event_scan::row_scan#8 ← phi( keyboard_event_scan::@14/(byte) keyboard_event_scan::row_scan#2 )
  (byte) keyboard_event_scan::col#7 ← phi( keyboard_event_scan::@14/(byte) keyboard_event_scan::col#4 )
  (byte) keyboard_events_size#20 ← phi( keyboard_event_scan::@14/(byte) keyboard_events_size#38 )
  (byte) keyboard_event_scan::keycode#6 ← phi( keyboard_event_scan::@14/(byte) keyboard_event_scan::keycode#10 )
  *((const byte*) keyboard_events + (byte) keyboard_events_size#20) ← (byte) keyboard_event_scan::keycode#6
  (byte) keyboard_events_size#2 ← ++ (byte) keyboard_events_size#20
  to:keyboard_event_scan::@11
keyboard_event_scan::@16: scope:[keyboard_event_scan]  from keyboard_event_scan::@11
  (byte) keyboard_events_size#105 ← phi( keyboard_event_scan::@11/(byte) keyboard_events_size#54 )
  (byte) keyboard_event_scan::keycode#14 ← phi( keyboard_event_scan::@11/(byte) keyboard_event_scan::keycode#2 )
  (byte) keyboard_event_scan::row#6 ← phi( keyboard_event_scan::@11/(byte) keyboard_event_scan::row#8 )
  (byte) keyboard_event_scan::row_scan#3 ← phi( keyboard_event_scan::@11/(byte) keyboard_event_scan::row_scan#4 )
  *((const byte*) keyboard_scan_values + (byte) keyboard_event_scan::row#6) ← (byte) keyboard_event_scan::row_scan#3
  to:keyboard_event_scan::@9
keyboard_event_scan::@18: scope:[keyboard_event_scan]  from keyboard_event_scan::@9
  (byte) keyboard_events_size#114 ← phi( keyboard_event_scan::@9/(byte) keyboard_events_size#98 )
  (byte) keyboard_modifiers#1 ← (number) 0
  (byte) keyboard_event_pressed::keycode#0 ← (const nomodify byte) KEY_LSHIFT
  call keyboard_event_pressed 
  (byte) keyboard_event_pressed::return#0 ← (byte) keyboard_event_pressed::return#5
  to:keyboard_event_scan::@21
keyboard_event_scan::@21: scope:[keyboard_event_scan]  from keyboard_event_scan::@18
  (byte) keyboard_events_size#111 ← phi( keyboard_event_scan::@18/(byte) keyboard_events_size#114 )
  (byte) keyboard_modifiers#34 ← phi( keyboard_event_scan::@18/(byte) keyboard_modifiers#1 )
  (byte) keyboard_event_pressed::return#6 ← phi( keyboard_event_scan::@18/(byte) keyboard_event_pressed::return#0 )
  (byte~) keyboard_event_scan::$0 ← (byte) keyboard_event_pressed::return#6
  (bool~) keyboard_event_scan::$1 ← (byte~) keyboard_event_scan::$0 != (number) 0
  (bool~) keyboard_event_scan::$2 ← ! (bool~) keyboard_event_scan::$1
  if((bool~) keyboard_event_scan::$2) goto keyboard_event_scan::@1
  to:keyboard_event_scan::@19
keyboard_event_scan::@1: scope:[keyboard_event_scan]  from keyboard_event_scan::@19 keyboard_event_scan::@21
  (byte) keyboard_events_size#107 ← phi( keyboard_event_scan::@19/(byte) keyboard_events_size#110 keyboard_event_scan::@21/(byte) keyboard_events_size#111 )
  (byte) keyboard_modifiers#53 ← phi( keyboard_event_scan::@19/(byte) keyboard_modifiers#2 keyboard_event_scan::@21/(byte) keyboard_modifiers#34 )
  (byte) keyboard_event_pressed::keycode#1 ← (const nomodify byte) KEY_RSHIFT
  call keyboard_event_pressed 
  (byte) keyboard_event_pressed::return#1 ← (byte) keyboard_event_pressed::return#5
  to:keyboard_event_scan::@22
keyboard_event_scan::@22: scope:[keyboard_event_scan]  from keyboard_event_scan::@1
  (byte) keyboard_events_size#99 ← phi( keyboard_event_scan::@1/(byte) keyboard_events_size#107 )
  (byte) keyboard_modifiers#35 ← phi( keyboard_event_scan::@1/(byte) keyboard_modifiers#53 )
  (byte) keyboard_event_pressed::return#7 ← phi( keyboard_event_scan::@1/(byte) keyboard_event_pressed::return#1 )
  (byte~) keyboard_event_scan::$3 ← (byte) keyboard_event_pressed::return#7
  (bool~) keyboard_event_scan::$4 ← (byte~) keyboard_event_scan::$3 != (number) 0
  (bool~) keyboard_event_scan::$5 ← ! (bool~) keyboard_event_scan::$4
  if((bool~) keyboard_event_scan::$5) goto keyboard_event_scan::@2
  to:keyboard_event_scan::@4
keyboard_event_scan::@19: scope:[keyboard_event_scan]  from keyboard_event_scan::@21
  (byte) keyboard_events_size#110 ← phi( keyboard_event_scan::@21/(byte) keyboard_events_size#111 )
  (byte) keyboard_modifiers#17 ← phi( keyboard_event_scan::@21/(byte) keyboard_modifiers#34 )
  (byte~) keyboard_event_scan::$26 ← (byte) keyboard_modifiers#17 | (const nomodify byte) KEY_MODIFIER_LSHIFT
  (byte) keyboard_modifiers#2 ← (byte~) keyboard_event_scan::$26
  to:keyboard_event_scan::@1
keyboard_event_scan::@2: scope:[keyboard_event_scan]  from keyboard_event_scan::@22 keyboard_event_scan::@4
  (byte) keyboard_events_size#90 ← phi( keyboard_event_scan::@22/(byte) keyboard_events_size#99 keyboard_event_scan::@4/(byte) keyboard_events_size#100 )
  (byte) keyboard_modifiers#54 ← phi( keyboard_event_scan::@22/(byte) keyboard_modifiers#35 keyboard_event_scan::@4/(byte) keyboard_modifiers#3 )
  (byte) keyboard_event_pressed::keycode#2 ← (const nomodify byte) KEY_CTRL
  call keyboard_event_pressed 
  (byte) keyboard_event_pressed::return#2 ← (byte) keyboard_event_pressed::return#5
  to:keyboard_event_scan::@23
keyboard_event_scan::@23: scope:[keyboard_event_scan]  from keyboard_event_scan::@2
  (byte) keyboard_events_size#78 ← phi( keyboard_event_scan::@2/(byte) keyboard_events_size#90 )
  (byte) keyboard_modifiers#36 ← phi( keyboard_event_scan::@2/(byte) keyboard_modifiers#54 )
  (byte) keyboard_event_pressed::return#8 ← phi( keyboard_event_scan::@2/(byte) keyboard_event_pressed::return#2 )
  (byte~) keyboard_event_scan::$6 ← (byte) keyboard_event_pressed::return#8
  (bool~) keyboard_event_scan::$7 ← (byte~) keyboard_event_scan::$6 != (number) 0
  (bool~) keyboard_event_scan::$8 ← ! (bool~) keyboard_event_scan::$7
  if((bool~) keyboard_event_scan::$8) goto keyboard_event_scan::@3
  to:keyboard_event_scan::@5
keyboard_event_scan::@4: scope:[keyboard_event_scan]  from keyboard_event_scan::@22
  (byte) keyboard_events_size#100 ← phi( keyboard_event_scan::@22/(byte) keyboard_events_size#99 )
  (byte) keyboard_modifiers#18 ← phi( keyboard_event_scan::@22/(byte) keyboard_modifiers#35 )
  (byte~) keyboard_event_scan::$27 ← (byte) keyboard_modifiers#18 | (const nomodify byte) KEY_MODIFIER_RSHIFT
  (byte) keyboard_modifiers#3 ← (byte~) keyboard_event_scan::$27
  to:keyboard_event_scan::@2
keyboard_event_scan::@3: scope:[keyboard_event_scan]  from keyboard_event_scan::@23 keyboard_event_scan::@5
  (byte) keyboard_events_size#56 ← phi( keyboard_event_scan::@23/(byte) keyboard_events_size#78 keyboard_event_scan::@5/(byte) keyboard_events_size#79 )
  (byte) keyboard_modifiers#55 ← phi( keyboard_event_scan::@23/(byte) keyboard_modifiers#36 keyboard_event_scan::@5/(byte) keyboard_modifiers#4 )
  (byte) keyboard_event_pressed::keycode#3 ← (const nomodify byte) KEY_COMMODORE
  call keyboard_event_pressed 
  (byte) keyboard_event_pressed::return#3 ← (byte) keyboard_event_pressed::return#5
  to:keyboard_event_scan::@24
keyboard_event_scan::@24: scope:[keyboard_event_scan]  from keyboard_event_scan::@3
  (byte) keyboard_events_size#39 ← phi( keyboard_event_scan::@3/(byte) keyboard_events_size#56 )
  (byte) keyboard_modifiers#37 ← phi( keyboard_event_scan::@3/(byte) keyboard_modifiers#55 )
  (byte) keyboard_event_pressed::return#9 ← phi( keyboard_event_scan::@3/(byte) keyboard_event_pressed::return#3 )
  (byte~) keyboard_event_scan::$9 ← (byte) keyboard_event_pressed::return#9
  (bool~) keyboard_event_scan::$10 ← (byte~) keyboard_event_scan::$9 != (number) 0
  (bool~) keyboard_event_scan::$11 ← ! (bool~) keyboard_event_scan::$10
  if((bool~) keyboard_event_scan::$11) goto keyboard_event_scan::@return
  to:keyboard_event_scan::@6
keyboard_event_scan::@5: scope:[keyboard_event_scan]  from keyboard_event_scan::@23
  (byte) keyboard_events_size#79 ← phi( keyboard_event_scan::@23/(byte) keyboard_events_size#78 )
  (byte) keyboard_modifiers#19 ← phi( keyboard_event_scan::@23/(byte) keyboard_modifiers#36 )
  (byte~) keyboard_event_scan::$28 ← (byte) keyboard_modifiers#19 | (const nomodify byte) KEY_MODIFIER_CTRL
  (byte) keyboard_modifiers#4 ← (byte~) keyboard_event_scan::$28
  to:keyboard_event_scan::@3
keyboard_event_scan::@6: scope:[keyboard_event_scan]  from keyboard_event_scan::@24
  (byte) keyboard_events_size#40 ← phi( keyboard_event_scan::@24/(byte) keyboard_events_size#39 )
  (byte) keyboard_modifiers#20 ← phi( keyboard_event_scan::@24/(byte) keyboard_modifiers#37 )
  (byte~) keyboard_event_scan::$29 ← (byte) keyboard_modifiers#20 | (const nomodify byte) KEY_MODIFIER_COMMODORE
  (byte) keyboard_modifiers#5 ← (byte~) keyboard_event_scan::$29
  to:keyboard_event_scan::@return
keyboard_event_scan::@return: scope:[keyboard_event_scan]  from keyboard_event_scan::@24 keyboard_event_scan::@6
  (byte) keyboard_modifiers#21 ← phi( keyboard_event_scan::@24/(byte) keyboard_modifiers#37 keyboard_event_scan::@6/(byte) keyboard_modifiers#5 )
  (byte) keyboard_events_size#21 ← phi( keyboard_event_scan::@24/(byte) keyboard_events_size#39 keyboard_event_scan::@6/(byte) keyboard_events_size#40 )
  (byte) keyboard_events_size#3 ← (byte) keyboard_events_size#21
  (byte) keyboard_modifiers#6 ← (byte) keyboard_modifiers#21
  return 
  to:@return

(byte()) keyboard_event_pressed((byte) keyboard_event_pressed::keycode)
keyboard_event_pressed: scope:[keyboard_event_pressed]  from keyboard_event_scan::@1 keyboard_event_scan::@18 keyboard_event_scan::@2 keyboard_event_scan::@3
  (byte) keyboard_event_pressed::keycode#4 ← phi( keyboard_event_scan::@1/(byte) keyboard_event_pressed::keycode#1 keyboard_event_scan::@18/(byte) keyboard_event_pressed::keycode#0 keyboard_event_scan::@2/(byte) keyboard_event_pressed::keycode#2 keyboard_event_scan::@3/(byte) keyboard_event_pressed::keycode#3 )
  (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#4 >> (number) 3
  (byte) keyboard_event_pressed::row_bits#0 ← *((const byte*) keyboard_scan_values + (byte~) keyboard_event_pressed::$0)
  (number~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#4 & (number) 7
  (byte~) keyboard_event_pressed::$2 ← (byte) keyboard_event_pressed::row_bits#0 & *((const byte*) keyboard_matrix_col_bitmask + (number~) keyboard_event_pressed::$1)
  (byte) keyboard_event_pressed::return#4 ← (byte~) keyboard_event_pressed::$2
  to:keyboard_event_pressed::@return
keyboard_event_pressed::@return: scope:[keyboard_event_pressed]  from keyboard_event_pressed
  (byte) keyboard_event_pressed::return#10 ← phi( keyboard_event_pressed/(byte) keyboard_event_pressed::return#4 )
  (byte) keyboard_event_pressed::return#5 ← (byte) keyboard_event_pressed::return#10
  return 
  to:@return

(byte()) keyboard_event_get()
keyboard_event_get: scope:[keyboard_event_get]  from form_control::@23 gfx_mode::@35
  (byte) keyboard_events_size#22 ← phi( form_control::@23/(byte) keyboard_events_size#14 gfx_mode::@35/(byte) keyboard_events_size#9 )
  (bool~) keyboard_event_get::$0 ← (byte) keyboard_events_size#22 == (number) 0
  if((bool~) keyboard_event_get::$0) goto keyboard_event_get::@1
  to:keyboard_event_get::@2
keyboard_event_get::@1: scope:[keyboard_event_get]  from keyboard_event_get
  (byte) keyboard_events_size#41 ← phi( keyboard_event_get/(byte) keyboard_events_size#22 )
  (byte) keyboard_event_get::return#0 ← (number) $ff
  to:keyboard_event_get::@return
keyboard_event_get::@2: scope:[keyboard_event_get]  from keyboard_event_get
  (byte) keyboard_events_size#23 ← phi( keyboard_event_get/(byte) keyboard_events_size#22 )
  (byte) keyboard_events_size#4 ← -- (byte) keyboard_events_size#23
  (byte) keyboard_event_get::return#1 ← *((const byte*) keyboard_events + (byte) keyboard_events_size#4)
  to:keyboard_event_get::@return
keyboard_event_get::@return: scope:[keyboard_event_get]  from keyboard_event_get::@1 keyboard_event_get::@2
  (byte) keyboard_events_size#24 ← phi( keyboard_event_get::@1/(byte) keyboard_events_size#41 keyboard_event_get::@2/(byte) keyboard_events_size#4 )
  (byte) keyboard_event_get::return#5 ← phi( keyboard_event_get::@1/(byte) keyboard_event_get::return#0 keyboard_event_get::@2/(byte) keyboard_event_get::return#1 )
  (byte) keyboard_event_get::return#2 ← (byte) keyboard_event_get::return#5
  (byte) keyboard_events_size#5 ← (byte) keyboard_events_size#24
  return 
  to:@return

(void()) bitmap_init((byte*) bitmap_init::bitmap)
bitmap_init: scope:[bitmap_init]  from gfx_init_vic_bitmap
  (byte*) bitmap_init::bitmap#2 ← phi( gfx_init_vic_bitmap/(byte*) bitmap_init::bitmap#0 )
  (byte) bitmap_init::bits#0 ← (byte) $80
  (byte) bitmap_init::x#0 ← (byte) 0
  to:bitmap_init::@1
bitmap_init::@1: scope:[bitmap_init]  from bitmap_init bitmap_init::@2
  (byte) bitmap_init::bits#3 ← phi( bitmap_init/(byte) bitmap_init::bits#0 bitmap_init::@2/(byte) bitmap_init::bits#4 )
  (byte*) bitmap_init::bitmap#1 ← phi( bitmap_init/(byte*) bitmap_init::bitmap#2 bitmap_init::@2/(byte*) bitmap_init::bitmap#3 )
  (byte) bitmap_init::x#2 ← phi( bitmap_init/(byte) bitmap_init::x#0 bitmap_init::@2/(byte) bitmap_init::x#1 )
  (number~) bitmap_init::$0 ← (byte) bitmap_init::x#2 & (number) $f8
  *((const to_nomodify byte*) bitmap_plot_xlo + (byte) bitmap_init::x#2) ← (number~) bitmap_init::$0
  (byte~) bitmap_init::$1 ← > (byte*) bitmap_init::bitmap#1
  *((const to_nomodify byte*) bitmap_plot_xhi + (byte) bitmap_init::x#2) ← (byte~) bitmap_init::$1
  *((const to_nomodify byte*) bitmap_plot_bit + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3
  (byte~) bitmap_init::$2 ← (byte) bitmap_init::bits#3 >> (number) 1
  (byte) bitmap_init::bits#1 ← (byte~) bitmap_init::$2
  (bool~) bitmap_init::$3 ← (byte) bitmap_init::bits#1 == (number) 0
  (bool~) bitmap_init::$4 ← ! (bool~) bitmap_init::$3
  if((bool~) bitmap_init::$4) goto bitmap_init::@2
  to:bitmap_init::@3
bitmap_init::@2: scope:[bitmap_init]  from bitmap_init::@1 bitmap_init::@3
  (byte) bitmap_init::bits#4 ← phi( bitmap_init::@1/(byte) bitmap_init::bits#1 bitmap_init::@3/(byte) bitmap_init::bits#2 )
  (byte*) bitmap_init::bitmap#3 ← phi( bitmap_init::@1/(byte*) bitmap_init::bitmap#1 bitmap_init::@3/(byte*) bitmap_init::bitmap#4 )
  (byte) bitmap_init::x#3 ← phi( bitmap_init::@1/(byte) bitmap_init::x#2 bitmap_init::@3/(byte) bitmap_init::x#4 )
  (byte) bitmap_init::x#1 ← (byte) bitmap_init::x#3 + rangenext(0,$ff)
  (bool~) bitmap_init::$5 ← (byte) bitmap_init::x#1 != rangelast(0,$ff)
  if((bool~) bitmap_init::$5) goto bitmap_init::@1
  to:bitmap_init::@4
bitmap_init::@3: scope:[bitmap_init]  from bitmap_init::@1
  (byte*) bitmap_init::bitmap#4 ← phi( bitmap_init::@1/(byte*) bitmap_init::bitmap#1 )
  (byte) bitmap_init::x#4 ← phi( bitmap_init::@1/(byte) bitmap_init::x#2 )
  (byte) bitmap_init::bits#2 ← (number) $80
  to:bitmap_init::@2
bitmap_init::@4: scope:[bitmap_init]  from bitmap_init::@2
  (byte*) bitmap_init::yoffs#0 ← (byte*)(number) 0
  (byte) bitmap_init::y#0 ← (byte) 0
  to:bitmap_init::@5
bitmap_init::@5: scope:[bitmap_init]  from bitmap_init::@4 bitmap_init::@6
  (byte*) bitmap_init::yoffs#2 ← phi( bitmap_init::@4/(byte*) bitmap_init::yoffs#0 bitmap_init::@6/(byte*) bitmap_init::yoffs#4 )
  (byte) bitmap_init::y#2 ← phi( bitmap_init::@4/(byte) bitmap_init::y#0 bitmap_init::@6/(byte) bitmap_init::y#1 )
  (number~) bitmap_init::$6 ← (byte) bitmap_init::y#2 & (number) 7
  (byte~) bitmap_init::$7 ← < (byte*) bitmap_init::yoffs#2
  (number~) bitmap_init::$8 ← (number~) bitmap_init::$6 | (byte~) bitmap_init::$7
  *((const to_nomodify byte*) bitmap_plot_ylo + (byte) bitmap_init::y#2) ← (number~) bitmap_init::$8
  (byte~) bitmap_init::$9 ← > (byte*) bitmap_init::yoffs#2
  *((const to_nomodify byte*) bitmap_plot_yhi + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$9
  (number~) bitmap_init::$10 ← (byte) bitmap_init::y#2 & (number) 7
  (bool~) bitmap_init::$11 ← (number~) bitmap_init::$10 == (number) 7
  (bool~) bitmap_init::$12 ← ! (bool~) bitmap_init::$11
  if((bool~) bitmap_init::$12) goto bitmap_init::@6
  to:bitmap_init::@7
bitmap_init::@6: scope:[bitmap_init]  from bitmap_init::@5 bitmap_init::@7
  (byte*) bitmap_init::yoffs#4 ← phi( bitmap_init::@5/(byte*) bitmap_init::yoffs#2 bitmap_init::@7/(byte*) bitmap_init::yoffs#1 )
  (byte) bitmap_init::y#3 ← phi( bitmap_init::@5/(byte) bitmap_init::y#2 bitmap_init::@7/(byte) bitmap_init::y#4 )
  (byte) bitmap_init::y#1 ← (byte) bitmap_init::y#3 + rangenext(0,$ff)
  (bool~) bitmap_init::$14 ← (byte) bitmap_init::y#1 != rangelast(0,$ff)
  if((bool~) bitmap_init::$14) goto bitmap_init::@5
  to:bitmap_init::@return
bitmap_init::@7: scope:[bitmap_init]  from bitmap_init::@5
  (byte) bitmap_init::y#4 ← phi( bitmap_init::@5/(byte) bitmap_init::y#2 )
  (byte*) bitmap_init::yoffs#3 ← phi( bitmap_init::@5/(byte*) bitmap_init::yoffs#2 )
  (byte*~) bitmap_init::$13 ← (byte*) bitmap_init::yoffs#3 + (number) $28*(number) 8
  (byte*) bitmap_init::yoffs#1 ← (byte*~) bitmap_init::$13
  to:bitmap_init::@6
bitmap_init::@return: scope:[bitmap_init]  from bitmap_init::@6
  return 
  to:@return

(void()) bitmap_clear()
bitmap_clear: scope:[bitmap_clear]  from gfx_init_vic_bitmap::@3
  (byte*) bitmap_clear::bitmap#0 ← (byte*){ *((const to_nomodify byte*) bitmap_plot_xhi + (number) 0), *((const to_nomodify byte*) bitmap_plot_xlo + (number) 0) }
  (byte) bitmap_clear::y#0 ← (byte) 0
  to:bitmap_clear::@1
bitmap_clear::@1: scope:[bitmap_clear]  from bitmap_clear bitmap_clear::@3
  (byte) bitmap_clear::y#4 ← phi( bitmap_clear/(byte) bitmap_clear::y#0 bitmap_clear::@3/(byte) bitmap_clear::y#1 )
  (byte*) bitmap_clear::bitmap#3 ← phi( bitmap_clear/(byte*) bitmap_clear::bitmap#0 bitmap_clear::@3/(byte*) bitmap_clear::bitmap#4 )
  (byte) bitmap_clear::x#0 ← (byte) 0
  to:bitmap_clear::@2
bitmap_clear::@2: scope:[bitmap_clear]  from bitmap_clear::@1 bitmap_clear::@2
  (byte) bitmap_clear::y#3 ← phi( bitmap_clear::@1/(byte) bitmap_clear::y#4 bitmap_clear::@2/(byte) bitmap_clear::y#3 )
  (byte) bitmap_clear::x#2 ← phi( bitmap_clear::@1/(byte) bitmap_clear::x#0 bitmap_clear::@2/(byte) bitmap_clear::x#1 )
  (byte*) bitmap_clear::bitmap#2 ← phi( bitmap_clear::@1/(byte*) bitmap_clear::bitmap#3 bitmap_clear::@2/(byte*) bitmap_clear::bitmap#1 )
  *((byte*) bitmap_clear::bitmap#2) ← (number) 0
  (byte*) bitmap_clear::bitmap#1 ← ++ (byte*) bitmap_clear::bitmap#2
  (byte) bitmap_clear::x#1 ← (byte) bitmap_clear::x#2 + rangenext(0,$c7)
  (bool~) bitmap_clear::$0 ← (byte) bitmap_clear::x#1 != rangelast(0,$c7)
  if((bool~) bitmap_clear::$0) goto bitmap_clear::@2
  to:bitmap_clear::@3
bitmap_clear::@3: scope:[bitmap_clear]  from bitmap_clear::@2
  (byte*) bitmap_clear::bitmap#4 ← phi( bitmap_clear::@2/(byte*) bitmap_clear::bitmap#1 )
  (byte) bitmap_clear::y#2 ← phi( bitmap_clear::@2/(byte) bitmap_clear::y#3 )
  (byte) bitmap_clear::y#1 ← (byte) bitmap_clear::y#2 + rangenext(0,$27)
  (bool~) bitmap_clear::$1 ← (byte) bitmap_clear::y#1 != rangelast(0,$27)
  if((bool~) bitmap_clear::$1) goto bitmap_clear::@1
  to:bitmap_clear::@return
bitmap_clear::@return: scope:[bitmap_clear]  from bitmap_clear::@3
  return 
  to:@return

(void()) bitmap_plot((byte) bitmap_plot::x , (byte) bitmap_plot::y)
bitmap_plot: scope:[bitmap_plot]  from bitmap_line_xdyd::@1 bitmap_line_xdyi::@1 bitmap_line_ydxd::@1 bitmap_line_ydxi::@1
  (byte) bitmap_plot::y#4 ← phi( bitmap_line_xdyd::@1/(byte) bitmap_plot::y#1 bitmap_line_xdyi::@1/(byte) bitmap_plot::y#0 bitmap_line_ydxd::@1/(byte) bitmap_plot::y#3 bitmap_line_ydxi::@1/(byte) bitmap_plot::y#2 )
  (byte) bitmap_plot::x#4 ← phi( bitmap_line_xdyd::@1/(byte) bitmap_plot::x#1 bitmap_line_xdyi::@1/(byte) bitmap_plot::x#0 bitmap_line_ydxd::@1/(byte) bitmap_plot::x#3 bitmap_line_ydxi::@1/(byte) bitmap_plot::x#2 )
  (word) bitmap_plot::plotter_x#0 ← (word){ *((const to_nomodify byte*) bitmap_plot_xhi + (byte) bitmap_plot::x#4), *((const to_nomodify byte*) bitmap_plot_xlo + (byte) bitmap_plot::x#4) }
  (word) bitmap_plot::plotter_y#0 ← (word){ *((const to_nomodify byte*) bitmap_plot_yhi + (byte) bitmap_plot::y#4), *((const to_nomodify byte*) bitmap_plot_ylo + (byte) bitmap_plot::y#4) }
  (word~) bitmap_plot::$0 ← (word) bitmap_plot::plotter_x#0 + (word) bitmap_plot::plotter_y#0
  (byte*) bitmap_plot::plotter#0 ← ((byte*)) (word~) bitmap_plot::$0
  (byte~) bitmap_plot::$1 ← *((byte*) bitmap_plot::plotter#0) | *((const to_nomodify byte*) bitmap_plot_bit + (byte) bitmap_plot::x#4)
  *((byte*) bitmap_plot::plotter#0) ← (byte~) bitmap_plot::$1
  to:bitmap_plot::@return
bitmap_plot::@return: scope:[bitmap_plot]  from bitmap_plot
  return 
  to:@return

(void()) bitmap_line((byte) bitmap_line::x0 , (byte) bitmap_line::x1 , (byte) bitmap_line::y0 , (byte) bitmap_line::y1)
bitmap_line: scope:[bitmap_line]  from gfx_init_vic_bitmap::@2
  (byte) bitmap_line::y1#13 ← phi( gfx_init_vic_bitmap::@2/(byte) bitmap_line::y1#0 )
  (byte) bitmap_line::y0#13 ← phi( gfx_init_vic_bitmap::@2/(byte) bitmap_line::y0#0 )
  (byte) bitmap_line::x1#1 ← phi( gfx_init_vic_bitmap::@2/(byte) bitmap_line::x1#0 )
  (byte) bitmap_line::x0#1 ← phi( gfx_init_vic_bitmap::@2/(byte) bitmap_line::x0#0 )
  (byte) bitmap_line::xd#0 ← (byte) 0
  (byte) bitmap_line::yd#0 ← (byte) 0
  (bool~) bitmap_line::$0 ← (byte) bitmap_line::x0#1 < (byte) bitmap_line::x1#1
  if((bool~) bitmap_line::$0) goto bitmap_line::@1
  to:bitmap_line::@2
bitmap_line::@1: scope:[bitmap_line]  from bitmap_line
  (byte) bitmap_line::y1#1 ← phi( bitmap_line/(byte) bitmap_line::y1#13 )
  (byte) bitmap_line::y0#1 ← phi( bitmap_line/(byte) bitmap_line::y0#13 )
  (byte) bitmap_line::x0#2 ← phi( bitmap_line/(byte) bitmap_line::x0#1 )
  (byte) bitmap_line::x1#2 ← phi( bitmap_line/(byte) bitmap_line::x1#1 )
  (byte~) bitmap_line::$11 ← (byte) bitmap_line::x1#2 - (byte) bitmap_line::x0#2
  (byte) bitmap_line::xd#1 ← (byte~) bitmap_line::$11
  (bool~) bitmap_line::$12 ← (byte) bitmap_line::y0#1 < (byte) bitmap_line::y1#1
  if((bool~) bitmap_line::$12) goto bitmap_line::@11
  to:bitmap_line::@5
bitmap_line::@2: scope:[bitmap_line]  from bitmap_line
  (byte) bitmap_line::y1#2 ← phi( bitmap_line/(byte) bitmap_line::y1#13 )
  (byte) bitmap_line::y0#2 ← phi( bitmap_line/(byte) bitmap_line::y0#13 )
  (byte) bitmap_line::x1#3 ← phi( bitmap_line/(byte) bitmap_line::x1#1 )
  (byte) bitmap_line::x0#3 ← phi( bitmap_line/(byte) bitmap_line::x0#1 )
  (byte~) bitmap_line::$1 ← (byte) bitmap_line::x0#3 - (byte) bitmap_line::x1#3
  (byte) bitmap_line::xd#2 ← (byte~) bitmap_line::$1
  (bool~) bitmap_line::$2 ← (byte) bitmap_line::y0#2 < (byte) bitmap_line::y1#2
  if((bool~) bitmap_line::$2) goto bitmap_line::@7
  to:bitmap_line::@3
bitmap_line::@7: scope:[bitmap_line]  from bitmap_line::@2
  (byte) bitmap_line::x0#11 ← phi( bitmap_line::@2/(byte) bitmap_line::x0#3 )
  (byte) bitmap_line::x1#11 ← phi( bitmap_line::@2/(byte) bitmap_line::x1#3 )
  (byte) bitmap_line::xd#3 ← phi( bitmap_line::@2/(byte) bitmap_line::xd#2 )
  (byte) bitmap_line::y0#3 ← phi( bitmap_line::@2/(byte) bitmap_line::y0#2 )
  (byte) bitmap_line::y1#3 ← phi( bitmap_line::@2/(byte) bitmap_line::y1#2 )
  (byte~) bitmap_line::$7 ← (byte) bitmap_line::y1#3 - (byte) bitmap_line::y0#3
  (byte) bitmap_line::yd#1 ← (byte~) bitmap_line::$7
  (bool~) bitmap_line::$8 ← (byte) bitmap_line::yd#1 < (byte) bitmap_line::xd#3
  if((bool~) bitmap_line::$8) goto bitmap_line::@9
  to:bitmap_line::@10
bitmap_line::@3: scope:[bitmap_line]  from bitmap_line::@2
  (byte) bitmap_line::x0#10 ← phi( bitmap_line::@2/(byte) bitmap_line::x0#3 )
  (byte) bitmap_line::x1#10 ← phi( bitmap_line::@2/(byte) bitmap_line::x1#3 )
  (byte) bitmap_line::xd#4 ← phi( bitmap_line::@2/(byte) bitmap_line::xd#2 )
  (byte) bitmap_line::y1#4 ← phi( bitmap_line::@2/(byte) bitmap_line::y1#2 )
  (byte) bitmap_line::y0#4 ← phi( bitmap_line::@2/(byte) bitmap_line::y0#2 )
  (byte~) bitmap_line::$3 ← (byte) bitmap_line::y0#4 - (byte) bitmap_line::y1#4
  (byte) bitmap_line::yd#2 ← (byte~) bitmap_line::$3
  (bool~) bitmap_line::$4 ← (byte) bitmap_line::yd#2 < (byte) bitmap_line::xd#4
  if((bool~) bitmap_line::$4) goto bitmap_line::@8
  to:bitmap_line::@4
bitmap_line::@8: scope:[bitmap_line]  from bitmap_line::@3
  (byte) bitmap_line::yd#5 ← phi( bitmap_line::@3/(byte) bitmap_line::yd#2 )
  (byte) bitmap_line::xd#5 ← phi( bitmap_line::@3/(byte) bitmap_line::xd#4 )
  (byte) bitmap_line::x0#4 ← phi( bitmap_line::@3/(byte) bitmap_line::x0#10 )
  (byte) bitmap_line::y1#5 ← phi( bitmap_line::@3/(byte) bitmap_line::y1#4 )
  (byte) bitmap_line::x1#4 ← phi( bitmap_line::@3/(byte) bitmap_line::x1#10 )
  (byte) bitmap_line_xdyi::x#0 ← (byte) bitmap_line::x1#4
  (byte) bitmap_line_xdyi::y#0 ← (byte) bitmap_line::y1#5
  (byte) bitmap_line_xdyi::x1#0 ← (byte) bitmap_line::x0#4
  (byte) bitmap_line_xdyi::xd#0 ← (byte) bitmap_line::xd#5
  (byte) bitmap_line_xdyi::yd#0 ← (byte) bitmap_line::yd#5
  call bitmap_line_xdyi 
  to:bitmap_line::@15
bitmap_line::@15: scope:[bitmap_line]  from bitmap_line::@8
  to:bitmap_line::@return
bitmap_line::@4: scope:[bitmap_line]  from bitmap_line::@3
  (byte) bitmap_line::xd#6 ← phi( bitmap_line::@3/(byte) bitmap_line::xd#4 )
  (byte) bitmap_line::yd#6 ← phi( bitmap_line::@3/(byte) bitmap_line::yd#2 )
  (byte) bitmap_line::y0#5 ← phi( bitmap_line::@3/(byte) bitmap_line::y0#4 )
  (byte) bitmap_line::x1#5 ← phi( bitmap_line::@3/(byte) bitmap_line::x1#10 )
  (byte) bitmap_line::y1#6 ← phi( bitmap_line::@3/(byte) bitmap_line::y1#4 )
  (byte) bitmap_line_ydxi::y#0 ← (byte) bitmap_line::y1#6
  (byte) bitmap_line_ydxi::x#0 ← (byte) bitmap_line::x1#5
  (byte) bitmap_line_ydxi::y1#0 ← (byte) bitmap_line::y0#5
  (byte) bitmap_line_ydxi::yd#0 ← (byte) bitmap_line::yd#6
  (byte) bitmap_line_ydxi::xd#0 ← (byte) bitmap_line::xd#6
  call bitmap_line_ydxi 
  to:bitmap_line::@16
bitmap_line::@16: scope:[bitmap_line]  from bitmap_line::@4
  to:bitmap_line::@return
bitmap_line::@9: scope:[bitmap_line]  from bitmap_line::@7
  (byte) bitmap_line::yd#7 ← phi( bitmap_line::@7/(byte) bitmap_line::yd#1 )
  (byte) bitmap_line::xd#7 ← phi( bitmap_line::@7/(byte) bitmap_line::xd#3 )
  (byte) bitmap_line::x0#5 ← phi( bitmap_line::@7/(byte) bitmap_line::x0#11 )
  (byte) bitmap_line::y1#7 ← phi( bitmap_line::@7/(byte) bitmap_line::y1#3 )
  (byte) bitmap_line::x1#6 ← phi( bitmap_line::@7/(byte) bitmap_line::x1#11 )
  (byte) bitmap_line_xdyd::x#0 ← (byte) bitmap_line::x1#6
  (byte) bitmap_line_xdyd::y#0 ← (byte) bitmap_line::y1#7
  (byte) bitmap_line_xdyd::x1#0 ← (byte) bitmap_line::x0#5
  (byte) bitmap_line_xdyd::xd#0 ← (byte) bitmap_line::xd#7
  (byte) bitmap_line_xdyd::yd#0 ← (byte) bitmap_line::yd#7
  call bitmap_line_xdyd 
  to:bitmap_line::@17
bitmap_line::@17: scope:[bitmap_line]  from bitmap_line::@9
  to:bitmap_line::@return
bitmap_line::@10: scope:[bitmap_line]  from bitmap_line::@7
  (byte) bitmap_line::xd#8 ← phi( bitmap_line::@7/(byte) bitmap_line::xd#3 )
  (byte) bitmap_line::yd#8 ← phi( bitmap_line::@7/(byte) bitmap_line::yd#1 )
  (byte) bitmap_line::y1#8 ← phi( bitmap_line::@7/(byte) bitmap_line::y1#3 )
  (byte) bitmap_line::x0#6 ← phi( bitmap_line::@7/(byte) bitmap_line::x0#11 )
  (byte) bitmap_line::y0#6 ← phi( bitmap_line::@7/(byte) bitmap_line::y0#3 )
  (byte) bitmap_line_ydxd::y#0 ← (byte) bitmap_line::y0#6
  (byte) bitmap_line_ydxd::x#0 ← (byte) bitmap_line::x0#6
  (byte) bitmap_line_ydxd::y1#0 ← (byte) bitmap_line::y1#8
  (byte) bitmap_line_ydxd::yd#0 ← (byte) bitmap_line::yd#8
  (byte) bitmap_line_ydxd::xd#0 ← (byte) bitmap_line::xd#8
  call bitmap_line_ydxd 
  to:bitmap_line::@18
bitmap_line::@18: scope:[bitmap_line]  from bitmap_line::@10
  to:bitmap_line::@return
bitmap_line::@11: scope:[bitmap_line]  from bitmap_line::@1
  (byte) bitmap_line::x1#13 ← phi( bitmap_line::@1/(byte) bitmap_line::x1#2 )
  (byte) bitmap_line::x0#13 ← phi( bitmap_line::@1/(byte) bitmap_line::x0#2 )
  (byte) bitmap_line::xd#9 ← phi( bitmap_line::@1/(byte) bitmap_line::xd#1 )
  (byte) bitmap_line::y0#7 ← phi( bitmap_line::@1/(byte) bitmap_line::y0#1 )
  (byte) bitmap_line::y1#9 ← phi( bitmap_line::@1/(byte) bitmap_line::y1#1 )
  (byte~) bitmap_line::$17 ← (byte) bitmap_line::y1#9 - (byte) bitmap_line::y0#7
  (byte) bitmap_line::yd#3 ← (byte~) bitmap_line::$17
  (bool~) bitmap_line::$18 ← (byte) bitmap_line::yd#3 < (byte) bitmap_line::xd#9
  if((bool~) bitmap_line::$18) goto bitmap_line::@13
  to:bitmap_line::@14
bitmap_line::@5: scope:[bitmap_line]  from bitmap_line::@1
  (byte) bitmap_line::x1#12 ← phi( bitmap_line::@1/(byte) bitmap_line::x1#2 )
  (byte) bitmap_line::x0#12 ← phi( bitmap_line::@1/(byte) bitmap_line::x0#2 )
  (byte) bitmap_line::xd#10 ← phi( bitmap_line::@1/(byte) bitmap_line::xd#1 )
  (byte) bitmap_line::y1#10 ← phi( bitmap_line::@1/(byte) bitmap_line::y1#1 )
  (byte) bitmap_line::y0#8 ← phi( bitmap_line::@1/(byte) bitmap_line::y0#1 )
  (byte~) bitmap_line::$13 ← (byte) bitmap_line::y0#8 - (byte) bitmap_line::y1#10
  (byte) bitmap_line::yd#4 ← (byte~) bitmap_line::$13
  (bool~) bitmap_line::$14 ← (byte) bitmap_line::yd#4 < (byte) bitmap_line::xd#10
  if((bool~) bitmap_line::$14) goto bitmap_line::@12
  to:bitmap_line::@6
bitmap_line::@12: scope:[bitmap_line]  from bitmap_line::@5
  (byte) bitmap_line::yd#9 ← phi( bitmap_line::@5/(byte) bitmap_line::yd#4 )
  (byte) bitmap_line::xd#11 ← phi( bitmap_line::@5/(byte) bitmap_line::xd#10 )
  (byte) bitmap_line::x1#7 ← phi( bitmap_line::@5/(byte) bitmap_line::x1#12 )
  (byte) bitmap_line::y0#9 ← phi( bitmap_line::@5/(byte) bitmap_line::y0#8 )
  (byte) bitmap_line::x0#7 ← phi( bitmap_line::@5/(byte) bitmap_line::x0#12 )
  (byte) bitmap_line_xdyd::x#1 ← (byte) bitmap_line::x0#7
  (byte) bitmap_line_xdyd::y#1 ← (byte) bitmap_line::y0#9
  (byte) bitmap_line_xdyd::x1#1 ← (byte) bitmap_line::x1#7
  (byte) bitmap_line_xdyd::xd#1 ← (byte) bitmap_line::xd#11
  (byte) bitmap_line_xdyd::yd#1 ← (byte) bitmap_line::yd#9
  call bitmap_line_xdyd 
  to:bitmap_line::@19
bitmap_line::@19: scope:[bitmap_line]  from bitmap_line::@12
  to:bitmap_line::@return
bitmap_line::@6: scope:[bitmap_line]  from bitmap_line::@5
  (byte) bitmap_line::xd#12 ← phi( bitmap_line::@5/(byte) bitmap_line::xd#10 )
  (byte) bitmap_line::yd#10 ← phi( bitmap_line::@5/(byte) bitmap_line::yd#4 )
  (byte) bitmap_line::y0#10 ← phi( bitmap_line::@5/(byte) bitmap_line::y0#8 )
  (byte) bitmap_line::x1#8 ← phi( bitmap_line::@5/(byte) bitmap_line::x1#12 )
  (byte) bitmap_line::y1#11 ← phi( bitmap_line::@5/(byte) bitmap_line::y1#10 )
  (byte) bitmap_line_ydxd::y#1 ← (byte) bitmap_line::y1#11
  (byte) bitmap_line_ydxd::x#1 ← (byte) bitmap_line::x1#8
  (byte) bitmap_line_ydxd::y1#1 ← (byte) bitmap_line::y0#10
  (byte) bitmap_line_ydxd::yd#1 ← (byte) bitmap_line::yd#10
  (byte) bitmap_line_ydxd::xd#1 ← (byte) bitmap_line::xd#12
  call bitmap_line_ydxd 
  to:bitmap_line::@20
bitmap_line::@20: scope:[bitmap_line]  from bitmap_line::@6
  to:bitmap_line::@return
bitmap_line::@13: scope:[bitmap_line]  from bitmap_line::@11
  (byte) bitmap_line::yd#11 ← phi( bitmap_line::@11/(byte) bitmap_line::yd#3 )
  (byte) bitmap_line::xd#13 ← phi( bitmap_line::@11/(byte) bitmap_line::xd#9 )
  (byte) bitmap_line::x1#9 ← phi( bitmap_line::@11/(byte) bitmap_line::x1#13 )
  (byte) bitmap_line::y0#11 ← phi( bitmap_line::@11/(byte) bitmap_line::y0#7 )
  (byte) bitmap_line::x0#8 ← phi( bitmap_line::@11/(byte) bitmap_line::x0#13 )
  (byte) bitmap_line_xdyi::x#1 ← (byte) bitmap_line::x0#8
  (byte) bitmap_line_xdyi::y#1 ← (byte) bitmap_line::y0#11
  (byte) bitmap_line_xdyi::x1#1 ← (byte) bitmap_line::x1#9
  (byte) bitmap_line_xdyi::xd#1 ← (byte) bitmap_line::xd#13
  (byte) bitmap_line_xdyi::yd#1 ← (byte) bitmap_line::yd#11
  call bitmap_line_xdyi 
  to:bitmap_line::@21
bitmap_line::@21: scope:[bitmap_line]  from bitmap_line::@13
  to:bitmap_line::@return
bitmap_line::@14: scope:[bitmap_line]  from bitmap_line::@11
  (byte) bitmap_line::xd#14 ← phi( bitmap_line::@11/(byte) bitmap_line::xd#9 )
  (byte) bitmap_line::yd#12 ← phi( bitmap_line::@11/(byte) bitmap_line::yd#3 )
  (byte) bitmap_line::y1#12 ← phi( bitmap_line::@11/(byte) bitmap_line::y1#9 )
  (byte) bitmap_line::x0#9 ← phi( bitmap_line::@11/(byte) bitmap_line::x0#13 )
  (byte) bitmap_line::y0#12 ← phi( bitmap_line::@11/(byte) bitmap_line::y0#7 )
  (byte) bitmap_line_ydxi::y#1 ← (byte) bitmap_line::y0#12
  (byte) bitmap_line_ydxi::x#1 ← (byte) bitmap_line::x0#9
  (byte) bitmap_line_ydxi::y1#1 ← (byte) bitmap_line::y1#12
  (byte) bitmap_line_ydxi::yd#1 ← (byte) bitmap_line::yd#12
  (byte) bitmap_line_ydxi::xd#1 ← (byte) bitmap_line::xd#14
  call bitmap_line_ydxi 
  to:bitmap_line::@22
bitmap_line::@22: scope:[bitmap_line]  from bitmap_line::@14
  to:bitmap_line::@return
bitmap_line::@return: scope:[bitmap_line]  from bitmap_line::@15 bitmap_line::@16 bitmap_line::@17 bitmap_line::@18 bitmap_line::@19 bitmap_line::@20 bitmap_line::@21 bitmap_line::@22
  return 
  to:@return

(void()) bitmap_line_xdyi((byte) bitmap_line_xdyi::x , (byte) bitmap_line_xdyi::y , (byte) bitmap_line_xdyi::x1 , (byte) bitmap_line_xdyi::xd , (byte) bitmap_line_xdyi::yd)
bitmap_line_xdyi: scope:[bitmap_line_xdyi]  from bitmap_line::@13 bitmap_line::@8
  (byte) bitmap_line_xdyi::x1#6 ← phi( bitmap_line::@13/(byte) bitmap_line_xdyi::x1#1 bitmap_line::@8/(byte) bitmap_line_xdyi::x1#0 )
  (byte) bitmap_line_xdyi::xd#5 ← phi( bitmap_line::@13/(byte) bitmap_line_xdyi::xd#1 bitmap_line::@8/(byte) bitmap_line_xdyi::xd#0 )
  (byte) bitmap_line_xdyi::y#5 ← phi( bitmap_line::@13/(byte) bitmap_line_xdyi::y#1 bitmap_line::@8/(byte) bitmap_line_xdyi::y#0 )
  (byte) bitmap_line_xdyi::x#6 ← phi( bitmap_line::@13/(byte) bitmap_line_xdyi::x#1 bitmap_line::@8/(byte) bitmap_line_xdyi::x#0 )
  (byte) bitmap_line_xdyi::yd#2 ← phi( bitmap_line::@13/(byte) bitmap_line_xdyi::yd#1 bitmap_line::@8/(byte) bitmap_line_xdyi::yd#0 )
  (byte~) bitmap_line_xdyi::$0 ← (byte) bitmap_line_xdyi::yd#2 >> (number) 1
  (byte) bitmap_line_xdyi::e#0 ← (byte~) bitmap_line_xdyi::$0
  to:bitmap_line_xdyi::@1
bitmap_line_xdyi::@1: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi bitmap_line_xdyi::@2
  (byte) bitmap_line_xdyi::x1#5 ← phi( bitmap_line_xdyi/(byte) bitmap_line_xdyi::x1#6 bitmap_line_xdyi::@2/(byte) bitmap_line_xdyi::x1#2 )
  (byte) bitmap_line_xdyi::xd#4 ← phi( bitmap_line_xdyi/(byte) bitmap_line_xdyi::xd#5 bitmap_line_xdyi::@2/(byte) bitmap_line_xdyi::xd#6 )
  (byte) bitmap_line_xdyi::yd#4 ← phi( bitmap_line_xdyi/(byte) bitmap_line_xdyi::yd#2 bitmap_line_xdyi::@2/(byte) bitmap_line_xdyi::yd#5 )
  (byte) bitmap_line_xdyi::e#5 ← phi( bitmap_line_xdyi/(byte) bitmap_line_xdyi::e#0 bitmap_line_xdyi::@2/(byte) bitmap_line_xdyi::e#6 )
  (byte) bitmap_line_xdyi::y#3 ← phi( bitmap_line_xdyi/(byte) bitmap_line_xdyi::y#5 bitmap_line_xdyi::@2/(byte) bitmap_line_xdyi::y#6 )
  (byte) bitmap_line_xdyi::x#3 ← phi( bitmap_line_xdyi/(byte) bitmap_line_xdyi::x#6 bitmap_line_xdyi::@2/(byte) bitmap_line_xdyi::x#5 )
  (byte) bitmap_plot::x#0 ← (byte) bitmap_line_xdyi::x#3
  (byte) bitmap_plot::y#0 ← (byte) bitmap_line_xdyi::y#3
  call bitmap_plot 
  to:bitmap_line_xdyi::@4
bitmap_line_xdyi::@4: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi::@1
  (byte) bitmap_line_xdyi::y#7 ← phi( bitmap_line_xdyi::@1/(byte) bitmap_line_xdyi::y#3 )
  (byte) bitmap_line_xdyi::x1#4 ← phi( bitmap_line_xdyi::@1/(byte) bitmap_line_xdyi::x1#5 )
  (byte) bitmap_line_xdyi::xd#2 ← phi( bitmap_line_xdyi::@1/(byte) bitmap_line_xdyi::xd#4 )
  (byte) bitmap_line_xdyi::yd#3 ← phi( bitmap_line_xdyi::@1/(byte) bitmap_line_xdyi::yd#4 )
  (byte) bitmap_line_xdyi::e#3 ← phi( bitmap_line_xdyi::@1/(byte) bitmap_line_xdyi::e#5 )
  (byte) bitmap_line_xdyi::x#4 ← phi( bitmap_line_xdyi::@1/(byte) bitmap_line_xdyi::x#3 )
  (byte) bitmap_line_xdyi::x#2 ← ++ (byte) bitmap_line_xdyi::x#4
  (byte~) bitmap_line_xdyi::$2 ← (byte) bitmap_line_xdyi::e#3 + (byte) bitmap_line_xdyi::yd#3
  (byte) bitmap_line_xdyi::e#1 ← (byte~) bitmap_line_xdyi::$2
  (bool~) bitmap_line_xdyi::$3 ← (byte) bitmap_line_xdyi::xd#2 < (byte) bitmap_line_xdyi::e#1
  (bool~) bitmap_line_xdyi::$4 ← ! (bool~) bitmap_line_xdyi::$3
  if((bool~) bitmap_line_xdyi::$4) goto bitmap_line_xdyi::@2
  to:bitmap_line_xdyi::@3
bitmap_line_xdyi::@2: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi::@3 bitmap_line_xdyi::@4
  (byte) bitmap_line_xdyi::xd#6 ← phi( bitmap_line_xdyi::@3/(byte) bitmap_line_xdyi::xd#3 bitmap_line_xdyi::@4/(byte) bitmap_line_xdyi::xd#2 )
  (byte) bitmap_line_xdyi::yd#5 ← phi( bitmap_line_xdyi::@3/(byte) bitmap_line_xdyi::yd#6 bitmap_line_xdyi::@4/(byte) bitmap_line_xdyi::yd#3 )
  (byte) bitmap_line_xdyi::e#6 ← phi( bitmap_line_xdyi::@3/(byte) bitmap_line_xdyi::e#2 bitmap_line_xdyi::@4/(byte) bitmap_line_xdyi::e#1 )
  (byte) bitmap_line_xdyi::y#6 ← phi( bitmap_line_xdyi::@3/(byte) bitmap_line_xdyi::y#2 bitmap_line_xdyi::@4/(byte) bitmap_line_xdyi::y#7 )
  (byte) bitmap_line_xdyi::x#5 ← phi( bitmap_line_xdyi::@3/(byte) bitmap_line_xdyi::x#7 bitmap_line_xdyi::@4/(byte) bitmap_line_xdyi::x#2 )
  (byte) bitmap_line_xdyi::x1#2 ← phi( bitmap_line_xdyi::@3/(byte) bitmap_line_xdyi::x1#3 bitmap_line_xdyi::@4/(byte) bitmap_line_xdyi::x1#4 )
  (number~) bitmap_line_xdyi::$6 ← (byte) bitmap_line_xdyi::x1#2 + (number) 1
  (bool~) bitmap_line_xdyi::$7 ← (byte) bitmap_line_xdyi::x#5 != (number~) bitmap_line_xdyi::$6
  if((bool~) bitmap_line_xdyi::$7) goto bitmap_line_xdyi::@1
  to:bitmap_line_xdyi::@return
bitmap_line_xdyi::@3: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi::@4
  (byte) bitmap_line_xdyi::yd#6 ← phi( bitmap_line_xdyi::@4/(byte) bitmap_line_xdyi::yd#3 )
  (byte) bitmap_line_xdyi::x#7 ← phi( bitmap_line_xdyi::@4/(byte) bitmap_line_xdyi::x#2 )
  (byte) bitmap_line_xdyi::x1#3 ← phi( bitmap_line_xdyi::@4/(byte) bitmap_line_xdyi::x1#4 )
  (byte) bitmap_line_xdyi::xd#3 ← phi( bitmap_line_xdyi::@4/(byte) bitmap_line_xdyi::xd#2 )
  (byte) bitmap_line_xdyi::e#4 ← phi( bitmap_line_xdyi::@4/(byte) bitmap_line_xdyi::e#1 )
  (byte) bitmap_line_xdyi::y#4 ← phi( bitmap_line_xdyi::@4/(byte) bitmap_line_xdyi::y#7 )
  (byte) bitmap_line_xdyi::y#2 ← ++ (byte) bitmap_line_xdyi::y#4
  (byte~) bitmap_line_xdyi::$5 ← (byte) bitmap_line_xdyi::e#4 - (byte) bitmap_line_xdyi::xd#3
  (byte) bitmap_line_xdyi::e#2 ← (byte~) bitmap_line_xdyi::$5
  to:bitmap_line_xdyi::@2
bitmap_line_xdyi::@return: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi::@2
  return 
  to:@return

(void()) bitmap_line_xdyd((byte) bitmap_line_xdyd::x , (byte) bitmap_line_xdyd::y , (byte) bitmap_line_xdyd::x1 , (byte) bitmap_line_xdyd::xd , (byte) bitmap_line_xdyd::yd)
bitmap_line_xdyd: scope:[bitmap_line_xdyd]  from bitmap_line::@12 bitmap_line::@9
  (byte) bitmap_line_xdyd::x1#6 ← phi( bitmap_line::@12/(byte) bitmap_line_xdyd::x1#1 bitmap_line::@9/(byte) bitmap_line_xdyd::x1#0 )
  (byte) bitmap_line_xdyd::xd#5 ← phi( bitmap_line::@12/(byte) bitmap_line_xdyd::xd#1 bitmap_line::@9/(byte) bitmap_line_xdyd::xd#0 )
  (byte) bitmap_line_xdyd::y#5 ← phi( bitmap_line::@12/(byte) bitmap_line_xdyd::y#1 bitmap_line::@9/(byte) bitmap_line_xdyd::y#0 )
  (byte) bitmap_line_xdyd::x#6 ← phi( bitmap_line::@12/(byte) bitmap_line_xdyd::x#1 bitmap_line::@9/(byte) bitmap_line_xdyd::x#0 )
  (byte) bitmap_line_xdyd::yd#2 ← phi( bitmap_line::@12/(byte) bitmap_line_xdyd::yd#1 bitmap_line::@9/(byte) bitmap_line_xdyd::yd#0 )
  (byte~) bitmap_line_xdyd::$0 ← (byte) bitmap_line_xdyd::yd#2 >> (number) 1
  (byte) bitmap_line_xdyd::e#0 ← (byte~) bitmap_line_xdyd::$0
  to:bitmap_line_xdyd::@1
bitmap_line_xdyd::@1: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd bitmap_line_xdyd::@2
  (byte) bitmap_line_xdyd::x1#5 ← phi( bitmap_line_xdyd/(byte) bitmap_line_xdyd::x1#6 bitmap_line_xdyd::@2/(byte) bitmap_line_xdyd::x1#2 )
  (byte) bitmap_line_xdyd::xd#4 ← phi( bitmap_line_xdyd/(byte) bitmap_line_xdyd::xd#5 bitmap_line_xdyd::@2/(byte) bitmap_line_xdyd::xd#6 )
  (byte) bitmap_line_xdyd::yd#4 ← phi( bitmap_line_xdyd/(byte) bitmap_line_xdyd::yd#2 bitmap_line_xdyd::@2/(byte) bitmap_line_xdyd::yd#5 )
  (byte) bitmap_line_xdyd::e#5 ← phi( bitmap_line_xdyd/(byte) bitmap_line_xdyd::e#0 bitmap_line_xdyd::@2/(byte) bitmap_line_xdyd::e#6 )
  (byte) bitmap_line_xdyd::y#3 ← phi( bitmap_line_xdyd/(byte) bitmap_line_xdyd::y#5 bitmap_line_xdyd::@2/(byte) bitmap_line_xdyd::y#6 )
  (byte) bitmap_line_xdyd::x#3 ← phi( bitmap_line_xdyd/(byte) bitmap_line_xdyd::x#6 bitmap_line_xdyd::@2/(byte) bitmap_line_xdyd::x#5 )
  (byte) bitmap_plot::x#1 ← (byte) bitmap_line_xdyd::x#3
  (byte) bitmap_plot::y#1 ← (byte) bitmap_line_xdyd::y#3
  call bitmap_plot 
  to:bitmap_line_xdyd::@4
bitmap_line_xdyd::@4: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd::@1
  (byte) bitmap_line_xdyd::y#7 ← phi( bitmap_line_xdyd::@1/(byte) bitmap_line_xdyd::y#3 )
  (byte) bitmap_line_xdyd::x1#4 ← phi( bitmap_line_xdyd::@1/(byte) bitmap_line_xdyd::x1#5 )
  (byte) bitmap_line_xdyd::xd#2 ← phi( bitmap_line_xdyd::@1/(byte) bitmap_line_xdyd::xd#4 )
  (byte) bitmap_line_xdyd::yd#3 ← phi( bitmap_line_xdyd::@1/(byte) bitmap_line_xdyd::yd#4 )
  (byte) bitmap_line_xdyd::e#3 ← phi( bitmap_line_xdyd::@1/(byte) bitmap_line_xdyd::e#5 )
  (byte) bitmap_line_xdyd::x#4 ← phi( bitmap_line_xdyd::@1/(byte) bitmap_line_xdyd::x#3 )
  (byte) bitmap_line_xdyd::x#2 ← ++ (byte) bitmap_line_xdyd::x#4
  (byte~) bitmap_line_xdyd::$2 ← (byte) bitmap_line_xdyd::e#3 + (byte) bitmap_line_xdyd::yd#3
  (byte) bitmap_line_xdyd::e#1 ← (byte~) bitmap_line_xdyd::$2
  (bool~) bitmap_line_xdyd::$3 ← (byte) bitmap_line_xdyd::xd#2 < (byte) bitmap_line_xdyd::e#1
  (bool~) bitmap_line_xdyd::$4 ← ! (bool~) bitmap_line_xdyd::$3
  if((bool~) bitmap_line_xdyd::$4) goto bitmap_line_xdyd::@2
  to:bitmap_line_xdyd::@3
bitmap_line_xdyd::@2: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd::@3 bitmap_line_xdyd::@4
  (byte) bitmap_line_xdyd::xd#6 ← phi( bitmap_line_xdyd::@3/(byte) bitmap_line_xdyd::xd#3 bitmap_line_xdyd::@4/(byte) bitmap_line_xdyd::xd#2 )
  (byte) bitmap_line_xdyd::yd#5 ← phi( bitmap_line_xdyd::@3/(byte) bitmap_line_xdyd::yd#6 bitmap_line_xdyd::@4/(byte) bitmap_line_xdyd::yd#3 )
  (byte) bitmap_line_xdyd::e#6 ← phi( bitmap_line_xdyd::@3/(byte) bitmap_line_xdyd::e#2 bitmap_line_xdyd::@4/(byte) bitmap_line_xdyd::e#1 )
  (byte) bitmap_line_xdyd::y#6 ← phi( bitmap_line_xdyd::@3/(byte) bitmap_line_xdyd::y#2 bitmap_line_xdyd::@4/(byte) bitmap_line_xdyd::y#7 )
  (byte) bitmap_line_xdyd::x#5 ← phi( bitmap_line_xdyd::@3/(byte) bitmap_line_xdyd::x#7 bitmap_line_xdyd::@4/(byte) bitmap_line_xdyd::x#2 )
  (byte) bitmap_line_xdyd::x1#2 ← phi( bitmap_line_xdyd::@3/(byte) bitmap_line_xdyd::x1#3 bitmap_line_xdyd::@4/(byte) bitmap_line_xdyd::x1#4 )
  (number~) bitmap_line_xdyd::$6 ← (byte) bitmap_line_xdyd::x1#2 + (number) 1
  (bool~) bitmap_line_xdyd::$7 ← (byte) bitmap_line_xdyd::x#5 != (number~) bitmap_line_xdyd::$6
  if((bool~) bitmap_line_xdyd::$7) goto bitmap_line_xdyd::@1
  to:bitmap_line_xdyd::@return
bitmap_line_xdyd::@3: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd::@4
  (byte) bitmap_line_xdyd::yd#6 ← phi( bitmap_line_xdyd::@4/(byte) bitmap_line_xdyd::yd#3 )
  (byte) bitmap_line_xdyd::x#7 ← phi( bitmap_line_xdyd::@4/(byte) bitmap_line_xdyd::x#2 )
  (byte) bitmap_line_xdyd::x1#3 ← phi( bitmap_line_xdyd::@4/(byte) bitmap_line_xdyd::x1#4 )
  (byte) bitmap_line_xdyd::xd#3 ← phi( bitmap_line_xdyd::@4/(byte) bitmap_line_xdyd::xd#2 )
  (byte) bitmap_line_xdyd::e#4 ← phi( bitmap_line_xdyd::@4/(byte) bitmap_line_xdyd::e#1 )
  (byte) bitmap_line_xdyd::y#4 ← phi( bitmap_line_xdyd::@4/(byte) bitmap_line_xdyd::y#7 )
  (byte) bitmap_line_xdyd::y#2 ← -- (byte) bitmap_line_xdyd::y#4
  (byte~) bitmap_line_xdyd::$5 ← (byte) bitmap_line_xdyd::e#4 - (byte) bitmap_line_xdyd::xd#3
  (byte) bitmap_line_xdyd::e#2 ← (byte~) bitmap_line_xdyd::$5
  to:bitmap_line_xdyd::@2
bitmap_line_xdyd::@return: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd::@2
  return 
  to:@return

(void()) bitmap_line_ydxi((byte) bitmap_line_ydxi::y , (byte) bitmap_line_ydxi::x , (byte) bitmap_line_ydxi::y1 , (byte) bitmap_line_ydxi::yd , (byte) bitmap_line_ydxi::xd)
bitmap_line_ydxi: scope:[bitmap_line_ydxi]  from bitmap_line::@14 bitmap_line::@4
  (byte) bitmap_line_ydxi::y1#6 ← phi( bitmap_line::@14/(byte) bitmap_line_ydxi::y1#1 bitmap_line::@4/(byte) bitmap_line_ydxi::y1#0 )
  (byte) bitmap_line_ydxi::yd#5 ← phi( bitmap_line::@14/(byte) bitmap_line_ydxi::yd#1 bitmap_line::@4/(byte) bitmap_line_ydxi::yd#0 )
  (byte) bitmap_line_ydxi::y#6 ← phi( bitmap_line::@14/(byte) bitmap_line_ydxi::y#1 bitmap_line::@4/(byte) bitmap_line_ydxi::y#0 )
  (byte) bitmap_line_ydxi::x#5 ← phi( bitmap_line::@14/(byte) bitmap_line_ydxi::x#1 bitmap_line::@4/(byte) bitmap_line_ydxi::x#0 )
  (byte) bitmap_line_ydxi::xd#2 ← phi( bitmap_line::@14/(byte) bitmap_line_ydxi::xd#1 bitmap_line::@4/(byte) bitmap_line_ydxi::xd#0 )
  (byte~) bitmap_line_ydxi::$0 ← (byte) bitmap_line_ydxi::xd#2 >> (number) 1
  (byte) bitmap_line_ydxi::e#0 ← (byte~) bitmap_line_ydxi::$0
  to:bitmap_line_ydxi::@1
bitmap_line_ydxi::@1: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi bitmap_line_ydxi::@2
  (byte) bitmap_line_ydxi::y1#5 ← phi( bitmap_line_ydxi/(byte) bitmap_line_ydxi::y1#6 bitmap_line_ydxi::@2/(byte) bitmap_line_ydxi::y1#2 )
  (byte) bitmap_line_ydxi::yd#4 ← phi( bitmap_line_ydxi/(byte) bitmap_line_ydxi::yd#5 bitmap_line_ydxi::@2/(byte) bitmap_line_ydxi::yd#6 )
  (byte) bitmap_line_ydxi::xd#4 ← phi( bitmap_line_ydxi/(byte) bitmap_line_ydxi::xd#2 bitmap_line_ydxi::@2/(byte) bitmap_line_ydxi::xd#5 )
  (byte) bitmap_line_ydxi::e#5 ← phi( bitmap_line_ydxi/(byte) bitmap_line_ydxi::e#0 bitmap_line_ydxi::@2/(byte) bitmap_line_ydxi::e#6 )
  (byte) bitmap_line_ydxi::y#3 ← phi( bitmap_line_ydxi/(byte) bitmap_line_ydxi::y#6 bitmap_line_ydxi::@2/(byte) bitmap_line_ydxi::y#5 )
  (byte) bitmap_line_ydxi::x#3 ← phi( bitmap_line_ydxi/(byte) bitmap_line_ydxi::x#5 bitmap_line_ydxi::@2/(byte) bitmap_line_ydxi::x#6 )
  (byte) bitmap_plot::x#2 ← (byte) bitmap_line_ydxi::x#3
  (byte) bitmap_plot::y#2 ← (byte) bitmap_line_ydxi::y#3
  call bitmap_plot 
  to:bitmap_line_ydxi::@4
bitmap_line_ydxi::@4: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi::@1
  (byte) bitmap_line_ydxi::x#7 ← phi( bitmap_line_ydxi::@1/(byte) bitmap_line_ydxi::x#3 )
  (byte) bitmap_line_ydxi::y1#4 ← phi( bitmap_line_ydxi::@1/(byte) bitmap_line_ydxi::y1#5 )
  (byte) bitmap_line_ydxi::yd#2 ← phi( bitmap_line_ydxi::@1/(byte) bitmap_line_ydxi::yd#4 )
  (byte) bitmap_line_ydxi::xd#3 ← phi( bitmap_line_ydxi::@1/(byte) bitmap_line_ydxi::xd#4 )
  (byte) bitmap_line_ydxi::e#3 ← phi( bitmap_line_ydxi::@1/(byte) bitmap_line_ydxi::e#5 )
  (byte) bitmap_line_ydxi::y#4 ← phi( bitmap_line_ydxi::@1/(byte) bitmap_line_ydxi::y#3 )
  (byte) bitmap_line_ydxi::y#2 ← ++ (byte) bitmap_line_ydxi::y#4
  (byte~) bitmap_line_ydxi::$2 ← (byte) bitmap_line_ydxi::e#3 + (byte) bitmap_line_ydxi::xd#3
  (byte) bitmap_line_ydxi::e#1 ← (byte~) bitmap_line_ydxi::$2
  (bool~) bitmap_line_ydxi::$3 ← (byte) bitmap_line_ydxi::yd#2 < (byte) bitmap_line_ydxi::e#1
  (bool~) bitmap_line_ydxi::$4 ← ! (bool~) bitmap_line_ydxi::$3
  if((bool~) bitmap_line_ydxi::$4) goto bitmap_line_ydxi::@2
  to:bitmap_line_ydxi::@3
bitmap_line_ydxi::@2: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi::@3 bitmap_line_ydxi::@4
  (byte) bitmap_line_ydxi::yd#6 ← phi( bitmap_line_ydxi::@3/(byte) bitmap_line_ydxi::yd#3 bitmap_line_ydxi::@4/(byte) bitmap_line_ydxi::yd#2 )
  (byte) bitmap_line_ydxi::xd#5 ← phi( bitmap_line_ydxi::@3/(byte) bitmap_line_ydxi::xd#6 bitmap_line_ydxi::@4/(byte) bitmap_line_ydxi::xd#3 )
  (byte) bitmap_line_ydxi::e#6 ← phi( bitmap_line_ydxi::@3/(byte) bitmap_line_ydxi::e#2 bitmap_line_ydxi::@4/(byte) bitmap_line_ydxi::e#1 )
  (byte) bitmap_line_ydxi::x#6 ← phi( bitmap_line_ydxi::@3/(byte) bitmap_line_ydxi::x#2 bitmap_line_ydxi::@4/(byte) bitmap_line_ydxi::x#7 )
  (byte) bitmap_line_ydxi::y#5 ← phi( bitmap_line_ydxi::@3/(byte) bitmap_line_ydxi::y#7 bitmap_line_ydxi::@4/(byte) bitmap_line_ydxi::y#2 )
  (byte) bitmap_line_ydxi::y1#2 ← phi( bitmap_line_ydxi::@3/(byte) bitmap_line_ydxi::y1#3 bitmap_line_ydxi::@4/(byte) bitmap_line_ydxi::y1#4 )
  (number~) bitmap_line_ydxi::$6 ← (byte) bitmap_line_ydxi::y1#2 + (number) 1
  (bool~) bitmap_line_ydxi::$7 ← (byte) bitmap_line_ydxi::y#5 != (number~) bitmap_line_ydxi::$6
  if((bool~) bitmap_line_ydxi::$7) goto bitmap_line_ydxi::@1
  to:bitmap_line_ydxi::@return
bitmap_line_ydxi::@3: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi::@4
  (byte) bitmap_line_ydxi::xd#6 ← phi( bitmap_line_ydxi::@4/(byte) bitmap_line_ydxi::xd#3 )
  (byte) bitmap_line_ydxi::y#7 ← phi( bitmap_line_ydxi::@4/(byte) bitmap_line_ydxi::y#2 )
  (byte) bitmap_line_ydxi::y1#3 ← phi( bitmap_line_ydxi::@4/(byte) bitmap_line_ydxi::y1#4 )
  (byte) bitmap_line_ydxi::yd#3 ← phi( bitmap_line_ydxi::@4/(byte) bitmap_line_ydxi::yd#2 )
  (byte) bitmap_line_ydxi::e#4 ← phi( bitmap_line_ydxi::@4/(byte) bitmap_line_ydxi::e#1 )
  (byte) bitmap_line_ydxi::x#4 ← phi( bitmap_line_ydxi::@4/(byte) bitmap_line_ydxi::x#7 )
  (byte) bitmap_line_ydxi::x#2 ← ++ (byte) bitmap_line_ydxi::x#4
  (byte~) bitmap_line_ydxi::$5 ← (byte) bitmap_line_ydxi::e#4 - (byte) bitmap_line_ydxi::yd#3
  (byte) bitmap_line_ydxi::e#2 ← (byte~) bitmap_line_ydxi::$5
  to:bitmap_line_ydxi::@2
bitmap_line_ydxi::@return: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi::@2
  return 
  to:@return

(void()) bitmap_line_ydxd((byte) bitmap_line_ydxd::y , (byte) bitmap_line_ydxd::x , (byte) bitmap_line_ydxd::y1 , (byte) bitmap_line_ydxd::yd , (byte) bitmap_line_ydxd::xd)
bitmap_line_ydxd: scope:[bitmap_line_ydxd]  from bitmap_line::@10 bitmap_line::@6
  (byte) bitmap_line_ydxd::y1#6 ← phi( bitmap_line::@10/(byte) bitmap_line_ydxd::y1#0 bitmap_line::@6/(byte) bitmap_line_ydxd::y1#1 )
  (byte) bitmap_line_ydxd::yd#5 ← phi( bitmap_line::@10/(byte) bitmap_line_ydxd::yd#0 bitmap_line::@6/(byte) bitmap_line_ydxd::yd#1 )
  (byte) bitmap_line_ydxd::y#7 ← phi( bitmap_line::@10/(byte) bitmap_line_ydxd::y#0 bitmap_line::@6/(byte) bitmap_line_ydxd::y#1 )
  (byte) bitmap_line_ydxd::x#5 ← phi( bitmap_line::@10/(byte) bitmap_line_ydxd::x#0 bitmap_line::@6/(byte) bitmap_line_ydxd::x#1 )
  (byte) bitmap_line_ydxd::xd#2 ← phi( bitmap_line::@10/(byte) bitmap_line_ydxd::xd#0 bitmap_line::@6/(byte) bitmap_line_ydxd::xd#1 )
  (byte~) bitmap_line_ydxd::$0 ← (byte) bitmap_line_ydxd::xd#2 >> (number) 1
  (byte) bitmap_line_ydxd::e#0 ← (byte~) bitmap_line_ydxd::$0
  to:bitmap_line_ydxd::@1
bitmap_line_ydxd::@1: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd bitmap_line_ydxd::@2
  (byte) bitmap_line_ydxd::y1#5 ← phi( bitmap_line_ydxd/(byte) bitmap_line_ydxd::y1#6 bitmap_line_ydxd::@2/(byte) bitmap_line_ydxd::y1#2 )
  (byte) bitmap_line_ydxd::yd#4 ← phi( bitmap_line_ydxd/(byte) bitmap_line_ydxd::yd#5 bitmap_line_ydxd::@2/(byte) bitmap_line_ydxd::yd#6 )
  (byte) bitmap_line_ydxd::xd#4 ← phi( bitmap_line_ydxd/(byte) bitmap_line_ydxd::xd#2 bitmap_line_ydxd::@2/(byte) bitmap_line_ydxd::xd#5 )
  (byte) bitmap_line_ydxd::e#5 ← phi( bitmap_line_ydxd/(byte) bitmap_line_ydxd::e#0 bitmap_line_ydxd::@2/(byte) bitmap_line_ydxd::e#6 )
  (byte) bitmap_line_ydxd::y#4 ← phi( bitmap_line_ydxd/(byte) bitmap_line_ydxd::y#7 bitmap_line_ydxd::@2/(byte) bitmap_line_ydxd::y#6 )
  (byte) bitmap_line_ydxd::x#3 ← phi( bitmap_line_ydxd/(byte) bitmap_line_ydxd::x#5 bitmap_line_ydxd::@2/(byte) bitmap_line_ydxd::x#6 )
  (byte) bitmap_plot::x#3 ← (byte) bitmap_line_ydxd::x#3
  (byte) bitmap_plot::y#3 ← (byte) bitmap_line_ydxd::y#4
  call bitmap_plot 
  to:bitmap_line_ydxd::@4
bitmap_line_ydxd::@4: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd::@1
  (byte) bitmap_line_ydxd::x#7 ← phi( bitmap_line_ydxd::@1/(byte) bitmap_line_ydxd::x#3 )
  (byte) bitmap_line_ydxd::y1#4 ← phi( bitmap_line_ydxd::@1/(byte) bitmap_line_ydxd::y1#5 )
  (byte) bitmap_line_ydxd::yd#2 ← phi( bitmap_line_ydxd::@1/(byte) bitmap_line_ydxd::yd#4 )
  (byte) bitmap_line_ydxd::xd#3 ← phi( bitmap_line_ydxd::@1/(byte) bitmap_line_ydxd::xd#4 )
  (byte) bitmap_line_ydxd::e#3 ← phi( bitmap_line_ydxd::@1/(byte) bitmap_line_ydxd::e#5 )
  (byte) bitmap_line_ydxd::y#5 ← phi( bitmap_line_ydxd::@1/(byte) bitmap_line_ydxd::y#4 )
  (byte) bitmap_line_ydxd::y#2 ← (byte) bitmap_line_ydxd::y#5
  (byte) bitmap_line_ydxd::y#3 ← ++ (byte) bitmap_line_ydxd::y#2
  (byte~) bitmap_line_ydxd::$2 ← (byte) bitmap_line_ydxd::e#3 + (byte) bitmap_line_ydxd::xd#3
  (byte) bitmap_line_ydxd::e#1 ← (byte~) bitmap_line_ydxd::$2
  (bool~) bitmap_line_ydxd::$3 ← (byte) bitmap_line_ydxd::yd#2 < (byte) bitmap_line_ydxd::e#1
  (bool~) bitmap_line_ydxd::$4 ← ! (bool~) bitmap_line_ydxd::$3
  if((bool~) bitmap_line_ydxd::$4) goto bitmap_line_ydxd::@2
  to:bitmap_line_ydxd::@3
bitmap_line_ydxd::@2: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd::@3 bitmap_line_ydxd::@4
  (byte) bitmap_line_ydxd::yd#6 ← phi( bitmap_line_ydxd::@3/(byte) bitmap_line_ydxd::yd#3 bitmap_line_ydxd::@4/(byte) bitmap_line_ydxd::yd#2 )
  (byte) bitmap_line_ydxd::xd#5 ← phi( bitmap_line_ydxd::@3/(byte) bitmap_line_ydxd::xd#6 bitmap_line_ydxd::@4/(byte) bitmap_line_ydxd::xd#3 )
  (byte) bitmap_line_ydxd::e#6 ← phi( bitmap_line_ydxd::@3/(byte) bitmap_line_ydxd::e#2 bitmap_line_ydxd::@4/(byte) bitmap_line_ydxd::e#1 )
  (byte) bitmap_line_ydxd::x#6 ← phi( bitmap_line_ydxd::@3/(byte) bitmap_line_ydxd::x#2 bitmap_line_ydxd::@4/(byte) bitmap_line_ydxd::x#7 )
  (byte) bitmap_line_ydxd::y#6 ← phi( bitmap_line_ydxd::@3/(byte) bitmap_line_ydxd::y#8 bitmap_line_ydxd::@4/(byte) bitmap_line_ydxd::y#3 )
  (byte) bitmap_line_ydxd::y1#2 ← phi( bitmap_line_ydxd::@3/(byte) bitmap_line_ydxd::y1#3 bitmap_line_ydxd::@4/(byte) bitmap_line_ydxd::y1#4 )
  (number~) bitmap_line_ydxd::$6 ← (byte) bitmap_line_ydxd::y1#2 + (number) 1
  (bool~) bitmap_line_ydxd::$7 ← (byte) bitmap_line_ydxd::y#6 != (number~) bitmap_line_ydxd::$6
  if((bool~) bitmap_line_ydxd::$7) goto bitmap_line_ydxd::@1
  to:bitmap_line_ydxd::@return
bitmap_line_ydxd::@3: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd::@4
  (byte) bitmap_line_ydxd::xd#6 ← phi( bitmap_line_ydxd::@4/(byte) bitmap_line_ydxd::xd#3 )
  (byte) bitmap_line_ydxd::y#8 ← phi( bitmap_line_ydxd::@4/(byte) bitmap_line_ydxd::y#3 )
  (byte) bitmap_line_ydxd::y1#3 ← phi( bitmap_line_ydxd::@4/(byte) bitmap_line_ydxd::y1#4 )
  (byte) bitmap_line_ydxd::yd#3 ← phi( bitmap_line_ydxd::@4/(byte) bitmap_line_ydxd::yd#2 )
  (byte) bitmap_line_ydxd::e#4 ← phi( bitmap_line_ydxd::@4/(byte) bitmap_line_ydxd::e#1 )
  (byte) bitmap_line_ydxd::x#4 ← phi( bitmap_line_ydxd::@4/(byte) bitmap_line_ydxd::x#7 )
  (byte) bitmap_line_ydxd::x#2 ← -- (byte) bitmap_line_ydxd::x#4
  (byte~) bitmap_line_ydxd::$5 ← (byte) bitmap_line_ydxd::e#4 - (byte) bitmap_line_ydxd::yd#3
  (byte) bitmap_line_ydxd::e#2 ← (byte~) bitmap_line_ydxd::$5
  to:bitmap_line_ydxd::@2
bitmap_line_ydxd::@return: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd::@2
  return 
  to:@return

(void()) main()
main: scope:[main]  from @4
  (byte) form_field_idx#48 ← phi( @4/(byte) form_field_idx#34 )
  (byte) keyboard_modifiers#82 ← phi( @4/(byte) keyboard_modifiers#52 )
  (byte) keyboard_events_size#91 ← phi( @4/(byte) keyboard_events_size#53 )
  (signed byte) form_cursor_count#43 ← phi( @4/(signed byte) form_cursor_count#26 )
  (byte*) print_char_cursor#66 ← phi( @4/(byte*) print_char_cursor#50 )
  (byte*) print_line_cursor#62 ← phi( @4/(byte*) print_line_cursor#44 )
  (byte*) print_screen#38 ← phi( @4/(byte*) print_screen#24 )
  asm { sei  }
  *((const nomodify byte*) PROCPORT_DDR) ← (const nomodify byte) PROCPORT_DDR_MEMORY_MASK
  *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_RAM_IO
  *((const nomodify byte*) DTV_FEATURE) ← (const nomodify byte) DTV_FEATURE_ENABLE
  call keyboard_init 
  to:main::@3
main::@3: scope:[main]  from main
  (byte) form_field_idx#44 ← phi( main/(byte) form_field_idx#48 )
  (byte) keyboard_modifiers#76 ← phi( main/(byte) keyboard_modifiers#82 )
  (byte) keyboard_events_size#80 ← phi( main/(byte) keyboard_events_size#91 )
  (signed byte) form_cursor_count#38 ← phi( main/(signed byte) form_cursor_count#43 )
  (byte*) print_char_cursor#61 ← phi( main/(byte*) print_char_cursor#66 )
  (byte*) print_line_cursor#56 ← phi( main/(byte*) print_line_cursor#62 )
  (byte*) print_screen#33 ← phi( main/(byte*) print_screen#38 )
  call gfx_init 
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte) form_field_idx#35 ← phi( main::@3/(byte) form_field_idx#44 )
  (byte) keyboard_modifiers#56 ← phi( main::@3/(byte) keyboard_modifiers#76 )
  (byte) keyboard_events_size#57 ← phi( main::@3/(byte) keyboard_events_size#80 )
  (signed byte) form_cursor_count#27 ← phi( main::@3/(signed byte) form_cursor_count#38 )
  (byte*) print_char_cursor#54 ← phi( main::@3/(byte*) print_char_cursor#61 )
  (byte*) print_line_cursor#47 ← phi( main::@3/(byte*) print_line_cursor#56 )
  (byte*) print_screen#25 ← phi( main::@3/(byte*) print_screen#33 )
  to:main::@1
main::@1: scope:[main]  from main::@4 main::@6
  (byte) form_field_idx#26 ← phi( main::@4/(byte) form_field_idx#35 main::@6/(byte) form_field_idx#36 )
  (byte) keyboard_modifiers#39 ← phi( main::@4/(byte) keyboard_modifiers#56 main::@6/(byte) keyboard_modifiers#8 )
  (byte) keyboard_events_size#43 ← phi( main::@4/(byte) keyboard_events_size#57 main::@6/(byte) keyboard_events_size#7 )
  (signed byte) form_cursor_count#19 ← phi( main::@4/(signed byte) form_cursor_count#27 main::@6/(signed byte) form_cursor_count#28 )
  (byte*) print_char_cursor#46 ← phi( main::@4/(byte*) print_char_cursor#54 main::@6/(byte*) print_char_cursor#55 )
  (byte*) print_line_cursor#40 ← phi( main::@4/(byte*) print_line_cursor#47 main::@6/(byte*) print_line_cursor#48 )
  (byte*) print_screen#19 ← phi( main::@4/(byte*) print_screen#25 main::@6/(byte*) print_screen#26 )
  if(true) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) form_field_idx#25 ← phi( main::@1/(byte) form_field_idx#26 )
  (byte) keyboard_modifiers#38 ← phi( main::@1/(byte) keyboard_modifiers#39 )
  (byte) keyboard_events_size#42 ← phi( main::@1/(byte) keyboard_events_size#43 )
  (signed byte) form_cursor_count#18 ← phi( main::@1/(signed byte) form_cursor_count#19 )
  (byte*) print_char_cursor#45 ← phi( main::@1/(byte*) print_char_cursor#46 )
  (byte*) print_line_cursor#39 ← phi( main::@1/(byte*) print_line_cursor#40 )
  (byte*) print_screen#18 ← phi( main::@1/(byte*) print_screen#19 )
  call form_mode 
  to:main::@5
main::@5: scope:[main]  from main::@2
  (byte) form_field_idx#11 ← phi( main::@2/(byte) form_field_idx#3 )
  (byte) keyboard_modifiers#22 ← phi( main::@2/(byte) keyboard_modifiers#13 )
  (byte) keyboard_events_size#25 ← phi( main::@2/(byte) keyboard_events_size#13 )
  (signed byte) form_cursor_count#10 ← phi( main::@2/(signed byte) form_cursor_count#3 )
  (byte*) print_char_cursor#31 ← phi( main::@2/(byte*) print_char_cursor#20 )
  (byte*) print_line_cursor#26 ← phi( main::@2/(byte*) print_line_cursor#17 )
  (byte*) print_screen#12 ← phi( main::@2/(byte*) print_screen#7 )
  (byte*) print_screen#3 ← (byte*) print_screen#12
  (byte*) print_line_cursor#9 ← (byte*) print_line_cursor#26
  (byte*) print_char_cursor#12 ← (byte*) print_char_cursor#31
  (signed byte) form_cursor_count#0 ← (signed byte) form_cursor_count#10
  (byte) keyboard_events_size#6 ← (byte) keyboard_events_size#25
  (byte) keyboard_modifiers#7 ← (byte) keyboard_modifiers#22
  (byte) form_field_idx#0 ← (byte) form_field_idx#11
  call gfx_mode 
  to:main::@6
main::@6: scope:[main]  from main::@5
  (byte) form_field_idx#36 ← phi( main::@5/(byte) form_field_idx#0 )
  (signed byte) form_cursor_count#28 ← phi( main::@5/(signed byte) form_cursor_count#0 )
  (byte*) print_char_cursor#55 ← phi( main::@5/(byte*) print_char_cursor#12 )
  (byte*) print_line_cursor#48 ← phi( main::@5/(byte*) print_line_cursor#9 )
  (byte*) print_screen#26 ← phi( main::@5/(byte*) print_screen#3 )
  (byte) keyboard_modifiers#23 ← phi( main::@5/(byte) keyboard_modifiers#11 )
  (byte) keyboard_events_size#26 ← phi( main::@5/(byte) keyboard_events_size#11 )
  (byte) keyboard_events_size#7 ← (byte) keyboard_events_size#26
  (byte) keyboard_modifiers#8 ← (byte) keyboard_modifiers#23
  to:main::@1
main::@return: scope:[main]  from main::@1
  (byte) form_field_idx#12 ← phi( main::@1/(byte) form_field_idx#26 )
  (byte) keyboard_modifiers#24 ← phi( main::@1/(byte) keyboard_modifiers#39 )
  (byte) keyboard_events_size#27 ← phi( main::@1/(byte) keyboard_events_size#43 )
  (signed byte) form_cursor_count#11 ← phi( main::@1/(signed byte) form_cursor_count#19 )
  (byte*) print_char_cursor#32 ← phi( main::@1/(byte*) print_char_cursor#46 )
  (byte*) print_line_cursor#27 ← phi( main::@1/(byte*) print_line_cursor#40 )
  (byte*) print_screen#13 ← phi( main::@1/(byte*) print_screen#19 )
  (byte*) print_screen#4 ← (byte*) print_screen#13
  (byte*) print_line_cursor#10 ← (byte*) print_line_cursor#27
  (byte*) print_char_cursor#13 ← (byte*) print_char_cursor#32
  (signed byte) form_cursor_count#1 ← (signed byte) form_cursor_count#11
  (byte) keyboard_events_size#8 ← (byte) keyboard_events_size#27
  (byte) keyboard_modifiers#9 ← (byte) keyboard_modifiers#24
  (byte) form_field_idx#1 ← (byte) form_field_idx#12
  return 
  to:@return

(dword()) get_plane((byte) get_plane::idx)
get_plane: scope:[get_plane]  from gfx_mode::@30 gfx_mode::@9
  (byte) get_plane::idx#2 ← phi( gfx_mode::@30/(byte) get_plane::idx#1 gfx_mode::@9/(byte) get_plane::idx#0 )
  (bool~) get_plane::$0 ← (byte) get_plane::idx#2 == (number) 0
  if((bool~) get_plane::$0) goto get_plane::@1
  to:get_plane::@15
get_plane::@1: scope:[get_plane]  from get_plane
  (dword) get_plane::return#0 ← (dword)(const nomodify byte*) VIC_SCREEN0
  to:get_plane::@return
get_plane::@15: scope:[get_plane]  from get_plane
  (byte) get_plane::idx#3 ← phi( get_plane/(byte) get_plane::idx#2 )
  (bool~) get_plane::$1 ← (byte) get_plane::idx#3 == (number) 1
  if((bool~) get_plane::$1) goto get_plane::@2
  to:get_plane::@16
get_plane::@2: scope:[get_plane]  from get_plane::@15
  (dword) get_plane::return#1 ← (dword)(const nomodify byte*) VIC_SCREEN1
  to:get_plane::@return
get_plane::@16: scope:[get_plane]  from get_plane::@15
  (byte) get_plane::idx#4 ← phi( get_plane::@15/(byte) get_plane::idx#3 )
  (bool~) get_plane::$2 ← (byte) get_plane::idx#4 == (number) 2
  if((bool~) get_plane::$2) goto get_plane::@3
  to:get_plane::@17
get_plane::@3: scope:[get_plane]  from get_plane::@16
  (dword) get_plane::return#2 ← (dword)(const nomodify byte*) VIC_SCREEN2
  to:get_plane::@return
get_plane::@17: scope:[get_plane]  from get_plane::@16
  (byte) get_plane::idx#5 ← phi( get_plane::@16/(byte) get_plane::idx#4 )
  (bool~) get_plane::$3 ← (byte) get_plane::idx#5 == (number) 3
  if((bool~) get_plane::$3) goto get_plane::@4
  to:get_plane::@18
get_plane::@4: scope:[get_plane]  from get_plane::@17
  (dword) get_plane::return#3 ← (dword)(const nomodify byte*) VIC_SCREEN3
  to:get_plane::@return
get_plane::@18: scope:[get_plane]  from get_plane::@17
  (byte) get_plane::idx#6 ← phi( get_plane::@17/(byte) get_plane::idx#5 )
  (bool~) get_plane::$4 ← (byte) get_plane::idx#6 == (number) 4
  if((bool~) get_plane::$4) goto get_plane::@5
  to:get_plane::@19
get_plane::@5: scope:[get_plane]  from get_plane::@18
  (dword) get_plane::return#4 ← (dword)(const nomodify byte*) VIC_BITMAP
  to:get_plane::@return
get_plane::@19: scope:[get_plane]  from get_plane::@18
  (byte) get_plane::idx#7 ← phi( get_plane::@18/(byte) get_plane::idx#6 )
  (bool~) get_plane::$5 ← (byte) get_plane::idx#7 == (number) 5
  if((bool~) get_plane::$5) goto get_plane::@6
  to:get_plane::@20
get_plane::@6: scope:[get_plane]  from get_plane::@19
  (dword) get_plane::return#5 ← (dword)(const nomodify byte*) VIC_CHARSET_ROM
  to:get_plane::@return
get_plane::@20: scope:[get_plane]  from get_plane::@19
  (byte) get_plane::idx#8 ← phi( get_plane::@19/(byte) get_plane::idx#7 )
  (bool~) get_plane::$6 ← (byte) get_plane::idx#8 == (number) 6
  if((bool~) get_plane::$6) goto get_plane::@7
  to:get_plane::@21
get_plane::@7: scope:[get_plane]  from get_plane::@20
  (dword) get_plane::return#6 ← (dword)(const nomodify dword) PLANE_8BPP_CHUNKY
  to:get_plane::@return
get_plane::@21: scope:[get_plane]  from get_plane::@20
  (byte) get_plane::idx#9 ← phi( get_plane::@20/(byte) get_plane::idx#8 )
  (bool~) get_plane::$7 ← (byte) get_plane::idx#9 == (number) 7
  if((bool~) get_plane::$7) goto get_plane::@8
  to:get_plane::@22
get_plane::@8: scope:[get_plane]  from get_plane::@21
  (dword) get_plane::return#7 ← (dword)(const nomodify dword) PLANE_HORISONTAL
  to:get_plane::@return
get_plane::@22: scope:[get_plane]  from get_plane::@21
  (byte) get_plane::idx#10 ← phi( get_plane::@21/(byte) get_plane::idx#9 )
  (bool~) get_plane::$8 ← (byte) get_plane::idx#10 == (number) 8
  if((bool~) get_plane::$8) goto get_plane::@9
  to:get_plane::@23
get_plane::@9: scope:[get_plane]  from get_plane::@22
  (dword) get_plane::return#8 ← (dword)(const nomodify dword) PLANE_VERTICAL
  to:get_plane::@return
get_plane::@23: scope:[get_plane]  from get_plane::@22
  (byte) get_plane::idx#11 ← phi( get_plane::@22/(byte) get_plane::idx#10 )
  (bool~) get_plane::$9 ← (byte) get_plane::idx#11 == (number) 9
  if((bool~) get_plane::$9) goto get_plane::@10
  to:get_plane::@24
get_plane::@10: scope:[get_plane]  from get_plane::@23
  (dword) get_plane::return#9 ← (dword)(const nomodify dword) PLANE_HORISONTAL2
  to:get_plane::@return
get_plane::@24: scope:[get_plane]  from get_plane::@23
  (byte) get_plane::idx#12 ← phi( get_plane::@23/(byte) get_plane::idx#11 )
  (bool~) get_plane::$10 ← (byte) get_plane::idx#12 == (number) $a
  if((bool~) get_plane::$10) goto get_plane::@11
  to:get_plane::@25
get_plane::@11: scope:[get_plane]  from get_plane::@24
  (dword) get_plane::return#10 ← (dword)(const nomodify dword) PLANE_VERTICAL2
  to:get_plane::@return
get_plane::@25: scope:[get_plane]  from get_plane::@24
  (byte) get_plane::idx#13 ← phi( get_plane::@24/(byte) get_plane::idx#12 )
  (bool~) get_plane::$11 ← (byte) get_plane::idx#13 == (number) $b
  if((bool~) get_plane::$11) goto get_plane::@12
  to:get_plane::@26
get_plane::@12: scope:[get_plane]  from get_plane::@25
  (dword) get_plane::return#11 ← (dword)(const nomodify dword) PLANE_CHARSET8
  to:get_plane::@return
get_plane::@26: scope:[get_plane]  from get_plane::@25
  (byte) get_plane::idx#14 ← phi( get_plane::@25/(byte) get_plane::idx#13 )
  (bool~) get_plane::$12 ← (byte) get_plane::idx#14 == (number) $c
  if((bool~) get_plane::$12) goto get_plane::@13
  to:get_plane::@27
get_plane::@13: scope:[get_plane]  from get_plane::@26
  (dword) get_plane::return#12 ← (dword)(const nomodify dword) PLANE_BLANK
  to:get_plane::@return
get_plane::@27: scope:[get_plane]  from get_plane::@26
  (byte) get_plane::idx#15 ← phi( get_plane::@26/(byte) get_plane::idx#14 )
  (bool~) get_plane::$13 ← (byte) get_plane::idx#15 == (number) $d
  (bool~) get_plane::$14 ← ! (bool~) get_plane::$13
  if((bool~) get_plane::$14) goto get_plane::@14
  to:get_plane::@28
get_plane::@28: scope:[get_plane]  from get_plane::@27
  (dword) get_plane::return#13 ← (dword)(const nomodify dword) PLANE_FULL
  to:get_plane::@return
get_plane::@return: scope:[get_plane]  from get_plane::@1 get_plane::@10 get_plane::@11 get_plane::@12 get_plane::@13 get_plane::@14 get_plane::@2 get_plane::@28 get_plane::@3 get_plane::@4 get_plane::@5 get_plane::@6 get_plane::@7 get_plane::@8 get_plane::@9
  (dword) get_plane::return#18 ← phi( get_plane::@1/(dword) get_plane::return#0 get_plane::@10/(dword) get_plane::return#9 get_plane::@11/(dword) get_plane::return#10 get_plane::@12/(dword) get_plane::return#11 get_plane::@13/(dword) get_plane::return#12 get_plane::@14/(dword) get_plane::return#15 get_plane::@2/(dword) get_plane::return#1 get_plane::@28/(dword) get_plane::return#13 get_plane::@3/(dword) get_plane::return#2 get_plane::@4/(dword) get_plane::return#3 get_plane::@5/(dword) get_plane::return#4 get_plane::@6/(dword) get_plane::return#5 get_plane::@7/(dword) get_plane::return#6 get_plane::@8/(dword) get_plane::return#7 get_plane::@9/(dword) get_plane::return#8 )
  (dword) get_plane::return#14 ← (dword) get_plane::return#18
  return 
  to:@return
get_plane::@14: scope:[get_plane]  from get_plane::@27
  (dword) get_plane::return#15 ← (dword)(const nomodify byte*) VIC_SCREEN0
  to:get_plane::@return

(byte*()) get_vic_screen((byte) get_vic_screen::idx)
get_vic_screen: scope:[get_vic_screen]  from gfx_mode::@31 gfx_mode::@33
  (byte) get_vic_screen::idx#2 ← phi( gfx_mode::@31/(byte) get_vic_screen::idx#0 gfx_mode::@33/(byte) get_vic_screen::idx#1 )
  (bool~) get_vic_screen::$0 ← (byte) get_vic_screen::idx#2 == (number) 0
  if((bool~) get_vic_screen::$0) goto get_vic_screen::@1
  to:get_vic_screen::@6
get_vic_screen::@1: scope:[get_vic_screen]  from get_vic_screen
  (byte*) get_vic_screen::return#0 ← (const nomodify byte*) VIC_SCREEN0
  to:get_vic_screen::@return
get_vic_screen::@6: scope:[get_vic_screen]  from get_vic_screen
  (byte) get_vic_screen::idx#3 ← phi( get_vic_screen/(byte) get_vic_screen::idx#2 )
  (bool~) get_vic_screen::$1 ← (byte) get_vic_screen::idx#3 == (number) 1
  if((bool~) get_vic_screen::$1) goto get_vic_screen::@2
  to:get_vic_screen::@7
get_vic_screen::@2: scope:[get_vic_screen]  from get_vic_screen::@6
  (byte*) get_vic_screen::return#1 ← (const nomodify byte*) VIC_SCREEN1
  to:get_vic_screen::@return
get_vic_screen::@7: scope:[get_vic_screen]  from get_vic_screen::@6
  (byte) get_vic_screen::idx#4 ← phi( get_vic_screen::@6/(byte) get_vic_screen::idx#3 )
  (bool~) get_vic_screen::$2 ← (byte) get_vic_screen::idx#4 == (number) 2
  if((bool~) get_vic_screen::$2) goto get_vic_screen::@3
  to:get_vic_screen::@8
get_vic_screen::@3: scope:[get_vic_screen]  from get_vic_screen::@7
  (byte*) get_vic_screen::return#2 ← (const nomodify byte*) VIC_SCREEN2
  to:get_vic_screen::@return
get_vic_screen::@8: scope:[get_vic_screen]  from get_vic_screen::@7
  (byte) get_vic_screen::idx#5 ← phi( get_vic_screen::@7/(byte) get_vic_screen::idx#4 )
  (bool~) get_vic_screen::$3 ← (byte) get_vic_screen::idx#5 == (number) 3
  if((bool~) get_vic_screen::$3) goto get_vic_screen::@4
  to:get_vic_screen::@9
get_vic_screen::@4: scope:[get_vic_screen]  from get_vic_screen::@8
  (byte*) get_vic_screen::return#3 ← (const nomodify byte*) VIC_SCREEN3
  to:get_vic_screen::@return
get_vic_screen::@9: scope:[get_vic_screen]  from get_vic_screen::@8
  (byte) get_vic_screen::idx#6 ← phi( get_vic_screen::@8/(byte) get_vic_screen::idx#5 )
  (bool~) get_vic_screen::$4 ← (byte) get_vic_screen::idx#6 == (number) 4
  (bool~) get_vic_screen::$5 ← ! (bool~) get_vic_screen::$4
  if((bool~) get_vic_screen::$5) goto get_vic_screen::@5
  to:get_vic_screen::@10
get_vic_screen::@10: scope:[get_vic_screen]  from get_vic_screen::@9
  (byte*) get_vic_screen::return#4 ← (const nomodify byte*) VIC_SCREEN4
  to:get_vic_screen::@return
get_vic_screen::@return: scope:[get_vic_screen]  from get_vic_screen::@1 get_vic_screen::@10 get_vic_screen::@2 get_vic_screen::@3 get_vic_screen::@4 get_vic_screen::@5
  (byte*) get_vic_screen::return#9 ← phi( get_vic_screen::@1/(byte*) get_vic_screen::return#0 get_vic_screen::@10/(byte*) get_vic_screen::return#4 get_vic_screen::@2/(byte*) get_vic_screen::return#1 get_vic_screen::@3/(byte*) get_vic_screen::return#2 get_vic_screen::@4/(byte*) get_vic_screen::return#3 get_vic_screen::@5/(byte*) get_vic_screen::return#6 )
  (byte*) get_vic_screen::return#5 ← (byte*) get_vic_screen::return#9
  return 
  to:@return
get_vic_screen::@5: scope:[get_vic_screen]  from get_vic_screen::@9
  (byte*) get_vic_screen::return#6 ← (const nomodify byte*) VIC_SCREEN0
  to:get_vic_screen::@return

(byte*()) get_vic_charset((byte) get_vic_charset::idx)
get_vic_charset: scope:[get_vic_charset]  from gfx_mode::@32
  (byte) get_vic_charset::idx#1 ← phi( gfx_mode::@32/(byte) get_vic_charset::idx#0 )
  (bool~) get_vic_charset::$0 ← (byte) get_vic_charset::idx#1 == (number) 0
  if((bool~) get_vic_charset::$0) goto get_vic_charset::@1
  to:get_vic_charset::@3
get_vic_charset::@1: scope:[get_vic_charset]  from get_vic_charset
  (byte*) get_vic_charset::return#0 ← (const nomodify byte*) VIC_CHARSET_ROM
  to:get_vic_charset::@return
get_vic_charset::@3: scope:[get_vic_charset]  from get_vic_charset
  (byte) get_vic_charset::idx#2 ← phi( get_vic_charset/(byte) get_vic_charset::idx#1 )
  (bool~) get_vic_charset::$1 ← (byte) get_vic_charset::idx#2 == (number) 1
  (bool~) get_vic_charset::$2 ← ! (bool~) get_vic_charset::$1
  if((bool~) get_vic_charset::$2) goto get_vic_charset::@2
  to:get_vic_charset::@4
get_vic_charset::@4: scope:[get_vic_charset]  from get_vic_charset::@3
  (byte*) get_vic_charset::return#1 ← (const nomodify byte*) VIC_BITMAP
  to:get_vic_charset::@return
get_vic_charset::@return: scope:[get_vic_charset]  from get_vic_charset::@1 get_vic_charset::@2 get_vic_charset::@4
  (byte*) get_vic_charset::return#5 ← phi( get_vic_charset::@1/(byte*) get_vic_charset::return#0 get_vic_charset::@2/(byte*) get_vic_charset::return#3 get_vic_charset::@4/(byte*) get_vic_charset::return#1 )
  (byte*) get_vic_charset::return#2 ← (byte*) get_vic_charset::return#5
  return 
  to:@return
get_vic_charset::@2: scope:[get_vic_charset]  from get_vic_charset::@3
  (byte*) get_vic_charset::return#3 ← (const nomodify byte*) VIC_CHARSET_ROM
  to:get_vic_charset::@return

(void()) apply_preset((byte) apply_preset::idx)
apply_preset: scope:[apply_preset]  from form_mode::@7
  (byte) apply_preset::idx#1 ← phi( form_mode::@7/(byte) apply_preset::idx#0 )
  (byte*) apply_preset::preset#0 ← (byte*) 0
  (bool~) apply_preset::$0 ← (byte) apply_preset::idx#1 == (number) 0
  if((bool~) apply_preset::$0) goto apply_preset::@1
  to:apply_preset::@13
apply_preset::@1: scope:[apply_preset]  from apply_preset
  (byte*) apply_preset::preset#1 ← (const byte*) preset_stdchar
  to:apply_preset::@12
apply_preset::@13: scope:[apply_preset]  from apply_preset
  (byte) apply_preset::idx#2 ← phi( apply_preset/(byte) apply_preset::idx#1 )
  (bool~) apply_preset::$1 ← (byte) apply_preset::idx#2 == (number) 1
  if((bool~) apply_preset::$1) goto apply_preset::@2
  to:apply_preset::@14
apply_preset::@2: scope:[apply_preset]  from apply_preset::@13
  (byte*) apply_preset::preset#2 ← (const byte*) preset_ecmchar
  to:apply_preset::@12
apply_preset::@14: scope:[apply_preset]  from apply_preset::@13
  (byte) apply_preset::idx#3 ← phi( apply_preset::@13/(byte) apply_preset::idx#2 )
  (bool~) apply_preset::$2 ← (byte) apply_preset::idx#3 == (number) 2
  if((bool~) apply_preset::$2) goto apply_preset::@3
  to:apply_preset::@15
apply_preset::@3: scope:[apply_preset]  from apply_preset::@14
  (byte*) apply_preset::preset#3 ← (const byte*) preset_stdbm
  to:apply_preset::@12
apply_preset::@15: scope:[apply_preset]  from apply_preset::@14
  (byte) apply_preset::idx#4 ← phi( apply_preset::@14/(byte) apply_preset::idx#3 )
  (bool~) apply_preset::$3 ← (byte) apply_preset::idx#4 == (number) 3
  if((bool~) apply_preset::$3) goto apply_preset::@4
  to:apply_preset::@16
apply_preset::@4: scope:[apply_preset]  from apply_preset::@15
  (byte*) apply_preset::preset#4 ← (const byte*) preset_mcbm
  to:apply_preset::@12
apply_preset::@16: scope:[apply_preset]  from apply_preset::@15
  (byte) apply_preset::idx#5 ← phi( apply_preset::@15/(byte) apply_preset::idx#4 )
  (bool~) apply_preset::$4 ← (byte) apply_preset::idx#5 == (number) 4
  if((bool~) apply_preset::$4) goto apply_preset::@5
  to:apply_preset::@17
apply_preset::@5: scope:[apply_preset]  from apply_preset::@16
  (byte*) apply_preset::preset#5 ← (const byte*) preset_hi_stdchar
  to:apply_preset::@12
apply_preset::@17: scope:[apply_preset]  from apply_preset::@16
  (byte) apply_preset::idx#6 ← phi( apply_preset::@16/(byte) apply_preset::idx#5 )
  (bool~) apply_preset::$5 ← (byte) apply_preset::idx#6 == (number) 5
  if((bool~) apply_preset::$5) goto apply_preset::@6
  to:apply_preset::@18
apply_preset::@6: scope:[apply_preset]  from apply_preset::@17
  (byte*) apply_preset::preset#6 ← (const byte*) preset_hi_ecmchar
  to:apply_preset::@12
apply_preset::@18: scope:[apply_preset]  from apply_preset::@17
  (byte) apply_preset::idx#7 ← phi( apply_preset::@17/(byte) apply_preset::idx#6 )
  (bool~) apply_preset::$6 ← (byte) apply_preset::idx#7 == (number) 6
  if((bool~) apply_preset::$6) goto apply_preset::@7
  to:apply_preset::@19
apply_preset::@7: scope:[apply_preset]  from apply_preset::@18
  (byte*) apply_preset::preset#7 ← (const byte*) preset_twoplane
  to:apply_preset::@12
apply_preset::@19: scope:[apply_preset]  from apply_preset::@18
  (byte) apply_preset::idx#8 ← phi( apply_preset::@18/(byte) apply_preset::idx#7 )
  (bool~) apply_preset::$7 ← (byte) apply_preset::idx#8 == (number) 7
  if((bool~) apply_preset::$7) goto apply_preset::@8
  to:apply_preset::@20
apply_preset::@8: scope:[apply_preset]  from apply_preset::@19
  (byte*) apply_preset::preset#8 ← (const byte*) preset_chunky
  to:apply_preset::@12
apply_preset::@20: scope:[apply_preset]  from apply_preset::@19
  (byte) apply_preset::idx#9 ← phi( apply_preset::@19/(byte) apply_preset::idx#8 )
  (bool~) apply_preset::$8 ← (byte) apply_preset::idx#9 == (number) 8
  if((bool~) apply_preset::$8) goto apply_preset::@9
  to:apply_preset::@21
apply_preset::@9: scope:[apply_preset]  from apply_preset::@20
  (byte*) apply_preset::preset#9 ← (const byte*) preset_sixsfred
  to:apply_preset::@12
apply_preset::@21: scope:[apply_preset]  from apply_preset::@20
  (byte) apply_preset::idx#10 ← phi( apply_preset::@20/(byte) apply_preset::idx#9 )
  (bool~) apply_preset::$9 ← (byte) apply_preset::idx#10 == (number) 9
  if((bool~) apply_preset::$9) goto apply_preset::@10
  to:apply_preset::@22
apply_preset::@10: scope:[apply_preset]  from apply_preset::@21
  (byte*) apply_preset::preset#10 ← (const byte*) preset_sixsfred2
  to:apply_preset::@12
apply_preset::@22: scope:[apply_preset]  from apply_preset::@21
  (byte) apply_preset::idx#11 ← phi( apply_preset::@21/(byte) apply_preset::idx#10 )
  (bool~) apply_preset::$10 ← (byte) apply_preset::idx#11 == (number) $a
  if((bool~) apply_preset::$10) goto apply_preset::@11
  to:apply_preset::@23
apply_preset::@11: scope:[apply_preset]  from apply_preset::@22
  (byte*) apply_preset::preset#11 ← (const byte*) preset_8bpppixelcell
  to:apply_preset::@12
apply_preset::@23: scope:[apply_preset]  from apply_preset::@22
  (byte*) apply_preset::preset#12 ← (const byte*) preset_stdchar
  to:apply_preset::@12
apply_preset::@12: scope:[apply_preset]  from apply_preset::@1 apply_preset::@10 apply_preset::@11 apply_preset::@2 apply_preset::@23 apply_preset::@3 apply_preset::@4 apply_preset::@5 apply_preset::@6 apply_preset::@7 apply_preset::@8 apply_preset::@9
  (byte*) apply_preset::preset#15 ← phi( apply_preset::@1/(byte*) apply_preset::preset#1 apply_preset::@10/(byte*) apply_preset::preset#10 apply_preset::@11/(byte*) apply_preset::preset#11 apply_preset::@2/(byte*) apply_preset::preset#2 apply_preset::@23/(byte*) apply_preset::preset#12 apply_preset::@3/(byte*) apply_preset::preset#3 apply_preset::@4/(byte*) apply_preset::preset#4 apply_preset::@5/(byte*) apply_preset::preset#5 apply_preset::@6/(byte*) apply_preset::preset#6 apply_preset::@7/(byte*) apply_preset::preset#7 apply_preset::@8/(byte*) apply_preset::preset#8 apply_preset::@9/(byte*) apply_preset::preset#9 )
  (byte) apply_preset::i#0 ← (byte) 0
  to:apply_preset::@24
apply_preset::@24: scope:[apply_preset]  from apply_preset::@12 apply_preset::@25
  (byte*) apply_preset::preset#14 ← phi( apply_preset::@12/(byte*) apply_preset::preset#15 apply_preset::@25/(byte*) apply_preset::preset#13 )
  (byte) apply_preset::i#2 ← phi( apply_preset::@12/(byte) apply_preset::i#0 apply_preset::@25/(byte) apply_preset::i#1 )
  (bool~) apply_preset::$11 ← (byte) apply_preset::i#2 != (const byte) form_fields_cnt
  if((bool~) apply_preset::$11) goto apply_preset::@25
  to:apply_preset::@return
apply_preset::@25: scope:[apply_preset]  from apply_preset::@24
  (byte) apply_preset::i#3 ← phi( apply_preset::@24/(byte) apply_preset::i#2 )
  (byte*) apply_preset::preset#13 ← phi( apply_preset::@24/(byte*) apply_preset::preset#14 )
  *((const byte*) form_fields_val + (byte) apply_preset::i#3) ← *((byte*) apply_preset::preset#13 + (byte) apply_preset::i#3)
  (byte) apply_preset::i#1 ← ++ (byte) apply_preset::i#3
  to:apply_preset::@24
apply_preset::@return: scope:[apply_preset]  from apply_preset::@24
  return 
  to:@return

(void()) render_preset_name((byte) render_preset_name::idx)
render_preset_name: scope:[render_preset_name]  from form_mode::@15 form_mode::@19
  (byte) render_preset_name::idx#2 ← phi( form_mode::@15/(byte) render_preset_name::idx#0 form_mode::@19/(byte) render_preset_name::idx#1 )
  (byte*) render_preset_name::name#0 ← (byte*) 0
  (bool~) render_preset_name::$0 ← (byte) render_preset_name::idx#2 == (number) 0
  if((bool~) render_preset_name::$0) goto render_preset_name::@1
  to:render_preset_name::@13
render_preset_name::@1: scope:[render_preset_name]  from render_preset_name
  (byte*) render_preset_name::name#1 ← (const byte*) render_preset_name::$12
  to:render_preset_name::@12
render_preset_name::@13: scope:[render_preset_name]  from render_preset_name
  (byte) render_preset_name::idx#3 ← phi( render_preset_name/(byte) render_preset_name::idx#2 )
  (bool~) render_preset_name::$1 ← (byte) render_preset_name::idx#3 == (number) 1
  if((bool~) render_preset_name::$1) goto render_preset_name::@2
  to:render_preset_name::@14
render_preset_name::@2: scope:[render_preset_name]  from render_preset_name::@13
  (byte*) render_preset_name::name#2 ← (const byte*) render_preset_name::$13
  to:render_preset_name::@12
render_preset_name::@14: scope:[render_preset_name]  from render_preset_name::@13
  (byte) render_preset_name::idx#4 ← phi( render_preset_name::@13/(byte) render_preset_name::idx#3 )
  (bool~) render_preset_name::$2 ← (byte) render_preset_name::idx#4 == (number) 2
  if((bool~) render_preset_name::$2) goto render_preset_name::@3
  to:render_preset_name::@15
render_preset_name::@3: scope:[render_preset_name]  from render_preset_name::@14
  (byte*) render_preset_name::name#3 ← (const byte*) render_preset_name::$14
  to:render_preset_name::@12
render_preset_name::@15: scope:[render_preset_name]  from render_preset_name::@14
  (byte) render_preset_name::idx#5 ← phi( render_preset_name::@14/(byte) render_preset_name::idx#4 )
  (bool~) render_preset_name::$3 ← (byte) render_preset_name::idx#5 == (number) 3
  if((bool~) render_preset_name::$3) goto render_preset_name::@4
  to:render_preset_name::@16
render_preset_name::@4: scope:[render_preset_name]  from render_preset_name::@15
  (byte*) render_preset_name::name#4 ← (const byte*) render_preset_name::$15
  to:render_preset_name::@12
render_preset_name::@16: scope:[render_preset_name]  from render_preset_name::@15
  (byte) render_preset_name::idx#6 ← phi( render_preset_name::@15/(byte) render_preset_name::idx#5 )
  (bool~) render_preset_name::$4 ← (byte) render_preset_name::idx#6 == (number) 4
  if((bool~) render_preset_name::$4) goto render_preset_name::@5
  to:render_preset_name::@17
render_preset_name::@5: scope:[render_preset_name]  from render_preset_name::@16
  (byte*) render_preset_name::name#5 ← (const byte*) render_preset_name::$16
  to:render_preset_name::@12
render_preset_name::@17: scope:[render_preset_name]  from render_preset_name::@16
  (byte) render_preset_name::idx#7 ← phi( render_preset_name::@16/(byte) render_preset_name::idx#6 )
  (bool~) render_preset_name::$5 ← (byte) render_preset_name::idx#7 == (number) 5
  if((bool~) render_preset_name::$5) goto render_preset_name::@6
  to:render_preset_name::@18
render_preset_name::@6: scope:[render_preset_name]  from render_preset_name::@17
  (byte*) render_preset_name::name#6 ← (const byte*) render_preset_name::$17
  to:render_preset_name::@12
render_preset_name::@18: scope:[render_preset_name]  from render_preset_name::@17
  (byte) render_preset_name::idx#8 ← phi( render_preset_name::@17/(byte) render_preset_name::idx#7 )
  (bool~) render_preset_name::$6 ← (byte) render_preset_name::idx#8 == (number) 6
  if((bool~) render_preset_name::$6) goto render_preset_name::@7
  to:render_preset_name::@19
render_preset_name::@7: scope:[render_preset_name]  from render_preset_name::@18
  (byte*) render_preset_name::name#7 ← (const byte*) render_preset_name::$18
  to:render_preset_name::@12
render_preset_name::@19: scope:[render_preset_name]  from render_preset_name::@18
  (byte) render_preset_name::idx#9 ← phi( render_preset_name::@18/(byte) render_preset_name::idx#8 )
  (bool~) render_preset_name::$7 ← (byte) render_preset_name::idx#9 == (number) 7
  if((bool~) render_preset_name::$7) goto render_preset_name::@8
  to:render_preset_name::@20
render_preset_name::@8: scope:[render_preset_name]  from render_preset_name::@19
  (byte*) render_preset_name::name#8 ← (const byte*) render_preset_name::$19
  to:render_preset_name::@12
render_preset_name::@20: scope:[render_preset_name]  from render_preset_name::@19
  (byte) render_preset_name::idx#10 ← phi( render_preset_name::@19/(byte) render_preset_name::idx#9 )
  (bool~) render_preset_name::$8 ← (byte) render_preset_name::idx#10 == (number) 8
  if((bool~) render_preset_name::$8) goto render_preset_name::@9
  to:render_preset_name::@21
render_preset_name::@9: scope:[render_preset_name]  from render_preset_name::@20
  (byte*) render_preset_name::name#9 ← (const byte*) render_preset_name::$20
  to:render_preset_name::@12
render_preset_name::@21: scope:[render_preset_name]  from render_preset_name::@20
  (byte) render_preset_name::idx#11 ← phi( render_preset_name::@20/(byte) render_preset_name::idx#10 )
  (bool~) render_preset_name::$9 ← (byte) render_preset_name::idx#11 == (number) 9
  if((bool~) render_preset_name::$9) goto render_preset_name::@10
  to:render_preset_name::@22
render_preset_name::@10: scope:[render_preset_name]  from render_preset_name::@21
  (byte*) render_preset_name::name#10 ← (const byte*) render_preset_name::$21
  to:render_preset_name::@12
render_preset_name::@22: scope:[render_preset_name]  from render_preset_name::@21
  (byte) render_preset_name::idx#12 ← phi( render_preset_name::@21/(byte) render_preset_name::idx#11 )
  (bool~) render_preset_name::$10 ← (byte) render_preset_name::idx#12 == (number) $a
  if((bool~) render_preset_name::$10) goto render_preset_name::@11
  to:render_preset_name::@23
render_preset_name::@11: scope:[render_preset_name]  from render_preset_name::@22
  (byte*) render_preset_name::name#11 ← (const byte*) render_preset_name::$22
  to:render_preset_name::@12
render_preset_name::@23: scope:[render_preset_name]  from render_preset_name::@22
  (byte*) render_preset_name::name#12 ← (const byte*) render_preset_name::$23
  to:render_preset_name::@12
render_preset_name::@12: scope:[render_preset_name]  from render_preset_name::@1 render_preset_name::@10 render_preset_name::@11 render_preset_name::@2 render_preset_name::@23 render_preset_name::@3 render_preset_name::@4 render_preset_name::@5 render_preset_name::@6 render_preset_name::@7 render_preset_name::@8 render_preset_name::@9
  (byte*) render_preset_name::name#13 ← phi( render_preset_name::@1/(byte*) render_preset_name::name#1 render_preset_name::@10/(byte*) render_preset_name::name#10 render_preset_name::@11/(byte*) render_preset_name::name#11 render_preset_name::@2/(byte*) render_preset_name::name#2 render_preset_name::@23/(byte*) render_preset_name::name#12 render_preset_name::@3/(byte*) render_preset_name::name#3 render_preset_name::@4/(byte*) render_preset_name::name#4 render_preset_name::@5/(byte*) render_preset_name::name#5 render_preset_name::@6/(byte*) render_preset_name::name#6 render_preset_name::@7/(byte*) render_preset_name::name#7 render_preset_name::@8/(byte*) render_preset_name::name#8 render_preset_name::@9/(byte*) render_preset_name::name#9 )
  (byte*) print_str_at::str#1 ← (byte*) render_preset_name::name#13
  (byte*) print_str_at::at#1 ← (const nomodify byte*) FORM_SCREEN+(number) $28*(number) 2+(number) $a
  call print_str_at 
  to:render_preset_name::@24
render_preset_name::@24: scope:[render_preset_name]  from render_preset_name::@12
  to:render_preset_name::@return
render_preset_name::@return: scope:[render_preset_name]  from render_preset_name::@24
  return 
  to:@return

(void()) gfx_mode()
gfx_mode: scope:[gfx_mode]  from main::@5
  (byte) keyboard_modifiers#124 ← phi( main::@5/(byte) keyboard_modifiers#7 )
  (byte) keyboard_events_size#143 ← phi( main::@5/(byte) keyboard_events_size#6 )
  (byte) gfx_mode::dtv_control#0 ← (byte) 0
  (bool~) gfx_mode::$0 ← *((const nomodify byte*) form_ctrl_line) != (number) 0
  (bool~) gfx_mode::$1 ← ! (bool~) gfx_mode::$0
  if((bool~) gfx_mode::$1) goto gfx_mode::@1
  to:gfx_mode::@11
gfx_mode::@1: scope:[gfx_mode]  from gfx_mode gfx_mode::@11
  (byte) keyboard_modifiers#122 ← phi( gfx_mode/(byte) keyboard_modifiers#124 gfx_mode::@11/(byte) keyboard_modifiers#125 )
  (byte) keyboard_events_size#141 ← phi( gfx_mode/(byte) keyboard_events_size#143 gfx_mode::@11/(byte) keyboard_events_size#144 )
  (byte) gfx_mode::dtv_control#14 ← phi( gfx_mode/(byte) gfx_mode::dtv_control#0 gfx_mode::@11/(byte) gfx_mode::dtv_control#1 )
  (bool~) gfx_mode::$2 ← *((const nomodify byte*) form_ctrl_borof) != (number) 0
  (bool~) gfx_mode::$3 ← ! (bool~) gfx_mode::$2
  if((bool~) gfx_mode::$3) goto gfx_mode::@2
  to:gfx_mode::@12
gfx_mode::@11: scope:[gfx_mode]  from gfx_mode
  (byte) keyboard_modifiers#125 ← phi( gfx_mode/(byte) keyboard_modifiers#124 )
  (byte) keyboard_events_size#144 ← phi( gfx_mode/(byte) keyboard_events_size#143 )
  (byte) gfx_mode::dtv_control#7 ← phi( gfx_mode/(byte) gfx_mode::dtv_control#0 )
  (byte~) gfx_mode::$64 ← (byte) gfx_mode::dtv_control#7 | (const nomodify byte) DTV_LINEAR
  (byte) gfx_mode::dtv_control#1 ← (byte~) gfx_mode::$64
  to:gfx_mode::@1
gfx_mode::@2: scope:[gfx_mode]  from gfx_mode::@1 gfx_mode::@12
  (byte) keyboard_modifiers#121 ← phi( gfx_mode::@1/(byte) keyboard_modifiers#122 gfx_mode::@12/(byte) keyboard_modifiers#123 )
  (byte) keyboard_events_size#140 ← phi( gfx_mode::@1/(byte) keyboard_events_size#141 gfx_mode::@12/(byte) keyboard_events_size#142 )
  (byte) gfx_mode::dtv_control#15 ← phi( gfx_mode::@1/(byte) gfx_mode::dtv_control#14 gfx_mode::@12/(byte) gfx_mode::dtv_control#2 )
  (bool~) gfx_mode::$4 ← *((const nomodify byte*) form_ctrl_hicol) != (number) 0
  (bool~) gfx_mode::$5 ← ! (bool~) gfx_mode::$4
  if((bool~) gfx_mode::$5) goto gfx_mode::@3
  to:gfx_mode::@13
gfx_mode::@12: scope:[gfx_mode]  from gfx_mode::@1
  (byte) keyboard_modifiers#123 ← phi( gfx_mode::@1/(byte) keyboard_modifiers#122 )
  (byte) keyboard_events_size#142 ← phi( gfx_mode::@1/(byte) keyboard_events_size#141 )
  (byte) gfx_mode::dtv_control#8 ← phi( gfx_mode::@1/(byte) gfx_mode::dtv_control#14 )
  (byte~) gfx_mode::$65 ← (byte) gfx_mode::dtv_control#8 | (const nomodify byte) DTV_BORDER_OFF
  (byte) gfx_mode::dtv_control#2 ← (byte~) gfx_mode::$65
  to:gfx_mode::@2
gfx_mode::@3: scope:[gfx_mode]  from gfx_mode::@13 gfx_mode::@2
  (byte) keyboard_modifiers#119 ← phi( gfx_mode::@13/(byte) keyboard_modifiers#120 gfx_mode::@2/(byte) keyboard_modifiers#121 )
  (byte) keyboard_events_size#138 ← phi( gfx_mode::@13/(byte) keyboard_events_size#139 gfx_mode::@2/(byte) keyboard_events_size#140 )
  (byte) gfx_mode::dtv_control#16 ← phi( gfx_mode::@13/(byte) gfx_mode::dtv_control#3 gfx_mode::@2/(byte) gfx_mode::dtv_control#15 )
  (bool~) gfx_mode::$6 ← *((const nomodify byte*) form_ctrl_overs) != (number) 0
  (bool~) gfx_mode::$7 ← ! (bool~) gfx_mode::$6
  if((bool~) gfx_mode::$7) goto gfx_mode::@4
  to:gfx_mode::@14
gfx_mode::@13: scope:[gfx_mode]  from gfx_mode::@2
  (byte) keyboard_modifiers#120 ← phi( gfx_mode::@2/(byte) keyboard_modifiers#121 )
  (byte) keyboard_events_size#139 ← phi( gfx_mode::@2/(byte) keyboard_events_size#140 )
  (byte) gfx_mode::dtv_control#9 ← phi( gfx_mode::@2/(byte) gfx_mode::dtv_control#15 )
  (byte~) gfx_mode::$66 ← (byte) gfx_mode::dtv_control#9 | (const nomodify byte) DTV_HIGHCOLOR
  (byte) gfx_mode::dtv_control#3 ← (byte~) gfx_mode::$66
  to:gfx_mode::@3
gfx_mode::@4: scope:[gfx_mode]  from gfx_mode::@14 gfx_mode::@3
  (byte) keyboard_modifiers#117 ← phi( gfx_mode::@14/(byte) keyboard_modifiers#118 gfx_mode::@3/(byte) keyboard_modifiers#119 )
  (byte) keyboard_events_size#136 ← phi( gfx_mode::@14/(byte) keyboard_events_size#137 gfx_mode::@3/(byte) keyboard_events_size#138 )
  (byte) gfx_mode::dtv_control#17 ← phi( gfx_mode::@14/(byte) gfx_mode::dtv_control#4 gfx_mode::@3/(byte) gfx_mode::dtv_control#16 )
  (bool~) gfx_mode::$8 ← *((const nomodify byte*) form_ctrl_colof) != (number) 0
  (bool~) gfx_mode::$9 ← ! (bool~) gfx_mode::$8
  if((bool~) gfx_mode::$9) goto gfx_mode::@5
  to:gfx_mode::@15
gfx_mode::@14: scope:[gfx_mode]  from gfx_mode::@3
  (byte) keyboard_modifiers#118 ← phi( gfx_mode::@3/(byte) keyboard_modifiers#119 )
  (byte) keyboard_events_size#137 ← phi( gfx_mode::@3/(byte) keyboard_events_size#138 )
  (byte) gfx_mode::dtv_control#10 ← phi( gfx_mode::@3/(byte) gfx_mode::dtv_control#16 )
  (byte~) gfx_mode::$67 ← (byte) gfx_mode::dtv_control#10 | (const nomodify byte) DTV_OVERSCAN
  (byte) gfx_mode::dtv_control#4 ← (byte~) gfx_mode::$67
  to:gfx_mode::@4
gfx_mode::@5: scope:[gfx_mode]  from gfx_mode::@15 gfx_mode::@4
  (byte) keyboard_modifiers#115 ← phi( gfx_mode::@15/(byte) keyboard_modifiers#116 gfx_mode::@4/(byte) keyboard_modifiers#117 )
  (byte) keyboard_events_size#134 ← phi( gfx_mode::@15/(byte) keyboard_events_size#135 gfx_mode::@4/(byte) keyboard_events_size#136 )
  (byte) gfx_mode::dtv_control#18 ← phi( gfx_mode::@15/(byte) gfx_mode::dtv_control#5 gfx_mode::@4/(byte) gfx_mode::dtv_control#17 )
  (bool~) gfx_mode::$10 ← *((const nomodify byte*) form_ctrl_chunk) != (number) 0
  (bool~) gfx_mode::$11 ← ! (bool~) gfx_mode::$10
  if((bool~) gfx_mode::$11) goto gfx_mode::@6
  to:gfx_mode::@16
gfx_mode::@15: scope:[gfx_mode]  from gfx_mode::@4
  (byte) keyboard_modifiers#116 ← phi( gfx_mode::@4/(byte) keyboard_modifiers#117 )
  (byte) keyboard_events_size#135 ← phi( gfx_mode::@4/(byte) keyboard_events_size#136 )
  (byte) gfx_mode::dtv_control#11 ← phi( gfx_mode::@4/(byte) gfx_mode::dtv_control#17 )
  (byte~) gfx_mode::$68 ← (byte) gfx_mode::dtv_control#11 | (const nomodify byte) DTV_COLORRAM_OFF
  (byte) gfx_mode::dtv_control#5 ← (byte~) gfx_mode::$68
  to:gfx_mode::@5
gfx_mode::@6: scope:[gfx_mode]  from gfx_mode::@16 gfx_mode::@5
  (byte) keyboard_modifiers#113 ← phi( gfx_mode::@16/(byte) keyboard_modifiers#114 gfx_mode::@5/(byte) keyboard_modifiers#115 )
  (byte) keyboard_events_size#132 ← phi( gfx_mode::@16/(byte) keyboard_events_size#133 gfx_mode::@5/(byte) keyboard_events_size#134 )
  (byte) gfx_mode::dtv_control#12 ← phi( gfx_mode::@16/(byte) gfx_mode::dtv_control#6 gfx_mode::@5/(byte) gfx_mode::dtv_control#18 )
  *((const nomodify byte*) DTV_CONTROL) ← (byte) gfx_mode::dtv_control#12
  (byte) gfx_mode::vic_control#0 ← (byte)(const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(number) 3
  (bool~) gfx_mode::$12 ← *((const nomodify byte*) form_ctrl_ecm) != (number) 0
  (bool~) gfx_mode::$13 ← ! (bool~) gfx_mode::$12
  if((bool~) gfx_mode::$13) goto gfx_mode::@7
  to:gfx_mode::@17
gfx_mode::@16: scope:[gfx_mode]  from gfx_mode::@5
  (byte) keyboard_modifiers#114 ← phi( gfx_mode::@5/(byte) keyboard_modifiers#115 )
  (byte) keyboard_events_size#133 ← phi( gfx_mode::@5/(byte) keyboard_events_size#134 )
  (byte) gfx_mode::dtv_control#13 ← phi( gfx_mode::@5/(byte) gfx_mode::dtv_control#18 )
  (byte~) gfx_mode::$69 ← (byte) gfx_mode::dtv_control#13 | (const nomodify byte) DTV_CHUNKY
  (byte) gfx_mode::dtv_control#6 ← (byte~) gfx_mode::$69
  to:gfx_mode::@6
gfx_mode::@7: scope:[gfx_mode]  from gfx_mode::@17 gfx_mode::@6
  (byte) keyboard_modifiers#111 ← phi( gfx_mode::@17/(byte) keyboard_modifiers#112 gfx_mode::@6/(byte) keyboard_modifiers#113 )
  (byte) keyboard_events_size#130 ← phi( gfx_mode::@17/(byte) keyboard_events_size#131 gfx_mode::@6/(byte) keyboard_events_size#132 )
  (byte) gfx_mode::vic_control#6 ← phi( gfx_mode::@17/(byte) gfx_mode::vic_control#1 gfx_mode::@6/(byte) gfx_mode::vic_control#0 )
  (bool~) gfx_mode::$14 ← *((const nomodify byte*) form_ctrl_bmm) != (number) 0
  (bool~) gfx_mode::$15 ← ! (bool~) gfx_mode::$14
  if((bool~) gfx_mode::$15) goto gfx_mode::@8
  to:gfx_mode::@18
gfx_mode::@17: scope:[gfx_mode]  from gfx_mode::@6
  (byte) keyboard_modifiers#112 ← phi( gfx_mode::@6/(byte) keyboard_modifiers#113 )
  (byte) keyboard_events_size#131 ← phi( gfx_mode::@6/(byte) keyboard_events_size#132 )
  (byte) gfx_mode::vic_control#3 ← phi( gfx_mode::@6/(byte) gfx_mode::vic_control#0 )
  (byte~) gfx_mode::$70 ← (byte) gfx_mode::vic_control#3 | (const nomodify byte) VIC_ECM
  (byte) gfx_mode::vic_control#1 ← (byte~) gfx_mode::$70
  to:gfx_mode::@7
gfx_mode::@8: scope:[gfx_mode]  from gfx_mode::@18 gfx_mode::@7
  (byte) keyboard_modifiers#109 ← phi( gfx_mode::@18/(byte) keyboard_modifiers#110 gfx_mode::@7/(byte) keyboard_modifiers#111 )
  (byte) keyboard_events_size#128 ← phi( gfx_mode::@18/(byte) keyboard_events_size#129 gfx_mode::@7/(byte) keyboard_events_size#130 )
  (byte) gfx_mode::vic_control#4 ← phi( gfx_mode::@18/(byte) gfx_mode::vic_control#2 gfx_mode::@7/(byte) gfx_mode::vic_control#6 )
  *((const nomodify byte*) VIC_CONTROL) ← (byte) gfx_mode::vic_control#4
  (byte) gfx_mode::vic_control2#0 ← (const nomodify byte) VIC_CSEL
  (bool~) gfx_mode::$16 ← *((const nomodify byte*) form_ctrl_mcm) != (number) 0
  (bool~) gfx_mode::$17 ← ! (bool~) gfx_mode::$16
  if((bool~) gfx_mode::$17) goto gfx_mode::@9
  to:gfx_mode::@19
gfx_mode::@18: scope:[gfx_mode]  from gfx_mode::@7
  (byte) keyboard_modifiers#110 ← phi( gfx_mode::@7/(byte) keyboard_modifiers#111 )
  (byte) keyboard_events_size#129 ← phi( gfx_mode::@7/(byte) keyboard_events_size#130 )
  (byte) gfx_mode::vic_control#5 ← phi( gfx_mode::@7/(byte) gfx_mode::vic_control#6 )
  (byte~) gfx_mode::$71 ← (byte) gfx_mode::vic_control#5 | (const nomodify byte) VIC_BMM
  (byte) gfx_mode::vic_control#2 ← (byte~) gfx_mode::$71
  to:gfx_mode::@8
gfx_mode::@9: scope:[gfx_mode]  from gfx_mode::@19 gfx_mode::@8
  (byte) keyboard_modifiers#106 ← phi( gfx_mode::@19/(byte) keyboard_modifiers#108 gfx_mode::@8/(byte) keyboard_modifiers#109 )
  (byte) keyboard_events_size#125 ← phi( gfx_mode::@19/(byte) keyboard_events_size#127 gfx_mode::@8/(byte) keyboard_events_size#128 )
  (byte) gfx_mode::vic_control2#2 ← phi( gfx_mode::@19/(byte) gfx_mode::vic_control2#1 gfx_mode::@8/(byte) gfx_mode::vic_control2#0 )
  *((const nomodify byte*) VIC_CONTROL2) ← (byte) gfx_mode::vic_control2#2
  (number~) gfx_mode::$18 ← *((const nomodify byte*) form_a_start_hi) * (number) $10
  (number~) gfx_mode::$19 ← (number~) gfx_mode::$18 | *((const nomodify byte*) form_a_start_lo)
  (byte) gfx_mode::plane_a_offs#0 ← (number~) gfx_mode::$19
  (byte) get_plane::idx#0 ← *((const nomodify byte*) form_a_pattern)
  call get_plane 
  (dword) get_plane::return#16 ← (dword) get_plane::return#14
  to:gfx_mode::@30
gfx_mode::@30: scope:[gfx_mode]  from gfx_mode::@9
  (byte) keyboard_modifiers#104 ← phi( gfx_mode::@9/(byte) keyboard_modifiers#106 )
  (byte) keyboard_events_size#123 ← phi( gfx_mode::@9/(byte) keyboard_events_size#125 )
  (byte) gfx_mode::plane_a_offs#1 ← phi( gfx_mode::@9/(byte) gfx_mode::plane_a_offs#0 )
  (dword) get_plane::return#19 ← phi( gfx_mode::@9/(dword) get_plane::return#16 )
  (dword~) gfx_mode::$20 ← (dword) get_plane::return#19
  (dword~) gfx_mode::$21 ← (dword~) gfx_mode::$20 + (byte) gfx_mode::plane_a_offs#1
  (dword) gfx_mode::plane_a#0 ← (dword~) gfx_mode::$21
  (word~) gfx_mode::$22 ← < (dword) gfx_mode::plane_a#0
  (byte~) gfx_mode::$23 ← < (word~) gfx_mode::$22
  *((const nomodify byte*) DTV_PLANEA_START_LO) ← (byte~) gfx_mode::$23
  (word~) gfx_mode::$24 ← < (dword) gfx_mode::plane_a#0
  (byte~) gfx_mode::$25 ← > (word~) gfx_mode::$24
  *((const nomodify byte*) DTV_PLANEA_START_MI) ← (byte~) gfx_mode::$25
  (word~) gfx_mode::$26 ← > (dword) gfx_mode::plane_a#0
  (byte~) gfx_mode::$27 ← < (word~) gfx_mode::$26
  *((const nomodify byte*) DTV_PLANEA_START_HI) ← (byte~) gfx_mode::$27
  (number~) gfx_mode::$28 ← *((const nomodify byte*) form_a_step_hi) * (number) $10
  (number~) gfx_mode::$29 ← (number~) gfx_mode::$28 | *((const nomodify byte*) form_a_step_lo)
  *((const nomodify byte*) DTV_PLANEA_STEP) ← (number~) gfx_mode::$29
  (number~) gfx_mode::$30 ← *((const nomodify byte*) form_a_mod_hi) * (number) $10
  (number~) gfx_mode::$31 ← (number~) gfx_mode::$30 | *((const nomodify byte*) form_a_mod_lo)
  *((const nomodify byte*) DTV_PLANEA_MODULO_LO) ← (number~) gfx_mode::$31
  *((const nomodify byte*) DTV_PLANEA_MODULO_HI) ← (number) 0
  (number~) gfx_mode::$32 ← *((const nomodify byte*) form_b_start_hi) * (number) $10
  (number~) gfx_mode::$33 ← (number~) gfx_mode::$32 | *((const nomodify byte*) form_b_start_lo)
  (byte) gfx_mode::plane_b_offs#0 ← (number~) gfx_mode::$33
  (byte) get_plane::idx#1 ← *((const nomodify byte*) form_b_pattern)
  call get_plane 
  (dword) get_plane::return#17 ← (dword) get_plane::return#14
  to:gfx_mode::@31
gfx_mode::@31: scope:[gfx_mode]  from gfx_mode::@30
  (byte) keyboard_modifiers#102 ← phi( gfx_mode::@30/(byte) keyboard_modifiers#104 )
  (byte) keyboard_events_size#121 ← phi( gfx_mode::@30/(byte) keyboard_events_size#123 )
  (byte) gfx_mode::plane_b_offs#1 ← phi( gfx_mode::@30/(byte) gfx_mode::plane_b_offs#0 )
  (dword) get_plane::return#20 ← phi( gfx_mode::@30/(dword) get_plane::return#17 )
  (dword~) gfx_mode::$34 ← (dword) get_plane::return#20
  (dword~) gfx_mode::$35 ← (dword~) gfx_mode::$34 + (byte) gfx_mode::plane_b_offs#1
  (dword) gfx_mode::plane_b#0 ← (dword~) gfx_mode::$35
  (word~) gfx_mode::$36 ← < (dword) gfx_mode::plane_b#0
  (byte~) gfx_mode::$37 ← < (word~) gfx_mode::$36
  *((const nomodify byte*) DTV_PLANEB_START_LO) ← (byte~) gfx_mode::$37
  (word~) gfx_mode::$38 ← < (dword) gfx_mode::plane_b#0
  (byte~) gfx_mode::$39 ← > (word~) gfx_mode::$38
  *((const nomodify byte*) DTV_PLANEB_START_MI) ← (byte~) gfx_mode::$39
  (word~) gfx_mode::$40 ← > (dword) gfx_mode::plane_b#0
  (byte~) gfx_mode::$41 ← < (word~) gfx_mode::$40
  *((const nomodify byte*) DTV_PLANEB_START_HI) ← (byte~) gfx_mode::$41
  (number~) gfx_mode::$42 ← *((const nomodify byte*) form_b_step_hi) * (number) $10
  (number~) gfx_mode::$43 ← (number~) gfx_mode::$42 | *((const nomodify byte*) form_b_step_lo)
  *((const nomodify byte*) DTV_PLANEB_STEP) ← (number~) gfx_mode::$43
  (number~) gfx_mode::$44 ← *((const nomodify byte*) form_b_mod_hi) * (number) $10
  (number~) gfx_mode::$45 ← (number~) gfx_mode::$44 | *((const nomodify byte*) form_b_mod_lo)
  *((const nomodify byte*) DTV_PLANEB_MODULO_LO) ← (number~) gfx_mode::$45
  *((const nomodify byte*) DTV_PLANEB_MODULO_HI) ← (number) 0
  *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) ← (number) 3
  *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A) ← (number) 3^(byte)(word)(const nomodify byte*) VIC_SCREEN0/(number) $4000
  (byte) get_vic_screen::idx#0 ← *((const nomodify byte*) form_vic_screen)
  call get_vic_screen 
  (byte*) get_vic_screen::return#7 ← (byte*) get_vic_screen::return#5
  to:gfx_mode::@32
gfx_mode::@32: scope:[gfx_mode]  from gfx_mode::@31
  (byte) keyboard_modifiers#100 ← phi( gfx_mode::@31/(byte) keyboard_modifiers#102 )
  (byte) keyboard_events_size#119 ← phi( gfx_mode::@31/(byte) keyboard_events_size#121 )
  (byte*) get_vic_screen::return#10 ← phi( gfx_mode::@31/(byte*) get_vic_screen::return#7 )
  (byte*~) gfx_mode::$46 ← (byte*) get_vic_screen::return#10
  (word~) gfx_mode::$82 ← (word)(byte*~) gfx_mode::$46
  (number~) gfx_mode::$47 ← (word~) gfx_mode::$82 & (number) $3fff
  (number~) gfx_mode::$48 ← (number~) gfx_mode::$47 / (number) $40
  (byte) get_vic_charset::idx#0 ← *((const nomodify byte*) form_vic_gfx)
  call get_vic_charset 
  (byte*) get_vic_charset::return#4 ← (byte*) get_vic_charset::return#2
  to:gfx_mode::@33
gfx_mode::@33: scope:[gfx_mode]  from gfx_mode::@32
  (byte) keyboard_modifiers#98 ← phi( gfx_mode::@32/(byte) keyboard_modifiers#100 )
  (byte) keyboard_events_size#117 ← phi( gfx_mode::@32/(byte) keyboard_events_size#119 )
  (byte*) get_vic_charset::return#6 ← phi( gfx_mode::@32/(byte*) get_vic_charset::return#4 )
  (byte*~) gfx_mode::$49 ← (byte*) get_vic_charset::return#6
  (word~) gfx_mode::$83 ← (word)(byte*~) gfx_mode::$49
  (number~) gfx_mode::$50 ← (word~) gfx_mode::$83 & (number) $3fff
  (number~) gfx_mode::$51 ← > (number~) gfx_mode::$50
  (number~) gfx_mode::$52 ← (number~) gfx_mode::$51 / (number) 4
  (byte~) gfx_mode::$84 ← (byte)(number~) gfx_mode::$48
  (number~) gfx_mode::$53 ← (byte~) gfx_mode::$84 | (number~) gfx_mode::$52
  *((const nomodify byte*) VIC_MEMORY) ← (number~) gfx_mode::$53
  (byte) get_vic_screen::idx#1 ← *((const nomodify byte*) form_vic_cols)
  call get_vic_screen 
  (byte*) get_vic_screen::return#8 ← (byte*) get_vic_screen::return#5
  to:gfx_mode::@34
gfx_mode::@34: scope:[gfx_mode]  from gfx_mode::@33
  (byte) keyboard_modifiers#96 ← phi( gfx_mode::@33/(byte) keyboard_modifiers#98 )
  (byte) keyboard_events_size#115 ← phi( gfx_mode::@33/(byte) keyboard_events_size#117 )
  (byte*) get_vic_screen::return#11 ← phi( gfx_mode::@33/(byte*) get_vic_screen::return#8 )
  (byte*~) gfx_mode::$54 ← (byte*) get_vic_screen::return#11
  (byte*) gfx_mode::vic_colors#0 ← (byte*~) gfx_mode::$54
  (byte*) gfx_mode::col#0 ← (const nomodify byte*) COLS
  (byte) gfx_mode::cy#0 ← (byte) 0
  to:gfx_mode::@20
gfx_mode::@19: scope:[gfx_mode]  from gfx_mode::@8
  (byte) keyboard_modifiers#108 ← phi( gfx_mode::@8/(byte) keyboard_modifiers#109 )
  (byte) keyboard_events_size#127 ← phi( gfx_mode::@8/(byte) keyboard_events_size#128 )
  (byte) gfx_mode::vic_control2#3 ← phi( gfx_mode::@8/(byte) gfx_mode::vic_control2#0 )
  (byte~) gfx_mode::$72 ← (byte) gfx_mode::vic_control2#3 | (const nomodify byte) VIC_MCM
  (byte) gfx_mode::vic_control2#1 ← (byte~) gfx_mode::$72
  to:gfx_mode::@9
gfx_mode::@20: scope:[gfx_mode]  from gfx_mode::@22 gfx_mode::@34
  (byte) keyboard_modifiers#94 ← phi( gfx_mode::@22/(byte) keyboard_modifiers#88 gfx_mode::@34/(byte) keyboard_modifiers#96 )
  (byte) keyboard_events_size#112 ← phi( gfx_mode::@22/(byte) keyboard_events_size#101 gfx_mode::@34/(byte) keyboard_events_size#115 )
  (byte) gfx_mode::cy#4 ← phi( gfx_mode::@22/(byte) gfx_mode::cy#1 gfx_mode::@34/(byte) gfx_mode::cy#0 )
  (byte*) gfx_mode::col#3 ← phi( gfx_mode::@22/(byte*) gfx_mode::col#4 gfx_mode::@34/(byte*) gfx_mode::col#0 )
  (byte*) gfx_mode::vic_colors#3 ← phi( gfx_mode::@22/(byte*) gfx_mode::vic_colors#4 gfx_mode::@34/(byte*) gfx_mode::vic_colors#0 )
  (byte) gfx_mode::cx#0 ← (byte) 0
  to:gfx_mode::@21
gfx_mode::@21: scope:[gfx_mode]  from gfx_mode::@20 gfx_mode::@21
  (byte) keyboard_modifiers#92 ← phi( gfx_mode::@20/(byte) keyboard_modifiers#94 gfx_mode::@21/(byte) keyboard_modifiers#92 )
  (byte) keyboard_events_size#108 ← phi( gfx_mode::@20/(byte) keyboard_events_size#112 gfx_mode::@21/(byte) keyboard_events_size#108 )
  (byte) gfx_mode::cy#3 ← phi( gfx_mode::@20/(byte) gfx_mode::cy#4 gfx_mode::@21/(byte) gfx_mode::cy#3 )
  (byte) gfx_mode::cx#2 ← phi( gfx_mode::@20/(byte) gfx_mode::cx#0 gfx_mode::@21/(byte) gfx_mode::cx#1 )
  (byte*) gfx_mode::col#2 ← phi( gfx_mode::@20/(byte*) gfx_mode::col#3 gfx_mode::@21/(byte*) gfx_mode::col#1 )
  (byte*) gfx_mode::vic_colors#2 ← phi( gfx_mode::@20/(byte*) gfx_mode::vic_colors#3 gfx_mode::@21/(byte*) gfx_mode::vic_colors#1 )
  *((byte*) gfx_mode::col#2) ← *((byte*) gfx_mode::vic_colors#2)
  (byte*) gfx_mode::col#1 ← ++ (byte*) gfx_mode::col#2
  (byte*) gfx_mode::vic_colors#1 ← ++ (byte*) gfx_mode::vic_colors#2
  (byte) gfx_mode::cx#1 ← (byte) gfx_mode::cx#2 + rangenext(0,$27)
  (bool~) gfx_mode::$73 ← (byte) gfx_mode::cx#1 != rangelast(0,$27)
  if((bool~) gfx_mode::$73) goto gfx_mode::@21
  to:gfx_mode::@22
gfx_mode::@22: scope:[gfx_mode]  from gfx_mode::@21
  (byte) keyboard_modifiers#88 ← phi( gfx_mode::@21/(byte) keyboard_modifiers#92 )
  (byte) keyboard_events_size#101 ← phi( gfx_mode::@21/(byte) keyboard_events_size#108 )
  (byte*) gfx_mode::col#4 ← phi( gfx_mode::@21/(byte*) gfx_mode::col#1 )
  (byte*) gfx_mode::vic_colors#4 ← phi( gfx_mode::@21/(byte*) gfx_mode::vic_colors#1 )
  (byte) gfx_mode::cy#2 ← phi( gfx_mode::@21/(byte) gfx_mode::cy#3 )
  (byte) gfx_mode::cy#1 ← (byte) gfx_mode::cy#2 + rangenext(0,$18)
  (bool~) gfx_mode::$74 ← (byte) gfx_mode::cy#1 != rangelast(0,$18)
  if((bool~) gfx_mode::$74) goto gfx_mode::@20
  to:gfx_mode::@23
gfx_mode::@23: scope:[gfx_mode]  from gfx_mode::@22
  (byte) keyboard_modifiers#83 ← phi( gfx_mode::@22/(byte) keyboard_modifiers#88 )
  (byte) keyboard_events_size#92 ← phi( gfx_mode::@22/(byte) keyboard_events_size#101 )
  *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (number) 0
  (number~) gfx_mode::$55 ← *((const nomodify byte*) form_vic_bg0_hi) * (number) $10
  (number~) gfx_mode::$56 ← (number~) gfx_mode::$55 | *((const nomodify byte*) form_vic_bg0_lo)
  *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) ← (number~) gfx_mode::$56
  (number~) gfx_mode::$57 ← *((const nomodify byte*) form_vic_bg1_hi) * (number) $10
  (number~) gfx_mode::$58 ← (number~) gfx_mode::$57 | *((const nomodify byte*) form_vic_bg1_lo)
  *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR1) ← (number~) gfx_mode::$58
  (number~) gfx_mode::$59 ← *((const nomodify byte*) form_vic_bg2_hi) * (number) $10
  (number~) gfx_mode::$60 ← (number~) gfx_mode::$59 | *((const nomodify byte*) form_vic_bg2_lo)
  *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR2) ← (number~) gfx_mode::$60
  (number~) gfx_mode::$61 ← *((const nomodify byte*) form_vic_bg3_hi) * (number) $10
  (number~) gfx_mode::$62 ← (number~) gfx_mode::$61 | *((const nomodify byte*) form_vic_bg3_lo)
  *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR3) ← (number~) gfx_mode::$62
  (bool~) gfx_mode::$63 ← *((const nomodify byte*) form_dtv_palet) == (number) 0
  if((bool~) gfx_mode::$63) goto gfx_mode::@10
  to:gfx_mode::@24
gfx_mode::@10: scope:[gfx_mode]  from gfx_mode::@23
  (byte) keyboard_modifiers#78 ← phi( gfx_mode::@23/(byte) keyboard_modifiers#83 )
  (byte) keyboard_events_size#82 ← phi( gfx_mode::@23/(byte) keyboard_events_size#92 )
  (byte) gfx_mode::i#0 ← (byte) 0
  to:gfx_mode::@26
gfx_mode::@24: scope:[gfx_mode]  from gfx_mode::@23
  (byte) keyboard_modifiers#77 ← phi( gfx_mode::@23/(byte) keyboard_modifiers#83 )
  (byte) keyboard_events_size#81 ← phi( gfx_mode::@23/(byte) keyboard_events_size#92 )
  (byte) gfx_mode::j#0 ← (byte) 0
  to:gfx_mode::@25
gfx_mode::@25: scope:[gfx_mode]  from gfx_mode::@24 gfx_mode::@25
  (byte) keyboard_modifiers#57 ← phi( gfx_mode::@24/(byte) keyboard_modifiers#77 gfx_mode::@25/(byte) keyboard_modifiers#57 )
  (byte) keyboard_events_size#58 ← phi( gfx_mode::@24/(byte) keyboard_events_size#81 gfx_mode::@25/(byte) keyboard_events_size#58 )
  (byte) gfx_mode::j#2 ← phi( gfx_mode::@24/(byte) gfx_mode::j#0 gfx_mode::@25/(byte) gfx_mode::j#1 )
  *((const nomodify byte*) DTV_PALETTE + (byte) gfx_mode::j#2) ← (byte) gfx_mode::j#2
  (byte) gfx_mode::j#1 ← (byte) gfx_mode::j#2 + rangenext(0,$f)
  (bool~) gfx_mode::$75 ← (byte) gfx_mode::j#1 != rangelast(0,$f)
  if((bool~) gfx_mode::$75) goto gfx_mode::@25
  to:gfx_mode::@27
gfx_mode::@26: scope:[gfx_mode]  from gfx_mode::@10 gfx_mode::@26
  (byte) keyboard_modifiers#58 ← phi( gfx_mode::@10/(byte) keyboard_modifiers#78 gfx_mode::@26/(byte) keyboard_modifiers#58 )
  (byte) keyboard_events_size#59 ← phi( gfx_mode::@10/(byte) keyboard_events_size#82 gfx_mode::@26/(byte) keyboard_events_size#59 )
  (byte) gfx_mode::i#2 ← phi( gfx_mode::@10/(byte) gfx_mode::i#0 gfx_mode::@26/(byte) gfx_mode::i#1 )
  *((const nomodify byte*) DTV_PALETTE + (byte) gfx_mode::i#2) ← *((const byte*) DTV_PALETTE_DEFAULT + (byte) gfx_mode::i#2)
  (byte) gfx_mode::i#1 ← (byte) gfx_mode::i#2 + rangenext(0,$f)
  (bool~) gfx_mode::$76 ← (byte) gfx_mode::i#1 != rangelast(0,$f)
  if((bool~) gfx_mode::$76) goto gfx_mode::@26
  to:gfx_mode::@27
gfx_mode::@27: scope:[gfx_mode]  from gfx_mode::@25 gfx_mode::@26 gfx_mode::@36
  (byte) keyboard_modifiers#41 ← phi( gfx_mode::@25/(byte) keyboard_modifiers#57 gfx_mode::@26/(byte) keyboard_modifiers#58 gfx_mode::@36/(byte) keyboard_modifiers#42 )
  (byte) keyboard_events_size#45 ← phi( gfx_mode::@25/(byte) keyboard_events_size#58 gfx_mode::@26/(byte) keyboard_events_size#59 gfx_mode::@36/(byte) keyboard_events_size#10 )
  if(true) goto gfx_mode::@28
  to:gfx_mode::@return
gfx_mode::@28: scope:[gfx_mode]  from gfx_mode::@27 gfx_mode::@28
  (byte) keyboard_modifiers#59 ← phi( gfx_mode::@27/(byte) keyboard_modifiers#41 gfx_mode::@28/(byte) keyboard_modifiers#59 )
  (byte) keyboard_events_size#60 ← phi( gfx_mode::@27/(byte) keyboard_events_size#45 gfx_mode::@28/(byte) keyboard_events_size#60 )
  (bool~) gfx_mode::$77 ← *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) != (number) $ff
  if((bool~) gfx_mode::$77) goto gfx_mode::@28
  to:gfx_mode::@29
gfx_mode::@29: scope:[gfx_mode]  from gfx_mode::@28
  (byte) keyboard_modifiers#40 ← phi( gfx_mode::@28/(byte) keyboard_modifiers#59 )
  (byte) keyboard_events_size#44 ← phi( gfx_mode::@28/(byte) keyboard_events_size#60 )
  call keyboard_event_scan 
  to:gfx_mode::@35
gfx_mode::@35: scope:[gfx_mode]  from gfx_mode::@29
  (byte) keyboard_modifiers#25 ← phi( gfx_mode::@29/(byte) keyboard_modifiers#6 )
  (byte) keyboard_events_size#28 ← phi( gfx_mode::@29/(byte) keyboard_events_size#3 )
  (byte) keyboard_events_size#9 ← (byte) keyboard_events_size#28
  (byte) keyboard_modifiers#10 ← (byte) keyboard_modifiers#25
  call keyboard_event_get 
  (byte) keyboard_event_get::return#3 ← (byte) keyboard_event_get::return#2
  to:gfx_mode::@36
gfx_mode::@36: scope:[gfx_mode]  from gfx_mode::@35
  (byte) keyboard_modifiers#42 ← phi( gfx_mode::@35/(byte) keyboard_modifiers#10 )
  (byte) keyboard_events_size#29 ← phi( gfx_mode::@35/(byte) keyboard_events_size#5 )
  (byte) keyboard_event_get::return#6 ← phi( gfx_mode::@35/(byte) keyboard_event_get::return#3 )
  (byte~) gfx_mode::$79 ← (byte) keyboard_event_get::return#6
  (byte) keyboard_events_size#10 ← (byte) keyboard_events_size#29
  (byte) gfx_mode::keyboard_event#0 ← (byte~) gfx_mode::$79
  (bool~) gfx_mode::$80 ← (byte) gfx_mode::keyboard_event#0 == (const nomodify byte) KEY_SPACE
  (bool~) gfx_mode::$81 ← ! (bool~) gfx_mode::$80
  if((bool~) gfx_mode::$81) goto gfx_mode::@27
  to:gfx_mode::@return
gfx_mode::@return: scope:[gfx_mode]  from gfx_mode::@27 gfx_mode::@36
  (byte) keyboard_modifiers#26 ← phi( gfx_mode::@27/(byte) keyboard_modifiers#41 gfx_mode::@36/(byte) keyboard_modifiers#42 )
  (byte) keyboard_events_size#30 ← phi( gfx_mode::@27/(byte) keyboard_events_size#45 gfx_mode::@36/(byte) keyboard_events_size#10 )
  (byte) keyboard_events_size#11 ← (byte) keyboard_events_size#30
  (byte) keyboard_modifiers#11 ← (byte) keyboard_modifiers#26
  return 
  to:@return

(void()) gfx_init()
gfx_init: scope:[gfx_init]  from main::@3
  call gfx_init_screen0 
  to:gfx_init::@1
gfx_init::@1: scope:[gfx_init]  from gfx_init
  call gfx_init_screen1 
  to:gfx_init::@2
gfx_init::@2: scope:[gfx_init]  from gfx_init::@1
  call gfx_init_screen2 
  to:gfx_init::@3
gfx_init::@3: scope:[gfx_init]  from gfx_init::@2
  call gfx_init_screen3 
  to:gfx_init::@4
gfx_init::@4: scope:[gfx_init]  from gfx_init::@3
  call gfx_init_screen4 
  to:gfx_init::@5
gfx_init::@5: scope:[gfx_init]  from gfx_init::@4
  call gfx_init_charset 
  to:gfx_init::@6
gfx_init::@6: scope:[gfx_init]  from gfx_init::@5
  call gfx_init_vic_bitmap 
  to:gfx_init::@7
gfx_init::@7: scope:[gfx_init]  from gfx_init::@6
  call gfx_init_plane_8bppchunky 
  to:gfx_init::@8
gfx_init::@8: scope:[gfx_init]  from gfx_init::@7
  call gfx_init_plane_charset8 
  to:gfx_init::@9
gfx_init::@9: scope:[gfx_init]  from gfx_init::@8
  call gfx_init_plane_horisontal 
  to:gfx_init::@10
gfx_init::@10: scope:[gfx_init]  from gfx_init::@9
  call gfx_init_plane_vertical 
  to:gfx_init::@11
gfx_init::@11: scope:[gfx_init]  from gfx_init::@10
  call gfx_init_plane_horisontal2 
  to:gfx_init::@12
gfx_init::@12: scope:[gfx_init]  from gfx_init::@11
  call gfx_init_plane_vertical2 
  to:gfx_init::@13
gfx_init::@13: scope:[gfx_init]  from gfx_init::@12
  call gfx_init_plane_blank 
  to:gfx_init::@14
gfx_init::@14: scope:[gfx_init]  from gfx_init::@13
  call gfx_init_plane_full 
  to:gfx_init::@15
gfx_init::@15: scope:[gfx_init]  from gfx_init::@14
  to:gfx_init::@return
gfx_init::@return: scope:[gfx_init]  from gfx_init::@15
  return 
  to:@return

(void()) gfx_init_charset()
gfx_init_charset: scope:[gfx_init_charset]  from gfx_init::@5
  *((const nomodify byte*) PROCPORT) ← (number) $32
  (byte*) gfx_init_charset::chargen#0 ← (const nomodify byte*) CHARGEN
  (byte*) gfx_init_charset::charset#0 ← (const nomodify byte*) VIC_CHARSET_ROM
  (byte) gfx_init_charset::c#0 ← (byte) 0
  to:gfx_init_charset::@1
gfx_init_charset::@1: scope:[gfx_init_charset]  from gfx_init_charset gfx_init_charset::@3
  (byte) gfx_init_charset::c#4 ← phi( gfx_init_charset/(byte) gfx_init_charset::c#0 gfx_init_charset::@3/(byte) gfx_init_charset::c#1 )
  (byte*) gfx_init_charset::charset#3 ← phi( gfx_init_charset/(byte*) gfx_init_charset::charset#0 gfx_init_charset::@3/(byte*) gfx_init_charset::charset#4 )
  (byte*) gfx_init_charset::chargen#3 ← phi( gfx_init_charset/(byte*) gfx_init_charset::chargen#0 gfx_init_charset::@3/(byte*) gfx_init_charset::chargen#4 )
  (byte) gfx_init_charset::l#0 ← (byte) 0
  to:gfx_init_charset::@2
gfx_init_charset::@2: scope:[gfx_init_charset]  from gfx_init_charset::@1 gfx_init_charset::@2
  (byte) gfx_init_charset::c#3 ← phi( gfx_init_charset::@1/(byte) gfx_init_charset::c#4 gfx_init_charset::@2/(byte) gfx_init_charset::c#3 )
  (byte) gfx_init_charset::l#2 ← phi( gfx_init_charset::@1/(byte) gfx_init_charset::l#0 gfx_init_charset::@2/(byte) gfx_init_charset::l#1 )
  (byte*) gfx_init_charset::charset#2 ← phi( gfx_init_charset::@1/(byte*) gfx_init_charset::charset#3 gfx_init_charset::@2/(byte*) gfx_init_charset::charset#1 )
  (byte*) gfx_init_charset::chargen#2 ← phi( gfx_init_charset::@1/(byte*) gfx_init_charset::chargen#3 gfx_init_charset::@2/(byte*) gfx_init_charset::chargen#1 )
  *((byte*) gfx_init_charset::charset#2) ← *((byte*) gfx_init_charset::chargen#2)
  (byte*) gfx_init_charset::charset#1 ← ++ (byte*) gfx_init_charset::charset#2
  (byte*) gfx_init_charset::chargen#1 ← ++ (byte*) gfx_init_charset::chargen#2
  (byte) gfx_init_charset::l#1 ← (byte) gfx_init_charset::l#2 + rangenext(0,7)
  (bool~) gfx_init_charset::$0 ← (byte) gfx_init_charset::l#1 != rangelast(0,7)
  if((bool~) gfx_init_charset::$0) goto gfx_init_charset::@2
  to:gfx_init_charset::@3
gfx_init_charset::@3: scope:[gfx_init_charset]  from gfx_init_charset::@2
  (byte*) gfx_init_charset::charset#4 ← phi( gfx_init_charset::@2/(byte*) gfx_init_charset::charset#1 )
  (byte*) gfx_init_charset::chargen#4 ← phi( gfx_init_charset::@2/(byte*) gfx_init_charset::chargen#1 )
  (byte) gfx_init_charset::c#2 ← phi( gfx_init_charset::@2/(byte) gfx_init_charset::c#3 )
  (byte) gfx_init_charset::c#1 ← (byte) gfx_init_charset::c#2 + rangenext(0,$ff)
  (bool~) gfx_init_charset::$1 ← (byte) gfx_init_charset::c#1 != rangelast(0,$ff)
  if((bool~) gfx_init_charset::$1) goto gfx_init_charset::@1
  to:gfx_init_charset::@4
gfx_init_charset::@4: scope:[gfx_init_charset]  from gfx_init_charset::@3
  *((const nomodify byte*) PROCPORT) ← (number) $37
  to:gfx_init_charset::@return
gfx_init_charset::@return: scope:[gfx_init_charset]  from gfx_init_charset::@4
  return 
  to:@return

(void()) gfx_init_screen0()
gfx_init_screen0: scope:[gfx_init_screen0]  from gfx_init
  (byte*) gfx_init_screen0::ch#0 ← (const nomodify byte*) VIC_SCREEN0
  (byte) gfx_init_screen0::cy#0 ← (byte) 0
  to:gfx_init_screen0::@1
gfx_init_screen0::@1: scope:[gfx_init_screen0]  from gfx_init_screen0 gfx_init_screen0::@3
  (byte*) gfx_init_screen0::ch#3 ← phi( gfx_init_screen0/(byte*) gfx_init_screen0::ch#0 gfx_init_screen0::@3/(byte*) gfx_init_screen0::ch#4 )
  (byte) gfx_init_screen0::cy#4 ← phi( gfx_init_screen0/(byte) gfx_init_screen0::cy#0 gfx_init_screen0::@3/(byte) gfx_init_screen0::cy#1 )
  (byte) gfx_init_screen0::cx#0 ← (byte) 0
  to:gfx_init_screen0::@2
gfx_init_screen0::@2: scope:[gfx_init_screen0]  from gfx_init_screen0::@1 gfx_init_screen0::@2
  (byte*) gfx_init_screen0::ch#2 ← phi( gfx_init_screen0::@1/(byte*) gfx_init_screen0::ch#3 gfx_init_screen0::@2/(byte*) gfx_init_screen0::ch#1 )
  (byte) gfx_init_screen0::cx#2 ← phi( gfx_init_screen0::@1/(byte) gfx_init_screen0::cx#0 gfx_init_screen0::@2/(byte) gfx_init_screen0::cx#1 )
  (byte) gfx_init_screen0::cy#2 ← phi( gfx_init_screen0::@1/(byte) gfx_init_screen0::cy#4 gfx_init_screen0::@2/(byte) gfx_init_screen0::cy#2 )
  (number~) gfx_init_screen0::$0 ← (byte) gfx_init_screen0::cy#2 & (number) $f
  (number~) gfx_init_screen0::$1 ← (number~) gfx_init_screen0::$0 * (number) $10
  (number~) gfx_init_screen0::$2 ← (byte) gfx_init_screen0::cx#2 & (number) $f
  (number~) gfx_init_screen0::$3 ← (number~) gfx_init_screen0::$1 | (number~) gfx_init_screen0::$2
  *((byte*) gfx_init_screen0::ch#2) ← (number~) gfx_init_screen0::$3
  (byte*) gfx_init_screen0::ch#1 ← ++ (byte*) gfx_init_screen0::ch#2
  (byte) gfx_init_screen0::cx#1 ← (byte) gfx_init_screen0::cx#2 + rangenext(0,$27)
  (bool~) gfx_init_screen0::$4 ← (byte) gfx_init_screen0::cx#1 != rangelast(0,$27)
  if((bool~) gfx_init_screen0::$4) goto gfx_init_screen0::@2
  to:gfx_init_screen0::@3
gfx_init_screen0::@3: scope:[gfx_init_screen0]  from gfx_init_screen0::@2
  (byte*) gfx_init_screen0::ch#4 ← phi( gfx_init_screen0::@2/(byte*) gfx_init_screen0::ch#1 )
  (byte) gfx_init_screen0::cy#3 ← phi( gfx_init_screen0::@2/(byte) gfx_init_screen0::cy#2 )
  (byte) gfx_init_screen0::cy#1 ← (byte) gfx_init_screen0::cy#3 + rangenext(0,$18)
  (bool~) gfx_init_screen0::$5 ← (byte) gfx_init_screen0::cy#1 != rangelast(0,$18)
  if((bool~) gfx_init_screen0::$5) goto gfx_init_screen0::@1
  to:gfx_init_screen0::@return
gfx_init_screen0::@return: scope:[gfx_init_screen0]  from gfx_init_screen0::@3
  return 
  to:@return

(void()) gfx_init_screen1()
gfx_init_screen1: scope:[gfx_init_screen1]  from gfx_init::@1
  (byte*) gfx_init_screen1::ch#0 ← (const nomodify byte*) VIC_SCREEN1
  (byte) gfx_init_screen1::cy#0 ← (byte) 0
  to:gfx_init_screen1::@1
gfx_init_screen1::@1: scope:[gfx_init_screen1]  from gfx_init_screen1 gfx_init_screen1::@3
  (byte*) gfx_init_screen1::ch#3 ← phi( gfx_init_screen1/(byte*) gfx_init_screen1::ch#0 gfx_init_screen1::@3/(byte*) gfx_init_screen1::ch#4 )
  (byte) gfx_init_screen1::cy#4 ← phi( gfx_init_screen1/(byte) gfx_init_screen1::cy#0 gfx_init_screen1::@3/(byte) gfx_init_screen1::cy#1 )
  (byte) gfx_init_screen1::cx#0 ← (byte) 0
  to:gfx_init_screen1::@2
gfx_init_screen1::@2: scope:[gfx_init_screen1]  from gfx_init_screen1::@1 gfx_init_screen1::@2
  (byte*) gfx_init_screen1::ch#2 ← phi( gfx_init_screen1::@1/(byte*) gfx_init_screen1::ch#3 gfx_init_screen1::@2/(byte*) gfx_init_screen1::ch#1 )
  (byte) gfx_init_screen1::cy#2 ← phi( gfx_init_screen1::@1/(byte) gfx_init_screen1::cy#4 gfx_init_screen1::@2/(byte) gfx_init_screen1::cy#2 )
  (byte) gfx_init_screen1::cx#2 ← phi( gfx_init_screen1::@1/(byte) gfx_init_screen1::cx#0 gfx_init_screen1::@2/(byte) gfx_init_screen1::cx#1 )
  (byte~) gfx_init_screen1::$0 ← (byte) gfx_init_screen1::cx#2 + (byte) gfx_init_screen1::cy#2
  (number~) gfx_init_screen1::$1 ← (byte~) gfx_init_screen1::$0 & (number) $f
  *((byte*) gfx_init_screen1::ch#2) ← (number~) gfx_init_screen1::$1
  (byte*) gfx_init_screen1::ch#1 ← ++ (byte*) gfx_init_screen1::ch#2
  (byte) gfx_init_screen1::cx#1 ← (byte) gfx_init_screen1::cx#2 + rangenext(0,$27)
  (bool~) gfx_init_screen1::$2 ← (byte) gfx_init_screen1::cx#1 != rangelast(0,$27)
  if((bool~) gfx_init_screen1::$2) goto gfx_init_screen1::@2
  to:gfx_init_screen1::@3
gfx_init_screen1::@3: scope:[gfx_init_screen1]  from gfx_init_screen1::@2
  (byte*) gfx_init_screen1::ch#4 ← phi( gfx_init_screen1::@2/(byte*) gfx_init_screen1::ch#1 )
  (byte) gfx_init_screen1::cy#3 ← phi( gfx_init_screen1::@2/(byte) gfx_init_screen1::cy#2 )
  (byte) gfx_init_screen1::cy#1 ← (byte) gfx_init_screen1::cy#3 + rangenext(0,$18)
  (bool~) gfx_init_screen1::$3 ← (byte) gfx_init_screen1::cy#1 != rangelast(0,$18)
  if((bool~) gfx_init_screen1::$3) goto gfx_init_screen1::@1
  to:gfx_init_screen1::@return
gfx_init_screen1::@return: scope:[gfx_init_screen1]  from gfx_init_screen1::@3
  return 
  to:@return

(void()) gfx_init_screen2()
gfx_init_screen2: scope:[gfx_init_screen2]  from gfx_init::@2
  (byte*) gfx_init_screen2::ch#0 ← (const nomodify byte*) VIC_SCREEN2
  (byte) gfx_init_screen2::cy#0 ← (byte) 0
  to:gfx_init_screen2::@1
gfx_init_screen2::@1: scope:[gfx_init_screen2]  from gfx_init_screen2 gfx_init_screen2::@3
  (byte*) gfx_init_screen2::ch#3 ← phi( gfx_init_screen2/(byte*) gfx_init_screen2::ch#0 gfx_init_screen2::@3/(byte*) gfx_init_screen2::ch#4 )
  (byte) gfx_init_screen2::cy#4 ← phi( gfx_init_screen2/(byte) gfx_init_screen2::cy#0 gfx_init_screen2::@3/(byte) gfx_init_screen2::cy#1 )
  (byte) gfx_init_screen2::cx#0 ← (byte) 0
  to:gfx_init_screen2::@2
gfx_init_screen2::@2: scope:[gfx_init_screen2]  from gfx_init_screen2::@1 gfx_init_screen2::@2
  (byte*) gfx_init_screen2::ch#2 ← phi( gfx_init_screen2::@1/(byte*) gfx_init_screen2::ch#3 gfx_init_screen2::@2/(byte*) gfx_init_screen2::ch#1 )
  (byte) gfx_init_screen2::cy#2 ← phi( gfx_init_screen2::@1/(byte) gfx_init_screen2::cy#4 gfx_init_screen2::@2/(byte) gfx_init_screen2::cy#2 )
  (byte) gfx_init_screen2::cx#2 ← phi( gfx_init_screen2::@1/(byte) gfx_init_screen2::cx#0 gfx_init_screen2::@2/(byte) gfx_init_screen2::cx#1 )
  (byte~) gfx_init_screen2::$0 ← (byte) gfx_init_screen2::cx#2 + (byte) gfx_init_screen2::cy#2
  (number~) gfx_init_screen2::$1 ← (byte~) gfx_init_screen2::$0 & (number) $f
  (byte) gfx_init_screen2::col#0 ← (number~) gfx_init_screen2::$1
  (number~) gfx_init_screen2::$2 ← (number) $f - (byte) gfx_init_screen2::col#0
  (byte) gfx_init_screen2::col2#0 ← (number~) gfx_init_screen2::$2
  (number~) gfx_init_screen2::$3 ← (byte) gfx_init_screen2::col#0 * (number) $10
  (number~) gfx_init_screen2::$4 ← (number~) gfx_init_screen2::$3 | (byte) gfx_init_screen2::col2#0
  *((byte*) gfx_init_screen2::ch#2) ← (number~) gfx_init_screen2::$4
  (byte*) gfx_init_screen2::ch#1 ← ++ (byte*) gfx_init_screen2::ch#2
  (byte) gfx_init_screen2::cx#1 ← (byte) gfx_init_screen2::cx#2 + rangenext(0,$27)
  (bool~) gfx_init_screen2::$5 ← (byte) gfx_init_screen2::cx#1 != rangelast(0,$27)
  if((bool~) gfx_init_screen2::$5) goto gfx_init_screen2::@2
  to:gfx_init_screen2::@3
gfx_init_screen2::@3: scope:[gfx_init_screen2]  from gfx_init_screen2::@2
  (byte*) gfx_init_screen2::ch#4 ← phi( gfx_init_screen2::@2/(byte*) gfx_init_screen2::ch#1 )
  (byte) gfx_init_screen2::cy#3 ← phi( gfx_init_screen2::@2/(byte) gfx_init_screen2::cy#2 )
  (byte) gfx_init_screen2::cy#1 ← (byte) gfx_init_screen2::cy#3 + rangenext(0,$18)
  (bool~) gfx_init_screen2::$6 ← (byte) gfx_init_screen2::cy#1 != rangelast(0,$18)
  if((bool~) gfx_init_screen2::$6) goto gfx_init_screen2::@1
  to:gfx_init_screen2::@return
gfx_init_screen2::@return: scope:[gfx_init_screen2]  from gfx_init_screen2::@3
  return 
  to:@return

(void()) gfx_init_screen3()
gfx_init_screen3: scope:[gfx_init_screen3]  from gfx_init::@3
  (byte*) gfx_init_screen3::ch#0 ← (const nomodify byte*) VIC_SCREEN3
  (byte) gfx_init_screen3::cy#0 ← (byte) 0
  to:gfx_init_screen3::@1
gfx_init_screen3::@1: scope:[gfx_init_screen3]  from gfx_init_screen3 gfx_init_screen3::@3
  (byte*) gfx_init_screen3::ch#3 ← phi( gfx_init_screen3/(byte*) gfx_init_screen3::ch#0 gfx_init_screen3::@3/(byte*) gfx_init_screen3::ch#4 )
  (byte) gfx_init_screen3::cy#4 ← phi( gfx_init_screen3/(byte) gfx_init_screen3::cy#0 gfx_init_screen3::@3/(byte) gfx_init_screen3::cy#1 )
  (byte) gfx_init_screen3::cx#0 ← (byte) 0
  to:gfx_init_screen3::@2
gfx_init_screen3::@2: scope:[gfx_init_screen3]  from gfx_init_screen3::@1 gfx_init_screen3::@2
  (byte*) gfx_init_screen3::ch#2 ← phi( gfx_init_screen3::@1/(byte*) gfx_init_screen3::ch#3 gfx_init_screen3::@2/(byte*) gfx_init_screen3::ch#1 )
  (byte) gfx_init_screen3::cy#2 ← phi( gfx_init_screen3::@1/(byte) gfx_init_screen3::cy#4 gfx_init_screen3::@2/(byte) gfx_init_screen3::cy#2 )
  (byte) gfx_init_screen3::cx#2 ← phi( gfx_init_screen3::@1/(byte) gfx_init_screen3::cx#0 gfx_init_screen3::@2/(byte) gfx_init_screen3::cx#1 )
  (number~) gfx_init_screen3::$0 ← (byte) gfx_init_screen3::cx#2 & (number) 3
  (number~) gfx_init_screen3::$1 ← (number~) gfx_init_screen3::$0 * (number) $10
  (number~) gfx_init_screen3::$2 ← (byte) gfx_init_screen3::cy#2 & (number) 3
  (number~) gfx_init_screen3::$3 ← (number~) gfx_init_screen3::$1 | (number~) gfx_init_screen3::$2
  *((byte*) gfx_init_screen3::ch#2) ← (number~) gfx_init_screen3::$3
  (byte*) gfx_init_screen3::ch#1 ← ++ (byte*) gfx_init_screen3::ch#2
  (byte) gfx_init_screen3::cx#1 ← (byte) gfx_init_screen3::cx#2 + rangenext(0,$27)
  (bool~) gfx_init_screen3::$4 ← (byte) gfx_init_screen3::cx#1 != rangelast(0,$27)
  if((bool~) gfx_init_screen3::$4) goto gfx_init_screen3::@2
  to:gfx_init_screen3::@3
gfx_init_screen3::@3: scope:[gfx_init_screen3]  from gfx_init_screen3::@2
  (byte*) gfx_init_screen3::ch#4 ← phi( gfx_init_screen3::@2/(byte*) gfx_init_screen3::ch#1 )
  (byte) gfx_init_screen3::cy#3 ← phi( gfx_init_screen3::@2/(byte) gfx_init_screen3::cy#2 )
  (byte) gfx_init_screen3::cy#1 ← (byte) gfx_init_screen3::cy#3 + rangenext(0,$18)
  (bool~) gfx_init_screen3::$5 ← (byte) gfx_init_screen3::cy#1 != rangelast(0,$18)
  if((bool~) gfx_init_screen3::$5) goto gfx_init_screen3::@1
  to:gfx_init_screen3::@return
gfx_init_screen3::@return: scope:[gfx_init_screen3]  from gfx_init_screen3::@3
  return 
  to:@return

(void()) gfx_init_screen4()
gfx_init_screen4: scope:[gfx_init_screen4]  from gfx_init::@4
  (byte*) gfx_init_screen4::ch#0 ← (const nomodify byte*) VIC_SCREEN4
  (byte) gfx_init_screen4::cy#0 ← (byte) 0
  to:gfx_init_screen4::@1
gfx_init_screen4::@1: scope:[gfx_init_screen4]  from gfx_init_screen4 gfx_init_screen4::@3
  (byte) gfx_init_screen4::cy#4 ← phi( gfx_init_screen4/(byte) gfx_init_screen4::cy#0 gfx_init_screen4::@3/(byte) gfx_init_screen4::cy#1 )
  (byte*) gfx_init_screen4::ch#3 ← phi( gfx_init_screen4/(byte*) gfx_init_screen4::ch#0 gfx_init_screen4::@3/(byte*) gfx_init_screen4::ch#4 )
  (byte) gfx_init_screen4::cx#0 ← (byte) 0
  to:gfx_init_screen4::@2
gfx_init_screen4::@2: scope:[gfx_init_screen4]  from gfx_init_screen4::@1 gfx_init_screen4::@2
  (byte) gfx_init_screen4::cy#3 ← phi( gfx_init_screen4::@1/(byte) gfx_init_screen4::cy#4 gfx_init_screen4::@2/(byte) gfx_init_screen4::cy#3 )
  (byte) gfx_init_screen4::cx#2 ← phi( gfx_init_screen4::@1/(byte) gfx_init_screen4::cx#0 gfx_init_screen4::@2/(byte) gfx_init_screen4::cx#1 )
  (byte*) gfx_init_screen4::ch#2 ← phi( gfx_init_screen4::@1/(byte*) gfx_init_screen4::ch#3 gfx_init_screen4::@2/(byte*) gfx_init_screen4::ch#1 )
  *((byte*) gfx_init_screen4::ch#2) ← (number) 0
  (byte*) gfx_init_screen4::ch#1 ← ++ (byte*) gfx_init_screen4::ch#2
  (byte) gfx_init_screen4::cx#1 ← (byte) gfx_init_screen4::cx#2 + rangenext(0,$27)
  (bool~) gfx_init_screen4::$0 ← (byte) gfx_init_screen4::cx#1 != rangelast(0,$27)
  if((bool~) gfx_init_screen4::$0) goto gfx_init_screen4::@2
  to:gfx_init_screen4::@3
gfx_init_screen4::@3: scope:[gfx_init_screen4]  from gfx_init_screen4::@2
  (byte*) gfx_init_screen4::ch#4 ← phi( gfx_init_screen4::@2/(byte*) gfx_init_screen4::ch#1 )
  (byte) gfx_init_screen4::cy#2 ← phi( gfx_init_screen4::@2/(byte) gfx_init_screen4::cy#3 )
  (byte) gfx_init_screen4::cy#1 ← (byte) gfx_init_screen4::cy#2 + rangenext(0,$18)
  (bool~) gfx_init_screen4::$1 ← (byte) gfx_init_screen4::cy#1 != rangelast(0,$18)
  if((bool~) gfx_init_screen4::$1) goto gfx_init_screen4::@1
  to:gfx_init_screen4::@return
gfx_init_screen4::@return: scope:[gfx_init_screen4]  from gfx_init_screen4::@3
  return 
  to:@return

(void()) gfx_init_vic_bitmap()
gfx_init_vic_bitmap: scope:[gfx_init_vic_bitmap]  from gfx_init::@6
  (byte*) bitmap_init::bitmap#0 ← (const nomodify byte*) VIC_BITMAP
  call bitmap_init 
  to:gfx_init_vic_bitmap::@3
gfx_init_vic_bitmap::@3: scope:[gfx_init_vic_bitmap]  from gfx_init_vic_bitmap
  call bitmap_clear 
  to:gfx_init_vic_bitmap::@4
gfx_init_vic_bitmap::@4: scope:[gfx_init_vic_bitmap]  from gfx_init_vic_bitmap::@3
  (byte) gfx_init_vic_bitmap::l#0 ← (byte) 0
  to:gfx_init_vic_bitmap::@1
gfx_init_vic_bitmap::@1: scope:[gfx_init_vic_bitmap]  from gfx_init_vic_bitmap::@4 gfx_init_vic_bitmap::@5
  (byte) gfx_init_vic_bitmap::l#2 ← phi( gfx_init_vic_bitmap::@4/(byte) gfx_init_vic_bitmap::l#0 gfx_init_vic_bitmap::@5/(byte) gfx_init_vic_bitmap::l#1 )
  (bool~) gfx_init_vic_bitmap::$2 ← (byte) gfx_init_vic_bitmap::l#2 < (const byte) gfx_init_vic_bitmap::lines_cnt
  if((bool~) gfx_init_vic_bitmap::$2) goto gfx_init_vic_bitmap::@2
  to:gfx_init_vic_bitmap::@return
gfx_init_vic_bitmap::@2: scope:[gfx_init_vic_bitmap]  from gfx_init_vic_bitmap::@1
  (byte) gfx_init_vic_bitmap::l#3 ← phi( gfx_init_vic_bitmap::@1/(byte) gfx_init_vic_bitmap::l#2 )
  (number~) gfx_init_vic_bitmap::$3 ← (byte) gfx_init_vic_bitmap::l#3 + (number) 1
  (number~) gfx_init_vic_bitmap::$4 ← (byte) gfx_init_vic_bitmap::l#3 + (number) 1
  (byte) bitmap_line::x0#0 ← *((const byte*) gfx_init_vic_bitmap::lines_x + (byte) gfx_init_vic_bitmap::l#3)
  (byte) bitmap_line::x1#0 ← *((const byte*) gfx_init_vic_bitmap::lines_x + (number~) gfx_init_vic_bitmap::$3)
  (byte) bitmap_line::y0#0 ← *((const byte*) gfx_init_vic_bitmap::lines_y + (byte) gfx_init_vic_bitmap::l#3)
  (byte) bitmap_line::y1#0 ← *((const byte*) gfx_init_vic_bitmap::lines_y + (number~) gfx_init_vic_bitmap::$4)
  call bitmap_line 
  to:gfx_init_vic_bitmap::@5
gfx_init_vic_bitmap::@5: scope:[gfx_init_vic_bitmap]  from gfx_init_vic_bitmap::@2
  (byte) gfx_init_vic_bitmap::l#4 ← phi( gfx_init_vic_bitmap::@2/(byte) gfx_init_vic_bitmap::l#3 )
  (byte) gfx_init_vic_bitmap::l#1 ← ++ (byte) gfx_init_vic_bitmap::l#4
  to:gfx_init_vic_bitmap::@1
gfx_init_vic_bitmap::@return: scope:[gfx_init_vic_bitmap]  from gfx_init_vic_bitmap::@1
  return 
  to:@return

(void()) gfx_init_plane_8bppchunky()
gfx_init_plane_8bppchunky: scope:[gfx_init_plane_8bppchunky]  from gfx_init::@7
  (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#0 ← (byte)(const nomodify dword) PLANE_8BPP_CHUNKY/(number) $4000
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#0 ← (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#0
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_8bppchunky::@7
gfx_init_plane_8bppchunky::@7: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky
  (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#3 ← phi( gfx_init_plane_8bppchunky/(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#0 )
  (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#1 ← ++ (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#3
  (byte*) gfx_init_plane_8bppchunky::gfxb#0 ← (byte*)(number) $4000
  (byte) gfx_init_plane_8bppchunky::y#0 ← (byte) 0
  to:gfx_init_plane_8bppchunky::@1
gfx_init_plane_8bppchunky::@1: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@5 gfx_init_plane_8bppchunky::@7
  (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#7 ← phi( gfx_init_plane_8bppchunky::@5/(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#9 gfx_init_plane_8bppchunky::@7/(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#1 )
  (byte) gfx_init_plane_8bppchunky::y#6 ← phi( gfx_init_plane_8bppchunky::@5/(byte) gfx_init_plane_8bppchunky::y#1 gfx_init_plane_8bppchunky::@7/(byte) gfx_init_plane_8bppchunky::y#0 )
  (byte*) gfx_init_plane_8bppchunky::gfxb#5 ← phi( gfx_init_plane_8bppchunky::@5/(byte*) gfx_init_plane_8bppchunky::gfxb#6 gfx_init_plane_8bppchunky::@7/(byte*) gfx_init_plane_8bppchunky::gfxb#0 )
  (word) gfx_init_plane_8bppchunky::x#0 ← (word) 0
  to:gfx_init_plane_8bppchunky::@2
gfx_init_plane_8bppchunky::@2: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@1 gfx_init_plane_8bppchunky::@3
  (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#6 ← phi( gfx_init_plane_8bppchunky::@1/(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#7 gfx_init_plane_8bppchunky::@3/(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 )
  (byte) gfx_init_plane_8bppchunky::y#4 ← phi( gfx_init_plane_8bppchunky::@1/(byte) gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::@3/(byte) gfx_init_plane_8bppchunky::y#2 )
  (word) gfx_init_plane_8bppchunky::x#3 ← phi( gfx_init_plane_8bppchunky::@1/(word) gfx_init_plane_8bppchunky::x#0 gfx_init_plane_8bppchunky::@3/(word) gfx_init_plane_8bppchunky::x#1 )
  (byte*) gfx_init_plane_8bppchunky::gfxb#3 ← phi( gfx_init_plane_8bppchunky::@1/(byte*) gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::@3/(byte*) gfx_init_plane_8bppchunky::gfxb#1 )
  (bool~) gfx_init_plane_8bppchunky::$2 ← (byte*) gfx_init_plane_8bppchunky::gfxb#3 == (number) $8000
  (bool~) gfx_init_plane_8bppchunky::$3 ← ! (bool~) gfx_init_plane_8bppchunky::$2
  if((bool~) gfx_init_plane_8bppchunky::$3) goto gfx_init_plane_8bppchunky::@3
  to:gfx_init_plane_8bppchunky::@4
gfx_init_plane_8bppchunky::@3: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@2 gfx_init_plane_8bppchunky::@8
  (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 ← phi( gfx_init_plane_8bppchunky::@2/(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#6 gfx_init_plane_8bppchunky::@8/(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#2 )
  (byte*) gfx_init_plane_8bppchunky::gfxb#4 ← phi( gfx_init_plane_8bppchunky::@2/(byte*) gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::@8/(byte*) gfx_init_plane_8bppchunky::gfxb#2 )
  (byte) gfx_init_plane_8bppchunky::y#2 ← phi( gfx_init_plane_8bppchunky::@2/(byte) gfx_init_plane_8bppchunky::y#4 gfx_init_plane_8bppchunky::@8/(byte) gfx_init_plane_8bppchunky::y#5 )
  (word) gfx_init_plane_8bppchunky::x#2 ← phi( gfx_init_plane_8bppchunky::@2/(word) gfx_init_plane_8bppchunky::x#3 gfx_init_plane_8bppchunky::@8/(word) gfx_init_plane_8bppchunky::x#4 )
  (word~) gfx_init_plane_8bppchunky::$5 ← (word) gfx_init_plane_8bppchunky::x#2 + (byte) gfx_init_plane_8bppchunky::y#2
  (byte) gfx_init_plane_8bppchunky::c#0 ← (byte)(word~) gfx_init_plane_8bppchunky::$5
  *((byte*) gfx_init_plane_8bppchunky::gfxb#4) ← (byte) gfx_init_plane_8bppchunky::c#0
  (byte*) gfx_init_plane_8bppchunky::gfxb#1 ← ++ (byte*) gfx_init_plane_8bppchunky::gfxb#4
  (word) gfx_init_plane_8bppchunky::x#1 ← (word) gfx_init_plane_8bppchunky::x#2 + rangenext(0,$13f)
  (bool~) gfx_init_plane_8bppchunky::$6 ← (word) gfx_init_plane_8bppchunky::x#1 != rangelast(0,$13f)
  if((bool~) gfx_init_plane_8bppchunky::$6) goto gfx_init_plane_8bppchunky::@2
  to:gfx_init_plane_8bppchunky::@5
gfx_init_plane_8bppchunky::@4: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@2
  (byte) gfx_init_plane_8bppchunky::y#7 ← phi( gfx_init_plane_8bppchunky::@2/(byte) gfx_init_plane_8bppchunky::y#4 )
  (word) gfx_init_plane_8bppchunky::x#5 ← phi( gfx_init_plane_8bppchunky::@2/(word) gfx_init_plane_8bppchunky::x#3 )
  (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 ← phi( gfx_init_plane_8bppchunky::@2/(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#6 )
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#1 ← (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_8bppchunky::@8
gfx_init_plane_8bppchunky::@8: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@4
  (byte) gfx_init_plane_8bppchunky::y#5 ← phi( gfx_init_plane_8bppchunky::@4/(byte) gfx_init_plane_8bppchunky::y#7 )
  (word) gfx_init_plane_8bppchunky::x#4 ← phi( gfx_init_plane_8bppchunky::@4/(word) gfx_init_plane_8bppchunky::x#5 )
  (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#5 ← phi( gfx_init_plane_8bppchunky::@4/(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 )
  (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#2 ← ++ (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#5
  (byte*) gfx_init_plane_8bppchunky::gfxb#2 ← ((byte*)) (number) $4000
  to:gfx_init_plane_8bppchunky::@3
gfx_init_plane_8bppchunky::@5: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@3
  (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#9 ← phi( gfx_init_plane_8bppchunky::@3/(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 )
  (byte*) gfx_init_plane_8bppchunky::gfxb#6 ← phi( gfx_init_plane_8bppchunky::@3/(byte*) gfx_init_plane_8bppchunky::gfxb#1 )
  (byte) gfx_init_plane_8bppchunky::y#3 ← phi( gfx_init_plane_8bppchunky::@3/(byte) gfx_init_plane_8bppchunky::y#2 )
  (byte) gfx_init_plane_8bppchunky::y#1 ← (byte) gfx_init_plane_8bppchunky::y#3 + rangenext(0,$c7)
  (bool~) gfx_init_plane_8bppchunky::$7 ← (byte) gfx_init_plane_8bppchunky::y#1 != rangelast(0,$c7)
  if((bool~) gfx_init_plane_8bppchunky::$7) goto gfx_init_plane_8bppchunky::@1
  to:gfx_init_plane_8bppchunky::@6
gfx_init_plane_8bppchunky::@6: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@5
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#2 ← (byte)(number) $4000/(number) $4000
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_8bppchunky::@9
gfx_init_plane_8bppchunky::@9: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@6
  to:gfx_init_plane_8bppchunky::@return
gfx_init_plane_8bppchunky::@return: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@9
  return 
  to:@return

(void()) gfx_init_plane_horisontal()
gfx_init_plane_horisontal: scope:[gfx_init_plane_horisontal]  from gfx_init::@9
  (byte) gfx_init_plane_horisontal::gfxbCpuBank#0 ← (byte)(const nomodify dword) PLANE_HORISONTAL/(number) $4000
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#3 ← (byte) gfx_init_plane_horisontal::gfxbCpuBank#0
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_horisontal::@8
gfx_init_plane_horisontal::@8: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal
  (byte) gfx_init_plane_horisontal::gfxbCpuBank#2 ← phi( gfx_init_plane_horisontal/(byte) gfx_init_plane_horisontal::gfxbCpuBank#0 )
  (byte) gfx_init_plane_horisontal::gfxbCpuBank#1 ← ++ (byte) gfx_init_plane_horisontal::gfxbCpuBank#2
  (byte*) gfx_init_plane_horisontal::gfxa#0 ← (byte*)(number) $4000+(const nomodify dword) PLANE_HORISONTAL&(number) $3fff
  (byte) gfx_init_plane_horisontal::ay#0 ← (byte) 0
  to:gfx_init_plane_horisontal::@1
gfx_init_plane_horisontal::@1: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@6 gfx_init_plane_horisontal::@8
  (byte*) gfx_init_plane_horisontal::gfxa#6 ← phi( gfx_init_plane_horisontal::@6/(byte*) gfx_init_plane_horisontal::gfxa#8 gfx_init_plane_horisontal::@8/(byte*) gfx_init_plane_horisontal::gfxa#0 )
  (byte) gfx_init_plane_horisontal::ay#4 ← phi( gfx_init_plane_horisontal::@6/(byte) gfx_init_plane_horisontal::ay#1 gfx_init_plane_horisontal::@8/(byte) gfx_init_plane_horisontal::ay#0 )
  (byte) gfx_init_plane_horisontal::ax#0 ← (byte) 0
  to:gfx_init_plane_horisontal::@2
gfx_init_plane_horisontal::@2: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@1 gfx_init_plane_horisontal::@4
  (byte) gfx_init_plane_horisontal::ax#5 ← phi( gfx_init_plane_horisontal::@1/(byte) gfx_init_plane_horisontal::ax#0 gfx_init_plane_horisontal::@4/(byte) gfx_init_plane_horisontal::ax#1 )
  (byte*) gfx_init_plane_horisontal::gfxa#5 ← phi( gfx_init_plane_horisontal::@1/(byte*) gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::@4/(byte*) gfx_init_plane_horisontal::gfxa#7 )
  (byte) gfx_init_plane_horisontal::ay#2 ← phi( gfx_init_plane_horisontal::@1/(byte) gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::@4/(byte) gfx_init_plane_horisontal::ay#5 )
  (number~) gfx_init_plane_horisontal::$2 ← (byte) gfx_init_plane_horisontal::ay#2 & (number) 4
  (bool~) gfx_init_plane_horisontal::$3 ← (number~) gfx_init_plane_horisontal::$2 == (number) 0
  if((bool~) gfx_init_plane_horisontal::$3) goto gfx_init_plane_horisontal::@3
  to:gfx_init_plane_horisontal::@5
gfx_init_plane_horisontal::@3: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@2
  (byte) gfx_init_plane_horisontal::ay#6 ← phi( gfx_init_plane_horisontal::@2/(byte) gfx_init_plane_horisontal::ay#2 )
  (byte) gfx_init_plane_horisontal::ax#3 ← phi( gfx_init_plane_horisontal::@2/(byte) gfx_init_plane_horisontal::ax#5 )
  (byte*) gfx_init_plane_horisontal::gfxa#3 ← phi( gfx_init_plane_horisontal::@2/(byte*) gfx_init_plane_horisontal::gfxa#5 )
  *((byte*) gfx_init_plane_horisontal::gfxa#3) ← (number) 0
  (byte*) gfx_init_plane_horisontal::gfxa#1 ← ++ (byte*) gfx_init_plane_horisontal::gfxa#3
  to:gfx_init_plane_horisontal::@4
gfx_init_plane_horisontal::@5: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@2
  (byte) gfx_init_plane_horisontal::ay#7 ← phi( gfx_init_plane_horisontal::@2/(byte) gfx_init_plane_horisontal::ay#2 )
  (byte) gfx_init_plane_horisontal::ax#4 ← phi( gfx_init_plane_horisontal::@2/(byte) gfx_init_plane_horisontal::ax#5 )
  (byte*) gfx_init_plane_horisontal::gfxa#4 ← phi( gfx_init_plane_horisontal::@2/(byte*) gfx_init_plane_horisontal::gfxa#5 )
  *((byte*) gfx_init_plane_horisontal::gfxa#4) ← (number) $ff
  (byte*) gfx_init_plane_horisontal::gfxa#2 ← ++ (byte*) gfx_init_plane_horisontal::gfxa#4
  to:gfx_init_plane_horisontal::@4
gfx_init_plane_horisontal::@4: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@3 gfx_init_plane_horisontal::@5
  (byte*) gfx_init_plane_horisontal::gfxa#7 ← phi( gfx_init_plane_horisontal::@3/(byte*) gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::@5/(byte*) gfx_init_plane_horisontal::gfxa#2 )
  (byte) gfx_init_plane_horisontal::ay#5 ← phi( gfx_init_plane_horisontal::@3/(byte) gfx_init_plane_horisontal::ay#6 gfx_init_plane_horisontal::@5/(byte) gfx_init_plane_horisontal::ay#7 )
  (byte) gfx_init_plane_horisontal::ax#2 ← phi( gfx_init_plane_horisontal::@3/(byte) gfx_init_plane_horisontal::ax#3 gfx_init_plane_horisontal::@5/(byte) gfx_init_plane_horisontal::ax#4 )
  (byte) gfx_init_plane_horisontal::ax#1 ← (byte) gfx_init_plane_horisontal::ax#2 + rangenext(0,$27)
  (bool~) gfx_init_plane_horisontal::$4 ← (byte) gfx_init_plane_horisontal::ax#1 != rangelast(0,$27)
  if((bool~) gfx_init_plane_horisontal::$4) goto gfx_init_plane_horisontal::@2
  to:gfx_init_plane_horisontal::@6
gfx_init_plane_horisontal::@6: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@4
  (byte*) gfx_init_plane_horisontal::gfxa#8 ← phi( gfx_init_plane_horisontal::@4/(byte*) gfx_init_plane_horisontal::gfxa#7 )
  (byte) gfx_init_plane_horisontal::ay#3 ← phi( gfx_init_plane_horisontal::@4/(byte) gfx_init_plane_horisontal::ay#5 )
  (byte) gfx_init_plane_horisontal::ay#1 ← (byte) gfx_init_plane_horisontal::ay#3 + rangenext(0,$c7)
  (bool~) gfx_init_plane_horisontal::$5 ← (byte) gfx_init_plane_horisontal::ay#1 != rangelast(0,$c7)
  if((bool~) gfx_init_plane_horisontal::$5) goto gfx_init_plane_horisontal::@1
  to:gfx_init_plane_horisontal::@7
gfx_init_plane_horisontal::@7: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@6
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#4 ← (byte)(number) $4000/(number) $4000
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_horisontal::@9
gfx_init_plane_horisontal::@9: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@7
  to:gfx_init_plane_horisontal::@return
gfx_init_plane_horisontal::@return: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@9
  return 
  to:@return

(void()) gfx_init_plane_horisontal2()
gfx_init_plane_horisontal2: scope:[gfx_init_plane_horisontal2]  from gfx_init::@11
  (byte) gfx_init_plane_horisontal2::gfxbCpuBank#0 ← (byte)(const nomodify dword) PLANE_HORISONTAL2/(number) $4000
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#5 ← (byte) gfx_init_plane_horisontal2::gfxbCpuBank#0
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_horisontal2::@5
gfx_init_plane_horisontal2::@5: scope:[gfx_init_plane_horisontal2]  from gfx_init_plane_horisontal2
  (byte) gfx_init_plane_horisontal2::gfxbCpuBank#2 ← phi( gfx_init_plane_horisontal2/(byte) gfx_init_plane_horisontal2::gfxbCpuBank#0 )
  (byte) gfx_init_plane_horisontal2::gfxbCpuBank#1 ← ++ (byte) gfx_init_plane_horisontal2::gfxbCpuBank#2
  (byte*) gfx_init_plane_horisontal2::gfxa#0 ← (byte*)(number) $4000+(const nomodify dword) PLANE_HORISONTAL2&(number) $3fff
  (byte) gfx_init_plane_horisontal2::ay#0 ← (byte) 0
  to:gfx_init_plane_horisontal2::@1
gfx_init_plane_horisontal2::@1: scope:[gfx_init_plane_horisontal2]  from gfx_init_plane_horisontal2::@3 gfx_init_plane_horisontal2::@5
  (byte*) gfx_init_plane_horisontal2::gfxa#3 ← phi( gfx_init_plane_horisontal2::@3/(byte*) gfx_init_plane_horisontal2::gfxa#4 gfx_init_plane_horisontal2::@5/(byte*) gfx_init_plane_horisontal2::gfxa#0 )
  (byte) gfx_init_plane_horisontal2::ay#4 ← phi( gfx_init_plane_horisontal2::@3/(byte) gfx_init_plane_horisontal2::ay#1 gfx_init_plane_horisontal2::@5/(byte) gfx_init_plane_horisontal2::ay#0 )
  (byte) gfx_init_plane_horisontal2::ax#0 ← (byte) 0
  to:gfx_init_plane_horisontal2::@2
gfx_init_plane_horisontal2::@2: scope:[gfx_init_plane_horisontal2]  from gfx_init_plane_horisontal2::@1 gfx_init_plane_horisontal2::@2
  (byte) gfx_init_plane_horisontal2::ax#2 ← phi( gfx_init_plane_horisontal2::@1/(byte) gfx_init_plane_horisontal2::ax#0 gfx_init_plane_horisontal2::@2/(byte) gfx_init_plane_horisontal2::ax#1 )
  (byte*) gfx_init_plane_horisontal2::gfxa#2 ← phi( gfx_init_plane_horisontal2::@1/(byte*) gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::@2/(byte*) gfx_init_plane_horisontal2::gfxa#1 )
  (byte) gfx_init_plane_horisontal2::ay#2 ← phi( gfx_init_plane_horisontal2::@1/(byte) gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::@2/(byte) gfx_init_plane_horisontal2::ay#2 )
  (number~) gfx_init_plane_horisontal2::$2 ← (byte) gfx_init_plane_horisontal2::ay#2 / (number) 2
  (number~) gfx_init_plane_horisontal2::$3 ← (number~) gfx_init_plane_horisontal2::$2 & (number) 3
  (byte) gfx_init_plane_horisontal2::row#0 ← (number~) gfx_init_plane_horisontal2::$3
  *((byte*) gfx_init_plane_horisontal2::gfxa#2) ← *((const byte*) gfx_init_plane_horisontal2::row_bitmask + (byte) gfx_init_plane_horisontal2::row#0)
  (byte*) gfx_init_plane_horisontal2::gfxa#1 ← ++ (byte*) gfx_init_plane_horisontal2::gfxa#2
  (byte) gfx_init_plane_horisontal2::ax#1 ← (byte) gfx_init_plane_horisontal2::ax#2 + rangenext(0,$27)
  (bool~) gfx_init_plane_horisontal2::$4 ← (byte) gfx_init_plane_horisontal2::ax#1 != rangelast(0,$27)
  if((bool~) gfx_init_plane_horisontal2::$4) goto gfx_init_plane_horisontal2::@2
  to:gfx_init_plane_horisontal2::@3
gfx_init_plane_horisontal2::@3: scope:[gfx_init_plane_horisontal2]  from gfx_init_plane_horisontal2::@2
  (byte*) gfx_init_plane_horisontal2::gfxa#4 ← phi( gfx_init_plane_horisontal2::@2/(byte*) gfx_init_plane_horisontal2::gfxa#1 )
  (byte) gfx_init_plane_horisontal2::ay#3 ← phi( gfx_init_plane_horisontal2::@2/(byte) gfx_init_plane_horisontal2::ay#2 )
  (byte) gfx_init_plane_horisontal2::ay#1 ← (byte) gfx_init_plane_horisontal2::ay#3 + rangenext(0,$c7)
  (bool~) gfx_init_plane_horisontal2::$5 ← (byte) gfx_init_plane_horisontal2::ay#1 != rangelast(0,$c7)
  if((bool~) gfx_init_plane_horisontal2::$5) goto gfx_init_plane_horisontal2::@1
  to:gfx_init_plane_horisontal2::@4
gfx_init_plane_horisontal2::@4: scope:[gfx_init_plane_horisontal2]  from gfx_init_plane_horisontal2::@3
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#6 ← (byte)(number) $4000/(number) $4000
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_horisontal2::@6
gfx_init_plane_horisontal2::@6: scope:[gfx_init_plane_horisontal2]  from gfx_init_plane_horisontal2::@4
  to:gfx_init_plane_horisontal2::@return
gfx_init_plane_horisontal2::@return: scope:[gfx_init_plane_horisontal2]  from gfx_init_plane_horisontal2::@6
  return 
  to:@return

(void()) gfx_init_plane_vertical()
gfx_init_plane_vertical: scope:[gfx_init_plane_vertical]  from gfx_init::@10
  (byte) gfx_init_plane_vertical::gfxbCpuBank#0 ← (byte)(const nomodify dword) PLANE_VERTICAL/(number) $4000
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#7 ← (byte) gfx_init_plane_vertical::gfxbCpuBank#0
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_vertical::@5
gfx_init_plane_vertical::@5: scope:[gfx_init_plane_vertical]  from gfx_init_plane_vertical
  (byte) gfx_init_plane_vertical::gfxbCpuBank#2 ← phi( gfx_init_plane_vertical/(byte) gfx_init_plane_vertical::gfxbCpuBank#0 )
  (byte) gfx_init_plane_vertical::gfxbCpuBank#1 ← ++ (byte) gfx_init_plane_vertical::gfxbCpuBank#2
  (byte*) gfx_init_plane_vertical::gfxb#0 ← (byte*)(number) $4000+(const nomodify dword) PLANE_VERTICAL&(number) $3fff
  (byte) gfx_init_plane_vertical::by#0 ← (byte) 0
  to:gfx_init_plane_vertical::@1
gfx_init_plane_vertical::@1: scope:[gfx_init_plane_vertical]  from gfx_init_plane_vertical::@3 gfx_init_plane_vertical::@5
  (byte) gfx_init_plane_vertical::by#4 ← phi( gfx_init_plane_vertical::@3/(byte) gfx_init_plane_vertical::by#1 gfx_init_plane_vertical::@5/(byte) gfx_init_plane_vertical::by#0 )
  (byte*) gfx_init_plane_vertical::gfxb#3 ← phi( gfx_init_plane_vertical::@3/(byte*) gfx_init_plane_vertical::gfxb#4 gfx_init_plane_vertical::@5/(byte*) gfx_init_plane_vertical::gfxb#0 )
  (byte) gfx_init_plane_vertical::bx#0 ← (byte) 0
  to:gfx_init_plane_vertical::@2
gfx_init_plane_vertical::@2: scope:[gfx_init_plane_vertical]  from gfx_init_plane_vertical::@1 gfx_init_plane_vertical::@2
  (byte) gfx_init_plane_vertical::by#3 ← phi( gfx_init_plane_vertical::@1/(byte) gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::@2/(byte) gfx_init_plane_vertical::by#3 )
  (byte) gfx_init_plane_vertical::bx#2 ← phi( gfx_init_plane_vertical::@1/(byte) gfx_init_plane_vertical::bx#0 gfx_init_plane_vertical::@2/(byte) gfx_init_plane_vertical::bx#1 )
  (byte*) gfx_init_plane_vertical::gfxb#2 ← phi( gfx_init_plane_vertical::@1/(byte*) gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::@2/(byte*) gfx_init_plane_vertical::gfxb#1 )
  *((byte*) gfx_init_plane_vertical::gfxb#2) ← (number) $f
  (byte*) gfx_init_plane_vertical::gfxb#1 ← ++ (byte*) gfx_init_plane_vertical::gfxb#2
  (byte) gfx_init_plane_vertical::bx#1 ← (byte) gfx_init_plane_vertical::bx#2 + rangenext(0,$27)
  (bool~) gfx_init_plane_vertical::$2 ← (byte) gfx_init_plane_vertical::bx#1 != rangelast(0,$27)
  if((bool~) gfx_init_plane_vertical::$2) goto gfx_init_plane_vertical::@2
  to:gfx_init_plane_vertical::@3
gfx_init_plane_vertical::@3: scope:[gfx_init_plane_vertical]  from gfx_init_plane_vertical::@2
  (byte*) gfx_init_plane_vertical::gfxb#4 ← phi( gfx_init_plane_vertical::@2/(byte*) gfx_init_plane_vertical::gfxb#1 )
  (byte) gfx_init_plane_vertical::by#2 ← phi( gfx_init_plane_vertical::@2/(byte) gfx_init_plane_vertical::by#3 )
  (byte) gfx_init_plane_vertical::by#1 ← (byte) gfx_init_plane_vertical::by#2 + rangenext(0,$c7)
  (bool~) gfx_init_plane_vertical::$3 ← (byte) gfx_init_plane_vertical::by#1 != rangelast(0,$c7)
  if((bool~) gfx_init_plane_vertical::$3) goto gfx_init_plane_vertical::@1
  to:gfx_init_plane_vertical::@4
gfx_init_plane_vertical::@4: scope:[gfx_init_plane_vertical]  from gfx_init_plane_vertical::@3
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#8 ← (byte)(number) $4000/(number) $4000
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_vertical::@6
gfx_init_plane_vertical::@6: scope:[gfx_init_plane_vertical]  from gfx_init_plane_vertical::@4
  to:gfx_init_plane_vertical::@return
gfx_init_plane_vertical::@return: scope:[gfx_init_plane_vertical]  from gfx_init_plane_vertical::@6
  return 
  to:@return

(void()) gfx_init_plane_charset8()
gfx_init_plane_charset8: scope:[gfx_init_plane_charset8]  from gfx_init::@8
  (byte) gfx_init_plane_charset8::gfxbCpuBank#0 ← (byte)(const nomodify dword) PLANE_CHARSET8/(number) $4000
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#9 ← (byte) gfx_init_plane_charset8::gfxbCpuBank#0
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_charset8::@9
gfx_init_plane_charset8::@9: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8
  (byte) gfx_init_plane_charset8::gfxbCpuBank#2 ← phi( gfx_init_plane_charset8/(byte) gfx_init_plane_charset8::gfxbCpuBank#0 )
  (byte) gfx_init_plane_charset8::gfxbCpuBank#1 ← ++ (byte) gfx_init_plane_charset8::gfxbCpuBank#2
  (byte*) gfx_init_plane_charset8::gfxa#0 ← (byte*)(number) $4000+(const nomodify dword) PLANE_CHARSET8&(number) $3fff
  (byte*) gfx_init_plane_charset8::chargen#0 ← (const nomodify byte*) CHARGEN
  *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_RAM_CHARROM
  (byte) gfx_init_plane_charset8::col#0 ← (byte) 0
  (byte) gfx_init_plane_charset8::ch#0 ← (byte) 0
  to:gfx_init_plane_charset8::@1
gfx_init_plane_charset8::@1: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@7 gfx_init_plane_charset8::@9
  (byte) gfx_init_plane_charset8::ch#8 ← phi( gfx_init_plane_charset8::@7/(byte) gfx_init_plane_charset8::ch#1 gfx_init_plane_charset8::@9/(byte) gfx_init_plane_charset8::ch#0 )
  (byte) gfx_init_plane_charset8::col#6 ← phi( gfx_init_plane_charset8::@7/(byte) gfx_init_plane_charset8::col#8 gfx_init_plane_charset8::@9/(byte) gfx_init_plane_charset8::col#0 )
  (byte*) gfx_init_plane_charset8::gfxa#6 ← phi( gfx_init_plane_charset8::@7/(byte*) gfx_init_plane_charset8::gfxa#8 gfx_init_plane_charset8::@9/(byte*) gfx_init_plane_charset8::gfxa#0 )
  (byte*) gfx_init_plane_charset8::chargen#3 ← phi( gfx_init_plane_charset8::@7/(byte*) gfx_init_plane_charset8::chargen#5 gfx_init_plane_charset8::@9/(byte*) gfx_init_plane_charset8::chargen#0 )
  (byte) gfx_init_plane_charset8::cr#0 ← (byte) 0
  to:gfx_init_plane_charset8::@2
gfx_init_plane_charset8::@2: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@1 gfx_init_plane_charset8::@6
  (byte) gfx_init_plane_charset8::ch#7 ← phi( gfx_init_plane_charset8::@1/(byte) gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::@6/(byte) gfx_init_plane_charset8::ch#3 )
  (byte) gfx_init_plane_charset8::cr#6 ← phi( gfx_init_plane_charset8::@1/(byte) gfx_init_plane_charset8::cr#0 gfx_init_plane_charset8::@6/(byte) gfx_init_plane_charset8::cr#1 )
  (byte) gfx_init_plane_charset8::col#5 ← phi( gfx_init_plane_charset8::@1/(byte) gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::@6/(byte) gfx_init_plane_charset8::col#7 )
  (byte*) gfx_init_plane_charset8::gfxa#5 ← phi( gfx_init_plane_charset8::@1/(byte*) gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::@6/(byte*) gfx_init_plane_charset8::gfxa#7 )
  (byte*) gfx_init_plane_charset8::chargen#2 ← phi( gfx_init_plane_charset8::@1/(byte*) gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::@6/(byte*) gfx_init_plane_charset8::chargen#4 )
  (byte) gfx_init_plane_charset8::bits#0 ← *((byte*) gfx_init_plane_charset8::chargen#2)
  (byte*) gfx_init_plane_charset8::chargen#1 ← ++ (byte*) gfx_init_plane_charset8::chargen#2
  (byte) gfx_init_plane_charset8::cp#0 ← (byte) 0
  to:gfx_init_plane_charset8::@3
gfx_init_plane_charset8::@3: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@2 gfx_init_plane_charset8::@4
  (byte) gfx_init_plane_charset8::ch#5 ← phi( gfx_init_plane_charset8::@2/(byte) gfx_init_plane_charset8::ch#7 gfx_init_plane_charset8::@4/(byte) gfx_init_plane_charset8::ch#4 )
  (byte*) gfx_init_plane_charset8::chargen#7 ← phi( gfx_init_plane_charset8::@2/(byte*) gfx_init_plane_charset8::chargen#1 gfx_init_plane_charset8::@4/(byte*) gfx_init_plane_charset8::chargen#6 )
  (byte) gfx_init_plane_charset8::cr#4 ← phi( gfx_init_plane_charset8::@2/(byte) gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::@4/(byte) gfx_init_plane_charset8::cr#3 )
  (byte) gfx_init_plane_charset8::cp#3 ← phi( gfx_init_plane_charset8::@2/(byte) gfx_init_plane_charset8::cp#0 gfx_init_plane_charset8::@4/(byte) gfx_init_plane_charset8::cp#1 )
  (byte) gfx_init_plane_charset8::col#4 ← phi( gfx_init_plane_charset8::@2/(byte) gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::@4/(byte) gfx_init_plane_charset8::col#1 )
  (byte*) gfx_init_plane_charset8::gfxa#3 ← phi( gfx_init_plane_charset8::@2/(byte*) gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::@4/(byte*) gfx_init_plane_charset8::gfxa#1 )
  (byte) gfx_init_plane_charset8::bits#2 ← phi( gfx_init_plane_charset8::@2/(byte) gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::@4/(byte) gfx_init_plane_charset8::bits#1 )
  (byte) gfx_init_plane_charset8::c#0 ← (byte) 0
  (number~) gfx_init_plane_charset8::$2 ← (byte) gfx_init_plane_charset8::bits#2 & (number) $80
  (bool~) gfx_init_plane_charset8::$3 ← (number~) gfx_init_plane_charset8::$2 != (number) 0
  (bool~) gfx_init_plane_charset8::$4 ← ! (bool~) gfx_init_plane_charset8::$3
  if((bool~) gfx_init_plane_charset8::$4) goto gfx_init_plane_charset8::@4
  to:gfx_init_plane_charset8::@5
gfx_init_plane_charset8::@4: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@3 gfx_init_plane_charset8::@5
  (byte) gfx_init_plane_charset8::ch#4 ← phi( gfx_init_plane_charset8::@3/(byte) gfx_init_plane_charset8::ch#5 gfx_init_plane_charset8::@5/(byte) gfx_init_plane_charset8::ch#6 )
  (byte*) gfx_init_plane_charset8::chargen#6 ← phi( gfx_init_plane_charset8::@3/(byte*) gfx_init_plane_charset8::chargen#7 gfx_init_plane_charset8::@5/(byte*) gfx_init_plane_charset8::chargen#8 )
  (byte) gfx_init_plane_charset8::cr#3 ← phi( gfx_init_plane_charset8::@3/(byte) gfx_init_plane_charset8::cr#4 gfx_init_plane_charset8::@5/(byte) gfx_init_plane_charset8::cr#5 )
  (byte) gfx_init_plane_charset8::cp#2 ← phi( gfx_init_plane_charset8::@3/(byte) gfx_init_plane_charset8::cp#3 gfx_init_plane_charset8::@5/(byte) gfx_init_plane_charset8::cp#4 )
  (byte) gfx_init_plane_charset8::col#2 ← phi( gfx_init_plane_charset8::@3/(byte) gfx_init_plane_charset8::col#4 gfx_init_plane_charset8::@5/(byte) gfx_init_plane_charset8::col#3 )
  (byte) gfx_init_plane_charset8::bits#3 ← phi( gfx_init_plane_charset8::@3/(byte) gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::@5/(byte) gfx_init_plane_charset8::bits#4 )
  (byte*) gfx_init_plane_charset8::gfxa#2 ← phi( gfx_init_plane_charset8::@3/(byte*) gfx_init_plane_charset8::gfxa#3 gfx_init_plane_charset8::@5/(byte*) gfx_init_plane_charset8::gfxa#4 )
  (byte) gfx_init_plane_charset8::c#2 ← phi( gfx_init_plane_charset8::@3/(byte) gfx_init_plane_charset8::c#0 gfx_init_plane_charset8::@5/(byte) gfx_init_plane_charset8::c#1 )
  *((byte*) gfx_init_plane_charset8::gfxa#2) ← (byte) gfx_init_plane_charset8::c#2
  (byte*) gfx_init_plane_charset8::gfxa#1 ← ++ (byte*) gfx_init_plane_charset8::gfxa#2
  (number~) gfx_init_plane_charset8::$5 ← (byte) gfx_init_plane_charset8::bits#3 * (number) 2
  (byte) gfx_init_plane_charset8::bits#1 ← (number~) gfx_init_plane_charset8::$5
  (byte) gfx_init_plane_charset8::col#1 ← ++ (byte) gfx_init_plane_charset8::col#2
  (byte) gfx_init_plane_charset8::cp#1 ← (byte) gfx_init_plane_charset8::cp#2 + rangenext(0,7)
  (bool~) gfx_init_plane_charset8::$6 ← (byte) gfx_init_plane_charset8::cp#1 != rangelast(0,7)
  if((bool~) gfx_init_plane_charset8::$6) goto gfx_init_plane_charset8::@3
  to:gfx_init_plane_charset8::@6
gfx_init_plane_charset8::@5: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@3
  (byte) gfx_init_plane_charset8::ch#6 ← phi( gfx_init_plane_charset8::@3/(byte) gfx_init_plane_charset8::ch#5 )
  (byte*) gfx_init_plane_charset8::chargen#8 ← phi( gfx_init_plane_charset8::@3/(byte*) gfx_init_plane_charset8::chargen#7 )
  (byte) gfx_init_plane_charset8::cr#5 ← phi( gfx_init_plane_charset8::@3/(byte) gfx_init_plane_charset8::cr#4 )
  (byte) gfx_init_plane_charset8::cp#4 ← phi( gfx_init_plane_charset8::@3/(byte) gfx_init_plane_charset8::cp#3 )
  (byte) gfx_init_plane_charset8::bits#4 ← phi( gfx_init_plane_charset8::@3/(byte) gfx_init_plane_charset8::bits#2 )
  (byte*) gfx_init_plane_charset8::gfxa#4 ← phi( gfx_init_plane_charset8::@3/(byte*) gfx_init_plane_charset8::gfxa#3 )
  (byte) gfx_init_plane_charset8::col#3 ← phi( gfx_init_plane_charset8::@3/(byte) gfx_init_plane_charset8::col#4 )
  (byte) gfx_init_plane_charset8::c#1 ← (byte) gfx_init_plane_charset8::col#3
  to:gfx_init_plane_charset8::@4
gfx_init_plane_charset8::@6: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@4
  (byte) gfx_init_plane_charset8::col#7 ← phi( gfx_init_plane_charset8::@4/(byte) gfx_init_plane_charset8::col#1 )
  (byte*) gfx_init_plane_charset8::gfxa#7 ← phi( gfx_init_plane_charset8::@4/(byte*) gfx_init_plane_charset8::gfxa#1 )
  (byte) gfx_init_plane_charset8::ch#3 ← phi( gfx_init_plane_charset8::@4/(byte) gfx_init_plane_charset8::ch#4 )
  (byte*) gfx_init_plane_charset8::chargen#4 ← phi( gfx_init_plane_charset8::@4/(byte*) gfx_init_plane_charset8::chargen#6 )
  (byte) gfx_init_plane_charset8::cr#2 ← phi( gfx_init_plane_charset8::@4/(byte) gfx_init_plane_charset8::cr#3 )
  (byte) gfx_init_plane_charset8::cr#1 ← (byte) gfx_init_plane_charset8::cr#2 + rangenext(0,7)
  (bool~) gfx_init_plane_charset8::$7 ← (byte) gfx_init_plane_charset8::cr#1 != rangelast(0,7)
  if((bool~) gfx_init_plane_charset8::$7) goto gfx_init_plane_charset8::@2
  to:gfx_init_plane_charset8::@7
gfx_init_plane_charset8::@7: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@6
  (byte) gfx_init_plane_charset8::col#8 ← phi( gfx_init_plane_charset8::@6/(byte) gfx_init_plane_charset8::col#7 )
  (byte*) gfx_init_plane_charset8::gfxa#8 ← phi( gfx_init_plane_charset8::@6/(byte*) gfx_init_plane_charset8::gfxa#7 )
  (byte*) gfx_init_plane_charset8::chargen#5 ← phi( gfx_init_plane_charset8::@6/(byte*) gfx_init_plane_charset8::chargen#4 )
  (byte) gfx_init_plane_charset8::ch#2 ← phi( gfx_init_plane_charset8::@6/(byte) gfx_init_plane_charset8::ch#3 )
  (byte) gfx_init_plane_charset8::ch#1 ← (byte) gfx_init_plane_charset8::ch#2 + rangenext(0,$ff)
  (bool~) gfx_init_plane_charset8::$8 ← (byte) gfx_init_plane_charset8::ch#1 != rangelast(0,$ff)
  if((bool~) gfx_init_plane_charset8::$8) goto gfx_init_plane_charset8::@1
  to:gfx_init_plane_charset8::@8
gfx_init_plane_charset8::@8: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@7
  *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_RAM_IO
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#10 ← (byte)(number) $4000/(number) $4000
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_charset8::@10
gfx_init_plane_charset8::@10: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@8
  to:gfx_init_plane_charset8::@return
gfx_init_plane_charset8::@return: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@10
  return 
  to:@return

(void()) gfx_init_plane_vertical2()
gfx_init_plane_vertical2: scope:[gfx_init_plane_vertical2]  from gfx_init::@12
  (dword) gfx_init_plane_fill::plane_addr#0 ← (const nomodify dword) PLANE_VERTICAL2
  (byte) gfx_init_plane_fill::fill#0 ← (number) $1b
  call gfx_init_plane_fill 
  to:gfx_init_plane_vertical2::@1
gfx_init_plane_vertical2::@1: scope:[gfx_init_plane_vertical2]  from gfx_init_plane_vertical2
  to:gfx_init_plane_vertical2::@return
gfx_init_plane_vertical2::@return: scope:[gfx_init_plane_vertical2]  from gfx_init_plane_vertical2::@1
  return 
  to:@return

(void()) gfx_init_plane_blank()
gfx_init_plane_blank: scope:[gfx_init_plane_blank]  from gfx_init::@13
  (dword) gfx_init_plane_fill::plane_addr#1 ← (const nomodify dword) PLANE_BLANK
  (byte) gfx_init_plane_fill::fill#1 ← (number) 0
  call gfx_init_plane_fill 
  to:gfx_init_plane_blank::@1
gfx_init_plane_blank::@1: scope:[gfx_init_plane_blank]  from gfx_init_plane_blank
  to:gfx_init_plane_blank::@return
gfx_init_plane_blank::@return: scope:[gfx_init_plane_blank]  from gfx_init_plane_blank::@1
  return 
  to:@return

(void()) gfx_init_plane_full()
gfx_init_plane_full: scope:[gfx_init_plane_full]  from gfx_init::@14
  (dword) gfx_init_plane_fill::plane_addr#2 ← (const nomodify dword) PLANE_FULL
  (byte) gfx_init_plane_fill::fill#2 ← (number) $ff
  call gfx_init_plane_fill 
  to:gfx_init_plane_full::@1
gfx_init_plane_full::@1: scope:[gfx_init_plane_full]  from gfx_init_plane_full
  to:gfx_init_plane_full::@return
gfx_init_plane_full::@return: scope:[gfx_init_plane_full]  from gfx_init_plane_full::@1
  return 
  to:@return

(void()) gfx_init_plane_fill((dword) gfx_init_plane_fill::plane_addr , (byte) gfx_init_plane_fill::fill)
gfx_init_plane_fill: scope:[gfx_init_plane_fill]  from gfx_init_plane_blank gfx_init_plane_full gfx_init_plane_vertical2
  (byte) gfx_init_plane_fill::fill#7 ← phi( gfx_init_plane_blank/(byte) gfx_init_plane_fill::fill#1 gfx_init_plane_full/(byte) gfx_init_plane_fill::fill#2 gfx_init_plane_vertical2/(byte) gfx_init_plane_fill::fill#0 )
  (dword) gfx_init_plane_fill::plane_addr#3 ← phi( gfx_init_plane_blank/(dword) gfx_init_plane_fill::plane_addr#1 gfx_init_plane_full/(dword) gfx_init_plane_fill::plane_addr#2 gfx_init_plane_vertical2/(dword) gfx_init_plane_fill::plane_addr#0 )
  (number~) gfx_init_plane_fill::$0 ← (dword) gfx_init_plane_fill::plane_addr#3 * (number) 4
  (number~) gfx_init_plane_fill::$1 ← > (number~) gfx_init_plane_fill::$0
  (number~) gfx_init_plane_fill::$2 ← < (number~) gfx_init_plane_fill::$1
  (byte) gfx_init_plane_fill::gfxbCpuBank#0 ← (number~) gfx_init_plane_fill::$2
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#11 ← (byte) gfx_init_plane_fill::gfxbCpuBank#0
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_fill::@5
gfx_init_plane_fill::@5: scope:[gfx_init_plane_fill]  from gfx_init_plane_fill
  (byte) gfx_init_plane_fill::fill#6 ← phi( gfx_init_plane_fill/(byte) gfx_init_plane_fill::fill#7 )
  (dword) gfx_init_plane_fill::plane_addr#4 ← phi( gfx_init_plane_fill/(dword) gfx_init_plane_fill::plane_addr#3 )
  (byte) gfx_init_plane_fill::gfxbCpuBank#2 ← phi( gfx_init_plane_fill/(byte) gfx_init_plane_fill::gfxbCpuBank#0 )
  (byte) gfx_init_plane_fill::gfxbCpuBank#1 ← ++ (byte) gfx_init_plane_fill::gfxbCpuBank#2
  (word~) gfx_init_plane_fill::$4 ← < (dword) gfx_init_plane_fill::plane_addr#4
  (number~) gfx_init_plane_fill::$5 ← (word~) gfx_init_plane_fill::$4 & (number) $3fff
  (number~) gfx_init_plane_fill::$6 ← (number) $4000 + (number~) gfx_init_plane_fill::$5
  (byte*) gfx_init_plane_fill::gfxb#0 ← ((byte*)) (number~) gfx_init_plane_fill::$6
  (byte) gfx_init_plane_fill::by#0 ← (byte) 0
  to:gfx_init_plane_fill::@1
gfx_init_plane_fill::@1: scope:[gfx_init_plane_fill]  from gfx_init_plane_fill::@3 gfx_init_plane_fill::@5
  (byte) gfx_init_plane_fill::by#4 ← phi( gfx_init_plane_fill::@3/(byte) gfx_init_plane_fill::by#1 gfx_init_plane_fill::@5/(byte) gfx_init_plane_fill::by#0 )
  (byte*) gfx_init_plane_fill::gfxb#3 ← phi( gfx_init_plane_fill::@3/(byte*) gfx_init_plane_fill::gfxb#4 gfx_init_plane_fill::@5/(byte*) gfx_init_plane_fill::gfxb#0 )
  (byte) gfx_init_plane_fill::fill#4 ← phi( gfx_init_plane_fill::@3/(byte) gfx_init_plane_fill::fill#5 gfx_init_plane_fill::@5/(byte) gfx_init_plane_fill::fill#6 )
  (byte) gfx_init_plane_fill::bx#0 ← (byte) 0
  to:gfx_init_plane_fill::@2
gfx_init_plane_fill::@2: scope:[gfx_init_plane_fill]  from gfx_init_plane_fill::@1 gfx_init_plane_fill::@2
  (byte) gfx_init_plane_fill::by#3 ← phi( gfx_init_plane_fill::@1/(byte) gfx_init_plane_fill::by#4 gfx_init_plane_fill::@2/(byte) gfx_init_plane_fill::by#3 )
  (byte) gfx_init_plane_fill::bx#2 ← phi( gfx_init_plane_fill::@1/(byte) gfx_init_plane_fill::bx#0 gfx_init_plane_fill::@2/(byte) gfx_init_plane_fill::bx#1 )
  (byte*) gfx_init_plane_fill::gfxb#2 ← phi( gfx_init_plane_fill::@1/(byte*) gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::@2/(byte*) gfx_init_plane_fill::gfxb#1 )
  (byte) gfx_init_plane_fill::fill#3 ← phi( gfx_init_plane_fill::@1/(byte) gfx_init_plane_fill::fill#4 gfx_init_plane_fill::@2/(byte) gfx_init_plane_fill::fill#3 )
  *((byte*) gfx_init_plane_fill::gfxb#2) ← (byte) gfx_init_plane_fill::fill#3
  (byte*) gfx_init_plane_fill::gfxb#1 ← ++ (byte*) gfx_init_plane_fill::gfxb#2
  (byte) gfx_init_plane_fill::bx#1 ← (byte) gfx_init_plane_fill::bx#2 + rangenext(0,$27)
  (bool~) gfx_init_plane_fill::$8 ← (byte) gfx_init_plane_fill::bx#1 != rangelast(0,$27)
  if((bool~) gfx_init_plane_fill::$8) goto gfx_init_plane_fill::@2
  to:gfx_init_plane_fill::@3
gfx_init_plane_fill::@3: scope:[gfx_init_plane_fill]  from gfx_init_plane_fill::@2
  (byte*) gfx_init_plane_fill::gfxb#4 ← phi( gfx_init_plane_fill::@2/(byte*) gfx_init_plane_fill::gfxb#1 )
  (byte) gfx_init_plane_fill::fill#5 ← phi( gfx_init_plane_fill::@2/(byte) gfx_init_plane_fill::fill#3 )
  (byte) gfx_init_plane_fill::by#2 ← phi( gfx_init_plane_fill::@2/(byte) gfx_init_plane_fill::by#3 )
  (byte) gfx_init_plane_fill::by#1 ← (byte) gfx_init_plane_fill::by#2 + rangenext(0,$c7)
  (bool~) gfx_init_plane_fill::$9 ← (byte) gfx_init_plane_fill::by#1 != rangelast(0,$c7)
  if((bool~) gfx_init_plane_fill::$9) goto gfx_init_plane_fill::@1
  to:gfx_init_plane_fill::@4
gfx_init_plane_fill::@4: scope:[gfx_init_plane_fill]  from gfx_init_plane_fill::@3
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#12 ← (byte)(number) $4000/(number) $4000
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_fill::@6
gfx_init_plane_fill::@6: scope:[gfx_init_plane_fill]  from gfx_init_plane_fill::@4
  to:gfx_init_plane_fill::@return
gfx_init_plane_fill::@return: scope:[gfx_init_plane_fill]  from gfx_init_plane_fill::@6
  return 
  to:@return

(void()) form_mode()
form_mode: scope:[form_mode]  from main::@2
  (byte) form_field_idx#66 ← phi( main::@2/(byte) form_field_idx#25 )
  (byte) keyboard_modifiers#107 ← phi( main::@2/(byte) keyboard_modifiers#38 )
  (byte) keyboard_events_size#126 ← phi( main::@2/(byte) keyboard_events_size#42 )
  (signed byte) form_cursor_count#60 ← phi( main::@2/(signed byte) form_cursor_count#18 )
  (byte*) print_char_cursor#47 ← phi( main::@2/(byte*) print_char_cursor#45 )
  (byte*) print_line_cursor#41 ← phi( main::@2/(byte*) print_line_cursor#39 )
  (byte*) print_screen#20 ← phi( main::@2/(byte*) print_screen#18 )
  (byte*) print_set_screen::screen#0 ← (const nomodify byte*) COLS
  call print_set_screen 
  to:form_mode::@8
form_mode::@8: scope:[form_mode]  from form_mode
  (byte) form_field_idx#65 ← phi( form_mode/(byte) form_field_idx#66 )
  (byte) keyboard_modifiers#105 ← phi( form_mode/(byte) keyboard_modifiers#107 )
  (byte) keyboard_events_size#124 ← phi( form_mode/(byte) keyboard_events_size#126 )
  (signed byte) form_cursor_count#59 ← phi( form_mode/(signed byte) form_cursor_count#60 )
  (byte*) print_char_cursor#33 ← phi( form_mode/(byte*) print_char_cursor#11 )
  (byte*) print_line_cursor#28 ← phi( form_mode/(byte*) print_line_cursor#8 )
  (byte*) print_screen#14 ← phi( form_mode/(byte*) print_screen#2 )
  (byte*) print_screen#5 ← (byte*) print_screen#14
  (byte*) print_line_cursor#11 ← (byte*) print_line_cursor#28
  (byte*) print_char_cursor#14 ← (byte*) print_char_cursor#33
  call print_cls 
  to:form_mode::@9
form_mode::@9: scope:[form_mode]  from form_mode::@8
  (byte) form_field_idx#64 ← phi( form_mode::@8/(byte) form_field_idx#65 )
  (byte) keyboard_modifiers#103 ← phi( form_mode::@8/(byte) keyboard_modifiers#105 )
  (byte) keyboard_events_size#122 ← phi( form_mode::@8/(byte) keyboard_events_size#124 )
  (signed byte) form_cursor_count#58 ← phi( form_mode::@8/(signed byte) form_cursor_count#59 )
  (byte*) print_screen#27 ← phi( form_mode::@8/(byte*) print_screen#5 )
  (byte*) print_char_cursor#34 ← phi( form_mode::@8/(byte*) print_char_cursor#9 )
  (byte*) print_line_cursor#29 ← phi( form_mode::@8/(byte*) print_line_cursor#6 )
  (byte*) print_line_cursor#12 ← (byte*) print_line_cursor#29
  (byte*) print_char_cursor#15 ← (byte*) print_char_cursor#34
  (byte*) print_str_lines::str#1 ← (const byte*) FORM_COLS
  call print_str_lines 
  to:form_mode::@10
form_mode::@10: scope:[form_mode]  from form_mode::@9
  (byte) form_field_idx#63 ← phi( form_mode::@9/(byte) form_field_idx#64 )
  (byte) keyboard_modifiers#101 ← phi( form_mode::@9/(byte) keyboard_modifiers#103 )
  (byte) keyboard_events_size#120 ← phi( form_mode::@9/(byte) keyboard_events_size#122 )
  (signed byte) form_cursor_count#57 ← phi( form_mode::@9/(signed byte) form_cursor_count#58 )
  (byte*) print_screen#21 ← phi( form_mode::@9/(byte*) print_screen#27 )
  (byte*) print_line_cursor#30 ← phi( form_mode::@9/(byte*) print_line_cursor#2 )
  (byte*) print_char_cursor#35 ← phi( form_mode::@9/(byte*) print_char_cursor#3 )
  (byte*) print_char_cursor#16 ← (byte*) print_char_cursor#35
  (byte*) print_line_cursor#13 ← (byte*) print_line_cursor#30
  (byte*) print_set_screen::screen#1 ← (const nomodify byte*) FORM_SCREEN
  call print_set_screen 
  to:form_mode::@11
form_mode::@11: scope:[form_mode]  from form_mode::@10
  (byte) form_field_idx#62 ← phi( form_mode::@10/(byte) form_field_idx#63 )
  (byte) keyboard_modifiers#99 ← phi( form_mode::@10/(byte) keyboard_modifiers#101 )
  (byte) keyboard_events_size#118 ← phi( form_mode::@10/(byte) keyboard_events_size#120 )
  (signed byte) form_cursor_count#56 ← phi( form_mode::@10/(signed byte) form_cursor_count#57 )
  (byte*) print_char_cursor#36 ← phi( form_mode::@10/(byte*) print_char_cursor#11 )
  (byte*) print_line_cursor#31 ← phi( form_mode::@10/(byte*) print_line_cursor#8 )
  (byte*) print_screen#15 ← phi( form_mode::@10/(byte*) print_screen#2 )
  (byte*) print_screen#6 ← (byte*) print_screen#15
  (byte*) print_line_cursor#14 ← (byte*) print_line_cursor#31
  (byte*) print_char_cursor#17 ← (byte*) print_char_cursor#36
  call print_cls 
  to:form_mode::@12
form_mode::@12: scope:[form_mode]  from form_mode::@11
  (byte) form_field_idx#61 ← phi( form_mode::@11/(byte) form_field_idx#62 )
  (byte) keyboard_modifiers#97 ← phi( form_mode::@11/(byte) keyboard_modifiers#99 )
  (byte) keyboard_events_size#116 ← phi( form_mode::@11/(byte) keyboard_events_size#118 )
  (signed byte) form_cursor_count#55 ← phi( form_mode::@11/(signed byte) form_cursor_count#56 )
  (byte*) print_screen#45 ← phi( form_mode::@11/(byte*) print_screen#6 )
  (byte*) print_char_cursor#37 ← phi( form_mode::@11/(byte*) print_char_cursor#9 )
  (byte*) print_line_cursor#32 ← phi( form_mode::@11/(byte*) print_line_cursor#6 )
  (byte*) print_line_cursor#15 ← (byte*) print_line_cursor#32
  (byte*) print_char_cursor#18 ← (byte*) print_char_cursor#37
  (byte*) print_str_lines::str#2 ← (const byte*) FORM_TEXT
  call print_str_lines 
  to:form_mode::@13
form_mode::@13: scope:[form_mode]  from form_mode::@12
  (byte) form_field_idx#58 ← phi( form_mode::@12/(byte) form_field_idx#61 )
  (byte) keyboard_modifiers#95 ← phi( form_mode::@12/(byte) keyboard_modifiers#97 )
  (byte) keyboard_events_size#113 ← phi( form_mode::@12/(byte) keyboard_events_size#116 )
  (signed byte) form_cursor_count#52 ← phi( form_mode::@12/(signed byte) form_cursor_count#55 )
  (byte*) print_screen#44 ← phi( form_mode::@12/(byte*) print_screen#45 )
  (byte*) print_line_cursor#33 ← phi( form_mode::@12/(byte*) print_line_cursor#2 )
  (byte*) print_char_cursor#38 ← phi( form_mode::@12/(byte*) print_char_cursor#3 )
  (byte*) print_char_cursor#19 ← (byte*) print_char_cursor#38
  (byte*) print_line_cursor#16 ← (byte*) print_line_cursor#33
  (byte*) form_set_screen::screen#0 ← (const nomodify byte*) FORM_SCREEN
  call form_set_screen 
  to:form_mode::@14
form_mode::@14: scope:[form_mode]  from form_mode::@13
  (byte) form_field_idx#56 ← phi( form_mode::@13/(byte) form_field_idx#58 )
  (byte) keyboard_modifiers#93 ← phi( form_mode::@13/(byte) keyboard_modifiers#95 )
  (byte) keyboard_events_size#109 ← phi( form_mode::@13/(byte) keyboard_events_size#113 )
  (signed byte) form_cursor_count#50 ← phi( form_mode::@13/(signed byte) form_cursor_count#52 )
  (byte*) print_char_cursor#71 ← phi( form_mode::@13/(byte*) print_char_cursor#19 )
  (byte*) print_line_cursor#67 ← phi( form_mode::@13/(byte*) print_line_cursor#16 )
  (byte*) print_screen#43 ← phi( form_mode::@13/(byte*) print_screen#44 )
  call form_render_values 
  to:form_mode::@15
form_mode::@15: scope:[form_mode]  from form_mode::@14
  (byte) form_field_idx#52 ← phi( form_mode::@14/(byte) form_field_idx#56 )
  (byte) keyboard_modifiers#89 ← phi( form_mode::@14/(byte) keyboard_modifiers#93 )
  (byte) keyboard_events_size#102 ← phi( form_mode::@14/(byte) keyboard_events_size#109 )
  (signed byte) form_cursor_count#47 ← phi( form_mode::@14/(signed byte) form_cursor_count#50 )
  (byte*) print_char_cursor#69 ← phi( form_mode::@14/(byte*) print_char_cursor#71 )
  (byte*) print_line_cursor#65 ← phi( form_mode::@14/(byte*) print_line_cursor#67 )
  (byte*) print_screen#41 ← phi( form_mode::@14/(byte*) print_screen#43 )
  (byte) render_preset_name::idx#0 ← *((const nomodify byte*) form_preset)
  call render_preset_name 
  to:form_mode::@16
form_mode::@16: scope:[form_mode]  from form_mode::@15
  (byte) form_field_idx#49 ← phi( form_mode::@15/(byte) form_field_idx#52 )
  (byte) keyboard_modifiers#84 ← phi( form_mode::@15/(byte) keyboard_modifiers#89 )
  (byte) keyboard_events_size#93 ← phi( form_mode::@15/(byte) keyboard_events_size#102 )
  (signed byte) form_cursor_count#44 ← phi( form_mode::@15/(signed byte) form_cursor_count#47 )
  (byte*) print_char_cursor#67 ← phi( form_mode::@15/(byte*) print_char_cursor#69 )
  (byte*) print_line_cursor#63 ← phi( form_mode::@15/(byte*) print_line_cursor#65 )
  (byte*) print_screen#39 ← phi( form_mode::@15/(byte*) print_screen#41 )
  *((const nomodify byte*) DTV_GRAPHICS_VIC_BANK) ← (byte)(dword)(const nomodify byte*) FORM_CHARSET/(number) $10000
  *((const nomodify byte*) DTV_COLOR_BANK_LO) ← <(word)(const nomodify dword) DTV_COLOR_BANK_DEFAULT/(number) $400
  *((const nomodify byte*) DTV_COLOR_BANK_HI) ← >(word)(const nomodify dword) DTV_COLOR_BANK_DEFAULT/(number) $400
  *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) ← (number) 3
  *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A) ← (number) 3^(byte)(word)(const nomodify byte*) FORM_CHARSET/(number) $4000
  *((const nomodify byte*) DTV_CONTROL) ← (number) 0
  *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1) ← (const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(number) 3
  *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL2) ← (const nomodify byte) VIC_CSEL
  *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_MEMORY) ← (byte)(word)(const nomodify byte*) FORM_SCREEN&(number) $3fff/(number) $40|(word)(const nomodify byte*) FORM_CHARSET&(number) $3fff/(number) $400
  *((const nomodify byte*) DTV_PLANEA_START_LO) ← <(const nomodify byte*) FORM_SCREEN
  *((const nomodify byte*) DTV_PLANEA_START_MI) ← >(const nomodify byte*) FORM_SCREEN
  *((const nomodify byte*) DTV_PLANEA_START_HI) ← (number) 0
  (byte) form_mode::i#0 ← (byte) 0
  to:form_mode::@1
form_mode::@1: scope:[form_mode]  from form_mode::@1 form_mode::@16
  (byte) form_field_idx#45 ← phi( form_mode::@1/(byte) form_field_idx#45 form_mode::@16/(byte) form_field_idx#49 )
  (byte) keyboard_modifiers#79 ← phi( form_mode::@1/(byte) keyboard_modifiers#79 form_mode::@16/(byte) keyboard_modifiers#84 )
  (byte) keyboard_events_size#83 ← phi( form_mode::@1/(byte) keyboard_events_size#83 form_mode::@16/(byte) keyboard_events_size#93 )
  (signed byte) form_cursor_count#39 ← phi( form_mode::@1/(signed byte) form_cursor_count#39 form_mode::@16/(signed byte) form_cursor_count#44 )
  (byte*) print_char_cursor#62 ← phi( form_mode::@1/(byte*) print_char_cursor#62 form_mode::@16/(byte*) print_char_cursor#67 )
  (byte*) print_line_cursor#57 ← phi( form_mode::@1/(byte*) print_line_cursor#57 form_mode::@16/(byte*) print_line_cursor#63 )
  (byte*) print_screen#34 ← phi( form_mode::@1/(byte*) print_screen#34 form_mode::@16/(byte*) print_screen#39 )
  (byte) form_mode::i#2 ← phi( form_mode::@1/(byte) form_mode::i#1 form_mode::@16/(byte) form_mode::i#0 )
  *((const nomodify byte*) DTV_PALETTE + (byte) form_mode::i#2) ← *((const byte*) DTV_PALETTE_DEFAULT + (byte) form_mode::i#2)
  (byte) form_mode::i#1 ← (byte) form_mode::i#2 + rangenext(0,$f)
  (bool~) form_mode::$9 ← (byte) form_mode::i#1 != rangelast(0,$f)
  if((bool~) form_mode::$9) goto form_mode::@1
  to:form_mode::@2
form_mode::@2: scope:[form_mode]  from form_mode::@1
  (byte) form_field_idx#37 ← phi( form_mode::@1/(byte) form_field_idx#45 )
  (byte) keyboard_modifiers#60 ← phi( form_mode::@1/(byte) keyboard_modifiers#79 )
  (byte) keyboard_events_size#61 ← phi( form_mode::@1/(byte) keyboard_events_size#83 )
  (signed byte) form_cursor_count#29 ← phi( form_mode::@1/(signed byte) form_cursor_count#39 )
  (byte*) print_char_cursor#56 ← phi( form_mode::@1/(byte*) print_char_cursor#62 )
  (byte*) print_line_cursor#49 ← phi( form_mode::@1/(byte*) print_line_cursor#57 )
  (byte*) print_screen#28 ← phi( form_mode::@1/(byte*) print_screen#34 )
  *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) ← (number) 0
  *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (number) 0
  (byte) form_mode::preset_current#0 ← *((const nomodify byte*) form_preset)
  to:form_mode::@3
form_mode::@3: scope:[form_mode]  from form_mode::@2 form_mode::@20 form_mode::@6
  (byte) form_mode::preset_current#6 ← phi( form_mode::@2/(byte) form_mode::preset_current#0 form_mode::@20/(byte) form_mode::preset_current#7 form_mode::@6/(byte) form_mode::preset_current#2 )
  (byte) form_field_idx#28 ← phi( form_mode::@2/(byte) form_field_idx#37 form_mode::@20/(byte) form_field_idx#38 form_mode::@6/(byte) form_field_idx#39 )
  (byte) keyboard_modifiers#44 ← phi( form_mode::@2/(byte) keyboard_modifiers#60 form_mode::@20/(byte) keyboard_modifiers#61 form_mode::@6/(byte) keyboard_modifiers#62 )
  (byte) keyboard_events_size#47 ← phi( form_mode::@2/(byte) keyboard_events_size#61 form_mode::@20/(byte) keyboard_events_size#62 form_mode::@6/(byte) keyboard_events_size#63 )
  (signed byte) form_cursor_count#21 ← phi( form_mode::@2/(signed byte) form_cursor_count#29 form_mode::@20/(signed byte) form_cursor_count#30 form_mode::@6/(signed byte) form_cursor_count#31 )
  (byte*) print_char_cursor#49 ← phi( form_mode::@2/(byte*) print_char_cursor#56 form_mode::@20/(byte*) print_char_cursor#57 form_mode::@6/(byte*) print_char_cursor#58 )
  (byte*) print_line_cursor#43 ← phi( form_mode::@2/(byte*) print_line_cursor#49 form_mode::@20/(byte*) print_line_cursor#50 form_mode::@6/(byte*) print_line_cursor#51 )
  (byte*) print_screen#23 ← phi( form_mode::@2/(byte*) print_screen#28 form_mode::@20/(byte*) print_screen#29 form_mode::@6/(byte*) print_screen#30 )
  if(true) goto form_mode::@4
  to:form_mode::@return
form_mode::@4: scope:[form_mode]  from form_mode::@3 form_mode::@4
  (byte*) print_char_cursor#63 ← phi( form_mode::@3/(byte*) print_char_cursor#49 form_mode::@4/(byte*) print_char_cursor#63 )
  (byte*) print_line_cursor#58 ← phi( form_mode::@3/(byte*) print_line_cursor#43 form_mode::@4/(byte*) print_line_cursor#58 )
  (byte*) print_screen#35 ← phi( form_mode::@3/(byte*) print_screen#23 form_mode::@4/(byte*) print_screen#35 )
  (byte) form_mode::preset_current#5 ← phi( form_mode::@3/(byte) form_mode::preset_current#6 form_mode::@4/(byte) form_mode::preset_current#5 )
  (byte) form_field_idx#40 ← phi( form_mode::@3/(byte) form_field_idx#28 form_mode::@4/(byte) form_field_idx#40 )
  (byte) keyboard_modifiers#63 ← phi( form_mode::@3/(byte) keyboard_modifiers#44 form_mode::@4/(byte) keyboard_modifiers#63 )
  (byte) keyboard_events_size#64 ← phi( form_mode::@3/(byte) keyboard_events_size#47 form_mode::@4/(byte) keyboard_events_size#64 )
  (signed byte) form_cursor_count#32 ← phi( form_mode::@3/(signed byte) form_cursor_count#21 form_mode::@4/(signed byte) form_cursor_count#32 )
  (bool~) form_mode::$10 ← *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) != (number) $ff
  if((bool~) form_mode::$10) goto form_mode::@4
  to:form_mode::@5
form_mode::@5: scope:[form_mode]  from form_mode::@4
  (byte*) print_char_cursor#59 ← phi( form_mode::@4/(byte*) print_char_cursor#63 )
  (byte*) print_line_cursor#52 ← phi( form_mode::@4/(byte*) print_line_cursor#58 )
  (byte*) print_screen#31 ← phi( form_mode::@4/(byte*) print_screen#35 )
  (byte) form_mode::preset_current#4 ← phi( form_mode::@4/(byte) form_mode::preset_current#5 )
  (byte) form_field_idx#27 ← phi( form_mode::@4/(byte) form_field_idx#40 )
  (byte) keyboard_modifiers#43 ← phi( form_mode::@4/(byte) keyboard_modifiers#63 )
  (byte) keyboard_events_size#46 ← phi( form_mode::@4/(byte) keyboard_events_size#64 )
  (signed byte) form_cursor_count#20 ← phi( form_mode::@4/(signed byte) form_cursor_count#32 )
  call form_control 
  (byte) form_control::return#0 ← (byte) form_control::return#2
  to:form_mode::@17
form_mode::@17: scope:[form_mode]  from form_mode::@5
  (byte*) print_char_cursor#48 ← phi( form_mode::@5/(byte*) print_char_cursor#59 )
  (byte*) print_line_cursor#42 ← phi( form_mode::@5/(byte*) print_line_cursor#52 )
  (byte*) print_screen#22 ← phi( form_mode::@5/(byte*) print_screen#31 )
  (byte) form_mode::preset_current#3 ← phi( form_mode::@5/(byte) form_mode::preset_current#4 )
  (byte) form_field_idx#13 ← phi( form_mode::@5/(byte) form_field_idx#9 )
  (byte) keyboard_modifiers#27 ← phi( form_mode::@5/(byte) keyboard_modifiers#15 )
  (byte) keyboard_events_size#31 ← phi( form_mode::@5/(byte) keyboard_events_size#16 )
  (signed byte) form_cursor_count#12 ← phi( form_mode::@5/(signed byte) form_cursor_count#8 )
  (byte) form_control::return#6 ← phi( form_mode::@5/(byte) form_control::return#0 )
  (byte~) form_mode::$11 ← (byte) form_control::return#6
  (signed byte) form_cursor_count#2 ← (signed byte) form_cursor_count#12
  (byte) keyboard_events_size#12 ← (byte) keyboard_events_size#31
  (byte) keyboard_modifiers#12 ← (byte) keyboard_modifiers#27
  (byte) form_field_idx#2 ← (byte) form_field_idx#13
  (bool~) form_mode::$12 ← (byte~) form_mode::$11 != (number) 0
  (bool~) form_mode::$13 ← ! (bool~) form_mode::$12
  if((bool~) form_mode::$13) goto form_mode::@6
  to:form_mode::@return
form_mode::@6: scope:[form_mode]  from form_mode::@17
  (byte) form_field_idx#39 ← phi( form_mode::@17/(byte) form_field_idx#2 )
  (byte) keyboard_modifiers#62 ← phi( form_mode::@17/(byte) keyboard_modifiers#12 )
  (byte) keyboard_events_size#63 ← phi( form_mode::@17/(byte) keyboard_events_size#12 )
  (signed byte) form_cursor_count#31 ← phi( form_mode::@17/(signed byte) form_cursor_count#2 )
  (byte*) print_char_cursor#58 ← phi( form_mode::@17/(byte*) print_char_cursor#48 )
  (byte*) print_line_cursor#51 ← phi( form_mode::@17/(byte*) print_line_cursor#42 )
  (byte*) print_screen#30 ← phi( form_mode::@17/(byte*) print_screen#22 )
  (byte) form_mode::preset_current#2 ← phi( form_mode::@17/(byte) form_mode::preset_current#3 )
  (bool~) form_mode::$14 ← (byte) form_mode::preset_current#2 != *((const nomodify byte*) form_preset)
  (bool~) form_mode::$15 ← ! (bool~) form_mode::$14
  if((bool~) form_mode::$15) goto form_mode::@3
  to:form_mode::@7
form_mode::@return: scope:[form_mode]  from form_mode::@17 form_mode::@3
  (byte) form_field_idx#14 ← phi( form_mode::@17/(byte) form_field_idx#2 form_mode::@3/(byte) form_field_idx#28 )
  (byte) keyboard_modifiers#28 ← phi( form_mode::@17/(byte) keyboard_modifiers#12 form_mode::@3/(byte) keyboard_modifiers#44 )
  (byte) keyboard_events_size#32 ← phi( form_mode::@17/(byte) keyboard_events_size#12 form_mode::@3/(byte) keyboard_events_size#47 )
  (signed byte) form_cursor_count#13 ← phi( form_mode::@17/(signed byte) form_cursor_count#2 form_mode::@3/(signed byte) form_cursor_count#21 )
  (byte*) print_char_cursor#39 ← phi( form_mode::@17/(byte*) print_char_cursor#48 form_mode::@3/(byte*) print_char_cursor#49 )
  (byte*) print_line_cursor#34 ← phi( form_mode::@17/(byte*) print_line_cursor#42 form_mode::@3/(byte*) print_line_cursor#43 )
  (byte*) print_screen#16 ← phi( form_mode::@17/(byte*) print_screen#22 form_mode::@3/(byte*) print_screen#23 )
  (byte*) print_screen#7 ← (byte*) print_screen#16
  (byte*) print_line_cursor#17 ← (byte*) print_line_cursor#34
  (byte*) print_char_cursor#20 ← (byte*) print_char_cursor#39
  (signed byte) form_cursor_count#3 ← (signed byte) form_cursor_count#13
  (byte) keyboard_events_size#13 ← (byte) keyboard_events_size#32
  (byte) keyboard_modifiers#13 ← (byte) keyboard_modifiers#28
  (byte) form_field_idx#3 ← (byte) form_field_idx#14
  return 
  to:@return
form_mode::@7: scope:[form_mode]  from form_mode::@6
  (byte) form_field_idx#53 ← phi( form_mode::@6/(byte) form_field_idx#39 )
  (byte) keyboard_modifiers#90 ← phi( form_mode::@6/(byte) keyboard_modifiers#62 )
  (byte) keyboard_events_size#103 ← phi( form_mode::@6/(byte) keyboard_events_size#63 )
  (signed byte) form_cursor_count#48 ← phi( form_mode::@6/(signed byte) form_cursor_count#31 )
  (byte*) print_char_cursor#70 ← phi( form_mode::@6/(byte*) print_char_cursor#58 )
  (byte*) print_line_cursor#66 ← phi( form_mode::@6/(byte*) print_line_cursor#51 )
  (byte*) print_screen#42 ← phi( form_mode::@6/(byte*) print_screen#30 )
  (byte) apply_preset::idx#0 ← *((const nomodify byte*) form_preset)
  call apply_preset 
  to:form_mode::@18
form_mode::@18: scope:[form_mode]  from form_mode::@7
  (byte) form_field_idx#50 ← phi( form_mode::@7/(byte) form_field_idx#53 )
  (byte) keyboard_modifiers#85 ← phi( form_mode::@7/(byte) keyboard_modifiers#90 )
  (byte) keyboard_events_size#94 ← phi( form_mode::@7/(byte) keyboard_events_size#103 )
  (signed byte) form_cursor_count#45 ← phi( form_mode::@7/(signed byte) form_cursor_count#48 )
  (byte*) print_char_cursor#68 ← phi( form_mode::@7/(byte*) print_char_cursor#70 )
  (byte*) print_line_cursor#64 ← phi( form_mode::@7/(byte*) print_line_cursor#66 )
  (byte*) print_screen#40 ← phi( form_mode::@7/(byte*) print_screen#42 )
  (byte) form_mode::preset_current#1 ← *((const nomodify byte*) form_preset)
  call form_render_values 
  to:form_mode::@19
form_mode::@19: scope:[form_mode]  from form_mode::@18
  (byte) form_mode::preset_current#8 ← phi( form_mode::@18/(byte) form_mode::preset_current#1 )
  (byte) form_field_idx#46 ← phi( form_mode::@18/(byte) form_field_idx#50 )
  (byte) keyboard_modifiers#80 ← phi( form_mode::@18/(byte) keyboard_modifiers#85 )
  (byte) keyboard_events_size#84 ← phi( form_mode::@18/(byte) keyboard_events_size#94 )
  (signed byte) form_cursor_count#40 ← phi( form_mode::@18/(signed byte) form_cursor_count#45 )
  (byte*) print_char_cursor#64 ← phi( form_mode::@18/(byte*) print_char_cursor#68 )
  (byte*) print_line_cursor#59 ← phi( form_mode::@18/(byte*) print_line_cursor#64 )
  (byte*) print_screen#36 ← phi( form_mode::@18/(byte*) print_screen#40 )
  (byte) render_preset_name::idx#1 ← *((const nomodify byte*) form_preset)
  call render_preset_name 
  to:form_mode::@20
form_mode::@20: scope:[form_mode]  from form_mode::@19
  (byte) form_mode::preset_current#7 ← phi( form_mode::@19/(byte) form_mode::preset_current#8 )
  (byte) form_field_idx#38 ← phi( form_mode::@19/(byte) form_field_idx#46 )
  (byte) keyboard_modifiers#61 ← phi( form_mode::@19/(byte) keyboard_modifiers#80 )
  (byte) keyboard_events_size#62 ← phi( form_mode::@19/(byte) keyboard_events_size#84 )
  (signed byte) form_cursor_count#30 ← phi( form_mode::@19/(signed byte) form_cursor_count#40 )
  (byte*) print_char_cursor#57 ← phi( form_mode::@19/(byte*) print_char_cursor#64 )
  (byte*) print_line_cursor#50 ← phi( form_mode::@19/(byte*) print_line_cursor#59 )
  (byte*) print_screen#29 ← phi( form_mode::@19/(byte*) print_screen#36 )
  to:form_mode::@3
@3: scope:[]  from @2
  (byte) keyboard_modifiers#75 ← phi( @2/(byte) keyboard_modifiers#0 )
  (byte) keyboard_events_size#76 ← phi( @2/(byte) keyboard_events_size#0 )
  (byte*) print_char_cursor#60 ← phi( @2/(byte*) print_char_cursor#65 )
  (byte*) print_line_cursor#53 ← phi( @2/(byte*) print_line_cursor#60 )
  (byte*) print_screen#32 ← phi( @2/(byte*) print_screen#37 )
  (byte) form_field_idx#4 ← (byte) 0
  (signed byte) form_cursor_count#4 ← (signed byte)(const nomodify signed byte) FORM_CURSOR_BLINK/(number) 2
  to:@4

(void()) form_set_screen((byte*) form_set_screen::screen)
form_set_screen: scope:[form_set_screen]  from form_mode::@13
  (byte*) form_set_screen::screen#1 ← phi( form_mode::@13/(byte*) form_set_screen::screen#0 )
  (byte*) form_set_screen::line#0 ← (byte*) form_set_screen::screen#1
  (byte) form_set_screen::y#0 ← (byte) 0
  to:form_set_screen::@1
form_set_screen::@1: scope:[form_set_screen]  from form_set_screen form_set_screen::@1
  (byte) form_set_screen::y#2 ← phi( form_set_screen/(byte) form_set_screen::y#0 form_set_screen::@1/(byte) form_set_screen::y#1 )
  (byte*) form_set_screen::line#2 ← phi( form_set_screen/(byte*) form_set_screen::line#0 form_set_screen::@1/(byte*) form_set_screen::line#1 )
  (byte~) form_set_screen::$0 ← < (byte*) form_set_screen::line#2
  *((const byte*) form_line_lo + (byte) form_set_screen::y#2) ← (byte~) form_set_screen::$0
  (byte~) form_set_screen::$1 ← > (byte*) form_set_screen::line#2
  *((const byte*) form_line_hi + (byte) form_set_screen::y#2) ← (byte~) form_set_screen::$1
  (byte*~) form_set_screen::$2 ← (byte*) form_set_screen::line#2 + (number) $28
  (byte*) form_set_screen::line#1 ← (byte*~) form_set_screen::$2
  (byte) form_set_screen::y#1 ← (byte) form_set_screen::y#2 + rangenext(0,$18)
  (bool~) form_set_screen::$3 ← (byte) form_set_screen::y#1 != rangelast(0,$18)
  if((bool~) form_set_screen::$3) goto form_set_screen::@1
  to:form_set_screen::@return
form_set_screen::@return: scope:[form_set_screen]  from form_set_screen::@1
  return 
  to:@return

(byte*()) form_field_ptr((byte) form_field_ptr::field_idx)
form_field_ptr: scope:[form_field_ptr]  from form_control form_render_values::@2
  (byte) form_field_ptr::field_idx#2 ← phi( form_control/(byte) form_field_ptr::field_idx#1 form_render_values::@2/(byte) form_field_ptr::field_idx#0 )
  (byte) form_field_ptr::y#0 ← *((const byte*) form_fields_y + (byte) form_field_ptr::field_idx#2)
  (byte*) form_field_ptr::line#0 ← (byte*){ *((const byte*) form_line_hi + (byte) form_field_ptr::y#0), *((const byte*) form_line_lo + (byte) form_field_ptr::y#0) }
  (byte) form_field_ptr::x#0 ← *((const byte*) form_fields_x + (byte) form_field_ptr::field_idx#2)
  (byte*~) form_field_ptr::$0 ← (byte*) form_field_ptr::line#0 + (byte) form_field_ptr::x#0
  (byte*) form_field_ptr::field#0 ← (byte*~) form_field_ptr::$0
  (byte*) form_field_ptr::return#0 ← (byte*) form_field_ptr::field#0
  to:form_field_ptr::@return
form_field_ptr::@return: scope:[form_field_ptr]  from form_field_ptr
  (byte*) form_field_ptr::return#4 ← phi( form_field_ptr/(byte*) form_field_ptr::return#0 )
  (byte*) form_field_ptr::return#1 ← (byte*) form_field_ptr::return#4
  return 
  to:@return

(void()) form_render_values()
form_render_values: scope:[form_render_values]  from form_mode::@14 form_mode::@18
  (byte) form_render_values::idx#0 ← (byte) 0
  to:form_render_values::@1
form_render_values::@1: scope:[form_render_values]  from form_render_values form_render_values::@3
  (byte) form_render_values::idx#2 ← phi( form_render_values/(byte) form_render_values::idx#0 form_render_values::@3/(byte) form_render_values::idx#1 )
  (bool~) form_render_values::$0 ← (byte) form_render_values::idx#2 < (const byte) form_fields_cnt
  if((bool~) form_render_values::$0) goto form_render_values::@2
  to:form_render_values::@return
form_render_values::@2: scope:[form_render_values]  from form_render_values::@1
  (byte) form_render_values::idx#3 ← phi( form_render_values::@1/(byte) form_render_values::idx#2 )
  (byte) form_field_ptr::field_idx#0 ← (byte) form_render_values::idx#3
  call form_field_ptr 
  (byte*) form_field_ptr::return#2 ← (byte*) form_field_ptr::return#1
  to:form_render_values::@3
form_render_values::@3: scope:[form_render_values]  from form_render_values::@2
  (byte) form_render_values::idx#4 ← phi( form_render_values::@2/(byte) form_render_values::idx#3 )
  (byte*) form_field_ptr::return#5 ← phi( form_render_values::@2/(byte*) form_field_ptr::return#2 )
  (byte*~) form_render_values::$1 ← (byte*) form_field_ptr::return#5
  (byte*) form_render_values::field#0 ← (byte*~) form_render_values::$1
  *((byte*) form_render_values::field#0) ← *((const to_nomodify byte*) print_hextab + *((const byte*) form_fields_val + (byte) form_render_values::idx#4))
  (byte) form_render_values::idx#1 ← ++ (byte) form_render_values::idx#4
  to:form_render_values::@1
form_render_values::@return: scope:[form_render_values]  from form_render_values::@1
  return 
  to:@return

(byte()) form_control()
form_control: scope:[form_control]  from form_mode::@5
  (byte) keyboard_modifiers#91 ← phi( form_mode::@5/(byte) keyboard_modifiers#43 )
  (byte) keyboard_events_size#104 ← phi( form_mode::@5/(byte) keyboard_events_size#46 )
  (signed byte) form_cursor_count#22 ← phi( form_mode::@5/(signed byte) form_cursor_count#20 )
  (byte) form_field_idx#15 ← phi( form_mode::@5/(byte) form_field_idx#27 )
  (byte) form_field_ptr::field_idx#1 ← (byte) form_field_idx#15
  call form_field_ptr 
  (byte*) form_field_ptr::return#3 ← (byte*) form_field_ptr::return#1
  to:form_control::@22
form_control::@22: scope:[form_control]  from form_control
  (byte) form_field_idx#59 ← phi( form_control/(byte) form_field_idx#15 )
  (byte) keyboard_modifiers#86 ← phi( form_control/(byte) keyboard_modifiers#91 )
  (byte) keyboard_events_size#95 ← phi( form_control/(byte) keyboard_events_size#104 )
  (signed byte) form_cursor_count#14 ← phi( form_control/(signed byte) form_cursor_count#22 )
  (byte*) form_field_ptr::return#6 ← phi( form_control/(byte*) form_field_ptr::return#3 )
  (byte*~) form_control::$0 ← (byte*) form_field_ptr::return#6
  (byte*) form_control::field#0 ← (byte*~) form_control::$0
  (signed byte) form_cursor_count#5 ← -- (signed byte) form_cursor_count#14
  (bool~) form_control::$1 ← (signed byte) form_cursor_count#5 < (number) 0
  (bool~) form_control::$2 ← ! (bool~) form_control::$1
  if((bool~) form_control::$2) goto form_control::@1
  to:form_control::@7
form_control::@1: scope:[form_control]  from form_control::@22 form_control::@7
  (byte) form_field_idx#57 ← phi( form_control::@22/(byte) form_field_idx#59 form_control::@7/(byte) form_field_idx#60 )
  (byte) keyboard_modifiers#81 ← phi( form_control::@22/(byte) keyboard_modifiers#86 form_control::@7/(byte) keyboard_modifiers#87 )
  (byte) keyboard_events_size#85 ← phi( form_control::@22/(byte) keyboard_events_size#95 form_control::@7/(byte) keyboard_events_size#96 )
  (byte*) form_control::field#5 ← phi( form_control::@22/(byte*) form_control::field#0 form_control::@7/(byte*) form_control::field#11 )
  (signed byte) form_cursor_count#15 ← phi( form_control::@22/(signed byte) form_cursor_count#5 form_control::@7/(signed byte) form_cursor_count#6 )
  (bool~) form_control::$3 ← (signed byte) form_cursor_count#15 < (const nomodify signed byte) FORM_CURSOR_BLINK/(number) 2
  if((bool~) form_control::$3) goto form_control::@2
  to:form_control::@8
form_control::@7: scope:[form_control]  from form_control::@22
  (byte) form_field_idx#60 ← phi( form_control::@22/(byte) form_field_idx#59 )
  (byte) keyboard_modifiers#87 ← phi( form_control::@22/(byte) keyboard_modifiers#86 )
  (byte) keyboard_events_size#96 ← phi( form_control::@22/(byte) keyboard_events_size#95 )
  (byte*) form_control::field#11 ← phi( form_control::@22/(byte*) form_control::field#0 )
  (signed byte) form_cursor_count#6 ← (const nomodify signed byte) FORM_CURSOR_BLINK
  to:form_control::@1
form_control::@2: scope:[form_control]  from form_control::@1
  (signed byte) form_cursor_count#53 ← phi( form_control::@1/(signed byte) form_cursor_count#15 )
  (byte) form_field_idx#54 ← phi( form_control::@1/(byte) form_field_idx#57 )
  (byte) keyboard_modifiers#64 ← phi( form_control::@1/(byte) keyboard_modifiers#81 )
  (byte) keyboard_events_size#65 ← phi( form_control::@1/(byte) keyboard_events_size#85 )
  (byte*) form_control::field#1 ← phi( form_control::@1/(byte*) form_control::field#5 )
  (number~) form_control::$13 ← *((byte*) form_control::field#1) | (number) $80
  *((byte*) form_control::field#1) ← (number~) form_control::$13
  to:form_control::@3
form_control::@8: scope:[form_control]  from form_control::@1
  (signed byte) form_cursor_count#54 ← phi( form_control::@1/(signed byte) form_cursor_count#15 )
  (byte) form_field_idx#55 ← phi( form_control::@1/(byte) form_field_idx#57 )
  (byte) keyboard_modifiers#65 ← phi( form_control::@1/(byte) keyboard_modifiers#81 )
  (byte) keyboard_events_size#66 ← phi( form_control::@1/(byte) keyboard_events_size#85 )
  (byte*) form_control::field#2 ← phi( form_control::@1/(byte*) form_control::field#5 )
  (number~) form_control::$12 ← *((byte*) form_control::field#2) & (number) $7f
  *((byte*) form_control::field#2) ← (number~) form_control::$12
  to:form_control::@3
form_control::@3: scope:[form_control]  from form_control::@2 form_control::@8
  (signed byte) form_cursor_count#51 ← phi( form_control::@2/(signed byte) form_cursor_count#53 form_control::@8/(signed byte) form_cursor_count#54 )
  (byte) form_field_idx#51 ← phi( form_control::@2/(byte) form_field_idx#54 form_control::@8/(byte) form_field_idx#55 )
  (byte*) form_control::field#14 ← phi( form_control::@2/(byte*) form_control::field#1 form_control::@8/(byte*) form_control::field#2 )
  (byte) keyboard_modifiers#45 ← phi( form_control::@2/(byte) keyboard_modifiers#64 form_control::@8/(byte) keyboard_modifiers#65 )
  (byte) keyboard_events_size#48 ← phi( form_control::@2/(byte) keyboard_events_size#65 form_control::@8/(byte) keyboard_events_size#66 )
  call keyboard_event_scan 
  to:form_control::@23
form_control::@23: scope:[form_control]  from form_control::@3
  (signed byte) form_cursor_count#49 ← phi( form_control::@3/(signed byte) form_cursor_count#51 )
  (byte) form_field_idx#47 ← phi( form_control::@3/(byte) form_field_idx#51 )
  (byte*) form_control::field#12 ← phi( form_control::@3/(byte*) form_control::field#14 )
  (byte) keyboard_modifiers#29 ← phi( form_control::@3/(byte) keyboard_modifiers#6 )
  (byte) keyboard_events_size#33 ← phi( form_control::@3/(byte) keyboard_events_size#3 )
  (byte) keyboard_events_size#14 ← (byte) keyboard_events_size#33
  (byte) keyboard_modifiers#14 ← (byte) keyboard_modifiers#29
  call keyboard_event_get 
  (byte) keyboard_event_get::return#4 ← (byte) keyboard_event_get::return#2
  to:form_control::@24
form_control::@24: scope:[form_control]  from form_control::@23
  (signed byte) form_cursor_count#46 ← phi( form_control::@23/(signed byte) form_cursor_count#49 )
  (byte) form_field_idx#41 ← phi( form_control::@23/(byte) form_field_idx#47 )
  (byte) keyboard_modifiers#46 ← phi( form_control::@23/(byte) keyboard_modifiers#14 )
  (byte*) form_control::field#6 ← phi( form_control::@23/(byte*) form_control::field#12 )
  (byte) keyboard_events_size#34 ← phi( form_control::@23/(byte) keyboard_events_size#5 )
  (byte) keyboard_event_get::return#7 ← phi( form_control::@23/(byte) keyboard_event_get::return#4 )
  (byte~) form_control::$5 ← (byte) keyboard_event_get::return#7
  (byte) keyboard_events_size#15 ← (byte) keyboard_events_size#34
  (byte) form_control::key_event#0 ← (byte~) form_control::$5
  (bool~) form_control::$6 ← (byte) form_control::key_event#0 == (const nomodify byte) KEY_CRSR_DOWN
  (bool~) form_control::$7 ← ! (bool~) form_control::$6
  if((bool~) form_control::$7) goto form_control::@4
  to:form_control::@9
form_control::@4: scope:[form_control]  from form_control::@24
  (byte*) form_control::field#15 ← phi( form_control::@24/(byte*) form_control::field#6 )
  (byte) keyboard_events_size#87 ← phi( form_control::@24/(byte) keyboard_events_size#15 )
  (signed byte) form_cursor_count#41 ← phi( form_control::@24/(signed byte) form_cursor_count#46 )
  (byte) form_field_idx#42 ← phi( form_control::@24/(byte) form_field_idx#41 )
  (byte) keyboard_modifiers#51 ← phi( form_control::@24/(byte) keyboard_modifiers#46 )
  (byte) form_control::key_event#1 ← phi( form_control::@24/(byte) form_control::key_event#0 )
  (bool~) form_control::$8 ← (byte) form_control::key_event#1 == (const nomodify byte) KEY_CRSR_RIGHT
  (bool~) form_control::$9 ← ! (bool~) form_control::$8
  if((bool~) form_control::$9) goto form_control::@5
  to:form_control::@12
form_control::@9: scope:[form_control]  from form_control::@24
  (byte) keyboard_events_size#86 ← phi( form_control::@24/(byte) keyboard_events_size#15 )
  (byte) form_field_idx#29 ← phi( form_control::@24/(byte) form_field_idx#41 )
  (byte) keyboard_modifiers#30 ← phi( form_control::@24/(byte) keyboard_modifiers#46 )
  (byte*) form_control::field#3 ← phi( form_control::@24/(byte*) form_control::field#6 )
  (number~) form_control::$14 ← *((byte*) form_control::field#3) & (number) $7f
  *((byte*) form_control::field#3) ← (number~) form_control::$14
  (byte~) form_control::$15 ← (byte) keyboard_modifiers#30 & (const nomodify byte) KEY_MODIFIER_SHIFT
  (bool~) form_control::$16 ← (byte~) form_control::$15 == (number) 0
  if((bool~) form_control::$16) goto form_control::@16
  to:form_control::@10
form_control::@16: scope:[form_control]  from form_control::@9
  (byte) keyboard_modifiers#68 ← phi( form_control::@9/(byte) keyboard_modifiers#30 )
  (byte) keyboard_events_size#69 ← phi( form_control::@9/(byte) keyboard_events_size#86 )
  (byte) form_field_idx#16 ← phi( form_control::@9/(byte) form_field_idx#29 )
  (byte) form_field_idx#5 ← ++ (byte) form_field_idx#16
  (bool~) form_control::$20 ← (byte) form_field_idx#5 == (const byte) form_fields_cnt
  (bool~) form_control::$21 ← ! (bool~) form_control::$20
  if((bool~) form_control::$21) goto form_control::@17
  to:form_control::@18
form_control::@10: scope:[form_control]  from form_control::@9
  (byte) keyboard_modifiers#66 ← phi( form_control::@9/(byte) keyboard_modifiers#30 )
  (byte) keyboard_events_size#67 ← phi( form_control::@9/(byte) keyboard_events_size#86 )
  (byte) form_field_idx#17 ← phi( form_control::@9/(byte) form_field_idx#29 )
  (byte) form_field_idx#6 ← -- (byte) form_field_idx#17
  (bool~) form_control::$17 ← (byte) form_field_idx#6 == (number) $ff
  (bool~) form_control::$18 ← ! (bool~) form_control::$17
  if((bool~) form_control::$18) goto form_control::@17
  to:form_control::@11
form_control::@11: scope:[form_control]  from form_control::@10
  (byte) keyboard_modifiers#67 ← phi( form_control::@10/(byte) keyboard_modifiers#66 )
  (byte) keyboard_events_size#68 ← phi( form_control::@10/(byte) keyboard_events_size#67 )
  (number~) form_control::$19 ← (const byte) form_fields_cnt - (number) 1
  (byte) form_field_idx#7 ← (number~) form_control::$19
  to:form_control::@17
form_control::@17: scope:[form_control]  from form_control::@10 form_control::@11 form_control::@16 form_control::@18
  (byte) form_field_idx#31 ← phi( form_control::@10/(byte) form_field_idx#6 form_control::@11/(byte) form_field_idx#7 form_control::@16/(byte) form_field_idx#5 form_control::@18/(byte) form_field_idx#8 )
  (byte) keyboard_modifiers#48 ← phi( form_control::@10/(byte) keyboard_modifiers#66 form_control::@11/(byte) keyboard_modifiers#67 form_control::@16/(byte) keyboard_modifiers#68 form_control::@18/(byte) keyboard_modifiers#69 )
  (byte) keyboard_events_size#50 ← phi( form_control::@10/(byte) keyboard_events_size#67 form_control::@11/(byte) keyboard_events_size#68 form_control::@16/(byte) keyboard_events_size#69 form_control::@18/(byte) keyboard_events_size#70 )
  (signed byte) form_cursor_count#7 ← (const nomodify signed byte) FORM_CURSOR_BLINK/(number) 2
  (byte) form_control::return#1 ← (number) 0
  to:form_control::@return
form_control::@18: scope:[form_control]  from form_control::@16
  (byte) keyboard_modifiers#69 ← phi( form_control::@16/(byte) keyboard_modifiers#68 )
  (byte) keyboard_events_size#70 ← phi( form_control::@16/(byte) keyboard_events_size#69 )
  (byte) form_field_idx#8 ← (number) 0
  to:form_control::@17
form_control::@return: scope:[form_control]  from form_control::@15 form_control::@17 form_control::@20 form_control::@6
  (byte) form_field_idx#18 ← phi( form_control::@15/(byte) form_field_idx#30 form_control::@17/(byte) form_field_idx#31 form_control::@20/(byte) form_field_idx#22 form_control::@6/(byte) form_field_idx#32 )
  (byte) keyboard_modifiers#31 ← phi( form_control::@15/(byte) keyboard_modifiers#47 form_control::@17/(byte) keyboard_modifiers#48 form_control::@20/(byte) keyboard_modifiers#49 form_control::@6/(byte) keyboard_modifiers#50 )
  (byte) keyboard_events_size#35 ← phi( form_control::@15/(byte) keyboard_events_size#49 form_control::@17/(byte) keyboard_events_size#50 form_control::@20/(byte) keyboard_events_size#51 form_control::@6/(byte) keyboard_events_size#52 )
  (signed byte) form_cursor_count#16 ← phi( form_control::@15/(signed byte) form_cursor_count#23 form_control::@17/(signed byte) form_cursor_count#7 form_control::@20/(signed byte) form_cursor_count#24 form_control::@6/(signed byte) form_cursor_count#25 )
  (byte) form_control::return#7 ← phi( form_control::@15/(byte) form_control::return#5 form_control::@17/(byte) form_control::return#1 form_control::@20/(byte) form_control::return#3 form_control::@6/(byte) form_control::return#4 )
  (byte) form_control::return#2 ← (byte) form_control::return#7
  (signed byte) form_cursor_count#8 ← (signed byte) form_cursor_count#16
  (byte) keyboard_events_size#16 ← (byte) keyboard_events_size#35
  (byte) keyboard_modifiers#15 ← (byte) keyboard_modifiers#31
  (byte) form_field_idx#9 ← (byte) form_field_idx#18
  return 
  to:@return
form_control::@5: scope:[form_control]  from form_control::@4
  (byte) form_field_idx#43 ← phi( form_control::@4/(byte) form_field_idx#42 )
  (byte) keyboard_modifiers#74 ← phi( form_control::@4/(byte) keyboard_modifiers#51 )
  (byte) keyboard_events_size#75 ← phi( form_control::@4/(byte) keyboard_events_size#87 )
  (signed byte) form_cursor_count#37 ← phi( form_control::@4/(signed byte) form_cursor_count#41 )
  (byte) form_control::key_event#2 ← phi( form_control::@4/(byte) form_control::key_event#1 )
  (bool~) form_control::$10 ← (byte) form_control::key_event#2 == (const nomodify byte) KEY_SPACE
  (bool~) form_control::$11 ← ! (bool~) form_control::$10
  if((bool~) form_control::$11) goto form_control::@6
  to:form_control::@15
form_control::@12: scope:[form_control]  from form_control::@4
  (byte) keyboard_events_size#88 ← phi( form_control::@4/(byte) keyboard_events_size#87 )
  (signed byte) form_cursor_count#42 ← phi( form_control::@4/(signed byte) form_cursor_count#41 )
  (byte*) form_control::field#13 ← phi( form_control::@4/(byte*) form_control::field#15 )
  (byte) form_field_idx#33 ← phi( form_control::@4/(byte) form_field_idx#42 )
  (byte) keyboard_modifiers#32 ← phi( form_control::@4/(byte) keyboard_modifiers#51 )
  (byte~) form_control::$22 ← (byte) keyboard_modifiers#32 & (const nomodify byte) KEY_MODIFIER_SHIFT
  (bool~) form_control::$23 ← (byte~) form_control::$22 == (number) 0
  if((bool~) form_control::$23) goto form_control::@19
  to:form_control::@13
form_control::@19: scope:[form_control]  from form_control::@12
  (byte) keyboard_modifiers#72 ← phi( form_control::@12/(byte) keyboard_modifiers#32 )
  (byte) keyboard_events_size#73 ← phi( form_control::@12/(byte) keyboard_events_size#88 )
  (signed byte) form_cursor_count#35 ← phi( form_control::@12/(signed byte) form_cursor_count#42 )
  (byte*) form_control::field#9 ← phi( form_control::@12/(byte*) form_control::field#13 )
  (byte) form_field_idx#19 ← phi( form_control::@12/(byte) form_field_idx#33 )
  *((const byte*) form_fields_val + (byte) form_field_idx#19) ← ++ *((const byte*) form_fields_val + (byte) form_field_idx#19)
  (bool~) form_control::$26 ← *((const byte*) form_fields_val + (byte) form_field_idx#19) > *((const byte*) form_fields_max + (byte) form_field_idx#19)
  (bool~) form_control::$27 ← ! (bool~) form_control::$26
  if((bool~) form_control::$27) goto form_control::@20
  to:form_control::@21
form_control::@13: scope:[form_control]  from form_control::@12
  (byte) keyboard_modifiers#70 ← phi( form_control::@12/(byte) keyboard_modifiers#32 )
  (byte) keyboard_events_size#71 ← phi( form_control::@12/(byte) keyboard_events_size#88 )
  (signed byte) form_cursor_count#33 ← phi( form_control::@12/(signed byte) form_cursor_count#42 )
  (byte*) form_control::field#7 ← phi( form_control::@12/(byte*) form_control::field#13 )
  (byte) form_field_idx#20 ← phi( form_control::@12/(byte) form_field_idx#33 )
  *((const byte*) form_fields_val + (byte) form_field_idx#20) ← -- *((const byte*) form_fields_val + (byte) form_field_idx#20)
  (bool~) form_control::$24 ← *((const byte*) form_fields_val + (byte) form_field_idx#20) == (number) $ff
  (bool~) form_control::$25 ← ! (bool~) form_control::$24
  if((bool~) form_control::$25) goto form_control::@20
  to:form_control::@14
form_control::@14: scope:[form_control]  from form_control::@13
  (byte) keyboard_modifiers#71 ← phi( form_control::@13/(byte) keyboard_modifiers#70 )
  (byte) keyboard_events_size#72 ← phi( form_control::@13/(byte) keyboard_events_size#71 )
  (signed byte) form_cursor_count#34 ← phi( form_control::@13/(signed byte) form_cursor_count#33 )
  (byte*) form_control::field#8 ← phi( form_control::@13/(byte*) form_control::field#7 )
  (byte) form_field_idx#21 ← phi( form_control::@13/(byte) form_field_idx#20 )
  *((const byte*) form_fields_val + (byte) form_field_idx#21) ← *((const byte*) form_fields_max + (byte) form_field_idx#21)
  to:form_control::@20
form_control::@20: scope:[form_control]  from form_control::@13 form_control::@14 form_control::@19 form_control::@21
  (byte) keyboard_modifiers#49 ← phi( form_control::@13/(byte) keyboard_modifiers#70 form_control::@14/(byte) keyboard_modifiers#71 form_control::@19/(byte) keyboard_modifiers#72 form_control::@21/(byte) keyboard_modifiers#73 )
  (byte) keyboard_events_size#51 ← phi( form_control::@13/(byte) keyboard_events_size#71 form_control::@14/(byte) keyboard_events_size#72 form_control::@19/(byte) keyboard_events_size#73 form_control::@21/(byte) keyboard_events_size#74 )
  (signed byte) form_cursor_count#24 ← phi( form_control::@13/(signed byte) form_cursor_count#33 form_control::@14/(signed byte) form_cursor_count#34 form_control::@19/(signed byte) form_cursor_count#35 form_control::@21/(signed byte) form_cursor_count#36 )
  (byte*) form_control::field#4 ← phi( form_control::@13/(byte*) form_control::field#7 form_control::@14/(byte*) form_control::field#8 form_control::@19/(byte*) form_control::field#9 form_control::@21/(byte*) form_control::field#10 )
  (byte) form_field_idx#22 ← phi( form_control::@13/(byte) form_field_idx#20 form_control::@14/(byte) form_field_idx#21 form_control::@19/(byte) form_field_idx#19 form_control::@21/(byte) form_field_idx#23 )
  *((byte*) form_control::field#4) ← *((const to_nomodify byte*) print_hextab + *((const byte*) form_fields_val + (byte) form_field_idx#22))
  (byte) form_control::return#3 ← (number) 0
  to:form_control::@return
form_control::@21: scope:[form_control]  from form_control::@19
  (byte) keyboard_modifiers#73 ← phi( form_control::@19/(byte) keyboard_modifiers#72 )
  (byte) keyboard_events_size#74 ← phi( form_control::@19/(byte) keyboard_events_size#73 )
  (signed byte) form_cursor_count#36 ← phi( form_control::@19/(signed byte) form_cursor_count#35 )
  (byte*) form_control::field#10 ← phi( form_control::@19/(byte*) form_control::field#9 )
  (byte) form_field_idx#23 ← phi( form_control::@19/(byte) form_field_idx#19 )
  *((const byte*) form_fields_val + (byte) form_field_idx#23) ← (number) 0
  to:form_control::@20
form_control::@6: scope:[form_control]  from form_control::@5
  (byte) form_field_idx#32 ← phi( form_control::@5/(byte) form_field_idx#43 )
  (byte) keyboard_modifiers#50 ← phi( form_control::@5/(byte) keyboard_modifiers#74 )
  (byte) keyboard_events_size#52 ← phi( form_control::@5/(byte) keyboard_events_size#75 )
  (signed byte) form_cursor_count#25 ← phi( form_control::@5/(signed byte) form_cursor_count#37 )
  (byte) form_control::return#4 ← (number) 0
  to:form_control::@return
form_control::@15: scope:[form_control]  from form_control::@5
  (byte) form_field_idx#30 ← phi( form_control::@5/(byte) form_field_idx#43 )
  (byte) keyboard_modifiers#47 ← phi( form_control::@5/(byte) keyboard_modifiers#74 )
  (byte) keyboard_events_size#49 ← phi( form_control::@5/(byte) keyboard_events_size#75 )
  (signed byte) form_cursor_count#23 ← phi( form_control::@5/(signed byte) form_cursor_count#37 )
  (byte) form_control::return#5 ← (number) $ff
  to:form_control::@return
@4: scope:[]  from @3
  (byte) form_field_idx#34 ← phi( @3/(byte) form_field_idx#4 )
  (byte) keyboard_modifiers#52 ← phi( @3/(byte) keyboard_modifiers#75 )
  (byte) keyboard_events_size#53 ← phi( @3/(byte) keyboard_events_size#76 )
  (signed byte) form_cursor_count#26 ← phi( @3/(signed byte) form_cursor_count#4 )
  (byte*) print_char_cursor#50 ← phi( @3/(byte*) print_char_cursor#60 )
  (byte*) print_line_cursor#44 ← phi( @3/(byte*) print_line_cursor#53 )
  (byte*) print_screen#24 ← phi( @3/(byte*) print_screen#32 )
  call main 
  to:@5
@5: scope:[]  from @4
  (byte) form_field_idx#24 ← phi( @4/(byte) form_field_idx#1 )
  (byte) keyboard_modifiers#33 ← phi( @4/(byte) keyboard_modifiers#9 )
  (byte) keyboard_events_size#36 ← phi( @4/(byte) keyboard_events_size#8 )
  (signed byte) form_cursor_count#17 ← phi( @4/(signed byte) form_cursor_count#1 )
  (byte*) print_char_cursor#40 ← phi( @4/(byte*) print_char_cursor#13 )
  (byte*) print_line_cursor#35 ← phi( @4/(byte*) print_line_cursor#10 )
  (byte*) print_screen#17 ← phi( @4/(byte*) print_screen#4 )
  (byte*) print_screen#8 ← (byte*) print_screen#17
  (byte*) print_line_cursor#18 ← (byte*) print_line_cursor#35
  (byte*) print_char_cursor#21 ← (byte*) print_char_cursor#40
  (signed byte) form_cursor_count#9 ← (signed byte) form_cursor_count#17
  (byte) keyboard_events_size#17 ← (byte) keyboard_events_size#36
  (byte) keyboard_modifiers#16 ← (byte) keyboard_modifiers#33
  (byte) form_field_idx#10 ← (byte) form_field_idx#24
  to:@end
@end: scope:[]  from @5

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @3
(label) @4
(label) @5
(label) @begin
(label) @end
(const nomodify byte*) CHARGEN = (byte*)(number) $d000
(const nomodify struct MOS6526_CIA*) CIA1 = (struct MOS6526_CIA*)(number) $dc00
(const nomodify struct MOS6526_CIA*) CIA2 = (struct MOS6526_CIA*)(number) $dd00
(const nomodify byte*) COLS = (byte*)(number) $d800
(const nomodify byte) DTV_BORDER_OFF = (byte) 2
(const nomodify byte) DTV_CHUNKY = (byte) $40
(const nomodify byte) DTV_COLORRAM_OFF = (byte) $10
(const nomodify dword) DTV_COLOR_BANK_DEFAULT = (dword) $1d800
(const nomodify byte*) DTV_COLOR_BANK_HI = (byte*)(number) $d037
(const nomodify byte*) DTV_COLOR_BANK_LO = (byte*)(number) $d036
(const nomodify byte*) DTV_CONTROL = (byte*)(number) $d03c
(const nomodify byte*) DTV_FEATURE = (byte*)(number) $d03f
(const nomodify byte) DTV_FEATURE_ENABLE = (byte) 1
(const nomodify byte*) DTV_GRAPHICS_VIC_BANK = (byte*)(number) $d03d
(const nomodify byte) DTV_HIGHCOLOR = (byte) 4
(const nomodify byte) DTV_LINEAR = (byte) 1
(const nomodify byte) DTV_OVERSCAN = (byte) 8
(const nomodify byte*) DTV_PALETTE = (byte*)(number) $d200
(const byte*) DTV_PALETTE_DEFAULT[(number) $10]  = { (byte) 0, (byte) $f, (byte) $36, (byte) $be, (byte) $58, (byte) $db, (byte) $86, (byte) $ff, (byte) $29, (byte) $26, (byte) $3b, (byte) 5, (byte) 7, (byte) $df, (byte) $9a, (byte) $a }
(const nomodify byte*) DTV_PLANEA_MODULO_HI = (byte*)(number) $d039
(const nomodify byte*) DTV_PLANEA_MODULO_LO = (byte*)(number) $d038
(const nomodify byte*) DTV_PLANEA_START_HI = (byte*)(number) $d045
(const nomodify byte*) DTV_PLANEA_START_LO = (byte*)(number) $d03a
(const nomodify byte*) DTV_PLANEA_START_MI = (byte*)(number) $d03b
(const nomodify byte*) DTV_PLANEA_STEP = (byte*)(number) $d046
(const nomodify byte*) DTV_PLANEB_MODULO_HI = (byte*)(number) $d048
(const nomodify byte*) DTV_PLANEB_MODULO_LO = (byte*)(number) $d047
(const nomodify byte*) DTV_PLANEB_START_HI = (byte*)(number) $d04b
(const nomodify byte*) DTV_PLANEB_START_LO = (byte*)(number) $d049
(const nomodify byte*) DTV_PLANEB_START_MI = (byte*)(number) $d04a
(const nomodify byte*) DTV_PLANEB_STEP = (byte*)(number) $d04c
(const nomodify byte*) FORM_CHARSET = (byte*)(number) $1800
(const byte*) FORM_COLS[]  = (byte*) "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@                                        @aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@                                        @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm              @ nnnnnnnnnnnn                jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"
(const nomodify signed byte) FORM_CURSOR_BLINK = (signed byte) $28
(const nomodify byte*) FORM_SCREEN = (byte*)(number) $400
(const byte*) FORM_TEXT[]  = (byte*) " C64 DTV Graphics Mode Explorer         @                                        @ PRESET 0 Standard Charset              @                                        @ CONTROL        PLANE  A     VIC II     @ bmm        0   pattern p0   screen s0  @ mcm        0   start   00   gfx    g0  @ ecm        0   step    00   colors c0  @ hicolor    0   modulo  00              @ linear     0                COLORS     @ color off  0   PLANE  B     palet   0  @ chunky     0   pattern p0   bgcol0 00  @ border off 0   start   00   bgcol1 00  @ overscan   0   step    00   bgcol2 00  @                modulo  00   bgcol3 00  @"
(const nomodify byte) KEY_COMMODORE = (byte) $3d
(const nomodify byte) KEY_CRSR_DOWN = (byte) 7
(const nomodify byte) KEY_CRSR_RIGHT = (byte) 2
(const nomodify byte) KEY_CTRL = (byte) $3a
(const nomodify byte) KEY_LSHIFT = (byte) $f
(const nomodify byte) KEY_MODIFIER_COMMODORE = (byte) 8
(const nomodify byte) KEY_MODIFIER_CTRL = (byte) 4
(const nomodify byte) KEY_MODIFIER_LSHIFT = (byte) 1
(const nomodify byte) KEY_MODIFIER_RSHIFT = (byte) 2
(const nomodify byte) KEY_MODIFIER_SHIFT = (const nomodify byte) KEY_MODIFIER_LSHIFT|(const nomodify byte) KEY_MODIFIER_RSHIFT
(const nomodify byte) KEY_RSHIFT = (byte) $34
(const nomodify byte) KEY_SPACE = (byte) $3c
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6569_VICII::BG_COLOR
(byte) MOS6569_VICII::BG_COLOR1
(byte) MOS6569_VICII::BG_COLOR2
(byte) MOS6569_VICII::BG_COLOR3
(byte) MOS6569_VICII::BORDER_COLOR
(byte) MOS6569_VICII::CONTROL1
(byte) MOS6569_VICII::CONTROL2
(byte) MOS6569_VICII::IRQ_ENABLE
(byte) MOS6569_VICII::IRQ_STATUS
(byte) MOS6569_VICII::LIGHTPEN_X
(byte) MOS6569_VICII::LIGHTPEN_Y
(byte) MOS6569_VICII::MEMORY
(byte) MOS6569_VICII::RASTER
(byte) MOS6569_VICII::SPRITE0_COLOR
(byte) MOS6569_VICII::SPRITE0_X
(byte) MOS6569_VICII::SPRITE0_Y
(byte) MOS6569_VICII::SPRITE1_COLOR
(byte) MOS6569_VICII::SPRITE1_X
(byte) MOS6569_VICII::SPRITE1_Y
(byte) MOS6569_VICII::SPRITE2_COLOR
(byte) MOS6569_VICII::SPRITE2_X
(byte) MOS6569_VICII::SPRITE2_Y
(byte) MOS6569_VICII::SPRITE3_COLOR
(byte) MOS6569_VICII::SPRITE3_X
(byte) MOS6569_VICII::SPRITE3_Y
(byte) MOS6569_VICII::SPRITE4_COLOR
(byte) MOS6569_VICII::SPRITE4_X
(byte) MOS6569_VICII::SPRITE4_Y
(byte) MOS6569_VICII::SPRITE5_COLOR
(byte) MOS6569_VICII::SPRITE5_X
(byte) MOS6569_VICII::SPRITE5_Y
(byte) MOS6569_VICII::SPRITE6_COLOR
(byte) MOS6569_VICII::SPRITE6_X
(byte) MOS6569_VICII::SPRITE6_Y
(byte) MOS6569_VICII::SPRITE7_COLOR
(byte) MOS6569_VICII::SPRITE7_X
(byte) MOS6569_VICII::SPRITE7_Y
(byte) MOS6569_VICII::SPRITES_BG_COLLISION
(byte) MOS6569_VICII::SPRITES_COLLISION
(byte) MOS6569_VICII::SPRITES_ENABLE
(byte) MOS6569_VICII::SPRITES_EXPAND_X
(byte) MOS6569_VICII::SPRITES_EXPAND_Y
(byte) MOS6569_VICII::SPRITES_MC
(byte) MOS6569_VICII::SPRITES_MCOLOR1
(byte) MOS6569_VICII::SPRITES_MCOLOR2
(byte) MOS6569_VICII::SPRITES_PRIORITY
(byte) MOS6569_VICII::SPRITES_XMSB
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A = (byte) 0
(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR = (byte) 2
(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_B = (byte) 1
(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_B_DDR = (byte) 3
(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR = (byte) $21
(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR1 = (byte) $22
(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR2 = (byte) $23
(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR3 = (byte) $24
(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = (byte) $20
(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1 = (byte) $11
(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL2 = (byte) $16
(const byte) OFFSET_STRUCT_MOS6569_VICII_MEMORY = (byte) $18
(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER = (byte) $12
(const nomodify dword) PLANE_8BPP_CHUNKY = (dword) $20000
(const nomodify dword) PLANE_BLANK = (dword) $38000
(const nomodify dword) PLANE_CHARSET8 = (dword) $3c000
(const nomodify dword) PLANE_FULL = (dword) $3a000
(const nomodify dword) PLANE_HORISONTAL = (dword) $30000
(const nomodify dword) PLANE_HORISONTAL2 = (dword) $34000
(const nomodify dword) PLANE_VERTICAL = (dword) $32000
(const nomodify dword) PLANE_VERTICAL2 = (dword) $36000
(const nomodify byte*) PROCPORT = (byte*)(number) 1
(const nomodify byte*) PROCPORT_DDR = (byte*)(number) 0
(const nomodify byte) PROCPORT_DDR_MEMORY_MASK = (byte) 7
(const nomodify byte) PROCPORT_RAM_CHARROM = (byte) 1
(const nomodify byte) PROCPORT_RAM_IO = (byte) 5
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(const nomodify struct MOS6569_VICII*) VICII = (struct MOS6569_VICII*)(number) $d000
(const nomodify byte*) VIC_BITMAP = (byte*)(number) $6000
(const nomodify byte) VIC_BMM = (byte) $20
(const nomodify byte*) VIC_CHARSET_ROM = (byte*)(number) $5800
(const nomodify byte*) VIC_CONTROL = (byte*)(number) $d011
(const nomodify byte*) VIC_CONTROL2 = (byte*)(number) $d016
(const nomodify byte) VIC_CSEL = (byte) 8
(const nomodify byte) VIC_DEN = (byte) $10
(const nomodify byte) VIC_ECM = (byte) $40
(const nomodify byte) VIC_MCM = (byte) $10
(const nomodify byte*) VIC_MEMORY = (byte*)(number) $d018
(const nomodify byte) VIC_RSEL = (byte) 8
(const nomodify byte*) VIC_SCREEN0 = (byte*)(number) $4000
(const nomodify byte*) VIC_SCREEN1 = (byte*)(number) $4400
(const nomodify byte*) VIC_SCREEN2 = (byte*)(number) $4800
(const nomodify byte*) VIC_SCREEN3 = (byte*)(number) $4c00
(const nomodify byte*) VIC_SCREEN4 = (byte*)(number) $5000
(void()) apply_preset((byte) apply_preset::idx)
(bool~) apply_preset::$0
(bool~) apply_preset::$1
(bool~) apply_preset::$10
(bool~) apply_preset::$11
(bool~) apply_preset::$2
(bool~) apply_preset::$3
(bool~) apply_preset::$4
(bool~) apply_preset::$5
(bool~) apply_preset::$6
(bool~) apply_preset::$7
(bool~) apply_preset::$8
(bool~) apply_preset::$9
(label) apply_preset::@1
(label) apply_preset::@10
(label) apply_preset::@11
(label) apply_preset::@12
(label) apply_preset::@13
(label) apply_preset::@14
(label) apply_preset::@15
(label) apply_preset::@16
(label) apply_preset::@17
(label) apply_preset::@18
(label) apply_preset::@19
(label) apply_preset::@2
(label) apply_preset::@20
(label) apply_preset::@21
(label) apply_preset::@22
(label) apply_preset::@23
(label) apply_preset::@24
(label) apply_preset::@25
(label) apply_preset::@3
(label) apply_preset::@4
(label) apply_preset::@5
(label) apply_preset::@6
(label) apply_preset::@7
(label) apply_preset::@8
(label) apply_preset::@9
(label) apply_preset::@return
(byte) apply_preset::i
(byte) apply_preset::i#0
(byte) apply_preset::i#1
(byte) apply_preset::i#2
(byte) apply_preset::i#3
(byte) apply_preset::idx
(byte) apply_preset::idx#0
(byte) apply_preset::idx#1
(byte) apply_preset::idx#10
(byte) apply_preset::idx#11
(byte) apply_preset::idx#2
(byte) apply_preset::idx#3
(byte) apply_preset::idx#4
(byte) apply_preset::idx#5
(byte) apply_preset::idx#6
(byte) apply_preset::idx#7
(byte) apply_preset::idx#8
(byte) apply_preset::idx#9
(byte*) apply_preset::preset
(byte*) apply_preset::preset#0
(byte*) apply_preset::preset#1
(byte*) apply_preset::preset#10
(byte*) apply_preset::preset#11
(byte*) apply_preset::preset#12
(byte*) apply_preset::preset#13
(byte*) apply_preset::preset#14
(byte*) apply_preset::preset#15
(byte*) apply_preset::preset#2
(byte*) apply_preset::preset#3
(byte*) apply_preset::preset#4
(byte*) apply_preset::preset#5
(byte*) apply_preset::preset#6
(byte*) apply_preset::preset#7
(byte*) apply_preset::preset#8
(byte*) apply_preset::preset#9
(void()) bitmap_clear()
(bool~) bitmap_clear::$0
(bool~) bitmap_clear::$1
(label) bitmap_clear::@1
(label) bitmap_clear::@2
(label) bitmap_clear::@3
(label) bitmap_clear::@return
(byte*) bitmap_clear::bitmap
(byte*) bitmap_clear::bitmap#0
(byte*) bitmap_clear::bitmap#1
(byte*) bitmap_clear::bitmap#2
(byte*) bitmap_clear::bitmap#3
(byte*) bitmap_clear::bitmap#4
(byte) bitmap_clear::x
(byte) bitmap_clear::x#0
(byte) bitmap_clear::x#1
(byte) bitmap_clear::x#2
(byte) bitmap_clear::y
(byte) bitmap_clear::y#0
(byte) bitmap_clear::y#1
(byte) bitmap_clear::y#2
(byte) bitmap_clear::y#3
(byte) bitmap_clear::y#4
(void()) bitmap_init((byte*) bitmap_init::bitmap)
(number~) bitmap_init::$0
(byte~) bitmap_init::$1
(number~) bitmap_init::$10
(bool~) bitmap_init::$11
(bool~) bitmap_init::$12
(byte*~) bitmap_init::$13
(bool~) bitmap_init::$14
(byte~) bitmap_init::$2
(bool~) bitmap_init::$3
(bool~) bitmap_init::$4
(bool~) bitmap_init::$5
(number~) bitmap_init::$6
(byte~) bitmap_init::$7
(number~) bitmap_init::$8
(byte~) bitmap_init::$9
(label) bitmap_init::@1
(label) bitmap_init::@2
(label) bitmap_init::@3
(label) bitmap_init::@4
(label) bitmap_init::@5
(label) bitmap_init::@6
(label) bitmap_init::@7
(label) bitmap_init::@return
(byte*) bitmap_init::bitmap
(byte*) bitmap_init::bitmap#0
(byte*) bitmap_init::bitmap#1
(byte*) bitmap_init::bitmap#2
(byte*) bitmap_init::bitmap#3
(byte*) bitmap_init::bitmap#4
(byte) bitmap_init::bits
(byte) bitmap_init::bits#0
(byte) bitmap_init::bits#1
(byte) bitmap_init::bits#2
(byte) bitmap_init::bits#3
(byte) bitmap_init::bits#4
(byte) bitmap_init::x
(byte) bitmap_init::x#0
(byte) bitmap_init::x#1
(byte) bitmap_init::x#2
(byte) bitmap_init::x#3
(byte) bitmap_init::x#4
(byte) bitmap_init::y
(byte) bitmap_init::y#0
(byte) bitmap_init::y#1
(byte) bitmap_init::y#2
(byte) bitmap_init::y#3
(byte) bitmap_init::y#4
(byte*) bitmap_init::yoffs
(byte*) bitmap_init::yoffs#0
(byte*) bitmap_init::yoffs#1
(byte*) bitmap_init::yoffs#2
(byte*) bitmap_init::yoffs#3
(byte*) bitmap_init::yoffs#4
(void()) bitmap_line((byte) bitmap_line::x0 , (byte) bitmap_line::x1 , (byte) bitmap_line::y0 , (byte) bitmap_line::y1)
(bool~) bitmap_line::$0
(byte~) bitmap_line::$1
(byte~) bitmap_line::$11
(bool~) bitmap_line::$12
(byte~) bitmap_line::$13
(bool~) bitmap_line::$14
(byte~) bitmap_line::$17
(bool~) bitmap_line::$18
(bool~) bitmap_line::$2
(byte~) bitmap_line::$3
(bool~) bitmap_line::$4
(byte~) bitmap_line::$7
(bool~) bitmap_line::$8
(label) bitmap_line::@1
(label) bitmap_line::@10
(label) bitmap_line::@11
(label) bitmap_line::@12
(label) bitmap_line::@13
(label) bitmap_line::@14
(label) bitmap_line::@15
(label) bitmap_line::@16
(label) bitmap_line::@17
(label) bitmap_line::@18
(label) bitmap_line::@19
(label) bitmap_line::@2
(label) bitmap_line::@20
(label) bitmap_line::@21
(label) bitmap_line::@22
(label) bitmap_line::@3
(label) bitmap_line::@4
(label) bitmap_line::@5
(label) bitmap_line::@6
(label) bitmap_line::@7
(label) bitmap_line::@8
(label) bitmap_line::@9
(label) bitmap_line::@return
(byte) bitmap_line::x0
(byte) bitmap_line::x0#0
(byte) bitmap_line::x0#1
(byte) bitmap_line::x0#10
(byte) bitmap_line::x0#11
(byte) bitmap_line::x0#12
(byte) bitmap_line::x0#13
(byte) bitmap_line::x0#2
(byte) bitmap_line::x0#3
(byte) bitmap_line::x0#4
(byte) bitmap_line::x0#5
(byte) bitmap_line::x0#6
(byte) bitmap_line::x0#7
(byte) bitmap_line::x0#8
(byte) bitmap_line::x0#9
(byte) bitmap_line::x1
(byte) bitmap_line::x1#0
(byte) bitmap_line::x1#1
(byte) bitmap_line::x1#10
(byte) bitmap_line::x1#11
(byte) bitmap_line::x1#12
(byte) bitmap_line::x1#13
(byte) bitmap_line::x1#2
(byte) bitmap_line::x1#3
(byte) bitmap_line::x1#4
(byte) bitmap_line::x1#5
(byte) bitmap_line::x1#6
(byte) bitmap_line::x1#7
(byte) bitmap_line::x1#8
(byte) bitmap_line::x1#9
(byte) bitmap_line::xd
(byte) bitmap_line::xd#0
(byte) bitmap_line::xd#1
(byte) bitmap_line::xd#10
(byte) bitmap_line::xd#11
(byte) bitmap_line::xd#12
(byte) bitmap_line::xd#13
(byte) bitmap_line::xd#14
(byte) bitmap_line::xd#2
(byte) bitmap_line::xd#3
(byte) bitmap_line::xd#4
(byte) bitmap_line::xd#5
(byte) bitmap_line::xd#6
(byte) bitmap_line::xd#7
(byte) bitmap_line::xd#8
(byte) bitmap_line::xd#9
(byte) bitmap_line::y0
(byte) bitmap_line::y0#0
(byte) bitmap_line::y0#1
(byte) bitmap_line::y0#10
(byte) bitmap_line::y0#11
(byte) bitmap_line::y0#12
(byte) bitmap_line::y0#13
(byte) bitmap_line::y0#2
(byte) bitmap_line::y0#3
(byte) bitmap_line::y0#4
(byte) bitmap_line::y0#5
(byte) bitmap_line::y0#6
(byte) bitmap_line::y0#7
(byte) bitmap_line::y0#8
(byte) bitmap_line::y0#9
(byte) bitmap_line::y1
(byte) bitmap_line::y1#0
(byte) bitmap_line::y1#1
(byte) bitmap_line::y1#10
(byte) bitmap_line::y1#11
(byte) bitmap_line::y1#12
(byte) bitmap_line::y1#13
(byte) bitmap_line::y1#2
(byte) bitmap_line::y1#3
(byte) bitmap_line::y1#4
(byte) bitmap_line::y1#5
(byte) bitmap_line::y1#6
(byte) bitmap_line::y1#7
(byte) bitmap_line::y1#8
(byte) bitmap_line::y1#9
(byte) bitmap_line::yd
(byte) bitmap_line::yd#0
(byte) bitmap_line::yd#1
(byte) bitmap_line::yd#10
(byte) bitmap_line::yd#11
(byte) bitmap_line::yd#12
(byte) bitmap_line::yd#2
(byte) bitmap_line::yd#3
(byte) bitmap_line::yd#4
(byte) bitmap_line::yd#5
(byte) bitmap_line::yd#6
(byte) bitmap_line::yd#7
(byte) bitmap_line::yd#8
(byte) bitmap_line::yd#9
(void()) bitmap_line_xdyd((byte) bitmap_line_xdyd::x , (byte) bitmap_line_xdyd::y , (byte) bitmap_line_xdyd::x1 , (byte) bitmap_line_xdyd::xd , (byte) bitmap_line_xdyd::yd)
(byte~) bitmap_line_xdyd::$0
(byte~) bitmap_line_xdyd::$2
(bool~) bitmap_line_xdyd::$3
(bool~) bitmap_line_xdyd::$4
(byte~) bitmap_line_xdyd::$5
(number~) bitmap_line_xdyd::$6
(bool~) bitmap_line_xdyd::$7
(label) bitmap_line_xdyd::@1
(label) bitmap_line_xdyd::@2
(label) bitmap_line_xdyd::@3
(label) bitmap_line_xdyd::@4
(label) bitmap_line_xdyd::@return
(byte) bitmap_line_xdyd::e
(byte) bitmap_line_xdyd::e#0
(byte) bitmap_line_xdyd::e#1
(byte) bitmap_line_xdyd::e#2
(byte) bitmap_line_xdyd::e#3
(byte) bitmap_line_xdyd::e#4
(byte) bitmap_line_xdyd::e#5
(byte) bitmap_line_xdyd::e#6
(byte) bitmap_line_xdyd::x
(byte) bitmap_line_xdyd::x#0
(byte) bitmap_line_xdyd::x#1
(byte) bitmap_line_xdyd::x#2
(byte) bitmap_line_xdyd::x#3
(byte) bitmap_line_xdyd::x#4
(byte) bitmap_line_xdyd::x#5
(byte) bitmap_line_xdyd::x#6
(byte) bitmap_line_xdyd::x#7
(byte) bitmap_line_xdyd::x1
(byte) bitmap_line_xdyd::x1#0
(byte) bitmap_line_xdyd::x1#1
(byte) bitmap_line_xdyd::x1#2
(byte) bitmap_line_xdyd::x1#3
(byte) bitmap_line_xdyd::x1#4
(byte) bitmap_line_xdyd::x1#5
(byte) bitmap_line_xdyd::x1#6
(byte) bitmap_line_xdyd::xd
(byte) bitmap_line_xdyd::xd#0
(byte) bitmap_line_xdyd::xd#1
(byte) bitmap_line_xdyd::xd#2
(byte) bitmap_line_xdyd::xd#3
(byte) bitmap_line_xdyd::xd#4
(byte) bitmap_line_xdyd::xd#5
(byte) bitmap_line_xdyd::xd#6
(byte) bitmap_line_xdyd::y
(byte) bitmap_line_xdyd::y#0
(byte) bitmap_line_xdyd::y#1
(byte) bitmap_line_xdyd::y#2
(byte) bitmap_line_xdyd::y#3
(byte) bitmap_line_xdyd::y#4
(byte) bitmap_line_xdyd::y#5
(byte) bitmap_line_xdyd::y#6
(byte) bitmap_line_xdyd::y#7
(byte) bitmap_line_xdyd::yd
(byte) bitmap_line_xdyd::yd#0
(byte) bitmap_line_xdyd::yd#1
(byte) bitmap_line_xdyd::yd#2
(byte) bitmap_line_xdyd::yd#3
(byte) bitmap_line_xdyd::yd#4
(byte) bitmap_line_xdyd::yd#5
(byte) bitmap_line_xdyd::yd#6
(void()) bitmap_line_xdyi((byte) bitmap_line_xdyi::x , (byte) bitmap_line_xdyi::y , (byte) bitmap_line_xdyi::x1 , (byte) bitmap_line_xdyi::xd , (byte) bitmap_line_xdyi::yd)
(byte~) bitmap_line_xdyi::$0
(byte~) bitmap_line_xdyi::$2
(bool~) bitmap_line_xdyi::$3
(bool~) bitmap_line_xdyi::$4
(byte~) bitmap_line_xdyi::$5
(number~) bitmap_line_xdyi::$6
(bool~) bitmap_line_xdyi::$7
(label) bitmap_line_xdyi::@1
(label) bitmap_line_xdyi::@2
(label) bitmap_line_xdyi::@3
(label) bitmap_line_xdyi::@4
(label) bitmap_line_xdyi::@return
(byte) bitmap_line_xdyi::e
(byte) bitmap_line_xdyi::e#0
(byte) bitmap_line_xdyi::e#1
(byte) bitmap_line_xdyi::e#2
(byte) bitmap_line_xdyi::e#3
(byte) bitmap_line_xdyi::e#4
(byte) bitmap_line_xdyi::e#5
(byte) bitmap_line_xdyi::e#6
(byte) bitmap_line_xdyi::x
(byte) bitmap_line_xdyi::x#0
(byte) bitmap_line_xdyi::x#1
(byte) bitmap_line_xdyi::x#2
(byte) bitmap_line_xdyi::x#3
(byte) bitmap_line_xdyi::x#4
(byte) bitmap_line_xdyi::x#5
(byte) bitmap_line_xdyi::x#6
(byte) bitmap_line_xdyi::x#7
(byte) bitmap_line_xdyi::x1
(byte) bitmap_line_xdyi::x1#0
(byte) bitmap_line_xdyi::x1#1
(byte) bitmap_line_xdyi::x1#2
(byte) bitmap_line_xdyi::x1#3
(byte) bitmap_line_xdyi::x1#4
(byte) bitmap_line_xdyi::x1#5
(byte) bitmap_line_xdyi::x1#6
(byte) bitmap_line_xdyi::xd
(byte) bitmap_line_xdyi::xd#0
(byte) bitmap_line_xdyi::xd#1
(byte) bitmap_line_xdyi::xd#2
(byte) bitmap_line_xdyi::xd#3
(byte) bitmap_line_xdyi::xd#4
(byte) bitmap_line_xdyi::xd#5
(byte) bitmap_line_xdyi::xd#6
(byte) bitmap_line_xdyi::y
(byte) bitmap_line_xdyi::y#0
(byte) bitmap_line_xdyi::y#1
(byte) bitmap_line_xdyi::y#2
(byte) bitmap_line_xdyi::y#3
(byte) bitmap_line_xdyi::y#4
(byte) bitmap_line_xdyi::y#5
(byte) bitmap_line_xdyi::y#6
(byte) bitmap_line_xdyi::y#7
(byte) bitmap_line_xdyi::yd
(byte) bitmap_line_xdyi::yd#0
(byte) bitmap_line_xdyi::yd#1
(byte) bitmap_line_xdyi::yd#2
(byte) bitmap_line_xdyi::yd#3
(byte) bitmap_line_xdyi::yd#4
(byte) bitmap_line_xdyi::yd#5
(byte) bitmap_line_xdyi::yd#6
(void()) bitmap_line_ydxd((byte) bitmap_line_ydxd::y , (byte) bitmap_line_ydxd::x , (byte) bitmap_line_ydxd::y1 , (byte) bitmap_line_ydxd::yd , (byte) bitmap_line_ydxd::xd)
(byte~) bitmap_line_ydxd::$0
(byte~) bitmap_line_ydxd::$2
(bool~) bitmap_line_ydxd::$3
(bool~) bitmap_line_ydxd::$4
(byte~) bitmap_line_ydxd::$5
(number~) bitmap_line_ydxd::$6
(bool~) bitmap_line_ydxd::$7
(label) bitmap_line_ydxd::@1
(label) bitmap_line_ydxd::@2
(label) bitmap_line_ydxd::@3
(label) bitmap_line_ydxd::@4
(label) bitmap_line_ydxd::@return
(byte) bitmap_line_ydxd::e
(byte) bitmap_line_ydxd::e#0
(byte) bitmap_line_ydxd::e#1
(byte) bitmap_line_ydxd::e#2
(byte) bitmap_line_ydxd::e#3
(byte) bitmap_line_ydxd::e#4
(byte) bitmap_line_ydxd::e#5
(byte) bitmap_line_ydxd::e#6
(byte) bitmap_line_ydxd::x
(byte) bitmap_line_ydxd::x#0
(byte) bitmap_line_ydxd::x#1
(byte) bitmap_line_ydxd::x#2
(byte) bitmap_line_ydxd::x#3
(byte) bitmap_line_ydxd::x#4
(byte) bitmap_line_ydxd::x#5
(byte) bitmap_line_ydxd::x#6
(byte) bitmap_line_ydxd::x#7
(byte) bitmap_line_ydxd::xd
(byte) bitmap_line_ydxd::xd#0
(byte) bitmap_line_ydxd::xd#1
(byte) bitmap_line_ydxd::xd#2
(byte) bitmap_line_ydxd::xd#3
(byte) bitmap_line_ydxd::xd#4
(byte) bitmap_line_ydxd::xd#5
(byte) bitmap_line_ydxd::xd#6
(byte) bitmap_line_ydxd::y
(byte) bitmap_line_ydxd::y#0
(byte) bitmap_line_ydxd::y#1
(byte) bitmap_line_ydxd::y#2
(byte) bitmap_line_ydxd::y#3
(byte) bitmap_line_ydxd::y#4
(byte) bitmap_line_ydxd::y#5
(byte) bitmap_line_ydxd::y#6
(byte) bitmap_line_ydxd::y#7
(byte) bitmap_line_ydxd::y#8
(byte) bitmap_line_ydxd::y1
(byte) bitmap_line_ydxd::y1#0
(byte) bitmap_line_ydxd::y1#1
(byte) bitmap_line_ydxd::y1#2
(byte) bitmap_line_ydxd::y1#3
(byte) bitmap_line_ydxd::y1#4
(byte) bitmap_line_ydxd::y1#5
(byte) bitmap_line_ydxd::y1#6
(byte) bitmap_line_ydxd::yd
(byte) bitmap_line_ydxd::yd#0
(byte) bitmap_line_ydxd::yd#1
(byte) bitmap_line_ydxd::yd#2
(byte) bitmap_line_ydxd::yd#3
(byte) bitmap_line_ydxd::yd#4
(byte) bitmap_line_ydxd::yd#5
(byte) bitmap_line_ydxd::yd#6
(void()) bitmap_line_ydxi((byte) bitmap_line_ydxi::y , (byte) bitmap_line_ydxi::x , (byte) bitmap_line_ydxi::y1 , (byte) bitmap_line_ydxi::yd , (byte) bitmap_line_ydxi::xd)
(byte~) bitmap_line_ydxi::$0
(byte~) bitmap_line_ydxi::$2
(bool~) bitmap_line_ydxi::$3
(bool~) bitmap_line_ydxi::$4
(byte~) bitmap_line_ydxi::$5
(number~) bitmap_line_ydxi::$6
(bool~) bitmap_line_ydxi::$7
(label) bitmap_line_ydxi::@1
(label) bitmap_line_ydxi::@2
(label) bitmap_line_ydxi::@3
(label) bitmap_line_ydxi::@4
(label) bitmap_line_ydxi::@return
(byte) bitmap_line_ydxi::e
(byte) bitmap_line_ydxi::e#0
(byte) bitmap_line_ydxi::e#1
(byte) bitmap_line_ydxi::e#2
(byte) bitmap_line_ydxi::e#3
(byte) bitmap_line_ydxi::e#4
(byte) bitmap_line_ydxi::e#5
(byte) bitmap_line_ydxi::e#6
(byte) bitmap_line_ydxi::x
(byte) bitmap_line_ydxi::x#0
(byte) bitmap_line_ydxi::x#1
(byte) bitmap_line_ydxi::x#2
(byte) bitmap_line_ydxi::x#3
(byte) bitmap_line_ydxi::x#4
(byte) bitmap_line_ydxi::x#5
(byte) bitmap_line_ydxi::x#6
(byte) bitmap_line_ydxi::x#7
(byte) bitmap_line_ydxi::xd
(byte) bitmap_line_ydxi::xd#0
(byte) bitmap_line_ydxi::xd#1
(byte) bitmap_line_ydxi::xd#2
(byte) bitmap_line_ydxi::xd#3
(byte) bitmap_line_ydxi::xd#4
(byte) bitmap_line_ydxi::xd#5
(byte) bitmap_line_ydxi::xd#6
(byte) bitmap_line_ydxi::y
(byte) bitmap_line_ydxi::y#0
(byte) bitmap_line_ydxi::y#1
(byte) bitmap_line_ydxi::y#2
(byte) bitmap_line_ydxi::y#3
(byte) bitmap_line_ydxi::y#4
(byte) bitmap_line_ydxi::y#5
(byte) bitmap_line_ydxi::y#6
(byte) bitmap_line_ydxi::y#7
(byte) bitmap_line_ydxi::y1
(byte) bitmap_line_ydxi::y1#0
(byte) bitmap_line_ydxi::y1#1
(byte) bitmap_line_ydxi::y1#2
(byte) bitmap_line_ydxi::y1#3
(byte) bitmap_line_ydxi::y1#4
(byte) bitmap_line_ydxi::y1#5
(byte) bitmap_line_ydxi::y1#6
(byte) bitmap_line_ydxi::yd
(byte) bitmap_line_ydxi::yd#0
(byte) bitmap_line_ydxi::yd#1
(byte) bitmap_line_ydxi::yd#2
(byte) bitmap_line_ydxi::yd#3
(byte) bitmap_line_ydxi::yd#4
(byte) bitmap_line_ydxi::yd#5
(byte) bitmap_line_ydxi::yd#6
(void()) bitmap_plot((byte) bitmap_plot::x , (byte) bitmap_plot::y)
(word~) bitmap_plot::$0
(byte~) bitmap_plot::$1
(label) bitmap_plot::@return
(byte*) bitmap_plot::plotter
(byte*) bitmap_plot::plotter#0
(word) bitmap_plot::plotter_x
(word) bitmap_plot::plotter_x#0
(word) bitmap_plot::plotter_y
(word) bitmap_plot::plotter_y#0
(byte) bitmap_plot::x
(byte) bitmap_plot::x#0
(byte) bitmap_plot::x#1
(byte) bitmap_plot::x#2
(byte) bitmap_plot::x#3
(byte) bitmap_plot::x#4
(byte) bitmap_plot::y
(byte) bitmap_plot::y#0
(byte) bitmap_plot::y#1
(byte) bitmap_plot::y#2
(byte) bitmap_plot::y#3
(byte) bitmap_plot::y#4
(const to_nomodify byte*) bitmap_plot_bit[(number) $100]  = { fill( $100, 0) }
(const to_nomodify byte*) bitmap_plot_xhi[(number) $100]  = { fill( $100, 0) }
(const to_nomodify byte*) bitmap_plot_xlo[(number) $100]  = { fill( $100, 0) }
(const to_nomodify byte*) bitmap_plot_yhi[(number) $100]  = { fill( $100, 0) }
(const to_nomodify byte*) bitmap_plot_ylo[(number) $100]  = { fill( $100, 0) }
(void()) dtvSetCpuBankSegment1((byte) dtvSetCpuBankSegment1::cpuBankIdx)
(label) dtvSetCpuBankSegment1::@return
(const byte*) dtvSetCpuBankSegment1::cpuBank = (byte*)(number) $ff
(byte) dtvSetCpuBankSegment1::cpuBankIdx
(byte) dtvSetCpuBankSegment1::cpuBankIdx#0
(byte) dtvSetCpuBankSegment1::cpuBankIdx#1
(byte) dtvSetCpuBankSegment1::cpuBankIdx#10
(byte) dtvSetCpuBankSegment1::cpuBankIdx#11
(byte) dtvSetCpuBankSegment1::cpuBankIdx#12
(byte) dtvSetCpuBankSegment1::cpuBankIdx#13
(byte) dtvSetCpuBankSegment1::cpuBankIdx#2
(byte) dtvSetCpuBankSegment1::cpuBankIdx#3
(byte) dtvSetCpuBankSegment1::cpuBankIdx#4
(byte) dtvSetCpuBankSegment1::cpuBankIdx#5
(byte) dtvSetCpuBankSegment1::cpuBankIdx#6
(byte) dtvSetCpuBankSegment1::cpuBankIdx#7
(byte) dtvSetCpuBankSegment1::cpuBankIdx#8
(byte) dtvSetCpuBankSegment1::cpuBankIdx#9
(const nomodify byte*) form_a_mod_hi = (const byte*) form_fields_val+(number) $f
(const nomodify byte*) form_a_mod_lo = (const byte*) form_fields_val+(number) $10
(const nomodify byte*) form_a_pattern = (const byte*) form_fields_val+(number) $a
(const nomodify byte*) form_a_start_hi = (const byte*) form_fields_val+(number) $b
(const nomodify byte*) form_a_start_lo = (const byte*) form_fields_val+(number) $c
(const nomodify byte*) form_a_step_hi = (const byte*) form_fields_val+(number) $d
(const nomodify byte*) form_a_step_lo = (const byte*) form_fields_val+(number) $e
(const nomodify byte*) form_b_mod_hi = (const byte*) form_fields_val+(number) $16
(const nomodify byte*) form_b_mod_lo = (const byte*) form_fields_val+(number) $17
(const nomodify byte*) form_b_pattern = (const byte*) form_fields_val+(number) $11
(const nomodify byte*) form_b_start_hi = (const byte*) form_fields_val+(number) $12
(const nomodify byte*) form_b_start_lo = (const byte*) form_fields_val+(number) $13
(const nomodify byte*) form_b_step_hi = (const byte*) form_fields_val+(number) $14
(const nomodify byte*) form_b_step_lo = (const byte*) form_fields_val+(number) $15
(byte()) form_control()
(byte*~) form_control::$0
(bool~) form_control::$1
(bool~) form_control::$10
(bool~) form_control::$11
(number~) form_control::$12
(number~) form_control::$13
(number~) form_control::$14
(byte~) form_control::$15
(bool~) form_control::$16
(bool~) form_control::$17
(bool~) form_control::$18
(number~) form_control::$19
(bool~) form_control::$2
(bool~) form_control::$20
(bool~) form_control::$21
(byte~) form_control::$22
(bool~) form_control::$23
(bool~) form_control::$24
(bool~) form_control::$25
(bool~) form_control::$26
(bool~) form_control::$27
(bool~) form_control::$3
(byte~) form_control::$5
(bool~) form_control::$6
(bool~) form_control::$7
(bool~) form_control::$8
(bool~) form_control::$9
(label) form_control::@1
(label) form_control::@10
(label) form_control::@11
(label) form_control::@12
(label) form_control::@13
(label) form_control::@14
(label) form_control::@15
(label) form_control::@16
(label) form_control::@17
(label) form_control::@18
(label) form_control::@19
(label) form_control::@2
(label) form_control::@20
(label) form_control::@21
(label) form_control::@22
(label) form_control::@23
(label) form_control::@24
(label) form_control::@3
(label) form_control::@4
(label) form_control::@5
(label) form_control::@6
(label) form_control::@7
(label) form_control::@8
(label) form_control::@9
(label) form_control::@return
(byte*) form_control::field
(byte*) form_control::field#0
(byte*) form_control::field#1
(byte*) form_control::field#10
(byte*) form_control::field#11
(byte*) form_control::field#12
(byte*) form_control::field#13
(byte*) form_control::field#14
(byte*) form_control::field#15
(byte*) form_control::field#2
(byte*) form_control::field#3
(byte*) form_control::field#4
(byte*) form_control::field#5
(byte*) form_control::field#6
(byte*) form_control::field#7
(byte*) form_control::field#8
(byte*) form_control::field#9
(byte) form_control::key_event
(byte) form_control::key_event#0
(byte) form_control::key_event#1
(byte) form_control::key_event#2
(byte) form_control::return
(byte) form_control::return#0
(byte) form_control::return#1
(byte) form_control::return#2
(byte) form_control::return#3
(byte) form_control::return#4
(byte) form_control::return#5
(byte) form_control::return#6
(byte) form_control::return#7
(const nomodify byte*) form_ctrl_bmm = (const byte*) form_fields_val+(number) 1
(const nomodify byte*) form_ctrl_borof = (const byte*) form_fields_val+(number) 8
(const nomodify byte*) form_ctrl_chunk = (const byte*) form_fields_val+(number) 7
(const nomodify byte*) form_ctrl_colof = (const byte*) form_fields_val+(number) 6
(const nomodify byte*) form_ctrl_ecm = (const byte*) form_fields_val+(number) 3
(const nomodify byte*) form_ctrl_hicol = (const byte*) form_fields_val+(number) 4
(const nomodify byte*) form_ctrl_line = (const byte*) form_fields_val+(number) 5
(const nomodify byte*) form_ctrl_mcm = (const byte*) form_fields_val+(number) 2
(const nomodify byte*) form_ctrl_overs = (const byte*) form_fields_val+(number) 9
(signed byte) form_cursor_count
(signed byte) form_cursor_count#0
(signed byte) form_cursor_count#1
(signed byte) form_cursor_count#10
(signed byte) form_cursor_count#11
(signed byte) form_cursor_count#12
(signed byte) form_cursor_count#13
(signed byte) form_cursor_count#14
(signed byte) form_cursor_count#15
(signed byte) form_cursor_count#16
(signed byte) form_cursor_count#17
(signed byte) form_cursor_count#18
(signed byte) form_cursor_count#19
(signed byte) form_cursor_count#2
(signed byte) form_cursor_count#20
(signed byte) form_cursor_count#21
(signed byte) form_cursor_count#22
(signed byte) form_cursor_count#23
(signed byte) form_cursor_count#24
(signed byte) form_cursor_count#25
(signed byte) form_cursor_count#26
(signed byte) form_cursor_count#27
(signed byte) form_cursor_count#28
(signed byte) form_cursor_count#29
(signed byte) form_cursor_count#3
(signed byte) form_cursor_count#30
(signed byte) form_cursor_count#31
(signed byte) form_cursor_count#32
(signed byte) form_cursor_count#33
(signed byte) form_cursor_count#34
(signed byte) form_cursor_count#35
(signed byte) form_cursor_count#36
(signed byte) form_cursor_count#37
(signed byte) form_cursor_count#38
(signed byte) form_cursor_count#39
(signed byte) form_cursor_count#4
(signed byte) form_cursor_count#40
(signed byte) form_cursor_count#41
(signed byte) form_cursor_count#42
(signed byte) form_cursor_count#43
(signed byte) form_cursor_count#44
(signed byte) form_cursor_count#45
(signed byte) form_cursor_count#46
(signed byte) form_cursor_count#47
(signed byte) form_cursor_count#48
(signed byte) form_cursor_count#49
(signed byte) form_cursor_count#5
(signed byte) form_cursor_count#50
(signed byte) form_cursor_count#51
(signed byte) form_cursor_count#52
(signed byte) form_cursor_count#53
(signed byte) form_cursor_count#54
(signed byte) form_cursor_count#55
(signed byte) form_cursor_count#56
(signed byte) form_cursor_count#57
(signed byte) form_cursor_count#58
(signed byte) form_cursor_count#59
(signed byte) form_cursor_count#6
(signed byte) form_cursor_count#60
(signed byte) form_cursor_count#7
(signed byte) form_cursor_count#8
(signed byte) form_cursor_count#9
(const nomodify byte*) form_dtv_palet = (const byte*) form_fields_val+(number) $1b
(byte) form_field_idx
(byte) form_field_idx#0
(byte) form_field_idx#1
(byte) form_field_idx#10
(byte) form_field_idx#11
(byte) form_field_idx#12
(byte) form_field_idx#13
(byte) form_field_idx#14
(byte) form_field_idx#15
(byte) form_field_idx#16
(byte) form_field_idx#17
(byte) form_field_idx#18
(byte) form_field_idx#19
(byte) form_field_idx#2
(byte) form_field_idx#20
(byte) form_field_idx#21
(byte) form_field_idx#22
(byte) form_field_idx#23
(byte) form_field_idx#24
(byte) form_field_idx#25
(byte) form_field_idx#26
(byte) form_field_idx#27
(byte) form_field_idx#28
(byte) form_field_idx#29
(byte) form_field_idx#3
(byte) form_field_idx#30
(byte) form_field_idx#31
(byte) form_field_idx#32
(byte) form_field_idx#33
(byte) form_field_idx#34
(byte) form_field_idx#35
(byte) form_field_idx#36
(byte) form_field_idx#37
(byte) form_field_idx#38
(byte) form_field_idx#39
(byte) form_field_idx#4
(byte) form_field_idx#40
(byte) form_field_idx#41
(byte) form_field_idx#42
(byte) form_field_idx#43
(byte) form_field_idx#44
(byte) form_field_idx#45
(byte) form_field_idx#46
(byte) form_field_idx#47
(byte) form_field_idx#48
(byte) form_field_idx#49
(byte) form_field_idx#5
(byte) form_field_idx#50
(byte) form_field_idx#51
(byte) form_field_idx#52
(byte) form_field_idx#53
(byte) form_field_idx#54
(byte) form_field_idx#55
(byte) form_field_idx#56
(byte) form_field_idx#57
(byte) form_field_idx#58
(byte) form_field_idx#59
(byte) form_field_idx#6
(byte) form_field_idx#60
(byte) form_field_idx#61
(byte) form_field_idx#62
(byte) form_field_idx#63
(byte) form_field_idx#64
(byte) form_field_idx#65
(byte) form_field_idx#66
(byte) form_field_idx#7
(byte) form_field_idx#8
(byte) form_field_idx#9
(byte*()) form_field_ptr((byte) form_field_ptr::field_idx)
(byte*~) form_field_ptr::$0
(label) form_field_ptr::@return
(byte*) form_field_ptr::field
(byte*) form_field_ptr::field#0
(byte) form_field_ptr::field_idx
(byte) form_field_ptr::field_idx#0
(byte) form_field_ptr::field_idx#1
(byte) form_field_ptr::field_idx#2
(byte*) form_field_ptr::line
(byte*) form_field_ptr::line#0
(byte*) form_field_ptr::return
(byte*) form_field_ptr::return#0
(byte*) form_field_ptr::return#1
(byte*) form_field_ptr::return#2
(byte*) form_field_ptr::return#3
(byte*) form_field_ptr::return#4
(byte*) form_field_ptr::return#5
(byte*) form_field_ptr::return#6
(byte) form_field_ptr::x
(byte) form_field_ptr::x#0
(byte) form_field_ptr::y
(byte) form_field_ptr::y#0
(const byte) form_fields_cnt = (byte) $24
(const byte*) form_fields_max[]  = { (byte) $a, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) $d, (byte) $f, (byte) $f, (byte) $f, (byte) $f, (byte) $f, (byte) $f, (byte) $d, (byte) $f, (byte) $f, (byte) $f, (byte) $f, (byte) $f, (byte) $f, (byte) 3, (byte) 1, (byte) 4, (byte) 1, (byte) $f, (byte) $f, (byte) $f, (byte) $f, (byte) $f, (byte) $f, (byte) $f, (byte) $f }
(const byte*) form_fields_val[]  = { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(const byte*) form_fields_x[]  = { (byte) 8, (byte) $c, (byte) $c, (byte) $c, (byte) $c, (byte) $c, (byte) $c, (byte) $c, (byte) $c, (byte) $c, (byte) $19, (byte) $18, (byte) $19, (byte) $18, (byte) $19, (byte) $18, (byte) $19, (byte) $19, (byte) $18, (byte) $19, (byte) $18, (byte) $19, (byte) $18, (byte) $19, (byte) $25, (byte) $25, (byte) $25, (byte) $25, (byte) $24, (byte) $25, (byte) $24, (byte) $25, (byte) $24, (byte) $25, (byte) $24, (byte) $25 }
(const byte*) form_fields_y[]  = { (byte) 2, (byte) 5, (byte) 6, (byte) 7, (byte) 8, (byte) 9, (byte) $a, (byte) $b, (byte) $c, (byte) $d, (byte) 5, (byte) 6, (byte) 6, (byte) 7, (byte) 7, (byte) 8, (byte) 8, (byte) $b, (byte) $c, (byte) $c, (byte) $d, (byte) $d, (byte) $e, (byte) $e, (byte) 5, (byte) 6, (byte) 7, (byte) $a, (byte) $b, (byte) $b, (byte) $c, (byte) $c, (byte) $d, (byte) $d, (byte) $e, (byte) $e }
(const byte*) form_line_hi[(number) $19]  = { fill( $19, 0) }
(const byte*) form_line_lo[(number) $19]  = { fill( $19, 0) }
(void()) form_mode()
(bool~) form_mode::$10
(byte~) form_mode::$11
(bool~) form_mode::$12
(bool~) form_mode::$13
(bool~) form_mode::$14
(bool~) form_mode::$15
(bool~) form_mode::$9
(label) form_mode::@1
(label) form_mode::@10
(label) form_mode::@11
(label) form_mode::@12
(label) form_mode::@13
(label) form_mode::@14
(label) form_mode::@15
(label) form_mode::@16
(label) form_mode::@17
(label) form_mode::@18
(label) form_mode::@19
(label) form_mode::@2
(label) form_mode::@20
(label) form_mode::@3
(label) form_mode::@4
(label) form_mode::@5
(label) form_mode::@6
(label) form_mode::@7
(label) form_mode::@8
(label) form_mode::@9
(label) form_mode::@return
(byte) form_mode::i
(byte) form_mode::i#0
(byte) form_mode::i#1
(byte) form_mode::i#2
(byte) form_mode::preset_current
(byte) form_mode::preset_current#0
(byte) form_mode::preset_current#1
(byte) form_mode::preset_current#2
(byte) form_mode::preset_current#3
(byte) form_mode::preset_current#4
(byte) form_mode::preset_current#5
(byte) form_mode::preset_current#6
(byte) form_mode::preset_current#7
(byte) form_mode::preset_current#8
(const nomodify byte*) form_preset = (const byte*) form_fields_val+(number) 0
(void()) form_render_values()
(bool~) form_render_values::$0
(byte*~) form_render_values::$1
(label) form_render_values::@1
(label) form_render_values::@2
(label) form_render_values::@3
(label) form_render_values::@return
(byte*) form_render_values::field
(byte*) form_render_values::field#0
(byte) form_render_values::idx
(byte) form_render_values::idx#0
(byte) form_render_values::idx#1
(byte) form_render_values::idx#2
(byte) form_render_values::idx#3
(byte) form_render_values::idx#4
(void()) form_set_screen((byte*) form_set_screen::screen)
(byte~) form_set_screen::$0
(byte~) form_set_screen::$1
(byte*~) form_set_screen::$2
(bool~) form_set_screen::$3
(label) form_set_screen::@1
(label) form_set_screen::@return
(byte*) form_set_screen::line
(byte*) form_set_screen::line#0
(byte*) form_set_screen::line#1
(byte*) form_set_screen::line#2
(byte*) form_set_screen::screen
(byte*) form_set_screen::screen#0
(byte*) form_set_screen::screen#1
(byte) form_set_screen::y
(byte) form_set_screen::y#0
(byte) form_set_screen::y#1
(byte) form_set_screen::y#2
(const nomodify byte*) form_vic_bg0_hi = (const byte*) form_fields_val+(number) $1c
(const nomodify byte*) form_vic_bg0_lo = (const byte*) form_fields_val+(number) $1d
(const nomodify byte*) form_vic_bg1_hi = (const byte*) form_fields_val+(number) $1e
(const nomodify byte*) form_vic_bg1_lo = (const byte*) form_fields_val+(number) $1f
(const nomodify byte*) form_vic_bg2_hi = (const byte*) form_fields_val+(number) $20
(const nomodify byte*) form_vic_bg2_lo = (const byte*) form_fields_val+(number) $21
(const nomodify byte*) form_vic_bg3_hi = (const byte*) form_fields_val+(number) $22
(const nomodify byte*) form_vic_bg3_lo = (const byte*) form_fields_val+(number) $23
(const nomodify byte*) form_vic_cols = (const byte*) form_fields_val+(number) $1a
(const nomodify byte*) form_vic_gfx = (const byte*) form_fields_val+(number) $19
(const nomodify byte*) form_vic_screen = (const byte*) form_fields_val+(number) $18
(dword()) get_plane((byte) get_plane::idx)
(bool~) get_plane::$0
(bool~) get_plane::$1
(bool~) get_plane::$10
(bool~) get_plane::$11
(bool~) get_plane::$12
(bool~) get_plane::$13
(bool~) get_plane::$14
(bool~) get_plane::$2
(bool~) get_plane::$3
(bool~) get_plane::$4
(bool~) get_plane::$5
(bool~) get_plane::$6
(bool~) get_plane::$7
(bool~) get_plane::$8
(bool~) get_plane::$9
(label) get_plane::@1
(label) get_plane::@10
(label) get_plane::@11
(label) get_plane::@12
(label) get_plane::@13
(label) get_plane::@14
(label) get_plane::@15
(label) get_plane::@16
(label) get_plane::@17
(label) get_plane::@18
(label) get_plane::@19
(label) get_plane::@2
(label) get_plane::@20
(label) get_plane::@21
(label) get_plane::@22
(label) get_plane::@23
(label) get_plane::@24
(label) get_plane::@25
(label) get_plane::@26
(label) get_plane::@27
(label) get_plane::@28
(label) get_plane::@3
(label) get_plane::@4
(label) get_plane::@5
(label) get_plane::@6
(label) get_plane::@7
(label) get_plane::@8
(label) get_plane::@9
(label) get_plane::@return
(byte) get_plane::idx
(byte) get_plane::idx#0
(byte) get_plane::idx#1
(byte) get_plane::idx#10
(byte) get_plane::idx#11
(byte) get_plane::idx#12
(byte) get_plane::idx#13
(byte) get_plane::idx#14
(byte) get_plane::idx#15
(byte) get_plane::idx#2
(byte) get_plane::idx#3
(byte) get_plane::idx#4
(byte) get_plane::idx#5
(byte) get_plane::idx#6
(byte) get_plane::idx#7
(byte) get_plane::idx#8
(byte) get_plane::idx#9
(dword) get_plane::return
(dword) get_plane::return#0
(dword) get_plane::return#1
(dword) get_plane::return#10
(dword) get_plane::return#11
(dword) get_plane::return#12
(dword) get_plane::return#13
(dword) get_plane::return#14
(dword) get_plane::return#15
(dword) get_plane::return#16
(dword) get_plane::return#17
(dword) get_plane::return#18
(dword) get_plane::return#19
(dword) get_plane::return#2
(dword) get_plane::return#20
(dword) get_plane::return#3
(dword) get_plane::return#4
(dword) get_plane::return#5
(dword) get_plane::return#6
(dword) get_plane::return#7
(dword) get_plane::return#8
(dword) get_plane::return#9
(byte*()) get_vic_charset((byte) get_vic_charset::idx)
(bool~) get_vic_charset::$0
(bool~) get_vic_charset::$1
(bool~) get_vic_charset::$2
(label) get_vic_charset::@1
(label) get_vic_charset::@2
(label) get_vic_charset::@3
(label) get_vic_charset::@4
(label) get_vic_charset::@return
(byte) get_vic_charset::idx
(byte) get_vic_charset::idx#0
(byte) get_vic_charset::idx#1
(byte) get_vic_charset::idx#2
(byte*) get_vic_charset::return
(byte*) get_vic_charset::return#0
(byte*) get_vic_charset::return#1
(byte*) get_vic_charset::return#2
(byte*) get_vic_charset::return#3
(byte*) get_vic_charset::return#4
(byte*) get_vic_charset::return#5
(byte*) get_vic_charset::return#6
(byte*()) get_vic_screen((byte) get_vic_screen::idx)
(bool~) get_vic_screen::$0
(bool~) get_vic_screen::$1
(bool~) get_vic_screen::$2
(bool~) get_vic_screen::$3
(bool~) get_vic_screen::$4
(bool~) get_vic_screen::$5
(label) get_vic_screen::@1
(label) get_vic_screen::@10
(label) get_vic_screen::@2
(label) get_vic_screen::@3
(label) get_vic_screen::@4
(label) get_vic_screen::@5
(label) get_vic_screen::@6
(label) get_vic_screen::@7
(label) get_vic_screen::@8
(label) get_vic_screen::@9
(label) get_vic_screen::@return
(byte) get_vic_screen::idx
(byte) get_vic_screen::idx#0
(byte) get_vic_screen::idx#1
(byte) get_vic_screen::idx#2
(byte) get_vic_screen::idx#3
(byte) get_vic_screen::idx#4
(byte) get_vic_screen::idx#5
(byte) get_vic_screen::idx#6
(byte*) get_vic_screen::return
(byte*) get_vic_screen::return#0
(byte*) get_vic_screen::return#1
(byte*) get_vic_screen::return#10
(byte*) get_vic_screen::return#11
(byte*) get_vic_screen::return#2
(byte*) get_vic_screen::return#3
(byte*) get_vic_screen::return#4
(byte*) get_vic_screen::return#5
(byte*) get_vic_screen::return#6
(byte*) get_vic_screen::return#7
(byte*) get_vic_screen::return#8
(byte*) get_vic_screen::return#9
(void()) gfx_init()
(label) gfx_init::@1
(label) gfx_init::@10
(label) gfx_init::@11
(label) gfx_init::@12
(label) gfx_init::@13
(label) gfx_init::@14
(label) gfx_init::@15
(label) gfx_init::@2
(label) gfx_init::@3
(label) gfx_init::@4
(label) gfx_init::@5
(label) gfx_init::@6
(label) gfx_init::@7
(label) gfx_init::@8
(label) gfx_init::@9
(label) gfx_init::@return
(void()) gfx_init_charset()
(bool~) gfx_init_charset::$0
(bool~) gfx_init_charset::$1
(label) gfx_init_charset::@1
(label) gfx_init_charset::@2
(label) gfx_init_charset::@3
(label) gfx_init_charset::@4
(label) gfx_init_charset::@return
(byte) gfx_init_charset::c
(byte) gfx_init_charset::c#0
(byte) gfx_init_charset::c#1
(byte) gfx_init_charset::c#2
(byte) gfx_init_charset::c#3
(byte) gfx_init_charset::c#4
(byte*) gfx_init_charset::chargen
(byte*) gfx_init_charset::chargen#0
(byte*) gfx_init_charset::chargen#1
(byte*) gfx_init_charset::chargen#2
(byte*) gfx_init_charset::chargen#3
(byte*) gfx_init_charset::chargen#4
(byte*) gfx_init_charset::charset
(byte*) gfx_init_charset::charset#0
(byte*) gfx_init_charset::charset#1
(byte*) gfx_init_charset::charset#2
(byte*) gfx_init_charset::charset#3
(byte*) gfx_init_charset::charset#4
(byte) gfx_init_charset::l
(byte) gfx_init_charset::l#0
(byte) gfx_init_charset::l#1
(byte) gfx_init_charset::l#2
(void()) gfx_init_plane_8bppchunky()
(bool~) gfx_init_plane_8bppchunky::$2
(bool~) gfx_init_plane_8bppchunky::$3
(word~) gfx_init_plane_8bppchunky::$5
(bool~) gfx_init_plane_8bppchunky::$6
(bool~) gfx_init_plane_8bppchunky::$7
(label) gfx_init_plane_8bppchunky::@1
(label) gfx_init_plane_8bppchunky::@2
(label) gfx_init_plane_8bppchunky::@3
(label) gfx_init_plane_8bppchunky::@4
(label) gfx_init_plane_8bppchunky::@5
(label) gfx_init_plane_8bppchunky::@6
(label) gfx_init_plane_8bppchunky::@7
(label) gfx_init_plane_8bppchunky::@8
(label) gfx_init_plane_8bppchunky::@9
(label) gfx_init_plane_8bppchunky::@return
(byte) gfx_init_plane_8bppchunky::c
(byte) gfx_init_plane_8bppchunky::c#0
(byte*) gfx_init_plane_8bppchunky::gfxb
(byte*) gfx_init_plane_8bppchunky::gfxb#0
(byte*) gfx_init_plane_8bppchunky::gfxb#1
(byte*) gfx_init_plane_8bppchunky::gfxb#2
(byte*) gfx_init_plane_8bppchunky::gfxb#3
(byte*) gfx_init_plane_8bppchunky::gfxb#4
(byte*) gfx_init_plane_8bppchunky::gfxb#5
(byte*) gfx_init_plane_8bppchunky::gfxb#6
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#0
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#1
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#2
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#3
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#5
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#6
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#7
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#9
(word) gfx_init_plane_8bppchunky::x
(word) gfx_init_plane_8bppchunky::x#0
(word) gfx_init_plane_8bppchunky::x#1
(word) gfx_init_plane_8bppchunky::x#2
(word) gfx_init_plane_8bppchunky::x#3
(word) gfx_init_plane_8bppchunky::x#4
(word) gfx_init_plane_8bppchunky::x#5
(byte) gfx_init_plane_8bppchunky::y
(byte) gfx_init_plane_8bppchunky::y#0
(byte) gfx_init_plane_8bppchunky::y#1
(byte) gfx_init_plane_8bppchunky::y#2
(byte) gfx_init_plane_8bppchunky::y#3
(byte) gfx_init_plane_8bppchunky::y#4
(byte) gfx_init_plane_8bppchunky::y#5
(byte) gfx_init_plane_8bppchunky::y#6
(byte) gfx_init_plane_8bppchunky::y#7
(void()) gfx_init_plane_blank()
(label) gfx_init_plane_blank::@1
(label) gfx_init_plane_blank::@return
(void()) gfx_init_plane_charset8()
(number~) gfx_init_plane_charset8::$2
(bool~) gfx_init_plane_charset8::$3
(bool~) gfx_init_plane_charset8::$4
(number~) gfx_init_plane_charset8::$5
(bool~) gfx_init_plane_charset8::$6
(bool~) gfx_init_plane_charset8::$7
(bool~) gfx_init_plane_charset8::$8
(label) gfx_init_plane_charset8::@1
(label) gfx_init_plane_charset8::@10
(label) gfx_init_plane_charset8::@2
(label) gfx_init_plane_charset8::@3
(label) gfx_init_plane_charset8::@4
(label) gfx_init_plane_charset8::@5
(label) gfx_init_plane_charset8::@6
(label) gfx_init_plane_charset8::@7
(label) gfx_init_plane_charset8::@8
(label) gfx_init_plane_charset8::@9
(label) gfx_init_plane_charset8::@return
(byte) gfx_init_plane_charset8::bits
(byte) gfx_init_plane_charset8::bits#0
(byte) gfx_init_plane_charset8::bits#1
(byte) gfx_init_plane_charset8::bits#2
(byte) gfx_init_plane_charset8::bits#3
(byte) gfx_init_plane_charset8::bits#4
(byte) gfx_init_plane_charset8::c
(byte) gfx_init_plane_charset8::c#0
(byte) gfx_init_plane_charset8::c#1
(byte) gfx_init_plane_charset8::c#2
(byte) gfx_init_plane_charset8::ch
(byte) gfx_init_plane_charset8::ch#0
(byte) gfx_init_plane_charset8::ch#1
(byte) gfx_init_plane_charset8::ch#2
(byte) gfx_init_plane_charset8::ch#3
(byte) gfx_init_plane_charset8::ch#4
(byte) gfx_init_plane_charset8::ch#5
(byte) gfx_init_plane_charset8::ch#6
(byte) gfx_init_plane_charset8::ch#7
(byte) gfx_init_plane_charset8::ch#8
(byte*) gfx_init_plane_charset8::chargen
(byte*) gfx_init_plane_charset8::chargen#0
(byte*) gfx_init_plane_charset8::chargen#1
(byte*) gfx_init_plane_charset8::chargen#2
(byte*) gfx_init_plane_charset8::chargen#3
(byte*) gfx_init_plane_charset8::chargen#4
(byte*) gfx_init_plane_charset8::chargen#5
(byte*) gfx_init_plane_charset8::chargen#6
(byte*) gfx_init_plane_charset8::chargen#7
(byte*) gfx_init_plane_charset8::chargen#8
(byte) gfx_init_plane_charset8::col
(byte) gfx_init_plane_charset8::col#0
(byte) gfx_init_plane_charset8::col#1
(byte) gfx_init_plane_charset8::col#2
(byte) gfx_init_plane_charset8::col#3
(byte) gfx_init_plane_charset8::col#4
(byte) gfx_init_plane_charset8::col#5
(byte) gfx_init_plane_charset8::col#6
(byte) gfx_init_plane_charset8::col#7
(byte) gfx_init_plane_charset8::col#8
(byte) gfx_init_plane_charset8::cp
(byte) gfx_init_plane_charset8::cp#0
(byte) gfx_init_plane_charset8::cp#1
(byte) gfx_init_plane_charset8::cp#2
(byte) gfx_init_plane_charset8::cp#3
(byte) gfx_init_plane_charset8::cp#4
(byte) gfx_init_plane_charset8::cr
(byte) gfx_init_plane_charset8::cr#0
(byte) gfx_init_plane_charset8::cr#1
(byte) gfx_init_plane_charset8::cr#2
(byte) gfx_init_plane_charset8::cr#3
(byte) gfx_init_plane_charset8::cr#4
(byte) gfx_init_plane_charset8::cr#5
(byte) gfx_init_plane_charset8::cr#6
(byte*) gfx_init_plane_charset8::gfxa
(byte*) gfx_init_plane_charset8::gfxa#0
(byte*) gfx_init_plane_charset8::gfxa#1
(byte*) gfx_init_plane_charset8::gfxa#2
(byte*) gfx_init_plane_charset8::gfxa#3
(byte*) gfx_init_plane_charset8::gfxa#4
(byte*) gfx_init_plane_charset8::gfxa#5
(byte*) gfx_init_plane_charset8::gfxa#6
(byte*) gfx_init_plane_charset8::gfxa#7
(byte*) gfx_init_plane_charset8::gfxa#8
(byte) gfx_init_plane_charset8::gfxbCpuBank
(byte) gfx_init_plane_charset8::gfxbCpuBank#0
(byte) gfx_init_plane_charset8::gfxbCpuBank#1
(byte) gfx_init_plane_charset8::gfxbCpuBank#2
(void()) gfx_init_plane_fill((dword) gfx_init_plane_fill::plane_addr , (byte) gfx_init_plane_fill::fill)
(number~) gfx_init_plane_fill::$0
(number~) gfx_init_plane_fill::$1
(number~) gfx_init_plane_fill::$2
(word~) gfx_init_plane_fill::$4
(number~) gfx_init_plane_fill::$5
(number~) gfx_init_plane_fill::$6
(bool~) gfx_init_plane_fill::$8
(bool~) gfx_init_plane_fill::$9
(label) gfx_init_plane_fill::@1
(label) gfx_init_plane_fill::@2
(label) gfx_init_plane_fill::@3
(label) gfx_init_plane_fill::@4
(label) gfx_init_plane_fill::@5
(label) gfx_init_plane_fill::@6
(label) gfx_init_plane_fill::@return
(byte) gfx_init_plane_fill::bx
(byte) gfx_init_plane_fill::bx#0
(byte) gfx_init_plane_fill::bx#1
(byte) gfx_init_plane_fill::bx#2
(byte) gfx_init_plane_fill::by
(byte) gfx_init_plane_fill::by#0
(byte) gfx_init_plane_fill::by#1
(byte) gfx_init_plane_fill::by#2
(byte) gfx_init_plane_fill::by#3
(byte) gfx_init_plane_fill::by#4
(byte) gfx_init_plane_fill::fill
(byte) gfx_init_plane_fill::fill#0
(byte) gfx_init_plane_fill::fill#1
(byte) gfx_init_plane_fill::fill#2
(byte) gfx_init_plane_fill::fill#3
(byte) gfx_init_plane_fill::fill#4
(byte) gfx_init_plane_fill::fill#5
(byte) gfx_init_plane_fill::fill#6
(byte) gfx_init_plane_fill::fill#7
(byte*) gfx_init_plane_fill::gfxb
(byte*) gfx_init_plane_fill::gfxb#0
(byte*) gfx_init_plane_fill::gfxb#1
(byte*) gfx_init_plane_fill::gfxb#2
(byte*) gfx_init_plane_fill::gfxb#3
(byte*) gfx_init_plane_fill::gfxb#4
(byte) gfx_init_plane_fill::gfxbCpuBank
(byte) gfx_init_plane_fill::gfxbCpuBank#0
(byte) gfx_init_plane_fill::gfxbCpuBank#1
(byte) gfx_init_plane_fill::gfxbCpuBank#2
(dword) gfx_init_plane_fill::plane_addr
(dword) gfx_init_plane_fill::plane_addr#0
(dword) gfx_init_plane_fill::plane_addr#1
(dword) gfx_init_plane_fill::plane_addr#2
(dword) gfx_init_plane_fill::plane_addr#3
(dword) gfx_init_plane_fill::plane_addr#4
(void()) gfx_init_plane_full()
(label) gfx_init_plane_full::@1
(label) gfx_init_plane_full::@return
(void()) gfx_init_plane_horisontal()
(number~) gfx_init_plane_horisontal::$2
(bool~) gfx_init_plane_horisontal::$3
(bool~) gfx_init_plane_horisontal::$4
(bool~) gfx_init_plane_horisontal::$5
(label) gfx_init_plane_horisontal::@1
(label) gfx_init_plane_horisontal::@2
(label) gfx_init_plane_horisontal::@3
(label) gfx_init_plane_horisontal::@4
(label) gfx_init_plane_horisontal::@5
(label) gfx_init_plane_horisontal::@6
(label) gfx_init_plane_horisontal::@7
(label) gfx_init_plane_horisontal::@8
(label) gfx_init_plane_horisontal::@9
(label) gfx_init_plane_horisontal::@return
(byte) gfx_init_plane_horisontal::ax
(byte) gfx_init_plane_horisontal::ax#0
(byte) gfx_init_plane_horisontal::ax#1
(byte) gfx_init_plane_horisontal::ax#2
(byte) gfx_init_plane_horisontal::ax#3
(byte) gfx_init_plane_horisontal::ax#4
(byte) gfx_init_plane_horisontal::ax#5
(byte) gfx_init_plane_horisontal::ay
(byte) gfx_init_plane_horisontal::ay#0
(byte) gfx_init_plane_horisontal::ay#1
(byte) gfx_init_plane_horisontal::ay#2
(byte) gfx_init_plane_horisontal::ay#3
(byte) gfx_init_plane_horisontal::ay#4
(byte) gfx_init_plane_horisontal::ay#5
(byte) gfx_init_plane_horisontal::ay#6
(byte) gfx_init_plane_horisontal::ay#7
(byte*) gfx_init_plane_horisontal::gfxa
(byte*) gfx_init_plane_horisontal::gfxa#0
(byte*) gfx_init_plane_horisontal::gfxa#1
(byte*) gfx_init_plane_horisontal::gfxa#2
(byte*) gfx_init_plane_horisontal::gfxa#3
(byte*) gfx_init_plane_horisontal::gfxa#4
(byte*) gfx_init_plane_horisontal::gfxa#5
(byte*) gfx_init_plane_horisontal::gfxa#6
(byte*) gfx_init_plane_horisontal::gfxa#7
(byte*) gfx_init_plane_horisontal::gfxa#8
(byte) gfx_init_plane_horisontal::gfxbCpuBank
(byte) gfx_init_plane_horisontal::gfxbCpuBank#0
(byte) gfx_init_plane_horisontal::gfxbCpuBank#1
(byte) gfx_init_plane_horisontal::gfxbCpuBank#2
(void()) gfx_init_plane_horisontal2()
(number~) gfx_init_plane_horisontal2::$2
(number~) gfx_init_plane_horisontal2::$3
(bool~) gfx_init_plane_horisontal2::$4
(bool~) gfx_init_plane_horisontal2::$5
(label) gfx_init_plane_horisontal2::@1
(label) gfx_init_plane_horisontal2::@2
(label) gfx_init_plane_horisontal2::@3
(label) gfx_init_plane_horisontal2::@4
(label) gfx_init_plane_horisontal2::@5
(label) gfx_init_plane_horisontal2::@6
(label) gfx_init_plane_horisontal2::@return
(byte) gfx_init_plane_horisontal2::ax
(byte) gfx_init_plane_horisontal2::ax#0
(byte) gfx_init_plane_horisontal2::ax#1
(byte) gfx_init_plane_horisontal2::ax#2
(byte) gfx_init_plane_horisontal2::ay
(byte) gfx_init_plane_horisontal2::ay#0
(byte) gfx_init_plane_horisontal2::ay#1
(byte) gfx_init_plane_horisontal2::ay#2
(byte) gfx_init_plane_horisontal2::ay#3
(byte) gfx_init_plane_horisontal2::ay#4
(byte*) gfx_init_plane_horisontal2::gfxa
(byte*) gfx_init_plane_horisontal2::gfxa#0
(byte*) gfx_init_plane_horisontal2::gfxa#1
(byte*) gfx_init_plane_horisontal2::gfxa#2
(byte*) gfx_init_plane_horisontal2::gfxa#3
(byte*) gfx_init_plane_horisontal2::gfxa#4
(byte) gfx_init_plane_horisontal2::gfxbCpuBank
(byte) gfx_init_plane_horisontal2::gfxbCpuBank#0
(byte) gfx_init_plane_horisontal2::gfxbCpuBank#1
(byte) gfx_init_plane_horisontal2::gfxbCpuBank#2
(byte) gfx_init_plane_horisontal2::row
(byte) gfx_init_plane_horisontal2::row#0
(const byte*) gfx_init_plane_horisontal2::row_bitmask[]  = { (byte) 0, (byte) $55, (byte) $aa, (byte) $ff }
(void()) gfx_init_plane_vertical()
(bool~) gfx_init_plane_vertical::$2
(bool~) gfx_init_plane_vertical::$3
(label) gfx_init_plane_vertical::@1
(label) gfx_init_plane_vertical::@2
(label) gfx_init_plane_vertical::@3
(label) gfx_init_plane_vertical::@4
(label) gfx_init_plane_vertical::@5
(label) gfx_init_plane_vertical::@6
(label) gfx_init_plane_vertical::@return
(byte) gfx_init_plane_vertical::bx
(byte) gfx_init_plane_vertical::bx#0
(byte) gfx_init_plane_vertical::bx#1
(byte) gfx_init_plane_vertical::bx#2
(byte) gfx_init_plane_vertical::by
(byte) gfx_init_plane_vertical::by#0
(byte) gfx_init_plane_vertical::by#1
(byte) gfx_init_plane_vertical::by#2
(byte) gfx_init_plane_vertical::by#3
(byte) gfx_init_plane_vertical::by#4
(byte*) gfx_init_plane_vertical::gfxb
(byte*) gfx_init_plane_vertical::gfxb#0
(byte*) gfx_init_plane_vertical::gfxb#1
(byte*) gfx_init_plane_vertical::gfxb#2
(byte*) gfx_init_plane_vertical::gfxb#3
(byte*) gfx_init_plane_vertical::gfxb#4
(byte) gfx_init_plane_vertical::gfxbCpuBank
(byte) gfx_init_plane_vertical::gfxbCpuBank#0
(byte) gfx_init_plane_vertical::gfxbCpuBank#1
(byte) gfx_init_plane_vertical::gfxbCpuBank#2
(void()) gfx_init_plane_vertical2()
(label) gfx_init_plane_vertical2::@1
(label) gfx_init_plane_vertical2::@return
(void()) gfx_init_screen0()
(number~) gfx_init_screen0::$0
(number~) gfx_init_screen0::$1
(number~) gfx_init_screen0::$2
(number~) gfx_init_screen0::$3
(bool~) gfx_init_screen0::$4
(bool~) gfx_init_screen0::$5
(label) gfx_init_screen0::@1
(label) gfx_init_screen0::@2
(label) gfx_init_screen0::@3
(label) gfx_init_screen0::@return
(byte*) gfx_init_screen0::ch
(byte*) gfx_init_screen0::ch#0
(byte*) gfx_init_screen0::ch#1
(byte*) gfx_init_screen0::ch#2
(byte*) gfx_init_screen0::ch#3
(byte*) gfx_init_screen0::ch#4
(byte) gfx_init_screen0::cx
(byte) gfx_init_screen0::cx#0
(byte) gfx_init_screen0::cx#1
(byte) gfx_init_screen0::cx#2
(byte) gfx_init_screen0::cy
(byte) gfx_init_screen0::cy#0
(byte) gfx_init_screen0::cy#1
(byte) gfx_init_screen0::cy#2
(byte) gfx_init_screen0::cy#3
(byte) gfx_init_screen0::cy#4
(void()) gfx_init_screen1()
(byte~) gfx_init_screen1::$0
(number~) gfx_init_screen1::$1
(bool~) gfx_init_screen1::$2
(bool~) gfx_init_screen1::$3
(label) gfx_init_screen1::@1
(label) gfx_init_screen1::@2
(label) gfx_init_screen1::@3
(label) gfx_init_screen1::@return
(byte*) gfx_init_screen1::ch
(byte*) gfx_init_screen1::ch#0
(byte*) gfx_init_screen1::ch#1
(byte*) gfx_init_screen1::ch#2
(byte*) gfx_init_screen1::ch#3
(byte*) gfx_init_screen1::ch#4
(byte) gfx_init_screen1::cx
(byte) gfx_init_screen1::cx#0
(byte) gfx_init_screen1::cx#1
(byte) gfx_init_screen1::cx#2
(byte) gfx_init_screen1::cy
(byte) gfx_init_screen1::cy#0
(byte) gfx_init_screen1::cy#1
(byte) gfx_init_screen1::cy#2
(byte) gfx_init_screen1::cy#3
(byte) gfx_init_screen1::cy#4
(void()) gfx_init_screen2()
(byte~) gfx_init_screen2::$0
(number~) gfx_init_screen2::$1
(number~) gfx_init_screen2::$2
(number~) gfx_init_screen2::$3
(number~) gfx_init_screen2::$4
(bool~) gfx_init_screen2::$5
(bool~) gfx_init_screen2::$6
(label) gfx_init_screen2::@1
(label) gfx_init_screen2::@2
(label) gfx_init_screen2::@3
(label) gfx_init_screen2::@return
(byte*) gfx_init_screen2::ch
(byte*) gfx_init_screen2::ch#0
(byte*) gfx_init_screen2::ch#1
(byte*) gfx_init_screen2::ch#2
(byte*) gfx_init_screen2::ch#3
(byte*) gfx_init_screen2::ch#4
(byte) gfx_init_screen2::col
(byte) gfx_init_screen2::col#0
(byte) gfx_init_screen2::col2
(byte) gfx_init_screen2::col2#0
(byte) gfx_init_screen2::cx
(byte) gfx_init_screen2::cx#0
(byte) gfx_init_screen2::cx#1
(byte) gfx_init_screen2::cx#2
(byte) gfx_init_screen2::cy
(byte) gfx_init_screen2::cy#0
(byte) gfx_init_screen2::cy#1
(byte) gfx_init_screen2::cy#2
(byte) gfx_init_screen2::cy#3
(byte) gfx_init_screen2::cy#4
(void()) gfx_init_screen3()
(number~) gfx_init_screen3::$0
(number~) gfx_init_screen3::$1
(number~) gfx_init_screen3::$2
(number~) gfx_init_screen3::$3
(bool~) gfx_init_screen3::$4
(bool~) gfx_init_screen3::$5
(label) gfx_init_screen3::@1
(label) gfx_init_screen3::@2
(label) gfx_init_screen3::@3
(label) gfx_init_screen3::@return
(byte*) gfx_init_screen3::ch
(byte*) gfx_init_screen3::ch#0
(byte*) gfx_init_screen3::ch#1
(byte*) gfx_init_screen3::ch#2
(byte*) gfx_init_screen3::ch#3
(byte*) gfx_init_screen3::ch#4
(byte) gfx_init_screen3::cx
(byte) gfx_init_screen3::cx#0
(byte) gfx_init_screen3::cx#1
(byte) gfx_init_screen3::cx#2
(byte) gfx_init_screen3::cy
(byte) gfx_init_screen3::cy#0
(byte) gfx_init_screen3::cy#1
(byte) gfx_init_screen3::cy#2
(byte) gfx_init_screen3::cy#3
(byte) gfx_init_screen3::cy#4
(void()) gfx_init_screen4()
(bool~) gfx_init_screen4::$0
(bool~) gfx_init_screen4::$1
(label) gfx_init_screen4::@1
(label) gfx_init_screen4::@2
(label) gfx_init_screen4::@3
(label) gfx_init_screen4::@return
(byte*) gfx_init_screen4::ch
(byte*) gfx_init_screen4::ch#0
(byte*) gfx_init_screen4::ch#1
(byte*) gfx_init_screen4::ch#2
(byte*) gfx_init_screen4::ch#3
(byte*) gfx_init_screen4::ch#4
(byte) gfx_init_screen4::cx
(byte) gfx_init_screen4::cx#0
(byte) gfx_init_screen4::cx#1
(byte) gfx_init_screen4::cx#2
(byte) gfx_init_screen4::cy
(byte) gfx_init_screen4::cy#0
(byte) gfx_init_screen4::cy#1
(byte) gfx_init_screen4::cy#2
(byte) gfx_init_screen4::cy#3
(byte) gfx_init_screen4::cy#4
(void()) gfx_init_vic_bitmap()
(bool~) gfx_init_vic_bitmap::$2
(number~) gfx_init_vic_bitmap::$3
(number~) gfx_init_vic_bitmap::$4
(label) gfx_init_vic_bitmap::@1
(label) gfx_init_vic_bitmap::@2
(label) gfx_init_vic_bitmap::@3
(label) gfx_init_vic_bitmap::@4
(label) gfx_init_vic_bitmap::@5
(label) gfx_init_vic_bitmap::@return
(byte) gfx_init_vic_bitmap::l
(byte) gfx_init_vic_bitmap::l#0
(byte) gfx_init_vic_bitmap::l#1
(byte) gfx_init_vic_bitmap::l#2
(byte) gfx_init_vic_bitmap::l#3
(byte) gfx_init_vic_bitmap::l#4
(const byte) gfx_init_vic_bitmap::lines_cnt = (byte) 9
(const byte*) gfx_init_vic_bitmap::lines_x[]  = { (byte) 0, (byte) $ff, (byte) $ff, (byte) 0, (byte) 0, (byte) $80, (byte) $ff, (byte) $80, (byte) 0, (byte) $80 }
(const byte*) gfx_init_vic_bitmap::lines_y[]  = { (byte) 0, (byte) 0, (byte) $c7, (byte) $c7, (byte) 0, (byte) 0, (byte) $64, (byte) $c7, (byte) $64, (byte) 0 }
(void()) gfx_mode()
(bool~) gfx_mode::$0
(bool~) gfx_mode::$1
(bool~) gfx_mode::$10
(bool~) gfx_mode::$11
(bool~) gfx_mode::$12
(bool~) gfx_mode::$13
(bool~) gfx_mode::$14
(bool~) gfx_mode::$15
(bool~) gfx_mode::$16
(bool~) gfx_mode::$17
(number~) gfx_mode::$18
(number~) gfx_mode::$19
(bool~) gfx_mode::$2
(dword~) gfx_mode::$20
(dword~) gfx_mode::$21
(word~) gfx_mode::$22
(byte~) gfx_mode::$23
(word~) gfx_mode::$24
(byte~) gfx_mode::$25
(word~) gfx_mode::$26
(byte~) gfx_mode::$27
(number~) gfx_mode::$28
(number~) gfx_mode::$29
(bool~) gfx_mode::$3
(number~) gfx_mode::$30
(number~) gfx_mode::$31
(number~) gfx_mode::$32
(number~) gfx_mode::$33
(dword~) gfx_mode::$34
(dword~) gfx_mode::$35
(word~) gfx_mode::$36
(byte~) gfx_mode::$37
(word~) gfx_mode::$38
(byte~) gfx_mode::$39
(bool~) gfx_mode::$4
(word~) gfx_mode::$40
(byte~) gfx_mode::$41
(number~) gfx_mode::$42
(number~) gfx_mode::$43
(number~) gfx_mode::$44
(number~) gfx_mode::$45
(byte*~) gfx_mode::$46
(number~) gfx_mode::$47
(number~) gfx_mode::$48
(byte*~) gfx_mode::$49
(bool~) gfx_mode::$5
(number~) gfx_mode::$50
(number~) gfx_mode::$51
(number~) gfx_mode::$52
(number~) gfx_mode::$53
(byte*~) gfx_mode::$54
(number~) gfx_mode::$55
(number~) gfx_mode::$56
(number~) gfx_mode::$57
(number~) gfx_mode::$58
(number~) gfx_mode::$59
(bool~) gfx_mode::$6
(number~) gfx_mode::$60
(number~) gfx_mode::$61
(number~) gfx_mode::$62
(bool~) gfx_mode::$63
(byte~) gfx_mode::$64
(byte~) gfx_mode::$65
(byte~) gfx_mode::$66
(byte~) gfx_mode::$67
(byte~) gfx_mode::$68
(byte~) gfx_mode::$69
(bool~) gfx_mode::$7
(byte~) gfx_mode::$70
(byte~) gfx_mode::$71
(byte~) gfx_mode::$72
(bool~) gfx_mode::$73
(bool~) gfx_mode::$74
(bool~) gfx_mode::$75
(bool~) gfx_mode::$76
(bool~) gfx_mode::$77
(byte~) gfx_mode::$79
(bool~) gfx_mode::$8
(bool~) gfx_mode::$80
(bool~) gfx_mode::$81
(word~) gfx_mode::$82
(word~) gfx_mode::$83
(byte~) gfx_mode::$84
(bool~) gfx_mode::$9
(label) gfx_mode::@1
(label) gfx_mode::@10
(label) gfx_mode::@11
(label) gfx_mode::@12
(label) gfx_mode::@13
(label) gfx_mode::@14
(label) gfx_mode::@15
(label) gfx_mode::@16
(label) gfx_mode::@17
(label) gfx_mode::@18
(label) gfx_mode::@19
(label) gfx_mode::@2
(label) gfx_mode::@20
(label) gfx_mode::@21
(label) gfx_mode::@22
(label) gfx_mode::@23
(label) gfx_mode::@24
(label) gfx_mode::@25
(label) gfx_mode::@26
(label) gfx_mode::@27
(label) gfx_mode::@28
(label) gfx_mode::@29
(label) gfx_mode::@3
(label) gfx_mode::@30
(label) gfx_mode::@31
(label) gfx_mode::@32
(label) gfx_mode::@33
(label) gfx_mode::@34
(label) gfx_mode::@35
(label) gfx_mode::@36
(label) gfx_mode::@4
(label) gfx_mode::@5
(label) gfx_mode::@6
(label) gfx_mode::@7
(label) gfx_mode::@8
(label) gfx_mode::@9
(label) gfx_mode::@return
(byte*) gfx_mode::col
(byte*) gfx_mode::col#0
(byte*) gfx_mode::col#1
(byte*) gfx_mode::col#2
(byte*) gfx_mode::col#3
(byte*) gfx_mode::col#4
(byte) gfx_mode::cx
(byte) gfx_mode::cx#0
(byte) gfx_mode::cx#1
(byte) gfx_mode::cx#2
(byte) gfx_mode::cy
(byte) gfx_mode::cy#0
(byte) gfx_mode::cy#1
(byte) gfx_mode::cy#2
(byte) gfx_mode::cy#3
(byte) gfx_mode::cy#4
(byte) gfx_mode::dtv_control
(byte) gfx_mode::dtv_control#0
(byte) gfx_mode::dtv_control#1
(byte) gfx_mode::dtv_control#10
(byte) gfx_mode::dtv_control#11
(byte) gfx_mode::dtv_control#12
(byte) gfx_mode::dtv_control#13
(byte) gfx_mode::dtv_control#14
(byte) gfx_mode::dtv_control#15
(byte) gfx_mode::dtv_control#16
(byte) gfx_mode::dtv_control#17
(byte) gfx_mode::dtv_control#18
(byte) gfx_mode::dtv_control#2
(byte) gfx_mode::dtv_control#3
(byte) gfx_mode::dtv_control#4
(byte) gfx_mode::dtv_control#5
(byte) gfx_mode::dtv_control#6
(byte) gfx_mode::dtv_control#7
(byte) gfx_mode::dtv_control#8
(byte) gfx_mode::dtv_control#9
(byte) gfx_mode::i
(byte) gfx_mode::i#0
(byte) gfx_mode::i#1
(byte) gfx_mode::i#2
(byte) gfx_mode::j
(byte) gfx_mode::j#0
(byte) gfx_mode::j#1
(byte) gfx_mode::j#2
(byte) gfx_mode::keyboard_event
(byte) gfx_mode::keyboard_event#0
(dword) gfx_mode::plane_a
(dword) gfx_mode::plane_a#0
(byte) gfx_mode::plane_a_offs
(byte) gfx_mode::plane_a_offs#0
(byte) gfx_mode::plane_a_offs#1
(dword) gfx_mode::plane_b
(dword) gfx_mode::plane_b#0
(byte) gfx_mode::plane_b_offs
(byte) gfx_mode::plane_b_offs#0
(byte) gfx_mode::plane_b_offs#1
(byte*) gfx_mode::vic_colors
(byte*) gfx_mode::vic_colors#0
(byte*) gfx_mode::vic_colors#1
(byte*) gfx_mode::vic_colors#2
(byte*) gfx_mode::vic_colors#3
(byte*) gfx_mode::vic_colors#4
(byte) gfx_mode::vic_control
(byte) gfx_mode::vic_control#0
(byte) gfx_mode::vic_control#1
(byte) gfx_mode::vic_control#2
(byte) gfx_mode::vic_control#3
(byte) gfx_mode::vic_control#4
(byte) gfx_mode::vic_control#5
(byte) gfx_mode::vic_control#6
(byte) gfx_mode::vic_control2
(byte) gfx_mode::vic_control2#0
(byte) gfx_mode::vic_control2#1
(byte) gfx_mode::vic_control2#2
(byte) gfx_mode::vic_control2#3
(byte()) keyboard_event_get()
(bool~) keyboard_event_get::$0
(label) keyboard_event_get::@1
(label) keyboard_event_get::@2
(label) keyboard_event_get::@return
(byte) keyboard_event_get::return
(byte) keyboard_event_get::return#0
(byte) keyboard_event_get::return#1
(byte) keyboard_event_get::return#2
(byte) keyboard_event_get::return#3
(byte) keyboard_event_get::return#4
(byte) keyboard_event_get::return#5
(byte) keyboard_event_get::return#6
(byte) keyboard_event_get::return#7
(byte()) keyboard_event_pressed((byte) keyboard_event_pressed::keycode)
(byte~) keyboard_event_pressed::$0
(number~) keyboard_event_pressed::$1
(byte~) keyboard_event_pressed::$2
(label) keyboard_event_pressed::@return
(byte) keyboard_event_pressed::keycode
(byte) keyboard_event_pressed::keycode#0
(byte) keyboard_event_pressed::keycode#1
(byte) keyboard_event_pressed::keycode#2
(byte) keyboard_event_pressed::keycode#3
(byte) keyboard_event_pressed::keycode#4
(byte) keyboard_event_pressed::return
(byte) keyboard_event_pressed::return#0
(byte) keyboard_event_pressed::return#1
(byte) keyboard_event_pressed::return#10
(byte) keyboard_event_pressed::return#2
(byte) keyboard_event_pressed::return#3
(byte) keyboard_event_pressed::return#4
(byte) keyboard_event_pressed::return#5
(byte) keyboard_event_pressed::return#6
(byte) keyboard_event_pressed::return#7
(byte) keyboard_event_pressed::return#8
(byte) keyboard_event_pressed::return#9
(byte) keyboard_event_pressed::row_bits
(byte) keyboard_event_pressed::row_bits#0
(void()) keyboard_event_scan()
(byte~) keyboard_event_scan::$0
(bool~) keyboard_event_scan::$1
(bool~) keyboard_event_scan::$10
(bool~) keyboard_event_scan::$11
(byte~) keyboard_event_scan::$12
(bool~) keyboard_event_scan::$13
(number~) keyboard_event_scan::$14
(byte~) keyboard_event_scan::$15
(byte~) keyboard_event_scan::$16
(bool~) keyboard_event_scan::$17
(bool~) keyboard_event_scan::$18
(bool~) keyboard_event_scan::$19
(bool~) keyboard_event_scan::$2
(bool~) keyboard_event_scan::$20
(byte~) keyboard_event_scan::$21
(bool~) keyboard_event_scan::$22
(number~) keyboard_event_scan::$23
(bool~) keyboard_event_scan::$24
(bool~) keyboard_event_scan::$25
(byte~) keyboard_event_scan::$26
(byte~) keyboard_event_scan::$27
(byte~) keyboard_event_scan::$28
(byte~) keyboard_event_scan::$29
(byte~) keyboard_event_scan::$3
(bool~) keyboard_event_scan::$4
(bool~) keyboard_event_scan::$5
(byte~) keyboard_event_scan::$6
(bool~) keyboard_event_scan::$7
(bool~) keyboard_event_scan::$8
(byte~) keyboard_event_scan::$9
(label) keyboard_event_scan::@1
(label) keyboard_event_scan::@10
(label) keyboard_event_scan::@11
(label) keyboard_event_scan::@12
(label) keyboard_event_scan::@13
(label) keyboard_event_scan::@14
(label) keyboard_event_scan::@15
(label) keyboard_event_scan::@16
(label) keyboard_event_scan::@17
(label) keyboard_event_scan::@18
(label) keyboard_event_scan::@19
(label) keyboard_event_scan::@2
(label) keyboard_event_scan::@20
(label) keyboard_event_scan::@21
(label) keyboard_event_scan::@22
(label) keyboard_event_scan::@23
(label) keyboard_event_scan::@24
(label) keyboard_event_scan::@3
(label) keyboard_event_scan::@4
(label) keyboard_event_scan::@5
(label) keyboard_event_scan::@6
(label) keyboard_event_scan::@7
(label) keyboard_event_scan::@8
(label) keyboard_event_scan::@9
(label) keyboard_event_scan::@return
(byte) keyboard_event_scan::col
(byte) keyboard_event_scan::col#0
(byte) keyboard_event_scan::col#1
(byte) keyboard_event_scan::col#2
(byte) keyboard_event_scan::col#3
(byte) keyboard_event_scan::col#4
(byte) keyboard_event_scan::col#5
(byte) keyboard_event_scan::col#6
(byte) keyboard_event_scan::col#7
(byte) keyboard_event_scan::event_type
(byte) keyboard_event_scan::event_type#0
(byte) keyboard_event_scan::keycode
(byte) keyboard_event_scan::keycode#0
(byte) keyboard_event_scan::keycode#1
(byte) keyboard_event_scan::keycode#10
(byte) keyboard_event_scan::keycode#11
(byte) keyboard_event_scan::keycode#12
(byte) keyboard_event_scan::keycode#13
(byte) keyboard_event_scan::keycode#14
(byte) keyboard_event_scan::keycode#2
(byte) keyboard_event_scan::keycode#3
(byte) keyboard_event_scan::keycode#4
(byte) keyboard_event_scan::keycode#5
(byte) keyboard_event_scan::keycode#6
(byte) keyboard_event_scan::keycode#7
(byte) keyboard_event_scan::keycode#8
(byte) keyboard_event_scan::keycode#9
(byte) keyboard_event_scan::row
(byte) keyboard_event_scan::row#0
(byte) keyboard_event_scan::row#1
(byte) keyboard_event_scan::row#10
(byte) keyboard_event_scan::row#11
(byte) keyboard_event_scan::row#12
(byte) keyboard_event_scan::row#13
(byte) keyboard_event_scan::row#2
(byte) keyboard_event_scan::row#3
(byte) keyboard_event_scan::row#4
(byte) keyboard_event_scan::row#5
(byte) keyboard_event_scan::row#6
(byte) keyboard_event_scan::row#7
(byte) keyboard_event_scan::row#8
(byte) keyboard_event_scan::row#9
(byte) keyboard_event_scan::row_scan
(byte) keyboard_event_scan::row_scan#0
(byte) keyboard_event_scan::row_scan#1
(byte) keyboard_event_scan::row_scan#2
(byte) keyboard_event_scan::row_scan#3
(byte) keyboard_event_scan::row_scan#4
(byte) keyboard_event_scan::row_scan#5
(byte) keyboard_event_scan::row_scan#6
(byte) keyboard_event_scan::row_scan#7
(byte) keyboard_event_scan::row_scan#8
(const byte*) keyboard_events[(number) 8]  = { fill( 8, 0) }
(byte) keyboard_events_size
(byte) keyboard_events_size#0
(byte) keyboard_events_size#1
(byte) keyboard_events_size#10
(byte) keyboard_events_size#100
(byte) keyboard_events_size#101
(byte) keyboard_events_size#102
(byte) keyboard_events_size#103
(byte) keyboard_events_size#104
(byte) keyboard_events_size#105
(byte) keyboard_events_size#106
(byte) keyboard_events_size#107
(byte) keyboard_events_size#108
(byte) keyboard_events_size#109
(byte) keyboard_events_size#11
(byte) keyboard_events_size#110
(byte) keyboard_events_size#111
(byte) keyboard_events_size#112
(byte) keyboard_events_size#113
(byte) keyboard_events_size#114
(byte) keyboard_events_size#115
(byte) keyboard_events_size#116
(byte) keyboard_events_size#117
(byte) keyboard_events_size#118
(byte) keyboard_events_size#119
(byte) keyboard_events_size#12
(byte) keyboard_events_size#120
(byte) keyboard_events_size#121
(byte) keyboard_events_size#122
(byte) keyboard_events_size#123
(byte) keyboard_events_size#124
(byte) keyboard_events_size#125
(byte) keyboard_events_size#126
(byte) keyboard_events_size#127
(byte) keyboard_events_size#128
(byte) keyboard_events_size#129
(byte) keyboard_events_size#13
(byte) keyboard_events_size#130
(byte) keyboard_events_size#131
(byte) keyboard_events_size#132
(byte) keyboard_events_size#133
(byte) keyboard_events_size#134
(byte) keyboard_events_size#135
(byte) keyboard_events_size#136
(byte) keyboard_events_size#137
(byte) keyboard_events_size#138
(byte) keyboard_events_size#139
(byte) keyboard_events_size#14
(byte) keyboard_events_size#140
(byte) keyboard_events_size#141
(byte) keyboard_events_size#142
(byte) keyboard_events_size#143
(byte) keyboard_events_size#144
(byte) keyboard_events_size#15
(byte) keyboard_events_size#16
(byte) keyboard_events_size#17
(byte) keyboard_events_size#18
(byte) keyboard_events_size#19
(byte) keyboard_events_size#2
(byte) keyboard_events_size#20
(byte) keyboard_events_size#21
(byte) keyboard_events_size#22
(byte) keyboard_events_size#23
(byte) keyboard_events_size#24
(byte) keyboard_events_size#25
(byte) keyboard_events_size#26
(byte) keyboard_events_size#27
(byte) keyboard_events_size#28
(byte) keyboard_events_size#29
(byte) keyboard_events_size#3
(byte) keyboard_events_size#30
(byte) keyboard_events_size#31
(byte) keyboard_events_size#32
(byte) keyboard_events_size#33
(byte) keyboard_events_size#34
(byte) keyboard_events_size#35
(byte) keyboard_events_size#36
(byte) keyboard_events_size#37
(byte) keyboard_events_size#38
(byte) keyboard_events_size#39
(byte) keyboard_events_size#4
(byte) keyboard_events_size#40
(byte) keyboard_events_size#41
(byte) keyboard_events_size#42
(byte) keyboard_events_size#43
(byte) keyboard_events_size#44
(byte) keyboard_events_size#45
(byte) keyboard_events_size#46
(byte) keyboard_events_size#47
(byte) keyboard_events_size#48
(byte) keyboard_events_size#49
(byte) keyboard_events_size#5
(byte) keyboard_events_size#50
(byte) keyboard_events_size#51
(byte) keyboard_events_size#52
(byte) keyboard_events_size#53
(byte) keyboard_events_size#54
(byte) keyboard_events_size#55
(byte) keyboard_events_size#56
(byte) keyboard_events_size#57
(byte) keyboard_events_size#58
(byte) keyboard_events_size#59
(byte) keyboard_events_size#6
(byte) keyboard_events_size#60
(byte) keyboard_events_size#61
(byte) keyboard_events_size#62
(byte) keyboard_events_size#63
(byte) keyboard_events_size#64
(byte) keyboard_events_size#65
(byte) keyboard_events_size#66
(byte) keyboard_events_size#67
(byte) keyboard_events_size#68
(byte) keyboard_events_size#69
(byte) keyboard_events_size#7
(byte) keyboard_events_size#70
(byte) keyboard_events_size#71
(byte) keyboard_events_size#72
(byte) keyboard_events_size#73
(byte) keyboard_events_size#74
(byte) keyboard_events_size#75
(byte) keyboard_events_size#76
(byte) keyboard_events_size#77
(byte) keyboard_events_size#78
(byte) keyboard_events_size#79
(byte) keyboard_events_size#8
(byte) keyboard_events_size#80
(byte) keyboard_events_size#81
(byte) keyboard_events_size#82
(byte) keyboard_events_size#83
(byte) keyboard_events_size#84
(byte) keyboard_events_size#85
(byte) keyboard_events_size#86
(byte) keyboard_events_size#87
(byte) keyboard_events_size#88
(byte) keyboard_events_size#89
(byte) keyboard_events_size#9
(byte) keyboard_events_size#90
(byte) keyboard_events_size#91
(byte) keyboard_events_size#92
(byte) keyboard_events_size#93
(byte) keyboard_events_size#94
(byte) keyboard_events_size#95
(byte) keyboard_events_size#96
(byte) keyboard_events_size#97
(byte) keyboard_events_size#98
(byte) keyboard_events_size#99
(void()) keyboard_init()
(label) keyboard_init::@return
(const byte*) keyboard_matrix_col_bitmask[(number) 8]  = { (byte) 1, (byte) 2, (byte) 4, (byte) 8, (byte) $10, (byte) $20, (byte) $40, (byte) $80 }
(byte()) keyboard_matrix_read((byte) keyboard_matrix_read::rowid)
(byte~) keyboard_matrix_read::$0
(label) keyboard_matrix_read::@return
(byte) keyboard_matrix_read::return
(byte) keyboard_matrix_read::return#0
(byte) keyboard_matrix_read::return#1
(byte) keyboard_matrix_read::return#2
(byte) keyboard_matrix_read::return#3
(byte) keyboard_matrix_read::return#4
(byte) keyboard_matrix_read::row_pressed_bits
(byte) keyboard_matrix_read::row_pressed_bits#0
(byte) keyboard_matrix_read::rowid
(byte) keyboard_matrix_read::rowid#0
(byte) keyboard_matrix_read::rowid#1
(const byte*) keyboard_matrix_row_bitmask[(number) 8]  = { (byte) $fe, (byte) $fd, (byte) $fb, (byte) $f7, (byte) $ef, (byte) $df, (byte) $bf, (byte) $7f }
(byte) keyboard_modifiers
(byte) keyboard_modifiers#0
(byte) keyboard_modifiers#1
(byte) keyboard_modifiers#10
(byte) keyboard_modifiers#100
(byte) keyboard_modifiers#101
(byte) keyboard_modifiers#102
(byte) keyboard_modifiers#103
(byte) keyboard_modifiers#104
(byte) keyboard_modifiers#105
(byte) keyboard_modifiers#106
(byte) keyboard_modifiers#107
(byte) keyboard_modifiers#108
(byte) keyboard_modifiers#109
(byte) keyboard_modifiers#11
(byte) keyboard_modifiers#110
(byte) keyboard_modifiers#111
(byte) keyboard_modifiers#112
(byte) keyboard_modifiers#113
(byte) keyboard_modifiers#114
(byte) keyboard_modifiers#115
(byte) keyboard_modifiers#116
(byte) keyboard_modifiers#117
(byte) keyboard_modifiers#118
(byte) keyboard_modifiers#119
(byte) keyboard_modifiers#12
(byte) keyboard_modifiers#120
(byte) keyboard_modifiers#121
(byte) keyboard_modifiers#122
(byte) keyboard_modifiers#123
(byte) keyboard_modifiers#124
(byte) keyboard_modifiers#125
(byte) keyboard_modifiers#13
(byte) keyboard_modifiers#14
(byte) keyboard_modifiers#15
(byte) keyboard_modifiers#16
(byte) keyboard_modifiers#17
(byte) keyboard_modifiers#18
(byte) keyboard_modifiers#19
(byte) keyboard_modifiers#2
(byte) keyboard_modifiers#20
(byte) keyboard_modifiers#21
(byte) keyboard_modifiers#22
(byte) keyboard_modifiers#23
(byte) keyboard_modifiers#24
(byte) keyboard_modifiers#25
(byte) keyboard_modifiers#26
(byte) keyboard_modifiers#27
(byte) keyboard_modifiers#28
(byte) keyboard_modifiers#29
(byte) keyboard_modifiers#3
(byte) keyboard_modifiers#30
(byte) keyboard_modifiers#31
(byte) keyboard_modifiers#32
(byte) keyboard_modifiers#33
(byte) keyboard_modifiers#34
(byte) keyboard_modifiers#35
(byte) keyboard_modifiers#36
(byte) keyboard_modifiers#37
(byte) keyboard_modifiers#38
(byte) keyboard_modifiers#39
(byte) keyboard_modifiers#4
(byte) keyboard_modifiers#40
(byte) keyboard_modifiers#41
(byte) keyboard_modifiers#42
(byte) keyboard_modifiers#43
(byte) keyboard_modifiers#44
(byte) keyboard_modifiers#45
(byte) keyboard_modifiers#46
(byte) keyboard_modifiers#47
(byte) keyboard_modifiers#48
(byte) keyboard_modifiers#49
(byte) keyboard_modifiers#5
(byte) keyboard_modifiers#50
(byte) keyboard_modifiers#51
(byte) keyboard_modifiers#52
(byte) keyboard_modifiers#53
(byte) keyboard_modifiers#54
(byte) keyboard_modifiers#55
(byte) keyboard_modifiers#56
(byte) keyboard_modifiers#57
(byte) keyboard_modifiers#58
(byte) keyboard_modifiers#59
(byte) keyboard_modifiers#6
(byte) keyboard_modifiers#60
(byte) keyboard_modifiers#61
(byte) keyboard_modifiers#62
(byte) keyboard_modifiers#63
(byte) keyboard_modifiers#64
(byte) keyboard_modifiers#65
(byte) keyboard_modifiers#66
(byte) keyboard_modifiers#67
(byte) keyboard_modifiers#68
(byte) keyboard_modifiers#69
(byte) keyboard_modifiers#7
(byte) keyboard_modifiers#70
(byte) keyboard_modifiers#71
(byte) keyboard_modifiers#72
(byte) keyboard_modifiers#73
(byte) keyboard_modifiers#74
(byte) keyboard_modifiers#75
(byte) keyboard_modifiers#76
(byte) keyboard_modifiers#77
(byte) keyboard_modifiers#78
(byte) keyboard_modifiers#79
(byte) keyboard_modifiers#8
(byte) keyboard_modifiers#80
(byte) keyboard_modifiers#81
(byte) keyboard_modifiers#82
(byte) keyboard_modifiers#83
(byte) keyboard_modifiers#84
(byte) keyboard_modifiers#85
(byte) keyboard_modifiers#86
(byte) keyboard_modifiers#87
(byte) keyboard_modifiers#88
(byte) keyboard_modifiers#89
(byte) keyboard_modifiers#9
(byte) keyboard_modifiers#90
(byte) keyboard_modifiers#91
(byte) keyboard_modifiers#92
(byte) keyboard_modifiers#93
(byte) keyboard_modifiers#94
(byte) keyboard_modifiers#95
(byte) keyboard_modifiers#96
(byte) keyboard_modifiers#97
(byte) keyboard_modifiers#98
(byte) keyboard_modifiers#99
(const byte*) keyboard_scan_values[(number) 8]  = { fill( 8, 0) }
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@return
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(bool~) memset::$0
(bool~) memset::$1
(byte*~) memset::$2
(bool~) memset::$3
(byte*~) memset::$4
(label) memset::@1
(label) memset::@2
(label) memset::@3
(label) memset::@4
(label) memset::@return
(byte) memset::c
(byte) memset::c#0
(byte) memset::c#1
(byte) memset::c#2
(byte) memset::c#3
(byte) memset::c#4
(byte*) memset::dst
(byte*) memset::dst#0
(byte*) memset::dst#1
(byte*) memset::dst#2
(byte*) memset::dst#3
(byte*) memset::end
(byte*) memset::end#0
(byte*) memset::end#1
(byte*) memset::end#2
(word) memset::num
(word) memset::num#0
(word) memset::num#1
(word) memset::num#2
(void*) memset::return
(void*) memset::return#0
(void*) memset::return#1
(void*) memset::return#2
(void*) memset::return#3
(void*) memset::str
(void*) memset::str#0
(void*) memset::str#1
(void*) memset::str#2
(void*) memset::str#3
(void*) memset::str#4
(void*) memset::str#5
(const byte*) preset_8bpppixelcell[]  = { (byte) $a, (byte) 0, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) $b, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(const byte*) preset_chunky[]  = { (byte) 7, (byte) 0, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 6, (byte) 0, (byte) 0, (byte) 0, (byte) 8, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(const byte*) preset_ecmchar[]  = { (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 2, (byte) 0, (byte) 5, (byte) 0, (byte) 6 }
(const byte*) preset_hi_ecmchar[]  = { (byte) 5, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 3, (byte) 4, (byte) 6, (byte) 8, (byte) 9, (byte) $c, (byte) $c }
(const byte*) preset_hi_stdchar[]  = { (byte) 4, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(const byte*) preset_mcbm[]  = { (byte) 3, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 2, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 9, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(const byte*) preset_sixsfred[]  = { (byte) 8, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 9, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) $a, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(const byte*) preset_sixsfred2[]  = { (byte) 9, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 9, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) $a, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(const byte*) preset_stdbm[]  = { (byte) 2, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 2, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(const byte*) preset_stdchar[]  = { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(const byte*) preset_twoplane[]  = { (byte) 6, (byte) 1, (byte) 0, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 7, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 8, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 7, (byte) 0, (byte) $d, (byte) 4, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0
(byte) print_char::ch#1
(byte*) print_char_cursor
(byte*) print_char_cursor#0
(byte*) print_char_cursor#1
(byte*) print_char_cursor#10
(byte*) print_char_cursor#11
(byte*) print_char_cursor#12
(byte*) print_char_cursor#13
(byte*) print_char_cursor#14
(byte*) print_char_cursor#15
(byte*) print_char_cursor#16
(byte*) print_char_cursor#17
(byte*) print_char_cursor#18
(byte*) print_char_cursor#19
(byte*) print_char_cursor#2
(byte*) print_char_cursor#20
(byte*) print_char_cursor#21
(byte*) print_char_cursor#22
(byte*) print_char_cursor#23
(byte*) print_char_cursor#24
(byte*) print_char_cursor#25
(byte*) print_char_cursor#26
(byte*) print_char_cursor#27
(byte*) print_char_cursor#28
(byte*) print_char_cursor#29
(byte*) print_char_cursor#3
(byte*) print_char_cursor#30
(byte*) print_char_cursor#31
(byte*) print_char_cursor#32
(byte*) print_char_cursor#33
(byte*) print_char_cursor#34
(byte*) print_char_cursor#35
(byte*) print_char_cursor#36
(byte*) print_char_cursor#37
(byte*) print_char_cursor#38
(byte*) print_char_cursor#39
(byte*) print_char_cursor#4
(byte*) print_char_cursor#40
(byte*) print_char_cursor#41
(byte*) print_char_cursor#42
(byte*) print_char_cursor#43
(byte*) print_char_cursor#44
(byte*) print_char_cursor#45
(byte*) print_char_cursor#46
(byte*) print_char_cursor#47
(byte*) print_char_cursor#48
(byte*) print_char_cursor#49
(byte*) print_char_cursor#5
(byte*) print_char_cursor#50
(byte*) print_char_cursor#51
(byte*) print_char_cursor#52
(byte*) print_char_cursor#53
(byte*) print_char_cursor#54
(byte*) print_char_cursor#55
(byte*) print_char_cursor#56
(byte*) print_char_cursor#57
(byte*) print_char_cursor#58
(byte*) print_char_cursor#59
(byte*) print_char_cursor#6
(byte*) print_char_cursor#60
(byte*) print_char_cursor#61
(byte*) print_char_cursor#62
(byte*) print_char_cursor#63
(byte*) print_char_cursor#64
(byte*) print_char_cursor#65
(byte*) print_char_cursor#66
(byte*) print_char_cursor#67
(byte*) print_char_cursor#68
(byte*) print_char_cursor#69
(byte*) print_char_cursor#7
(byte*) print_char_cursor#70
(byte*) print_char_cursor#71
(byte*) print_char_cursor#8
(byte*) print_char_cursor#9
(void()) print_cls()
(label) print_cls::@1
(label) print_cls::@return
(const to_nomodify byte*) print_hextab[]  = (byte*) "0123456789abcdef"z
(byte*) print_line_cursor
(byte*) print_line_cursor#0
(byte*) print_line_cursor#1
(byte*) print_line_cursor#10
(byte*) print_line_cursor#11
(byte*) print_line_cursor#12
(byte*) print_line_cursor#13
(byte*) print_line_cursor#14
(byte*) print_line_cursor#15
(byte*) print_line_cursor#16
(byte*) print_line_cursor#17
(byte*) print_line_cursor#18
(byte*) print_line_cursor#19
(byte*) print_line_cursor#2
(byte*) print_line_cursor#20
(byte*) print_line_cursor#21
(byte*) print_line_cursor#22
(byte*) print_line_cursor#23
(byte*) print_line_cursor#24
(byte*) print_line_cursor#25
(byte*) print_line_cursor#26
(byte*) print_line_cursor#27
(byte*) print_line_cursor#28
(byte*) print_line_cursor#29
(byte*) print_line_cursor#3
(byte*) print_line_cursor#30
(byte*) print_line_cursor#31
(byte*) print_line_cursor#32
(byte*) print_line_cursor#33
(byte*) print_line_cursor#34
(byte*) print_line_cursor#35
(byte*) print_line_cursor#36
(byte*) print_line_cursor#37
(byte*) print_line_cursor#38
(byte*) print_line_cursor#39
(byte*) print_line_cursor#4
(byte*) print_line_cursor#40
(byte*) print_line_cursor#41
(byte*) print_line_cursor#42
(byte*) print_line_cursor#43
(byte*) print_line_cursor#44
(byte*) print_line_cursor#45
(byte*) print_line_cursor#46
(byte*) print_line_cursor#47
(byte*) print_line_cursor#48
(byte*) print_line_cursor#49
(byte*) print_line_cursor#5
(byte*) print_line_cursor#50
(byte*) print_line_cursor#51
(byte*) print_line_cursor#52
(byte*) print_line_cursor#53
(byte*) print_line_cursor#54
(byte*) print_line_cursor#55
(byte*) print_line_cursor#56
(byte*) print_line_cursor#57
(byte*) print_line_cursor#58
(byte*) print_line_cursor#59
(byte*) print_line_cursor#6
(byte*) print_line_cursor#60
(byte*) print_line_cursor#61
(byte*) print_line_cursor#62
(byte*) print_line_cursor#63
(byte*) print_line_cursor#64
(byte*) print_line_cursor#65
(byte*) print_line_cursor#66
(byte*) print_line_cursor#67
(byte*) print_line_cursor#7
(byte*) print_line_cursor#8
(byte*) print_line_cursor#9
(void()) print_ln()
(byte*~) print_ln::$0
(bool~) print_ln::$1
(label) print_ln::@1
(label) print_ln::@2
(label) print_ln::@return
(byte*) print_screen
(byte*) print_screen#0
(byte*) print_screen#1
(byte*) print_screen#10
(byte*) print_screen#11
(byte*) print_screen#12
(byte*) print_screen#13
(byte*) print_screen#14
(byte*) print_screen#15
(byte*) print_screen#16
(byte*) print_screen#17
(byte*) print_screen#18
(byte*) print_screen#19
(byte*) print_screen#2
(byte*) print_screen#20
(byte*) print_screen#21
(byte*) print_screen#22
(byte*) print_screen#23
(byte*) print_screen#24
(byte*) print_screen#25
(byte*) print_screen#26
(byte*) print_screen#27
(byte*) print_screen#28
(byte*) print_screen#29
(byte*) print_screen#3
(byte*) print_screen#30
(byte*) print_screen#31
(byte*) print_screen#32
(byte*) print_screen#33
(byte*) print_screen#34
(byte*) print_screen#35
(byte*) print_screen#36
(byte*) print_screen#37
(byte*) print_screen#38
(byte*) print_screen#39
(byte*) print_screen#4
(byte*) print_screen#40
(byte*) print_screen#41
(byte*) print_screen#42
(byte*) print_screen#43
(byte*) print_screen#44
(byte*) print_screen#45
(byte*) print_screen#5
(byte*) print_screen#6
(byte*) print_screen#7
(byte*) print_screen#8
(byte*) print_screen#9
(void()) print_set_screen((byte*) print_set_screen::screen)
(label) print_set_screen::@return
(byte*) print_set_screen::screen
(byte*) print_set_screen::screen#0
(byte*) print_set_screen::screen#1
(byte*) print_set_screen::screen#2
(void()) print_str_at((byte*) print_str_at::str , (byte*) print_str_at::at)
(bool~) print_str_at::$0
(label) print_str_at::@1
(label) print_str_at::@2
(label) print_str_at::@return
(byte*) print_str_at::at
(byte*) print_str_at::at#0
(byte*) print_str_at::at#1
(byte*) print_str_at::at#2
(byte*) print_str_at::at#3
(byte*) print_str_at::at#4
(byte*) print_str_at::str
(byte*) print_str_at::str#0
(byte*) print_str_at::str#1
(byte*) print_str_at::str#2
(byte*) print_str_at::str#3
(byte*) print_str_at::str#4
(void()) print_str_lines((byte*) print_str_lines::str)
(bool~) print_str_lines::$0
(bool~) print_str_lines::$3
(bool~) print_str_lines::$4
(bool~) print_str_lines::$5
(label) print_str_lines::@1
(label) print_str_lines::@2
(label) print_str_lines::@3
(label) print_str_lines::@4
(label) print_str_lines::@5
(label) print_str_lines::@6
(label) print_str_lines::@7
(label) print_str_lines::@return
(byte) print_str_lines::ch
(byte) print_str_lines::ch#0
(byte) print_str_lines::ch#1
(byte) print_str_lines::ch#2
(byte) print_str_lines::ch#3
(byte*) print_str_lines::str
(byte*) print_str_lines::str#0
(byte*) print_str_lines::str#1
(byte*) print_str_lines::str#10
(byte*) print_str_lines::str#2
(byte*) print_str_lines::str#3
(byte*) print_str_lines::str#4
(byte*) print_str_lines::str#5
(byte*) print_str_lines::str#6
(byte*) print_str_lines::str#7
(byte*) print_str_lines::str#8
(byte*) print_str_lines::str#9
(void()) render_preset_name((byte) render_preset_name::idx)
(bool~) render_preset_name::$0
(bool~) render_preset_name::$1
(bool~) render_preset_name::$10
(const byte*) render_preset_name::$12[(byte) $1f]  = (byte*) "Standard Charset              "
(const byte*) render_preset_name::$13[(byte) $1f]  = (byte*) "Extended Color Charset        "
(const byte*) render_preset_name::$14[(byte) $1f]  = (byte*) "Standard Bitmap               "
(const byte*) render_preset_name::$15[(byte) $1f]  = (byte*) "Multicolor Bitmap             "
(const byte*) render_preset_name::$16[(byte) $1f]  = (byte*) "Hicolor Charset               "
(const byte*) render_preset_name::$17[(byte) $1f]  = (byte*) "Hicolor Extended Color Charset"
(const byte*) render_preset_name::$18[(byte) $1f]  = (byte*) "Twoplane Bitmap               "
(const byte*) render_preset_name::$19[(byte) $1f]  = (byte*) "Chunky 8bpp                   "
(bool~) render_preset_name::$2
(const byte*) render_preset_name::$20[(byte) $1f]  = (byte*) "Sixs Fred                     "
(const byte*) render_preset_name::$21[(byte) $1f]  = (byte*) "Sixs Fred 2                   "
(const byte*) render_preset_name::$22[(byte) $1f]  = (byte*) "8bpp Pixel Cell               "
(const byte*) render_preset_name::$23[(byte) $1f]  = (byte*) "Standard Charset              "
(bool~) render_preset_name::$3
(bool~) render_preset_name::$4
(bool~) render_preset_name::$5
(bool~) render_preset_name::$6
(bool~) render_preset_name::$7
(bool~) render_preset_name::$8
(bool~) render_preset_name::$9
(label) render_preset_name::@1
(label) render_preset_name::@10
(label) render_preset_name::@11
(label) render_preset_name::@12
(label) render_preset_name::@13
(label) render_preset_name::@14
(label) render_preset_name::@15
(label) render_preset_name::@16
(label) render_preset_name::@17
(label) render_preset_name::@18
(label) render_preset_name::@19
(label) render_preset_name::@2
(label) render_preset_name::@20
(label) render_preset_name::@21
(label) render_preset_name::@22
(label) render_preset_name::@23
(label) render_preset_name::@24
(label) render_preset_name::@3
(label) render_preset_name::@4
(label) render_preset_name::@5
(label) render_preset_name::@6
(label) render_preset_name::@7
(label) render_preset_name::@8
(label) render_preset_name::@9
(label) render_preset_name::@return
(byte) render_preset_name::idx
(byte) render_preset_name::idx#0
(byte) render_preset_name::idx#1
(byte) render_preset_name::idx#10
(byte) render_preset_name::idx#11
(byte) render_preset_name::idx#12
(byte) render_preset_name::idx#2
(byte) render_preset_name::idx#3
(byte) render_preset_name::idx#4
(byte) render_preset_name::idx#5
(byte) render_preset_name::idx#6
(byte) render_preset_name::idx#7
(byte) render_preset_name::idx#8
(byte) render_preset_name::idx#9
(byte*) render_preset_name::name
(byte*) render_preset_name::name#0
(byte*) render_preset_name::name#1
(byte*) render_preset_name::name#10
(byte*) render_preset_name::name#11
(byte*) render_preset_name::name#12
(byte*) render_preset_name::name#13
(byte*) render_preset_name::name#2
(byte*) render_preset_name::name#3
(byte*) render_preset_name::name#4
(byte*) render_preset_name::name#5
(byte*) render_preset_name::name#6
(byte*) render_preset_name::name#7
(byte*) render_preset_name::name#8
(byte*) render_preset_name::name#9

Fixing inline constructor with bitmap_clear::$2 ← (byte)*(bitmap_plot_xhi + 0) w= (byte)*(bitmap_plot_xlo + 0)
Fixing inline constructor with bitmap_plot::$2 ← (byte)*(bitmap_plot_xhi + bitmap_plot::x#4) w= (byte)*(bitmap_plot_xlo + bitmap_plot::x#4)
Fixing inline constructor with bitmap_plot::$3 ← (byte)*(bitmap_plot_yhi + bitmap_plot::y#4) w= (byte)*(bitmap_plot_ylo + bitmap_plot::y#4)
Fixing inline constructor with form_field_ptr::$1 ← (byte)*(form_line_hi + form_field_ptr::y#0) w= (byte)*(form_line_lo + form_field_ptr::y#0)
Successful SSA optimization Pass2FixInlineConstructors
Adding number conversion cast (unumber) 0 in 
Adding number conversion cast (unumber) 1 in 
Adding number conversion cast (unumber) 2 in 
Adding number conversion cast (unumber) 3 in 
Adding number conversion cast (unumber) 4 in 
Adding number conversion cast (unumber) 5 in 
Adding number conversion cast (unumber) 6 in 
Adding number conversion cast (unumber) 7 in 
Adding number conversion cast (unumber) 8 in 
Adding number conversion cast (unumber) 9 in 
Adding number conversion cast (unumber) $a in 
Adding number conversion cast (unumber) $b in 
Adding number conversion cast (unumber) $c in 
Adding number conversion cast (unumber) $d in 
Adding number conversion cast (unumber) $e in 
Adding number conversion cast (unumber) $f in 
Adding number conversion cast (unumber) $10 in 
Adding number conversion cast (unumber) $11 in 
Adding number conversion cast (unumber) $12 in 
Adding number conversion cast (unumber) $13 in 
Adding number conversion cast (unumber) $14 in 
Adding number conversion cast (unumber) $15 in 
Adding number conversion cast (unumber) $16 in 
Adding number conversion cast (unumber) $17 in 
Adding number conversion cast (unumber) $18 in 
Adding number conversion cast (unumber) $19 in 
Adding number conversion cast (unumber) $1a in 
Adding number conversion cast (unumber) $1b in 
Adding number conversion cast (unumber) $1c in 
Adding number conversion cast (unumber) $1d in 
Adding number conversion cast (unumber) $1e in 
Adding number conversion cast (unumber) $1f in 
Adding number conversion cast (unumber) $20 in 
Adding number conversion cast (unumber) $21 in 
Adding number conversion cast (unumber) $22 in 
Adding number conversion cast (unumber) $23 in 
Adding number conversion cast (unumber) 0 in (bool~) memset::$0 ← (word) memset::num#1 > (number) 0
Adding number conversion cast (unumber) 0 in (bool~) print_str_lines::$3 ← (number) 0 != *((byte*) print_str_lines::str#3)
Adding number conversion cast (unumber) 0 in (bool~) print_str_lines::$5 ← (number) 0 != (byte) print_str_lines::ch#0
Adding number conversion cast (unumber) 0 in (bool~) print_str_lines::$4 ← (number) 0 != (byte) print_str_lines::ch#1
Adding number conversion cast (unumber) 0 in (bool~) print_str_at::$0 ← (number) 0 != *((byte*) print_str_at::str#2)
Adding number conversion cast (unumber) $28 in (byte*~) print_ln::$0 ← (byte*) print_line_cursor#21 + (number) $28
Adding number conversion cast (unumber) $3e8 in (word) memset::num#0 ← (number) $3e8
Adding number conversion cast (unumber) $ff in *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) ← (number) $ff
Adding number conversion cast (unumber) 0 in *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_B_DDR) ← (number) 0
Adding number conversion cast (unumber) 8 in (number~) keyboard_event_scan::$14 ← (byte) keyboard_event_scan::keycode#3 + (number) 8
Adding number conversion cast (unumber) keyboard_event_scan::$14 in (number~) keyboard_event_scan::$14 ← (byte) keyboard_event_scan::keycode#3 + (unumber)(number) 8
Adding number conversion cast (unumber) 0 in (bool~) keyboard_event_scan::$17 ← (byte~) keyboard_event_scan::$16 != (number) 0
Adding number conversion cast (unumber) 8 in (bool~) keyboard_event_scan::$19 ← (byte) keyboard_events_size#18 != (number) 8
Adding number conversion cast (unumber) 0 in (bool~) keyboard_event_scan::$22 ← (byte) keyboard_event_scan::event_type#0 == (number) 0
Adding number conversion cast (unumber) $40 in (number~) keyboard_event_scan::$23 ← (byte) keyboard_event_scan::keycode#5 | (number) $40
Adding number conversion cast (unumber) keyboard_event_scan::$23 in (number~) keyboard_event_scan::$23 ← (byte) keyboard_event_scan::keycode#5 | (unumber)(number) $40
Adding number conversion cast (unumber) 0 in (byte) keyboard_modifiers#1 ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) keyboard_event_scan::$1 ← (byte~) keyboard_event_scan::$0 != (number) 0
Adding number conversion cast (unumber) 0 in (bool~) keyboard_event_scan::$4 ← (byte~) keyboard_event_scan::$3 != (number) 0
Adding number conversion cast (unumber) 0 in (bool~) keyboard_event_scan::$7 ← (byte~) keyboard_event_scan::$6 != (number) 0
Adding number conversion cast (unumber) 0 in (bool~) keyboard_event_scan::$10 ← (byte~) keyboard_event_scan::$9 != (number) 0
Adding number conversion cast (unumber) 3 in (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#4 >> (number) 3
Adding number conversion cast (unumber) 7 in (number~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#4 & (number) 7
Adding number conversion cast (unumber) keyboard_event_pressed::$1 in (number~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#4 & (unumber)(number) 7
Adding number conversion cast (unumber) 0 in (bool~) keyboard_event_get::$0 ← (byte) keyboard_events_size#22 == (number) 0
Adding number conversion cast (unumber) $ff in (byte) keyboard_event_get::return#0 ← (number) $ff
Adding number conversion cast (unumber) $f8 in (number~) bitmap_init::$0 ← (byte) bitmap_init::x#2 & (number) $f8
Adding number conversion cast (unumber) bitmap_init::$0 in (number~) bitmap_init::$0 ← (byte) bitmap_init::x#2 & (unumber)(number) $f8
Adding number conversion cast (unumber) 1 in (byte~) bitmap_init::$2 ← (byte) bitmap_init::bits#3 >> (number) 1
Adding number conversion cast (unumber) 0 in (bool~) bitmap_init::$3 ← (byte) bitmap_init::bits#1 == (number) 0
Adding number conversion cast (unumber) $80 in (byte) bitmap_init::bits#2 ← (number) $80
Adding number conversion cast (unumber) 7 in (number~) bitmap_init::$6 ← (byte) bitmap_init::y#2 & (number) 7
Adding number conversion cast (unumber) bitmap_init::$6 in (number~) bitmap_init::$6 ← (byte) bitmap_init::y#2 & (unumber)(number) 7
Adding number conversion cast (unumber) bitmap_init::$8 in (number~) bitmap_init::$8 ← (unumber~) bitmap_init::$6 | (byte~) bitmap_init::$7
Adding number conversion cast (unumber) 7 in (number~) bitmap_init::$10 ← (byte) bitmap_init::y#2 & (number) 7
Adding number conversion cast (unumber) bitmap_init::$10 in (number~) bitmap_init::$10 ← (byte) bitmap_init::y#2 & (unumber)(number) 7
Adding number conversion cast (unumber) 7 in (bool~) bitmap_init::$11 ← (unumber~) bitmap_init::$10 == (number) 7
Adding number conversion cast (unumber) $28*8 in (byte*~) bitmap_init::$13 ← (byte*) bitmap_init::yoffs#3 + (number) $28*(number) 8
Adding number conversion cast (unumber) 0 in (byte*~) bitmap_clear::$2 ← (byte)*((const to_nomodify byte*) bitmap_plot_xhi + (number) 0) w= (byte)*((const to_nomodify byte*) bitmap_plot_xlo + (number) 0)
Adding number conversion cast (unumber) 0 in (byte*~) bitmap_clear::$2 ← (byte)*((const to_nomodify byte*) bitmap_plot_xhi + (unumber)(number) 0) w= (byte)*((const to_nomodify byte*) bitmap_plot_xlo + (number) 0)
Adding number conversion cast (unumber) 0 in *((byte*) bitmap_clear::bitmap#2) ← (number) 0
Adding number conversion cast (unumber) 1 in (byte~) bitmap_line_xdyi::$0 ← (byte) bitmap_line_xdyi::yd#2 >> (number) 1
Adding number conversion cast (unumber) 1 in (number~) bitmap_line_xdyi::$6 ← (byte) bitmap_line_xdyi::x1#2 + (number) 1
Adding number conversion cast (unumber) bitmap_line_xdyi::$6 in (number~) bitmap_line_xdyi::$6 ← (byte) bitmap_line_xdyi::x1#2 + (unumber)(number) 1
Adding number conversion cast (unumber) 1 in (byte~) bitmap_line_xdyd::$0 ← (byte) bitmap_line_xdyd::yd#2 >> (number) 1
Adding number conversion cast (unumber) 1 in (number~) bitmap_line_xdyd::$6 ← (byte) bitmap_line_xdyd::x1#2 + (number) 1
Adding number conversion cast (unumber) bitmap_line_xdyd::$6 in (number~) bitmap_line_xdyd::$6 ← (byte) bitmap_line_xdyd::x1#2 + (unumber)(number) 1
Adding number conversion cast (unumber) 1 in (byte~) bitmap_line_ydxi::$0 ← (byte) bitmap_line_ydxi::xd#2 >> (number) 1
Adding number conversion cast (unumber) 1 in (number~) bitmap_line_ydxi::$6 ← (byte) bitmap_line_ydxi::y1#2 + (number) 1
Adding number conversion cast (unumber) bitmap_line_ydxi::$6 in (number~) bitmap_line_ydxi::$6 ← (byte) bitmap_line_ydxi::y1#2 + (unumber)(number) 1
Adding number conversion cast (unumber) 1 in (byte~) bitmap_line_ydxd::$0 ← (byte) bitmap_line_ydxd::xd#2 >> (number) 1
Adding number conversion cast (unumber) 1 in (number~) bitmap_line_ydxd::$6 ← (byte) bitmap_line_ydxd::y1#2 + (number) 1
Adding number conversion cast (unumber) bitmap_line_ydxd::$6 in (number~) bitmap_line_ydxd::$6 ← (byte) bitmap_line_ydxd::y1#2 + (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (bool~) get_plane::$0 ← (byte) get_plane::idx#2 == (number) 0
Adding number conversion cast (unumber) 1 in (bool~) get_plane::$1 ← (byte) get_plane::idx#3 == (number) 1
Adding number conversion cast (unumber) 2 in (bool~) get_plane::$2 ← (byte) get_plane::idx#4 == (number) 2
Adding number conversion cast (unumber) 3 in (bool~) get_plane::$3 ← (byte) get_plane::idx#5 == (number) 3
Adding number conversion cast (unumber) 4 in (bool~) get_plane::$4 ← (byte) get_plane::idx#6 == (number) 4
Adding number conversion cast (unumber) 5 in (bool~) get_plane::$5 ← (byte) get_plane::idx#7 == (number) 5
Adding number conversion cast (unumber) 6 in (bool~) get_plane::$6 ← (byte) get_plane::idx#8 == (number) 6
Adding number conversion cast (unumber) 7 in (bool~) get_plane::$7 ← (byte) get_plane::idx#9 == (number) 7
Adding number conversion cast (unumber) 8 in (bool~) get_plane::$8 ← (byte) get_plane::idx#10 == (number) 8
Adding number conversion cast (unumber) 9 in (bool~) get_plane::$9 ← (byte) get_plane::idx#11 == (number) 9
Adding number conversion cast (unumber) $a in (bool~) get_plane::$10 ← (byte) get_plane::idx#12 == (number) $a
Adding number conversion cast (unumber) $b in (bool~) get_plane::$11 ← (byte) get_plane::idx#13 == (number) $b
Adding number conversion cast (unumber) $c in (bool~) get_plane::$12 ← (byte) get_plane::idx#14 == (number) $c
Adding number conversion cast (unumber) $d in (bool~) get_plane::$13 ← (byte) get_plane::idx#15 == (number) $d
Adding number conversion cast (unumber) 0 in (bool~) get_vic_screen::$0 ← (byte) get_vic_screen::idx#2 == (number) 0
Adding number conversion cast (unumber) 1 in (bool~) get_vic_screen::$1 ← (byte) get_vic_screen::idx#3 == (number) 1
Adding number conversion cast (unumber) 2 in (bool~) get_vic_screen::$2 ← (byte) get_vic_screen::idx#4 == (number) 2
Adding number conversion cast (unumber) 3 in (bool~) get_vic_screen::$3 ← (byte) get_vic_screen::idx#5 == (number) 3
Adding number conversion cast (unumber) 4 in (bool~) get_vic_screen::$4 ← (byte) get_vic_screen::idx#6 == (number) 4
Adding number conversion cast (unumber) 0 in (bool~) get_vic_charset::$0 ← (byte) get_vic_charset::idx#1 == (number) 0
Adding number conversion cast (unumber) 1 in (bool~) get_vic_charset::$1 ← (byte) get_vic_charset::idx#2 == (number) 1
Adding number conversion cast (unumber) 0 in (bool~) apply_preset::$0 ← (byte) apply_preset::idx#1 == (number) 0
Adding number conversion cast (unumber) 1 in (bool~) apply_preset::$1 ← (byte) apply_preset::idx#2 == (number) 1
Adding number conversion cast (unumber) 2 in (bool~) apply_preset::$2 ← (byte) apply_preset::idx#3 == (number) 2
Adding number conversion cast (unumber) 3 in (bool~) apply_preset::$3 ← (byte) apply_preset::idx#4 == (number) 3
Adding number conversion cast (unumber) 4 in (bool~) apply_preset::$4 ← (byte) apply_preset::idx#5 == (number) 4
Adding number conversion cast (unumber) 5 in (bool~) apply_preset::$5 ← (byte) apply_preset::idx#6 == (number) 5
Adding number conversion cast (unumber) 6 in (bool~) apply_preset::$6 ← (byte) apply_preset::idx#7 == (number) 6
Adding number conversion cast (unumber) 7 in (bool~) apply_preset::$7 ← (byte) apply_preset::idx#8 == (number) 7
Adding number conversion cast (unumber) 8 in (bool~) apply_preset::$8 ← (byte) apply_preset::idx#9 == (number) 8
Adding number conversion cast (unumber) 9 in (bool~) apply_preset::$9 ← (byte) apply_preset::idx#10 == (number) 9
Adding number conversion cast (unumber) $a in (bool~) apply_preset::$10 ← (byte) apply_preset::idx#11 == (number) $a
Adding number conversion cast (unumber) 0 in (bool~) render_preset_name::$0 ← (byte) render_preset_name::idx#2 == (number) 0
Adding number conversion cast (unumber) 1 in (bool~) render_preset_name::$1 ← (byte) render_preset_name::idx#3 == (number) 1
Adding number conversion cast (unumber) 2 in (bool~) render_preset_name::$2 ← (byte) render_preset_name::idx#4 == (number) 2
Adding number conversion cast (unumber) 3 in (bool~) render_preset_name::$3 ← (byte) render_preset_name::idx#5 == (number) 3
Adding number conversion cast (unumber) 4 in (bool~) render_preset_name::$4 ← (byte) render_preset_name::idx#6 == (number) 4
Adding number conversion cast (unumber) 5 in (bool~) render_preset_name::$5 ← (byte) render_preset_name::idx#7 == (number) 5
Adding number conversion cast (unumber) 6 in (bool~) render_preset_name::$6 ← (byte) render_preset_name::idx#8 == (number) 6
Adding number conversion cast (unumber) 7 in (bool~) render_preset_name::$7 ← (byte) render_preset_name::idx#9 == (number) 7
Adding number conversion cast (unumber) 8 in (bool~) render_preset_name::$8 ← (byte) render_preset_name::idx#10 == (number) 8
Adding number conversion cast (unumber) 9 in (bool~) render_preset_name::$9 ← (byte) render_preset_name::idx#11 == (number) 9
Adding number conversion cast (unumber) $a in (bool~) render_preset_name::$10 ← (byte) render_preset_name::idx#12 == (number) $a
Adding number conversion cast (unumber) $a in (byte*) print_str_at::at#1 ← (const nomodify byte*) FORM_SCREEN+(number) $28*(number) 2+(number) $a
Adding number conversion cast (unumber) $28*2 in (byte*) print_str_at::at#1 ← (const nomodify byte*) FORM_SCREEN+(number) $28*(number) 2+(unumber)(number) $a
Adding number conversion cast (unumber) 0 in (bool~) gfx_mode::$0 ← *((const nomodify byte*) form_ctrl_line) != (number) 0
Adding number conversion cast (unumber) 0 in (bool~) gfx_mode::$2 ← *((const nomodify byte*) form_ctrl_borof) != (number) 0
Adding number conversion cast (unumber) 0 in (bool~) gfx_mode::$4 ← *((const nomodify byte*) form_ctrl_hicol) != (number) 0
Adding number conversion cast (unumber) 0 in (bool~) gfx_mode::$6 ← *((const nomodify byte*) form_ctrl_overs) != (number) 0
Adding number conversion cast (unumber) 0 in (bool~) gfx_mode::$8 ← *((const nomodify byte*) form_ctrl_colof) != (number) 0
Adding number conversion cast (unumber) 0 in (bool~) gfx_mode::$10 ← *((const nomodify byte*) form_ctrl_chunk) != (number) 0
Adding number conversion cast (unumber) 3 in (byte) gfx_mode::vic_control#0 ← (byte)(const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(number) 3
Adding number conversion cast (unumber) 0 in (bool~) gfx_mode::$12 ← *((const nomodify byte*) form_ctrl_ecm) != (number) 0
Adding number conversion cast (unumber) 0 in (bool~) gfx_mode::$14 ← *((const nomodify byte*) form_ctrl_bmm) != (number) 0
Adding number conversion cast (unumber) 0 in (bool~) gfx_mode::$16 ← *((const nomodify byte*) form_ctrl_mcm) != (number) 0
Adding number conversion cast (unumber) $10 in (number~) gfx_mode::$18 ← *((const nomodify byte*) form_a_start_hi) * (number) $10
Adding number conversion cast (unumber) gfx_mode::$18 in (number~) gfx_mode::$18 ← *((const nomodify byte*) form_a_start_hi) * (unumber)(number) $10
Adding number conversion cast (unumber) gfx_mode::$19 in (number~) gfx_mode::$19 ← (unumber~) gfx_mode::$18 | *((const nomodify byte*) form_a_start_lo)
Adding number conversion cast (unumber) $10 in (number~) gfx_mode::$28 ← *((const nomodify byte*) form_a_step_hi) * (number) $10
Adding number conversion cast (unumber) gfx_mode::$28 in (number~) gfx_mode::$28 ← *((const nomodify byte*) form_a_step_hi) * (unumber)(number) $10
Adding number conversion cast (unumber) gfx_mode::$29 in (number~) gfx_mode::$29 ← (unumber~) gfx_mode::$28 | *((const nomodify byte*) form_a_step_lo)
Adding number conversion cast (unumber) $10 in (number~) gfx_mode::$30 ← *((const nomodify byte*) form_a_mod_hi) * (number) $10
Adding number conversion cast (unumber) gfx_mode::$30 in (number~) gfx_mode::$30 ← *((const nomodify byte*) form_a_mod_hi) * (unumber)(number) $10
Adding number conversion cast (unumber) gfx_mode::$31 in (number~) gfx_mode::$31 ← (unumber~) gfx_mode::$30 | *((const nomodify byte*) form_a_mod_lo)
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) DTV_PLANEA_MODULO_HI) ← (number) 0
Adding number conversion cast (unumber) $10 in (number~) gfx_mode::$32 ← *((const nomodify byte*) form_b_start_hi) * (number) $10
Adding number conversion cast (unumber) gfx_mode::$32 in (number~) gfx_mode::$32 ← *((const nomodify byte*) form_b_start_hi) * (unumber)(number) $10
Adding number conversion cast (unumber) gfx_mode::$33 in (number~) gfx_mode::$33 ← (unumber~) gfx_mode::$32 | *((const nomodify byte*) form_b_start_lo)
Adding number conversion cast (unumber) $10 in (number~) gfx_mode::$42 ← *((const nomodify byte*) form_b_step_hi) * (number) $10
Adding number conversion cast (unumber) gfx_mode::$42 in (number~) gfx_mode::$42 ← *((const nomodify byte*) form_b_step_hi) * (unumber)(number) $10
Adding number conversion cast (unumber) gfx_mode::$43 in (number~) gfx_mode::$43 ← (unumber~) gfx_mode::$42 | *((const nomodify byte*) form_b_step_lo)
Adding number conversion cast (unumber) $10 in (number~) gfx_mode::$44 ← *((const nomodify byte*) form_b_mod_hi) * (number) $10
Adding number conversion cast (unumber) gfx_mode::$44 in (number~) gfx_mode::$44 ← *((const nomodify byte*) form_b_mod_hi) * (unumber)(number) $10
Adding number conversion cast (unumber) gfx_mode::$45 in (number~) gfx_mode::$45 ← (unumber~) gfx_mode::$44 | *((const nomodify byte*) form_b_mod_lo)
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) DTV_PLANEB_MODULO_HI) ← (number) 0
Adding number conversion cast (unumber) 3 in *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) ← (number) 3
Adding number conversion cast (unumber) 3^(byte)(word)VIC_SCREEN0/$4000 in *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A) ← (number) 3^(byte)(word)(const nomodify byte*) VIC_SCREEN0/(number) $4000
Adding number conversion cast (unumber) 3 in *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A) ← ((unumber)) (number) 3^(byte)(word)(const nomodify byte*) VIC_SCREEN0/(number) $4000
Adding number conversion cast (unumber) $4000 in *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A) ← ((unumber)) (unumber)(number) 3^(byte)(word)(const nomodify byte*) VIC_SCREEN0/(number) $4000
Adding number conversion cast (unumber) $3fff in (number~) gfx_mode::$47 ← (word~) gfx_mode::$82 & (number) $3fff
Adding number conversion cast (unumber) gfx_mode::$47 in (number~) gfx_mode::$47 ← (word~) gfx_mode::$82 & (unumber)(number) $3fff
Adding number conversion cast (unumber) $40 in (number~) gfx_mode::$48 ← (unumber~) gfx_mode::$47 / (number) $40
Adding number conversion cast (unumber) gfx_mode::$48 in (number~) gfx_mode::$48 ← (unumber~) gfx_mode::$47 / (unumber)(number) $40
Adding number conversion cast (unumber) $3fff in (number~) gfx_mode::$50 ← (word~) gfx_mode::$83 & (number) $3fff
Adding number conversion cast (unumber) gfx_mode::$50 in (number~) gfx_mode::$50 ← (word~) gfx_mode::$83 & (unumber)(number) $3fff
Adding number conversion cast (unumber) gfx_mode::$51 in (number~) gfx_mode::$51 ← > (unumber~) gfx_mode::$50
Adding number conversion cast (unumber) 4 in (number~) gfx_mode::$52 ← (unumber~) gfx_mode::$51 / (number) 4
Adding number conversion cast (unumber) gfx_mode::$52 in (number~) gfx_mode::$52 ← (unumber~) gfx_mode::$51 / (unumber)(number) 4
Adding number conversion cast (unumber) gfx_mode::$53 in (number~) gfx_mode::$53 ← (byte~) gfx_mode::$84 | (unumber~) gfx_mode::$52
Adding number conversion cast (unumber) 0 in *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (number) 0
Adding number conversion cast (unumber) $10 in (number~) gfx_mode::$55 ← *((const nomodify byte*) form_vic_bg0_hi) * (number) $10
Adding number conversion cast (unumber) gfx_mode::$55 in (number~) gfx_mode::$55 ← *((const nomodify byte*) form_vic_bg0_hi) * (unumber)(number) $10
Adding number conversion cast (unumber) gfx_mode::$56 in (number~) gfx_mode::$56 ← (unumber~) gfx_mode::$55 | *((const nomodify byte*) form_vic_bg0_lo)
Adding number conversion cast (unumber) $10 in (number~) gfx_mode::$57 ← *((const nomodify byte*) form_vic_bg1_hi) * (number) $10
Adding number conversion cast (unumber) gfx_mode::$57 in (number~) gfx_mode::$57 ← *((const nomodify byte*) form_vic_bg1_hi) * (unumber)(number) $10
Adding number conversion cast (unumber) gfx_mode::$58 in (number~) gfx_mode::$58 ← (unumber~) gfx_mode::$57 | *((const nomodify byte*) form_vic_bg1_lo)
Adding number conversion cast (unumber) $10 in (number~) gfx_mode::$59 ← *((const nomodify byte*) form_vic_bg2_hi) * (number) $10
Adding number conversion cast (unumber) gfx_mode::$59 in (number~) gfx_mode::$59 ← *((const nomodify byte*) form_vic_bg2_hi) * (unumber)(number) $10
Adding number conversion cast (unumber) gfx_mode::$60 in (number~) gfx_mode::$60 ← (unumber~) gfx_mode::$59 | *((const nomodify byte*) form_vic_bg2_lo)
Adding number conversion cast (unumber) $10 in (number~) gfx_mode::$61 ← *((const nomodify byte*) form_vic_bg3_hi) * (number) $10
Adding number conversion cast (unumber) gfx_mode::$61 in (number~) gfx_mode::$61 ← *((const nomodify byte*) form_vic_bg3_hi) * (unumber)(number) $10
Adding number conversion cast (unumber) gfx_mode::$62 in (number~) gfx_mode::$62 ← (unumber~) gfx_mode::$61 | *((const nomodify byte*) form_vic_bg3_lo)
Adding number conversion cast (unumber) 0 in (bool~) gfx_mode::$63 ← *((const nomodify byte*) form_dtv_palet) == (number) 0
Adding number conversion cast (unumber) $ff in (bool~) gfx_mode::$77 ← *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) != (number) $ff
Adding number conversion cast (unumber) $32 in *((const nomodify byte*) PROCPORT) ← (number) $32
Adding number conversion cast (unumber) $37 in *((const nomodify byte*) PROCPORT) ← (number) $37
Adding number conversion cast (unumber) $f in (number~) gfx_init_screen0::$0 ← (byte) gfx_init_screen0::cy#2 & (number) $f
Adding number conversion cast (unumber) gfx_init_screen0::$0 in (number~) gfx_init_screen0::$0 ← (byte) gfx_init_screen0::cy#2 & (unumber)(number) $f
Adding number conversion cast (unumber) $10 in (number~) gfx_init_screen0::$1 ← (unumber~) gfx_init_screen0::$0 * (number) $10
Adding number conversion cast (unumber) gfx_init_screen0::$1 in (number~) gfx_init_screen0::$1 ← (unumber~) gfx_init_screen0::$0 * (unumber)(number) $10
Adding number conversion cast (unumber) $f in (number~) gfx_init_screen0::$2 ← (byte) gfx_init_screen0::cx#2 & (number) $f
Adding number conversion cast (unumber) gfx_init_screen0::$2 in (number~) gfx_init_screen0::$2 ← (byte) gfx_init_screen0::cx#2 & (unumber)(number) $f
Adding number conversion cast (unumber) gfx_init_screen0::$3 in (number~) gfx_init_screen0::$3 ← (unumber~) gfx_init_screen0::$1 | (unumber~) gfx_init_screen0::$2
Adding number conversion cast (unumber) $f in (number~) gfx_init_screen1::$1 ← (byte~) gfx_init_screen1::$0 & (number) $f
Adding number conversion cast (unumber) gfx_init_screen1::$1 in (number~) gfx_init_screen1::$1 ← (byte~) gfx_init_screen1::$0 & (unumber)(number) $f
Adding number conversion cast (unumber) $f in (number~) gfx_init_screen2::$1 ← (byte~) gfx_init_screen2::$0 & (number) $f
Adding number conversion cast (unumber) gfx_init_screen2::$1 in (number~) gfx_init_screen2::$1 ← (byte~) gfx_init_screen2::$0 & (unumber)(number) $f
Adding number conversion cast (unumber) $f in (number~) gfx_init_screen2::$2 ← (number) $f - (byte) gfx_init_screen2::col#0
Adding number conversion cast (unumber) gfx_init_screen2::$2 in (number~) gfx_init_screen2::$2 ← (unumber)(number) $f - (byte) gfx_init_screen2::col#0
Adding number conversion cast (unumber) $10 in (number~) gfx_init_screen2::$3 ← (byte) gfx_init_screen2::col#0 * (number) $10
Adding number conversion cast (unumber) gfx_init_screen2::$3 in (number~) gfx_init_screen2::$3 ← (byte) gfx_init_screen2::col#0 * (unumber)(number) $10
Adding number conversion cast (unumber) gfx_init_screen2::$4 in (number~) gfx_init_screen2::$4 ← (unumber~) gfx_init_screen2::$3 | (byte) gfx_init_screen2::col2#0
Adding number conversion cast (unumber) 3 in (number~) gfx_init_screen3::$0 ← (byte) gfx_init_screen3::cx#2 & (number) 3
Adding number conversion cast (unumber) gfx_init_screen3::$0 in (number~) gfx_init_screen3::$0 ← (byte) gfx_init_screen3::cx#2 & (unumber)(number) 3
Adding number conversion cast (unumber) $10 in (number~) gfx_init_screen3::$1 ← (unumber~) gfx_init_screen3::$0 * (number) $10
Adding number conversion cast (unumber) gfx_init_screen3::$1 in (number~) gfx_init_screen3::$1 ← (unumber~) gfx_init_screen3::$0 * (unumber)(number) $10
Adding number conversion cast (unumber) 3 in (number~) gfx_init_screen3::$2 ← (byte) gfx_init_screen3::cy#2 & (number) 3
Adding number conversion cast (unumber) gfx_init_screen3::$2 in (number~) gfx_init_screen3::$2 ← (byte) gfx_init_screen3::cy#2 & (unumber)(number) 3
Adding number conversion cast (unumber) gfx_init_screen3::$3 in (number~) gfx_init_screen3::$3 ← (unumber~) gfx_init_screen3::$1 | (unumber~) gfx_init_screen3::$2
Adding number conversion cast (unumber) 0 in *((byte*) gfx_init_screen4::ch#2) ← (number) 0
Adding number conversion cast (unumber) 1 in (number~) gfx_init_vic_bitmap::$3 ← (byte) gfx_init_vic_bitmap::l#3 + (number) 1
Adding number conversion cast (unumber) gfx_init_vic_bitmap::$3 in (number~) gfx_init_vic_bitmap::$3 ← (byte) gfx_init_vic_bitmap::l#3 + (unumber)(number) 1
Adding number conversion cast (unumber) 1 in (number~) gfx_init_vic_bitmap::$4 ← (byte) gfx_init_vic_bitmap::l#3 + (number) 1
Adding number conversion cast (unumber) gfx_init_vic_bitmap::$4 in (number~) gfx_init_vic_bitmap::$4 ← (byte) gfx_init_vic_bitmap::l#3 + (unumber)(number) 1
Adding number conversion cast (unumber) $4000 in (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#0 ← (byte)(const nomodify dword) PLANE_8BPP_CHUNKY/(number) $4000
Adding number conversion cast (unumber) $8000 in (bool~) gfx_init_plane_8bppchunky::$2 ← (byte*) gfx_init_plane_8bppchunky::gfxb#3 == (number) $8000
Adding number conversion cast (unumber) $4000 in (byte) gfx_init_plane_horisontal::gfxbCpuBank#0 ← (byte)(const nomodify dword) PLANE_HORISONTAL/(number) $4000
Adding number conversion cast (unumber) $3fff in (byte*) gfx_init_plane_horisontal::gfxa#0 ← (byte*)(number) $4000+(const nomodify dword) PLANE_HORISONTAL&(number) $3fff
Adding number conversion cast (unumber) 4 in (number~) gfx_init_plane_horisontal::$2 ← (byte) gfx_init_plane_horisontal::ay#2 & (number) 4
Adding number conversion cast (unumber) gfx_init_plane_horisontal::$2 in (number~) gfx_init_plane_horisontal::$2 ← (byte) gfx_init_plane_horisontal::ay#2 & (unumber)(number) 4
Adding number conversion cast (unumber) 0 in (bool~) gfx_init_plane_horisontal::$3 ← (unumber~) gfx_init_plane_horisontal::$2 == (number) 0
Adding number conversion cast (unumber) 0 in *((byte*) gfx_init_plane_horisontal::gfxa#3) ← (number) 0
Adding number conversion cast (unumber) $ff in *((byte*) gfx_init_plane_horisontal::gfxa#4) ← (number) $ff
Adding number conversion cast (unumber) $4000 in (byte) gfx_init_plane_horisontal2::gfxbCpuBank#0 ← (byte)(const nomodify dword) PLANE_HORISONTAL2/(number) $4000
Adding number conversion cast (unumber) $3fff in (byte*) gfx_init_plane_horisontal2::gfxa#0 ← (byte*)(number) $4000+(const nomodify dword) PLANE_HORISONTAL2&(number) $3fff
Adding number conversion cast (unumber) 2 in (number~) gfx_init_plane_horisontal2::$2 ← (byte) gfx_init_plane_horisontal2::ay#2 / (number) 2
Adding number conversion cast (unumber) gfx_init_plane_horisontal2::$2 in (number~) gfx_init_plane_horisontal2::$2 ← (byte) gfx_init_plane_horisontal2::ay#2 / (unumber)(number) 2
Adding number conversion cast (unumber) 3 in (number~) gfx_init_plane_horisontal2::$3 ← (unumber~) gfx_init_plane_horisontal2::$2 & (number) 3
Adding number conversion cast (unumber) gfx_init_plane_horisontal2::$3 in (number~) gfx_init_plane_horisontal2::$3 ← (unumber~) gfx_init_plane_horisontal2::$2 & (unumber)(number) 3
Adding number conversion cast (unumber) $4000 in (byte) gfx_init_plane_vertical::gfxbCpuBank#0 ← (byte)(const nomodify dword) PLANE_VERTICAL/(number) $4000
Adding number conversion cast (unumber) $3fff in (byte*) gfx_init_plane_vertical::gfxb#0 ← (byte*)(number) $4000+(const nomodify dword) PLANE_VERTICAL&(number) $3fff
Adding number conversion cast (unumber) $f in *((byte*) gfx_init_plane_vertical::gfxb#2) ← (number) $f
Adding number conversion cast (unumber) $4000 in (byte) gfx_init_plane_charset8::gfxbCpuBank#0 ← (byte)(const nomodify dword) PLANE_CHARSET8/(number) $4000
Adding number conversion cast (unumber) $3fff in (byte*) gfx_init_plane_charset8::gfxa#0 ← (byte*)(number) $4000+(const nomodify dword) PLANE_CHARSET8&(number) $3fff
Adding number conversion cast (unumber) $80 in (number~) gfx_init_plane_charset8::$2 ← (byte) gfx_init_plane_charset8::bits#2 & (number) $80
Adding number conversion cast (unumber) gfx_init_plane_charset8::$2 in (number~) gfx_init_plane_charset8::$2 ← (byte) gfx_init_plane_charset8::bits#2 & (unumber)(number) $80
Adding number conversion cast (unumber) 0 in (bool~) gfx_init_plane_charset8::$3 ← (unumber~) gfx_init_plane_charset8::$2 != (number) 0
Adding number conversion cast (unumber) 2 in (number~) gfx_init_plane_charset8::$5 ← (byte) gfx_init_plane_charset8::bits#3 * (number) 2
Adding number conversion cast (unumber) gfx_init_plane_charset8::$5 in (number~) gfx_init_plane_charset8::$5 ← (byte) gfx_init_plane_charset8::bits#3 * (unumber)(number) 2
Adding number conversion cast (unumber) $1b in (byte) gfx_init_plane_fill::fill#0 ← (number) $1b
Adding number conversion cast (unumber) 0 in (byte) gfx_init_plane_fill::fill#1 ← (number) 0
Adding number conversion cast (unumber) $ff in (byte) gfx_init_plane_fill::fill#2 ← (number) $ff
Adding number conversion cast (unumber) 4 in (number~) gfx_init_plane_fill::$0 ← (dword) gfx_init_plane_fill::plane_addr#3 * (number) 4
Adding number conversion cast (unumber) gfx_init_plane_fill::$0 in (number~) gfx_init_plane_fill::$0 ← (dword) gfx_init_plane_fill::plane_addr#3 * (unumber)(number) 4
Adding number conversion cast (unumber) gfx_init_plane_fill::$1 in (number~) gfx_init_plane_fill::$1 ← > (unumber~) gfx_init_plane_fill::$0
Adding number conversion cast (unumber) gfx_init_plane_fill::$2 in (number~) gfx_init_plane_fill::$2 ← < (unumber~) gfx_init_plane_fill::$1
Adding number conversion cast (unumber) $3fff in (number~) gfx_init_plane_fill::$5 ← (word~) gfx_init_plane_fill::$4 & (number) $3fff
Adding number conversion cast (unumber) gfx_init_plane_fill::$5 in (number~) gfx_init_plane_fill::$5 ← (word~) gfx_init_plane_fill::$4 & (unumber)(number) $3fff
Adding number conversion cast (unumber) $4000 in (number~) gfx_init_plane_fill::$6 ← (number) $4000 + (unumber~) gfx_init_plane_fill::$5
Adding number conversion cast (unumber) gfx_init_plane_fill::$6 in (number~) gfx_init_plane_fill::$6 ← (unumber)(number) $4000 + (unumber~) gfx_init_plane_fill::$5
Adding number conversion cast (unumber) $10000 in *((const nomodify byte*) DTV_GRAPHICS_VIC_BANK) ← (byte)(dword)(const nomodify byte*) FORM_CHARSET/(number) $10000
Adding number conversion cast (unumber) $400 in *((const nomodify byte*) DTV_COLOR_BANK_LO) ← <(word)(const nomodify dword) DTV_COLOR_BANK_DEFAULT/(number) $400
Adding number conversion cast (unumber) $400 in *((const nomodify byte*) DTV_COLOR_BANK_HI) ← >(word)(const nomodify dword) DTV_COLOR_BANK_DEFAULT/(number) $400
Adding number conversion cast (unumber) 3 in *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) ← (number) 3
Adding number conversion cast (unumber) 3^(byte)(word)FORM_CHARSET/$4000 in *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A) ← (number) 3^(byte)(word)(const nomodify byte*) FORM_CHARSET/(number) $4000
Adding number conversion cast (unumber) 3 in *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A) ← ((unumber)) (number) 3^(byte)(word)(const nomodify byte*) FORM_CHARSET/(number) $4000
Adding number conversion cast (unumber) $4000 in *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A) ← ((unumber)) (unumber)(number) 3^(byte)(word)(const nomodify byte*) FORM_CHARSET/(number) $4000
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) DTV_CONTROL) ← (number) 0
Adding number conversion cast (unumber) VIC_DEN|VIC_RSEL|3 in *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1) ← (const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(number) 3
Adding number conversion cast (unumber) 3 in *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1) ← ((unumber)) (const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(number) 3
Adding number conversion cast (unumber) $3fff in *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_MEMORY) ← (byte)(word)(const nomodify byte*) FORM_SCREEN&(number) $3fff/(number) $40|(word)(const nomodify byte*) FORM_CHARSET&(number) $3fff/(number) $400
Adding number conversion cast (unumber) $3fff in *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_MEMORY) ← (byte)(word)(const nomodify byte*) FORM_SCREEN&(unumber)(number) $3fff/(number) $40|(word)(const nomodify byte*) FORM_CHARSET&(number) $3fff/(number) $400
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) DTV_PLANEA_START_HI) ← (number) 0
Adding number conversion cast (unumber) 0 in *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) ← (number) 0
Adding number conversion cast (unumber) 0 in *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (number) 0
Adding number conversion cast (unumber) $ff in (bool~) form_mode::$10 ← *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) != (number) $ff
Adding number conversion cast (unumber) 0 in (bool~) form_mode::$12 ← (byte~) form_mode::$11 != (number) 0
Adding number conversion cast (snumber) 2 in (signed byte) form_cursor_count#4 ← (signed byte)(const nomodify signed byte) FORM_CURSOR_BLINK/(number) 2
Adding number conversion cast (unumber) $28 in (byte*~) form_set_screen::$2 ← (byte*) form_set_screen::line#2 + (number) $28
Adding number conversion cast (snumber) 0 in (bool~) form_control::$1 ← (signed byte) form_cursor_count#5 < (number) 0
Adding number conversion cast (snumber) FORM_CURSOR_BLINK/2 in (bool~) form_control::$3 ← (signed byte) form_cursor_count#15 < (const nomodify signed byte) FORM_CURSOR_BLINK/(number) 2
Adding number conversion cast (snumber) 2 in (bool~) form_control::$3 ← (signed byte) form_cursor_count#15 < (snumber)(const nomodify signed byte) FORM_CURSOR_BLINK/(number) 2
Adding number conversion cast (unumber) $80 in (number~) form_control::$13 ← *((byte*) form_control::field#1) | (number) $80
Adding number conversion cast (unumber) form_control::$13 in (number~) form_control::$13 ← *((byte*) form_control::field#1) | (unumber)(number) $80
Adding number conversion cast (unumber) $7f in (number~) form_control::$12 ← *((byte*) form_control::field#2) & (number) $7f
Adding number conversion cast (unumber) form_control::$12 in (number~) form_control::$12 ← *((byte*) form_control::field#2) & (unumber)(number) $7f
Adding number conversion cast (unumber) $7f in (number~) form_control::$14 ← *((byte*) form_control::field#3) & (number) $7f
Adding number conversion cast (unumber) form_control::$14 in (number~) form_control::$14 ← *((byte*) form_control::field#3) & (unumber)(number) $7f
Adding number conversion cast (unumber) 0 in (bool~) form_control::$16 ← (byte~) form_control::$15 == (number) 0
Adding number conversion cast (unumber) $ff in (bool~) form_control::$17 ← (byte) form_field_idx#6 == (number) $ff
Adding number conversion cast (unumber) 1 in (number~) form_control::$19 ← (const byte) form_fields_cnt - (number) 1
Adding number conversion cast (unumber) form_control::$19 in (number~) form_control::$19 ← (const byte) form_fields_cnt - (unumber)(number) 1
Adding number conversion cast (snumber) FORM_CURSOR_BLINK/2 in (signed byte) form_cursor_count#7 ← (const nomodify signed byte) FORM_CURSOR_BLINK/(number) 2
Adding number conversion cast (snumber) 2 in (signed byte) form_cursor_count#7 ← ((snumber)) (const nomodify signed byte) FORM_CURSOR_BLINK/(number) 2
Adding number conversion cast (unumber) 0 in (byte) form_control::return#1 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) form_field_idx#8 ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) form_control::$23 ← (byte~) form_control::$22 == (number) 0
Adding number conversion cast (unumber) $ff in (bool~) form_control::$24 ← *((const byte*) form_fields_val + (byte) form_field_idx#20) == (number) $ff
Adding number conversion cast (unumber) 0 in (byte) form_control::return#3 ← (number) 0
Adding number conversion cast (unumber) 0 in *((const byte*) form_fields_val + (byte) form_field_idx#23) ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) form_control::return#4 ← (number) 0
Adding number conversion cast (unumber) $ff in (byte) form_control::return#5 ← (number) $ff
Successful SSA optimization PassNAddNumberTypeConversions
Adding number conversion cast (unumber) $4000 in (byte*) gfx_init_plane_horisontal::gfxa#0 ← (byte*)(number) $4000+(const nomodify dword) PLANE_HORISONTAL&(unumber)(number) $3fff
Adding number conversion cast (unumber) $4000 in (byte*) gfx_init_plane_horisontal2::gfxa#0 ← (byte*)(number) $4000+(const nomodify dword) PLANE_HORISONTAL2&(unumber)(number) $3fff
Adding number conversion cast (unumber) $4000 in (byte*) gfx_init_plane_vertical::gfxb#0 ← (byte*)(number) $4000+(const nomodify dword) PLANE_VERTICAL&(unumber)(number) $3fff
Adding number conversion cast (unumber) $4000 in (byte*) gfx_init_plane_charset8::gfxa#0 ← (byte*)(number) $4000+(const nomodify dword) PLANE_CHARSET8&(unumber)(number) $3fff
Adding number conversion cast (unumber) $40 in *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_MEMORY) ← (byte)(word)(const nomodify byte*) FORM_SCREEN&(unumber)(number) $3fff/(number) $40|(word)(const nomodify byte*) FORM_CHARSET&(unumber)(number) $3fff/(number) $400
Adding number conversion cast (unumber) $400 in *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_MEMORY) ← (byte)(word)(const nomodify byte*) FORM_SCREEN&(unumber)(number) $3fff/(unumber)(number) $40|(word)(const nomodify byte*) FORM_CHARSET&(unumber)(number) $3fff/(number) $400
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) memset::dst#0 ← (byte*)(void*) memset::str#2
Inlining cast (word) memset::num#0 ← (unumber)(number) $3e8
Inlining cast *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) ← (unumber)(number) $ff
Inlining cast *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_B_DDR) ← (unumber)(number) 0
Inlining cast (byte) keyboard_modifiers#1 ← (unumber)(number) 0
Inlining cast (byte) keyboard_event_get::return#0 ← (unumber)(number) $ff
Inlining cast (byte) bitmap_init::bits#2 ← (unumber)(number) $80
Inlining cast *((byte*) bitmap_clear::bitmap#2) ← (unumber)(number) 0
Inlining cast (byte*) bitmap_plot::plotter#0 ← (byte*)(word~) bitmap_plot::$0
Inlining cast *((const nomodify byte*) DTV_PLANEA_MODULO_HI) ← (unumber)(number) 0
Inlining cast *((const nomodify byte*) DTV_PLANEB_MODULO_HI) ← (unumber)(number) 0
Inlining cast *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) ← (unumber)(number) 3
Inlining cast *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A) ← (unumber)(unumber)(number) 3^(byte)(word)(const nomodify byte*) VIC_SCREEN0/(unumber)(number) $4000
Inlining cast *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (unumber)(number) 0
Inlining cast *((const nomodify byte*) PROCPORT) ← (unumber)(number) $32
Inlining cast *((const nomodify byte*) PROCPORT) ← (unumber)(number) $37
Inlining cast *((byte*) gfx_init_screen4::ch#2) ← (unumber)(number) 0
Inlining cast (byte*) gfx_init_plane_8bppchunky::gfxb#2 ← (byte*)(number) $4000
Inlining cast *((byte*) gfx_init_plane_horisontal::gfxa#3) ← (unumber)(number) 0
Inlining cast *((byte*) gfx_init_plane_horisontal::gfxa#4) ← (unumber)(number) $ff
Inlining cast *((byte*) gfx_init_plane_vertical::gfxb#2) ← (unumber)(number) $f
Inlining cast (byte) gfx_init_plane_fill::fill#0 ← (unumber)(number) $1b
Inlining cast (byte) gfx_init_plane_fill::fill#1 ← (unumber)(number) 0
Inlining cast (byte) gfx_init_plane_fill::fill#2 ← (unumber)(number) $ff
Inlining cast (byte*) gfx_init_plane_fill::gfxb#0 ← (byte*)(unumber~) gfx_init_plane_fill::$6
Inlining cast *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) ← (unumber)(number) 3
Inlining cast *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A) ← (unumber)(unumber)(number) 3^(byte)(word)(const nomodify byte*) FORM_CHARSET/(unumber)(number) $4000
Inlining cast *((const nomodify byte*) DTV_CONTROL) ← (unumber)(number) 0
Inlining cast *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1) ← (unumber)(const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(unumber)(number) 3
Inlining cast *((const nomodify byte*) DTV_PLANEA_START_HI) ← (unumber)(number) 0
Inlining cast *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) ← (unumber)(number) 0
Inlining cast *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (unumber)(number) 0
Inlining cast (signed byte) form_cursor_count#7 ← (snumber)(const nomodify signed byte) FORM_CURSOR_BLINK/(snumber)(number) 2
Inlining cast (byte) form_control::return#1 ← (unumber)(number) 0
Inlining cast (byte) form_field_idx#8 ← (unumber)(number) 0
Inlining cast (byte) form_control::return#3 ← (unumber)(number) 0
Inlining cast *((const byte*) form_fields_val + (byte) form_field_idx#23) ← (unumber)(number) 0
Inlining cast (byte) form_control::return#4 ← (unumber)(number) 0
Inlining cast (byte) form_control::return#5 ← (unumber)(number) $ff
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 53265
Simplifying constant pointer cast (byte*) 53270
Simplifying constant pointer cast (byte*) 53272
Simplifying constant pointer cast (byte*) 0
Simplifying constant pointer cast (byte*) 1
Simplifying constant pointer cast (byte*) 53248
Simplifying constant pointer cast (struct MOS6569_VICII*) 53248
Simplifying constant pointer cast (byte*) 55296
Simplifying constant pointer cast (struct MOS6526_CIA*) 56320
Simplifying constant pointer cast (struct MOS6526_CIA*) 56576
Simplifying constant pointer cast (byte*) 53311
Simplifying constant pointer cast (byte*) 53308
Simplifying constant pointer cast (byte*) 53760
Simplifying constant pointer cast (byte*) 53306
Simplifying constant pointer cast (byte*) 53307
Simplifying constant pointer cast (byte*) 53317
Simplifying constant pointer cast (byte*) 53318
Simplifying constant pointer cast (byte*) 53304
Simplifying constant pointer cast (byte*) 53305
Simplifying constant pointer cast (byte*) 53321
Simplifying constant pointer cast (byte*) 53322
Simplifying constant pointer cast (byte*) 53323
Simplifying constant pointer cast (byte*) 53324
Simplifying constant pointer cast (byte*) 53319
Simplifying constant pointer cast (byte*) 53320
Simplifying constant pointer cast (byte*) 53302
Simplifying constant pointer cast (byte*) 53303
Simplifying constant pointer cast (byte*) 53309
Simplifying constant pointer cast (byte*) 255
Simplifying constant pointer cast (byte*) 16384
Simplifying constant pointer cast (byte*) 17408
Simplifying constant pointer cast (byte*) 18432
Simplifying constant pointer cast (byte*) 19456
Simplifying constant pointer cast (byte*) 20480
Simplifying constant pointer cast (byte*) 22528
Simplifying constant pointer cast (byte*) 24576
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 6144
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 4
Simplifying constant integer cast 5
Simplifying constant integer cast 6
Simplifying constant integer cast 7
Simplifying constant integer cast 8
Simplifying constant integer cast 9
Simplifying constant integer cast $a
Simplifying constant integer cast $b
Simplifying constant integer cast $c
Simplifying constant integer cast $d
Simplifying constant integer cast $e
Simplifying constant integer cast $f
Simplifying constant integer cast $10
Simplifying constant integer cast $11
Simplifying constant integer cast $12
Simplifying constant integer cast $13
Simplifying constant integer cast $14
Simplifying constant integer cast $15
Simplifying constant integer cast $16
Simplifying constant integer cast $17
Simplifying constant integer cast $18
Simplifying constant integer cast $19
Simplifying constant integer cast $1a
Simplifying constant integer cast $1b
Simplifying constant integer cast $1c
Simplifying constant integer cast $1d
Simplifying constant integer cast $1e
Simplifying constant integer cast $1f
Simplifying constant integer cast $20
Simplifying constant integer cast $21
Simplifying constant integer cast $22
Simplifying constant integer cast $23
Simplifying constant integer cast 0
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $3e8
Simplifying constant integer cast $ff
Simplifying constant integer cast 0
Simplifying constant integer cast 8
Simplifying constant integer cast 0
Simplifying constant integer cast 8
Simplifying constant integer cast 0
Simplifying constant integer cast $40
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 3
Simplifying constant integer cast 7
Simplifying constant integer cast 0
Simplifying constant integer cast $ff
Simplifying constant integer cast $f8
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast $80
Simplifying constant pointer cast (byte*) 0
Simplifying constant integer cast 7
Simplifying constant integer cast 7
Simplifying constant integer cast 7
Simplifying constant integer cast *((const to_nomodify byte*) bitmap_plot_xhi + (unumber)(number) 0)
Simplifying constant integer cast 0
Simplifying constant integer cast *((const to_nomodify byte*) bitmap_plot_xlo + (unumber)(number) 0)
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast *((const to_nomodify byte*) bitmap_plot_xhi + (byte) bitmap_plot::x#4)
Simplifying constant integer cast *((const to_nomodify byte*) bitmap_plot_xlo + (byte) bitmap_plot::x#4)
Simplifying constant integer cast *((const to_nomodify byte*) bitmap_plot_yhi + (byte) bitmap_plot::y#4)
Simplifying constant integer cast *((const to_nomodify byte*) bitmap_plot_ylo + (byte) bitmap_plot::y#4)
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 4
Simplifying constant integer cast 5
Simplifying constant integer cast 6
Simplifying constant integer cast (const nomodify dword) PLANE_8BPP_CHUNKY
Simplifying constant integer cast 7
Simplifying constant integer cast (const nomodify dword) PLANE_HORISONTAL
Simplifying constant integer cast 8
Simplifying constant integer cast (const nomodify dword) PLANE_VERTICAL
Simplifying constant integer cast 9
Simplifying constant integer cast (const nomodify dword) PLANE_HORISONTAL2
Simplifying constant integer cast $a
Simplifying constant integer cast (const nomodify dword) PLANE_VERTICAL2
Simplifying constant integer cast $b
Simplifying constant integer cast (const nomodify dword) PLANE_CHARSET8
Simplifying constant integer cast $c
Simplifying constant integer cast (const nomodify dword) PLANE_BLANK
Simplifying constant integer cast $d
Simplifying constant integer cast (const nomodify dword) PLANE_FULL
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 4
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 4
Simplifying constant integer cast 5
Simplifying constant integer cast 6
Simplifying constant integer cast 7
Simplifying constant integer cast 8
Simplifying constant integer cast 9
Simplifying constant integer cast $a
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 4
Simplifying constant integer cast 5
Simplifying constant integer cast 6
Simplifying constant integer cast 7
Simplifying constant integer cast 8
Simplifying constant integer cast 9
Simplifying constant integer cast $a
Simplifying constant integer cast $a
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $10
Simplifying constant integer cast $10
Simplifying constant integer cast $10
Simplifying constant integer cast 0
Simplifying constant integer cast $10
Simplifying constant integer cast $10
Simplifying constant integer cast $10
Simplifying constant integer cast 0
Simplifying constant integer cast 3
Simplifying constant integer cast (unumber)(number) 3^(byte)(word)(const nomodify byte*) VIC_SCREEN0/(unumber)(number) $4000
Simplifying constant integer cast 3
Simplifying constant integer cast $4000
Simplifying constant integer cast $3fff
Simplifying constant integer cast $40
Simplifying constant integer cast $3fff
Simplifying constant integer cast 4
Simplifying constant integer cast 0
Simplifying constant integer cast $10
Simplifying constant integer cast $10
Simplifying constant integer cast $10
Simplifying constant integer cast $10
Simplifying constant integer cast 0
Simplifying constant integer cast $ff
Simplifying constant integer cast $32
Simplifying constant integer cast $37
Simplifying constant integer cast $f
Simplifying constant integer cast $10
Simplifying constant integer cast $f
Simplifying constant integer cast $f
Simplifying constant integer cast $f
Simplifying constant integer cast $f
Simplifying constant integer cast $10
Simplifying constant integer cast 3
Simplifying constant integer cast $10
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast $4000
Simplifying constant pointer cast (byte*) 16384
Simplifying constant integer cast $8000
Simplifying constant pointer cast (byte*) 16384
Simplifying constant integer cast $4000
Simplifying constant integer cast $4000
Simplifying constant integer cast $3fff
Simplifying constant integer cast 4
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $ff
Simplifying constant integer cast $4000
Simplifying constant integer cast $4000
Simplifying constant integer cast $3fff
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast $4000
Simplifying constant integer cast $4000
Simplifying constant integer cast $3fff
Simplifying constant integer cast $f
Simplifying constant integer cast $4000
Simplifying constant integer cast $4000
Simplifying constant integer cast $3fff
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast $1b
Simplifying constant integer cast 0
Simplifying constant integer cast $ff
Simplifying constant integer cast 4
Simplifying constant integer cast $3fff
Simplifying constant integer cast $4000
Simplifying constant integer cast $10000
Simplifying constant integer cast $400
Simplifying constant integer cast $400
Simplifying constant integer cast 3
Simplifying constant integer cast (unumber)(number) 3^(byte)(word)(const nomodify byte*) FORM_CHARSET/(unumber)(number) $4000
Simplifying constant integer cast 3
Simplifying constant integer cast $4000
Simplifying constant integer cast 0
Simplifying constant integer cast (const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(unumber)(number) 3
Simplifying constant integer cast 3
Simplifying constant integer cast $3fff
Simplifying constant integer cast $40
Simplifying constant integer cast $3fff
Simplifying constant integer cast $400
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $ff
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast $28
Simplifying constant integer cast *((const byte*) form_line_hi + (byte) form_field_ptr::y#0)
Simplifying constant integer cast *((const byte*) form_line_lo + (byte) form_field_ptr::y#0)
Simplifying constant integer cast 0
Simplifying constant integer cast (const nomodify signed byte) FORM_CURSOR_BLINK/(snumber)(number) 2
Simplifying constant integer cast 2
Simplifying constant integer cast $80
Simplifying constant integer cast $7f
Simplifying constant integer cast $7f
Simplifying constant integer cast 0
Simplifying constant integer cast $ff
Simplifying constant integer cast 1
Simplifying constant integer cast (const nomodify signed byte) FORM_CURSOR_BLINK/(snumber)(number) 2
Simplifying constant integer cast 2
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $ff
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $ff
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 9
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) $b
Finalized unsigned number type (byte) $c
Finalized unsigned number type (byte) $d
Finalized unsigned number type (byte) $e
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $11
Finalized unsigned number type (byte) $12
Finalized unsigned number type (byte) $13
Finalized unsigned number type (byte) $14
Finalized unsigned number type (byte) $15
Finalized unsigned number type (byte) $16
Finalized unsigned number type (byte) $17
Finalized unsigned number type (byte) $18
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) $1a
Finalized unsigned number type (byte) $1b
Finalized unsigned number type (byte) $1c
Finalized unsigned number type (byte) $1d
Finalized unsigned number type (byte) $1e
Finalized unsigned number type (byte) $1f
Finalized unsigned number type (byte) $20
Finalized unsigned number type (byte) $21
Finalized unsigned number type (byte) $22
Finalized unsigned number type (byte) $23
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) $f8
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 9
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) $b
Finalized unsigned number type (byte) $c
Finalized unsigned number type (byte) $d
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 9
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 9
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 3
Finalized unsigned number type (word) $4000
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (byte) $40
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) $32
Finalized unsigned number type (byte) $37
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (word) $4000
Finalized unsigned number type (word) $8000
Finalized unsigned number type (word) $4000
Finalized unsigned number type (word) $4000
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (word) $4000
Finalized unsigned number type (word) $4000
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (word) $4000
Finalized unsigned number type (word) $4000
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (byte) $f
Finalized unsigned number type (word) $4000
Finalized unsigned number type (word) $4000
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) $1b
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 4
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (word) $4000
Finalized unsigned number type (dword) $10000
Finalized unsigned number type (word) $400
Finalized unsigned number type (word) $400
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 3
Finalized unsigned number type (word) $4000
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 3
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (byte) $40
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (word) $400
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 2
Finalized unsigned number type (byte) $28
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 2
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) $7f
Finalized unsigned number type (byte) $7f
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 1
Finalized signed number type (signed byte) 2
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $ff
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) keyboard_event_scan::$14 ← (byte) keyboard_event_scan::keycode#3 + (byte) 8
Inferred type updated to byte in (unumber~) keyboard_event_scan::$23 ← (byte) keyboard_event_scan::keycode#5 | (byte) $40
Inferred type updated to byte in (unumber~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#4 & (byte) 7
Inferred type updated to byte in (unumber~) bitmap_init::$0 ← (byte) bitmap_init::x#2 & (byte) $f8
Inferred type updated to byte in (unumber~) bitmap_init::$6 ← (byte) bitmap_init::y#2 & (byte) 7
Inferred type updated to byte in (unumber~) bitmap_init::$8 ← (byte~) bitmap_init::$6 | (byte~) bitmap_init::$7
Inferred type updated to byte in (unumber~) bitmap_init::$10 ← (byte) bitmap_init::y#2 & (byte) 7
Inferred type updated to byte in (unumber~) bitmap_line_xdyi::$6 ← (byte) bitmap_line_xdyi::x1#2 + (byte) 1
Inferred type updated to byte in (unumber~) bitmap_line_xdyd::$6 ← (byte) bitmap_line_xdyd::x1#2 + (byte) 1
Inferred type updated to byte in (unumber~) bitmap_line_ydxi::$6 ← (byte) bitmap_line_ydxi::y1#2 + (byte) 1
Inferred type updated to byte in (unumber~) bitmap_line_ydxd::$6 ← (byte) bitmap_line_ydxd::y1#2 + (byte) 1
Inferred type updated to byte in (unumber~) gfx_mode::$18 ← *((const nomodify byte*) form_a_start_hi) * (byte) $10
Inferred type updated to byte in (unumber~) gfx_mode::$19 ← (byte~) gfx_mode::$18 | *((const nomodify byte*) form_a_start_lo)
Inferred type updated to byte in (unumber~) gfx_mode::$28 ← *((const nomodify byte*) form_a_step_hi) * (byte) $10
Inferred type updated to byte in (unumber~) gfx_mode::$29 ← (byte~) gfx_mode::$28 | *((const nomodify byte*) form_a_step_lo)
Inferred type updated to byte in (unumber~) gfx_mode::$30 ← *((const nomodify byte*) form_a_mod_hi) * (byte) $10
Inferred type updated to byte in (unumber~) gfx_mode::$31 ← (byte~) gfx_mode::$30 | *((const nomodify byte*) form_a_mod_lo)
Inferred type updated to byte in (unumber~) gfx_mode::$32 ← *((const nomodify byte*) form_b_start_hi) * (byte) $10
Inferred type updated to byte in (unumber~) gfx_mode::$33 ← (byte~) gfx_mode::$32 | *((const nomodify byte*) form_b_start_lo)
Inferred type updated to byte in (unumber~) gfx_mode::$42 ← *((const nomodify byte*) form_b_step_hi) * (byte) $10
Inferred type updated to byte in (unumber~) gfx_mode::$43 ← (byte~) gfx_mode::$42 | *((const nomodify byte*) form_b_step_lo)
Inferred type updated to byte in (unumber~) gfx_mode::$44 ← *((const nomodify byte*) form_b_mod_hi) * (byte) $10
Inferred type updated to byte in (unumber~) gfx_mode::$45 ← (byte~) gfx_mode::$44 | *((const nomodify byte*) form_b_mod_lo)
Inferred type updated to word in (unumber~) gfx_mode::$47 ← (word~) gfx_mode::$82 & (word) $3fff
Inferred type updated to word in (unumber~) gfx_mode::$48 ← (word~) gfx_mode::$47 / (byte) $40
Inferred type updated to word in (unumber~) gfx_mode::$50 ← (word~) gfx_mode::$83 & (word) $3fff
Inferred type updated to byte in (unumber~) gfx_mode::$51 ← > (word~) gfx_mode::$50
Inferred type updated to byte in (unumber~) gfx_mode::$52 ← (byte~) gfx_mode::$51 / (byte) 4
Inferred type updated to byte in (unumber~) gfx_mode::$53 ← (byte~) gfx_mode::$84 | (byte~) gfx_mode::$52
Inferred type updated to byte in (unumber~) gfx_mode::$55 ← *((const nomodify byte*) form_vic_bg0_hi) * (byte) $10
Inferred type updated to byte in (unumber~) gfx_mode::$56 ← (byte~) gfx_mode::$55 | *((const nomodify byte*) form_vic_bg0_lo)
Inferred type updated to byte in (unumber~) gfx_mode::$57 ← *((const nomodify byte*) form_vic_bg1_hi) * (byte) $10
Inferred type updated to byte in (unumber~) gfx_mode::$58 ← (byte~) gfx_mode::$57 | *((const nomodify byte*) form_vic_bg1_lo)
Inferred type updated to byte in (unumber~) gfx_mode::$59 ← *((const nomodify byte*) form_vic_bg2_hi) * (byte) $10
Inferred type updated to byte in (unumber~) gfx_mode::$60 ← (byte~) gfx_mode::$59 | *((const nomodify byte*) form_vic_bg2_lo)
Inferred type updated to byte in (unumber~) gfx_mode::$61 ← *((const nomodify byte*) form_vic_bg3_hi) * (byte) $10
Inferred type updated to byte in (unumber~) gfx_mode::$62 ← (byte~) gfx_mode::$61 | *((const nomodify byte*) form_vic_bg3_lo)
Inferred type updated to byte in (unumber~) gfx_init_screen0::$0 ← (byte) gfx_init_screen0::cy#2 & (byte) $f
Inferred type updated to byte in (unumber~) gfx_init_screen0::$1 ← (byte~) gfx_init_screen0::$0 * (byte) $10
Inferred type updated to byte in (unumber~) gfx_init_screen0::$2 ← (byte) gfx_init_screen0::cx#2 & (byte) $f
Inferred type updated to byte in (unumber~) gfx_init_screen0::$3 ← (byte~) gfx_init_screen0::$1 | (byte~) gfx_init_screen0::$2
Inferred type updated to byte in (unumber~) gfx_init_screen1::$1 ← (byte~) gfx_init_screen1::$0 & (byte) $f
Inferred type updated to byte in (unumber~) gfx_init_screen2::$1 ← (byte~) gfx_init_screen2::$0 & (byte) $f
Inferred type updated to byte in (unumber~) gfx_init_screen2::$2 ← (byte) $f - (byte) gfx_init_screen2::col#0
Inferred type updated to byte in (unumber~) gfx_init_screen2::$3 ← (byte) gfx_init_screen2::col#0 * (byte) $10
Inferred type updated to byte in (unumber~) gfx_init_screen2::$4 ← (byte~) gfx_init_screen2::$3 | (byte) gfx_init_screen2::col2#0
Inferred type updated to byte in (unumber~) gfx_init_screen3::$0 ← (byte) gfx_init_screen3::cx#2 & (byte) 3
Inferred type updated to byte in (unumber~) gfx_init_screen3::$1 ← (byte~) gfx_init_screen3::$0 * (byte) $10
Inferred type updated to byte in (unumber~) gfx_init_screen3::$2 ← (byte) gfx_init_screen3::cy#2 & (byte) 3
Inferred type updated to byte in (unumber~) gfx_init_screen3::$3 ← (byte~) gfx_init_screen3::$1 | (byte~) gfx_init_screen3::$2
Inferred type updated to byte in (unumber~) gfx_init_vic_bitmap::$3 ← (byte) gfx_init_vic_bitmap::l#3 + (byte) 1
Inferred type updated to byte in (unumber~) gfx_init_vic_bitmap::$4 ← (byte) gfx_init_vic_bitmap::l#3 + (byte) 1
Inferred type updated to byte in (unumber~) gfx_init_plane_horisontal::$2 ← (byte) gfx_init_plane_horisontal::ay#2 & (byte) 4
Inferred type updated to byte in (unumber~) gfx_init_plane_horisontal2::$2 ← (byte) gfx_init_plane_horisontal2::ay#2 / (byte) 2
Inferred type updated to byte in (unumber~) gfx_init_plane_horisontal2::$3 ← (byte~) gfx_init_plane_horisontal2::$2 & (byte) 3
Inferred type updated to byte in (unumber~) gfx_init_plane_charset8::$2 ← (byte) gfx_init_plane_charset8::bits#2 & (byte) $80
Inferred type updated to byte in (unumber~) gfx_init_plane_charset8::$5 ← (byte) gfx_init_plane_charset8::bits#3 * (byte) 2
Inferred type updated to dword in (unumber~) gfx_init_plane_fill::$0 ← (dword) gfx_init_plane_fill::plane_addr#3 * (byte) 4
Inferred type updated to word in (unumber~) gfx_init_plane_fill::$1 ← > (dword~) gfx_init_plane_fill::$0
Inferred type updated to byte in (unumber~) gfx_init_plane_fill::$2 ← < (word~) gfx_init_plane_fill::$1
Inferred type updated to word in (unumber~) gfx_init_plane_fill::$5 ← (word~) gfx_init_plane_fill::$4 & (word) $3fff
Inferred type updated to word in (unumber~) gfx_init_plane_fill::$6 ← (word) $4000 + (word~) gfx_init_plane_fill::$5
Inferred type updated to byte in (unumber~) form_control::$13 ← *((byte*) form_control::field#1) | (byte) $80
Inferred type updated to byte in (unumber~) form_control::$12 ← *((byte*) form_control::field#2) & (byte) $7f
Inferred type updated to byte in (unumber~) form_control::$14 ← *((byte*) form_control::field#3) & (byte) $7f
Inferred type updated to byte in (unumber~) form_control::$19 ← (const byte) form_fields_cnt - (byte) 1
Adding pointer type conversion cast (byte*) bitmap_clear::$2 in (byte*~) bitmap_clear::$2 ← *((const to_nomodify byte*) bitmap_plot_xhi + (byte) 0) w= *((const to_nomodify byte*) bitmap_plot_xlo + (byte) 0)
Adding pointer type conversion cast (byte*) form_field_ptr::$1 in (byte*~) form_field_ptr::$1 ← *((const byte*) form_line_hi + (byte) form_field_ptr::y#0) w= *((const byte*) form_line_lo + (byte) form_field_ptr::y#0)
Successful SSA optimization PassNAddTypeConversionAssignment
Inversing boolean not [6] (bool~) memset::$1 ← (word) memset::num#1 <= (byte) 0 from [5] (bool~) memset::$0 ← (word) memset::num#1 > (byte) 0
Inversing boolean not [35] (bool~) print_str_lines::$0 ← (byte) 0 == (byte) print_str_lines::ch#0 from [34] (bool~) print_str_lines::$5 ← (byte) 0 != (byte) print_str_lines::ch#0
Inversing boolean not [142] (bool~) keyboard_event_scan::$18 ← (byte~) keyboard_event_scan::$16 == (byte) 0 from [141] (bool~) keyboard_event_scan::$17 ← (byte~) keyboard_event_scan::$16 != (byte) 0
Inversing boolean not [151] (bool~) keyboard_event_scan::$20 ← (byte) keyboard_events_size#18 == (byte) 8 from [150] (bool~) keyboard_event_scan::$19 ← (byte) keyboard_events_size#18 != (byte) 8
Inversing boolean not [175] (bool~) keyboard_event_scan::$2 ← (byte~) keyboard_event_scan::$0 == (byte) 0 from [174] (bool~) keyboard_event_scan::$1 ← (byte~) keyboard_event_scan::$0 != (byte) 0
Inversing boolean not [184] (bool~) keyboard_event_scan::$5 ← (byte~) keyboard_event_scan::$3 == (byte) 0 from [183] (bool~) keyboard_event_scan::$4 ← (byte~) keyboard_event_scan::$3 != (byte) 0
Inversing boolean not [196] (bool~) keyboard_event_scan::$8 ← (byte~) keyboard_event_scan::$6 == (byte) 0 from [195] (bool~) keyboard_event_scan::$7 ← (byte~) keyboard_event_scan::$6 != (byte) 0
Inversing boolean not [208] (bool~) keyboard_event_scan::$11 ← (byte~) keyboard_event_scan::$9 == (byte) 0 from [207] (bool~) keyboard_event_scan::$10 ← (byte~) keyboard_event_scan::$9 != (byte) 0
Inversing boolean not [253] (bool~) bitmap_init::$4 ← (byte) bitmap_init::bits#1 != (byte) 0 from [252] (bool~) bitmap_init::$3 ← (byte) bitmap_init::bits#1 == (byte) 0
Inversing boolean not [272] (bool~) bitmap_init::$12 ← (byte~) bitmap_init::$10 != (byte) 7 from [271] (bool~) bitmap_init::$11 ← (byte~) bitmap_init::$10 == (byte) 7
Inversing boolean not [413] (bool~) bitmap_line_xdyi::$4 ← (byte) bitmap_line_xdyi::xd#2 >= (byte) bitmap_line_xdyi::e#1 from [412] (bool~) bitmap_line_xdyi::$3 ← (byte) bitmap_line_xdyi::xd#2 < (byte) bitmap_line_xdyi::e#1
Inversing boolean not [436] (bool~) bitmap_line_xdyd::$4 ← (byte) bitmap_line_xdyd::xd#2 >= (byte) bitmap_line_xdyd::e#1 from [435] (bool~) bitmap_line_xdyd::$3 ← (byte) bitmap_line_xdyd::xd#2 < (byte) bitmap_line_xdyd::e#1
Inversing boolean not [459] (bool~) bitmap_line_ydxi::$4 ← (byte) bitmap_line_ydxi::yd#2 >= (byte) bitmap_line_ydxi::e#1 from [458] (bool~) bitmap_line_ydxi::$3 ← (byte) bitmap_line_ydxi::yd#2 < (byte) bitmap_line_ydxi::e#1
Inversing boolean not [483] (bool~) bitmap_line_ydxd::$4 ← (byte) bitmap_line_ydxd::yd#2 >= (byte) bitmap_line_ydxd::e#1 from [482] (bool~) bitmap_line_ydxd::$3 ← (byte) bitmap_line_ydxd::yd#2 < (byte) bitmap_line_ydxd::e#1
Inversing boolean not [582] (bool~) get_plane::$14 ← (byte) get_plane::idx#15 != (byte) $d from [581] (bool~) get_plane::$13 ← (byte) get_plane::idx#15 == (byte) $d
Inversing boolean not [607] (bool~) get_vic_screen::$5 ← (byte) get_vic_screen::idx#6 != (byte) 4 from [606] (bool~) get_vic_screen::$4 ← (byte) get_vic_screen::idx#6 == (byte) 4
Inversing boolean not [620] (bool~) get_vic_charset::$2 ← (byte) get_vic_charset::idx#2 != (byte) 1 from [619] (bool~) get_vic_charset::$1 ← (byte) get_vic_charset::idx#2 == (byte) 1
Inversing boolean not [736] (bool~) gfx_mode::$1 ← *((const nomodify byte*) form_ctrl_line) == (byte) 0 from [735] (bool~) gfx_mode::$0 ← *((const nomodify byte*) form_ctrl_line) != (byte) 0
Inversing boolean not [740] (bool~) gfx_mode::$3 ← *((const nomodify byte*) form_ctrl_borof) == (byte) 0 from [739] (bool~) gfx_mode::$2 ← *((const nomodify byte*) form_ctrl_borof) != (byte) 0
Inversing boolean not [747] (bool~) gfx_mode::$5 ← *((const nomodify byte*) form_ctrl_hicol) == (byte) 0 from [746] (bool~) gfx_mode::$4 ← *((const nomodify byte*) form_ctrl_hicol) != (byte) 0
Inversing boolean not [754] (bool~) gfx_mode::$7 ← *((const nomodify byte*) form_ctrl_overs) == (byte) 0 from [753] (bool~) gfx_mode::$6 ← *((const nomodify byte*) form_ctrl_overs) != (byte) 0
Inversing boolean not [761] (bool~) gfx_mode::$9 ← *((const nomodify byte*) form_ctrl_colof) == (byte) 0 from [760] (bool~) gfx_mode::$8 ← *((const nomodify byte*) form_ctrl_colof) != (byte) 0
Inversing boolean not [768] (bool~) gfx_mode::$11 ← *((const nomodify byte*) form_ctrl_chunk) == (byte) 0 from [767] (bool~) gfx_mode::$10 ← *((const nomodify byte*) form_ctrl_chunk) != (byte) 0
Inversing boolean not [777] (bool~) gfx_mode::$13 ← *((const nomodify byte*) form_ctrl_ecm) == (byte) 0 from [776] (bool~) gfx_mode::$12 ← *((const nomodify byte*) form_ctrl_ecm) != (byte) 0
Inversing boolean not [784] (bool~) gfx_mode::$15 ← *((const nomodify byte*) form_ctrl_bmm) == (byte) 0 from [783] (bool~) gfx_mode::$14 ← *((const nomodify byte*) form_ctrl_bmm) != (byte) 0
Inversing boolean not [793] (bool~) gfx_mode::$17 ← *((const nomodify byte*) form_ctrl_mcm) == (byte) 0 from [792] (bool~) gfx_mode::$16 ← *((const nomodify byte*) form_ctrl_mcm) != (byte) 0
Inversing boolean not [945] (bool~) gfx_mode::$81 ← (byte) gfx_mode::keyboard_event#0 != (const nomodify byte) KEY_SPACE from [944] (bool~) gfx_mode::$80 ← (byte) gfx_mode::keyboard_event#0 == (const nomodify byte) KEY_SPACE
Inversing boolean not [1107] (bool~) gfx_init_plane_8bppchunky::$3 ← (byte*) gfx_init_plane_8bppchunky::gfxb#3 != (word) $8000 from [1106] (bool~) gfx_init_plane_8bppchunky::$2 ← (byte*) gfx_init_plane_8bppchunky::gfxb#3 == (word) $8000
Inversing boolean not [1227] (bool~) gfx_init_plane_charset8::$4 ← (byte~) gfx_init_plane_charset8::$2 == (byte) 0 from [1226] (bool~) gfx_init_plane_charset8::$3 ← (byte~) gfx_init_plane_charset8::$2 != (byte) 0
Inversing boolean not [1369] (bool~) form_mode::$13 ← (byte~) form_mode::$11 == (byte) 0 from [1368] (bool~) form_mode::$12 ← (byte~) form_mode::$11 != (byte) 0
Inversing boolean not [1373] (bool~) form_mode::$15 ← (byte) form_mode::preset_current#2 == *((const nomodify byte*) form_preset) from [1372] (bool~) form_mode::$14 ← (byte) form_mode::preset_current#2 != *((const nomodify byte*) form_preset)
Inversing boolean not [1446] (bool~) form_control::$2 ← (signed byte) form_cursor_count#5 >= (signed byte) 0 from [1445] (bool~) form_control::$1 ← (signed byte) form_cursor_count#5 < (signed byte) 0
Inversing boolean not [1471] (bool~) form_control::$7 ← (byte) form_control::key_event#0 != (const nomodify byte) KEY_CRSR_DOWN from [1470] (bool~) form_control::$6 ← (byte) form_control::key_event#0 == (const nomodify byte) KEY_CRSR_DOWN
Inversing boolean not [1475] (bool~) form_control::$9 ← (byte) form_control::key_event#1 != (const nomodify byte) KEY_CRSR_RIGHT from [1474] (bool~) form_control::$8 ← (byte) form_control::key_event#1 == (const nomodify byte) KEY_CRSR_RIGHT
Inversing boolean not [1486] (bool~) form_control::$21 ← (byte) form_field_idx#5 != (const byte) form_fields_cnt from [1485] (bool~) form_control::$20 ← (byte) form_field_idx#5 == (const byte) form_fields_cnt
Inversing boolean not [1491] (bool~) form_control::$18 ← (byte) form_field_idx#6 != (byte) $ff from [1490] (bool~) form_control::$17 ← (byte) form_field_idx#6 == (byte) $ff
Inversing boolean not [1510] (bool~) form_control::$11 ← (byte) form_control::key_event#2 != (const nomodify byte) KEY_SPACE from [1509] (bool~) form_control::$10 ← (byte) form_control::key_event#2 == (const nomodify byte) KEY_SPACE
Inversing boolean not [1519] (bool~) form_control::$27 ← *((const byte*) form_fields_val + (byte) form_field_idx#19) <= *((const byte*) form_fields_max + (byte) form_field_idx#19) from [1518] (bool~) form_control::$26 ← *((const byte*) form_fields_val + (byte) form_field_idx#19) > *((const byte*) form_fields_max + (byte) form_field_idx#19)
Inversing boolean not [1524] (bool~) form_control::$25 ← *((const byte*) form_fields_val + (byte) form_field_idx#20) != (byte) $ff from [1523] (bool~) form_control::$24 ← *((const byte*) form_fields_val + (byte) form_field_idx#20) == (byte) $ff
Successful SSA optimization Pass2UnaryNotSimplification
Alias memset::return#0 = memset::str#1 memset::return#3 memset::return#1 
Alias memset::str#2 = memset::str#3 
Alias memset::num#1 = memset::num#2 
Alias memset::c#3 = memset::c#4 
Alias memset::end#0 = memset::$2 
Alias memset::c#1 = memset::c#2 
Alias memset::dst#2 = memset::dst#3 
Alias memset::end#1 = memset::end#2 
Alias memset::str#4 = memset::str#5 
Alias print_screen#0 = print_line_cursor#0 print_char_cursor#0 print_screen#37 print_line_cursor#60 print_char_cursor#65 print_screen#32 print_line_cursor#53 print_char_cursor#60 print_screen#24 print_line_cursor#44 print_char_cursor#50 
Alias print_str_lines::ch#0 = print_str_lines::ch#2 print_str_lines::ch#3 
Alias print_char_cursor#41 = print_char_cursor#52 
Alias print_str_lines::str#0 = print_str_lines::str#10 print_str_lines::str#8 
Alias print_line_cursor#54 = print_line_cursor#61 print_line_cursor#55 
Alias print_char_cursor#1 = print_char_cursor#22 
Alias print_line_cursor#36 = print_line_cursor#46 
Alias print_char_cursor#42 = print_char_cursor#53 
Alias print_str_lines::str#6 = print_str_lines::str#9 print_str_lines::str#7 
Alias print_line_cursor#1 = print_line_cursor#19 
Alias print_char_cursor#2 = print_char_cursor#23 
Alias print_char_cursor#24 = print_char_cursor#43 print_char_cursor#3 
Alias print_line_cursor#2 = print_line_cursor#20 print_line_cursor#37 
Alias print_str_at::str#2 = print_str_at::str#3 
Alias print_str_at::at#2 = print_str_at::at#3 
Alias print_line_cursor#22 = print_line_cursor#3 print_ln::$0 print_char_cursor#4 print_line_cursor#23 print_char_cursor#26 print_line_cursor#4 print_char_cursor#5 
Alias print_char_cursor#28 = print_char_cursor#6 print_char_cursor#7 
Alias print_line_cursor#24 = print_screen#10 print_screen#9 print_line_cursor#5 print_char_cursor#8 print_char_cursor#29 print_line_cursor#6 print_char_cursor#9 
Alias print_screen#1 = print_line_cursor#7 print_char_cursor#10 print_screen#11 print_line_cursor#25 print_char_cursor#30 print_screen#2 print_line_cursor#8 print_char_cursor#11 
Alias keyboard_matrix_read::return#0 = keyboard_matrix_read::row_pressed_bits#0 keyboard_matrix_read::$0 keyboard_matrix_read::return#3 keyboard_matrix_read::return#1 
Alias keyboard_matrix_read::return#2 = keyboard_matrix_read::return#4 
Alias keyboard_event_scan::row#2 = keyboard_event_scan::row#3 keyboard_event_scan::row#9 keyboard_event_scan::row#7 
Alias keyboard_event_scan::keycode#11 = keyboard_event_scan::keycode#7 keyboard_event_scan::keycode#12 keyboard_event_scan::keycode#3 
Alias keyboard_events_size#106 = keyboard_events_size#77 keyboard_events_size#89 keyboard_events_size#55 
Alias keyboard_event_scan::row_scan#0 = keyboard_event_scan::$12 keyboard_event_scan::row_scan#5 
Alias keyboard_event_scan::keycode#1 = keyboard_event_scan::$14 
Alias keyboard_events_size#18 = keyboard_events_size#37 keyboard_events_size#38 keyboard_events_size#19 keyboard_events_size#20 
Alias keyboard_event_scan::keycode#10 = keyboard_event_scan::keycode#9 keyboard_event_scan::keycode#8 keyboard_event_scan::keycode#5 keyboard_event_scan::keycode#6 
Alias keyboard_event_scan::col#2 = keyboard_event_scan::col#6 keyboard_event_scan::col#4 keyboard_event_scan::col#5 keyboard_event_scan::col#7 
Alias keyboard_event_scan::row_scan#1 = keyboard_event_scan::row_scan#6 keyboard_event_scan::row_scan#2 keyboard_event_scan::row_scan#7 keyboard_event_scan::row_scan#8 
Alias keyboard_event_scan::row#10 = keyboard_event_scan::row#11 keyboard_event_scan::row#5 keyboard_event_scan::row#13 keyboard_event_scan::row#12 
Alias keyboard_event_scan::event_type#0 = keyboard_event_scan::$21 
Alias keyboard_event_scan::row_scan#3 = keyboard_event_scan::row_scan#4 
Alias keyboard_event_scan::row#6 = keyboard_event_scan::row#8 
Alias keyboard_event_scan::keycode#14 = keyboard_event_scan::keycode#2 
Alias keyboard_events_size#105 = keyboard_events_size#54 
Alias keyboard_events_size#110 = keyboard_events_size#114 keyboard_events_size#98 keyboard_events_size#111 
Alias keyboard_event_pressed::return#0 = keyboard_event_pressed::return#6 
Alias keyboard_modifiers#1 = keyboard_modifiers#34 keyboard_modifiers#17 
Alias keyboard_event_pressed::return#1 = keyboard_event_pressed::return#7 
Alias keyboard_modifiers#18 = keyboard_modifiers#35 keyboard_modifiers#53 
Alias keyboard_events_size#100 = keyboard_events_size#99 keyboard_events_size#107 
Alias keyboard_modifiers#2 = keyboard_event_scan::$26 
Alias keyboard_event_pressed::return#2 = keyboard_event_pressed::return#8 
Alias keyboard_modifiers#19 = keyboard_modifiers#36 keyboard_modifiers#54 
Alias keyboard_events_size#78 = keyboard_events_size#90 keyboard_events_size#79 
Alias keyboard_modifiers#3 = keyboard_event_scan::$27 
Alias keyboard_event_pressed::return#3 = keyboard_event_pressed::return#9 
Alias keyboard_modifiers#20 = keyboard_modifiers#37 keyboard_modifiers#55 
Alias keyboard_events_size#39 = keyboard_events_size#56 keyboard_events_size#40 
Alias keyboard_modifiers#4 = keyboard_event_scan::$28 
Alias keyboard_modifiers#5 = keyboard_event_scan::$29 
Alias keyboard_events_size#21 = keyboard_events_size#3 
Alias keyboard_modifiers#21 = keyboard_modifiers#6 
Alias keyboard_event_pressed::return#10 = keyboard_event_pressed::return#4 keyboard_event_pressed::$2 keyboard_event_pressed::return#5 
Alias keyboard_events_size#22 = keyboard_events_size#41 keyboard_events_size#23 
Alias keyboard_event_get::return#2 = keyboard_event_get::return#5 
Alias keyboard_events_size#24 = keyboard_events_size#5 
Alias bitmap_init::bits#1 = bitmap_init::$2 
Alias bitmap_init::x#2 = bitmap_init::x#4 
Alias bitmap_init::bitmap#1 = bitmap_init::bitmap#4 
Alias bitmap_init::yoffs#2 = bitmap_init::yoffs#3 
Alias bitmap_init::y#2 = bitmap_init::y#4 
Alias bitmap_init::yoffs#1 = bitmap_init::$13 
Alias bitmap_clear::bitmap#0 = bitmap_clear::$2 
Alias bitmap_clear::y#2 = bitmap_clear::y#3 
Alias bitmap_clear::bitmap#1 = bitmap_clear::bitmap#4 
Alias bitmap_plot::plotter_x#0 = bitmap_plot::$2 
Alias bitmap_plot::plotter_y#0 = bitmap_plot::$3 
Alias bitmap_line::x1#1 = bitmap_line::x1#2 bitmap_line::x1#3 bitmap_line::x1#11 bitmap_line::x1#10 bitmap_line::x1#4 bitmap_line::x1#5 bitmap_line::x1#6 bitmap_line::x1#13 bitmap_line::x1#12 bitmap_line::x1#7 bitmap_line::x1#8 bitmap_line::x1#9 
Alias bitmap_line::x0#1 = bitmap_line::x0#2 bitmap_line::x0#3 bitmap_line::x0#11 bitmap_line::x0#10 bitmap_line::x0#4 bitmap_line::x0#5 bitmap_line::x0#6 bitmap_line::x0#13 bitmap_line::x0#12 bitmap_line::x0#7 bitmap_line::x0#8 bitmap_line::x0#9 
Alias bitmap_line::y0#1 = bitmap_line::y0#13 bitmap_line::y0#2 bitmap_line::y0#3 bitmap_line::y0#4 bitmap_line::y0#5 bitmap_line::y0#6 bitmap_line::y0#7 bitmap_line::y0#8 bitmap_line::y0#9 bitmap_line::y0#10 bitmap_line::y0#11 bitmap_line::y0#12 
Alias bitmap_line::y1#1 = bitmap_line::y1#13 bitmap_line::y1#2 bitmap_line::y1#3 bitmap_line::y1#4 bitmap_line::y1#5 bitmap_line::y1#6 bitmap_line::y1#7 bitmap_line::y1#8 bitmap_line::y1#9 bitmap_line::y1#10 bitmap_line::y1#11 bitmap_line::y1#12 
Alias bitmap_line::xd#1 = bitmap_line::$11 bitmap_line::xd#9 bitmap_line::xd#10 bitmap_line::xd#11 bitmap_line::xd#12 bitmap_line::xd#13 bitmap_line::xd#14 
Alias bitmap_line::xd#2 = bitmap_line::$1 bitmap_line::xd#3 bitmap_line::xd#4 bitmap_line::xd#5 bitmap_line::xd#6 bitmap_line::xd#7 bitmap_line::xd#8 
Alias bitmap_line::yd#1 = bitmap_line::$7 bitmap_line::yd#7 bitmap_line::yd#8 
Alias bitmap_line::yd#2 = bitmap_line::$3 bitmap_line::yd#5 bitmap_line::yd#6 
Alias bitmap_line::yd#11 = bitmap_line::yd#3 bitmap_line::$17 bitmap_line::yd#12 
Alias bitmap_line::yd#10 = bitmap_line::yd#4 bitmap_line::$13 bitmap_line::yd#9 
Alias bitmap_line_xdyi::e#0 = bitmap_line_xdyi::$0 
Alias bitmap_line_xdyi::x#3 = bitmap_line_xdyi::x#4 
Alias bitmap_line_xdyi::e#3 = bitmap_line_xdyi::e#5 
Alias bitmap_line_xdyi::yd#3 = bitmap_line_xdyi::yd#4 bitmap_line_xdyi::yd#6 
Alias bitmap_line_xdyi::xd#2 = bitmap_line_xdyi::xd#4 bitmap_line_xdyi::xd#3 
Alias bitmap_line_xdyi::x1#3 = bitmap_line_xdyi::x1#4 bitmap_line_xdyi::x1#5 
Alias bitmap_line_xdyi::y#3 = bitmap_line_xdyi::y#7 bitmap_line_xdyi::y#4 
Alias bitmap_line_xdyi::e#1 = bitmap_line_xdyi::$2 bitmap_line_xdyi::e#4 
Alias bitmap_line_xdyi::x#2 = bitmap_line_xdyi::x#7 
Alias bitmap_line_xdyi::e#2 = bitmap_line_xdyi::$5 
Alias bitmap_line_xdyd::e#0 = bitmap_line_xdyd::$0 
Alias bitmap_line_xdyd::x#3 = bitmap_line_xdyd::x#4 
Alias bitmap_line_xdyd::e#3 = bitmap_line_xdyd::e#5 
Alias bitmap_line_xdyd::yd#3 = bitmap_line_xdyd::yd#4 bitmap_line_xdyd::yd#6 
Alias bitmap_line_xdyd::xd#2 = bitmap_line_xdyd::xd#4 bitmap_line_xdyd::xd#3 
Alias bitmap_line_xdyd::x1#3 = bitmap_line_xdyd::x1#4 bitmap_line_xdyd::x1#5 
Alias bitmap_line_xdyd::y#3 = bitmap_line_xdyd::y#7 bitmap_line_xdyd::y#4 
Alias bitmap_line_xdyd::e#1 = bitmap_line_xdyd::$2 bitmap_line_xdyd::e#4 
Alias bitmap_line_xdyd::x#2 = bitmap_line_xdyd::x#7 
Alias bitmap_line_xdyd::e#2 = bitmap_line_xdyd::$5 
Alias bitmap_line_ydxi::e#0 = bitmap_line_ydxi::$0 
Alias bitmap_line_ydxi::y#3 = bitmap_line_ydxi::y#4 
Alias bitmap_line_ydxi::e#3 = bitmap_line_ydxi::e#5 
Alias bitmap_line_ydxi::xd#3 = bitmap_line_ydxi::xd#4 bitmap_line_ydxi::xd#6 
Alias bitmap_line_ydxi::yd#2 = bitmap_line_ydxi::yd#4 bitmap_line_ydxi::yd#3 
Alias bitmap_line_ydxi::y1#3 = bitmap_line_ydxi::y1#4 bitmap_line_ydxi::y1#5 
Alias bitmap_line_ydxi::x#3 = bitmap_line_ydxi::x#7 bitmap_line_ydxi::x#4 
Alias bitmap_line_ydxi::e#1 = bitmap_line_ydxi::$2 bitmap_line_ydxi::e#4 
Alias bitmap_line_ydxi::y#2 = bitmap_line_ydxi::y#7 
Alias bitmap_line_ydxi::e#2 = bitmap_line_ydxi::$5 
Alias bitmap_line_ydxd::e#0 = bitmap_line_ydxd::$0 
Alias bitmap_line_ydxd::y#2 = bitmap_line_ydxd::y#5 bitmap_line_ydxd::y#4 
Alias bitmap_line_ydxd::e#3 = bitmap_line_ydxd::e#5 
Alias bitmap_line_ydxd::xd#3 = bitmap_line_ydxd::xd#4 bitmap_line_ydxd::xd#6 
Alias bitmap_line_ydxd::yd#2 = bitmap_line_ydxd::yd#4 bitmap_line_ydxd::yd#3 
Alias bitmap_line_ydxd::y1#3 = bitmap_line_ydxd::y1#4 bitmap_line_ydxd::y1#5 
Alias bitmap_line_ydxd::x#3 = bitmap_line_ydxd::x#7 bitmap_line_ydxd::x#4 
Alias bitmap_line_ydxd::e#1 = bitmap_line_ydxd::$2 bitmap_line_ydxd::e#4 
Alias bitmap_line_ydxd::y#3 = bitmap_line_ydxd::y#8 
Alias bitmap_line_ydxd::e#2 = bitmap_line_ydxd::$5 
Alias print_screen#25 = print_screen#33 print_screen#38 
Alias print_line_cursor#47 = print_line_cursor#56 print_line_cursor#62 
Alias print_char_cursor#54 = print_char_cursor#61 print_char_cursor#66 
Alias form_cursor_count#27 = form_cursor_count#38 form_cursor_count#43 
Alias keyboard_events_size#57 = keyboard_events_size#80 keyboard_events_size#91 
Alias keyboard_modifiers#56 = keyboard_modifiers#76 keyboard_modifiers#82 
Alias form_field_idx#35 = form_field_idx#44 form_field_idx#48 
Alias print_screen#13 = print_screen#18 print_screen#19 print_screen#4 
Alias print_line_cursor#10 = print_line_cursor#39 print_line_cursor#40 print_line_cursor#27 
Alias print_char_cursor#13 = print_char_cursor#45 print_char_cursor#46 print_char_cursor#32 
Alias form_cursor_count#1 = form_cursor_count#18 form_cursor_count#19 form_cursor_count#11 
Alias keyboard_events_size#27 = keyboard_events_size#42 keyboard_events_size#43 keyboard_events_size#8 
Alias keyboard_modifiers#24 = keyboard_modifiers#38 keyboard_modifiers#39 keyboard_modifiers#9 
Alias form_field_idx#1 = form_field_idx#25 form_field_idx#26 form_field_idx#12 
Alias print_screen#12 = print_screen#3 print_screen#26 
Alias print_line_cursor#26 = print_line_cursor#9 print_line_cursor#48 
Alias print_char_cursor#12 = print_char_cursor#31 print_char_cursor#55 
Alias form_cursor_count#0 = form_cursor_count#10 form_cursor_count#28 
Alias keyboard_events_size#25 = keyboard_events_size#6 
Alias keyboard_modifiers#22 = keyboard_modifiers#7 
Alias form_field_idx#0 = form_field_idx#11 form_field_idx#36 
Alias keyboard_events_size#26 = keyboard_events_size#7 
Alias keyboard_modifiers#23 = keyboard_modifiers#8 
Alias get_plane::idx#10 = get_plane::idx#3 get_plane::idx#2 get_plane::idx#4 get_plane::idx#5 get_plane::idx#6 get_plane::idx#7 get_plane::idx#8 get_plane::idx#9 get_plane::idx#11 get_plane::idx#12 get_plane::idx#13 get_plane::idx#14 get_plane::idx#15 
Alias get_plane::return#14 = get_plane::return#18 
Alias get_vic_screen::idx#2 = get_vic_screen::idx#3 get_vic_screen::idx#4 get_vic_screen::idx#5 get_vic_screen::idx#6 
Alias get_vic_screen::return#5 = get_vic_screen::return#9 
Alias get_vic_charset::idx#1 = get_vic_charset::idx#2 
Alias get_vic_charset::return#2 = get_vic_charset::return#5 
Alias apply_preset::idx#1 = apply_preset::idx#2 apply_preset::idx#3 apply_preset::idx#4 apply_preset::idx#5 apply_preset::idx#6 apply_preset::idx#7 apply_preset::idx#8 apply_preset::idx#9 apply_preset::idx#10 apply_preset::idx#11 
Alias apply_preset::preset#13 = apply_preset::preset#14 
Alias apply_preset::i#2 = apply_preset::i#3 
Alias render_preset_name::idx#10 = render_preset_name::idx#3 render_preset_name::idx#2 render_preset_name::idx#4 render_preset_name::idx#5 render_preset_name::idx#6 render_preset_name::idx#7 render_preset_name::idx#8 render_preset_name::idx#9 render_preset_name::idx#11 render_preset_name::idx#12 
Alias gfx_mode::dtv_control#0 = gfx_mode::dtv_control#7 
Alias keyboard_events_size#143 = keyboard_events_size#144 
Alias keyboard_modifiers#124 = keyboard_modifiers#125 
Alias gfx_mode::dtv_control#1 = gfx_mode::$64 
Alias gfx_mode::dtv_control#14 = gfx_mode::dtv_control#8 
Alias keyboard_events_size#141 = keyboard_events_size#142 
Alias keyboard_modifiers#122 = keyboard_modifiers#123 
Alias gfx_mode::dtv_control#2 = gfx_mode::$65 
Alias gfx_mode::dtv_control#15 = gfx_mode::dtv_control#9 
Alias keyboard_events_size#139 = keyboard_events_size#140 
Alias keyboard_modifiers#120 = keyboard_modifiers#121 
Alias gfx_mode::dtv_control#3 = gfx_mode::$66 
Alias gfx_mode::dtv_control#10 = gfx_mode::dtv_control#16 
Alias keyboard_events_size#137 = keyboard_events_size#138 
Alias keyboard_modifiers#118 = keyboard_modifiers#119 
Alias gfx_mode::dtv_control#4 = gfx_mode::$67 
Alias gfx_mode::dtv_control#11 = gfx_mode::dtv_control#17 
Alias keyboard_events_size#135 = keyboard_events_size#136 
Alias keyboard_modifiers#116 = keyboard_modifiers#117 
Alias gfx_mode::dtv_control#5 = gfx_mode::$68 
Alias gfx_mode::dtv_control#13 = gfx_mode::dtv_control#18 
Alias keyboard_events_size#133 = keyboard_events_size#134 
Alias keyboard_modifiers#114 = keyboard_modifiers#115 
Alias gfx_mode::dtv_control#6 = gfx_mode::$69 
Alias gfx_mode::vic_control#0 = gfx_mode::vic_control#3 
Alias keyboard_events_size#131 = keyboard_events_size#132 
Alias keyboard_modifiers#112 = keyboard_modifiers#113 
Alias gfx_mode::vic_control#1 = gfx_mode::$70 
Alias gfx_mode::vic_control#5 = gfx_mode::vic_control#6 
Alias keyboard_events_size#129 = keyboard_events_size#130 
Alias keyboard_modifiers#110 = keyboard_modifiers#111 
Alias gfx_mode::vic_control#2 = gfx_mode::$71 
Alias gfx_mode::plane_a_offs#0 = gfx_mode::$19 gfx_mode::plane_a_offs#1 
Alias get_plane::return#16 = get_plane::return#19 
Alias keyboard_events_size#115 = keyboard_events_size#123 keyboard_events_size#125 keyboard_events_size#121 keyboard_events_size#119 keyboard_events_size#117 
Alias keyboard_modifiers#100 = keyboard_modifiers#104 keyboard_modifiers#106 keyboard_modifiers#102 keyboard_modifiers#98 keyboard_modifiers#96 
Alias gfx_mode::plane_a#0 = gfx_mode::$21 
Alias gfx_mode::plane_b_offs#0 = gfx_mode::$33 gfx_mode::plane_b_offs#1 
Alias get_plane::return#17 = get_plane::return#20 
Alias gfx_mode::plane_b#0 = gfx_mode::$35 
Alias get_vic_screen::return#10 = get_vic_screen::return#7 
Alias get_vic_charset::return#4 = get_vic_charset::return#6 
Alias get_vic_screen::return#11 = get_vic_screen::return#8 
Alias gfx_mode::vic_colors#0 = gfx_mode::$54 
Alias gfx_mode::vic_control2#0 = gfx_mode::vic_control2#3 
Alias keyboard_events_size#127 = keyboard_events_size#128 
Alias keyboard_modifiers#108 = keyboard_modifiers#109 
Alias gfx_mode::vic_control2#1 = gfx_mode::$72 
Alias gfx_mode::cy#2 = gfx_mode::cy#3 
Alias gfx_mode::vic_colors#1 = gfx_mode::vic_colors#4 
Alias gfx_mode::col#1 = gfx_mode::col#4 
Alias keyboard_events_size#101 = keyboard_events_size#108 keyboard_events_size#92 keyboard_events_size#82 keyboard_events_size#81 
Alias keyboard_modifiers#77 = keyboard_modifiers#88 keyboard_modifiers#92 keyboard_modifiers#83 keyboard_modifiers#78 
Alias keyboard_events_size#44 = keyboard_events_size#60 
Alias keyboard_modifiers#40 = keyboard_modifiers#59 
Alias keyboard_events_size#28 = keyboard_events_size#9 
Alias keyboard_modifiers#10 = keyboard_modifiers#25 keyboard_modifiers#42 
Alias keyboard_event_get::return#3 = keyboard_event_get::return#6 
Alias keyboard_events_size#10 = keyboard_events_size#29 
Alias gfx_mode::keyboard_event#0 = gfx_mode::$79 
Alias keyboard_events_size#11 = keyboard_events_size#30 
Alias keyboard_modifiers#11 = keyboard_modifiers#26 
Alias gfx_init_charset::c#2 = gfx_init_charset::c#3 
Alias gfx_init_charset::chargen#1 = gfx_init_charset::chargen#4 
Alias gfx_init_charset::charset#1 = gfx_init_charset::charset#4 
Alias gfx_init_screen0::cy#2 = gfx_init_screen0::cy#3 
Alias gfx_init_screen0::ch#1 = gfx_init_screen0::ch#4 
Alias gfx_init_screen1::cy#2 = gfx_init_screen1::cy#3 
Alias gfx_init_screen1::ch#1 = gfx_init_screen1::ch#4 
Alias gfx_init_screen2::col#0 = gfx_init_screen2::$1 
Alias gfx_init_screen2::col2#0 = gfx_init_screen2::$2 
Alias gfx_init_screen2::cy#2 = gfx_init_screen2::cy#3 
Alias gfx_init_screen2::ch#1 = gfx_init_screen2::ch#4 
Alias gfx_init_screen3::cy#2 = gfx_init_screen3::cy#3 
Alias gfx_init_screen3::ch#1 = gfx_init_screen3::ch#4 
Alias gfx_init_screen4::cy#2 = gfx_init_screen4::cy#3 
Alias gfx_init_screen4::ch#1 = gfx_init_screen4::ch#4 
Alias gfx_init_vic_bitmap::l#2 = gfx_init_vic_bitmap::l#3 gfx_init_vic_bitmap::l#4 
Alias gfx_init_plane_8bppchunky::gfxbCpuBank#0 = gfx_init_plane_8bppchunky::gfxbCpuBank#3 
Alias gfx_init_plane_8bppchunky::gfxbCpuBank#4 = gfx_init_plane_8bppchunky::gfxbCpuBank#6 gfx_init_plane_8bppchunky::gfxbCpuBank#5 
Alias gfx_init_plane_8bppchunky::x#3 = gfx_init_plane_8bppchunky::x#5 gfx_init_plane_8bppchunky::x#4 
Alias gfx_init_plane_8bppchunky::y#4 = gfx_init_plane_8bppchunky::y#7 gfx_init_plane_8bppchunky::y#5 
Alias gfx_init_plane_8bppchunky::y#2 = gfx_init_plane_8bppchunky::y#3 
Alias gfx_init_plane_8bppchunky::gfxb#1 = gfx_init_plane_8bppchunky::gfxb#6 
Alias gfx_init_plane_8bppchunky::gfxbCpuBank#8 = gfx_init_plane_8bppchunky::gfxbCpuBank#9 
Alias gfx_init_plane_horisontal::gfxbCpuBank#0 = gfx_init_plane_horisontal::gfxbCpuBank#2 
Alias gfx_init_plane_horisontal::gfxa#3 = gfx_init_plane_horisontal::gfxa#5 gfx_init_plane_horisontal::gfxa#4 
Alias gfx_init_plane_horisontal::ax#3 = gfx_init_plane_horisontal::ax#5 gfx_init_plane_horisontal::ax#4 
Alias gfx_init_plane_horisontal::ay#2 = gfx_init_plane_horisontal::ay#6 gfx_init_plane_horisontal::ay#7 
Alias gfx_init_plane_horisontal::ay#3 = gfx_init_plane_horisontal::ay#5 
Alias gfx_init_plane_horisontal::gfxa#7 = gfx_init_plane_horisontal::gfxa#8 
Alias gfx_init_plane_horisontal2::gfxbCpuBank#0 = gfx_init_plane_horisontal2::gfxbCpuBank#2 
Alias gfx_init_plane_horisontal2::row#0 = gfx_init_plane_horisontal2::$3 
Alias gfx_init_plane_horisontal2::ay#2 = gfx_init_plane_horisontal2::ay#3 
Alias gfx_init_plane_horisontal2::gfxa#1 = gfx_init_plane_horisontal2::gfxa#4 
Alias gfx_init_plane_vertical::gfxbCpuBank#0 = gfx_init_plane_vertical::gfxbCpuBank#2 
Alias gfx_init_plane_vertical::by#2 = gfx_init_plane_vertical::by#3 
Alias gfx_init_plane_vertical::gfxb#1 = gfx_init_plane_vertical::gfxb#4 
Alias gfx_init_plane_charset8::gfxbCpuBank#0 = gfx_init_plane_charset8::gfxbCpuBank#2 
Alias gfx_init_plane_charset8::bits#1 = gfx_init_plane_charset8::$5 
Alias gfx_init_plane_charset8::col#3 = gfx_init_plane_charset8::col#4 gfx_init_plane_charset8::c#1 
Alias gfx_init_plane_charset8::gfxa#3 = gfx_init_plane_charset8::gfxa#4 
Alias gfx_init_plane_charset8::bits#2 = gfx_init_plane_charset8::bits#4 
Alias gfx_init_plane_charset8::cp#3 = gfx_init_plane_charset8::cp#4 
Alias gfx_init_plane_charset8::cr#4 = gfx_init_plane_charset8::cr#5 
Alias gfx_init_plane_charset8::chargen#7 = gfx_init_plane_charset8::chargen#8 
Alias gfx_init_plane_charset8::ch#5 = gfx_init_plane_charset8::ch#6 
Alias gfx_init_plane_charset8::cr#2 = gfx_init_plane_charset8::cr#3 
Alias gfx_init_plane_charset8::chargen#4 = gfx_init_plane_charset8::chargen#6 gfx_init_plane_charset8::chargen#5 
Alias gfx_init_plane_charset8::ch#2 = gfx_init_plane_charset8::ch#3 gfx_init_plane_charset8::ch#4 
Alias gfx_init_plane_charset8::gfxa#1 = gfx_init_plane_charset8::gfxa#7 gfx_init_plane_charset8::gfxa#8 
Alias gfx_init_plane_charset8::col#1 = gfx_init_plane_charset8::col#7 gfx_init_plane_charset8::col#8 
Alias gfx_init_plane_fill::gfxbCpuBank#0 = gfx_init_plane_fill::$2 gfx_init_plane_fill::gfxbCpuBank#2 
Alias gfx_init_plane_fill::plane_addr#3 = gfx_init_plane_fill::plane_addr#4 
Alias gfx_init_plane_fill::fill#6 = gfx_init_plane_fill::fill#7 
Alias gfx_init_plane_fill::by#2 = gfx_init_plane_fill::by#3 
Alias gfx_init_plane_fill::fill#3 = gfx_init_plane_fill::fill#5 
Alias gfx_init_plane_fill::gfxb#1 = gfx_init_plane_fill::gfxb#4 
Alias form_cursor_count#44 = form_cursor_count#59 form_cursor_count#60 form_cursor_count#58 form_cursor_count#57 form_cursor_count#56 form_cursor_count#55 form_cursor_count#52 form_cursor_count#50 form_cursor_count#47 
Alias keyboard_events_size#102 = keyboard_events_size#124 keyboard_events_size#126 keyboard_events_size#122 keyboard_events_size#120 keyboard_events_size#118 keyboard_events_size#116 keyboard_events_size#113 keyboard_events_size#109 keyboard_events_size#93 
Alias keyboard_modifiers#101 = keyboard_modifiers#105 keyboard_modifiers#107 keyboard_modifiers#103 keyboard_modifiers#99 keyboard_modifiers#97 keyboard_modifiers#95 keyboard_modifiers#93 keyboard_modifiers#89 keyboard_modifiers#84 
Alias form_field_idx#49 = form_field_idx#65 form_field_idx#66 form_field_idx#64 form_field_idx#63 form_field_idx#62 form_field_idx#61 form_field_idx#58 form_field_idx#56 form_field_idx#52 
Alias print_screen#14 = print_screen#5 print_screen#27 print_screen#21 
Alias print_line_cursor#11 = print_line_cursor#28 
Alias print_char_cursor#14 = print_char_cursor#33 
Alias print_line_cursor#12 = print_line_cursor#29 
Alias print_char_cursor#15 = print_char_cursor#34 
Alias print_char_cursor#16 = print_char_cursor#35 
Alias print_line_cursor#13 = print_line_cursor#30 
Alias print_screen#15 = print_screen#6 print_screen#45 print_screen#44 print_screen#43 print_screen#41 print_screen#39 
Alias print_line_cursor#14 = print_line_cursor#31 
Alias print_char_cursor#17 = print_char_cursor#36 
Alias print_line_cursor#15 = print_line_cursor#32 
Alias print_char_cursor#18 = print_char_cursor#37 
Alias print_char_cursor#19 = print_char_cursor#38 print_char_cursor#71 print_char_cursor#69 print_char_cursor#67 
Alias print_line_cursor#16 = print_line_cursor#33 print_line_cursor#67 print_line_cursor#65 print_line_cursor#63 
Alias print_screen#28 = print_screen#34 
Alias print_line_cursor#49 = print_line_cursor#57 
Alias print_char_cursor#56 = print_char_cursor#62 
Alias form_cursor_count#29 = form_cursor_count#39 
Alias keyboard_events_size#61 = keyboard_events_size#83 
Alias keyboard_modifiers#60 = keyboard_modifiers#79 
Alias form_field_idx#37 = form_field_idx#45 
Alias form_cursor_count#20 = form_cursor_count#32 
Alias keyboard_events_size#46 = keyboard_events_size#64 
Alias keyboard_modifiers#43 = keyboard_modifiers#63 
Alias form_field_idx#27 = form_field_idx#40 
Alias form_mode::preset_current#2 = form_mode::preset_current#4 form_mode::preset_current#5 form_mode::preset_current#3 
Alias print_screen#22 = print_screen#31 print_screen#35 print_screen#30 print_screen#42 print_screen#40 print_screen#36 print_screen#29 
Alias print_line_cursor#42 = print_line_cursor#52 print_line_cursor#58 print_line_cursor#51 print_line_cursor#66 print_line_cursor#64 print_line_cursor#59 print_line_cursor#50 
Alias print_char_cursor#48 = print_char_cursor#59 print_char_cursor#63 print_char_cursor#58 print_char_cursor#70 print_char_cursor#68 print_char_cursor#64 print_char_cursor#57 
Alias form_control::return#0 = form_control::return#6 
Alias form_cursor_count#12 = form_cursor_count#2 form_cursor_count#31 form_cursor_count#48 form_cursor_count#45 form_cursor_count#40 form_cursor_count#30 
Alias keyboard_events_size#103 = keyboard_events_size#12 keyboard_events_size#31 keyboard_events_size#63 keyboard_events_size#94 keyboard_events_size#84 keyboard_events_size#62 
Alias keyboard_modifiers#12 = keyboard_modifiers#27 keyboard_modifiers#62 keyboard_modifiers#90 keyboard_modifiers#85 keyboard_modifiers#80 keyboard_modifiers#61 
Alias form_field_idx#13 = form_field_idx#2 form_field_idx#39 form_field_idx#53 form_field_idx#50 form_field_idx#46 form_field_idx#38 
Alias print_screen#16 = print_screen#7 
Alias print_line_cursor#17 = print_line_cursor#34 
Alias print_char_cursor#20 = print_char_cursor#39 
Alias form_cursor_count#13 = form_cursor_count#3 
Alias keyboard_events_size#13 = keyboard_events_size#32 
Alias keyboard_modifiers#13 = keyboard_modifiers#28 
Alias form_field_idx#14 = form_field_idx#3 
Alias form_mode::preset_current#1 = form_mode::preset_current#8 form_mode::preset_current#7 
Alias keyboard_events_size#0 = keyboard_events_size#76 keyboard_events_size#53 
Alias keyboard_modifiers#0 = keyboard_modifiers#75 keyboard_modifiers#52 
Alias form_set_screen::line#0 = form_set_screen::screen#1 
Alias form_set_screen::line#1 = form_set_screen::$2 
Alias form_field_ptr::line#0 = form_field_ptr::$1 
Alias form_field_ptr::return#0 = form_field_ptr::field#0 form_field_ptr::$0 form_field_ptr::return#4 form_field_ptr::return#1 
Alias form_render_values::idx#2 = form_render_values::idx#3 form_render_values::idx#4 
Alias form_field_ptr::return#2 = form_field_ptr::return#5 
Alias form_render_values::field#0 = form_render_values::$1 
Alias form_field_ptr::return#3 = form_field_ptr::return#6 
Alias form_cursor_count#14 = form_cursor_count#22 
Alias keyboard_events_size#104 = keyboard_events_size#95 keyboard_events_size#96 
Alias keyboard_modifiers#86 = keyboard_modifiers#91 keyboard_modifiers#87 
Alias form_field_idx#15 = form_field_idx#59 form_field_idx#60 
Alias form_control::field#0 = form_control::$0 form_control::field#11 
Alias form_control::field#1 = form_control::field#5 form_control::field#2 
Alias keyboard_events_size#65 = keyboard_events_size#85 keyboard_events_size#66 
Alias keyboard_modifiers#64 = keyboard_modifiers#81 keyboard_modifiers#65 
Alias form_field_idx#54 = form_field_idx#57 form_field_idx#55 
Alias form_cursor_count#15 = form_cursor_count#53 form_cursor_count#54 
Alias form_control::field#10 = form_control::field#12 form_control::field#14 form_control::field#6 form_control::field#15 form_control::field#3 form_control::field#13 form_control::field#9 form_control::field#7 form_control::field#8 
Alias form_field_idx#16 = form_field_idx#47 form_field_idx#51 form_field_idx#41 form_field_idx#42 form_field_idx#29 form_field_idx#17 form_field_idx#43 form_field_idx#33 form_field_idx#19 form_field_idx#20 form_field_idx#21 form_field_idx#23 form_field_idx#32 form_field_idx#30 
Alias form_cursor_count#23 = form_cursor_count#49 form_cursor_count#51 form_cursor_count#46 form_cursor_count#41 form_cursor_count#37 form_cursor_count#42 form_cursor_count#35 form_cursor_count#33 form_cursor_count#34 form_cursor_count#36 form_cursor_count#25 
Alias keyboard_events_size#14 = keyboard_events_size#33 
Alias keyboard_modifiers#14 = keyboard_modifiers#29 keyboard_modifiers#46 keyboard_modifiers#51 keyboard_modifiers#30 keyboard_modifiers#68 keyboard_modifiers#66 keyboard_modifiers#67 keyboard_modifiers#69 keyboard_modifiers#74 keyboard_modifiers#32 keyboard_modifiers#72 keyboard_modifiers#70 keyboard_modifiers#71 keyboard_modifiers#73 keyboard_modifiers#50 keyboard_modifiers#47 
Alias keyboard_event_get::return#4 = keyboard_event_get::return#7 
Alias keyboard_events_size#15 = keyboard_events_size#34 keyboard_events_size#87 keyboard_events_size#86 keyboard_events_size#69 keyboard_events_size#67 keyboard_events_size#68 keyboard_events_size#70 keyboard_events_size#75 keyboard_events_size#88 keyboard_events_size#73 keyboard_events_size#71 keyboard_events_size#72 keyboard_events_size#74 keyboard_events_size#52 keyboard_events_size#49 
Alias form_control::key_event#0 = form_control::$5 form_control::key_event#1 form_control::key_event#2 
Alias form_field_idx#7 = form_control::$19 
Alias form_control::return#2 = form_control::return#7 
Alias form_cursor_count#16 = form_cursor_count#8 
Alias keyboard_events_size#16 = keyboard_events_size#35 
Alias keyboard_modifiers#15 = keyboard_modifiers#31 
Alias form_field_idx#18 = form_field_idx#9 
Alias form_cursor_count#26 = form_cursor_count#4 
Alias form_field_idx#34 = form_field_idx#4 
Alias print_screen#17 = print_screen#8 
Alias print_line_cursor#18 = print_line_cursor#35 
Alias print_char_cursor#21 = print_char_cursor#40 
Alias form_cursor_count#17 = form_cursor_count#9 
Alias keyboard_events_size#17 = keyboard_events_size#36 
Alias keyboard_modifiers#16 = keyboard_modifiers#33 
Alias form_field_idx#10 = form_field_idx#24 
Successful SSA optimization Pass2AliasElimination
Alias print_str_lines::ch#0 = print_str_lines::ch#1 
Alias print_str_lines::str#0 = print_str_lines::str#6 
Alias print_line_cursor#36 = print_line_cursor#54 
Alias keyboard_event_scan::keycode#10 = keyboard_event_scan::keycode#4 
Alias keyboard_event_scan::col#2 = keyboard_event_scan::col#3 
Alias keyboard_event_scan::row_scan#1 = keyboard_event_scan::row_scan#3 
Alias keyboard_event_scan::row#10 = keyboard_event_scan::row#6 
Alias keyboard_events_size#100 = keyboard_events_size#110 keyboard_events_size#78 keyboard_events_size#39 keyboard_events_size#21 
Alias bitmap_init::x#2 = bitmap_init::x#3 
Alias bitmap_init::bitmap#1 = bitmap_init::bitmap#3 
Alias bitmap_init::y#2 = bitmap_init::y#3 
Alias bitmap_line_xdyi::x1#2 = bitmap_line_xdyi::x1#3 
Alias bitmap_line_xdyi::x#2 = bitmap_line_xdyi::x#5 
Alias bitmap_line_xdyi::yd#3 = bitmap_line_xdyi::yd#5 
Alias bitmap_line_xdyi::xd#2 = bitmap_line_xdyi::xd#6 
Alias bitmap_line_xdyd::x1#2 = bitmap_line_xdyd::x1#3 
Alias bitmap_line_xdyd::x#2 = bitmap_line_xdyd::x#5 
Alias bitmap_line_xdyd::yd#3 = bitmap_line_xdyd::yd#5 
Alias bitmap_line_xdyd::xd#2 = bitmap_line_xdyd::xd#6 
Alias bitmap_line_ydxi::y1#2 = bitmap_line_ydxi::y1#3 
Alias bitmap_line_ydxi::y#2 = bitmap_line_ydxi::y#5 
Alias bitmap_line_ydxi::xd#3 = bitmap_line_ydxi::xd#5 
Alias bitmap_line_ydxi::yd#2 = bitmap_line_ydxi::yd#6 
Alias bitmap_line_ydxd::y1#2 = bitmap_line_ydxd::y1#3 
Alias bitmap_line_ydxd::y#3 = bitmap_line_ydxd::y#6 
Alias bitmap_line_ydxd::xd#3 = bitmap_line_ydxd::xd#5 
Alias bitmap_line_ydxd::yd#2 = bitmap_line_ydxd::yd#6 
Alias keyboard_events_size#115 = keyboard_events_size#141 keyboard_events_size#143 keyboard_events_size#139 keyboard_events_size#137 keyboard_events_size#135 keyboard_events_size#133 keyboard_events_size#131 keyboard_events_size#129 keyboard_events_size#127 
Alias keyboard_modifiers#100 = keyboard_modifiers#122 keyboard_modifiers#124 keyboard_modifiers#120 keyboard_modifiers#118 keyboard_modifiers#116 keyboard_modifiers#114 keyboard_modifiers#112 keyboard_modifiers#110 keyboard_modifiers#108 
Alias gfx_init_plane_8bppchunky::x#2 = gfx_init_plane_8bppchunky::x#3 
Alias gfx_init_plane_8bppchunky::y#2 = gfx_init_plane_8bppchunky::y#4 
Alias gfx_init_plane_horisontal::ax#2 = gfx_init_plane_horisontal::ax#3 
Alias gfx_init_plane_horisontal::ay#2 = gfx_init_plane_horisontal::ay#3 
Alias gfx_init_plane_charset8::gfxa#2 = gfx_init_plane_charset8::gfxa#3 
Alias gfx_init_plane_charset8::bits#2 = gfx_init_plane_charset8::bits#3 
Alias gfx_init_plane_charset8::col#2 = gfx_init_plane_charset8::col#3 
Alias gfx_init_plane_charset8::cp#2 = gfx_init_plane_charset8::cp#3 
Alias gfx_init_plane_charset8::cr#2 = gfx_init_plane_charset8::cr#4 
Alias gfx_init_plane_charset8::chargen#4 = gfx_init_plane_charset8::chargen#7 
Alias gfx_init_plane_charset8::ch#2 = gfx_init_plane_charset8::ch#5 
Alias form_control::field#0 = form_control::field#1 form_control::field#10 form_control::field#4 
Alias keyboard_events_size#104 = keyboard_events_size#65 keyboard_events_size#48 
Alias keyboard_modifiers#45 = keyboard_modifiers#64 keyboard_modifiers#86 
Alias form_field_idx#15 = form_field_idx#54 form_field_idx#16 form_field_idx#22 
Alias form_cursor_count#15 = form_cursor_count#23 form_cursor_count#24 
Alias keyboard_events_size#15 = keyboard_events_size#50 keyboard_events_size#51 
Alias keyboard_modifiers#14 = keyboard_modifiers#48 keyboard_modifiers#49 
Successful SSA optimization Pass2AliasElimination
Alias keyboard_events_size#15 = keyboard_events_size#16 
Alias keyboard_modifiers#14 = keyboard_modifiers#15 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (word) memset::num#1 (word) memset::num#0
Identical Phi Values (void*) memset::str#2 (void*) memset::str#0
Identical Phi Values (byte) memset::c#3 (byte) memset::c#0
Identical Phi Values (byte*) memset::end#1 (byte*) memset::end#0
Identical Phi Values (void*) memset::str#4 (void*) memset::str#2
Identical Phi Values (byte) memset::c#1 (byte) memset::c#3
Identical Phi Values (byte*) print_line_cursor#36 (byte*) print_line_cursor#2
Identical Phi Values (byte*) print_char_cursor#1 (byte*) print_char_cursor#28
Identical Phi Values (byte*) print_line_cursor#1 (byte*) print_line_cursor#22
Identical Phi Values (byte*) print_char_cursor#2 (byte*) print_line_cursor#22
Identical Phi Values (byte*) print_str_at::str#4 (byte*) print_str_at::str#1
Identical Phi Values (byte*) print_str_at::at#4 (byte*) print_str_at::at#1
Identical Phi Values (byte*) print_line_cursor#38 (byte*) print_line_cursor#36
Identical Phi Values (byte*) print_char_cursor#44 (byte*) print_char_cursor#42
Identical Phi Values (byte*) print_char_cursor#25 (byte*) print_char_cursor#44
Identical Phi Values (byte) print_char::ch#1 (byte) print_char::ch#0
Identical Phi Values (byte*) print_char_cursor#27 (byte*) print_char_cursor#41
Identical Phi Values (byte) keyboard_matrix_read::rowid#1 (byte) keyboard_matrix_read::rowid#0
Identical Phi Values (byte) keyboard_event_scan::row_scan#1 (byte) keyboard_event_scan::row_scan#0
Identical Phi Values (byte) keyboard_event_scan::row#10 (byte) keyboard_event_scan::row#2
Identical Phi Values (byte*) bitmap_init::bitmap#2 (byte*) bitmap_init::bitmap#0
Identical Phi Values (byte*) bitmap_init::bitmap#1 (byte*) bitmap_init::bitmap#2
Identical Phi Values (byte) bitmap_clear::y#2 (byte) bitmap_clear::y#4
Identical Phi Values (byte) bitmap_line::x0#1 (byte) bitmap_line::x0#0
Identical Phi Values (byte) bitmap_line::x1#1 (byte) bitmap_line::x1#0
Identical Phi Values (byte) bitmap_line::y0#1 (byte) bitmap_line::y0#0
Identical Phi Values (byte) bitmap_line::y1#1 (byte) bitmap_line::y1#0
Identical Phi Values (byte) bitmap_line_xdyi::yd#3 (byte) bitmap_line_xdyi::yd#2
Identical Phi Values (byte) bitmap_line_xdyi::xd#2 (byte) bitmap_line_xdyi::xd#5
Identical Phi Values (byte) bitmap_line_xdyi::x1#2 (byte) bitmap_line_xdyi::x1#6
Identical Phi Values (byte) bitmap_line_xdyd::yd#3 (byte) bitmap_line_xdyd::yd#2
Identical Phi Values (byte) bitmap_line_xdyd::xd#2 (byte) bitmap_line_xdyd::xd#5
Identical Phi Values (byte) bitmap_line_xdyd::x1#2 (byte) bitmap_line_xdyd::x1#6
Identical Phi Values (byte) bitmap_line_ydxi::xd#3 (byte) bitmap_line_ydxi::xd#2
Identical Phi Values (byte) bitmap_line_ydxi::yd#2 (byte) bitmap_line_ydxi::yd#5
Identical Phi Values (byte) bitmap_line_ydxi::y1#2 (byte) bitmap_line_ydxi::y1#6
Identical Phi Values (byte) bitmap_line_ydxd::xd#3 (byte) bitmap_line_ydxd::xd#2
Identical Phi Values (byte) bitmap_line_ydxd::yd#2 (byte) bitmap_line_ydxd::yd#5
Identical Phi Values (byte) bitmap_line_ydxd::y1#2 (byte) bitmap_line_ydxd::y1#6
Identical Phi Values (byte*) print_screen#25 (byte*) print_screen#0
Identical Phi Values (byte*) print_line_cursor#47 (byte*) print_screen#0
Identical Phi Values (byte*) print_char_cursor#54 (byte*) print_screen#0
Identical Phi Values (signed byte) form_cursor_count#27 (signed byte) form_cursor_count#26
Identical Phi Values (byte) keyboard_events_size#57 (byte) keyboard_events_size#0
Identical Phi Values (byte) keyboard_modifiers#56 (byte) keyboard_modifiers#0
Identical Phi Values (byte) form_field_idx#35 (byte) form_field_idx#34
Identical Phi Values (byte*) print_screen#12 (byte*) print_screen#16
Identical Phi Values (byte*) print_line_cursor#26 (byte*) print_line_cursor#17
Identical Phi Values (byte*) print_char_cursor#12 (byte*) print_char_cursor#20
Identical Phi Values (signed byte) form_cursor_count#0 (signed byte) form_cursor_count#13
Identical Phi Values (byte) keyboard_events_size#25 (byte) keyboard_events_size#13
Identical Phi Values (byte) keyboard_modifiers#22 (byte) keyboard_modifiers#13
Identical Phi Values (byte) form_field_idx#0 (byte) form_field_idx#14
Identical Phi Values (byte) keyboard_events_size#26 (byte) keyboard_events_size#11
Identical Phi Values (byte) keyboard_modifiers#23 (byte) keyboard_modifiers#11
Identical Phi Values (byte) get_vic_charset::idx#1 (byte) get_vic_charset::idx#0
Identical Phi Values (byte) apply_preset::idx#1 (byte) apply_preset::idx#0
Identical Phi Values (byte*) apply_preset::preset#13 (byte*) apply_preset::preset#15
Identical Phi Values (byte) keyboard_events_size#115 (byte) keyboard_events_size#25
Identical Phi Values (byte) keyboard_modifiers#100 (byte) keyboard_modifiers#22
Identical Phi Values (byte) gfx_mode::cy#2 (byte) gfx_mode::cy#4
Identical Phi Values (byte) keyboard_events_size#101 (byte) keyboard_events_size#112
Identical Phi Values (byte) keyboard_modifiers#77 (byte) keyboard_modifiers#94
Identical Phi Values (byte) keyboard_events_size#58 (byte) keyboard_events_size#101
Identical Phi Values (byte) keyboard_modifiers#57 (byte) keyboard_modifiers#77
Identical Phi Values (byte) keyboard_events_size#59 (byte) keyboard_events_size#101
Identical Phi Values (byte) keyboard_modifiers#58 (byte) keyboard_modifiers#77
Identical Phi Values (byte) keyboard_events_size#44 (byte) keyboard_events_size#45
Identical Phi Values (byte) keyboard_modifiers#40 (byte) keyboard_modifiers#41
Identical Phi Values (byte) keyboard_events_size#28 (byte) keyboard_events_size#100
Identical Phi Values (byte) keyboard_modifiers#10 (byte) keyboard_modifiers#21
Identical Phi Values (byte) keyboard_events_size#10 (byte) keyboard_events_size#24
Identical Phi Values (byte) gfx_init_charset::c#2 (byte) gfx_init_charset::c#4
Identical Phi Values (byte) gfx_init_screen0::cy#2 (byte) gfx_init_screen0::cy#4
Identical Phi Values (byte) gfx_init_screen1::cy#2 (byte) gfx_init_screen1::cy#4
Identical Phi Values (byte) gfx_init_screen2::cy#2 (byte) gfx_init_screen2::cy#4
Identical Phi Values (byte) gfx_init_screen3::cy#2 (byte) gfx_init_screen3::cy#4
Identical Phi Values (byte) gfx_init_screen4::cy#2 (byte) gfx_init_screen4::cy#4
Identical Phi Values (byte) gfx_init_plane_8bppchunky::y#2 (byte) gfx_init_plane_8bppchunky::y#6
Identical Phi Values (byte) gfx_init_plane_horisontal::ay#2 (byte) gfx_init_plane_horisontal::ay#4
Identical Phi Values (byte) gfx_init_plane_horisontal2::ay#2 (byte) gfx_init_plane_horisontal2::ay#4
Identical Phi Values (byte) gfx_init_plane_vertical::by#2 (byte) gfx_init_plane_vertical::by#4
Identical Phi Values (byte) gfx_init_plane_charset8::cr#2 (byte) gfx_init_plane_charset8::cr#6
Identical Phi Values (byte*) gfx_init_plane_charset8::chargen#4 (byte*) gfx_init_plane_charset8::chargen#1
Identical Phi Values (byte) gfx_init_plane_charset8::ch#2 (byte) gfx_init_plane_charset8::ch#7
Identical Phi Values (byte) gfx_init_plane_fill::fill#3 (byte) gfx_init_plane_fill::fill#4
Identical Phi Values (byte) gfx_init_plane_fill::by#2 (byte) gfx_init_plane_fill::by#4
Identical Phi Values (byte*) print_screen#20 (byte*) print_screen#13
Identical Phi Values (byte*) print_line_cursor#41 (byte*) print_line_cursor#10
Identical Phi Values (byte*) print_char_cursor#47 (byte*) print_char_cursor#13
Identical Phi Values (signed byte) form_cursor_count#44 (signed byte) form_cursor_count#1
Identical Phi Values (byte) keyboard_events_size#102 (byte) keyboard_events_size#27
Identical Phi Values (byte) keyboard_modifiers#101 (byte) keyboard_modifiers#24
Identical Phi Values (byte) form_field_idx#49 (byte) form_field_idx#1
Identical Phi Values (byte*) print_screen#14 (byte*) print_screen#1
Identical Phi Values (byte*) print_line_cursor#11 (byte*) print_screen#1
Identical Phi Values (byte*) print_char_cursor#14 (byte*) print_screen#1
Identical Phi Values (byte*) print_line_cursor#12 (byte*) print_line_cursor#24
Identical Phi Values (byte*) print_char_cursor#15 (byte*) print_line_cursor#24
Identical Phi Values (byte*) print_char_cursor#16 (byte*) print_char_cursor#24
Identical Phi Values (byte*) print_line_cursor#13 (byte*) print_line_cursor#2
Identical Phi Values (byte*) print_screen#15 (byte*) print_screen#1
Identical Phi Values (byte*) print_line_cursor#14 (byte*) print_screen#1
Identical Phi Values (byte*) print_char_cursor#17 (byte*) print_screen#1
Identical Phi Values (byte*) print_line_cursor#15 (byte*) print_line_cursor#24
Identical Phi Values (byte*) print_char_cursor#18 (byte*) print_line_cursor#24
Identical Phi Values (byte*) print_char_cursor#19 (byte*) print_char_cursor#24
Identical Phi Values (byte*) print_line_cursor#16 (byte*) print_line_cursor#2
Identical Phi Values (byte*) print_screen#28 (byte*) print_screen#15
Identical Phi Values (byte*) print_line_cursor#49 (byte*) print_line_cursor#16
Identical Phi Values (byte*) print_char_cursor#56 (byte*) print_char_cursor#19
Identical Phi Values (signed byte) form_cursor_count#29 (signed byte) form_cursor_count#44
Identical Phi Values (byte) keyboard_events_size#61 (byte) keyboard_events_size#102
Identical Phi Values (byte) keyboard_modifiers#60 (byte) keyboard_modifiers#101
Identical Phi Values (byte) form_field_idx#37 (byte) form_field_idx#49
Identical Phi Values (signed byte) form_cursor_count#20 (signed byte) form_cursor_count#21
Identical Phi Values (byte) keyboard_events_size#46 (byte) keyboard_events_size#47
Identical Phi Values (byte) keyboard_modifiers#43 (byte) keyboard_modifiers#44
Identical Phi Values (byte) form_field_idx#27 (byte) form_field_idx#28
Identical Phi Values (byte) form_mode::preset_current#2 (byte) form_mode::preset_current#6
Identical Phi Values (byte*) print_screen#22 (byte*) print_screen#23
Identical Phi Values (byte*) print_line_cursor#42 (byte*) print_line_cursor#43
Identical Phi Values (byte*) print_char_cursor#48 (byte*) print_char_cursor#49
Identical Phi Values (signed byte) form_cursor_count#12 (signed byte) form_cursor_count#16
Identical Phi Values (byte) keyboard_events_size#103 (byte) keyboard_events_size#15
Identical Phi Values (byte) keyboard_modifiers#12 (byte) keyboard_modifiers#14
Identical Phi Values (byte) form_field_idx#13 (byte) form_field_idx#18
Identical Phi Values (byte*) form_set_screen::line#0 (byte*) form_set_screen::screen#0
Identical Phi Values (byte) form_field_idx#15 (byte) form_field_idx#27
Identical Phi Values (signed byte) form_cursor_count#14 (signed byte) form_cursor_count#20
Identical Phi Values (byte) keyboard_events_size#104 (byte) keyboard_events_size#46
Identical Phi Values (byte) keyboard_modifiers#45 (byte) keyboard_modifiers#43
Identical Phi Values (byte) keyboard_events_size#14 (byte) keyboard_events_size#100
Identical Phi Values (byte) keyboard_modifiers#14 (byte) keyboard_modifiers#21
Identical Phi Values (byte) keyboard_events_size#15 (byte) keyboard_events_size#24
Identical Phi Values (byte*) print_screen#17 (byte*) print_screen#13
Identical Phi Values (byte*) print_line_cursor#18 (byte*) print_line_cursor#10
Identical Phi Values (byte*) print_char_cursor#21 (byte*) print_char_cursor#13
Identical Phi Values (signed byte) form_cursor_count#17 (signed byte) form_cursor_count#1
Identical Phi Values (byte) keyboard_events_size#17 (byte) keyboard_events_size#27
Identical Phi Values (byte) keyboard_modifiers#16 (byte) keyboard_modifiers#24
Identical Phi Values (byte) form_field_idx#10 (byte) form_field_idx#1
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (void*) memset::return#0 (void*) memset::str#0
Identical Phi Values (byte*) print_char_cursor#51 (byte*) print_line_cursor#24
Identical Phi Values (byte*) print_line_cursor#45 (byte*) print_line_cursor#24
Identical Phi Values (byte*) print_line_cursor#24 (byte*) print_screen#1
Identical Phi Values (byte) keyboard_event_scan::row#4 (byte) keyboard_event_scan::row#2
Identical Phi Values (byte) keyboard_events_size#22 (byte) keyboard_events_size#100
Identical Phi Values (byte) keyboard_events_size#112 (byte) keyboard_events_size#13
Identical Phi Values (byte) keyboard_modifiers#94 (byte) keyboard_modifiers#13
Identical Phi Values (byte) gfx_init_plane_charset8::ch#7 (byte) gfx_init_plane_charset8::ch#8
Identical Phi Values (byte) gfx_init_plane_fill::fill#4 (byte) gfx_init_plane_fill::fill#6
Identical Phi Values (byte*) print_screen#23 (byte*) print_screen#1
Identical Phi Values (byte*) print_line_cursor#43 (byte*) print_line_cursor#2
Identical Phi Values (byte*) print_char_cursor#49 (byte*) print_char_cursor#24
Identical Phi Values (byte*) print_screen#16 (byte*) print_screen#23
Identical Phi Values (byte*) print_line_cursor#17 (byte*) print_line_cursor#43
Identical Phi Values (byte*) print_char_cursor#20 (byte*) print_char_cursor#49
Successful SSA optimization Pass2IdenticalPhiElimination
Identified duplicate assignment right side [270] (byte~) bitmap_init::$10 ← (byte) bitmap_init::y#2 & (byte) 7
Identified duplicate assignment right side [813] (word~) gfx_mode::$24 ← < (dword) gfx_mode::plane_a#0
Identified duplicate assignment right side [839] (word~) gfx_mode::$38 ← < (dword) gfx_mode::plane_b#0
Successful SSA optimization Pass2DuplicateRValueIdentification
Simple Condition (bool~) memset::$1 [6] if((word) memset::num#0<=(byte) 0) goto memset::@1
Simple Condition (bool~) memset::$3 [13] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@4
Simple Condition (bool~) print_str_lines::$3 [21] if((byte) 0!=*((byte*) print_str_lines::str#3)) goto print_str_lines::@2
Simple Condition (bool~) print_str_lines::$0 [26] if((byte) 0==(byte) print_str_lines::ch#0) goto print_str_lines::@3
Simple Condition (bool~) print_str_lines::$4 [29] if((byte) 0!=(byte) print_str_lines::ch#0) goto print_str_lines::@2
Simple Condition (bool~) print_str_at::$0 [39] if((byte) 0!=*((byte*) print_str_at::str#2)) goto print_str_at::@2
Simple Condition (bool~) print_ln::$1 [48] if((byte*) print_line_cursor#22<(byte*) print_char_cursor#42) goto print_ln::@1
Simple Condition (bool~) keyboard_event_scan::$13 [82] if((byte) keyboard_event_scan::row_scan#0!=*((const byte*) keyboard_scan_values + (byte) keyboard_event_scan::row#2)) goto keyboard_event_scan::@8
Simple Condition (bool~) keyboard_event_scan::$25 [88] if((byte) keyboard_event_scan::row#1!=rangelast(0,7)) goto keyboard_event_scan::@7
Simple Condition (bool~) keyboard_event_scan::$18 [93] if((byte~) keyboard_event_scan::$16==(byte) 0) goto keyboard_event_scan::@11
Simple Condition (bool~) keyboard_event_scan::$24 [98] if((byte) keyboard_event_scan::col#1!=rangelast(0,7)) goto keyboard_event_scan::@10
Simple Condition (bool~) keyboard_event_scan::$20 [100] if((byte) keyboard_events_size#18==(byte) 8) goto keyboard_event_scan::@11
Simple Condition (bool~) keyboard_event_scan::$22 [103] if((byte) keyboard_event_scan::event_type#0==(byte) 0) goto keyboard_event_scan::@12
Simple Condition (bool~) keyboard_event_scan::$2 [116] if((byte~) keyboard_event_scan::$0==(byte) 0) goto keyboard_event_scan::@1
Simple Condition (bool~) keyboard_event_scan::$5 [123] if((byte~) keyboard_event_scan::$3==(byte) 0) goto keyboard_event_scan::@2
Simple Condition (bool~) keyboard_event_scan::$8 [131] if((byte~) keyboard_event_scan::$6==(byte) 0) goto keyboard_event_scan::@3
Simple Condition (bool~) keyboard_event_scan::$11 [139] if((byte~) keyboard_event_scan::$9==(byte) 0) goto keyboard_event_scan::@return
Simple Condition (bool~) keyboard_event_get::$0 [152] if((byte) keyboard_events_size#100==(byte) 0) goto keyboard_event_get::@1
Simple Condition (bool~) bitmap_init::$4 [169] if((byte) bitmap_init::bits#1!=(byte) 0) goto bitmap_init::@2
Simple Condition (bool~) bitmap_init::$5 [173] if((byte) bitmap_init::x#1!=rangelast(0,$ff)) goto bitmap_init::@1
Simple Condition (bool~) bitmap_init::$12 [186] if((byte~) bitmap_init::$10!=(byte) 7) goto bitmap_init::@6
Simple Condition (bool~) bitmap_init::$14 [190] if((byte) bitmap_init::y#1!=rangelast(0,$ff)) goto bitmap_init::@5
Simple Condition (bool~) bitmap_clear::$0 [203] if((byte) bitmap_clear::x#1!=rangelast(0,$c7)) goto bitmap_clear::@2
Simple Condition (bool~) bitmap_clear::$1 [206] if((byte) bitmap_clear::y#1!=rangelast(0,$27)) goto bitmap_clear::@1
Simple Condition (bool~) bitmap_line::$0 [220] if((byte) bitmap_line::x0#0<(byte) bitmap_line::x1#0) goto bitmap_line::@1
Simple Condition (bool~) bitmap_line::$12 [223] if((byte) bitmap_line::y0#0<(byte) bitmap_line::y1#0) goto bitmap_line::@11
Simple Condition (bool~) bitmap_line::$2 [226] if((byte) bitmap_line::y0#0<(byte) bitmap_line::y1#0) goto bitmap_line::@7
Simple Condition (bool~) bitmap_line::$8 [229] if((byte) bitmap_line::yd#1<(byte) bitmap_line::xd#2) goto bitmap_line::@9
Simple Condition (bool~) bitmap_line::$4 [232] if((byte) bitmap_line::yd#2<(byte) bitmap_line::xd#2) goto bitmap_line::@8
Simple Condition (bool~) bitmap_line::$18 [259] if((byte) bitmap_line::yd#11<(byte) bitmap_line::xd#1) goto bitmap_line::@13
Simple Condition (bool~) bitmap_line::$14 [262] if((byte) bitmap_line::yd#10<(byte) bitmap_line::xd#1) goto bitmap_line::@12
Simple Condition (bool~) bitmap_line_xdyi::$4 [297] if((byte) bitmap_line_xdyi::xd#5>=(byte) bitmap_line_xdyi::e#1) goto bitmap_line_xdyi::@2
Simple Condition (bool~) bitmap_line_xdyi::$7 [301] if((byte) bitmap_line_xdyi::x#2!=(byte~) bitmap_line_xdyi::$6) goto bitmap_line_xdyi::@1
Simple Condition (bool~) bitmap_line_xdyd::$4 [314] if((byte) bitmap_line_xdyd::xd#5>=(byte) bitmap_line_xdyd::e#1) goto bitmap_line_xdyd::@2
Simple Condition (bool~) bitmap_line_xdyd::$7 [318] if((byte) bitmap_line_xdyd::x#2!=(byte~) bitmap_line_xdyd::$6) goto bitmap_line_xdyd::@1
Simple Condition (bool~) bitmap_line_ydxi::$4 [331] if((byte) bitmap_line_ydxi::yd#5>=(byte) bitmap_line_ydxi::e#1) goto bitmap_line_ydxi::@2
Simple Condition (bool~) bitmap_line_ydxi::$7 [335] if((byte) bitmap_line_ydxi::y#2!=(byte~) bitmap_line_ydxi::$6) goto bitmap_line_ydxi::@1
Simple Condition (bool~) bitmap_line_ydxd::$4 [348] if((byte) bitmap_line_ydxd::yd#5>=(byte) bitmap_line_ydxd::e#1) goto bitmap_line_ydxd::@2
Simple Condition (bool~) bitmap_line_ydxd::$7 [352] if((byte) bitmap_line_ydxd::y#3!=(byte~) bitmap_line_ydxd::$6) goto bitmap_line_ydxd::@1
Simple Condition (bool~) get_plane::$0 [372] if((byte) get_plane::idx#10==(byte) 0) goto get_plane::@1
Simple Condition (bool~) get_plane::$1 [375] if((byte) get_plane::idx#10==(byte) 1) goto get_plane::@2
Simple Condition (bool~) get_plane::$2 [378] if((byte) get_plane::idx#10==(byte) 2) goto get_plane::@3
Simple Condition (bool~) get_plane::$3 [381] if((byte) get_plane::idx#10==(byte) 3) goto get_plane::@4
Simple Condition (bool~) get_plane::$4 [384] if((byte) get_plane::idx#10==(byte) 4) goto get_plane::@5
Simple Condition (bool~) get_plane::$5 [387] if((byte) get_plane::idx#10==(byte) 5) goto get_plane::@6
Simple Condition (bool~) get_plane::$6 [390] if((byte) get_plane::idx#10==(byte) 6) goto get_plane::@7
Simple Condition (bool~) get_plane::$7 [393] if((byte) get_plane::idx#10==(byte) 7) goto get_plane::@8
Simple Condition (bool~) get_plane::$8 [396] if((byte) get_plane::idx#10==(byte) 8) goto get_plane::@9
Simple Condition (bool~) get_plane::$9 [399] if((byte) get_plane::idx#10==(byte) 9) goto get_plane::@10
Simple Condition (bool~) get_plane::$10 [402] if((byte) get_plane::idx#10==(byte) $a) goto get_plane::@11
Simple Condition (bool~) get_plane::$11 [405] if((byte) get_plane::idx#10==(byte) $b) goto get_plane::@12
Simple Condition (bool~) get_plane::$12 [408] if((byte) get_plane::idx#10==(byte) $c) goto get_plane::@13
Simple Condition (bool~) get_plane::$14 [411] if((byte) get_plane::idx#10!=(byte) $d) goto get_plane::@14
Simple Condition (bool~) get_vic_screen::$0 [418] if((byte) get_vic_screen::idx#2==(byte) 0) goto get_vic_screen::@1
Simple Condition (bool~) get_vic_screen::$1 [421] if((byte) get_vic_screen::idx#2==(byte) 1) goto get_vic_screen::@2
Simple Condition (bool~) get_vic_screen::$2 [424] if((byte) get_vic_screen::idx#2==(byte) 2) goto get_vic_screen::@3
Simple Condition (bool~) get_vic_screen::$3 [427] if((byte) get_vic_screen::idx#2==(byte) 3) goto get_vic_screen::@4
Simple Condition (bool~) get_vic_screen::$5 [430] if((byte) get_vic_screen::idx#2!=(byte) 4) goto get_vic_screen::@5
Simple Condition (bool~) get_vic_charset::$0 [437] if((byte) get_vic_charset::idx#0==(byte) 0) goto get_vic_charset::@1
Simple Condition (bool~) get_vic_charset::$2 [440] if((byte) get_vic_charset::idx#0!=(byte) 1) goto get_vic_charset::@2
Simple Condition (bool~) apply_preset::$0 [448] if((byte) apply_preset::idx#0==(byte) 0) goto apply_preset::@1
Simple Condition (bool~) apply_preset::$1 [451] if((byte) apply_preset::idx#0==(byte) 1) goto apply_preset::@2
Simple Condition (bool~) apply_preset::$2 [454] if((byte) apply_preset::idx#0==(byte) 2) goto apply_preset::@3
Simple Condition (bool~) apply_preset::$3 [457] if((byte) apply_preset::idx#0==(byte) 3) goto apply_preset::@4
Simple Condition (bool~) apply_preset::$4 [460] if((byte) apply_preset::idx#0==(byte) 4) goto apply_preset::@5
Simple Condition (bool~) apply_preset::$5 [463] if((byte) apply_preset::idx#0==(byte) 5) goto apply_preset::@6
Simple Condition (bool~) apply_preset::$6 [466] if((byte) apply_preset::idx#0==(byte) 6) goto apply_preset::@7
Simple Condition (bool~) apply_preset::$7 [469] if((byte) apply_preset::idx#0==(byte) 7) goto apply_preset::@8
Simple Condition (bool~) apply_preset::$8 [472] if((byte) apply_preset::idx#0==(byte) 8) goto apply_preset::@9
Simple Condition (bool~) apply_preset::$9 [475] if((byte) apply_preset::idx#0==(byte) 9) goto apply_preset::@10
Simple Condition (bool~) apply_preset::$10 [478] if((byte) apply_preset::idx#0==(byte) $a) goto apply_preset::@11
Simple Condition (bool~) apply_preset::$11 [485] if((byte) apply_preset::i#2!=(const byte) form_fields_cnt) goto apply_preset::@25
Simple Condition (bool~) render_preset_name::$0 [492] if((byte) render_preset_name::idx#10==(byte) 0) goto render_preset_name::@1
Simple Condition (bool~) render_preset_name::$1 [495] if((byte) render_preset_name::idx#10==(byte) 1) goto render_preset_name::@2
Simple Condition (bool~) render_preset_name::$2 [498] if((byte) render_preset_name::idx#10==(byte) 2) goto render_preset_name::@3
Simple Condition (bool~) render_preset_name::$3 [501] if((byte) render_preset_name::idx#10==(byte) 3) goto render_preset_name::@4
Simple Condition (bool~) render_preset_name::$4 [504] if((byte) render_preset_name::idx#10==(byte) 4) goto render_preset_name::@5
Simple Condition (bool~) render_preset_name::$5 [507] if((byte) render_preset_name::idx#10==(byte) 5) goto render_preset_name::@6
Simple Condition (bool~) render_preset_name::$6 [510] if((byte) render_preset_name::idx#10==(byte) 6) goto render_preset_name::@7
Simple Condition (bool~) render_preset_name::$7 [513] if((byte) render_preset_name::idx#10==(byte) 7) goto render_preset_name::@8
Simple Condition (bool~) render_preset_name::$8 [516] if((byte) render_preset_name::idx#10==(byte) 8) goto render_preset_name::@9
Simple Condition (bool~) render_preset_name::$9 [519] if((byte) render_preset_name::idx#10==(byte) 9) goto render_preset_name::@10
Simple Condition (bool~) render_preset_name::$10 [522] if((byte) render_preset_name::idx#10==(byte) $a) goto render_preset_name::@11
Simple Condition (bool~) gfx_mode::$1 [533] if(*((const nomodify byte*) form_ctrl_line)==(byte) 0) goto gfx_mode::@1
Simple Condition (bool~) gfx_mode::$3 [536] if(*((const nomodify byte*) form_ctrl_borof)==(byte) 0) goto gfx_mode::@2
Simple Condition (bool~) gfx_mode::$5 [540] if(*((const nomodify byte*) form_ctrl_hicol)==(byte) 0) goto gfx_mode::@3
Simple Condition (bool~) gfx_mode::$7 [544] if(*((const nomodify byte*) form_ctrl_overs)==(byte) 0) goto gfx_mode::@4
Simple Condition (bool~) gfx_mode::$9 [548] if(*((const nomodify byte*) form_ctrl_colof)==(byte) 0) goto gfx_mode::@5
Simple Condition (bool~) gfx_mode::$11 [552] if(*((const nomodify byte*) form_ctrl_chunk)==(byte) 0) goto gfx_mode::@6
Simple Condition (bool~) gfx_mode::$13 [558] if(*((const nomodify byte*) form_ctrl_ecm)==(byte) 0) goto gfx_mode::@7
Simple Condition (bool~) gfx_mode::$15 [562] if(*((const nomodify byte*) form_ctrl_bmm)==(byte) 0) goto gfx_mode::@8
Simple Condition (bool~) gfx_mode::$17 [568] if(*((const nomodify byte*) form_ctrl_mcm)==(byte) 0) goto gfx_mode::@9
Simple Condition (bool~) gfx_mode::$73 [653] if((byte) gfx_mode::cx#1!=rangelast(0,$27)) goto gfx_mode::@21
Simple Condition (bool~) gfx_mode::$74 [656] if((byte) gfx_mode::cy#1!=rangelast(0,$18)) goto gfx_mode::@20
Simple Condition (bool~) gfx_mode::$63 [671] if(*((const nomodify byte*) form_dtv_palet)==(byte) 0) goto gfx_mode::@10
Simple Condition (bool~) gfx_mode::$75 [678] if((byte) gfx_mode::j#1!=rangelast(0,$f)) goto gfx_mode::@25
Simple Condition (bool~) gfx_mode::$76 [683] if((byte) gfx_mode::i#1!=rangelast(0,$f)) goto gfx_mode::@26
Simple Condition (bool~) gfx_mode::$77 [688] if(*((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)!=(byte) $ff) goto gfx_mode::@28
Simple Condition (bool~) gfx_mode::$81 [696] if((byte) gfx_mode::keyboard_event#0!=(const nomodify byte) KEY_SPACE) goto gfx_mode::@27
Simple Condition (bool~) gfx_init_charset::$0 [727] if((byte) gfx_init_charset::l#1!=rangelast(0,7)) goto gfx_init_charset::@2
Simple Condition (bool~) gfx_init_charset::$1 [730] if((byte) gfx_init_charset::c#1!=rangelast(0,$ff)) goto gfx_init_charset::@1
Simple Condition (bool~) gfx_init_screen0::$4 [746] if((byte) gfx_init_screen0::cx#1!=rangelast(0,$27)) goto gfx_init_screen0::@2
Simple Condition (bool~) gfx_init_screen0::$5 [749] if((byte) gfx_init_screen0::cy#1!=rangelast(0,$18)) goto gfx_init_screen0::@1
Simple Condition (bool~) gfx_init_screen1::$2 [762] if((byte) gfx_init_screen1::cx#1!=rangelast(0,$27)) goto gfx_init_screen1::@2
Simple Condition (bool~) gfx_init_screen1::$3 [765] if((byte) gfx_init_screen1::cy#1!=rangelast(0,$18)) goto gfx_init_screen1::@1
Simple Condition (bool~) gfx_init_screen2::$5 [781] if((byte) gfx_init_screen2::cx#1!=rangelast(0,$27)) goto gfx_init_screen2::@2
Simple Condition (bool~) gfx_init_screen2::$6 [784] if((byte) gfx_init_screen2::cy#1!=rangelast(0,$18)) goto gfx_init_screen2::@1
Simple Condition (bool~) gfx_init_screen3::$4 [799] if((byte) gfx_init_screen3::cx#1!=rangelast(0,$27)) goto gfx_init_screen3::@2
Simple Condition (bool~) gfx_init_screen3::$5 [802] if((byte) gfx_init_screen3::cy#1!=rangelast(0,$18)) goto gfx_init_screen3::@1
Simple Condition (bool~) gfx_init_screen4::$0 [813] if((byte) gfx_init_screen4::cx#1!=rangelast(0,$27)) goto gfx_init_screen4::@2
Simple Condition (bool~) gfx_init_screen4::$1 [816] if((byte) gfx_init_screen4::cy#1!=rangelast(0,$18)) goto gfx_init_screen4::@1
Simple Condition (bool~) gfx_init_vic_bitmap::$2 [824] if((byte) gfx_init_vic_bitmap::l#2<(const byte) gfx_init_vic_bitmap::lines_cnt) goto gfx_init_vic_bitmap::@2
Simple Condition (bool~) gfx_init_plane_8bppchunky::$3 [844] if((byte*) gfx_init_plane_8bppchunky::gfxb#3!=(word) $8000) goto gfx_init_plane_8bppchunky::@3
Simple Condition (bool~) gfx_init_plane_8bppchunky::$6 [852] if((word) gfx_init_plane_8bppchunky::x#1!=rangelast(0,$13f)) goto gfx_init_plane_8bppchunky::@2
Simple Condition (bool~) gfx_init_plane_8bppchunky::$7 [859] if((byte) gfx_init_plane_8bppchunky::y#1!=rangelast(0,$c7)) goto gfx_init_plane_8bppchunky::@1
Simple Condition (bool~) gfx_init_plane_horisontal::$3 [874] if((byte~) gfx_init_plane_horisontal::$2==(byte) 0) goto gfx_init_plane_horisontal::@3
Simple Condition (bool~) gfx_init_plane_horisontal::$4 [882] if((byte) gfx_init_plane_horisontal::ax#1!=rangelast(0,$27)) goto gfx_init_plane_horisontal::@2
Simple Condition (bool~) gfx_init_plane_horisontal::$5 [885] if((byte) gfx_init_plane_horisontal::ay#1!=rangelast(0,$c7)) goto gfx_init_plane_horisontal::@1
Simple Condition (bool~) gfx_init_plane_horisontal2::$4 [904] if((byte) gfx_init_plane_horisontal2::ax#1!=rangelast(0,$27)) goto gfx_init_plane_horisontal2::@2
Simple Condition (bool~) gfx_init_plane_horisontal2::$5 [907] if((byte) gfx_init_plane_horisontal2::ay#1!=rangelast(0,$c7)) goto gfx_init_plane_horisontal2::@1
Simple Condition (bool~) gfx_init_plane_vertical::$2 [924] if((byte) gfx_init_plane_vertical::bx#1!=rangelast(0,$27)) goto gfx_init_plane_vertical::@2
Simple Condition (bool~) gfx_init_plane_vertical::$3 [927] if((byte) gfx_init_plane_vertical::by#1!=rangelast(0,$c7)) goto gfx_init_plane_vertical::@1
Simple Condition (bool~) gfx_init_plane_charset8::$4 [950] if((byte~) gfx_init_plane_charset8::$2==(byte) 0) goto gfx_init_plane_charset8::@4
Simple Condition (bool~) gfx_init_plane_charset8::$6 [958] if((byte) gfx_init_plane_charset8::cp#1!=rangelast(0,7)) goto gfx_init_plane_charset8::@3
Simple Condition (bool~) gfx_init_plane_charset8::$7 [961] if((byte) gfx_init_plane_charset8::cr#1!=rangelast(0,7)) goto gfx_init_plane_charset8::@2
Simple Condition (bool~) gfx_init_plane_charset8::$8 [964] if((byte) gfx_init_plane_charset8::ch#1!=rangelast(0,$ff)) goto gfx_init_plane_charset8::@1
Simple Condition (bool~) gfx_init_plane_fill::$8 [1000] if((byte) gfx_init_plane_fill::bx#1!=rangelast(0,$27)) goto gfx_init_plane_fill::@2
Simple Condition (bool~) gfx_init_plane_fill::$9 [1003] if((byte) gfx_init_plane_fill::by#1!=rangelast(0,$c7)) goto gfx_init_plane_fill::@1
Simple Condition (bool~) form_mode::$9 [1046] if((byte) form_mode::i#1!=rangelast(0,$f)) goto form_mode::@1
Simple Condition (bool~) form_mode::$10 [1054] if(*((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)!=(byte) $ff) goto form_mode::@4
Simple Condition (bool~) form_mode::$13 [1060] if((byte~) form_mode::$11==(byte) 0) goto form_mode::@6
Simple Condition (bool~) form_mode::$15 [1062] if((byte) form_mode::preset_current#6==*((const nomodify byte*) form_preset)) goto form_mode::@3
Simple Condition (bool~) form_set_screen::$3 [1083] if((byte) form_set_screen::y#1!=rangelast(0,$18)) goto form_set_screen::@1
Simple Condition (bool~) form_render_values::$0 [1095] if((byte) form_render_values::idx#2<(const byte) form_fields_cnt) goto form_render_values::@2
Simple Condition (bool~) form_control::$2 [1110] if((signed byte) form_cursor_count#5>=(signed byte) 0) goto form_control::@1
Simple Condition (bool~) form_control::$3 [1113] if((signed byte) form_cursor_count#15<(const nomodify signed byte) FORM_CURSOR_BLINK/(signed byte) 2) goto form_control::@2
Simple Condition (bool~) form_control::$7 [1126] if((byte) form_control::key_event#0!=(const nomodify byte) KEY_CRSR_DOWN) goto form_control::@4
Simple Condition (bool~) form_control::$9 [1128] if((byte) form_control::key_event#0!=(const nomodify byte) KEY_CRSR_RIGHT) goto form_control::@5
Simple Condition (bool~) form_control::$16 [1133] if((byte~) form_control::$15==(byte) 0) goto form_control::@16
Simple Condition (bool~) form_control::$21 [1136] if((byte) form_field_idx#5!=(const byte) form_fields_cnt) goto form_control::@17
Simple Condition (bool~) form_control::$18 [1139] if((byte) form_field_idx#6!=(byte) $ff) goto form_control::@17
Simple Condition (bool~) form_control::$11 [1148] if((byte) form_control::key_event#0!=(const nomodify byte) KEY_SPACE) goto form_control::@6
Simple Condition (bool~) form_control::$23 [1151] if((byte~) form_control::$22==(byte) 0) goto form_control::@19
Simple Condition (bool~) form_control::$27 [1154] if(*((const byte*) form_fields_val + (byte) form_field_idx#28)<=*((const byte*) form_fields_max + (byte) form_field_idx#28)) goto form_control::@20
Simple Condition (bool~) form_control::$25 [1157] if(*((const byte*) form_fields_val + (byte) form_field_idx#28)!=(byte) $ff) goto form_control::@20
Successful SSA optimization Pass2ConditionalJumpSimplification
Negating conditional jump and destination [696] if((byte) gfx_mode::keyboard_event#0==(const nomodify byte) KEY_SPACE) goto gfx_mode::@return
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [1140] (byte) form_field_idx#7 ← (const byte) form_fields_cnt - (byte) 1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) print_screen#0 = (byte*) 1024
Constant (const byte) memset::c#0 = ' '
Constant (const word) memset::num#0 = $3e8
Constant (const byte) keyboard_events_size#0 = 0
Constant (const byte) keyboard_modifiers#0 = 0
Constant (const byte) keyboard_event_scan::keycode#0 = 0
Constant (const byte) keyboard_event_scan::row#0 = 0
Constant (const byte) keyboard_event_scan::col#0 = 0
Constant (const byte) keyboard_modifiers#1 = 0
Constant (const byte) keyboard_event_pressed::keycode#0 = KEY_LSHIFT
Constant (const byte) keyboard_event_pressed::keycode#1 = KEY_RSHIFT
Constant (const byte) keyboard_event_pressed::keycode#2 = KEY_CTRL
Constant (const byte) keyboard_event_pressed::keycode#3 = KEY_COMMODORE
Constant (const byte) keyboard_event_get::return#0 = $ff
Constant (const byte) bitmap_init::bits#0 = $80
Constant (const byte) bitmap_init::x#0 = 0
Constant (const byte) bitmap_init::bits#2 = $80
Constant (const byte*) bitmap_init::yoffs#0 = (byte*) 0
Constant (const byte) bitmap_init::y#0 = 0
Constant (const byte) bitmap_clear::y#0 = 0
Constant (const byte) bitmap_clear::x#0 = 0
Constant (const byte) bitmap_line::xd#0 = 0
Constant (const byte) bitmap_line::yd#0 = 0
Constant (const dword) get_plane::return#0 = (dword)VIC_SCREEN0
Constant (const dword) get_plane::return#1 = (dword)VIC_SCREEN1
Constant (const dword) get_plane::return#2 = (dword)VIC_SCREEN2
Constant (const dword) get_plane::return#3 = (dword)VIC_SCREEN3
Constant (const dword) get_plane::return#4 = (dword)VIC_BITMAP
Constant (const dword) get_plane::return#5 = (dword)VIC_CHARSET_ROM
Constant (const dword) get_plane::return#6 = PLANE_8BPP_CHUNKY
Constant (const dword) get_plane::return#7 = PLANE_HORISONTAL
Constant (const dword) get_plane::return#8 = PLANE_VERTICAL
Constant (const dword) get_plane::return#9 = PLANE_HORISONTAL2
Constant (const dword) get_plane::return#10 = PLANE_VERTICAL2
Constant (const dword) get_plane::return#11 = PLANE_CHARSET8
Constant (const dword) get_plane::return#12 = PLANE_BLANK
Constant (const dword) get_plane::return#13 = PLANE_FULL
Constant (const dword) get_plane::return#15 = (dword)VIC_SCREEN0
Constant (const byte*) get_vic_screen::return#0 = VIC_SCREEN0
Constant (const byte*) get_vic_screen::return#1 = VIC_SCREEN1
Constant (const byte*) get_vic_screen::return#2 = VIC_SCREEN2
Constant (const byte*) get_vic_screen::return#3 = VIC_SCREEN3
Constant (const byte*) get_vic_screen::return#4 = VIC_SCREEN4
Constant (const byte*) get_vic_screen::return#6 = VIC_SCREEN0
Constant (const byte*) get_vic_charset::return#0 = VIC_CHARSET_ROM
Constant (const byte*) get_vic_charset::return#1 = VIC_BITMAP
Constant (const byte*) get_vic_charset::return#3 = VIC_CHARSET_ROM
Constant (const byte*) apply_preset::preset#0 = (byte*) 0
Constant (const byte*) apply_preset::preset#1 = preset_stdchar
Constant (const byte*) apply_preset::preset#2 = preset_ecmchar
Constant (const byte*) apply_preset::preset#3 = preset_stdbm
Constant (const byte*) apply_preset::preset#4 = preset_mcbm
Constant (const byte*) apply_preset::preset#5 = preset_hi_stdchar
Constant (const byte*) apply_preset::preset#6 = preset_hi_ecmchar
Constant (const byte*) apply_preset::preset#7 = preset_twoplane
Constant (const byte*) apply_preset::preset#8 = preset_chunky
Constant (const byte*) apply_preset::preset#9 = preset_sixsfred
Constant (const byte*) apply_preset::preset#10 = preset_sixsfred2
Constant (const byte*) apply_preset::preset#11 = preset_8bpppixelcell
Constant (const byte*) apply_preset::preset#12 = preset_stdchar
Constant (const byte) apply_preset::i#0 = 0
Constant (const byte*) render_preset_name::name#0 = (byte*) 0
Constant (const byte*) render_preset_name::name#1 = render_preset_name::$12
Constant (const byte*) render_preset_name::name#2 = render_preset_name::$13
Constant (const byte*) render_preset_name::name#3 = render_preset_name::$14
Constant (const byte*) render_preset_name::name#4 = render_preset_name::$15
Constant (const byte*) render_preset_name::name#5 = render_preset_name::$16
Constant (const byte*) render_preset_name::name#6 = render_preset_name::$17
Constant (const byte*) render_preset_name::name#7 = render_preset_name::$18
Constant (const byte*) render_preset_name::name#8 = render_preset_name::$19
Constant (const byte*) render_preset_name::name#9 = render_preset_name::$20
Constant (const byte*) render_preset_name::name#10 = render_preset_name::$21
Constant (const byte*) render_preset_name::name#11 = render_preset_name::$22
Constant (const byte*) render_preset_name::name#12 = render_preset_name::$23
Constant (const byte*) print_str_at::at#1 = FORM_SCREEN+(byte)$28*2+$a
Constant (const byte) gfx_mode::dtv_control#0 = 0
Constant (const byte) gfx_mode::vic_control#0 = (byte)VIC_DEN|VIC_RSEL|3
Constant (const byte) gfx_mode::vic_control2#0 = VIC_CSEL
Constant (const byte*) gfx_mode::col#0 = COLS
Constant (const byte) gfx_mode::cy#0 = 0
Constant (const byte) gfx_mode::cx#0 = 0
Constant (const byte) gfx_mode::i#0 = 0
Constant (const byte) gfx_mode::j#0 = 0
Constant (const byte*) gfx_init_charset::chargen#0 = CHARGEN
Constant (const byte*) gfx_init_charset::charset#0 = VIC_CHARSET_ROM
Constant (const byte) gfx_init_charset::c#0 = 0
Constant (const byte) gfx_init_charset::l#0 = 0
Constant (const byte*) gfx_init_screen0::ch#0 = VIC_SCREEN0
Constant (const byte) gfx_init_screen0::cy#0 = 0
Constant (const byte) gfx_init_screen0::cx#0 = 0
Constant (const byte*) gfx_init_screen1::ch#0 = VIC_SCREEN1
Constant (const byte) gfx_init_screen1::cy#0 = 0
Constant (const byte) gfx_init_screen1::cx#0 = 0
Constant (const byte*) gfx_init_screen2::ch#0 = VIC_SCREEN2
Constant (const byte) gfx_init_screen2::cy#0 = 0
Constant (const byte) gfx_init_screen2::cx#0 = 0
Constant (const byte*) gfx_init_screen3::ch#0 = VIC_SCREEN3
Constant (const byte) gfx_init_screen3::cy#0 = 0
Constant (const byte) gfx_init_screen3::cx#0 = 0
Constant (const byte*) gfx_init_screen4::ch#0 = VIC_SCREEN4
Constant (const byte) gfx_init_screen4::cy#0 = 0
Constant (const byte) gfx_init_screen4::cx#0 = 0
Constant (const byte*) bitmap_init::bitmap#0 = VIC_BITMAP
Constant (const byte) gfx_init_vic_bitmap::l#0 = 0
Constant (const byte) gfx_init_plane_8bppchunky::gfxbCpuBank#0 = (byte)PLANE_8BPP_CHUNKY/$4000
Constant (const byte*) gfx_init_plane_8bppchunky::gfxb#0 = (byte*) 16384
Constant (const byte) gfx_init_plane_8bppchunky::y#0 = 0
Constant (const word) gfx_init_plane_8bppchunky::x#0 = 0
Constant (const byte*) gfx_init_plane_8bppchunky::gfxb#2 = (byte*) 16384
Constant (const byte) dtvSetCpuBankSegment1::cpuBankIdx#2 = (byte)$4000/$4000
Constant (const byte) gfx_init_plane_horisontal::gfxbCpuBank#0 = (byte)PLANE_HORISONTAL/$4000
Constant (const byte*) gfx_init_plane_horisontal::gfxa#0 = (byte*)$4000+PLANE_HORISONTAL&$3fff
Constant (const byte) gfx_init_plane_horisontal::ay#0 = 0
Constant (const byte) gfx_init_plane_horisontal::ax#0 = 0
Constant (const byte) dtvSetCpuBankSegment1::cpuBankIdx#4 = (byte)$4000/$4000
Constant (const byte) gfx_init_plane_horisontal2::gfxbCpuBank#0 = (byte)PLANE_HORISONTAL2/$4000
Constant (const byte*) gfx_init_plane_horisontal2::gfxa#0 = (byte*)$4000+PLANE_HORISONTAL2&$3fff
Constant (const byte) gfx_init_plane_horisontal2::ay#0 = 0
Constant (const byte) gfx_init_plane_horisontal2::ax#0 = 0
Constant (const byte) dtvSetCpuBankSegment1::cpuBankIdx#6 = (byte)$4000/$4000
Constant (const byte) gfx_init_plane_vertical::gfxbCpuBank#0 = (byte)PLANE_VERTICAL/$4000
Constant (const byte*) gfx_init_plane_vertical::gfxb#0 = (byte*)$4000+PLANE_VERTICAL&$3fff
Constant (const byte) gfx_init_plane_vertical::by#0 = 0
Constant (const byte) gfx_init_plane_vertical::bx#0 = 0
Constant (const byte) dtvSetCpuBankSegment1::cpuBankIdx#8 = (byte)$4000/$4000
Constant (const byte) gfx_init_plane_charset8::gfxbCpuBank#0 = (byte)PLANE_CHARSET8/$4000
Constant (const byte*) gfx_init_plane_charset8::gfxa#0 = (byte*)$4000+PLANE_CHARSET8&$3fff
Constant (const byte*) gfx_init_plane_charset8::chargen#0 = CHARGEN
Constant (const byte) gfx_init_plane_charset8::col#0 = 0
Constant (const byte) gfx_init_plane_charset8::ch#0 = 0
Constant (const byte) gfx_init_plane_charset8::cr#0 = 0
Constant (const byte) gfx_init_plane_charset8::cp#0 = 0
Constant (const byte) gfx_init_plane_charset8::c#0 = 0
Constant (const byte) dtvSetCpuBankSegment1::cpuBankIdx#10 = (byte)$4000/$4000
Constant (const dword) gfx_init_plane_fill::plane_addr#0 = PLANE_VERTICAL2
Constant (const byte) gfx_init_plane_fill::fill#0 = $1b
Constant (const dword) gfx_init_plane_fill::plane_addr#1 = PLANE_BLANK
Constant (const byte) gfx_init_plane_fill::fill#1 = 0
Constant (const dword) gfx_init_plane_fill::plane_addr#2 = PLANE_FULL
Constant (const byte) gfx_init_plane_fill::fill#2 = $ff
Constant (const byte) gfx_init_plane_fill::by#0 = 0
Constant (const byte) gfx_init_plane_fill::bx#0 = 0
Constant (const byte) dtvSetCpuBankSegment1::cpuBankIdx#12 = (byte)$4000/$4000
Constant (const byte*) print_set_screen::screen#0 = COLS
Constant (const byte*) print_str_lines::str#1 = FORM_COLS
Constant (const byte*) print_set_screen::screen#1 = FORM_SCREEN
Constant (const byte*) print_str_lines::str#2 = FORM_TEXT
Constant (const byte*) form_set_screen::screen#0 = FORM_SCREEN
Constant (const byte) form_mode::i#0 = 0
Constant (const byte) form_field_idx#34 = 0
Constant (const signed byte) form_cursor_count#26 = (signed byte)FORM_CURSOR_BLINK/2
Constant (const byte) form_set_screen::y#0 = 0
Constant (const byte) form_render_values::idx#0 = 0
Constant (const signed byte) form_cursor_count#6 = FORM_CURSOR_BLINK
Constant (const byte) form_field_idx#7 = form_fields_cnt-1
Constant (const signed byte) form_cursor_count#7 = FORM_CURSOR_BLINK/2
Constant (const byte) form_control::return#1 = 0
Constant (const byte) form_field_idx#8 = 0
Constant (const byte) form_control::return#3 = 0
Constant (const byte) form_control::return#4 = 0
Constant (const byte) form_control::return#5 = $ff
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) dtvSetCpuBankSegment1::cpuBankIdx#0 = gfx_init_plane_8bppchunky::gfxbCpuBank#0
Constant (const byte) dtvSetCpuBankSegment1::cpuBankIdx#3 = gfx_init_plane_horisontal::gfxbCpuBank#0
Constant (const byte) dtvSetCpuBankSegment1::cpuBankIdx#5 = gfx_init_plane_horisontal2::gfxbCpuBank#0
Constant (const byte) dtvSetCpuBankSegment1::cpuBankIdx#7 = gfx_init_plane_vertical::gfxbCpuBank#0
Constant (const byte) dtvSetCpuBankSegment1::cpuBankIdx#9 = gfx_init_plane_charset8::gfxbCpuBank#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [6] if((const word) memset::num#0<=(byte) 0) goto memset::@1
if() condition always true - replacing block destination [364] if(true) goto main::@2
Removing PHI-reference to removed block (gfx_mode::@27) in block gfx_mode::@return
Removing PHI-reference to removed block (gfx_mode::@27) in block gfx_mode::@return
if() condition always true - replacing block destination [685] if(true) goto gfx_mode::@28
Removing PHI-reference to removed block (form_mode::@3) in block form_mode::@return
Removing PHI-reference to removed block (form_mode::@3) in block form_mode::@return
Removing PHI-reference to removed block (form_mode::@3) in block form_mode::@return
Removing PHI-reference to removed block (form_mode::@3) in block form_mode::@return
if() condition always true - replacing block destination [1051] if(true) goto form_mode::@4
Successful SSA optimization Pass2ConstantIfs
Consolidated constant strings into (const byte*) render_preset_name::$12
Successful SSA optimization Pass2ConstantStringConsolidation
Resolved ranged next value [86] keyboard_event_scan::row#1 ← ++ keyboard_event_scan::row#2 to ++
Resolved ranged comparison value [88] if(keyboard_event_scan::row#1!=rangelast(0,7)) goto keyboard_event_scan::@7 to (number) 8
Resolved ranged next value [96] keyboard_event_scan::col#1 ← ++ keyboard_event_scan::col#2 to ++
Resolved ranged comparison value [98] if(keyboard_event_scan::col#1!=rangelast(0,7)) goto keyboard_event_scan::@10 to (number) 8
Resolved ranged next value [171] bitmap_init::x#1 ← ++ bitmap_init::x#2 to ++
Resolved ranged comparison value [173] if(bitmap_init::x#1!=rangelast(0,$ff)) goto bitmap_init::@1 to (number) 0
Resolved ranged next value [188] bitmap_init::y#1 ← ++ bitmap_init::y#2 to ++
Resolved ranged comparison value [190] if(bitmap_init::y#1!=rangelast(0,$ff)) goto bitmap_init::@5 to (number) 0
Resolved ranged next value [201] bitmap_clear::x#1 ← ++ bitmap_clear::x#2 to ++
Resolved ranged comparison value [203] if(bitmap_clear::x#1!=rangelast(0,$c7)) goto bitmap_clear::@2 to (number) $c8
Resolved ranged next value [204] bitmap_clear::y#1 ← ++ bitmap_clear::y#4 to ++
Resolved ranged comparison value [206] if(bitmap_clear::y#1!=rangelast(0,$27)) goto bitmap_clear::@1 to (number) $28
Resolved ranged next value [651] gfx_mode::cx#1 ← ++ gfx_mode::cx#2 to ++
Resolved ranged comparison value [653] if(gfx_mode::cx#1!=rangelast(0,$27)) goto gfx_mode::@21 to (number) $28
Resolved ranged next value [654] gfx_mode::cy#1 ← ++ gfx_mode::cy#4 to ++
Resolved ranged comparison value [656] if(gfx_mode::cy#1!=rangelast(0,$18)) goto gfx_mode::@20 to (number) $19
Resolved ranged next value [676] gfx_mode::j#1 ← ++ gfx_mode::j#2 to ++
Resolved ranged comparison value [678] if(gfx_mode::j#1!=rangelast(0,$f)) goto gfx_mode::@25 to (number) $10
Resolved ranged next value [681] gfx_mode::i#1 ← ++ gfx_mode::i#2 to ++
Resolved ranged comparison value [683] if(gfx_mode::i#1!=rangelast(0,$f)) goto gfx_mode::@26 to (number) $10
Resolved ranged next value [725] gfx_init_charset::l#1 ← ++ gfx_init_charset::l#2 to ++
Resolved ranged comparison value [727] if(gfx_init_charset::l#1!=rangelast(0,7)) goto gfx_init_charset::@2 to (number) 8
Resolved ranged next value [728] gfx_init_charset::c#1 ← ++ gfx_init_charset::c#4 to ++
Resolved ranged comparison value [730] if(gfx_init_charset::c#1!=rangelast(0,$ff)) goto gfx_init_charset::@1 to (number) 0
Resolved ranged next value [744] gfx_init_screen0::cx#1 ← ++ gfx_init_screen0::cx#2 to ++
Resolved ranged comparison value [746] if(gfx_init_screen0::cx#1!=rangelast(0,$27)) goto gfx_init_screen0::@2 to (number) $28
Resolved ranged next value [747] gfx_init_screen0::cy#1 ← ++ gfx_init_screen0::cy#4 to ++
Resolved ranged comparison value [749] if(gfx_init_screen0::cy#1!=rangelast(0,$18)) goto gfx_init_screen0::@1 to (number) $19
Resolved ranged next value [760] gfx_init_screen1::cx#1 ← ++ gfx_init_screen1::cx#2 to ++
Resolved ranged comparison value [762] if(gfx_init_screen1::cx#1!=rangelast(0,$27)) goto gfx_init_screen1::@2 to (number) $28
Resolved ranged next value [763] gfx_init_screen1::cy#1 ← ++ gfx_init_screen1::cy#4 to ++
Resolved ranged comparison value [765] if(gfx_init_screen1::cy#1!=rangelast(0,$18)) goto gfx_init_screen1::@1 to (number) $19
Resolved ranged next value [779] gfx_init_screen2::cx#1 ← ++ gfx_init_screen2::cx#2 to ++
Resolved ranged comparison value [781] if(gfx_init_screen2::cx#1!=rangelast(0,$27)) goto gfx_init_screen2::@2 to (number) $28
Resolved ranged next value [782] gfx_init_screen2::cy#1 ← ++ gfx_init_screen2::cy#4 to ++
Resolved ranged comparison value [784] if(gfx_init_screen2::cy#1!=rangelast(0,$18)) goto gfx_init_screen2::@1 to (number) $19
Resolved ranged next value [797] gfx_init_screen3::cx#1 ← ++ gfx_init_screen3::cx#2 to ++
Resolved ranged comparison value [799] if(gfx_init_screen3::cx#1!=rangelast(0,$27)) goto gfx_init_screen3::@2 to (number) $28
Resolved ranged next value [800] gfx_init_screen3::cy#1 ← ++ gfx_init_screen3::cy#4 to ++
Resolved ranged comparison value [802] if(gfx_init_screen3::cy#1!=rangelast(0,$18)) goto gfx_init_screen3::@1 to (number) $19
Resolved ranged next value [811] gfx_init_screen4::cx#1 ← ++ gfx_init_screen4::cx#2 to ++
Resolved ranged comparison value [813] if(gfx_init_screen4::cx#1!=rangelast(0,$27)) goto gfx_init_screen4::@2 to (number) $28
Resolved ranged next value [814] gfx_init_screen4::cy#1 ← ++ gfx_init_screen4::cy#4 to ++
Resolved ranged comparison value [816] if(gfx_init_screen4::cy#1!=rangelast(0,$18)) goto gfx_init_screen4::@1 to (number) $19
Resolved ranged next value [850] gfx_init_plane_8bppchunky::x#1 ← ++ gfx_init_plane_8bppchunky::x#2 to ++
Resolved ranged comparison value [852] if(gfx_init_plane_8bppchunky::x#1!=rangelast(0,$13f)) goto gfx_init_plane_8bppchunky::@2 to (number) $140
Resolved ranged next value [857] gfx_init_plane_8bppchunky::y#1 ← ++ gfx_init_plane_8bppchunky::y#6 to ++
Resolved ranged comparison value [859] if(gfx_init_plane_8bppchunky::y#1!=rangelast(0,$c7)) goto gfx_init_plane_8bppchunky::@1 to (number) $c8
Resolved ranged next value [880] gfx_init_plane_horisontal::ax#1 ← ++ gfx_init_plane_horisontal::ax#2 to ++
Resolved ranged comparison value [882] if(gfx_init_plane_horisontal::ax#1!=rangelast(0,$27)) goto gfx_init_plane_horisontal::@2 to (number) $28
Resolved ranged next value [883] gfx_init_plane_horisontal::ay#1 ← ++ gfx_init_plane_horisontal::ay#4 to ++
Resolved ranged comparison value [885] if(gfx_init_plane_horisontal::ay#1!=rangelast(0,$c7)) goto gfx_init_plane_horisontal::@1 to (number) $c8
Resolved ranged next value [902] gfx_init_plane_horisontal2::ax#1 ← ++ gfx_init_plane_horisontal2::ax#2 to ++
Resolved ranged comparison value [904] if(gfx_init_plane_horisontal2::ax#1!=rangelast(0,$27)) goto gfx_init_plane_horisontal2::@2 to (number) $28
Resolved ranged next value [905] gfx_init_plane_horisontal2::ay#1 ← ++ gfx_init_plane_horisontal2::ay#4 to ++
Resolved ranged comparison value [907] if(gfx_init_plane_horisontal2::ay#1!=rangelast(0,$c7)) goto gfx_init_plane_horisontal2::@1 to (number) $c8
Resolved ranged next value [922] gfx_init_plane_vertical::bx#1 ← ++ gfx_init_plane_vertical::bx#2 to ++
Resolved ranged comparison value [924] if(gfx_init_plane_vertical::bx#1!=rangelast(0,$27)) goto gfx_init_plane_vertical::@2 to (number) $28
Resolved ranged next value [925] gfx_init_plane_vertical::by#1 ← ++ gfx_init_plane_vertical::by#4 to ++
Resolved ranged comparison value [927] if(gfx_init_plane_vertical::by#1!=rangelast(0,$c7)) goto gfx_init_plane_vertical::@1 to (number) $c8
Resolved ranged next value [956] gfx_init_plane_charset8::cp#1 ← ++ gfx_init_plane_charset8::cp#2 to ++
Resolved ranged comparison value [958] if(gfx_init_plane_charset8::cp#1!=rangelast(0,7)) goto gfx_init_plane_charset8::@3 to (number) 8
Resolved ranged next value [959] gfx_init_plane_charset8::cr#1 ← ++ gfx_init_plane_charset8::cr#6 to ++
Resolved ranged comparison value [961] if(gfx_init_plane_charset8::cr#1!=rangelast(0,7)) goto gfx_init_plane_charset8::@2 to (number) 8
Resolved ranged next value [962] gfx_init_plane_charset8::ch#1 ← ++ gfx_init_plane_charset8::ch#8 to ++
Resolved ranged comparison value [964] if(gfx_init_plane_charset8::ch#1!=rangelast(0,$ff)) goto gfx_init_plane_charset8::@1 to (number) 0
Resolved ranged next value [998] gfx_init_plane_fill::bx#1 ← ++ gfx_init_plane_fill::bx#2 to ++
Resolved ranged comparison value [1000] if(gfx_init_plane_fill::bx#1!=rangelast(0,$27)) goto gfx_init_plane_fill::@2 to (number) $28
Resolved ranged next value [1001] gfx_init_plane_fill::by#1 ← ++ gfx_init_plane_fill::by#4 to ++
Resolved ranged comparison value [1003] if(gfx_init_plane_fill::by#1!=rangelast(0,$c7)) goto gfx_init_plane_fill::@1 to (number) $c8
Resolved ranged next value [1044] form_mode::i#1 ← ++ form_mode::i#2 to ++
Resolved ranged comparison value [1046] if(form_mode::i#1!=rangelast(0,$f)) goto form_mode::@1 to (number) $10
Resolved ranged next value [1081] form_set_screen::y#1 ← ++ form_set_screen::y#2 to ++
Resolved ranged comparison value [1083] if(form_set_screen::y#1!=rangelast(0,$18)) goto form_set_screen::@1 to (number) $19
Converting *(pointer+n) to pointer[n] [1100] *((byte*) form_render_values::field#0) ← *((const to_nomodify byte*) print_hextab + *((const byte*) form_fields_val + (byte) form_render_values::idx#2))  -- *(form_field_ptr::line#0 + form_field_ptr::x#0)
Successful SSA optimization Pass2InlineDerefIdx
Simplifying constant evaluating to zero (const nomodify dword) PLANE_HORISONTAL&(word) $3fff in 
Simplifying constant evaluating to zero (const nomodify dword) PLANE_HORISONTAL2&(word) $3fff in 
Simplifying constant evaluating to zero (const nomodify dword) PLANE_CHARSET8&(word) $3fff in 
Simplifying constant evaluating to zero (byte)(dword)(const nomodify byte*) FORM_CHARSET/(dword) $10000 in [1029] *((const nomodify byte*) DTV_GRAPHICS_VIC_BANK) ← (byte)(dword)(const nomodify byte*) FORM_CHARSET/(dword) $10000
Simplifying constant evaluating to zero >(word)(const nomodify dword) DTV_COLOR_BANK_DEFAULT/(word) $400 in [1031] *((const nomodify byte*) DTV_COLOR_BANK_HI) ← >(word)(const nomodify dword) DTV_COLOR_BANK_DEFAULT/(word) $400
Simplifying constant evaluating to zero (byte)(word)(const nomodify byte*) FORM_CHARSET/(word) $4000 in [1033] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A) ← (byte) 3^(byte)(word)(const nomodify byte*) FORM_CHARSET/(word) $4000
Simplifying constant evaluating to zero <(const nomodify byte*) FORM_SCREEN in [1038] *((const nomodify byte*) DTV_PLANEA_START_LO) ← <(const nomodify byte*) FORM_SCREEN
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero form_fields_val in 
Simplifying expression containing zero $4000 in 
Simplifying expression containing zero $4000 in 
Simplifying expression containing zero $4000 in 
Simplifying expression containing zero (byte*)CIA1 in [68] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A) ← *((const byte*) keyboard_matrix_row_bitmask + (byte) keyboard_matrix_read::rowid#0)
Simplifying expression containing zero KEY_MODIFIER_LSHIFT in [124] (byte) keyboard_modifiers#2 ← (const byte) keyboard_modifiers#1 | (const nomodify byte) KEY_MODIFIER_LSHIFT
Simplifying expression containing zero bitmap_plot_xhi in [193] (word~) bitmap_clear::$3 ← *((const to_nomodify byte*) bitmap_plot_xhi + (byte) 0) w= *((const to_nomodify byte*) bitmap_plot_xlo + (byte) 0)
Simplifying expression containing zero bitmap_plot_xlo in [193] (word~) bitmap_clear::$3 ← *((const to_nomodify byte*) bitmap_plot_xhi) w= *((const to_nomodify byte*) bitmap_plot_xlo + (byte) 0)
Simplifying expression containing zero DTV_LINEAR in [537] (byte) gfx_mode::dtv_control#1 ← (const byte) gfx_mode::dtv_control#0 | (const nomodify byte) DTV_LINEAR
Simplifying expression containing zero (byte*)CIA2 in [619] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A) ← (byte) 3^(byte)(word)(const nomodify byte*) VIC_SCREEN0/(word) $4000
Simplifying expression containing zero 3 in [1033] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A) ← (byte) 3^(byte) 0
Simplifying expression containing zero (byte*)CIA2 in [1033] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A) ← (byte) 3
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (void*) memset::return#2 and assignment [40] (void*) memset::return#2 ← (void*) memset::str#0
Eliminating unused variable - keeping the phi block (byte*) print_screen#13
Eliminating unused variable - keeping the phi block (byte*) print_line_cursor#10
Eliminating unused variable - keeping the phi block (byte*) print_char_cursor#13
Eliminating unused variable - keeping the phi block (byte) keyboard_modifiers#41
Eliminating unused variable (byte) gfx_init_plane_horisontal::gfxbCpuBank#1 and assignment [614] (byte) gfx_init_plane_horisontal::gfxbCpuBank#1 ← ++ (const byte) gfx_init_plane_horisontal::gfxbCpuBank#0
Eliminating unused variable (byte) gfx_init_plane_horisontal2::gfxbCpuBank#1 and assignment [631] (byte) gfx_init_plane_horisontal2::gfxbCpuBank#1 ← ++ (const byte) gfx_init_plane_horisontal2::gfxbCpuBank#0
Eliminating unused variable (byte) gfx_init_plane_vertical::gfxbCpuBank#1 and assignment [645] (byte) gfx_init_plane_vertical::gfxbCpuBank#1 ← ++ (const byte) gfx_init_plane_vertical::gfxbCpuBank#0
Eliminating unused variable (byte) gfx_init_plane_charset8::gfxbCpuBank#1 and assignment [657] (byte) gfx_init_plane_charset8::gfxbCpuBank#1 ← ++ (const byte) gfx_init_plane_charset8::gfxbCpuBank#0
Eliminating unused variable (byte) gfx_init_plane_fill::gfxbCpuBank#1 and assignment [692] (byte) gfx_init_plane_fill::gfxbCpuBank#1 ← ++ (byte) gfx_init_plane_fill::gfxbCpuBank#0
Eliminating unused variable - keeping the phi block (byte) keyboard_modifiers#44
Eliminating unused variable (byte*) form_render_values::field#0 and assignment [772] (byte*) form_render_values::field#0 ← (byte*) form_field_ptr::return#2
Eliminating unused constant (const byte) bitmap_line::xd#0
Eliminating unused constant (const byte) bitmap_line::yd#0
Eliminating unused constant (const byte*) apply_preset::preset#0
Eliminating unused constant (const byte*) render_preset_name::name#0
Eliminating unused constant (const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused variable - keeping the phi block (byte) keyboard_modifiers#24
Eliminating unused variable - keeping the phi block (byte) keyboard_modifiers#13
Eliminating unused variable (byte*) form_field_ptr::return#2 and assignment [765] (byte*) form_field_ptr::return#2 ← (byte*) form_field_ptr::return#0
Eliminating unused constant (const byte*) print_screen#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused variable - keeping the phi block (byte) keyboard_modifiers#11
Eliminating unused constant (const byte) keyboard_modifiers#0
Successful SSA optimization PassNEliminateUnusedVars
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Adding number conversion cast (unumber) 8 in if((byte) keyboard_event_scan::row#1!=(number) 8) goto keyboard_event_scan::@7
Adding number conversion cast (unumber) 8 in if((byte) keyboard_event_scan::col#1!=(number) 8) goto keyboard_event_scan::@10
Adding number conversion cast (unumber) 0 in if((byte) bitmap_init::x#1!=(number) 0) goto bitmap_init::@1
Adding number conversion cast (unumber) 0 in if((byte) bitmap_init::y#1!=(number) 0) goto bitmap_init::@5
Adding number conversion cast (unumber) $c8 in if((byte) bitmap_clear::x#1!=(number) $c8) goto bitmap_clear::@2
Adding number conversion cast (unumber) $28 in if((byte) bitmap_clear::y#1!=(number) $28) goto bitmap_clear::@1
Adding number conversion cast (unumber) $28 in if((byte) gfx_mode::cx#1!=(number) $28) goto gfx_mode::@21
Adding number conversion cast (unumber) $19 in if((byte) gfx_mode::cy#1!=(number) $19) goto gfx_mode::@20
Adding number conversion cast (unumber) $10 in if((byte) gfx_mode::j#1!=(number) $10) goto gfx_mode::@25
Adding number conversion cast (unumber) $10 in if((byte) gfx_mode::i#1!=(number) $10) goto gfx_mode::@26
Adding number conversion cast (unumber) 8 in if((byte) gfx_init_charset::l#1!=(number) 8) goto gfx_init_charset::@2
Adding number conversion cast (unumber) 0 in if((byte) gfx_init_charset::c#1!=(number) 0) goto gfx_init_charset::@1
Adding number conversion cast (unumber) $28 in if((byte) gfx_init_screen0::cx#1!=(number) $28) goto gfx_init_screen0::@2
Adding number conversion cast (unumber) $19 in if((byte) gfx_init_screen0::cy#1!=(number) $19) goto gfx_init_screen0::@1
Adding number conversion cast (unumber) $28 in if((byte) gfx_init_screen1::cx#1!=(number) $28) goto gfx_init_screen1::@2
Adding number conversion cast (unumber) $19 in if((byte) gfx_init_screen1::cy#1!=(number) $19) goto gfx_init_screen1::@1
Adding number conversion cast (unumber) $28 in if((byte) gfx_init_screen2::cx#1!=(number) $28) goto gfx_init_screen2::@2
Adding number conversion cast (unumber) $19 in if((byte) gfx_init_screen2::cy#1!=(number) $19) goto gfx_init_screen2::@1
Adding number conversion cast (unumber) $28 in if((byte) gfx_init_screen3::cx#1!=(number) $28) goto gfx_init_screen3::@2
Adding number conversion cast (unumber) $19 in if((byte) gfx_init_screen3::cy#1!=(number) $19) goto gfx_init_screen3::@1
Adding number conversion cast (unumber) $28 in if((byte) gfx_init_screen4::cx#1!=(number) $28) goto gfx_init_screen4::@2
Adding number conversion cast (unumber) $19 in if((byte) gfx_init_screen4::cy#1!=(number) $19) goto gfx_init_screen4::@1
Adding number conversion cast (unumber) $140 in if((word) gfx_init_plane_8bppchunky::x#1!=(number) $140) goto gfx_init_plane_8bppchunky::@2
Adding number conversion cast (unumber) $c8 in if((byte) gfx_init_plane_8bppchunky::y#1!=(number) $c8) goto gfx_init_plane_8bppchunky::@1
Adding number conversion cast (unumber) $28 in if((byte) gfx_init_plane_horisontal::ax#1!=(number) $28) goto gfx_init_plane_horisontal::@2
Adding number conversion cast (unumber) $c8 in if((byte) gfx_init_plane_horisontal::ay#1!=(number) $c8) goto gfx_init_plane_horisontal::@1
Adding number conversion cast (unumber) $28 in if((byte) gfx_init_plane_horisontal2::ax#1!=(number) $28) goto gfx_init_plane_horisontal2::@2
Adding number conversion cast (unumber) $c8 in if((byte) gfx_init_plane_horisontal2::ay#1!=(number) $c8) goto gfx_init_plane_horisontal2::@1
Adding number conversion cast (unumber) $28 in if((byte) gfx_init_plane_vertical::bx#1!=(number) $28) goto gfx_init_plane_vertical::@2
Adding number conversion cast (unumber) $c8 in if((byte) gfx_init_plane_vertical::by#1!=(number) $c8) goto gfx_init_plane_vertical::@1
Adding number conversion cast (unumber) 8 in if((byte) gfx_init_plane_charset8::cp#1!=(number) 8) goto gfx_init_plane_charset8::@3
Adding number conversion cast (unumber) 8 in if((byte) gfx_init_plane_charset8::cr#1!=(number) 8) goto gfx_init_plane_charset8::@2
Adding number conversion cast (unumber) 0 in if((byte) gfx_init_plane_charset8::ch#1!=(number) 0) goto gfx_init_plane_charset8::@1
Adding number conversion cast (unumber) $28 in if((byte) gfx_init_plane_fill::bx#1!=(number) $28) goto gfx_init_plane_fill::@2
Adding number conversion cast (unumber) $c8 in if((byte) gfx_init_plane_fill::by#1!=(number) $c8) goto gfx_init_plane_fill::@1
Adding number conversion cast (unumber) $10 in if((byte) form_mode::i#1!=(number) $10) goto form_mode::@1
Adding number conversion cast (unumber) $19 in if((byte) form_set_screen::y#1!=(number) $19) goto form_set_screen::@1
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) bitmap_clear::bitmap#0 ← (byte*)(word~) bitmap_clear::$3
Inlining cast (byte*) form_field_ptr::line#0 ← (byte*)(word~) form_field_ptr::$2
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast (const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(byte) 3
Simplifying constant integer cast (const nomodify signed byte) FORM_CURSOR_BLINK/(signed byte) 2
Simplifying constant integer cast 8
Simplifying constant integer cast 8
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $c8
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $19
Simplifying constant integer cast $10
Simplifying constant integer cast $10
Simplifying constant integer cast 8
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $19
Simplifying constant integer cast $28
Simplifying constant integer cast $19
Simplifying constant integer cast $28
Simplifying constant integer cast $19
Simplifying constant integer cast $28
Simplifying constant integer cast $19
Simplifying constant integer cast $28
Simplifying constant integer cast $19
Simplifying constant integer cast $140
Simplifying constant integer cast $c8
Simplifying constant integer cast $28
Simplifying constant integer cast $c8
Simplifying constant integer cast $28
Simplifying constant integer cast $c8
Simplifying constant integer cast $28
Simplifying constant integer cast $c8
Simplifying constant integer cast 8
Simplifying constant integer cast 8
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $c8
Simplifying constant integer cast $10
Simplifying constant integer cast $19
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $c8
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $19
Finalized unsigned number type (word) $140
Finalized unsigned number type (byte) $c8
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $c8
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $c8
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $c8
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $c8
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $19
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias bitmap_init::$10 = bitmap_init::$6 
Alias gfx_mode::$24 = gfx_mode::$22 
Alias gfx_mode::$38 = gfx_mode::$36 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) keyboard_events_size#11 (byte) keyboard_events_size#24
Identical Phi Values (signed byte) form_cursor_count#13 (signed byte) form_cursor_count#16
Identical Phi Values (byte) keyboard_events_size#13 (byte) keyboard_events_size#24
Identical Phi Values (byte) form_field_idx#14 (byte) form_field_idx#18
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (byte) keyboard_events_size#45 (byte) keyboard_events_size#24
Successful SSA optimization Pass2IdenticalPhiElimination
Constant right-side identified [117] (byte~) bitmap_init::$1 ← > (const byte*) bitmap_init::bitmap#0
Constant right-side identified [372] (byte) gfx_mode::vic_control#1 ← (const byte) gfx_mode::vic_control#0 | (const nomodify byte) VIC_ECM
Constant right-side identified [447] (byte) gfx_mode::vic_control2#1 ← (const byte) gfx_mode::vic_control2#0 | (const nomodify byte) VIC_MCM
Constant right-side identified [590] (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#1 ← ++ (const byte) gfx_init_plane_8bppchunky::gfxbCpuBank#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) keyboard_modifiers#2 = KEY_MODIFIER_LSHIFT
Constant (const byte) bitmap_init::$1 = >bitmap_init::bitmap#0
Constant (const byte) gfx_mode::dtv_control#1 = DTV_LINEAR
Constant (const byte) gfx_mode::vic_control#1 = gfx_mode::vic_control#0|VIC_ECM
Constant (const byte) gfx_mode::vic_control2#1 = gfx_mode::vic_control2#0|VIC_MCM
Constant (const byte) gfx_init_plane_8bppchunky::gfxbCpuBank#1 = ++gfx_init_plane_8bppchunky::gfxbCpuBank#0
Successful SSA optimization Pass2ConstantIdentification
Inlining Noop Cast [4] (byte*~) memset::$4 ← (byte*)(void*) memset::str#0 keeping memset::str#0
Inlining Noop Cast [6] (byte*) memset::dst#0 ← (byte*)(void*) memset::str#0 keeping memset::str#0
Successful SSA optimization Pass2NopCastInlining
Inlining Noop Cast [137] (byte*) bitmap_clear::bitmap#0 ← (byte*)(word~) bitmap_clear::$3 keeping bitmap_clear::bitmap#0
Inlining Noop Cast [151] (byte*) bitmap_plot::plotter#0 ← (byte*)(word~) bitmap_plot::$0 keeping bitmap_plot::plotter#0
Inlining Noop Cast [425] (word~) gfx_mode::$82 ← (word)(byte*~) gfx_mode::$46 keeping gfx_mode::$82
Inlining Noop Cast [432] (word~) gfx_mode::$83 ← (word)(byte*~) gfx_mode::$49 keeping gfx_mode::$83
Inlining Noop Cast [678] (byte*) gfx_init_plane_fill::gfxb#0 ← (byte*)(word~) gfx_init_plane_fill::$6 keeping gfx_init_plane_fill::gfxb#0
Inlining Noop Cast [744] (byte*) form_field_ptr::line#0 ← (byte*)(word~) form_field_ptr::$2 keeping form_field_ptr::line#0
Successful SSA optimization Pass2NopCastInlining
Rewriting multiplication to use shift [375] (byte~) gfx_mode::$18 ← *((const nomodify byte*) form_a_start_hi) * (byte) $10
Rewriting multiplication to use shift [390] (byte~) gfx_mode::$28 ← *((const nomodify byte*) form_a_step_hi) * (byte) $10
Rewriting multiplication to use shift [393] (byte~) gfx_mode::$30 ← *((const nomodify byte*) form_a_mod_hi) * (byte) $10
Rewriting multiplication to use shift [397] (byte~) gfx_mode::$32 ← *((const nomodify byte*) form_b_start_hi) * (byte) $10
Rewriting multiplication to use shift [412] (byte~) gfx_mode::$42 ← *((const nomodify byte*) form_b_step_hi) * (byte) $10
Rewriting multiplication to use shift [415] (byte~) gfx_mode::$44 ← *((const nomodify byte*) form_b_mod_hi) * (byte) $10
Rewriting division to use shift [427] (word~) gfx_mode::$48 ← (word~) gfx_mode::$47 / (byte) $40
Rewriting division to use shift [435] (byte~) gfx_mode::$52 ← (byte~) gfx_mode::$51 / (byte) 4
Rewriting multiplication to use shift [453] (byte~) gfx_mode::$55 ← *((const nomodify byte*) form_vic_bg0_hi) * (byte) $10
Rewriting multiplication to use shift [456] (byte~) gfx_mode::$57 ← *((const nomodify byte*) form_vic_bg1_hi) * (byte) $10
Rewriting multiplication to use shift [459] (byte~) gfx_mode::$59 ← *((const nomodify byte*) form_vic_bg2_hi) * (byte) $10
Rewriting multiplication to use shift [462] (byte~) gfx_mode::$61 ← *((const nomodify byte*) form_vic_bg3_hi) * (byte) $10
Rewriting multiplication to use shift [512] (byte~) gfx_init_screen0::$1 ← (byte~) gfx_init_screen0::$0 * (byte) $10
Rewriting multiplication to use shift [538] (byte~) gfx_init_screen2::$3 ← (byte) gfx_init_screen2::col#0 * (byte) $10
Rewriting multiplication to use shift [550] (byte~) gfx_init_screen3::$1 ← (byte~) gfx_init_screen3::$0 * (byte) $10
Rewriting division to use shift [619] (byte~) gfx_init_plane_horisontal2::$2 ← (byte) gfx_init_plane_horisontal2::ay#4 / (byte) 2
Rewriting multiplication to use shift [652] (byte) gfx_init_plane_charset8::bits#1 ← (byte) gfx_init_plane_charset8::bits#2 * (byte) 2
Rewriting multiplication to use shift [670] (dword~) gfx_init_plane_fill::$0 ← (dword) gfx_init_plane_fill::plane_addr#3 * (byte) 4
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const byte) dtvSetCpuBankSegment1::cpuBankIdx#2
Inlining constant with var siblings (const byte) dtvSetCpuBankSegment1::cpuBankIdx#4
Inlining constant with var siblings (const byte) dtvSetCpuBankSegment1::cpuBankIdx#6
Inlining constant with var siblings (const byte) dtvSetCpuBankSegment1::cpuBankIdx#8
Inlining constant with var siblings (const byte) dtvSetCpuBankSegment1::cpuBankIdx#10
Inlining constant with var siblings (const byte) dtvSetCpuBankSegment1::cpuBankIdx#12
Inlining constant with var siblings (const byte) dtvSetCpuBankSegment1::cpuBankIdx#0
Inlining constant with var siblings (const byte) dtvSetCpuBankSegment1::cpuBankIdx#3
Inlining constant with var siblings (const byte) dtvSetCpuBankSegment1::cpuBankIdx#5
Inlining constant with var siblings (const byte) dtvSetCpuBankSegment1::cpuBankIdx#7
Inlining constant with var siblings (const byte) dtvSetCpuBankSegment1::cpuBankIdx#9
Inlining constant with var siblings (const byte*) print_str_lines::str#1
Inlining constant with var siblings (const byte*) print_str_lines::str#2
Inlining constant with var siblings (const byte*) print_str_at::at#1
Inlining constant with var siblings (const byte*) print_set_screen::screen#0
Inlining constant with var siblings (const byte*) print_set_screen::screen#1
Inlining constant with var siblings (const byte) keyboard_event_scan::keycode#0
Inlining constant with var siblings (const byte) keyboard_event_scan::row#0
Inlining constant with var siblings (const byte) keyboard_event_scan::col#0
Inlining constant with var siblings (const byte) keyboard_event_pressed::keycode#0
Inlining constant with var siblings (const byte) keyboard_event_pressed::keycode#1
Inlining constant with var siblings (const byte) keyboard_event_pressed::keycode#2
Inlining constant with var siblings (const byte) keyboard_event_pressed::keycode#3
Inlining constant with var siblings (const byte) keyboard_event_get::return#0
Inlining constant with var siblings (const byte) bitmap_init::bits#0
Inlining constant with var siblings (const byte) bitmap_init::x#0
Inlining constant with var siblings (const byte) bitmap_init::bits#2
Inlining constant with var siblings (const byte*) bitmap_init::yoffs#0
Inlining constant with var siblings (const byte) bitmap_init::y#0
Inlining constant with var siblings (const byte) bitmap_clear::y#0
Inlining constant with var siblings (const byte) bitmap_clear::x#0
Inlining constant with var siblings (const dword) get_plane::return#0
Inlining constant with var siblings (const dword) get_plane::return#1
Inlining constant with var siblings (const dword) get_plane::return#2
Inlining constant with var siblings (const dword) get_plane::return#3
Inlining constant with var siblings (const dword) get_plane::return#4
Inlining constant with var siblings (const dword) get_plane::return#5
Inlining constant with var siblings (const dword) get_plane::return#6
Inlining constant with var siblings (const dword) get_plane::return#7
Inlining constant with var siblings (const dword) get_plane::return#8
Inlining constant with var siblings (const dword) get_plane::return#9
Inlining constant with var siblings (const dword) get_plane::return#10
Inlining constant with var siblings (const dword) get_plane::return#11
Inlining constant with var siblings (const dword) get_plane::return#12
Inlining constant with var siblings (const dword) get_plane::return#13
Inlining constant with var siblings (const dword) get_plane::return#15
Inlining constant with var siblings (const byte*) get_vic_screen::return#0
Inlining constant with var siblings (const byte*) get_vic_screen::return#1
Inlining constant with var siblings (const byte*) get_vic_screen::return#2
Inlining constant with var siblings (const byte*) get_vic_screen::return#3
Inlining constant with var siblings (const byte*) get_vic_screen::return#4
Inlining constant with var siblings (const byte*) get_vic_screen::return#6
Inlining constant with var siblings (const byte*) get_vic_charset::return#0
Inlining constant with var siblings (const byte*) get_vic_charset::return#1
Inlining constant with var siblings (const byte*) get_vic_charset::return#3
Inlining constant with var siblings (const byte*) apply_preset::preset#1
Inlining constant with var siblings (const byte*) apply_preset::preset#2
Inlining constant with var siblings (const byte*) apply_preset::preset#3
Inlining constant with var siblings (const byte*) apply_preset::preset#4
Inlining constant with var siblings (const byte*) apply_preset::preset#5
Inlining constant with var siblings (const byte*) apply_preset::preset#6
Inlining constant with var siblings (const byte*) apply_preset::preset#7
Inlining constant with var siblings (const byte*) apply_preset::preset#8
Inlining constant with var siblings (const byte*) apply_preset::preset#9
Inlining constant with var siblings (const byte*) apply_preset::preset#10
Inlining constant with var siblings (const byte*) apply_preset::preset#11
Inlining constant with var siblings (const byte*) apply_preset::preset#12
Inlining constant with var siblings (const byte) apply_preset::i#0
Inlining constant with var siblings (const byte*) render_preset_name::name#1
Inlining constant with var siblings (const byte*) render_preset_name::name#2
Inlining constant with var siblings (const byte*) render_preset_name::name#3
Inlining constant with var siblings (const byte*) render_preset_name::name#4
Inlining constant with var siblings (const byte*) render_preset_name::name#5
Inlining constant with var siblings (const byte*) render_preset_name::name#6
Inlining constant with var siblings (const byte*) render_preset_name::name#7
Inlining constant with var siblings (const byte*) render_preset_name::name#8
Inlining constant with var siblings (const byte*) render_preset_name::name#9
Inlining constant with var siblings (const byte*) render_preset_name::name#10
Inlining constant with var siblings (const byte*) render_preset_name::name#11
Inlining constant with var siblings (const byte*) render_preset_name::name#12
Inlining constant with var siblings (const byte) gfx_mode::dtv_control#0
Inlining constant with var siblings (const byte) gfx_mode::vic_control#0
Inlining constant with var siblings (const byte) gfx_mode::vic_control2#0
Inlining constant with var siblings (const byte*) gfx_mode::col#0
Inlining constant with var siblings (const byte) gfx_mode::cy#0
Inlining constant with var siblings (const byte) gfx_mode::cx#0
Inlining constant with var siblings (const byte) gfx_mode::i#0
Inlining constant with var siblings (const byte) gfx_mode::j#0
Inlining constant with var siblings (const byte) gfx_mode::dtv_control#1
Inlining constant with var siblings (const byte) gfx_mode::vic_control#1
Inlining constant with var siblings (const byte) gfx_mode::vic_control2#1
Inlining constant with var siblings (const byte*) gfx_init_charset::chargen#0
Inlining constant with var siblings (const byte*) gfx_init_charset::charset#0
Inlining constant with var siblings (const byte) gfx_init_charset::c#0
Inlining constant with var siblings (const byte) gfx_init_charset::l#0
Inlining constant with var siblings (const byte*) gfx_init_screen0::ch#0
Inlining constant with var siblings (const byte) gfx_init_screen0::cy#0
Inlining constant with var siblings (const byte) gfx_init_screen0::cx#0
Inlining constant with var siblings (const byte*) gfx_init_screen1::ch#0
Inlining constant with var siblings (const byte) gfx_init_screen1::cy#0
Inlining constant with var siblings (const byte) gfx_init_screen1::cx#0
Inlining constant with var siblings (const byte*) gfx_init_screen2::ch#0
Inlining constant with var siblings (const byte) gfx_init_screen2::cy#0
Inlining constant with var siblings (const byte) gfx_init_screen2::cx#0
Inlining constant with var siblings (const byte*) gfx_init_screen3::ch#0
Inlining constant with var siblings (const byte) gfx_init_screen3::cy#0
Inlining constant with var siblings (const byte) gfx_init_screen3::cx#0
Inlining constant with var siblings (const byte*) gfx_init_screen4::ch#0
Inlining constant with var siblings (const byte) gfx_init_screen4::cy#0
Inlining constant with var siblings (const byte) gfx_init_screen4::cx#0
Inlining constant with var siblings (const byte) gfx_init_vic_bitmap::l#0
Inlining constant with var siblings (const byte) gfx_init_plane_8bppchunky::gfxbCpuBank#0
Inlining constant with var siblings (const byte*) gfx_init_plane_8bppchunky::gfxb#0
Inlining constant with var siblings (const byte) gfx_init_plane_8bppchunky::y#0
Inlining constant with var siblings (const word) gfx_init_plane_8bppchunky::x#0
Inlining constant with var siblings (const byte*) gfx_init_plane_8bppchunky::gfxb#2
Inlining constant with var siblings (const byte) gfx_init_plane_8bppchunky::gfxbCpuBank#1
Inlining constant with var siblings (const byte*) gfx_init_plane_horisontal::gfxa#0
Inlining constant with var siblings (const byte) gfx_init_plane_horisontal::ay#0
Inlining constant with var siblings (const byte) gfx_init_plane_horisontal::ax#0
Inlining constant with var siblings (const byte*) gfx_init_plane_horisontal2::gfxa#0
Inlining constant with var siblings (const byte) gfx_init_plane_horisontal2::ay#0
Inlining constant with var siblings (const byte) gfx_init_plane_horisontal2::ax#0
Inlining constant with var siblings (const byte*) gfx_init_plane_vertical::gfxb#0
Inlining constant with var siblings (const byte) gfx_init_plane_vertical::by#0
Inlining constant with var siblings (const byte) gfx_init_plane_vertical::bx#0
Inlining constant with var siblings (const byte*) gfx_init_plane_charset8::gfxa#0
Inlining constant with var siblings (const byte*) gfx_init_plane_charset8::chargen#0
Inlining constant with var siblings (const byte) gfx_init_plane_charset8::col#0
Inlining constant with var siblings (const byte) gfx_init_plane_charset8::ch#0
Inlining constant with var siblings (const byte) gfx_init_plane_charset8::cr#0
Inlining constant with var siblings (const byte) gfx_init_plane_charset8::cp#0
Inlining constant with var siblings (const byte) gfx_init_plane_charset8::c#0
Inlining constant with var siblings (const dword) gfx_init_plane_fill::plane_addr#0
Inlining constant with var siblings (const byte) gfx_init_plane_fill::fill#0
Inlining constant with var siblings (const dword) gfx_init_plane_fill::plane_addr#1
Inlining constant with var siblings (const byte) gfx_init_plane_fill::fill#1
Inlining constant with var siblings (const dword) gfx_init_plane_fill::plane_addr#2
Inlining constant with var siblings (const byte) gfx_init_plane_fill::fill#2
Inlining constant with var siblings (const byte) gfx_init_plane_fill::by#0
Inlining constant with var siblings (const byte) gfx_init_plane_fill::bx#0
Inlining constant with var siblings (const byte) form_mode::i#0
Inlining constant with var siblings (const byte) form_set_screen::y#0
Inlining constant with var siblings (const byte) form_render_values::idx#0
Inlining constant with var siblings (const byte) form_control::return#1
Inlining constant with var siblings (const byte) form_control::return#3
Inlining constant with var siblings (const byte) form_control::return#4
Inlining constant with var siblings (const byte) form_control::return#5
Inlining constant with var siblings (const byte) keyboard_events_size#0
Inlining constant with var siblings (const byte) keyboard_modifiers#1
Inlining constant with var siblings (const byte) form_field_idx#34
Inlining constant with var siblings (const signed byte) form_cursor_count#26
Inlining constant with var siblings (const signed byte) form_cursor_count#6
Inlining constant with var siblings (const byte) form_field_idx#7
Inlining constant with var siblings (const signed byte) form_cursor_count#7
Inlining constant with var siblings (const byte) form_field_idx#8
Inlining constant with var siblings (const byte) keyboard_modifiers#2
Constant inlined dtvSetCpuBankSegment1::cpuBankIdx#0 = (byte)(const nomodify dword) PLANE_8BPP_CHUNKY/(word) $4000
Constant inlined dtvSetCpuBankSegment1::cpuBankIdx#3 = (const byte) gfx_init_plane_horisontal::gfxbCpuBank#0
Constant inlined gfx_mode::i#0 = (byte) 0
Constant inlined gfx_init_plane_charset8::cp#0 = (byte) 0
Constant inlined dtvSetCpuBankSegment1::cpuBankIdx#2 = (byte)(number) $4000/(number) $4000
Constant inlined gfx_init_plane_horisontal::gfxa#0 = (byte*)(word) $4000
Constant inlined form_field_idx#34 = (byte) 0
Constant inlined gfx_init_screen3::cx#0 = (byte) 0
Constant inlined apply_preset::i#0 = (byte) 0
Constant inlined gfx_init_plane_horisontal::ax#0 = (byte) 0
Constant inlined dtvSetCpuBankSegment1::cpuBankIdx#9 = (const byte) gfx_init_plane_charset8::gfxbCpuBank#0
Constant inlined gfx_init_charset::charset#0 = (const nomodify byte*) VIC_CHARSET_ROM
Constant inlined dtvSetCpuBankSegment1::cpuBankIdx#8 = (byte)(number) $4000/(number) $4000
Constant inlined gfx_init_plane_charset8::ch#0 = (byte) 0
Constant inlined dtvSetCpuBankSegment1::cpuBankIdx#5 = (const byte) gfx_init_plane_horisontal2::gfxbCpuBank#0
Constant inlined gfx_mode::dtv_control#0 = (byte) 0
Constant inlined gfx_mode::vic_control#1 = (const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(byte) 3|(const nomodify byte) VIC_ECM
Constant inlined gfx_mode::dtv_control#1 = (const nomodify byte) DTV_LINEAR
Constant inlined dtvSetCpuBankSegment1::cpuBankIdx#4 = (byte)(number) $4000/(number) $4000
Constant inlined gfx_mode::vic_control#0 = (const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(byte) 3
Constant inlined dtvSetCpuBankSegment1::cpuBankIdx#7 = (const byte) gfx_init_plane_vertical::gfxbCpuBank#0
Constant inlined dtvSetCpuBankSegment1::cpuBankIdx#6 = (byte)(number) $4000/(number) $4000
Constant inlined gfx_init_charset::chargen#0 = (const nomodify byte*) CHARGEN
Constant inlined bitmap_init::yoffs#0 = (byte*) 0
Constant inlined gfx_init_plane_horisontal2::ax#0 = (byte) 0
Constant inlined gfx_mode::cy#0 = (byte) 0
Constant inlined gfx_init_plane_fill::bx#0 = (byte) 0
Constant inlined gfx_init_screen1::ch#0 = (const nomodify byte*) VIC_SCREEN1
Constant inlined gfx_init_charset::c#0 = (byte) 0
Constant inlined print_str_lines::str#2 = (const byte*) FORM_TEXT
Constant inlined print_str_lines::str#1 = (const byte*) FORM_COLS
Constant inlined gfx_init_screen1::cx#0 = (byte) 0
Constant inlined gfx_init_plane_vertical::by#0 = (byte) 0
Constant inlined gfx_mode::j#0 = (byte) 0
Constant inlined keyboard_event_scan::col#0 = (byte) 0
Constant inlined apply_preset::preset#5 = (const byte*) preset_hi_stdchar
Constant inlined apply_preset::preset#4 = (const byte*) preset_mcbm
Constant inlined apply_preset::preset#7 = (const byte*) preset_twoplane
Constant inlined apply_preset::preset#6 = (const byte*) preset_hi_ecmchar
Constant inlined apply_preset::preset#9 = (const byte*) preset_sixsfred
Constant inlined apply_preset::preset#8 = (const byte*) preset_chunky
Constant inlined gfx_init_plane_horisontal::ay#0 = (byte) 0
Constant inlined gfx_init_plane_horisontal2::ay#0 = (byte) 0
Constant inlined gfx_init_plane_vertical::gfxb#0 = (byte*)(word) $4000+(const nomodify dword) PLANE_VERTICAL&(word) $3fff
Constant inlined get_vic_screen::return#4 = (const nomodify byte*) VIC_SCREEN4
Constant inlined apply_preset::preset#11 = (const byte*) preset_8bpppixelcell
Constant inlined gfx_init_screen0::cx#0 = (byte) 0
Constant inlined form_render_values::idx#0 = (byte) 0
Constant inlined get_vic_screen::return#3 = (const nomodify byte*) VIC_SCREEN3
Constant inlined apply_preset::preset#12 = (const byte*) preset_stdchar
Constant inlined get_vic_screen::return#6 = (const nomodify byte*) VIC_SCREEN0
Constant inlined gfx_mode::cx#0 = (byte) 0
Constant inlined get_vic_screen::return#0 = (const nomodify byte*) VIC_SCREEN0
Constant inlined get_vic_screen::return#2 = (const nomodify byte*) VIC_SCREEN2
Constant inlined get_vic_screen::return#1 = (const nomodify byte*) VIC_SCREEN1
Constant inlined apply_preset::preset#10 = (const byte*) preset_sixsfred2
Constant inlined bitmap_clear::y#0 = (byte) 0
Constant inlined keyboard_event_pressed::keycode#3 = (const nomodify byte) KEY_COMMODORE
Constant inlined keyboard_event_pressed::keycode#2 = (const nomodify byte) KEY_CTRL
Constant inlined keyboard_event_pressed::keycode#1 = (const nomodify byte) KEY_RSHIFT
Constant inlined keyboard_event_pressed::keycode#0 = (const nomodify byte) KEY_LSHIFT
Constant inlined gfx_init_screen0::ch#0 = (const nomodify byte*) VIC_SCREEN0
Constant inlined apply_preset::preset#1 = (const byte*) preset_stdchar
Constant inlined gfx_mode::col#0 = (const nomodify byte*) COLS
Constant inlined apply_preset::preset#3 = (const byte*) preset_stdbm
Constant inlined apply_preset::preset#2 = (const byte*) preset_ecmchar
Constant inlined bitmap_init::y#0 = (byte) 0
Constant inlined gfx_init_plane_charset8::col#0 = (byte) 0
Constant inlined get_plane::return#15 = (dword)(const nomodify byte*) VIC_SCREEN0
Constant inlined form_cursor_count#6 = (const nomodify signed byte) FORM_CURSOR_BLINK
Constant inlined gfx_init_screen1::cy#0 = (byte) 0
Constant inlined gfx_init_plane_vertical::bx#0 = (byte) 0
Constant inlined keyboard_events_size#0 = (byte) 0
Constant inlined get_plane::return#13 = (const nomodify dword) PLANE_FULL
Constant inlined form_cursor_count#7 = (const nomodify signed byte) FORM_CURSOR_BLINK/(signed byte) 2
Constant inlined get_plane::return#12 = (const nomodify dword) PLANE_BLANK
Constant inlined get_plane::return#11 = (const nomodify dword) PLANE_CHARSET8
Constant inlined get_plane::return#10 = (const nomodify dword) PLANE_VERTICAL2
Constant inlined get_plane::return#2 = (dword)(const nomodify byte*) VIC_SCREEN2
Constant inlined get_plane::return#3 = (dword)(const nomodify byte*) VIC_SCREEN3
Constant inlined form_control::return#5 = (byte) $ff
Constant inlined get_plane::return#0 = (dword)(const nomodify byte*) VIC_SCREEN0
Constant inlined print_str_at::at#1 = (const nomodify byte*) FORM_SCREEN+(byte)(number) $28*(number) 2+(byte) $a
Constant inlined get_plane::return#1 = (dword)(const nomodify byte*) VIC_SCREEN1
Constant inlined gfx_init_plane_horisontal2::gfxa#0 = (byte*)(word) $4000
Constant inlined get_plane::return#6 = (const nomodify dword) PLANE_8BPP_CHUNKY
Constant inlined get_plane::return#7 = (const nomodify dword) PLANE_HORISONTAL
Constant inlined gfx_init_plane_charset8::cr#0 = (byte) 0
Constant inlined form_control::return#1 = (byte) 0
Constant inlined gfx_init_screen2::ch#0 = (const nomodify byte*) VIC_SCREEN2
Constant inlined keyboard_modifiers#2 = (const nomodify byte) KEY_MODIFIER_LSHIFT
Constant inlined get_plane::return#4 = (dword)(const nomodify byte*) VIC_BITMAP
Constant inlined form_control::return#4 = (byte) 0
Constant inlined get_plane::return#5 = (dword)(const nomodify byte*) VIC_CHARSET_ROM
Constant inlined form_control::return#3 = (byte) 0
Constant inlined keyboard_modifiers#1 = (byte) 0
Constant inlined form_field_idx#8 = (byte) 0
Constant inlined get_plane::return#8 = (const nomodify dword) PLANE_VERTICAL
Constant inlined form_field_idx#7 = (const byte) form_fields_cnt-(byte) 1
Constant inlined get_plane::return#9 = (const nomodify dword) PLANE_HORISONTAL2
Constant inlined gfx_init_plane_charset8::chargen#0 = (const nomodify byte*) CHARGEN
Constant inlined gfx_init_plane_8bppchunky::gfxb#0 = (byte*) 16384
Constant inlined gfx_init_screen2::cx#0 = (byte) 0
Constant inlined gfx_init_plane_fill::fill#1 = (byte) 0
Constant inlined gfx_init_plane_8bppchunky::gfxb#2 = (byte*) 16384
Constant inlined gfx_init_plane_fill::fill#2 = (byte) $ff
Constant inlined gfx_init_plane_8bppchunky::x#0 = (word) 0
Constant inlined form_mode::i#0 = (byte) 0
Constant inlined gfx_init_screen0::cy#0 = (byte) 0
Constant inlined bitmap_clear::x#0 = (byte) 0
Constant inlined gfx_init_screen2::cy#0 = (byte) 0
Constant inlined keyboard_event_scan::keycode#0 = (byte) 0
Constant inlined gfx_init_vic_bitmap::l#0 = (byte) 0
Constant inlined gfx_init_plane_8bppchunky::gfxbCpuBank#0 = (byte)(const nomodify dword) PLANE_8BPP_CHUNKY/(word) $4000
Constant inlined gfx_init_plane_8bppchunky::gfxbCpuBank#1 = ++(byte)(const nomodify dword) PLANE_8BPP_CHUNKY/(word) $4000
Constant inlined gfx_init_screen4::cx#0 = (byte) 0
Constant inlined bitmap_init::x#0 = (byte) 0
Constant inlined form_cursor_count#26 = (const nomodify signed byte) FORM_CURSOR_BLINK/(signed byte) 2
Constant inlined bitmap_init::bitmap#0 = (const nomodify byte*) VIC_BITMAP
Constant inlined get_vic_charset::return#3 = (const nomodify byte*) VIC_CHARSET_ROM
Constant inlined render_preset_name::$13 = (const byte*) render_preset_name::name#2
Constant inlined render_preset_name::$14 = (const byte*) render_preset_name::name#3
Constant inlined gfx_init_plane_charset8::gfxa#0 = (byte*)(word) $4000
Constant inlined render_preset_name::$15 = (const byte*) render_preset_name::name#4
Constant inlined render_preset_name::$16 = (const byte*) render_preset_name::name#5
Constant inlined gfx_init_screen4::ch#0 = (const nomodify byte*) VIC_SCREEN4
Constant inlined get_vic_charset::return#0 = (const nomodify byte*) VIC_CHARSET_ROM
Constant inlined get_vic_charset::return#1 = (const nomodify byte*) VIC_BITMAP
Constant inlined render_preset_name::$12 = (const byte*) render_preset_name::name#1
Constant inlined keyboard_event_scan::row#0 = (byte) 0
Constant inlined bitmap_init::bits#0 = (byte) $80
Constant inlined gfx_init_plane_charset8::c#0 = (byte) 0
Constant inlined render_preset_name::$17 = (const byte*) render_preset_name::name#6
Constant inlined render_preset_name::$18 = (const byte*) render_preset_name::name#7
Constant inlined bitmap_init::bits#2 = (byte) $80
Constant inlined form_set_screen::y#0 = (byte) 0
Constant inlined render_preset_name::$19 = (const byte*) render_preset_name::name#8
Constant inlined gfx_init_screen3::cy#0 = (byte) 0
Constant inlined form_set_screen::screen#0 = (const nomodify byte*) FORM_SCREEN
Constant inlined print_set_screen::screen#0 = (const nomodify byte*) COLS
Constant inlined print_set_screen::screen#1 = (const nomodify byte*) FORM_SCREEN
Constant inlined gfx_init_plane_8bppchunky::y#0 = (byte) 0
Constant inlined render_preset_name::$20 = (const byte*) render_preset_name::name#9
Constant inlined render_preset_name::$21 = (const byte*) render_preset_name::name#10
Constant inlined render_preset_name::$22 = (const byte*) render_preset_name::name#11
Constant inlined render_preset_name::$23 = (const byte*) render_preset_name::name#12
Constant inlined gfx_init_plane_fill::by#0 = (byte) 0
Constant inlined gfx_init_plane_fill::fill#0 = (byte) $1b
Constant inlined dtvSetCpuBankSegment1::cpuBankIdx#12 = (byte)(number) $4000/(number) $4000
Constant inlined dtvSetCpuBankSegment1::cpuBankIdx#10 = (byte)(number) $4000/(number) $4000
Constant inlined form_preset = (const byte*) form_fields_val
Constant inlined gfx_mode::vic_control2#1 = (const nomodify byte) VIC_CSEL|(const nomodify byte) VIC_MCM
Constant inlined gfx_mode::vic_control2#0 = (const nomodify byte) VIC_CSEL
Constant inlined gfx_init_charset::l#0 = (byte) 0
Constant inlined gfx_init_screen4::cy#0 = (byte) 0
Constant inlined bitmap_init::$1 = >(const nomodify byte*) VIC_BITMAP
Constant inlined gfx_init_plane_fill::plane_addr#2 = (const nomodify dword) PLANE_FULL
Constant inlined gfx_init_plane_fill::plane_addr#0 = (const nomodify dword) PLANE_VERTICAL2
Constant inlined gfx_init_plane_fill::plane_addr#1 = (const nomodify dword) PLANE_BLANK
Constant inlined keyboard_event_get::return#0 = (byte) $ff
Constant inlined gfx_init_screen3::ch#0 = (const nomodify byte*) VIC_SCREEN3
Successful SSA optimization Pass2ConstantInlining
Inlining constant with var siblings (const byte*) render_preset_name::name#1
Inlining constant with var siblings (const byte*) render_preset_name::name#2
Inlining constant with var siblings (const byte*) render_preset_name::name#3
Inlining constant with var siblings (const byte*) render_preset_name::name#4
Inlining constant with var siblings (const byte*) render_preset_name::name#5
Inlining constant with var siblings (const byte*) render_preset_name::name#6
Inlining constant with var siblings (const byte*) render_preset_name::name#7
Inlining constant with var siblings (const byte*) render_preset_name::name#8
Inlining constant with var siblings (const byte*) render_preset_name::name#9
Inlining constant with var siblings (const byte*) render_preset_name::name#10
Inlining constant with var siblings (const byte*) render_preset_name::name#11
Inlining constant with var siblings (const byte*) render_preset_name::name#12
Consolidated array index constant in assignment *(gfx_init_vic_bitmap::lines_x+1 + gfx_init_vic_bitmap::$3)
Consolidated array index constant in assignment *(gfx_init_vic_bitmap::lines_y+1 + gfx_init_vic_bitmap::$4)
Successful SSA optimization Pass2ConstantAdditionElimination
Alias gfx_init_vic_bitmap::l#2 = gfx_init_vic_bitmap::$3 gfx_init_vic_bitmap::$4 
Successful SSA optimization Pass2AliasElimination
Consolidated constant strings into (const byte*) render_preset_name::name#1
Successful SSA optimization Pass2ConstantStringConsolidation
Inlining constant with var siblings (const byte*) render_preset_name::name#1
Inlining constant with var siblings (const byte*) render_preset_name::name#2
Inlining constant with var siblings (const byte*) render_preset_name::name#3
Inlining constant with var siblings (const byte*) render_preset_name::name#4
Inlining constant with var siblings (const byte*) render_preset_name::name#5
Inlining constant with var siblings (const byte*) render_preset_name::name#6
Inlining constant with var siblings (const byte*) render_preset_name::name#7
Inlining constant with var siblings (const byte*) render_preset_name::name#8
Inlining constant with var siblings (const byte*) render_preset_name::name#9
Inlining constant with var siblings (const byte*) render_preset_name::name#10
Inlining constant with var siblings (const byte*) render_preset_name::name#11
Inlining constant with var siblings (const byte*) render_preset_name::name#12
Constant inlined render_preset_name::name#12 = (const byte*) render_preset_name::name#1
Successful SSA optimization Pass2ConstantInlining
Inlining constant with var siblings (const byte*) render_preset_name::name#1
Inlining constant with var siblings (const byte*) render_preset_name::name#2
Inlining constant with var siblings (const byte*) render_preset_name::name#3
Inlining constant with var siblings (const byte*) render_preset_name::name#4
Inlining constant with var siblings (const byte*) render_preset_name::name#5
Inlining constant with var siblings (const byte*) render_preset_name::name#6
Inlining constant with var siblings (const byte*) render_preset_name::name#7
Inlining constant with var siblings (const byte*) render_preset_name::name#8
Inlining constant with var siblings (const byte*) render_preset_name::name#9
Inlining constant with var siblings (const byte*) render_preset_name::name#10
Inlining constant with var siblings (const byte*) render_preset_name::name#11
Inlining constant with var siblings (const byte*) render_preset_name::name#1
Inlining constant with var siblings (const byte*) render_preset_name::name#2
Inlining constant with var siblings (const byte*) render_preset_name::name#3
Inlining constant with var siblings (const byte*) render_preset_name::name#4
Inlining constant with var siblings (const byte*) render_preset_name::name#5
Inlining constant with var siblings (const byte*) render_preset_name::name#6
Inlining constant with var siblings (const byte*) render_preset_name::name#7
Inlining constant with var siblings (const byte*) render_preset_name::name#8
Inlining constant with var siblings (const byte*) render_preset_name::name#9
Inlining constant with var siblings (const byte*) render_preset_name::name#10
Inlining constant with var siblings (const byte*) render_preset_name::name#11
Added new block during phi lifting print_str_lines::@8(between print_str_lines::@1 and print_str_lines::@2)
Added new block during phi lifting print_str_lines::@9(between print_str_lines::@3 and print_str_lines::@2)
Added new block during phi lifting print_str_lines::@10(between print_str_lines::@2 and print_str_lines::@3)
Added new block during phi lifting print_ln::@3(between print_ln::@1 and print_ln::@1)
Added new block during phi lifting keyboard_event_scan::@25(between keyboard_event_scan::@9 and keyboard_event_scan::@7)
Added new block during phi lifting keyboard_event_scan::@26(between keyboard_event_scan::@11 and keyboard_event_scan::@10)
Added new block during phi lifting keyboard_event_scan::@27(between keyboard_event_scan::@10 and keyboard_event_scan::@11)
Added new block during phi lifting keyboard_event_scan::@28(between keyboard_event_scan::@13 and keyboard_event_scan::@11)
Added new block during phi lifting keyboard_event_scan::@29(between keyboard_event_scan::@22 and keyboard_event_scan::@2)
Added new block during phi lifting keyboard_event_scan::@30(between keyboard_event_scan::@23 and keyboard_event_scan::@3)
Added new block during phi lifting keyboard_event_scan::@31(between keyboard_event_scan::@24 and keyboard_event_scan::@return)
Added new block during phi lifting bitmap_init::@8(between bitmap_init::@2 and bitmap_init::@1)
Added new block during phi lifting bitmap_init::@9(between bitmap_init::@1 and bitmap_init::@2)
Added new block during phi lifting bitmap_init::@10(between bitmap_init::@6 and bitmap_init::@5)
Added new block during phi lifting bitmap_init::@11(between bitmap_init::@5 and bitmap_init::@6)
Added new block during phi lifting bitmap_clear::@4(between bitmap_clear::@3 and bitmap_clear::@1)
Added new block during phi lifting bitmap_clear::@5(between bitmap_clear::@2 and bitmap_clear::@2)
Added new block during phi lifting bitmap_line_xdyi::@5(between bitmap_line_xdyi::@2 and bitmap_line_xdyi::@1)
Added new block during phi lifting bitmap_line_xdyi::@6(between bitmap_line_xdyi::@4 and bitmap_line_xdyi::@2)
Added new block during phi lifting bitmap_line_xdyd::@5(between bitmap_line_xdyd::@2 and bitmap_line_xdyd::@1)
Added new block during phi lifting bitmap_line_xdyd::@6(between bitmap_line_xdyd::@4 and bitmap_line_xdyd::@2)
Added new block during phi lifting bitmap_line_ydxi::@5(between bitmap_line_ydxi::@2 and bitmap_line_ydxi::@1)
Added new block during phi lifting bitmap_line_ydxi::@6(between bitmap_line_ydxi::@4 and bitmap_line_ydxi::@2)
Added new block during phi lifting bitmap_line_ydxd::@5(between bitmap_line_ydxd::@2 and bitmap_line_ydxd::@1)
Added new block during phi lifting bitmap_line_ydxd::@6(between bitmap_line_ydxd::@4 and bitmap_line_ydxd::@2)
Added new block during phi lifting gfx_mode::@37(between gfx_mode::@1 and gfx_mode::@2)
Added new block during phi lifting gfx_mode::@38(between gfx_mode::@2 and gfx_mode::@3)
Added new block during phi lifting gfx_mode::@39(between gfx_mode::@3 and gfx_mode::@4)
Added new block during phi lifting gfx_mode::@40(between gfx_mode::@4 and gfx_mode::@5)
Added new block during phi lifting gfx_mode::@41(between gfx_mode::@5 and gfx_mode::@6)
Added new block during phi lifting gfx_mode::@42(between gfx_mode::@7 and gfx_mode::@8)
Added new block during phi lifting gfx_mode::@43(between gfx_mode::@22 and gfx_mode::@20)
Added new block during phi lifting gfx_mode::@44(between gfx_mode::@21 and gfx_mode::@21)
Added new block during phi lifting gfx_mode::@45(between gfx_mode::@25 and gfx_mode::@25)
Added new block during phi lifting gfx_mode::@46(between gfx_mode::@26 and gfx_mode::@26)
Added new block during phi lifting gfx_init_charset::@5(between gfx_init_charset::@3 and gfx_init_charset::@1)
Added new block during phi lifting gfx_init_charset::@6(between gfx_init_charset::@2 and gfx_init_charset::@2)
Added new block during phi lifting gfx_init_screen0::@4(between gfx_init_screen0::@3 and gfx_init_screen0::@1)
Added new block during phi lifting gfx_init_screen0::@5(between gfx_init_screen0::@2 and gfx_init_screen0::@2)
Added new block during phi lifting gfx_init_screen1::@4(between gfx_init_screen1::@3 and gfx_init_screen1::@1)
Added new block during phi lifting gfx_init_screen1::@5(between gfx_init_screen1::@2 and gfx_init_screen1::@2)
Added new block during phi lifting gfx_init_screen2::@4(between gfx_init_screen2::@3 and gfx_init_screen2::@1)
Added new block during phi lifting gfx_init_screen2::@5(between gfx_init_screen2::@2 and gfx_init_screen2::@2)
Added new block during phi lifting gfx_init_screen3::@4(between gfx_init_screen3::@3 and gfx_init_screen3::@1)
Added new block during phi lifting gfx_init_screen3::@5(between gfx_init_screen3::@2 and gfx_init_screen3::@2)
Added new block during phi lifting gfx_init_screen4::@4(between gfx_init_screen4::@3 and gfx_init_screen4::@1)
Added new block during phi lifting gfx_init_screen4::@5(between gfx_init_screen4::@2 and gfx_init_screen4::@2)
Added new block during phi lifting gfx_init_plane_8bppchunky::@10(between gfx_init_plane_8bppchunky::@5 and gfx_init_plane_8bppchunky::@1)
Added new block during phi lifting gfx_init_plane_8bppchunky::@11(between gfx_init_plane_8bppchunky::@3 and gfx_init_plane_8bppchunky::@2)
Added new block during phi lifting gfx_init_plane_8bppchunky::@12(between gfx_init_plane_8bppchunky::@2 and gfx_init_plane_8bppchunky::@3)
Added new block during phi lifting gfx_init_plane_horisontal::@10(between gfx_init_plane_horisontal::@6 and gfx_init_plane_horisontal::@1)
Added new block during phi lifting gfx_init_plane_horisontal::@11(between gfx_init_plane_horisontal::@4 and gfx_init_plane_horisontal::@2)
Added new block during phi lifting gfx_init_plane_horisontal2::@7(between gfx_init_plane_horisontal2::@3 and gfx_init_plane_horisontal2::@1)
Added new block during phi lifting gfx_init_plane_horisontal2::@8(between gfx_init_plane_horisontal2::@2 and gfx_init_plane_horisontal2::@2)
Added new block during phi lifting gfx_init_plane_vertical::@7(between gfx_init_plane_vertical::@3 and gfx_init_plane_vertical::@1)
Added new block during phi lifting gfx_init_plane_vertical::@8(between gfx_init_plane_vertical::@2 and gfx_init_plane_vertical::@2)
Added new block during phi lifting gfx_init_plane_charset8::@11(between gfx_init_plane_charset8::@7 and gfx_init_plane_charset8::@1)
Added new block during phi lifting gfx_init_plane_charset8::@12(between gfx_init_plane_charset8::@6 and gfx_init_plane_charset8::@2)
Added new block during phi lifting gfx_init_plane_charset8::@13(between gfx_init_plane_charset8::@4 and gfx_init_plane_charset8::@3)
Added new block during phi lifting gfx_init_plane_fill::@7(between gfx_init_plane_fill::@3 and gfx_init_plane_fill::@1)
Added new block during phi lifting gfx_init_plane_fill::@8(between gfx_init_plane_fill::@2 and gfx_init_plane_fill::@2)
Added new block during phi lifting form_mode::@21(between form_mode::@1 and form_mode::@1)
Added new block during phi lifting form_mode::@22(between form_mode::@6 and form_mode::@3)
Added new block during phi lifting form_set_screen::@2(between form_set_screen::@1 and form_set_screen::@1)
Added new block during phi lifting form_control::@25(between form_control::@22 and form_control::@1)
Added new block during phi lifting form_control::@26(between form_control::@10 and form_control::@17)
Added new block during phi lifting form_control::@27(between form_control::@16 and form_control::@17)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @3
Adding NOP phi() at start of @4
Adding NOP phi() at start of @5
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of gfx_mode::@11
Adding NOP phi() at start of gfx_mode::@17
Adding NOP phi() at start of gfx_mode::@19
Adding NOP phi() at start of gfx_mode::@24
Adding NOP phi() at start of gfx_mode::@27
Adding NOP phi() at start of gfx_mode::@35
Adding NOP phi() at start of gfx_mode::@10
Adding NOP phi() at start of keyboard_event_scan::@18
Adding NOP phi() at start of keyboard_event_scan::@19
Adding NOP phi() at start of get_vic_screen::@10
Adding NOP phi() at start of get_vic_screen::@5
Adding NOP phi() at start of get_vic_screen::@4
Adding NOP phi() at start of get_vic_screen::@3
Adding NOP phi() at start of get_vic_screen::@2
Adding NOP phi() at start of get_vic_screen::@1
Adding NOP phi() at start of get_vic_charset::@4
Adding NOP phi() at start of get_vic_charset::@2
Adding NOP phi() at start of get_vic_charset::@1
Adding NOP phi() at start of get_plane::@28
Adding NOP phi() at start of get_plane::@14
Adding NOP phi() at start of get_plane::@13
Adding NOP phi() at start of get_plane::@12
Adding NOP phi() at start of get_plane::@11
Adding NOP phi() at start of get_plane::@10
Adding NOP phi() at start of get_plane::@9
Adding NOP phi() at start of get_plane::@8
Adding NOP phi() at start of get_plane::@7
Adding NOP phi() at start of get_plane::@6
Adding NOP phi() at start of get_plane::@5
Adding NOP phi() at start of get_plane::@4
Adding NOP phi() at start of get_plane::@3
Adding NOP phi() at start of get_plane::@2
Adding NOP phi() at start of get_plane::@1
Adding NOP phi() at start of form_mode
Adding NOP phi() at start of form_mode::@8
Adding NOP phi() at start of form_mode::@9
Adding NOP phi() at start of form_mode::@10
Adding NOP phi() at start of form_mode::@11
Adding NOP phi() at start of form_mode::@12
Adding NOP phi() at start of form_mode::@13
Adding NOP phi() at start of form_mode::@14
Adding NOP phi() at start of form_mode::@5
Adding NOP phi() at start of render_preset_name::@23
Adding NOP phi() at start of render_preset_name::@24
Adding NOP phi() at start of render_preset_name::@11
Adding NOP phi() at start of render_preset_name::@10
Adding NOP phi() at start of render_preset_name::@9
Adding NOP phi() at start of render_preset_name::@8
Adding NOP phi() at start of render_preset_name::@7
Adding NOP phi() at start of render_preset_name::@6
Adding NOP phi() at start of render_preset_name::@5
Adding NOP phi() at start of render_preset_name::@4
Adding NOP phi() at start of render_preset_name::@3
Adding NOP phi() at start of render_preset_name::@2
Adding NOP phi() at start of render_preset_name::@1
Adding NOP phi() at start of form_render_values
Adding NOP phi() at start of apply_preset::@23
Adding NOP phi() at start of apply_preset::@11
Adding NOP phi() at start of apply_preset::@10
Adding NOP phi() at start of apply_preset::@9
Adding NOP phi() at start of apply_preset::@8
Adding NOP phi() at start of apply_preset::@7
Adding NOP phi() at start of apply_preset::@6
Adding NOP phi() at start of apply_preset::@5
Adding NOP phi() at start of apply_preset::@4
Adding NOP phi() at start of apply_preset::@3
Adding NOP phi() at start of apply_preset::@2
Adding NOP phi() at start of apply_preset::@1
Adding NOP phi() at start of form_control::@7
Adding NOP phi() at start of form_control::@23
Adding NOP phi() at start of form_control::@11
Adding NOP phi() at start of form_control::@18
Adding NOP phi() at start of form_set_screen
Adding NOP phi() at start of print_str_lines::@5
Adding NOP phi() at start of print_ln::@2
Adding NOP phi() at start of print_cls::@1
Adding NOP phi() at start of memset
Adding NOP phi() at start of memset::@1
Adding NOP phi() at start of gfx_init
Adding NOP phi() at start of gfx_init::@1
Adding NOP phi() at start of gfx_init::@2
Adding NOP phi() at start of gfx_init::@3
Adding NOP phi() at start of gfx_init::@4
Adding NOP phi() at start of gfx_init::@5
Adding NOP phi() at start of gfx_init::@6
Adding NOP phi() at start of gfx_init::@7
Adding NOP phi() at start of gfx_init::@8
Adding NOP phi() at start of gfx_init::@9
Adding NOP phi() at start of gfx_init::@10
Adding NOP phi() at start of gfx_init::@11
Adding NOP phi() at start of gfx_init::@12
Adding NOP phi() at start of gfx_init::@13
Adding NOP phi() at start of gfx_init::@14
Adding NOP phi() at start of gfx_init::@15
Adding NOP phi() at start of gfx_init_plane_full
Adding NOP phi() at start of gfx_init_plane_full::@1
Adding NOP phi() at start of gfx_init_plane_fill::@4
Adding NOP phi() at start of gfx_init_plane_fill::@6
Adding NOP phi() at start of gfx_init_plane_blank
Adding NOP phi() at start of gfx_init_plane_blank::@1
Adding NOP phi() at start of gfx_init_plane_vertical2
Adding NOP phi() at start of gfx_init_plane_vertical2::@1
Adding NOP phi() at start of gfx_init_plane_horisontal2
Adding NOP phi() at start of gfx_init_plane_horisontal2::@5
Adding NOP phi() at start of gfx_init_plane_horisontal2::@4
Adding NOP phi() at start of gfx_init_plane_horisontal2::@6
Adding NOP phi() at start of gfx_init_plane_vertical
Adding NOP phi() at start of gfx_init_plane_vertical::@5
Adding NOP phi() at start of gfx_init_plane_vertical::@4
Adding NOP phi() at start of gfx_init_plane_vertical::@6
Adding NOP phi() at start of gfx_init_plane_horisontal
Adding NOP phi() at start of gfx_init_plane_horisontal::@8
Adding NOP phi() at start of gfx_init_plane_horisontal::@7
Adding NOP phi() at start of gfx_init_plane_horisontal::@9
Adding NOP phi() at start of gfx_init_plane_charset8
Adding NOP phi() at start of gfx_init_plane_charset8::@10
Adding NOP phi() at start of gfx_init_plane_8bppchunky
Adding NOP phi() at start of gfx_init_plane_8bppchunky::@7
Adding NOP phi() at start of gfx_init_plane_8bppchunky::@6
Adding NOP phi() at start of gfx_init_plane_8bppchunky::@9
Adding NOP phi() at start of gfx_init_vic_bitmap
Adding NOP phi() at start of gfx_init_vic_bitmap::@3
Adding NOP phi() at start of gfx_init_vic_bitmap::@4
Adding NOP phi() at start of bitmap_line::@16
Adding NOP phi() at start of bitmap_line::@15
Adding NOP phi() at start of bitmap_line::@18
Adding NOP phi() at start of bitmap_line::@17
Adding NOP phi() at start of bitmap_line::@20
Adding NOP phi() at start of bitmap_line::@19
Adding NOP phi() at start of bitmap_line::@22
Adding NOP phi() at start of bitmap_line::@21
Adding NOP phi() at start of bitmap_init
Adding NOP phi() at start of bitmap_init::@3
Adding NOP phi() at start of bitmap_init::@4
Adding NOP phi() at start of gfx_init_screen4
Adding NOP phi() at start of gfx_init_screen3
Adding NOP phi() at start of gfx_init_screen2
Adding NOP phi() at start of gfx_init_screen1
Adding NOP phi() at start of gfx_init_screen0
CALL GRAPH
Calls in [] to main:5 
Calls in [main] to keyboard_init:12 gfx_init:14 form_mode:18 gfx_mode:20 
Calls in [gfx_mode] to get_plane:64 get_plane:87 get_vic_screen:110 get_vic_charset:116 get_vic_screen:127 keyboard_event_scan:164 keyboard_event_get:166 
Calls in [keyboard_event_scan] to keyboard_matrix_read:202 keyboard_event_pressed:213 keyboard_event_pressed:219 keyboard_event_pressed:226 keyboard_event_pressed:233 
Calls in [form_mode] to print_set_screen:338 print_cls:340 print_str_lines:342 print_set_screen:344 print_cls:346 print_str_lines:348 form_set_screen:350 form_render_values:352 render_preset_name:355 form_control:382 apply_preset:389 form_render_values:391 render_preset_name:394 
Calls in [render_preset_name] to print_str_at:419 
Calls in [form_render_values] to form_field_ptr:448 
Calls in [form_control] to form_field_ptr:490 keyboard_event_scan:501 keyboard_event_get:503 
Calls in [print_str_lines] to print_char:569 print_ln:574 
Calls in [print_cls] to memset:592 
Calls in [gfx_init] to gfx_init_screen0:609 gfx_init_screen1:611 gfx_init_screen2:613 gfx_init_screen3:615 gfx_init_screen4:617 gfx_init_charset:619 gfx_init_vic_bitmap:621 gfx_init_plane_8bppchunky:623 gfx_init_plane_charset8:625 gfx_init_plane_horisontal:627 gfx_init_plane_vertical:629 gfx_init_plane_horisontal2:631 gfx_init_plane_vertical2:633 gfx_init_plane_blank:635 gfx_init_plane_full:637 
Calls in [gfx_init_plane_full] to gfx_init_plane_fill:641 
Calls in [gfx_init_plane_fill] to dtvSetCpuBankSegment1:650 dtvSetCpuBankSegment1:665 
Calls in [gfx_init_plane_blank] to gfx_init_plane_fill:677 
Calls in [gfx_init_plane_vertical2] to gfx_init_plane_fill:681 
Calls in [gfx_init_plane_horisontal2] to dtvSetCpuBankSegment1:685 dtvSetCpuBankSegment1:699 
Calls in [gfx_init_plane_vertical] to dtvSetCpuBankSegment1:707 dtvSetCpuBankSegment1:719 
Calls in [gfx_init_plane_horisontal] to dtvSetCpuBankSegment1:727 dtvSetCpuBankSegment1:743 
Calls in [gfx_init_plane_charset8] to dtvSetCpuBankSegment1:754 dtvSetCpuBankSegment1:782 
Calls in [gfx_init_plane_8bppchunky] to dtvSetCpuBankSegment1:798 dtvSetCpuBankSegment1:807 dtvSetCpuBankSegment1:820 
Calls in [gfx_init_vic_bitmap] to bitmap_init:832 bitmap_clear:834 bitmap_line:843 
Calls in [bitmap_line] to bitmap_line_ydxi:861 bitmap_line_xdyi:874 bitmap_line_ydxd:888 bitmap_line_xdyd:900 bitmap_line_ydxd:916 bitmap_line_xdyd:928 bitmap_line_ydxi:942 bitmap_line_xdyi:954 
Calls in [bitmap_line_xdyi] to bitmap_plot:966 
Calls in [bitmap_line_ydxi] to bitmap_plot:1000 
Calls in [bitmap_line_xdyd] to bitmap_plot:1027 
Calls in [bitmap_line_ydxd] to bitmap_plot:1054 

Created 192 initial phi equivalence classes
Coalesced [21] form_cursor_count#61 ← form_cursor_count#16
Coalesced [22] keyboard_events_size#159 ← keyboard_events_size#24
Coalesced [23] form_field_idx#67 ← form_field_idx#18
Coalesced [29] gfx_mode::dtv_control#20 ← gfx_mode::dtv_control#2
Coalesced [33] gfx_mode::dtv_control#21 ← gfx_mode::dtv_control#3
Coalesced [37] gfx_mode::dtv_control#23 ← gfx_mode::dtv_control#4
Coalesced [41] gfx_mode::dtv_control#25 ← gfx_mode::dtv_control#5
Coalesced [45] gfx_mode::dtv_control#27 ← gfx_mode::dtv_control#6
Coalesced [53] gfx_mode::vic_control#7 ← gfx_mode::vic_control#2
Coalesced [63] get_plane::idx#17 ← get_plane::idx#0
Coalesced [86] get_plane::idx#16 ← get_plane::idx#1
Coalesced [109] get_vic_screen::idx#7 ← get_vic_screen::idx#0
Coalesced [126] get_vic_screen::idx#8 ← get_vic_screen::idx#1
Coalesced [130] gfx_mode::vic_colors#6 ← gfx_mode::vic_colors#0
Coalesced [132] gfx_mode::vic_colors#7 ← gfx_mode::vic_colors#3
Coalesced [133] gfx_mode::col#6 ← gfx_mode::col#3
Coalesced [163] keyboard_events_size#146 ← keyboard_events_size#24
Coalesced [171] gfx_mode::j#3 ← gfx_mode::j#1
Coalesced [177] gfx_mode::i#3 ← gfx_mode::i#1
Coalesced [178] gfx_mode::vic_colors#5 ← gfx_mode::vic_colors#1
Coalesced [179] gfx_mode::col#5 ← gfx_mode::col#1
Coalesced [180] gfx_mode::cy#5 ← gfx_mode::cy#1
Coalesced (already) [181] gfx_mode::vic_colors#8 ← gfx_mode::vic_colors#1
Coalesced (already) [182] gfx_mode::col#7 ← gfx_mode::col#1
Coalesced [183] gfx_mode::cx#3 ← gfx_mode::cx#1
Coalesced [184] gfx_mode::vic_control#8 ← gfx_mode::vic_control#5
Coalesced [185] gfx_mode::dtv_control#28 ← gfx_mode::dtv_control#13
Coalesced [186] gfx_mode::dtv_control#26 ← gfx_mode::dtv_control#11
Coalesced [187] gfx_mode::dtv_control#24 ← gfx_mode::dtv_control#10
Coalesced [188] gfx_mode::dtv_control#22 ← gfx_mode::dtv_control#15
Coalesced [189] gfx_mode::dtv_control#19 ← gfx_mode::dtv_control#14
Coalesced [193] keyboard_event_get::return#8 ← keyboard_event_get::return#1
Coalesced [194] keyboard_events_size#158 ← keyboard_events_size#4
Coalesced [197] keyboard_events_size#157 ← keyboard_events_size#100
Coalesced [199] keyboard_events_size#147 ← keyboard_events_size#97
Coalesced [207] keyboard_event_scan::keycode#17 ← keyboard_event_scan::keycode#1
Coalesced (already) [208] keyboard_events_size#150 ← keyboard_events_size#106
Coalesced [224] keyboard_modifiers#127 ← keyboard_modifiers#3
Coalesced [231] keyboard_modifiers#129 ← keyboard_modifiers#4
Coalesced [238] keyboard_modifiers#131 ← keyboard_modifiers#5
Coalesced [241] keyboard_modifiers#130 ← keyboard_modifiers#20
Coalesced [242] keyboard_modifiers#128 ← keyboard_modifiers#19
Coalesced [243] keyboard_modifiers#126 ← keyboard_modifiers#18
Coalesced [244] keyboard_event_scan::row#14 ← keyboard_event_scan::row#1
Coalesced [245] keyboard_event_scan::keycode#15 ← keyboard_event_scan::keycode#13
Coalesced (already) [246] keyboard_events_size#148 ← keyboard_events_size#100
Coalesced [247] keyboard_event_scan::keycode#19 ← keyboard_event_scan::keycode#11
Coalesced [248] keyboard_events_size#152 ← keyboard_events_size#106
Coalesced [258] keyboard_events_size#156 ← keyboard_events_size#2
Coalesced [264] keyboard_event_scan::keycode#16 ← keyboard_event_scan::keycode#14
Coalesced [265] keyboard_events_size#149 ← keyboard_events_size#105
Coalesced [266] keyboard_event_scan::col#8 ← keyboard_event_scan::col#1
Coalesced (already) [267] keyboard_event_scan::keycode#18 ← keyboard_event_scan::keycode#14
Coalesced (already) [268] keyboard_events_size#151 ← keyboard_events_size#105
Coalesced [272] keyboard_events_size#154 ← keyboard_events_size#1
Coalesced (already) [273] keyboard_events_size#155 ← keyboard_events_size#18
Coalesced (already) [274] keyboard_events_size#153 ← keyboard_events_size#18
Coalesced [354] render_preset_name::idx#13 ← render_preset_name::idx#0
Coalesced [375] form_cursor_count#62 ← form_cursor_count#1
Coalesced [376] keyboard_events_size#160 ← keyboard_events_size#27
Coalesced [377] form_field_idx#68 ← form_field_idx#1
Coalesced [378] form_mode::preset_current#9 ← form_mode::preset_current#0
Coalesced [393] render_preset_name::idx#14 ← render_preset_name::idx#1
Coalesced (already) [395] form_cursor_count#63 ← form_cursor_count#16
Coalesced (already) [396] keyboard_events_size#161 ← keyboard_events_size#24
Coalesced (already) [397] form_field_idx#69 ← form_field_idx#18
Coalesced [398] form_mode::preset_current#10 ← form_mode::preset_current#1
Coalesced (already) [399] form_cursor_count#64 ← form_cursor_count#16
Coalesced (already) [400] keyboard_events_size#162 ← keyboard_events_size#24
Coalesced (already) [401] form_field_idx#70 ← form_field_idx#18
Coalesced (already) [402] form_mode::preset_current#11 ← form_mode::preset_current#6
Coalesced [403] form_mode::i#3 ← form_mode::i#1
Coalesced [433] print_str_at::str#5 ← print_str_at::str#1
Coalesced [440] print_str_at::str#6 ← print_str_at::str#0
Coalesced [441] print_str_at::at#5 ← print_str_at::at#0
Coalesced [447] form_field_ptr::field_idx#4 ← form_field_ptr::field_idx#0
Coalesced [451] form_render_values::idx#5 ← form_render_values::idx#1
Coalesced [476] apply_preset::i#4 ← apply_preset::i#1
Coalesced [489] form_field_ptr::field_idx#3 ← form_field_ptr::field_idx#1
Coalesced (already) [500] keyboard_events_size#145 ← keyboard_events_size#47
Coalesced [515] form_field_idx#74 ← form_field_idx#31
Coalesced [518] form_field_idx#71 ← form_field_idx#6
Coalesced [522] form_field_idx#72 ← form_field_idx#5
Coalesced [530] form_cursor_count#67 ← form_cursor_count#15
Coalesced (already) [531] form_field_idx#75 ← form_field_idx#28
Coalesced (already) [536] form_cursor_count#66 ← form_cursor_count#15
Coalesced (already) [537] form_field_idx#73 ← form_field_idx#28
Coalesced (already) [538] form_cursor_count#68 ← form_cursor_count#15
Coalesced (already) [539] form_field_idx#76 ← form_field_idx#28
Coalesced [542] form_cursor_count#65 ← form_cursor_count#5
Coalesced [553] form_set_screen::line#3 ← form_set_screen::line#1
Coalesced [554] form_set_screen::y#3 ← form_set_screen::y#1
Coalesced [556] print_str_lines::str#11 ← print_str_lines::str#5
Not coalescing [557] print_char_cursor#72 ← print_screen#1
Coalesced [558] print_line_cursor#68 ← print_screen#1
Coalesced [562] print_str_lines::str#13 ← print_str_lines::str#3
Coalesced [563] print_char_cursor#74 ← print_char_cursor#24
Coalesced [570] print_char_cursor#77 ← print_char_cursor#28
Coalesced [575] print_str_lines::str#12 ← print_str_lines::str#0
Not coalescing [576] print_char_cursor#73 ← print_line_cursor#22
Coalesced [577] print_line_cursor#69 ← print_line_cursor#22
Coalesced (already) [578] print_str_lines::str#14 ← print_str_lines::str#0
Coalesced [579] print_char_cursor#75 ← print_char_cursor#42
Coalesced (already) [580] print_char_cursor#76 ← print_char_cursor#41
Coalesced [581] print_line_cursor#70 ← print_line_cursor#2
Coalesced (already) [587] print_line_cursor#71 ← print_line_cursor#22
Coalesced [604] memset::dst#5 ← memset::dst#1
Coalesced [606] print_screen#1 ← print_set_screen::screen#2
Coalesced [649] dtvSetCpuBankSegment1::cpuBankIdx#15 ← dtvSetCpuBankSegment1::cpuBankIdx#11
Coalesced [656] gfx_init_plane_fill::gfxb#7 ← gfx_init_plane_fill::gfxb#3
Coalesced [668] gfx_init_plane_fill::gfxb#5 ← gfx_init_plane_fill::gfxb#1
Coalesced [669] gfx_init_plane_fill::by#5 ← gfx_init_plane_fill::by#1
Coalesced (already) [670] gfx_init_plane_fill::gfxb#8 ← gfx_init_plane_fill::gfxb#1
Coalesced [671] gfx_init_plane_fill::bx#3 ← gfx_init_plane_fill::bx#1
Coalesced [688] gfx_init_plane_horisontal2::gfxa#6 ← gfx_init_plane_horisontal2::gfxa#3
Coalesced [702] gfx_init_plane_horisontal2::ay#5 ← gfx_init_plane_horisontal2::ay#1
Coalesced [703] gfx_init_plane_horisontal2::gfxa#5 ← gfx_init_plane_horisontal2::gfxa#1
Coalesced (already) [704] gfx_init_plane_horisontal2::gfxa#7 ← gfx_init_plane_horisontal2::gfxa#1
Coalesced [705] gfx_init_plane_horisontal2::ax#3 ← gfx_init_plane_horisontal2::ax#1
Coalesced [710] gfx_init_plane_vertical::gfxb#6 ← gfx_init_plane_vertical::gfxb#3
Coalesced [722] gfx_init_plane_vertical::gfxb#5 ← gfx_init_plane_vertical::gfxb#1
Coalesced [723] gfx_init_plane_vertical::by#5 ← gfx_init_plane_vertical::by#1
Coalesced (already) [724] gfx_init_plane_vertical::gfxb#7 ← gfx_init_plane_vertical::gfxb#1
Coalesced [725] gfx_init_plane_vertical::bx#3 ← gfx_init_plane_vertical::bx#1
Coalesced [730] gfx_init_plane_horisontal::gfxa#10 ← gfx_init_plane_horisontal::gfxa#6
Coalesced [736] gfx_init_plane_horisontal::gfxa#13 ← gfx_init_plane_horisontal::gfxa#2
Coalesced [746] gfx_init_plane_horisontal::ay#8 ← gfx_init_plane_horisontal::ay#1
Coalesced [747] gfx_init_plane_horisontal::gfxa#9 ← gfx_init_plane_horisontal::gfxa#7
Coalesced (already) [748] gfx_init_plane_horisontal::gfxa#11 ← gfx_init_plane_horisontal::gfxa#7
Coalesced [749] gfx_init_plane_horisontal::ax#6 ← gfx_init_plane_horisontal::ax#1
Coalesced [752] gfx_init_plane_horisontal::gfxa#12 ← gfx_init_plane_horisontal::gfxa#1
Coalesced [757] gfx_init_plane_charset8::chargen#10 ← gfx_init_plane_charset8::chargen#3
Coalesced [758] gfx_init_plane_charset8::gfxa#10 ← gfx_init_plane_charset8::gfxa#6
Coalesced [759] gfx_init_plane_charset8::col#10 ← gfx_init_plane_charset8::col#6
Coalesced [763] gfx_init_plane_charset8::bits#5 ← gfx_init_plane_charset8::bits#0
Coalesced [764] gfx_init_plane_charset8::gfxa#12 ← gfx_init_plane_charset8::gfxa#5
Coalesced [765] gfx_init_plane_charset8::col#12 ← gfx_init_plane_charset8::col#5
Not coalescing [769] gfx_init_plane_charset8::c#3 ← gfx_init_plane_charset8::col#2
Coalesced [785] gfx_init_plane_charset8::chargen#9 ← gfx_init_plane_charset8::chargen#1
Coalesced [786] gfx_init_plane_charset8::gfxa#9 ← gfx_init_plane_charset8::gfxa#1
Coalesced [787] gfx_init_plane_charset8::col#9 ← gfx_init_plane_charset8::col#1
Coalesced [788] gfx_init_plane_charset8::ch#9 ← gfx_init_plane_charset8::ch#1
Coalesced (already) [789] gfx_init_plane_charset8::chargen#11 ← gfx_init_plane_charset8::chargen#1
Coalesced (already) [790] gfx_init_plane_charset8::gfxa#11 ← gfx_init_plane_charset8::gfxa#1
Coalesced (already) [791] gfx_init_plane_charset8::col#11 ← gfx_init_plane_charset8::col#1
Coalesced [792] gfx_init_plane_charset8::cr#7 ← gfx_init_plane_charset8::cr#1
Coalesced [793] gfx_init_plane_charset8::bits#6 ← gfx_init_plane_charset8::bits#1
Coalesced (already) [794] gfx_init_plane_charset8::gfxa#13 ← gfx_init_plane_charset8::gfxa#1
Coalesced (already) [795] gfx_init_plane_charset8::col#13 ← gfx_init_plane_charset8::col#1
Coalesced [796] gfx_init_plane_charset8::cp#5 ← gfx_init_plane_charset8::cp#1
Coalesced [801] gfx_init_plane_8bppchunky::gfxb#8 ← gfx_init_plane_8bppchunky::gfxb#5
Coalesced [802] gfx_init_plane_8bppchunky::gfxbCpuBank#11 ← gfx_init_plane_8bppchunky::gfxbCpuBank#7
Coalesced [806] dtvSetCpuBankSegment1::cpuBankIdx#14 ← dtvSetCpuBankSegment1::cpuBankIdx#1
Coalesced [809] gfx_init_plane_8bppchunky::gfxbCpuBank#14 ← gfx_init_plane_8bppchunky::gfxbCpuBank#2
Coalesced [823] gfx_init_plane_8bppchunky::gfxb#7 ← gfx_init_plane_8bppchunky::gfxb#1
Coalesced [824] gfx_init_plane_8bppchunky::y#8 ← gfx_init_plane_8bppchunky::y#1
Coalesced [825] gfx_init_plane_8bppchunky::gfxbCpuBank#10 ← gfx_init_plane_8bppchunky::gfxbCpuBank#8
Coalesced (already) [826] gfx_init_plane_8bppchunky::gfxb#9 ← gfx_init_plane_8bppchunky::gfxb#1
Coalesced [827] gfx_init_plane_8bppchunky::x#6 ← gfx_init_plane_8bppchunky::x#1
Coalesced (already) [828] gfx_init_plane_8bppchunky::gfxbCpuBank#12 ← gfx_init_plane_8bppchunky::gfxbCpuBank#8
Coalesced [829] gfx_init_plane_8bppchunky::gfxb#10 ← gfx_init_plane_8bppchunky::gfxb#3
Coalesced (already) [830] gfx_init_plane_8bppchunky::gfxbCpuBank#13 ← gfx_init_plane_8bppchunky::gfxbCpuBank#4
Coalesced [845] gfx_init_vic_bitmap::l#5 ← gfx_init_vic_bitmap::l#1
Coalesced [856] bitmap_line_ydxi::xd#8 ← bitmap_line_ydxi::xd#0
Coalesced [857] bitmap_line_ydxi::x#9 ← bitmap_line_ydxi::x#0
Coalesced [858] bitmap_line_ydxi::y#9 ← bitmap_line_ydxi::y#0
Coalesced [859] bitmap_line_ydxi::yd#8 ← bitmap_line_ydxi::yd#0
Coalesced [860] bitmap_line_ydxi::y1#8 ← bitmap_line_ydxi::y1#0
Coalesced [869] bitmap_line_xdyi::yd#8 ← bitmap_line_xdyi::yd#0
Coalesced [870] bitmap_line_xdyi::x#9 ← bitmap_line_xdyi::x#0
Coalesced [871] bitmap_line_xdyi::y#9 ← bitmap_line_xdyi::y#0
Coalesced [872] bitmap_line_xdyi::xd#8 ← bitmap_line_xdyi::xd#0
Coalesced [873] bitmap_line_xdyi::x1#8 ← bitmap_line_xdyi::x1#0
Coalesced [883] bitmap_line_ydxd::xd#7 ← bitmap_line_ydxd::xd#0
Coalesced [884] bitmap_line_ydxd::x#8 ← bitmap_line_ydxd::x#0
Coalesced [885] bitmap_line_ydxd::y#9 ← bitmap_line_ydxd::y#0
Coalesced [886] bitmap_line_ydxd::yd#7 ← bitmap_line_ydxd::yd#0
Coalesced [887] bitmap_line_ydxd::y1#7 ← bitmap_line_ydxd::y1#0
Coalesced [895] bitmap_line_xdyd::yd#8 ← bitmap_line_xdyd::yd#0
Coalesced [896] bitmap_line_xdyd::x#9 ← bitmap_line_xdyd::x#0
Coalesced [897] bitmap_line_xdyd::y#9 ← bitmap_line_xdyd::y#0
Coalesced [898] bitmap_line_xdyd::xd#8 ← bitmap_line_xdyd::xd#0
Coalesced [899] bitmap_line_xdyd::x1#8 ← bitmap_line_xdyd::x1#0
Coalesced [911] bitmap_line_ydxd::xd#8 ← bitmap_line_ydxd::xd#1
Coalesced [912] bitmap_line_ydxd::x#9 ← bitmap_line_ydxd::x#1
Coalesced [913] bitmap_line_ydxd::y#10 ← bitmap_line_ydxd::y#1
Coalesced [914] bitmap_line_ydxd::yd#8 ← bitmap_line_ydxd::yd#1
Coalesced [915] bitmap_line_ydxd::y1#8 ← bitmap_line_ydxd::y1#1
Coalesced [923] bitmap_line_xdyd::yd#7 ← bitmap_line_xdyd::yd#1
Coalesced [924] bitmap_line_xdyd::x#8 ← bitmap_line_xdyd::x#1
Coalesced [925] bitmap_line_xdyd::y#8 ← bitmap_line_xdyd::y#1
Coalesced [926] bitmap_line_xdyd::xd#7 ← bitmap_line_xdyd::xd#1
Coalesced [927] bitmap_line_xdyd::x1#7 ← bitmap_line_xdyd::x1#1
Coalesced [937] bitmap_line_ydxi::xd#7 ← bitmap_line_ydxi::xd#1
Coalesced [938] bitmap_line_ydxi::x#8 ← bitmap_line_ydxi::x#1
Coalesced [939] bitmap_line_ydxi::y#8 ← bitmap_line_ydxi::y#1
Coalesced [940] bitmap_line_ydxi::yd#7 ← bitmap_line_ydxi::yd#1
Coalesced [941] bitmap_line_ydxi::y1#7 ← bitmap_line_ydxi::y1#1
Coalesced [949] bitmap_line_xdyi::yd#7 ← bitmap_line_xdyi::yd#1
Coalesced [950] bitmap_line_xdyi::x#8 ← bitmap_line_xdyi::x#1
Coalesced [951] bitmap_line_xdyi::y#8 ← bitmap_line_xdyi::y#1
Coalesced [952] bitmap_line_xdyi::xd#7 ← bitmap_line_xdyi::xd#1
Coalesced [953] bitmap_line_xdyi::x1#7 ← bitmap_line_xdyi::x1#1
Coalesced [958] bitmap_line_xdyi::x#10 ← bitmap_line_xdyi::x#6
Coalesced [959] bitmap_line_xdyi::y#10 ← bitmap_line_xdyi::y#5
Coalesced [960] bitmap_line_xdyi::e#7 ← bitmap_line_xdyi::e#0
Coalesced [964] bitmap_plot::x#6 ← bitmap_plot::x#0
Coalesced [965] bitmap_plot::y#6 ← bitmap_plot::y#0
Coalesced [972] bitmap_line_xdyi::y#12 ← bitmap_line_xdyi::y#2
Coalesced [973] bitmap_line_xdyi::e#9 ← bitmap_line_xdyi::e#2
Coalesced [978] bitmap_line_xdyi::x#11 ← bitmap_line_xdyi::x#2
Coalesced [979] bitmap_line_xdyi::y#11 ← bitmap_line_xdyi::y#6
Coalesced [980] bitmap_line_xdyi::e#8 ← bitmap_line_xdyi::e#6
Coalesced (already) [981] bitmap_line_xdyi::y#13 ← bitmap_line_xdyi::y#3
Coalesced [982] bitmap_line_xdyi::e#10 ← bitmap_line_xdyi::e#1
Coalesced [992] bitmap_line_ydxi::x#10 ← bitmap_line_ydxi::x#5
Coalesced [993] bitmap_line_ydxi::y#10 ← bitmap_line_ydxi::y#6
Coalesced [994] bitmap_line_ydxi::e#7 ← bitmap_line_ydxi::e#0
Coalesced [998] bitmap_plot::x#8 ← bitmap_plot::x#2
Coalesced [999] bitmap_plot::y#8 ← bitmap_plot::y#2
Coalesced [1006] bitmap_line_ydxi::x#12 ← bitmap_line_ydxi::x#2
Coalesced [1007] bitmap_line_ydxi::e#9 ← bitmap_line_ydxi::e#2
Coalesced [1012] bitmap_line_ydxi::x#11 ← bitmap_line_ydxi::x#6
Coalesced [1013] bitmap_line_ydxi::y#11 ← bitmap_line_ydxi::y#2
Coalesced [1014] bitmap_line_ydxi::e#8 ← bitmap_line_ydxi::e#6
Coalesced (already) [1015] bitmap_line_ydxi::x#13 ← bitmap_line_ydxi::x#3
Coalesced [1016] bitmap_line_ydxi::e#10 ← bitmap_line_ydxi::e#1
Coalesced [1019] bitmap_line_xdyd::x#10 ← bitmap_line_xdyd::x#6
Coalesced [1020] bitmap_line_xdyd::y#10 ← bitmap_line_xdyd::y#5
Coalesced [1021] bitmap_line_xdyd::e#7 ← bitmap_line_xdyd::e#0
Coalesced [1025] bitmap_plot::x#5 ← bitmap_plot::x#1
Coalesced [1026] bitmap_plot::y#5 ← bitmap_plot::y#1
Coalesced [1033] bitmap_line_xdyd::y#12 ← bitmap_line_xdyd::y#2
Coalesced [1034] bitmap_line_xdyd::e#9 ← bitmap_line_xdyd::e#2
Coalesced [1039] bitmap_line_xdyd::x#11 ← bitmap_line_xdyd::x#2
Coalesced [1040] bitmap_line_xdyd::y#11 ← bitmap_line_xdyd::y#6
Coalesced [1041] bitmap_line_xdyd::e#8 ← bitmap_line_xdyd::e#6
Coalesced (already) [1042] bitmap_line_xdyd::y#13 ← bitmap_line_xdyd::y#3
Coalesced [1043] bitmap_line_xdyd::e#10 ← bitmap_line_xdyd::e#1
Coalesced [1046] bitmap_line_ydxd::x#10 ← bitmap_line_ydxd::x#5
Coalesced [1047] bitmap_line_ydxd::y#11 ← bitmap_line_ydxd::y#7
Coalesced [1048] bitmap_line_ydxd::e#7 ← bitmap_line_ydxd::e#0
Coalesced [1052] bitmap_plot::x#7 ← bitmap_plot::x#3
Coalesced [1053] bitmap_plot::y#7 ← bitmap_plot::y#3
Coalesced [1060] bitmap_line_ydxd::x#12 ← bitmap_line_ydxd::x#2
Coalesced [1061] bitmap_line_ydxd::e#9 ← bitmap_line_ydxd::e#2
Coalesced [1066] bitmap_line_ydxd::x#11 ← bitmap_line_ydxd::x#6
Coalesced [1067] bitmap_line_ydxd::y#12 ← bitmap_line_ydxd::y#3
Coalesced [1068] bitmap_line_ydxd::e#8 ← bitmap_line_ydxd::e#6
Coalesced (already) [1069] bitmap_line_ydxd::x#13 ← bitmap_line_ydxd::x#3
Coalesced [1070] bitmap_line_ydxd::e#10 ← bitmap_line_ydxd::e#1
Coalesced [1074] bitmap_clear::bitmap#7 ← bitmap_clear::bitmap#3
Coalesced [1083] bitmap_clear::bitmap#6 ← bitmap_clear::bitmap#1
Coalesced [1084] bitmap_clear::y#5 ← bitmap_clear::y#1
Coalesced (already) [1085] bitmap_clear::bitmap#8 ← bitmap_clear::bitmap#1
Coalesced [1086] bitmap_clear::x#3 ← bitmap_clear::x#1
Coalesced [1109] bitmap_init::yoffs#7 ← bitmap_init::yoffs#1
Coalesced [1114] bitmap_init::y#5 ← bitmap_init::y#1
Coalesced [1115] bitmap_init::yoffs#5 ← bitmap_init::yoffs#4
Coalesced (already) [1116] bitmap_init::yoffs#6 ← bitmap_init::yoffs#2
Coalesced [1117] bitmap_init::x#5 ← bitmap_init::x#1
Coalesced [1118] bitmap_init::bits#5 ← bitmap_init::bits#4
Coalesced [1119] bitmap_init::bits#6 ← bitmap_init::bits#1
Coalesced [1122] gfx_init_charset::chargen#6 ← gfx_init_charset::chargen#3
Coalesced [1123] gfx_init_charset::charset#6 ← gfx_init_charset::charset#3
Coalesced [1134] gfx_init_charset::chargen#5 ← gfx_init_charset::chargen#1
Coalesced [1135] gfx_init_charset::charset#5 ← gfx_init_charset::charset#1
Coalesced [1136] gfx_init_charset::c#5 ← gfx_init_charset::c#1
Coalesced (already) [1137] gfx_init_charset::chargen#7 ← gfx_init_charset::chargen#1
Coalesced (already) [1138] gfx_init_charset::charset#7 ← gfx_init_charset::charset#1
Coalesced [1139] gfx_init_charset::l#3 ← gfx_init_charset::l#1
Coalesced [1142] gfx_init_screen4::ch#6 ← gfx_init_screen4::ch#3
Coalesced [1151] gfx_init_screen4::ch#5 ← gfx_init_screen4::ch#1
Coalesced [1152] gfx_init_screen4::cy#5 ← gfx_init_screen4::cy#1
Coalesced (already) [1153] gfx_init_screen4::ch#7 ← gfx_init_screen4::ch#1
Coalesced [1154] gfx_init_screen4::cx#3 ← gfx_init_screen4::cx#1
Coalesced [1157] gfx_init_screen3::ch#6 ← gfx_init_screen3::ch#3
Coalesced [1170] gfx_init_screen3::cy#5 ← gfx_init_screen3::cy#1
Coalesced [1171] gfx_init_screen3::ch#5 ← gfx_init_screen3::ch#1
Coalesced [1172] gfx_init_screen3::cx#3 ← gfx_init_screen3::cx#1
Coalesced (already) [1173] gfx_init_screen3::ch#7 ← gfx_init_screen3::ch#1
Coalesced [1176] gfx_init_screen2::ch#6 ← gfx_init_screen2::ch#3
Coalesced [1190] gfx_init_screen2::cy#5 ← gfx_init_screen2::cy#1
Coalesced [1191] gfx_init_screen2::ch#5 ← gfx_init_screen2::ch#1
Coalesced [1192] gfx_init_screen2::cx#3 ← gfx_init_screen2::cx#1
Coalesced (already) [1193] gfx_init_screen2::ch#7 ← gfx_init_screen2::ch#1
Coalesced [1196] gfx_init_screen1::ch#6 ← gfx_init_screen1::ch#3
Coalesced [1207] gfx_init_screen1::cy#5 ← gfx_init_screen1::cy#1
Coalesced [1208] gfx_init_screen1::ch#5 ← gfx_init_screen1::ch#1
Coalesced [1209] gfx_init_screen1::cx#3 ← gfx_init_screen1::cx#1
Coalesced (already) [1210] gfx_init_screen1::ch#7 ← gfx_init_screen1::ch#1
Coalesced [1213] gfx_init_screen0::ch#6 ← gfx_init_screen0::ch#3
Coalesced [1226] gfx_init_screen0::cy#5 ← gfx_init_screen0::cy#1
Coalesced [1227] gfx_init_screen0::ch#5 ← gfx_init_screen0::ch#1
Coalesced [1228] gfx_init_screen0::cx#3 ← gfx_init_screen0::cx#1
Coalesced (already) [1229] gfx_init_screen0::ch#7 ← gfx_init_screen0::ch#1
Coalesced down to 120 phi equivalence classes
Culled Empty Block (label) @1
Culled Empty Block (label) @2
Culled Empty Block (label) @3
Culled Empty Block (label) @5
Culled Empty Block (label) main::@4
Culled Empty Block (label) main::@6
Culled Empty Block (label) gfx_mode::@24
Culled Empty Block (label) gfx_mode::@27
Culled Empty Block (label) gfx_mode::@45
Culled Empty Block (label) gfx_mode::@10
Culled Empty Block (label) gfx_mode::@46
Culled Empty Block (label) gfx_mode::@43
Culled Empty Block (label) gfx_mode::@44
Culled Empty Block (label) gfx_mode::@42
Culled Empty Block (label) gfx_mode::@41
Culled Empty Block (label) gfx_mode::@40
Culled Empty Block (label) gfx_mode::@39
Culled Empty Block (label) gfx_mode::@38
Culled Empty Block (label) gfx_mode::@37
Culled Empty Block (label) keyboard_event_get::@1
Culled Empty Block (label) keyboard_event_scan::@31
Culled Empty Block (label) keyboard_event_scan::@30
Culled Empty Block (label) keyboard_event_scan::@29
Culled Empty Block (label) keyboard_event_scan::@25
Culled Empty Block (label) keyboard_event_scan::@8
Culled Empty Block (label) keyboard_event_scan::@26
Culled Empty Block (label) keyboard_event_scan::@28
Culled Empty Block (label) keyboard_event_scan::@27
Culled Empty Block (label) get_vic_screen::@10
Culled Empty Block (label) get_vic_screen::@4
Culled Empty Block (label) get_vic_screen::@3
Culled Empty Block (label) get_vic_screen::@2
Culled Empty Block (label) get_vic_screen::@1
Culled Empty Block (label) get_vic_charset::@4
Culled Empty Block (label) get_vic_charset::@1
Culled Empty Block (label) get_plane::@28
Culled Empty Block (label) get_plane::@13
Culled Empty Block (label) get_plane::@12
Culled Empty Block (label) get_plane::@11
Culled Empty Block (label) get_plane::@10
Culled Empty Block (label) get_plane::@9
Culled Empty Block (label) get_plane::@8
Culled Empty Block (label) get_plane::@7
Culled Empty Block (label) get_plane::@6
Culled Empty Block (label) get_plane::@5
Culled Empty Block (label) get_plane::@4
Culled Empty Block (label) get_plane::@3
Culled Empty Block (label) get_plane::@2
Culled Empty Block (label) get_plane::@1
Culled Empty Block (label) form_mode::@20
Culled Empty Block (label) form_mode::@22
Culled Empty Block (label) form_mode::@21
Culled Empty Block (label) render_preset_name::@23
Culled Empty Block (label) render_preset_name::@24
Culled Empty Block (label) render_preset_name::@10
Culled Empty Block (label) render_preset_name::@9
Culled Empty Block (label) render_preset_name::@8
Culled Empty Block (label) render_preset_name::@7
Culled Empty Block (label) render_preset_name::@6
Culled Empty Block (label) render_preset_name::@5
Culled Empty Block (label) render_preset_name::@4
Culled Empty Block (label) render_preset_name::@3
Culled Empty Block (label) render_preset_name::@2
Culled Empty Block (label) render_preset_name::@1
Culled Empty Block (label) apply_preset::@23
Culled Empty Block (label) apply_preset::@10
Culled Empty Block (label) apply_preset::@9
Culled Empty Block (label) apply_preset::@8
Culled Empty Block (label) apply_preset::@7
Culled Empty Block (label) apply_preset::@6
Culled Empty Block (label) apply_preset::@5
Culled Empty Block (label) apply_preset::@4
Culled Empty Block (label) apply_preset::@3
Culled Empty Block (label) apply_preset::@2
Culled Empty Block (label) apply_preset::@1
Culled Empty Block (label) form_control::@7
Culled Empty Block (label) form_control::@11
Culled Empty Block (label) form_control::@18
Culled Empty Block (label) form_control::@15
Culled Empty Block (label) form_set_screen::@2
Culled Empty Block (label) print_str_lines::@8
Culled Empty Block (label) print_str_lines::@6
Culled Empty Block (label) print_str_lines::@9
Culled Empty Block (label) print_str_lines::@10
Culled Empty Block (label) print_ln::@2
Culled Empty Block (label) print_ln::@3
Culled Empty Block (label) print_cls::@1
Culled Empty Block (label) memset::@1
Culled Empty Block (label) gfx_init::@15
Culled Empty Block (label) gfx_init_plane_full::@1
Culled Empty Block (label) gfx_init_plane_fill::@6
Culled Empty Block (label) gfx_init_plane_fill::@7
Culled Empty Block (label) gfx_init_plane_fill::@8
Culled Empty Block (label) gfx_init_plane_blank::@1
Culled Empty Block (label) gfx_init_plane_vertical2::@1
Culled Empty Block (label) gfx_init_plane_horisontal2::@5
Culled Empty Block (label) gfx_init_plane_horisontal2::@6
Culled Empty Block (label) gfx_init_plane_horisontal2::@7
Culled Empty Block (label) gfx_init_plane_horisontal2::@8
Culled Empty Block (label) gfx_init_plane_vertical::@5
Culled Empty Block (label) gfx_init_plane_vertical::@6
Culled Empty Block (label) gfx_init_plane_vertical::@7
Culled Empty Block (label) gfx_init_plane_vertical::@8
Culled Empty Block (label) gfx_init_plane_horisontal::@8
Culled Empty Block (label) gfx_init_plane_horisontal::@9
Culled Empty Block (label) gfx_init_plane_horisontal::@10
Culled Empty Block (label) gfx_init_plane_horisontal::@11
Culled Empty Block (label) gfx_init_plane_charset8::@10
Culled Empty Block (label) gfx_init_plane_charset8::@11
Culled Empty Block (label) gfx_init_plane_charset8::@12
Culled Empty Block (label) gfx_init_plane_charset8::@13
Culled Empty Block (label) gfx_init_plane_8bppchunky::@7
Culled Empty Block (label) gfx_init_plane_8bppchunky::@9
Culled Empty Block (label) gfx_init_plane_8bppchunky::@10
Culled Empty Block (label) gfx_init_plane_8bppchunky::@11
Culled Empty Block (label) gfx_init_plane_8bppchunky::@12
Culled Empty Block (label) gfx_init_vic_bitmap::@4
Culled Empty Block (label) bitmap_line::@16
Culled Empty Block (label) bitmap_line::@15
Culled Empty Block (label) bitmap_line::@18
Culled Empty Block (label) bitmap_line::@17
Culled Empty Block (label) bitmap_line::@20
Culled Empty Block (label) bitmap_line::@19
Culled Empty Block (label) bitmap_line::@22
Culled Empty Block (label) bitmap_line::@21
Culled Empty Block (label) bitmap_line_xdyi::@5
Culled Empty Block (label) bitmap_line_xdyi::@6
Culled Empty Block (label) bitmap_line_ydxi::@5
Culled Empty Block (label) bitmap_line_ydxi::@6
Culled Empty Block (label) bitmap_line_xdyd::@5
Culled Empty Block (label) bitmap_line_xdyd::@6
Culled Empty Block (label) bitmap_line_ydxd::@5
Culled Empty Block (label) bitmap_line_ydxd::@6
Culled Empty Block (label) bitmap_clear::@4
Culled Empty Block (label) bitmap_clear::@5
Culled Empty Block (label) bitmap_init::@3
Culled Empty Block (label) bitmap_init::@4
Culled Empty Block (label) bitmap_init::@10
Culled Empty Block (label) bitmap_init::@11
Culled Empty Block (label) bitmap_init::@8
Culled Empty Block (label) gfx_init_charset::@5
Culled Empty Block (label) gfx_init_charset::@6
Culled Empty Block (label) gfx_init_screen4::@4
Culled Empty Block (label) gfx_init_screen4::@5
Culled Empty Block (label) gfx_init_screen3::@4
Culled Empty Block (label) gfx_init_screen3::@5
Culled Empty Block (label) gfx_init_screen2::@4
Culled Empty Block (label) gfx_init_screen2::@5
Culled Empty Block (label) gfx_init_screen1::@4
Culled Empty Block (label) gfx_init_screen1::@5
Culled Empty Block (label) gfx_init_screen0::@4
Culled Empty Block (label) gfx_init_screen0::@5
Renumbering block @4 to @1
Renumbering block memset::@2 to memset::@1
Renumbering block memset::@3 to memset::@2
Renumbering block memset::@4 to memset::@3
Renumbering block print_str_lines::@7 to print_str_lines::@6
Renumbering block keyboard_event_scan::@9 to keyboard_event_scan::@8
Renumbering block keyboard_event_scan::@10 to keyboard_event_scan::@9
Renumbering block keyboard_event_scan::@11 to keyboard_event_scan::@10
Renumbering block keyboard_event_scan::@12 to keyboard_event_scan::@11
Renumbering block keyboard_event_scan::@13 to keyboard_event_scan::@12
Renumbering block keyboard_event_scan::@14 to keyboard_event_scan::@13
Renumbering block keyboard_event_scan::@15 to keyboard_event_scan::@14
Renumbering block keyboard_event_scan::@16 to keyboard_event_scan::@15
Renumbering block keyboard_event_scan::@17 to keyboard_event_scan::@16
Renumbering block keyboard_event_scan::@18 to keyboard_event_scan::@17
Renumbering block keyboard_event_scan::@19 to keyboard_event_scan::@18
Renumbering block keyboard_event_scan::@20 to keyboard_event_scan::@19
Renumbering block keyboard_event_scan::@21 to keyboard_event_scan::@20
Renumbering block keyboard_event_scan::@22 to keyboard_event_scan::@21
Renumbering block keyboard_event_scan::@23 to keyboard_event_scan::@22
Renumbering block keyboard_event_scan::@24 to keyboard_event_scan::@23
Renumbering block keyboard_event_get::@2 to keyboard_event_get::@1
Renumbering block bitmap_init::@5 to bitmap_init::@3
Renumbering block bitmap_init::@6 to bitmap_init::@4
Renumbering block bitmap_init::@7 to bitmap_init::@5
Renumbering block bitmap_init::@9 to bitmap_init::@6
Renumbering block main::@5 to main::@4
Renumbering block get_plane::@14 to get_plane::@1
Renumbering block get_plane::@15 to get_plane::@2
Renumbering block get_plane::@16 to get_plane::@3
Renumbering block get_plane::@17 to get_plane::@4
Renumbering block get_plane::@18 to get_plane::@5
Renumbering block get_plane::@19 to get_plane::@6
Renumbering block get_plane::@20 to get_plane::@7
Renumbering block get_plane::@21 to get_plane::@8
Renumbering block get_plane::@22 to get_plane::@9
Renumbering block get_plane::@23 to get_plane::@10
Renumbering block get_plane::@24 to get_plane::@11
Renumbering block get_plane::@25 to get_plane::@12
Renumbering block get_plane::@26 to get_plane::@13
Renumbering block get_plane::@27 to get_plane::@14
Renumbering block get_vic_screen::@5 to get_vic_screen::@1
Renumbering block get_vic_screen::@6 to get_vic_screen::@2
Renumbering block get_vic_screen::@7 to get_vic_screen::@3
Renumbering block get_vic_screen::@8 to get_vic_screen::@4
Renumbering block get_vic_screen::@9 to get_vic_screen::@5
Renumbering block get_vic_charset::@2 to get_vic_charset::@1
Renumbering block get_vic_charset::@3 to get_vic_charset::@2
Renumbering block apply_preset::@11 to apply_preset::@1
Renumbering block apply_preset::@12 to apply_preset::@2
Renumbering block apply_preset::@13 to apply_preset::@3
Renumbering block apply_preset::@14 to apply_preset::@4
Renumbering block apply_preset::@15 to apply_preset::@5
Renumbering block apply_preset::@16 to apply_preset::@6
Renumbering block apply_preset::@17 to apply_preset::@7
Renumbering block apply_preset::@18 to apply_preset::@8
Renumbering block apply_preset::@19 to apply_preset::@9
Renumbering block apply_preset::@20 to apply_preset::@10
Renumbering block apply_preset::@21 to apply_preset::@11
Renumbering block apply_preset::@22 to apply_preset::@12
Renumbering block apply_preset::@24 to apply_preset::@13
Renumbering block apply_preset::@25 to apply_preset::@14
Renumbering block render_preset_name::@11 to render_preset_name::@1
Renumbering block render_preset_name::@12 to render_preset_name::@2
Renumbering block render_preset_name::@13 to render_preset_name::@3
Renumbering block render_preset_name::@14 to render_preset_name::@4
Renumbering block render_preset_name::@15 to render_preset_name::@5
Renumbering block render_preset_name::@16 to render_preset_name::@6
Renumbering block render_preset_name::@17 to render_preset_name::@7
Renumbering block render_preset_name::@18 to render_preset_name::@8
Renumbering block render_preset_name::@19 to render_preset_name::@9
Renumbering block render_preset_name::@20 to render_preset_name::@10
Renumbering block render_preset_name::@21 to render_preset_name::@11
Renumbering block render_preset_name::@22 to render_preset_name::@12
Renumbering block gfx_mode::@11 to gfx_mode::@10
Renumbering block gfx_mode::@12 to gfx_mode::@11
Renumbering block gfx_mode::@13 to gfx_mode::@12
Renumbering block gfx_mode::@14 to gfx_mode::@13
Renumbering block gfx_mode::@15 to gfx_mode::@14
Renumbering block gfx_mode::@16 to gfx_mode::@15
Renumbering block gfx_mode::@17 to gfx_mode::@16
Renumbering block gfx_mode::@18 to gfx_mode::@17
Renumbering block gfx_mode::@19 to gfx_mode::@18
Renumbering block gfx_mode::@20 to gfx_mode::@19
Renumbering block gfx_mode::@21 to gfx_mode::@20
Renumbering block gfx_mode::@22 to gfx_mode::@21
Renumbering block gfx_mode::@23 to gfx_mode::@22
Renumbering block gfx_mode::@25 to gfx_mode::@23
Renumbering block gfx_mode::@26 to gfx_mode::@24
Renumbering block gfx_mode::@28 to gfx_mode::@25
Renumbering block gfx_mode::@29 to gfx_mode::@26
Renumbering block gfx_mode::@30 to gfx_mode::@27
Renumbering block gfx_mode::@31 to gfx_mode::@28
Renumbering block gfx_mode::@32 to gfx_mode::@29
Renumbering block gfx_mode::@33 to gfx_mode::@30
Renumbering block gfx_mode::@34 to gfx_mode::@31
Renumbering block gfx_mode::@35 to gfx_mode::@32
Renumbering block gfx_mode::@36 to gfx_mode::@33
Renumbering block gfx_init_vic_bitmap::@5 to gfx_init_vic_bitmap::@4
Renumbering block gfx_init_plane_8bppchunky::@8 to gfx_init_plane_8bppchunky::@7
Renumbering block form_control::@8 to form_control::@7
Renumbering block form_control::@9 to form_control::@8
Renumbering block form_control::@10 to form_control::@9
Renumbering block form_control::@12 to form_control::@10
Renumbering block form_control::@13 to form_control::@11
Renumbering block form_control::@14 to form_control::@12
Renumbering block form_control::@16 to form_control::@13
Renumbering block form_control::@17 to form_control::@14
Renumbering block form_control::@19 to form_control::@15
Renumbering block form_control::@20 to form_control::@16
Renumbering block form_control::@21 to form_control::@17
Renumbering block form_control::@22 to form_control::@18
Renumbering block form_control::@23 to form_control::@19
Renumbering block form_control::@24 to form_control::@20
Renumbering block form_control::@25 to form_control::@21
Renumbering block form_control::@26 to form_control::@22
Renumbering block form_control::@27 to form_control::@23
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of gfx_mode::@10
Adding NOP phi() at start of gfx_mode::@16
Adding NOP phi() at start of gfx_mode::@18
Adding NOP phi() at start of gfx_mode::@26
Adding NOP phi() at start of gfx_mode::@32
Adding NOP phi() at start of keyboard_event_scan::@17
Adding NOP phi() at start of keyboard_event_scan::@18
Adding NOP phi() at start of get_vic_screen::@1
Adding NOP phi() at start of get_vic_charset::@1
Adding NOP phi() at start of get_plane::@1
Adding NOP phi() at start of form_mode
Adding NOP phi() at start of form_mode::@8
Adding NOP phi() at start of form_mode::@9
Adding NOP phi() at start of form_mode::@10
Adding NOP phi() at start of form_mode::@11
Adding NOP phi() at start of form_mode::@12
Adding NOP phi() at start of form_mode::@13
Adding NOP phi() at start of form_mode::@14
Adding NOP phi() at start of form_mode::@5
Adding NOP phi() at start of render_preset_name::@1
Adding NOP phi() at start of print_str_at
Adding NOP phi() at start of form_render_values
Adding NOP phi() at start of apply_preset::@1
Adding NOP phi() at start of form_control::@21
Adding NOP phi() at start of form_control::@3
Adding NOP phi() at start of form_control::@19
Adding NOP phi() at start of form_control::@22
Adding NOP phi() at start of form_control::@23
Adding NOP phi() at start of form_control::@6
Adding NOP phi() at start of form_set_screen
Adding NOP phi() at start of print_str_lines::@5
Adding NOP phi() at start of print_ln
Adding NOP phi() at start of memset
Adding NOP phi() at start of gfx_init
Adding NOP phi() at start of gfx_init::@1
Adding NOP phi() at start of gfx_init::@2
Adding NOP phi() at start of gfx_init::@3
Adding NOP phi() at start of gfx_init::@4
Adding NOP phi() at start of gfx_init::@5
Adding NOP phi() at start of gfx_init::@6
Adding NOP phi() at start of gfx_init::@7
Adding NOP phi() at start of gfx_init::@8
Adding NOP phi() at start of gfx_init::@9
Adding NOP phi() at start of gfx_init::@10
Adding NOP phi() at start of gfx_init::@11
Adding NOP phi() at start of gfx_init::@12
Adding NOP phi() at start of gfx_init::@13
Adding NOP phi() at start of gfx_init::@14
Adding NOP phi() at start of gfx_init_plane_full
Adding NOP phi() at start of gfx_init_plane_fill::@4
Adding NOP phi() at start of gfx_init_plane_blank
Adding NOP phi() at start of gfx_init_plane_vertical2
Adding NOP phi() at start of gfx_init_plane_horisontal2
Adding NOP phi() at start of gfx_init_plane_horisontal2::@4
Adding NOP phi() at start of gfx_init_plane_vertical
Adding NOP phi() at start of gfx_init_plane_vertical::@4
Adding NOP phi() at start of gfx_init_plane_horisontal
Adding NOP phi() at start of gfx_init_plane_horisontal::@7
Adding NOP phi() at start of gfx_init_plane_charset8
Adding NOP phi() at start of gfx_init_plane_8bppchunky
Adding NOP phi() at start of gfx_init_plane_8bppchunky::@6
Adding NOP phi() at start of gfx_init_vic_bitmap
Adding NOP phi() at start of gfx_init_vic_bitmap::@3
Adding NOP phi() at start of bitmap_init
Adding NOP phi() at start of bitmap_init::@6
Adding NOP phi() at start of gfx_init_screen4
Adding NOP phi() at start of gfx_init_screen3
Adding NOP phi() at start of gfx_init_screen2
Adding NOP phi() at start of gfx_init_screen1
Adding NOP phi() at start of gfx_init_screen0

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  asm { sei  }
  [5] *((const nomodify byte*) PROCPORT_DDR) ← (const nomodify byte) PROCPORT_DDR_MEMORY_MASK
  [6] *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_RAM_IO
  [7] *((const nomodify byte*) DTV_FEATURE) ← (const nomodify byte) DTV_FEATURE_ENABLE
  [8] call keyboard_init 
  to:main::@3
main::@3: scope:[main]  from main
  [9] phi()
  [10] call gfx_init 
  to:main::@1
main::@1: scope:[main]  from main::@3 main::@4
  [11] (byte) form_field_idx#1 ← phi( main::@3/(byte) 0 main::@4/(byte) form_field_idx#18 )
  [11] (byte) keyboard_events_size#27 ← phi( main::@3/(byte) 0 main::@4/(byte) keyboard_events_size#24 )
  [11] (signed byte) form_cursor_count#1 ← phi( main::@3/(const nomodify signed byte) FORM_CURSOR_BLINK/(signed byte) 2 main::@4/(signed byte) form_cursor_count#16 )
  to:main::@2
main::@2: scope:[main]  from main::@1
  [12] phi()
  [13] call form_mode 
  to:main::@4
main::@4: scope:[main]  from main::@2
  [14] phi()
  [15] call gfx_mode 
  to:main::@1

(void()) gfx_mode()
gfx_mode: scope:[gfx_mode]  from main::@4
  [16] if(*((const nomodify byte*) form_ctrl_line)==(byte) 0) goto gfx_mode::@1
  to:gfx_mode::@10
gfx_mode::@10: scope:[gfx_mode]  from gfx_mode
  [17] phi()
  to:gfx_mode::@1
gfx_mode::@1: scope:[gfx_mode]  from gfx_mode gfx_mode::@10
  [18] (byte) gfx_mode::dtv_control#14 ← phi( gfx_mode/(byte) 0 gfx_mode::@10/(const nomodify byte) DTV_LINEAR )
  [19] if(*((const nomodify byte*) form_ctrl_borof)==(byte) 0) goto gfx_mode::@2
  to:gfx_mode::@11
gfx_mode::@11: scope:[gfx_mode]  from gfx_mode::@1
  [20] (byte) gfx_mode::dtv_control#2 ← (byte) gfx_mode::dtv_control#14 | (const nomodify byte) DTV_BORDER_OFF
  to:gfx_mode::@2
gfx_mode::@2: scope:[gfx_mode]  from gfx_mode::@1 gfx_mode::@11
  [21] (byte) gfx_mode::dtv_control#15 ← phi( gfx_mode::@1/(byte) gfx_mode::dtv_control#14 gfx_mode::@11/(byte) gfx_mode::dtv_control#2 )
  [22] if(*((const nomodify byte*) form_ctrl_hicol)==(byte) 0) goto gfx_mode::@3
  to:gfx_mode::@12
gfx_mode::@12: scope:[gfx_mode]  from gfx_mode::@2
  [23] (byte) gfx_mode::dtv_control#3 ← (byte) gfx_mode::dtv_control#15 | (const nomodify byte) DTV_HIGHCOLOR
  to:gfx_mode::@3
gfx_mode::@3: scope:[gfx_mode]  from gfx_mode::@12 gfx_mode::@2
  [24] (byte) gfx_mode::dtv_control#10 ← phi( gfx_mode::@12/(byte) gfx_mode::dtv_control#3 gfx_mode::@2/(byte) gfx_mode::dtv_control#15 )
  [25] if(*((const nomodify byte*) form_ctrl_overs)==(byte) 0) goto gfx_mode::@4
  to:gfx_mode::@13
gfx_mode::@13: scope:[gfx_mode]  from gfx_mode::@3
  [26] (byte) gfx_mode::dtv_control#4 ← (byte) gfx_mode::dtv_control#10 | (const nomodify byte) DTV_OVERSCAN
  to:gfx_mode::@4
gfx_mode::@4: scope:[gfx_mode]  from gfx_mode::@13 gfx_mode::@3
  [27] (byte) gfx_mode::dtv_control#11 ← phi( gfx_mode::@13/(byte) gfx_mode::dtv_control#4 gfx_mode::@3/(byte) gfx_mode::dtv_control#10 )
  [28] if(*((const nomodify byte*) form_ctrl_colof)==(byte) 0) goto gfx_mode::@5
  to:gfx_mode::@14
gfx_mode::@14: scope:[gfx_mode]  from gfx_mode::@4
  [29] (byte) gfx_mode::dtv_control#5 ← (byte) gfx_mode::dtv_control#11 | (const nomodify byte) DTV_COLORRAM_OFF
  to:gfx_mode::@5
gfx_mode::@5: scope:[gfx_mode]  from gfx_mode::@14 gfx_mode::@4
  [30] (byte) gfx_mode::dtv_control#13 ← phi( gfx_mode::@14/(byte) gfx_mode::dtv_control#5 gfx_mode::@4/(byte) gfx_mode::dtv_control#11 )
  [31] if(*((const nomodify byte*) form_ctrl_chunk)==(byte) 0) goto gfx_mode::@6
  to:gfx_mode::@15
gfx_mode::@15: scope:[gfx_mode]  from gfx_mode::@5
  [32] (byte) gfx_mode::dtv_control#6 ← (byte) gfx_mode::dtv_control#13 | (const nomodify byte) DTV_CHUNKY
  to:gfx_mode::@6
gfx_mode::@6: scope:[gfx_mode]  from gfx_mode::@15 gfx_mode::@5
  [33] (byte) gfx_mode::dtv_control#12 ← phi( gfx_mode::@15/(byte) gfx_mode::dtv_control#6 gfx_mode::@5/(byte) gfx_mode::dtv_control#13 )
  [34] *((const nomodify byte*) DTV_CONTROL) ← (byte) gfx_mode::dtv_control#12
  [35] if(*((const nomodify byte*) form_ctrl_ecm)==(byte) 0) goto gfx_mode::@7
  to:gfx_mode::@16
gfx_mode::@16: scope:[gfx_mode]  from gfx_mode::@6
  [36] phi()
  to:gfx_mode::@7
gfx_mode::@7: scope:[gfx_mode]  from gfx_mode::@16 gfx_mode::@6
  [37] (byte) gfx_mode::vic_control#5 ← phi( gfx_mode::@16/(const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(byte) 3|(const nomodify byte) VIC_ECM gfx_mode::@6/(const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(byte) 3 )
  [38] if(*((const nomodify byte*) form_ctrl_bmm)==(byte) 0) goto gfx_mode::@8
  to:gfx_mode::@17
gfx_mode::@17: scope:[gfx_mode]  from gfx_mode::@7
  [39] (byte) gfx_mode::vic_control#2 ← (byte) gfx_mode::vic_control#5 | (const nomodify byte) VIC_BMM
  to:gfx_mode::@8
gfx_mode::@8: scope:[gfx_mode]  from gfx_mode::@17 gfx_mode::@7
  [40] (byte) gfx_mode::vic_control#4 ← phi( gfx_mode::@17/(byte) gfx_mode::vic_control#2 gfx_mode::@7/(byte) gfx_mode::vic_control#5 )
  [41] *((const nomodify byte*) VIC_CONTROL) ← (byte) gfx_mode::vic_control#4
  [42] if(*((const nomodify byte*) form_ctrl_mcm)==(byte) 0) goto gfx_mode::@9
  to:gfx_mode::@18
gfx_mode::@18: scope:[gfx_mode]  from gfx_mode::@8
  [43] phi()
  to:gfx_mode::@9
gfx_mode::@9: scope:[gfx_mode]  from gfx_mode::@18 gfx_mode::@8
  [44] (byte) gfx_mode::vic_control2#2 ← phi( gfx_mode::@18/(const nomodify byte) VIC_CSEL|(const nomodify byte) VIC_MCM gfx_mode::@8/(const nomodify byte) VIC_CSEL )
  [45] *((const nomodify byte*) VIC_CONTROL2) ← (byte) gfx_mode::vic_control2#2
  [46] (byte~) gfx_mode::$18 ← *((const nomodify byte*) form_a_start_hi) << (byte) 4
  [47] (byte) gfx_mode::plane_a_offs#0 ← (byte~) gfx_mode::$18 | *((const nomodify byte*) form_a_start_lo)
  [48] (byte) get_plane::idx#0 ← *((const nomodify byte*) form_a_pattern)
  [49] call get_plane 
  [50] (dword) get_plane::return#16 ← (dword) get_plane::return#14
  to:gfx_mode::@27
gfx_mode::@27: scope:[gfx_mode]  from gfx_mode::@9
  [51] (dword~) gfx_mode::$20 ← (dword) get_plane::return#16
  [52] (dword) gfx_mode::plane_a#0 ← (dword~) gfx_mode::$20 + (byte) gfx_mode::plane_a_offs#0
  [53] (word~) gfx_mode::$24 ← < (dword) gfx_mode::plane_a#0
  [54] (byte~) gfx_mode::$23 ← < (word~) gfx_mode::$24
  [55] *((const nomodify byte*) DTV_PLANEA_START_LO) ← (byte~) gfx_mode::$23
  [56] (byte~) gfx_mode::$25 ← > (word~) gfx_mode::$24
  [57] *((const nomodify byte*) DTV_PLANEA_START_MI) ← (byte~) gfx_mode::$25
  [58] (word~) gfx_mode::$26 ← > (dword) gfx_mode::plane_a#0
  [59] (byte~) gfx_mode::$27 ← < (word~) gfx_mode::$26
  [60] *((const nomodify byte*) DTV_PLANEA_START_HI) ← (byte~) gfx_mode::$27
  [61] (byte~) gfx_mode::$28 ← *((const nomodify byte*) form_a_step_hi) << (byte) 4
  [62] (byte~) gfx_mode::$29 ← (byte~) gfx_mode::$28 | *((const nomodify byte*) form_a_step_lo)
  [63] *((const nomodify byte*) DTV_PLANEA_STEP) ← (byte~) gfx_mode::$29
  [64] (byte~) gfx_mode::$30 ← *((const nomodify byte*) form_a_mod_hi) << (byte) 4
  [65] (byte~) gfx_mode::$31 ← (byte~) gfx_mode::$30 | *((const nomodify byte*) form_a_mod_lo)
  [66] *((const nomodify byte*) DTV_PLANEA_MODULO_LO) ← (byte~) gfx_mode::$31
  [67] *((const nomodify byte*) DTV_PLANEA_MODULO_HI) ← (byte) 0
  [68] (byte~) gfx_mode::$32 ← *((const nomodify byte*) form_b_start_hi) << (byte) 4
  [69] (byte) gfx_mode::plane_b_offs#0 ← (byte~) gfx_mode::$32 | *((const nomodify byte*) form_b_start_lo)
  [70] (byte) get_plane::idx#1 ← *((const nomodify byte*) form_b_pattern)
  [71] call get_plane 
  [72] (dword) get_plane::return#17 ← (dword) get_plane::return#14
  to:gfx_mode::@28
gfx_mode::@28: scope:[gfx_mode]  from gfx_mode::@27
  [73] (dword~) gfx_mode::$34 ← (dword) get_plane::return#17
  [74] (dword) gfx_mode::plane_b#0 ← (dword~) gfx_mode::$34 + (byte) gfx_mode::plane_b_offs#0
  [75] (word~) gfx_mode::$38 ← < (dword) gfx_mode::plane_b#0
  [76] (byte~) gfx_mode::$37 ← < (word~) gfx_mode::$38
  [77] *((const nomodify byte*) DTV_PLANEB_START_LO) ← (byte~) gfx_mode::$37
  [78] (byte~) gfx_mode::$39 ← > (word~) gfx_mode::$38
  [79] *((const nomodify byte*) DTV_PLANEB_START_MI) ← (byte~) gfx_mode::$39
  [80] (word~) gfx_mode::$40 ← > (dword) gfx_mode::plane_b#0
  [81] (byte~) gfx_mode::$41 ← < (word~) gfx_mode::$40
  [82] *((const nomodify byte*) DTV_PLANEB_START_HI) ← (byte~) gfx_mode::$41
  [83] (byte~) gfx_mode::$42 ← *((const nomodify byte*) form_b_step_hi) << (byte) 4
  [84] (byte~) gfx_mode::$43 ← (byte~) gfx_mode::$42 | *((const nomodify byte*) form_b_step_lo)
  [85] *((const nomodify byte*) DTV_PLANEB_STEP) ← (byte~) gfx_mode::$43
  [86] (byte~) gfx_mode::$44 ← *((const nomodify byte*) form_b_mod_hi) << (byte) 4
  [87] (byte~) gfx_mode::$45 ← (byte~) gfx_mode::$44 | *((const nomodify byte*) form_b_mod_lo)
  [88] *((const nomodify byte*) DTV_PLANEB_MODULO_LO) ← (byte~) gfx_mode::$45
  [89] *((const nomodify byte*) DTV_PLANEB_MODULO_HI) ← (byte) 0
  [90] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) ← (byte) 3
  [91] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2) ← (byte) 3^(byte)(word)(const nomodify byte*) VIC_SCREEN0/(word) $4000
  [92] (byte) get_vic_screen::idx#0 ← *((const nomodify byte*) form_vic_screen)
  [93] call get_vic_screen 
  [94] (byte*) get_vic_screen::return#10 ← (byte*) get_vic_screen::return#5
  to:gfx_mode::@29
gfx_mode::@29: scope:[gfx_mode]  from gfx_mode::@28
  [95] (byte*~) gfx_mode::$82 ← (byte*) get_vic_screen::return#10
  [96] (word~) gfx_mode::$47 ← (word)(byte*~) gfx_mode::$82 & (word) $3fff
  [97] (word~) gfx_mode::$48 ← (word~) gfx_mode::$47 >> (byte) 6
  [98] (byte) get_vic_charset::idx#0 ← *((const nomodify byte*) form_vic_gfx)
  [99] call get_vic_charset 
  [100] (byte*) get_vic_charset::return#4 ← (byte*) get_vic_charset::return#2
  to:gfx_mode::@30
gfx_mode::@30: scope:[gfx_mode]  from gfx_mode::@29
  [101] (byte*~) gfx_mode::$83 ← (byte*) get_vic_charset::return#4
  [102] (word~) gfx_mode::$50 ← (word)(byte*~) gfx_mode::$83 & (word) $3fff
  [103] (byte~) gfx_mode::$51 ← > (word~) gfx_mode::$50
  [104] (byte~) gfx_mode::$52 ← (byte~) gfx_mode::$51 >> (byte) 2
  [105] (byte~) gfx_mode::$84 ← (byte)(word~) gfx_mode::$48
  [106] (byte~) gfx_mode::$53 ← (byte~) gfx_mode::$84 | (byte~) gfx_mode::$52
  [107] *((const nomodify byte*) VIC_MEMORY) ← (byte~) gfx_mode::$53
  [108] (byte) get_vic_screen::idx#1 ← *((const nomodify byte*) form_vic_cols)
  [109] call get_vic_screen 
  [110] (byte*) get_vic_screen::return#11 ← (byte*) get_vic_screen::return#5
  to:gfx_mode::@31
gfx_mode::@31: scope:[gfx_mode]  from gfx_mode::@30
  [111] (byte*) gfx_mode::vic_colors#0 ← (byte*) get_vic_screen::return#11
  to:gfx_mode::@19
gfx_mode::@19: scope:[gfx_mode]  from gfx_mode::@21 gfx_mode::@31
  [112] (byte) gfx_mode::cy#4 ← phi( gfx_mode::@21/(byte) gfx_mode::cy#1 gfx_mode::@31/(byte) 0 )
  [112] (byte*) gfx_mode::col#3 ← phi( gfx_mode::@21/(byte*) gfx_mode::col#1 gfx_mode::@31/(const nomodify byte*) COLS )
  [112] (byte*) gfx_mode::vic_colors#3 ← phi( gfx_mode::@21/(byte*) gfx_mode::vic_colors#1 gfx_mode::@31/(byte*) gfx_mode::vic_colors#0 )
  to:gfx_mode::@20
gfx_mode::@20: scope:[gfx_mode]  from gfx_mode::@19 gfx_mode::@20
  [113] (byte) gfx_mode::cx#2 ← phi( gfx_mode::@19/(byte) 0 gfx_mode::@20/(byte) gfx_mode::cx#1 )
  [113] (byte*) gfx_mode::col#2 ← phi( gfx_mode::@19/(byte*) gfx_mode::col#3 gfx_mode::@20/(byte*) gfx_mode::col#1 )
  [113] (byte*) gfx_mode::vic_colors#2 ← phi( gfx_mode::@19/(byte*) gfx_mode::vic_colors#3 gfx_mode::@20/(byte*) gfx_mode::vic_colors#1 )
  [114] *((byte*) gfx_mode::col#2) ← *((byte*) gfx_mode::vic_colors#2)
  [115] (byte*) gfx_mode::col#1 ← ++ (byte*) gfx_mode::col#2
  [116] (byte*) gfx_mode::vic_colors#1 ← ++ (byte*) gfx_mode::vic_colors#2
  [117] (byte) gfx_mode::cx#1 ← ++ (byte) gfx_mode::cx#2
  [118] if((byte) gfx_mode::cx#1!=(byte) $28) goto gfx_mode::@20
  to:gfx_mode::@21
gfx_mode::@21: scope:[gfx_mode]  from gfx_mode::@20
  [119] (byte) gfx_mode::cy#1 ← ++ (byte) gfx_mode::cy#4
  [120] if((byte) gfx_mode::cy#1!=(byte) $19) goto gfx_mode::@19
  to:gfx_mode::@22
gfx_mode::@22: scope:[gfx_mode]  from gfx_mode::@21
  [121] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (byte) 0
  [122] (byte~) gfx_mode::$55 ← *((const nomodify byte*) form_vic_bg0_hi) << (byte) 4
  [123] (byte~) gfx_mode::$56 ← (byte~) gfx_mode::$55 | *((const nomodify byte*) form_vic_bg0_lo)
  [124] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) ← (byte~) gfx_mode::$56
  [125] (byte~) gfx_mode::$57 ← *((const nomodify byte*) form_vic_bg1_hi) << (byte) 4
  [126] (byte~) gfx_mode::$58 ← (byte~) gfx_mode::$57 | *((const nomodify byte*) form_vic_bg1_lo)
  [127] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR1) ← (byte~) gfx_mode::$58
  [128] (byte~) gfx_mode::$59 ← *((const nomodify byte*) form_vic_bg2_hi) << (byte) 4
  [129] (byte~) gfx_mode::$60 ← (byte~) gfx_mode::$59 | *((const nomodify byte*) form_vic_bg2_lo)
  [130] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR2) ← (byte~) gfx_mode::$60
  [131] (byte~) gfx_mode::$61 ← *((const nomodify byte*) form_vic_bg3_hi) << (byte) 4
  [132] (byte~) gfx_mode::$62 ← (byte~) gfx_mode::$61 | *((const nomodify byte*) form_vic_bg3_lo)
  [133] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR3) ← (byte~) gfx_mode::$62
  [134] if(*((const nomodify byte*) form_dtv_palet)==(byte) 0) goto gfx_mode::@24
  to:gfx_mode::@23
gfx_mode::@23: scope:[gfx_mode]  from gfx_mode::@22 gfx_mode::@23
  [135] (byte) gfx_mode::j#2 ← phi( gfx_mode::@22/(byte) 0 gfx_mode::@23/(byte) gfx_mode::j#1 )
  [136] *((const nomodify byte*) DTV_PALETTE + (byte) gfx_mode::j#2) ← (byte) gfx_mode::j#2
  [137] (byte) gfx_mode::j#1 ← ++ (byte) gfx_mode::j#2
  [138] if((byte) gfx_mode::j#1!=(byte) $10) goto gfx_mode::@23
  to:gfx_mode::@25
gfx_mode::@25: scope:[gfx_mode]  from gfx_mode::@23 gfx_mode::@24 gfx_mode::@25 gfx_mode::@33
  [139] if(*((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)!=(byte) $ff) goto gfx_mode::@25
  to:gfx_mode::@26
gfx_mode::@26: scope:[gfx_mode]  from gfx_mode::@25
  [140] phi()
  [141] call keyboard_event_scan 
  to:gfx_mode::@32
gfx_mode::@32: scope:[gfx_mode]  from gfx_mode::@26
  [142] phi()
  [143] call keyboard_event_get 
  [144] (byte) keyboard_event_get::return#3 ← (byte) keyboard_event_get::return#2
  to:gfx_mode::@33
gfx_mode::@33: scope:[gfx_mode]  from gfx_mode::@32
  [145] (byte) gfx_mode::keyboard_event#0 ← (byte) keyboard_event_get::return#3
  [146] if((byte) gfx_mode::keyboard_event#0==(const nomodify byte) KEY_SPACE) goto gfx_mode::@return
  to:gfx_mode::@25
gfx_mode::@return: scope:[gfx_mode]  from gfx_mode::@33
  [147] return 
  to:@return
gfx_mode::@24: scope:[gfx_mode]  from gfx_mode::@22 gfx_mode::@24
  [148] (byte) gfx_mode::i#2 ← phi( gfx_mode::@22/(byte) 0 gfx_mode::@24/(byte) gfx_mode::i#1 )
  [149] *((const nomodify byte*) DTV_PALETTE + (byte) gfx_mode::i#2) ← *((const byte*) DTV_PALETTE_DEFAULT + (byte) gfx_mode::i#2)
  [150] (byte) gfx_mode::i#1 ← ++ (byte) gfx_mode::i#2
  [151] if((byte) gfx_mode::i#1!=(byte) $10) goto gfx_mode::@24
  to:gfx_mode::@25

(byte()) keyboard_event_get()
keyboard_event_get: scope:[keyboard_event_get]  from form_control::@19 gfx_mode::@32
  [152] if((byte) keyboard_events_size#100==(byte) 0) goto keyboard_event_get::@return
  to:keyboard_event_get::@1
keyboard_event_get::@1: scope:[keyboard_event_get]  from keyboard_event_get
  [153] (byte) keyboard_events_size#4 ← -- (byte) keyboard_events_size#100
  [154] (byte) keyboard_event_get::return#1 ← *((const byte*) keyboard_events + (byte) keyboard_events_size#4)
  to:keyboard_event_get::@return
keyboard_event_get::@return: scope:[keyboard_event_get]  from keyboard_event_get keyboard_event_get::@1
  [155] (byte) keyboard_events_size#24 ← phi( keyboard_event_get/(byte) keyboard_events_size#100 keyboard_event_get::@1/(byte) keyboard_events_size#4 )
  [155] (byte) keyboard_event_get::return#2 ← phi( keyboard_event_get/(byte) $ff keyboard_event_get::@1/(byte) keyboard_event_get::return#1 )
  [156] return 
  to:@return

(void()) keyboard_event_scan()
keyboard_event_scan: scope:[keyboard_event_scan]  from form_control::@3 gfx_mode::@26
  [157] (byte) keyboard_events_size#97 ← phi( form_control::@3/(byte) keyboard_events_size#47 gfx_mode::@26/(byte) keyboard_events_size#24 )
  to:keyboard_event_scan::@7
keyboard_event_scan::@7: scope:[keyboard_event_scan]  from keyboard_event_scan keyboard_event_scan::@8
  [158] (byte) keyboard_events_size#106 ← phi( keyboard_event_scan/(byte) keyboard_events_size#97 keyboard_event_scan::@8/(byte) keyboard_events_size#100 )
  [158] (byte) keyboard_event_scan::keycode#11 ← phi( keyboard_event_scan/(byte) 0 keyboard_event_scan::@8/(byte) keyboard_event_scan::keycode#13 )
  [158] (byte) keyboard_event_scan::row#2 ← phi( keyboard_event_scan/(byte) 0 keyboard_event_scan::@8/(byte) keyboard_event_scan::row#1 )
  [159] (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_event_scan::row#2
  [160] call keyboard_matrix_read 
  [161] (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#0
  to:keyboard_event_scan::@19
keyboard_event_scan::@19: scope:[keyboard_event_scan]  from keyboard_event_scan::@7
  [162] (byte) keyboard_event_scan::row_scan#0 ← (byte) keyboard_matrix_read::return#2
  [163] if((byte) keyboard_event_scan::row_scan#0!=*((const byte*) keyboard_scan_values + (byte) keyboard_event_scan::row#2)) goto keyboard_event_scan::@9
  to:keyboard_event_scan::@16
keyboard_event_scan::@16: scope:[keyboard_event_scan]  from keyboard_event_scan::@19
  [164] (byte) keyboard_event_scan::keycode#1 ← (byte) keyboard_event_scan::keycode#11 + (byte) 8
  to:keyboard_event_scan::@8
keyboard_event_scan::@8: scope:[keyboard_event_scan]  from keyboard_event_scan::@15 keyboard_event_scan::@16
  [165] (byte) keyboard_events_size#100 ← phi( keyboard_event_scan::@15/(byte) keyboard_events_size#105 keyboard_event_scan::@16/(byte) keyboard_events_size#106 )
  [165] (byte) keyboard_event_scan::keycode#13 ← phi( keyboard_event_scan::@15/(byte) keyboard_event_scan::keycode#14 keyboard_event_scan::@16/(byte) keyboard_event_scan::keycode#1 )
  [166] (byte) keyboard_event_scan::row#1 ← ++ (byte) keyboard_event_scan::row#2
  [167] if((byte) keyboard_event_scan::row#1!=(byte) 8) goto keyboard_event_scan::@7
  to:keyboard_event_scan::@17
keyboard_event_scan::@17: scope:[keyboard_event_scan]  from keyboard_event_scan::@8
  [168] phi()
  [169] call keyboard_event_pressed 
  [170] (byte) keyboard_event_pressed::return#0 ← (byte) keyboard_event_pressed::return#10
  to:keyboard_event_scan::@20
keyboard_event_scan::@20: scope:[keyboard_event_scan]  from keyboard_event_scan::@17
  [171] (byte~) keyboard_event_scan::$0 ← (byte) keyboard_event_pressed::return#0
  [172] if((byte~) keyboard_event_scan::$0==(byte) 0) goto keyboard_event_scan::@1
  to:keyboard_event_scan::@18
keyboard_event_scan::@18: scope:[keyboard_event_scan]  from keyboard_event_scan::@20
  [173] phi()
  to:keyboard_event_scan::@1
keyboard_event_scan::@1: scope:[keyboard_event_scan]  from keyboard_event_scan::@18 keyboard_event_scan::@20
  [174] (byte) keyboard_modifiers#18 ← phi( keyboard_event_scan::@18/(const nomodify byte) KEY_MODIFIER_LSHIFT keyboard_event_scan::@20/(byte) 0 )
  [175] call keyboard_event_pressed 
  [176] (byte) keyboard_event_pressed::return#1 ← (byte) keyboard_event_pressed::return#10
  to:keyboard_event_scan::@21
keyboard_event_scan::@21: scope:[keyboard_event_scan]  from keyboard_event_scan::@1
  [177] (byte~) keyboard_event_scan::$3 ← (byte) keyboard_event_pressed::return#1
  [178] if((byte~) keyboard_event_scan::$3==(byte) 0) goto keyboard_event_scan::@2
  to:keyboard_event_scan::@4
keyboard_event_scan::@4: scope:[keyboard_event_scan]  from keyboard_event_scan::@21
  [179] (byte) keyboard_modifiers#3 ← (byte) keyboard_modifiers#18 | (const nomodify byte) KEY_MODIFIER_RSHIFT
  to:keyboard_event_scan::@2
keyboard_event_scan::@2: scope:[keyboard_event_scan]  from keyboard_event_scan::@21 keyboard_event_scan::@4
  [180] (byte) keyboard_modifiers#19 ← phi( keyboard_event_scan::@21/(byte) keyboard_modifiers#18 keyboard_event_scan::@4/(byte) keyboard_modifiers#3 )
  [181] call keyboard_event_pressed 
  [182] (byte) keyboard_event_pressed::return#2 ← (byte) keyboard_event_pressed::return#10
  to:keyboard_event_scan::@22
keyboard_event_scan::@22: scope:[keyboard_event_scan]  from keyboard_event_scan::@2
  [183] (byte~) keyboard_event_scan::$6 ← (byte) keyboard_event_pressed::return#2
  [184] if((byte~) keyboard_event_scan::$6==(byte) 0) goto keyboard_event_scan::@3
  to:keyboard_event_scan::@5
keyboard_event_scan::@5: scope:[keyboard_event_scan]  from keyboard_event_scan::@22
  [185] (byte) keyboard_modifiers#4 ← (byte) keyboard_modifiers#19 | (const nomodify byte) KEY_MODIFIER_CTRL
  to:keyboard_event_scan::@3
keyboard_event_scan::@3: scope:[keyboard_event_scan]  from keyboard_event_scan::@22 keyboard_event_scan::@5
  [186] (byte) keyboard_modifiers#20 ← phi( keyboard_event_scan::@22/(byte) keyboard_modifiers#19 keyboard_event_scan::@5/(byte) keyboard_modifiers#4 )
  [187] call keyboard_event_pressed 
  [188] (byte) keyboard_event_pressed::return#3 ← (byte) keyboard_event_pressed::return#10
  to:keyboard_event_scan::@23
keyboard_event_scan::@23: scope:[keyboard_event_scan]  from keyboard_event_scan::@3
  [189] (byte~) keyboard_event_scan::$9 ← (byte) keyboard_event_pressed::return#3
  [190] if((byte~) keyboard_event_scan::$9==(byte) 0) goto keyboard_event_scan::@return
  to:keyboard_event_scan::@6
keyboard_event_scan::@6: scope:[keyboard_event_scan]  from keyboard_event_scan::@23
  [191] (byte) keyboard_modifiers#5 ← (byte) keyboard_modifiers#20 | (const nomodify byte) KEY_MODIFIER_COMMODORE
  to:keyboard_event_scan::@return
keyboard_event_scan::@return: scope:[keyboard_event_scan]  from keyboard_event_scan::@23 keyboard_event_scan::@6
  [192] (byte) keyboard_modifiers#21 ← phi( keyboard_event_scan::@23/(byte) keyboard_modifiers#20 keyboard_event_scan::@6/(byte) keyboard_modifiers#5 )
  [193] return 
  to:@return
keyboard_event_scan::@9: scope:[keyboard_event_scan]  from keyboard_event_scan::@10 keyboard_event_scan::@19
  [194] (byte) keyboard_events_size#18 ← phi( keyboard_event_scan::@10/(byte) keyboard_events_size#105 keyboard_event_scan::@19/(byte) keyboard_events_size#106 )
  [194] (byte) keyboard_event_scan::keycode#10 ← phi( keyboard_event_scan::@10/(byte) keyboard_event_scan::keycode#14 keyboard_event_scan::@19/(byte) keyboard_event_scan::keycode#11 )
  [194] (byte) keyboard_event_scan::col#2 ← phi( keyboard_event_scan::@10/(byte) keyboard_event_scan::col#1 keyboard_event_scan::@19/(byte) 0 )
  [195] (byte~) keyboard_event_scan::$15 ← (byte) keyboard_event_scan::row_scan#0 ^ *((const byte*) keyboard_scan_values + (byte) keyboard_event_scan::row#2)
  [196] (byte~) keyboard_event_scan::$16 ← (byte~) keyboard_event_scan::$15 & *((const byte*) keyboard_matrix_col_bitmask + (byte) keyboard_event_scan::col#2)
  [197] if((byte~) keyboard_event_scan::$16==(byte) 0) goto keyboard_event_scan::@10
  to:keyboard_event_scan::@12
keyboard_event_scan::@12: scope:[keyboard_event_scan]  from keyboard_event_scan::@9
  [198] if((byte) keyboard_events_size#18==(byte) 8) goto keyboard_event_scan::@10
  to:keyboard_event_scan::@13
keyboard_event_scan::@13: scope:[keyboard_event_scan]  from keyboard_event_scan::@12
  [199] (byte) keyboard_event_scan::event_type#0 ← (byte) keyboard_event_scan::row_scan#0 & *((const byte*) keyboard_matrix_col_bitmask + (byte) keyboard_event_scan::col#2)
  [200] if((byte) keyboard_event_scan::event_type#0==(byte) 0) goto keyboard_event_scan::@11
  to:keyboard_event_scan::@14
keyboard_event_scan::@14: scope:[keyboard_event_scan]  from keyboard_event_scan::@13
  [201] *((const byte*) keyboard_events + (byte) keyboard_events_size#18) ← (byte) keyboard_event_scan::keycode#10
  [202] (byte) keyboard_events_size#2 ← ++ (byte) keyboard_events_size#18
  to:keyboard_event_scan::@10
keyboard_event_scan::@10: scope:[keyboard_event_scan]  from keyboard_event_scan::@11 keyboard_event_scan::@12 keyboard_event_scan::@14 keyboard_event_scan::@9
  [203] (byte) keyboard_events_size#105 ← phi( keyboard_event_scan::@9/(byte) keyboard_events_size#18 keyboard_event_scan::@11/(byte) keyboard_events_size#1 keyboard_event_scan::@12/(byte) keyboard_events_size#18 keyboard_event_scan::@14/(byte) keyboard_events_size#2 )
  [204] (byte) keyboard_event_scan::keycode#14 ← ++ (byte) keyboard_event_scan::keycode#10
  [205] (byte) keyboard_event_scan::col#1 ← ++ (byte) keyboard_event_scan::col#2
  [206] if((byte) keyboard_event_scan::col#1!=(byte) 8) goto keyboard_event_scan::@9
  to:keyboard_event_scan::@15
keyboard_event_scan::@15: scope:[keyboard_event_scan]  from keyboard_event_scan::@10
  [207] *((const byte*) keyboard_scan_values + (byte) keyboard_event_scan::row#2) ← (byte) keyboard_event_scan::row_scan#0
  to:keyboard_event_scan::@8
keyboard_event_scan::@11: scope:[keyboard_event_scan]  from keyboard_event_scan::@13
  [208] (byte~) keyboard_event_scan::$23 ← (byte) keyboard_event_scan::keycode#10 | (byte) $40
  [209] *((const byte*) keyboard_events + (byte) keyboard_events_size#18) ← (byte~) keyboard_event_scan::$23
  [210] (byte) keyboard_events_size#1 ← ++ (byte) keyboard_events_size#18
  to:keyboard_event_scan::@10

(byte()) keyboard_event_pressed((byte) keyboard_event_pressed::keycode)
keyboard_event_pressed: scope:[keyboard_event_pressed]  from keyboard_event_scan::@1 keyboard_event_scan::@17 keyboard_event_scan::@2 keyboard_event_scan::@3
  [211] (byte) keyboard_event_pressed::keycode#4 ← phi( keyboard_event_scan::@1/(const nomodify byte) KEY_RSHIFT keyboard_event_scan::@17/(const nomodify byte) KEY_LSHIFT keyboard_event_scan::@2/(const nomodify byte) KEY_CTRL keyboard_event_scan::@3/(const nomodify byte) KEY_COMMODORE )
  [212] (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#4 >> (byte) 3
  [213] (byte) keyboard_event_pressed::row_bits#0 ← *((const byte*) keyboard_scan_values + (byte~) keyboard_event_pressed::$0)
  [214] (byte~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#4 & (byte) 7
  [215] (byte) keyboard_event_pressed::return#10 ← (byte) keyboard_event_pressed::row_bits#0 & *((const byte*) keyboard_matrix_col_bitmask + (byte~) keyboard_event_pressed::$1)
  to:keyboard_event_pressed::@return
keyboard_event_pressed::@return: scope:[keyboard_event_pressed]  from keyboard_event_pressed
  [216] return 
  to:@return

(byte()) keyboard_matrix_read((byte) keyboard_matrix_read::rowid)
keyboard_matrix_read: scope:[keyboard_matrix_read]  from keyboard_event_scan::@7
  [217] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1) ← *((const byte*) keyboard_matrix_row_bitmask + (byte) keyboard_matrix_read::rowid#0)
  [218] (byte) keyboard_matrix_read::return#0 ← ~ *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_B)
  to:keyboard_matrix_read::@return
keyboard_matrix_read::@return: scope:[keyboard_matrix_read]  from keyboard_matrix_read
  [219] return 
  to:@return

(byte*()) get_vic_screen((byte) get_vic_screen::idx)
get_vic_screen: scope:[get_vic_screen]  from gfx_mode::@28 gfx_mode::@30
  [220] (byte) get_vic_screen::idx#2 ← phi( gfx_mode::@28/(byte) get_vic_screen::idx#0 gfx_mode::@30/(byte) get_vic_screen::idx#1 )
  [221] if((byte) get_vic_screen::idx#2==(byte) 0) goto get_vic_screen::@return
  to:get_vic_screen::@2
get_vic_screen::@2: scope:[get_vic_screen]  from get_vic_screen
  [222] if((byte) get_vic_screen::idx#2==(byte) 1) goto get_vic_screen::@return
  to:get_vic_screen::@3
get_vic_screen::@3: scope:[get_vic_screen]  from get_vic_screen::@2
  [223] if((byte) get_vic_screen::idx#2==(byte) 2) goto get_vic_screen::@return
  to:get_vic_screen::@4
get_vic_screen::@4: scope:[get_vic_screen]  from get_vic_screen::@3
  [224] if((byte) get_vic_screen::idx#2==(byte) 3) goto get_vic_screen::@return
  to:get_vic_screen::@5
get_vic_screen::@5: scope:[get_vic_screen]  from get_vic_screen::@4
  [225] if((byte) get_vic_screen::idx#2!=(byte) 4) goto get_vic_screen::@1
  to:get_vic_screen::@return
get_vic_screen::@1: scope:[get_vic_screen]  from get_vic_screen::@5
  [226] phi()
  to:get_vic_screen::@return
get_vic_screen::@return: scope:[get_vic_screen]  from get_vic_screen get_vic_screen::@1 get_vic_screen::@2 get_vic_screen::@3 get_vic_screen::@4 get_vic_screen::@5
  [227] (byte*) get_vic_screen::return#5 ← phi( get_vic_screen/(const nomodify byte*) VIC_SCREEN0 get_vic_screen::@5/(const nomodify byte*) VIC_SCREEN4 get_vic_screen::@2/(const nomodify byte*) VIC_SCREEN1 get_vic_screen::@3/(const nomodify byte*) VIC_SCREEN2 get_vic_screen::@4/(const nomodify byte*) VIC_SCREEN3 get_vic_screen::@1/(const nomodify byte*) VIC_SCREEN0 )
  [228] return 
  to:@return

(byte*()) get_vic_charset((byte) get_vic_charset::idx)
get_vic_charset: scope:[get_vic_charset]  from gfx_mode::@29
  [229] if((byte) get_vic_charset::idx#0==(byte) 0) goto get_vic_charset::@return
  to:get_vic_charset::@2
get_vic_charset::@2: scope:[get_vic_charset]  from get_vic_charset
  [230] if((byte) get_vic_charset::idx#0!=(byte) 1) goto get_vic_charset::@1
  to:get_vic_charset::@return
get_vic_charset::@1: scope:[get_vic_charset]  from get_vic_charset::@2
  [231] phi()
  to:get_vic_charset::@return
get_vic_charset::@return: scope:[get_vic_charset]  from get_vic_charset get_vic_charset::@1 get_vic_charset::@2
  [232] (byte*) get_vic_charset::return#2 ← phi( get_vic_charset/(const nomodify byte*) VIC_CHARSET_ROM get_vic_charset::@1/(const nomodify byte*) VIC_CHARSET_ROM get_vic_charset::@2/(const nomodify byte*) VIC_BITMAP )
  [233] return 
  to:@return

(dword()) get_plane((byte) get_plane::idx)
get_plane: scope:[get_plane]  from gfx_mode::@27 gfx_mode::@9
  [234] (byte) get_plane::idx#10 ← phi( gfx_mode::@27/(byte) get_plane::idx#1 gfx_mode::@9/(byte) get_plane::idx#0 )
  [235] if((byte) get_plane::idx#10==(byte) 0) goto get_plane::@return
  to:get_plane::@2
get_plane::@2: scope:[get_plane]  from get_plane
  [236] if((byte) get_plane::idx#10==(byte) 1) goto get_plane::@return
  to:get_plane::@3
get_plane::@3: scope:[get_plane]  from get_plane::@2
  [237] if((byte) get_plane::idx#10==(byte) 2) goto get_plane::@return
  to:get_plane::@4
get_plane::@4: scope:[get_plane]  from get_plane::@3
  [238] if((byte) get_plane::idx#10==(byte) 3) goto get_plane::@return
  to:get_plane::@5
get_plane::@5: scope:[get_plane]  from get_plane::@4
  [239] if((byte) get_plane::idx#10==(byte) 4) goto get_plane::@return
  to:get_plane::@6
get_plane::@6: scope:[get_plane]  from get_plane::@5
  [240] if((byte) get_plane::idx#10==(byte) 5) goto get_plane::@return
  to:get_plane::@7
get_plane::@7: scope:[get_plane]  from get_plane::@6
  [241] if((byte) get_plane::idx#10==(byte) 6) goto get_plane::@return
  to:get_plane::@8
get_plane::@8: scope:[get_plane]  from get_plane::@7
  [242] if((byte) get_plane::idx#10==(byte) 7) goto get_plane::@return
  to:get_plane::@9
get_plane::@9: scope:[get_plane]  from get_plane::@8
  [243] if((byte) get_plane::idx#10==(byte) 8) goto get_plane::@return
  to:get_plane::@10
get_plane::@10: scope:[get_plane]  from get_plane::@9
  [244] if((byte) get_plane::idx#10==(byte) 9) goto get_plane::@return
  to:get_plane::@11
get_plane::@11: scope:[get_plane]  from get_plane::@10
  [245] if((byte) get_plane::idx#10==(byte) $a) goto get_plane::@return
  to:get_plane::@12
get_plane::@12: scope:[get_plane]  from get_plane::@11
  [246] if((byte) get_plane::idx#10==(byte) $b) goto get_plane::@return
  to:get_plane::@13
get_plane::@13: scope:[get_plane]  from get_plane::@12
  [247] if((byte) get_plane::idx#10==(byte) $c) goto get_plane::@return
  to:get_plane::@14
get_plane::@14: scope:[get_plane]  from get_plane::@13
  [248] if((byte) get_plane::idx#10!=(byte) $d) goto get_plane::@1
  to:get_plane::@return
get_plane::@1: scope:[get_plane]  from get_plane::@14
  [249] phi()
  to:get_plane::@return
get_plane::@return: scope:[get_plane]  from get_plane get_plane::@1 get_plane::@10 get_plane::@11 get_plane::@12 get_plane::@13 get_plane::@14 get_plane::@2 get_plane::@3 get_plane::@4 get_plane::@5 get_plane::@6 get_plane::@7 get_plane::@8 get_plane::@9
  [250] (dword) get_plane::return#14 ← phi( get_plane/(dword)(const nomodify byte*) VIC_SCREEN0 get_plane::@10/(const nomodify dword) PLANE_HORISONTAL2 get_plane::@11/(const nomodify dword) PLANE_VERTICAL2 get_plane::@12/(const nomodify dword) PLANE_CHARSET8 get_plane::@13/(const nomodify dword) PLANE_BLANK get_plane::@1/(dword)(const nomodify byte*) VIC_SCREEN0 get_plane::@2/(dword)(const nomodify byte*) VIC_SCREEN1 get_plane::@14/(const nomodify dword) PLANE_FULL get_plane::@3/(dword)(const nomodify byte*) VIC_SCREEN2 get_plane::@4/(dword)(const nomodify byte*) VIC_SCREEN3 get_plane::@5/(dword)(const nomodify byte*) VIC_BITMAP get_plane::@6/(dword)(const nomodify byte*) VIC_CHARSET_ROM get_plane::@7/(const nomodify dword) PLANE_8BPP_CHUNKY get_plane::@8/(const nomodify dword) PLANE_HORISONTAL get_plane::@9/(const nomodify dword) PLANE_VERTICAL )
  [251] return 
  to:@return

(void()) form_mode()
form_mode: scope:[form_mode]  from main::@2
  [252] phi()
  [253] call print_set_screen 
  to:form_mode::@8
form_mode::@8: scope:[form_mode]  from form_mode
  [254] phi()
  [255] call print_cls 
  to:form_mode::@9
form_mode::@9: scope:[form_mode]  from form_mode::@8
  [256] phi()
  [257] call print_str_lines 
  to:form_mode::@10
form_mode::@10: scope:[form_mode]  from form_mode::@9
  [258] phi()
  [259] call print_set_screen 
  to:form_mode::@11
form_mode::@11: scope:[form_mode]  from form_mode::@10
  [260] phi()
  [261] call print_cls 
  to:form_mode::@12
form_mode::@12: scope:[form_mode]  from form_mode::@11
  [262] phi()
  [263] call print_str_lines 
  to:form_mode::@13
form_mode::@13: scope:[form_mode]  from form_mode::@12
  [264] phi()
  [265] call form_set_screen 
  to:form_mode::@14
form_mode::@14: scope:[form_mode]  from form_mode::@13
  [266] phi()
  [267] call form_render_values 
  to:form_mode::@15
form_mode::@15: scope:[form_mode]  from form_mode::@14
  [268] (byte) render_preset_name::idx#0 ← *((const byte*) form_fields_val)
  [269] call render_preset_name 
  to:form_mode::@16
form_mode::@16: scope:[form_mode]  from form_mode::@15
  [270] *((const nomodify byte*) DTV_GRAPHICS_VIC_BANK) ← (byte) 0
  [271] *((const nomodify byte*) DTV_COLOR_BANK_LO) ← <(word)(const nomodify dword) DTV_COLOR_BANK_DEFAULT/(word) $400
  [272] *((const nomodify byte*) DTV_COLOR_BANK_HI) ← (byte) 0
  [273] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) ← (byte) 3
  [274] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2) ← (byte) 3
  [275] *((const nomodify byte*) DTV_CONTROL) ← (byte) 0
  [276] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1) ← (const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(byte) 3
  [277] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL2) ← (const nomodify byte) VIC_CSEL
  [278] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_MEMORY) ← (byte)(word)(const nomodify byte*) FORM_SCREEN&(word) $3fff/(byte) $40|(word)(const nomodify byte*) FORM_CHARSET&(word) $3fff/(word) $400
  [279] *((const nomodify byte*) DTV_PLANEA_START_LO) ← (byte) 0
  [280] *((const nomodify byte*) DTV_PLANEA_START_MI) ← >(const nomodify byte*) FORM_SCREEN
  [281] *((const nomodify byte*) DTV_PLANEA_START_HI) ← (byte) 0
  to:form_mode::@1
form_mode::@1: scope:[form_mode]  from form_mode::@1 form_mode::@16
  [282] (byte) form_mode::i#2 ← phi( form_mode::@1/(byte) form_mode::i#1 form_mode::@16/(byte) 0 )
  [283] *((const nomodify byte*) DTV_PALETTE + (byte) form_mode::i#2) ← *((const byte*) DTV_PALETTE_DEFAULT + (byte) form_mode::i#2)
  [284] (byte) form_mode::i#1 ← ++ (byte) form_mode::i#2
  [285] if((byte) form_mode::i#1!=(byte) $10) goto form_mode::@1
  to:form_mode::@2
form_mode::@2: scope:[form_mode]  from form_mode::@1
  [286] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) ← (byte) 0
  [287] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (byte) 0
  [288] (byte) form_mode::preset_current#0 ← *((const byte*) form_fields_val)
  to:form_mode::@3
form_mode::@3: scope:[form_mode]  from form_mode::@19 form_mode::@2 form_mode::@6
  [289] (byte) form_mode::preset_current#6 ← phi( form_mode::@2/(byte) form_mode::preset_current#0 form_mode::@19/(byte) form_mode::preset_current#1 form_mode::@6/(byte) form_mode::preset_current#6 )
  [289] (byte) form_field_idx#28 ← phi( form_mode::@2/(byte) form_field_idx#1 form_mode::@19/(byte) form_field_idx#18 form_mode::@6/(byte) form_field_idx#18 )
  [289] (byte) keyboard_events_size#47 ← phi( form_mode::@2/(byte) keyboard_events_size#27 form_mode::@19/(byte) keyboard_events_size#24 form_mode::@6/(byte) keyboard_events_size#24 )
  [289] (signed byte) form_cursor_count#21 ← phi( form_mode::@2/(signed byte) form_cursor_count#1 form_mode::@19/(signed byte) form_cursor_count#16 form_mode::@6/(signed byte) form_cursor_count#16 )
  to:form_mode::@4
form_mode::@4: scope:[form_mode]  from form_mode::@3 form_mode::@4
  [290] if(*((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)!=(byte) $ff) goto form_mode::@4
  to:form_mode::@5
form_mode::@5: scope:[form_mode]  from form_mode::@4
  [291] phi()
  [292] call form_control 
  [293] (byte) form_control::return#0 ← (byte) form_control::return#2
  to:form_mode::@17
form_mode::@17: scope:[form_mode]  from form_mode::@5
  [294] (byte~) form_mode::$11 ← (byte) form_control::return#0
  [295] if((byte~) form_mode::$11==(byte) 0) goto form_mode::@6
  to:form_mode::@return
form_mode::@return: scope:[form_mode]  from form_mode::@17
  [296] return 
  to:@return
form_mode::@6: scope:[form_mode]  from form_mode::@17
  [297] if((byte) form_mode::preset_current#6==*((const byte*) form_fields_val)) goto form_mode::@3
  to:form_mode::@7
form_mode::@7: scope:[form_mode]  from form_mode::@6
  [298] (byte) apply_preset::idx#0 ← *((const byte*) form_fields_val)
  [299] call apply_preset 
  to:form_mode::@18
form_mode::@18: scope:[form_mode]  from form_mode::@7
  [300] (byte) form_mode::preset_current#1 ← *((const byte*) form_fields_val)
  [301] call form_render_values 
  to:form_mode::@19
form_mode::@19: scope:[form_mode]  from form_mode::@18
  [302] (byte) render_preset_name::idx#1 ← *((const byte*) form_fields_val)
  [303] call render_preset_name 
  to:form_mode::@3

(void()) render_preset_name((byte) render_preset_name::idx)
render_preset_name: scope:[render_preset_name]  from form_mode::@15 form_mode::@19
  [304] (byte) render_preset_name::idx#10 ← phi( form_mode::@15/(byte) render_preset_name::idx#0 form_mode::@19/(byte) render_preset_name::idx#1 )
  [305] if((byte) render_preset_name::idx#10==(byte) 0) goto render_preset_name::@2
  to:render_preset_name::@3
render_preset_name::@3: scope:[render_preset_name]  from render_preset_name
  [306] if((byte) render_preset_name::idx#10==(byte) 1) goto render_preset_name::@2
  to:render_preset_name::@4
render_preset_name::@4: scope:[render_preset_name]  from render_preset_name::@3
  [307] if((byte) render_preset_name::idx#10==(byte) 2) goto render_preset_name::@2
  to:render_preset_name::@5
render_preset_name::@5: scope:[render_preset_name]  from render_preset_name::@4
  [308] if((byte) render_preset_name::idx#10==(byte) 3) goto render_preset_name::@2
  to:render_preset_name::@6
render_preset_name::@6: scope:[render_preset_name]  from render_preset_name::@5
  [309] if((byte) render_preset_name::idx#10==(byte) 4) goto render_preset_name::@2
  to:render_preset_name::@7
render_preset_name::@7: scope:[render_preset_name]  from render_preset_name::@6
  [310] if((byte) render_preset_name::idx#10==(byte) 5) goto render_preset_name::@2
  to:render_preset_name::@8
render_preset_name::@8: scope:[render_preset_name]  from render_preset_name::@7
  [311] if((byte) render_preset_name::idx#10==(byte) 6) goto render_preset_name::@2
  to:render_preset_name::@9
render_preset_name::@9: scope:[render_preset_name]  from render_preset_name::@8
  [312] if((byte) render_preset_name::idx#10==(byte) 7) goto render_preset_name::@2
  to:render_preset_name::@10
render_preset_name::@10: scope:[render_preset_name]  from render_preset_name::@9
  [313] if((byte) render_preset_name::idx#10==(byte) 8) goto render_preset_name::@2
  to:render_preset_name::@11
render_preset_name::@11: scope:[render_preset_name]  from render_preset_name::@10
  [314] if((byte) render_preset_name::idx#10==(byte) 9) goto render_preset_name::@2
  to:render_preset_name::@12
render_preset_name::@12: scope:[render_preset_name]  from render_preset_name::@11
  [315] if((byte) render_preset_name::idx#10==(byte) $a) goto render_preset_name::@1
  to:render_preset_name::@2
render_preset_name::@1: scope:[render_preset_name]  from render_preset_name::@12
  [316] phi()
  to:render_preset_name::@2
render_preset_name::@2: scope:[render_preset_name]  from render_preset_name render_preset_name::@1 render_preset_name::@10 render_preset_name::@11 render_preset_name::@12 render_preset_name::@3 render_preset_name::@4 render_preset_name::@5 render_preset_name::@6 render_preset_name::@7 render_preset_name::@8 render_preset_name::@9
  [317] (byte*) render_preset_name::name#13 ← phi( render_preset_name/(const byte*) render_preset_name::name#1 render_preset_name::@11/(const byte*) render_preset_name::name#10 render_preset_name::@1/(const byte*) render_preset_name::name#11 render_preset_name::@3/(const byte*) render_preset_name::name#2 render_preset_name::@12/(const byte*) render_preset_name::name#1 render_preset_name::@4/(const byte*) render_preset_name::name#3 render_preset_name::@5/(const byte*) render_preset_name::name#4 render_preset_name::@6/(const byte*) render_preset_name::name#5 render_preset_name::@7/(const byte*) render_preset_name::name#6 render_preset_name::@8/(const byte*) render_preset_name::name#7 render_preset_name::@9/(const byte*) render_preset_name::name#8 render_preset_name::@10/(const byte*) render_preset_name::name#9 )
  [318] (byte*) print_str_at::str#1 ← (byte*) render_preset_name::name#13
  [319] call print_str_at 
  to:render_preset_name::@return
render_preset_name::@return: scope:[render_preset_name]  from render_preset_name::@2
  [320] return 
  to:@return

(void()) print_str_at((byte*) print_str_at::str , (byte*) print_str_at::at)
print_str_at: scope:[print_str_at]  from render_preset_name::@2
  [321] phi()
  to:print_str_at::@1
print_str_at::@1: scope:[print_str_at]  from print_str_at print_str_at::@2
  [322] (byte*) print_str_at::at#2 ← phi( print_str_at/(const nomodify byte*) FORM_SCREEN+(byte)(number) $28*(number) 2+(byte) $a print_str_at::@2/(byte*) print_str_at::at#0 )
  [322] (byte*) print_str_at::str#2 ← phi( print_str_at/(byte*) print_str_at::str#1 print_str_at::@2/(byte*) print_str_at::str#0 )
  [323] if((byte) 0!=*((byte*) print_str_at::str#2)) goto print_str_at::@2
  to:print_str_at::@return
print_str_at::@return: scope:[print_str_at]  from print_str_at::@1
  [324] return 
  to:@return
print_str_at::@2: scope:[print_str_at]  from print_str_at::@1
  [325] *((byte*) print_str_at::at#2) ← *((byte*) print_str_at::str#2)
  [326] (byte*) print_str_at::at#0 ← ++ (byte*) print_str_at::at#2
  [327] (byte*) print_str_at::str#0 ← ++ (byte*) print_str_at::str#2
  to:print_str_at::@1

(void()) form_render_values()
form_render_values: scope:[form_render_values]  from form_mode::@14 form_mode::@18
  [328] phi()
  to:form_render_values::@1
form_render_values::@1: scope:[form_render_values]  from form_render_values form_render_values::@3
  [329] (byte) form_render_values::idx#2 ← phi( form_render_values/(byte) 0 form_render_values::@3/(byte) form_render_values::idx#1 )
  [330] if((byte) form_render_values::idx#2<(const byte) form_fields_cnt) goto form_render_values::@2
  to:form_render_values::@return
form_render_values::@return: scope:[form_render_values]  from form_render_values::@1
  [331] return 
  to:@return
form_render_values::@2: scope:[form_render_values]  from form_render_values::@1
  [332] (byte) form_field_ptr::field_idx#0 ← (byte) form_render_values::idx#2
  [333] call form_field_ptr 
  to:form_render_values::@3
form_render_values::@3: scope:[form_render_values]  from form_render_values::@2
  [334] *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) ← *((const to_nomodify byte*) print_hextab + *((const byte*) form_fields_val + (byte) form_render_values::idx#2))
  [335] (byte) form_render_values::idx#1 ← ++ (byte) form_render_values::idx#2
  to:form_render_values::@1

(byte*()) form_field_ptr((byte) form_field_ptr::field_idx)
form_field_ptr: scope:[form_field_ptr]  from form_control form_render_values::@2
  [336] (byte) form_field_ptr::field_idx#2 ← phi( form_control/(byte) form_field_ptr::field_idx#1 form_render_values::@2/(byte) form_field_ptr::field_idx#0 )
  [337] (byte) form_field_ptr::y#0 ← *((const byte*) form_fields_y + (byte) form_field_ptr::field_idx#2)
  [338] (word) form_field_ptr::line#0 ← *((const byte*) form_line_hi + (byte) form_field_ptr::y#0) w= *((const byte*) form_line_lo + (byte) form_field_ptr::y#0)
  [339] (byte) form_field_ptr::x#0 ← *((const byte*) form_fields_x + (byte) form_field_ptr::field_idx#2)
  [340] (byte*) form_field_ptr::return#0 ← (byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0
  to:form_field_ptr::@return
form_field_ptr::@return: scope:[form_field_ptr]  from form_field_ptr
  [341] return 
  to:@return

(void()) apply_preset((byte) apply_preset::idx)
apply_preset: scope:[apply_preset]  from form_mode::@7
  [342] if((byte) apply_preset::idx#0==(byte) 0) goto apply_preset::@2
  to:apply_preset::@3
apply_preset::@3: scope:[apply_preset]  from apply_preset
  [343] if((byte) apply_preset::idx#0==(byte) 1) goto apply_preset::@2
  to:apply_preset::@4
apply_preset::@4: scope:[apply_preset]  from apply_preset::@3
  [344] if((byte) apply_preset::idx#0==(byte) 2) goto apply_preset::@2
  to:apply_preset::@5
apply_preset::@5: scope:[apply_preset]  from apply_preset::@4
  [345] if((byte) apply_preset::idx#0==(byte) 3) goto apply_preset::@2
  to:apply_preset::@6
apply_preset::@6: scope:[apply_preset]  from apply_preset::@5
  [346] if((byte) apply_preset::idx#0==(byte) 4) goto apply_preset::@2
  to:apply_preset::@7
apply_preset::@7: scope:[apply_preset]  from apply_preset::@6
  [347] if((byte) apply_preset::idx#0==(byte) 5) goto apply_preset::@2
  to:apply_preset::@8
apply_preset::@8: scope:[apply_preset]  from apply_preset::@7
  [348] if((byte) apply_preset::idx#0==(byte) 6) goto apply_preset::@2
  to:apply_preset::@9
apply_preset::@9: scope:[apply_preset]  from apply_preset::@8
  [349] if((byte) apply_preset::idx#0==(byte) 7) goto apply_preset::@2
  to:apply_preset::@10
apply_preset::@10: scope:[apply_preset]  from apply_preset::@9
  [350] if((byte) apply_preset::idx#0==(byte) 8) goto apply_preset::@2
  to:apply_preset::@11
apply_preset::@11: scope:[apply_preset]  from apply_preset::@10
  [351] if((byte) apply_preset::idx#0==(byte) 9) goto apply_preset::@2
  to:apply_preset::@12
apply_preset::@12: scope:[apply_preset]  from apply_preset::@11
  [352] if((byte) apply_preset::idx#0==(byte) $a) goto apply_preset::@1
  to:apply_preset::@2
apply_preset::@1: scope:[apply_preset]  from apply_preset::@12
  [353] phi()
  to:apply_preset::@2
apply_preset::@2: scope:[apply_preset]  from apply_preset apply_preset::@1 apply_preset::@10 apply_preset::@11 apply_preset::@12 apply_preset::@3 apply_preset::@4 apply_preset::@5 apply_preset::@6 apply_preset::@7 apply_preset::@8 apply_preset::@9
  [354] (byte*) apply_preset::preset#15 ← phi( apply_preset/(const byte*) preset_stdchar apply_preset::@11/(const byte*) preset_sixsfred2 apply_preset::@1/(const byte*) preset_8bpppixelcell apply_preset::@3/(const byte*) preset_ecmchar apply_preset::@12/(const byte*) preset_stdchar apply_preset::@4/(const byte*) preset_stdbm apply_preset::@5/(const byte*) preset_mcbm apply_preset::@6/(const byte*) preset_hi_stdchar apply_preset::@7/(const byte*) preset_hi_ecmchar apply_preset::@8/(const byte*) preset_twoplane apply_preset::@9/(const byte*) preset_chunky apply_preset::@10/(const byte*) preset_sixsfred )
  to:apply_preset::@13
apply_preset::@13: scope:[apply_preset]  from apply_preset::@14 apply_preset::@2
  [355] (byte) apply_preset::i#2 ← phi( apply_preset::@2/(byte) 0 apply_preset::@14/(byte) apply_preset::i#1 )
  [356] if((byte) apply_preset::i#2!=(const byte) form_fields_cnt) goto apply_preset::@14
  to:apply_preset::@return
apply_preset::@return: scope:[apply_preset]  from apply_preset::@13
  [357] return 
  to:@return
apply_preset::@14: scope:[apply_preset]  from apply_preset::@13
  [358] *((const byte*) form_fields_val + (byte) apply_preset::i#2) ← *((byte*) apply_preset::preset#15 + (byte) apply_preset::i#2)
  [359] (byte) apply_preset::i#1 ← ++ (byte) apply_preset::i#2
  to:apply_preset::@13

(byte()) form_control()
form_control: scope:[form_control]  from form_mode::@5
  [360] (byte) form_field_ptr::field_idx#1 ← (byte) form_field_idx#28
  [361] call form_field_ptr 
  [362] (byte*) form_field_ptr::return#3 ← (byte*) form_field_ptr::return#0
  to:form_control::@18
form_control::@18: scope:[form_control]  from form_control
  [363] (byte*) form_control::field#0 ← (byte*) form_field_ptr::return#3
  [364] (signed byte) form_cursor_count#5 ← -- (signed byte) form_cursor_count#21
  [365] if((signed byte) form_cursor_count#5>=(signed byte) 0) goto form_control::@21
  to:form_control::@1
form_control::@21: scope:[form_control]  from form_control::@18
  [366] phi()
  to:form_control::@1
form_control::@1: scope:[form_control]  from form_control::@18 form_control::@21
  [367] (signed byte) form_cursor_count#15 ← phi( form_control::@21/(signed byte) form_cursor_count#5 form_control::@18/(const nomodify signed byte) FORM_CURSOR_BLINK )
  [368] if((signed byte) form_cursor_count#15<(const nomodify signed byte) FORM_CURSOR_BLINK/(signed byte) 2) goto form_control::@2
  to:form_control::@7
form_control::@7: scope:[form_control]  from form_control::@1
  [369] (byte~) form_control::$12 ← *((byte*) form_control::field#0) & (byte) $7f
  [370] *((byte*) form_control::field#0) ← (byte~) form_control::$12
  to:form_control::@3
form_control::@3: scope:[form_control]  from form_control::@2 form_control::@7
  [371] phi()
  [372] call keyboard_event_scan 
  to:form_control::@19
form_control::@19: scope:[form_control]  from form_control::@3
  [373] phi()
  [374] call keyboard_event_get 
  [375] (byte) keyboard_event_get::return#4 ← (byte) keyboard_event_get::return#2
  to:form_control::@20
form_control::@20: scope:[form_control]  from form_control::@19
  [376] (byte) form_control::key_event#0 ← (byte) keyboard_event_get::return#4
  [377] if((byte) form_control::key_event#0!=(const nomodify byte) KEY_CRSR_DOWN) goto form_control::@4
  to:form_control::@8
form_control::@8: scope:[form_control]  from form_control::@20
  [378] (byte~) form_control::$14 ← *((byte*) form_control::field#0) & (byte) $7f
  [379] *((byte*) form_control::field#0) ← (byte~) form_control::$14
  [380] (byte~) form_control::$15 ← (byte) keyboard_modifiers#21 & (const nomodify byte) KEY_MODIFIER_SHIFT
  [381] if((byte~) form_control::$15==(byte) 0) goto form_control::@13
  to:form_control::@9
form_control::@9: scope:[form_control]  from form_control::@8
  [382] (byte) form_field_idx#6 ← -- (byte) form_field_idx#28
  [383] if((byte) form_field_idx#6!=(byte) $ff) goto form_control::@22
  to:form_control::@14
form_control::@22: scope:[form_control]  from form_control::@9
  [384] phi()
  to:form_control::@14
form_control::@14: scope:[form_control]  from form_control::@13 form_control::@22 form_control::@23 form_control::@9
  [385] (byte) form_field_idx#31 ← phi( form_control::@22/(byte) form_field_idx#6 form_control::@9/(const byte) form_fields_cnt-(byte) 1 form_control::@23/(byte) form_field_idx#5 form_control::@13/(byte) 0 )
  to:form_control::@return
form_control::@return: scope:[form_control]  from form_control::@14 form_control::@16 form_control::@5 form_control::@6
  [386] (byte) form_field_idx#18 ← phi( form_control::@5/(byte) form_field_idx#28 form_control::@14/(byte) form_field_idx#31 form_control::@16/(byte) form_field_idx#28 form_control::@6/(byte) form_field_idx#28 )
  [386] (signed byte) form_cursor_count#16 ← phi( form_control::@5/(signed byte) form_cursor_count#15 form_control::@14/(const nomodify signed byte) FORM_CURSOR_BLINK/(signed byte) 2 form_control::@16/(signed byte) form_cursor_count#15 form_control::@6/(signed byte) form_cursor_count#15 )
  [386] (byte) form_control::return#2 ← phi( form_control::@5/(byte) $ff form_control::@14/(byte) 0 form_control::@16/(byte) 0 form_control::@6/(byte) 0 )
  [387] return 
  to:@return
form_control::@13: scope:[form_control]  from form_control::@8
  [388] (byte) form_field_idx#5 ← ++ (byte) form_field_idx#28
  [389] if((byte) form_field_idx#5!=(const byte) form_fields_cnt) goto form_control::@23
  to:form_control::@14
form_control::@23: scope:[form_control]  from form_control::@13
  [390] phi()
  to:form_control::@14
form_control::@4: scope:[form_control]  from form_control::@20
  [391] if((byte) form_control::key_event#0!=(const nomodify byte) KEY_CRSR_RIGHT) goto form_control::@5
  to:form_control::@10
form_control::@10: scope:[form_control]  from form_control::@4
  [392] (byte~) form_control::$22 ← (byte) keyboard_modifiers#21 & (const nomodify byte) KEY_MODIFIER_SHIFT
  [393] if((byte~) form_control::$22==(byte) 0) goto form_control::@15
  to:form_control::@11
form_control::@11: scope:[form_control]  from form_control::@10
  [394] *((const byte*) form_fields_val + (byte) form_field_idx#28) ← -- *((const byte*) form_fields_val + (byte) form_field_idx#28)
  [395] if(*((const byte*) form_fields_val + (byte) form_field_idx#28)!=(byte) $ff) goto form_control::@16
  to:form_control::@12
form_control::@12: scope:[form_control]  from form_control::@11
  [396] *((const byte*) form_fields_val + (byte) form_field_idx#28) ← *((const byte*) form_fields_max + (byte) form_field_idx#28)
  to:form_control::@16
form_control::@16: scope:[form_control]  from form_control::@11 form_control::@12 form_control::@15 form_control::@17
  [397] *((byte*) form_control::field#0) ← *((const to_nomodify byte*) print_hextab + *((const byte*) form_fields_val + (byte) form_field_idx#28))
  to:form_control::@return
form_control::@15: scope:[form_control]  from form_control::@10
  [398] *((const byte*) form_fields_val + (byte) form_field_idx#28) ← ++ *((const byte*) form_fields_val + (byte) form_field_idx#28)
  [399] if(*((const byte*) form_fields_val + (byte) form_field_idx#28)<=*((const byte*) form_fields_max + (byte) form_field_idx#28)) goto form_control::@16
  to:form_control::@17
form_control::@17: scope:[form_control]  from form_control::@15
  [400] *((const byte*) form_fields_val + (byte) form_field_idx#28) ← (byte) 0
  to:form_control::@16
form_control::@5: scope:[form_control]  from form_control::@4
  [401] if((byte) form_control::key_event#0!=(const nomodify byte) KEY_SPACE) goto form_control::@6
  to:form_control::@return
form_control::@6: scope:[form_control]  from form_control::@5
  [402] phi()
  to:form_control::@return
form_control::@2: scope:[form_control]  from form_control::@1
  [403] (byte~) form_control::$13 ← *((byte*) form_control::field#0) | (byte) $80
  [404] *((byte*) form_control::field#0) ← (byte~) form_control::$13
  to:form_control::@3

(void()) form_set_screen((byte*) form_set_screen::screen)
form_set_screen: scope:[form_set_screen]  from form_mode::@13
  [405] phi()
  to:form_set_screen::@1
form_set_screen::@1: scope:[form_set_screen]  from form_set_screen form_set_screen::@1
  [406] (byte) form_set_screen::y#2 ← phi( form_set_screen/(byte) 0 form_set_screen::@1/(byte) form_set_screen::y#1 )
  [406] (byte*) form_set_screen::line#2 ← phi( form_set_screen/(const nomodify byte*) FORM_SCREEN form_set_screen::@1/(byte*) form_set_screen::line#1 )
  [407] (byte~) form_set_screen::$0 ← < (byte*) form_set_screen::line#2
  [408] *((const byte*) form_line_lo + (byte) form_set_screen::y#2) ← (byte~) form_set_screen::$0
  [409] (byte~) form_set_screen::$1 ← > (byte*) form_set_screen::line#2
  [410] *((const byte*) form_line_hi + (byte) form_set_screen::y#2) ← (byte~) form_set_screen::$1
  [411] (byte*) form_set_screen::line#1 ← (byte*) form_set_screen::line#2 + (byte) $28
  [412] (byte) form_set_screen::y#1 ← ++ (byte) form_set_screen::y#2
  [413] if((byte) form_set_screen::y#1!=(byte) $19) goto form_set_screen::@1
  to:form_set_screen::@return
form_set_screen::@return: scope:[form_set_screen]  from form_set_screen::@1
  [414] return 
  to:@return

(void()) print_str_lines((byte*) print_str_lines::str)
print_str_lines: scope:[print_str_lines]  from form_mode::@12 form_mode::@9
  [415] (byte*) print_str_lines::str#5 ← phi( form_mode::@12/(const byte*) FORM_TEXT form_mode::@9/(const byte*) FORM_COLS )
  [416] (byte*) print_char_cursor#72 ← (byte*) print_set_screen::screen#2
  to:print_str_lines::@1
print_str_lines::@1: scope:[print_str_lines]  from print_str_lines print_str_lines::@6
  [417] (byte*) print_line_cursor#2 ← phi( print_str_lines/(byte*) print_set_screen::screen#2 print_str_lines::@6/(byte*) print_line_cursor#22 )
  [417] (byte*) print_char_cursor#24 ← phi( print_str_lines/(byte*) print_char_cursor#72 print_str_lines::@6/(byte*) print_char_cursor#73 )
  [417] (byte*) print_str_lines::str#3 ← phi( print_str_lines/(byte*) print_str_lines::str#5 print_str_lines::@6/(byte*) print_str_lines::str#0 )
  [418] if((byte) 0!=*((byte*) print_str_lines::str#3)) goto print_str_lines::@2
  to:print_str_lines::@return
print_str_lines::@return: scope:[print_str_lines]  from print_str_lines::@1
  [419] return 
  to:@return
print_str_lines::@2: scope:[print_str_lines]  from print_str_lines::@1 print_str_lines::@3
  [420] (byte*) print_char_cursor#41 ← phi( print_str_lines::@1/(byte*) print_char_cursor#24 print_str_lines::@3/(byte*) print_char_cursor#42 )
  [420] (byte*) print_str_lines::str#4 ← phi( print_str_lines::@1/(byte*) print_str_lines::str#3 print_str_lines::@3/(byte*) print_str_lines::str#0 )
  [421] (byte) print_str_lines::ch#0 ← *((byte*) print_str_lines::str#4)
  [422] (byte*) print_str_lines::str#0 ← ++ (byte*) print_str_lines::str#4
  [423] if((byte) 0==(byte) print_str_lines::ch#0) goto print_str_lines::@3
  to:print_str_lines::@4
print_str_lines::@4: scope:[print_str_lines]  from print_str_lines::@2
  [424] (byte) print_char::ch#0 ← (byte) print_str_lines::ch#0
  [425] call print_char 
  to:print_str_lines::@3
print_str_lines::@3: scope:[print_str_lines]  from print_str_lines::@2 print_str_lines::@4
  [426] (byte*) print_char_cursor#42 ← phi( print_str_lines::@2/(byte*) print_char_cursor#41 print_str_lines::@4/(byte*) print_char_cursor#28 )
  [427] if((byte) 0!=(byte) print_str_lines::ch#0) goto print_str_lines::@2
  to:print_str_lines::@5
print_str_lines::@5: scope:[print_str_lines]  from print_str_lines::@3
  [428] phi()
  [429] call print_ln 
  to:print_str_lines::@6
print_str_lines::@6: scope:[print_str_lines]  from print_str_lines::@5
  [430] (byte*) print_char_cursor#73 ← (byte*) print_line_cursor#22
  to:print_str_lines::@1

(void()) print_ln()
print_ln: scope:[print_ln]  from print_str_lines::@5
  [431] phi()
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [432] (byte*) print_line_cursor#21 ← phi( print_ln/(byte*) print_line_cursor#2 print_ln::@1/(byte*) print_line_cursor#22 )
  [433] (byte*) print_line_cursor#22 ← (byte*) print_line_cursor#21 + (byte) $28
  [434] if((byte*) print_line_cursor#22<(byte*) print_char_cursor#42) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [435] return 
  to:@return

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from print_str_lines::@4
  [436] *((byte*) print_char_cursor#41) ← (byte) print_char::ch#0
  [437] (byte*) print_char_cursor#28 ← ++ (byte*) print_char_cursor#41
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [438] return 
  to:@return

(void()) print_cls()
print_cls: scope:[print_cls]  from form_mode::@11 form_mode::@8
  [439] (void*) memset::str#0 ← (void*)(byte*) print_set_screen::screen#2
  [440] call memset 
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls
  [441] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  [442] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [443] (byte*) memset::end#0 ← (byte*)(void*) memset::str#0 + (const word) memset::num#0
  [444] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#0
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [445] (byte*) memset::dst#2 ← phi( memset::@1/(byte*) memset::dst#4 memset::@3/(byte*) memset::dst#1 )
  [446] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [447] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [448] *((byte*) memset::dst#2) ← (const byte) memset::c#0
  [449] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@2

(void()) print_set_screen((byte*) print_set_screen::screen)
print_set_screen: scope:[print_set_screen]  from form_mode form_mode::@10
  [450] (byte*) print_set_screen::screen#2 ← phi( form_mode/(const nomodify byte*) COLS form_mode::@10/(const nomodify byte*) FORM_SCREEN )
  to:print_set_screen::@return
print_set_screen::@return: scope:[print_set_screen]  from print_set_screen
  [451] return 
  to:@return

(void()) gfx_init()
gfx_init: scope:[gfx_init]  from main::@3
  [452] phi()
  [453] call gfx_init_screen0 
  to:gfx_init::@1
gfx_init::@1: scope:[gfx_init]  from gfx_init
  [454] phi()
  [455] call gfx_init_screen1 
  to:gfx_init::@2
gfx_init::@2: scope:[gfx_init]  from gfx_init::@1
  [456] phi()
  [457] call gfx_init_screen2 
  to:gfx_init::@3
gfx_init::@3: scope:[gfx_init]  from gfx_init::@2
  [458] phi()
  [459] call gfx_init_screen3 
  to:gfx_init::@4
gfx_init::@4: scope:[gfx_init]  from gfx_init::@3
  [460] phi()
  [461] call gfx_init_screen4 
  to:gfx_init::@5
gfx_init::@5: scope:[gfx_init]  from gfx_init::@4
  [462] phi()
  [463] call gfx_init_charset 
  to:gfx_init::@6
gfx_init::@6: scope:[gfx_init]  from gfx_init::@5
  [464] phi()
  [465] call gfx_init_vic_bitmap 
  to:gfx_init::@7
gfx_init::@7: scope:[gfx_init]  from gfx_init::@6
  [466] phi()
  [467] call gfx_init_plane_8bppchunky 
  to:gfx_init::@8
gfx_init::@8: scope:[gfx_init]  from gfx_init::@7
  [468] phi()
  [469] call gfx_init_plane_charset8 
  to:gfx_init::@9
gfx_init::@9: scope:[gfx_init]  from gfx_init::@8
  [470] phi()
  [471] call gfx_init_plane_horisontal 
  to:gfx_init::@10
gfx_init::@10: scope:[gfx_init]  from gfx_init::@9
  [472] phi()
  [473] call gfx_init_plane_vertical 
  to:gfx_init::@11
gfx_init::@11: scope:[gfx_init]  from gfx_init::@10
  [474] phi()
  [475] call gfx_init_plane_horisontal2 
  to:gfx_init::@12
gfx_init::@12: scope:[gfx_init]  from gfx_init::@11
  [476] phi()
  [477] call gfx_init_plane_vertical2 
  to:gfx_init::@13
gfx_init::@13: scope:[gfx_init]  from gfx_init::@12
  [478] phi()
  [479] call gfx_init_plane_blank 
  to:gfx_init::@14
gfx_init::@14: scope:[gfx_init]  from gfx_init::@13
  [480] phi()
  [481] call gfx_init_plane_full 
  to:gfx_init::@return
gfx_init::@return: scope:[gfx_init]  from gfx_init::@14
  [482] return 
  to:@return

(void()) gfx_init_plane_full()
gfx_init_plane_full: scope:[gfx_init_plane_full]  from gfx_init::@14
  [483] phi()
  [484] call gfx_init_plane_fill 
  to:gfx_init_plane_full::@return
gfx_init_plane_full::@return: scope:[gfx_init_plane_full]  from gfx_init_plane_full
  [485] return 
  to:@return

(void()) gfx_init_plane_fill((dword) gfx_init_plane_fill::plane_addr , (byte) gfx_init_plane_fill::fill)
gfx_init_plane_fill: scope:[gfx_init_plane_fill]  from gfx_init_plane_blank gfx_init_plane_full gfx_init_plane_vertical2
  [486] (byte) gfx_init_plane_fill::fill#6 ← phi( gfx_init_plane_blank/(byte) 0 gfx_init_plane_full/(byte) $ff gfx_init_plane_vertical2/(byte) $1b )
  [486] (dword) gfx_init_plane_fill::plane_addr#3 ← phi( gfx_init_plane_blank/(const nomodify dword) PLANE_BLANK gfx_init_plane_full/(const nomodify dword) PLANE_FULL gfx_init_plane_vertical2/(const nomodify dword) PLANE_VERTICAL2 )
  [487] (dword~) gfx_init_plane_fill::$0 ← (dword) gfx_init_plane_fill::plane_addr#3 << (byte) 2
  [488] (word~) gfx_init_plane_fill::$1 ← > (dword~) gfx_init_plane_fill::$0
  [489] (byte) gfx_init_plane_fill::gfxbCpuBank#0 ← < (word~) gfx_init_plane_fill::$1
  [490] (byte) dtvSetCpuBankSegment1::cpuBankIdx#11 ← (byte) gfx_init_plane_fill::gfxbCpuBank#0
  [491] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_fill::@5
gfx_init_plane_fill::@5: scope:[gfx_init_plane_fill]  from gfx_init_plane_fill
  [492] (word~) gfx_init_plane_fill::$4 ← < (dword) gfx_init_plane_fill::plane_addr#3
  [493] (word~) gfx_init_plane_fill::$5 ← (word~) gfx_init_plane_fill::$4 & (word) $3fff
  [494] (word) gfx_init_plane_fill::gfxb#0 ← (word) $4000 + (word~) gfx_init_plane_fill::$5
  [495] (byte*) gfx_init_plane_fill::gfxb#6 ← (byte*)(word) gfx_init_plane_fill::gfxb#0
  to:gfx_init_plane_fill::@1
gfx_init_plane_fill::@1: scope:[gfx_init_plane_fill]  from gfx_init_plane_fill::@3 gfx_init_plane_fill::@5
  [496] (byte) gfx_init_plane_fill::by#4 ← phi( gfx_init_plane_fill::@3/(byte) gfx_init_plane_fill::by#1 gfx_init_plane_fill::@5/(byte) 0 )
  [496] (byte*) gfx_init_plane_fill::gfxb#3 ← phi( gfx_init_plane_fill::@3/(byte*) gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::@5/(byte*) gfx_init_plane_fill::gfxb#6 )
  to:gfx_init_plane_fill::@2
gfx_init_plane_fill::@2: scope:[gfx_init_plane_fill]  from gfx_init_plane_fill::@1 gfx_init_plane_fill::@2
  [497] (byte) gfx_init_plane_fill::bx#2 ← phi( gfx_init_plane_fill::@1/(byte) 0 gfx_init_plane_fill::@2/(byte) gfx_init_plane_fill::bx#1 )
  [497] (byte*) gfx_init_plane_fill::gfxb#2 ← phi( gfx_init_plane_fill::@1/(byte*) gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::@2/(byte*) gfx_init_plane_fill::gfxb#1 )
  [498] *((byte*) gfx_init_plane_fill::gfxb#2) ← (byte) gfx_init_plane_fill::fill#6
  [499] (byte*) gfx_init_plane_fill::gfxb#1 ← ++ (byte*) gfx_init_plane_fill::gfxb#2
  [500] (byte) gfx_init_plane_fill::bx#1 ← ++ (byte) gfx_init_plane_fill::bx#2
  [501] if((byte) gfx_init_plane_fill::bx#1!=(byte) $28) goto gfx_init_plane_fill::@2
  to:gfx_init_plane_fill::@3
gfx_init_plane_fill::@3: scope:[gfx_init_plane_fill]  from gfx_init_plane_fill::@2
  [502] (byte) gfx_init_plane_fill::by#1 ← ++ (byte) gfx_init_plane_fill::by#4
  [503] if((byte) gfx_init_plane_fill::by#1!=(byte) $c8) goto gfx_init_plane_fill::@1
  to:gfx_init_plane_fill::@4
gfx_init_plane_fill::@4: scope:[gfx_init_plane_fill]  from gfx_init_plane_fill::@3
  [504] phi()
  [505] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_fill::@return
gfx_init_plane_fill::@return: scope:[gfx_init_plane_fill]  from gfx_init_plane_fill::@4
  [506] return 
  to:@return

(void()) dtvSetCpuBankSegment1((byte) dtvSetCpuBankSegment1::cpuBankIdx)
dtvSetCpuBankSegment1: scope:[dtvSetCpuBankSegment1]  from gfx_init_plane_8bppchunky gfx_init_plane_8bppchunky::@4 gfx_init_plane_8bppchunky::@6 gfx_init_plane_charset8 gfx_init_plane_charset8::@8 gfx_init_plane_fill gfx_init_plane_fill::@4 gfx_init_plane_horisontal gfx_init_plane_horisontal2 gfx_init_plane_horisontal2::@4 gfx_init_plane_horisontal::@7 gfx_init_plane_vertical gfx_init_plane_vertical::@4
  [507] (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 ← phi( gfx_init_plane_8bppchunky/(byte)(const nomodify dword) PLANE_8BPP_CHUNKY/(word) $4000 gfx_init_plane_8bppchunky::@4/(byte) dtvSetCpuBankSegment1::cpuBankIdx#1 gfx_init_plane_8bppchunky::@6/(byte)(number) $4000/(number) $4000 gfx_init_plane_charset8/(const byte) gfx_init_plane_charset8::gfxbCpuBank#0 gfx_init_plane_charset8::@8/(byte)(number) $4000/(number) $4000 gfx_init_plane_fill/(byte) dtvSetCpuBankSegment1::cpuBankIdx#11 gfx_init_plane_fill::@4/(byte)(number) $4000/(number) $4000 gfx_init_plane_horisontal/(const byte) gfx_init_plane_horisontal::gfxbCpuBank#0 gfx_init_plane_horisontal2/(const byte) gfx_init_plane_horisontal2::gfxbCpuBank#0 gfx_init_plane_horisontal2::@4/(byte)(number) $4000/(number) $4000 gfx_init_plane_horisontal::@7/(byte)(number) $4000/(number) $4000 gfx_init_plane_vertical/(const byte) gfx_init_plane_vertical::gfxbCpuBank#0 gfx_init_plane_vertical::@4/(byte)(number) $4000/(number) $4000 )
  [508] *((const byte*) dtvSetCpuBankSegment1::cpuBank) ← (byte) dtvSetCpuBankSegment1::cpuBankIdx#13
  asm { .byte$32,$dd lda$ff .byte$32,$00  }
  to:dtvSetCpuBankSegment1::@return
dtvSetCpuBankSegment1::@return: scope:[dtvSetCpuBankSegment1]  from dtvSetCpuBankSegment1
  [510] return 
  to:@return

(void()) gfx_init_plane_blank()
gfx_init_plane_blank: scope:[gfx_init_plane_blank]  from gfx_init::@13
  [511] phi()
  [512] call gfx_init_plane_fill 
  to:gfx_init_plane_blank::@return
gfx_init_plane_blank::@return: scope:[gfx_init_plane_blank]  from gfx_init_plane_blank
  [513] return 
  to:@return

(void()) gfx_init_plane_vertical2()
gfx_init_plane_vertical2: scope:[gfx_init_plane_vertical2]  from gfx_init::@12
  [514] phi()
  [515] call gfx_init_plane_fill 
  to:gfx_init_plane_vertical2::@return
gfx_init_plane_vertical2::@return: scope:[gfx_init_plane_vertical2]  from gfx_init_plane_vertical2
  [516] return 
  to:@return

(void()) gfx_init_plane_horisontal2()
gfx_init_plane_horisontal2: scope:[gfx_init_plane_horisontal2]  from gfx_init::@11
  [517] phi()
  [518] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_horisontal2::@1
gfx_init_plane_horisontal2::@1: scope:[gfx_init_plane_horisontal2]  from gfx_init_plane_horisontal2 gfx_init_plane_horisontal2::@3
  [519] (byte*) gfx_init_plane_horisontal2::gfxa#3 ← phi( gfx_init_plane_horisontal2::@3/(byte*) gfx_init_plane_horisontal2::gfxa#1 gfx_init_plane_horisontal2/(byte*)(word) $4000 )
  [519] (byte) gfx_init_plane_horisontal2::ay#4 ← phi( gfx_init_plane_horisontal2::@3/(byte) gfx_init_plane_horisontal2::ay#1 gfx_init_plane_horisontal2/(byte) 0 )
  to:gfx_init_plane_horisontal2::@2
gfx_init_plane_horisontal2::@2: scope:[gfx_init_plane_horisontal2]  from gfx_init_plane_horisontal2::@1 gfx_init_plane_horisontal2::@2
  [520] (byte) gfx_init_plane_horisontal2::ax#2 ← phi( gfx_init_plane_horisontal2::@1/(byte) 0 gfx_init_plane_horisontal2::@2/(byte) gfx_init_plane_horisontal2::ax#1 )
  [520] (byte*) gfx_init_plane_horisontal2::gfxa#2 ← phi( gfx_init_plane_horisontal2::@1/(byte*) gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::@2/(byte*) gfx_init_plane_horisontal2::gfxa#1 )
  [521] (byte~) gfx_init_plane_horisontal2::$2 ← (byte) gfx_init_plane_horisontal2::ay#4 >> (byte) 1
  [522] (byte) gfx_init_plane_horisontal2::row#0 ← (byte~) gfx_init_plane_horisontal2::$2 & (byte) 3
  [523] *((byte*) gfx_init_plane_horisontal2::gfxa#2) ← *((const byte*) gfx_init_plane_horisontal2::row_bitmask + (byte) gfx_init_plane_horisontal2::row#0)
  [524] (byte*) gfx_init_plane_horisontal2::gfxa#1 ← ++ (byte*) gfx_init_plane_horisontal2::gfxa#2
  [525] (byte) gfx_init_plane_horisontal2::ax#1 ← ++ (byte) gfx_init_plane_horisontal2::ax#2
  [526] if((byte) gfx_init_plane_horisontal2::ax#1!=(byte) $28) goto gfx_init_plane_horisontal2::@2
  to:gfx_init_plane_horisontal2::@3
gfx_init_plane_horisontal2::@3: scope:[gfx_init_plane_horisontal2]  from gfx_init_plane_horisontal2::@2
  [527] (byte) gfx_init_plane_horisontal2::ay#1 ← ++ (byte) gfx_init_plane_horisontal2::ay#4
  [528] if((byte) gfx_init_plane_horisontal2::ay#1!=(byte) $c8) goto gfx_init_plane_horisontal2::@1
  to:gfx_init_plane_horisontal2::@4
gfx_init_plane_horisontal2::@4: scope:[gfx_init_plane_horisontal2]  from gfx_init_plane_horisontal2::@3
  [529] phi()
  [530] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_horisontal2::@return
gfx_init_plane_horisontal2::@return: scope:[gfx_init_plane_horisontal2]  from gfx_init_plane_horisontal2::@4
  [531] return 
  to:@return

(void()) gfx_init_plane_vertical()
gfx_init_plane_vertical: scope:[gfx_init_plane_vertical]  from gfx_init::@10
  [532] phi()
  [533] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_vertical::@1
gfx_init_plane_vertical::@1: scope:[gfx_init_plane_vertical]  from gfx_init_plane_vertical gfx_init_plane_vertical::@3
  [534] (byte) gfx_init_plane_vertical::by#4 ← phi( gfx_init_plane_vertical::@3/(byte) gfx_init_plane_vertical::by#1 gfx_init_plane_vertical/(byte) 0 )
  [534] (byte*) gfx_init_plane_vertical::gfxb#3 ← phi( gfx_init_plane_vertical::@3/(byte*) gfx_init_plane_vertical::gfxb#1 gfx_init_plane_vertical/(byte*)(word) $4000+(const nomodify dword) PLANE_VERTICAL&(word) $3fff )
  to:gfx_init_plane_vertical::@2
gfx_init_plane_vertical::@2: scope:[gfx_init_plane_vertical]  from gfx_init_plane_vertical::@1 gfx_init_plane_vertical::@2
  [535] (byte) gfx_init_plane_vertical::bx#2 ← phi( gfx_init_plane_vertical::@1/(byte) 0 gfx_init_plane_vertical::@2/(byte) gfx_init_plane_vertical::bx#1 )
  [535] (byte*) gfx_init_plane_vertical::gfxb#2 ← phi( gfx_init_plane_vertical::@1/(byte*) gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::@2/(byte*) gfx_init_plane_vertical::gfxb#1 )
  [536] *((byte*) gfx_init_plane_vertical::gfxb#2) ← (byte) $f
  [537] (byte*) gfx_init_plane_vertical::gfxb#1 ← ++ (byte*) gfx_init_plane_vertical::gfxb#2
  [538] (byte) gfx_init_plane_vertical::bx#1 ← ++ (byte) gfx_init_plane_vertical::bx#2
  [539] if((byte) gfx_init_plane_vertical::bx#1!=(byte) $28) goto gfx_init_plane_vertical::@2
  to:gfx_init_plane_vertical::@3
gfx_init_plane_vertical::@3: scope:[gfx_init_plane_vertical]  from gfx_init_plane_vertical::@2
  [540] (byte) gfx_init_plane_vertical::by#1 ← ++ (byte) gfx_init_plane_vertical::by#4
  [541] if((byte) gfx_init_plane_vertical::by#1!=(byte) $c8) goto gfx_init_plane_vertical::@1
  to:gfx_init_plane_vertical::@4
gfx_init_plane_vertical::@4: scope:[gfx_init_plane_vertical]  from gfx_init_plane_vertical::@3
  [542] phi()
  [543] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_vertical::@return
gfx_init_plane_vertical::@return: scope:[gfx_init_plane_vertical]  from gfx_init_plane_vertical::@4
  [544] return 
  to:@return

(void()) gfx_init_plane_horisontal()
gfx_init_plane_horisontal: scope:[gfx_init_plane_horisontal]  from gfx_init::@9
  [545] phi()
  [546] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_horisontal::@1
gfx_init_plane_horisontal::@1: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal gfx_init_plane_horisontal::@6
  [547] (byte*) gfx_init_plane_horisontal::gfxa#6 ← phi( gfx_init_plane_horisontal::@6/(byte*) gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal/(byte*)(word) $4000 )
  [547] (byte) gfx_init_plane_horisontal::ay#4 ← phi( gfx_init_plane_horisontal::@6/(byte) gfx_init_plane_horisontal::ay#1 gfx_init_plane_horisontal/(byte) 0 )
  to:gfx_init_plane_horisontal::@2
gfx_init_plane_horisontal::@2: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@1 gfx_init_plane_horisontal::@4
  [548] (byte) gfx_init_plane_horisontal::ax#2 ← phi( gfx_init_plane_horisontal::@1/(byte) 0 gfx_init_plane_horisontal::@4/(byte) gfx_init_plane_horisontal::ax#1 )
  [548] (byte*) gfx_init_plane_horisontal::gfxa#3 ← phi( gfx_init_plane_horisontal::@1/(byte*) gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::@4/(byte*) gfx_init_plane_horisontal::gfxa#7 )
  [549] (byte~) gfx_init_plane_horisontal::$2 ← (byte) gfx_init_plane_horisontal::ay#4 & (byte) 4
  [550] if((byte~) gfx_init_plane_horisontal::$2==(byte) 0) goto gfx_init_plane_horisontal::@3
  to:gfx_init_plane_horisontal::@5
gfx_init_plane_horisontal::@5: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@2
  [551] *((byte*) gfx_init_plane_horisontal::gfxa#3) ← (byte) $ff
  [552] (byte*) gfx_init_plane_horisontal::gfxa#2 ← ++ (byte*) gfx_init_plane_horisontal::gfxa#3
  to:gfx_init_plane_horisontal::@4
gfx_init_plane_horisontal::@4: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@3 gfx_init_plane_horisontal::@5
  [553] (byte*) gfx_init_plane_horisontal::gfxa#7 ← phi( gfx_init_plane_horisontal::@3/(byte*) gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::@5/(byte*) gfx_init_plane_horisontal::gfxa#2 )
  [554] (byte) gfx_init_plane_horisontal::ax#1 ← ++ (byte) gfx_init_plane_horisontal::ax#2
  [555] if((byte) gfx_init_plane_horisontal::ax#1!=(byte) $28) goto gfx_init_plane_horisontal::@2
  to:gfx_init_plane_horisontal::@6
gfx_init_plane_horisontal::@6: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@4
  [556] (byte) gfx_init_plane_horisontal::ay#1 ← ++ (byte) gfx_init_plane_horisontal::ay#4
  [557] if((byte) gfx_init_plane_horisontal::ay#1!=(byte) $c8) goto gfx_init_plane_horisontal::@1
  to:gfx_init_plane_horisontal::@7
gfx_init_plane_horisontal::@7: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@6
  [558] phi()
  [559] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_horisontal::@return
gfx_init_plane_horisontal::@return: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@7
  [560] return 
  to:@return
gfx_init_plane_horisontal::@3: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@2
  [561] *((byte*) gfx_init_plane_horisontal::gfxa#3) ← (byte) 0
  [562] (byte*) gfx_init_plane_horisontal::gfxa#1 ← ++ (byte*) gfx_init_plane_horisontal::gfxa#3
  to:gfx_init_plane_horisontal::@4

(void()) gfx_init_plane_charset8()
gfx_init_plane_charset8: scope:[gfx_init_plane_charset8]  from gfx_init::@8
  [563] phi()
  [564] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_charset8::@9
gfx_init_plane_charset8::@9: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8
  [565] *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_RAM_CHARROM
  to:gfx_init_plane_charset8::@1
gfx_init_plane_charset8::@1: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@7 gfx_init_plane_charset8::@9
  [566] (byte) gfx_init_plane_charset8::ch#8 ← phi( gfx_init_plane_charset8::@7/(byte) gfx_init_plane_charset8::ch#1 gfx_init_plane_charset8::@9/(byte) 0 )
  [566] (byte) gfx_init_plane_charset8::col#6 ← phi( gfx_init_plane_charset8::@7/(byte) gfx_init_plane_charset8::col#1 gfx_init_plane_charset8::@9/(byte) 0 )
  [566] (byte*) gfx_init_plane_charset8::gfxa#6 ← phi( gfx_init_plane_charset8::@7/(byte*) gfx_init_plane_charset8::gfxa#1 gfx_init_plane_charset8::@9/(byte*)(word) $4000 )
  [566] (byte*) gfx_init_plane_charset8::chargen#3 ← phi( gfx_init_plane_charset8::@7/(byte*) gfx_init_plane_charset8::chargen#1 gfx_init_plane_charset8::@9/(const nomodify byte*) CHARGEN )
  to:gfx_init_plane_charset8::@2
gfx_init_plane_charset8::@2: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@1 gfx_init_plane_charset8::@6
  [567] (byte) gfx_init_plane_charset8::cr#6 ← phi( gfx_init_plane_charset8::@1/(byte) 0 gfx_init_plane_charset8::@6/(byte) gfx_init_plane_charset8::cr#1 )
  [567] (byte) gfx_init_plane_charset8::col#5 ← phi( gfx_init_plane_charset8::@1/(byte) gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::@6/(byte) gfx_init_plane_charset8::col#1 )
  [567] (byte*) gfx_init_plane_charset8::gfxa#5 ← phi( gfx_init_plane_charset8::@1/(byte*) gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::@6/(byte*) gfx_init_plane_charset8::gfxa#1 )
  [567] (byte*) gfx_init_plane_charset8::chargen#2 ← phi( gfx_init_plane_charset8::@1/(byte*) gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::@6/(byte*) gfx_init_plane_charset8::chargen#1 )
  [568] (byte) gfx_init_plane_charset8::bits#0 ← *((byte*) gfx_init_plane_charset8::chargen#2)
  [569] (byte*) gfx_init_plane_charset8::chargen#1 ← ++ (byte*) gfx_init_plane_charset8::chargen#2
  to:gfx_init_plane_charset8::@3
gfx_init_plane_charset8::@3: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@2 gfx_init_plane_charset8::@4
  [570] (byte) gfx_init_plane_charset8::cp#2 ← phi( gfx_init_plane_charset8::@2/(byte) 0 gfx_init_plane_charset8::@4/(byte) gfx_init_plane_charset8::cp#1 )
  [570] (byte) gfx_init_plane_charset8::col#2 ← phi( gfx_init_plane_charset8::@2/(byte) gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::@4/(byte) gfx_init_plane_charset8::col#1 )
  [570] (byte*) gfx_init_plane_charset8::gfxa#2 ← phi( gfx_init_plane_charset8::@2/(byte*) gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::@4/(byte*) gfx_init_plane_charset8::gfxa#1 )
  [570] (byte) gfx_init_plane_charset8::bits#2 ← phi( gfx_init_plane_charset8::@2/(byte) gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::@4/(byte) gfx_init_plane_charset8::bits#1 )
  [571] (byte~) gfx_init_plane_charset8::$2 ← (byte) gfx_init_plane_charset8::bits#2 & (byte) $80
  [572] if((byte~) gfx_init_plane_charset8::$2==(byte) 0) goto gfx_init_plane_charset8::@4
  to:gfx_init_plane_charset8::@5
gfx_init_plane_charset8::@5: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@3
  [573] (byte) gfx_init_plane_charset8::c#3 ← (byte) gfx_init_plane_charset8::col#2
  to:gfx_init_plane_charset8::@4
gfx_init_plane_charset8::@4: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@3 gfx_init_plane_charset8::@5
  [574] (byte) gfx_init_plane_charset8::c#2 ← phi( gfx_init_plane_charset8::@3/(byte) 0 gfx_init_plane_charset8::@5/(byte) gfx_init_plane_charset8::c#3 )
  [575] *((byte*) gfx_init_plane_charset8::gfxa#2) ← (byte) gfx_init_plane_charset8::c#2
  [576] (byte*) gfx_init_plane_charset8::gfxa#1 ← ++ (byte*) gfx_init_plane_charset8::gfxa#2
  [577] (byte) gfx_init_plane_charset8::bits#1 ← (byte) gfx_init_plane_charset8::bits#2 << (byte) 1
  [578] (byte) gfx_init_plane_charset8::col#1 ← ++ (byte) gfx_init_plane_charset8::col#2
  [579] (byte) gfx_init_plane_charset8::cp#1 ← ++ (byte) gfx_init_plane_charset8::cp#2
  [580] if((byte) gfx_init_plane_charset8::cp#1!=(byte) 8) goto gfx_init_plane_charset8::@3
  to:gfx_init_plane_charset8::@6
gfx_init_plane_charset8::@6: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@4
  [581] (byte) gfx_init_plane_charset8::cr#1 ← ++ (byte) gfx_init_plane_charset8::cr#6
  [582] if((byte) gfx_init_plane_charset8::cr#1!=(byte) 8) goto gfx_init_plane_charset8::@2
  to:gfx_init_plane_charset8::@7
gfx_init_plane_charset8::@7: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@6
  [583] (byte) gfx_init_plane_charset8::ch#1 ← ++ (byte) gfx_init_plane_charset8::ch#8
  [584] if((byte) gfx_init_plane_charset8::ch#1!=(byte) 0) goto gfx_init_plane_charset8::@1
  to:gfx_init_plane_charset8::@8
gfx_init_plane_charset8::@8: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@7
  [585] *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_RAM_IO
  [586] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_charset8::@return
gfx_init_plane_charset8::@return: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@8
  [587] return 
  to:@return

(void()) gfx_init_plane_8bppchunky()
gfx_init_plane_8bppchunky: scope:[gfx_init_plane_8bppchunky]  from gfx_init::@7
  [588] phi()
  [589] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_8bppchunky::@1
gfx_init_plane_8bppchunky::@1: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky gfx_init_plane_8bppchunky::@5
  [590] (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#7 ← phi( gfx_init_plane_8bppchunky::@5/(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky/++(byte)(const nomodify dword) PLANE_8BPP_CHUNKY/(word) $4000 )
  [590] (byte) gfx_init_plane_8bppchunky::y#6 ← phi( gfx_init_plane_8bppchunky::@5/(byte) gfx_init_plane_8bppchunky::y#1 gfx_init_plane_8bppchunky/(byte) 0 )
  [590] (byte*) gfx_init_plane_8bppchunky::gfxb#5 ← phi( gfx_init_plane_8bppchunky::@5/(byte*) gfx_init_plane_8bppchunky::gfxb#1 gfx_init_plane_8bppchunky/(byte*) 16384 )
  to:gfx_init_plane_8bppchunky::@2
gfx_init_plane_8bppchunky::@2: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@1 gfx_init_plane_8bppchunky::@3
  [591] (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 ← phi( gfx_init_plane_8bppchunky::@1/(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#7 gfx_init_plane_8bppchunky::@3/(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 )
  [591] (word) gfx_init_plane_8bppchunky::x#2 ← phi( gfx_init_plane_8bppchunky::@1/(word) 0 gfx_init_plane_8bppchunky::@3/(word) gfx_init_plane_8bppchunky::x#1 )
  [591] (byte*) gfx_init_plane_8bppchunky::gfxb#3 ← phi( gfx_init_plane_8bppchunky::@1/(byte*) gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::@3/(byte*) gfx_init_plane_8bppchunky::gfxb#1 )
  [592] if((byte*) gfx_init_plane_8bppchunky::gfxb#3!=(word) $8000) goto gfx_init_plane_8bppchunky::@3
  to:gfx_init_plane_8bppchunky::@4
gfx_init_plane_8bppchunky::@4: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@2
  [593] (byte) dtvSetCpuBankSegment1::cpuBankIdx#1 ← (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4
  [594] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_8bppchunky::@7
gfx_init_plane_8bppchunky::@7: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@4
  [595] (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#2 ← ++ (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4
  to:gfx_init_plane_8bppchunky::@3
gfx_init_plane_8bppchunky::@3: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@2 gfx_init_plane_8bppchunky::@7
  [596] (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 ← phi( gfx_init_plane_8bppchunky::@2/(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 gfx_init_plane_8bppchunky::@7/(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#2 )
  [596] (byte*) gfx_init_plane_8bppchunky::gfxb#4 ← phi( gfx_init_plane_8bppchunky::@2/(byte*) gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::@7/(byte*) 16384 )
  [597] (word~) gfx_init_plane_8bppchunky::$5 ← (word) gfx_init_plane_8bppchunky::x#2 + (byte) gfx_init_plane_8bppchunky::y#6
  [598] (byte) gfx_init_plane_8bppchunky::c#0 ← (byte)(word~) gfx_init_plane_8bppchunky::$5
  [599] *((byte*) gfx_init_plane_8bppchunky::gfxb#4) ← (byte) gfx_init_plane_8bppchunky::c#0
  [600] (byte*) gfx_init_plane_8bppchunky::gfxb#1 ← ++ (byte*) gfx_init_plane_8bppchunky::gfxb#4
  [601] (word) gfx_init_plane_8bppchunky::x#1 ← ++ (word) gfx_init_plane_8bppchunky::x#2
  [602] if((word) gfx_init_plane_8bppchunky::x#1!=(word) $140) goto gfx_init_plane_8bppchunky::@2
  to:gfx_init_plane_8bppchunky::@5
gfx_init_plane_8bppchunky::@5: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@3
  [603] (byte) gfx_init_plane_8bppchunky::y#1 ← ++ (byte) gfx_init_plane_8bppchunky::y#6
  [604] if((byte) gfx_init_plane_8bppchunky::y#1!=(byte) $c8) goto gfx_init_plane_8bppchunky::@1
  to:gfx_init_plane_8bppchunky::@6
gfx_init_plane_8bppchunky::@6: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@5
  [605] phi()
  [606] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_8bppchunky::@return
gfx_init_plane_8bppchunky::@return: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@6
  [607] return 
  to:@return

(void()) gfx_init_vic_bitmap()
gfx_init_vic_bitmap: scope:[gfx_init_vic_bitmap]  from gfx_init::@6
  [608] phi()
  [609] call bitmap_init 
  to:gfx_init_vic_bitmap::@3
gfx_init_vic_bitmap::@3: scope:[gfx_init_vic_bitmap]  from gfx_init_vic_bitmap
  [610] phi()
  [611] call bitmap_clear 
  to:gfx_init_vic_bitmap::@1
gfx_init_vic_bitmap::@1: scope:[gfx_init_vic_bitmap]  from gfx_init_vic_bitmap::@3 gfx_init_vic_bitmap::@4
  [612] (byte) gfx_init_vic_bitmap::l#2 ← phi( gfx_init_vic_bitmap::@3/(byte) 0 gfx_init_vic_bitmap::@4/(byte) gfx_init_vic_bitmap::l#1 )
  [613] if((byte) gfx_init_vic_bitmap::l#2<(const byte) gfx_init_vic_bitmap::lines_cnt) goto gfx_init_vic_bitmap::@2
  to:gfx_init_vic_bitmap::@return
gfx_init_vic_bitmap::@return: scope:[gfx_init_vic_bitmap]  from gfx_init_vic_bitmap::@1
  [614] return 
  to:@return
gfx_init_vic_bitmap::@2: scope:[gfx_init_vic_bitmap]  from gfx_init_vic_bitmap::@1
  [615] (byte) bitmap_line::x0#0 ← *((const byte*) gfx_init_vic_bitmap::lines_x + (byte) gfx_init_vic_bitmap::l#2)
  [616] (byte) bitmap_line::x1#0 ← *((const byte*) gfx_init_vic_bitmap::lines_x+(byte) 1 + (byte) gfx_init_vic_bitmap::l#2)
  [617] (byte) bitmap_line::y0#0 ← *((const byte*) gfx_init_vic_bitmap::lines_y + (byte) gfx_init_vic_bitmap::l#2)
  [618] (byte) bitmap_line::y1#0 ← *((const byte*) gfx_init_vic_bitmap::lines_y+(byte) 1 + (byte) gfx_init_vic_bitmap::l#2)
  [619] call bitmap_line 
  to:gfx_init_vic_bitmap::@4
gfx_init_vic_bitmap::@4: scope:[gfx_init_vic_bitmap]  from gfx_init_vic_bitmap::@2
  [620] (byte) gfx_init_vic_bitmap::l#1 ← ++ (byte) gfx_init_vic_bitmap::l#2
  to:gfx_init_vic_bitmap::@1

(void()) bitmap_line((byte) bitmap_line::x0 , (byte) bitmap_line::x1 , (byte) bitmap_line::y0 , (byte) bitmap_line::y1)
bitmap_line: scope:[bitmap_line]  from gfx_init_vic_bitmap::@2
  [621] if((byte) bitmap_line::x0#0<(byte) bitmap_line::x1#0) goto bitmap_line::@1
  to:bitmap_line::@2
bitmap_line::@2: scope:[bitmap_line]  from bitmap_line
  [622] (byte) bitmap_line::xd#2 ← (byte) bitmap_line::x0#0 - (byte) bitmap_line::x1#0
  [623] if((byte) bitmap_line::y0#0<(byte) bitmap_line::y1#0) goto bitmap_line::@7
  to:bitmap_line::@3
bitmap_line::@3: scope:[bitmap_line]  from bitmap_line::@2
  [624] (byte) bitmap_line::yd#2 ← (byte) bitmap_line::y0#0 - (byte) bitmap_line::y1#0
  [625] if((byte) bitmap_line::yd#2<(byte) bitmap_line::xd#2) goto bitmap_line::@8
  to:bitmap_line::@4
bitmap_line::@4: scope:[bitmap_line]  from bitmap_line::@3
  [626] (byte) bitmap_line_ydxi::y#0 ← (byte) bitmap_line::y1#0
  [627] (byte) bitmap_line_ydxi::x#0 ← (byte) bitmap_line::x1#0
  [628] (byte) bitmap_line_ydxi::y1#0 ← (byte) bitmap_line::y0#0
  [629] (byte) bitmap_line_ydxi::yd#0 ← (byte) bitmap_line::yd#2
  [630] (byte) bitmap_line_ydxi::xd#0 ← (byte) bitmap_line::xd#2
  [631] call bitmap_line_ydxi 
  to:bitmap_line::@return
bitmap_line::@return: scope:[bitmap_line]  from bitmap_line::@10 bitmap_line::@12 bitmap_line::@13 bitmap_line::@14 bitmap_line::@4 bitmap_line::@6 bitmap_line::@8 bitmap_line::@9
  [632] return 
  to:@return
bitmap_line::@8: scope:[bitmap_line]  from bitmap_line::@3
  [633] (byte) bitmap_line_xdyi::x#0 ← (byte) bitmap_line::x1#0
  [634] (byte) bitmap_line_xdyi::y#0 ← (byte) bitmap_line::y1#0
  [635] (byte) bitmap_line_xdyi::x1#0 ← (byte) bitmap_line::x0#0
  [636] (byte) bitmap_line_xdyi::xd#0 ← (byte) bitmap_line::xd#2
  [637] (byte) bitmap_line_xdyi::yd#0 ← (byte) bitmap_line::yd#2
  [638] call bitmap_line_xdyi 
  to:bitmap_line::@return
bitmap_line::@7: scope:[bitmap_line]  from bitmap_line::@2
  [639] (byte) bitmap_line::yd#1 ← (byte) bitmap_line::y1#0 - (byte) bitmap_line::y0#0
  [640] if((byte) bitmap_line::yd#1<(byte) bitmap_line::xd#2) goto bitmap_line::@9
  to:bitmap_line::@10
bitmap_line::@10: scope:[bitmap_line]  from bitmap_line::@7
  [641] (byte) bitmap_line_ydxd::y#0 ← (byte) bitmap_line::y0#0
  [642] (byte) bitmap_line_ydxd::x#0 ← (byte) bitmap_line::x0#0
  [643] (byte) bitmap_line_ydxd::y1#0 ← (byte) bitmap_line::y1#0
  [644] (byte) bitmap_line_ydxd::yd#0 ← (byte) bitmap_line::yd#1
  [645] (byte) bitmap_line_ydxd::xd#0 ← (byte) bitmap_line::xd#2
  [646] call bitmap_line_ydxd 
  to:bitmap_line::@return
bitmap_line::@9: scope:[bitmap_line]  from bitmap_line::@7
  [647] (byte) bitmap_line_xdyd::x#0 ← (byte) bitmap_line::x1#0
  [648] (byte) bitmap_line_xdyd::y#0 ← (byte) bitmap_line::y1#0
  [649] (byte) bitmap_line_xdyd::x1#0 ← (byte) bitmap_line::x0#0
  [650] (byte) bitmap_line_xdyd::xd#0 ← (byte) bitmap_line::xd#2
  [651] (byte) bitmap_line_xdyd::yd#0 ← (byte) bitmap_line::yd#1
  [652] call bitmap_line_xdyd 
  to:bitmap_line::@return
bitmap_line::@1: scope:[bitmap_line]  from bitmap_line
  [653] (byte) bitmap_line::xd#1 ← (byte) bitmap_line::x1#0 - (byte) bitmap_line::x0#0
  [654] if((byte) bitmap_line::y0#0<(byte) bitmap_line::y1#0) goto bitmap_line::@11
  to:bitmap_line::@5
bitmap_line::@5: scope:[bitmap_line]  from bitmap_line::@1
  [655] (byte) bitmap_line::yd#10 ← (byte) bitmap_line::y0#0 - (byte) bitmap_line::y1#0
  [656] if((byte) bitmap_line::yd#10<(byte) bitmap_line::xd#1) goto bitmap_line::@12
  to:bitmap_line::@6
bitmap_line::@6: scope:[bitmap_line]  from bitmap_line::@5
  [657] (byte) bitmap_line_ydxd::y#1 ← (byte) bitmap_line::y1#0
  [658] (byte) bitmap_line_ydxd::x#1 ← (byte) bitmap_line::x1#0
  [659] (byte) bitmap_line_ydxd::y1#1 ← (byte) bitmap_line::y0#0
  [660] (byte) bitmap_line_ydxd::yd#1 ← (byte) bitmap_line::yd#10
  [661] (byte) bitmap_line_ydxd::xd#1 ← (byte) bitmap_line::xd#1
  [662] call bitmap_line_ydxd 
  to:bitmap_line::@return
bitmap_line::@12: scope:[bitmap_line]  from bitmap_line::@5
  [663] (byte) bitmap_line_xdyd::x#1 ← (byte) bitmap_line::x0#0
  [664] (byte) bitmap_line_xdyd::y#1 ← (byte) bitmap_line::y0#0
  [665] (byte) bitmap_line_xdyd::x1#1 ← (byte) bitmap_line::x1#0
  [666] (byte) bitmap_line_xdyd::xd#1 ← (byte) bitmap_line::xd#1
  [667] (byte) bitmap_line_xdyd::yd#1 ← (byte) bitmap_line::yd#10
  [668] call bitmap_line_xdyd 
  to:bitmap_line::@return
bitmap_line::@11: scope:[bitmap_line]  from bitmap_line::@1
  [669] (byte) bitmap_line::yd#11 ← (byte) bitmap_line::y1#0 - (byte) bitmap_line::y0#0
  [670] if((byte) bitmap_line::yd#11<(byte) bitmap_line::xd#1) goto bitmap_line::@13
  to:bitmap_line::@14
bitmap_line::@14: scope:[bitmap_line]  from bitmap_line::@11
  [671] (byte) bitmap_line_ydxi::y#1 ← (byte) bitmap_line::y0#0
  [672] (byte) bitmap_line_ydxi::x#1 ← (byte) bitmap_line::x0#0
  [673] (byte) bitmap_line_ydxi::y1#1 ← (byte) bitmap_line::y1#0
  [674] (byte) bitmap_line_ydxi::yd#1 ← (byte) bitmap_line::yd#11
  [675] (byte) bitmap_line_ydxi::xd#1 ← (byte) bitmap_line::xd#1
  [676] call bitmap_line_ydxi 
  to:bitmap_line::@return
bitmap_line::@13: scope:[bitmap_line]  from bitmap_line::@11
  [677] (byte) bitmap_line_xdyi::x#1 ← (byte) bitmap_line::x0#0
  [678] (byte) bitmap_line_xdyi::y#1 ← (byte) bitmap_line::y0#0
  [679] (byte) bitmap_line_xdyi::x1#1 ← (byte) bitmap_line::x1#0
  [680] (byte) bitmap_line_xdyi::xd#1 ← (byte) bitmap_line::xd#1
  [681] (byte) bitmap_line_xdyi::yd#1 ← (byte) bitmap_line::yd#11
  [682] call bitmap_line_xdyi 
  to:bitmap_line::@return

(void()) bitmap_line_xdyi((byte) bitmap_line_xdyi::x , (byte) bitmap_line_xdyi::y , (byte) bitmap_line_xdyi::x1 , (byte) bitmap_line_xdyi::xd , (byte) bitmap_line_xdyi::yd)
bitmap_line_xdyi: scope:[bitmap_line_xdyi]  from bitmap_line::@13 bitmap_line::@8
  [683] (byte) bitmap_line_xdyi::x1#6 ← phi( bitmap_line::@13/(byte) bitmap_line_xdyi::x1#1 bitmap_line::@8/(byte) bitmap_line_xdyi::x1#0 )
  [683] (byte) bitmap_line_xdyi::xd#5 ← phi( bitmap_line::@13/(byte) bitmap_line_xdyi::xd#1 bitmap_line::@8/(byte) bitmap_line_xdyi::xd#0 )
  [683] (byte) bitmap_line_xdyi::y#5 ← phi( bitmap_line::@13/(byte) bitmap_line_xdyi::y#1 bitmap_line::@8/(byte) bitmap_line_xdyi::y#0 )
  [683] (byte) bitmap_line_xdyi::x#6 ← phi( bitmap_line::@13/(byte) bitmap_line_xdyi::x#1 bitmap_line::@8/(byte) bitmap_line_xdyi::x#0 )
  [683] (byte) bitmap_line_xdyi::yd#2 ← phi( bitmap_line::@13/(byte) bitmap_line_xdyi::yd#1 bitmap_line::@8/(byte) bitmap_line_xdyi::yd#0 )
  [684] (byte) bitmap_line_xdyi::e#0 ← (byte) bitmap_line_xdyi::yd#2 >> (byte) 1
  to:bitmap_line_xdyi::@1
bitmap_line_xdyi::@1: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi bitmap_line_xdyi::@2
  [685] (byte) bitmap_line_xdyi::e#3 ← phi( bitmap_line_xdyi/(byte) bitmap_line_xdyi::e#0 bitmap_line_xdyi::@2/(byte) bitmap_line_xdyi::e#6 )
  [685] (byte) bitmap_line_xdyi::y#3 ← phi( bitmap_line_xdyi/(byte) bitmap_line_xdyi::y#5 bitmap_line_xdyi::@2/(byte) bitmap_line_xdyi::y#6 )
  [685] (byte) bitmap_line_xdyi::x#3 ← phi( bitmap_line_xdyi/(byte) bitmap_line_xdyi::x#6 bitmap_line_xdyi::@2/(byte) bitmap_line_xdyi::x#2 )
  [686] (byte) bitmap_plot::x#0 ← (byte) bitmap_line_xdyi::x#3
  [687] (byte) bitmap_plot::y#0 ← (byte) bitmap_line_xdyi::y#3
  [688] call bitmap_plot 
  to:bitmap_line_xdyi::@4
bitmap_line_xdyi::@4: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi::@1
  [689] (byte) bitmap_line_xdyi::x#2 ← ++ (byte) bitmap_line_xdyi::x#3
  [690] (byte) bitmap_line_xdyi::e#1 ← (byte) bitmap_line_xdyi::e#3 + (byte) bitmap_line_xdyi::yd#2
  [691] if((byte) bitmap_line_xdyi::xd#5>=(byte) bitmap_line_xdyi::e#1) goto bitmap_line_xdyi::@2
  to:bitmap_line_xdyi::@3
bitmap_line_xdyi::@3: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi::@4
  [692] (byte) bitmap_line_xdyi::y#2 ← ++ (byte) bitmap_line_xdyi::y#3
  [693] (byte) bitmap_line_xdyi::e#2 ← (byte) bitmap_line_xdyi::e#1 - (byte) bitmap_line_xdyi::xd#5
  to:bitmap_line_xdyi::@2
bitmap_line_xdyi::@2: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi::@3 bitmap_line_xdyi::@4
  [694] (byte) bitmap_line_xdyi::e#6 ← phi( bitmap_line_xdyi::@3/(byte) bitmap_line_xdyi::e#2 bitmap_line_xdyi::@4/(byte) bitmap_line_xdyi::e#1 )
  [694] (byte) bitmap_line_xdyi::y#6 ← phi( bitmap_line_xdyi::@3/(byte) bitmap_line_xdyi::y#2 bitmap_line_xdyi::@4/(byte) bitmap_line_xdyi::y#3 )
  [695] (byte~) bitmap_line_xdyi::$6 ← (byte) bitmap_line_xdyi::x1#6 + (byte) 1
  [696] if((byte) bitmap_line_xdyi::x#2!=(byte~) bitmap_line_xdyi::$6) goto bitmap_line_xdyi::@1
  to:bitmap_line_xdyi::@return
bitmap_line_xdyi::@return: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi::@2
  [697] return 
  to:@return

(void()) bitmap_plot((byte) bitmap_plot::x , (byte) bitmap_plot::y)
bitmap_plot: scope:[bitmap_plot]  from bitmap_line_xdyd::@1 bitmap_line_xdyi::@1 bitmap_line_ydxd::@1 bitmap_line_ydxi::@1
  [698] (byte) bitmap_plot::y#4 ← phi( bitmap_line_xdyd::@1/(byte) bitmap_plot::y#1 bitmap_line_xdyi::@1/(byte) bitmap_plot::y#0 bitmap_line_ydxd::@1/(byte) bitmap_plot::y#3 bitmap_line_ydxi::@1/(byte) bitmap_plot::y#2 )
  [698] (byte) bitmap_plot::x#4 ← phi( bitmap_line_xdyd::@1/(byte) bitmap_plot::x#1 bitmap_line_xdyi::@1/(byte) bitmap_plot::x#0 bitmap_line_ydxd::@1/(byte) bitmap_plot::x#3 bitmap_line_ydxi::@1/(byte) bitmap_plot::x#2 )
  [699] (word) bitmap_plot::plotter_x#0 ← *((const to_nomodify byte*) bitmap_plot_xhi + (byte) bitmap_plot::x#4) w= *((const to_nomodify byte*) bitmap_plot_xlo + (byte) bitmap_plot::x#4)
  [700] (word) bitmap_plot::plotter_y#0 ← *((const to_nomodify byte*) bitmap_plot_yhi + (byte) bitmap_plot::y#4) w= *((const to_nomodify byte*) bitmap_plot_ylo + (byte) bitmap_plot::y#4)
  [701] (word) bitmap_plot::plotter#0 ← (word) bitmap_plot::plotter_x#0 + (word) bitmap_plot::plotter_y#0
  [702] (byte~) bitmap_plot::$1 ← *((byte*)(word) bitmap_plot::plotter#0) | *((const to_nomodify byte*) bitmap_plot_bit + (byte) bitmap_plot::x#4)
  [703] *((byte*)(word) bitmap_plot::plotter#0) ← (byte~) bitmap_plot::$1
  to:bitmap_plot::@return
bitmap_plot::@return: scope:[bitmap_plot]  from bitmap_plot
  [704] return 
  to:@return

(void()) bitmap_line_ydxi((byte) bitmap_line_ydxi::y , (byte) bitmap_line_ydxi::x , (byte) bitmap_line_ydxi::y1 , (byte) bitmap_line_ydxi::yd , (byte) bitmap_line_ydxi::xd)
bitmap_line_ydxi: scope:[bitmap_line_ydxi]  from bitmap_line::@14 bitmap_line::@4
  [705] (byte) bitmap_line_ydxi::y1#6 ← phi( bitmap_line::@14/(byte) bitmap_line_ydxi::y1#1 bitmap_line::@4/(byte) bitmap_line_ydxi::y1#0 )
  [705] (byte) bitmap_line_ydxi::yd#5 ← phi( bitmap_line::@14/(byte) bitmap_line_ydxi::yd#1 bitmap_line::@4/(byte) bitmap_line_ydxi::yd#0 )
  [705] (byte) bitmap_line_ydxi::y#6 ← phi( bitmap_line::@14/(byte) bitmap_line_ydxi::y#1 bitmap_line::@4/(byte) bitmap_line_ydxi::y#0 )
  [705] (byte) bitmap_line_ydxi::x#5 ← phi( bitmap_line::@14/(byte) bitmap_line_ydxi::x#1 bitmap_line::@4/(byte) bitmap_line_ydxi::x#0 )
  [705] (byte) bitmap_line_ydxi::xd#2 ← phi( bitmap_line::@14/(byte) bitmap_line_ydxi::xd#1 bitmap_line::@4/(byte) bitmap_line_ydxi::xd#0 )
  [706] (byte) bitmap_line_ydxi::e#0 ← (byte) bitmap_line_ydxi::xd#2 >> (byte) 1
  to:bitmap_line_ydxi::@1
bitmap_line_ydxi::@1: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi bitmap_line_ydxi::@2
  [707] (byte) bitmap_line_ydxi::e#3 ← phi( bitmap_line_ydxi/(byte) bitmap_line_ydxi::e#0 bitmap_line_ydxi::@2/(byte) bitmap_line_ydxi::e#6 )
  [707] (byte) bitmap_line_ydxi::y#3 ← phi( bitmap_line_ydxi/(byte) bitmap_line_ydxi::y#6 bitmap_line_ydxi::@2/(byte) bitmap_line_ydxi::y#2 )
  [707] (byte) bitmap_line_ydxi::x#3 ← phi( bitmap_line_ydxi/(byte) bitmap_line_ydxi::x#5 bitmap_line_ydxi::@2/(byte) bitmap_line_ydxi::x#6 )
  [708] (byte) bitmap_plot::x#2 ← (byte) bitmap_line_ydxi::x#3
  [709] (byte) bitmap_plot::y#2 ← (byte) bitmap_line_ydxi::y#3
  [710] call bitmap_plot 
  to:bitmap_line_ydxi::@4
bitmap_line_ydxi::@4: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi::@1
  [711] (byte) bitmap_line_ydxi::y#2 ← ++ (byte) bitmap_line_ydxi::y#3
  [712] (byte) bitmap_line_ydxi::e#1 ← (byte) bitmap_line_ydxi::e#3 + (byte) bitmap_line_ydxi::xd#2
  [713] if((byte) bitmap_line_ydxi::yd#5>=(byte) bitmap_line_ydxi::e#1) goto bitmap_line_ydxi::@2
  to:bitmap_line_ydxi::@3
bitmap_line_ydxi::@3: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi::@4
  [714] (byte) bitmap_line_ydxi::x#2 ← ++ (byte) bitmap_line_ydxi::x#3
  [715] (byte) bitmap_line_ydxi::e#2 ← (byte) bitmap_line_ydxi::e#1 - (byte) bitmap_line_ydxi::yd#5
  to:bitmap_line_ydxi::@2
bitmap_line_ydxi::@2: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi::@3 bitmap_line_ydxi::@4
  [716] (byte) bitmap_line_ydxi::e#6 ← phi( bitmap_line_ydxi::@3/(byte) bitmap_line_ydxi::e#2 bitmap_line_ydxi::@4/(byte) bitmap_line_ydxi::e#1 )
  [716] (byte) bitmap_line_ydxi::x#6 ← phi( bitmap_line_ydxi::@3/(byte) bitmap_line_ydxi::x#2 bitmap_line_ydxi::@4/(byte) bitmap_line_ydxi::x#3 )
  [717] (byte~) bitmap_line_ydxi::$6 ← (byte) bitmap_line_ydxi::y1#6 + (byte) 1
  [718] if((byte) bitmap_line_ydxi::y#2!=(byte~) bitmap_line_ydxi::$6) goto bitmap_line_ydxi::@1
  to:bitmap_line_ydxi::@return
bitmap_line_ydxi::@return: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi::@2
  [719] return 
  to:@return

(void()) bitmap_line_xdyd((byte) bitmap_line_xdyd::x , (byte) bitmap_line_xdyd::y , (byte) bitmap_line_xdyd::x1 , (byte) bitmap_line_xdyd::xd , (byte) bitmap_line_xdyd::yd)
bitmap_line_xdyd: scope:[bitmap_line_xdyd]  from bitmap_line::@12 bitmap_line::@9
  [720] (byte) bitmap_line_xdyd::x1#6 ← phi( bitmap_line::@12/(byte) bitmap_line_xdyd::x1#1 bitmap_line::@9/(byte) bitmap_line_xdyd::x1#0 )
  [720] (byte) bitmap_line_xdyd::xd#5 ← phi( bitmap_line::@12/(byte) bitmap_line_xdyd::xd#1 bitmap_line::@9/(byte) bitmap_line_xdyd::xd#0 )
  [720] (byte) bitmap_line_xdyd::y#5 ← phi( bitmap_line::@12/(byte) bitmap_line_xdyd::y#1 bitmap_line::@9/(byte) bitmap_line_xdyd::y#0 )
  [720] (byte) bitmap_line_xdyd::x#6 ← phi( bitmap_line::@12/(byte) bitmap_line_xdyd::x#1 bitmap_line::@9/(byte) bitmap_line_xdyd::x#0 )
  [720] (byte) bitmap_line_xdyd::yd#2 ← phi( bitmap_line::@12/(byte) bitmap_line_xdyd::yd#1 bitmap_line::@9/(byte) bitmap_line_xdyd::yd#0 )
  [721] (byte) bitmap_line_xdyd::e#0 ← (byte) bitmap_line_xdyd::yd#2 >> (byte) 1
  to:bitmap_line_xdyd::@1
bitmap_line_xdyd::@1: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd bitmap_line_xdyd::@2
  [722] (byte) bitmap_line_xdyd::e#3 ← phi( bitmap_line_xdyd/(byte) bitmap_line_xdyd::e#0 bitmap_line_xdyd::@2/(byte) bitmap_line_xdyd::e#6 )
  [722] (byte) bitmap_line_xdyd::y#3 ← phi( bitmap_line_xdyd/(byte) bitmap_line_xdyd::y#5 bitmap_line_xdyd::@2/(byte) bitmap_line_xdyd::y#6 )
  [722] (byte) bitmap_line_xdyd::x#3 ← phi( bitmap_line_xdyd/(byte) bitmap_line_xdyd::x#6 bitmap_line_xdyd::@2/(byte) bitmap_line_xdyd::x#2 )
  [723] (byte) bitmap_plot::x#1 ← (byte) bitmap_line_xdyd::x#3
  [724] (byte) bitmap_plot::y#1 ← (byte) bitmap_line_xdyd::y#3
  [725] call bitmap_plot 
  to:bitmap_line_xdyd::@4
bitmap_line_xdyd::@4: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd::@1
  [726] (byte) bitmap_line_xdyd::x#2 ← ++ (byte) bitmap_line_xdyd::x#3
  [727] (byte) bitmap_line_xdyd::e#1 ← (byte) bitmap_line_xdyd::e#3 + (byte) bitmap_line_xdyd::yd#2
  [728] if((byte) bitmap_line_xdyd::xd#5>=(byte) bitmap_line_xdyd::e#1) goto bitmap_line_xdyd::@2
  to:bitmap_line_xdyd::@3
bitmap_line_xdyd::@3: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd::@4
  [729] (byte) bitmap_line_xdyd::y#2 ← -- (byte) bitmap_line_xdyd::y#3
  [730] (byte) bitmap_line_xdyd::e#2 ← (byte) bitmap_line_xdyd::e#1 - (byte) bitmap_line_xdyd::xd#5
  to:bitmap_line_xdyd::@2
bitmap_line_xdyd::@2: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd::@3 bitmap_line_xdyd::@4
  [731] (byte) bitmap_line_xdyd::e#6 ← phi( bitmap_line_xdyd::@3/(byte) bitmap_line_xdyd::e#2 bitmap_line_xdyd::@4/(byte) bitmap_line_xdyd::e#1 )
  [731] (byte) bitmap_line_xdyd::y#6 ← phi( bitmap_line_xdyd::@3/(byte) bitmap_line_xdyd::y#2 bitmap_line_xdyd::@4/(byte) bitmap_line_xdyd::y#3 )
  [732] (byte~) bitmap_line_xdyd::$6 ← (byte) bitmap_line_xdyd::x1#6 + (byte) 1
  [733] if((byte) bitmap_line_xdyd::x#2!=(byte~) bitmap_line_xdyd::$6) goto bitmap_line_xdyd::@1
  to:bitmap_line_xdyd::@return
bitmap_line_xdyd::@return: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd::@2
  [734] return 
  to:@return

(void()) bitmap_line_ydxd((byte) bitmap_line_ydxd::y , (byte) bitmap_line_ydxd::x , (byte) bitmap_line_ydxd::y1 , (byte) bitmap_line_ydxd::yd , (byte) bitmap_line_ydxd::xd)
bitmap_line_ydxd: scope:[bitmap_line_ydxd]  from bitmap_line::@10 bitmap_line::@6
  [735] (byte) bitmap_line_ydxd::y1#6 ← phi( bitmap_line::@10/(byte) bitmap_line_ydxd::y1#0 bitmap_line::@6/(byte) bitmap_line_ydxd::y1#1 )
  [735] (byte) bitmap_line_ydxd::yd#5 ← phi( bitmap_line::@10/(byte) bitmap_line_ydxd::yd#0 bitmap_line::@6/(byte) bitmap_line_ydxd::yd#1 )
  [735] (byte) bitmap_line_ydxd::y#7 ← phi( bitmap_line::@10/(byte) bitmap_line_ydxd::y#0 bitmap_line::@6/(byte) bitmap_line_ydxd::y#1 )
  [735] (byte) bitmap_line_ydxd::x#5 ← phi( bitmap_line::@10/(byte) bitmap_line_ydxd::x#0 bitmap_line::@6/(byte) bitmap_line_ydxd::x#1 )
  [735] (byte) bitmap_line_ydxd::xd#2 ← phi( bitmap_line::@10/(byte) bitmap_line_ydxd::xd#0 bitmap_line::@6/(byte) bitmap_line_ydxd::xd#1 )
  [736] (byte) bitmap_line_ydxd::e#0 ← (byte) bitmap_line_ydxd::xd#2 >> (byte) 1
  to:bitmap_line_ydxd::@1
bitmap_line_ydxd::@1: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd bitmap_line_ydxd::@2
  [737] (byte) bitmap_line_ydxd::e#3 ← phi( bitmap_line_ydxd/(byte) bitmap_line_ydxd::e#0 bitmap_line_ydxd::@2/(byte) bitmap_line_ydxd::e#6 )
  [737] (byte) bitmap_line_ydxd::y#2 ← phi( bitmap_line_ydxd/(byte) bitmap_line_ydxd::y#7 bitmap_line_ydxd::@2/(byte) bitmap_line_ydxd::y#3 )
  [737] (byte) bitmap_line_ydxd::x#3 ← phi( bitmap_line_ydxd/(byte) bitmap_line_ydxd::x#5 bitmap_line_ydxd::@2/(byte) bitmap_line_ydxd::x#6 )
  [738] (byte) bitmap_plot::x#3 ← (byte) bitmap_line_ydxd::x#3
  [739] (byte) bitmap_plot::y#3 ← (byte) bitmap_line_ydxd::y#2
  [740] call bitmap_plot 
  to:bitmap_line_ydxd::@4
bitmap_line_ydxd::@4: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd::@1
  [741] (byte) bitmap_line_ydxd::y#3 ← ++ (byte) bitmap_line_ydxd::y#2
  [742] (byte) bitmap_line_ydxd::e#1 ← (byte) bitmap_line_ydxd::e#3 + (byte) bitmap_line_ydxd::xd#2
  [743] if((byte) bitmap_line_ydxd::yd#5>=(byte) bitmap_line_ydxd::e#1) goto bitmap_line_ydxd::@2
  to:bitmap_line_ydxd::@3
bitmap_line_ydxd::@3: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd::@4
  [744] (byte) bitmap_line_ydxd::x#2 ← -- (byte) bitmap_line_ydxd::x#3
  [745] (byte) bitmap_line_ydxd::e#2 ← (byte) bitmap_line_ydxd::e#1 - (byte) bitmap_line_ydxd::yd#5
  to:bitmap_line_ydxd::@2
bitmap_line_ydxd::@2: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd::@3 bitmap_line_ydxd::@4
  [746] (byte) bitmap_line_ydxd::e#6 ← phi( bitmap_line_ydxd::@3/(byte) bitmap_line_ydxd::e#2 bitmap_line_ydxd::@4/(byte) bitmap_line_ydxd::e#1 )
  [746] (byte) bitmap_line_ydxd::x#6 ← phi( bitmap_line_ydxd::@3/(byte) bitmap_line_ydxd::x#2 bitmap_line_ydxd::@4/(byte) bitmap_line_ydxd::x#3 )
  [747] (byte~) bitmap_line_ydxd::$6 ← (byte) bitmap_line_ydxd::y1#6 + (byte) 1
  [748] if((byte) bitmap_line_ydxd::y#3!=(byte~) bitmap_line_ydxd::$6) goto bitmap_line_ydxd::@1
  to:bitmap_line_ydxd::@return
bitmap_line_ydxd::@return: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd::@2
  [749] return 
  to:@return

(void()) bitmap_clear()
bitmap_clear: scope:[bitmap_clear]  from gfx_init_vic_bitmap::@3
  [750] (word) bitmap_clear::bitmap#0 ← *((const to_nomodify byte*) bitmap_plot_xhi) w= *((const to_nomodify byte*) bitmap_plot_xlo)
  [751] (byte*) bitmap_clear::bitmap#5 ← (byte*)(word) bitmap_clear::bitmap#0
  to:bitmap_clear::@1
bitmap_clear::@1: scope:[bitmap_clear]  from bitmap_clear bitmap_clear::@3
  [752] (byte) bitmap_clear::y#4 ← phi( bitmap_clear/(byte) 0 bitmap_clear::@3/(byte) bitmap_clear::y#1 )
  [752] (byte*) bitmap_clear::bitmap#3 ← phi( bitmap_clear/(byte*) bitmap_clear::bitmap#5 bitmap_clear::@3/(byte*) bitmap_clear::bitmap#1 )
  to:bitmap_clear::@2
bitmap_clear::@2: scope:[bitmap_clear]  from bitmap_clear::@1 bitmap_clear::@2
  [753] (byte) bitmap_clear::x#2 ← phi( bitmap_clear::@1/(byte) 0 bitmap_clear::@2/(byte) bitmap_clear::x#1 )
  [753] (byte*) bitmap_clear::bitmap#2 ← phi( bitmap_clear::@1/(byte*) bitmap_clear::bitmap#3 bitmap_clear::@2/(byte*) bitmap_clear::bitmap#1 )
  [754] *((byte*) bitmap_clear::bitmap#2) ← (byte) 0
  [755] (byte*) bitmap_clear::bitmap#1 ← ++ (byte*) bitmap_clear::bitmap#2
  [756] (byte) bitmap_clear::x#1 ← ++ (byte) bitmap_clear::x#2
  [757] if((byte) bitmap_clear::x#1!=(byte) $c8) goto bitmap_clear::@2
  to:bitmap_clear::@3
bitmap_clear::@3: scope:[bitmap_clear]  from bitmap_clear::@2
  [758] (byte) bitmap_clear::y#1 ← ++ (byte) bitmap_clear::y#4
  [759] if((byte) bitmap_clear::y#1!=(byte) $28) goto bitmap_clear::@1
  to:bitmap_clear::@return
bitmap_clear::@return: scope:[bitmap_clear]  from bitmap_clear::@3
  [760] return 
  to:@return

(void()) bitmap_init((byte*) bitmap_init::bitmap)
bitmap_init: scope:[bitmap_init]  from gfx_init_vic_bitmap
  [761] phi()
  to:bitmap_init::@1
bitmap_init::@1: scope:[bitmap_init]  from bitmap_init bitmap_init::@2
  [762] (byte) bitmap_init::bits#3 ← phi( bitmap_init/(byte) $80 bitmap_init::@2/(byte) bitmap_init::bits#4 )
  [762] (byte) bitmap_init::x#2 ← phi( bitmap_init/(byte) 0 bitmap_init::@2/(byte) bitmap_init::x#1 )
  [763] (byte~) bitmap_init::$0 ← (byte) bitmap_init::x#2 & (byte) $f8
  [764] *((const to_nomodify byte*) bitmap_plot_xlo + (byte) bitmap_init::x#2) ← (byte~) bitmap_init::$0
  [765] *((const to_nomodify byte*) bitmap_plot_xhi + (byte) bitmap_init::x#2) ← >(const nomodify byte*) VIC_BITMAP
  [766] *((const to_nomodify byte*) bitmap_plot_bit + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3
  [767] (byte) bitmap_init::bits#1 ← (byte) bitmap_init::bits#3 >> (byte) 1
  [768] if((byte) bitmap_init::bits#1!=(byte) 0) goto bitmap_init::@6
  to:bitmap_init::@2
bitmap_init::@6: scope:[bitmap_init]  from bitmap_init::@1
  [769] phi()
  to:bitmap_init::@2
bitmap_init::@2: scope:[bitmap_init]  from bitmap_init::@1 bitmap_init::@6
  [770] (byte) bitmap_init::bits#4 ← phi( bitmap_init::@6/(byte) bitmap_init::bits#1 bitmap_init::@1/(byte) $80 )
  [771] (byte) bitmap_init::x#1 ← ++ (byte) bitmap_init::x#2
  [772] if((byte) bitmap_init::x#1!=(byte) 0) goto bitmap_init::@1
  to:bitmap_init::@3
bitmap_init::@3: scope:[bitmap_init]  from bitmap_init::@2 bitmap_init::@4
  [773] (byte*) bitmap_init::yoffs#2 ← phi( bitmap_init::@2/(byte*) 0 bitmap_init::@4/(byte*) bitmap_init::yoffs#4 )
  [773] (byte) bitmap_init::y#2 ← phi( bitmap_init::@2/(byte) 0 bitmap_init::@4/(byte) bitmap_init::y#1 )
  [774] (byte~) bitmap_init::$10 ← (byte) bitmap_init::y#2 & (byte) 7
  [775] (byte~) bitmap_init::$7 ← < (byte*) bitmap_init::yoffs#2
  [776] (byte~) bitmap_init::$8 ← (byte~) bitmap_init::$10 | (byte~) bitmap_init::$7
  [777] *((const to_nomodify byte*) bitmap_plot_ylo + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$8
  [778] (byte~) bitmap_init::$9 ← > (byte*) bitmap_init::yoffs#2
  [779] *((const to_nomodify byte*) bitmap_plot_yhi + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$9
  [780] if((byte~) bitmap_init::$10!=(byte) 7) goto bitmap_init::@4
  to:bitmap_init::@5
bitmap_init::@5: scope:[bitmap_init]  from bitmap_init::@3
  [781] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (word)(number) $28*(number) 8
  to:bitmap_init::@4
bitmap_init::@4: scope:[bitmap_init]  from bitmap_init::@3 bitmap_init::@5
  [782] (byte*) bitmap_init::yoffs#4 ← phi( bitmap_init::@3/(byte*) bitmap_init::yoffs#2 bitmap_init::@5/(byte*) bitmap_init::yoffs#1 )
  [783] (byte) bitmap_init::y#1 ← ++ (byte) bitmap_init::y#2
  [784] if((byte) bitmap_init::y#1!=(byte) 0) goto bitmap_init::@3
  to:bitmap_init::@return
bitmap_init::@return: scope:[bitmap_init]  from bitmap_init::@4
  [785] return 
  to:@return

(void()) gfx_init_charset()
gfx_init_charset: scope:[gfx_init_charset]  from gfx_init::@5
  [786] *((const nomodify byte*) PROCPORT) ← (byte) $32
  to:gfx_init_charset::@1
gfx_init_charset::@1: scope:[gfx_init_charset]  from gfx_init_charset gfx_init_charset::@3
  [787] (byte) gfx_init_charset::c#4 ← phi( gfx_init_charset/(byte) 0 gfx_init_charset::@3/(byte) gfx_init_charset::c#1 )
  [787] (byte*) gfx_init_charset::charset#3 ← phi( gfx_init_charset/(const nomodify byte*) VIC_CHARSET_ROM gfx_init_charset::@3/(byte*) gfx_init_charset::charset#1 )
  [787] (byte*) gfx_init_charset::chargen#3 ← phi( gfx_init_charset/(const nomodify byte*) CHARGEN gfx_init_charset::@3/(byte*) gfx_init_charset::chargen#1 )
  to:gfx_init_charset::@2
gfx_init_charset::@2: scope:[gfx_init_charset]  from gfx_init_charset::@1 gfx_init_charset::@2
  [788] (byte) gfx_init_charset::l#2 ← phi( gfx_init_charset::@1/(byte) 0 gfx_init_charset::@2/(byte) gfx_init_charset::l#1 )
  [788] (byte*) gfx_init_charset::charset#2 ← phi( gfx_init_charset::@1/(byte*) gfx_init_charset::charset#3 gfx_init_charset::@2/(byte*) gfx_init_charset::charset#1 )
  [788] (byte*) gfx_init_charset::chargen#2 ← phi( gfx_init_charset::@1/(byte*) gfx_init_charset::chargen#3 gfx_init_charset::@2/(byte*) gfx_init_charset::chargen#1 )
  [789] *((byte*) gfx_init_charset::charset#2) ← *((byte*) gfx_init_charset::chargen#2)
  [790] (byte*) gfx_init_charset::charset#1 ← ++ (byte*) gfx_init_charset::charset#2
  [791] (byte*) gfx_init_charset::chargen#1 ← ++ (byte*) gfx_init_charset::chargen#2
  [792] (byte) gfx_init_charset::l#1 ← ++ (byte) gfx_init_charset::l#2
  [793] if((byte) gfx_init_charset::l#1!=(byte) 8) goto gfx_init_charset::@2
  to:gfx_init_charset::@3
gfx_init_charset::@3: scope:[gfx_init_charset]  from gfx_init_charset::@2
  [794] (byte) gfx_init_charset::c#1 ← ++ (byte) gfx_init_charset::c#4
  [795] if((byte) gfx_init_charset::c#1!=(byte) 0) goto gfx_init_charset::@1
  to:gfx_init_charset::@4
gfx_init_charset::@4: scope:[gfx_init_charset]  from gfx_init_charset::@3
  [796] *((const nomodify byte*) PROCPORT) ← (byte) $37
  to:gfx_init_charset::@return
gfx_init_charset::@return: scope:[gfx_init_charset]  from gfx_init_charset::@4
  [797] return 
  to:@return

(void()) gfx_init_screen4()
gfx_init_screen4: scope:[gfx_init_screen4]  from gfx_init::@4
  [798] phi()
  to:gfx_init_screen4::@1
gfx_init_screen4::@1: scope:[gfx_init_screen4]  from gfx_init_screen4 gfx_init_screen4::@3
  [799] (byte) gfx_init_screen4::cy#4 ← phi( gfx_init_screen4/(byte) 0 gfx_init_screen4::@3/(byte) gfx_init_screen4::cy#1 )
  [799] (byte*) gfx_init_screen4::ch#3 ← phi( gfx_init_screen4/(const nomodify byte*) VIC_SCREEN4 gfx_init_screen4::@3/(byte*) gfx_init_screen4::ch#1 )
  to:gfx_init_screen4::@2
gfx_init_screen4::@2: scope:[gfx_init_screen4]  from gfx_init_screen4::@1 gfx_init_screen4::@2
  [800] (byte) gfx_init_screen4::cx#2 ← phi( gfx_init_screen4::@1/(byte) 0 gfx_init_screen4::@2/(byte) gfx_init_screen4::cx#1 )
  [800] (byte*) gfx_init_screen4::ch#2 ← phi( gfx_init_screen4::@1/(byte*) gfx_init_screen4::ch#3 gfx_init_screen4::@2/(byte*) gfx_init_screen4::ch#1 )
  [801] *((byte*) gfx_init_screen4::ch#2) ← (byte) 0
  [802] (byte*) gfx_init_screen4::ch#1 ← ++ (byte*) gfx_init_screen4::ch#2
  [803] (byte) gfx_init_screen4::cx#1 ← ++ (byte) gfx_init_screen4::cx#2
  [804] if((byte) gfx_init_screen4::cx#1!=(byte) $28) goto gfx_init_screen4::@2
  to:gfx_init_screen4::@3
gfx_init_screen4::@3: scope:[gfx_init_screen4]  from gfx_init_screen4::@2
  [805] (byte) gfx_init_screen4::cy#1 ← ++ (byte) gfx_init_screen4::cy#4
  [806] if((byte) gfx_init_screen4::cy#1!=(byte) $19) goto gfx_init_screen4::@1
  to:gfx_init_screen4::@return
gfx_init_screen4::@return: scope:[gfx_init_screen4]  from gfx_init_screen4::@3
  [807] return 
  to:@return

(void()) gfx_init_screen3()
gfx_init_screen3: scope:[gfx_init_screen3]  from gfx_init::@3
  [808] phi()
  to:gfx_init_screen3::@1
gfx_init_screen3::@1: scope:[gfx_init_screen3]  from gfx_init_screen3 gfx_init_screen3::@3
  [809] (byte*) gfx_init_screen3::ch#3 ← phi( gfx_init_screen3/(const nomodify byte*) VIC_SCREEN3 gfx_init_screen3::@3/(byte*) gfx_init_screen3::ch#1 )
  [809] (byte) gfx_init_screen3::cy#4 ← phi( gfx_init_screen3/(byte) 0 gfx_init_screen3::@3/(byte) gfx_init_screen3::cy#1 )
  to:gfx_init_screen3::@2
gfx_init_screen3::@2: scope:[gfx_init_screen3]  from gfx_init_screen3::@1 gfx_init_screen3::@2
  [810] (byte*) gfx_init_screen3::ch#2 ← phi( gfx_init_screen3::@1/(byte*) gfx_init_screen3::ch#3 gfx_init_screen3::@2/(byte*) gfx_init_screen3::ch#1 )
  [810] (byte) gfx_init_screen3::cx#2 ← phi( gfx_init_screen3::@1/(byte) 0 gfx_init_screen3::@2/(byte) gfx_init_screen3::cx#1 )
  [811] (byte~) gfx_init_screen3::$0 ← (byte) gfx_init_screen3::cx#2 & (byte) 3
  [812] (byte~) gfx_init_screen3::$1 ← (byte~) gfx_init_screen3::$0 << (byte) 4
  [813] (byte~) gfx_init_screen3::$2 ← (byte) gfx_init_screen3::cy#4 & (byte) 3
  [814] (byte~) gfx_init_screen3::$3 ← (byte~) gfx_init_screen3::$1 | (byte~) gfx_init_screen3::$2
  [815] *((byte*) gfx_init_screen3::ch#2) ← (byte~) gfx_init_screen3::$3
  [816] (byte*) gfx_init_screen3::ch#1 ← ++ (byte*) gfx_init_screen3::ch#2
  [817] (byte) gfx_init_screen3::cx#1 ← ++ (byte) gfx_init_screen3::cx#2
  [818] if((byte) gfx_init_screen3::cx#1!=(byte) $28) goto gfx_init_screen3::@2
  to:gfx_init_screen3::@3
gfx_init_screen3::@3: scope:[gfx_init_screen3]  from gfx_init_screen3::@2
  [819] (byte) gfx_init_screen3::cy#1 ← ++ (byte) gfx_init_screen3::cy#4
  [820] if((byte) gfx_init_screen3::cy#1!=(byte) $19) goto gfx_init_screen3::@1
  to:gfx_init_screen3::@return
gfx_init_screen3::@return: scope:[gfx_init_screen3]  from gfx_init_screen3::@3
  [821] return 
  to:@return

(void()) gfx_init_screen2()
gfx_init_screen2: scope:[gfx_init_screen2]  from gfx_init::@2
  [822] phi()
  to:gfx_init_screen2::@1
gfx_init_screen2::@1: scope:[gfx_init_screen2]  from gfx_init_screen2 gfx_init_screen2::@3
  [823] (byte*) gfx_init_screen2::ch#3 ← phi( gfx_init_screen2/(const nomodify byte*) VIC_SCREEN2 gfx_init_screen2::@3/(byte*) gfx_init_screen2::ch#1 )
  [823] (byte) gfx_init_screen2::cy#4 ← phi( gfx_init_screen2/(byte) 0 gfx_init_screen2::@3/(byte) gfx_init_screen2::cy#1 )
  to:gfx_init_screen2::@2
gfx_init_screen2::@2: scope:[gfx_init_screen2]  from gfx_init_screen2::@1 gfx_init_screen2::@2
  [824] (byte*) gfx_init_screen2::ch#2 ← phi( gfx_init_screen2::@1/(byte*) gfx_init_screen2::ch#3 gfx_init_screen2::@2/(byte*) gfx_init_screen2::ch#1 )
  [824] (byte) gfx_init_screen2::cx#2 ← phi( gfx_init_screen2::@1/(byte) 0 gfx_init_screen2::@2/(byte) gfx_init_screen2::cx#1 )
  [825] (byte~) gfx_init_screen2::$0 ← (byte) gfx_init_screen2::cx#2 + (byte) gfx_init_screen2::cy#4
  [826] (byte) gfx_init_screen2::col#0 ← (byte~) gfx_init_screen2::$0 & (byte) $f
  [827] (byte) gfx_init_screen2::col2#0 ← (byte) $f - (byte) gfx_init_screen2::col#0
  [828] (byte~) gfx_init_screen2::$3 ← (byte) gfx_init_screen2::col#0 << (byte) 4
  [829] (byte~) gfx_init_screen2::$4 ← (byte~) gfx_init_screen2::$3 | (byte) gfx_init_screen2::col2#0
  [830] *((byte*) gfx_init_screen2::ch#2) ← (byte~) gfx_init_screen2::$4
  [831] (byte*) gfx_init_screen2::ch#1 ← ++ (byte*) gfx_init_screen2::ch#2
  [832] (byte) gfx_init_screen2::cx#1 ← ++ (byte) gfx_init_screen2::cx#2
  [833] if((byte) gfx_init_screen2::cx#1!=(byte) $28) goto gfx_init_screen2::@2
  to:gfx_init_screen2::@3
gfx_init_screen2::@3: scope:[gfx_init_screen2]  from gfx_init_screen2::@2
  [834] (byte) gfx_init_screen2::cy#1 ← ++ (byte) gfx_init_screen2::cy#4
  [835] if((byte) gfx_init_screen2::cy#1!=(byte) $19) goto gfx_init_screen2::@1
  to:gfx_init_screen2::@return
gfx_init_screen2::@return: scope:[gfx_init_screen2]  from gfx_init_screen2::@3
  [836] return 
  to:@return

(void()) gfx_init_screen1()
gfx_init_screen1: scope:[gfx_init_screen1]  from gfx_init::@1
  [837] phi()
  to:gfx_init_screen1::@1
gfx_init_screen1::@1: scope:[gfx_init_screen1]  from gfx_init_screen1 gfx_init_screen1::@3
  [838] (byte*) gfx_init_screen1::ch#3 ← phi( gfx_init_screen1/(const nomodify byte*) VIC_SCREEN1 gfx_init_screen1::@3/(byte*) gfx_init_screen1::ch#1 )
  [838] (byte) gfx_init_screen1::cy#4 ← phi( gfx_init_screen1/(byte) 0 gfx_init_screen1::@3/(byte) gfx_init_screen1::cy#1 )
  to:gfx_init_screen1::@2
gfx_init_screen1::@2: scope:[gfx_init_screen1]  from gfx_init_screen1::@1 gfx_init_screen1::@2
  [839] (byte*) gfx_init_screen1::ch#2 ← phi( gfx_init_screen1::@1/(byte*) gfx_init_screen1::ch#3 gfx_init_screen1::@2/(byte*) gfx_init_screen1::ch#1 )
  [839] (byte) gfx_init_screen1::cx#2 ← phi( gfx_init_screen1::@1/(byte) 0 gfx_init_screen1::@2/(byte) gfx_init_screen1::cx#1 )
  [840] (byte~) gfx_init_screen1::$0 ← (byte) gfx_init_screen1::cx#2 + (byte) gfx_init_screen1::cy#4
  [841] (byte~) gfx_init_screen1::$1 ← (byte~) gfx_init_screen1::$0 & (byte) $f
  [842] *((byte*) gfx_init_screen1::ch#2) ← (byte~) gfx_init_screen1::$1
  [843] (byte*) gfx_init_screen1::ch#1 ← ++ (byte*) gfx_init_screen1::ch#2
  [844] (byte) gfx_init_screen1::cx#1 ← ++ (byte) gfx_init_screen1::cx#2
  [845] if((byte) gfx_init_screen1::cx#1!=(byte) $28) goto gfx_init_screen1::@2
  to:gfx_init_screen1::@3
gfx_init_screen1::@3: scope:[gfx_init_screen1]  from gfx_init_screen1::@2
  [846] (byte) gfx_init_screen1::cy#1 ← ++ (byte) gfx_init_screen1::cy#4
  [847] if((byte) gfx_init_screen1::cy#1!=(byte) $19) goto gfx_init_screen1::@1
  to:gfx_init_screen1::@return
gfx_init_screen1::@return: scope:[gfx_init_screen1]  from gfx_init_screen1::@3
  [848] return 
  to:@return

(void()) gfx_init_screen0()
gfx_init_screen0: scope:[gfx_init_screen0]  from gfx_init
  [849] phi()
  to:gfx_init_screen0::@1
gfx_init_screen0::@1: scope:[gfx_init_screen0]  from gfx_init_screen0 gfx_init_screen0::@3
  [850] (byte*) gfx_init_screen0::ch#3 ← phi( gfx_init_screen0/(const nomodify byte*) VIC_SCREEN0 gfx_init_screen0::@3/(byte*) gfx_init_screen0::ch#1 )
  [850] (byte) gfx_init_screen0::cy#4 ← phi( gfx_init_screen0/(byte) 0 gfx_init_screen0::@3/(byte) gfx_init_screen0::cy#1 )
  to:gfx_init_screen0::@2
gfx_init_screen0::@2: scope:[gfx_init_screen0]  from gfx_init_screen0::@1 gfx_init_screen0::@2
  [851] (byte*) gfx_init_screen0::ch#2 ← phi( gfx_init_screen0::@1/(byte*) gfx_init_screen0::ch#3 gfx_init_screen0::@2/(byte*) gfx_init_screen0::ch#1 )
  [851] (byte) gfx_init_screen0::cx#2 ← phi( gfx_init_screen0::@1/(byte) 0 gfx_init_screen0::@2/(byte) gfx_init_screen0::cx#1 )
  [852] (byte~) gfx_init_screen0::$0 ← (byte) gfx_init_screen0::cy#4 & (byte) $f
  [853] (byte~) gfx_init_screen0::$1 ← (byte~) gfx_init_screen0::$0 << (byte) 4
  [854] (byte~) gfx_init_screen0::$2 ← (byte) gfx_init_screen0::cx#2 & (byte) $f
  [855] (byte~) gfx_init_screen0::$3 ← (byte~) gfx_init_screen0::$1 | (byte~) gfx_init_screen0::$2
  [856] *((byte*) gfx_init_screen0::ch#2) ← (byte~) gfx_init_screen0::$3
  [857] (byte*) gfx_init_screen0::ch#1 ← ++ (byte*) gfx_init_screen0::ch#2
  [858] (byte) gfx_init_screen0::cx#1 ← ++ (byte) gfx_init_screen0::cx#2
  [859] if((byte) gfx_init_screen0::cx#1!=(byte) $28) goto gfx_init_screen0::@2
  to:gfx_init_screen0::@3
gfx_init_screen0::@3: scope:[gfx_init_screen0]  from gfx_init_screen0::@2
  [860] (byte) gfx_init_screen0::cy#1 ← ++ (byte) gfx_init_screen0::cy#4
  [861] if((byte) gfx_init_screen0::cy#1!=(byte) $19) goto gfx_init_screen0::@1
  to:gfx_init_screen0::@return
gfx_init_screen0::@return: scope:[gfx_init_screen0]  from gfx_init_screen0::@3
  [862] return 
  to:@return

(void()) keyboard_init()
keyboard_init: scope:[keyboard_init]  from main
  [863] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) ← (byte) $ff
  [864] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_B_DDR) ← (byte) 0
  to:keyboard_init::@return
keyboard_init::@return: scope:[keyboard_init]  from keyboard_init
  [865] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6569_VICII::BG_COLOR
(byte) MOS6569_VICII::BG_COLOR1
(byte) MOS6569_VICII::BG_COLOR2
(byte) MOS6569_VICII::BG_COLOR3
(byte) MOS6569_VICII::BORDER_COLOR
(byte) MOS6569_VICII::CONTROL1
(byte) MOS6569_VICII::CONTROL2
(byte) MOS6569_VICII::IRQ_ENABLE
(byte) MOS6569_VICII::IRQ_STATUS
(byte) MOS6569_VICII::LIGHTPEN_X
(byte) MOS6569_VICII::LIGHTPEN_Y
(byte) MOS6569_VICII::MEMORY
(byte) MOS6569_VICII::RASTER
(byte) MOS6569_VICII::SPRITE0_COLOR
(byte) MOS6569_VICII::SPRITE0_X
(byte) MOS6569_VICII::SPRITE0_Y
(byte) MOS6569_VICII::SPRITE1_COLOR
(byte) MOS6569_VICII::SPRITE1_X
(byte) MOS6569_VICII::SPRITE1_Y
(byte) MOS6569_VICII::SPRITE2_COLOR
(byte) MOS6569_VICII::SPRITE2_X
(byte) MOS6569_VICII::SPRITE2_Y
(byte) MOS6569_VICII::SPRITE3_COLOR
(byte) MOS6569_VICII::SPRITE3_X
(byte) MOS6569_VICII::SPRITE3_Y
(byte) MOS6569_VICII::SPRITE4_COLOR
(byte) MOS6569_VICII::SPRITE4_X
(byte) MOS6569_VICII::SPRITE4_Y
(byte) MOS6569_VICII::SPRITE5_COLOR
(byte) MOS6569_VICII::SPRITE5_X
(byte) MOS6569_VICII::SPRITE5_Y
(byte) MOS6569_VICII::SPRITE6_COLOR
(byte) MOS6569_VICII::SPRITE6_X
(byte) MOS6569_VICII::SPRITE6_Y
(byte) MOS6569_VICII::SPRITE7_COLOR
(byte) MOS6569_VICII::SPRITE7_X
(byte) MOS6569_VICII::SPRITE7_Y
(byte) MOS6569_VICII::SPRITES_BG_COLLISION
(byte) MOS6569_VICII::SPRITES_COLLISION
(byte) MOS6569_VICII::SPRITES_ENABLE
(byte) MOS6569_VICII::SPRITES_EXPAND_X
(byte) MOS6569_VICII::SPRITES_EXPAND_Y
(byte) MOS6569_VICII::SPRITES_MC
(byte) MOS6569_VICII::SPRITES_MCOLOR1
(byte) MOS6569_VICII::SPRITES_MCOLOR2
(byte) MOS6569_VICII::SPRITES_PRIORITY
(byte) MOS6569_VICII::SPRITES_XMSB
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(void()) apply_preset((byte) apply_preset::idx)
(byte) apply_preset::i
(byte) apply_preset::i#1 2.000000002E9
(byte) apply_preset::i#2 1.6666666683333335E9
(byte) apply_preset::idx
(byte) apply_preset::idx#0 1009092.0000000002
(byte*) apply_preset::preset
(byte*) apply_preset::preset#15 2.000000002E8
(void()) bitmap_clear()
(byte*) bitmap_clear::bitmap
(word) bitmap_clear::bitmap#0 10001.0
(byte*) bitmap_clear::bitmap#1 420000.60000000003
(byte*) bitmap_clear::bitmap#2 1550002.0
(byte*) bitmap_clear::bitmap#3 210003.0
(byte*) bitmap_clear::bitmap#5 20002.0
(byte) bitmap_clear::x
(byte) bitmap_clear::x#1 1500001.5
(byte) bitmap_clear::x#2 666667.3333333334
(byte) bitmap_clear::y
(byte) bitmap_clear::y#1 150001.5
(byte) bitmap_clear::y#4 33333.666666666664
(void()) bitmap_init((byte*) bitmap_init::bitmap)
(byte~) bitmap_init::$0 200002.0
(byte~) bitmap_init::$10 50000.5
(byte~) bitmap_init::$7 200002.0
(byte~) bitmap_init::$8 200002.0
(byte~) bitmap_init::$9 200002.0
(byte*) bitmap_init::bitmap
(byte) bitmap_init::bits
(byte) bitmap_init::bits#1 100001.0
(byte) bitmap_init::bits#3 60000.600000000006
(byte) bitmap_init::bits#4 66667.33333333333
(byte) bitmap_init::x
(byte) bitmap_init::x#1 150001.5
(byte) bitmap_init::x#2 66667.33333333333
(byte) bitmap_init::y
(byte) bitmap_init::y#1 150001.5
(byte) bitmap_init::y#2 50000.5
(byte*) bitmap_init::yoffs
(byte*) bitmap_init::yoffs#1 200002.0
(byte*) bitmap_init::yoffs#2 62500.625
(byte*) bitmap_init::yoffs#4 100001.0
(void()) bitmap_line((byte) bitmap_line::x0 , (byte) bitmap_line::x1 , (byte) bitmap_line::y0 , (byte) bitmap_line::y1)
(byte) bitmap_line::x0
(byte) bitmap_line::x0#0 39565.65217391305
(byte) bitmap_line::x1
(byte) bitmap_line::x1#0 41364.09090909091
(byte) bitmap_line::xd
(byte) bitmap_line::xd#1 35000.35
(byte) bitmap_line::xd#2 35000.35
(byte) bitmap_line::y0
(byte) bitmap_line::y0#0 57619.66666666667
(byte) bitmap_line::y1
(byte) bitmap_line::y1#0 60500.650000000016
(byte) bitmap_line::yd
(byte) bitmap_line::yd#1 44444.88888888889
(byte) bitmap_line::yd#10 44444.88888888889
(byte) bitmap_line::yd#11 44444.88888888889
(byte) bitmap_line::yd#2 44444.88888888889
(void()) bitmap_line_xdyd((byte) bitmap_line_xdyd::x , (byte) bitmap_line_xdyd::y , (byte) bitmap_line_xdyd::x1 , (byte) bitmap_line_xdyd::xd , (byte) bitmap_line_xdyd::yd)
(byte~) bitmap_line_xdyd::$6 2.00000002E8
(byte) bitmap_line_xdyd::e
(byte) bitmap_line_xdyd::e#0 2000002.0
(byte) bitmap_line_xdyd::e#1 1.3333333466666667E8
(byte) bitmap_line_xdyd::e#2 2.00000002E8
(byte) bitmap_line_xdyd::e#3 4.0200000599999994E7
(byte) bitmap_line_xdyd::e#6 1.00000001E8
(byte) bitmap_line_xdyd::x
(byte) bitmap_line_xdyd::x#0 40000.4
(byte) bitmap_line_xdyd::x#1 40000.4
(byte) bitmap_line_xdyd::x#2 3.7500000375E7
(byte) bitmap_line_xdyd::x#3 7.5250001E7
(byte) bitmap_line_xdyd::x#6 600001.5
(byte) bitmap_line_xdyd::x1
(byte) bitmap_line_xdyd::x1#0 66667.33333333333
(byte) bitmap_line_xdyd::x1#1 66667.33333333333
(byte) bitmap_line_xdyd::x1#6 7157143.071428572
(byte) bitmap_line_xdyd::xd
(byte) bitmap_line_xdyd::xd#0 100001.0
(byte) bitmap_line_xdyd::xd#1 100001.0
(byte) bitmap_line_xdyd::xd#5 1.4300000285714287E7
(byte) bitmap_line_xdyd::y
(byte) bitmap_line_xdyd::y#0 50000.5
(byte) bitmap_line_xdyd::y#1 50000.5
(byte) bitmap_line_xdyd::y#2 1.00000001E8
(byte) bitmap_line_xdyd::y#3 5.7285715E7
(byte) bitmap_line_xdyd::y#5 600001.5
(byte) bitmap_line_xdyd::y#6 1.00000001E8
(byte) bitmap_line_xdyd::yd
(byte) bitmap_line_xdyd::yd#0 200002.0
(byte) bitmap_line_xdyd::yd#1 200002.0
(byte) bitmap_line_xdyd::yd#2 7228571.714285715
(void()) bitmap_line_xdyi((byte) bitmap_line_xdyi::x , (byte) bitmap_line_xdyi::y , (byte) bitmap_line_xdyi::x1 , (byte) bitmap_line_xdyi::xd , (byte) bitmap_line_xdyi::yd)
(byte~) bitmap_line_xdyi::$6 2.00000002E8
(byte) bitmap_line_xdyi::e
(byte) bitmap_line_xdyi::e#0 2000002.0
(byte) bitmap_line_xdyi::e#1 1.3333333466666667E8
(byte) bitmap_line_xdyi::e#2 2.00000002E8
(byte) bitmap_line_xdyi::e#3 4.0200000599999994E7
(byte) bitmap_line_xdyi::e#6 1.00000001E8
(byte) bitmap_line_xdyi::x
(byte) bitmap_line_xdyi::x#0 40000.4
(byte) bitmap_line_xdyi::x#1 40000.4
(byte) bitmap_line_xdyi::x#2 3.7500000375E7
(byte) bitmap_line_xdyi::x#3 7.5250001E7
(byte) bitmap_line_xdyi::x#6 600001.5
(byte) bitmap_line_xdyi::x1
(byte) bitmap_line_xdyi::x1#0 66667.33333333333
(byte) bitmap_line_xdyi::x1#1 66667.33333333333
(byte) bitmap_line_xdyi::x1#6 7157143.071428572
(byte) bitmap_line_xdyi::xd
(byte) bitmap_line_xdyi::xd#0 100001.0
(byte) bitmap_line_xdyi::xd#1 100001.0
(byte) bitmap_line_xdyi::xd#5 1.4300000285714287E7
(byte) bitmap_line_xdyi::y
(byte) bitmap_line_xdyi::y#0 50000.5
(byte) bitmap_line_xdyi::y#1 50000.5
(byte) bitmap_line_xdyi::y#2 1.00000001E8
(byte) bitmap_line_xdyi::y#3 5.7285715E7
(byte) bitmap_line_xdyi::y#5 600001.5
(byte) bitmap_line_xdyi::y#6 1.00000001E8
(byte) bitmap_line_xdyi::yd
(byte) bitmap_line_xdyi::yd#0 200002.0
(byte) bitmap_line_xdyi::yd#1 200002.0
(byte) bitmap_line_xdyi::yd#2 7228571.714285715
(void()) bitmap_line_ydxd((byte) bitmap_line_ydxd::y , (byte) bitmap_line_ydxd::x , (byte) bitmap_line_ydxd::y1 , (byte) bitmap_line_ydxd::yd , (byte) bitmap_line_ydxd::xd)
(byte~) bitmap_line_ydxd::$6 2.00000002E8
(byte) bitmap_line_ydxd::e
(byte) bitmap_line_ydxd::e#0 2000002.0
(byte) bitmap_line_ydxd::e#1 1.3333333466666667E8
(byte) bitmap_line_ydxd::e#2 2.00000002E8
(byte) bitmap_line_ydxd::e#3 4.0200000599999994E7
(byte) bitmap_line_ydxd::e#6 1.00000001E8
(byte) bitmap_line_ydxd::x
(byte) bitmap_line_ydxd::x#0 50000.5
(byte) bitmap_line_ydxd::x#1 50000.5
(byte) bitmap_line_ydxd::x#2 1.00000001E8
(byte) bitmap_line_ydxd::x#3 5.7285715E7
(byte) bitmap_line_ydxd::x#5 600001.5
(byte) bitmap_line_ydxd::x#6 1.00000001E8
(byte) bitmap_line_ydxd::xd
(byte) bitmap_line_ydxd::xd#0 200002.0
(byte) bitmap_line_ydxd::xd#1 200002.0
(byte) bitmap_line_ydxd::xd#2 7228571.714285715
(byte) bitmap_line_ydxd::y
(byte) bitmap_line_ydxd::y#0 40000.4
(byte) bitmap_line_ydxd::y#1 40000.4
(byte) bitmap_line_ydxd::y#2 7.5250001E7
(byte) bitmap_line_ydxd::y#3 3.7500000375E7
(byte) bitmap_line_ydxd::y#7 600001.5
(byte) bitmap_line_ydxd::y1
(byte) bitmap_line_ydxd::y1#0 66667.33333333333
(byte) bitmap_line_ydxd::y1#1 66667.33333333333
(byte) bitmap_line_ydxd::y1#6 7157143.071428572
(byte) bitmap_line_ydxd::yd
(byte) bitmap_line_ydxd::yd#0 100001.0
(byte) bitmap_line_ydxd::yd#1 100001.0
(byte) bitmap_line_ydxd::yd#5 1.4300000285714287E7
(void()) bitmap_line_ydxi((byte) bitmap_line_ydxi::y , (byte) bitmap_line_ydxi::x , (byte) bitmap_line_ydxi::y1 , (byte) bitmap_line_ydxi::yd , (byte) bitmap_line_ydxi::xd)
(byte~) bitmap_line_ydxi::$6 2.00000002E8
(byte) bitmap_line_ydxi::e
(byte) bitmap_line_ydxi::e#0 2000002.0
(byte) bitmap_line_ydxi::e#1 1.3333333466666667E8
(byte) bitmap_line_ydxi::e#2 2.00000002E8
(byte) bitmap_line_ydxi::e#3 4.0200000599999994E7
(byte) bitmap_line_ydxi::e#6 1.00000001E8
(byte) bitmap_line_ydxi::x
(byte) bitmap_line_ydxi::x#0 50000.5
(byte) bitmap_line_ydxi::x#1 50000.5
(byte) bitmap_line_ydxi::x#2 1.00000001E8
(byte) bitmap_line_ydxi::x#3 5.7285715E7
(byte) bitmap_line_ydxi::x#5 600001.5
(byte) bitmap_line_ydxi::x#6 1.00000001E8
(byte) bitmap_line_ydxi::xd
(byte) bitmap_line_ydxi::xd#0 200002.0
(byte) bitmap_line_ydxi::xd#1 200002.0
(byte) bitmap_line_ydxi::xd#2 7228571.714285715
(byte) bitmap_line_ydxi::y
(byte) bitmap_line_ydxi::y#0 40000.4
(byte) bitmap_line_ydxi::y#1 40000.4
(byte) bitmap_line_ydxi::y#2 3.7500000375E7
(byte) bitmap_line_ydxi::y#3 7.5250001E7
(byte) bitmap_line_ydxi::y#6 600001.5
(byte) bitmap_line_ydxi::y1
(byte) bitmap_line_ydxi::y1#0 66667.33333333333
(byte) bitmap_line_ydxi::y1#1 66667.33333333333
(byte) bitmap_line_ydxi::y1#6 7157143.071428572
(byte) bitmap_line_ydxi::yd
(byte) bitmap_line_ydxi::yd#0 100001.0
(byte) bitmap_line_ydxi::yd#1 100001.0
(byte) bitmap_line_ydxi::yd#5 1.4300000285714287E7
(void()) bitmap_plot((byte) bitmap_plot::x , (byte) bitmap_plot::y)
(byte~) bitmap_plot::$1 2.000000002E9
(byte*) bitmap_plot::plotter
(word) bitmap_plot::plotter#0 5.000000005E8
(word) bitmap_plot::plotter_x
(word) bitmap_plot::plotter_x#0 1.000000001E9
(word) bitmap_plot::plotter_y
(word) bitmap_plot::plotter_y#0 2.000000002E9
(byte) bitmap_plot::x
(byte) bitmap_plot::x#0 1.00000001E8
(byte) bitmap_plot::x#1 1.00000001E8
(byte) bitmap_plot::x#2 1.00000001E8
(byte) bitmap_plot::x#3 1.00000001E8
(byte) bitmap_plot::x#4 8.5000000175E8
(byte) bitmap_plot::y
(byte) bitmap_plot::y#0 2.00000002E8
(byte) bitmap_plot::y#1 2.00000002E8
(byte) bitmap_plot::y#2 2.00000002E8
(byte) bitmap_plot::y#3 2.00000002E8
(byte) bitmap_plot::y#4 1.200000003E9
(void()) dtvSetCpuBankSegment1((byte) dtvSetCpuBankSegment1::cpuBankIdx)
(byte) dtvSetCpuBankSegment1::cpuBankIdx
(byte) dtvSetCpuBankSegment1::cpuBankIdx#1 200002.0
(byte) dtvSetCpuBankSegment1::cpuBankIdx#11 20002.0
(byte) dtvSetCpuBankSegment1::cpuBankIdx#13 1110003.0
(byte()) form_control()
(byte~) form_control::$12 2.0000002E7
(byte~) form_control::$13 2.0000002E7
(byte~) form_control::$14 2.0000002E7
(byte~) form_control::$15 2.0000002E7
(byte~) form_control::$22 2.0000002E7
(byte*) form_control::field
(byte*) form_control::field#0 2962963.2592592593
(byte) form_control::key_event
(byte) form_control::key_event#0 1.3333334666666666E7
(byte) form_control::return
(byte) form_control::return#0 2000002.0
(byte) form_control::return#2 333333.6666666667
(signed byte) form_cursor_count
(signed byte) form_cursor_count#1 28.25641025641026
(signed byte) form_cursor_count#15 2000000.2
(signed byte) form_cursor_count#16 1829418.0
(signed byte) form_cursor_count#21 1585857.714285714
(signed byte) form_cursor_count#5 1.0000001E7
(byte) form_field_idx
(byte) form_field_idx#1 28.25641025641026
(byte) form_field_idx#18 2417653.3529411764
(byte) form_field_idx#28 4387205.641025641
(byte) form_field_idx#31 3.0000003E7
(byte) form_field_idx#5 1.0000001E7
(byte) form_field_idx#6 1.0000001E7
(byte*()) form_field_ptr((byte) form_field_ptr::field_idx)
(byte*) form_field_ptr::field
(byte) form_field_ptr::field_idx
(byte) form_field_ptr::field_idx#0 2.000000002E9
(byte) form_field_ptr::field_idx#1 2.0000002E7
(byte) form_field_ptr::field_idx#2 7.003333334666666E9
(byte*) form_field_ptr::line
(word) form_field_ptr::line#0 2.0000000002E9
(byte*) form_field_ptr::return
(byte*) form_field_ptr::return#0 3.336666667333333E9
(byte*) form_field_ptr::return#3 2.0000002E7
(byte) form_field_ptr::x
(byte) form_field_ptr::x#0 5.25000000075E9
(byte) form_field_ptr::y
(byte) form_field_ptr::y#0 3.0000000003E10
(void()) form_mode()
(byte~) form_mode::$11 2000002.0
(byte) form_mode::i
(byte) form_mode::i#1 150001.5
(byte) form_mode::i#2 200002.0
(byte) form_mode::preset_current
(byte) form_mode::preset_current#0 2002.0
(byte) form_mode::preset_current#1 50000.5
(byte) form_mode::preset_current#6 387625.625
(void()) form_render_values()
(byte*) form_render_values::field
(byte) form_render_values::idx
(byte) form_render_values::idx#1 2.000000002E9
(byte) form_render_values::idx#2 1.000000001E9
(void()) form_set_screen((byte*) form_set_screen::screen)
(byte~) form_set_screen::$0 2000002.0
(byte~) form_set_screen::$1 2000002.0
(byte*) form_set_screen::line
(byte*) form_set_screen::line#1 666667.3333333334
(byte*) form_set_screen::line#2 800000.8
(byte*) form_set_screen::screen
(byte) form_set_screen::y
(byte) form_set_screen::y#1 1500001.5
(byte) form_set_screen::y#2 666667.3333333334
(dword()) get_plane((byte) get_plane::idx)
(byte) get_plane::idx
(byte) get_plane::idx#0 2002.0
(byte) get_plane::idx#1 2002.0
(byte) get_plane::idx#10 10144.000000000002
(dword) get_plane::return
(dword) get_plane::return#14 500.5
(dword) get_plane::return#16 2002.0
(dword) get_plane::return#17 2002.0
(byte*()) get_vic_charset((byte) get_vic_charset::idx)
(byte) get_vic_charset::idx
(byte) get_vic_charset::idx#0 10501.5
(byte*) get_vic_charset::return
(byte*) get_vic_charset::return#2 333.6666666666667
(byte*) get_vic_charset::return#4 2002.0
(byte*()) get_vic_screen((byte) get_vic_screen::idx)
(byte) get_vic_screen::idx
(byte) get_vic_screen::idx#0 2002.0
(byte) get_vic_screen::idx#1 2002.0
(byte) get_vic_screen::idx#2 10401.400000000001
(byte*) get_vic_screen::return
(byte*) get_vic_screen::return#10 2002.0
(byte*) get_vic_screen::return#11 2002.0
(byte*) get_vic_screen::return#5 500.5
(void()) gfx_init()
(void()) gfx_init_charset()
(byte) gfx_init_charset::c
(byte) gfx_init_charset::c#1 15001.5
(byte) gfx_init_charset::c#4 2857.4285714285716
(byte*) gfx_init_charset::chargen
(byte*) gfx_init_charset::chargen#1 42000.600000000006
(byte*) gfx_init_charset::chargen#2 103334.66666666666
(byte*) gfx_init_charset::chargen#3 20002.0
(byte*) gfx_init_charset::charset
(byte*) gfx_init_charset::charset#1 35000.5
(byte*) gfx_init_charset::charset#2 155002.0
(byte*) gfx_init_charset::charset#3 20002.0
(byte) gfx_init_charset::l
(byte) gfx_init_charset::l#1 150001.5
(byte) gfx_init_charset::l#2 50000.5
(void()) gfx_init_plane_8bppchunky()
(word~) gfx_init_plane_8bppchunky::$5 100001.0
(byte) gfx_init_plane_8bppchunky::c
(byte) gfx_init_plane_8bppchunky::c#0 200002.0
(byte*) gfx_init_plane_8bppchunky::gfxb
(byte*) gfx_init_plane_8bppchunky::gfxb#1 42000.600000000006
(byte*) gfx_init_plane_8bppchunky::gfxb#3 155002.0
(byte*) gfx_init_plane_8bppchunky::gfxb#4 75000.75
(byte*) gfx_init_plane_8bppchunky::gfxb#5 20002.0
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#2 200002.0
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 102501.25
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#7 20002.0
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 34444.88888888889
(word) gfx_init_plane_8bppchunky::x
(word) gfx_init_plane_8bppchunky::x#1 150001.5
(word) gfx_init_plane_8bppchunky::x#2 30000.300000000003
(byte) gfx_init_plane_8bppchunky::y
(byte) gfx_init_plane_8bppchunky::y#1 15001.5
(byte) gfx_init_plane_8bppchunky::y#6 9230.999999999998
(void()) gfx_init_plane_blank()
(void()) gfx_init_plane_charset8()
(byte~) gfx_init_plane_charset8::$2 2000002.0
(byte) gfx_init_plane_charset8::bits
(byte) gfx_init_plane_charset8::bits#0 100001.0
(byte) gfx_init_plane_charset8::bits#1 500000.5
(byte) gfx_init_plane_charset8::bits#2 442857.7142857142
(byte) gfx_init_plane_charset8::c
(byte) gfx_init_plane_charset8::c#2 2000002.0
(byte) gfx_init_plane_charset8::c#3 2000002.0
(byte) gfx_init_plane_charset8::ch
(byte) gfx_init_plane_charset8::ch#1 15001.5
(byte) gfx_init_plane_charset8::ch#8 1176.5882352941176
(byte*) gfx_init_plane_charset8::chargen
(byte*) gfx_init_plane_charset8::chargen#1 13125.1875
(byte*) gfx_init_plane_charset8::chargen#2 155002.0
(byte*) gfx_init_plane_charset8::chargen#3 20002.0
(byte) gfx_init_plane_charset8::col
(byte) gfx_init_plane_charset8::col#1 301429.14285714284
(byte) gfx_init_plane_charset8::col#2 387500.5
(byte) gfx_init_plane_charset8::col#5 70001.0
(byte) gfx_init_plane_charset8::col#6 20002.0
(byte) gfx_init_plane_charset8::cp
(byte) gfx_init_plane_charset8::cp#1 1500001.5
(byte) gfx_init_plane_charset8::cp#2 222222.44444444444
(byte) gfx_init_plane_charset8::cr
(byte) gfx_init_plane_charset8::cr#1 150001.5
(byte) gfx_init_plane_charset8::cr#6 14285.857142857143
(byte*) gfx_init_plane_charset8::gfxa
(byte*) gfx_init_plane_charset8::gfxa#1 234444.88888888888
(byte*) gfx_init_plane_charset8::gfxa#2 516667.3333333334
(byte*) gfx_init_plane_charset8::gfxa#5 70001.0
(byte*) gfx_init_plane_charset8::gfxa#6 20002.0
(byte) gfx_init_plane_charset8::gfxbCpuBank
(void()) gfx_init_plane_fill((dword) gfx_init_plane_fill::plane_addr , (byte) gfx_init_plane_fill::fill)
(dword~) gfx_init_plane_fill::$0 20002.0
(word~) gfx_init_plane_fill::$1 20002.0
(word~) gfx_init_plane_fill::$4 20002.0
(word~) gfx_init_plane_fill::$5 20002.0
(byte) gfx_init_plane_fill::bx
(byte) gfx_init_plane_fill::bx#1 1500001.5
(byte) gfx_init_plane_fill::bx#2 666667.3333333334
(byte) gfx_init_plane_fill::by
(byte) gfx_init_plane_fill::by#1 150001.5
(byte) gfx_init_plane_fill::by#4 33333.666666666664
(byte) gfx_init_plane_fill::fill
(byte) gfx_init_plane_fill::fill#6 55555.61111111111
(byte*) gfx_init_plane_fill::gfxb
(word) gfx_init_plane_fill::gfxb#0 10001.0
(byte*) gfx_init_plane_fill::gfxb#1 420000.60000000003
(byte*) gfx_init_plane_fill::gfxb#2 1550002.0
(byte*) gfx_init_plane_fill::gfxb#3 210003.0
(byte*) gfx_init_plane_fill::gfxb#6 20002.0
(byte) gfx_init_plane_fill::gfxbCpuBank
(byte) gfx_init_plane_fill::gfxbCpuBank#0 20002.0
(dword) gfx_init_plane_fill::plane_addr
(dword) gfx_init_plane_fill::plane_addr#3 3333.6666666666665
(void()) gfx_init_plane_full()
(void()) gfx_init_plane_horisontal()
(byte~) gfx_init_plane_horisontal::$2 200002.0
(byte) gfx_init_plane_horisontal::ax
(byte) gfx_init_plane_horisontal::ax#1 150001.5
(byte) gfx_init_plane_horisontal::ax#2 25000.25
(byte) gfx_init_plane_horisontal::ay
(byte) gfx_init_plane_horisontal::ay#1 15001.5
(byte) gfx_init_plane_horisontal::ay#4 10909.363636363636
(byte*) gfx_init_plane_horisontal::gfxa
(byte*) gfx_init_plane_horisontal::gfxa#1 200002.0
(byte*) gfx_init_plane_horisontal::gfxa#2 200002.0
(byte*) gfx_init_plane_horisontal::gfxa#3 102001.2
(byte*) gfx_init_plane_horisontal::gfxa#6 20002.0
(byte*) gfx_init_plane_horisontal::gfxa#7 62000.8
(byte) gfx_init_plane_horisontal::gfxbCpuBank
(void()) gfx_init_plane_horisontal2()
(byte~) gfx_init_plane_horisontal2::$2 200002.0
(byte) gfx_init_plane_horisontal2::ax
(byte) gfx_init_plane_horisontal2::ax#1 150001.5
(byte) gfx_init_plane_horisontal2::ax#2 40000.4
(byte) gfx_init_plane_horisontal2::ay
(byte) gfx_init_plane_horisontal2::ay#1 15001.5
(byte) gfx_init_plane_horisontal2::ay#4 15000.375
(byte*) gfx_init_plane_horisontal2::gfxa
(byte*) gfx_init_plane_horisontal2::gfxa#1 42000.600000000006
(byte*) gfx_init_plane_horisontal2::gfxa#2 77501.0
(byte*) gfx_init_plane_horisontal2::gfxa#3 20002.0
(byte) gfx_init_plane_horisontal2::gfxbCpuBank
(byte) gfx_init_plane_horisontal2::row
(byte) gfx_init_plane_horisontal2::row#0 200002.0
(void()) gfx_init_plane_vertical()
(byte) gfx_init_plane_vertical::bx
(byte) gfx_init_plane_vertical::bx#1 150001.5
(byte) gfx_init_plane_vertical::bx#2 66667.33333333333
(byte) gfx_init_plane_vertical::by
(byte) gfx_init_plane_vertical::by#1 15001.5
(byte) gfx_init_plane_vertical::by#4 3333.6666666666665
(byte*) gfx_init_plane_vertical::gfxb
(byte*) gfx_init_plane_vertical::gfxb#1 42000.600000000006
(byte*) gfx_init_plane_vertical::gfxb#2 155002.0
(byte*) gfx_init_plane_vertical::gfxb#3 20002.0
(byte) gfx_init_plane_vertical::gfxbCpuBank
(void()) gfx_init_plane_vertical2()
(void()) gfx_init_screen0()
(byte~) gfx_init_screen0::$0 200002.0
(byte~) gfx_init_screen0::$1 100001.0
(byte~) gfx_init_screen0::$2 200002.0
(byte~) gfx_init_screen0::$3 200002.0
(byte*) gfx_init_screen0::ch
(byte*) gfx_init_screen0::ch#1 42000.600000000006
(byte*) gfx_init_screen0::ch#2 51667.33333333333
(byte*) gfx_init_screen0::ch#3 20002.0
(byte) gfx_init_screen0::cx
(byte) gfx_init_screen0::cx#1 150001.5
(byte) gfx_init_screen0::cx#2 42857.57142857143
(byte) gfx_init_screen0::cy
(byte) gfx_init_screen0::cy#1 15001.5
(byte) gfx_init_screen0::cy#4 12000.300000000001
(void()) gfx_init_screen1()
(byte~) gfx_init_screen1::$0 200002.0
(byte~) gfx_init_screen1::$1 200002.0
(byte*) gfx_init_screen1::ch
(byte*) gfx_init_screen1::ch#1 42000.600000000006
(byte*) gfx_init_screen1::ch#2 77501.0
(byte*) gfx_init_screen1::ch#3 20002.0
(byte) gfx_init_screen1::cx
(byte) gfx_init_screen1::cx#1 150001.5
(byte) gfx_init_screen1::cx#2 60000.600000000006
(byte) gfx_init_screen1::cy
(byte) gfx_init_screen1::cy#1 15001.5
(byte) gfx_init_screen1::cy#4 15000.375
(void()) gfx_init_screen2()
(byte~) gfx_init_screen2::$0 200002.0
(byte~) gfx_init_screen2::$3 200002.0
(byte~) gfx_init_screen2::$4 200002.0
(byte*) gfx_init_screen2::ch
(byte*) gfx_init_screen2::ch#1 42000.600000000006
(byte*) gfx_init_screen2::ch#2 44286.28571428572
(byte*) gfx_init_screen2::ch#3 20002.0
(byte) gfx_init_screen2::col
(byte) gfx_init_screen2::col#0 150001.5
(byte) gfx_init_screen2::col2
(byte) gfx_init_screen2::col2#0 100001.0
(byte) gfx_init_screen2::cx
(byte) gfx_init_screen2::cx#1 150001.5
(byte) gfx_init_screen2::cx#2 37500.375
(byte) gfx_init_screen2::cy
(byte) gfx_init_screen2::cy#1 15001.5
(byte) gfx_init_screen2::cy#4 10909.363636363636
(void()) gfx_init_screen3()
(byte~) gfx_init_screen3::$0 200002.0
(byte~) gfx_init_screen3::$1 100001.0
(byte~) gfx_init_screen3::$2 200002.0
(byte~) gfx_init_screen3::$3 200002.0
(byte*) gfx_init_screen3::ch
(byte*) gfx_init_screen3::ch#1 42000.600000000006
(byte*) gfx_init_screen3::ch#2 51667.33333333333
(byte*) gfx_init_screen3::ch#3 20002.0
(byte) gfx_init_screen3::cx
(byte) gfx_init_screen3::cx#1 150001.5
(byte) gfx_init_screen3::cx#2 42857.57142857143
(byte) gfx_init_screen3::cy
(byte) gfx_init_screen3::cy#1 15001.5
(byte) gfx_init_screen3::cy#4 12000.300000000001
(void()) gfx_init_screen4()
(byte*) gfx_init_screen4::ch
(byte*) gfx_init_screen4::ch#1 42000.600000000006
(byte*) gfx_init_screen4::ch#2 155002.0
(byte*) gfx_init_screen4::ch#3 20002.0
(byte) gfx_init_screen4::cx
(byte) gfx_init_screen4::cx#1 150001.5
(byte) gfx_init_screen4::cx#2 66667.33333333333
(byte) gfx_init_screen4::cy
(byte) gfx_init_screen4::cy#1 15001.5
(byte) gfx_init_screen4::cy#4 3333.6666666666665
(void()) gfx_init_vic_bitmap()
(byte) gfx_init_vic_bitmap::l
(byte) gfx_init_vic_bitmap::l#1 20002.0
(byte) gfx_init_vic_bitmap::l#2 10001.000000000002
(void()) gfx_mode()
(byte~) gfx_mode::$18 2002.0
(dword~) gfx_mode::$20 2002.0
(byte~) gfx_mode::$23 2002.0
(word~) gfx_mode::$24 1001.0
(byte~) gfx_mode::$25 2002.0
(word~) gfx_mode::$26 2002.0
(byte~) gfx_mode::$27 2002.0
(byte~) gfx_mode::$28 2002.0
(byte~) gfx_mode::$29 2002.0
(byte~) gfx_mode::$30 2002.0
(byte~) gfx_mode::$31 2002.0
(byte~) gfx_mode::$32 2002.0
(dword~) gfx_mode::$34 2002.0
(byte~) gfx_mode::$37 2002.0
(word~) gfx_mode::$38 1001.0
(byte~) gfx_mode::$39 2002.0
(word~) gfx_mode::$40 2002.0
(byte~) gfx_mode::$41 2002.0
(byte~) gfx_mode::$42 2002.0
(byte~) gfx_mode::$43 2002.0
(byte~) gfx_mode::$44 2002.0
(byte~) gfx_mode::$45 2002.0
(word~) gfx_mode::$47 2002.0
(word~) gfx_mode::$48 125.125
(word~) gfx_mode::$50 2002.0
(byte~) gfx_mode::$51 2002.0
(byte~) gfx_mode::$52 1001.0
(byte~) gfx_mode::$53 2002.0
(byte~) gfx_mode::$55 2002.0
(byte~) gfx_mode::$56 2002.0
(byte~) gfx_mode::$57 2002.0
(byte~) gfx_mode::$58 2002.0
(byte~) gfx_mode::$59 2002.0
(byte~) gfx_mode::$60 2002.0
(byte~) gfx_mode::$61 2002.0
(byte~) gfx_mode::$62 2002.0
(byte*~) gfx_mode::$82 1001.0
(byte*~) gfx_mode::$83 1001.0
(byte~) gfx_mode::$84 2002.0
(byte*) gfx_mode::col
(byte*) gfx_mode::col#1 350000.5
(byte*) gfx_mode::col#2 1550002.0
(byte*) gfx_mode::col#3 200002.0
(byte) gfx_mode::cx
(byte) gfx_mode::cx#1 1500001.5
(byte) gfx_mode::cx#2 500000.5
(byte) gfx_mode::cy
(byte) gfx_mode::cy#1 150001.5
(byte) gfx_mode::cy#4 28571.714285714286
(byte) gfx_mode::dtv_control
(byte) gfx_mode::dtv_control#10 2002.0
(byte) gfx_mode::dtv_control#11 2002.0
(byte) gfx_mode::dtv_control#12 3003.0
(byte) gfx_mode::dtv_control#13 2002.0
(byte) gfx_mode::dtv_control#14 1001.0
(byte) gfx_mode::dtv_control#15 2002.0
(byte) gfx_mode::dtv_control#2 2002.0
(byte) gfx_mode::dtv_control#3 2002.0
(byte) gfx_mode::dtv_control#4 2002.0
(byte) gfx_mode::dtv_control#5 2002.0
(byte) gfx_mode::dtv_control#6 2002.0
(byte) gfx_mode::i
(byte) gfx_mode::i#1 150001.5
(byte) gfx_mode::i#2 200002.0
(byte) gfx_mode::j
(byte) gfx_mode::j#1 150001.5
(byte) gfx_mode::j#2 200002.0
(byte) gfx_mode::keyboard_event
(byte) gfx_mode::keyboard_event#0 200002.0
(dword) gfx_mode::plane_a
(dword) gfx_mode::plane_a#0 500.5
(byte) gfx_mode::plane_a_offs
(byte) gfx_mode::plane_a_offs#0 400.4
(dword) gfx_mode::plane_b
(dword) gfx_mode::plane_b#0 500.5
(byte) gfx_mode::plane_b_offs
(byte) gfx_mode::plane_b_offs#0 400.4
(byte*) gfx_mode::vic_colors
(byte*) gfx_mode::vic_colors#0 2002.0
(byte*) gfx_mode::vic_colors#1 420000.60000000003
(byte*) gfx_mode::vic_colors#2 1033334.6666666667
(byte*) gfx_mode::vic_colors#3 201003.0
(byte) gfx_mode::vic_control
(byte) gfx_mode::vic_control#2 2002.0
(byte) gfx_mode::vic_control#4 3003.0
(byte) gfx_mode::vic_control#5 1001.0
(byte) gfx_mode::vic_control2
(byte) gfx_mode::vic_control2#2 1001.0
(byte()) keyboard_event_get()
(byte) keyboard_event_get::return
(byte) keyboard_event_get::return#1 2.00000002E8
(byte) keyboard_event_get::return#2 2.752500075E7
(byte) keyboard_event_get::return#3 200002.0
(byte) keyboard_event_get::return#4 2.0000002E7
(byte()) keyboard_event_pressed((byte) keyboard_event_pressed::keycode)
(byte~) keyboard_event_pressed::$0 2.000000002E9
(byte~) keyboard_event_pressed::$1 2.000000002E9
(byte) keyboard_event_pressed::keycode
(byte) keyboard_event_pressed::keycode#4 6.666666673333334E8
(byte) keyboard_event_pressed::return
(byte) keyboard_event_pressed::return#0 2.00000002E8
(byte) keyboard_event_pressed::return#1 2.00000002E8
(byte) keyboard_event_pressed::return#10 2.333333341666667E8
(byte) keyboard_event_pressed::return#2 2.00000002E8
(byte) keyboard_event_pressed::return#3 2.00000002E8
(byte) keyboard_event_pressed::row_bits
(byte) keyboard_event_pressed::row_bits#0 1.000000001E9
(void()) keyboard_event_scan()
(byte~) keyboard_event_scan::$0 2.00000002E8
(byte~) keyboard_event_scan::$15 2.0000000000002E13
(byte~) keyboard_event_scan::$16 2.0000000000002E13
(byte~) keyboard_event_scan::$23 2.0000000000002E13
(byte~) keyboard_event_scan::$3 2.00000002E8
(byte~) keyboard_event_scan::$6 2.00000002E8
(byte~) keyboard_event_scan::$9 2.00000002E8
(byte) keyboard_event_scan::col
(byte) keyboard_event_scan::col#1 1.50000000000015E13
(byte) keyboard_event_scan::col#2 2.857142857143143E12
(byte) keyboard_event_scan::event_type
(byte) keyboard_event_scan::event_type#0 2.0000000000002E13
(byte) keyboard_event_scan::keycode
(byte) keyboard_event_scan::keycode#1 2.000000000002E12
(byte) keyboard_event_scan::keycode#10 3.1538461538465386E12
(byte) keyboard_event_scan::keycode#11 5.000000000005E11
(byte) keyboard_event_scan::keycode#13 1.000000000001E12
(byte) keyboard_event_scan::keycode#14 5.25000000000075E12
(byte) keyboard_event_scan::row
(byte) keyboard_event_scan::row#1 1.5000000000015E12
(byte) keyboard_event_scan::row#2 6.0000000000024E11
(byte) keyboard_event_scan::row_scan
(byte) keyboard_event_scan::row_scan#0 1.2777777777780554E12
(byte) keyboard_events_size
(byte) keyboard_events_size#1 2.0000000000002E13
(byte) keyboard_events_size#100 8.824411764723529E10
(byte) keyboard_events_size#105 1.02000000000012E13
(byte) keyboard_events_size#106 4.285857142862857E11
(byte) keyboard_events_size#18 8.100000000000898E12
(byte) keyboard_events_size#2 2.0000000000002E13
(byte) keyboard_events_size#24 1117778.3666666667
(byte) keyboard_events_size#27 28.25641025641026
(byte) keyboard_events_size#4 1.500000015E8
(byte) keyboard_events_size#47 653000.2352941177
(byte) keyboard_events_size#97 1.10100003E8
(void()) keyboard_init()
(byte()) keyboard_matrix_read((byte) keyboard_matrix_read::rowid)
(byte) keyboard_matrix_read::return
(byte) keyboard_matrix_read::return#0 3.666666666667333E12
(byte) keyboard_matrix_read::return#2 2.000000000002E12
(byte) keyboard_matrix_read::row_pressed_bits
(byte) keyboard_matrix_read::rowid
(byte) keyboard_matrix_read::rowid#0 1.1000000000002E13
(byte) keyboard_modifiers
(byte) keyboard_modifiers#18 4.00000004E7
(byte) keyboard_modifiers#19 8.00000008E7
(byte) keyboard_modifiers#20 8.00000008E7
(byte) keyboard_modifiers#21 2.0000000363636363E7
(byte) keyboard_modifiers#3 2.00000002E8
(byte) keyboard_modifiers#4 2.00000002E8
(byte) keyboard_modifiers#5 2.00000002E8
(void()) main()
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(byte) memset::c
(byte*) memset::dst
(byte*) memset::dst#1 2.0000002E7
(byte*) memset::dst#2 1.3366668333333332E7
(byte*) memset::dst#4 200002.0
(byte*) memset::end
(byte*) memset::end#0 1683333.6666666665
(word) memset::num
(void*) memset::return
(void*) memset::str
(void*) memset::str#0 3333.6666666666665
(void()) print_char((byte) print_char::ch)
(byte) print_char::ch
(byte) print_char::ch#0 1.10000002E8
(byte*) print_char_cursor
(byte*) print_char_cursor#24 1005001.5
(byte*) print_char_cursor#28 3.6666667333333336E7
(byte*) print_char_cursor#41 3.683333416666667E7
(byte*) print_char_cursor#42 1.4328571434285712E9
(byte*) print_char_cursor#72 20002.0
(byte*) print_char_cursor#73 2000002.0
(void()) print_cls()
(byte*) print_line_cursor
(byte*) print_line_cursor#2 917500.25
(byte*) print_line_cursor#21 2.0010000003E10
(byte*) print_line_cursor#22 6.000400001E9
(void()) print_ln()
(byte*) print_screen
(void()) print_set_screen((byte*) print_set_screen::screen)
(byte*) print_set_screen::screen
(byte*) print_set_screen::screen#2 1333.4666666666667
(void()) print_str_at((byte*) print_str_at::str , (byte*) print_str_at::at)
(byte*) print_str_at::at
(byte*) print_str_at::at#0 1.0000000001E10
(byte*) print_str_at::at#2 1.0000000001E10
(byte*) print_str_at::str
(byte*) print_str_at::str#0 2.0000000002E10
(byte*) print_str_at::str#1 5500001.0
(byte*) print_str_at::str#2 1.000250000125E10
(void()) print_str_lines((byte*) print_str_lines::str)
(byte) print_str_lines::ch
(byte) print_str_lines::ch#0 6666667.333333333
(byte*) print_str_lines::str
(byte*) print_str_lines::str#0 2333333.666666667
(byte*) print_str_lines::str#3 1505002.0
(byte*) print_str_lines::str#4 1.5500002E7
(byte*) print_str_lines::str#5 5000.5
(void()) render_preset_name((byte) render_preset_name::idx)
(byte) render_preset_name::idx
(byte) render_preset_name::idx#0 2002.0
(byte) render_preset_name::idx#1 200002.0
(byte) render_preset_name::idx#10 1009183.0000000002
(byte*) render_preset_name::name
(byte*) render_preset_name::name#13 1000001.0

Initial phi equivalence classes
[ gfx_mode::dtv_control#12 gfx_mode::dtv_control#6 gfx_mode::dtv_control#13 gfx_mode::dtv_control#5 gfx_mode::dtv_control#11 gfx_mode::dtv_control#4 gfx_mode::dtv_control#10 gfx_mode::dtv_control#3 gfx_mode::dtv_control#15 gfx_mode::dtv_control#14 gfx_mode::dtv_control#2 ]
[ gfx_mode::vic_control#4 gfx_mode::vic_control#2 gfx_mode::vic_control#5 ]
[ gfx_mode::vic_control2#2 ]
[ gfx_mode::cy#4 gfx_mode::cy#1 ]
[ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 ]
[ gfx_mode::col#2 gfx_mode::col#3 gfx_mode::col#1 ]
[ gfx_mode::cx#2 gfx_mode::cx#1 ]
[ gfx_mode::j#2 gfx_mode::j#1 ]
[ gfx_mode::i#2 gfx_mode::i#1 ]
[ keyboard_event_get::return#2 keyboard_event_get::return#1 ]
[ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ]
[ keyboard_modifiers#21 keyboard_modifiers#20 keyboard_modifiers#19 keyboard_modifiers#18 keyboard_modifiers#3 keyboard_modifiers#4 keyboard_modifiers#5 ]
[ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ]
[ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ]
[ keyboard_events_size#18 keyboard_events_size#106 keyboard_events_size#97 keyboard_events_size#47 keyboard_events_size#27 keyboard_events_size#24 keyboard_events_size#100 keyboard_events_size#4 keyboard_events_size#105 keyboard_events_size#1 keyboard_events_size#2 ]
[ keyboard_event_pressed::keycode#4 ]
[ get_vic_screen::idx#2 get_vic_screen::idx#0 get_vic_screen::idx#1 ]
[ get_vic_screen::return#5 ]
[ get_vic_charset::return#2 ]
[ get_plane::idx#10 get_plane::idx#1 get_plane::idx#0 ]
[ get_plane::return#14 ]
[ form_mode::i#2 form_mode::i#1 ]
[ form_cursor_count#21 form_cursor_count#1 form_cursor_count#16 form_cursor_count#15 form_cursor_count#5 ]
[ form_field_idx#28 form_field_idx#1 form_field_idx#18 form_field_idx#31 form_field_idx#6 form_field_idx#5 ]
[ form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 ]
[ render_preset_name::idx#10 render_preset_name::idx#0 render_preset_name::idx#1 ]
[ render_preset_name::name#13 ]
[ print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 ]
[ print_str_at::at#2 print_str_at::at#0 ]
[ form_render_values::idx#2 form_render_values::idx#1 ]
[ form_field_ptr::field_idx#2 form_field_ptr::field_idx#1 form_field_ptr::field_idx#0 ]
[ apply_preset::preset#15 ]
[ apply_preset::i#2 apply_preset::i#1 ]
[ form_control::return#2 ]
[ form_set_screen::line#2 form_set_screen::line#1 ]
[ form_set_screen::y#2 form_set_screen::y#1 ]
[ print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 ]
[ print_char_cursor#41 print_char_cursor#24 print_char_cursor#72 print_char_cursor#73 print_char_cursor#42 print_char_cursor#28 ]
[ print_line_cursor#21 print_line_cursor#2 print_set_screen::screen#2 print_line_cursor#22 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
[ gfx_init_plane_fill::plane_addr#3 ]
[ gfx_init_plane_fill::fill#6 ]
[ gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 ]
[ gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 ]
[ gfx_init_plane_fill::bx#2 gfx_init_plane_fill::bx#1 ]
[ dtvSetCpuBankSegment1::cpuBankIdx#13 dtvSetCpuBankSegment1::cpuBankIdx#1 dtvSetCpuBankSegment1::cpuBankIdx#11 ]
[ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 ]
[ gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 ]
[ gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::ax#1 ]
[ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 ]
[ gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 ]
[ gfx_init_plane_vertical::bx#2 gfx_init_plane_vertical::bx#1 ]
[ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 ]
[ gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 ]
[ gfx_init_plane_horisontal::ax#2 gfx_init_plane_horisontal::ax#1 ]
[ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ]
[ gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 ]
[ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ]
[ gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ]
[ gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 ]
[ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ]
[ gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::cp#1 ]
[ gfx_init_plane_charset8::c#2 gfx_init_plane_charset8::c#3 ]
[ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 ]
[ gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 ]
[ gfx_init_plane_8bppchunky::gfxbCpuBank#4 gfx_init_plane_8bppchunky::gfxbCpuBank#7 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::gfxbCpuBank#2 ]
[ gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::gfxb#1 ]
[ gfx_init_vic_bitmap::l#2 gfx_init_vic_bitmap::l#1 ]
[ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 ]
[ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 ]
[ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 ]
[ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 ]
[ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ]
[ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ]
[ bitmap_plot::x#4 bitmap_plot::x#1 bitmap_plot::x#0 bitmap_plot::x#3 bitmap_plot::x#2 ]
[ bitmap_plot::y#4 bitmap_plot::y#1 bitmap_plot::y#0 bitmap_plot::y#3 bitmap_plot::y#2 ]
[ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ]
[ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ]
[ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ]
[ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ]
[ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ]
[ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ]
[ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 ]
[ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 ]
[ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 ]
[ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 ]
[ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ]
[ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ]
[ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ]
[ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ]
[ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ]
[ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ]
[ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ]
[ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ]
[ bitmap_clear::y#4 bitmap_clear::y#1 ]
[ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ]
[ bitmap_clear::x#2 bitmap_clear::x#1 ]
[ bitmap_init::x#2 bitmap_init::x#1 ]
[ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
[ bitmap_init::y#2 bitmap_init::y#1 ]
[ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
[ gfx_init_charset::c#4 gfx_init_charset::c#1 ]
[ gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 ]
[ gfx_init_charset::charset#2 gfx_init_charset::charset#3 gfx_init_charset::charset#1 ]
[ gfx_init_charset::l#2 gfx_init_charset::l#1 ]
[ gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 ]
[ gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 ]
[ gfx_init_screen4::cx#2 gfx_init_screen4::cx#1 ]
[ gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 ]
[ gfx_init_screen3::cx#2 gfx_init_screen3::cx#1 ]
[ gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 ]
[ gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 ]
[ gfx_init_screen2::cx#2 gfx_init_screen2::cx#1 ]
[ gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 ]
[ gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 ]
[ gfx_init_screen1::cx#2 gfx_init_screen1::cx#1 ]
[ gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 ]
[ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ]
[ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ]
[ gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 ]
Added variable gfx_mode::$18 to live range equivalence class [ gfx_mode::$18 ]
Added variable gfx_mode::plane_a_offs#0 to live range equivalence class [ gfx_mode::plane_a_offs#0 ]
Added variable get_plane::return#16 to live range equivalence class [ get_plane::return#16 ]
Added variable gfx_mode::$20 to live range equivalence class [ gfx_mode::$20 ]
Added variable gfx_mode::plane_a#0 to live range equivalence class [ gfx_mode::plane_a#0 ]
Added variable gfx_mode::$24 to live range equivalence class [ gfx_mode::$24 ]
Added variable gfx_mode::$23 to live range equivalence class [ gfx_mode::$23 ]
Added variable gfx_mode::$25 to live range equivalence class [ gfx_mode::$25 ]
Added variable gfx_mode::$26 to live range equivalence class [ gfx_mode::$26 ]
Added variable gfx_mode::$27 to live range equivalence class [ gfx_mode::$27 ]
Added variable gfx_mode::$28 to live range equivalence class [ gfx_mode::$28 ]
Added variable gfx_mode::$29 to live range equivalence class [ gfx_mode::$29 ]
Added variable gfx_mode::$30 to live range equivalence class [ gfx_mode::$30 ]
Added variable gfx_mode::$31 to live range equivalence class [ gfx_mode::$31 ]
Added variable gfx_mode::$32 to live range equivalence class [ gfx_mode::$32 ]
Added variable gfx_mode::plane_b_offs#0 to live range equivalence class [ gfx_mode::plane_b_offs#0 ]
Added variable get_plane::return#17 to live range equivalence class [ get_plane::return#17 ]
Added variable gfx_mode::$34 to live range equivalence class [ gfx_mode::$34 ]
Added variable gfx_mode::plane_b#0 to live range equivalence class [ gfx_mode::plane_b#0 ]
Added variable gfx_mode::$38 to live range equivalence class [ gfx_mode::$38 ]
Added variable gfx_mode::$37 to live range equivalence class [ gfx_mode::$37 ]
Added variable gfx_mode::$39 to live range equivalence class [ gfx_mode::$39 ]
Added variable gfx_mode::$40 to live range equivalence class [ gfx_mode::$40 ]
Added variable gfx_mode::$41 to live range equivalence class [ gfx_mode::$41 ]
Added variable gfx_mode::$42 to live range equivalence class [ gfx_mode::$42 ]
Added variable gfx_mode::$43 to live range equivalence class [ gfx_mode::$43 ]
Added variable gfx_mode::$44 to live range equivalence class [ gfx_mode::$44 ]
Added variable gfx_mode::$45 to live range equivalence class [ gfx_mode::$45 ]
Added variable get_vic_screen::return#10 to live range equivalence class [ get_vic_screen::return#10 ]
Added variable gfx_mode::$82 to live range equivalence class [ gfx_mode::$82 ]
Added variable gfx_mode::$47 to live range equivalence class [ gfx_mode::$47 ]
Added variable gfx_mode::$48 to live range equivalence class [ gfx_mode::$48 ]
Added variable get_vic_charset::idx#0 to live range equivalence class [ get_vic_charset::idx#0 ]
Added variable get_vic_charset::return#4 to live range equivalence class [ get_vic_charset::return#4 ]
Added variable gfx_mode::$83 to live range equivalence class [ gfx_mode::$83 ]
Added variable gfx_mode::$50 to live range equivalence class [ gfx_mode::$50 ]
Added variable gfx_mode::$51 to live range equivalence class [ gfx_mode::$51 ]
Added variable gfx_mode::$52 to live range equivalence class [ gfx_mode::$52 ]
Added variable gfx_mode::$84 to live range equivalence class [ gfx_mode::$84 ]
Added variable gfx_mode::$53 to live range equivalence class [ gfx_mode::$53 ]
Added variable get_vic_screen::return#11 to live range equivalence class [ get_vic_screen::return#11 ]
Added variable gfx_mode::$55 to live range equivalence class [ gfx_mode::$55 ]
Added variable gfx_mode::$56 to live range equivalence class [ gfx_mode::$56 ]
Added variable gfx_mode::$57 to live range equivalence class [ gfx_mode::$57 ]
Added variable gfx_mode::$58 to live range equivalence class [ gfx_mode::$58 ]
Added variable gfx_mode::$59 to live range equivalence class [ gfx_mode::$59 ]
Added variable gfx_mode::$60 to live range equivalence class [ gfx_mode::$60 ]
Added variable gfx_mode::$61 to live range equivalence class [ gfx_mode::$61 ]
Added variable gfx_mode::$62 to live range equivalence class [ gfx_mode::$62 ]
Added variable keyboard_event_get::return#3 to live range equivalence class [ keyboard_event_get::return#3 ]
Added variable gfx_mode::keyboard_event#0 to live range equivalence class [ gfx_mode::keyboard_event#0 ]
Added variable keyboard_matrix_read::rowid#0 to live range equivalence class [ keyboard_matrix_read::rowid#0 ]
Added variable keyboard_matrix_read::return#2 to live range equivalence class [ keyboard_matrix_read::return#2 ]
Added variable keyboard_event_scan::row_scan#0 to live range equivalence class [ keyboard_event_scan::row_scan#0 ]
Added variable keyboard_event_pressed::return#0 to live range equivalence class [ keyboard_event_pressed::return#0 ]
Added variable keyboard_event_scan::$0 to live range equivalence class [ keyboard_event_scan::$0 ]
Added variable keyboard_event_pressed::return#1 to live range equivalence class [ keyboard_event_pressed::return#1 ]
Added variable keyboard_event_scan::$3 to live range equivalence class [ keyboard_event_scan::$3 ]
Added variable keyboard_event_pressed::return#2 to live range equivalence class [ keyboard_event_pressed::return#2 ]
Added variable keyboard_event_scan::$6 to live range equivalence class [ keyboard_event_scan::$6 ]
Added variable keyboard_event_pressed::return#3 to live range equivalence class [ keyboard_event_pressed::return#3 ]
Added variable keyboard_event_scan::$9 to live range equivalence class [ keyboard_event_scan::$9 ]
Added variable keyboard_event_scan::$15 to live range equivalence class [ keyboard_event_scan::$15 ]
Added variable keyboard_event_scan::$16 to live range equivalence class [ keyboard_event_scan::$16 ]
Added variable keyboard_event_scan::event_type#0 to live range equivalence class [ keyboard_event_scan::event_type#0 ]
Added variable keyboard_event_scan::$23 to live range equivalence class [ keyboard_event_scan::$23 ]
Added variable keyboard_event_pressed::$0 to live range equivalence class [ keyboard_event_pressed::$0 ]
Added variable keyboard_event_pressed::row_bits#0 to live range equivalence class [ keyboard_event_pressed::row_bits#0 ]
Added variable keyboard_event_pressed::$1 to live range equivalence class [ keyboard_event_pressed::$1 ]
Added variable keyboard_event_pressed::return#10 to live range equivalence class [ keyboard_event_pressed::return#10 ]
Added variable keyboard_matrix_read::return#0 to live range equivalence class [ keyboard_matrix_read::return#0 ]
Added variable form_control::return#0 to live range equivalence class [ form_control::return#0 ]
Added variable form_mode::$11 to live range equivalence class [ form_mode::$11 ]
Added variable apply_preset::idx#0 to live range equivalence class [ apply_preset::idx#0 ]
Added variable form_field_ptr::y#0 to live range equivalence class [ form_field_ptr::y#0 ]
Added variable form_field_ptr::line#0 to live range equivalence class [ form_field_ptr::line#0 ]
Added variable form_field_ptr::x#0 to live range equivalence class [ form_field_ptr::x#0 ]
Added variable form_field_ptr::return#0 to live range equivalence class [ form_field_ptr::return#0 ]
Added variable form_field_ptr::return#3 to live range equivalence class [ form_field_ptr::return#3 ]
Added variable form_control::field#0 to live range equivalence class [ form_control::field#0 ]
Added variable form_control::$12 to live range equivalence class [ form_control::$12 ]
Added variable keyboard_event_get::return#4 to live range equivalence class [ keyboard_event_get::return#4 ]
Added variable form_control::key_event#0 to live range equivalence class [ form_control::key_event#0 ]
Added variable form_control::$14 to live range equivalence class [ form_control::$14 ]
Added variable form_control::$15 to live range equivalence class [ form_control::$15 ]
Added variable form_control::$22 to live range equivalence class [ form_control::$22 ]
Added variable form_control::$13 to live range equivalence class [ form_control::$13 ]
Added variable form_set_screen::$0 to live range equivalence class [ form_set_screen::$0 ]
Added variable form_set_screen::$1 to live range equivalence class [ form_set_screen::$1 ]
Added variable print_str_lines::ch#0 to live range equivalence class [ print_str_lines::ch#0 ]
Added variable print_char::ch#0 to live range equivalence class [ print_char::ch#0 ]
Added variable memset::str#0 to live range equivalence class [ memset::str#0 ]
Added variable memset::end#0 to live range equivalence class [ memset::end#0 ]
Added variable gfx_init_plane_fill::$0 to live range equivalence class [ gfx_init_plane_fill::$0 ]
Added variable gfx_init_plane_fill::$1 to live range equivalence class [ gfx_init_plane_fill::$1 ]
Added variable gfx_init_plane_fill::gfxbCpuBank#0 to live range equivalence class [ gfx_init_plane_fill::gfxbCpuBank#0 ]
Added variable gfx_init_plane_fill::$4 to live range equivalence class [ gfx_init_plane_fill::$4 ]
Added variable gfx_init_plane_fill::$5 to live range equivalence class [ gfx_init_plane_fill::$5 ]
Added variable gfx_init_plane_fill::gfxb#0 to live range equivalence class [ gfx_init_plane_fill::gfxb#0 ]
Added variable gfx_init_plane_horisontal2::$2 to live range equivalence class [ gfx_init_plane_horisontal2::$2 ]
Added variable gfx_init_plane_horisontal2::row#0 to live range equivalence class [ gfx_init_plane_horisontal2::row#0 ]
Added variable gfx_init_plane_horisontal::$2 to live range equivalence class [ gfx_init_plane_horisontal::$2 ]
Added variable gfx_init_plane_charset8::$2 to live range equivalence class [ gfx_init_plane_charset8::$2 ]
Added variable gfx_init_plane_8bppchunky::$5 to live range equivalence class [ gfx_init_plane_8bppchunky::$5 ]
Added variable gfx_init_plane_8bppchunky::c#0 to live range equivalence class [ gfx_init_plane_8bppchunky::c#0 ]
Added variable bitmap_line::x0#0 to live range equivalence class [ bitmap_line::x0#0 ]
Added variable bitmap_line::x1#0 to live range equivalence class [ bitmap_line::x1#0 ]
Added variable bitmap_line::y0#0 to live range equivalence class [ bitmap_line::y0#0 ]
Added variable bitmap_line::y1#0 to live range equivalence class [ bitmap_line::y1#0 ]
Added variable bitmap_line::xd#2 to live range equivalence class [ bitmap_line::xd#2 ]
Added variable bitmap_line::yd#2 to live range equivalence class [ bitmap_line::yd#2 ]
Added variable bitmap_line::yd#1 to live range equivalence class [ bitmap_line::yd#1 ]
Added variable bitmap_line::xd#1 to live range equivalence class [ bitmap_line::xd#1 ]
Added variable bitmap_line::yd#10 to live range equivalence class [ bitmap_line::yd#10 ]
Added variable bitmap_line::yd#11 to live range equivalence class [ bitmap_line::yd#11 ]
Added variable bitmap_line_xdyi::$6 to live range equivalence class [ bitmap_line_xdyi::$6 ]
Added variable bitmap_plot::plotter_x#0 to live range equivalence class [ bitmap_plot::plotter_x#0 ]
Added variable bitmap_plot::plotter_y#0 to live range equivalence class [ bitmap_plot::plotter_y#0 ]
Added variable bitmap_plot::plotter#0 to live range equivalence class [ bitmap_plot::plotter#0 ]
Added variable bitmap_plot::$1 to live range equivalence class [ bitmap_plot::$1 ]
Added variable bitmap_line_ydxi::$6 to live range equivalence class [ bitmap_line_ydxi::$6 ]
Added variable bitmap_line_xdyd::$6 to live range equivalence class [ bitmap_line_xdyd::$6 ]
Added variable bitmap_line_ydxd::$6 to live range equivalence class [ bitmap_line_ydxd::$6 ]
Added variable bitmap_clear::bitmap#0 to live range equivalence class [ bitmap_clear::bitmap#0 ]
Added variable bitmap_init::$0 to live range equivalence class [ bitmap_init::$0 ]
Added variable bitmap_init::$10 to live range equivalence class [ bitmap_init::$10 ]
Added variable bitmap_init::$7 to live range equivalence class [ bitmap_init::$7 ]
Added variable bitmap_init::$8 to live range equivalence class [ bitmap_init::$8 ]
Added variable bitmap_init::$9 to live range equivalence class [ bitmap_init::$9 ]
Added variable gfx_init_screen3::$0 to live range equivalence class [ gfx_init_screen3::$0 ]
Added variable gfx_init_screen3::$1 to live range equivalence class [ gfx_init_screen3::$1 ]
Added variable gfx_init_screen3::$2 to live range equivalence class [ gfx_init_screen3::$2 ]
Added variable gfx_init_screen3::$3 to live range equivalence class [ gfx_init_screen3::$3 ]
Added variable gfx_init_screen2::$0 to live range equivalence class [ gfx_init_screen2::$0 ]
Added variable gfx_init_screen2::col#0 to live range equivalence class [ gfx_init_screen2::col#0 ]
Added variable gfx_init_screen2::col2#0 to live range equivalence class [ gfx_init_screen2::col2#0 ]
Added variable gfx_init_screen2::$3 to live range equivalence class [ gfx_init_screen2::$3 ]
Added variable gfx_init_screen2::$4 to live range equivalence class [ gfx_init_screen2::$4 ]
Added variable gfx_init_screen1::$0 to live range equivalence class [ gfx_init_screen1::$0 ]
Added variable gfx_init_screen1::$1 to live range equivalence class [ gfx_init_screen1::$1 ]
Added variable gfx_init_screen0::$0 to live range equivalence class [ gfx_init_screen0::$0 ]
Added variable gfx_init_screen0::$1 to live range equivalence class [ gfx_init_screen0::$1 ]
Added variable gfx_init_screen0::$2 to live range equivalence class [ gfx_init_screen0::$2 ]
Added variable gfx_init_screen0::$3 to live range equivalence class [ gfx_init_screen0::$3 ]
Complete equivalence classes
[ gfx_mode::dtv_control#12 gfx_mode::dtv_control#6 gfx_mode::dtv_control#13 gfx_mode::dtv_control#5 gfx_mode::dtv_control#11 gfx_mode::dtv_control#4 gfx_mode::dtv_control#10 gfx_mode::dtv_control#3 gfx_mode::dtv_control#15 gfx_mode::dtv_control#14 gfx_mode::dtv_control#2 ]
[ gfx_mode::vic_control#4 gfx_mode::vic_control#2 gfx_mode::vic_control#5 ]
[ gfx_mode::vic_control2#2 ]
[ gfx_mode::cy#4 gfx_mode::cy#1 ]
[ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 ]
[ gfx_mode::col#2 gfx_mode::col#3 gfx_mode::col#1 ]
[ gfx_mode::cx#2 gfx_mode::cx#1 ]
[ gfx_mode::j#2 gfx_mode::j#1 ]
[ gfx_mode::i#2 gfx_mode::i#1 ]
[ keyboard_event_get::return#2 keyboard_event_get::return#1 ]
[ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ]
[ keyboard_modifiers#21 keyboard_modifiers#20 keyboard_modifiers#19 keyboard_modifiers#18 keyboard_modifiers#3 keyboard_modifiers#4 keyboard_modifiers#5 ]
[ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ]
[ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ]
[ keyboard_events_size#18 keyboard_events_size#106 keyboard_events_size#97 keyboard_events_size#47 keyboard_events_size#27 keyboard_events_size#24 keyboard_events_size#100 keyboard_events_size#4 keyboard_events_size#105 keyboard_events_size#1 keyboard_events_size#2 ]
[ keyboard_event_pressed::keycode#4 ]
[ get_vic_screen::idx#2 get_vic_screen::idx#0 get_vic_screen::idx#1 ]
[ get_vic_screen::return#5 ]
[ get_vic_charset::return#2 ]
[ get_plane::idx#10 get_plane::idx#1 get_plane::idx#0 ]
[ get_plane::return#14 ]
[ form_mode::i#2 form_mode::i#1 ]
[ form_cursor_count#21 form_cursor_count#1 form_cursor_count#16 form_cursor_count#15 form_cursor_count#5 ]
[ form_field_idx#28 form_field_idx#1 form_field_idx#18 form_field_idx#31 form_field_idx#6 form_field_idx#5 ]
[ form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 ]
[ render_preset_name::idx#10 render_preset_name::idx#0 render_preset_name::idx#1 ]
[ render_preset_name::name#13 ]
[ print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 ]
[ print_str_at::at#2 print_str_at::at#0 ]
[ form_render_values::idx#2 form_render_values::idx#1 ]
[ form_field_ptr::field_idx#2 form_field_ptr::field_idx#1 form_field_ptr::field_idx#0 ]
[ apply_preset::preset#15 ]
[ apply_preset::i#2 apply_preset::i#1 ]
[ form_control::return#2 ]
[ form_set_screen::line#2 form_set_screen::line#1 ]
[ form_set_screen::y#2 form_set_screen::y#1 ]
[ print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 ]
[ print_char_cursor#41 print_char_cursor#24 print_char_cursor#72 print_char_cursor#73 print_char_cursor#42 print_char_cursor#28 ]
[ print_line_cursor#21 print_line_cursor#2 print_set_screen::screen#2 print_line_cursor#22 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
[ gfx_init_plane_fill::plane_addr#3 ]
[ gfx_init_plane_fill::fill#6 ]
[ gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 ]
[ gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 ]
[ gfx_init_plane_fill::bx#2 gfx_init_plane_fill::bx#1 ]
[ dtvSetCpuBankSegment1::cpuBankIdx#13 dtvSetCpuBankSegment1::cpuBankIdx#1 dtvSetCpuBankSegment1::cpuBankIdx#11 ]
[ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 ]
[ gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 ]
[ gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::ax#1 ]
[ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 ]
[ gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 ]
[ gfx_init_plane_vertical::bx#2 gfx_init_plane_vertical::bx#1 ]
[ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 ]
[ gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 ]
[ gfx_init_plane_horisontal::ax#2 gfx_init_plane_horisontal::ax#1 ]
[ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ]
[ gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 ]
[ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ]
[ gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ]
[ gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 ]
[ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ]
[ gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::cp#1 ]
[ gfx_init_plane_charset8::c#2 gfx_init_plane_charset8::c#3 ]
[ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 ]
[ gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 ]
[ gfx_init_plane_8bppchunky::gfxbCpuBank#4 gfx_init_plane_8bppchunky::gfxbCpuBank#7 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::gfxbCpuBank#2 ]
[ gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::gfxb#1 ]
[ gfx_init_vic_bitmap::l#2 gfx_init_vic_bitmap::l#1 ]
[ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 ]
[ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 ]
[ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 ]
[ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 ]
[ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ]
[ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ]
[ bitmap_plot::x#4 bitmap_plot::x#1 bitmap_plot::x#0 bitmap_plot::x#3 bitmap_plot::x#2 ]
[ bitmap_plot::y#4 bitmap_plot::y#1 bitmap_plot::y#0 bitmap_plot::y#3 bitmap_plot::y#2 ]
[ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ]
[ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ]
[ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ]
[ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ]
[ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ]
[ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ]
[ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 ]
[ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 ]
[ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 ]
[ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 ]
[ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ]
[ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ]
[ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ]
[ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ]
[ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ]
[ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ]
[ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ]
[ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ]
[ bitmap_clear::y#4 bitmap_clear::y#1 ]
[ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ]
[ bitmap_clear::x#2 bitmap_clear::x#1 ]
[ bitmap_init::x#2 bitmap_init::x#1 ]
[ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
[ bitmap_init::y#2 bitmap_init::y#1 ]
[ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
[ gfx_init_charset::c#4 gfx_init_charset::c#1 ]
[ gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 ]
[ gfx_init_charset::charset#2 gfx_init_charset::charset#3 gfx_init_charset::charset#1 ]
[ gfx_init_charset::l#2 gfx_init_charset::l#1 ]
[ gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 ]
[ gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 ]
[ gfx_init_screen4::cx#2 gfx_init_screen4::cx#1 ]
[ gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 ]
[ gfx_init_screen3::cx#2 gfx_init_screen3::cx#1 ]
[ gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 ]
[ gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 ]
[ gfx_init_screen2::cx#2 gfx_init_screen2::cx#1 ]
[ gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 ]
[ gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 ]
[ gfx_init_screen1::cx#2 gfx_init_screen1::cx#1 ]
[ gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 ]
[ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ]
[ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ]
[ gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 ]
[ gfx_mode::$18 ]
[ gfx_mode::plane_a_offs#0 ]
[ get_plane::return#16 ]
[ gfx_mode::$20 ]
[ gfx_mode::plane_a#0 ]
[ gfx_mode::$24 ]
[ gfx_mode::$23 ]
[ gfx_mode::$25 ]
[ gfx_mode::$26 ]
[ gfx_mode::$27 ]
[ gfx_mode::$28 ]
[ gfx_mode::$29 ]
[ gfx_mode::$30 ]
[ gfx_mode::$31 ]
[ gfx_mode::$32 ]
[ gfx_mode::plane_b_offs#0 ]
[ get_plane::return#17 ]
[ gfx_mode::$34 ]
[ gfx_mode::plane_b#0 ]
[ gfx_mode::$38 ]
[ gfx_mode::$37 ]
[ gfx_mode::$39 ]
[ gfx_mode::$40 ]
[ gfx_mode::$41 ]
[ gfx_mode::$42 ]
[ gfx_mode::$43 ]
[ gfx_mode::$44 ]
[ gfx_mode::$45 ]
[ get_vic_screen::return#10 ]
[ gfx_mode::$82 ]
[ gfx_mode::$47 ]
[ gfx_mode::$48 ]
[ get_vic_charset::idx#0 ]
[ get_vic_charset::return#4 ]
[ gfx_mode::$83 ]
[ gfx_mode::$50 ]
[ gfx_mode::$51 ]
[ gfx_mode::$52 ]
[ gfx_mode::$84 ]
[ gfx_mode::$53 ]
[ get_vic_screen::return#11 ]
[ gfx_mode::$55 ]
[ gfx_mode::$56 ]
[ gfx_mode::$57 ]
[ gfx_mode::$58 ]
[ gfx_mode::$59 ]
[ gfx_mode::$60 ]
[ gfx_mode::$61 ]
[ gfx_mode::$62 ]
[ keyboard_event_get::return#3 ]
[ gfx_mode::keyboard_event#0 ]
[ keyboard_matrix_read::rowid#0 ]
[ keyboard_matrix_read::return#2 ]
[ keyboard_event_scan::row_scan#0 ]
[ keyboard_event_pressed::return#0 ]
[ keyboard_event_scan::$0 ]
[ keyboard_event_pressed::return#1 ]
[ keyboard_event_scan::$3 ]
[ keyboard_event_pressed::return#2 ]
[ keyboard_event_scan::$6 ]
[ keyboard_event_pressed::return#3 ]
[ keyboard_event_scan::$9 ]
[ keyboard_event_scan::$15 ]
[ keyboard_event_scan::$16 ]
[ keyboard_event_scan::event_type#0 ]
[ keyboard_event_scan::$23 ]
[ keyboard_event_pressed::$0 ]
[ keyboard_event_pressed::row_bits#0 ]
[ keyboard_event_pressed::$1 ]
[ keyboard_event_pressed::return#10 ]
[ keyboard_matrix_read::return#0 ]
[ form_control::return#0 ]
[ form_mode::$11 ]
[ apply_preset::idx#0 ]
[ form_field_ptr::y#0 ]
[ form_field_ptr::line#0 ]
[ form_field_ptr::x#0 ]
[ form_field_ptr::return#0 ]
[ form_field_ptr::return#3 ]
[ form_control::field#0 ]
[ form_control::$12 ]
[ keyboard_event_get::return#4 ]
[ form_control::key_event#0 ]
[ form_control::$14 ]
[ form_control::$15 ]
[ form_control::$22 ]
[ form_control::$13 ]
[ form_set_screen::$0 ]
[ form_set_screen::$1 ]
[ print_str_lines::ch#0 ]
[ print_char::ch#0 ]
[ memset::str#0 ]
[ memset::end#0 ]
[ gfx_init_plane_fill::$0 ]
[ gfx_init_plane_fill::$1 ]
[ gfx_init_plane_fill::gfxbCpuBank#0 ]
[ gfx_init_plane_fill::$4 ]
[ gfx_init_plane_fill::$5 ]
[ gfx_init_plane_fill::gfxb#0 ]
[ gfx_init_plane_horisontal2::$2 ]
[ gfx_init_plane_horisontal2::row#0 ]
[ gfx_init_plane_horisontal::$2 ]
[ gfx_init_plane_charset8::$2 ]
[ gfx_init_plane_8bppchunky::$5 ]
[ gfx_init_plane_8bppchunky::c#0 ]
[ bitmap_line::x0#0 ]
[ bitmap_line::x1#0 ]
[ bitmap_line::y0#0 ]
[ bitmap_line::y1#0 ]
[ bitmap_line::xd#2 ]
[ bitmap_line::yd#2 ]
[ bitmap_line::yd#1 ]
[ bitmap_line::xd#1 ]
[ bitmap_line::yd#10 ]
[ bitmap_line::yd#11 ]
[ bitmap_line_xdyi::$6 ]
[ bitmap_plot::plotter_x#0 ]
[ bitmap_plot::plotter_y#0 ]
[ bitmap_plot::plotter#0 ]
[ bitmap_plot::$1 ]
[ bitmap_line_ydxi::$6 ]
[ bitmap_line_xdyd::$6 ]
[ bitmap_line_ydxd::$6 ]
[ bitmap_clear::bitmap#0 ]
[ bitmap_init::$0 ]
[ bitmap_init::$10 ]
[ bitmap_init::$7 ]
[ bitmap_init::$8 ]
[ bitmap_init::$9 ]
[ gfx_init_screen3::$0 ]
[ gfx_init_screen3::$1 ]
[ gfx_init_screen3::$2 ]
[ gfx_init_screen3::$3 ]
[ gfx_init_screen2::$0 ]
[ gfx_init_screen2::col#0 ]
[ gfx_init_screen2::col2#0 ]
[ gfx_init_screen2::$3 ]
[ gfx_init_screen2::$4 ]
[ gfx_init_screen1::$0 ]
[ gfx_init_screen1::$1 ]
[ gfx_init_screen0::$0 ]
[ gfx_init_screen0::$1 ]
[ gfx_init_screen0::$2 ]
[ gfx_init_screen0::$3 ]
Allocated zp[1]:2 [ gfx_mode::dtv_control#12 gfx_mode::dtv_control#6 gfx_mode::dtv_control#13 gfx_mode::dtv_control#5 gfx_mode::dtv_control#11 gfx_mode::dtv_control#4 gfx_mode::dtv_control#10 gfx_mode::dtv_control#3 gfx_mode::dtv_control#15 gfx_mode::dtv_control#14 gfx_mode::dtv_control#2 ]
Allocated zp[1]:3 [ gfx_mode::vic_control#4 gfx_mode::vic_control#2 gfx_mode::vic_control#5 ]
Allocated zp[1]:4 [ gfx_mode::vic_control2#2 ]
Allocated zp[1]:5 [ gfx_mode::cy#4 gfx_mode::cy#1 ]
Allocated zp[2]:6 [ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 ]
Allocated zp[2]:8 [ gfx_mode::col#2 gfx_mode::col#3 gfx_mode::col#1 ]
Allocated zp[1]:10 [ gfx_mode::cx#2 gfx_mode::cx#1 ]
Allocated zp[1]:11 [ gfx_mode::j#2 gfx_mode::j#1 ]
Allocated zp[1]:12 [ gfx_mode::i#2 gfx_mode::i#1 ]
Allocated zp[1]:13 [ keyboard_event_get::return#2 keyboard_event_get::return#1 ]
Allocated zp[1]:14 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ]
Allocated zp[1]:15 [ keyboard_modifiers#21 keyboard_modifiers#20 keyboard_modifiers#19 keyboard_modifiers#18 keyboard_modifiers#3 keyboard_modifiers#4 keyboard_modifiers#5 ]
Allocated zp[1]:16 [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ]
Allocated zp[1]:17 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ]
Allocated zp[1]:18 [ keyboard_events_size#18 keyboard_events_size#106 keyboard_events_size#97 keyboard_events_size#47 keyboard_events_size#27 keyboard_events_size#24 keyboard_events_size#100 keyboard_events_size#4 keyboard_events_size#105 keyboard_events_size#1 keyboard_events_size#2 ]
Allocated zp[1]:19 [ keyboard_event_pressed::keycode#4 ]
Allocated zp[1]:20 [ get_vic_screen::idx#2 get_vic_screen::idx#0 get_vic_screen::idx#1 ]
Allocated zp[2]:21 [ get_vic_screen::return#5 ]
Allocated zp[2]:23 [ get_vic_charset::return#2 ]
Allocated zp[1]:25 [ get_plane::idx#10 get_plane::idx#1 get_plane::idx#0 ]
Allocated zp[4]:26 [ get_plane::return#14 ]
Allocated zp[1]:30 [ form_mode::i#2 form_mode::i#1 ]
Allocated zp[1]:31 [ form_cursor_count#21 form_cursor_count#1 form_cursor_count#16 form_cursor_count#15 form_cursor_count#5 ]
Allocated zp[1]:32 [ form_field_idx#28 form_field_idx#1 form_field_idx#18 form_field_idx#31 form_field_idx#6 form_field_idx#5 ]
Allocated zp[1]:33 [ form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 ]
Allocated zp[1]:34 [ render_preset_name::idx#10 render_preset_name::idx#0 render_preset_name::idx#1 ]
Allocated zp[2]:35 [ render_preset_name::name#13 ]
Allocated zp[2]:37 [ print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 ]
Allocated zp[2]:39 [ print_str_at::at#2 print_str_at::at#0 ]
Allocated zp[1]:41 [ form_render_values::idx#2 form_render_values::idx#1 ]
Allocated zp[1]:42 [ form_field_ptr::field_idx#2 form_field_ptr::field_idx#1 form_field_ptr::field_idx#0 ]
Allocated zp[2]:43 [ apply_preset::preset#15 ]
Allocated zp[1]:45 [ apply_preset::i#2 apply_preset::i#1 ]
Allocated zp[1]:46 [ form_control::return#2 ]
Allocated zp[2]:47 [ form_set_screen::line#2 form_set_screen::line#1 ]
Allocated zp[1]:49 [ form_set_screen::y#2 form_set_screen::y#1 ]
Allocated zp[2]:50 [ print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 ]
Allocated zp[2]:52 [ print_char_cursor#41 print_char_cursor#24 print_char_cursor#72 print_char_cursor#73 print_char_cursor#42 print_char_cursor#28 ]
Allocated zp[2]:54 [ print_line_cursor#21 print_line_cursor#2 print_set_screen::screen#2 print_line_cursor#22 ]
Allocated zp[2]:56 [ memset::dst#2 memset::dst#4 memset::dst#1 ]
Allocated zp[4]:58 [ gfx_init_plane_fill::plane_addr#3 ]
Allocated zp[1]:62 [ gfx_init_plane_fill::fill#6 ]
Allocated zp[1]:63 [ gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 ]
Allocated zp[2]:64 [ gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 ]
Allocated zp[1]:66 [ gfx_init_plane_fill::bx#2 gfx_init_plane_fill::bx#1 ]
Allocated zp[1]:67 [ dtvSetCpuBankSegment1::cpuBankIdx#13 dtvSetCpuBankSegment1::cpuBankIdx#1 dtvSetCpuBankSegment1::cpuBankIdx#11 ]
Allocated zp[1]:68 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 ]
Allocated zp[2]:69 [ gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 ]
Allocated zp[1]:71 [ gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::ax#1 ]
Allocated zp[1]:72 [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 ]
Allocated zp[2]:73 [ gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 ]
Allocated zp[1]:75 [ gfx_init_plane_vertical::bx#2 gfx_init_plane_vertical::bx#1 ]
Allocated zp[1]:76 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 ]
Allocated zp[2]:77 [ gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 ]
Allocated zp[1]:79 [ gfx_init_plane_horisontal::ax#2 gfx_init_plane_horisontal::ax#1 ]
Allocated zp[1]:80 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ]
Allocated zp[2]:81 [ gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 ]
Allocated zp[1]:83 [ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ]
Allocated zp[1]:84 [ gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ]
Allocated zp[2]:85 [ gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 ]
Allocated zp[1]:87 [ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ]
Allocated zp[1]:88 [ gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::cp#1 ]
Allocated zp[1]:89 [ gfx_init_plane_charset8::c#2 gfx_init_plane_charset8::c#3 ]
Allocated zp[1]:90 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 ]
Allocated zp[2]:91 [ gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 ]
Allocated zp[1]:93 [ gfx_init_plane_8bppchunky::gfxbCpuBank#4 gfx_init_plane_8bppchunky::gfxbCpuBank#7 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::gfxbCpuBank#2 ]
Allocated zp[2]:94 [ gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::gfxb#1 ]
Allocated zp[1]:96 [ gfx_init_vic_bitmap::l#2 gfx_init_vic_bitmap::l#1 ]
Allocated zp[1]:97 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 ]
Allocated zp[1]:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 ]
Allocated zp[1]:99 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 ]
Allocated zp[1]:100 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 ]
Allocated zp[1]:101 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ]
Allocated zp[1]:102 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ]
Allocated zp[1]:103 [ bitmap_plot::x#4 bitmap_plot::x#1 bitmap_plot::x#0 bitmap_plot::x#3 bitmap_plot::x#2 ]
Allocated zp[1]:104 [ bitmap_plot::y#4 bitmap_plot::y#1 bitmap_plot::y#0 bitmap_plot::y#3 bitmap_plot::y#2 ]
Allocated zp[1]:105 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ]
Allocated zp[1]:106 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ]
Allocated zp[1]:107 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ]
Allocated zp[1]:108 [ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ]
Allocated zp[1]:109 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ]
Allocated zp[1]:110 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ]
Allocated zp[1]:111 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 ]
Allocated zp[1]:112 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 ]
Allocated zp[1]:113 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 ]
Allocated zp[1]:114 [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 ]
Allocated zp[1]:115 [ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ]
Allocated zp[1]:116 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ]
Allocated zp[1]:117 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ]
Allocated zp[1]:118 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ]
Allocated zp[1]:119 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ]
Allocated zp[1]:120 [ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ]
Allocated zp[1]:121 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ]
Allocated zp[1]:122 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ]
Allocated zp[1]:123 [ bitmap_clear::y#4 bitmap_clear::y#1 ]
Allocated zp[2]:124 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ]
Allocated zp[1]:126 [ bitmap_clear::x#2 bitmap_clear::x#1 ]
Allocated zp[1]:127 [ bitmap_init::x#2 bitmap_init::x#1 ]
Allocated zp[1]:128 [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
Allocated zp[1]:129 [ bitmap_init::y#2 bitmap_init::y#1 ]
Allocated zp[2]:130 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
Allocated zp[1]:132 [ gfx_init_charset::c#4 gfx_init_charset::c#1 ]
Allocated zp[2]:133 [ gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 ]
Allocated zp[2]:135 [ gfx_init_charset::charset#2 gfx_init_charset::charset#3 gfx_init_charset::charset#1 ]
Allocated zp[1]:137 [ gfx_init_charset::l#2 gfx_init_charset::l#1 ]
Allocated zp[1]:138 [ gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 ]
Allocated zp[2]:139 [ gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 ]
Allocated zp[1]:141 [ gfx_init_screen4::cx#2 gfx_init_screen4::cx#1 ]
Allocated zp[1]:142 [ gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 ]
Allocated zp[1]:143 [ gfx_init_screen3::cx#2 gfx_init_screen3::cx#1 ]
Allocated zp[2]:144 [ gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 ]
Allocated zp[1]:146 [ gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 ]
Allocated zp[1]:147 [ gfx_init_screen2::cx#2 gfx_init_screen2::cx#1 ]
Allocated zp[2]:148 [ gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 ]
Allocated zp[1]:150 [ gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 ]
Allocated zp[1]:151 [ gfx_init_screen1::cx#2 gfx_init_screen1::cx#1 ]
Allocated zp[2]:152 [ gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 ]
Allocated zp[1]:154 [ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ]
Allocated zp[1]:155 [ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ]
Allocated zp[2]:156 [ gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 ]
Allocated zp[1]:158 [ gfx_mode::$18 ]
Allocated zp[1]:159 [ gfx_mode::plane_a_offs#0 ]
Allocated zp[4]:160 [ get_plane::return#16 ]
Allocated zp[4]:164 [ gfx_mode::$20 ]
Allocated zp[4]:168 [ gfx_mode::plane_a#0 ]
Allocated zp[2]:172 [ gfx_mode::$24 ]
Allocated zp[1]:174 [ gfx_mode::$23 ]
Allocated zp[1]:175 [ gfx_mode::$25 ]
Allocated zp[2]:176 [ gfx_mode::$26 ]
Allocated zp[1]:178 [ gfx_mode::$27 ]
Allocated zp[1]:179 [ gfx_mode::$28 ]
Allocated zp[1]:180 [ gfx_mode::$29 ]
Allocated zp[1]:181 [ gfx_mode::$30 ]
Allocated zp[1]:182 [ gfx_mode::$31 ]
Allocated zp[1]:183 [ gfx_mode::$32 ]
Allocated zp[1]:184 [ gfx_mode::plane_b_offs#0 ]
Allocated zp[4]:185 [ get_plane::return#17 ]
Allocated zp[4]:189 [ gfx_mode::$34 ]
Allocated zp[4]:193 [ gfx_mode::plane_b#0 ]
Allocated zp[2]:197 [ gfx_mode::$38 ]
Allocated zp[1]:199 [ gfx_mode::$37 ]
Allocated zp[1]:200 [ gfx_mode::$39 ]
Allocated zp[2]:201 [ gfx_mode::$40 ]
Allocated zp[1]:203 [ gfx_mode::$41 ]
Allocated zp[1]:204 [ gfx_mode::$42 ]
Allocated zp[1]:205 [ gfx_mode::$43 ]
Allocated zp[1]:206 [ gfx_mode::$44 ]
Allocated zp[1]:207 [ gfx_mode::$45 ]
Allocated zp[2]:208 [ get_vic_screen::return#10 ]
Allocated zp[2]:210 [ gfx_mode::$82 ]
Allocated zp[2]:212 [ gfx_mode::$47 ]
Allocated zp[2]:214 [ gfx_mode::$48 ]
Allocated zp[1]:216 [ get_vic_charset::idx#0 ]
Allocated zp[2]:217 [ get_vic_charset::return#4 ]
Allocated zp[2]:219 [ gfx_mode::$83 ]
Allocated zp[2]:221 [ gfx_mode::$50 ]
Allocated zp[1]:223 [ gfx_mode::$51 ]
Allocated zp[1]:224 [ gfx_mode::$52 ]
Allocated zp[1]:225 [ gfx_mode::$84 ]
Allocated zp[1]:226 [ gfx_mode::$53 ]
Allocated zp[2]:227 [ get_vic_screen::return#11 ]
Allocated zp[1]:229 [ gfx_mode::$55 ]
Allocated zp[1]:230 [ gfx_mode::$56 ]
Allocated zp[1]:231 [ gfx_mode::$57 ]
Allocated zp[1]:232 [ gfx_mode::$58 ]
Allocated zp[1]:233 [ gfx_mode::$59 ]
Allocated zp[1]:234 [ gfx_mode::$60 ]
Allocated zp[1]:235 [ gfx_mode::$61 ]
Allocated zp[1]:236 [ gfx_mode::$62 ]
Allocated zp[1]:237 [ keyboard_event_get::return#3 ]
Allocated zp[1]:238 [ gfx_mode::keyboard_event#0 ]
Allocated zp[1]:239 [ keyboard_matrix_read::rowid#0 ]
Allocated zp[1]:240 [ keyboard_matrix_read::return#2 ]
Allocated zp[1]:241 [ keyboard_event_scan::row_scan#0 ]
Allocated zp[1]:242 [ keyboard_event_pressed::return#0 ]
Allocated zp[1]:243 [ keyboard_event_scan::$0 ]
Allocated zp[1]:244 [ keyboard_event_pressed::return#1 ]
Allocated zp[1]:245 [ keyboard_event_scan::$3 ]
Allocated zp[1]:246 [ keyboard_event_pressed::return#2 ]
Allocated zp[1]:247 [ keyboard_event_scan::$6 ]
Allocated zp[1]:248 [ keyboard_event_pressed::return#3 ]
Allocated zp[1]:249 [ keyboard_event_scan::$9 ]
Allocated zp[1]:250 [ keyboard_event_scan::$15 ]
Allocated zp[1]:251 [ keyboard_event_scan::$16 ]
Allocated zp[1]:252 [ keyboard_event_scan::event_type#0 ]
Allocated zp[1]:253 [ keyboard_event_scan::$23 ]
Allocated zp[1]:254 [ keyboard_event_pressed::$0 ]
Allocated zp[1]:255 [ keyboard_event_pressed::row_bits#0 ]
Allocated zp[1]:256 [ keyboard_event_pressed::$1 ]
Allocated zp[1]:257 [ keyboard_event_pressed::return#10 ]
Allocated zp[1]:258 [ keyboard_matrix_read::return#0 ]
Allocated zp[1]:259 [ form_control::return#0 ]
Allocated zp[1]:260 [ form_mode::$11 ]
Allocated zp[1]:261 [ apply_preset::idx#0 ]
Allocated zp[1]:262 [ form_field_ptr::y#0 ]
Allocated zp[2]:263 [ form_field_ptr::line#0 ]
Allocated zp[1]:265 [ form_field_ptr::x#0 ]
Allocated zp[2]:266 [ form_field_ptr::return#0 ]
Allocated zp[2]:268 [ form_field_ptr::return#3 ]
Allocated zp[2]:270 [ form_control::field#0 ]
Allocated zp[1]:272 [ form_control::$12 ]
Allocated zp[1]:273 [ keyboard_event_get::return#4 ]
Allocated zp[1]:274 [ form_control::key_event#0 ]
Allocated zp[1]:275 [ form_control::$14 ]
Allocated zp[1]:276 [ form_control::$15 ]
Allocated zp[1]:277 [ form_control::$22 ]
Allocated zp[1]:278 [ form_control::$13 ]
Allocated zp[1]:279 [ form_set_screen::$0 ]
Allocated zp[1]:280 [ form_set_screen::$1 ]
Allocated zp[1]:281 [ print_str_lines::ch#0 ]
Allocated zp[1]:282 [ print_char::ch#0 ]
Allocated zp[2]:283 [ memset::str#0 ]
Allocated zp[2]:285 [ memset::end#0 ]
Allocated zp[4]:287 [ gfx_init_plane_fill::$0 ]
Allocated zp[2]:291 [ gfx_init_plane_fill::$1 ]
Allocated zp[1]:293 [ gfx_init_plane_fill::gfxbCpuBank#0 ]
Allocated zp[2]:294 [ gfx_init_plane_fill::$4 ]
Allocated zp[2]:296 [ gfx_init_plane_fill::$5 ]
Allocated zp[2]:298 [ gfx_init_plane_fill::gfxb#0 ]
Allocated zp[1]:300 [ gfx_init_plane_horisontal2::$2 ]
Allocated zp[1]:301 [ gfx_init_plane_horisontal2::row#0 ]
Allocated zp[1]:302 [ gfx_init_plane_horisontal::$2 ]
Allocated zp[1]:303 [ gfx_init_plane_charset8::$2 ]
Allocated zp[2]:304 [ gfx_init_plane_8bppchunky::$5 ]
Allocated zp[1]:306 [ gfx_init_plane_8bppchunky::c#0 ]
Allocated zp[1]:307 [ bitmap_line::x0#0 ]
Allocated zp[1]:308 [ bitmap_line::x1#0 ]
Allocated zp[1]:309 [ bitmap_line::y0#0 ]
Allocated zp[1]:310 [ bitmap_line::y1#0 ]
Allocated zp[1]:311 [ bitmap_line::xd#2 ]
Allocated zp[1]:312 [ bitmap_line::yd#2 ]
Allocated zp[1]:313 [ bitmap_line::yd#1 ]
Allocated zp[1]:314 [ bitmap_line::xd#1 ]
Allocated zp[1]:315 [ bitmap_line::yd#10 ]
Allocated zp[1]:316 [ bitmap_line::yd#11 ]
Allocated zp[1]:317 [ bitmap_line_xdyi::$6 ]
Allocated zp[2]:318 [ bitmap_plot::plotter_x#0 ]
Allocated zp[2]:320 [ bitmap_plot::plotter_y#0 ]
Allocated zp[2]:322 [ bitmap_plot::plotter#0 ]
Allocated zp[1]:324 [ bitmap_plot::$1 ]
Allocated zp[1]:325 [ bitmap_line_ydxi::$6 ]
Allocated zp[1]:326 [ bitmap_line_xdyd::$6 ]
Allocated zp[1]:327 [ bitmap_line_ydxd::$6 ]
Allocated zp[2]:328 [ bitmap_clear::bitmap#0 ]
Allocated zp[1]:330 [ bitmap_init::$0 ]
Allocated zp[1]:331 [ bitmap_init::$10 ]
Allocated zp[1]:332 [ bitmap_init::$7 ]
Allocated zp[1]:333 [ bitmap_init::$8 ]
Allocated zp[1]:334 [ bitmap_init::$9 ]
Allocated zp[1]:335 [ gfx_init_screen3::$0 ]
Allocated zp[1]:336 [ gfx_init_screen3::$1 ]
Allocated zp[1]:337 [ gfx_init_screen3::$2 ]
Allocated zp[1]:338 [ gfx_init_screen3::$3 ]
Allocated zp[1]:339 [ gfx_init_screen2::$0 ]
Allocated zp[1]:340 [ gfx_init_screen2::col#0 ]
Allocated zp[1]:341 [ gfx_init_screen2::col2#0 ]
Allocated zp[1]:342 [ gfx_init_screen2::$3 ]
Allocated zp[1]:343 [ gfx_init_screen2::$4 ]
Allocated zp[1]:344 [ gfx_init_screen1::$0 ]
Allocated zp[1]:345 [ gfx_init_screen1::$1 ]
Allocated zp[1]:346 [ gfx_init_screen0::$0 ]
Allocated zp[1]:347 [ gfx_init_screen0::$1 ]
Allocated zp[1]:348 [ gfx_init_screen0::$2 ]
Allocated zp[1]:349 [ gfx_init_screen0::$3 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Interactive Explorer for C64DTV Screen Modes
// C64 DTV version 2 Registers and Constants
//
// Sources
// (J) https://www.c64-wiki.com/wiki/C64DTV_Programming_Guide
// (H) http://dtvhacking.cbm8bit.com/dtv_wiki/images/d/d9/Dtv_registers_full.txt
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const VIC_ECM = $40
  .const VIC_BMM = $20
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  .const VIC_MCM = $10
  .const VIC_CSEL = 8
  // Mask for PROCESSOR_PORT_DDR which allows only memory configuration to be written
  .const PROCPORT_DDR_MEMORY_MASK = 7
  // RAM in 0xA000, 0xE000 I/O in 0xD000
  .const PROCPORT_RAM_IO = 5
  // RAM in 0xA000, 0xE000 CHAR ROM in 0xD000
  .const PROCPORT_RAM_CHARROM = 1
  .const DTV_FEATURE_ENABLE = 1
  .const DTV_LINEAR = 1
  .const DTV_BORDER_OFF = 2
  .const DTV_HIGHCOLOR = 4
  .const DTV_OVERSCAN = 8
  .const DTV_COLORRAM_OFF = $10
  .const DTV_CHUNKY = $40
  .const DTV_COLOR_BANK_DEFAULT = $1d800
  .const KEY_CRSR_RIGHT = 2
  .const KEY_CRSR_DOWN = 7
  .const KEY_LSHIFT = $f
  .const KEY_RSHIFT = $34
  .const KEY_CTRL = $3a
  .const KEY_SPACE = $3c
  .const KEY_COMMODORE = $3d
  // Left shift is pressed
  .const KEY_MODIFIER_LSHIFT = 1
  // Right shift is pressed
  .const KEY_MODIFIER_RSHIFT = 2
  // CTRL is pressed
  .const KEY_MODIFIER_CTRL = 4
  // Commodore is pressed
  .const KEY_MODIFIER_COMMODORE = 8
  // Any shift is pressed
  .const KEY_MODIFIER_SHIFT = KEY_MODIFIER_LSHIFT|KEY_MODIFIER_RSHIFT
  // 8BPP Chunky Bitmap (contains 8bpp pixels)
  .const PLANE_8BPP_CHUNKY = $20000
  // Plane with horisontal stripes
  .const PLANE_HORISONTAL = $30000
  // Plane with vertical stripes
  .const PLANE_VERTICAL = $32000
  // Plane with horisontal stripes every 2 pixels
  .const PLANE_HORISONTAL2 = $34000
  // Plane with vertical stripes every 2 pixels
  .const PLANE_VERTICAL2 = $36000
  // Plane with blank pixels
  .const PLANE_BLANK = $38000
  // Plane with all pixels
  .const PLANE_FULL = $3a000
  // Plane with all pixels
  .const PLANE_CHARSET8 = $3c000
  // The number of frames to use for a full blink cycle
  .const FORM_CURSOR_BLINK = $28
  .const OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR = 2
  .const OFFSET_STRUCT_MOS6526_CIA_PORT_B_DDR = 3
  .const OFFSET_STRUCT_MOS6526_CIA_PORT_B = 1
  .const OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
  .const OFFSET_STRUCT_MOS6569_VICII_BG_COLOR = $21
  .const OFFSET_STRUCT_MOS6569_VICII_BG_COLOR1 = $22
  .const OFFSET_STRUCT_MOS6569_VICII_BG_COLOR2 = $23
  .const OFFSET_STRUCT_MOS6569_VICII_BG_COLOR3 = $24
  .const OFFSET_STRUCT_MOS6569_VICII_RASTER = $12
  .const OFFSET_STRUCT_MOS6569_VICII_CONTROL1 = $11
  .const OFFSET_STRUCT_MOS6569_VICII_CONTROL2 = $16
  .const OFFSET_STRUCT_MOS6569_VICII_MEMORY = $18
  // Number of form fields
  .const form_fields_cnt = $24
  .label VIC_CONTROL = $d011
  .label VIC_CONTROL2 = $d016
  .label VIC_MEMORY = $d018
  // Processor port data direction register
  .label PROCPORT_DDR = 0
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // The address of the CHARGEN character set
  .label CHARGEN = $d000
  // The VIC-II MOS 6567/6569
  .label VICII = $d000
  // Color Ram
  .label COLS = $d800
  // The CIA#1: keyboard matrix, joystick #1/#2
  .label CIA1 = $dc00
  // The CIA#2: Serial bus, RS-232, VIC memory bank
  .label CIA2 = $dd00
  // Feature enables or disables the extra C64 DTV features
  .label DTV_FEATURE = $d03f
  // Controls the graphics modes of the C64 DTV
  .label DTV_CONTROL = $d03c
  // Defines colors for the 16 first colors ($00-$0f)
  .label DTV_PALETTE = $d200
  // Linear Graphics Plane A Counter Control
  .label DTV_PLANEA_START_LO = $d03a
  .label DTV_PLANEA_START_MI = $d03b
  .label DTV_PLANEA_START_HI = $d045
  .label DTV_PLANEA_STEP = $d046
  .label DTV_PLANEA_MODULO_LO = $d038
  .label DTV_PLANEA_MODULO_HI = $d039
  // Linear Graphics Plane B Counter Control
  .label DTV_PLANEB_START_LO = $d049
  .label DTV_PLANEB_START_MI = $d04a
  .label DTV_PLANEB_START_HI = $d04b
  .label DTV_PLANEB_STEP = $d04c
  .label DTV_PLANEB_MODULO_LO = $d047
  .label DTV_PLANEB_MODULO_HI = $d048
  // Select memory bank where color data is fetched from (bits 11:0)
  // Memory address of Color RAM is ColorBank*$400
  .label DTV_COLOR_BANK_LO = $d036
  .label DTV_COLOR_BANK_HI = $d037
  // Selects memory bank for normal VIC color mode and lower data for high color modes. (bits 5:0)
  // Memory address of VIC Graphics is GraphicsBank*$10000
  .label DTV_GRAPHICS_VIC_BANK = $d03d
  // VIC Screens
  .label VIC_SCREEN0 = $4000
  .label VIC_SCREEN1 = $4400
  .label VIC_SCREEN2 = $4800
  .label VIC_SCREEN3 = $4c00
  .label VIC_SCREEN4 = $5000
  // VIC Charset from ROM
  .label VIC_CHARSET_ROM = $5800
  // VIC Bitmap
  .label VIC_BITMAP = $6000
  // Screen containing the FORM
  .label FORM_SCREEN = $400
  // Charset used for the FORM
  .label FORM_CHARSET = $1800
  .label form_ctrl_bmm = form_fields_val+1
  .label form_ctrl_mcm = form_fields_val+2
  .label form_ctrl_ecm = form_fields_val+3
  .label form_ctrl_hicol = form_fields_val+4
  .label form_ctrl_line = form_fields_val+5
  .label form_ctrl_colof = form_fields_val+6
  .label form_ctrl_chunk = form_fields_val+7
  .label form_ctrl_borof = form_fields_val+8
  .label form_ctrl_overs = form_fields_val+9
  .label form_a_pattern = form_fields_val+$a
  .label form_a_start_hi = form_fields_val+$b
  .label form_a_start_lo = form_fields_val+$c
  .label form_a_step_hi = form_fields_val+$d
  .label form_a_step_lo = form_fields_val+$e
  .label form_a_mod_hi = form_fields_val+$f
  .label form_a_mod_lo = form_fields_val+$10
  .label form_b_pattern = form_fields_val+$11
  .label form_b_start_hi = form_fields_val+$12
  .label form_b_start_lo = form_fields_val+$13
  .label form_b_step_hi = form_fields_val+$14
  .label form_b_step_lo = form_fields_val+$15
  .label form_b_mod_hi = form_fields_val+$16
  .label form_b_mod_lo = form_fields_val+$17
  .label form_vic_screen = form_fields_val+$18
  .label form_vic_gfx = form_fields_val+$19
  .label form_vic_cols = form_fields_val+$1a
  .label form_dtv_palet = form_fields_val+$1b
  .label form_vic_bg0_hi = form_fields_val+$1c
  .label form_vic_bg0_lo = form_fields_val+$1d
  .label form_vic_bg1_hi = form_fields_val+$1e
  .label form_vic_bg1_lo = form_fields_val+$1f
  .label form_vic_bg2_hi = form_fields_val+$20
  .label form_vic_bg2_lo = form_fields_val+$21
  .label form_vic_bg3_hi = form_fields_val+$22
  .label form_vic_bg3_lo = form_fields_val+$23
  .label print_line_cursor = $36
  // Keyboard event buffer size. The number of events currently in the event buffer
  .label keyboard_events_size = $12
  // Current keyboard modifiers (left shift, right shift, ctrl, commodore)
  // Update the keyboard modifiers
  .label keyboard_modifiers = $f
  // Counts down to blink for form cursor (it is inversed in the lower half)
  // Always blink cursor in new field
  .label form_cursor_count = $1f
  // Current selected field in the form
  .label form_field_idx = $20
  .label print_char_cursor = $34
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // asm { sei  }
    sei
    // [5] *((const nomodify byte*) PROCPORT_DDR) ← (const nomodify byte) PROCPORT_DDR_MEMORY_MASK -- _deref_pbuc1=vbuc2 
    // Disable normal interrupt (prevent keyboard reading glitches and allows to hide basic/kernal)
    // Disable kernal & basic
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
    // [6] *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_RAM_IO -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
    // [7] *((const nomodify byte*) DTV_FEATURE) ← (const nomodify byte) DTV_FEATURE_ENABLE -- _deref_pbuc1=vbuc2 
    // Enable DTV extended modes
    lda #DTV_FEATURE_ENABLE
    sta DTV_FEATURE
    // [8] call keyboard_init 
    jsr keyboard_init
    // [9] phi from main to main::@3 [phi:main->main::@3]
  __b3_from_main:
    jmp __b3
    // main::@3
  __b3:
    // [10] call gfx_init 
    // [452] phi from main::@3 to gfx_init [phi:main::@3->gfx_init]
  gfx_init_from___b3:
    jsr gfx_init
    // [11] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  __b1_from___b3:
    // [11] phi (byte) form_field_idx#1 = (byte) 0 [phi:main::@3->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z form_field_idx
    // [11] phi (byte) keyboard_events_size#27 = (byte) 0 [phi:main::@3->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z keyboard_events_size
    // [11] phi (signed byte) form_cursor_count#1 = (const nomodify signed byte) FORM_CURSOR_BLINK/(signed byte) 2 [phi:main::@3->main::@1#2] -- vbsz1=vbsc1 
    lda #FORM_CURSOR_BLINK/2
    sta.z form_cursor_count
    jmp __b1
    // main::@1
  __b1:
    // [12] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [13] call form_mode 
  // Let the user change the GFX configuration
    // [252] phi from main::@2 to form_mode [phi:main::@2->form_mode]
  form_mode_from___b2:
    jsr form_mode
    // [14] phi from main::@2 to main::@4 [phi:main::@2->main::@4]
  __b4_from___b2:
    jmp __b4
    // main::@4
  __b4:
    // [15] call gfx_mode 
    // Show the GFX configuration
    jsr gfx_mode
    // [11] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
  __b1_from___b4:
    // [11] phi (byte) form_field_idx#1 = (byte) form_field_idx#18 [phi:main::@4->main::@1#0] -- register_copy 
    // [11] phi (byte) keyboard_events_size#27 = (byte) keyboard_events_size#24 [phi:main::@4->main::@1#1] -- register_copy 
    // [11] phi (signed byte) form_cursor_count#1 = (signed byte) form_cursor_count#16 [phi:main::@4->main::@1#2] -- register_copy 
    jmp __b1
}
  // gfx_mode
// Change graphics mode to show the selected graphics mode
gfx_mode: {
    .label __18 = $9e
    .label __20 = $a4
    .label __23 = $ae
    .label __24 = $ac
    .label __25 = $af
    .label __26 = $b0
    .label __27 = $b2
    .label __28 = $b3
    .label __29 = $b4
    .label __30 = $b5
    .label __31 = $b6
    .label __32 = $b7
    .label __34 = $bd
    .label __37 = $c7
    .label __38 = $c5
    .label __39 = $c8
    .label __40 = $c9
    .label __41 = $cb
    .label __42 = $cc
    .label __43 = $cd
    .label __44 = $ce
    .label __45 = $cf
    .label __47 = $d4
    .label __48 = $d6
    .label __50 = $dd
    .label __51 = $df
    .label __52 = $e0
    .label __53 = $e2
    .label __55 = $e5
    .label __56 = $e6
    .label __57 = $e7
    .label __58 = $e8
    .label __59 = $e9
    .label __60 = $ea
    .label __61 = $eb
    .label __62 = $ec
    .label __82 = $d2
    .label __83 = $db
    .label __84 = $e1
    // Show the GFX configuration
    // DTV Graphics Mode
    .label dtv_control = 2
    // VIC Graphics Mode
    .label vic_control = 3
    .label plane_a_offs = $9f
    .label plane_a = $a8
    .label plane_b_offs = $b8
    .label plane_b = $c1
    .label vic_colors = 6
    .label col = 8
    .label cx = $a
    .label cy = 5
    .label j = $b
    .label i = $c
    .label keyboard_event = $ee
    .label vic_control2 = 4
    // [16] if(*((const nomodify byte*) form_ctrl_line)==(byte) 0) goto gfx_mode::@1 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_line
    cmp #0
    beq __b1_from_gfx_mode
    // [17] phi from gfx_mode to gfx_mode::@10 [phi:gfx_mode->gfx_mode::@10]
  __b10_from_gfx_mode:
    jmp __b10
    // gfx_mode::@10
  __b10:
    // [18] phi from gfx_mode::@10 to gfx_mode::@1 [phi:gfx_mode::@10->gfx_mode::@1]
  __b1_from___b10:
    // [18] phi (byte) gfx_mode::dtv_control#14 = (const nomodify byte) DTV_LINEAR [phi:gfx_mode::@10->gfx_mode::@1#0] -- vbuz1=vbuc1 
    lda #DTV_LINEAR
    sta.z dtv_control
    jmp __b1
    // [18] phi from gfx_mode to gfx_mode::@1 [phi:gfx_mode->gfx_mode::@1]
  __b1_from_gfx_mode:
    // [18] phi (byte) gfx_mode::dtv_control#14 = (byte) 0 [phi:gfx_mode->gfx_mode::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z dtv_control
    jmp __b1
    // gfx_mode::@1
  __b1:
    // [19] if(*((const nomodify byte*) form_ctrl_borof)==(byte) 0) goto gfx_mode::@2 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_borof
    cmp #0
    beq __b2_from___b1
    jmp __b11
    // gfx_mode::@11
  __b11:
    // [20] (byte) gfx_mode::dtv_control#2 ← (byte) gfx_mode::dtv_control#14 | (const nomodify byte) DTV_BORDER_OFF -- vbuz1=vbuz1_bor_vbuc1 
    lda #DTV_BORDER_OFF
    ora.z dtv_control
    sta.z dtv_control
    // [21] phi from gfx_mode::@1 gfx_mode::@11 to gfx_mode::@2 [phi:gfx_mode::@1/gfx_mode::@11->gfx_mode::@2]
  __b2_from___b1:
  __b2_from___b11:
    // [21] phi (byte) gfx_mode::dtv_control#15 = (byte) gfx_mode::dtv_control#14 [phi:gfx_mode::@1/gfx_mode::@11->gfx_mode::@2#0] -- register_copy 
    jmp __b2
    // gfx_mode::@2
  __b2:
    // [22] if(*((const nomodify byte*) form_ctrl_hicol)==(byte) 0) goto gfx_mode::@3 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_hicol
    cmp #0
    beq __b3_from___b2
    jmp __b12
    // gfx_mode::@12
  __b12:
    // [23] (byte) gfx_mode::dtv_control#3 ← (byte) gfx_mode::dtv_control#15 | (const nomodify byte) DTV_HIGHCOLOR -- vbuz1=vbuz1_bor_vbuc1 
    lda #DTV_HIGHCOLOR
    ora.z dtv_control
    sta.z dtv_control
    // [24] phi from gfx_mode::@12 gfx_mode::@2 to gfx_mode::@3 [phi:gfx_mode::@12/gfx_mode::@2->gfx_mode::@3]
  __b3_from___b12:
  __b3_from___b2:
    // [24] phi (byte) gfx_mode::dtv_control#10 = (byte) gfx_mode::dtv_control#3 [phi:gfx_mode::@12/gfx_mode::@2->gfx_mode::@3#0] -- register_copy 
    jmp __b3
    // gfx_mode::@3
  __b3:
    // [25] if(*((const nomodify byte*) form_ctrl_overs)==(byte) 0) goto gfx_mode::@4 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_overs
    cmp #0
    beq __b4_from___b3
    jmp __b13
    // gfx_mode::@13
  __b13:
    // [26] (byte) gfx_mode::dtv_control#4 ← (byte) gfx_mode::dtv_control#10 | (const nomodify byte) DTV_OVERSCAN -- vbuz1=vbuz1_bor_vbuc1 
    lda #DTV_OVERSCAN
    ora.z dtv_control
    sta.z dtv_control
    // [27] phi from gfx_mode::@13 gfx_mode::@3 to gfx_mode::@4 [phi:gfx_mode::@13/gfx_mode::@3->gfx_mode::@4]
  __b4_from___b13:
  __b4_from___b3:
    // [27] phi (byte) gfx_mode::dtv_control#11 = (byte) gfx_mode::dtv_control#4 [phi:gfx_mode::@13/gfx_mode::@3->gfx_mode::@4#0] -- register_copy 
    jmp __b4
    // gfx_mode::@4
  __b4:
    // [28] if(*((const nomodify byte*) form_ctrl_colof)==(byte) 0) goto gfx_mode::@5 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_colof
    cmp #0
    beq __b5_from___b4
    jmp __b14
    // gfx_mode::@14
  __b14:
    // [29] (byte) gfx_mode::dtv_control#5 ← (byte) gfx_mode::dtv_control#11 | (const nomodify byte) DTV_COLORRAM_OFF -- vbuz1=vbuz1_bor_vbuc1 
    lda #DTV_COLORRAM_OFF
    ora.z dtv_control
    sta.z dtv_control
    // [30] phi from gfx_mode::@14 gfx_mode::@4 to gfx_mode::@5 [phi:gfx_mode::@14/gfx_mode::@4->gfx_mode::@5]
  __b5_from___b14:
  __b5_from___b4:
    // [30] phi (byte) gfx_mode::dtv_control#13 = (byte) gfx_mode::dtv_control#5 [phi:gfx_mode::@14/gfx_mode::@4->gfx_mode::@5#0] -- register_copy 
    jmp __b5
    // gfx_mode::@5
  __b5:
    // [31] if(*((const nomodify byte*) form_ctrl_chunk)==(byte) 0) goto gfx_mode::@6 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_chunk
    cmp #0
    beq __b6_from___b5
    jmp __b15
    // gfx_mode::@15
  __b15:
    // [32] (byte) gfx_mode::dtv_control#6 ← (byte) gfx_mode::dtv_control#13 | (const nomodify byte) DTV_CHUNKY -- vbuz1=vbuz1_bor_vbuc1 
    lda #DTV_CHUNKY
    ora.z dtv_control
    sta.z dtv_control
    // [33] phi from gfx_mode::@15 gfx_mode::@5 to gfx_mode::@6 [phi:gfx_mode::@15/gfx_mode::@5->gfx_mode::@6]
  __b6_from___b15:
  __b6_from___b5:
    // [33] phi (byte) gfx_mode::dtv_control#12 = (byte) gfx_mode::dtv_control#6 [phi:gfx_mode::@15/gfx_mode::@5->gfx_mode::@6#0] -- register_copy 
    jmp __b6
    // gfx_mode::@6
  __b6:
    // [34] *((const nomodify byte*) DTV_CONTROL) ← (byte) gfx_mode::dtv_control#12 -- _deref_pbuc1=vbuz1 
    lda.z dtv_control
    sta DTV_CONTROL
    // [35] if(*((const nomodify byte*) form_ctrl_ecm)==(byte) 0) goto gfx_mode::@7 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_ecm
    cmp #0
    beq __b7_from___b6
    // [36] phi from gfx_mode::@6 to gfx_mode::@16 [phi:gfx_mode::@6->gfx_mode::@16]
  __b16_from___b6:
    jmp __b16
    // gfx_mode::@16
  __b16:
    // [37] phi from gfx_mode::@16 to gfx_mode::@7 [phi:gfx_mode::@16->gfx_mode::@7]
  __b7_from___b16:
    // [37] phi (byte) gfx_mode::vic_control#5 = (const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(byte) 3|(const nomodify byte) VIC_ECM [phi:gfx_mode::@16->gfx_mode::@7#0] -- vbuz1=vbuc1 
    lda #VIC_DEN|VIC_RSEL|3|VIC_ECM
    sta.z vic_control
    jmp __b7
    // [37] phi from gfx_mode::@6 to gfx_mode::@7 [phi:gfx_mode::@6->gfx_mode::@7]
  __b7_from___b6:
    // [37] phi (byte) gfx_mode::vic_control#5 = (const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(byte) 3 [phi:gfx_mode::@6->gfx_mode::@7#0] -- vbuz1=vbuc1 
    lda #VIC_DEN|VIC_RSEL|3
    sta.z vic_control
    jmp __b7
    // gfx_mode::@7
  __b7:
    // [38] if(*((const nomodify byte*) form_ctrl_bmm)==(byte) 0) goto gfx_mode::@8 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_bmm
    cmp #0
    beq __b8_from___b7
    jmp __b17
    // gfx_mode::@17
  __b17:
    // [39] (byte) gfx_mode::vic_control#2 ← (byte) gfx_mode::vic_control#5 | (const nomodify byte) VIC_BMM -- vbuz1=vbuz1_bor_vbuc1 
    lda #VIC_BMM
    ora.z vic_control
    sta.z vic_control
    // [40] phi from gfx_mode::@17 gfx_mode::@7 to gfx_mode::@8 [phi:gfx_mode::@17/gfx_mode::@7->gfx_mode::@8]
  __b8_from___b17:
  __b8_from___b7:
    // [40] phi (byte) gfx_mode::vic_control#4 = (byte) gfx_mode::vic_control#2 [phi:gfx_mode::@17/gfx_mode::@7->gfx_mode::@8#0] -- register_copy 
    jmp __b8
    // gfx_mode::@8
  __b8:
    // [41] *((const nomodify byte*) VIC_CONTROL) ← (byte) gfx_mode::vic_control#4 -- _deref_pbuc1=vbuz1 
    lda.z vic_control
    sta VIC_CONTROL
    // [42] if(*((const nomodify byte*) form_ctrl_mcm)==(byte) 0) goto gfx_mode::@9 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_mcm
    cmp #0
    beq __b9_from___b8
    // [43] phi from gfx_mode::@8 to gfx_mode::@18 [phi:gfx_mode::@8->gfx_mode::@18]
  __b18_from___b8:
    jmp __b18
    // gfx_mode::@18
  __b18:
    // [44] phi from gfx_mode::@18 to gfx_mode::@9 [phi:gfx_mode::@18->gfx_mode::@9]
  __b9_from___b18:
    // [44] phi (byte) gfx_mode::vic_control2#2 = (const nomodify byte) VIC_CSEL|(const nomodify byte) VIC_MCM [phi:gfx_mode::@18->gfx_mode::@9#0] -- vbuz1=vbuc1 
    lda #VIC_CSEL|VIC_MCM
    sta.z vic_control2
    jmp __b9
    // [44] phi from gfx_mode::@8 to gfx_mode::@9 [phi:gfx_mode::@8->gfx_mode::@9]
  __b9_from___b8:
    // [44] phi (byte) gfx_mode::vic_control2#2 = (const nomodify byte) VIC_CSEL [phi:gfx_mode::@8->gfx_mode::@9#0] -- vbuz1=vbuc1 
    lda #VIC_CSEL
    sta.z vic_control2
    jmp __b9
    // gfx_mode::@9
  __b9:
    // [45] *((const nomodify byte*) VIC_CONTROL2) ← (byte) gfx_mode::vic_control2#2 -- _deref_pbuc1=vbuz1 
    lda.z vic_control2
    sta VIC_CONTROL2
    // [46] (byte~) gfx_mode::$18 ← *((const nomodify byte*) form_a_start_hi) << (byte) 4 -- vbuz1=_deref_pbuc1_rol_4 
    lda form_a_start_hi
    asl
    asl
    asl
    asl
    sta.z __18
    // [47] (byte) gfx_mode::plane_a_offs#0 ← (byte~) gfx_mode::$18 | *((const nomodify byte*) form_a_start_lo) -- vbuz1=vbuz2_bor__deref_pbuc1 
    lda form_a_start_lo
    ora.z __18
    sta.z plane_a_offs
    // [48] (byte) get_plane::idx#0 ← *((const nomodify byte*) form_a_pattern) -- vbuz1=_deref_pbuc1 
    lda form_a_pattern
    sta.z get_plane.idx
    // [49] call get_plane 
    // [234] phi from gfx_mode::@9 to get_plane [phi:gfx_mode::@9->get_plane]
  get_plane_from___b9:
    // [234] phi (byte) get_plane::idx#10 = (byte) get_plane::idx#0 [phi:gfx_mode::@9->get_plane#0] -- register_copy 
    jsr get_plane
    // [50] (dword) get_plane::return#16 ← (dword) get_plane::return#14 -- vduz1=vduz2 
    lda.z get_plane.return
    sta.z get_plane.return_1
    lda.z get_plane.return+1
    sta.z get_plane.return_1+1
    lda.z get_plane.return+2
    sta.z get_plane.return_1+2
    lda.z get_plane.return+3
    sta.z get_plane.return_1+3
    jmp __b27
    // gfx_mode::@27
  __b27:
    // [51] (dword~) gfx_mode::$20 ← (dword) get_plane::return#16 -- vduz1=vduz2 
    lda.z get_plane.return_1
    sta.z __20
    lda.z get_plane.return_1+1
    sta.z __20+1
    lda.z get_plane.return_1+2
    sta.z __20+2
    lda.z get_plane.return_1+3
    sta.z __20+3
    // [52] (dword) gfx_mode::plane_a#0 ← (dword~) gfx_mode::$20 + (byte) gfx_mode::plane_a_offs#0 -- vduz1=vduz2_plus_vbuz3 
    lda.z plane_a_offs
    clc
    adc.z __20
    sta.z plane_a
    lda.z __20+1
    adc #0
    sta.z plane_a+1
    lda.z __20+2
    adc #0
    sta.z plane_a+2
    lda.z __20+3
    adc #0
    sta.z plane_a+3
    // [53] (word~) gfx_mode::$24 ← < (dword) gfx_mode::plane_a#0 -- vwuz1=_lo_vduz2 
    lda.z plane_a
    sta.z __24
    lda.z plane_a+1
    sta.z __24+1
    // [54] (byte~) gfx_mode::$23 ← < (word~) gfx_mode::$24 -- vbuz1=_lo_vwuz2 
    lda.z __24
    sta.z __23
    // [55] *((const nomodify byte*) DTV_PLANEA_START_LO) ← (byte~) gfx_mode::$23 -- _deref_pbuc1=vbuz1 
    lda.z __23
    sta DTV_PLANEA_START_LO
    // [56] (byte~) gfx_mode::$25 ← > (word~) gfx_mode::$24 -- vbuz1=_hi_vwuz2 
    lda.z __24+1
    sta.z __25
    // [57] *((const nomodify byte*) DTV_PLANEA_START_MI) ← (byte~) gfx_mode::$25 -- _deref_pbuc1=vbuz1 
    lda.z __25
    sta DTV_PLANEA_START_MI
    // [58] (word~) gfx_mode::$26 ← > (dword) gfx_mode::plane_a#0 -- vwuz1=_hi_vduz2 
    lda.z plane_a+2
    sta.z __26
    lda.z plane_a+3
    sta.z __26+1
    // [59] (byte~) gfx_mode::$27 ← < (word~) gfx_mode::$26 -- vbuz1=_lo_vwuz2 
    lda.z __26
    sta.z __27
    // [60] *((const nomodify byte*) DTV_PLANEA_START_HI) ← (byte~) gfx_mode::$27 -- _deref_pbuc1=vbuz1 
    lda.z __27
    sta DTV_PLANEA_START_HI
    // [61] (byte~) gfx_mode::$28 ← *((const nomodify byte*) form_a_step_hi) << (byte) 4 -- vbuz1=_deref_pbuc1_rol_4 
    lda form_a_step_hi
    asl
    asl
    asl
    asl
    sta.z __28
    // [62] (byte~) gfx_mode::$29 ← (byte~) gfx_mode::$28 | *((const nomodify byte*) form_a_step_lo) -- vbuz1=vbuz2_bor__deref_pbuc1 
    lda form_a_step_lo
    ora.z __28
    sta.z __29
    // [63] *((const nomodify byte*) DTV_PLANEA_STEP) ← (byte~) gfx_mode::$29 -- _deref_pbuc1=vbuz1 
    lda.z __29
    sta DTV_PLANEA_STEP
    // [64] (byte~) gfx_mode::$30 ← *((const nomodify byte*) form_a_mod_hi) << (byte) 4 -- vbuz1=_deref_pbuc1_rol_4 
    lda form_a_mod_hi
    asl
    asl
    asl
    asl
    sta.z __30
    // [65] (byte~) gfx_mode::$31 ← (byte~) gfx_mode::$30 | *((const nomodify byte*) form_a_mod_lo) -- vbuz1=vbuz2_bor__deref_pbuc1 
    lda form_a_mod_lo
    ora.z __30
    sta.z __31
    // [66] *((const nomodify byte*) DTV_PLANEA_MODULO_LO) ← (byte~) gfx_mode::$31 -- _deref_pbuc1=vbuz1 
    lda.z __31
    sta DTV_PLANEA_MODULO_LO
    // [67] *((const nomodify byte*) DTV_PLANEA_MODULO_HI) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_HI
    // [68] (byte~) gfx_mode::$32 ← *((const nomodify byte*) form_b_start_hi) << (byte) 4 -- vbuz1=_deref_pbuc1_rol_4 
    lda form_b_start_hi
    asl
    asl
    asl
    asl
    sta.z __32
    // [69] (byte) gfx_mode::plane_b_offs#0 ← (byte~) gfx_mode::$32 | *((const nomodify byte*) form_b_start_lo) -- vbuz1=vbuz2_bor__deref_pbuc1 
    lda form_b_start_lo
    ora.z __32
    sta.z plane_b_offs
    // [70] (byte) get_plane::idx#1 ← *((const nomodify byte*) form_b_pattern) -- vbuz1=_deref_pbuc1 
    lda form_b_pattern
    sta.z get_plane.idx
    // [71] call get_plane 
    // [234] phi from gfx_mode::@27 to get_plane [phi:gfx_mode::@27->get_plane]
  get_plane_from___b27:
    // [234] phi (byte) get_plane::idx#10 = (byte) get_plane::idx#1 [phi:gfx_mode::@27->get_plane#0] -- register_copy 
    jsr get_plane
    // [72] (dword) get_plane::return#17 ← (dword) get_plane::return#14 -- vduz1=vduz2 
    lda.z get_plane.return
    sta.z get_plane.return_2
    lda.z get_plane.return+1
    sta.z get_plane.return_2+1
    lda.z get_plane.return+2
    sta.z get_plane.return_2+2
    lda.z get_plane.return+3
    sta.z get_plane.return_2+3
    jmp __b28
    // gfx_mode::@28
  __b28:
    // [73] (dword~) gfx_mode::$34 ← (dword) get_plane::return#17 -- vduz1=vduz2 
    lda.z get_plane.return_2
    sta.z __34
    lda.z get_plane.return_2+1
    sta.z __34+1
    lda.z get_plane.return_2+2
    sta.z __34+2
    lda.z get_plane.return_2+3
    sta.z __34+3
    // [74] (dword) gfx_mode::plane_b#0 ← (dword~) gfx_mode::$34 + (byte) gfx_mode::plane_b_offs#0 -- vduz1=vduz2_plus_vbuz3 
    lda.z plane_b_offs
    clc
    adc.z __34
    sta.z plane_b
    lda.z __34+1
    adc #0
    sta.z plane_b+1
    lda.z __34+2
    adc #0
    sta.z plane_b+2
    lda.z __34+3
    adc #0
    sta.z plane_b+3
    // [75] (word~) gfx_mode::$38 ← < (dword) gfx_mode::plane_b#0 -- vwuz1=_lo_vduz2 
    lda.z plane_b
    sta.z __38
    lda.z plane_b+1
    sta.z __38+1
    // [76] (byte~) gfx_mode::$37 ← < (word~) gfx_mode::$38 -- vbuz1=_lo_vwuz2 
    lda.z __38
    sta.z __37
    // [77] *((const nomodify byte*) DTV_PLANEB_START_LO) ← (byte~) gfx_mode::$37 -- _deref_pbuc1=vbuz1 
    lda.z __37
    sta DTV_PLANEB_START_LO
    // [78] (byte~) gfx_mode::$39 ← > (word~) gfx_mode::$38 -- vbuz1=_hi_vwuz2 
    lda.z __38+1
    sta.z __39
    // [79] *((const nomodify byte*) DTV_PLANEB_START_MI) ← (byte~) gfx_mode::$39 -- _deref_pbuc1=vbuz1 
    lda.z __39
    sta DTV_PLANEB_START_MI
    // [80] (word~) gfx_mode::$40 ← > (dword) gfx_mode::plane_b#0 -- vwuz1=_hi_vduz2 
    lda.z plane_b+2
    sta.z __40
    lda.z plane_b+3
    sta.z __40+1
    // [81] (byte~) gfx_mode::$41 ← < (word~) gfx_mode::$40 -- vbuz1=_lo_vwuz2 
    lda.z __40
    sta.z __41
    // [82] *((const nomodify byte*) DTV_PLANEB_START_HI) ← (byte~) gfx_mode::$41 -- _deref_pbuc1=vbuz1 
    lda.z __41
    sta DTV_PLANEB_START_HI
    // [83] (byte~) gfx_mode::$42 ← *((const nomodify byte*) form_b_step_hi) << (byte) 4 -- vbuz1=_deref_pbuc1_rol_4 
    lda form_b_step_hi
    asl
    asl
    asl
    asl
    sta.z __42
    // [84] (byte~) gfx_mode::$43 ← (byte~) gfx_mode::$42 | *((const nomodify byte*) form_b_step_lo) -- vbuz1=vbuz2_bor__deref_pbuc1 
    lda form_b_step_lo
    ora.z __42
    sta.z __43
    // [85] *((const nomodify byte*) DTV_PLANEB_STEP) ← (byte~) gfx_mode::$43 -- _deref_pbuc1=vbuz1 
    lda.z __43
    sta DTV_PLANEB_STEP
    // [86] (byte~) gfx_mode::$44 ← *((const nomodify byte*) form_b_mod_hi) << (byte) 4 -- vbuz1=_deref_pbuc1_rol_4 
    lda form_b_mod_hi
    asl
    asl
    asl
    asl
    sta.z __44
    // [87] (byte~) gfx_mode::$45 ← (byte~) gfx_mode::$44 | *((const nomodify byte*) form_b_mod_lo) -- vbuz1=vbuz2_bor__deref_pbuc1 
    lda form_b_mod_lo
    ora.z __44
    sta.z __45
    // [88] *((const nomodify byte*) DTV_PLANEB_MODULO_LO) ← (byte~) gfx_mode::$45 -- _deref_pbuc1=vbuz1 
    lda.z __45
    sta DTV_PLANEB_MODULO_LO
    // [89] *((const nomodify byte*) DTV_PLANEB_MODULO_HI) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_HI
    // [90] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) ← (byte) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR
    // [91] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2) ← (byte) 3^(byte)(word)(const nomodify byte*) VIC_SCREEN0/(word) $4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^VIC_SCREEN0/$4000
    sta CIA2
    // [92] (byte) get_vic_screen::idx#0 ← *((const nomodify byte*) form_vic_screen) -- vbuz1=_deref_pbuc1 
    lda form_vic_screen
    sta.z get_vic_screen.idx
    // [93] call get_vic_screen 
    // [220] phi from gfx_mode::@28 to get_vic_screen [phi:gfx_mode::@28->get_vic_screen]
  get_vic_screen_from___b28:
    // [220] phi (byte) get_vic_screen::idx#2 = (byte) get_vic_screen::idx#0 [phi:gfx_mode::@28->get_vic_screen#0] -- register_copy 
    jsr get_vic_screen
    // [94] (byte*) get_vic_screen::return#10 ← (byte*) get_vic_screen::return#5 -- pbuz1=pbuz2 
    lda.z get_vic_screen.return
    sta.z get_vic_screen.return_1
    lda.z get_vic_screen.return+1
    sta.z get_vic_screen.return_1+1
    jmp __b29
    // gfx_mode::@29
  __b29:
    // [95] (byte*~) gfx_mode::$82 ← (byte*) get_vic_screen::return#10 -- pbuz1=pbuz2 
    lda.z get_vic_screen.return_1
    sta.z __82
    lda.z get_vic_screen.return_1+1
    sta.z __82+1
    // [96] (word~) gfx_mode::$47 ← (word)(byte*~) gfx_mode::$82 & (word) $3fff -- vwuz1=vwuz2_band_vwuc1 
    lda.z __82
    and #<$3fff
    sta.z __47
    lda.z __82+1
    and #>$3fff
    sta.z __47+1
    // [97] (word~) gfx_mode::$48 ← (word~) gfx_mode::$47 >> (byte) 6 -- vwuz1=vwuz2_ror_6 
    lda.z __47
    asl
    sta.z $ff
    lda.z __47+1
    rol
    sta.z __48
    lda #0
    rol
    sta.z __48+1
    asl.z $ff
    rol.z __48
    rol.z __48+1
    // [98] (byte) get_vic_charset::idx#0 ← *((const nomodify byte*) form_vic_gfx) -- vbuz1=_deref_pbuc1 
    lda form_vic_gfx
    sta.z get_vic_charset.idx
    // [99] call get_vic_charset 
    jsr get_vic_charset
    // [100] (byte*) get_vic_charset::return#4 ← (byte*) get_vic_charset::return#2 -- pbuz1=pbuz2 
    lda.z get_vic_charset.return
    sta.z get_vic_charset.return_1
    lda.z get_vic_charset.return+1
    sta.z get_vic_charset.return_1+1
    jmp __b30
    // gfx_mode::@30
  __b30:
    // [101] (byte*~) gfx_mode::$83 ← (byte*) get_vic_charset::return#4 -- pbuz1=pbuz2 
    lda.z get_vic_charset.return_1
    sta.z __83
    lda.z get_vic_charset.return_1+1
    sta.z __83+1
    // [102] (word~) gfx_mode::$50 ← (word)(byte*~) gfx_mode::$83 & (word) $3fff -- vwuz1=vwuz2_band_vwuc1 
    lda.z __83
    and #<$3fff
    sta.z __50
    lda.z __83+1
    and #>$3fff
    sta.z __50+1
    // [103] (byte~) gfx_mode::$51 ← > (word~) gfx_mode::$50 -- vbuz1=_hi_vwuz2 
    lda.z __50+1
    sta.z __51
    // [104] (byte~) gfx_mode::$52 ← (byte~) gfx_mode::$51 >> (byte) 2 -- vbuz1=vbuz2_ror_2 
    lda.z __51
    lsr
    lsr
    sta.z __52
    // [105] (byte~) gfx_mode::$84 ← (byte)(word~) gfx_mode::$48 -- vbuz1=_byte_vwuz2 
    lda.z __48
    sta.z __84
    // [106] (byte~) gfx_mode::$53 ← (byte~) gfx_mode::$84 | (byte~) gfx_mode::$52 -- vbuz1=vbuz2_bor_vbuz3 
    lda.z __84
    ora.z __52
    sta.z __53
    // [107] *((const nomodify byte*) VIC_MEMORY) ← (byte~) gfx_mode::$53 -- _deref_pbuc1=vbuz1 
    // Set VIC Bank
    // VIC memory
    lda.z __53
    sta VIC_MEMORY
    // [108] (byte) get_vic_screen::idx#1 ← *((const nomodify byte*) form_vic_cols) -- vbuz1=_deref_pbuc1 
    lda form_vic_cols
    sta.z get_vic_screen.idx
    // [109] call get_vic_screen 
    // [220] phi from gfx_mode::@30 to get_vic_screen [phi:gfx_mode::@30->get_vic_screen]
  get_vic_screen_from___b30:
    // [220] phi (byte) get_vic_screen::idx#2 = (byte) get_vic_screen::idx#1 [phi:gfx_mode::@30->get_vic_screen#0] -- register_copy 
    jsr get_vic_screen
    // [110] (byte*) get_vic_screen::return#11 ← (byte*) get_vic_screen::return#5 -- pbuz1=pbuz2 
    lda.z get_vic_screen.return
    sta.z get_vic_screen.return_2
    lda.z get_vic_screen.return+1
    sta.z get_vic_screen.return_2+1
    jmp __b31
    // gfx_mode::@31
  __b31:
    // [111] (byte*) gfx_mode::vic_colors#0 ← (byte*) get_vic_screen::return#11 -- pbuz1=pbuz2 
    lda.z get_vic_screen.return_2
    sta.z vic_colors
    lda.z get_vic_screen.return_2+1
    sta.z vic_colors+1
    // [112] phi from gfx_mode::@31 to gfx_mode::@19 [phi:gfx_mode::@31->gfx_mode::@19]
  __b19_from___b31:
    // [112] phi (byte) gfx_mode::cy#4 = (byte) 0 [phi:gfx_mode::@31->gfx_mode::@19#0] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    // [112] phi (byte*) gfx_mode::col#3 = (const nomodify byte*) COLS [phi:gfx_mode::@31->gfx_mode::@19#1] -- pbuz1=pbuc1 
    lda #<COLS
    sta.z col
    lda #>COLS
    sta.z col+1
    // [112] phi (byte*) gfx_mode::vic_colors#3 = (byte*) gfx_mode::vic_colors#0 [phi:gfx_mode::@31->gfx_mode::@19#2] -- register_copy 
    jmp __b19
    // [112] phi from gfx_mode::@21 to gfx_mode::@19 [phi:gfx_mode::@21->gfx_mode::@19]
  __b19_from___b21:
    // [112] phi (byte) gfx_mode::cy#4 = (byte) gfx_mode::cy#1 [phi:gfx_mode::@21->gfx_mode::@19#0] -- register_copy 
    // [112] phi (byte*) gfx_mode::col#3 = (byte*) gfx_mode::col#1 [phi:gfx_mode::@21->gfx_mode::@19#1] -- register_copy 
    // [112] phi (byte*) gfx_mode::vic_colors#3 = (byte*) gfx_mode::vic_colors#1 [phi:gfx_mode::@21->gfx_mode::@19#2] -- register_copy 
    jmp __b19
    // gfx_mode::@19
  __b19:
    // [113] phi from gfx_mode::@19 to gfx_mode::@20 [phi:gfx_mode::@19->gfx_mode::@20]
  __b20_from___b19:
    // [113] phi (byte) gfx_mode::cx#2 = (byte) 0 [phi:gfx_mode::@19->gfx_mode::@20#0] -- vbuz1=vbuc1 
    lda #0
    sta.z cx
    // [113] phi (byte*) gfx_mode::col#2 = (byte*) gfx_mode::col#3 [phi:gfx_mode::@19->gfx_mode::@20#1] -- register_copy 
    // [113] phi (byte*) gfx_mode::vic_colors#2 = (byte*) gfx_mode::vic_colors#3 [phi:gfx_mode::@19->gfx_mode::@20#2] -- register_copy 
    jmp __b20
    // [113] phi from gfx_mode::@20 to gfx_mode::@20 [phi:gfx_mode::@20->gfx_mode::@20]
  __b20_from___b20:
    // [113] phi (byte) gfx_mode::cx#2 = (byte) gfx_mode::cx#1 [phi:gfx_mode::@20->gfx_mode::@20#0] -- register_copy 
    // [113] phi (byte*) gfx_mode::col#2 = (byte*) gfx_mode::col#1 [phi:gfx_mode::@20->gfx_mode::@20#1] -- register_copy 
    // [113] phi (byte*) gfx_mode::vic_colors#2 = (byte*) gfx_mode::vic_colors#1 [phi:gfx_mode::@20->gfx_mode::@20#2] -- register_copy 
    jmp __b20
    // gfx_mode::@20
  __b20:
    // [114] *((byte*) gfx_mode::col#2) ← *((byte*) gfx_mode::vic_colors#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (vic_colors),y
    ldy #0
    sta (col),y
    // [115] (byte*) gfx_mode::col#1 ← ++ (byte*) gfx_mode::col#2 -- pbuz1=_inc_pbuz1 
    inc.z col
    bne !+
    inc.z col+1
  !:
    // [116] (byte*) gfx_mode::vic_colors#1 ← ++ (byte*) gfx_mode::vic_colors#2 -- pbuz1=_inc_pbuz1 
    inc.z vic_colors
    bne !+
    inc.z vic_colors+1
  !:
    // [117] (byte) gfx_mode::cx#1 ← ++ (byte) gfx_mode::cx#2 -- vbuz1=_inc_vbuz1 
    inc.z cx
    // [118] if((byte) gfx_mode::cx#1!=(byte) $28) goto gfx_mode::@20 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z cx
    bne __b20_from___b20
    jmp __b21
    // gfx_mode::@21
  __b21:
    // [119] (byte) gfx_mode::cy#1 ← ++ (byte) gfx_mode::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [120] if((byte) gfx_mode::cy#1!=(byte) $19) goto gfx_mode::@19 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b19_from___b21
    jmp __b22
    // gfx_mode::@22
  __b22:
    // [121] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Background colors
    lda #0
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // [122] (byte~) gfx_mode::$55 ← *((const nomodify byte*) form_vic_bg0_hi) << (byte) 4 -- vbuz1=_deref_pbuc1_rol_4 
    lda form_vic_bg0_hi
    asl
    asl
    asl
    asl
    sta.z __55
    // [123] (byte~) gfx_mode::$56 ← (byte~) gfx_mode::$55 | *((const nomodify byte*) form_vic_bg0_lo) -- vbuz1=vbuz2_bor__deref_pbuc1 
    lda form_vic_bg0_lo
    ora.z __55
    sta.z __56
    // [124] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) ← (byte~) gfx_mode::$56 -- _deref_pbuc1=vbuz1 
    lda.z __56
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR
    // [125] (byte~) gfx_mode::$57 ← *((const nomodify byte*) form_vic_bg1_hi) << (byte) 4 -- vbuz1=_deref_pbuc1_rol_4 
    lda form_vic_bg1_hi
    asl
    asl
    asl
    asl
    sta.z __57
    // [126] (byte~) gfx_mode::$58 ← (byte~) gfx_mode::$57 | *((const nomodify byte*) form_vic_bg1_lo) -- vbuz1=vbuz2_bor__deref_pbuc1 
    lda form_vic_bg1_lo
    ora.z __57
    sta.z __58
    // [127] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR1) ← (byte~) gfx_mode::$58 -- _deref_pbuc1=vbuz1 
    lda.z __58
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR1
    // [128] (byte~) gfx_mode::$59 ← *((const nomodify byte*) form_vic_bg2_hi) << (byte) 4 -- vbuz1=_deref_pbuc1_rol_4 
    lda form_vic_bg2_hi
    asl
    asl
    asl
    asl
    sta.z __59
    // [129] (byte~) gfx_mode::$60 ← (byte~) gfx_mode::$59 | *((const nomodify byte*) form_vic_bg2_lo) -- vbuz1=vbuz2_bor__deref_pbuc1 
    lda form_vic_bg2_lo
    ora.z __59
    sta.z __60
    // [130] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR2) ← (byte~) gfx_mode::$60 -- _deref_pbuc1=vbuz1 
    lda.z __60
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR2
    // [131] (byte~) gfx_mode::$61 ← *((const nomodify byte*) form_vic_bg3_hi) << (byte) 4 -- vbuz1=_deref_pbuc1_rol_4 
    lda form_vic_bg3_hi
    asl
    asl
    asl
    asl
    sta.z __61
    // [132] (byte~) gfx_mode::$62 ← (byte~) gfx_mode::$61 | *((const nomodify byte*) form_vic_bg3_lo) -- vbuz1=vbuz2_bor__deref_pbuc1 
    lda form_vic_bg3_lo
    ora.z __61
    sta.z __62
    // [133] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR3) ← (byte~) gfx_mode::$62 -- _deref_pbuc1=vbuz1 
    lda.z __62
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR3
    // [134] if(*((const nomodify byte*) form_dtv_palet)==(byte) 0) goto gfx_mode::@24 -- _deref_pbuc1_eq_0_then_la1 
    // DTV Palette
    lda form_dtv_palet
    cmp #0
    beq __b24_from___b22
    // [135] phi from gfx_mode::@22 to gfx_mode::@23 [phi:gfx_mode::@22->gfx_mode::@23]
  __b23_from___b22:
    // [135] phi (byte) gfx_mode::j#2 = (byte) 0 [phi:gfx_mode::@22->gfx_mode::@23#0] -- vbuz1=vbuc1 
    lda #0
    sta.z j
    jmp __b23
  // DTV Palette - Grey Tones
    // [135] phi from gfx_mode::@23 to gfx_mode::@23 [phi:gfx_mode::@23->gfx_mode::@23]
  __b23_from___b23:
    // [135] phi (byte) gfx_mode::j#2 = (byte) gfx_mode::j#1 [phi:gfx_mode::@23->gfx_mode::@23#0] -- register_copy 
    jmp __b23
    // gfx_mode::@23
  __b23:
    // [136] *((const nomodify byte*) DTV_PALETTE + (byte) gfx_mode::j#2) ← (byte) gfx_mode::j#2 -- pbuc1_derefidx_vbuz1=vbuz1 
    ldy.z j
    tya
    sta DTV_PALETTE,y
    // [137] (byte) gfx_mode::j#1 ← ++ (byte) gfx_mode::j#2 -- vbuz1=_inc_vbuz1 
    inc.z j
    // [138] if((byte) gfx_mode::j#1!=(byte) $10) goto gfx_mode::@23 -- vbuz1_neq_vbuc1_then_la1 
    lda #$10
    cmp.z j
    bne __b23_from___b23
    jmp __b25
    // gfx_mode::@25
  __b25:
    // [139] if(*((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)!=(byte) $ff) goto gfx_mode::@25 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    bne __b25
    // [140] phi from gfx_mode::@25 to gfx_mode::@26 [phi:gfx_mode::@25->gfx_mode::@26]
  __b26_from___b25:
    jmp __b26
    // gfx_mode::@26
  __b26:
    // [141] call keyboard_event_scan 
    // [157] phi from gfx_mode::@26 to keyboard_event_scan [phi:gfx_mode::@26->keyboard_event_scan]
  keyboard_event_scan_from___b26:
    // [157] phi (byte) keyboard_events_size#97 = (byte) keyboard_events_size#24 [phi:gfx_mode::@26->keyboard_event_scan#0] -- register_copy 
    jsr keyboard_event_scan
    // [142] phi from gfx_mode::@26 to gfx_mode::@32 [phi:gfx_mode::@26->gfx_mode::@32]
  __b32_from___b26:
    jmp __b32
    // gfx_mode::@32
  __b32:
    // [143] call keyboard_event_get 
    jsr keyboard_event_get
    // [144] (byte) keyboard_event_get::return#3 ← (byte) keyboard_event_get::return#2 -- vbuz1=vbuz2 
    lda.z keyboard_event_get.return
    sta.z keyboard_event_get.return_1
    jmp __b33
    // gfx_mode::@33
  __b33:
    // [145] (byte) gfx_mode::keyboard_event#0 ← (byte) keyboard_event_get::return#3 -- vbuz1=vbuz2 
    lda.z keyboard_event_get.return_1
    sta.z keyboard_event
    // [146] if((byte) gfx_mode::keyboard_event#0==(const nomodify byte) KEY_SPACE) goto gfx_mode::@return -- vbuz1_eq_vbuc1_then_la1 
    lda #KEY_SPACE
    cmp.z keyboard_event
    beq __breturn
    jmp __b25
    // gfx_mode::@return
  __breturn:
    // [147] return 
    rts
  // DTV Palette - default
    // [148] phi from gfx_mode::@22 to gfx_mode::@24 [phi:gfx_mode::@22->gfx_mode::@24]
  __b24_from___b22:
    // [148] phi (byte) gfx_mode::i#2 = (byte) 0 [phi:gfx_mode::@22->gfx_mode::@24#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b24
    // [148] phi from gfx_mode::@24 to gfx_mode::@24 [phi:gfx_mode::@24->gfx_mode::@24]
  __b24_from___b24:
    // [148] phi (byte) gfx_mode::i#2 = (byte) gfx_mode::i#1 [phi:gfx_mode::@24->gfx_mode::@24#0] -- register_copy 
    jmp __b24
    // gfx_mode::@24
  __b24:
    // [149] *((const nomodify byte*) DTV_PALETTE + (byte) gfx_mode::i#2) ← *((const byte*) DTV_PALETTE_DEFAULT + (byte) gfx_mode::i#2) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz1 
    ldy.z i
    lda DTV_PALETTE_DEFAULT,y
    sta DTV_PALETTE,y
    // [150] (byte) gfx_mode::i#1 ← ++ (byte) gfx_mode::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [151] if((byte) gfx_mode::i#1!=(byte) $10) goto gfx_mode::@24 -- vbuz1_neq_vbuc1_then_la1 
    lda #$10
    cmp.z i
    bne __b24_from___b24
    jmp __b25
}
  // keyboard_event_get
// Get the next event from the keyboard event buffer.
// Returns $ff if there is no event waiting. As all events are <$7f it is enough to examine bit 7 when determining if there is any event to process.
// The buffer is filled by keyboard_event_scan()
keyboard_event_get: {
    .label return = $d
    .label return_1 = $ed
    .label return_2 = $111
    // [152] if((byte) keyboard_events_size#100==(byte) 0) goto keyboard_event_get::@return -- vbuz1_eq_0_then_la1 
    lda.z keyboard_events_size
    cmp #0
    beq __breturn_from_keyboard_event_get
    jmp __b1
    // keyboard_event_get::@1
  __b1:
    // [153] (byte) keyboard_events_size#4 ← -- (byte) keyboard_events_size#100 -- vbuz1=_dec_vbuz1 
    dec.z keyboard_events_size
    // [154] (byte) keyboard_event_get::return#1 ← *((const byte*) keyboard_events + (byte) keyboard_events_size#4) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z keyboard_events_size
    lda keyboard_events,y
    sta.z return
    // [155] phi from keyboard_event_get::@1 to keyboard_event_get::@return [phi:keyboard_event_get::@1->keyboard_event_get::@return]
  __breturn_from___b1:
    // [155] phi (byte) keyboard_events_size#24 = (byte) keyboard_events_size#4 [phi:keyboard_event_get::@1->keyboard_event_get::@return#0] -- register_copy 
    // [155] phi (byte) keyboard_event_get::return#2 = (byte) keyboard_event_get::return#1 [phi:keyboard_event_get::@1->keyboard_event_get::@return#1] -- register_copy 
    jmp __breturn
    // [155] phi from keyboard_event_get to keyboard_event_get::@return [phi:keyboard_event_get->keyboard_event_get::@return]
  __breturn_from_keyboard_event_get:
    // [155] phi (byte) keyboard_events_size#24 = (byte) keyboard_events_size#100 [phi:keyboard_event_get->keyboard_event_get::@return#0] -- register_copy 
    // [155] phi (byte) keyboard_event_get::return#2 = (byte) $ff [phi:keyboard_event_get->keyboard_event_get::@return#1] -- vbuz1=vbuc1 
    lda #$ff
    sta.z return
    jmp __breturn
    // keyboard_event_get::@return
  __breturn:
    // [156] return 
    rts
}
  // keyboard_event_scan
// Scans the entire matrix to determine which keys have been pressed/depressed.
// Generates keyboard events into the event buffer. Events can be read using keyboard_event_get().
// Handles debounce and only generates events when the status of a key changes.
// Also stores current status of modifiers in keyboard_modifiers.
keyboard_event_scan: {
    .label __0 = $f3
    .label __3 = $f5
    .label __6 = $f7
    .label __9 = $f9
    .label __15 = $fa
    .label __16 = $fb
    .label __23 = $fd
    .label row_scan = $f1
    .label keycode = $11
    .label row = $e
    .label col = $10
    .label event_type = $fc
    // [158] phi from keyboard_event_scan to keyboard_event_scan::@7 [phi:keyboard_event_scan->keyboard_event_scan::@7]
  __b7_from_keyboard_event_scan:
    // [158] phi (byte) keyboard_events_size#106 = (byte) keyboard_events_size#97 [phi:keyboard_event_scan->keyboard_event_scan::@7#0] -- register_copy 
    // [158] phi (byte) keyboard_event_scan::keycode#11 = (byte) 0 [phi:keyboard_event_scan->keyboard_event_scan::@7#1] -- vbuz1=vbuc1 
    lda #0
    sta.z keycode
    // [158] phi (byte) keyboard_event_scan::row#2 = (byte) 0 [phi:keyboard_event_scan->keyboard_event_scan::@7#2] -- vbuz1=vbuc1 
    lda #0
    sta.z row
    jmp __b7
    // [158] phi from keyboard_event_scan::@8 to keyboard_event_scan::@7 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7]
  __b7_from___b8:
    // [158] phi (byte) keyboard_events_size#106 = (byte) keyboard_events_size#100 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7#0] -- register_copy 
    // [158] phi (byte) keyboard_event_scan::keycode#11 = (byte) keyboard_event_scan::keycode#13 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7#1] -- register_copy 
    // [158] phi (byte) keyboard_event_scan::row#2 = (byte) keyboard_event_scan::row#1 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7#2] -- register_copy 
    jmp __b7
    // keyboard_event_scan::@7
  __b7:
    // [159] (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_event_scan::row#2 -- vbuz1=vbuz2 
    lda.z row
    sta.z keyboard_matrix_read.rowid
    // [160] call keyboard_matrix_read 
    jsr keyboard_matrix_read
    // [161] (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#0 -- vbuz1=vbuz2 
    lda.z keyboard_matrix_read.return
    sta.z keyboard_matrix_read.return_1
    jmp __b19
    // keyboard_event_scan::@19
  __b19:
    // [162] (byte) keyboard_event_scan::row_scan#0 ← (byte) keyboard_matrix_read::return#2 -- vbuz1=vbuz2 
    lda.z keyboard_matrix_read.return_1
    sta.z row_scan
    // [163] if((byte) keyboard_event_scan::row_scan#0!=*((const byte*) keyboard_scan_values + (byte) keyboard_event_scan::row#2)) goto keyboard_event_scan::@9 -- vbuz1_neq_pbuc1_derefidx_vbuz2_then_la1 
    lda.z row_scan
    ldy.z row
    cmp keyboard_scan_values,y
    bne __b9_from___b19
    jmp __b16
    // keyboard_event_scan::@16
  __b16:
    // [164] (byte) keyboard_event_scan::keycode#1 ← (byte) keyboard_event_scan::keycode#11 + (byte) 8 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z keycode
    axs #-[8]
    stx.z keycode
    // [165] phi from keyboard_event_scan::@15 keyboard_event_scan::@16 to keyboard_event_scan::@8 [phi:keyboard_event_scan::@15/keyboard_event_scan::@16->keyboard_event_scan::@8]
  __b8_from___b15:
  __b8_from___b16:
    // [165] phi (byte) keyboard_events_size#100 = (byte) keyboard_events_size#105 [phi:keyboard_event_scan::@15/keyboard_event_scan::@16->keyboard_event_scan::@8#0] -- register_copy 
    // [165] phi (byte) keyboard_event_scan::keycode#13 = (byte) keyboard_event_scan::keycode#14 [phi:keyboard_event_scan::@15/keyboard_event_scan::@16->keyboard_event_scan::@8#1] -- register_copy 
    jmp __b8
    // keyboard_event_scan::@8
  __b8:
    // [166] (byte) keyboard_event_scan::row#1 ← ++ (byte) keyboard_event_scan::row#2 -- vbuz1=_inc_vbuz1 
    inc.z row
    // [167] if((byte) keyboard_event_scan::row#1!=(byte) 8) goto keyboard_event_scan::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z row
    bne __b7_from___b8
    // [168] phi from keyboard_event_scan::@8 to keyboard_event_scan::@17 [phi:keyboard_event_scan::@8->keyboard_event_scan::@17]
  __b17_from___b8:
    jmp __b17
    // keyboard_event_scan::@17
  __b17:
    // [169] call keyboard_event_pressed 
    // [211] phi from keyboard_event_scan::@17 to keyboard_event_pressed [phi:keyboard_event_scan::@17->keyboard_event_pressed]
  keyboard_event_pressed_from___b17:
    // [211] phi (byte) keyboard_event_pressed::keycode#4 = (const nomodify byte) KEY_LSHIFT [phi:keyboard_event_scan::@17->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_LSHIFT
    sta.z keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
    // [170] (byte) keyboard_event_pressed::return#0 ← (byte) keyboard_event_pressed::return#10 -- vbuz1=vbuz2 
    lda.z keyboard_event_pressed.return_4
    sta.z keyboard_event_pressed.return
    jmp __b20
    // keyboard_event_scan::@20
  __b20:
    // [171] (byte~) keyboard_event_scan::$0 ← (byte) keyboard_event_pressed::return#0 -- vbuz1=vbuz2 
    lda.z keyboard_event_pressed.return
    sta.z __0
    // [172] if((byte~) keyboard_event_scan::$0==(byte) 0) goto keyboard_event_scan::@1 -- vbuz1_eq_0_then_la1 
    lda.z __0
    cmp #0
    beq __b1_from___b20
    // [173] phi from keyboard_event_scan::@20 to keyboard_event_scan::@18 [phi:keyboard_event_scan::@20->keyboard_event_scan::@18]
  __b18_from___b20:
    jmp __b18
    // keyboard_event_scan::@18
  __b18:
    // [174] phi from keyboard_event_scan::@18 to keyboard_event_scan::@1 [phi:keyboard_event_scan::@18->keyboard_event_scan::@1]
  __b1_from___b18:
    // [174] phi (byte) keyboard_modifiers#18 = (const nomodify byte) KEY_MODIFIER_LSHIFT [phi:keyboard_event_scan::@18->keyboard_event_scan::@1#0] -- vbuz1=vbuc1 
    lda #KEY_MODIFIER_LSHIFT
    sta.z keyboard_modifiers
    jmp __b1
    // [174] phi from keyboard_event_scan::@20 to keyboard_event_scan::@1 [phi:keyboard_event_scan::@20->keyboard_event_scan::@1]
  __b1_from___b20:
    // [174] phi (byte) keyboard_modifiers#18 = (byte) 0 [phi:keyboard_event_scan::@20->keyboard_event_scan::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z keyboard_modifiers
    jmp __b1
    // keyboard_event_scan::@1
  __b1:
    // [175] call keyboard_event_pressed 
    // [211] phi from keyboard_event_scan::@1 to keyboard_event_pressed [phi:keyboard_event_scan::@1->keyboard_event_pressed]
  keyboard_event_pressed_from___b1:
    // [211] phi (byte) keyboard_event_pressed::keycode#4 = (const nomodify byte) KEY_RSHIFT [phi:keyboard_event_scan::@1->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_RSHIFT
    sta.z keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
    // [176] (byte) keyboard_event_pressed::return#1 ← (byte) keyboard_event_pressed::return#10 -- vbuz1=vbuz2 
    lda.z keyboard_event_pressed.return_4
    sta.z keyboard_event_pressed.return_1
    jmp __b21
    // keyboard_event_scan::@21
  __b21:
    // [177] (byte~) keyboard_event_scan::$3 ← (byte) keyboard_event_pressed::return#1 -- vbuz1=vbuz2 
    lda.z keyboard_event_pressed.return_1
    sta.z __3
    // [178] if((byte~) keyboard_event_scan::$3==(byte) 0) goto keyboard_event_scan::@2 -- vbuz1_eq_0_then_la1 
    lda.z __3
    cmp #0
    beq __b2_from___b21
    jmp __b4
    // keyboard_event_scan::@4
  __b4:
    // [179] (byte) keyboard_modifiers#3 ← (byte) keyboard_modifiers#18 | (const nomodify byte) KEY_MODIFIER_RSHIFT -- vbuz1=vbuz1_bor_vbuc1 
    lda #KEY_MODIFIER_RSHIFT
    ora.z keyboard_modifiers
    sta.z keyboard_modifiers
    // [180] phi from keyboard_event_scan::@21 keyboard_event_scan::@4 to keyboard_event_scan::@2 [phi:keyboard_event_scan::@21/keyboard_event_scan::@4->keyboard_event_scan::@2]
  __b2_from___b21:
  __b2_from___b4:
    // [180] phi (byte) keyboard_modifiers#19 = (byte) keyboard_modifiers#18 [phi:keyboard_event_scan::@21/keyboard_event_scan::@4->keyboard_event_scan::@2#0] -- register_copy 
    jmp __b2
    // keyboard_event_scan::@2
  __b2:
    // [181] call keyboard_event_pressed 
    // [211] phi from keyboard_event_scan::@2 to keyboard_event_pressed [phi:keyboard_event_scan::@2->keyboard_event_pressed]
  keyboard_event_pressed_from___b2:
    // [211] phi (byte) keyboard_event_pressed::keycode#4 = (const nomodify byte) KEY_CTRL [phi:keyboard_event_scan::@2->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_CTRL
    sta.z keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
    // [182] (byte) keyboard_event_pressed::return#2 ← (byte) keyboard_event_pressed::return#10 -- vbuz1=vbuz2 
    lda.z keyboard_event_pressed.return_4
    sta.z keyboard_event_pressed.return_2
    jmp __b22
    // keyboard_event_scan::@22
  __b22:
    // [183] (byte~) keyboard_event_scan::$6 ← (byte) keyboard_event_pressed::return#2 -- vbuz1=vbuz2 
    lda.z keyboard_event_pressed.return_2
    sta.z __6
    // [184] if((byte~) keyboard_event_scan::$6==(byte) 0) goto keyboard_event_scan::@3 -- vbuz1_eq_0_then_la1 
    lda.z __6
    cmp #0
    beq __b3_from___b22
    jmp __b5
    // keyboard_event_scan::@5
  __b5:
    // [185] (byte) keyboard_modifiers#4 ← (byte) keyboard_modifiers#19 | (const nomodify byte) KEY_MODIFIER_CTRL -- vbuz1=vbuz1_bor_vbuc1 
    lda #KEY_MODIFIER_CTRL
    ora.z keyboard_modifiers
    sta.z keyboard_modifiers
    // [186] phi from keyboard_event_scan::@22 keyboard_event_scan::@5 to keyboard_event_scan::@3 [phi:keyboard_event_scan::@22/keyboard_event_scan::@5->keyboard_event_scan::@3]
  __b3_from___b22:
  __b3_from___b5:
    // [186] phi (byte) keyboard_modifiers#20 = (byte) keyboard_modifiers#19 [phi:keyboard_event_scan::@22/keyboard_event_scan::@5->keyboard_event_scan::@3#0] -- register_copy 
    jmp __b3
    // keyboard_event_scan::@3
  __b3:
    // [187] call keyboard_event_pressed 
    // [211] phi from keyboard_event_scan::@3 to keyboard_event_pressed [phi:keyboard_event_scan::@3->keyboard_event_pressed]
  keyboard_event_pressed_from___b3:
    // [211] phi (byte) keyboard_event_pressed::keycode#4 = (const nomodify byte) KEY_COMMODORE [phi:keyboard_event_scan::@3->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_COMMODORE
    sta.z keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
    // [188] (byte) keyboard_event_pressed::return#3 ← (byte) keyboard_event_pressed::return#10 -- vbuz1=vbuz2 
    lda.z keyboard_event_pressed.return_4
    sta.z keyboard_event_pressed.return_3
    jmp __b23
    // keyboard_event_scan::@23
  __b23:
    // [189] (byte~) keyboard_event_scan::$9 ← (byte) keyboard_event_pressed::return#3 -- vbuz1=vbuz2 
    lda.z keyboard_event_pressed.return_3
    sta.z __9
    // [190] if((byte~) keyboard_event_scan::$9==(byte) 0) goto keyboard_event_scan::@return -- vbuz1_eq_0_then_la1 
    lda.z __9
    cmp #0
    beq __breturn_from___b23
    jmp __b6
    // keyboard_event_scan::@6
  __b6:
    // [191] (byte) keyboard_modifiers#5 ← (byte) keyboard_modifiers#20 | (const nomodify byte) KEY_MODIFIER_COMMODORE -- vbuz1=vbuz1_bor_vbuc1 
    lda #KEY_MODIFIER_COMMODORE
    ora.z keyboard_modifiers
    sta.z keyboard_modifiers
    // [192] phi from keyboard_event_scan::@23 keyboard_event_scan::@6 to keyboard_event_scan::@return [phi:keyboard_event_scan::@23/keyboard_event_scan::@6->keyboard_event_scan::@return]
  __breturn_from___b23:
  __breturn_from___b6:
    // [192] phi (byte) keyboard_modifiers#21 = (byte) keyboard_modifiers#20 [phi:keyboard_event_scan::@23/keyboard_event_scan::@6->keyboard_event_scan::@return#0] -- register_copy 
    jmp __breturn
    // keyboard_event_scan::@return
  __breturn:
    // [193] return 
    rts
  // Something has changed on the keyboard row - check each column
    // [194] phi from keyboard_event_scan::@10 to keyboard_event_scan::@9 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9]
  __b9_from___b10:
    // [194] phi (byte) keyboard_events_size#18 = (byte) keyboard_events_size#105 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9#0] -- register_copy 
    // [194] phi (byte) keyboard_event_scan::keycode#10 = (byte) keyboard_event_scan::keycode#14 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9#1] -- register_copy 
    // [194] phi (byte) keyboard_event_scan::col#2 = (byte) keyboard_event_scan::col#1 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9#2] -- register_copy 
    jmp __b9
    // [194] phi from keyboard_event_scan::@19 to keyboard_event_scan::@9 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9]
  __b9_from___b19:
    // [194] phi (byte) keyboard_events_size#18 = (byte) keyboard_events_size#106 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9#0] -- register_copy 
    // [194] phi (byte) keyboard_event_scan::keycode#10 = (byte) keyboard_event_scan::keycode#11 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9#1] -- register_copy 
    // [194] phi (byte) keyboard_event_scan::col#2 = (byte) 0 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9#2] -- vbuz1=vbuc1 
    lda #0
    sta.z col
    jmp __b9
    // keyboard_event_scan::@9
  __b9:
    // [195] (byte~) keyboard_event_scan::$15 ← (byte) keyboard_event_scan::row_scan#0 ^ *((const byte*) keyboard_scan_values + (byte) keyboard_event_scan::row#2) -- vbuz1=vbuz2_bxor_pbuc1_derefidx_vbuz3 
    lda.z row_scan
    ldy.z row
    eor keyboard_scan_values,y
    sta.z __15
    // [196] (byte~) keyboard_event_scan::$16 ← (byte~) keyboard_event_scan::$15 & *((const byte*) keyboard_matrix_col_bitmask + (byte) keyboard_event_scan::col#2) -- vbuz1=vbuz2_band_pbuc1_derefidx_vbuz3 
    lda.z __15
    ldy.z col
    and keyboard_matrix_col_bitmask,y
    sta.z __16
    // [197] if((byte~) keyboard_event_scan::$16==(byte) 0) goto keyboard_event_scan::@10 -- vbuz1_eq_0_then_la1 
    lda.z __16
    cmp #0
    beq __b10_from___b9
    jmp __b12
    // keyboard_event_scan::@12
  __b12:
    // [198] if((byte) keyboard_events_size#18==(byte) 8) goto keyboard_event_scan::@10 -- vbuz1_eq_vbuc1_then_la1 
    lda #8
    cmp.z keyboard_events_size
    beq __b10_from___b12
    jmp __b13
    // keyboard_event_scan::@13
  __b13:
    // [199] (byte) keyboard_event_scan::event_type#0 ← (byte) keyboard_event_scan::row_scan#0 & *((const byte*) keyboard_matrix_col_bitmask + (byte) keyboard_event_scan::col#2) -- vbuz1=vbuz2_band_pbuc1_derefidx_vbuz3 
    lda.z row_scan
    ldy.z col
    and keyboard_matrix_col_bitmask,y
    sta.z event_type
    // [200] if((byte) keyboard_event_scan::event_type#0==(byte) 0) goto keyboard_event_scan::@11 -- vbuz1_eq_0_then_la1 
    lda.z event_type
    cmp #0
    beq __b11
    jmp __b14
    // keyboard_event_scan::@14
  __b14:
    // [201] *((const byte*) keyboard_events + (byte) keyboard_events_size#18) ← (byte) keyboard_event_scan::keycode#10 -- pbuc1_derefidx_vbuz1=vbuz2 
    // Key pressed
    lda.z keycode
    ldy.z keyboard_events_size
    sta keyboard_events,y
    // [202] (byte) keyboard_events_size#2 ← ++ (byte) keyboard_events_size#18 -- vbuz1=_inc_vbuz1 
    inc.z keyboard_events_size
    // [203] phi from keyboard_event_scan::@11 keyboard_event_scan::@12 keyboard_event_scan::@14 keyboard_event_scan::@9 to keyboard_event_scan::@10 [phi:keyboard_event_scan::@11/keyboard_event_scan::@12/keyboard_event_scan::@14/keyboard_event_scan::@9->keyboard_event_scan::@10]
  __b10_from___b11:
  __b10_from___b12:
  __b10_from___b14:
  __b10_from___b9:
    // [203] phi (byte) keyboard_events_size#105 = (byte) keyboard_events_size#1 [phi:keyboard_event_scan::@11/keyboard_event_scan::@12/keyboard_event_scan::@14/keyboard_event_scan::@9->keyboard_event_scan::@10#0] -- register_copy 
    jmp __b10
    // keyboard_event_scan::@10
  __b10:
    // [204] (byte) keyboard_event_scan::keycode#14 ← ++ (byte) keyboard_event_scan::keycode#10 -- vbuz1=_inc_vbuz1 
    inc.z keycode
    // [205] (byte) keyboard_event_scan::col#1 ← ++ (byte) keyboard_event_scan::col#2 -- vbuz1=_inc_vbuz1 
    inc.z col
    // [206] if((byte) keyboard_event_scan::col#1!=(byte) 8) goto keyboard_event_scan::@9 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z col
    bne __b9_from___b10
    jmp __b15
    // keyboard_event_scan::@15
  __b15:
    // [207] *((const byte*) keyboard_scan_values + (byte) keyboard_event_scan::row#2) ← (byte) keyboard_event_scan::row_scan#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    // Store the current keyboard status for the row to debounce
    lda.z row_scan
    ldy.z row
    sta keyboard_scan_values,y
    jmp __b8_from___b15
    // keyboard_event_scan::@11
  __b11:
    // [208] (byte~) keyboard_event_scan::$23 ← (byte) keyboard_event_scan::keycode#10 | (byte) $40 -- vbuz1=vbuz2_bor_vbuc1 
    lda #$40
    ora.z keycode
    sta.z __23
    // [209] *((const byte*) keyboard_events + (byte) keyboard_events_size#18) ← (byte~) keyboard_event_scan::$23 -- pbuc1_derefidx_vbuz1=vbuz2 
    // Key released
    lda.z __23
    ldy.z keyboard_events_size
    sta keyboard_events,y
    // [210] (byte) keyboard_events_size#1 ← ++ (byte) keyboard_events_size#18 -- vbuz1=_inc_vbuz1 
    inc.z keyboard_events_size
    jmp __b10_from___b11
}
  // keyboard_event_pressed
// Determine if a specific key is currently pressed based on the last keyboard_event_scan()
// Returns 0 is not pressed and non-0 if pressed
// keyboard_event_pressed(byte zp($13) keycode)
keyboard_event_pressed: {
    .label __0 = $fe
    .label __1 = $100
    .label return = $f2
    .label return_1 = $f4
    .label return_2 = $f6
    .label return_3 = $f8
    .label row_bits = $ff
    .label keycode = $13
    .label return_4 = $101
    // [212] (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#4 >> (byte) 3 -- vbuz1=vbuz2_ror_3 
    lda.z keycode
    lsr
    lsr
    lsr
    sta.z __0
    // [213] (byte) keyboard_event_pressed::row_bits#0 ← *((const byte*) keyboard_scan_values + (byte~) keyboard_event_pressed::$0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __0
    lda keyboard_scan_values,y
    sta.z row_bits
    // [214] (byte~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#4 & (byte) 7 -- vbuz1=vbuz2_band_vbuc1 
    lda #7
    and.z keycode
    sta.z __1
    // [215] (byte) keyboard_event_pressed::return#10 ← (byte) keyboard_event_pressed::row_bits#0 & *((const byte*) keyboard_matrix_col_bitmask + (byte~) keyboard_event_pressed::$1) -- vbuz1=vbuz2_band_pbuc1_derefidx_vbuz3 
    lda.z row_bits
    ldy.z __1
    and keyboard_matrix_col_bitmask,y
    sta.z return_4
    jmp __breturn
    // keyboard_event_pressed::@return
  __breturn:
    // [216] return 
    rts
}
  // keyboard_matrix_read
// Read a single row of the keyboard matrix
// The row ID (0-7) of the keyboard matrix row to read. See the C64 key matrix for row IDs.
// Returns the keys pressed on the row as bits according to the C64 key matrix.
// Notice: If the C64 normal interrupt is still running it will occasionally interrupt right between the read & write
// leading to erroneous readings. You must disable the normal interrupt or sei/cli around calls to the keyboard matrix reader.
// keyboard_matrix_read(byte zp($ef) rowid)
keyboard_matrix_read: {
    .label return = $102
    .label rowid = $ef
    .label return_1 = $f0
    // [217] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1) ← *((const byte*) keyboard_matrix_row_bitmask + (byte) keyboard_matrix_read::rowid#0) -- _deref_pbuc1=pbuc2_derefidx_vbuz1 
    ldy.z rowid
    lda keyboard_matrix_row_bitmask,y
    sta CIA1
    // [218] (byte) keyboard_matrix_read::return#0 ← ~ *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_B) -- vbuz1=_bnot__deref_pbuc1 
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_B
    eor #$ff
    sta.z return
    jmp __breturn
    // keyboard_matrix_read::@return
  __breturn:
    // [219] return 
    rts
}
  // get_vic_screen
// Get the VIC screen address from the screen index
// get_vic_screen(byte zp($14) idx)
get_vic_screen: {
    .label return = $15
    .label idx = $14
    .label return_1 = $d0
    .label return_2 = $e3
    // [221] if((byte) get_vic_screen::idx#2==(byte) 0) goto get_vic_screen::@return -- vbuz1_eq_0_then_la1 
    lda.z idx
    cmp #0
    beq __breturn_from_get_vic_screen
    jmp __b2
    // get_vic_screen::@2
  __b2:
    // [222] if((byte) get_vic_screen::idx#2==(byte) 1) goto get_vic_screen::@return -- vbuz1_eq_vbuc1_then_la1 
    lda #1
    cmp.z idx
    beq __breturn_from___b2
    jmp __b3
    // get_vic_screen::@3
  __b3:
    // [223] if((byte) get_vic_screen::idx#2==(byte) 2) goto get_vic_screen::@return -- vbuz1_eq_vbuc1_then_la1 
    lda #2
    cmp.z idx
    beq __breturn_from___b3
    jmp __b4
    // get_vic_screen::@4
  __b4:
    // [224] if((byte) get_vic_screen::idx#2==(byte) 3) goto get_vic_screen::@return -- vbuz1_eq_vbuc1_then_la1 
    lda #3
    cmp.z idx
    beq __breturn_from___b4
    jmp __b5
    // get_vic_screen::@5
  __b5:
    // [225] if((byte) get_vic_screen::idx#2!=(byte) 4) goto get_vic_screen::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z idx
    bne __b1_from___b5
    // [227] phi from get_vic_screen::@5 to get_vic_screen::@return [phi:get_vic_screen::@5->get_vic_screen::@return]
  __breturn_from___b5:
    // [227] phi (byte*) get_vic_screen::return#5 = (const nomodify byte*) VIC_SCREEN4 [phi:get_vic_screen::@5->get_vic_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN4
    sta.z return
    lda #>VIC_SCREEN4
    sta.z return+1
    jmp __breturn
    // [226] phi from get_vic_screen::@5 to get_vic_screen::@1 [phi:get_vic_screen::@5->get_vic_screen::@1]
  __b1_from___b5:
    jmp __b1
    // get_vic_screen::@1
  __b1:
    // [227] phi from get_vic_screen get_vic_screen::@1 to get_vic_screen::@return [phi:get_vic_screen/get_vic_screen::@1->get_vic_screen::@return]
  __breturn_from_get_vic_screen:
  __breturn_from___b1:
    // [227] phi (byte*) get_vic_screen::return#5 = (const nomodify byte*) VIC_SCREEN0 [phi:get_vic_screen/get_vic_screen::@1->get_vic_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN0
    sta.z return
    lda #>VIC_SCREEN0
    sta.z return+1
    jmp __breturn
    // [227] phi from get_vic_screen::@2 to get_vic_screen::@return [phi:get_vic_screen::@2->get_vic_screen::@return]
  __breturn_from___b2:
    // [227] phi (byte*) get_vic_screen::return#5 = (const nomodify byte*) VIC_SCREEN1 [phi:get_vic_screen::@2->get_vic_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN1
    sta.z return
    lda #>VIC_SCREEN1
    sta.z return+1
    jmp __breturn
    // [227] phi from get_vic_screen::@3 to get_vic_screen::@return [phi:get_vic_screen::@3->get_vic_screen::@return]
  __breturn_from___b3:
    // [227] phi (byte*) get_vic_screen::return#5 = (const nomodify byte*) VIC_SCREEN2 [phi:get_vic_screen::@3->get_vic_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN2
    sta.z return
    lda #>VIC_SCREEN2
    sta.z return+1
    jmp __breturn
    // [227] phi from get_vic_screen::@4 to get_vic_screen::@return [phi:get_vic_screen::@4->get_vic_screen::@return]
  __breturn_from___b4:
    // [227] phi (byte*) get_vic_screen::return#5 = (const nomodify byte*) VIC_SCREEN3 [phi:get_vic_screen::@4->get_vic_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN3
    sta.z return
    lda #>VIC_SCREEN3
    sta.z return+1
    jmp __breturn
    // get_vic_screen::@return
  __breturn:
    // [228] return 
    rts
}
  // get_vic_charset
// Get the VIC charset/bitmap address from the index
// get_vic_charset(byte zp($d8) idx)
get_vic_charset: {
    .label return = $17
    .label idx = $d8
    .label return_1 = $d9
    // [229] if((byte) get_vic_charset::idx#0==(byte) 0) goto get_vic_charset::@return -- vbuz1_eq_0_then_la1 
    lda.z idx
    cmp #0
    beq __breturn_from_get_vic_charset
    jmp __b2
    // get_vic_charset::@2
  __b2:
    // [230] if((byte) get_vic_charset::idx#0!=(byte) 1) goto get_vic_charset::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #1
    cmp.z idx
    bne __b1_from___b2
    // [232] phi from get_vic_charset::@2 to get_vic_charset::@return [phi:get_vic_charset::@2->get_vic_charset::@return]
  __breturn_from___b2:
    // [232] phi (byte*) get_vic_charset::return#2 = (const nomodify byte*) VIC_BITMAP [phi:get_vic_charset::@2->get_vic_charset::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_BITMAP
    sta.z return
    lda #>VIC_BITMAP
    sta.z return+1
    jmp __breturn
    // [231] phi from get_vic_charset::@2 to get_vic_charset::@1 [phi:get_vic_charset::@2->get_vic_charset::@1]
  __b1_from___b2:
    jmp __b1
    // get_vic_charset::@1
  __b1:
    // [232] phi from get_vic_charset get_vic_charset::@1 to get_vic_charset::@return [phi:get_vic_charset/get_vic_charset::@1->get_vic_charset::@return]
  __breturn_from_get_vic_charset:
  __breturn_from___b1:
    // [232] phi (byte*) get_vic_charset::return#2 = (const nomodify byte*) VIC_CHARSET_ROM [phi:get_vic_charset/get_vic_charset::@1->get_vic_charset::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_CHARSET_ROM
    sta.z return
    lda #>VIC_CHARSET_ROM
    sta.z return+1
    jmp __breturn
    // get_vic_charset::@return
  __breturn:
    // [233] return 
    rts
}
  // get_plane
// Get plane address from a plane index (from the form)
// get_plane(byte zp($19) idx)
get_plane: {
    .label return = $1a
    .label idx = $19
    .label return_1 = $a0
    .label return_2 = $b9
    // [235] if((byte) get_plane::idx#10==(byte) 0) goto get_plane::@return -- vbuz1_eq_0_then_la1 
    lda.z idx
    cmp #0
    beq __breturn_from_get_plane
    jmp __b2
    // get_plane::@2
  __b2:
    // [236] if((byte) get_plane::idx#10==(byte) 1) goto get_plane::@return -- vbuz1_eq_vbuc1_then_la1 
    lda #1
    cmp.z idx
    beq __breturn_from___b2
    jmp __b3
    // get_plane::@3
  __b3:
    // [237] if((byte) get_plane::idx#10==(byte) 2) goto get_plane::@return -- vbuz1_eq_vbuc1_then_la1 
    lda #2
    cmp.z idx
    beq __breturn_from___b3
    jmp __b4
    // get_plane::@4
  __b4:
    // [238] if((byte) get_plane::idx#10==(byte) 3) goto get_plane::@return -- vbuz1_eq_vbuc1_then_la1 
    lda #3
    cmp.z idx
    beq __breturn_from___b4
    jmp __b5
    // get_plane::@5
  __b5:
    // [239] if((byte) get_plane::idx#10==(byte) 4) goto get_plane::@return -- vbuz1_eq_vbuc1_then_la1 
    lda #4
    cmp.z idx
    beq __breturn_from___b5
    jmp __b6
    // get_plane::@6
  __b6:
    // [240] if((byte) get_plane::idx#10==(byte) 5) goto get_plane::@return -- vbuz1_eq_vbuc1_then_la1 
    lda #5
    cmp.z idx
    beq __breturn_from___b6
    jmp __b7
    // get_plane::@7
  __b7:
    // [241] if((byte) get_plane::idx#10==(byte) 6) goto get_plane::@return -- vbuz1_eq_vbuc1_then_la1 
    lda #6
    cmp.z idx
    beq __breturn_from___b7
    jmp __b8
    // get_plane::@8
  __b8:
    // [242] if((byte) get_plane::idx#10==(byte) 7) goto get_plane::@return -- vbuz1_eq_vbuc1_then_la1 
    lda #7
    cmp.z idx
    beq __breturn_from___b8
    jmp __b9
    // get_plane::@9
  __b9:
    // [243] if((byte) get_plane::idx#10==(byte) 8) goto get_plane::@return -- vbuz1_eq_vbuc1_then_la1 
    lda #8
    cmp.z idx
    beq __breturn_from___b9
    jmp __b10
    // get_plane::@10
  __b10:
    // [244] if((byte) get_plane::idx#10==(byte) 9) goto get_plane::@return -- vbuz1_eq_vbuc1_then_la1 
    lda #9
    cmp.z idx
    beq __breturn_from___b10
    jmp __b11
    // get_plane::@11
  __b11:
    // [245] if((byte) get_plane::idx#10==(byte) $a) goto get_plane::@return -- vbuz1_eq_vbuc1_then_la1 
    lda #$a
    cmp.z idx
    beq __breturn_from___b11
    jmp __b12
    // get_plane::@12
  __b12:
    // [246] if((byte) get_plane::idx#10==(byte) $b) goto get_plane::@return -- vbuz1_eq_vbuc1_then_la1 
    lda #$b
    cmp.z idx
    beq __breturn_from___b12
    jmp __b13
    // get_plane::@13
  __b13:
    // [247] if((byte) get_plane::idx#10==(byte) $c) goto get_plane::@return -- vbuz1_eq_vbuc1_then_la1 
    lda #$c
    cmp.z idx
    beq __breturn_from___b13
    jmp __b14
    // get_plane::@14
  __b14:
    // [248] if((byte) get_plane::idx#10!=(byte) $d) goto get_plane::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$d
    cmp.z idx
    bne __b1_from___b14
    // [250] phi from get_plane::@14 to get_plane::@return [phi:get_plane::@14->get_plane::@return]
  __breturn_from___b14:
    // [250] phi (dword) get_plane::return#14 = (const nomodify dword) PLANE_FULL [phi:get_plane::@14->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_FULL
    sta.z return
    lda #>PLANE_FULL
    sta.z return+1
    lda #<PLANE_FULL>>$10
    sta.z return+2
    lda #>PLANE_FULL>>$10
    sta.z return+3
    jmp __breturn
    // [249] phi from get_plane::@14 to get_plane::@1 [phi:get_plane::@14->get_plane::@1]
  __b1_from___b14:
    jmp __b1
    // get_plane::@1
  __b1:
    // [250] phi from get_plane get_plane::@1 to get_plane::@return [phi:get_plane/get_plane::@1->get_plane::@return]
  __breturn_from_get_plane:
  __breturn_from___b1:
    // [250] phi (dword) get_plane::return#14 = (dword)(const nomodify byte*) VIC_SCREEN0 [phi:get_plane/get_plane::@1->get_plane::@return#0] -- vduz1=vduc1 
    lda #<VIC_SCREEN0
    sta.z return
    lda #>VIC_SCREEN0
    sta.z return+1
    lda #<VIC_SCREEN0>>$10
    sta.z return+2
    lda #>VIC_SCREEN0>>$10
    sta.z return+3
    jmp __breturn
    // [250] phi from get_plane::@10 to get_plane::@return [phi:get_plane::@10->get_plane::@return]
  __breturn_from___b10:
    // [250] phi (dword) get_plane::return#14 = (const nomodify dword) PLANE_HORISONTAL2 [phi:get_plane::@10->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_HORISONTAL2
    sta.z return
    lda #>PLANE_HORISONTAL2
    sta.z return+1
    lda #<PLANE_HORISONTAL2>>$10
    sta.z return+2
    lda #>PLANE_HORISONTAL2>>$10
    sta.z return+3
    jmp __breturn
    // [250] phi from get_plane::@11 to get_plane::@return [phi:get_plane::@11->get_plane::@return]
  __breturn_from___b11:
    // [250] phi (dword) get_plane::return#14 = (const nomodify dword) PLANE_VERTICAL2 [phi:get_plane::@11->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_VERTICAL2
    sta.z return
    lda #>PLANE_VERTICAL2
    sta.z return+1
    lda #<PLANE_VERTICAL2>>$10
    sta.z return+2
    lda #>PLANE_VERTICAL2>>$10
    sta.z return+3
    jmp __breturn
    // [250] phi from get_plane::@12 to get_plane::@return [phi:get_plane::@12->get_plane::@return]
  __breturn_from___b12:
    // [250] phi (dword) get_plane::return#14 = (const nomodify dword) PLANE_CHARSET8 [phi:get_plane::@12->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_CHARSET8
    sta.z return
    lda #>PLANE_CHARSET8
    sta.z return+1
    lda #<PLANE_CHARSET8>>$10
    sta.z return+2
    lda #>PLANE_CHARSET8>>$10
    sta.z return+3
    jmp __breturn
    // [250] phi from get_plane::@13 to get_plane::@return [phi:get_plane::@13->get_plane::@return]
  __breturn_from___b13:
    // [250] phi (dword) get_plane::return#14 = (const nomodify dword) PLANE_BLANK [phi:get_plane::@13->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_BLANK
    sta.z return
    lda #>PLANE_BLANK
    sta.z return+1
    lda #<PLANE_BLANK>>$10
    sta.z return+2
    lda #>PLANE_BLANK>>$10
    sta.z return+3
    jmp __breturn
    // [250] phi from get_plane::@2 to get_plane::@return [phi:get_plane::@2->get_plane::@return]
  __breturn_from___b2:
    // [250] phi (dword) get_plane::return#14 = (dword)(const nomodify byte*) VIC_SCREEN1 [phi:get_plane::@2->get_plane::@return#0] -- vduz1=vduc1 
    lda #<VIC_SCREEN1
    sta.z return
    lda #>VIC_SCREEN1
    sta.z return+1
    lda #<VIC_SCREEN1>>$10
    sta.z return+2
    lda #>VIC_SCREEN1>>$10
    sta.z return+3
    jmp __breturn
    // [250] phi from get_plane::@3 to get_plane::@return [phi:get_plane::@3->get_plane::@return]
  __breturn_from___b3:
    // [250] phi (dword) get_plane::return#14 = (dword)(const nomodify byte*) VIC_SCREEN2 [phi:get_plane::@3->get_plane::@return#0] -- vduz1=vduc1 
    lda #<VIC_SCREEN2
    sta.z return
    lda #>VIC_SCREEN2
    sta.z return+1
    lda #<VIC_SCREEN2>>$10
    sta.z return+2
    lda #>VIC_SCREEN2>>$10
    sta.z return+3
    jmp __breturn
    // [250] phi from get_plane::@4 to get_plane::@return [phi:get_plane::@4->get_plane::@return]
  __breturn_from___b4:
    // [250] phi (dword) get_plane::return#14 = (dword)(const nomodify byte*) VIC_SCREEN3 [phi:get_plane::@4->get_plane::@return#0] -- vduz1=vduc1 
    lda #<VIC_SCREEN3
    sta.z return
    lda #>VIC_SCREEN3
    sta.z return+1
    lda #<VIC_SCREEN3>>$10
    sta.z return+2
    lda #>VIC_SCREEN3>>$10
    sta.z return+3
    jmp __breturn
    // [250] phi from get_plane::@5 to get_plane::@return [phi:get_plane::@5->get_plane::@return]
  __breturn_from___b5:
    // [250] phi (dword) get_plane::return#14 = (dword)(const nomodify byte*) VIC_BITMAP [phi:get_plane::@5->get_plane::@return#0] -- vduz1=vduc1 
    lda #<VIC_BITMAP
    sta.z return
    lda #>VIC_BITMAP
    sta.z return+1
    lda #<VIC_BITMAP>>$10
    sta.z return+2
    lda #>VIC_BITMAP>>$10
    sta.z return+3
    jmp __breturn
    // [250] phi from get_plane::@6 to get_plane::@return [phi:get_plane::@6->get_plane::@return]
  __breturn_from___b6:
    // [250] phi (dword) get_plane::return#14 = (dword)(const nomodify byte*) VIC_CHARSET_ROM [phi:get_plane::@6->get_plane::@return#0] -- vduz1=vduc1 
    lda #<VIC_CHARSET_ROM
    sta.z return
    lda #>VIC_CHARSET_ROM
    sta.z return+1
    lda #<VIC_CHARSET_ROM>>$10
    sta.z return+2
    lda #>VIC_CHARSET_ROM>>$10
    sta.z return+3
    jmp __breturn
    // [250] phi from get_plane::@7 to get_plane::@return [phi:get_plane::@7->get_plane::@return]
  __breturn_from___b7:
    // [250] phi (dword) get_plane::return#14 = (const nomodify dword) PLANE_8BPP_CHUNKY [phi:get_plane::@7->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_8BPP_CHUNKY
    sta.z return
    lda #>PLANE_8BPP_CHUNKY
    sta.z return+1
    lda #<PLANE_8BPP_CHUNKY>>$10
    sta.z return+2
    lda #>PLANE_8BPP_CHUNKY>>$10
    sta.z return+3
    jmp __breturn
    // [250] phi from get_plane::@8 to get_plane::@return [phi:get_plane::@8->get_plane::@return]
  __breturn_from___b8:
    // [250] phi (dword) get_plane::return#14 = (const nomodify dword) PLANE_HORISONTAL [phi:get_plane::@8->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_HORISONTAL
    sta.z return
    lda #>PLANE_HORISONTAL
    sta.z return+1
    lda #<PLANE_HORISONTAL>>$10
    sta.z return+2
    lda #>PLANE_HORISONTAL>>$10
    sta.z return+3
    jmp __breturn
    // [250] phi from get_plane::@9 to get_plane::@return [phi:get_plane::@9->get_plane::@return]
  __breturn_from___b9:
    // [250] phi (dword) get_plane::return#14 = (const nomodify dword) PLANE_VERTICAL [phi:get_plane::@9->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_VERTICAL
    sta.z return
    lda #>PLANE_VERTICAL
    sta.z return+1
    lda #<PLANE_VERTICAL>>$10
    sta.z return+2
    lda #>PLANE_VERTICAL>>$10
    sta.z return+3
    jmp __breturn
    // get_plane::@return
  __breturn:
    // [251] return 
    rts
}
  // form_mode
// Show the form - and let the user change values
form_mode: {
    .label __11 = $104
    .label i = $1e
    .label preset_current = $21
    // [253] call print_set_screen 
  // Form Colors
    // [450] phi from form_mode to print_set_screen [phi:form_mode->print_set_screen]
  print_set_screen_from_form_mode:
    // [450] phi (byte*) print_set_screen::screen#2 = (const nomodify byte*) COLS [phi:form_mode->print_set_screen#0] -- pbuz1=pbuc1 
    lda #<COLS
    sta.z print_set_screen.screen
    lda #>COLS
    sta.z print_set_screen.screen+1
    jsr print_set_screen
    // [254] phi from form_mode to form_mode::@8 [phi:form_mode->form_mode::@8]
  __b8_from_form_mode:
    jmp __b8
    // form_mode::@8
  __b8:
    // [255] call print_cls 
    jsr print_cls
    // [256] phi from form_mode::@8 to form_mode::@9 [phi:form_mode::@8->form_mode::@9]
  __b9_from___b8:
    jmp __b9
    // form_mode::@9
  __b9:
    // [257] call print_str_lines 
    // [415] phi from form_mode::@9 to print_str_lines [phi:form_mode::@9->print_str_lines]
  print_str_lines_from___b9:
    // [415] phi (byte*) print_str_lines::str#5 = (const byte*) FORM_COLS [phi:form_mode::@9->print_str_lines#0] -- pbuz1=pbuc1 
    lda #<FORM_COLS
    sta.z print_str_lines.str
    lda #>FORM_COLS
    sta.z print_str_lines.str+1
    jsr print_str_lines
    // [258] phi from form_mode::@9 to form_mode::@10 [phi:form_mode::@9->form_mode::@10]
  __b10_from___b9:
    jmp __b10
    // form_mode::@10
  __b10:
    // [259] call print_set_screen 
  // Form Text
    // [450] phi from form_mode::@10 to print_set_screen [phi:form_mode::@10->print_set_screen]
  print_set_screen_from___b10:
    // [450] phi (byte*) print_set_screen::screen#2 = (const nomodify byte*) FORM_SCREEN [phi:form_mode::@10->print_set_screen#0] -- pbuz1=pbuc1 
    lda #<FORM_SCREEN
    sta.z print_set_screen.screen
    lda #>FORM_SCREEN
    sta.z print_set_screen.screen+1
    jsr print_set_screen
    // [260] phi from form_mode::@10 to form_mode::@11 [phi:form_mode::@10->form_mode::@11]
  __b11_from___b10:
    jmp __b11
    // form_mode::@11
  __b11:
    // [261] call print_cls 
    jsr print_cls
    // [262] phi from form_mode::@11 to form_mode::@12 [phi:form_mode::@11->form_mode::@12]
  __b12_from___b11:
    jmp __b12
    // form_mode::@12
  __b12:
    // [263] call print_str_lines 
    // [415] phi from form_mode::@12 to print_str_lines [phi:form_mode::@12->print_str_lines]
  print_str_lines_from___b12:
    // [415] phi (byte*) print_str_lines::str#5 = (const byte*) FORM_TEXT [phi:form_mode::@12->print_str_lines#0] -- pbuz1=pbuc1 
    lda #<FORM_TEXT
    sta.z print_str_lines.str
    lda #>FORM_TEXT
    sta.z print_str_lines.str+1
    jsr print_str_lines
    // [264] phi from form_mode::@12 to form_mode::@13 [phi:form_mode::@12->form_mode::@13]
  __b13_from___b12:
    jmp __b13
    // form_mode::@13
  __b13:
    // [265] call form_set_screen 
  // Form Fields
    // [405] phi from form_mode::@13 to form_set_screen [phi:form_mode::@13->form_set_screen]
  form_set_screen_from___b13:
    jsr form_set_screen
    // [266] phi from form_mode::@13 to form_mode::@14 [phi:form_mode::@13->form_mode::@14]
  __b14_from___b13:
    jmp __b14
    // form_mode::@14
  __b14:
    // [267] call form_render_values 
    // [328] phi from form_mode::@14 to form_render_values [phi:form_mode::@14->form_render_values]
  form_render_values_from___b14:
    jsr form_render_values
    jmp __b15
    // form_mode::@15
  __b15:
    // [268] (byte) render_preset_name::idx#0 ← *((const byte*) form_fields_val) -- vbuz1=_deref_pbuc1 
    lda form_fields_val
    sta.z render_preset_name.idx
    // [269] call render_preset_name 
    // [304] phi from form_mode::@15 to render_preset_name [phi:form_mode::@15->render_preset_name]
  render_preset_name_from___b15:
    // [304] phi (byte) render_preset_name::idx#10 = (byte) render_preset_name::idx#0 [phi:form_mode::@15->render_preset_name#0] -- register_copy 
    jsr render_preset_name
    jmp __b16
    // form_mode::@16
  __b16:
    // [270] *((const nomodify byte*) DTV_GRAPHICS_VIC_BANK) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // DTV Graphics Bank
    lda #0
    sta DTV_GRAPHICS_VIC_BANK
    // [271] *((const nomodify byte*) DTV_COLOR_BANK_LO) ← <(word)(const nomodify dword) DTV_COLOR_BANK_DEFAULT/(word) $400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #<DTV_COLOR_BANK_DEFAULT/$400
    sta DTV_COLOR_BANK_LO
    // [272] *((const nomodify byte*) DTV_COLOR_BANK_HI) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_COLOR_BANK_HI
    // [273] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) ← (byte) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR
    // [274] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2) ← (byte) 3 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3
    sta CIA2
    // [275] *((const nomodify byte*) DTV_CONTROL) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank
    // DTV Graphics Mode
    lda #0
    sta DTV_CONTROL
    // [276] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1) ← (const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(byte) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Mode
    lda #VIC_DEN|VIC_RSEL|3
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1
    // [277] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL2) ← (const nomodify byte) VIC_CSEL -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL2
    // [278] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_MEMORY) ← (byte)(word)(const nomodify byte*) FORM_SCREEN&(word) $3fff/(byte) $40|(word)(const nomodify byte*) FORM_CHARSET&(word) $3fff/(word) $400 -- _deref_pbuc1=vbuc2 
    // VIC Memory Pointers
    lda #(FORM_SCREEN&$3fff)/$40|(FORM_CHARSET&$3fff)/$400
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY
    // [279] *((const nomodify byte*) DTV_PLANEA_START_LO) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // DTV Plane A to FORM_SCREEN also
    lda #0
    sta DTV_PLANEA_START_LO
    // [280] *((const nomodify byte*) DTV_PLANEA_START_MI) ← >(const nomodify byte*) FORM_SCREEN -- _deref_pbuc1=vbuc2 
    lda #>FORM_SCREEN
    sta DTV_PLANEA_START_MI
    // [281] *((const nomodify byte*) DTV_PLANEA_START_HI) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_START_HI
    // [282] phi from form_mode::@16 to form_mode::@1 [phi:form_mode::@16->form_mode::@1]
  __b1_from___b16:
    // [282] phi (byte) form_mode::i#2 = (byte) 0 [phi:form_mode::@16->form_mode::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
  // DTV Palette - default
    // [282] phi from form_mode::@1 to form_mode::@1 [phi:form_mode::@1->form_mode::@1]
  __b1_from___b1:
    // [282] phi (byte) form_mode::i#2 = (byte) form_mode::i#1 [phi:form_mode::@1->form_mode::@1#0] -- register_copy 
    jmp __b1
    // form_mode::@1
  __b1:
    // [283] *((const nomodify byte*) DTV_PALETTE + (byte) form_mode::i#2) ← *((const byte*) DTV_PALETTE_DEFAULT + (byte) form_mode::i#2) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz1 
    ldy.z i
    lda DTV_PALETTE_DEFAULT,y
    sta DTV_PALETTE,y
    // [284] (byte) form_mode::i#1 ← ++ (byte) form_mode::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [285] if((byte) form_mode::i#1!=(byte) $10) goto form_mode::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$10
    cmp.z i
    bne __b1_from___b1
    jmp __b2
    // form_mode::@2
  __b2:
    // [286] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR
    // [287] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // [288] (byte) form_mode::preset_current#0 ← *((const byte*) form_fields_val) -- vbuz1=_deref_pbuc1 
    lda form_fields_val
    sta.z preset_current
    // [289] phi from form_mode::@19 form_mode::@2 form_mode::@6 to form_mode::@3 [phi:form_mode::@19/form_mode::@2/form_mode::@6->form_mode::@3]
  __b3_from___b19:
  __b3_from___b2:
  __b3_from___b6:
    // [289] phi (byte) form_mode::preset_current#6 = (byte) form_mode::preset_current#1 [phi:form_mode::@19/form_mode::@2/form_mode::@6->form_mode::@3#0] -- register_copy 
    // [289] phi (byte) form_field_idx#28 = (byte) form_field_idx#18 [phi:form_mode::@19/form_mode::@2/form_mode::@6->form_mode::@3#1] -- register_copy 
    // [289] phi (byte) keyboard_events_size#47 = (byte) keyboard_events_size#24 [phi:form_mode::@19/form_mode::@2/form_mode::@6->form_mode::@3#2] -- register_copy 
    // [289] phi (signed byte) form_cursor_count#21 = (signed byte) form_cursor_count#16 [phi:form_mode::@19/form_mode::@2/form_mode::@6->form_mode::@3#3] -- register_copy 
    jmp __b3
  // Let the user change values in the form
    // form_mode::@3
  __b3:
    jmp __b4
    // form_mode::@4
  __b4:
    // [290] if(*((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)!=(byte) $ff) goto form_mode::@4 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    bne __b4
    // [291] phi from form_mode::@4 to form_mode::@5 [phi:form_mode::@4->form_mode::@5]
  __b5_from___b4:
    jmp __b5
    // form_mode::@5
  __b5:
    // [292] call form_control 
    jsr form_control
    // [293] (byte) form_control::return#0 ← (byte) form_control::return#2 -- vbuz1=vbuz2 
    lda.z form_control.return_1
    sta.z form_control.return
    jmp __b17
    // form_mode::@17
  __b17:
    // [294] (byte~) form_mode::$11 ← (byte) form_control::return#0 -- vbuz1=vbuz2 
    lda.z form_control.return
    sta.z __11
    // [295] if((byte~) form_mode::$11==(byte) 0) goto form_mode::@6 -- vbuz1_eq_0_then_la1 
    lda.z __11
    cmp #0
    beq __b6
    jmp __breturn
    // form_mode::@return
  __breturn:
    // [296] return 
    rts
    // form_mode::@6
  __b6:
    // [297] if((byte) form_mode::preset_current#6==*((const byte*) form_fields_val)) goto form_mode::@3 -- vbuz1_eq__deref_pbuc1_then_la1 
    lda form_fields_val
    cmp.z preset_current
    beq __b3_from___b6
    jmp __b7
    // form_mode::@7
  __b7:
    // [298] (byte) apply_preset::idx#0 ← *((const byte*) form_fields_val) -- vbuz1=_deref_pbuc1 
    lda form_fields_val
    sta.z apply_preset.idx
    // [299] call apply_preset 
    // Preset changed - update field values and render
    jsr apply_preset
    jmp __b18
    // form_mode::@18
  __b18:
    // [300] (byte) form_mode::preset_current#1 ← *((const byte*) form_fields_val) -- vbuz1=_deref_pbuc1 
    lda form_fields_val
    sta.z preset_current
    // [301] call form_render_values 
    // [328] phi from form_mode::@18 to form_render_values [phi:form_mode::@18->form_render_values]
  form_render_values_from___b18:
    jsr form_render_values
    jmp __b19
    // form_mode::@19
  __b19:
    // [302] (byte) render_preset_name::idx#1 ← *((const byte*) form_fields_val) -- vbuz1=_deref_pbuc1 
    lda form_fields_val
    sta.z render_preset_name.idx
    // [303] call render_preset_name 
    // [304] phi from form_mode::@19 to render_preset_name [phi:form_mode::@19->render_preset_name]
  render_preset_name_from___b19:
    // [304] phi (byte) render_preset_name::idx#10 = (byte) render_preset_name::idx#1 [phi:form_mode::@19->render_preset_name#0] -- register_copy 
    jsr render_preset_name
    jmp __b3_from___b19
}
  // render_preset_name
// Render form preset name in the form
// idx is the ID of the preset
// render_preset_name(byte zp($22) idx)
render_preset_name: {
    .label idx = $22
    .label name = $23
    // [305] if((byte) render_preset_name::idx#10==(byte) 0) goto render_preset_name::@2 -- vbuz1_eq_0_then_la1 
    lda.z idx
    cmp #0
    beq __b2_from_render_preset_name
    jmp __b3
    // render_preset_name::@3
  __b3:
    // [306] if((byte) render_preset_name::idx#10==(byte) 1) goto render_preset_name::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda #1
    cmp.z idx
    beq __b2_from___b3
    jmp __b4
    // render_preset_name::@4
  __b4:
    // [307] if((byte) render_preset_name::idx#10==(byte) 2) goto render_preset_name::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda #2
    cmp.z idx
    beq __b2_from___b4
    jmp __b5
    // render_preset_name::@5
  __b5:
    // [308] if((byte) render_preset_name::idx#10==(byte) 3) goto render_preset_name::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda #3
    cmp.z idx
    beq __b2_from___b5
    jmp __b6
    // render_preset_name::@6
  __b6:
    // [309] if((byte) render_preset_name::idx#10==(byte) 4) goto render_preset_name::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda #4
    cmp.z idx
    beq __b2_from___b6
    jmp __b7
    // render_preset_name::@7
  __b7:
    // [310] if((byte) render_preset_name::idx#10==(byte) 5) goto render_preset_name::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda #5
    cmp.z idx
    beq __b2_from___b7
    jmp __b8
    // render_preset_name::@8
  __b8:
    // [311] if((byte) render_preset_name::idx#10==(byte) 6) goto render_preset_name::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda #6
    cmp.z idx
    beq __b2_from___b8
    jmp __b9
    // render_preset_name::@9
  __b9:
    // [312] if((byte) render_preset_name::idx#10==(byte) 7) goto render_preset_name::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda #7
    cmp.z idx
    beq __b2_from___b9
    jmp __b10
    // render_preset_name::@10
  __b10:
    // [313] if((byte) render_preset_name::idx#10==(byte) 8) goto render_preset_name::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda #8
    cmp.z idx
    beq __b2_from___b10
    jmp __b11
    // render_preset_name::@11
  __b11:
    // [314] if((byte) render_preset_name::idx#10==(byte) 9) goto render_preset_name::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda #9
    cmp.z idx
    beq __b2_from___b11
    jmp __b12
    // render_preset_name::@12
  __b12:
    // [315] if((byte) render_preset_name::idx#10==(byte) $a) goto render_preset_name::@1 -- vbuz1_eq_vbuc1_then_la1 
    lda #$a
    cmp.z idx
    beq __b1_from___b12
    // [317] phi from render_preset_name render_preset_name::@12 to render_preset_name::@2 [phi:render_preset_name/render_preset_name::@12->render_preset_name::@2]
  __b2_from_render_preset_name:
  __b2_from___b12:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#1 [phi:render_preset_name/render_preset_name::@12->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_1
    sta.z name
    lda #>name_1
    sta.z name+1
    jmp __b2
    // [316] phi from render_preset_name::@12 to render_preset_name::@1 [phi:render_preset_name::@12->render_preset_name::@1]
  __b1_from___b12:
    jmp __b1
    // render_preset_name::@1
  __b1:
    // [317] phi from render_preset_name::@1 to render_preset_name::@2 [phi:render_preset_name::@1->render_preset_name::@2]
  __b2_from___b1:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#11 [phi:render_preset_name::@1->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_11
    sta.z name
    lda #>name_11
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@10 to render_preset_name::@2 [phi:render_preset_name::@10->render_preset_name::@2]
  __b2_from___b10:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#9 [phi:render_preset_name::@10->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_9
    sta.z name
    lda #>name_9
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@11 to render_preset_name::@2 [phi:render_preset_name::@11->render_preset_name::@2]
  __b2_from___b11:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#10 [phi:render_preset_name::@11->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_10
    sta.z name
    lda #>name_10
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@3 to render_preset_name::@2 [phi:render_preset_name::@3->render_preset_name::@2]
  __b2_from___b3:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#2 [phi:render_preset_name::@3->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_2
    sta.z name
    lda #>name_2
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@4 to render_preset_name::@2 [phi:render_preset_name::@4->render_preset_name::@2]
  __b2_from___b4:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#3 [phi:render_preset_name::@4->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_3
    sta.z name
    lda #>name_3
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@5 to render_preset_name::@2 [phi:render_preset_name::@5->render_preset_name::@2]
  __b2_from___b5:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#4 [phi:render_preset_name::@5->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_4
    sta.z name
    lda #>name_4
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@6 to render_preset_name::@2 [phi:render_preset_name::@6->render_preset_name::@2]
  __b2_from___b6:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#5 [phi:render_preset_name::@6->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_5
    sta.z name
    lda #>name_5
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@7 to render_preset_name::@2 [phi:render_preset_name::@7->render_preset_name::@2]
  __b2_from___b7:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#6 [phi:render_preset_name::@7->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_6
    sta.z name
    lda #>name_6
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@8 to render_preset_name::@2 [phi:render_preset_name::@8->render_preset_name::@2]
  __b2_from___b8:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#7 [phi:render_preset_name::@8->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_7
    sta.z name
    lda #>name_7
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@9 to render_preset_name::@2 [phi:render_preset_name::@9->render_preset_name::@2]
  __b2_from___b9:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#8 [phi:render_preset_name::@9->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_8
    sta.z name
    lda #>name_8
    sta.z name+1
    jmp __b2
    // render_preset_name::@2
  __b2:
    // [318] (byte*) print_str_at::str#1 ← (byte*) render_preset_name::name#13 -- pbuz1=pbuz2 
    lda.z name
    sta.z print_str_at.str
    lda.z name+1
    sta.z print_str_at.str+1
    // [319] call print_str_at 
  // Render it
    // [321] phi from render_preset_name::@2 to print_str_at [phi:render_preset_name::@2->print_str_at]
  print_str_at_from___b2:
    jsr print_str_at
    jmp __breturn
    // render_preset_name::@return
  __breturn:
    // [320] return 
    rts
    name_1: .text "Standard Charset              "
    .byte 0
    name_2: .text "Extended Color Charset        "
    .byte 0
    name_3: .text "Standard Bitmap               "
    .byte 0
    name_4: .text "Multicolor Bitmap             "
    .byte 0
    name_5: .text "Hicolor Charset               "
    .byte 0
    name_6: .text "Hicolor Extended Color Charset"
    .byte 0
    name_7: .text "Twoplane Bitmap               "
    .byte 0
    name_8: .text "Chunky 8bpp                   "
    .byte 0
    name_9: .text "Sixs Fred                     "
    .byte 0
    name_10: .text "Sixs Fred 2                   "
    .byte 0
    name_11: .text "8bpp Pixel Cell               "
    .byte 0
}
  // print_str_at
// Print a string at a specific screen position
// print_str_at(byte* zp($25) str, byte* zp($27) at)
print_str_at: {
    .label at = $27
    .label str = $25
    // [322] phi from print_str_at to print_str_at::@1 [phi:print_str_at->print_str_at::@1]
  __b1_from_print_str_at:
    // [322] phi (byte*) print_str_at::at#2 = (const nomodify byte*) FORM_SCREEN+(byte)(number) $28*(number) 2+(byte) $a [phi:print_str_at->print_str_at::@1#0] -- pbuz1=pbuc1 
    lda #<FORM_SCREEN+$28*2+$a
    sta.z at
    lda #>FORM_SCREEN+$28*2+$a
    sta.z at+1
    // [322] phi (byte*) print_str_at::str#2 = (byte*) print_str_at::str#1 [phi:print_str_at->print_str_at::@1#1] -- register_copy 
    jmp __b1
    // print_str_at::@1
  __b1:
    // [323] if((byte) 0!=*((byte*) print_str_at::str#2)) goto print_str_at::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // print_str_at::@return
  __breturn:
    // [324] return 
    rts
    // print_str_at::@2
  __b2:
    // [325] *((byte*) print_str_at::at#2) ← *((byte*) print_str_at::str#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (at),y
    // [326] (byte*) print_str_at::at#0 ← ++ (byte*) print_str_at::at#2 -- pbuz1=_inc_pbuz1 
    inc.z at
    bne !+
    inc.z at+1
  !:
    // [327] (byte*) print_str_at::str#0 ← ++ (byte*) print_str_at::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [322] phi from print_str_at::@2 to print_str_at::@1 [phi:print_str_at::@2->print_str_at::@1]
  __b1_from___b2:
    // [322] phi (byte*) print_str_at::at#2 = (byte*) print_str_at::at#0 [phi:print_str_at::@2->print_str_at::@1#0] -- register_copy 
    // [322] phi (byte*) print_str_at::str#2 = (byte*) print_str_at::str#0 [phi:print_str_at::@2->print_str_at::@1#1] -- register_copy 
    jmp __b1
}
  // form_render_values
// Render all form values from the form_fields_val array
form_render_values: {
    .label idx = $29
    // [329] phi from form_render_values to form_render_values::@1 [phi:form_render_values->form_render_values::@1]
  __b1_from_form_render_values:
    // [329] phi (byte) form_render_values::idx#2 = (byte) 0 [phi:form_render_values->form_render_values::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z idx
    jmp __b1
    // form_render_values::@1
  __b1:
    // [330] if((byte) form_render_values::idx#2<(const byte) form_fields_cnt) goto form_render_values::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z idx
    cmp #form_fields_cnt
    bcc __b2
    jmp __breturn
    // form_render_values::@return
  __breturn:
    // [331] return 
    rts
    // form_render_values::@2
  __b2:
    // [332] (byte) form_field_ptr::field_idx#0 ← (byte) form_render_values::idx#2 -- vbuz1=vbuz2 
    lda.z idx
    sta.z form_field_ptr.field_idx
    // [333] call form_field_ptr 
    // [336] phi from form_render_values::@2 to form_field_ptr [phi:form_render_values::@2->form_field_ptr]
  form_field_ptr_from___b2:
    // [336] phi (byte) form_field_ptr::field_idx#2 = (byte) form_field_ptr::field_idx#0 [phi:form_render_values::@2->form_field_ptr#0] -- register_copy 
    jsr form_field_ptr
    jmp __b3
    // form_render_values::@3
  __b3:
    // [334] *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) ← *((const to_nomodify byte*) print_hextab + *((const byte*) form_fields_val + (byte) form_render_values::idx#2)) -- pbuz1_derefidx_vbuz2=pbuc1_derefidx_(pbuc2_derefidx_vbuz3) 
    ldx.z idx
    ldy form_fields_val,x
    lda print_hextab,y
    ldy.z form_field_ptr.x
    sta (form_field_ptr.line),y
    // [335] (byte) form_render_values::idx#1 ← ++ (byte) form_render_values::idx#2 -- vbuz1=_inc_vbuz1 
    inc.z idx
    // [329] phi from form_render_values::@3 to form_render_values::@1 [phi:form_render_values::@3->form_render_values::@1]
  __b1_from___b3:
    // [329] phi (byte) form_render_values::idx#2 = (byte) form_render_values::idx#1 [phi:form_render_values::@3->form_render_values::@1#0] -- register_copy 
    jmp __b1
}
  // form_field_ptr
// Get the screen address of a form field
// field_idx is the index of the field to get the screen address for
// form_field_ptr(byte zp($2a) field_idx)
form_field_ptr: {
    .label y = $106
    .label line = $107
    .label x = $109
    .label return = $10a
    .label field_idx = $2a
    .label return_1 = $10c
    // [337] (byte) form_field_ptr::y#0 ← *((const byte*) form_fields_y + (byte) form_field_ptr::field_idx#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z field_idx
    lda form_fields_y,y
    sta.z y
    // [338] (word) form_field_ptr::line#0 ← *((const byte*) form_line_hi + (byte) form_field_ptr::y#0) w= *((const byte*) form_line_lo + (byte) form_field_ptr::y#0) -- vwuz1=pbuc1_derefidx_vbuz2_word_pbuc2_derefidx_vbuz2 
    ldy.z y
    lda form_line_hi,y
    sta.z line+1
    lda form_line_lo,y
    sta.z line
    // [339] (byte) form_field_ptr::x#0 ← *((const byte*) form_fields_x + (byte) form_field_ptr::field_idx#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z field_idx
    lda form_fields_x,y
    sta.z x
    // [340] (byte*) form_field_ptr::return#0 ← (byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0 -- pbuz1=pbuz2_plus_vbuz3 
    lda.z x
    clc
    adc.z line
    sta.z return
    lda #0
    adc.z line+1
    sta.z return+1
    jmp __breturn
    // form_field_ptr::@return
  __breturn:
    // [341] return 
    rts
}
  // apply_preset
// Apply a form value preset to the form values
// idx is the ID of the preset
// apply_preset(byte zp($105) idx)
apply_preset: {
    .label i = $2d
    .label idx = $105
    .label preset = $2b
    // [342] if((byte) apply_preset::idx#0==(byte) 0) goto apply_preset::@2 -- vbuz1_eq_0_then_la1 
    lda.z idx
    cmp #0
    beq __b2_from_apply_preset
    jmp __b3
    // apply_preset::@3
  __b3:
    // [343] if((byte) apply_preset::idx#0==(byte) 1) goto apply_preset::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda #1
    cmp.z idx
    beq __b2_from___b3
    jmp __b4
    // apply_preset::@4
  __b4:
    // [344] if((byte) apply_preset::idx#0==(byte) 2) goto apply_preset::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda #2
    cmp.z idx
    beq __b2_from___b4
    jmp __b5
    // apply_preset::@5
  __b5:
    // [345] if((byte) apply_preset::idx#0==(byte) 3) goto apply_preset::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda #3
    cmp.z idx
    beq __b2_from___b5
    jmp __b6
    // apply_preset::@6
  __b6:
    // [346] if((byte) apply_preset::idx#0==(byte) 4) goto apply_preset::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda #4
    cmp.z idx
    beq __b2_from___b6
    jmp __b7
    // apply_preset::@7
  __b7:
    // [347] if((byte) apply_preset::idx#0==(byte) 5) goto apply_preset::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda #5
    cmp.z idx
    beq __b2_from___b7
    jmp __b8
    // apply_preset::@8
  __b8:
    // [348] if((byte) apply_preset::idx#0==(byte) 6) goto apply_preset::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda #6
    cmp.z idx
    beq __b2_from___b8
    jmp __b9
    // apply_preset::@9
  __b9:
    // [349] if((byte) apply_preset::idx#0==(byte) 7) goto apply_preset::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda #7
    cmp.z idx
    beq __b2_from___b9
    jmp __b10
    // apply_preset::@10
  __b10:
    // [350] if((byte) apply_preset::idx#0==(byte) 8) goto apply_preset::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda #8
    cmp.z idx
    beq __b2_from___b10
    jmp __b11
    // apply_preset::@11
  __b11:
    // [351] if((byte) apply_preset::idx#0==(byte) 9) goto apply_preset::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda #9
    cmp.z idx
    beq __b2_from___b11
    jmp __b12
    // apply_preset::@12
  __b12:
    // [352] if((byte) apply_preset::idx#0==(byte) $a) goto apply_preset::@1 -- vbuz1_eq_vbuc1_then_la1 
    lda #$a
    cmp.z idx
    beq __b1_from___b12
    // [354] phi from apply_preset apply_preset::@12 to apply_preset::@2 [phi:apply_preset/apply_preset::@12->apply_preset::@2]
  __b2_from_apply_preset:
  __b2_from___b12:
    // [354] phi (byte*) apply_preset::preset#15 = (const byte*) preset_stdchar [phi:apply_preset/apply_preset::@12->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_stdchar
    sta.z preset
    lda #>preset_stdchar
    sta.z preset+1
    jmp __b2
    // [353] phi from apply_preset::@12 to apply_preset::@1 [phi:apply_preset::@12->apply_preset::@1]
  __b1_from___b12:
    jmp __b1
    // apply_preset::@1
  __b1:
    // [354] phi from apply_preset::@1 to apply_preset::@2 [phi:apply_preset::@1->apply_preset::@2]
  __b2_from___b1:
    // [354] phi (byte*) apply_preset::preset#15 = (const byte*) preset_8bpppixelcell [phi:apply_preset::@1->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_8bpppixelcell
    sta.z preset
    lda #>preset_8bpppixelcell
    sta.z preset+1
    jmp __b2
    // [354] phi from apply_preset::@10 to apply_preset::@2 [phi:apply_preset::@10->apply_preset::@2]
  __b2_from___b10:
    // [354] phi (byte*) apply_preset::preset#15 = (const byte*) preset_sixsfred [phi:apply_preset::@10->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_sixsfred
    sta.z preset
    lda #>preset_sixsfred
    sta.z preset+1
    jmp __b2
    // [354] phi from apply_preset::@11 to apply_preset::@2 [phi:apply_preset::@11->apply_preset::@2]
  __b2_from___b11:
    // [354] phi (byte*) apply_preset::preset#15 = (const byte*) preset_sixsfred2 [phi:apply_preset::@11->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_sixsfred2
    sta.z preset
    lda #>preset_sixsfred2
    sta.z preset+1
    jmp __b2
    // [354] phi from apply_preset::@3 to apply_preset::@2 [phi:apply_preset::@3->apply_preset::@2]
  __b2_from___b3:
    // [354] phi (byte*) apply_preset::preset#15 = (const byte*) preset_ecmchar [phi:apply_preset::@3->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_ecmchar
    sta.z preset
    lda #>preset_ecmchar
    sta.z preset+1
    jmp __b2
    // [354] phi from apply_preset::@4 to apply_preset::@2 [phi:apply_preset::@4->apply_preset::@2]
  __b2_from___b4:
    // [354] phi (byte*) apply_preset::preset#15 = (const byte*) preset_stdbm [phi:apply_preset::@4->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_stdbm
    sta.z preset
    lda #>preset_stdbm
    sta.z preset+1
    jmp __b2
    // [354] phi from apply_preset::@5 to apply_preset::@2 [phi:apply_preset::@5->apply_preset::@2]
  __b2_from___b5:
    // [354] phi (byte*) apply_preset::preset#15 = (const byte*) preset_mcbm [phi:apply_preset::@5->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_mcbm
    sta.z preset
    lda #>preset_mcbm
    sta.z preset+1
    jmp __b2
    // [354] phi from apply_preset::@6 to apply_preset::@2 [phi:apply_preset::@6->apply_preset::@2]
  __b2_from___b6:
    // [354] phi (byte*) apply_preset::preset#15 = (const byte*) preset_hi_stdchar [phi:apply_preset::@6->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_hi_stdchar
    sta.z preset
    lda #>preset_hi_stdchar
    sta.z preset+1
    jmp __b2
    // [354] phi from apply_preset::@7 to apply_preset::@2 [phi:apply_preset::@7->apply_preset::@2]
  __b2_from___b7:
    // [354] phi (byte*) apply_preset::preset#15 = (const byte*) preset_hi_ecmchar [phi:apply_preset::@7->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_hi_ecmchar
    sta.z preset
    lda #>preset_hi_ecmchar
    sta.z preset+1
    jmp __b2
    // [354] phi from apply_preset::@8 to apply_preset::@2 [phi:apply_preset::@8->apply_preset::@2]
  __b2_from___b8:
    // [354] phi (byte*) apply_preset::preset#15 = (const byte*) preset_twoplane [phi:apply_preset::@8->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_twoplane
    sta.z preset
    lda #>preset_twoplane
    sta.z preset+1
    jmp __b2
    // [354] phi from apply_preset::@9 to apply_preset::@2 [phi:apply_preset::@9->apply_preset::@2]
  __b2_from___b9:
    // [354] phi (byte*) apply_preset::preset#15 = (const byte*) preset_chunky [phi:apply_preset::@9->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_chunky
    sta.z preset
    lda #>preset_chunky
    sta.z preset+1
    jmp __b2
    // apply_preset::@2
  __b2:
    // [355] phi from apply_preset::@2 to apply_preset::@13 [phi:apply_preset::@2->apply_preset::@13]
  __b13_from___b2:
    // [355] phi (byte) apply_preset::i#2 = (byte) 0 [phi:apply_preset::@2->apply_preset::@13#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b13
  // Copy preset values into the fields
    // apply_preset::@13
  __b13:
    // [356] if((byte) apply_preset::i#2!=(const byte) form_fields_cnt) goto apply_preset::@14 -- vbuz1_neq_vbuc1_then_la1 
    lda #form_fields_cnt
    cmp.z i
    bne __b14
    jmp __breturn
    // apply_preset::@return
  __breturn:
    // [357] return 
    rts
    // apply_preset::@14
  __b14:
    // [358] *((const byte*) form_fields_val + (byte) apply_preset::i#2) ← *((byte*) apply_preset::preset#15 + (byte) apply_preset::i#2) -- pbuc1_derefidx_vbuz1=pbuz2_derefidx_vbuz1 
    ldy.z i
    lda (preset),y
    sta form_fields_val,y
    // [359] (byte) apply_preset::i#1 ← ++ (byte) apply_preset::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [355] phi from apply_preset::@14 to apply_preset::@13 [phi:apply_preset::@14->apply_preset::@13]
  __b13_from___b14:
    // [355] phi (byte) apply_preset::i#2 = (byte) apply_preset::i#1 [phi:apply_preset::@14->apply_preset::@13#0] -- register_copy 
    jmp __b13
}
  // form_control
// Reads keyboard and allows the user to navigate and change the fields of the form
// Returns 0 if space is not pressed, non-0 if space is pressed
form_control: {
    .label __12 = $110
    .label __13 = $116
    .label __14 = $113
    .label __15 = $114
    .label __22 = $115
    // Return to refresh
    .label return = $103
    .label field = $10e
    .label key_event = $112
    // Return to refresh
    .label return_1 = $2e
    // [360] (byte) form_field_ptr::field_idx#1 ← (byte) form_field_idx#28 -- vbuz1=vbuz2 
    lda.z form_field_idx
    sta.z form_field_ptr.field_idx
    // [361] call form_field_ptr 
    // [336] phi from form_control to form_field_ptr [phi:form_control->form_field_ptr]
  form_field_ptr_from_form_control:
    // [336] phi (byte) form_field_ptr::field_idx#2 = (byte) form_field_ptr::field_idx#1 [phi:form_control->form_field_ptr#0] -- register_copy 
    jsr form_field_ptr
    // [362] (byte*) form_field_ptr::return#3 ← (byte*) form_field_ptr::return#0 -- pbuz1=pbuz2 
    lda.z form_field_ptr.return
    sta.z form_field_ptr.return_1
    lda.z form_field_ptr.return+1
    sta.z form_field_ptr.return_1+1
    jmp __b18
    // form_control::@18
  __b18:
    // [363] (byte*) form_control::field#0 ← (byte*) form_field_ptr::return#3 -- pbuz1=pbuz2 
    lda.z form_field_ptr.return_1
    sta.z field
    lda.z form_field_ptr.return_1+1
    sta.z field+1
    // [364] (signed byte) form_cursor_count#5 ← -- (signed byte) form_cursor_count#21 -- vbsz1=_dec_vbsz1 
    dec.z form_cursor_count
    // [365] if((signed byte) form_cursor_count#5>=(signed byte) 0) goto form_control::@21 -- vbsz1_ge_0_then_la1 
    lda.z form_cursor_count
    cmp #0
    bpl __b21_from___b18
    // [367] phi from form_control::@18 to form_control::@1 [phi:form_control::@18->form_control::@1]
  __b1_from___b18:
    // [367] phi (signed byte) form_cursor_count#15 = (const nomodify signed byte) FORM_CURSOR_BLINK [phi:form_control::@18->form_control::@1#0] -- vbsz1=vbsc1 
    lda #FORM_CURSOR_BLINK
    sta.z form_cursor_count
    jmp __b1
    // [366] phi from form_control::@18 to form_control::@21 [phi:form_control::@18->form_control::@21]
  __b21_from___b18:
    jmp __b21
    // form_control::@21
  __b21:
    // [367] phi from form_control::@21 to form_control::@1 [phi:form_control::@21->form_control::@1]
  __b1_from___b21:
    // [367] phi (signed byte) form_cursor_count#15 = (signed byte) form_cursor_count#5 [phi:form_control::@21->form_control::@1#0] -- register_copy 
    jmp __b1
    // form_control::@1
  __b1:
    // [368] if((signed byte) form_cursor_count#15<(const nomodify signed byte) FORM_CURSOR_BLINK/(signed byte) 2) goto form_control::@2 -- vbsz1_lt_vbsc1_then_la1 
    lda.z form_cursor_count
    sec
    sbc #FORM_CURSOR_BLINK/2
    bvc !+
    eor #$80
  !:
    bmi __b2
    jmp __b7
    // form_control::@7
  __b7:
    // [369] (byte~) form_control::$12 ← *((byte*) form_control::field#0) & (byte) $7f -- vbuz1=_deref_pbuz2_band_vbuc1 
    lda #$7f
    ldy #0
    and (field),y
    sta.z __12
    // [370] *((byte*) form_control::field#0) ← (byte~) form_control::$12 -- _deref_pbuz1=vbuz2 
    lda.z __12
    ldy #0
    sta (field),y
    // [371] phi from form_control::@2 form_control::@7 to form_control::@3 [phi:form_control::@2/form_control::@7->form_control::@3]
  __b3_from___b2:
  __b3_from___b7:
    jmp __b3
    // form_control::@3
  __b3:
    // [372] call keyboard_event_scan 
  // Scan the keyboard
    // [157] phi from form_control::@3 to keyboard_event_scan [phi:form_control::@3->keyboard_event_scan]
  keyboard_event_scan_from___b3:
    // [157] phi (byte) keyboard_events_size#97 = (byte) keyboard_events_size#47 [phi:form_control::@3->keyboard_event_scan#0] -- register_copy 
    jsr keyboard_event_scan
    // [373] phi from form_control::@3 to form_control::@19 [phi:form_control::@3->form_control::@19]
  __b19_from___b3:
    jmp __b19
    // form_control::@19
  __b19:
    // [374] call keyboard_event_get 
    jsr keyboard_event_get
    // [375] (byte) keyboard_event_get::return#4 ← (byte) keyboard_event_get::return#2 -- vbuz1=vbuz2 
    lda.z keyboard_event_get.return
    sta.z keyboard_event_get.return_2
    jmp __b20
    // form_control::@20
  __b20:
    // [376] (byte) form_control::key_event#0 ← (byte) keyboard_event_get::return#4 -- vbuz1=vbuz2 
    lda.z keyboard_event_get.return_2
    sta.z key_event
    // [377] if((byte) form_control::key_event#0!=(const nomodify byte) KEY_CRSR_DOWN) goto form_control::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #KEY_CRSR_DOWN
    cmp.z key_event
    bne __b4
    jmp __b8
    // form_control::@8
  __b8:
    // [378] (byte~) form_control::$14 ← *((byte*) form_control::field#0) & (byte) $7f -- vbuz1=_deref_pbuz2_band_vbuc1 
    lda #$7f
    ldy #0
    and (field),y
    sta.z __14
    // [379] *((byte*) form_control::field#0) ← (byte~) form_control::$14 -- _deref_pbuz1=vbuz2 
    // Unblink the cursor
    lda.z __14
    ldy #0
    sta (field),y
    // [380] (byte~) form_control::$15 ← (byte) keyboard_modifiers#21 & (const nomodify byte) KEY_MODIFIER_SHIFT -- vbuz1=vbuz2_band_vbuc1 
    lda #KEY_MODIFIER_SHIFT
    and.z keyboard_modifiers
    sta.z __15
    // [381] if((byte~) form_control::$15==(byte) 0) goto form_control::@13 -- vbuz1_eq_0_then_la1 
    lda.z __15
    cmp #0
    beq __b13
    jmp __b9
    // form_control::@9
  __b9:
    // [382] (byte) form_field_idx#6 ← -- (byte) form_field_idx#28 -- vbuz1=_dec_vbuz1 
    dec.z form_field_idx
    // [383] if((byte) form_field_idx#6!=(byte) $ff) goto form_control::@22 -- vbuz1_neq_vbuc1_then_la1 
    lda #$ff
    cmp.z form_field_idx
    bne __b22_from___b9
    // [385] phi from form_control::@9 to form_control::@14 [phi:form_control::@9->form_control::@14]
  __b14_from___b9:
    // [385] phi (byte) form_field_idx#31 = (const byte) form_fields_cnt-(byte) 1 [phi:form_control::@9->form_control::@14#0] -- vbuz1=vbuc1 
    lda #form_fields_cnt-1
    sta.z form_field_idx
    jmp __b14
    // [384] phi from form_control::@9 to form_control::@22 [phi:form_control::@9->form_control::@22]
  __b22_from___b9:
    jmp __b22
    // form_control::@22
  __b22:
    // [385] phi from form_control::@22 form_control::@23 to form_control::@14 [phi:form_control::@22/form_control::@23->form_control::@14]
  __b14_from___b22:
  __b14_from___b23:
    // [385] phi (byte) form_field_idx#31 = (byte) form_field_idx#6 [phi:form_control::@22/form_control::@23->form_control::@14#0] -- register_copy 
    jmp __b14
    // form_control::@14
  __b14:
    // [386] phi from form_control::@14 to form_control::@return [phi:form_control::@14->form_control::@return]
  __breturn_from___b14:
    // [386] phi (byte) form_field_idx#18 = (byte) form_field_idx#31 [phi:form_control::@14->form_control::@return#0] -- register_copy 
    // [386] phi (signed byte) form_cursor_count#16 = (const nomodify signed byte) FORM_CURSOR_BLINK/(signed byte) 2 [phi:form_control::@14->form_control::@return#1] -- vbsz1=vbsc1 
    lda #FORM_CURSOR_BLINK/2
    sta.z form_cursor_count
    // [386] phi (byte) form_control::return#2 = (byte) 0 [phi:form_control::@14->form_control::@return#2] -- vbuz1=vbuc1 
    lda #0
    sta.z return_1
    jmp __breturn
    // form_control::@return
  __breturn:
    // [387] return 
    rts
    // form_control::@13
  __b13:
    // [388] (byte) form_field_idx#5 ← ++ (byte) form_field_idx#28 -- vbuz1=_inc_vbuz1 
    inc.z form_field_idx
    // [389] if((byte) form_field_idx#5!=(const byte) form_fields_cnt) goto form_control::@23 -- vbuz1_neq_vbuc1_then_la1 
    lda #form_fields_cnt
    cmp.z form_field_idx
    bne __b23_from___b13
    // [385] phi from form_control::@13 to form_control::@14 [phi:form_control::@13->form_control::@14]
  __b14_from___b13:
    // [385] phi (byte) form_field_idx#31 = (byte) 0 [phi:form_control::@13->form_control::@14#0] -- vbuz1=vbuc1 
    lda #0
    sta.z form_field_idx
    jmp __b14
    // [390] phi from form_control::@13 to form_control::@23 [phi:form_control::@13->form_control::@23]
  __b23_from___b13:
    jmp __b23
    // form_control::@23
  __b23:
    jmp __b14_from___b23
    // form_control::@4
  __b4:
    // [391] if((byte) form_control::key_event#0!=(const nomodify byte) KEY_CRSR_RIGHT) goto form_control::@5 -- vbuz1_neq_vbuc1_then_la1 
    lda #KEY_CRSR_RIGHT
    cmp.z key_event
    bne __b5
    jmp __b10
    // form_control::@10
  __b10:
    // [392] (byte~) form_control::$22 ← (byte) keyboard_modifiers#21 & (const nomodify byte) KEY_MODIFIER_SHIFT -- vbuz1=vbuz2_band_vbuc1 
    lda #KEY_MODIFIER_SHIFT
    and.z keyboard_modifiers
    sta.z __22
    // [393] if((byte~) form_control::$22==(byte) 0) goto form_control::@15 -- vbuz1_eq_0_then_la1 
    lda.z __22
    cmp #0
    beq __b15
    jmp __b11
    // form_control::@11
  __b11:
    // [394] *((const byte*) form_fields_val + (byte) form_field_idx#28) ← -- *((const byte*) form_fields_val + (byte) form_field_idx#28) -- pbuc1_derefidx_vbuz1=_dec_pbuc1_derefidx_vbuz1 
    ldx.z form_field_idx
    dec form_fields_val,x
    // [395] if(*((const byte*) form_fields_val + (byte) form_field_idx#28)!=(byte) $ff) goto form_control::@16 -- pbuc1_derefidx_vbuz1_neq_vbuc2_then_la1 
    lda #$ff
    ldy.z form_field_idx
    cmp form_fields_val,y
    bne __b16
    jmp __b12
    // form_control::@12
  __b12:
    // [396] *((const byte*) form_fields_val + (byte) form_field_idx#28) ← *((const byte*) form_fields_max + (byte) form_field_idx#28) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz1 
    ldy.z form_field_idx
    lda form_fields_max,y
    sta form_fields_val,y
    jmp __b16
    // form_control::@16
  __b16:
    // [397] *((byte*) form_control::field#0) ← *((const to_nomodify byte*) print_hextab + *((const byte*) form_fields_val + (byte) form_field_idx#28)) -- _deref_pbuz1=pbuc1_derefidx_(pbuc2_derefidx_vbuz2) 
    // Render field value
    ldx.z form_field_idx
    ldy form_fields_val,x
    lda print_hextab,y
    ldy #0
    sta (field),y
    // [386] phi from form_control::@16 form_control::@6 to form_control::@return [phi:form_control::@16/form_control::@6->form_control::@return]
  __breturn_from___b16:
  __breturn_from___b6:
    // [386] phi (byte) form_field_idx#18 = (byte) form_field_idx#28 [phi:form_control::@16/form_control::@6->form_control::@return#0] -- register_copy 
    // [386] phi (signed byte) form_cursor_count#16 = (signed byte) form_cursor_count#15 [phi:form_control::@16/form_control::@6->form_control::@return#1] -- register_copy 
    // [386] phi (byte) form_control::return#2 = (byte) 0 [phi:form_control::@16/form_control::@6->form_control::@return#2] -- vbuz1=vbuc1 
    lda #0
    sta.z return_1
    jmp __breturn
    // form_control::@15
  __b15:
    // [398] *((const byte*) form_fields_val + (byte) form_field_idx#28) ← ++ *((const byte*) form_fields_val + (byte) form_field_idx#28) -- pbuc1_derefidx_vbuz1=_inc_pbuc1_derefidx_vbuz1 
    ldx.z form_field_idx
    inc form_fields_val,x
    // [399] if(*((const byte*) form_fields_val + (byte) form_field_idx#28)<=*((const byte*) form_fields_max + (byte) form_field_idx#28)) goto form_control::@16 -- pbuc1_derefidx_vbuz1_le_pbuc2_derefidx_vbuz1_then_la1 
    ldy.z form_field_idx
    lda form_fields_max,y
    cmp form_fields_val,y
    bcs __b16
    jmp __b17
    // form_control::@17
  __b17:
    // [400] *((const byte*) form_fields_val + (byte) form_field_idx#28) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy.z form_field_idx
    sta form_fields_val,y
    jmp __b16
    // form_control::@5
  __b5:
    // [401] if((byte) form_control::key_event#0!=(const nomodify byte) KEY_SPACE) goto form_control::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #KEY_SPACE
    cmp.z key_event
    bne __b6_from___b5
    // [386] phi from form_control::@5 to form_control::@return [phi:form_control::@5->form_control::@return]
  __breturn_from___b5:
    // [386] phi (byte) form_field_idx#18 = (byte) form_field_idx#28 [phi:form_control::@5->form_control::@return#0] -- register_copy 
    // [386] phi (signed byte) form_cursor_count#16 = (signed byte) form_cursor_count#15 [phi:form_control::@5->form_control::@return#1] -- register_copy 
    // [386] phi (byte) form_control::return#2 = (byte) $ff [phi:form_control::@5->form_control::@return#2] -- vbuz1=vbuc1 
    lda #$ff
    sta.z return_1
    jmp __breturn
    // [402] phi from form_control::@5 to form_control::@6 [phi:form_control::@5->form_control::@6]
  __b6_from___b5:
    jmp __b6
    // form_control::@6
  __b6:
    jmp __breturn_from___b6
    // form_control::@2
  __b2:
    // [403] (byte~) form_control::$13 ← *((byte*) form_control::field#0) | (byte) $80 -- vbuz1=_deref_pbuz2_bor_vbuc1 
    lda #$80
    ldy #0
    ora (field),y
    sta.z __13
    // [404] *((byte*) form_control::field#0) ← (byte~) form_control::$13 -- _deref_pbuz1=vbuz2 
    lda.z __13
    ldy #0
    sta (field),y
    jmp __b3_from___b2
}
  // form_set_screen
// Set the screen to use for the form.
// screen is the start address of the screen to use
form_set_screen: {
    .label __0 = $117
    .label __1 = $118
    .label line = $2f
    .label y = $31
    // [406] phi from form_set_screen to form_set_screen::@1 [phi:form_set_screen->form_set_screen::@1]
  __b1_from_form_set_screen:
    // [406] phi (byte) form_set_screen::y#2 = (byte) 0 [phi:form_set_screen->form_set_screen::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    // [406] phi (byte*) form_set_screen::line#2 = (const nomodify byte*) FORM_SCREEN [phi:form_set_screen->form_set_screen::@1#1] -- pbuz1=pbuc1 
    lda #<FORM_SCREEN
    sta.z line
    lda #>FORM_SCREEN
    sta.z line+1
    jmp __b1
    // [406] phi from form_set_screen::@1 to form_set_screen::@1 [phi:form_set_screen::@1->form_set_screen::@1]
  __b1_from___b1:
    // [406] phi (byte) form_set_screen::y#2 = (byte) form_set_screen::y#1 [phi:form_set_screen::@1->form_set_screen::@1#0] -- register_copy 
    // [406] phi (byte*) form_set_screen::line#2 = (byte*) form_set_screen::line#1 [phi:form_set_screen::@1->form_set_screen::@1#1] -- register_copy 
    jmp __b1
    // form_set_screen::@1
  __b1:
    // [407] (byte~) form_set_screen::$0 ← < (byte*) form_set_screen::line#2 -- vbuz1=_lo_pbuz2 
    lda.z line
    sta.z __0
    // [408] *((const byte*) form_line_lo + (byte) form_set_screen::y#2) ← (byte~) form_set_screen::$0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z __0
    ldy.z y
    sta form_line_lo,y
    // [409] (byte~) form_set_screen::$1 ← > (byte*) form_set_screen::line#2 -- vbuz1=_hi_pbuz2 
    lda.z line+1
    sta.z __1
    // [410] *((const byte*) form_line_hi + (byte) form_set_screen::y#2) ← (byte~) form_set_screen::$1 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z __1
    ldy.z y
    sta form_line_hi,y
    // [411] (byte*) form_set_screen::line#1 ← (byte*) form_set_screen::line#2 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line
    sta.z line
    bcc !+
    inc.z line+1
  !:
    // [412] (byte) form_set_screen::y#1 ← ++ (byte) form_set_screen::y#2 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [413] if((byte) form_set_screen::y#1!=(byte) $19) goto form_set_screen::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z y
    bne __b1_from___b1
    jmp __breturn
    // form_set_screen::@return
  __breturn:
    // [414] return 
    rts
}
  // print_str_lines
// Print a number of zero-terminated strings, each followed by a newline.
// The sequence of lines is terminated by another zero.
// print_str_lines(byte* zp($32) str)
print_str_lines: {
    .label ch = $119
    .label str = $32
    // [416] (byte*) print_char_cursor#72 ← (byte*) print_set_screen::screen#2 -- pbuz1=pbuz2 
    lda.z print_set_screen.screen
    sta.z print_char_cursor
    lda.z print_set_screen.screen+1
    sta.z print_char_cursor+1
    // [417] phi from print_str_lines print_str_lines::@6 to print_str_lines::@1 [phi:print_str_lines/print_str_lines::@6->print_str_lines::@1]
  __b1_from_print_str_lines:
  __b1_from___b6:
    // [417] phi (byte*) print_line_cursor#2 = (byte*) print_set_screen::screen#2 [phi:print_str_lines/print_str_lines::@6->print_str_lines::@1#0] -- register_copy 
    // [417] phi (byte*) print_char_cursor#24 = (byte*) print_char_cursor#72 [phi:print_str_lines/print_str_lines::@6->print_str_lines::@1#1] -- register_copy 
    // [417] phi (byte*) print_str_lines::str#3 = (byte*) print_str_lines::str#5 [phi:print_str_lines/print_str_lines::@6->print_str_lines::@1#2] -- register_copy 
    jmp __b1
    // print_str_lines::@1
  __b1:
    // [418] if((byte) 0!=*((byte*) print_str_lines::str#3)) goto print_str_lines::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2_from___b1
    jmp __breturn
    // print_str_lines::@return
  __breturn:
    // [419] return 
    rts
    // [420] phi from print_str_lines::@1 print_str_lines::@3 to print_str_lines::@2 [phi:print_str_lines::@1/print_str_lines::@3->print_str_lines::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [420] phi (byte*) print_char_cursor#41 = (byte*) print_char_cursor#24 [phi:print_str_lines::@1/print_str_lines::@3->print_str_lines::@2#0] -- register_copy 
    // [420] phi (byte*) print_str_lines::str#4 = (byte*) print_str_lines::str#3 [phi:print_str_lines::@1/print_str_lines::@3->print_str_lines::@2#1] -- register_copy 
    jmp __b2
    // print_str_lines::@2
  __b2:
    // [421] (byte) print_str_lines::ch#0 ← *((byte*) print_str_lines::str#4) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    sta.z ch
    // [422] (byte*) print_str_lines::str#0 ← ++ (byte*) print_str_lines::str#4 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [423] if((byte) 0==(byte) print_str_lines::ch#0) goto print_str_lines::@3 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z ch
    beq __b3_from___b2
    jmp __b4
    // print_str_lines::@4
  __b4:
    // [424] (byte) print_char::ch#0 ← (byte) print_str_lines::ch#0 -- vbuz1=vbuz2 
    lda.z ch
    sta.z print_char.ch
    // [425] call print_char 
    jsr print_char
    // [426] phi from print_str_lines::@2 print_str_lines::@4 to print_str_lines::@3 [phi:print_str_lines::@2/print_str_lines::@4->print_str_lines::@3]
  __b3_from___b2:
  __b3_from___b4:
    // [426] phi (byte*) print_char_cursor#42 = (byte*) print_char_cursor#41 [phi:print_str_lines::@2/print_str_lines::@4->print_str_lines::@3#0] -- register_copy 
    jmp __b3
    // print_str_lines::@3
  __b3:
    // [427] if((byte) 0!=(byte) print_str_lines::ch#0) goto print_str_lines::@2 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z ch
    bne __b2_from___b3
    // [428] phi from print_str_lines::@3 to print_str_lines::@5 [phi:print_str_lines::@3->print_str_lines::@5]
  __b5_from___b3:
    jmp __b5
    // print_str_lines::@5
  __b5:
    // [429] call print_ln 
    // [431] phi from print_str_lines::@5 to print_ln [phi:print_str_lines::@5->print_ln]
  print_ln_from___b5:
    jsr print_ln
    jmp __b6
    // print_str_lines::@6
  __b6:
    // [430] (byte*) print_char_cursor#73 ← (byte*) print_line_cursor#22 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    jmp __b1_from___b6
}
  // print_ln
// Print a newline
print_ln: {
    // [432] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  __b1_from_print_ln:
  __b1_from___b1:
    // [432] phi (byte*) print_line_cursor#21 = (byte*) print_line_cursor#2 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp __b1
    // print_ln::@1
  __b1:
    // [433] (byte*) print_line_cursor#22 ← (byte*) print_line_cursor#21 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // [434] if((byte*) print_line_cursor#22<(byte*) print_char_cursor#42) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1_from___b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1_from___b1
  !:
    jmp __breturn
    // print_ln::@return
  __breturn:
    // [435] return 
    rts
}
  // print_char
// Print a single char
// print_char(byte zp($11a) ch)
print_char: {
    .label ch = $11a
    // [436] *((byte*) print_char_cursor#41) ← (byte) print_char::ch#0 -- _deref_pbuz1=vbuz2 
    lda.z ch
    ldy #0
    sta (print_char_cursor),y
    // [437] (byte*) print_char_cursor#28 ← ++ (byte*) print_char_cursor#41 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp __breturn
    // print_char::@return
  __breturn:
    // [438] return 
    rts
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // [439] (void*) memset::str#0 ← (void*)(byte*) print_set_screen::screen#2 -- pvoz1=pvoz2 
    lda.z print_set_screen.screen
    sta.z memset.str
    lda.z print_set_screen.screen+1
    sta.z memset.str+1
    // [440] call memset 
    // [442] phi from print_cls to memset [phi:print_cls->memset]
  memset_from_print_cls:
    jsr memset
    jmp __breturn
    // print_cls::@return
  __breturn:
    // [441] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp($11b) str)
memset: {
    .const c = ' '
    .const num = $3e8
    .label end = $11d
    .label dst = $38
    .label str = $11b
    jmp __b1
    // memset::@1
  __b1:
    // [443] (byte*) memset::end#0 ← (byte*)(void*) memset::str#0 + (const word) memset::num#0 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z str
    clc
    adc #<num
    sta.z end
    lda.z str+1
    adc #>num
    sta.z end+1
    // [444] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#0 -- pbuz1=pbuz2 
    lda.z str
    sta.z dst
    lda.z str+1
    sta.z dst+1
    // [445] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [445] phi (byte*) memset::dst#2 = (byte*) memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    jmp __b2
    // memset::@2
  __b2:
    // [446] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    jmp __breturn
    // memset::@return
  __breturn:
    // [447] return 
    rts
    // memset::@3
  __b3:
    // [448] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // [449] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2_from___b3
}
  // print_set_screen
// Set the screen to print on. Also resets current line/char cursor.
// print_set_screen(byte* zp($36) screen)
print_set_screen: {
    .label screen = $36
    jmp __breturn
    // print_set_screen::@return
  __breturn:
    // [451] return 
    rts
}
  // gfx_init
// Initialize the different graphics in the memory
gfx_init: {
    // [453] call gfx_init_screen0 
    // [849] phi from gfx_init to gfx_init_screen0 [phi:gfx_init->gfx_init_screen0]
  gfx_init_screen0_from_gfx_init:
    jsr gfx_init_screen0
    // [454] phi from gfx_init to gfx_init::@1 [phi:gfx_init->gfx_init::@1]
  __b1_from_gfx_init:
    jmp __b1
    // gfx_init::@1
  __b1:
    // [455] call gfx_init_screen1 
    // [837] phi from gfx_init::@1 to gfx_init_screen1 [phi:gfx_init::@1->gfx_init_screen1]
  gfx_init_screen1_from___b1:
    jsr gfx_init_screen1
    // [456] phi from gfx_init::@1 to gfx_init::@2 [phi:gfx_init::@1->gfx_init::@2]
  __b2_from___b1:
    jmp __b2
    // gfx_init::@2
  __b2:
    // [457] call gfx_init_screen2 
    // [822] phi from gfx_init::@2 to gfx_init_screen2 [phi:gfx_init::@2->gfx_init_screen2]
  gfx_init_screen2_from___b2:
    jsr gfx_init_screen2
    // [458] phi from gfx_init::@2 to gfx_init::@3 [phi:gfx_init::@2->gfx_init::@3]
  __b3_from___b2:
    jmp __b3
    // gfx_init::@3
  __b3:
    // [459] call gfx_init_screen3 
    // [808] phi from gfx_init::@3 to gfx_init_screen3 [phi:gfx_init::@3->gfx_init_screen3]
  gfx_init_screen3_from___b3:
    jsr gfx_init_screen3
    // [460] phi from gfx_init::@3 to gfx_init::@4 [phi:gfx_init::@3->gfx_init::@4]
  __b4_from___b3:
    jmp __b4
    // gfx_init::@4
  __b4:
    // [461] call gfx_init_screen4 
    // [798] phi from gfx_init::@4 to gfx_init_screen4 [phi:gfx_init::@4->gfx_init_screen4]
  gfx_init_screen4_from___b4:
    jsr gfx_init_screen4
    // [462] phi from gfx_init::@4 to gfx_init::@5 [phi:gfx_init::@4->gfx_init::@5]
  __b5_from___b4:
    jmp __b5
    // gfx_init::@5
  __b5:
    // [463] call gfx_init_charset 
    jsr gfx_init_charset
    // [464] phi from gfx_init::@5 to gfx_init::@6 [phi:gfx_init::@5->gfx_init::@6]
  __b6_from___b5:
    jmp __b6
    // gfx_init::@6
  __b6:
    // [465] call gfx_init_vic_bitmap 
    // [608] phi from gfx_init::@6 to gfx_init_vic_bitmap [phi:gfx_init::@6->gfx_init_vic_bitmap]
  gfx_init_vic_bitmap_from___b6:
    jsr gfx_init_vic_bitmap
    // [466] phi from gfx_init::@6 to gfx_init::@7 [phi:gfx_init::@6->gfx_init::@7]
  __b7_from___b6:
    jmp __b7
    // gfx_init::@7
  __b7:
    // [467] call gfx_init_plane_8bppchunky 
    // [588] phi from gfx_init::@7 to gfx_init_plane_8bppchunky [phi:gfx_init::@7->gfx_init_plane_8bppchunky]
  gfx_init_plane_8bppchunky_from___b7:
    jsr gfx_init_plane_8bppchunky
    // [468] phi from gfx_init::@7 to gfx_init::@8 [phi:gfx_init::@7->gfx_init::@8]
  __b8_from___b7:
    jmp __b8
    // gfx_init::@8
  __b8:
    // [469] call gfx_init_plane_charset8 
    // [563] phi from gfx_init::@8 to gfx_init_plane_charset8 [phi:gfx_init::@8->gfx_init_plane_charset8]
  gfx_init_plane_charset8_from___b8:
    jsr gfx_init_plane_charset8
    // [470] phi from gfx_init::@8 to gfx_init::@9 [phi:gfx_init::@8->gfx_init::@9]
  __b9_from___b8:
    jmp __b9
    // gfx_init::@9
  __b9:
    // [471] call gfx_init_plane_horisontal 
    // [545] phi from gfx_init::@9 to gfx_init_plane_horisontal [phi:gfx_init::@9->gfx_init_plane_horisontal]
  gfx_init_plane_horisontal_from___b9:
    jsr gfx_init_plane_horisontal
    // [472] phi from gfx_init::@9 to gfx_init::@10 [phi:gfx_init::@9->gfx_init::@10]
  __b10_from___b9:
    jmp __b10
    // gfx_init::@10
  __b10:
    // [473] call gfx_init_plane_vertical 
    // [532] phi from gfx_init::@10 to gfx_init_plane_vertical [phi:gfx_init::@10->gfx_init_plane_vertical]
  gfx_init_plane_vertical_from___b10:
    jsr gfx_init_plane_vertical
    // [474] phi from gfx_init::@10 to gfx_init::@11 [phi:gfx_init::@10->gfx_init::@11]
  __b11_from___b10:
    jmp __b11
    // gfx_init::@11
  __b11:
    // [475] call gfx_init_plane_horisontal2 
    // [517] phi from gfx_init::@11 to gfx_init_plane_horisontal2 [phi:gfx_init::@11->gfx_init_plane_horisontal2]
  gfx_init_plane_horisontal2_from___b11:
    jsr gfx_init_plane_horisontal2
    // [476] phi from gfx_init::@11 to gfx_init::@12 [phi:gfx_init::@11->gfx_init::@12]
  __b12_from___b11:
    jmp __b12
    // gfx_init::@12
  __b12:
    // [477] call gfx_init_plane_vertical2 
    // [514] phi from gfx_init::@12 to gfx_init_plane_vertical2 [phi:gfx_init::@12->gfx_init_plane_vertical2]
  gfx_init_plane_vertical2_from___b12:
    jsr gfx_init_plane_vertical2
    // [478] phi from gfx_init::@12 to gfx_init::@13 [phi:gfx_init::@12->gfx_init::@13]
  __b13_from___b12:
    jmp __b13
    // gfx_init::@13
  __b13:
    // [479] call gfx_init_plane_blank 
    // [511] phi from gfx_init::@13 to gfx_init_plane_blank [phi:gfx_init::@13->gfx_init_plane_blank]
  gfx_init_plane_blank_from___b13:
    jsr gfx_init_plane_blank
    // [480] phi from gfx_init::@13 to gfx_init::@14 [phi:gfx_init::@13->gfx_init::@14]
  __b14_from___b13:
    jmp __b14
    // gfx_init::@14
  __b14:
    // [481] call gfx_init_plane_full 
    // [483] phi from gfx_init::@14 to gfx_init_plane_full [phi:gfx_init::@14->gfx_init_plane_full]
  gfx_init_plane_full_from___b14:
    jsr gfx_init_plane_full
    jmp __breturn
    // gfx_init::@return
  __breturn:
    // [482] return 
    rts
}
  // gfx_init_plane_full
// Initialize Plane with all pixels
gfx_init_plane_full: {
    // [484] call gfx_init_plane_fill 
    // [486] phi from gfx_init_plane_full to gfx_init_plane_fill [phi:gfx_init_plane_full->gfx_init_plane_fill]
  gfx_init_plane_fill_from_gfx_init_plane_full:
    // [486] phi (byte) gfx_init_plane_fill::fill#6 = (byte) $ff [phi:gfx_init_plane_full->gfx_init_plane_fill#0] -- vbuz1=vbuc1 
    lda #$ff
    sta.z gfx_init_plane_fill.fill
    // [486] phi (dword) gfx_init_plane_fill::plane_addr#3 = (const nomodify dword) PLANE_FULL [phi:gfx_init_plane_full->gfx_init_plane_fill#1] -- vduz1=vduc1 
    lda #<PLANE_FULL
    sta.z gfx_init_plane_fill.plane_addr
    lda #>PLANE_FULL
    sta.z gfx_init_plane_fill.plane_addr+1
    lda #<PLANE_FULL>>$10
    sta.z gfx_init_plane_fill.plane_addr+2
    lda #>PLANE_FULL>>$10
    sta.z gfx_init_plane_fill.plane_addr+3
    jsr gfx_init_plane_fill
    jmp __breturn
    // gfx_init_plane_full::@return
  __breturn:
    // [485] return 
    rts
}
  // gfx_init_plane_fill
// Initialize 320*200 1bpp pixel ($2000) plane with identical bytes
// gfx_init_plane_fill(dword zp($3a) plane_addr, byte zp($3e) fill)
gfx_init_plane_fill: {
    .label __0 = $11f
    .label __1 = $123
    .label __4 = $126
    .label __5 = $128
    .label gfxbCpuBank = $125
    .label gfxb = $12a
    .label gfxb_1 = $40
    .label bx = $42
    .label by = $3f
    .label plane_addr = $3a
    .label fill = $3e
    // [487] (dword~) gfx_init_plane_fill::$0 ← (dword) gfx_init_plane_fill::plane_addr#3 << (byte) 2 -- vduz1=vduz2_rol_2 
    lda.z plane_addr
    asl
    sta.z __0
    lda.z plane_addr+1
    rol
    sta.z __0+1
    lda.z plane_addr+2
    rol
    sta.z __0+2
    lda.z plane_addr+3
    rol
    sta.z __0+3
    asl.z __0
    rol.z __0+1
    rol.z __0+2
    rol.z __0+3
    // [488] (word~) gfx_init_plane_fill::$1 ← > (dword~) gfx_init_plane_fill::$0 -- vwuz1=_hi_vduz2 
    lda.z __0+2
    sta.z __1
    lda.z __0+3
    sta.z __1+1
    // [489] (byte) gfx_init_plane_fill::gfxbCpuBank#0 ← < (word~) gfx_init_plane_fill::$1 -- vbuz1=_lo_vwuz2 
    lda.z __1
    sta.z gfxbCpuBank
    // [490] (byte) dtvSetCpuBankSegment1::cpuBankIdx#11 ← (byte) gfx_init_plane_fill::gfxbCpuBank#0 -- vbuz1=vbuz2 
    lda.z gfxbCpuBank
    sta.z dtvSetCpuBankSegment1.cpuBankIdx
    // [491] call dtvSetCpuBankSegment1 
    // [507] phi from gfx_init_plane_fill to dtvSetCpuBankSegment1 [phi:gfx_init_plane_fill->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_gfx_init_plane_fill:
    // [507] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte) dtvSetCpuBankSegment1::cpuBankIdx#11 [phi:gfx_init_plane_fill->dtvSetCpuBankSegment1#0] -- register_copy 
    jsr dtvSetCpuBankSegment1
    jmp __b5
    // gfx_init_plane_fill::@5
  __b5:
    // [492] (word~) gfx_init_plane_fill::$4 ← < (dword) gfx_init_plane_fill::plane_addr#3 -- vwuz1=_lo_vduz2 
    lda.z plane_addr
    sta.z __4
    lda.z plane_addr+1
    sta.z __4+1
    // [493] (word~) gfx_init_plane_fill::$5 ← (word~) gfx_init_plane_fill::$4 & (word) $3fff -- vwuz1=vwuz2_band_vwuc1 
    lda.z __4
    and #<$3fff
    sta.z __5
    lda.z __4+1
    and #>$3fff
    sta.z __5+1
    // [494] (word) gfx_init_plane_fill::gfxb#0 ← (word) $4000 + (word~) gfx_init_plane_fill::$5 -- vwuz1=vwuc1_plus_vwuz2 
    lda.z __5
    clc
    adc #<$4000
    sta.z gfxb
    lda.z __5+1
    adc #>$4000
    sta.z gfxb+1
    // [495] (byte*) gfx_init_plane_fill::gfxb#6 ← (byte*)(word) gfx_init_plane_fill::gfxb#0 -- pbuz1=pbuz2 
    lda.z gfxb
    sta.z gfxb_1
    lda.z gfxb+1
    sta.z gfxb_1+1
    // [496] phi from gfx_init_plane_fill::@5 to gfx_init_plane_fill::@1 [phi:gfx_init_plane_fill::@5->gfx_init_plane_fill::@1]
  __b1_from___b5:
    // [496] phi (byte) gfx_init_plane_fill::by#4 = (byte) 0 [phi:gfx_init_plane_fill::@5->gfx_init_plane_fill::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z by
    // [496] phi (byte*) gfx_init_plane_fill::gfxb#3 = (byte*) gfx_init_plane_fill::gfxb#6 [phi:gfx_init_plane_fill::@5->gfx_init_plane_fill::@1#1] -- register_copy 
    jmp __b1
    // [496] phi from gfx_init_plane_fill::@3 to gfx_init_plane_fill::@1 [phi:gfx_init_plane_fill::@3->gfx_init_plane_fill::@1]
  __b1_from___b3:
    // [496] phi (byte) gfx_init_plane_fill::by#4 = (byte) gfx_init_plane_fill::by#1 [phi:gfx_init_plane_fill::@3->gfx_init_plane_fill::@1#0] -- register_copy 
    // [496] phi (byte*) gfx_init_plane_fill::gfxb#3 = (byte*) gfx_init_plane_fill::gfxb#1 [phi:gfx_init_plane_fill::@3->gfx_init_plane_fill::@1#1] -- register_copy 
    jmp __b1
    // gfx_init_plane_fill::@1
  __b1:
    // [497] phi from gfx_init_plane_fill::@1 to gfx_init_plane_fill::@2 [phi:gfx_init_plane_fill::@1->gfx_init_plane_fill::@2]
  __b2_from___b1:
    // [497] phi (byte) gfx_init_plane_fill::bx#2 = (byte) 0 [phi:gfx_init_plane_fill::@1->gfx_init_plane_fill::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z bx
    // [497] phi (byte*) gfx_init_plane_fill::gfxb#2 = (byte*) gfx_init_plane_fill::gfxb#3 [phi:gfx_init_plane_fill::@1->gfx_init_plane_fill::@2#1] -- register_copy 
    jmp __b2
    // [497] phi from gfx_init_plane_fill::@2 to gfx_init_plane_fill::@2 [phi:gfx_init_plane_fill::@2->gfx_init_plane_fill::@2]
  __b2_from___b2:
    // [497] phi (byte) gfx_init_plane_fill::bx#2 = (byte) gfx_init_plane_fill::bx#1 [phi:gfx_init_plane_fill::@2->gfx_init_plane_fill::@2#0] -- register_copy 
    // [497] phi (byte*) gfx_init_plane_fill::gfxb#2 = (byte*) gfx_init_plane_fill::gfxb#1 [phi:gfx_init_plane_fill::@2->gfx_init_plane_fill::@2#1] -- register_copy 
    jmp __b2
    // gfx_init_plane_fill::@2
  __b2:
    // [498] *((byte*) gfx_init_plane_fill::gfxb#2) ← (byte) gfx_init_plane_fill::fill#6 -- _deref_pbuz1=vbuz2 
    lda.z fill
    ldy #0
    sta (gfxb_1),y
    // [499] (byte*) gfx_init_plane_fill::gfxb#1 ← ++ (byte*) gfx_init_plane_fill::gfxb#2 -- pbuz1=_inc_pbuz1 
    inc.z gfxb_1
    bne !+
    inc.z gfxb_1+1
  !:
    // [500] (byte) gfx_init_plane_fill::bx#1 ← ++ (byte) gfx_init_plane_fill::bx#2 -- vbuz1=_inc_vbuz1 
    inc.z bx
    // [501] if((byte) gfx_init_plane_fill::bx#1!=(byte) $28) goto gfx_init_plane_fill::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z bx
    bne __b2_from___b2
    jmp __b3
    // gfx_init_plane_fill::@3
  __b3:
    // [502] (byte) gfx_init_plane_fill::by#1 ← ++ (byte) gfx_init_plane_fill::by#4 -- vbuz1=_inc_vbuz1 
    inc.z by
    // [503] if((byte) gfx_init_plane_fill::by#1!=(byte) $c8) goto gfx_init_plane_fill::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z by
    bne __b1_from___b3
    // [504] phi from gfx_init_plane_fill::@3 to gfx_init_plane_fill::@4 [phi:gfx_init_plane_fill::@3->gfx_init_plane_fill::@4]
  __b4_from___b3:
    jmp __b4
    // gfx_init_plane_fill::@4
  __b4:
    // [505] call dtvSetCpuBankSegment1 
  // Reset CPU BANK segment to $4000
    // [507] phi from gfx_init_plane_fill::@4 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_fill::@4->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from___b4:
    // [507] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)(number) $4000/(number) $4000 [phi:gfx_init_plane_fill::@4->dtvSetCpuBankSegment1#0] -- vbuz1=vbuc1 
    lda #$4000/$4000
    sta.z dtvSetCpuBankSegment1.cpuBankIdx
    jsr dtvSetCpuBankSegment1
    jmp __breturn
    // gfx_init_plane_fill::@return
  __breturn:
    // [506] return 
    rts
}
  // dtvSetCpuBankSegment1
// Set the memory pointed to by CPU BANK 1 SEGMENT ($4000-$7fff)
// This sets which actual memory is addressed when the CPU reads/writes to $4000-$7fff
// The actual memory addressed will be $4000*cpuSegmentIdx
// dtvSetCpuBankSegment1(byte zp($43) cpuBankIdx)
dtvSetCpuBankSegment1: {
    // Move CPU BANK 1 SEGMENT ($4000-$7fff)
    .label cpuBank = $ff
    .label cpuBankIdx = $43
    // [508] *((const byte*) dtvSetCpuBankSegment1::cpuBank) ← (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 -- _deref_pbuc1=vbuz1 
    lda.z cpuBankIdx
    sta cpuBank
    // asm { .byte$32,$dd lda$ff .byte$32,$00  }
    .byte $32, $dd
    lda.z $ff
    .byte $32, $00
    jmp __breturn
    // dtvSetCpuBankSegment1::@return
  __breturn:
    // [510] return 
    rts
}
  // gfx_init_plane_blank
// Initialize Plane with blank pixels
gfx_init_plane_blank: {
    // [512] call gfx_init_plane_fill 
    // [486] phi from gfx_init_plane_blank to gfx_init_plane_fill [phi:gfx_init_plane_blank->gfx_init_plane_fill]
  gfx_init_plane_fill_from_gfx_init_plane_blank:
    // [486] phi (byte) gfx_init_plane_fill::fill#6 = (byte) 0 [phi:gfx_init_plane_blank->gfx_init_plane_fill#0] -- vbuz1=vbuc1 
    lda #0
    sta.z gfx_init_plane_fill.fill
    // [486] phi (dword) gfx_init_plane_fill::plane_addr#3 = (const nomodify dword) PLANE_BLANK [phi:gfx_init_plane_blank->gfx_init_plane_fill#1] -- vduz1=vduc1 
    lda #<PLANE_BLANK
    sta.z gfx_init_plane_fill.plane_addr
    lda #>PLANE_BLANK
    sta.z gfx_init_plane_fill.plane_addr+1
    lda #<PLANE_BLANK>>$10
    sta.z gfx_init_plane_fill.plane_addr+2
    lda #>PLANE_BLANK>>$10
    sta.z gfx_init_plane_fill.plane_addr+3
    jsr gfx_init_plane_fill
    jmp __breturn
    // gfx_init_plane_blank::@return
  __breturn:
    // [513] return 
    rts
}
  // gfx_init_plane_vertical2
// Initialize Plane with Vertical Stripes every 2 pixels
gfx_init_plane_vertical2: {
    // [515] call gfx_init_plane_fill 
    // [486] phi from gfx_init_plane_vertical2 to gfx_init_plane_fill [phi:gfx_init_plane_vertical2->gfx_init_plane_fill]
  gfx_init_plane_fill_from_gfx_init_plane_vertical2:
    // [486] phi (byte) gfx_init_plane_fill::fill#6 = (byte) $1b [phi:gfx_init_plane_vertical2->gfx_init_plane_fill#0] -- vbuz1=vbuc1 
    lda #$1b
    sta.z gfx_init_plane_fill.fill
    // [486] phi (dword) gfx_init_plane_fill::plane_addr#3 = (const nomodify dword) PLANE_VERTICAL2 [phi:gfx_init_plane_vertical2->gfx_init_plane_fill#1] -- vduz1=vduc1 
    lda #<PLANE_VERTICAL2
    sta.z gfx_init_plane_fill.plane_addr
    lda #>PLANE_VERTICAL2
    sta.z gfx_init_plane_fill.plane_addr+1
    lda #<PLANE_VERTICAL2>>$10
    sta.z gfx_init_plane_fill.plane_addr+2
    lda #>PLANE_VERTICAL2>>$10
    sta.z gfx_init_plane_fill.plane_addr+3
    jsr gfx_init_plane_fill
    jmp __breturn
    // gfx_init_plane_vertical2::@return
  __breturn:
    // [516] return 
    rts
}
  // gfx_init_plane_horisontal2
// Initialize Plane with Horizontal Stripes every 2 pixels
gfx_init_plane_horisontal2: {
    .const gfxbCpuBank = PLANE_HORISONTAL2/$4000
    .label __2 = $12c
    .label row = $12d
    .label gfxa = $45
    .label ax = $47
    .label ay = $44
    // [518] call dtvSetCpuBankSegment1 
    // [507] phi from gfx_init_plane_horisontal2 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_horisontal2->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_gfx_init_plane_horisontal2:
    // [507] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (const byte) gfx_init_plane_horisontal2::gfxbCpuBank#0 [phi:gfx_init_plane_horisontal2->dtvSetCpuBankSegment1#0] -- vbuz1=vbuc1 
    lda #gfxbCpuBank
    sta.z dtvSetCpuBankSegment1.cpuBankIdx
    jsr dtvSetCpuBankSegment1
    // [519] phi from gfx_init_plane_horisontal2 to gfx_init_plane_horisontal2::@1 [phi:gfx_init_plane_horisontal2->gfx_init_plane_horisontal2::@1]
  __b1_from_gfx_init_plane_horisontal2:
    // [519] phi (byte*) gfx_init_plane_horisontal2::gfxa#3 = (byte*)(word) $4000 [phi:gfx_init_plane_horisontal2->gfx_init_plane_horisontal2::@1#0] -- pbuz1=pbuc1 
    lda #<$4000
    sta.z gfxa
    lda #>$4000
    sta.z gfxa+1
    // [519] phi (byte) gfx_init_plane_horisontal2::ay#4 = (byte) 0 [phi:gfx_init_plane_horisontal2->gfx_init_plane_horisontal2::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z ay
    jmp __b1
    // [519] phi from gfx_init_plane_horisontal2::@3 to gfx_init_plane_horisontal2::@1 [phi:gfx_init_plane_horisontal2::@3->gfx_init_plane_horisontal2::@1]
  __b1_from___b3:
    // [519] phi (byte*) gfx_init_plane_horisontal2::gfxa#3 = (byte*) gfx_init_plane_horisontal2::gfxa#1 [phi:gfx_init_plane_horisontal2::@3->gfx_init_plane_horisontal2::@1#0] -- register_copy 
    // [519] phi (byte) gfx_init_plane_horisontal2::ay#4 = (byte) gfx_init_plane_horisontal2::ay#1 [phi:gfx_init_plane_horisontal2::@3->gfx_init_plane_horisontal2::@1#1] -- register_copy 
    jmp __b1
    // gfx_init_plane_horisontal2::@1
  __b1:
    // [520] phi from gfx_init_plane_horisontal2::@1 to gfx_init_plane_horisontal2::@2 [phi:gfx_init_plane_horisontal2::@1->gfx_init_plane_horisontal2::@2]
  __b2_from___b1:
    // [520] phi (byte) gfx_init_plane_horisontal2::ax#2 = (byte) 0 [phi:gfx_init_plane_horisontal2::@1->gfx_init_plane_horisontal2::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z ax
    // [520] phi (byte*) gfx_init_plane_horisontal2::gfxa#2 = (byte*) gfx_init_plane_horisontal2::gfxa#3 [phi:gfx_init_plane_horisontal2::@1->gfx_init_plane_horisontal2::@2#1] -- register_copy 
    jmp __b2
    // [520] phi from gfx_init_plane_horisontal2::@2 to gfx_init_plane_horisontal2::@2 [phi:gfx_init_plane_horisontal2::@2->gfx_init_plane_horisontal2::@2]
  __b2_from___b2:
    // [520] phi (byte) gfx_init_plane_horisontal2::ax#2 = (byte) gfx_init_plane_horisontal2::ax#1 [phi:gfx_init_plane_horisontal2::@2->gfx_init_plane_horisontal2::@2#0] -- register_copy 
    // [520] phi (byte*) gfx_init_plane_horisontal2::gfxa#2 = (byte*) gfx_init_plane_horisontal2::gfxa#1 [phi:gfx_init_plane_horisontal2::@2->gfx_init_plane_horisontal2::@2#1] -- register_copy 
    jmp __b2
    // gfx_init_plane_horisontal2::@2
  __b2:
    // [521] (byte~) gfx_init_plane_horisontal2::$2 ← (byte) gfx_init_plane_horisontal2::ay#4 >> (byte) 1 -- vbuz1=vbuz2_ror_1 
    lda.z ay
    lsr
    sta.z __2
    // [522] (byte) gfx_init_plane_horisontal2::row#0 ← (byte~) gfx_init_plane_horisontal2::$2 & (byte) 3 -- vbuz1=vbuz2_band_vbuc1 
    lda #3
    and.z __2
    sta.z row
    // [523] *((byte*) gfx_init_plane_horisontal2::gfxa#2) ← *((const byte*) gfx_init_plane_horisontal2::row_bitmask + (byte) gfx_init_plane_horisontal2::row#0) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z row
    lda row_bitmask,y
    ldy #0
    sta (gfxa),y
    // [524] (byte*) gfx_init_plane_horisontal2::gfxa#1 ← ++ (byte*) gfx_init_plane_horisontal2::gfxa#2 -- pbuz1=_inc_pbuz1 
    inc.z gfxa
    bne !+
    inc.z gfxa+1
  !:
    // [525] (byte) gfx_init_plane_horisontal2::ax#1 ← ++ (byte) gfx_init_plane_horisontal2::ax#2 -- vbuz1=_inc_vbuz1 
    inc.z ax
    // [526] if((byte) gfx_init_plane_horisontal2::ax#1!=(byte) $28) goto gfx_init_plane_horisontal2::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z ax
    bne __b2_from___b2
    jmp __b3
    // gfx_init_plane_horisontal2::@3
  __b3:
    // [527] (byte) gfx_init_plane_horisontal2::ay#1 ← ++ (byte) gfx_init_plane_horisontal2::ay#4 -- vbuz1=_inc_vbuz1 
    inc.z ay
    // [528] if((byte) gfx_init_plane_horisontal2::ay#1!=(byte) $c8) goto gfx_init_plane_horisontal2::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z ay
    bne __b1_from___b3
    // [529] phi from gfx_init_plane_horisontal2::@3 to gfx_init_plane_horisontal2::@4 [phi:gfx_init_plane_horisontal2::@3->gfx_init_plane_horisontal2::@4]
  __b4_from___b3:
    jmp __b4
    // gfx_init_plane_horisontal2::@4
  __b4:
    // [530] call dtvSetCpuBankSegment1 
  // Reset CPU BANK segment to $4000
    // [507] phi from gfx_init_plane_horisontal2::@4 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_horisontal2::@4->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from___b4:
    // [507] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)(number) $4000/(number) $4000 [phi:gfx_init_plane_horisontal2::@4->dtvSetCpuBankSegment1#0] -- vbuz1=vbuc1 
    lda #$4000/$4000
    sta.z dtvSetCpuBankSegment1.cpuBankIdx
    jsr dtvSetCpuBankSegment1
    jmp __breturn
    // gfx_init_plane_horisontal2::@return
  __breturn:
    // [531] return 
    rts
    row_bitmask: .byte 0, $55, $aa, $ff
}
  // gfx_init_plane_vertical
// Initialize Plane with Vertical Stripes
gfx_init_plane_vertical: {
    .const gfxbCpuBank = PLANE_VERTICAL/$4000
    .label gfxb = $49
    .label bx = $4b
    .label by = $48
    // [533] call dtvSetCpuBankSegment1 
    // [507] phi from gfx_init_plane_vertical to dtvSetCpuBankSegment1 [phi:gfx_init_plane_vertical->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_gfx_init_plane_vertical:
    // [507] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (const byte) gfx_init_plane_vertical::gfxbCpuBank#0 [phi:gfx_init_plane_vertical->dtvSetCpuBankSegment1#0] -- vbuz1=vbuc1 
    lda #gfxbCpuBank
    sta.z dtvSetCpuBankSegment1.cpuBankIdx
    jsr dtvSetCpuBankSegment1
    // [534] phi from gfx_init_plane_vertical to gfx_init_plane_vertical::@1 [phi:gfx_init_plane_vertical->gfx_init_plane_vertical::@1]
  __b1_from_gfx_init_plane_vertical:
    // [534] phi (byte) gfx_init_plane_vertical::by#4 = (byte) 0 [phi:gfx_init_plane_vertical->gfx_init_plane_vertical::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z by
    // [534] phi (byte*) gfx_init_plane_vertical::gfxb#3 = (byte*)(word) $4000+(const nomodify dword) PLANE_VERTICAL&(word) $3fff [phi:gfx_init_plane_vertical->gfx_init_plane_vertical::@1#1] -- pbuz1=pbuc1 
    lda #<$4000+(PLANE_VERTICAL&$3fff)
    sta.z gfxb
    lda #>$4000+(PLANE_VERTICAL&$3fff)
    sta.z gfxb+1
    jmp __b1
    // [534] phi from gfx_init_plane_vertical::@3 to gfx_init_plane_vertical::@1 [phi:gfx_init_plane_vertical::@3->gfx_init_plane_vertical::@1]
  __b1_from___b3:
    // [534] phi (byte) gfx_init_plane_vertical::by#4 = (byte) gfx_init_plane_vertical::by#1 [phi:gfx_init_plane_vertical::@3->gfx_init_plane_vertical::@1#0] -- register_copy 
    // [534] phi (byte*) gfx_init_plane_vertical::gfxb#3 = (byte*) gfx_init_plane_vertical::gfxb#1 [phi:gfx_init_plane_vertical::@3->gfx_init_plane_vertical::@1#1] -- register_copy 
    jmp __b1
    // gfx_init_plane_vertical::@1
  __b1:
    // [535] phi from gfx_init_plane_vertical::@1 to gfx_init_plane_vertical::@2 [phi:gfx_init_plane_vertical::@1->gfx_init_plane_vertical::@2]
  __b2_from___b1:
    // [535] phi (byte) gfx_init_plane_vertical::bx#2 = (byte) 0 [phi:gfx_init_plane_vertical::@1->gfx_init_plane_vertical::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z bx
    // [535] phi (byte*) gfx_init_plane_vertical::gfxb#2 = (byte*) gfx_init_plane_vertical::gfxb#3 [phi:gfx_init_plane_vertical::@1->gfx_init_plane_vertical::@2#1] -- register_copy 
    jmp __b2
    // [535] phi from gfx_init_plane_vertical::@2 to gfx_init_plane_vertical::@2 [phi:gfx_init_plane_vertical::@2->gfx_init_plane_vertical::@2]
  __b2_from___b2:
    // [535] phi (byte) gfx_init_plane_vertical::bx#2 = (byte) gfx_init_plane_vertical::bx#1 [phi:gfx_init_plane_vertical::@2->gfx_init_plane_vertical::@2#0] -- register_copy 
    // [535] phi (byte*) gfx_init_plane_vertical::gfxb#2 = (byte*) gfx_init_plane_vertical::gfxb#1 [phi:gfx_init_plane_vertical::@2->gfx_init_plane_vertical::@2#1] -- register_copy 
    jmp __b2
    // gfx_init_plane_vertical::@2
  __b2:
    // [536] *((byte*) gfx_init_plane_vertical::gfxb#2) ← (byte) $f -- _deref_pbuz1=vbuc1 
    lda #$f
    ldy #0
    sta (gfxb),y
    // [537] (byte*) gfx_init_plane_vertical::gfxb#1 ← ++ (byte*) gfx_init_plane_vertical::gfxb#2 -- pbuz1=_inc_pbuz1 
    inc.z gfxb
    bne !+
    inc.z gfxb+1
  !:
    // [538] (byte) gfx_init_plane_vertical::bx#1 ← ++ (byte) gfx_init_plane_vertical::bx#2 -- vbuz1=_inc_vbuz1 
    inc.z bx
    // [539] if((byte) gfx_init_plane_vertical::bx#1!=(byte) $28) goto gfx_init_plane_vertical::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z bx
    bne __b2_from___b2
    jmp __b3
    // gfx_init_plane_vertical::@3
  __b3:
    // [540] (byte) gfx_init_plane_vertical::by#1 ← ++ (byte) gfx_init_plane_vertical::by#4 -- vbuz1=_inc_vbuz1 
    inc.z by
    // [541] if((byte) gfx_init_plane_vertical::by#1!=(byte) $c8) goto gfx_init_plane_vertical::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z by
    bne __b1_from___b3
    // [542] phi from gfx_init_plane_vertical::@3 to gfx_init_plane_vertical::@4 [phi:gfx_init_plane_vertical::@3->gfx_init_plane_vertical::@4]
  __b4_from___b3:
    jmp __b4
    // gfx_init_plane_vertical::@4
  __b4:
    // [543] call dtvSetCpuBankSegment1 
  // Reset CPU BANK segment to $4000
    // [507] phi from gfx_init_plane_vertical::@4 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_vertical::@4->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from___b4:
    // [507] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)(number) $4000/(number) $4000 [phi:gfx_init_plane_vertical::@4->dtvSetCpuBankSegment1#0] -- vbuz1=vbuc1 
    lda #$4000/$4000
    sta.z dtvSetCpuBankSegment1.cpuBankIdx
    jsr dtvSetCpuBankSegment1
    jmp __breturn
    // gfx_init_plane_vertical::@return
  __breturn:
    // [544] return 
    rts
}
  // gfx_init_plane_horisontal
// Initialize Plane with Horizontal Stripes
gfx_init_plane_horisontal: {
    .const gfxbCpuBank = PLANE_HORISONTAL/$4000
    .label __2 = $12e
    .label gfxa = $4d
    .label ax = $4f
    .label ay = $4c
    // [546] call dtvSetCpuBankSegment1 
    // [507] phi from gfx_init_plane_horisontal to dtvSetCpuBankSegment1 [phi:gfx_init_plane_horisontal->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_gfx_init_plane_horisontal:
    // [507] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (const byte) gfx_init_plane_horisontal::gfxbCpuBank#0 [phi:gfx_init_plane_horisontal->dtvSetCpuBankSegment1#0] -- vbuz1=vbuc1 
    lda #gfxbCpuBank
    sta.z dtvSetCpuBankSegment1.cpuBankIdx
    jsr dtvSetCpuBankSegment1
    // [547] phi from gfx_init_plane_horisontal to gfx_init_plane_horisontal::@1 [phi:gfx_init_plane_horisontal->gfx_init_plane_horisontal::@1]
  __b1_from_gfx_init_plane_horisontal:
    // [547] phi (byte*) gfx_init_plane_horisontal::gfxa#6 = (byte*)(word) $4000 [phi:gfx_init_plane_horisontal->gfx_init_plane_horisontal::@1#0] -- pbuz1=pbuc1 
    lda #<$4000
    sta.z gfxa
    lda #>$4000
    sta.z gfxa+1
    // [547] phi (byte) gfx_init_plane_horisontal::ay#4 = (byte) 0 [phi:gfx_init_plane_horisontal->gfx_init_plane_horisontal::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z ay
    jmp __b1
    // [547] phi from gfx_init_plane_horisontal::@6 to gfx_init_plane_horisontal::@1 [phi:gfx_init_plane_horisontal::@6->gfx_init_plane_horisontal::@1]
  __b1_from___b6:
    // [547] phi (byte*) gfx_init_plane_horisontal::gfxa#6 = (byte*) gfx_init_plane_horisontal::gfxa#7 [phi:gfx_init_plane_horisontal::@6->gfx_init_plane_horisontal::@1#0] -- register_copy 
    // [547] phi (byte) gfx_init_plane_horisontal::ay#4 = (byte) gfx_init_plane_horisontal::ay#1 [phi:gfx_init_plane_horisontal::@6->gfx_init_plane_horisontal::@1#1] -- register_copy 
    jmp __b1
    // gfx_init_plane_horisontal::@1
  __b1:
    // [548] phi from gfx_init_plane_horisontal::@1 to gfx_init_plane_horisontal::@2 [phi:gfx_init_plane_horisontal::@1->gfx_init_plane_horisontal::@2]
  __b2_from___b1:
    // [548] phi (byte) gfx_init_plane_horisontal::ax#2 = (byte) 0 [phi:gfx_init_plane_horisontal::@1->gfx_init_plane_horisontal::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z ax
    // [548] phi (byte*) gfx_init_plane_horisontal::gfxa#3 = (byte*) gfx_init_plane_horisontal::gfxa#6 [phi:gfx_init_plane_horisontal::@1->gfx_init_plane_horisontal::@2#1] -- register_copy 
    jmp __b2
    // [548] phi from gfx_init_plane_horisontal::@4 to gfx_init_plane_horisontal::@2 [phi:gfx_init_plane_horisontal::@4->gfx_init_plane_horisontal::@2]
  __b2_from___b4:
    // [548] phi (byte) gfx_init_plane_horisontal::ax#2 = (byte) gfx_init_plane_horisontal::ax#1 [phi:gfx_init_plane_horisontal::@4->gfx_init_plane_horisontal::@2#0] -- register_copy 
    // [548] phi (byte*) gfx_init_plane_horisontal::gfxa#3 = (byte*) gfx_init_plane_horisontal::gfxa#7 [phi:gfx_init_plane_horisontal::@4->gfx_init_plane_horisontal::@2#1] -- register_copy 
    jmp __b2
    // gfx_init_plane_horisontal::@2
  __b2:
    // [549] (byte~) gfx_init_plane_horisontal::$2 ← (byte) gfx_init_plane_horisontal::ay#4 & (byte) 4 -- vbuz1=vbuz2_band_vbuc1 
    lda #4
    and.z ay
    sta.z __2
    // [550] if((byte~) gfx_init_plane_horisontal::$2==(byte) 0) goto gfx_init_plane_horisontal::@3 -- vbuz1_eq_0_then_la1 
    lda.z __2
    cmp #0
    beq __b3
    jmp __b5
    // gfx_init_plane_horisontal::@5
  __b5:
    // [551] *((byte*) gfx_init_plane_horisontal::gfxa#3) ← (byte) $ff -- _deref_pbuz1=vbuc1 
    lda #$ff
    ldy #0
    sta (gfxa),y
    // [552] (byte*) gfx_init_plane_horisontal::gfxa#2 ← ++ (byte*) gfx_init_plane_horisontal::gfxa#3 -- pbuz1=_inc_pbuz1 
    inc.z gfxa
    bne !+
    inc.z gfxa+1
  !:
    // [553] phi from gfx_init_plane_horisontal::@3 gfx_init_plane_horisontal::@5 to gfx_init_plane_horisontal::@4 [phi:gfx_init_plane_horisontal::@3/gfx_init_plane_horisontal::@5->gfx_init_plane_horisontal::@4]
  __b4_from___b3:
  __b4_from___b5:
    // [553] phi (byte*) gfx_init_plane_horisontal::gfxa#7 = (byte*) gfx_init_plane_horisontal::gfxa#1 [phi:gfx_init_plane_horisontal::@3/gfx_init_plane_horisontal::@5->gfx_init_plane_horisontal::@4#0] -- register_copy 
    jmp __b4
    // gfx_init_plane_horisontal::@4
  __b4:
    // [554] (byte) gfx_init_plane_horisontal::ax#1 ← ++ (byte) gfx_init_plane_horisontal::ax#2 -- vbuz1=_inc_vbuz1 
    inc.z ax
    // [555] if((byte) gfx_init_plane_horisontal::ax#1!=(byte) $28) goto gfx_init_plane_horisontal::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z ax
    bne __b2_from___b4
    jmp __b6
    // gfx_init_plane_horisontal::@6
  __b6:
    // [556] (byte) gfx_init_plane_horisontal::ay#1 ← ++ (byte) gfx_init_plane_horisontal::ay#4 -- vbuz1=_inc_vbuz1 
    inc.z ay
    // [557] if((byte) gfx_init_plane_horisontal::ay#1!=(byte) $c8) goto gfx_init_plane_horisontal::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z ay
    bne __b1_from___b6
    // [558] phi from gfx_init_plane_horisontal::@6 to gfx_init_plane_horisontal::@7 [phi:gfx_init_plane_horisontal::@6->gfx_init_plane_horisontal::@7]
  __b7_from___b6:
    jmp __b7
    // gfx_init_plane_horisontal::@7
  __b7:
    // [559] call dtvSetCpuBankSegment1 
  // Reset CPU BANK segment to $4000
    // [507] phi from gfx_init_plane_horisontal::@7 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_horisontal::@7->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from___b7:
    // [507] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)(number) $4000/(number) $4000 [phi:gfx_init_plane_horisontal::@7->dtvSetCpuBankSegment1#0] -- vbuz1=vbuc1 
    lda #$4000/$4000
    sta.z dtvSetCpuBankSegment1.cpuBankIdx
    jsr dtvSetCpuBankSegment1
    jmp __breturn
    // gfx_init_plane_horisontal::@return
  __breturn:
    // [560] return 
    rts
    // gfx_init_plane_horisontal::@3
  __b3:
    // [561] *((byte*) gfx_init_plane_horisontal::gfxa#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (gfxa),y
    // [562] (byte*) gfx_init_plane_horisontal::gfxa#1 ← ++ (byte*) gfx_init_plane_horisontal::gfxa#3 -- pbuz1=_inc_pbuz1 
    inc.z gfxa
    bne !+
    inc.z gfxa+1
  !:
    jmp __b4_from___b3
}
  // gfx_init_plane_charset8
// Initialize Plane with 8bpp charset
gfx_init_plane_charset8: {
    // 8bpp cells for Plane B (charset) - ROM charset with 256 colors
    .const gfxbCpuBank = PLANE_CHARSET8/$4000
    .label __2 = $12f
    .label bits = $54
    .label chargen = $51
    .label gfxa = $55
    .label col = $57
    .label cp = $58
    .label cr = $53
    .label ch = $50
    .label c = $59
    // [564] call dtvSetCpuBankSegment1 
    // [507] phi from gfx_init_plane_charset8 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_charset8->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_gfx_init_plane_charset8:
    // [507] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (const byte) gfx_init_plane_charset8::gfxbCpuBank#0 [phi:gfx_init_plane_charset8->dtvSetCpuBankSegment1#0] -- vbuz1=vbuc1 
    lda #gfxbCpuBank
    sta.z dtvSetCpuBankSegment1.cpuBankIdx
    jsr dtvSetCpuBankSegment1
    jmp __b9
    // gfx_init_plane_charset8::@9
  __b9:
    // [565] *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_RAM_CHARROM -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_CHARROM
    sta PROCPORT
    // [566] phi from gfx_init_plane_charset8::@9 to gfx_init_plane_charset8::@1 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1]
  __b1_from___b9:
    // [566] phi (byte) gfx_init_plane_charset8::ch#8 = (byte) 0 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z ch
    // [566] phi (byte) gfx_init_plane_charset8::col#6 = (byte) 0 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z col
    // [566] phi (byte*) gfx_init_plane_charset8::gfxa#6 = (byte*)(word) $4000 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#2] -- pbuz1=pbuc1 
    lda #<$4000
    sta.z gfxa
    lda #>$4000
    sta.z gfxa+1
    // [566] phi (byte*) gfx_init_plane_charset8::chargen#3 = (const nomodify byte*) CHARGEN [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#3] -- pbuz1=pbuc1 
    lda #<CHARGEN
    sta.z chargen
    lda #>CHARGEN
    sta.z chargen+1
    jmp __b1
    // [566] phi from gfx_init_plane_charset8::@7 to gfx_init_plane_charset8::@1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1]
  __b1_from___b7:
    // [566] phi (byte) gfx_init_plane_charset8::ch#8 = (byte) gfx_init_plane_charset8::ch#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#0] -- register_copy 
    // [566] phi (byte) gfx_init_plane_charset8::col#6 = (byte) gfx_init_plane_charset8::col#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#1] -- register_copy 
    // [566] phi (byte*) gfx_init_plane_charset8::gfxa#6 = (byte*) gfx_init_plane_charset8::gfxa#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#2] -- register_copy 
    // [566] phi (byte*) gfx_init_plane_charset8::chargen#3 = (byte*) gfx_init_plane_charset8::chargen#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#3] -- register_copy 
    jmp __b1
    // gfx_init_plane_charset8::@1
  __b1:
    // [567] phi from gfx_init_plane_charset8::@1 to gfx_init_plane_charset8::@2 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2]
  __b2_from___b1:
    // [567] phi (byte) gfx_init_plane_charset8::cr#6 = (byte) 0 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z cr
    // [567] phi (byte) gfx_init_plane_charset8::col#5 = (byte) gfx_init_plane_charset8::col#6 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#1] -- register_copy 
    // [567] phi (byte*) gfx_init_plane_charset8::gfxa#5 = (byte*) gfx_init_plane_charset8::gfxa#6 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#2] -- register_copy 
    // [567] phi (byte*) gfx_init_plane_charset8::chargen#2 = (byte*) gfx_init_plane_charset8::chargen#3 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#3] -- register_copy 
    jmp __b2
    // [567] phi from gfx_init_plane_charset8::@6 to gfx_init_plane_charset8::@2 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2]
  __b2_from___b6:
    // [567] phi (byte) gfx_init_plane_charset8::cr#6 = (byte) gfx_init_plane_charset8::cr#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#0] -- register_copy 
    // [567] phi (byte) gfx_init_plane_charset8::col#5 = (byte) gfx_init_plane_charset8::col#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#1] -- register_copy 
    // [567] phi (byte*) gfx_init_plane_charset8::gfxa#5 = (byte*) gfx_init_plane_charset8::gfxa#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#2] -- register_copy 
    // [567] phi (byte*) gfx_init_plane_charset8::chargen#2 = (byte*) gfx_init_plane_charset8::chargen#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#3] -- register_copy 
    jmp __b2
    // gfx_init_plane_charset8::@2
  __b2:
    // [568] (byte) gfx_init_plane_charset8::bits#0 ← *((byte*) gfx_init_plane_charset8::chargen#2) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (chargen),y
    sta.z bits
    // [569] (byte*) gfx_init_plane_charset8::chargen#1 ← ++ (byte*) gfx_init_plane_charset8::chargen#2 -- pbuz1=_inc_pbuz1 
    inc.z chargen
    bne !+
    inc.z chargen+1
  !:
    // [570] phi from gfx_init_plane_charset8::@2 to gfx_init_plane_charset8::@3 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3]
  __b3_from___b2:
    // [570] phi (byte) gfx_init_plane_charset8::cp#2 = (byte) 0 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta.z cp
    // [570] phi (byte) gfx_init_plane_charset8::col#2 = (byte) gfx_init_plane_charset8::col#5 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#1] -- register_copy 
    // [570] phi (byte*) gfx_init_plane_charset8::gfxa#2 = (byte*) gfx_init_plane_charset8::gfxa#5 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#2] -- register_copy 
    // [570] phi (byte) gfx_init_plane_charset8::bits#2 = (byte) gfx_init_plane_charset8::bits#0 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#3] -- register_copy 
    jmp __b3
    // [570] phi from gfx_init_plane_charset8::@4 to gfx_init_plane_charset8::@3 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3]
  __b3_from___b4:
    // [570] phi (byte) gfx_init_plane_charset8::cp#2 = (byte) gfx_init_plane_charset8::cp#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#0] -- register_copy 
    // [570] phi (byte) gfx_init_plane_charset8::col#2 = (byte) gfx_init_plane_charset8::col#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#1] -- register_copy 
    // [570] phi (byte*) gfx_init_plane_charset8::gfxa#2 = (byte*) gfx_init_plane_charset8::gfxa#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#2] -- register_copy 
    // [570] phi (byte) gfx_init_plane_charset8::bits#2 = (byte) gfx_init_plane_charset8::bits#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#3] -- register_copy 
    jmp __b3
    // gfx_init_plane_charset8::@3
  __b3:
    // [571] (byte~) gfx_init_plane_charset8::$2 ← (byte) gfx_init_plane_charset8::bits#2 & (byte) $80 -- vbuz1=vbuz2_band_vbuc1 
    lda #$80
    and.z bits
    sta.z __2
    // [572] if((byte~) gfx_init_plane_charset8::$2==(byte) 0) goto gfx_init_plane_charset8::@4 -- vbuz1_eq_0_then_la1 
    lda.z __2
    cmp #0
    beq __b4_from___b3
    jmp __b5
    // gfx_init_plane_charset8::@5
  __b5:
    // [573] (byte) gfx_init_plane_charset8::c#3 ← (byte) gfx_init_plane_charset8::col#2 -- vbuz1=vbuz2 
    lda.z col
    sta.z c
    // [574] phi from gfx_init_plane_charset8::@5 to gfx_init_plane_charset8::@4 [phi:gfx_init_plane_charset8::@5->gfx_init_plane_charset8::@4]
  __b4_from___b5:
    // [574] phi (byte) gfx_init_plane_charset8::c#2 = (byte) gfx_init_plane_charset8::c#3 [phi:gfx_init_plane_charset8::@5->gfx_init_plane_charset8::@4#0] -- register_copy 
    jmp __b4
    // [574] phi from gfx_init_plane_charset8::@3 to gfx_init_plane_charset8::@4 [phi:gfx_init_plane_charset8::@3->gfx_init_plane_charset8::@4]
  __b4_from___b3:
    // [574] phi (byte) gfx_init_plane_charset8::c#2 = (byte) 0 [phi:gfx_init_plane_charset8::@3->gfx_init_plane_charset8::@4#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    jmp __b4
    // gfx_init_plane_charset8::@4
  __b4:
    // [575] *((byte*) gfx_init_plane_charset8::gfxa#2) ← (byte) gfx_init_plane_charset8::c#2 -- _deref_pbuz1=vbuz2 
    lda.z c
    ldy #0
    sta (gfxa),y
    // [576] (byte*) gfx_init_plane_charset8::gfxa#1 ← ++ (byte*) gfx_init_plane_charset8::gfxa#2 -- pbuz1=_inc_pbuz1 
    inc.z gfxa
    bne !+
    inc.z gfxa+1
  !:
    // [577] (byte) gfx_init_plane_charset8::bits#1 ← (byte) gfx_init_plane_charset8::bits#2 << (byte) 1 -- vbuz1=vbuz1_rol_1 
    asl.z bits
    // [578] (byte) gfx_init_plane_charset8::col#1 ← ++ (byte) gfx_init_plane_charset8::col#2 -- vbuz1=_inc_vbuz1 
    inc.z col
    // [579] (byte) gfx_init_plane_charset8::cp#1 ← ++ (byte) gfx_init_plane_charset8::cp#2 -- vbuz1=_inc_vbuz1 
    inc.z cp
    // [580] if((byte) gfx_init_plane_charset8::cp#1!=(byte) 8) goto gfx_init_plane_charset8::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z cp
    bne __b3_from___b4
    jmp __b6
    // gfx_init_plane_charset8::@6
  __b6:
    // [581] (byte) gfx_init_plane_charset8::cr#1 ← ++ (byte) gfx_init_plane_charset8::cr#6 -- vbuz1=_inc_vbuz1 
    inc.z cr
    // [582] if((byte) gfx_init_plane_charset8::cr#1!=(byte) 8) goto gfx_init_plane_charset8::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z cr
    bne __b2_from___b6
    jmp __b7
    // gfx_init_plane_charset8::@7
  __b7:
    // [583] (byte) gfx_init_plane_charset8::ch#1 ← ++ (byte) gfx_init_plane_charset8::ch#8 -- vbuz1=_inc_vbuz1 
    inc.z ch
    // [584] if((byte) gfx_init_plane_charset8::ch#1!=(byte) 0) goto gfx_init_plane_charset8::@1 -- vbuz1_neq_0_then_la1 
    lda.z ch
    cmp #0
    bne __b1_from___b7
    jmp __b8
    // gfx_init_plane_charset8::@8
  __b8:
    // [585] *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_RAM_IO -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
    // [586] call dtvSetCpuBankSegment1 
  // Reset CPU BANK segment to $4000
    // [507] phi from gfx_init_plane_charset8::@8 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_charset8::@8->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from___b8:
    // [507] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)(number) $4000/(number) $4000 [phi:gfx_init_plane_charset8::@8->dtvSetCpuBankSegment1#0] -- vbuz1=vbuc1 
    lda #$4000/$4000
    sta.z dtvSetCpuBankSegment1.cpuBankIdx
    jsr dtvSetCpuBankSegment1
    jmp __breturn
    // gfx_init_plane_charset8::@return
  __breturn:
    // [587] return 
    rts
}
  // gfx_init_plane_8bppchunky
// Initialize 8BPP Chunky Bitmap (contains 8bpp pixels)
gfx_init_plane_8bppchunky: {
    .label __5 = $130
    .label c = $132
    .label gfxb = $5e
    .label x = $5b
    // 320x200 8bpp pixels for Plane
    .label gfxbCpuBank = $5d
    .label y = $5a
    // [589] call dtvSetCpuBankSegment1 
    // [507] phi from gfx_init_plane_8bppchunky to dtvSetCpuBankSegment1 [phi:gfx_init_plane_8bppchunky->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_gfx_init_plane_8bppchunky:
    // [507] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)(const nomodify dword) PLANE_8BPP_CHUNKY/(word) $4000 [phi:gfx_init_plane_8bppchunky->dtvSetCpuBankSegment1#0] -- vbuz1=vbuc1 
    lda #PLANE_8BPP_CHUNKY/$4000
    sta.z dtvSetCpuBankSegment1.cpuBankIdx
    jsr dtvSetCpuBankSegment1
    // [590] phi from gfx_init_plane_8bppchunky to gfx_init_plane_8bppchunky::@1 [phi:gfx_init_plane_8bppchunky->gfx_init_plane_8bppchunky::@1]
  __b1_from_gfx_init_plane_8bppchunky:
    // [590] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#7 = ++(byte)(const nomodify dword) PLANE_8BPP_CHUNKY/(word) $4000 [phi:gfx_init_plane_8bppchunky->gfx_init_plane_8bppchunky::@1#0] -- vbuz1=vbuc1 
    lda #PLANE_8BPP_CHUNKY/$4000+1
    sta.z gfxbCpuBank
    // [590] phi (byte) gfx_init_plane_8bppchunky::y#6 = (byte) 0 [phi:gfx_init_plane_8bppchunky->gfx_init_plane_8bppchunky::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    // [590] phi (byte*) gfx_init_plane_8bppchunky::gfxb#5 = (byte*) 16384 [phi:gfx_init_plane_8bppchunky->gfx_init_plane_8bppchunky::@1#2] -- pbuz1=pbuc1 
    lda #<$4000
    sta.z gfxb
    lda #>$4000
    sta.z gfxb+1
    jmp __b1
    // [590] phi from gfx_init_plane_8bppchunky::@5 to gfx_init_plane_8bppchunky::@1 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@1]
  __b1_from___b5:
    // [590] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#7 = (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@1#0] -- register_copy 
    // [590] phi (byte) gfx_init_plane_8bppchunky::y#6 = (byte) gfx_init_plane_8bppchunky::y#1 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@1#1] -- register_copy 
    // [590] phi (byte*) gfx_init_plane_8bppchunky::gfxb#5 = (byte*) gfx_init_plane_8bppchunky::gfxb#1 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@1#2] -- register_copy 
    jmp __b1
    // gfx_init_plane_8bppchunky::@1
  __b1:
    // [591] phi from gfx_init_plane_8bppchunky::@1 to gfx_init_plane_8bppchunky::@2 [phi:gfx_init_plane_8bppchunky::@1->gfx_init_plane_8bppchunky::@2]
  __b2_from___b1:
    // [591] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 = (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#7 [phi:gfx_init_plane_8bppchunky::@1->gfx_init_plane_8bppchunky::@2#0] -- register_copy 
    // [591] phi (word) gfx_init_plane_8bppchunky::x#2 = (word) 0 [phi:gfx_init_plane_8bppchunky::@1->gfx_init_plane_8bppchunky::@2#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z x
    lda #>0
    sta.z x+1
    // [591] phi (byte*) gfx_init_plane_8bppchunky::gfxb#3 = (byte*) gfx_init_plane_8bppchunky::gfxb#5 [phi:gfx_init_plane_8bppchunky::@1->gfx_init_plane_8bppchunky::@2#2] -- register_copy 
    jmp __b2
    // [591] phi from gfx_init_plane_8bppchunky::@3 to gfx_init_plane_8bppchunky::@2 [phi:gfx_init_plane_8bppchunky::@3->gfx_init_plane_8bppchunky::@2]
  __b2_from___b3:
    // [591] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 = (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 [phi:gfx_init_plane_8bppchunky::@3->gfx_init_plane_8bppchunky::@2#0] -- register_copy 
    // [591] phi (word) gfx_init_plane_8bppchunky::x#2 = (word) gfx_init_plane_8bppchunky::x#1 [phi:gfx_init_plane_8bppchunky::@3->gfx_init_plane_8bppchunky::@2#1] -- register_copy 
    // [591] phi (byte*) gfx_init_plane_8bppchunky::gfxb#3 = (byte*) gfx_init_plane_8bppchunky::gfxb#1 [phi:gfx_init_plane_8bppchunky::@3->gfx_init_plane_8bppchunky::@2#2] -- register_copy 
    jmp __b2
    // gfx_init_plane_8bppchunky::@2
  __b2:
    // [592] if((byte*) gfx_init_plane_8bppchunky::gfxb#3!=(word) $8000) goto gfx_init_plane_8bppchunky::@3 -- pbuz1_neq_vwuc1_then_la1 
    lda.z gfxb+1
    cmp #>$8000
    bne __b3_from___b2
    lda.z gfxb
    cmp #<$8000
    bne __b3_from___b2
    jmp __b4
    // gfx_init_plane_8bppchunky::@4
  __b4:
    // [593] (byte) dtvSetCpuBankSegment1::cpuBankIdx#1 ← (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 -- vbuz1=vbuz2 
    lda.z gfxbCpuBank
    sta.z dtvSetCpuBankSegment1.cpuBankIdx
    // [594] call dtvSetCpuBankSegment1 
    // [507] phi from gfx_init_plane_8bppchunky::@4 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_8bppchunky::@4->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from___b4:
    // [507] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte) dtvSetCpuBankSegment1::cpuBankIdx#1 [phi:gfx_init_plane_8bppchunky::@4->dtvSetCpuBankSegment1#0] -- register_copy 
    jsr dtvSetCpuBankSegment1
    jmp __b7
    // gfx_init_plane_8bppchunky::@7
  __b7:
    // [595] (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#2 ← ++ (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 -- vbuz1=_inc_vbuz1 
    inc.z gfxbCpuBank
    // [596] phi from gfx_init_plane_8bppchunky::@7 to gfx_init_plane_8bppchunky::@3 [phi:gfx_init_plane_8bppchunky::@7->gfx_init_plane_8bppchunky::@3]
  __b3_from___b7:
    // [596] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 = (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#2 [phi:gfx_init_plane_8bppchunky::@7->gfx_init_plane_8bppchunky::@3#0] -- register_copy 
    // [596] phi (byte*) gfx_init_plane_8bppchunky::gfxb#4 = (byte*) 16384 [phi:gfx_init_plane_8bppchunky::@7->gfx_init_plane_8bppchunky::@3#1] -- pbuz1=pbuc1 
    lda #<$4000
    sta.z gfxb
    lda #>$4000
    sta.z gfxb+1
    jmp __b3
    // [596] phi from gfx_init_plane_8bppchunky::@2 to gfx_init_plane_8bppchunky::@3 [phi:gfx_init_plane_8bppchunky::@2->gfx_init_plane_8bppchunky::@3]
  __b3_from___b2:
    // [596] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 = (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 [phi:gfx_init_plane_8bppchunky::@2->gfx_init_plane_8bppchunky::@3#0] -- register_copy 
    // [596] phi (byte*) gfx_init_plane_8bppchunky::gfxb#4 = (byte*) gfx_init_plane_8bppchunky::gfxb#3 [phi:gfx_init_plane_8bppchunky::@2->gfx_init_plane_8bppchunky::@3#1] -- register_copy 
    jmp __b3
    // gfx_init_plane_8bppchunky::@3
  __b3:
    // [597] (word~) gfx_init_plane_8bppchunky::$5 ← (word) gfx_init_plane_8bppchunky::x#2 + (byte) gfx_init_plane_8bppchunky::y#6 -- vwuz1=vwuz2_plus_vbuz3 
    lda.z y
    clc
    adc.z x
    sta.z __5
    lda #0
    adc.z x+1
    sta.z __5+1
    // [598] (byte) gfx_init_plane_8bppchunky::c#0 ← (byte)(word~) gfx_init_plane_8bppchunky::$5 -- vbuz1=_byte_vwuz2 
    lda.z __5
    sta.z c
    // [599] *((byte*) gfx_init_plane_8bppchunky::gfxb#4) ← (byte) gfx_init_plane_8bppchunky::c#0 -- _deref_pbuz1=vbuz2 
    lda.z c
    ldy #0
    sta (gfxb),y
    // [600] (byte*) gfx_init_plane_8bppchunky::gfxb#1 ← ++ (byte*) gfx_init_plane_8bppchunky::gfxb#4 -- pbuz1=_inc_pbuz1 
    inc.z gfxb
    bne !+
    inc.z gfxb+1
  !:
    // [601] (word) gfx_init_plane_8bppchunky::x#1 ← ++ (word) gfx_init_plane_8bppchunky::x#2 -- vwuz1=_inc_vwuz1 
    inc.z x
    bne !+
    inc.z x+1
  !:
    // [602] if((word) gfx_init_plane_8bppchunky::x#1!=(word) $140) goto gfx_init_plane_8bppchunky::@2 -- vwuz1_neq_vwuc1_then_la1 
    lda.z x+1
    cmp #>$140
    bne __b2_from___b3
    lda.z x
    cmp #<$140
    bne __b2_from___b3
    jmp __b5
    // gfx_init_plane_8bppchunky::@5
  __b5:
    // [603] (byte) gfx_init_plane_8bppchunky::y#1 ← ++ (byte) gfx_init_plane_8bppchunky::y#6 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [604] if((byte) gfx_init_plane_8bppchunky::y#1!=(byte) $c8) goto gfx_init_plane_8bppchunky::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z y
    bne __b1_from___b5
    // [605] phi from gfx_init_plane_8bppchunky::@5 to gfx_init_plane_8bppchunky::@6 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@6]
  __b6_from___b5:
    jmp __b6
    // gfx_init_plane_8bppchunky::@6
  __b6:
    // [606] call dtvSetCpuBankSegment1 
  // Reset CPU BANK segment to $4000
    // [507] phi from gfx_init_plane_8bppchunky::@6 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_8bppchunky::@6->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from___b6:
    // [507] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)(number) $4000/(number) $4000 [phi:gfx_init_plane_8bppchunky::@6->dtvSetCpuBankSegment1#0] -- vbuz1=vbuc1 
    lda #$4000/$4000
    sta.z dtvSetCpuBankSegment1.cpuBankIdx
    jsr dtvSetCpuBankSegment1
    jmp __breturn
    // gfx_init_plane_8bppchunky::@return
  __breturn:
    // [607] return 
    rts
}
  // gfx_init_vic_bitmap
// Initialize VIC bitmap
gfx_init_vic_bitmap: {
    .const lines_cnt = 9
    .label l = $60
    // [609] call bitmap_init 
  // Draw some lines on the bitmap
    // [761] phi from gfx_init_vic_bitmap to bitmap_init [phi:gfx_init_vic_bitmap->bitmap_init]
  bitmap_init_from_gfx_init_vic_bitmap:
    jsr bitmap_init
    // [610] phi from gfx_init_vic_bitmap to gfx_init_vic_bitmap::@3 [phi:gfx_init_vic_bitmap->gfx_init_vic_bitmap::@3]
  __b3_from_gfx_init_vic_bitmap:
    jmp __b3
    // gfx_init_vic_bitmap::@3
  __b3:
    // [611] call bitmap_clear 
    jsr bitmap_clear
    // [612] phi from gfx_init_vic_bitmap::@3 to gfx_init_vic_bitmap::@1 [phi:gfx_init_vic_bitmap::@3->gfx_init_vic_bitmap::@1]
  __b1_from___b3:
    // [612] phi (byte) gfx_init_vic_bitmap::l#2 = (byte) 0 [phi:gfx_init_vic_bitmap::@3->gfx_init_vic_bitmap::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    jmp __b1
    // gfx_init_vic_bitmap::@1
  __b1:
    // [613] if((byte) gfx_init_vic_bitmap::l#2<(const byte) gfx_init_vic_bitmap::lines_cnt) goto gfx_init_vic_bitmap::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z l
    cmp #lines_cnt
    bcc __b2
    jmp __breturn
    // gfx_init_vic_bitmap::@return
  __breturn:
    // [614] return 
    rts
    // gfx_init_vic_bitmap::@2
  __b2:
    // [615] (byte) bitmap_line::x0#0 ← *((const byte*) gfx_init_vic_bitmap::lines_x + (byte) gfx_init_vic_bitmap::l#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z l
    lda lines_x,y
    sta.z bitmap_line.x0
    // [616] (byte) bitmap_line::x1#0 ← *((const byte*) gfx_init_vic_bitmap::lines_x+(byte) 1 + (byte) gfx_init_vic_bitmap::l#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z l
    lda lines_x+1,y
    sta.z bitmap_line.x1
    // [617] (byte) bitmap_line::y0#0 ← *((const byte*) gfx_init_vic_bitmap::lines_y + (byte) gfx_init_vic_bitmap::l#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z l
    lda lines_y,y
    sta.z bitmap_line.y0
    // [618] (byte) bitmap_line::y1#0 ← *((const byte*) gfx_init_vic_bitmap::lines_y+(byte) 1 + (byte) gfx_init_vic_bitmap::l#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z l
    lda lines_y+1,y
    sta.z bitmap_line.y1
    // [619] call bitmap_line 
    jsr bitmap_line
    jmp __b4
    // gfx_init_vic_bitmap::@4
  __b4:
    // [620] (byte) gfx_init_vic_bitmap::l#1 ← ++ (byte) gfx_init_vic_bitmap::l#2 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [612] phi from gfx_init_vic_bitmap::@4 to gfx_init_vic_bitmap::@1 [phi:gfx_init_vic_bitmap::@4->gfx_init_vic_bitmap::@1]
  __b1_from___b4:
    // [612] phi (byte) gfx_init_vic_bitmap::l#2 = (byte) gfx_init_vic_bitmap::l#1 [phi:gfx_init_vic_bitmap::@4->gfx_init_vic_bitmap::@1#0] -- register_copy 
    jmp __b1
    lines_x: .byte 0, $ff, $ff, 0, 0, $80, $ff, $80, 0, $80
    lines_y: .byte 0, 0, $c7, $c7, 0, 0, $64, $c7, $64, 0
}
  // bitmap_line
// Draw a line on the bitmap
// bitmap_line(byte zp($133) x0, byte zp($134) x1, byte zp($135) y0, byte zp($136) y1)
bitmap_line: {
    .label xd = $13a
    .label xd_1 = $137
    .label yd = $139
    .label yd_1 = $138
    .label x0 = $133
    .label x1 = $134
    .label y0 = $135
    .label y1 = $136
    .label yd_2 = $13b
    .label yd_3 = $13c
    // [621] if((byte) bitmap_line::x0#0<(byte) bitmap_line::x1#0) goto bitmap_line::@1 -- vbuz1_lt_vbuz2_then_la1 
    lda.z x0
    cmp.z x1
    bcc __b1
    jmp __b2
    // bitmap_line::@2
  __b2:
    // [622] (byte) bitmap_line::xd#2 ← (byte) bitmap_line::x0#0 - (byte) bitmap_line::x1#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda.z x0
    sec
    sbc.z x1
    sta.z xd_1
    // [623] if((byte) bitmap_line::y0#0<(byte) bitmap_line::y1#0) goto bitmap_line::@7 -- vbuz1_lt_vbuz2_then_la1 
    lda.z y0
    cmp.z y1
    bcc __b7
    jmp __b3
    // bitmap_line::@3
  __b3:
    // [624] (byte) bitmap_line::yd#2 ← (byte) bitmap_line::y0#0 - (byte) bitmap_line::y1#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda.z y0
    sec
    sbc.z y1
    sta.z yd_1
    // [625] if((byte) bitmap_line::yd#2<(byte) bitmap_line::xd#2) goto bitmap_line::@8 -- vbuz1_lt_vbuz2_then_la1 
    lda.z yd_1
    cmp.z xd_1
    bcc __b8
    jmp __b4
    // bitmap_line::@4
  __b4:
    // [626] (byte) bitmap_line_ydxi::y#0 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuz2 
    lda.z y1
    sta.z bitmap_line_ydxi.y
    // [627] (byte) bitmap_line_ydxi::x#0 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z bitmap_line_ydxi.x
    // [628] (byte) bitmap_line_ydxi::y1#0 ← (byte) bitmap_line::y0#0 -- vbuz1=vbuz2 
    lda.z y0
    sta.z bitmap_line_ydxi.y1
    // [629] (byte) bitmap_line_ydxi::yd#0 ← (byte) bitmap_line::yd#2 -- vbuz1=vbuz2 
    lda.z yd_1
    sta.z bitmap_line_ydxi.yd
    // [630] (byte) bitmap_line_ydxi::xd#0 ← (byte) bitmap_line::xd#2 -- vbuz1=vbuz2 
    lda.z xd_1
    sta.z bitmap_line_ydxi.xd
    // [631] call bitmap_line_ydxi 
    // [705] phi from bitmap_line::@4 to bitmap_line_ydxi [phi:bitmap_line::@4->bitmap_line_ydxi]
  bitmap_line_ydxi_from___b4:
    // [705] phi (byte) bitmap_line_ydxi::y1#6 = (byte) bitmap_line_ydxi::y1#0 [phi:bitmap_line::@4->bitmap_line_ydxi#0] -- register_copy 
    // [705] phi (byte) bitmap_line_ydxi::yd#5 = (byte) bitmap_line_ydxi::yd#0 [phi:bitmap_line::@4->bitmap_line_ydxi#1] -- register_copy 
    // [705] phi (byte) bitmap_line_ydxi::y#6 = (byte) bitmap_line_ydxi::y#0 [phi:bitmap_line::@4->bitmap_line_ydxi#2] -- register_copy 
    // [705] phi (byte) bitmap_line_ydxi::x#5 = (byte) bitmap_line_ydxi::x#0 [phi:bitmap_line::@4->bitmap_line_ydxi#3] -- register_copy 
    // [705] phi (byte) bitmap_line_ydxi::xd#2 = (byte) bitmap_line_ydxi::xd#0 [phi:bitmap_line::@4->bitmap_line_ydxi#4] -- register_copy 
    jsr bitmap_line_ydxi
    jmp __breturn
    // bitmap_line::@return
  __breturn:
    // [632] return 
    rts
    // bitmap_line::@8
  __b8:
    // [633] (byte) bitmap_line_xdyi::x#0 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z bitmap_line_xdyi.x
    // [634] (byte) bitmap_line_xdyi::y#0 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuz2 
    lda.z y1
    sta.z bitmap_line_xdyi.y
    // [635] (byte) bitmap_line_xdyi::x1#0 ← (byte) bitmap_line::x0#0 -- vbuz1=vbuz2 
    lda.z x0
    sta.z bitmap_line_xdyi.x1
    // [636] (byte) bitmap_line_xdyi::xd#0 ← (byte) bitmap_line::xd#2 -- vbuz1=vbuz2 
    lda.z xd_1
    sta.z bitmap_line_xdyi.xd
    // [637] (byte) bitmap_line_xdyi::yd#0 ← (byte) bitmap_line::yd#2 -- vbuz1=vbuz2 
    lda.z yd_1
    sta.z bitmap_line_xdyi.yd
    // [638] call bitmap_line_xdyi 
    // [683] phi from bitmap_line::@8 to bitmap_line_xdyi [phi:bitmap_line::@8->bitmap_line_xdyi]
  bitmap_line_xdyi_from___b8:
    // [683] phi (byte) bitmap_line_xdyi::x1#6 = (byte) bitmap_line_xdyi::x1#0 [phi:bitmap_line::@8->bitmap_line_xdyi#0] -- register_copy 
    // [683] phi (byte) bitmap_line_xdyi::xd#5 = (byte) bitmap_line_xdyi::xd#0 [phi:bitmap_line::@8->bitmap_line_xdyi#1] -- register_copy 
    // [683] phi (byte) bitmap_line_xdyi::y#5 = (byte) bitmap_line_xdyi::y#0 [phi:bitmap_line::@8->bitmap_line_xdyi#2] -- register_copy 
    // [683] phi (byte) bitmap_line_xdyi::x#6 = (byte) bitmap_line_xdyi::x#0 [phi:bitmap_line::@8->bitmap_line_xdyi#3] -- register_copy 
    // [683] phi (byte) bitmap_line_xdyi::yd#2 = (byte) bitmap_line_xdyi::yd#0 [phi:bitmap_line::@8->bitmap_line_xdyi#4] -- register_copy 
    jsr bitmap_line_xdyi
    jmp __breturn
    // bitmap_line::@7
  __b7:
    // [639] (byte) bitmap_line::yd#1 ← (byte) bitmap_line::y1#0 - (byte) bitmap_line::y0#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda.z y1
    sec
    sbc.z y0
    sta.z yd
    // [640] if((byte) bitmap_line::yd#1<(byte) bitmap_line::xd#2) goto bitmap_line::@9 -- vbuz1_lt_vbuz2_then_la1 
    lda.z yd
    cmp.z xd_1
    bcc __b9
    jmp __b10
    // bitmap_line::@10
  __b10:
    // [641] (byte) bitmap_line_ydxd::y#0 ← (byte) bitmap_line::y0#0 -- vbuz1=vbuz2 
    lda.z y0
    sta.z bitmap_line_ydxd.y
    // [642] (byte) bitmap_line_ydxd::x#0 ← (byte) bitmap_line::x0#0 -- vbuz1=vbuz2 
    lda.z x0
    sta.z bitmap_line_ydxd.x
    // [643] (byte) bitmap_line_ydxd::y1#0 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuz2 
    lda.z y1
    sta.z bitmap_line_ydxd.y1
    // [644] (byte) bitmap_line_ydxd::yd#0 ← (byte) bitmap_line::yd#1 -- vbuz1=vbuz2 
    lda.z yd
    sta.z bitmap_line_ydxd.yd
    // [645] (byte) bitmap_line_ydxd::xd#0 ← (byte) bitmap_line::xd#2 -- vbuz1=vbuz2 
    lda.z xd_1
    sta.z bitmap_line_ydxd.xd
    // [646] call bitmap_line_ydxd 
    // [735] phi from bitmap_line::@10 to bitmap_line_ydxd [phi:bitmap_line::@10->bitmap_line_ydxd]
  bitmap_line_ydxd_from___b10:
    // [735] phi (byte) bitmap_line_ydxd::y1#6 = (byte) bitmap_line_ydxd::y1#0 [phi:bitmap_line::@10->bitmap_line_ydxd#0] -- register_copy 
    // [735] phi (byte) bitmap_line_ydxd::yd#5 = (byte) bitmap_line_ydxd::yd#0 [phi:bitmap_line::@10->bitmap_line_ydxd#1] -- register_copy 
    // [735] phi (byte) bitmap_line_ydxd::y#7 = (byte) bitmap_line_ydxd::y#0 [phi:bitmap_line::@10->bitmap_line_ydxd#2] -- register_copy 
    // [735] phi (byte) bitmap_line_ydxd::x#5 = (byte) bitmap_line_ydxd::x#0 [phi:bitmap_line::@10->bitmap_line_ydxd#3] -- register_copy 
    // [735] phi (byte) bitmap_line_ydxd::xd#2 = (byte) bitmap_line_ydxd::xd#0 [phi:bitmap_line::@10->bitmap_line_ydxd#4] -- register_copy 
    jsr bitmap_line_ydxd
    jmp __breturn
    // bitmap_line::@9
  __b9:
    // [647] (byte) bitmap_line_xdyd::x#0 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z bitmap_line_xdyd.x
    // [648] (byte) bitmap_line_xdyd::y#0 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuz2 
    lda.z y1
    sta.z bitmap_line_xdyd.y
    // [649] (byte) bitmap_line_xdyd::x1#0 ← (byte) bitmap_line::x0#0 -- vbuz1=vbuz2 
    lda.z x0
    sta.z bitmap_line_xdyd.x1
    // [650] (byte) bitmap_line_xdyd::xd#0 ← (byte) bitmap_line::xd#2 -- vbuz1=vbuz2 
    lda.z xd_1
    sta.z bitmap_line_xdyd.xd
    // [651] (byte) bitmap_line_xdyd::yd#0 ← (byte) bitmap_line::yd#1 -- vbuz1=vbuz2 
    lda.z yd
    sta.z bitmap_line_xdyd.yd
    // [652] call bitmap_line_xdyd 
    // [720] phi from bitmap_line::@9 to bitmap_line_xdyd [phi:bitmap_line::@9->bitmap_line_xdyd]
  bitmap_line_xdyd_from___b9:
    // [720] phi (byte) bitmap_line_xdyd::x1#6 = (byte) bitmap_line_xdyd::x1#0 [phi:bitmap_line::@9->bitmap_line_xdyd#0] -- register_copy 
    // [720] phi (byte) bitmap_line_xdyd::xd#5 = (byte) bitmap_line_xdyd::xd#0 [phi:bitmap_line::@9->bitmap_line_xdyd#1] -- register_copy 
    // [720] phi (byte) bitmap_line_xdyd::y#5 = (byte) bitmap_line_xdyd::y#0 [phi:bitmap_line::@9->bitmap_line_xdyd#2] -- register_copy 
    // [720] phi (byte) bitmap_line_xdyd::x#6 = (byte) bitmap_line_xdyd::x#0 [phi:bitmap_line::@9->bitmap_line_xdyd#3] -- register_copy 
    // [720] phi (byte) bitmap_line_xdyd::yd#2 = (byte) bitmap_line_xdyd::yd#0 [phi:bitmap_line::@9->bitmap_line_xdyd#4] -- register_copy 
    jsr bitmap_line_xdyd
    jmp __breturn
    // bitmap_line::@1
  __b1:
    // [653] (byte) bitmap_line::xd#1 ← (byte) bitmap_line::x1#0 - (byte) bitmap_line::x0#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda.z x1
    sec
    sbc.z x0
    sta.z xd
    // [654] if((byte) bitmap_line::y0#0<(byte) bitmap_line::y1#0) goto bitmap_line::@11 -- vbuz1_lt_vbuz2_then_la1 
    lda.z y0
    cmp.z y1
    bcc __b11
    jmp __b5
    // bitmap_line::@5
  __b5:
    // [655] (byte) bitmap_line::yd#10 ← (byte) bitmap_line::y0#0 - (byte) bitmap_line::y1#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda.z y0
    sec
    sbc.z y1
    sta.z yd_2
    // [656] if((byte) bitmap_line::yd#10<(byte) bitmap_line::xd#1) goto bitmap_line::@12 -- vbuz1_lt_vbuz2_then_la1 
    lda.z yd_2
    cmp.z xd
    bcc __b12
    jmp __b6
    // bitmap_line::@6
  __b6:
    // [657] (byte) bitmap_line_ydxd::y#1 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuz2 
    lda.z y1
    sta.z bitmap_line_ydxd.y
    // [658] (byte) bitmap_line_ydxd::x#1 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z bitmap_line_ydxd.x
    // [659] (byte) bitmap_line_ydxd::y1#1 ← (byte) bitmap_line::y0#0 -- vbuz1=vbuz2 
    lda.z y0
    sta.z bitmap_line_ydxd.y1
    // [660] (byte) bitmap_line_ydxd::yd#1 ← (byte) bitmap_line::yd#10 -- vbuz1=vbuz2 
    lda.z yd_2
    sta.z bitmap_line_ydxd.yd
    // [661] (byte) bitmap_line_ydxd::xd#1 ← (byte) bitmap_line::xd#1 -- vbuz1=vbuz2 
    lda.z xd
    sta.z bitmap_line_ydxd.xd
    // [662] call bitmap_line_ydxd 
    // [735] phi from bitmap_line::@6 to bitmap_line_ydxd [phi:bitmap_line::@6->bitmap_line_ydxd]
  bitmap_line_ydxd_from___b6:
    // [735] phi (byte) bitmap_line_ydxd::y1#6 = (byte) bitmap_line_ydxd::y1#1 [phi:bitmap_line::@6->bitmap_line_ydxd#0] -- register_copy 
    // [735] phi (byte) bitmap_line_ydxd::yd#5 = (byte) bitmap_line_ydxd::yd#1 [phi:bitmap_line::@6->bitmap_line_ydxd#1] -- register_copy 
    // [735] phi (byte) bitmap_line_ydxd::y#7 = (byte) bitmap_line_ydxd::y#1 [phi:bitmap_line::@6->bitmap_line_ydxd#2] -- register_copy 
    // [735] phi (byte) bitmap_line_ydxd::x#5 = (byte) bitmap_line_ydxd::x#1 [phi:bitmap_line::@6->bitmap_line_ydxd#3] -- register_copy 
    // [735] phi (byte) bitmap_line_ydxd::xd#2 = (byte) bitmap_line_ydxd::xd#1 [phi:bitmap_line::@6->bitmap_line_ydxd#4] -- register_copy 
    jsr bitmap_line_ydxd
    jmp __breturn
    // bitmap_line::@12
  __b12:
    // [663] (byte) bitmap_line_xdyd::x#1 ← (byte) bitmap_line::x0#0 -- vbuz1=vbuz2 
    lda.z x0
    sta.z bitmap_line_xdyd.x
    // [664] (byte) bitmap_line_xdyd::y#1 ← (byte) bitmap_line::y0#0 -- vbuz1=vbuz2 
    lda.z y0
    sta.z bitmap_line_xdyd.y
    // [665] (byte) bitmap_line_xdyd::x1#1 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z bitmap_line_xdyd.x1
    // [666] (byte) bitmap_line_xdyd::xd#1 ← (byte) bitmap_line::xd#1 -- vbuz1=vbuz2 
    lda.z xd
    sta.z bitmap_line_xdyd.xd
    // [667] (byte) bitmap_line_xdyd::yd#1 ← (byte) bitmap_line::yd#10 -- vbuz1=vbuz2 
    lda.z yd_2
    sta.z bitmap_line_xdyd.yd
    // [668] call bitmap_line_xdyd 
    // [720] phi from bitmap_line::@12 to bitmap_line_xdyd [phi:bitmap_line::@12->bitmap_line_xdyd]
  bitmap_line_xdyd_from___b12:
    // [720] phi (byte) bitmap_line_xdyd::x1#6 = (byte) bitmap_line_xdyd::x1#1 [phi:bitmap_line::@12->bitmap_line_xdyd#0] -- register_copy 
    // [720] phi (byte) bitmap_line_xdyd::xd#5 = (byte) bitmap_line_xdyd::xd#1 [phi:bitmap_line::@12->bitmap_line_xdyd#1] -- register_copy 
    // [720] phi (byte) bitmap_line_xdyd::y#5 = (byte) bitmap_line_xdyd::y#1 [phi:bitmap_line::@12->bitmap_line_xdyd#2] -- register_copy 
    // [720] phi (byte) bitmap_line_xdyd::x#6 = (byte) bitmap_line_xdyd::x#1 [phi:bitmap_line::@12->bitmap_line_xdyd#3] -- register_copy 
    // [720] phi (byte) bitmap_line_xdyd::yd#2 = (byte) bitmap_line_xdyd::yd#1 [phi:bitmap_line::@12->bitmap_line_xdyd#4] -- register_copy 
    jsr bitmap_line_xdyd
    jmp __breturn
    // bitmap_line::@11
  __b11:
    // [669] (byte) bitmap_line::yd#11 ← (byte) bitmap_line::y1#0 - (byte) bitmap_line::y0#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda.z y1
    sec
    sbc.z y0
    sta.z yd_3
    // [670] if((byte) bitmap_line::yd#11<(byte) bitmap_line::xd#1) goto bitmap_line::@13 -- vbuz1_lt_vbuz2_then_la1 
    lda.z yd_3
    cmp.z xd
    bcc __b13
    jmp __b14
    // bitmap_line::@14
  __b14:
    // [671] (byte) bitmap_line_ydxi::y#1 ← (byte) bitmap_line::y0#0 -- vbuz1=vbuz2 
    lda.z y0
    sta.z bitmap_line_ydxi.y
    // [672] (byte) bitmap_line_ydxi::x#1 ← (byte) bitmap_line::x0#0 -- vbuz1=vbuz2 
    lda.z x0
    sta.z bitmap_line_ydxi.x
    // [673] (byte) bitmap_line_ydxi::y1#1 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuz2 
    lda.z y1
    sta.z bitmap_line_ydxi.y1
    // [674] (byte) bitmap_line_ydxi::yd#1 ← (byte) bitmap_line::yd#11 -- vbuz1=vbuz2 
    lda.z yd_3
    sta.z bitmap_line_ydxi.yd
    // [675] (byte) bitmap_line_ydxi::xd#1 ← (byte) bitmap_line::xd#1 -- vbuz1=vbuz2 
    lda.z xd
    sta.z bitmap_line_ydxi.xd
    // [676] call bitmap_line_ydxi 
    // [705] phi from bitmap_line::@14 to bitmap_line_ydxi [phi:bitmap_line::@14->bitmap_line_ydxi]
  bitmap_line_ydxi_from___b14:
    // [705] phi (byte) bitmap_line_ydxi::y1#6 = (byte) bitmap_line_ydxi::y1#1 [phi:bitmap_line::@14->bitmap_line_ydxi#0] -- register_copy 
    // [705] phi (byte) bitmap_line_ydxi::yd#5 = (byte) bitmap_line_ydxi::yd#1 [phi:bitmap_line::@14->bitmap_line_ydxi#1] -- register_copy 
    // [705] phi (byte) bitmap_line_ydxi::y#6 = (byte) bitmap_line_ydxi::y#1 [phi:bitmap_line::@14->bitmap_line_ydxi#2] -- register_copy 
    // [705] phi (byte) bitmap_line_ydxi::x#5 = (byte) bitmap_line_ydxi::x#1 [phi:bitmap_line::@14->bitmap_line_ydxi#3] -- register_copy 
    // [705] phi (byte) bitmap_line_ydxi::xd#2 = (byte) bitmap_line_ydxi::xd#1 [phi:bitmap_line::@14->bitmap_line_ydxi#4] -- register_copy 
    jsr bitmap_line_ydxi
    jmp __breturn
    // bitmap_line::@13
  __b13:
    // [677] (byte) bitmap_line_xdyi::x#1 ← (byte) bitmap_line::x0#0 -- vbuz1=vbuz2 
    lda.z x0
    sta.z bitmap_line_xdyi.x
    // [678] (byte) bitmap_line_xdyi::y#1 ← (byte) bitmap_line::y0#0 -- vbuz1=vbuz2 
    lda.z y0
    sta.z bitmap_line_xdyi.y
    // [679] (byte) bitmap_line_xdyi::x1#1 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z bitmap_line_xdyi.x1
    // [680] (byte) bitmap_line_xdyi::xd#1 ← (byte) bitmap_line::xd#1 -- vbuz1=vbuz2 
    lda.z xd
    sta.z bitmap_line_xdyi.xd
    // [681] (byte) bitmap_line_xdyi::yd#1 ← (byte) bitmap_line::yd#11 -- vbuz1=vbuz2 
    lda.z yd_3
    sta.z bitmap_line_xdyi.yd
    // [682] call bitmap_line_xdyi 
    // [683] phi from bitmap_line::@13 to bitmap_line_xdyi [phi:bitmap_line::@13->bitmap_line_xdyi]
  bitmap_line_xdyi_from___b13:
    // [683] phi (byte) bitmap_line_xdyi::x1#6 = (byte) bitmap_line_xdyi::x1#1 [phi:bitmap_line::@13->bitmap_line_xdyi#0] -- register_copy 
    // [683] phi (byte) bitmap_line_xdyi::xd#5 = (byte) bitmap_line_xdyi::xd#1 [phi:bitmap_line::@13->bitmap_line_xdyi#1] -- register_copy 
    // [683] phi (byte) bitmap_line_xdyi::y#5 = (byte) bitmap_line_xdyi::y#1 [phi:bitmap_line::@13->bitmap_line_xdyi#2] -- register_copy 
    // [683] phi (byte) bitmap_line_xdyi::x#6 = (byte) bitmap_line_xdyi::x#1 [phi:bitmap_line::@13->bitmap_line_xdyi#3] -- register_copy 
    // [683] phi (byte) bitmap_line_xdyi::yd#2 = (byte) bitmap_line_xdyi::yd#1 [phi:bitmap_line::@13->bitmap_line_xdyi#4] -- register_copy 
    jsr bitmap_line_xdyi
    jmp __breturn
}
  // bitmap_line_xdyi
// bitmap_line_xdyi(byte zp($64) x, byte zp($65) y, byte zp($63) x1, byte zp($62) xd, byte zp($61) yd)
bitmap_line_xdyi: {
    .label __6 = $13d
    .label x = $64
    .label y = $65
    .label x1 = $63
    .label xd = $62
    .label yd = $61
    .label e = $66
    // [684] (byte) bitmap_line_xdyi::e#0 ← (byte) bitmap_line_xdyi::yd#2 >> (byte) 1 -- vbuz1=vbuz2_ror_1 
    lda.z yd
    lsr
    sta.z e
    // [685] phi from bitmap_line_xdyi bitmap_line_xdyi::@2 to bitmap_line_xdyi::@1 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1]
  __b1_from_bitmap_line_xdyi:
  __b1_from___b2:
    // [685] phi (byte) bitmap_line_xdyi::e#3 = (byte) bitmap_line_xdyi::e#0 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1#0] -- register_copy 
    // [685] phi (byte) bitmap_line_xdyi::y#3 = (byte) bitmap_line_xdyi::y#5 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1#1] -- register_copy 
    // [685] phi (byte) bitmap_line_xdyi::x#3 = (byte) bitmap_line_xdyi::x#6 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1#2] -- register_copy 
    jmp __b1
    // bitmap_line_xdyi::@1
  __b1:
    // [686] (byte) bitmap_plot::x#0 ← (byte) bitmap_line_xdyi::x#3 -- vbuz1=vbuz2 
    lda.z x
    sta.z bitmap_plot.x
    // [687] (byte) bitmap_plot::y#0 ← (byte) bitmap_line_xdyi::y#3 -- vbuz1=vbuz2 
    lda.z y
    sta.z bitmap_plot.y
    // [688] call bitmap_plot 
    // [698] phi from bitmap_line_xdyi::@1 to bitmap_plot [phi:bitmap_line_xdyi::@1->bitmap_plot]
  bitmap_plot_from___b1:
    // [698] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#0 [phi:bitmap_line_xdyi::@1->bitmap_plot#0] -- register_copy 
    // [698] phi (byte) bitmap_plot::x#4 = (byte) bitmap_plot::x#0 [phi:bitmap_line_xdyi::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp __b4
    // bitmap_line_xdyi::@4
  __b4:
    // [689] (byte) bitmap_line_xdyi::x#2 ← ++ (byte) bitmap_line_xdyi::x#3 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [690] (byte) bitmap_line_xdyi::e#1 ← (byte) bitmap_line_xdyi::e#3 + (byte) bitmap_line_xdyi::yd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z e
    clc
    adc.z yd
    sta.z e
    // [691] if((byte) bitmap_line_xdyi::xd#5>=(byte) bitmap_line_xdyi::e#1) goto bitmap_line_xdyi::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z xd
    cmp.z e
    bcs __b2_from___b4
    jmp __b3
    // bitmap_line_xdyi::@3
  __b3:
    // [692] (byte) bitmap_line_xdyi::y#2 ← ++ (byte) bitmap_line_xdyi::y#3 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [693] (byte) bitmap_line_xdyi::e#2 ← (byte) bitmap_line_xdyi::e#1 - (byte) bitmap_line_xdyi::xd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z e
    sec
    sbc.z xd
    sta.z e
    // [694] phi from bitmap_line_xdyi::@3 bitmap_line_xdyi::@4 to bitmap_line_xdyi::@2 [phi:bitmap_line_xdyi::@3/bitmap_line_xdyi::@4->bitmap_line_xdyi::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [694] phi (byte) bitmap_line_xdyi::e#6 = (byte) bitmap_line_xdyi::e#2 [phi:bitmap_line_xdyi::@3/bitmap_line_xdyi::@4->bitmap_line_xdyi::@2#0] -- register_copy 
    // [694] phi (byte) bitmap_line_xdyi::y#6 = (byte) bitmap_line_xdyi::y#2 [phi:bitmap_line_xdyi::@3/bitmap_line_xdyi::@4->bitmap_line_xdyi::@2#1] -- register_copy 
    jmp __b2
    // bitmap_line_xdyi::@2
  __b2:
    // [695] (byte~) bitmap_line_xdyi::$6 ← (byte) bitmap_line_xdyi::x1#6 + (byte) 1 -- vbuz1=vbuz2_plus_1 
    ldy.z x1
    iny
    sty.z __6
    // [696] if((byte) bitmap_line_xdyi::x#2!=(byte~) bitmap_line_xdyi::$6) goto bitmap_line_xdyi::@1 -- vbuz1_neq_vbuz2_then_la1 
    lda.z x
    cmp.z __6
    bne __b1_from___b2
    jmp __breturn
    // bitmap_line_xdyi::@return
  __breturn:
    // [697] return 
    rts
}
  // bitmap_plot
// bitmap_plot(byte zp($67) x, byte zp($68) y)
bitmap_plot: {
    .label __1 = $144
    .label plotter_x = $13e
    .label plotter_y = $140
    .label plotter = $142
    .label x = $67
    .label y = $68
    // [699] (word) bitmap_plot::plotter_x#0 ← *((const to_nomodify byte*) bitmap_plot_xhi + (byte) bitmap_plot::x#4) w= *((const to_nomodify byte*) bitmap_plot_xlo + (byte) bitmap_plot::x#4) -- vwuz1=pbuc1_derefidx_vbuz2_word_pbuc2_derefidx_vbuz2 
    ldy.z x
    lda bitmap_plot_xhi,y
    sta.z plotter_x+1
    lda bitmap_plot_xlo,y
    sta.z plotter_x
    // [700] (word) bitmap_plot::plotter_y#0 ← *((const to_nomodify byte*) bitmap_plot_yhi + (byte) bitmap_plot::y#4) w= *((const to_nomodify byte*) bitmap_plot_ylo + (byte) bitmap_plot::y#4) -- vwuz1=pbuc1_derefidx_vbuz2_word_pbuc2_derefidx_vbuz2 
    ldy.z y
    lda bitmap_plot_yhi,y
    sta.z plotter_y+1
    lda bitmap_plot_ylo,y
    sta.z plotter_y
    // [701] (word) bitmap_plot::plotter#0 ← (word) bitmap_plot::plotter_x#0 + (word) bitmap_plot::plotter_y#0 -- vwuz1=vwuz2_plus_vwuz3 
    lda.z plotter_x
    clc
    adc.z plotter_y
    sta.z plotter
    lda.z plotter_x+1
    adc.z plotter_y+1
    sta.z plotter+1
    // [702] (byte~) bitmap_plot::$1 ← *((byte*)(word) bitmap_plot::plotter#0) | *((const to_nomodify byte*) bitmap_plot_bit + (byte) bitmap_plot::x#4) -- vbuz1=_deref_pbuz2_bor_pbuc1_derefidx_vbuz3 
    ldy #0
    lda (plotter),y
    ldy.z x
    ora bitmap_plot_bit,y
    sta.z __1
    // [703] *((byte*)(word) bitmap_plot::plotter#0) ← (byte~) bitmap_plot::$1 -- _deref_pbuz1=vbuz2 
    lda.z __1
    ldy #0
    sta (plotter),y
    jmp __breturn
    // bitmap_plot::@return
  __breturn:
    // [704] return 
    rts
}
  // bitmap_line_ydxi
// bitmap_line_ydxi(byte zp($6d) y, byte zp($6c) x, byte zp($6b) y1, byte zp($6a) yd, byte zp($69) xd)
bitmap_line_ydxi: {
    .label __6 = $145
    .label y = $6d
    .label x = $6c
    .label y1 = $6b
    .label yd = $6a
    .label xd = $69
    .label e = $6e
    // [706] (byte) bitmap_line_ydxi::e#0 ← (byte) bitmap_line_ydxi::xd#2 >> (byte) 1 -- vbuz1=vbuz2_ror_1 
    lda.z xd
    lsr
    sta.z e
    // [707] phi from bitmap_line_ydxi bitmap_line_ydxi::@2 to bitmap_line_ydxi::@1 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1]
  __b1_from_bitmap_line_ydxi:
  __b1_from___b2:
    // [707] phi (byte) bitmap_line_ydxi::e#3 = (byte) bitmap_line_ydxi::e#0 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1#0] -- register_copy 
    // [707] phi (byte) bitmap_line_ydxi::y#3 = (byte) bitmap_line_ydxi::y#6 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1#1] -- register_copy 
    // [707] phi (byte) bitmap_line_ydxi::x#3 = (byte) bitmap_line_ydxi::x#5 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1#2] -- register_copy 
    jmp __b1
    // bitmap_line_ydxi::@1
  __b1:
    // [708] (byte) bitmap_plot::x#2 ← (byte) bitmap_line_ydxi::x#3 -- vbuz1=vbuz2 
    lda.z x
    sta.z bitmap_plot.x
    // [709] (byte) bitmap_plot::y#2 ← (byte) bitmap_line_ydxi::y#3 -- vbuz1=vbuz2 
    lda.z y
    sta.z bitmap_plot.y
    // [710] call bitmap_plot 
    // [698] phi from bitmap_line_ydxi::@1 to bitmap_plot [phi:bitmap_line_ydxi::@1->bitmap_plot]
  bitmap_plot_from___b1:
    // [698] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#2 [phi:bitmap_line_ydxi::@1->bitmap_plot#0] -- register_copy 
    // [698] phi (byte) bitmap_plot::x#4 = (byte) bitmap_plot::x#2 [phi:bitmap_line_ydxi::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp __b4
    // bitmap_line_ydxi::@4
  __b4:
    // [711] (byte) bitmap_line_ydxi::y#2 ← ++ (byte) bitmap_line_ydxi::y#3 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [712] (byte) bitmap_line_ydxi::e#1 ← (byte) bitmap_line_ydxi::e#3 + (byte) bitmap_line_ydxi::xd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z e
    clc
    adc.z xd
    sta.z e
    // [713] if((byte) bitmap_line_ydxi::yd#5>=(byte) bitmap_line_ydxi::e#1) goto bitmap_line_ydxi::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z yd
    cmp.z e
    bcs __b2_from___b4
    jmp __b3
    // bitmap_line_ydxi::@3
  __b3:
    // [714] (byte) bitmap_line_ydxi::x#2 ← ++ (byte) bitmap_line_ydxi::x#3 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [715] (byte) bitmap_line_ydxi::e#2 ← (byte) bitmap_line_ydxi::e#1 - (byte) bitmap_line_ydxi::yd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z e
    sec
    sbc.z yd
    sta.z e
    // [716] phi from bitmap_line_ydxi::@3 bitmap_line_ydxi::@4 to bitmap_line_ydxi::@2 [phi:bitmap_line_ydxi::@3/bitmap_line_ydxi::@4->bitmap_line_ydxi::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [716] phi (byte) bitmap_line_ydxi::e#6 = (byte) bitmap_line_ydxi::e#2 [phi:bitmap_line_ydxi::@3/bitmap_line_ydxi::@4->bitmap_line_ydxi::@2#0] -- register_copy 
    // [716] phi (byte) bitmap_line_ydxi::x#6 = (byte) bitmap_line_ydxi::x#2 [phi:bitmap_line_ydxi::@3/bitmap_line_ydxi::@4->bitmap_line_ydxi::@2#1] -- register_copy 
    jmp __b2
    // bitmap_line_ydxi::@2
  __b2:
    // [717] (byte~) bitmap_line_ydxi::$6 ← (byte) bitmap_line_ydxi::y1#6 + (byte) 1 -- vbuz1=vbuz2_plus_1 
    ldy.z y1
    iny
    sty.z __6
    // [718] if((byte) bitmap_line_ydxi::y#2!=(byte~) bitmap_line_ydxi::$6) goto bitmap_line_ydxi::@1 -- vbuz1_neq_vbuz2_then_la1 
    lda.z y
    cmp.z __6
    bne __b1_from___b2
    jmp __breturn
    // bitmap_line_ydxi::@return
  __breturn:
    // [719] return 
    rts
}
  // bitmap_line_xdyd
// bitmap_line_xdyd(byte zp($72) x, byte zp($73) y, byte zp($71) x1, byte zp($70) xd, byte zp($6f) yd)
bitmap_line_xdyd: {
    .label __6 = $146
    .label x = $72
    .label y = $73
    .label x1 = $71
    .label xd = $70
    .label yd = $6f
    .label e = $74
    // [721] (byte) bitmap_line_xdyd::e#0 ← (byte) bitmap_line_xdyd::yd#2 >> (byte) 1 -- vbuz1=vbuz2_ror_1 
    lda.z yd
    lsr
    sta.z e
    // [722] phi from bitmap_line_xdyd bitmap_line_xdyd::@2 to bitmap_line_xdyd::@1 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1]
  __b1_from_bitmap_line_xdyd:
  __b1_from___b2:
    // [722] phi (byte) bitmap_line_xdyd::e#3 = (byte) bitmap_line_xdyd::e#0 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1#0] -- register_copy 
    // [722] phi (byte) bitmap_line_xdyd::y#3 = (byte) bitmap_line_xdyd::y#5 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1#1] -- register_copy 
    // [722] phi (byte) bitmap_line_xdyd::x#3 = (byte) bitmap_line_xdyd::x#6 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1#2] -- register_copy 
    jmp __b1
    // bitmap_line_xdyd::@1
  __b1:
    // [723] (byte) bitmap_plot::x#1 ← (byte) bitmap_line_xdyd::x#3 -- vbuz1=vbuz2 
    lda.z x
    sta.z bitmap_plot.x
    // [724] (byte) bitmap_plot::y#1 ← (byte) bitmap_line_xdyd::y#3 -- vbuz1=vbuz2 
    lda.z y
    sta.z bitmap_plot.y
    // [725] call bitmap_plot 
    // [698] phi from bitmap_line_xdyd::@1 to bitmap_plot [phi:bitmap_line_xdyd::@1->bitmap_plot]
  bitmap_plot_from___b1:
    // [698] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#1 [phi:bitmap_line_xdyd::@1->bitmap_plot#0] -- register_copy 
    // [698] phi (byte) bitmap_plot::x#4 = (byte) bitmap_plot::x#1 [phi:bitmap_line_xdyd::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp __b4
    // bitmap_line_xdyd::@4
  __b4:
    // [726] (byte) bitmap_line_xdyd::x#2 ← ++ (byte) bitmap_line_xdyd::x#3 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [727] (byte) bitmap_line_xdyd::e#1 ← (byte) bitmap_line_xdyd::e#3 + (byte) bitmap_line_xdyd::yd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z e
    clc
    adc.z yd
    sta.z e
    // [728] if((byte) bitmap_line_xdyd::xd#5>=(byte) bitmap_line_xdyd::e#1) goto bitmap_line_xdyd::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z xd
    cmp.z e
    bcs __b2_from___b4
    jmp __b3
    // bitmap_line_xdyd::@3
  __b3:
    // [729] (byte) bitmap_line_xdyd::y#2 ← -- (byte) bitmap_line_xdyd::y#3 -- vbuz1=_dec_vbuz1 
    dec.z y
    // [730] (byte) bitmap_line_xdyd::e#2 ← (byte) bitmap_line_xdyd::e#1 - (byte) bitmap_line_xdyd::xd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z e
    sec
    sbc.z xd
    sta.z e
    // [731] phi from bitmap_line_xdyd::@3 bitmap_line_xdyd::@4 to bitmap_line_xdyd::@2 [phi:bitmap_line_xdyd::@3/bitmap_line_xdyd::@4->bitmap_line_xdyd::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [731] phi (byte) bitmap_line_xdyd::e#6 = (byte) bitmap_line_xdyd::e#2 [phi:bitmap_line_xdyd::@3/bitmap_line_xdyd::@4->bitmap_line_xdyd::@2#0] -- register_copy 
    // [731] phi (byte) bitmap_line_xdyd::y#6 = (byte) bitmap_line_xdyd::y#2 [phi:bitmap_line_xdyd::@3/bitmap_line_xdyd::@4->bitmap_line_xdyd::@2#1] -- register_copy 
    jmp __b2
    // bitmap_line_xdyd::@2
  __b2:
    // [732] (byte~) bitmap_line_xdyd::$6 ← (byte) bitmap_line_xdyd::x1#6 + (byte) 1 -- vbuz1=vbuz2_plus_1 
    ldy.z x1
    iny
    sty.z __6
    // [733] if((byte) bitmap_line_xdyd::x#2!=(byte~) bitmap_line_xdyd::$6) goto bitmap_line_xdyd::@1 -- vbuz1_neq_vbuz2_then_la1 
    lda.z x
    cmp.z __6
    bne __b1_from___b2
    jmp __breturn
    // bitmap_line_xdyd::@return
  __breturn:
    // [734] return 
    rts
}
  // bitmap_line_ydxd
// bitmap_line_ydxd(byte zp($79) y, byte zp($78) x, byte zp($77) y1, byte zp($76) yd, byte zp($75) xd)
bitmap_line_ydxd: {
    .label __6 = $147
    .label y = $79
    .label x = $78
    .label y1 = $77
    .label yd = $76
    .label xd = $75
    .label e = $7a
    // [736] (byte) bitmap_line_ydxd::e#0 ← (byte) bitmap_line_ydxd::xd#2 >> (byte) 1 -- vbuz1=vbuz2_ror_1 
    lda.z xd
    lsr
    sta.z e
    // [737] phi from bitmap_line_ydxd bitmap_line_ydxd::@2 to bitmap_line_ydxd::@1 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1]
  __b1_from_bitmap_line_ydxd:
  __b1_from___b2:
    // [737] phi (byte) bitmap_line_ydxd::e#3 = (byte) bitmap_line_ydxd::e#0 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1#0] -- register_copy 
    // [737] phi (byte) bitmap_line_ydxd::y#2 = (byte) bitmap_line_ydxd::y#7 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1#1] -- register_copy 
    // [737] phi (byte) bitmap_line_ydxd::x#3 = (byte) bitmap_line_ydxd::x#5 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1#2] -- register_copy 
    jmp __b1
    // bitmap_line_ydxd::@1
  __b1:
    // [738] (byte) bitmap_plot::x#3 ← (byte) bitmap_line_ydxd::x#3 -- vbuz1=vbuz2 
    lda.z x
    sta.z bitmap_plot.x
    // [739] (byte) bitmap_plot::y#3 ← (byte) bitmap_line_ydxd::y#2 -- vbuz1=vbuz2 
    lda.z y
    sta.z bitmap_plot.y
    // [740] call bitmap_plot 
    // [698] phi from bitmap_line_ydxd::@1 to bitmap_plot [phi:bitmap_line_ydxd::@1->bitmap_plot]
  bitmap_plot_from___b1:
    // [698] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#3 [phi:bitmap_line_ydxd::@1->bitmap_plot#0] -- register_copy 
    // [698] phi (byte) bitmap_plot::x#4 = (byte) bitmap_plot::x#3 [phi:bitmap_line_ydxd::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp __b4
    // bitmap_line_ydxd::@4
  __b4:
    // [741] (byte) bitmap_line_ydxd::y#3 ← ++ (byte) bitmap_line_ydxd::y#2 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [742] (byte) bitmap_line_ydxd::e#1 ← (byte) bitmap_line_ydxd::e#3 + (byte) bitmap_line_ydxd::xd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z e
    clc
    adc.z xd
    sta.z e
    // [743] if((byte) bitmap_line_ydxd::yd#5>=(byte) bitmap_line_ydxd::e#1) goto bitmap_line_ydxd::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z yd
    cmp.z e
    bcs __b2_from___b4
    jmp __b3
    // bitmap_line_ydxd::@3
  __b3:
    // [744] (byte) bitmap_line_ydxd::x#2 ← -- (byte) bitmap_line_ydxd::x#3 -- vbuz1=_dec_vbuz1 
    dec.z x
    // [745] (byte) bitmap_line_ydxd::e#2 ← (byte) bitmap_line_ydxd::e#1 - (byte) bitmap_line_ydxd::yd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z e
    sec
    sbc.z yd
    sta.z e
    // [746] phi from bitmap_line_ydxd::@3 bitmap_line_ydxd::@4 to bitmap_line_ydxd::@2 [phi:bitmap_line_ydxd::@3/bitmap_line_ydxd::@4->bitmap_line_ydxd::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [746] phi (byte) bitmap_line_ydxd::e#6 = (byte) bitmap_line_ydxd::e#2 [phi:bitmap_line_ydxd::@3/bitmap_line_ydxd::@4->bitmap_line_ydxd::@2#0] -- register_copy 
    // [746] phi (byte) bitmap_line_ydxd::x#6 = (byte) bitmap_line_ydxd::x#2 [phi:bitmap_line_ydxd::@3/bitmap_line_ydxd::@4->bitmap_line_ydxd::@2#1] -- register_copy 
    jmp __b2
    // bitmap_line_ydxd::@2
  __b2:
    // [747] (byte~) bitmap_line_ydxd::$6 ← (byte) bitmap_line_ydxd::y1#6 + (byte) 1 -- vbuz1=vbuz2_plus_1 
    ldy.z y1
    iny
    sty.z __6
    // [748] if((byte) bitmap_line_ydxd::y#3!=(byte~) bitmap_line_ydxd::$6) goto bitmap_line_ydxd::@1 -- vbuz1_neq_vbuz2_then_la1 
    lda.z y
    cmp.z __6
    bne __b1_from___b2
    jmp __breturn
    // bitmap_line_ydxd::@return
  __breturn:
    // [749] return 
    rts
}
  // bitmap_clear
// Clear all graphics on the bitmap
bitmap_clear: {
    .label bitmap = $148
    .label bitmap_1 = $7c
    .label x = $7e
    .label y = $7b
    // [750] (word) bitmap_clear::bitmap#0 ← *((const to_nomodify byte*) bitmap_plot_xhi) w= *((const to_nomodify byte*) bitmap_plot_xlo) -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda bitmap_plot_xlo
    sta.z bitmap
    lda bitmap_plot_xhi
    sta.z bitmap+1
    // [751] (byte*) bitmap_clear::bitmap#5 ← (byte*)(word) bitmap_clear::bitmap#0 -- pbuz1=pbuz2 
    lda.z bitmap
    sta.z bitmap_1
    lda.z bitmap+1
    sta.z bitmap_1+1
    // [752] phi from bitmap_clear to bitmap_clear::@1 [phi:bitmap_clear->bitmap_clear::@1]
  __b1_from_bitmap_clear:
    // [752] phi (byte) bitmap_clear::y#4 = (byte) 0 [phi:bitmap_clear->bitmap_clear::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    // [752] phi (byte*) bitmap_clear::bitmap#3 = (byte*) bitmap_clear::bitmap#5 [phi:bitmap_clear->bitmap_clear::@1#1] -- register_copy 
    jmp __b1
    // [752] phi from bitmap_clear::@3 to bitmap_clear::@1 [phi:bitmap_clear::@3->bitmap_clear::@1]
  __b1_from___b3:
    // [752] phi (byte) bitmap_clear::y#4 = (byte) bitmap_clear::y#1 [phi:bitmap_clear::@3->bitmap_clear::@1#0] -- register_copy 
    // [752] phi (byte*) bitmap_clear::bitmap#3 = (byte*) bitmap_clear::bitmap#1 [phi:bitmap_clear::@3->bitmap_clear::@1#1] -- register_copy 
    jmp __b1
    // bitmap_clear::@1
  __b1:
    // [753] phi from bitmap_clear::@1 to bitmap_clear::@2 [phi:bitmap_clear::@1->bitmap_clear::@2]
  __b2_from___b1:
    // [753] phi (byte) bitmap_clear::x#2 = (byte) 0 [phi:bitmap_clear::@1->bitmap_clear::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z x
    // [753] phi (byte*) bitmap_clear::bitmap#2 = (byte*) bitmap_clear::bitmap#3 [phi:bitmap_clear::@1->bitmap_clear::@2#1] -- register_copy 
    jmp __b2
    // [753] phi from bitmap_clear::@2 to bitmap_clear::@2 [phi:bitmap_clear::@2->bitmap_clear::@2]
  __b2_from___b2:
    // [753] phi (byte) bitmap_clear::x#2 = (byte) bitmap_clear::x#1 [phi:bitmap_clear::@2->bitmap_clear::@2#0] -- register_copy 
    // [753] phi (byte*) bitmap_clear::bitmap#2 = (byte*) bitmap_clear::bitmap#1 [phi:bitmap_clear::@2->bitmap_clear::@2#1] -- register_copy 
    jmp __b2
    // bitmap_clear::@2
  __b2:
    // [754] *((byte*) bitmap_clear::bitmap#2) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (bitmap_1),y
    // [755] (byte*) bitmap_clear::bitmap#1 ← ++ (byte*) bitmap_clear::bitmap#2 -- pbuz1=_inc_pbuz1 
    inc.z bitmap_1
    bne !+
    inc.z bitmap_1+1
  !:
    // [756] (byte) bitmap_clear::x#1 ← ++ (byte) bitmap_clear::x#2 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [757] if((byte) bitmap_clear::x#1!=(byte) $c8) goto bitmap_clear::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z x
    bne __b2_from___b2
    jmp __b3
    // bitmap_clear::@3
  __b3:
    // [758] (byte) bitmap_clear::y#1 ← ++ (byte) bitmap_clear::y#4 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [759] if((byte) bitmap_clear::y#1!=(byte) $28) goto bitmap_clear::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z y
    bne __b1_from___b3
    jmp __breturn
    // bitmap_clear::@return
  __breturn:
    // [760] return 
    rts
}
  // bitmap_init
// Initialize the bitmap plotter tables for a specific bitmap
bitmap_init: {
    .label __0 = $14a
    .label __7 = $14c
    .label __8 = $14d
    .label __9 = $14e
    .label __10 = $14b
    .label bits = $80
    .label x = $7f
    .label y = $81
    .label yoffs = $82
    // [762] phi from bitmap_init to bitmap_init::@1 [phi:bitmap_init->bitmap_init::@1]
  __b1_from_bitmap_init:
    // [762] phi (byte) bitmap_init::bits#3 = (byte) $80 [phi:bitmap_init->bitmap_init::@1#0] -- vbuz1=vbuc1 
    lda #$80
    sta.z bits
    // [762] phi (byte) bitmap_init::x#2 = (byte) 0 [phi:bitmap_init->bitmap_init::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z x
    jmp __b1
    // [762] phi from bitmap_init::@2 to bitmap_init::@1 [phi:bitmap_init::@2->bitmap_init::@1]
  __b1_from___b2:
    // [762] phi (byte) bitmap_init::bits#3 = (byte) bitmap_init::bits#4 [phi:bitmap_init::@2->bitmap_init::@1#0] -- register_copy 
    // [762] phi (byte) bitmap_init::x#2 = (byte) bitmap_init::x#1 [phi:bitmap_init::@2->bitmap_init::@1#1] -- register_copy 
    jmp __b1
    // bitmap_init::@1
  __b1:
    // [763] (byte~) bitmap_init::$0 ← (byte) bitmap_init::x#2 & (byte) $f8 -- vbuz1=vbuz2_band_vbuc1 
    lda #$f8
    and.z x
    sta.z __0
    // [764] *((const to_nomodify byte*) bitmap_plot_xlo + (byte) bitmap_init::x#2) ← (byte~) bitmap_init::$0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z __0
    ldy.z x
    sta bitmap_plot_xlo,y
    // [765] *((const to_nomodify byte*) bitmap_plot_xhi + (byte) bitmap_init::x#2) ← >(const nomodify byte*) VIC_BITMAP -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #>VIC_BITMAP
    ldy.z x
    sta bitmap_plot_xhi,y
    // [766] *((const to_nomodify byte*) bitmap_plot_bit + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z bits
    ldy.z x
    sta bitmap_plot_bit,y
    // [767] (byte) bitmap_init::bits#1 ← (byte) bitmap_init::bits#3 >> (byte) 1 -- vbuz1=vbuz1_ror_1 
    lsr.z bits
    // [768] if((byte) bitmap_init::bits#1!=(byte) 0) goto bitmap_init::@6 -- vbuz1_neq_0_then_la1 
    lda.z bits
    cmp #0
    bne __b6_from___b1
    // [770] phi from bitmap_init::@1 to bitmap_init::@2 [phi:bitmap_init::@1->bitmap_init::@2]
  __b2_from___b1:
    // [770] phi (byte) bitmap_init::bits#4 = (byte) $80 [phi:bitmap_init::@1->bitmap_init::@2#0] -- vbuz1=vbuc1 
    lda #$80
    sta.z bits
    jmp __b2
    // [769] phi from bitmap_init::@1 to bitmap_init::@6 [phi:bitmap_init::@1->bitmap_init::@6]
  __b6_from___b1:
    jmp __b6
    // bitmap_init::@6
  __b6:
    // [770] phi from bitmap_init::@6 to bitmap_init::@2 [phi:bitmap_init::@6->bitmap_init::@2]
  __b2_from___b6:
    // [770] phi (byte) bitmap_init::bits#4 = (byte) bitmap_init::bits#1 [phi:bitmap_init::@6->bitmap_init::@2#0] -- register_copy 
    jmp __b2
    // bitmap_init::@2
  __b2:
    // [771] (byte) bitmap_init::x#1 ← ++ (byte) bitmap_init::x#2 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [772] if((byte) bitmap_init::x#1!=(byte) 0) goto bitmap_init::@1 -- vbuz1_neq_0_then_la1 
    lda.z x
    cmp #0
    bne __b1_from___b2
    // [773] phi from bitmap_init::@2 to bitmap_init::@3 [phi:bitmap_init::@2->bitmap_init::@3]
  __b3_from___b2:
    // [773] phi (byte*) bitmap_init::yoffs#2 = (byte*) 0 [phi:bitmap_init::@2->bitmap_init::@3#0] -- pbuz1=pbuc1 
    lda #<0
    sta.z yoffs
    lda #>0
    sta.z yoffs+1
    // [773] phi (byte) bitmap_init::y#2 = (byte) 0 [phi:bitmap_init::@2->bitmap_init::@3#1] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    jmp __b3
    // [773] phi from bitmap_init::@4 to bitmap_init::@3 [phi:bitmap_init::@4->bitmap_init::@3]
  __b3_from___b4:
    // [773] phi (byte*) bitmap_init::yoffs#2 = (byte*) bitmap_init::yoffs#4 [phi:bitmap_init::@4->bitmap_init::@3#0] -- register_copy 
    // [773] phi (byte) bitmap_init::y#2 = (byte) bitmap_init::y#1 [phi:bitmap_init::@4->bitmap_init::@3#1] -- register_copy 
    jmp __b3
    // bitmap_init::@3
  __b3:
    // [774] (byte~) bitmap_init::$10 ← (byte) bitmap_init::y#2 & (byte) 7 -- vbuz1=vbuz2_band_vbuc1 
    lda #7
    and.z y
    sta.z __10
    // [775] (byte~) bitmap_init::$7 ← < (byte*) bitmap_init::yoffs#2 -- vbuz1=_lo_pbuz2 
    lda.z yoffs
    sta.z __7
    // [776] (byte~) bitmap_init::$8 ← (byte~) bitmap_init::$10 | (byte~) bitmap_init::$7 -- vbuz1=vbuz2_bor_vbuz3 
    lda.z __10
    ora.z __7
    sta.z __8
    // [777] *((const to_nomodify byte*) bitmap_plot_ylo + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$8 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z __8
    ldy.z y
    sta bitmap_plot_ylo,y
    // [778] (byte~) bitmap_init::$9 ← > (byte*) bitmap_init::yoffs#2 -- vbuz1=_hi_pbuz2 
    lda.z yoffs+1
    sta.z __9
    // [779] *((const to_nomodify byte*) bitmap_plot_yhi + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$9 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z __9
    ldy.z y
    sta bitmap_plot_yhi,y
    // [780] if((byte~) bitmap_init::$10!=(byte) 7) goto bitmap_init::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp.z __10
    bne __b4_from___b3
    jmp __b5
    // bitmap_init::@5
  __b5:
    // [781] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (word)(number) $28*(number) 8 -- pbuz1=pbuz1_plus_vwuc1 
    clc
    lda.z yoffs
    adc #<$28*8
    sta.z yoffs
    lda.z yoffs+1
    adc #>$28*8
    sta.z yoffs+1
    // [782] phi from bitmap_init::@3 bitmap_init::@5 to bitmap_init::@4 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4]
  __b4_from___b3:
  __b4_from___b5:
    // [782] phi (byte*) bitmap_init::yoffs#4 = (byte*) bitmap_init::yoffs#2 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4#0] -- register_copy 
    jmp __b4
    // bitmap_init::@4
  __b4:
    // [783] (byte) bitmap_init::y#1 ← ++ (byte) bitmap_init::y#2 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [784] if((byte) bitmap_init::y#1!=(byte) 0) goto bitmap_init::@3 -- vbuz1_neq_0_then_la1 
    lda.z y
    cmp #0
    bne __b3_from___b4
    jmp __breturn
    // bitmap_init::@return
  __breturn:
    // [785] return 
    rts
}
  // gfx_init_charset
gfx_init_charset: {
    .label charset = $87
    .label chargen = $85
    .label l = $89
    .label c = $84
    // [786] *((const nomodify byte*) PROCPORT) ← (byte) $32 -- _deref_pbuc1=vbuc2 
    lda #$32
    sta PROCPORT
    // [787] phi from gfx_init_charset to gfx_init_charset::@1 [phi:gfx_init_charset->gfx_init_charset::@1]
  __b1_from_gfx_init_charset:
    // [787] phi (byte) gfx_init_charset::c#4 = (byte) 0 [phi:gfx_init_charset->gfx_init_charset::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    // [787] phi (byte*) gfx_init_charset::charset#3 = (const nomodify byte*) VIC_CHARSET_ROM [phi:gfx_init_charset->gfx_init_charset::@1#1] -- pbuz1=pbuc1 
    lda #<VIC_CHARSET_ROM
    sta.z charset
    lda #>VIC_CHARSET_ROM
    sta.z charset+1
    // [787] phi (byte*) gfx_init_charset::chargen#3 = (const nomodify byte*) CHARGEN [phi:gfx_init_charset->gfx_init_charset::@1#2] -- pbuz1=pbuc1 
    lda #<CHARGEN
    sta.z chargen
    lda #>CHARGEN
    sta.z chargen+1
    jmp __b1
    // [787] phi from gfx_init_charset::@3 to gfx_init_charset::@1 [phi:gfx_init_charset::@3->gfx_init_charset::@1]
  __b1_from___b3:
    // [787] phi (byte) gfx_init_charset::c#4 = (byte) gfx_init_charset::c#1 [phi:gfx_init_charset::@3->gfx_init_charset::@1#0] -- register_copy 
    // [787] phi (byte*) gfx_init_charset::charset#3 = (byte*) gfx_init_charset::charset#1 [phi:gfx_init_charset::@3->gfx_init_charset::@1#1] -- register_copy 
    // [787] phi (byte*) gfx_init_charset::chargen#3 = (byte*) gfx_init_charset::chargen#1 [phi:gfx_init_charset::@3->gfx_init_charset::@1#2] -- register_copy 
    jmp __b1
    // gfx_init_charset::@1
  __b1:
    // [788] phi from gfx_init_charset::@1 to gfx_init_charset::@2 [phi:gfx_init_charset::@1->gfx_init_charset::@2]
  __b2_from___b1:
    // [788] phi (byte) gfx_init_charset::l#2 = (byte) 0 [phi:gfx_init_charset::@1->gfx_init_charset::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    // [788] phi (byte*) gfx_init_charset::charset#2 = (byte*) gfx_init_charset::charset#3 [phi:gfx_init_charset::@1->gfx_init_charset::@2#1] -- register_copy 
    // [788] phi (byte*) gfx_init_charset::chargen#2 = (byte*) gfx_init_charset::chargen#3 [phi:gfx_init_charset::@1->gfx_init_charset::@2#2] -- register_copy 
    jmp __b2
    // [788] phi from gfx_init_charset::@2 to gfx_init_charset::@2 [phi:gfx_init_charset::@2->gfx_init_charset::@2]
  __b2_from___b2:
    // [788] phi (byte) gfx_init_charset::l#2 = (byte) gfx_init_charset::l#1 [phi:gfx_init_charset::@2->gfx_init_charset::@2#0] -- register_copy 
    // [788] phi (byte*) gfx_init_charset::charset#2 = (byte*) gfx_init_charset::charset#1 [phi:gfx_init_charset::@2->gfx_init_charset::@2#1] -- register_copy 
    // [788] phi (byte*) gfx_init_charset::chargen#2 = (byte*) gfx_init_charset::chargen#1 [phi:gfx_init_charset::@2->gfx_init_charset::@2#2] -- register_copy 
    jmp __b2
    // gfx_init_charset::@2
  __b2:
    // [789] *((byte*) gfx_init_charset::charset#2) ← *((byte*) gfx_init_charset::chargen#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (chargen),y
    ldy #0
    sta (charset),y
    // [790] (byte*) gfx_init_charset::charset#1 ← ++ (byte*) gfx_init_charset::charset#2 -- pbuz1=_inc_pbuz1 
    inc.z charset
    bne !+
    inc.z charset+1
  !:
    // [791] (byte*) gfx_init_charset::chargen#1 ← ++ (byte*) gfx_init_charset::chargen#2 -- pbuz1=_inc_pbuz1 
    inc.z chargen
    bne !+
    inc.z chargen+1
  !:
    // [792] (byte) gfx_init_charset::l#1 ← ++ (byte) gfx_init_charset::l#2 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [793] if((byte) gfx_init_charset::l#1!=(byte) 8) goto gfx_init_charset::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z l
    bne __b2_from___b2
    jmp __b3
    // gfx_init_charset::@3
  __b3:
    // [794] (byte) gfx_init_charset::c#1 ← ++ (byte) gfx_init_charset::c#4 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [795] if((byte) gfx_init_charset::c#1!=(byte) 0) goto gfx_init_charset::@1 -- vbuz1_neq_0_then_la1 
    lda.z c
    cmp #0
    bne __b1_from___b3
    jmp __b4
    // gfx_init_charset::@4
  __b4:
    // [796] *((const nomodify byte*) PROCPORT) ← (byte) $37 -- _deref_pbuc1=vbuc2 
    lda #$37
    sta PROCPORT
    jmp __breturn
    // gfx_init_charset::@return
  __breturn:
    // [797] return 
    rts
}
  // gfx_init_screen4
// Initialize VIC screen 4 - all chars are 00
gfx_init_screen4: {
    .label ch = $8b
    .label cx = $8d
    .label cy = $8a
    // [799] phi from gfx_init_screen4 to gfx_init_screen4::@1 [phi:gfx_init_screen4->gfx_init_screen4::@1]
  __b1_from_gfx_init_screen4:
    // [799] phi (byte) gfx_init_screen4::cy#4 = (byte) 0 [phi:gfx_init_screen4->gfx_init_screen4::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    // [799] phi (byte*) gfx_init_screen4::ch#3 = (const nomodify byte*) VIC_SCREEN4 [phi:gfx_init_screen4->gfx_init_screen4::@1#1] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN4
    sta.z ch
    lda #>VIC_SCREEN4
    sta.z ch+1
    jmp __b1
    // [799] phi from gfx_init_screen4::@3 to gfx_init_screen4::@1 [phi:gfx_init_screen4::@3->gfx_init_screen4::@1]
  __b1_from___b3:
    // [799] phi (byte) gfx_init_screen4::cy#4 = (byte) gfx_init_screen4::cy#1 [phi:gfx_init_screen4::@3->gfx_init_screen4::@1#0] -- register_copy 
    // [799] phi (byte*) gfx_init_screen4::ch#3 = (byte*) gfx_init_screen4::ch#1 [phi:gfx_init_screen4::@3->gfx_init_screen4::@1#1] -- register_copy 
    jmp __b1
    // gfx_init_screen4::@1
  __b1:
    // [800] phi from gfx_init_screen4::@1 to gfx_init_screen4::@2 [phi:gfx_init_screen4::@1->gfx_init_screen4::@2]
  __b2_from___b1:
    // [800] phi (byte) gfx_init_screen4::cx#2 = (byte) 0 [phi:gfx_init_screen4::@1->gfx_init_screen4::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z cx
    // [800] phi (byte*) gfx_init_screen4::ch#2 = (byte*) gfx_init_screen4::ch#3 [phi:gfx_init_screen4::@1->gfx_init_screen4::@2#1] -- register_copy 
    jmp __b2
    // [800] phi from gfx_init_screen4::@2 to gfx_init_screen4::@2 [phi:gfx_init_screen4::@2->gfx_init_screen4::@2]
  __b2_from___b2:
    // [800] phi (byte) gfx_init_screen4::cx#2 = (byte) gfx_init_screen4::cx#1 [phi:gfx_init_screen4::@2->gfx_init_screen4::@2#0] -- register_copy 
    // [800] phi (byte*) gfx_init_screen4::ch#2 = (byte*) gfx_init_screen4::ch#1 [phi:gfx_init_screen4::@2->gfx_init_screen4::@2#1] -- register_copy 
    jmp __b2
    // gfx_init_screen4::@2
  __b2:
    // [801] *((byte*) gfx_init_screen4::ch#2) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (ch),y
    // [802] (byte*) gfx_init_screen4::ch#1 ← ++ (byte*) gfx_init_screen4::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // [803] (byte) gfx_init_screen4::cx#1 ← ++ (byte) gfx_init_screen4::cx#2 -- vbuz1=_inc_vbuz1 
    inc.z cx
    // [804] if((byte) gfx_init_screen4::cx#1!=(byte) $28) goto gfx_init_screen4::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z cx
    bne __b2_from___b2
    jmp __b3
    // gfx_init_screen4::@3
  __b3:
    // [805] (byte) gfx_init_screen4::cy#1 ← ++ (byte) gfx_init_screen4::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [806] if((byte) gfx_init_screen4::cy#1!=(byte) $19) goto gfx_init_screen4::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b1_from___b3
    jmp __breturn
    // gfx_init_screen4::@return
  __breturn:
    // [807] return 
    rts
}
  // gfx_init_screen3
// Initialize VIC screen 3 ( value is %00xx00yy where xx is xpos and yy is ypos
gfx_init_screen3: {
    .label __0 = $14f
    .label __1 = $150
    .label __2 = $151
    .label __3 = $152
    .label ch = $90
    .label cx = $8f
    .label cy = $8e
    // [809] phi from gfx_init_screen3 to gfx_init_screen3::@1 [phi:gfx_init_screen3->gfx_init_screen3::@1]
  __b1_from_gfx_init_screen3:
    // [809] phi (byte*) gfx_init_screen3::ch#3 = (const nomodify byte*) VIC_SCREEN3 [phi:gfx_init_screen3->gfx_init_screen3::@1#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN3
    sta.z ch
    lda #>VIC_SCREEN3
    sta.z ch+1
    // [809] phi (byte) gfx_init_screen3::cy#4 = (byte) 0 [phi:gfx_init_screen3->gfx_init_screen3::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    jmp __b1
    // [809] phi from gfx_init_screen3::@3 to gfx_init_screen3::@1 [phi:gfx_init_screen3::@3->gfx_init_screen3::@1]
  __b1_from___b3:
    // [809] phi (byte*) gfx_init_screen3::ch#3 = (byte*) gfx_init_screen3::ch#1 [phi:gfx_init_screen3::@3->gfx_init_screen3::@1#0] -- register_copy 
    // [809] phi (byte) gfx_init_screen3::cy#4 = (byte) gfx_init_screen3::cy#1 [phi:gfx_init_screen3::@3->gfx_init_screen3::@1#1] -- register_copy 
    jmp __b1
    // gfx_init_screen3::@1
  __b1:
    // [810] phi from gfx_init_screen3::@1 to gfx_init_screen3::@2 [phi:gfx_init_screen3::@1->gfx_init_screen3::@2]
  __b2_from___b1:
    // [810] phi (byte*) gfx_init_screen3::ch#2 = (byte*) gfx_init_screen3::ch#3 [phi:gfx_init_screen3::@1->gfx_init_screen3::@2#0] -- register_copy 
    // [810] phi (byte) gfx_init_screen3::cx#2 = (byte) 0 [phi:gfx_init_screen3::@1->gfx_init_screen3::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta.z cx
    jmp __b2
    // [810] phi from gfx_init_screen3::@2 to gfx_init_screen3::@2 [phi:gfx_init_screen3::@2->gfx_init_screen3::@2]
  __b2_from___b2:
    // [810] phi (byte*) gfx_init_screen3::ch#2 = (byte*) gfx_init_screen3::ch#1 [phi:gfx_init_screen3::@2->gfx_init_screen3::@2#0] -- register_copy 
    // [810] phi (byte) gfx_init_screen3::cx#2 = (byte) gfx_init_screen3::cx#1 [phi:gfx_init_screen3::@2->gfx_init_screen3::@2#1] -- register_copy 
    jmp __b2
    // gfx_init_screen3::@2
  __b2:
    // [811] (byte~) gfx_init_screen3::$0 ← (byte) gfx_init_screen3::cx#2 & (byte) 3 -- vbuz1=vbuz2_band_vbuc1 
    lda #3
    and.z cx
    sta.z __0
    // [812] (byte~) gfx_init_screen3::$1 ← (byte~) gfx_init_screen3::$0 << (byte) 4 -- vbuz1=vbuz2_rol_4 
    lda.z __0
    asl
    asl
    asl
    asl
    sta.z __1
    // [813] (byte~) gfx_init_screen3::$2 ← (byte) gfx_init_screen3::cy#4 & (byte) 3 -- vbuz1=vbuz2_band_vbuc1 
    lda #3
    and.z cy
    sta.z __2
    // [814] (byte~) gfx_init_screen3::$3 ← (byte~) gfx_init_screen3::$1 | (byte~) gfx_init_screen3::$2 -- vbuz1=vbuz2_bor_vbuz3 
    lda.z __1
    ora.z __2
    sta.z __3
    // [815] *((byte*) gfx_init_screen3::ch#2) ← (byte~) gfx_init_screen3::$3 -- _deref_pbuz1=vbuz2 
    lda.z __3
    ldy #0
    sta (ch),y
    // [816] (byte*) gfx_init_screen3::ch#1 ← ++ (byte*) gfx_init_screen3::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // [817] (byte) gfx_init_screen3::cx#1 ← ++ (byte) gfx_init_screen3::cx#2 -- vbuz1=_inc_vbuz1 
    inc.z cx
    // [818] if((byte) gfx_init_screen3::cx#1!=(byte) $28) goto gfx_init_screen3::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z cx
    bne __b2_from___b2
    jmp __b3
    // gfx_init_screen3::@3
  __b3:
    // [819] (byte) gfx_init_screen3::cy#1 ← ++ (byte) gfx_init_screen3::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [820] if((byte) gfx_init_screen3::cy#1!=(byte) $19) goto gfx_init_screen3::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b1_from___b3
    jmp __breturn
    // gfx_init_screen3::@return
  __breturn:
    // [821] return 
    rts
}
  // gfx_init_screen2
// Initialize VIC screen 2 ( value is %ccccrrrr where cccc is (x+y mod $f) and rrrr is %1111-%cccc)
gfx_init_screen2: {
    .label __0 = $153
    .label __3 = $156
    .label __4 = $157
    .label col = $154
    .label col2 = $155
    .label ch = $94
    .label cx = $93
    .label cy = $92
    // [823] phi from gfx_init_screen2 to gfx_init_screen2::@1 [phi:gfx_init_screen2->gfx_init_screen2::@1]
  __b1_from_gfx_init_screen2:
    // [823] phi (byte*) gfx_init_screen2::ch#3 = (const nomodify byte*) VIC_SCREEN2 [phi:gfx_init_screen2->gfx_init_screen2::@1#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN2
    sta.z ch
    lda #>VIC_SCREEN2
    sta.z ch+1
    // [823] phi (byte) gfx_init_screen2::cy#4 = (byte) 0 [phi:gfx_init_screen2->gfx_init_screen2::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    jmp __b1
    // [823] phi from gfx_init_screen2::@3 to gfx_init_screen2::@1 [phi:gfx_init_screen2::@3->gfx_init_screen2::@1]
  __b1_from___b3:
    // [823] phi (byte*) gfx_init_screen2::ch#3 = (byte*) gfx_init_screen2::ch#1 [phi:gfx_init_screen2::@3->gfx_init_screen2::@1#0] -- register_copy 
    // [823] phi (byte) gfx_init_screen2::cy#4 = (byte) gfx_init_screen2::cy#1 [phi:gfx_init_screen2::@3->gfx_init_screen2::@1#1] -- register_copy 
    jmp __b1
    // gfx_init_screen2::@1
  __b1:
    // [824] phi from gfx_init_screen2::@1 to gfx_init_screen2::@2 [phi:gfx_init_screen2::@1->gfx_init_screen2::@2]
  __b2_from___b1:
    // [824] phi (byte*) gfx_init_screen2::ch#2 = (byte*) gfx_init_screen2::ch#3 [phi:gfx_init_screen2::@1->gfx_init_screen2::@2#0] -- register_copy 
    // [824] phi (byte) gfx_init_screen2::cx#2 = (byte) 0 [phi:gfx_init_screen2::@1->gfx_init_screen2::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta.z cx
    jmp __b2
    // [824] phi from gfx_init_screen2::@2 to gfx_init_screen2::@2 [phi:gfx_init_screen2::@2->gfx_init_screen2::@2]
  __b2_from___b2:
    // [824] phi (byte*) gfx_init_screen2::ch#2 = (byte*) gfx_init_screen2::ch#1 [phi:gfx_init_screen2::@2->gfx_init_screen2::@2#0] -- register_copy 
    // [824] phi (byte) gfx_init_screen2::cx#2 = (byte) gfx_init_screen2::cx#1 [phi:gfx_init_screen2::@2->gfx_init_screen2::@2#1] -- register_copy 
    jmp __b2
    // gfx_init_screen2::@2
  __b2:
    // [825] (byte~) gfx_init_screen2::$0 ← (byte) gfx_init_screen2::cx#2 + (byte) gfx_init_screen2::cy#4 -- vbuz1=vbuz2_plus_vbuz3 
    lda.z cx
    clc
    adc.z cy
    sta.z __0
    // [826] (byte) gfx_init_screen2::col#0 ← (byte~) gfx_init_screen2::$0 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and.z __0
    sta.z col
    // [827] (byte) gfx_init_screen2::col2#0 ← (byte) $f - (byte) gfx_init_screen2::col#0 -- vbuz1=vbuc1_minus_vbuz2 
    lda #$f
    sec
    sbc.z col
    sta.z col2
    // [828] (byte~) gfx_init_screen2::$3 ← (byte) gfx_init_screen2::col#0 << (byte) 4 -- vbuz1=vbuz2_rol_4 
    lda.z col
    asl
    asl
    asl
    asl
    sta.z __3
    // [829] (byte~) gfx_init_screen2::$4 ← (byte~) gfx_init_screen2::$3 | (byte) gfx_init_screen2::col2#0 -- vbuz1=vbuz2_bor_vbuz3 
    lda.z __3
    ora.z col2
    sta.z __4
    // [830] *((byte*) gfx_init_screen2::ch#2) ← (byte~) gfx_init_screen2::$4 -- _deref_pbuz1=vbuz2 
    lda.z __4
    ldy #0
    sta (ch),y
    // [831] (byte*) gfx_init_screen2::ch#1 ← ++ (byte*) gfx_init_screen2::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // [832] (byte) gfx_init_screen2::cx#1 ← ++ (byte) gfx_init_screen2::cx#2 -- vbuz1=_inc_vbuz1 
    inc.z cx
    // [833] if((byte) gfx_init_screen2::cx#1!=(byte) $28) goto gfx_init_screen2::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z cx
    bne __b2_from___b2
    jmp __b3
    // gfx_init_screen2::@3
  __b3:
    // [834] (byte) gfx_init_screen2::cy#1 ← ++ (byte) gfx_init_screen2::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [835] if((byte) gfx_init_screen2::cy#1!=(byte) $19) goto gfx_init_screen2::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b1_from___b3
    jmp __breturn
    // gfx_init_screen2::@return
  __breturn:
    // [836] return 
    rts
}
  // gfx_init_screen1
// Initialize VIC screen 1 ( value is %0000cccc where cccc is (x+y mod $f))
gfx_init_screen1: {
    .label __0 = $158
    .label __1 = $159
    .label ch = $98
    .label cx = $97
    .label cy = $96
    // [838] phi from gfx_init_screen1 to gfx_init_screen1::@1 [phi:gfx_init_screen1->gfx_init_screen1::@1]
  __b1_from_gfx_init_screen1:
    // [838] phi (byte*) gfx_init_screen1::ch#3 = (const nomodify byte*) VIC_SCREEN1 [phi:gfx_init_screen1->gfx_init_screen1::@1#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN1
    sta.z ch
    lda #>VIC_SCREEN1
    sta.z ch+1
    // [838] phi (byte) gfx_init_screen1::cy#4 = (byte) 0 [phi:gfx_init_screen1->gfx_init_screen1::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    jmp __b1
    // [838] phi from gfx_init_screen1::@3 to gfx_init_screen1::@1 [phi:gfx_init_screen1::@3->gfx_init_screen1::@1]
  __b1_from___b3:
    // [838] phi (byte*) gfx_init_screen1::ch#3 = (byte*) gfx_init_screen1::ch#1 [phi:gfx_init_screen1::@3->gfx_init_screen1::@1#0] -- register_copy 
    // [838] phi (byte) gfx_init_screen1::cy#4 = (byte) gfx_init_screen1::cy#1 [phi:gfx_init_screen1::@3->gfx_init_screen1::@1#1] -- register_copy 
    jmp __b1
    // gfx_init_screen1::@1
  __b1:
    // [839] phi from gfx_init_screen1::@1 to gfx_init_screen1::@2 [phi:gfx_init_screen1::@1->gfx_init_screen1::@2]
  __b2_from___b1:
    // [839] phi (byte*) gfx_init_screen1::ch#2 = (byte*) gfx_init_screen1::ch#3 [phi:gfx_init_screen1::@1->gfx_init_screen1::@2#0] -- register_copy 
    // [839] phi (byte) gfx_init_screen1::cx#2 = (byte) 0 [phi:gfx_init_screen1::@1->gfx_init_screen1::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta.z cx
    jmp __b2
    // [839] phi from gfx_init_screen1::@2 to gfx_init_screen1::@2 [phi:gfx_init_screen1::@2->gfx_init_screen1::@2]
  __b2_from___b2:
    // [839] phi (byte*) gfx_init_screen1::ch#2 = (byte*) gfx_init_screen1::ch#1 [phi:gfx_init_screen1::@2->gfx_init_screen1::@2#0] -- register_copy 
    // [839] phi (byte) gfx_init_screen1::cx#2 = (byte) gfx_init_screen1::cx#1 [phi:gfx_init_screen1::@2->gfx_init_screen1::@2#1] -- register_copy 
    jmp __b2
    // gfx_init_screen1::@2
  __b2:
    // [840] (byte~) gfx_init_screen1::$0 ← (byte) gfx_init_screen1::cx#2 + (byte) gfx_init_screen1::cy#4 -- vbuz1=vbuz2_plus_vbuz3 
    lda.z cx
    clc
    adc.z cy
    sta.z __0
    // [841] (byte~) gfx_init_screen1::$1 ← (byte~) gfx_init_screen1::$0 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and.z __0
    sta.z __1
    // [842] *((byte*) gfx_init_screen1::ch#2) ← (byte~) gfx_init_screen1::$1 -- _deref_pbuz1=vbuz2 
    lda.z __1
    ldy #0
    sta (ch),y
    // [843] (byte*) gfx_init_screen1::ch#1 ← ++ (byte*) gfx_init_screen1::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // [844] (byte) gfx_init_screen1::cx#1 ← ++ (byte) gfx_init_screen1::cx#2 -- vbuz1=_inc_vbuz1 
    inc.z cx
    // [845] if((byte) gfx_init_screen1::cx#1!=(byte) $28) goto gfx_init_screen1::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z cx
    bne __b2_from___b2
    jmp __b3
    // gfx_init_screen1::@3
  __b3:
    // [846] (byte) gfx_init_screen1::cy#1 ← ++ (byte) gfx_init_screen1::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [847] if((byte) gfx_init_screen1::cy#1!=(byte) $19) goto gfx_init_screen1::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b1_from___b3
    jmp __breturn
    // gfx_init_screen1::@return
  __breturn:
    // [848] return 
    rts
}
  // gfx_init_screen0
// Initialize VIC screen 0 ( value is %yyyyxxxx where yyyy is ypos and xxxx is xpos)
gfx_init_screen0: {
    .label __0 = $15a
    .label __1 = $15b
    .label __2 = $15c
    .label __3 = $15d
    .label ch = $9c
    .label cx = $9b
    .label cy = $9a
    // [850] phi from gfx_init_screen0 to gfx_init_screen0::@1 [phi:gfx_init_screen0->gfx_init_screen0::@1]
  __b1_from_gfx_init_screen0:
    // [850] phi (byte*) gfx_init_screen0::ch#3 = (const nomodify byte*) VIC_SCREEN0 [phi:gfx_init_screen0->gfx_init_screen0::@1#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN0
    sta.z ch
    lda #>VIC_SCREEN0
    sta.z ch+1
    // [850] phi (byte) gfx_init_screen0::cy#4 = (byte) 0 [phi:gfx_init_screen0->gfx_init_screen0::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    jmp __b1
    // [850] phi from gfx_init_screen0::@3 to gfx_init_screen0::@1 [phi:gfx_init_screen0::@3->gfx_init_screen0::@1]
  __b1_from___b3:
    // [850] phi (byte*) gfx_init_screen0::ch#3 = (byte*) gfx_init_screen0::ch#1 [phi:gfx_init_screen0::@3->gfx_init_screen0::@1#0] -- register_copy 
    // [850] phi (byte) gfx_init_screen0::cy#4 = (byte) gfx_init_screen0::cy#1 [phi:gfx_init_screen0::@3->gfx_init_screen0::@1#1] -- register_copy 
    jmp __b1
    // gfx_init_screen0::@1
  __b1:
    // [851] phi from gfx_init_screen0::@1 to gfx_init_screen0::@2 [phi:gfx_init_screen0::@1->gfx_init_screen0::@2]
  __b2_from___b1:
    // [851] phi (byte*) gfx_init_screen0::ch#2 = (byte*) gfx_init_screen0::ch#3 [phi:gfx_init_screen0::@1->gfx_init_screen0::@2#0] -- register_copy 
    // [851] phi (byte) gfx_init_screen0::cx#2 = (byte) 0 [phi:gfx_init_screen0::@1->gfx_init_screen0::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta.z cx
    jmp __b2
    // [851] phi from gfx_init_screen0::@2 to gfx_init_screen0::@2 [phi:gfx_init_screen0::@2->gfx_init_screen0::@2]
  __b2_from___b2:
    // [851] phi (byte*) gfx_init_screen0::ch#2 = (byte*) gfx_init_screen0::ch#1 [phi:gfx_init_screen0::@2->gfx_init_screen0::@2#0] -- register_copy 
    // [851] phi (byte) gfx_init_screen0::cx#2 = (byte) gfx_init_screen0::cx#1 [phi:gfx_init_screen0::@2->gfx_init_screen0::@2#1] -- register_copy 
    jmp __b2
    // gfx_init_screen0::@2
  __b2:
    // [852] (byte~) gfx_init_screen0::$0 ← (byte) gfx_init_screen0::cy#4 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and.z cy
    sta.z __0
    // [853] (byte~) gfx_init_screen0::$1 ← (byte~) gfx_init_screen0::$0 << (byte) 4 -- vbuz1=vbuz2_rol_4 
    lda.z __0
    asl
    asl
    asl
    asl
    sta.z __1
    // [854] (byte~) gfx_init_screen0::$2 ← (byte) gfx_init_screen0::cx#2 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and.z cx
    sta.z __2
    // [855] (byte~) gfx_init_screen0::$3 ← (byte~) gfx_init_screen0::$1 | (byte~) gfx_init_screen0::$2 -- vbuz1=vbuz2_bor_vbuz3 
    lda.z __1
    ora.z __2
    sta.z __3
    // [856] *((byte*) gfx_init_screen0::ch#2) ← (byte~) gfx_init_screen0::$3 -- _deref_pbuz1=vbuz2 
    lda.z __3
    ldy #0
    sta (ch),y
    // [857] (byte*) gfx_init_screen0::ch#1 ← ++ (byte*) gfx_init_screen0::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // [858] (byte) gfx_init_screen0::cx#1 ← ++ (byte) gfx_init_screen0::cx#2 -- vbuz1=_inc_vbuz1 
    inc.z cx
    // [859] if((byte) gfx_init_screen0::cx#1!=(byte) $28) goto gfx_init_screen0::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z cx
    bne __b2_from___b2
    jmp __b3
    // gfx_init_screen0::@3
  __b3:
    // [860] (byte) gfx_init_screen0::cy#1 ← ++ (byte) gfx_init_screen0::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [861] if((byte) gfx_init_screen0::cy#1!=(byte) $19) goto gfx_init_screen0::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b1_from___b3
    jmp __breturn
    // gfx_init_screen0::@return
  __breturn:
    // [862] return 
    rts
}
  // keyboard_init
// Initialize keyboard reading by setting CIA#$ Data Direction Registers
keyboard_init: {
    // [863] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) ← (byte) $ff -- _deref_pbuc1=vbuc2 
    // Keyboard Matrix Columns Write Mode
    lda #$ff
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR
    // [864] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_B_DDR) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Keyboard Matrix Columns Read Mode
    lda #0
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_B_DDR
    jmp __breturn
    // keyboard_init::@return
  __breturn:
    // [865] return 
    rts
}
  // File Data
  // Default vallues for the palette
  DTV_PALETTE_DEFAULT: .byte 0, $f, $36, $be, $58, $db, $86, $ff, $29, $26, $3b, 5, 7, $df, $9a, $a
  print_hextab: .text "0123456789abcdef"
  // Keyboard row bitmask as expected by CIA#1 Port A when reading a specific keyboard matrix row (rows are numbered 0-7)
  keyboard_matrix_row_bitmask: .byte $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f
  // Keyboard matrix column bitmasks for a specific keybooard matrix column when reading the keyboard. (columns are numbered 0-7)
  keyboard_matrix_col_bitmask: .byte 1, 2, 4, 8, $10, $20, $40, $80
  // Keyboard event buffer. Contains keycodes for key presses/releases. Presses are represented by the keycode. Releases by keycode | $40. The buffer is filled by keyboard_scan()
  keyboard_events: .fill 8, 0
  // The values scanned values for each row. Set by keyboard_scan() and used by keyboard_get_event()
  keyboard_scan_values: .fill 8, 0
  // Tables for the plotter - initialized by calling bitmap_draw_init();
  bitmap_plot_xlo: .fill $100, 0
  bitmap_plot_xhi: .fill $100, 0
  bitmap_plot_ylo: .fill $100, 0
  bitmap_plot_yhi: .fill $100, 0
  bitmap_plot_bit: .fill $100, 0
  // Charset ROM
  FORM_TEXT: .text " C64 DTV Graphics Mode Explorer         @                                        @ PRESET 0 Standard Charset              @                                        @ CONTROL        PLANE  A     VIC II     @ bmm        0   pattern p0   screen s0  @ mcm        0   start   00   gfx    g0  @ ecm        0   step    00   colors c0  @ hicolor    0   modulo  00              @ linear     0                COLORS     @ color off  0   PLANE  B     palet   0  @ chunky     0   pattern p0   bgcol0 00  @ border off 0   start   00   bgcol1 00  @ overscan   0   step    00   bgcol2 00  @                modulo  00   bgcol3 00  @"
  .byte 0
  FORM_COLS: .text "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@                                        @aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@                                        @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm              @ nnnnnnnnnnnn                jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"
  .byte 0
  // Form fields x/y-positions
  form_fields_x: .byte 8, $c, $c, $c, $c, $c, $c, $c, $c, $c, $19, $18, $19, $18, $19, $18, $19, $19, $18, $19, $18, $19, $18, $19, $25, $25, $25, $25, $24, $25, $24, $25, $24, $25, $24, $25
  form_fields_y: .byte 2, 5, 6, 7, 8, 9, $a, $b, $c, $d, 5, 6, 6, 7, 7, 8, 8, $b, $c, $c, $d, $d, $e, $e, 5, 6, 7, $a, $b, $b, $c, $c, $d, $d, $e, $e
  // Form field max values (all values are in the interval 0..max)
  form_fields_max: .byte $a, 1, 1, 1, 1, 1, 1, 1, 1, 1, $d, $f, $f, $f, $f, $f, $f, $d, $f, $f, $f, $f, $f, $f, 3, 1, 4, 1, $f, $f, $f, $f, $f, $f, $f, $f
  // Form fields values
  form_fields_val: .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Standard Char Mode
  preset_stdchar: .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Extended Color Char Mode
  preset_ecmchar: .byte 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 5, 0, 6
  // Preset: Standard Bitmap
  preset_stdbm: .byte 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: MC Bitmap
  preset_mcbm: .byte 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0
  // Preset: Hicolor Standard Char Mode
  preset_hi_stdchar: .byte 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Hicolor Extended Color Char Mode
  preset_hi_ecmchar: .byte 5, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 4, 6, 8, 9, $c, $c
  // Preset: Two plane mode
  preset_twoplane: .byte 6, 1, 0, 1, 1, 1, 0, 0, 0, 0, 7, 0, 0, 0, 1, 0, 0, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 7, 0, $d, 4, 0, 0, 0, 0
  // Preset: Chunky 8bpp
  preset_chunky: .byte 7, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 8, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Sixs FREDs mode
  preset_sixsfred: .byte 8, 1, 1, 1, 1, 1, 0, 0, 0, 0, 9, 0, 0, 0, 1, 0, 0, $a, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Sixs FREDs 2 mode
  preset_sixsfred2: .byte 9, 1, 1, 1, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 1, 0, 0, $a, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: 8bpp Pixel Cell
  preset_8bpppixelcell: .byte $a, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, $b, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Table with addresses of the y-lines of the form. The first line contains the address of the form screen.
  form_line_lo: .fill $19, 0
  form_line_hi: .fill $19, 0

REGISTER UPLIFT POTENTIAL REGISTERS
Equivalence Class zp[1]:332 [ bitmap_init::$7 ] has ALU potential.
Statement [5] *((const nomodify byte*) PROCPORT_DDR) ← (const nomodify byte) PROCPORT_DDR_MEMORY_MASK [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [6] *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_RAM_IO [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [7] *((const nomodify byte*) DTV_FEATURE) ← (const nomodify byte) DTV_FEATURE_ENABLE [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [16] if(*((const nomodify byte*) form_ctrl_line)==(byte) 0) goto gfx_mode::@1 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:31 [ form_cursor_count#21 form_cursor_count#1 form_cursor_count#16 form_cursor_count#15 form_cursor_count#5 ]
Removing always clobbered register reg byte a as potential for zp[1]:32 [ form_field_idx#28 form_field_idx#1 form_field_idx#18 form_field_idx#31 form_field_idx#6 form_field_idx#5 ]
Removing always clobbered register reg byte a as potential for zp[1]:18 [ keyboard_events_size#18 keyboard_events_size#106 keyboard_events_size#97 keyboard_events_size#47 keyboard_events_size#27 keyboard_events_size#24 keyboard_events_size#100 keyboard_events_size#4 keyboard_events_size#105 keyboard_events_size#1 keyboard_events_size#2 ]
Statement [19] if(*((const nomodify byte*) form_ctrl_borof)==(byte) 0) goto gfx_mode::@2 [ keyboard_events_size#24 gfx_mode::dtv_control#14 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#14 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ gfx_mode::dtv_control#12 gfx_mode::dtv_control#6 gfx_mode::dtv_control#13 gfx_mode::dtv_control#5 gfx_mode::dtv_control#11 gfx_mode::dtv_control#4 gfx_mode::dtv_control#10 gfx_mode::dtv_control#3 gfx_mode::dtv_control#15 gfx_mode::dtv_control#14 gfx_mode::dtv_control#2 ]
Statement [20] (byte) gfx_mode::dtv_control#2 ← (byte) gfx_mode::dtv_control#14 | (const nomodify byte) DTV_BORDER_OFF [ keyboard_events_size#24 gfx_mode::dtv_control#2 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#2 ] { }  ) always clobbers reg byte a 
Statement [22] if(*((const nomodify byte*) form_ctrl_hicol)==(byte) 0) goto gfx_mode::@3 [ keyboard_events_size#24 gfx_mode::dtv_control#15 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#15 ] { }  ) always clobbers reg byte a 
Statement [23] (byte) gfx_mode::dtv_control#3 ← (byte) gfx_mode::dtv_control#15 | (const nomodify byte) DTV_HIGHCOLOR [ keyboard_events_size#24 gfx_mode::dtv_control#3 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#3 ] { }  ) always clobbers reg byte a 
Statement [25] if(*((const nomodify byte*) form_ctrl_overs)==(byte) 0) goto gfx_mode::@4 [ keyboard_events_size#24 gfx_mode::dtv_control#10 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#10 ] { }  ) always clobbers reg byte a 
Statement [26] (byte) gfx_mode::dtv_control#4 ← (byte) gfx_mode::dtv_control#10 | (const nomodify byte) DTV_OVERSCAN [ keyboard_events_size#24 gfx_mode::dtv_control#4 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#4 ] { }  ) always clobbers reg byte a 
Statement [28] if(*((const nomodify byte*) form_ctrl_colof)==(byte) 0) goto gfx_mode::@5 [ keyboard_events_size#24 gfx_mode::dtv_control#11 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#11 ] { }  ) always clobbers reg byte a 
Statement [29] (byte) gfx_mode::dtv_control#5 ← (byte) gfx_mode::dtv_control#11 | (const nomodify byte) DTV_COLORRAM_OFF [ keyboard_events_size#24 gfx_mode::dtv_control#5 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#5 ] { }  ) always clobbers reg byte a 
Statement [31] if(*((const nomodify byte*) form_ctrl_chunk)==(byte) 0) goto gfx_mode::@6 [ keyboard_events_size#24 gfx_mode::dtv_control#13 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#13 ] { }  ) always clobbers reg byte a 
Statement [32] (byte) gfx_mode::dtv_control#6 ← (byte) gfx_mode::dtv_control#13 | (const nomodify byte) DTV_CHUNKY [ keyboard_events_size#24 gfx_mode::dtv_control#6 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#6 ] { }  ) always clobbers reg byte a 
Statement [35] if(*((const nomodify byte*) form_ctrl_ecm)==(byte) 0) goto gfx_mode::@7 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] { }  ) always clobbers reg byte a 
Statement [38] if(*((const nomodify byte*) form_ctrl_bmm)==(byte) 0) goto gfx_mode::@8 [ keyboard_events_size#24 gfx_mode::vic_control#5 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::vic_control#5 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:3 [ gfx_mode::vic_control#4 gfx_mode::vic_control#2 gfx_mode::vic_control#5 ]
Statement [39] (byte) gfx_mode::vic_control#2 ← (byte) gfx_mode::vic_control#5 | (const nomodify byte) VIC_BMM [ keyboard_events_size#24 gfx_mode::vic_control#2 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::vic_control#2 ] { }  ) always clobbers reg byte a 
Statement [42] if(*((const nomodify byte*) form_ctrl_mcm)==(byte) 0) goto gfx_mode::@9 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] { }  ) always clobbers reg byte a 
Statement [46] (byte~) gfx_mode::$18 ← *((const nomodify byte*) form_a_start_hi) << (byte) 4 [ keyboard_events_size#24 gfx_mode::$18 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$18 ] { { get_plane::idx#0 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#16 } }  ) always clobbers reg byte a 
Statement [47] (byte) gfx_mode::plane_a_offs#0 ← (byte~) gfx_mode::$18 | *((const nomodify byte*) form_a_start_lo) [ keyboard_events_size#24 gfx_mode::plane_a_offs#0 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_a_offs#0 ] { { get_plane::idx#0 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#16 } }  ) always clobbers reg byte a 
Statement [50] (dword) get_plane::return#16 ← (dword) get_plane::return#14 [ keyboard_events_size#24 gfx_mode::plane_a_offs#0 get_plane::return#16 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_a_offs#0 get_plane::return#16 ] { { get_plane::idx#0 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#16 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:159 [ gfx_mode::plane_a_offs#0 ]
Statement [51] (dword~) gfx_mode::$20 ← (dword) get_plane::return#16 [ keyboard_events_size#24 gfx_mode::plane_a_offs#0 gfx_mode::$20 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_a_offs#0 gfx_mode::$20 ] { { get_plane::idx#1 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#17 } }  ) always clobbers reg byte a 
Statement [52] (dword) gfx_mode::plane_a#0 ← (dword~) gfx_mode::$20 + (byte) gfx_mode::plane_a_offs#0 [ keyboard_events_size#24 gfx_mode::plane_a#0 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_a#0 ] { { get_plane::idx#1 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#17 } }  ) always clobbers reg byte a 
Statement [53] (word~) gfx_mode::$24 ← < (dword) gfx_mode::plane_a#0 [ keyboard_events_size#24 gfx_mode::plane_a#0 gfx_mode::$24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_a#0 gfx_mode::$24 ] { { get_plane::idx#1 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#17 } }  ) always clobbers reg byte a 
Statement [58] (word~) gfx_mode::$26 ← > (dword) gfx_mode::plane_a#0 [ keyboard_events_size#24 gfx_mode::$26 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$26 ] { { get_plane::idx#1 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#17 } }  ) always clobbers reg byte a 
Statement [61] (byte~) gfx_mode::$28 ← *((const nomodify byte*) form_a_step_hi) << (byte) 4 [ keyboard_events_size#24 gfx_mode::$28 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$28 ] { { get_plane::idx#1 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#17 } }  ) always clobbers reg byte a 
Statement [62] (byte~) gfx_mode::$29 ← (byte~) gfx_mode::$28 | *((const nomodify byte*) form_a_step_lo) [ keyboard_events_size#24 gfx_mode::$29 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$29 ] { { get_plane::idx#1 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#17 } }  ) always clobbers reg byte a 
Statement [64] (byte~) gfx_mode::$30 ← *((const nomodify byte*) form_a_mod_hi) << (byte) 4 [ keyboard_events_size#24 gfx_mode::$30 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$30 ] { { get_plane::idx#1 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#17 } }  ) always clobbers reg byte a 
Statement [65] (byte~) gfx_mode::$31 ← (byte~) gfx_mode::$30 | *((const nomodify byte*) form_a_mod_lo) [ keyboard_events_size#24 gfx_mode::$31 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$31 ] { { get_plane::idx#1 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#17 } }  ) always clobbers reg byte a 
Statement [67] *((const nomodify byte*) DTV_PLANEA_MODULO_HI) ← (byte) 0 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] { { get_plane::idx#1 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#17 } }  ) always clobbers reg byte a 
Statement [68] (byte~) gfx_mode::$32 ← *((const nomodify byte*) form_b_start_hi) << (byte) 4 [ keyboard_events_size#24 gfx_mode::$32 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$32 ] { { get_plane::idx#1 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#17 } }  ) always clobbers reg byte a 
Statement [69] (byte) gfx_mode::plane_b_offs#0 ← (byte~) gfx_mode::$32 | *((const nomodify byte*) form_b_start_lo) [ keyboard_events_size#24 gfx_mode::plane_b_offs#0 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_b_offs#0 ] { { get_plane::idx#1 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#17 } }  ) always clobbers reg byte a 
Statement [72] (dword) get_plane::return#17 ← (dword) get_plane::return#14 [ keyboard_events_size#24 gfx_mode::plane_b_offs#0 get_plane::return#17 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_b_offs#0 get_plane::return#17 ] { { get_plane::idx#1 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#17 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:184 [ gfx_mode::plane_b_offs#0 ]
Statement [73] (dword~) gfx_mode::$34 ← (dword) get_plane::return#17 [ keyboard_events_size#24 gfx_mode::plane_b_offs#0 gfx_mode::$34 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_b_offs#0 gfx_mode::$34 ] { { get_vic_screen::idx#0 = get_vic_screen::idx#2 } { get_vic_screen::return#10 = get_vic_screen::return#5 } }  ) always clobbers reg byte a 
Statement [74] (dword) gfx_mode::plane_b#0 ← (dword~) gfx_mode::$34 + (byte) gfx_mode::plane_b_offs#0 [ keyboard_events_size#24 gfx_mode::plane_b#0 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_b#0 ] { { get_vic_screen::idx#0 = get_vic_screen::idx#2 } { get_vic_screen::return#10 = get_vic_screen::return#5 } }  ) always clobbers reg byte a 
Statement [75] (word~) gfx_mode::$38 ← < (dword) gfx_mode::plane_b#0 [ keyboard_events_size#24 gfx_mode::plane_b#0 gfx_mode::$38 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_b#0 gfx_mode::$38 ] { { get_vic_screen::idx#0 = get_vic_screen::idx#2 } { get_vic_screen::return#10 = get_vic_screen::return#5 } }  ) always clobbers reg byte a 
Statement [80] (word~) gfx_mode::$40 ← > (dword) gfx_mode::plane_b#0 [ keyboard_events_size#24 gfx_mode::$40 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$40 ] { { get_vic_screen::idx#0 = get_vic_screen::idx#2 } { get_vic_screen::return#10 = get_vic_screen::return#5 } }  ) always clobbers reg byte a 
Statement [83] (byte~) gfx_mode::$42 ← *((const nomodify byte*) form_b_step_hi) << (byte) 4 [ keyboard_events_size#24 gfx_mode::$42 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$42 ] { { get_vic_screen::idx#0 = get_vic_screen::idx#2 } { get_vic_screen::return#10 = get_vic_screen::return#5 } }  ) always clobbers reg byte a 
Statement [84] (byte~) gfx_mode::$43 ← (byte~) gfx_mode::$42 | *((const nomodify byte*) form_b_step_lo) [ keyboard_events_size#24 gfx_mode::$43 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$43 ] { { get_vic_screen::idx#0 = get_vic_screen::idx#2 } { get_vic_screen::return#10 = get_vic_screen::return#5 } }  ) always clobbers reg byte a 
Statement [86] (byte~) gfx_mode::$44 ← *((const nomodify byte*) form_b_mod_hi) << (byte) 4 [ keyboard_events_size#24 gfx_mode::$44 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$44 ] { { get_vic_screen::idx#0 = get_vic_screen::idx#2 } { get_vic_screen::return#10 = get_vic_screen::return#5 } }  ) always clobbers reg byte a 
Statement [87] (byte~) gfx_mode::$45 ← (byte~) gfx_mode::$44 | *((const nomodify byte*) form_b_mod_lo) [ keyboard_events_size#24 gfx_mode::$45 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$45 ] { { get_vic_screen::idx#0 = get_vic_screen::idx#2 } { get_vic_screen::return#10 = get_vic_screen::return#5 } }  ) always clobbers reg byte a 
Statement [89] *((const nomodify byte*) DTV_PLANEB_MODULO_HI) ← (byte) 0 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] { { get_vic_screen::idx#0 = get_vic_screen::idx#2 } { get_vic_screen::return#10 = get_vic_screen::return#5 } }  ) always clobbers reg byte a 
Statement [90] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) ← (byte) 3 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] { { get_vic_screen::idx#0 = get_vic_screen::idx#2 } { get_vic_screen::return#10 = get_vic_screen::return#5 } }  ) always clobbers reg byte a 
Statement [91] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2) ← (byte) 3^(byte)(word)(const nomodify byte*) VIC_SCREEN0/(word) $4000 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] { { get_vic_screen::idx#0 = get_vic_screen::idx#2 } { get_vic_screen::return#10 = get_vic_screen::return#5 } }  ) always clobbers reg byte a 
Statement [94] (byte*) get_vic_screen::return#10 ← (byte*) get_vic_screen::return#5 [ keyboard_events_size#24 get_vic_screen::return#10 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 get_vic_screen::return#10 ] { { get_vic_screen::idx#0 = get_vic_screen::idx#2 } { get_vic_screen::return#10 = get_vic_screen::return#5 } }  ) always clobbers reg byte a 
Statement [95] (byte*~) gfx_mode::$82 ← (byte*) get_vic_screen::return#10 [ keyboard_events_size#24 gfx_mode::$82 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$82 ] { { get_vic_charset::return#2 = get_vic_charset::return#4 } }  ) always clobbers reg byte a 
Statement [96] (word~) gfx_mode::$47 ← (word)(byte*~) gfx_mode::$82 & (word) $3fff [ keyboard_events_size#24 gfx_mode::$47 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$47 ] { { get_vic_charset::return#2 = get_vic_charset::return#4 } }  ) always clobbers reg byte a 
Statement [97] (word~) gfx_mode::$48 ← (word~) gfx_mode::$47 >> (byte) 6 [ keyboard_events_size#24 gfx_mode::$48 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$48 ] { { get_vic_charset::return#2 = get_vic_charset::return#4 } }  ) always clobbers reg byte a 
Statement [100] (byte*) get_vic_charset::return#4 ← (byte*) get_vic_charset::return#2 [ keyboard_events_size#24 gfx_mode::$48 get_vic_charset::return#4 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$48 get_vic_charset::return#4 ] { { get_vic_charset::return#2 = get_vic_charset::return#4 } }  ) always clobbers reg byte a 
Statement [101] (byte*~) gfx_mode::$83 ← (byte*) get_vic_charset::return#4 [ keyboard_events_size#24 gfx_mode::$48 gfx_mode::$83 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$48 gfx_mode::$83 ] { { get_vic_screen::idx#1 = get_vic_screen::idx#2 } { get_vic_screen::return#11 = get_vic_screen::return#5 } }  ) always clobbers reg byte a 
Statement [102] (word~) gfx_mode::$50 ← (word)(byte*~) gfx_mode::$83 & (word) $3fff [ keyboard_events_size#24 gfx_mode::$48 gfx_mode::$50 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$48 gfx_mode::$50 ] { { get_vic_screen::idx#1 = get_vic_screen::idx#2 } { get_vic_screen::return#11 = get_vic_screen::return#5 } }  ) always clobbers reg byte a 
Statement [104] (byte~) gfx_mode::$52 ← (byte~) gfx_mode::$51 >> (byte) 2 [ keyboard_events_size#24 gfx_mode::$48 gfx_mode::$52 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$48 gfx_mode::$52 ] { { get_vic_screen::idx#1 = get_vic_screen::idx#2 } { get_vic_screen::return#11 = get_vic_screen::return#5 } }  ) always clobbers reg byte a 
Statement [105] (byte~) gfx_mode::$84 ← (byte)(word~) gfx_mode::$48 [ keyboard_events_size#24 gfx_mode::$52 gfx_mode::$84 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$52 gfx_mode::$84 ] { { get_vic_screen::idx#1 = get_vic_screen::idx#2 } { get_vic_screen::return#11 = get_vic_screen::return#5 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:224 [ gfx_mode::$52 ]
Statement [110] (byte*) get_vic_screen::return#11 ← (byte*) get_vic_screen::return#5 [ keyboard_events_size#24 get_vic_screen::return#11 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 get_vic_screen::return#11 ] { { get_vic_screen::idx#1 = get_vic_screen::idx#2 } { get_vic_screen::return#11 = get_vic_screen::return#5 } }  ) always clobbers reg byte a 
Statement [111] (byte*) gfx_mode::vic_colors#0 ← (byte*) get_vic_screen::return#11 [ keyboard_events_size#24 gfx_mode::vic_colors#0 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::vic_colors#0 ] { }  ) always clobbers reg byte a 
Statement [114] *((byte*) gfx_mode::col#2) ← *((byte*) gfx_mode::vic_colors#2) [ keyboard_events_size#24 gfx_mode::cy#4 gfx_mode::vic_colors#2 gfx_mode::col#2 gfx_mode::cx#2 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::cy#4 gfx_mode::vic_colors#2 gfx_mode::col#2 gfx_mode::cx#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:31 [ form_cursor_count#21 form_cursor_count#1 form_cursor_count#16 form_cursor_count#15 form_cursor_count#5 ]
Removing always clobbered register reg byte y as potential for zp[1]:32 [ form_field_idx#28 form_field_idx#1 form_field_idx#18 form_field_idx#31 form_field_idx#6 form_field_idx#5 ]
Removing always clobbered register reg byte y as potential for zp[1]:18 [ keyboard_events_size#18 keyboard_events_size#106 keyboard_events_size#97 keyboard_events_size#47 keyboard_events_size#27 keyboard_events_size#24 keyboard_events_size#100 keyboard_events_size#4 keyboard_events_size#105 keyboard_events_size#1 keyboard_events_size#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:5 [ gfx_mode::cy#4 gfx_mode::cy#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:5 [ gfx_mode::cy#4 gfx_mode::cy#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:10 [ gfx_mode::cx#2 gfx_mode::cx#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:10 [ gfx_mode::cx#2 gfx_mode::cx#1 ]
Statement [121] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (byte) 0 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] { }  ) always clobbers reg byte a 
Statement [122] (byte~) gfx_mode::$55 ← *((const nomodify byte*) form_vic_bg0_hi) << (byte) 4 [ keyboard_events_size#24 gfx_mode::$55 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$55 ] { }  ) always clobbers reg byte a 
Statement [123] (byte~) gfx_mode::$56 ← (byte~) gfx_mode::$55 | *((const nomodify byte*) form_vic_bg0_lo) [ keyboard_events_size#24 gfx_mode::$56 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$56 ] { }  ) always clobbers reg byte a 
Statement [125] (byte~) gfx_mode::$57 ← *((const nomodify byte*) form_vic_bg1_hi) << (byte) 4 [ keyboard_events_size#24 gfx_mode::$57 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$57 ] { }  ) always clobbers reg byte a 
Statement [126] (byte~) gfx_mode::$58 ← (byte~) gfx_mode::$57 | *((const nomodify byte*) form_vic_bg1_lo) [ keyboard_events_size#24 gfx_mode::$58 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$58 ] { }  ) always clobbers reg byte a 
Statement [128] (byte~) gfx_mode::$59 ← *((const nomodify byte*) form_vic_bg2_hi) << (byte) 4 [ keyboard_events_size#24 gfx_mode::$59 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$59 ] { }  ) always clobbers reg byte a 
Statement [129] (byte~) gfx_mode::$60 ← (byte~) gfx_mode::$59 | *((const nomodify byte*) form_vic_bg2_lo) [ keyboard_events_size#24 gfx_mode::$60 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$60 ] { }  ) always clobbers reg byte a 
Statement [131] (byte~) gfx_mode::$61 ← *((const nomodify byte*) form_vic_bg3_hi) << (byte) 4 [ keyboard_events_size#24 gfx_mode::$61 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$61 ] { }  ) always clobbers reg byte a 
Statement [132] (byte~) gfx_mode::$62 ← (byte~) gfx_mode::$61 | *((const nomodify byte*) form_vic_bg3_lo) [ keyboard_events_size#24 gfx_mode::$62 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$62 ] { }  ) always clobbers reg byte a 
Statement [134] if(*((const nomodify byte*) form_dtv_palet)==(byte) 0) goto gfx_mode::@24 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] { }  ) always clobbers reg byte a 
Statement [139] if(*((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)!=(byte) $ff) goto gfx_mode::@25 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] { }  ) always clobbers reg byte a 
Statement [149] *((const nomodify byte*) DTV_PALETTE + (byte) gfx_mode::i#2) ← *((const byte*) DTV_PALETTE_DEFAULT + (byte) gfx_mode::i#2) [ keyboard_events_size#24 gfx_mode::i#2 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:12 [ gfx_mode::i#2 gfx_mode::i#1 ]
Statement [164] (byte) keyboard_event_scan::keycode#1 ← (byte) keyboard_event_scan::keycode#11 + (byte) 8 [ keyboard_event_scan::row#2 keyboard_events_size#106 keyboard_event_scan::keycode#1 ] ( main:2::gfx_mode:15::keyboard_event_scan:141 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_events_size#106 keyboard_event_scan::keycode#1 ] { { keyboard_events_size#24 = keyboard_events_size#97 } }  main:2::form_mode:13::form_control:292::keyboard_event_scan:372 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_events_size#106 keyboard_event_scan::keycode#1 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#47 = keyboard_events_size#97 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:14 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:33 [ form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 ]
Statement [179] (byte) keyboard_modifiers#3 ← (byte) keyboard_modifiers#18 | (const nomodify byte) KEY_MODIFIER_RSHIFT [ keyboard_events_size#100 keyboard_modifiers#3 ] ( main:2::gfx_mode:15::keyboard_event_scan:141 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#3 ] { { keyboard_events_size#24 = keyboard_events_size#97 } }  main:2::form_mode:13::form_control:292::keyboard_event_scan:372 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#3 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#47 = keyboard_events_size#97 } }  ) always clobbers reg byte a 
Statement [185] (byte) keyboard_modifiers#4 ← (byte) keyboard_modifiers#19 | (const nomodify byte) KEY_MODIFIER_CTRL [ keyboard_events_size#100 keyboard_modifiers#4 ] ( main:2::gfx_mode:15::keyboard_event_scan:141 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#4 ] { { keyboard_events_size#24 = keyboard_events_size#97 } }  main:2::form_mode:13::form_control:292::keyboard_event_scan:372 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#4 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#47 = keyboard_events_size#97 } }  ) always clobbers reg byte a 
Statement [191] (byte) keyboard_modifiers#5 ← (byte) keyboard_modifiers#20 | (const nomodify byte) KEY_MODIFIER_COMMODORE [ keyboard_events_size#100 keyboard_modifiers#5 ] ( main:2::gfx_mode:15::keyboard_event_scan:141 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#5 ] { { keyboard_events_size#24 = keyboard_events_size#97 } }  main:2::form_mode:13::form_control:292::keyboard_event_scan:372 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#5 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#47 = keyboard_events_size#97 } }  ) always clobbers reg byte a 
Statement [195] (byte~) keyboard_event_scan::$15 ← (byte) keyboard_event_scan::row_scan#0 ^ *((const byte*) keyboard_scan_values + (byte) keyboard_event_scan::row#2) [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::$15 ] ( main:2::gfx_mode:15::keyboard_event_scan:141 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::$15 ] { { keyboard_events_size#24 = keyboard_events_size#97 } }  main:2::form_mode:13::form_control:292::keyboard_event_scan:372 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::$15 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#47 = keyboard_events_size#97 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:241 [ keyboard_event_scan::row_scan#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:16 [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:17 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ]
Statement [199] (byte) keyboard_event_scan::event_type#0 ← (byte) keyboard_event_scan::row_scan#0 & *((const byte*) keyboard_matrix_col_bitmask + (byte) keyboard_event_scan::col#2) [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::event_type#0 ] ( main:2::gfx_mode:15::keyboard_event_scan:141 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::event_type#0 ] { { keyboard_events_size#24 = keyboard_events_size#97 } }  main:2::form_mode:13::form_control:292::keyboard_event_scan:372 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::event_type#0 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#47 = keyboard_events_size#97 } }  ) always clobbers reg byte a 
Statement [201] *((const byte*) keyboard_events + (byte) keyboard_events_size#18) ← (byte) keyboard_event_scan::keycode#10 [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 ] ( main:2::gfx_mode:15::keyboard_event_scan:141 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 ] { { keyboard_events_size#24 = keyboard_events_size#97 } }  main:2::form_mode:13::form_control:292::keyboard_event_scan:372 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#47 = keyboard_events_size#97 } }  ) always clobbers reg byte a 
Statement [207] *((const byte*) keyboard_scan_values + (byte) keyboard_event_scan::row#2) ← (byte) keyboard_event_scan::row_scan#0 [ keyboard_event_scan::row#2 keyboard_event_scan::keycode#14 keyboard_events_size#105 ] ( main:2::gfx_mode:15::keyboard_event_scan:141 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::keycode#14 keyboard_events_size#105 ] { { keyboard_events_size#24 = keyboard_events_size#97 } }  main:2::form_mode:13::form_control:292::keyboard_event_scan:372 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::keycode#14 keyboard_events_size#105 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#47 = keyboard_events_size#97 } }  ) always clobbers reg byte a 
Statement [208] (byte~) keyboard_event_scan::$23 ← (byte) keyboard_event_scan::keycode#10 | (byte) $40 [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::$23 ] ( main:2::gfx_mode:15::keyboard_event_scan:141 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::$23 ] { { keyboard_events_size#24 = keyboard_events_size#97 } }  main:2::form_mode:13::form_control:292::keyboard_event_scan:372 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::$23 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#47 = keyboard_events_size#97 } }  ) always clobbers reg byte a 
Statement [212] (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#4 >> (byte) 3 [ keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] ( main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:169 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] { { keyboard_events_size#24 = keyboard_events_size#97 } { keyboard_event_pressed::return#0 = keyboard_event_pressed::return#10 } }  main:2::form_mode:13::form_control:292::keyboard_event_scan:372::keyboard_event_pressed:169 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#47 = keyboard_events_size#97 } { keyboard_event_pressed::return#0 = keyboard_event_pressed::return#10 } }  main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:175 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#18 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] { { keyboard_events_size#24 = keyboard_events_size#97 } { keyboard_event_pressed::return#1 = keyboard_event_pressed::return#10 } }  main:2::form_mode:13::form_control:292::keyboard_event_scan:372::keyboard_event_pressed:175 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#18 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#47 = keyboard_events_size#97 } { keyboard_event_pressed::return#1 = keyboard_event_pressed::return#10 } }  main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:181 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] { { keyboard_events_size#24 = keyboard_events_size#97 } { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#2 } }  main:2::form_mode:13::form_control:292::keyboard_event_scan:372::keyboard_event_pressed:181 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#47 = keyboard_events_size#97 } { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#2 } }  main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:187 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] { { keyboard_events_size#24 = keyboard_events_size#97 } { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#3 } }  main:2::form_mode:13::form_control:292::keyboard_event_scan:372::keyboard_event_pressed:187 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#47 = keyboard_events_size#97 } { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#3 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:19 [ keyboard_event_pressed::keycode#4 ]
Removing always clobbered register reg byte a as potential for zp[1]:15 [ keyboard_modifiers#21 keyboard_modifiers#20 keyboard_modifiers#19 keyboard_modifiers#18 keyboard_modifiers#3 keyboard_modifiers#4 keyboard_modifiers#5 ]
Statement [214] (byte~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#4 & (byte) 7 [ keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] ( main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:169 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] { { keyboard_events_size#24 = keyboard_events_size#97 } { keyboard_event_pressed::return#0 = keyboard_event_pressed::return#10 } }  main:2::form_mode:13::form_control:292::keyboard_event_scan:372::keyboard_event_pressed:169 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#47 = keyboard_events_size#97 } { keyboard_event_pressed::return#0 = keyboard_event_pressed::return#10 } }  main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:175 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#18 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] { { keyboard_events_size#24 = keyboard_events_size#97 } { keyboard_event_pressed::return#1 = keyboard_event_pressed::return#10 } }  main:2::form_mode:13::form_control:292::keyboard_event_scan:372::keyboard_event_pressed:175 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#18 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#47 = keyboard_events_size#97 } { keyboard_event_pressed::return#1 = keyboard_event_pressed::return#10 } }  main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:181 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] { { keyboard_events_size#24 = keyboard_events_size#97 } { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#2 } }  main:2::form_mode:13::form_control:292::keyboard_event_scan:372::keyboard_event_pressed:181 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#47 = keyboard_events_size#97 } { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#2 } }  main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:187 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] { { keyboard_events_size#24 = keyboard_events_size#97 } { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#3 } }  main:2::form_mode:13::form_control:292::keyboard_event_scan:372::keyboard_event_pressed:187 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#47 = keyboard_events_size#97 } { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#3 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:255 [ keyboard_event_pressed::row_bits#0 ]
Statement [215] (byte) keyboard_event_pressed::return#10 ← (byte) keyboard_event_pressed::row_bits#0 & *((const byte*) keyboard_matrix_col_bitmask + (byte~) keyboard_event_pressed::$1) [ keyboard_event_pressed::return#10 ] ( main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:169 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_event_pressed::return#10 ] { { keyboard_events_size#24 = keyboard_events_size#97 } { keyboard_event_pressed::return#0 = keyboard_event_pressed::return#10 } }  main:2::form_mode:13::form_control:292::keyboard_event_scan:372::keyboard_event_pressed:169 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_event_pressed::return#10 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#47 = keyboard_events_size#97 } { keyboard_event_pressed::return#0 = keyboard_event_pressed::return#10 } }  main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:175 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#18 keyboard_event_pressed::return#10 ] { { keyboard_events_size#24 = keyboard_events_size#97 } { keyboard_event_pressed::return#1 = keyboard_event_pressed::return#10 } }  main:2::form_mode:13::form_control:292::keyboard_event_scan:372::keyboard_event_pressed:175 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#18 keyboard_event_pressed::return#10 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#47 = keyboard_events_size#97 } { keyboard_event_pressed::return#1 = keyboard_event_pressed::return#10 } }  main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:181 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::return#10 ] { { keyboard_events_size#24 = keyboard_events_size#97 } { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#2 } }  main:2::form_mode:13::form_control:292::keyboard_event_scan:372::keyboard_event_pressed:181 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::return#10 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#47 = keyboard_events_size#97 } { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#2 } }  main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:187 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::return#10 ] { { keyboard_events_size#24 = keyboard_events_size#97 } { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#3 } }  main:2::form_mode:13::form_control:292::keyboard_event_scan:372::keyboard_event_pressed:187 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::return#10 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#47 = keyboard_events_size#97 } { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#3 } }  ) always clobbers reg byte a 
Statement [217] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1) ← *((const byte*) keyboard_matrix_row_bitmask + (byte) keyboard_matrix_read::rowid#0) [ ] ( main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_matrix_read:160 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#106 ] { { keyboard_events_size#24 = keyboard_events_size#97 } { keyboard_matrix_read::rowid#0 = keyboard_event_scan::row#2 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  main:2::form_mode:13::form_control:292::keyboard_event_scan:372::keyboard_matrix_read:160 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#106 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#47 = keyboard_events_size#97 } { keyboard_matrix_read::rowid#0 = keyboard_event_scan::row#2 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  ) always clobbers reg byte a 
Statement [218] (byte) keyboard_matrix_read::return#0 ← ~ *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_B) [ keyboard_matrix_read::return#0 ] ( main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_matrix_read:160 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#106 keyboard_matrix_read::return#0 ] { { keyboard_events_size#24 = keyboard_events_size#97 } { keyboard_matrix_read::rowid#0 = keyboard_event_scan::row#2 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  main:2::form_mode:13::form_control:292::keyboard_event_scan:372::keyboard_matrix_read:160 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#106 keyboard_matrix_read::return#0 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#47 = keyboard_events_size#97 } { keyboard_matrix_read::rowid#0 = keyboard_event_scan::row#2 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  ) always clobbers reg byte a 
Statement [270] *((const nomodify byte*) DTV_GRAPHICS_VIC_BANK) ← (byte) 0 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [271] *((const nomodify byte*) DTV_COLOR_BANK_LO) ← <(word)(const nomodify dword) DTV_COLOR_BANK_DEFAULT/(word) $400 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [272] *((const nomodify byte*) DTV_COLOR_BANK_HI) ← (byte) 0 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [273] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) ← (byte) 3 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [274] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2) ← (byte) 3 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [275] *((const nomodify byte*) DTV_CONTROL) ← (byte) 0 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [276] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1) ← (const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(byte) 3 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [277] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL2) ← (const nomodify byte) VIC_CSEL [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [278] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_MEMORY) ← (byte)(word)(const nomodify byte*) FORM_SCREEN&(word) $3fff/(byte) $40|(word)(const nomodify byte*) FORM_CHARSET&(word) $3fff/(word) $400 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [279] *((const nomodify byte*) DTV_PLANEA_START_LO) ← (byte) 0 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [280] *((const nomodify byte*) DTV_PLANEA_START_MI) ← >(const nomodify byte*) FORM_SCREEN [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [281] *((const nomodify byte*) DTV_PLANEA_START_HI) ← (byte) 0 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [283] *((const nomodify byte*) DTV_PALETTE + (byte) form_mode::i#2) ← *((const byte*) DTV_PALETTE_DEFAULT + (byte) form_mode::i#2) [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 form_mode::i#2 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 form_mode::i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:30 [ form_mode::i#2 form_mode::i#1 ]
Statement [286] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) ← (byte) 0 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [287] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (byte) 0 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [290] if(*((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)!=(byte) $ff) goto form_mode::@4 [ keyboard_events_size#47 form_cursor_count#21 form_field_idx#28 form_mode::preset_current#6 ] ( main:2::form_mode:13 [ keyboard_events_size#47 form_cursor_count#21 form_field_idx#28 form_mode::preset_current#6 ] { }  ) always clobbers reg byte a 
Statement [318] (byte*) print_str_at::str#1 ← (byte*) render_preset_name::name#13 [ print_str_at::str#1 ] ( main:2::form_mode:13::render_preset_name:269 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_at::str#1 ] { { render_preset_name::idx#0 = render_preset_name::idx#10 } { print_str_at::str#1 = render_preset_name::name#13 } }  main:2::form_mode:13::render_preset_name:303 [ form_cursor_count#16 keyboard_events_size#24 form_field_idx#18 form_mode::preset_current#1 print_str_at::str#1 ] { { render_preset_name::idx#1 = render_preset_name::idx#10 } { print_str_at::str#1 = render_preset_name::name#13 } }  ) always clobbers reg byte a 
Statement [323] if((byte) 0!=*((byte*) print_str_at::str#2)) goto print_str_at::@2 [ print_str_at::str#2 print_str_at::at#2 ] ( main:2::form_mode:13::render_preset_name:269::print_str_at:319 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_at::str#2 print_str_at::at#2 ] { { render_preset_name::idx#0 = render_preset_name::idx#10 } { print_str_at::str#1 = render_preset_name::name#13 } }  main:2::form_mode:13::render_preset_name:303::print_str_at:319 [ form_cursor_count#16 keyboard_events_size#24 form_field_idx#18 form_mode::preset_current#1 print_str_at::str#2 print_str_at::at#2 ] { { render_preset_name::idx#1 = render_preset_name::idx#10 } { print_str_at::str#1 = render_preset_name::name#13 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:33 [ form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 ]
Statement [325] *((byte*) print_str_at::at#2) ← *((byte*) print_str_at::str#2) [ print_str_at::str#2 print_str_at::at#2 ] ( main:2::form_mode:13::render_preset_name:269::print_str_at:319 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_at::str#2 print_str_at::at#2 ] { { render_preset_name::idx#0 = render_preset_name::idx#10 } { print_str_at::str#1 = render_preset_name::name#13 } }  main:2::form_mode:13::render_preset_name:303::print_str_at:319 [ form_cursor_count#16 keyboard_events_size#24 form_field_idx#18 form_mode::preset_current#1 print_str_at::str#2 print_str_at::at#2 ] { { render_preset_name::idx#1 = render_preset_name::idx#10 } { print_str_at::str#1 = render_preset_name::name#13 } }  ) always clobbers reg byte a reg byte y 
Statement [334] *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) ← *((const to_nomodify byte*) print_hextab + *((const byte*) form_fields_val + (byte) form_render_values::idx#2)) [ form_render_values::idx#2 ] ( main:2::form_mode:13::form_render_values:267 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 form_render_values::idx#2 ] { }  main:2::form_mode:13::form_render_values:301 [ form_cursor_count#16 keyboard_events_size#24 form_field_idx#18 form_mode::preset_current#1 form_render_values::idx#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:41 [ form_render_values::idx#2 form_render_values::idx#1 ]
Statement [338] (word) form_field_ptr::line#0 ← *((const byte*) form_line_hi + (byte) form_field_ptr::y#0) w= *((const byte*) form_line_lo + (byte) form_field_ptr::y#0) [ form_field_ptr::line#0 form_field_ptr::field_idx#2 ] ( main:2::form_mode:13::form_render_values:267::form_field_ptr:333 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 form_render_values::idx#2 form_field_ptr::line#0 form_field_ptr::field_idx#2 ] { { form_field_ptr::field_idx#0 = form_field_ptr::field_idx#2 form_render_values::idx#2 } }  main:2::form_mode:13::form_render_values:301::form_field_ptr:333 [ form_cursor_count#16 keyboard_events_size#24 form_field_idx#18 form_mode::preset_current#1 form_render_values::idx#2 form_field_ptr::line#0 form_field_ptr::field_idx#2 ] { { form_field_ptr::field_idx#0 = form_field_ptr::field_idx#2 form_render_values::idx#2 } }  main:2::form_mode:13::form_control:292::form_field_ptr:361 [ form_mode::preset_current#6 keyboard_events_size#47 form_cursor_count#21 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::field_idx#2 ] { { form_control::return#0 = form_control::return#2 } { form_field_ptr::field_idx#1 = form_field_ptr::field_idx#2 form_field_idx#28 } { form_field_ptr::return#0 = form_field_ptr::return#3 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:42 [ form_field_ptr::field_idx#2 form_field_ptr::field_idx#1 form_field_ptr::field_idx#0 ]
Statement [340] (byte*) form_field_ptr::return#0 ← (byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0 [ form_field_ptr::line#0 form_field_ptr::x#0 form_field_ptr::return#0 ] ( main:2::form_mode:13::form_render_values:267::form_field_ptr:333 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 form_render_values::idx#2 form_field_ptr::line#0 form_field_ptr::x#0 form_field_ptr::return#0 ] { { form_field_ptr::field_idx#0 = form_field_ptr::field_idx#2 form_render_values::idx#2 } }  main:2::form_mode:13::form_render_values:301::form_field_ptr:333 [ form_cursor_count#16 keyboard_events_size#24 form_field_idx#18 form_mode::preset_current#1 form_render_values::idx#2 form_field_ptr::line#0 form_field_ptr::x#0 form_field_ptr::return#0 ] { { form_field_ptr::field_idx#0 = form_field_ptr::field_idx#2 form_render_values::idx#2 } }  main:2::form_mode:13::form_control:292::form_field_ptr:361 [ form_mode::preset_current#6 keyboard_events_size#47 form_cursor_count#21 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_field_ptr::return#0 ] { { form_control::return#0 = form_control::return#2 } { form_field_ptr::field_idx#1 = form_field_ptr::field_idx#2 form_field_idx#28 } { form_field_ptr::return#0 = form_field_ptr::return#3 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:265 [ form_field_ptr::x#0 ]
Statement [358] *((const byte*) form_fields_val + (byte) apply_preset::i#2) ← *((byte*) apply_preset::preset#15 + (byte) apply_preset::i#2) [ apply_preset::preset#15 apply_preset::i#2 ] ( main:2::form_mode:13::apply_preset:299 [ form_cursor_count#16 keyboard_events_size#24 form_field_idx#18 apply_preset::preset#15 apply_preset::i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:45 [ apply_preset::i#2 apply_preset::i#1 ]
Statement [362] (byte*) form_field_ptr::return#3 ← (byte*) form_field_ptr::return#0 [ keyboard_events_size#47 form_cursor_count#21 form_field_idx#28 form_field_ptr::return#3 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#47 form_cursor_count#21 form_field_idx#28 form_field_ptr::return#3 ] { { form_control::return#0 = form_control::return#2 } { form_field_ptr::field_idx#1 = form_field_ptr::field_idx#2 form_field_idx#28 } { form_field_ptr::return#0 = form_field_ptr::return#3 } }  ) always clobbers reg byte a 
Statement [363] (byte*) form_control::field#0 ← (byte*) form_field_ptr::return#3 [ keyboard_events_size#47 form_cursor_count#21 form_field_idx#28 form_control::field#0 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#47 form_cursor_count#21 form_field_idx#28 form_control::field#0 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte a 
Statement [368] if((signed byte) form_cursor_count#15<(const nomodify signed byte) FORM_CURSOR_BLINK/(signed byte) 2) goto form_control::@2 [ keyboard_events_size#47 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#47 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte a 
Statement [369] (byte~) form_control::$12 ← *((byte*) form_control::field#0) & (byte) $7f [ keyboard_events_size#47 form_field_idx#28 form_control::field#0 form_cursor_count#15 form_control::$12 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#47 form_field_idx#28 form_control::field#0 form_cursor_count#15 form_control::$12 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte a reg byte y 
Statement [370] *((byte*) form_control::field#0) ← (byte~) form_control::$12 [ keyboard_events_size#47 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#47 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte y 
Statement [378] (byte~) form_control::$14 ← *((byte*) form_control::field#0) & (byte) $7f [ keyboard_events_size#24 keyboard_modifiers#21 form_field_idx#28 form_control::field#0 form_control::$14 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#24 keyboard_modifiers#21 form_field_idx#28 form_control::field#0 form_control::$14 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:15 [ keyboard_modifiers#21 keyboard_modifiers#20 keyboard_modifiers#19 keyboard_modifiers#18 keyboard_modifiers#3 keyboard_modifiers#4 keyboard_modifiers#5 ]
Statement [379] *((byte*) form_control::field#0) ← (byte~) form_control::$14 [ keyboard_events_size#24 keyboard_modifiers#21 form_field_idx#28 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#24 keyboard_modifiers#21 form_field_idx#28 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte y 
Statement [380] (byte~) form_control::$15 ← (byte) keyboard_modifiers#21 & (const nomodify byte) KEY_MODIFIER_SHIFT [ keyboard_events_size#24 form_field_idx#28 form_control::$15 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#24 form_field_idx#28 form_control::$15 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte a 
Statement [392] (byte~) form_control::$22 ← (byte) keyboard_modifiers#21 & (const nomodify byte) KEY_MODIFIER_SHIFT [ keyboard_events_size#24 form_field_idx#28 form_control::field#0 form_cursor_count#15 form_control::$22 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#24 form_field_idx#28 form_control::field#0 form_cursor_count#15 form_control::$22 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte a 
Statement [395] if(*((const byte*) form_fields_val + (byte) form_field_idx#28)!=(byte) $ff) goto form_control::@16 [ keyboard_events_size#24 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#24 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte a 
Statement [396] *((const byte*) form_fields_val + (byte) form_field_idx#28) ← *((const byte*) form_fields_max + (byte) form_field_idx#28) [ keyboard_events_size#24 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#24 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte a 
Statement [397] *((byte*) form_control::field#0) ← *((const to_nomodify byte*) print_hextab + *((const byte*) form_fields_val + (byte) form_field_idx#28)) [ keyboard_events_size#24 form_field_idx#28 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#24 form_field_idx#28 form_cursor_count#15 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte a reg byte y 
Statement [399] if(*((const byte*) form_fields_val + (byte) form_field_idx#28)<=*((const byte*) form_fields_max + (byte) form_field_idx#28)) goto form_control::@16 [ keyboard_events_size#24 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#24 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte a reg byte y 
Statement [400] *((const byte*) form_fields_val + (byte) form_field_idx#28) ← (byte) 0 [ keyboard_events_size#24 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#24 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte a 
Statement [403] (byte~) form_control::$13 ← *((byte*) form_control::field#0) | (byte) $80 [ keyboard_events_size#47 form_field_idx#28 form_control::field#0 form_cursor_count#15 form_control::$13 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#47 form_field_idx#28 form_control::field#0 form_cursor_count#15 form_control::$13 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte a reg byte y 
Statement [404] *((byte*) form_control::field#0) ← (byte~) form_control::$13 [ keyboard_events_size#47 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#47 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte y 
Statement [411] (byte*) form_set_screen::line#1 ← (byte*) form_set_screen::line#2 + (byte) $28 [ form_set_screen::y#2 form_set_screen::line#1 ] ( main:2::form_mode:13::form_set_screen:265 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 form_set_screen::y#2 form_set_screen::line#1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:49 [ form_set_screen::y#2 form_set_screen::y#1 ]
Statement [416] (byte*) print_char_cursor#72 ← (byte*) print_set_screen::screen#2 [ print_str_lines::str#5 print_char_cursor#72 print_set_screen::screen#2 ] ( main:2::form_mode:13::print_str_lines:257 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#5 print_char_cursor#72 print_set_screen::screen#2 ] { }  main:2::form_mode:13::print_str_lines:263 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#5 print_char_cursor#72 print_set_screen::screen#2 ] { }  ) always clobbers reg byte a 
Statement [418] if((byte) 0!=*((byte*) print_str_lines::str#3)) goto print_str_lines::@2 [ print_str_lines::str#3 print_char_cursor#24 print_line_cursor#2 ] ( main:2::form_mode:13::print_str_lines:257 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#3 print_char_cursor#24 print_line_cursor#2 ] { }  main:2::form_mode:13::print_str_lines:263 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#3 print_char_cursor#24 print_line_cursor#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [421] (byte) print_str_lines::ch#0 ← *((byte*) print_str_lines::str#4) [ print_line_cursor#2 print_str_lines::str#4 print_char_cursor#41 print_str_lines::ch#0 ] ( main:2::form_mode:13::print_str_lines:257 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_line_cursor#2 print_str_lines::str#4 print_char_cursor#41 print_str_lines::ch#0 ] { }  main:2::form_mode:13::print_str_lines:263 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_line_cursor#2 print_str_lines::str#4 print_char_cursor#41 print_str_lines::ch#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [430] (byte*) print_char_cursor#73 ← (byte*) print_line_cursor#22 [ print_str_lines::str#0 print_char_cursor#73 print_line_cursor#22 ] ( main:2::form_mode:13::print_str_lines:257 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#0 print_char_cursor#73 print_line_cursor#22 ] { }  main:2::form_mode:13::print_str_lines:263 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#0 print_char_cursor#73 print_line_cursor#22 ] { }  ) always clobbers reg byte a 
Statement [433] (byte*) print_line_cursor#22 ← (byte*) print_line_cursor#21 + (byte) $28 [ print_line_cursor#22 print_char_cursor#42 ] ( main:2::form_mode:13::print_str_lines:257::print_ln:429 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#0 print_line_cursor#22 print_char_cursor#42 ] { }  main:2::form_mode:13::print_str_lines:263::print_ln:429 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#0 print_line_cursor#22 print_char_cursor#42 ] { }  ) always clobbers reg byte a 
Statement [434] if((byte*) print_line_cursor#22<(byte*) print_char_cursor#42) goto print_ln::@1 [ print_line_cursor#22 print_char_cursor#42 ] ( main:2::form_mode:13::print_str_lines:257::print_ln:429 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#0 print_line_cursor#22 print_char_cursor#42 ] { }  main:2::form_mode:13::print_str_lines:263::print_ln:429 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#0 print_line_cursor#22 print_char_cursor#42 ] { }  ) always clobbers reg byte a 
Statement [436] *((byte*) print_char_cursor#41) ← (byte) print_char::ch#0 [ print_char_cursor#41 ] ( main:2::form_mode:13::print_str_lines:257::print_char:425 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_line_cursor#2 print_str_lines::str#0 print_str_lines::ch#0 print_char_cursor#41 ] { { print_char::ch#0 = print_str_lines::ch#0 } }  main:2::form_mode:13::print_str_lines:263::print_char:425 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_line_cursor#2 print_str_lines::str#0 print_str_lines::ch#0 print_char_cursor#41 ] { { print_char::ch#0 = print_str_lines::ch#0 } }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:281 [ print_str_lines::ch#0 ]
Statement [439] (void*) memset::str#0 ← (void*)(byte*) print_set_screen::screen#2 [ print_set_screen::screen#2 memset::str#0 ] ( main:2::form_mode:13::print_cls:255 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 memset::str#0 ] { }  main:2::form_mode:13::print_cls:261 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 memset::str#0 ] { }  ) always clobbers reg byte a 
Statement [443] (byte*) memset::end#0 ← (byte*)(void*) memset::str#0 + (const word) memset::num#0 [ memset::str#0 memset::end#0 ] ( main:2::form_mode:13::print_cls:255::memset:440 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 memset::str#0 memset::end#0 ] { }  main:2::form_mode:13::print_cls:261::memset:440 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 memset::str#0 memset::end#0 ] { }  ) always clobbers reg byte a 
Statement [444] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#0 [ memset::end#0 memset::dst#4 ] ( main:2::form_mode:13::print_cls:255::memset:440 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 memset::end#0 memset::dst#4 ] { }  main:2::form_mode:13::print_cls:261::memset:440 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 memset::end#0 memset::dst#4 ] { }  ) always clobbers reg byte a 
Statement [446] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 [ memset::end#0 memset::dst#2 ] ( main:2::form_mode:13::print_cls:255::memset:440 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 memset::end#0 memset::dst#2 ] { }  main:2::form_mode:13::print_cls:261::memset:440 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [448] *((byte*) memset::dst#2) ← (const byte) memset::c#0 [ memset::end#0 memset::dst#2 ] ( main:2::form_mode:13::print_cls:255::memset:440 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 memset::end#0 memset::dst#2 ] { }  main:2::form_mode:13::print_cls:261::memset:440 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [487] (dword~) gfx_init_plane_fill::$0 ← (dword) gfx_init_plane_fill::plane_addr#3 << (byte) 2 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$0 ] ( main:2::gfx_init:10::gfx_init_plane_full:481::gfx_init_plane_fill:484 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$0 ] { { dtvSetCpuBankSegment1::cpuBankIdx#11 = dtvSetCpuBankSegment1::cpuBankIdx#13 gfx_init_plane_fill::gfxbCpuBank#0 } }  main:2::gfx_init:10::gfx_init_plane_blank:479::gfx_init_plane_fill:512 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$0 ] { { dtvSetCpuBankSegment1::cpuBankIdx#11 = dtvSetCpuBankSegment1::cpuBankIdx#13 gfx_init_plane_fill::gfxbCpuBank#0 } }  main:2::gfx_init:10::gfx_init_plane_vertical2:477::gfx_init_plane_fill:515 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$0 ] { { dtvSetCpuBankSegment1::cpuBankIdx#11 = dtvSetCpuBankSegment1::cpuBankIdx#13 gfx_init_plane_fill::gfxbCpuBank#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:62 [ gfx_init_plane_fill::fill#6 ]
Statement [488] (word~) gfx_init_plane_fill::$1 ← > (dword~) gfx_init_plane_fill::$0 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$1 ] ( main:2::gfx_init:10::gfx_init_plane_full:481::gfx_init_plane_fill:484 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$1 ] { { dtvSetCpuBankSegment1::cpuBankIdx#11 = dtvSetCpuBankSegment1::cpuBankIdx#13 gfx_init_plane_fill::gfxbCpuBank#0 } }  main:2::gfx_init:10::gfx_init_plane_blank:479::gfx_init_plane_fill:512 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$1 ] { { dtvSetCpuBankSegment1::cpuBankIdx#11 = dtvSetCpuBankSegment1::cpuBankIdx#13 gfx_init_plane_fill::gfxbCpuBank#0 } }  main:2::gfx_init:10::gfx_init_plane_vertical2:477::gfx_init_plane_fill:515 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$1 ] { { dtvSetCpuBankSegment1::cpuBankIdx#11 = dtvSetCpuBankSegment1::cpuBankIdx#13 gfx_init_plane_fill::gfxbCpuBank#0 } }  ) always clobbers reg byte a 
Statement [492] (word~) gfx_init_plane_fill::$4 ← < (dword) gfx_init_plane_fill::plane_addr#3 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$4 ] ( main:2::gfx_init:10::gfx_init_plane_full:481::gfx_init_plane_fill:484 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$4 ] { }  main:2::gfx_init:10::gfx_init_plane_blank:479::gfx_init_plane_fill:512 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$4 ] { }  main:2::gfx_init:10::gfx_init_plane_vertical2:477::gfx_init_plane_fill:515 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$4 ] { }  ) always clobbers reg byte a 
Statement [493] (word~) gfx_init_plane_fill::$5 ← (word~) gfx_init_plane_fill::$4 & (word) $3fff [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$5 ] ( main:2::gfx_init:10::gfx_init_plane_full:481::gfx_init_plane_fill:484 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$5 ] { }  main:2::gfx_init:10::gfx_init_plane_blank:479::gfx_init_plane_fill:512 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$5 ] { }  main:2::gfx_init:10::gfx_init_plane_vertical2:477::gfx_init_plane_fill:515 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$5 ] { }  ) always clobbers reg byte a 
Statement [494] (word) gfx_init_plane_fill::gfxb#0 ← (word) $4000 + (word~) gfx_init_plane_fill::$5 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#0 ] ( main:2::gfx_init:10::gfx_init_plane_full:481::gfx_init_plane_fill:484 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#0 ] { }  main:2::gfx_init:10::gfx_init_plane_blank:479::gfx_init_plane_fill:512 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#0 ] { }  main:2::gfx_init:10::gfx_init_plane_vertical2:477::gfx_init_plane_fill:515 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#0 ] { }  ) always clobbers reg byte a 
Statement [495] (byte*) gfx_init_plane_fill::gfxb#6 ← (byte*)(word) gfx_init_plane_fill::gfxb#0 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#6 ] ( main:2::gfx_init:10::gfx_init_plane_full:481::gfx_init_plane_fill:484 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#6 ] { }  main:2::gfx_init:10::gfx_init_plane_blank:479::gfx_init_plane_fill:512 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#6 ] { }  main:2::gfx_init:10::gfx_init_plane_vertical2:477::gfx_init_plane_fill:515 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#6 ] { }  ) always clobbers reg byte a 
Statement [498] *((byte*) gfx_init_plane_fill::gfxb#2) ← (byte) gfx_init_plane_fill::fill#6 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::by#4 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::bx#2 ] ( main:2::gfx_init:10::gfx_init_plane_full:481::gfx_init_plane_fill:484 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::by#4 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::bx#2 ] { }  main:2::gfx_init:10::gfx_init_plane_blank:479::gfx_init_plane_fill:512 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::by#4 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::bx#2 ] { }  main:2::gfx_init:10::gfx_init_plane_vertical2:477::gfx_init_plane_fill:515 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::by#4 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::bx#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:62 [ gfx_init_plane_fill::fill#6 ]
Removing always clobbered register reg byte a as potential for zp[1]:63 [ gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:63 [ gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:66 [ gfx_init_plane_fill::bx#2 gfx_init_plane_fill::bx#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:66 [ gfx_init_plane_fill::bx#2 gfx_init_plane_fill::bx#1 ]
Statement asm { .byte$32,$dd lda$ff .byte$32,$00  } always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:90 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:93 [ gfx_init_plane_8bppchunky::gfxbCpuBank#4 gfx_init_plane_8bppchunky::gfxbCpuBank#7 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::gfxbCpuBank#2 ]
Statement [521] (byte~) gfx_init_plane_horisontal2::$2 ← (byte) gfx_init_plane_horisontal2::ay#4 >> (byte) 1 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::$2 ] ( main:2::gfx_init:10::gfx_init_plane_horisontal2:475 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::$2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:68 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:71 [ gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::ax#1 ]
Statement [523] *((byte*) gfx_init_plane_horisontal2::gfxa#2) ← *((const byte*) gfx_init_plane_horisontal2::row_bitmask + (byte) gfx_init_plane_horisontal2::row#0) [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::ax#2 ] ( main:2::gfx_init:10::gfx_init_plane_horisontal2:475 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::ax#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:68 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:71 [ gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::ax#1 ]
Statement [536] *((byte*) gfx_init_plane_vertical::gfxb#2) ← (byte) $f [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::bx#2 ] ( main:2::gfx_init:10::gfx_init_plane_vertical:473 [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::bx#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:72 [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:72 [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:75 [ gfx_init_plane_vertical::bx#2 gfx_init_plane_vertical::bx#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:75 [ gfx_init_plane_vertical::bx#2 gfx_init_plane_vertical::bx#1 ]
Statement [551] *((byte*) gfx_init_plane_horisontal::gfxa#3) ← (byte) $ff [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::ax#2 ] ( main:2::gfx_init:10::gfx_init_plane_horisontal:471 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::ax#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:76 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:76 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:79 [ gfx_init_plane_horisontal::ax#2 gfx_init_plane_horisontal::ax#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:79 [ gfx_init_plane_horisontal::ax#2 gfx_init_plane_horisontal::ax#1 ]
Statement [561] *((byte*) gfx_init_plane_horisontal::gfxa#3) ← (byte) 0 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::ax#2 ] ( main:2::gfx_init:10::gfx_init_plane_horisontal:471 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::ax#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [565] *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_RAM_CHARROM [ ] ( main:2::gfx_init:10::gfx_init_plane_charset8:469 [ ] { }  ) always clobbers reg byte a 
Statement [568] (byte) gfx_init_plane_charset8::bits#0 ← *((byte*) gfx_init_plane_charset8::chargen#2) [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::bits#0 ] ( main:2::gfx_init:10::gfx_init_plane_charset8:469 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::bits#0 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:80 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:80 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:87 [ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:87 [ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:83 [ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:83 [ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ]
Statement [575] *((byte*) gfx_init_plane_charset8::gfxa#2) ← (byte) gfx_init_plane_charset8::c#2 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::chargen#1 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::cp#2 ] ( main:2::gfx_init:10::gfx_init_plane_charset8:469 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::chargen#1 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::cp#2 ] { }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:84 [ gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:88 [ gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::cp#1 ]
Statement [585] *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_RAM_IO [ ] ( main:2::gfx_init:10::gfx_init_plane_charset8:469 [ ] { }  ) always clobbers reg byte a 
Statement [592] if((byte*) gfx_init_plane_8bppchunky::gfxb#3!=(word) $8000) goto gfx_init_plane_8bppchunky::@3 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxbCpuBank#4 ] ( main:2::gfx_init:10::gfx_init_plane_8bppchunky:467 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxbCpuBank#4 ] { }  ) always clobbers reg byte a 
Statement [597] (word~) gfx_init_plane_8bppchunky::$5 ← (word) gfx_init_plane_8bppchunky::x#2 + (byte) gfx_init_plane_8bppchunky::y#6 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::$5 ] ( main:2::gfx_init:10::gfx_init_plane_8bppchunky:467 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::$5 ] { }  ) always clobbers reg byte a 
Statement [598] (byte) gfx_init_plane_8bppchunky::c#0 ← (byte)(word~) gfx_init_plane_8bppchunky::$5 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::c#0 ] ( main:2::gfx_init:10::gfx_init_plane_8bppchunky:467 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::c#0 ] { }  ) always clobbers reg byte a 
Statement [599] *((byte*) gfx_init_plane_8bppchunky::gfxb#4) ← (byte) gfx_init_plane_8bppchunky::c#0 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 ] ( main:2::gfx_init:10::gfx_init_plane_8bppchunky:467 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 ] { }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:90 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:93 [ gfx_init_plane_8bppchunky::gfxbCpuBank#4 gfx_init_plane_8bppchunky::gfxbCpuBank#7 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::gfxbCpuBank#2 ]
Statement [602] if((word) gfx_init_plane_8bppchunky::x#1!=(word) $140) goto gfx_init_plane_8bppchunky::@2 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxb#1 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#1 ] ( main:2::gfx_init:10::gfx_init_plane_8bppchunky:467 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxb#1 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#1 ] { }  ) always clobbers reg byte a 
Statement [622] (byte) bitmap_line::xd#2 ← (byte) bitmap_line::x0#0 - (byte) bitmap_line::x1#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619 [ gfx_init_vic_bitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:96 [ gfx_init_vic_bitmap::l#2 gfx_init_vic_bitmap::l#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:307 [ bitmap_line::x0#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:308 [ bitmap_line::x1#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:309 [ bitmap_line::y0#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:310 [ bitmap_line::y1#0 ]
Statement [624] (byte) bitmap_line::yd#2 ← (byte) bitmap_line::y0#0 - (byte) bitmap_line::y1#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 bitmap_line::yd#2 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619 [ gfx_init_vic_bitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 bitmap_line::yd#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:311 [ bitmap_line::xd#2 ]
Statement [639] (byte) bitmap_line::yd#1 ← (byte) bitmap_line::y1#0 - (byte) bitmap_line::y0#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 bitmap_line::yd#1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619 [ gfx_init_vic_bitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 bitmap_line::yd#1 ] { }  ) always clobbers reg byte a 
Statement [653] (byte) bitmap_line::xd#1 ← (byte) bitmap_line::x1#0 - (byte) bitmap_line::x0#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619 [ gfx_init_vic_bitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 ] { }  ) always clobbers reg byte a 
Statement [655] (byte) bitmap_line::yd#10 ← (byte) bitmap_line::y0#0 - (byte) bitmap_line::y1#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 bitmap_line::yd#10 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619 [ gfx_init_vic_bitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 bitmap_line::yd#10 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:314 [ bitmap_line::xd#1 ]
Statement [669] (byte) bitmap_line::yd#11 ← (byte) bitmap_line::y1#0 - (byte) bitmap_line::y0#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 bitmap_line::yd#11 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619 [ gfx_init_vic_bitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 bitmap_line::yd#11 ] { }  ) always clobbers reg byte a 
Statement [684] (byte) bitmap_line_xdyi::e#0 ← (byte) bitmap_line_xdyi::yd#2 >> (byte) 1 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::x#6 bitmap_line_xdyi::y#5 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::e#0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyi:638 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::x#6 bitmap_line_xdyi::y#5 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::e#0 ] { { bitmap_line_xdyi::yd#0 = bitmap_line_xdyi::yd#2 bitmap_line::yd#2 } { bitmap_line_xdyi::x#0 = bitmap_line_xdyi::x#6 bitmap_line::x1#0 } { bitmap_line_xdyi::y#0 = bitmap_line_xdyi::y#5 bitmap_line::y1#0 } { bitmap_line_xdyi::xd#0 = bitmap_line_xdyi::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyi::x1#0 = bitmap_line_xdyi::x1#6 bitmap_line::x0#0 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyi:682 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::x#6 bitmap_line_xdyi::y#5 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::e#0 ] { { bitmap_line_xdyi::yd#1 = bitmap_line_xdyi::yd#2 bitmap_line::yd#11 } { bitmap_line_xdyi::x#1 = bitmap_line_xdyi::x#6 bitmap_line::x0#0 } { bitmap_line_xdyi::y#1 = bitmap_line_xdyi::y#5 bitmap_line::y0#0 } { bitmap_line_xdyi::xd#1 = bitmap_line_xdyi::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyi::x1#1 = bitmap_line_xdyi::x1#6 bitmap_line::x1#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:97 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:100 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:101 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:99 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 ]
Statement [690] (byte) bitmap_line_xdyi::e#1 ← (byte) bitmap_line_xdyi::e#3 + (byte) bitmap_line_xdyi::yd#2 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::y#3 bitmap_line_xdyi::x#2 bitmap_line_xdyi::e#1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyi:638 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::y#3 bitmap_line_xdyi::x#2 bitmap_line_xdyi::e#1 ] { { bitmap_line_xdyi::yd#0 = bitmap_line_xdyi::yd#2 bitmap_line::yd#2 } { bitmap_line_xdyi::x#0 = bitmap_line_xdyi::x#6 bitmap_line::x1#0 } { bitmap_line_xdyi::y#0 = bitmap_line_xdyi::y#5 bitmap_line::y1#0 } { bitmap_line_xdyi::xd#0 = bitmap_line_xdyi::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyi::x1#0 = bitmap_line_xdyi::x1#6 bitmap_line::x0#0 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyi:682 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::y#3 bitmap_line_xdyi::x#2 bitmap_line_xdyi::e#1 ] { { bitmap_line_xdyi::yd#1 = bitmap_line_xdyi::yd#2 bitmap_line::yd#11 } { bitmap_line_xdyi::x#1 = bitmap_line_xdyi::x#6 bitmap_line::x0#0 } { bitmap_line_xdyi::y#1 = bitmap_line_xdyi::y#5 bitmap_line::y0#0 } { bitmap_line_xdyi::xd#1 = bitmap_line_xdyi::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyi::x1#1 = bitmap_line_xdyi::x1#6 bitmap_line::x1#0 } }  ) always clobbers reg byte a 
Statement [693] (byte) bitmap_line_xdyi::e#2 ← (byte) bitmap_line_xdyi::e#1 - (byte) bitmap_line_xdyi::xd#5 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#2 bitmap_line_xdyi::y#2 bitmap_line_xdyi::e#2 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyi:638 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#2 bitmap_line_xdyi::y#2 bitmap_line_xdyi::e#2 ] { { bitmap_line_xdyi::yd#0 = bitmap_line_xdyi::yd#2 bitmap_line::yd#2 } { bitmap_line_xdyi::x#0 = bitmap_line_xdyi::x#6 bitmap_line::x1#0 } { bitmap_line_xdyi::y#0 = bitmap_line_xdyi::y#5 bitmap_line::y1#0 } { bitmap_line_xdyi::xd#0 = bitmap_line_xdyi::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyi::x1#0 = bitmap_line_xdyi::x1#6 bitmap_line::x0#0 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyi:682 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#2 bitmap_line_xdyi::y#2 bitmap_line_xdyi::e#2 ] { { bitmap_line_xdyi::yd#1 = bitmap_line_xdyi::yd#2 bitmap_line::yd#11 } { bitmap_line_xdyi::x#1 = bitmap_line_xdyi::x#6 bitmap_line::x0#0 } { bitmap_line_xdyi::y#1 = bitmap_line_xdyi::y#5 bitmap_line::y0#0 } { bitmap_line_xdyi::xd#1 = bitmap_line_xdyi::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyi::x1#1 = bitmap_line_xdyi::x1#6 bitmap_line::x1#0 } }  ) always clobbers reg byte a 
Statement [699] (word) bitmap_plot::plotter_x#0 ← *((const to_nomodify byte*) bitmap_plot_xhi + (byte) bitmap_plot::x#4) w= *((const to_nomodify byte*) bitmap_plot_xlo + (byte) bitmap_plot::x#4) [ bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyi:638::bitmap_plot:688 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] { { bitmap_line_xdyi::yd#0 = bitmap_line_xdyi::yd#2 bitmap_line::yd#2 } { bitmap_line_xdyi::x#0 = bitmap_line_xdyi::x#6 bitmap_line::x1#0 } { bitmap_line_xdyi::y#0 = bitmap_line_xdyi::y#5 bitmap_line::y1#0 } { bitmap_line_xdyi::xd#0 = bitmap_line_xdyi::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyi::x1#0 = bitmap_line_xdyi::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyi:682::bitmap_plot:688 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] { { bitmap_line_xdyi::yd#1 = bitmap_line_xdyi::yd#2 bitmap_line::yd#11 } { bitmap_line_xdyi::x#1 = bitmap_line_xdyi::x#6 bitmap_line::x0#0 } { bitmap_line_xdyi::y#1 = bitmap_line_xdyi::y#5 bitmap_line::y0#0 } { bitmap_line_xdyi::xd#1 = bitmap_line_xdyi::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyi::x1#1 = bitmap_line_xdyi::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxi:631::bitmap_plot:710 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] { { bitmap_line_ydxi::xd#0 = bitmap_line_ydxi::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxi::x#0 = bitmap_line_ydxi::x#5 bitmap_line::x1#0 } { bitmap_line_ydxi::y#0 = bitmap_line_ydxi::y#6 bitmap_line::y1#0 } { bitmap_line_ydxi::yd#0 = bitmap_line_ydxi::yd#5 bitmap_line::yd#2 } { bitmap_line_ydxi::y1#0 = bitmap_line_ydxi::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxi:676::bitmap_plot:710 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] { { bitmap_line_ydxi::xd#1 = bitmap_line_ydxi::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxi::x#1 = bitmap_line_ydxi::x#5 bitmap_line::x0#0 } { bitmap_line_ydxi::y#1 = bitmap_line_ydxi::y#6 bitmap_line::y0#0 } { bitmap_line_ydxi::yd#1 = bitmap_line_ydxi::yd#5 bitmap_line::yd#11 } { bitmap_line_ydxi::y1#1 = bitmap_line_ydxi::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyd:652::bitmap_plot:725 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] { { bitmap_line_xdyd::yd#0 = bitmap_line_xdyd::yd#2 bitmap_line::yd#1 } { bitmap_line_xdyd::x#0 = bitmap_line_xdyd::x#6 bitmap_line::x1#0 } { bitmap_line_xdyd::y#0 = bitmap_line_xdyd::y#5 bitmap_line::y1#0 } { bitmap_line_xdyd::xd#0 = bitmap_line_xdyd::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyd::x1#0 = bitmap_line_xdyd::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyd:668::bitmap_plot:725 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] { { bitmap_line_xdyd::yd#1 = bitmap_line_xdyd::yd#2 bitmap_line::yd#10 } { bitmap_line_xdyd::x#1 = bitmap_line_xdyd::x#6 bitmap_line::x0#0 } { bitmap_line_xdyd::y#1 = bitmap_line_xdyd::y#5 bitmap_line::y0#0 } { bitmap_line_xdyd::xd#1 = bitmap_line_xdyd::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyd::x1#1 = bitmap_line_xdyd::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxd:646::bitmap_plot:740 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] { { bitmap_line_ydxd::xd#0 = bitmap_line_ydxd::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxd::x#0 = bitmap_line_ydxd::x#5 bitmap_line::x0#0 } { bitmap_line_ydxd::y#0 = bitmap_line_ydxd::y#7 bitmap_line::y0#0 } { bitmap_line_ydxd::yd#0 = bitmap_line_ydxd::yd#5 bitmap_line::yd#1 } { bitmap_line_ydxd::y1#0 = bitmap_line_ydxd::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxd:662::bitmap_plot:740 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] { { bitmap_line_ydxd::xd#1 = bitmap_line_ydxd::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxd::x#1 = bitmap_line_ydxd::x#5 bitmap_line::x1#0 } { bitmap_line_ydxd::y#1 = bitmap_line_ydxd::y#7 bitmap_line::y1#0 } { bitmap_line_ydxd::yd#1 = bitmap_line_ydxd::yd#5 bitmap_line::yd#10 } { bitmap_line_ydxd::y1#1 = bitmap_line_ydxd::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:102 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:103 [ bitmap_plot::x#4 bitmap_plot::x#1 bitmap_plot::x#0 bitmap_plot::x#3 bitmap_plot::x#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:104 [ bitmap_plot::y#4 bitmap_plot::y#1 bitmap_plot::y#0 bitmap_plot::y#3 bitmap_plot::y#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:105 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:106 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:107 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:108 [ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:109 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:110 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:111 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:112 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:113 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:114 [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:115 [ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:116 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:117 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:118 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:119 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:120 [ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:121 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ]
Removing always clobbered register reg byte a as potential for zp[1]:122 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ]
Statement [700] (word) bitmap_plot::plotter_y#0 ← *((const to_nomodify byte*) bitmap_plot_yhi + (byte) bitmap_plot::y#4) w= *((const to_nomodify byte*) bitmap_plot_ylo + (byte) bitmap_plot::y#4) [ bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyi:638::bitmap_plot:688 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] { { bitmap_line_xdyi::yd#0 = bitmap_line_xdyi::yd#2 bitmap_line::yd#2 } { bitmap_line_xdyi::x#0 = bitmap_line_xdyi::x#6 bitmap_line::x1#0 } { bitmap_line_xdyi::y#0 = bitmap_line_xdyi::y#5 bitmap_line::y1#0 } { bitmap_line_xdyi::xd#0 = bitmap_line_xdyi::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyi::x1#0 = bitmap_line_xdyi::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyi:682::bitmap_plot:688 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] { { bitmap_line_xdyi::yd#1 = bitmap_line_xdyi::yd#2 bitmap_line::yd#11 } { bitmap_line_xdyi::x#1 = bitmap_line_xdyi::x#6 bitmap_line::x0#0 } { bitmap_line_xdyi::y#1 = bitmap_line_xdyi::y#5 bitmap_line::y0#0 } { bitmap_line_xdyi::xd#1 = bitmap_line_xdyi::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyi::x1#1 = bitmap_line_xdyi::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxi:631::bitmap_plot:710 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] { { bitmap_line_ydxi::xd#0 = bitmap_line_ydxi::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxi::x#0 = bitmap_line_ydxi::x#5 bitmap_line::x1#0 } { bitmap_line_ydxi::y#0 = bitmap_line_ydxi::y#6 bitmap_line::y1#0 } { bitmap_line_ydxi::yd#0 = bitmap_line_ydxi::yd#5 bitmap_line::yd#2 } { bitmap_line_ydxi::y1#0 = bitmap_line_ydxi::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxi:676::bitmap_plot:710 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] { { bitmap_line_ydxi::xd#1 = bitmap_line_ydxi::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxi::x#1 = bitmap_line_ydxi::x#5 bitmap_line::x0#0 } { bitmap_line_ydxi::y#1 = bitmap_line_ydxi::y#6 bitmap_line::y0#0 } { bitmap_line_ydxi::yd#1 = bitmap_line_ydxi::yd#5 bitmap_line::yd#11 } { bitmap_line_ydxi::y1#1 = bitmap_line_ydxi::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyd:652::bitmap_plot:725 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] { { bitmap_line_xdyd::yd#0 = bitmap_line_xdyd::yd#2 bitmap_line::yd#1 } { bitmap_line_xdyd::x#0 = bitmap_line_xdyd::x#6 bitmap_line::x1#0 } { bitmap_line_xdyd::y#0 = bitmap_line_xdyd::y#5 bitmap_line::y1#0 } { bitmap_line_xdyd::xd#0 = bitmap_line_xdyd::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyd::x1#0 = bitmap_line_xdyd::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyd:668::bitmap_plot:725 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] { { bitmap_line_xdyd::yd#1 = bitmap_line_xdyd::yd#2 bitmap_line::yd#10 } { bitmap_line_xdyd::x#1 = bitmap_line_xdyd::x#6 bitmap_line::x0#0 } { bitmap_line_xdyd::y#1 = bitmap_line_xdyd::y#5 bitmap_line::y0#0 } { bitmap_line_xdyd::xd#1 = bitmap_line_xdyd::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyd::x1#1 = bitmap_line_xdyd::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxd:646::bitmap_plot:740 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] { { bitmap_line_ydxd::xd#0 = bitmap_line_ydxd::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxd::x#0 = bitmap_line_ydxd::x#5 bitmap_line::x0#0 } { bitmap_line_ydxd::y#0 = bitmap_line_ydxd::y#7 bitmap_line::y0#0 } { bitmap_line_ydxd::yd#0 = bitmap_line_ydxd::yd#5 bitmap_line::yd#1 } { bitmap_line_ydxd::y1#0 = bitmap_line_ydxd::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxd:662::bitmap_plot:740 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] { { bitmap_line_ydxd::xd#1 = bitmap_line_ydxd::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxd::x#1 = bitmap_line_ydxd::x#5 bitmap_line::x1#0 } { bitmap_line_ydxd::y#1 = bitmap_line_ydxd::y#7 bitmap_line::y1#0 } { bitmap_line_ydxd::yd#1 = bitmap_line_ydxd::yd#5 bitmap_line::yd#10 } { bitmap_line_ydxd::y1#1 = bitmap_line_ydxd::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  ) always clobbers reg byte a 
Statement [701] (word) bitmap_plot::plotter#0 ← (word) bitmap_plot::plotter_x#0 + (word) bitmap_plot::plotter_y#0 [ bitmap_plot::x#4 bitmap_plot::plotter#0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyi:638::bitmap_plot:688 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_line_xdyi::yd#0 = bitmap_line_xdyi::yd#2 bitmap_line::yd#2 } { bitmap_line_xdyi::x#0 = bitmap_line_xdyi::x#6 bitmap_line::x1#0 } { bitmap_line_xdyi::y#0 = bitmap_line_xdyi::y#5 bitmap_line::y1#0 } { bitmap_line_xdyi::xd#0 = bitmap_line_xdyi::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyi::x1#0 = bitmap_line_xdyi::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyi:682::bitmap_plot:688 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_line_xdyi::yd#1 = bitmap_line_xdyi::yd#2 bitmap_line::yd#11 } { bitmap_line_xdyi::x#1 = bitmap_line_xdyi::x#6 bitmap_line::x0#0 } { bitmap_line_xdyi::y#1 = bitmap_line_xdyi::y#5 bitmap_line::y0#0 } { bitmap_line_xdyi::xd#1 = bitmap_line_xdyi::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyi::x1#1 = bitmap_line_xdyi::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxi:631::bitmap_plot:710 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_line_ydxi::xd#0 = bitmap_line_ydxi::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxi::x#0 = bitmap_line_ydxi::x#5 bitmap_line::x1#0 } { bitmap_line_ydxi::y#0 = bitmap_line_ydxi::y#6 bitmap_line::y1#0 } { bitmap_line_ydxi::yd#0 = bitmap_line_ydxi::yd#5 bitmap_line::yd#2 } { bitmap_line_ydxi::y1#0 = bitmap_line_ydxi::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxi:676::bitmap_plot:710 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_line_ydxi::xd#1 = bitmap_line_ydxi::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxi::x#1 = bitmap_line_ydxi::x#5 bitmap_line::x0#0 } { bitmap_line_ydxi::y#1 = bitmap_line_ydxi::y#6 bitmap_line::y0#0 } { bitmap_line_ydxi::yd#1 = bitmap_line_ydxi::yd#5 bitmap_line::yd#11 } { bitmap_line_ydxi::y1#1 = bitmap_line_ydxi::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyd:652::bitmap_plot:725 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_line_xdyd::yd#0 = bitmap_line_xdyd::yd#2 bitmap_line::yd#1 } { bitmap_line_xdyd::x#0 = bitmap_line_xdyd::x#6 bitmap_line::x1#0 } { bitmap_line_xdyd::y#0 = bitmap_line_xdyd::y#5 bitmap_line::y1#0 } { bitmap_line_xdyd::xd#0 = bitmap_line_xdyd::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyd::x1#0 = bitmap_line_xdyd::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyd:668::bitmap_plot:725 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_line_xdyd::yd#1 = bitmap_line_xdyd::yd#2 bitmap_line::yd#10 } { bitmap_line_xdyd::x#1 = bitmap_line_xdyd::x#6 bitmap_line::x0#0 } { bitmap_line_xdyd::y#1 = bitmap_line_xdyd::y#5 bitmap_line::y0#0 } { bitmap_line_xdyd::xd#1 = bitmap_line_xdyd::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyd::x1#1 = bitmap_line_xdyd::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxd:646::bitmap_plot:740 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_line_ydxd::xd#0 = bitmap_line_ydxd::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxd::x#0 = bitmap_line_ydxd::x#5 bitmap_line::x0#0 } { bitmap_line_ydxd::y#0 = bitmap_line_ydxd::y#7 bitmap_line::y0#0 } { bitmap_line_ydxd::yd#0 = bitmap_line_ydxd::yd#5 bitmap_line::yd#1 } { bitmap_line_ydxd::y1#0 = bitmap_line_ydxd::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxd:662::bitmap_plot:740 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_line_ydxd::xd#1 = bitmap_line_ydxd::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxd::x#1 = bitmap_line_ydxd::x#5 bitmap_line::x1#0 } { bitmap_line_ydxd::y#1 = bitmap_line_ydxd::y#7 bitmap_line::y1#0 } { bitmap_line_ydxd::yd#1 = bitmap_line_ydxd::yd#5 bitmap_line::yd#10 } { bitmap_line_ydxd::y1#1 = bitmap_line_ydxd::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  ) always clobbers reg byte a 
Statement [702] (byte~) bitmap_plot::$1 ← *((byte*)(word) bitmap_plot::plotter#0) | *((const to_nomodify byte*) bitmap_plot_bit + (byte) bitmap_plot::x#4) [ bitmap_plot::plotter#0 bitmap_plot::$1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyi:638::bitmap_plot:688 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] { { bitmap_line_xdyi::yd#0 = bitmap_line_xdyi::yd#2 bitmap_line::yd#2 } { bitmap_line_xdyi::x#0 = bitmap_line_xdyi::x#6 bitmap_line::x1#0 } { bitmap_line_xdyi::y#0 = bitmap_line_xdyi::y#5 bitmap_line::y1#0 } { bitmap_line_xdyi::xd#0 = bitmap_line_xdyi::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyi::x1#0 = bitmap_line_xdyi::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyi:682::bitmap_plot:688 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] { { bitmap_line_xdyi::yd#1 = bitmap_line_xdyi::yd#2 bitmap_line::yd#11 } { bitmap_line_xdyi::x#1 = bitmap_line_xdyi::x#6 bitmap_line::x0#0 } { bitmap_line_xdyi::y#1 = bitmap_line_xdyi::y#5 bitmap_line::y0#0 } { bitmap_line_xdyi::xd#1 = bitmap_line_xdyi::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyi::x1#1 = bitmap_line_xdyi::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxi:631::bitmap_plot:710 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] { { bitmap_line_ydxi::xd#0 = bitmap_line_ydxi::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxi::x#0 = bitmap_line_ydxi::x#5 bitmap_line::x1#0 } { bitmap_line_ydxi::y#0 = bitmap_line_ydxi::y#6 bitmap_line::y1#0 } { bitmap_line_ydxi::yd#0 = bitmap_line_ydxi::yd#5 bitmap_line::yd#2 } { bitmap_line_ydxi::y1#0 = bitmap_line_ydxi::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxi:676::bitmap_plot:710 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] { { bitmap_line_ydxi::xd#1 = bitmap_line_ydxi::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxi::x#1 = bitmap_line_ydxi::x#5 bitmap_line::x0#0 } { bitmap_line_ydxi::y#1 = bitmap_line_ydxi::y#6 bitmap_line::y0#0 } { bitmap_line_ydxi::yd#1 = bitmap_line_ydxi::yd#5 bitmap_line::yd#11 } { bitmap_line_ydxi::y1#1 = bitmap_line_ydxi::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyd:652::bitmap_plot:725 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] { { bitmap_line_xdyd::yd#0 = bitmap_line_xdyd::yd#2 bitmap_line::yd#1 } { bitmap_line_xdyd::x#0 = bitmap_line_xdyd::x#6 bitmap_line::x1#0 } { bitmap_line_xdyd::y#0 = bitmap_line_xdyd::y#5 bitmap_line::y1#0 } { bitmap_line_xdyd::xd#0 = bitmap_line_xdyd::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyd::x1#0 = bitmap_line_xdyd::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyd:668::bitmap_plot:725 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] { { bitmap_line_xdyd::yd#1 = bitmap_line_xdyd::yd#2 bitmap_line::yd#10 } { bitmap_line_xdyd::x#1 = bitmap_line_xdyd::x#6 bitmap_line::x0#0 } { bitmap_line_xdyd::y#1 = bitmap_line_xdyd::y#5 bitmap_line::y0#0 } { bitmap_line_xdyd::xd#1 = bitmap_line_xdyd::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyd::x1#1 = bitmap_line_xdyd::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxd:646::bitmap_plot:740 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] { { bitmap_line_ydxd::xd#0 = bitmap_line_ydxd::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxd::x#0 = bitmap_line_ydxd::x#5 bitmap_line::x0#0 } { bitmap_line_ydxd::y#0 = bitmap_line_ydxd::y#7 bitmap_line::y0#0 } { bitmap_line_ydxd::yd#0 = bitmap_line_ydxd::yd#5 bitmap_line::yd#1 } { bitmap_line_ydxd::y1#0 = bitmap_line_ydxd::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxd:662::bitmap_plot:740 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] { { bitmap_line_ydxd::xd#1 = bitmap_line_ydxd::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxd::x#1 = bitmap_line_ydxd::x#5 bitmap_line::x1#0 } { bitmap_line_ydxd::y#1 = bitmap_line_ydxd::y#7 bitmap_line::y1#0 } { bitmap_line_ydxd::yd#1 = bitmap_line_ydxd::yd#5 bitmap_line::yd#10 } { bitmap_line_ydxd::y1#1 = bitmap_line_ydxd::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:96 [ gfx_init_vic_bitmap::l#2 gfx_init_vic_bitmap::l#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:97 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:99 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:100 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 ]
Removing always clobbered register reg byte y as potential for zp[1]:101 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ]
Removing always clobbered register reg byte y as potential for zp[1]:102 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:105 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:106 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:107 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:108 [ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ]
Removing always clobbered register reg byte y as potential for zp[1]:109 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ]
Removing always clobbered register reg byte y as potential for zp[1]:110 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:111 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:112 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:113 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:114 [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 ]
Removing always clobbered register reg byte y as potential for zp[1]:115 [ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ]
Removing always clobbered register reg byte y as potential for zp[1]:116 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:117 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:118 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:119 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:120 [ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ]
Removing always clobbered register reg byte y as potential for zp[1]:121 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ]
Removing always clobbered register reg byte y as potential for zp[1]:122 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ]
Statement [703] *((byte*)(word) bitmap_plot::plotter#0) ← (byte~) bitmap_plot::$1 [ ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyi:638::bitmap_plot:688 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 ] { { bitmap_line_xdyi::yd#0 = bitmap_line_xdyi::yd#2 bitmap_line::yd#2 } { bitmap_line_xdyi::x#0 = bitmap_line_xdyi::x#6 bitmap_line::x1#0 } { bitmap_line_xdyi::y#0 = bitmap_line_xdyi::y#5 bitmap_line::y1#0 } { bitmap_line_xdyi::xd#0 = bitmap_line_xdyi::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyi::x1#0 = bitmap_line_xdyi::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyi:682::bitmap_plot:688 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 ] { { bitmap_line_xdyi::yd#1 = bitmap_line_xdyi::yd#2 bitmap_line::yd#11 } { bitmap_line_xdyi::x#1 = bitmap_line_xdyi::x#6 bitmap_line::x0#0 } { bitmap_line_xdyi::y#1 = bitmap_line_xdyi::y#5 bitmap_line::y0#0 } { bitmap_line_xdyi::xd#1 = bitmap_line_xdyi::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyi::x1#1 = bitmap_line_xdyi::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxi:631::bitmap_plot:710 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 ] { { bitmap_line_ydxi::xd#0 = bitmap_line_ydxi::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxi::x#0 = bitmap_line_ydxi::x#5 bitmap_line::x1#0 } { bitmap_line_ydxi::y#0 = bitmap_line_ydxi::y#6 bitmap_line::y1#0 } { bitmap_line_ydxi::yd#0 = bitmap_line_ydxi::yd#5 bitmap_line::yd#2 } { bitmap_line_ydxi::y1#0 = bitmap_line_ydxi::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxi:676::bitmap_plot:710 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 ] { { bitmap_line_ydxi::xd#1 = bitmap_line_ydxi::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxi::x#1 = bitmap_line_ydxi::x#5 bitmap_line::x0#0 } { bitmap_line_ydxi::y#1 = bitmap_line_ydxi::y#6 bitmap_line::y0#0 } { bitmap_line_ydxi::yd#1 = bitmap_line_ydxi::yd#5 bitmap_line::yd#11 } { bitmap_line_ydxi::y1#1 = bitmap_line_ydxi::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyd:652::bitmap_plot:725 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 ] { { bitmap_line_xdyd::yd#0 = bitmap_line_xdyd::yd#2 bitmap_line::yd#1 } { bitmap_line_xdyd::x#0 = bitmap_line_xdyd::x#6 bitmap_line::x1#0 } { bitmap_line_xdyd::y#0 = bitmap_line_xdyd::y#5 bitmap_line::y1#0 } { bitmap_line_xdyd::xd#0 = bitmap_line_xdyd::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyd::x1#0 = bitmap_line_xdyd::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyd:668::bitmap_plot:725 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 ] { { bitmap_line_xdyd::yd#1 = bitmap_line_xdyd::yd#2 bitmap_line::yd#10 } { bitmap_line_xdyd::x#1 = bitmap_line_xdyd::x#6 bitmap_line::x0#0 } { bitmap_line_xdyd::y#1 = bitmap_line_xdyd::y#5 bitmap_line::y0#0 } { bitmap_line_xdyd::xd#1 = bitmap_line_xdyd::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyd::x1#1 = bitmap_line_xdyd::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxd:646::bitmap_plot:740 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 ] { { bitmap_line_ydxd::xd#0 = bitmap_line_ydxd::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxd::x#0 = bitmap_line_ydxd::x#5 bitmap_line::x0#0 } { bitmap_line_ydxd::y#0 = bitmap_line_ydxd::y#7 bitmap_line::y0#0 } { bitmap_line_ydxd::yd#0 = bitmap_line_ydxd::yd#5 bitmap_line::yd#1 } { bitmap_line_ydxd::y1#0 = bitmap_line_ydxd::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxd:662::bitmap_plot:740 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 ] { { bitmap_line_ydxd::xd#1 = bitmap_line_ydxd::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxd::x#1 = bitmap_line_ydxd::x#5 bitmap_line::x1#0 } { bitmap_line_ydxd::y#1 = bitmap_line_ydxd::y#7 bitmap_line::y1#0 } { bitmap_line_ydxd::yd#1 = bitmap_line_ydxd::yd#5 bitmap_line::yd#10 } { bitmap_line_ydxd::y1#1 = bitmap_line_ydxd::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  ) always clobbers reg byte y 
Statement [706] (byte) bitmap_line_ydxi::e#0 ← (byte) bitmap_line_ydxi::xd#2 >> (byte) 1 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::x#5 bitmap_line_ydxi::y#6 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::e#0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxi:631 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::x#5 bitmap_line_ydxi::y#6 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::e#0 ] { { bitmap_line_ydxi::xd#0 = bitmap_line_ydxi::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxi::x#0 = bitmap_line_ydxi::x#5 bitmap_line::x1#0 } { bitmap_line_ydxi::y#0 = bitmap_line_ydxi::y#6 bitmap_line::y1#0 } { bitmap_line_ydxi::yd#0 = bitmap_line_ydxi::yd#5 bitmap_line::yd#2 } { bitmap_line_ydxi::y1#0 = bitmap_line_ydxi::y1#6 bitmap_line::y0#0 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxi:676 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::x#5 bitmap_line_ydxi::y#6 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::e#0 ] { { bitmap_line_ydxi::xd#1 = bitmap_line_ydxi::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxi::x#1 = bitmap_line_ydxi::x#5 bitmap_line::x0#0 } { bitmap_line_ydxi::y#1 = bitmap_line_ydxi::y#6 bitmap_line::y0#0 } { bitmap_line_ydxi::yd#1 = bitmap_line_ydxi::yd#5 bitmap_line::yd#11 } { bitmap_line_ydxi::y1#1 = bitmap_line_ydxi::y1#6 bitmap_line::y1#0 } }  ) always clobbers reg byte a 
Statement [712] (byte) bitmap_line_ydxi::e#1 ← (byte) bitmap_line_ydxi::e#3 + (byte) bitmap_line_ydxi::xd#2 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#2 bitmap_line_ydxi::e#1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxi:631 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#2 bitmap_line_ydxi::e#1 ] { { bitmap_line_ydxi::xd#0 = bitmap_line_ydxi::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxi::x#0 = bitmap_line_ydxi::x#5 bitmap_line::x1#0 } { bitmap_line_ydxi::y#0 = bitmap_line_ydxi::y#6 bitmap_line::y1#0 } { bitmap_line_ydxi::yd#0 = bitmap_line_ydxi::yd#5 bitmap_line::yd#2 } { bitmap_line_ydxi::y1#0 = bitmap_line_ydxi::y1#6 bitmap_line::y0#0 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxi:676 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#2 bitmap_line_ydxi::e#1 ] { { bitmap_line_ydxi::xd#1 = bitmap_line_ydxi::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxi::x#1 = bitmap_line_ydxi::x#5 bitmap_line::x0#0 } { bitmap_line_ydxi::y#1 = bitmap_line_ydxi::y#6 bitmap_line::y0#0 } { bitmap_line_ydxi::yd#1 = bitmap_line_ydxi::yd#5 bitmap_line::yd#11 } { bitmap_line_ydxi::y1#1 = bitmap_line_ydxi::y1#6 bitmap_line::y1#0 } }  ) always clobbers reg byte a 
Statement [715] (byte) bitmap_line_ydxi::e#2 ← (byte) bitmap_line_ydxi::e#1 - (byte) bitmap_line_ydxi::yd#5 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y#2 bitmap_line_ydxi::x#2 bitmap_line_ydxi::e#2 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxi:631 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y#2 bitmap_line_ydxi::x#2 bitmap_line_ydxi::e#2 ] { { bitmap_line_ydxi::xd#0 = bitmap_line_ydxi::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxi::x#0 = bitmap_line_ydxi::x#5 bitmap_line::x1#0 } { bitmap_line_ydxi::y#0 = bitmap_line_ydxi::y#6 bitmap_line::y1#0 } { bitmap_line_ydxi::yd#0 = bitmap_line_ydxi::yd#5 bitmap_line::yd#2 } { bitmap_line_ydxi::y1#0 = bitmap_line_ydxi::y1#6 bitmap_line::y0#0 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxi:676 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y#2 bitmap_line_ydxi::x#2 bitmap_line_ydxi::e#2 ] { { bitmap_line_ydxi::xd#1 = bitmap_line_ydxi::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxi::x#1 = bitmap_line_ydxi::x#5 bitmap_line::x0#0 } { bitmap_line_ydxi::y#1 = bitmap_line_ydxi::y#6 bitmap_line::y0#0 } { bitmap_line_ydxi::yd#1 = bitmap_line_ydxi::yd#5 bitmap_line::yd#11 } { bitmap_line_ydxi::y1#1 = bitmap_line_ydxi::y1#6 bitmap_line::y1#0 } }  ) always clobbers reg byte a 
Statement [721] (byte) bitmap_line_xdyd::e#0 ← (byte) bitmap_line_xdyd::yd#2 >> (byte) 1 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::x#6 bitmap_line_xdyd::y#5 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::e#0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyd:652 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::x#6 bitmap_line_xdyd::y#5 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::e#0 ] { { bitmap_line_xdyd::yd#0 = bitmap_line_xdyd::yd#2 bitmap_line::yd#1 } { bitmap_line_xdyd::x#0 = bitmap_line_xdyd::x#6 bitmap_line::x1#0 } { bitmap_line_xdyd::y#0 = bitmap_line_xdyd::y#5 bitmap_line::y1#0 } { bitmap_line_xdyd::xd#0 = bitmap_line_xdyd::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyd::x1#0 = bitmap_line_xdyd::x1#6 bitmap_line::x0#0 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyd:668 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::x#6 bitmap_line_xdyd::y#5 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::e#0 ] { { bitmap_line_xdyd::yd#1 = bitmap_line_xdyd::yd#2 bitmap_line::yd#10 } { bitmap_line_xdyd::x#1 = bitmap_line_xdyd::x#6 bitmap_line::x0#0 } { bitmap_line_xdyd::y#1 = bitmap_line_xdyd::y#5 bitmap_line::y0#0 } { bitmap_line_xdyd::xd#1 = bitmap_line_xdyd::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyd::x1#1 = bitmap_line_xdyd::x1#6 bitmap_line::x1#0 } }  ) always clobbers reg byte a 
Statement [727] (byte) bitmap_line_xdyd::e#1 ← (byte) bitmap_line_xdyd::e#3 + (byte) bitmap_line_xdyd::yd#2 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::y#3 bitmap_line_xdyd::x#2 bitmap_line_xdyd::e#1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyd:652 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::y#3 bitmap_line_xdyd::x#2 bitmap_line_xdyd::e#1 ] { { bitmap_line_xdyd::yd#0 = bitmap_line_xdyd::yd#2 bitmap_line::yd#1 } { bitmap_line_xdyd::x#0 = bitmap_line_xdyd::x#6 bitmap_line::x1#0 } { bitmap_line_xdyd::y#0 = bitmap_line_xdyd::y#5 bitmap_line::y1#0 } { bitmap_line_xdyd::xd#0 = bitmap_line_xdyd::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyd::x1#0 = bitmap_line_xdyd::x1#6 bitmap_line::x0#0 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyd:668 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::y#3 bitmap_line_xdyd::x#2 bitmap_line_xdyd::e#1 ] { { bitmap_line_xdyd::yd#1 = bitmap_line_xdyd::yd#2 bitmap_line::yd#10 } { bitmap_line_xdyd::x#1 = bitmap_line_xdyd::x#6 bitmap_line::x0#0 } { bitmap_line_xdyd::y#1 = bitmap_line_xdyd::y#5 bitmap_line::y0#0 } { bitmap_line_xdyd::xd#1 = bitmap_line_xdyd::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyd::x1#1 = bitmap_line_xdyd::x1#6 bitmap_line::x1#0 } }  ) always clobbers reg byte a 
Statement [730] (byte) bitmap_line_xdyd::e#2 ← (byte) bitmap_line_xdyd::e#1 - (byte) bitmap_line_xdyd::xd#5 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#2 bitmap_line_xdyd::y#2 bitmap_line_xdyd::e#2 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyd:652 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#2 bitmap_line_xdyd::y#2 bitmap_line_xdyd::e#2 ] { { bitmap_line_xdyd::yd#0 = bitmap_line_xdyd::yd#2 bitmap_line::yd#1 } { bitmap_line_xdyd::x#0 = bitmap_line_xdyd::x#6 bitmap_line::x1#0 } { bitmap_line_xdyd::y#0 = bitmap_line_xdyd::y#5 bitmap_line::y1#0 } { bitmap_line_xdyd::xd#0 = bitmap_line_xdyd::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyd::x1#0 = bitmap_line_xdyd::x1#6 bitmap_line::x0#0 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyd:668 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#2 bitmap_line_xdyd::y#2 bitmap_line_xdyd::e#2 ] { { bitmap_line_xdyd::yd#1 = bitmap_line_xdyd::yd#2 bitmap_line::yd#10 } { bitmap_line_xdyd::x#1 = bitmap_line_xdyd::x#6 bitmap_line::x0#0 } { bitmap_line_xdyd::y#1 = bitmap_line_xdyd::y#5 bitmap_line::y0#0 } { bitmap_line_xdyd::xd#1 = bitmap_line_xdyd::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyd::x1#1 = bitmap_line_xdyd::x1#6 bitmap_line::x1#0 } }  ) always clobbers reg byte a 
Statement [736] (byte) bitmap_line_ydxd::e#0 ← (byte) bitmap_line_ydxd::xd#2 >> (byte) 1 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::x#5 bitmap_line_ydxd::y#7 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::e#0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxd:646 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::x#5 bitmap_line_ydxd::y#7 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::e#0 ] { { bitmap_line_ydxd::xd#0 = bitmap_line_ydxd::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxd::x#0 = bitmap_line_ydxd::x#5 bitmap_line::x0#0 } { bitmap_line_ydxd::y#0 = bitmap_line_ydxd::y#7 bitmap_line::y0#0 } { bitmap_line_ydxd::yd#0 = bitmap_line_ydxd::yd#5 bitmap_line::yd#1 } { bitmap_line_ydxd::y1#0 = bitmap_line_ydxd::y1#6 bitmap_line::y1#0 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxd:662 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::x#5 bitmap_line_ydxd::y#7 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::e#0 ] { { bitmap_line_ydxd::xd#1 = bitmap_line_ydxd::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxd::x#1 = bitmap_line_ydxd::x#5 bitmap_line::x1#0 } { bitmap_line_ydxd::y#1 = bitmap_line_ydxd::y#7 bitmap_line::y1#0 } { bitmap_line_ydxd::yd#1 = bitmap_line_ydxd::yd#5 bitmap_line::yd#10 } { bitmap_line_ydxd::y1#1 = bitmap_line_ydxd::y1#6 bitmap_line::y0#0 } }  ) always clobbers reg byte a 
Statement [742] (byte) bitmap_line_ydxd::e#1 ← (byte) bitmap_line_ydxd::e#3 + (byte) bitmap_line_ydxd::xd#2 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#3 bitmap_line_ydxd::e#1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxd:646 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#3 bitmap_line_ydxd::e#1 ] { { bitmap_line_ydxd::xd#0 = bitmap_line_ydxd::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxd::x#0 = bitmap_line_ydxd::x#5 bitmap_line::x0#0 } { bitmap_line_ydxd::y#0 = bitmap_line_ydxd::y#7 bitmap_line::y0#0 } { bitmap_line_ydxd::yd#0 = bitmap_line_ydxd::yd#5 bitmap_line::yd#1 } { bitmap_line_ydxd::y1#0 = bitmap_line_ydxd::y1#6 bitmap_line::y1#0 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxd:662 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#3 bitmap_line_ydxd::e#1 ] { { bitmap_line_ydxd::xd#1 = bitmap_line_ydxd::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxd::x#1 = bitmap_line_ydxd::x#5 bitmap_line::x1#0 } { bitmap_line_ydxd::y#1 = bitmap_line_ydxd::y#7 bitmap_line::y1#0 } { bitmap_line_ydxd::yd#1 = bitmap_line_ydxd::yd#5 bitmap_line::yd#10 } { bitmap_line_ydxd::y1#1 = bitmap_line_ydxd::y1#6 bitmap_line::y0#0 } }  ) always clobbers reg byte a 
Statement [745] (byte) bitmap_line_ydxd::e#2 ← (byte) bitmap_line_ydxd::e#1 - (byte) bitmap_line_ydxd::yd#5 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y#3 bitmap_line_ydxd::x#2 bitmap_line_ydxd::e#2 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxd:646 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y#3 bitmap_line_ydxd::x#2 bitmap_line_ydxd::e#2 ] { { bitmap_line_ydxd::xd#0 = bitmap_line_ydxd::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxd::x#0 = bitmap_line_ydxd::x#5 bitmap_line::x0#0 } { bitmap_line_ydxd::y#0 = bitmap_line_ydxd::y#7 bitmap_line::y0#0 } { bitmap_line_ydxd::yd#0 = bitmap_line_ydxd::yd#5 bitmap_line::yd#1 } { bitmap_line_ydxd::y1#0 = bitmap_line_ydxd::y1#6 bitmap_line::y1#0 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxd:662 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y#3 bitmap_line_ydxd::x#2 bitmap_line_ydxd::e#2 ] { { bitmap_line_ydxd::xd#1 = bitmap_line_ydxd::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxd::x#1 = bitmap_line_ydxd::x#5 bitmap_line::x1#0 } { bitmap_line_ydxd::y#1 = bitmap_line_ydxd::y#7 bitmap_line::y1#0 } { bitmap_line_ydxd::yd#1 = bitmap_line_ydxd::yd#5 bitmap_line::yd#10 } { bitmap_line_ydxd::y1#1 = bitmap_line_ydxd::y1#6 bitmap_line::y0#0 } }  ) always clobbers reg byte a 
Statement [750] (word) bitmap_clear::bitmap#0 ← *((const to_nomodify byte*) bitmap_plot_xhi) w= *((const to_nomodify byte*) bitmap_plot_xlo) [ bitmap_clear::bitmap#0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_clear:611 [ bitmap_clear::bitmap#0 ] { }  ) always clobbers reg byte a 
Statement [751] (byte*) bitmap_clear::bitmap#5 ← (byte*)(word) bitmap_clear::bitmap#0 [ bitmap_clear::bitmap#5 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_clear:611 [ bitmap_clear::bitmap#5 ] { }  ) always clobbers reg byte a 
Statement [754] *((byte*) bitmap_clear::bitmap#2) ← (byte) 0 [ bitmap_clear::y#4 bitmap_clear::bitmap#2 bitmap_clear::x#2 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_clear:611 [ bitmap_clear::y#4 bitmap_clear::bitmap#2 bitmap_clear::x#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:123 [ bitmap_clear::y#4 bitmap_clear::y#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:123 [ bitmap_clear::y#4 bitmap_clear::y#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:126 [ bitmap_clear::x#2 bitmap_clear::x#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:126 [ bitmap_clear::x#2 bitmap_clear::x#1 ]
Statement [765] *((const to_nomodify byte*) bitmap_plot_xhi + (byte) bitmap_init::x#2) ← >(const nomodify byte*) VIC_BITMAP [ bitmap_init::x#2 bitmap_init::bits#3 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_init:609 [ bitmap_init::x#2 bitmap_init::bits#3 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:127 [ bitmap_init::x#2 bitmap_init::x#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:128 [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
Statement [766] *((const to_nomodify byte*) bitmap_plot_bit + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3 [ bitmap_init::x#2 bitmap_init::bits#3 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_init:609 [ bitmap_init::x#2 bitmap_init::bits#3 ] { }  ) always clobbers reg byte a 
Statement [781] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (word)(number) $28*(number) 8 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_init:609 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:129 [ bitmap_init::y#2 bitmap_init::y#1 ]
Statement [786] *((const nomodify byte*) PROCPORT) ← (byte) $32 [ ] ( main:2::gfx_init:10::gfx_init_charset:463 [ ] { }  ) always clobbers reg byte a 
Statement [789] *((byte*) gfx_init_charset::charset#2) ← *((byte*) gfx_init_charset::chargen#2) [ gfx_init_charset::c#4 gfx_init_charset::chargen#2 gfx_init_charset::charset#2 gfx_init_charset::l#2 ] ( main:2::gfx_init:10::gfx_init_charset:463 [ gfx_init_charset::c#4 gfx_init_charset::chargen#2 gfx_init_charset::charset#2 gfx_init_charset::l#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:132 [ gfx_init_charset::c#4 gfx_init_charset::c#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:132 [ gfx_init_charset::c#4 gfx_init_charset::c#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:137 [ gfx_init_charset::l#2 gfx_init_charset::l#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:137 [ gfx_init_charset::l#2 gfx_init_charset::l#1 ]
Statement [796] *((const nomodify byte*) PROCPORT) ← (byte) $37 [ ] ( main:2::gfx_init:10::gfx_init_charset:463 [ ] { }  ) always clobbers reg byte a 
Statement [801] *((byte*) gfx_init_screen4::ch#2) ← (byte) 0 [ gfx_init_screen4::cy#4 gfx_init_screen4::ch#2 gfx_init_screen4::cx#2 ] ( main:2::gfx_init:10::gfx_init_screen4:461 [ gfx_init_screen4::cy#4 gfx_init_screen4::ch#2 gfx_init_screen4::cx#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:138 [ gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:138 [ gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:141 [ gfx_init_screen4::cx#2 gfx_init_screen4::cx#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:141 [ gfx_init_screen4::cx#2 gfx_init_screen4::cx#1 ]
Statement [812] (byte~) gfx_init_screen3::$1 ← (byte~) gfx_init_screen3::$0 << (byte) 4 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 gfx_init_screen3::$1 ] ( main:2::gfx_init:10::gfx_init_screen3:459 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 gfx_init_screen3::$1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:142 [ gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:143 [ gfx_init_screen3::cx#2 gfx_init_screen3::cx#1 ]
Statement [813] (byte~) gfx_init_screen3::$2 ← (byte) gfx_init_screen3::cy#4 & (byte) 3 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 gfx_init_screen3::$1 gfx_init_screen3::$2 ] ( main:2::gfx_init:10::gfx_init_screen3:459 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 gfx_init_screen3::$1 gfx_init_screen3::$2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:336 [ gfx_init_screen3::$1 ]
Statement [815] *((byte*) gfx_init_screen3::ch#2) ← (byte~) gfx_init_screen3::$3 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 ] ( main:2::gfx_init:10::gfx_init_screen3:459 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 ] { }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:142 [ gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:143 [ gfx_init_screen3::cx#2 gfx_init_screen3::cx#1 ]
Statement [825] (byte~) gfx_init_screen2::$0 ← (byte) gfx_init_screen2::cx#2 + (byte) gfx_init_screen2::cy#4 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::$0 ] ( main:2::gfx_init:10::gfx_init_screen2:457 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::$0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:146 [ gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:147 [ gfx_init_screen2::cx#2 gfx_init_screen2::cx#1 ]
Statement [827] (byte) gfx_init_screen2::col2#0 ← (byte) $f - (byte) gfx_init_screen2::col#0 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::col#0 gfx_init_screen2::col2#0 ] ( main:2::gfx_init:10::gfx_init_screen2:457 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::col#0 gfx_init_screen2::col2#0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:340 [ gfx_init_screen2::col#0 ]
Statement [828] (byte~) gfx_init_screen2::$3 ← (byte) gfx_init_screen2::col#0 << (byte) 4 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::col2#0 gfx_init_screen2::$3 ] ( main:2::gfx_init:10::gfx_init_screen2:457 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::col2#0 gfx_init_screen2::$3 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:341 [ gfx_init_screen2::col2#0 ]
Statement [830] *((byte*) gfx_init_screen2::ch#2) ← (byte~) gfx_init_screen2::$4 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 ] ( main:2::gfx_init:10::gfx_init_screen2:457 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 ] { }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:146 [ gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:147 [ gfx_init_screen2::cx#2 gfx_init_screen2::cx#1 ]
Statement [840] (byte~) gfx_init_screen1::$0 ← (byte) gfx_init_screen1::cx#2 + (byte) gfx_init_screen1::cy#4 [ gfx_init_screen1::cy#4 gfx_init_screen1::cx#2 gfx_init_screen1::ch#2 gfx_init_screen1::$0 ] ( main:2::gfx_init:10::gfx_init_screen1:455 [ gfx_init_screen1::cy#4 gfx_init_screen1::cx#2 gfx_init_screen1::ch#2 gfx_init_screen1::$0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:150 [ gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:151 [ gfx_init_screen1::cx#2 gfx_init_screen1::cx#1 ]
Statement [842] *((byte*) gfx_init_screen1::ch#2) ← (byte~) gfx_init_screen1::$1 [ gfx_init_screen1::cy#4 gfx_init_screen1::cx#2 gfx_init_screen1::ch#2 ] ( main:2::gfx_init:10::gfx_init_screen1:455 [ gfx_init_screen1::cy#4 gfx_init_screen1::cx#2 gfx_init_screen1::ch#2 ] { }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:150 [ gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:151 [ gfx_init_screen1::cx#2 gfx_init_screen1::cx#1 ]
Statement [853] (byte~) gfx_init_screen0::$1 ← (byte~) gfx_init_screen0::$0 << (byte) 4 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$1 ] ( main:2::gfx_init:10::gfx_init_screen0:453 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:154 [ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:155 [ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ]
Statement [854] (byte~) gfx_init_screen0::$2 ← (byte) gfx_init_screen0::cx#2 & (byte) $f [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$1 gfx_init_screen0::$2 ] ( main:2::gfx_init:10::gfx_init_screen0:453 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$1 gfx_init_screen0::$2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:347 [ gfx_init_screen0::$1 ]
Statement [856] *((byte*) gfx_init_screen0::ch#2) ← (byte~) gfx_init_screen0::$3 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 ] ( main:2::gfx_init:10::gfx_init_screen0:453 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 ] { }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:154 [ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:155 [ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ]
Statement [863] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) ← (byte) $ff [ ] ( main:2::keyboard_init:8 [ ] { }  ) always clobbers reg byte a 
Statement [864] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_B_DDR) ← (byte) 0 [ ] ( main:2::keyboard_init:8 [ ] { }  ) always clobbers reg byte a 
Statement [5] *((const nomodify byte*) PROCPORT_DDR) ← (const nomodify byte) PROCPORT_DDR_MEMORY_MASK [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [6] *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_RAM_IO [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [7] *((const nomodify byte*) DTV_FEATURE) ← (const nomodify byte) DTV_FEATURE_ENABLE [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [16] if(*((const nomodify byte*) form_ctrl_line)==(byte) 0) goto gfx_mode::@1 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] { }  ) always clobbers reg byte a 
Statement [19] if(*((const nomodify byte*) form_ctrl_borof)==(byte) 0) goto gfx_mode::@2 [ keyboard_events_size#24 gfx_mode::dtv_control#14 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#14 ] { }  ) always clobbers reg byte a 
Statement [20] (byte) gfx_mode::dtv_control#2 ← (byte) gfx_mode::dtv_control#14 | (const nomodify byte) DTV_BORDER_OFF [ keyboard_events_size#24 gfx_mode::dtv_control#2 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#2 ] { }  ) always clobbers reg byte a 
Statement [22] if(*((const nomodify byte*) form_ctrl_hicol)==(byte) 0) goto gfx_mode::@3 [ keyboard_events_size#24 gfx_mode::dtv_control#15 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#15 ] { }  ) always clobbers reg byte a 
Statement [23] (byte) gfx_mode::dtv_control#3 ← (byte) gfx_mode::dtv_control#15 | (const nomodify byte) DTV_HIGHCOLOR [ keyboard_events_size#24 gfx_mode::dtv_control#3 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#3 ] { }  ) always clobbers reg byte a 
Statement [25] if(*((const nomodify byte*) form_ctrl_overs)==(byte) 0) goto gfx_mode::@4 [ keyboard_events_size#24 gfx_mode::dtv_control#10 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#10 ] { }  ) always clobbers reg byte a 
Statement [26] (byte) gfx_mode::dtv_control#4 ← (byte) gfx_mode::dtv_control#10 | (const nomodify byte) DTV_OVERSCAN [ keyboard_events_size#24 gfx_mode::dtv_control#4 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#4 ] { }  ) always clobbers reg byte a 
Statement [28] if(*((const nomodify byte*) form_ctrl_colof)==(byte) 0) goto gfx_mode::@5 [ keyboard_events_size#24 gfx_mode::dtv_control#11 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#11 ] { }  ) always clobbers reg byte a 
Statement [29] (byte) gfx_mode::dtv_control#5 ← (byte) gfx_mode::dtv_control#11 | (const nomodify byte) DTV_COLORRAM_OFF [ keyboard_events_size#24 gfx_mode::dtv_control#5 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#5 ] { }  ) always clobbers reg byte a 
Statement [31] if(*((const nomodify byte*) form_ctrl_chunk)==(byte) 0) goto gfx_mode::@6 [ keyboard_events_size#24 gfx_mode::dtv_control#13 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#13 ] { }  ) always clobbers reg byte a 
Statement [32] (byte) gfx_mode::dtv_control#6 ← (byte) gfx_mode::dtv_control#13 | (const nomodify byte) DTV_CHUNKY [ keyboard_events_size#24 gfx_mode::dtv_control#6 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#6 ] { }  ) always clobbers reg byte a 
Statement [35] if(*((const nomodify byte*) form_ctrl_ecm)==(byte) 0) goto gfx_mode::@7 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] { }  ) always clobbers reg byte a 
Statement [38] if(*((const nomodify byte*) form_ctrl_bmm)==(byte) 0) goto gfx_mode::@8 [ keyboard_events_size#24 gfx_mode::vic_control#5 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::vic_control#5 ] { }  ) always clobbers reg byte a 
Statement [39] (byte) gfx_mode::vic_control#2 ← (byte) gfx_mode::vic_control#5 | (const nomodify byte) VIC_BMM [ keyboard_events_size#24 gfx_mode::vic_control#2 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::vic_control#2 ] { }  ) always clobbers reg byte a 
Statement [42] if(*((const nomodify byte*) form_ctrl_mcm)==(byte) 0) goto gfx_mode::@9 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] { }  ) always clobbers reg byte a 
Statement [46] (byte~) gfx_mode::$18 ← *((const nomodify byte*) form_a_start_hi) << (byte) 4 [ keyboard_events_size#24 gfx_mode::$18 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$18 ] { { get_plane::idx#0 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#16 } }  ) always clobbers reg byte a 
Statement [47] (byte) gfx_mode::plane_a_offs#0 ← (byte~) gfx_mode::$18 | *((const nomodify byte*) form_a_start_lo) [ keyboard_events_size#24 gfx_mode::plane_a_offs#0 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_a_offs#0 ] { { get_plane::idx#0 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#16 } }  ) always clobbers reg byte a 
Statement [50] (dword) get_plane::return#16 ← (dword) get_plane::return#14 [ keyboard_events_size#24 gfx_mode::plane_a_offs#0 get_plane::return#16 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_a_offs#0 get_plane::return#16 ] { { get_plane::idx#0 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#16 } }  ) always clobbers reg byte a 
Statement [51] (dword~) gfx_mode::$20 ← (dword) get_plane::return#16 [ keyboard_events_size#24 gfx_mode::plane_a_offs#0 gfx_mode::$20 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_a_offs#0 gfx_mode::$20 ] { { get_plane::idx#1 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#17 } }  ) always clobbers reg byte a 
Statement [52] (dword) gfx_mode::plane_a#0 ← (dword~) gfx_mode::$20 + (byte) gfx_mode::plane_a_offs#0 [ keyboard_events_size#24 gfx_mode::plane_a#0 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_a#0 ] { { get_plane::idx#1 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#17 } }  ) always clobbers reg byte a 
Statement [53] (word~) gfx_mode::$24 ← < (dword) gfx_mode::plane_a#0 [ keyboard_events_size#24 gfx_mode::plane_a#0 gfx_mode::$24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_a#0 gfx_mode::$24 ] { { get_plane::idx#1 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#17 } }  ) always clobbers reg byte a 
Statement [58] (word~) gfx_mode::$26 ← > (dword) gfx_mode::plane_a#0 [ keyboard_events_size#24 gfx_mode::$26 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$26 ] { { get_plane::idx#1 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#17 } }  ) always clobbers reg byte a 
Statement [61] (byte~) gfx_mode::$28 ← *((const nomodify byte*) form_a_step_hi) << (byte) 4 [ keyboard_events_size#24 gfx_mode::$28 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$28 ] { { get_plane::idx#1 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#17 } }  ) always clobbers reg byte a 
Statement [62] (byte~) gfx_mode::$29 ← (byte~) gfx_mode::$28 | *((const nomodify byte*) form_a_step_lo) [ keyboard_events_size#24 gfx_mode::$29 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$29 ] { { get_plane::idx#1 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#17 } }  ) always clobbers reg byte a 
Statement [64] (byte~) gfx_mode::$30 ← *((const nomodify byte*) form_a_mod_hi) << (byte) 4 [ keyboard_events_size#24 gfx_mode::$30 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$30 ] { { get_plane::idx#1 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#17 } }  ) always clobbers reg byte a 
Statement [65] (byte~) gfx_mode::$31 ← (byte~) gfx_mode::$30 | *((const nomodify byte*) form_a_mod_lo) [ keyboard_events_size#24 gfx_mode::$31 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$31 ] { { get_plane::idx#1 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#17 } }  ) always clobbers reg byte a 
Statement [67] *((const nomodify byte*) DTV_PLANEA_MODULO_HI) ← (byte) 0 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] { { get_plane::idx#1 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#17 } }  ) always clobbers reg byte a 
Statement [68] (byte~) gfx_mode::$32 ← *((const nomodify byte*) form_b_start_hi) << (byte) 4 [ keyboard_events_size#24 gfx_mode::$32 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$32 ] { { get_plane::idx#1 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#17 } }  ) always clobbers reg byte a 
Statement [69] (byte) gfx_mode::plane_b_offs#0 ← (byte~) gfx_mode::$32 | *((const nomodify byte*) form_b_start_lo) [ keyboard_events_size#24 gfx_mode::plane_b_offs#0 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_b_offs#0 ] { { get_plane::idx#1 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#17 } }  ) always clobbers reg byte a 
Statement [72] (dword) get_plane::return#17 ← (dword) get_plane::return#14 [ keyboard_events_size#24 gfx_mode::plane_b_offs#0 get_plane::return#17 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_b_offs#0 get_plane::return#17 ] { { get_plane::idx#1 = get_plane::idx#10 } { get_plane::return#14 = get_plane::return#17 } }  ) always clobbers reg byte a 
Statement [73] (dword~) gfx_mode::$34 ← (dword) get_plane::return#17 [ keyboard_events_size#24 gfx_mode::plane_b_offs#0 gfx_mode::$34 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_b_offs#0 gfx_mode::$34 ] { { get_vic_screen::idx#0 = get_vic_screen::idx#2 } { get_vic_screen::return#10 = get_vic_screen::return#5 } }  ) always clobbers reg byte a 
Statement [74] (dword) gfx_mode::plane_b#0 ← (dword~) gfx_mode::$34 + (byte) gfx_mode::plane_b_offs#0 [ keyboard_events_size#24 gfx_mode::plane_b#0 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_b#0 ] { { get_vic_screen::idx#0 = get_vic_screen::idx#2 } { get_vic_screen::return#10 = get_vic_screen::return#5 } }  ) always clobbers reg byte a 
Statement [75] (word~) gfx_mode::$38 ← < (dword) gfx_mode::plane_b#0 [ keyboard_events_size#24 gfx_mode::plane_b#0 gfx_mode::$38 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_b#0 gfx_mode::$38 ] { { get_vic_screen::idx#0 = get_vic_screen::idx#2 } { get_vic_screen::return#10 = get_vic_screen::return#5 } }  ) always clobbers reg byte a 
Statement [80] (word~) gfx_mode::$40 ← > (dword) gfx_mode::plane_b#0 [ keyboard_events_size#24 gfx_mode::$40 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$40 ] { { get_vic_screen::idx#0 = get_vic_screen::idx#2 } { get_vic_screen::return#10 = get_vic_screen::return#5 } }  ) always clobbers reg byte a 
Statement [83] (byte~) gfx_mode::$42 ← *((const nomodify byte*) form_b_step_hi) << (byte) 4 [ keyboard_events_size#24 gfx_mode::$42 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$42 ] { { get_vic_screen::idx#0 = get_vic_screen::idx#2 } { get_vic_screen::return#10 = get_vic_screen::return#5 } }  ) always clobbers reg byte a 
Statement [84] (byte~) gfx_mode::$43 ← (byte~) gfx_mode::$42 | *((const nomodify byte*) form_b_step_lo) [ keyboard_events_size#24 gfx_mode::$43 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$43 ] { { get_vic_screen::idx#0 = get_vic_screen::idx#2 } { get_vic_screen::return#10 = get_vic_screen::return#5 } }  ) always clobbers reg byte a 
Statement [86] (byte~) gfx_mode::$44 ← *((const nomodify byte*) form_b_mod_hi) << (byte) 4 [ keyboard_events_size#24 gfx_mode::$44 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$44 ] { { get_vic_screen::idx#0 = get_vic_screen::idx#2 } { get_vic_screen::return#10 = get_vic_screen::return#5 } }  ) always clobbers reg byte a 
Statement [87] (byte~) gfx_mode::$45 ← (byte~) gfx_mode::$44 | *((const nomodify byte*) form_b_mod_lo) [ keyboard_events_size#24 gfx_mode::$45 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$45 ] { { get_vic_screen::idx#0 = get_vic_screen::idx#2 } { get_vic_screen::return#10 = get_vic_screen::return#5 } }  ) always clobbers reg byte a 
Statement [89] *((const nomodify byte*) DTV_PLANEB_MODULO_HI) ← (byte) 0 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] { { get_vic_screen::idx#0 = get_vic_screen::idx#2 } { get_vic_screen::return#10 = get_vic_screen::return#5 } }  ) always clobbers reg byte a 
Statement [90] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) ← (byte) 3 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] { { get_vic_screen::idx#0 = get_vic_screen::idx#2 } { get_vic_screen::return#10 = get_vic_screen::return#5 } }  ) always clobbers reg byte a 
Statement [91] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2) ← (byte) 3^(byte)(word)(const nomodify byte*) VIC_SCREEN0/(word) $4000 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] { { get_vic_screen::idx#0 = get_vic_screen::idx#2 } { get_vic_screen::return#10 = get_vic_screen::return#5 } }  ) always clobbers reg byte a 
Statement [94] (byte*) get_vic_screen::return#10 ← (byte*) get_vic_screen::return#5 [ keyboard_events_size#24 get_vic_screen::return#10 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 get_vic_screen::return#10 ] { { get_vic_screen::idx#0 = get_vic_screen::idx#2 } { get_vic_screen::return#10 = get_vic_screen::return#5 } }  ) always clobbers reg byte a 
Statement [95] (byte*~) gfx_mode::$82 ← (byte*) get_vic_screen::return#10 [ keyboard_events_size#24 gfx_mode::$82 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$82 ] { { get_vic_charset::return#2 = get_vic_charset::return#4 } }  ) always clobbers reg byte a 
Statement [96] (word~) gfx_mode::$47 ← (word)(byte*~) gfx_mode::$82 & (word) $3fff [ keyboard_events_size#24 gfx_mode::$47 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$47 ] { { get_vic_charset::return#2 = get_vic_charset::return#4 } }  ) always clobbers reg byte a 
Statement [97] (word~) gfx_mode::$48 ← (word~) gfx_mode::$47 >> (byte) 6 [ keyboard_events_size#24 gfx_mode::$48 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$48 ] { { get_vic_charset::return#2 = get_vic_charset::return#4 } }  ) always clobbers reg byte a 
Statement [100] (byte*) get_vic_charset::return#4 ← (byte*) get_vic_charset::return#2 [ keyboard_events_size#24 gfx_mode::$48 get_vic_charset::return#4 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$48 get_vic_charset::return#4 ] { { get_vic_charset::return#2 = get_vic_charset::return#4 } }  ) always clobbers reg byte a 
Statement [101] (byte*~) gfx_mode::$83 ← (byte*) get_vic_charset::return#4 [ keyboard_events_size#24 gfx_mode::$48 gfx_mode::$83 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$48 gfx_mode::$83 ] { { get_vic_screen::idx#1 = get_vic_screen::idx#2 } { get_vic_screen::return#11 = get_vic_screen::return#5 } }  ) always clobbers reg byte a 
Statement [102] (word~) gfx_mode::$50 ← (word)(byte*~) gfx_mode::$83 & (word) $3fff [ keyboard_events_size#24 gfx_mode::$48 gfx_mode::$50 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$48 gfx_mode::$50 ] { { get_vic_screen::idx#1 = get_vic_screen::idx#2 } { get_vic_screen::return#11 = get_vic_screen::return#5 } }  ) always clobbers reg byte a 
Statement [104] (byte~) gfx_mode::$52 ← (byte~) gfx_mode::$51 >> (byte) 2 [ keyboard_events_size#24 gfx_mode::$48 gfx_mode::$52 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$48 gfx_mode::$52 ] { { get_vic_screen::idx#1 = get_vic_screen::idx#2 } { get_vic_screen::return#11 = get_vic_screen::return#5 } }  ) always clobbers reg byte a 
Statement [105] (byte~) gfx_mode::$84 ← (byte)(word~) gfx_mode::$48 [ keyboard_events_size#24 gfx_mode::$52 gfx_mode::$84 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$52 gfx_mode::$84 ] { { get_vic_screen::idx#1 = get_vic_screen::idx#2 } { get_vic_screen::return#11 = get_vic_screen::return#5 } }  ) always clobbers reg byte a 
Statement [110] (byte*) get_vic_screen::return#11 ← (byte*) get_vic_screen::return#5 [ keyboard_events_size#24 get_vic_screen::return#11 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 get_vic_screen::return#11 ] { { get_vic_screen::idx#1 = get_vic_screen::idx#2 } { get_vic_screen::return#11 = get_vic_screen::return#5 } }  ) always clobbers reg byte a 
Statement [111] (byte*) gfx_mode::vic_colors#0 ← (byte*) get_vic_screen::return#11 [ keyboard_events_size#24 gfx_mode::vic_colors#0 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::vic_colors#0 ] { }  ) always clobbers reg byte a 
Statement [114] *((byte*) gfx_mode::col#2) ← *((byte*) gfx_mode::vic_colors#2) [ keyboard_events_size#24 gfx_mode::cy#4 gfx_mode::vic_colors#2 gfx_mode::col#2 gfx_mode::cx#2 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::cy#4 gfx_mode::vic_colors#2 gfx_mode::col#2 gfx_mode::cx#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [121] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (byte) 0 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] { }  ) always clobbers reg byte a 
Statement [122] (byte~) gfx_mode::$55 ← *((const nomodify byte*) form_vic_bg0_hi) << (byte) 4 [ keyboard_events_size#24 gfx_mode::$55 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$55 ] { }  ) always clobbers reg byte a 
Statement [123] (byte~) gfx_mode::$56 ← (byte~) gfx_mode::$55 | *((const nomodify byte*) form_vic_bg0_lo) [ keyboard_events_size#24 gfx_mode::$56 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$56 ] { }  ) always clobbers reg byte a 
Statement [125] (byte~) gfx_mode::$57 ← *((const nomodify byte*) form_vic_bg1_hi) << (byte) 4 [ keyboard_events_size#24 gfx_mode::$57 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$57 ] { }  ) always clobbers reg byte a 
Statement [126] (byte~) gfx_mode::$58 ← (byte~) gfx_mode::$57 | *((const nomodify byte*) form_vic_bg1_lo) [ keyboard_events_size#24 gfx_mode::$58 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$58 ] { }  ) always clobbers reg byte a 
Statement [128] (byte~) gfx_mode::$59 ← *((const nomodify byte*) form_vic_bg2_hi) << (byte) 4 [ keyboard_events_size#24 gfx_mode::$59 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$59 ] { }  ) always clobbers reg byte a 
Statement [129] (byte~) gfx_mode::$60 ← (byte~) gfx_mode::$59 | *((const nomodify byte*) form_vic_bg2_lo) [ keyboard_events_size#24 gfx_mode::$60 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$60 ] { }  ) always clobbers reg byte a 
Statement [131] (byte~) gfx_mode::$61 ← *((const nomodify byte*) form_vic_bg3_hi) << (byte) 4 [ keyboard_events_size#24 gfx_mode::$61 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$61 ] { }  ) always clobbers reg byte a 
Statement [132] (byte~) gfx_mode::$62 ← (byte~) gfx_mode::$61 | *((const nomodify byte*) form_vic_bg3_lo) [ keyboard_events_size#24 gfx_mode::$62 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$62 ] { }  ) always clobbers reg byte a 
Statement [134] if(*((const nomodify byte*) form_dtv_palet)==(byte) 0) goto gfx_mode::@24 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] { }  ) always clobbers reg byte a 
Statement [139] if(*((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)!=(byte) $ff) goto gfx_mode::@25 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] { }  ) always clobbers reg byte a 
Statement [149] *((const nomodify byte*) DTV_PALETTE + (byte) gfx_mode::i#2) ← *((const byte*) DTV_PALETTE_DEFAULT + (byte) gfx_mode::i#2) [ keyboard_events_size#24 gfx_mode::i#2 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::i#2 ] { }  ) always clobbers reg byte a 
Statement [163] if((byte) keyboard_event_scan::row_scan#0!=*((const byte*) keyboard_scan_values + (byte) keyboard_event_scan::row#2)) goto keyboard_event_scan::@9 [ keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#106 keyboard_event_scan::row_scan#0 ] ( main:2::gfx_mode:15::keyboard_event_scan:141 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#106 keyboard_event_scan::row_scan#0 ] { { keyboard_events_size#24 = keyboard_events_size#97 } }  main:2::form_mode:13::form_control:292::keyboard_event_scan:372 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#106 keyboard_event_scan::row_scan#0 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#47 = keyboard_events_size#97 } }  ) always clobbers reg byte a 
Statement [164] (byte) keyboard_event_scan::keycode#1 ← (byte) keyboard_event_scan::keycode#11 + (byte) 8 [ keyboard_event_scan::row#2 keyboard_events_size#106 keyboard_event_scan::keycode#1 ] ( main:2::gfx_mode:15::keyboard_event_scan:141 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_events_size#106 keyboard_event_scan::keycode#1 ] { { keyboard_events_size#24 = keyboard_events_size#97 } }  main:2::form_mode:13::form_control:292::keyboard_event_scan:372 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_events_size#106 keyboard_event_scan::keycode#1 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#47 = keyboard_events_size#97 } }  ) always clobbers reg byte a 
Statement [179] (byte) keyboard_modifiers#3 ← (byte) keyboard_modifiers#18 | (const nomodify byte) KEY_MODIFIER_RSHIFT [ keyboard_events_size#100 keyboard_modifiers#3 ] ( main:2::gfx_mode:15::keyboard_event_scan:141 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#3 ] { { keyboard_events_size#24 = keyboard_events_size#97 } }  main:2::form_mode:13::form_control:292::keyboard_event_scan:372 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#3 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#47 = keyboard_events_size#97 } }  ) always clobbers reg byte a 
Statement [185] (byte) keyboard_modifiers#4 ← (byte) keyboard_modifiers#19 | (const nomodify byte) KEY_MODIFIER_CTRL [ keyboard_events_size#100 keyboard_modifiers#4 ] ( main:2::gfx_mode:15::keyboard_event_scan:141 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#4 ] { { keyboard_events_size#24 = keyboard_events_size#97 } }  main:2::form_mode:13::form_control:292::keyboard_event_scan:372 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#4 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#47 = keyboard_events_size#97 } }  ) always clobbers reg byte a 
Statement [191] (byte) keyboard_modifiers#5 ← (byte) keyboard_modifiers#20 | (const nomodify byte) KEY_MODIFIER_COMMODORE [ keyboard_events_size#100 keyboard_modifiers#5 ] ( main:2::gfx_mode:15::keyboard_event_scan:141 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#5 ] { { keyboard_events_size#24 = keyboard_events_size#97 } }  main:2::form_mode:13::form_control:292::keyboard_event_scan:372 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#5 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#47 = keyboard_events_size#97 } }  ) always clobbers reg byte a 
Statement [195] (byte~) keyboard_event_scan::$15 ← (byte) keyboard_event_scan::row_scan#0 ^ *((const byte*) keyboard_scan_values + (byte) keyboard_event_scan::row#2) [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::$15 ] ( main:2::gfx_mode:15::keyboard_event_scan:141 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::$15 ] { { keyboard_events_size#24 = keyboard_events_size#97 } }  main:2::form_mode:13::form_control:292::keyboard_event_scan:372 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::$15 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#47 = keyboard_events_size#97 } }  ) always clobbers reg byte a 
Statement [199] (byte) keyboard_event_scan::event_type#0 ← (byte) keyboard_event_scan::row_scan#0 & *((const byte*) keyboard_matrix_col_bitmask + (byte) keyboard_event_scan::col#2) [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::event_type#0 ] ( main:2::gfx_mode:15::keyboard_event_scan:141 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::event_type#0 ] { { keyboard_events_size#24 = keyboard_events_size#97 } }  main:2::form_mode:13::form_control:292::keyboard_event_scan:372 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::event_type#0 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#47 = keyboard_events_size#97 } }  ) always clobbers reg byte a 
Statement [201] *((const byte*) keyboard_events + (byte) keyboard_events_size#18) ← (byte) keyboard_event_scan::keycode#10 [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 ] ( main:2::gfx_mode:15::keyboard_event_scan:141 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 ] { { keyboard_events_size#24 = keyboard_events_size#97 } }  main:2::form_mode:13::form_control:292::keyboard_event_scan:372 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#47 = keyboard_events_size#97 } }  ) always clobbers reg byte a 
Statement [207] *((const byte*) keyboard_scan_values + (byte) keyboard_event_scan::row#2) ← (byte) keyboard_event_scan::row_scan#0 [ keyboard_event_scan::row#2 keyboard_event_scan::keycode#14 keyboard_events_size#105 ] ( main:2::gfx_mode:15::keyboard_event_scan:141 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::keycode#14 keyboard_events_size#105 ] { { keyboard_events_size#24 = keyboard_events_size#97 } }  main:2::form_mode:13::form_control:292::keyboard_event_scan:372 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::keycode#14 keyboard_events_size#105 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#47 = keyboard_events_size#97 } }  ) always clobbers reg byte a 
Statement [208] (byte~) keyboard_event_scan::$23 ← (byte) keyboard_event_scan::keycode#10 | (byte) $40 [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::$23 ] ( main:2::gfx_mode:15::keyboard_event_scan:141 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::$23 ] { { keyboard_events_size#24 = keyboard_events_size#97 } }  main:2::form_mode:13::form_control:292::keyboard_event_scan:372 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::$23 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#47 = keyboard_events_size#97 } }  ) always clobbers reg byte a 
Statement [212] (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#4 >> (byte) 3 [ keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] ( main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:169 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] { { keyboard_events_size#24 = keyboard_events_size#97 } { keyboard_event_pressed::return#0 = keyboard_event_pressed::return#10 } }  main:2::form_mode:13::form_control:292::keyboard_event_scan:372::keyboard_event_pressed:169 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#47 = keyboard_events_size#97 } { keyboard_event_pressed::return#0 = keyboard_event_pressed::return#10 } }  main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:175 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#18 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] { { keyboard_events_size#24 = keyboard_events_size#97 } { keyboard_event_pressed::return#1 = keyboard_event_pressed::return#10 } }  main:2::form_mode:13::form_control:292::keyboard_event_scan:372::keyboard_event_pressed:175 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#18 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#47 = keyboard_events_size#97 } { keyboard_event_pressed::return#1 = keyboard_event_pressed::return#10 } }  main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:181 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] { { keyboard_events_size#24 = keyboard_events_size#97 } { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#2 } }  main:2::form_mode:13::form_control:292::keyboard_event_scan:372::keyboard_event_pressed:181 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#47 = keyboard_events_size#97 } { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#2 } }  main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:187 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] { { keyboard_events_size#24 = keyboard_events_size#97 } { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#3 } }  main:2::form_mode:13::form_control:292::keyboard_event_scan:372::keyboard_event_pressed:187 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#47 = keyboard_events_size#97 } { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#3 } }  ) always clobbers reg byte a 
Statement [214] (byte~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#4 & (byte) 7 [ keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] ( main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:169 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] { { keyboard_events_size#24 = keyboard_events_size#97 } { keyboard_event_pressed::return#0 = keyboard_event_pressed::return#10 } }  main:2::form_mode:13::form_control:292::keyboard_event_scan:372::keyboard_event_pressed:169 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#47 = keyboard_events_size#97 } { keyboard_event_pressed::return#0 = keyboard_event_pressed::return#10 } }  main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:175 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#18 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] { { keyboard_events_size#24 = keyboard_events_size#97 } { keyboard_event_pressed::return#1 = keyboard_event_pressed::return#10 } }  main:2::form_mode:13::form_control:292::keyboard_event_scan:372::keyboard_event_pressed:175 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#18 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#47 = keyboard_events_size#97 } { keyboard_event_pressed::return#1 = keyboard_event_pressed::return#10 } }  main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:181 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] { { keyboard_events_size#24 = keyboard_events_size#97 } { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#2 } }  main:2::form_mode:13::form_control:292::keyboard_event_scan:372::keyboard_event_pressed:181 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#47 = keyboard_events_size#97 } { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#2 } }  main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:187 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] { { keyboard_events_size#24 = keyboard_events_size#97 } { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#3 } }  main:2::form_mode:13::form_control:292::keyboard_event_scan:372::keyboard_event_pressed:187 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#47 = keyboard_events_size#97 } { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#3 } }  ) always clobbers reg byte a 
Statement [215] (byte) keyboard_event_pressed::return#10 ← (byte) keyboard_event_pressed::row_bits#0 & *((const byte*) keyboard_matrix_col_bitmask + (byte~) keyboard_event_pressed::$1) [ keyboard_event_pressed::return#10 ] ( main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:169 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_event_pressed::return#10 ] { { keyboard_events_size#24 = keyboard_events_size#97 } { keyboard_event_pressed::return#0 = keyboard_event_pressed::return#10 } }  main:2::form_mode:13::form_control:292::keyboard_event_scan:372::keyboard_event_pressed:169 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_event_pressed::return#10 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#47 = keyboard_events_size#97 } { keyboard_event_pressed::return#0 = keyboard_event_pressed::return#10 } }  main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:175 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#18 keyboard_event_pressed::return#10 ] { { keyboard_events_size#24 = keyboard_events_size#97 } { keyboard_event_pressed::return#1 = keyboard_event_pressed::return#10 } }  main:2::form_mode:13::form_control:292::keyboard_event_scan:372::keyboard_event_pressed:175 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#18 keyboard_event_pressed::return#10 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#47 = keyboard_events_size#97 } { keyboard_event_pressed::return#1 = keyboard_event_pressed::return#10 } }  main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:181 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::return#10 ] { { keyboard_events_size#24 = keyboard_events_size#97 } { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#2 } }  main:2::form_mode:13::form_control:292::keyboard_event_scan:372::keyboard_event_pressed:181 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::return#10 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#47 = keyboard_events_size#97 } { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#2 } }  main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:187 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::return#10 ] { { keyboard_events_size#24 = keyboard_events_size#97 } { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#3 } }  main:2::form_mode:13::form_control:292::keyboard_event_scan:372::keyboard_event_pressed:187 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::return#10 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#47 = keyboard_events_size#97 } { keyboard_event_pressed::return#10 = keyboard_event_pressed::return#3 } }  ) always clobbers reg byte a 
Statement [217] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1) ← *((const byte*) keyboard_matrix_row_bitmask + (byte) keyboard_matrix_read::rowid#0) [ ] ( main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_matrix_read:160 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#106 ] { { keyboard_events_size#24 = keyboard_events_size#97 } { keyboard_matrix_read::rowid#0 = keyboard_event_scan::row#2 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  main:2::form_mode:13::form_control:292::keyboard_event_scan:372::keyboard_matrix_read:160 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#106 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#47 = keyboard_events_size#97 } { keyboard_matrix_read::rowid#0 = keyboard_event_scan::row#2 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  ) always clobbers reg byte a 
Statement [218] (byte) keyboard_matrix_read::return#0 ← ~ *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_B) [ keyboard_matrix_read::return#0 ] ( main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_matrix_read:160 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#106 keyboard_matrix_read::return#0 ] { { keyboard_events_size#24 = keyboard_events_size#97 } { keyboard_matrix_read::rowid#0 = keyboard_event_scan::row#2 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  main:2::form_mode:13::form_control:292::keyboard_event_scan:372::keyboard_matrix_read:160 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#106 keyboard_matrix_read::return#0 ] { { form_control::return#0 = form_control::return#2 } { keyboard_events_size#47 = keyboard_events_size#97 } { keyboard_matrix_read::rowid#0 = keyboard_event_scan::row#2 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  ) always clobbers reg byte a 
Statement [270] *((const nomodify byte*) DTV_GRAPHICS_VIC_BANK) ← (byte) 0 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [271] *((const nomodify byte*) DTV_COLOR_BANK_LO) ← <(word)(const nomodify dword) DTV_COLOR_BANK_DEFAULT/(word) $400 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [272] *((const nomodify byte*) DTV_COLOR_BANK_HI) ← (byte) 0 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [273] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) ← (byte) 3 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [274] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2) ← (byte) 3 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [275] *((const nomodify byte*) DTV_CONTROL) ← (byte) 0 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [276] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1) ← (const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(byte) 3 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [277] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL2) ← (const nomodify byte) VIC_CSEL [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [278] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_MEMORY) ← (byte)(word)(const nomodify byte*) FORM_SCREEN&(word) $3fff/(byte) $40|(word)(const nomodify byte*) FORM_CHARSET&(word) $3fff/(word) $400 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [279] *((const nomodify byte*) DTV_PLANEA_START_LO) ← (byte) 0 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [280] *((const nomodify byte*) DTV_PLANEA_START_MI) ← >(const nomodify byte*) FORM_SCREEN [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [281] *((const nomodify byte*) DTV_PLANEA_START_HI) ← (byte) 0 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [283] *((const nomodify byte*) DTV_PALETTE + (byte) form_mode::i#2) ← *((const byte*) DTV_PALETTE_DEFAULT + (byte) form_mode::i#2) [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 form_mode::i#2 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 form_mode::i#2 ] { }  ) always clobbers reg byte a 
Statement [286] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) ← (byte) 0 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [287] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (byte) 0 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] { }  ) always clobbers reg byte a 
Statement [290] if(*((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)!=(byte) $ff) goto form_mode::@4 [ keyboard_events_size#47 form_cursor_count#21 form_field_idx#28 form_mode::preset_current#6 ] ( main:2::form_mode:13 [ keyboard_events_size#47 form_cursor_count#21 form_field_idx#28 form_mode::preset_current#6 ] { }  ) always clobbers reg byte a 
Statement [318] (byte*) print_str_at::str#1 ← (byte*) render_preset_name::name#13 [ print_str_at::str#1 ] ( main:2::form_mode:13::render_preset_name:269 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_at::str#1 ] { { render_preset_name::idx#0 = render_preset_name::idx#10 } { print_str_at::str#1 = render_preset_name::name#13 } }  main:2::form_mode:13::render_preset_name:303 [ form_cursor_count#16 keyboard_events_size#24 form_field_idx#18 form_mode::preset_current#1 print_str_at::str#1 ] { { render_preset_name::idx#1 = render_preset_name::idx#10 } { print_str_at::str#1 = render_preset_name::name#13 } }  ) always clobbers reg byte a 
Statement [323] if((byte) 0!=*((byte*) print_str_at::str#2)) goto print_str_at::@2 [ print_str_at::str#2 print_str_at::at#2 ] ( main:2::form_mode:13::render_preset_name:269::print_str_at:319 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_at::str#2 print_str_at::at#2 ] { { render_preset_name::idx#0 = render_preset_name::idx#10 } { print_str_at::str#1 = render_preset_name::name#13 } }  main:2::form_mode:13::render_preset_name:303::print_str_at:319 [ form_cursor_count#16 keyboard_events_size#24 form_field_idx#18 form_mode::preset_current#1 print_str_at::str#2 print_str_at::at#2 ] { { render_preset_name::idx#1 = render_preset_name::idx#10 } { print_str_at::str#1 = render_preset_name::name#13 } }  ) always clobbers reg byte a reg byte y 
Statement [325] *((byte*) print_str_at::at#2) ← *((byte*) print_str_at::str#2) [ print_str_at::str#2 print_str_at::at#2 ] ( main:2::form_mode:13::render_preset_name:269::print_str_at:319 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_at::str#2 print_str_at::at#2 ] { { render_preset_name::idx#0 = render_preset_name::idx#10 } { print_str_at::str#1 = render_preset_name::name#13 } }  main:2::form_mode:13::render_preset_name:303::print_str_at:319 [ form_cursor_count#16 keyboard_events_size#24 form_field_idx#18 form_mode::preset_current#1 print_str_at::str#2 print_str_at::at#2 ] { { render_preset_name::idx#1 = render_preset_name::idx#10 } { print_str_at::str#1 = render_preset_name::name#13 } }  ) always clobbers reg byte a reg byte y 
Statement [334] *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) ← *((const to_nomodify byte*) print_hextab + *((const byte*) form_fields_val + (byte) form_render_values::idx#2)) [ form_render_values::idx#2 ] ( main:2::form_mode:13::form_render_values:267 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 form_render_values::idx#2 ] { }  main:2::form_mode:13::form_render_values:301 [ form_cursor_count#16 keyboard_events_size#24 form_field_idx#18 form_mode::preset_current#1 form_render_values::idx#2 ] { }  ) always clobbers reg byte a 
Statement [338] (word) form_field_ptr::line#0 ← *((const byte*) form_line_hi + (byte) form_field_ptr::y#0) w= *((const byte*) form_line_lo + (byte) form_field_ptr::y#0) [ form_field_ptr::line#0 form_field_ptr::field_idx#2 ] ( main:2::form_mode:13::form_render_values:267::form_field_ptr:333 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 form_render_values::idx#2 form_field_ptr::line#0 form_field_ptr::field_idx#2 ] { { form_field_ptr::field_idx#0 = form_field_ptr::field_idx#2 form_render_values::idx#2 } }  main:2::form_mode:13::form_render_values:301::form_field_ptr:333 [ form_cursor_count#16 keyboard_events_size#24 form_field_idx#18 form_mode::preset_current#1 form_render_values::idx#2 form_field_ptr::line#0 form_field_ptr::field_idx#2 ] { { form_field_ptr::field_idx#0 = form_field_ptr::field_idx#2 form_render_values::idx#2 } }  main:2::form_mode:13::form_control:292::form_field_ptr:361 [ form_mode::preset_current#6 keyboard_events_size#47 form_cursor_count#21 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::field_idx#2 ] { { form_control::return#0 = form_control::return#2 } { form_field_ptr::field_idx#1 = form_field_ptr::field_idx#2 form_field_idx#28 } { form_field_ptr::return#0 = form_field_ptr::return#3 } }  ) always clobbers reg byte a 
Statement [340] (byte*) form_field_ptr::return#0 ← (byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0 [ form_field_ptr::line#0 form_field_ptr::x#0 form_field_ptr::return#0 ] ( main:2::form_mode:13::form_render_values:267::form_field_ptr:333 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 form_render_values::idx#2 form_field_ptr::line#0 form_field_ptr::x#0 form_field_ptr::return#0 ] { { form_field_ptr::field_idx#0 = form_field_ptr::field_idx#2 form_render_values::idx#2 } }  main:2::form_mode:13::form_render_values:301::form_field_ptr:333 [ form_cursor_count#16 keyboard_events_size#24 form_field_idx#18 form_mode::preset_current#1 form_render_values::idx#2 form_field_ptr::line#0 form_field_ptr::x#0 form_field_ptr::return#0 ] { { form_field_ptr::field_idx#0 = form_field_ptr::field_idx#2 form_render_values::idx#2 } }  main:2::form_mode:13::form_control:292::form_field_ptr:361 [ form_mode::preset_current#6 keyboard_events_size#47 form_cursor_count#21 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_field_ptr::return#0 ] { { form_control::return#0 = form_control::return#2 } { form_field_ptr::field_idx#1 = form_field_ptr::field_idx#2 form_field_idx#28 } { form_field_ptr::return#0 = form_field_ptr::return#3 } }  ) always clobbers reg byte a 
Statement [358] *((const byte*) form_fields_val + (byte) apply_preset::i#2) ← *((byte*) apply_preset::preset#15 + (byte) apply_preset::i#2) [ apply_preset::preset#15 apply_preset::i#2 ] ( main:2::form_mode:13::apply_preset:299 [ form_cursor_count#16 keyboard_events_size#24 form_field_idx#18 apply_preset::preset#15 apply_preset::i#2 ] { }  ) always clobbers reg byte a 
Statement [362] (byte*) form_field_ptr::return#3 ← (byte*) form_field_ptr::return#0 [ keyboard_events_size#47 form_cursor_count#21 form_field_idx#28 form_field_ptr::return#3 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#47 form_cursor_count#21 form_field_idx#28 form_field_ptr::return#3 ] { { form_control::return#0 = form_control::return#2 } { form_field_ptr::field_idx#1 = form_field_ptr::field_idx#2 form_field_idx#28 } { form_field_ptr::return#0 = form_field_ptr::return#3 } }  ) always clobbers reg byte a 
Statement [363] (byte*) form_control::field#0 ← (byte*) form_field_ptr::return#3 [ keyboard_events_size#47 form_cursor_count#21 form_field_idx#28 form_control::field#0 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#47 form_cursor_count#21 form_field_idx#28 form_control::field#0 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte a 
Statement [368] if((signed byte) form_cursor_count#15<(const nomodify signed byte) FORM_CURSOR_BLINK/(signed byte) 2) goto form_control::@2 [ keyboard_events_size#47 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#47 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte a 
Statement [369] (byte~) form_control::$12 ← *((byte*) form_control::field#0) & (byte) $7f [ keyboard_events_size#47 form_field_idx#28 form_control::field#0 form_cursor_count#15 form_control::$12 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#47 form_field_idx#28 form_control::field#0 form_cursor_count#15 form_control::$12 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte a reg byte y 
Statement [370] *((byte*) form_control::field#0) ← (byte~) form_control::$12 [ keyboard_events_size#47 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#47 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte y 
Statement [378] (byte~) form_control::$14 ← *((byte*) form_control::field#0) & (byte) $7f [ keyboard_events_size#24 keyboard_modifiers#21 form_field_idx#28 form_control::field#0 form_control::$14 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#24 keyboard_modifiers#21 form_field_idx#28 form_control::field#0 form_control::$14 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte a reg byte y 
Statement [379] *((byte*) form_control::field#0) ← (byte~) form_control::$14 [ keyboard_events_size#24 keyboard_modifiers#21 form_field_idx#28 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#24 keyboard_modifiers#21 form_field_idx#28 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte y 
Statement [380] (byte~) form_control::$15 ← (byte) keyboard_modifiers#21 & (const nomodify byte) KEY_MODIFIER_SHIFT [ keyboard_events_size#24 form_field_idx#28 form_control::$15 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#24 form_field_idx#28 form_control::$15 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte a 
Statement [392] (byte~) form_control::$22 ← (byte) keyboard_modifiers#21 & (const nomodify byte) KEY_MODIFIER_SHIFT [ keyboard_events_size#24 form_field_idx#28 form_control::field#0 form_cursor_count#15 form_control::$22 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#24 form_field_idx#28 form_control::field#0 form_cursor_count#15 form_control::$22 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte a 
Statement [395] if(*((const byte*) form_fields_val + (byte) form_field_idx#28)!=(byte) $ff) goto form_control::@16 [ keyboard_events_size#24 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#24 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte a 
Statement [396] *((const byte*) form_fields_val + (byte) form_field_idx#28) ← *((const byte*) form_fields_max + (byte) form_field_idx#28) [ keyboard_events_size#24 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#24 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte a 
Statement [397] *((byte*) form_control::field#0) ← *((const to_nomodify byte*) print_hextab + *((const byte*) form_fields_val + (byte) form_field_idx#28)) [ keyboard_events_size#24 form_field_idx#28 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#24 form_field_idx#28 form_cursor_count#15 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte a reg byte y 
Statement [399] if(*((const byte*) form_fields_val + (byte) form_field_idx#28)<=*((const byte*) form_fields_max + (byte) form_field_idx#28)) goto form_control::@16 [ keyboard_events_size#24 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#24 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte a reg byte y 
Statement [400] *((const byte*) form_fields_val + (byte) form_field_idx#28) ← (byte) 0 [ keyboard_events_size#24 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#24 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte a 
Statement [403] (byte~) form_control::$13 ← *((byte*) form_control::field#0) | (byte) $80 [ keyboard_events_size#47 form_field_idx#28 form_control::field#0 form_cursor_count#15 form_control::$13 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#47 form_field_idx#28 form_control::field#0 form_cursor_count#15 form_control::$13 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte a reg byte y 
Statement [404] *((byte*) form_control::field#0) ← (byte~) form_control::$13 [ keyboard_events_size#47 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#47 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] { { form_control::return#0 = form_control::return#2 } }  ) always clobbers reg byte y 
Statement [411] (byte*) form_set_screen::line#1 ← (byte*) form_set_screen::line#2 + (byte) $28 [ form_set_screen::y#2 form_set_screen::line#1 ] ( main:2::form_mode:13::form_set_screen:265 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 form_set_screen::y#2 form_set_screen::line#1 ] { }  ) always clobbers reg byte a 
Statement [416] (byte*) print_char_cursor#72 ← (byte*) print_set_screen::screen#2 [ print_str_lines::str#5 print_char_cursor#72 print_set_screen::screen#2 ] ( main:2::form_mode:13::print_str_lines:257 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#5 print_char_cursor#72 print_set_screen::screen#2 ] { }  main:2::form_mode:13::print_str_lines:263 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#5 print_char_cursor#72 print_set_screen::screen#2 ] { }  ) always clobbers reg byte a 
Statement [418] if((byte) 0!=*((byte*) print_str_lines::str#3)) goto print_str_lines::@2 [ print_str_lines::str#3 print_char_cursor#24 print_line_cursor#2 ] ( main:2::form_mode:13::print_str_lines:257 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#3 print_char_cursor#24 print_line_cursor#2 ] { }  main:2::form_mode:13::print_str_lines:263 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#3 print_char_cursor#24 print_line_cursor#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [421] (byte) print_str_lines::ch#0 ← *((byte*) print_str_lines::str#4) [ print_line_cursor#2 print_str_lines::str#4 print_char_cursor#41 print_str_lines::ch#0 ] ( main:2::form_mode:13::print_str_lines:257 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_line_cursor#2 print_str_lines::str#4 print_char_cursor#41 print_str_lines::ch#0 ] { }  main:2::form_mode:13::print_str_lines:263 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_line_cursor#2 print_str_lines::str#4 print_char_cursor#41 print_str_lines::ch#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [430] (byte*) print_char_cursor#73 ← (byte*) print_line_cursor#22 [ print_str_lines::str#0 print_char_cursor#73 print_line_cursor#22 ] ( main:2::form_mode:13::print_str_lines:257 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#0 print_char_cursor#73 print_line_cursor#22 ] { }  main:2::form_mode:13::print_str_lines:263 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#0 print_char_cursor#73 print_line_cursor#22 ] { }  ) always clobbers reg byte a 
Statement [433] (byte*) print_line_cursor#22 ← (byte*) print_line_cursor#21 + (byte) $28 [ print_line_cursor#22 print_char_cursor#42 ] ( main:2::form_mode:13::print_str_lines:257::print_ln:429 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#0 print_line_cursor#22 print_char_cursor#42 ] { }  main:2::form_mode:13::print_str_lines:263::print_ln:429 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#0 print_line_cursor#22 print_char_cursor#42 ] { }  ) always clobbers reg byte a 
Statement [434] if((byte*) print_line_cursor#22<(byte*) print_char_cursor#42) goto print_ln::@1 [ print_line_cursor#22 print_char_cursor#42 ] ( main:2::form_mode:13::print_str_lines:257::print_ln:429 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#0 print_line_cursor#22 print_char_cursor#42 ] { }  main:2::form_mode:13::print_str_lines:263::print_ln:429 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#0 print_line_cursor#22 print_char_cursor#42 ] { }  ) always clobbers reg byte a 
Statement [436] *((byte*) print_char_cursor#41) ← (byte) print_char::ch#0 [ print_char_cursor#41 ] ( main:2::form_mode:13::print_str_lines:257::print_char:425 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_line_cursor#2 print_str_lines::str#0 print_str_lines::ch#0 print_char_cursor#41 ] { { print_char::ch#0 = print_str_lines::ch#0 } }  main:2::form_mode:13::print_str_lines:263::print_char:425 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_line_cursor#2 print_str_lines::str#0 print_str_lines::ch#0 print_char_cursor#41 ] { { print_char::ch#0 = print_str_lines::ch#0 } }  ) always clobbers reg byte y 
Statement [439] (void*) memset::str#0 ← (void*)(byte*) print_set_screen::screen#2 [ print_set_screen::screen#2 memset::str#0 ] ( main:2::form_mode:13::print_cls:255 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 memset::str#0 ] { }  main:2::form_mode:13::print_cls:261 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 memset::str#0 ] { }  ) always clobbers reg byte a 
Statement [443] (byte*) memset::end#0 ← (byte*)(void*) memset::str#0 + (const word) memset::num#0 [ memset::str#0 memset::end#0 ] ( main:2::form_mode:13::print_cls:255::memset:440 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 memset::str#0 memset::end#0 ] { }  main:2::form_mode:13::print_cls:261::memset:440 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 memset::str#0 memset::end#0 ] { }  ) always clobbers reg byte a 
Statement [444] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#0 [ memset::end#0 memset::dst#4 ] ( main:2::form_mode:13::print_cls:255::memset:440 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 memset::end#0 memset::dst#4 ] { }  main:2::form_mode:13::print_cls:261::memset:440 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 memset::end#0 memset::dst#4 ] { }  ) always clobbers reg byte a 
Statement [446] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 [ memset::end#0 memset::dst#2 ] ( main:2::form_mode:13::print_cls:255::memset:440 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 memset::end#0 memset::dst#2 ] { }  main:2::form_mode:13::print_cls:261::memset:440 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [448] *((byte*) memset::dst#2) ← (const byte) memset::c#0 [ memset::end#0 memset::dst#2 ] ( main:2::form_mode:13::print_cls:255::memset:440 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 memset::end#0 memset::dst#2 ] { }  main:2::form_mode:13::print_cls:261::memset:440 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [487] (dword~) gfx_init_plane_fill::$0 ← (dword) gfx_init_plane_fill::plane_addr#3 << (byte) 2 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$0 ] ( main:2::gfx_init:10::gfx_init_plane_full:481::gfx_init_plane_fill:484 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$0 ] { { dtvSetCpuBankSegment1::cpuBankIdx#11 = dtvSetCpuBankSegment1::cpuBankIdx#13 gfx_init_plane_fill::gfxbCpuBank#0 } }  main:2::gfx_init:10::gfx_init_plane_blank:479::gfx_init_plane_fill:512 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$0 ] { { dtvSetCpuBankSegment1::cpuBankIdx#11 = dtvSetCpuBankSegment1::cpuBankIdx#13 gfx_init_plane_fill::gfxbCpuBank#0 } }  main:2::gfx_init:10::gfx_init_plane_vertical2:477::gfx_init_plane_fill:515 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$0 ] { { dtvSetCpuBankSegment1::cpuBankIdx#11 = dtvSetCpuBankSegment1::cpuBankIdx#13 gfx_init_plane_fill::gfxbCpuBank#0 } }  ) always clobbers reg byte a 
Statement [488] (word~) gfx_init_plane_fill::$1 ← > (dword~) gfx_init_plane_fill::$0 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$1 ] ( main:2::gfx_init:10::gfx_init_plane_full:481::gfx_init_plane_fill:484 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$1 ] { { dtvSetCpuBankSegment1::cpuBankIdx#11 = dtvSetCpuBankSegment1::cpuBankIdx#13 gfx_init_plane_fill::gfxbCpuBank#0 } }  main:2::gfx_init:10::gfx_init_plane_blank:479::gfx_init_plane_fill:512 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$1 ] { { dtvSetCpuBankSegment1::cpuBankIdx#11 = dtvSetCpuBankSegment1::cpuBankIdx#13 gfx_init_plane_fill::gfxbCpuBank#0 } }  main:2::gfx_init:10::gfx_init_plane_vertical2:477::gfx_init_plane_fill:515 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$1 ] { { dtvSetCpuBankSegment1::cpuBankIdx#11 = dtvSetCpuBankSegment1::cpuBankIdx#13 gfx_init_plane_fill::gfxbCpuBank#0 } }  ) always clobbers reg byte a 
Statement [492] (word~) gfx_init_plane_fill::$4 ← < (dword) gfx_init_plane_fill::plane_addr#3 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$4 ] ( main:2::gfx_init:10::gfx_init_plane_full:481::gfx_init_plane_fill:484 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$4 ] { }  main:2::gfx_init:10::gfx_init_plane_blank:479::gfx_init_plane_fill:512 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$4 ] { }  main:2::gfx_init:10::gfx_init_plane_vertical2:477::gfx_init_plane_fill:515 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$4 ] { }  ) always clobbers reg byte a 
Statement [493] (word~) gfx_init_plane_fill::$5 ← (word~) gfx_init_plane_fill::$4 & (word) $3fff [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$5 ] ( main:2::gfx_init:10::gfx_init_plane_full:481::gfx_init_plane_fill:484 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$5 ] { }  main:2::gfx_init:10::gfx_init_plane_blank:479::gfx_init_plane_fill:512 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$5 ] { }  main:2::gfx_init:10::gfx_init_plane_vertical2:477::gfx_init_plane_fill:515 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$5 ] { }  ) always clobbers reg byte a 
Statement [494] (word) gfx_init_plane_fill::gfxb#0 ← (word) $4000 + (word~) gfx_init_plane_fill::$5 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#0 ] ( main:2::gfx_init:10::gfx_init_plane_full:481::gfx_init_plane_fill:484 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#0 ] { }  main:2::gfx_init:10::gfx_init_plane_blank:479::gfx_init_plane_fill:512 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#0 ] { }  main:2::gfx_init:10::gfx_init_plane_vertical2:477::gfx_init_plane_fill:515 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#0 ] { }  ) always clobbers reg byte a 
Statement [495] (byte*) gfx_init_plane_fill::gfxb#6 ← (byte*)(word) gfx_init_plane_fill::gfxb#0 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#6 ] ( main:2::gfx_init:10::gfx_init_plane_full:481::gfx_init_plane_fill:484 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#6 ] { }  main:2::gfx_init:10::gfx_init_plane_blank:479::gfx_init_plane_fill:512 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#6 ] { }  main:2::gfx_init:10::gfx_init_plane_vertical2:477::gfx_init_plane_fill:515 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#6 ] { }  ) always clobbers reg byte a 
Statement [498] *((byte*) gfx_init_plane_fill::gfxb#2) ← (byte) gfx_init_plane_fill::fill#6 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::by#4 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::bx#2 ] ( main:2::gfx_init:10::gfx_init_plane_full:481::gfx_init_plane_fill:484 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::by#4 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::bx#2 ] { }  main:2::gfx_init:10::gfx_init_plane_blank:479::gfx_init_plane_fill:512 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::by#4 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::bx#2 ] { }  main:2::gfx_init:10::gfx_init_plane_vertical2:477::gfx_init_plane_fill:515 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::by#4 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::bx#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement asm { .byte$32,$dd lda$ff .byte$32,$00  } always clobbers reg byte a 
Statement [521] (byte~) gfx_init_plane_horisontal2::$2 ← (byte) gfx_init_plane_horisontal2::ay#4 >> (byte) 1 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::$2 ] ( main:2::gfx_init:10::gfx_init_plane_horisontal2:475 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::$2 ] { }  ) always clobbers reg byte a 
Statement [523] *((byte*) gfx_init_plane_horisontal2::gfxa#2) ← *((const byte*) gfx_init_plane_horisontal2::row_bitmask + (byte) gfx_init_plane_horisontal2::row#0) [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::ax#2 ] ( main:2::gfx_init:10::gfx_init_plane_horisontal2:475 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::ax#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [536] *((byte*) gfx_init_plane_vertical::gfxb#2) ← (byte) $f [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::bx#2 ] ( main:2::gfx_init:10::gfx_init_plane_vertical:473 [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::bx#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [549] (byte~) gfx_init_plane_horisontal::$2 ← (byte) gfx_init_plane_horisontal::ay#4 & (byte) 4 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::ax#2 gfx_init_plane_horisontal::$2 ] ( main:2::gfx_init:10::gfx_init_plane_horisontal:471 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::ax#2 gfx_init_plane_horisontal::$2 ] { }  ) always clobbers reg byte a 
Statement [551] *((byte*) gfx_init_plane_horisontal::gfxa#3) ← (byte) $ff [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::ax#2 ] ( main:2::gfx_init:10::gfx_init_plane_horisontal:471 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::ax#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [561] *((byte*) gfx_init_plane_horisontal::gfxa#3) ← (byte) 0 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::ax#2 ] ( main:2::gfx_init:10::gfx_init_plane_horisontal:471 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::ax#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [565] *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_RAM_CHARROM [ ] ( main:2::gfx_init:10::gfx_init_plane_charset8:469 [ ] { }  ) always clobbers reg byte a 
Statement [568] (byte) gfx_init_plane_charset8::bits#0 ← *((byte*) gfx_init_plane_charset8::chargen#2) [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::bits#0 ] ( main:2::gfx_init:10::gfx_init_plane_charset8:469 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::bits#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [575] *((byte*) gfx_init_plane_charset8::gfxa#2) ← (byte) gfx_init_plane_charset8::c#2 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::chargen#1 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::cp#2 ] ( main:2::gfx_init:10::gfx_init_plane_charset8:469 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::chargen#1 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::cp#2 ] { }  ) always clobbers reg byte y 
Statement [585] *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_RAM_IO [ ] ( main:2::gfx_init:10::gfx_init_plane_charset8:469 [ ] { }  ) always clobbers reg byte a 
Statement [592] if((byte*) gfx_init_plane_8bppchunky::gfxb#3!=(word) $8000) goto gfx_init_plane_8bppchunky::@3 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxbCpuBank#4 ] ( main:2::gfx_init:10::gfx_init_plane_8bppchunky:467 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxbCpuBank#4 ] { }  ) always clobbers reg byte a 
Statement [597] (word~) gfx_init_plane_8bppchunky::$5 ← (word) gfx_init_plane_8bppchunky::x#2 + (byte) gfx_init_plane_8bppchunky::y#6 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::$5 ] ( main:2::gfx_init:10::gfx_init_plane_8bppchunky:467 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::$5 ] { }  ) always clobbers reg byte a 
Statement [598] (byte) gfx_init_plane_8bppchunky::c#0 ← (byte)(word~) gfx_init_plane_8bppchunky::$5 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::c#0 ] ( main:2::gfx_init:10::gfx_init_plane_8bppchunky:467 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::c#0 ] { }  ) always clobbers reg byte a 
Statement [599] *((byte*) gfx_init_plane_8bppchunky::gfxb#4) ← (byte) gfx_init_plane_8bppchunky::c#0 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 ] ( main:2::gfx_init:10::gfx_init_plane_8bppchunky:467 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 ] { }  ) always clobbers reg byte y 
Statement [602] if((word) gfx_init_plane_8bppchunky::x#1!=(word) $140) goto gfx_init_plane_8bppchunky::@2 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxb#1 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#1 ] ( main:2::gfx_init:10::gfx_init_plane_8bppchunky:467 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxb#1 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#1 ] { }  ) always clobbers reg byte a 
Statement [622] (byte) bitmap_line::xd#2 ← (byte) bitmap_line::x0#0 - (byte) bitmap_line::x1#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619 [ gfx_init_vic_bitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 ] { }  ) always clobbers reg byte a 
Statement [624] (byte) bitmap_line::yd#2 ← (byte) bitmap_line::y0#0 - (byte) bitmap_line::y1#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 bitmap_line::yd#2 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619 [ gfx_init_vic_bitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 bitmap_line::yd#2 ] { }  ) always clobbers reg byte a 
Statement [639] (byte) bitmap_line::yd#1 ← (byte) bitmap_line::y1#0 - (byte) bitmap_line::y0#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 bitmap_line::yd#1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619 [ gfx_init_vic_bitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 bitmap_line::yd#1 ] { }  ) always clobbers reg byte a 
Statement [653] (byte) bitmap_line::xd#1 ← (byte) bitmap_line::x1#0 - (byte) bitmap_line::x0#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619 [ gfx_init_vic_bitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 ] { }  ) always clobbers reg byte a 
Statement [655] (byte) bitmap_line::yd#10 ← (byte) bitmap_line::y0#0 - (byte) bitmap_line::y1#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 bitmap_line::yd#10 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619 [ gfx_init_vic_bitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 bitmap_line::yd#10 ] { }  ) always clobbers reg byte a 
Statement [669] (byte) bitmap_line::yd#11 ← (byte) bitmap_line::y1#0 - (byte) bitmap_line::y0#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 bitmap_line::yd#11 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619 [ gfx_init_vic_bitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 bitmap_line::yd#11 ] { }  ) always clobbers reg byte a 
Statement [684] (byte) bitmap_line_xdyi::e#0 ← (byte) bitmap_line_xdyi::yd#2 >> (byte) 1 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::x#6 bitmap_line_xdyi::y#5 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::e#0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyi:638 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::x#6 bitmap_line_xdyi::y#5 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::e#0 ] { { bitmap_line_xdyi::yd#0 = bitmap_line_xdyi::yd#2 bitmap_line::yd#2 } { bitmap_line_xdyi::x#0 = bitmap_line_xdyi::x#6 bitmap_line::x1#0 } { bitmap_line_xdyi::y#0 = bitmap_line_xdyi::y#5 bitmap_line::y1#0 } { bitmap_line_xdyi::xd#0 = bitmap_line_xdyi::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyi::x1#0 = bitmap_line_xdyi::x1#6 bitmap_line::x0#0 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyi:682 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::x#6 bitmap_line_xdyi::y#5 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::e#0 ] { { bitmap_line_xdyi::yd#1 = bitmap_line_xdyi::yd#2 bitmap_line::yd#11 } { bitmap_line_xdyi::x#1 = bitmap_line_xdyi::x#6 bitmap_line::x0#0 } { bitmap_line_xdyi::y#1 = bitmap_line_xdyi::y#5 bitmap_line::y0#0 } { bitmap_line_xdyi::xd#1 = bitmap_line_xdyi::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyi::x1#1 = bitmap_line_xdyi::x1#6 bitmap_line::x1#0 } }  ) always clobbers reg byte a 
Statement [690] (byte) bitmap_line_xdyi::e#1 ← (byte) bitmap_line_xdyi::e#3 + (byte) bitmap_line_xdyi::yd#2 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::y#3 bitmap_line_xdyi::x#2 bitmap_line_xdyi::e#1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyi:638 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::y#3 bitmap_line_xdyi::x#2 bitmap_line_xdyi::e#1 ] { { bitmap_line_xdyi::yd#0 = bitmap_line_xdyi::yd#2 bitmap_line::yd#2 } { bitmap_line_xdyi::x#0 = bitmap_line_xdyi::x#6 bitmap_line::x1#0 } { bitmap_line_xdyi::y#0 = bitmap_line_xdyi::y#5 bitmap_line::y1#0 } { bitmap_line_xdyi::xd#0 = bitmap_line_xdyi::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyi::x1#0 = bitmap_line_xdyi::x1#6 bitmap_line::x0#0 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyi:682 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::y#3 bitmap_line_xdyi::x#2 bitmap_line_xdyi::e#1 ] { { bitmap_line_xdyi::yd#1 = bitmap_line_xdyi::yd#2 bitmap_line::yd#11 } { bitmap_line_xdyi::x#1 = bitmap_line_xdyi::x#6 bitmap_line::x0#0 } { bitmap_line_xdyi::y#1 = bitmap_line_xdyi::y#5 bitmap_line::y0#0 } { bitmap_line_xdyi::xd#1 = bitmap_line_xdyi::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyi::x1#1 = bitmap_line_xdyi::x1#6 bitmap_line::x1#0 } }  ) always clobbers reg byte a 
Statement [693] (byte) bitmap_line_xdyi::e#2 ← (byte) bitmap_line_xdyi::e#1 - (byte) bitmap_line_xdyi::xd#5 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#2 bitmap_line_xdyi::y#2 bitmap_line_xdyi::e#2 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyi:638 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#2 bitmap_line_xdyi::y#2 bitmap_line_xdyi::e#2 ] { { bitmap_line_xdyi::yd#0 = bitmap_line_xdyi::yd#2 bitmap_line::yd#2 } { bitmap_line_xdyi::x#0 = bitmap_line_xdyi::x#6 bitmap_line::x1#0 } { bitmap_line_xdyi::y#0 = bitmap_line_xdyi::y#5 bitmap_line::y1#0 } { bitmap_line_xdyi::xd#0 = bitmap_line_xdyi::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyi::x1#0 = bitmap_line_xdyi::x1#6 bitmap_line::x0#0 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyi:682 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#2 bitmap_line_xdyi::y#2 bitmap_line_xdyi::e#2 ] { { bitmap_line_xdyi::yd#1 = bitmap_line_xdyi::yd#2 bitmap_line::yd#11 } { bitmap_line_xdyi::x#1 = bitmap_line_xdyi::x#6 bitmap_line::x0#0 } { bitmap_line_xdyi::y#1 = bitmap_line_xdyi::y#5 bitmap_line::y0#0 } { bitmap_line_xdyi::xd#1 = bitmap_line_xdyi::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyi::x1#1 = bitmap_line_xdyi::x1#6 bitmap_line::x1#0 } }  ) always clobbers reg byte a 
Statement [699] (word) bitmap_plot::plotter_x#0 ← *((const to_nomodify byte*) bitmap_plot_xhi + (byte) bitmap_plot::x#4) w= *((const to_nomodify byte*) bitmap_plot_xlo + (byte) bitmap_plot::x#4) [ bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyi:638::bitmap_plot:688 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] { { bitmap_line_xdyi::yd#0 = bitmap_line_xdyi::yd#2 bitmap_line::yd#2 } { bitmap_line_xdyi::x#0 = bitmap_line_xdyi::x#6 bitmap_line::x1#0 } { bitmap_line_xdyi::y#0 = bitmap_line_xdyi::y#5 bitmap_line::y1#0 } { bitmap_line_xdyi::xd#0 = bitmap_line_xdyi::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyi::x1#0 = bitmap_line_xdyi::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyi:682::bitmap_plot:688 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] { { bitmap_line_xdyi::yd#1 = bitmap_line_xdyi::yd#2 bitmap_line::yd#11 } { bitmap_line_xdyi::x#1 = bitmap_line_xdyi::x#6 bitmap_line::x0#0 } { bitmap_line_xdyi::y#1 = bitmap_line_xdyi::y#5 bitmap_line::y0#0 } { bitmap_line_xdyi::xd#1 = bitmap_line_xdyi::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyi::x1#1 = bitmap_line_xdyi::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxi:631::bitmap_plot:710 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] { { bitmap_line_ydxi::xd#0 = bitmap_line_ydxi::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxi::x#0 = bitmap_line_ydxi::x#5 bitmap_line::x1#0 } { bitmap_line_ydxi::y#0 = bitmap_line_ydxi::y#6 bitmap_line::y1#0 } { bitmap_line_ydxi::yd#0 = bitmap_line_ydxi::yd#5 bitmap_line::yd#2 } { bitmap_line_ydxi::y1#0 = bitmap_line_ydxi::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxi:676::bitmap_plot:710 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] { { bitmap_line_ydxi::xd#1 = bitmap_line_ydxi::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxi::x#1 = bitmap_line_ydxi::x#5 bitmap_line::x0#0 } { bitmap_line_ydxi::y#1 = bitmap_line_ydxi::y#6 bitmap_line::y0#0 } { bitmap_line_ydxi::yd#1 = bitmap_line_ydxi::yd#5 bitmap_line::yd#11 } { bitmap_line_ydxi::y1#1 = bitmap_line_ydxi::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyd:652::bitmap_plot:725 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] { { bitmap_line_xdyd::yd#0 = bitmap_line_xdyd::yd#2 bitmap_line::yd#1 } { bitmap_line_xdyd::x#0 = bitmap_line_xdyd::x#6 bitmap_line::x1#0 } { bitmap_line_xdyd::y#0 = bitmap_line_xdyd::y#5 bitmap_line::y1#0 } { bitmap_line_xdyd::xd#0 = bitmap_line_xdyd::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyd::x1#0 = bitmap_line_xdyd::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyd:668::bitmap_plot:725 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] { { bitmap_line_xdyd::yd#1 = bitmap_line_xdyd::yd#2 bitmap_line::yd#10 } { bitmap_line_xdyd::x#1 = bitmap_line_xdyd::x#6 bitmap_line::x0#0 } { bitmap_line_xdyd::y#1 = bitmap_line_xdyd::y#5 bitmap_line::y0#0 } { bitmap_line_xdyd::xd#1 = bitmap_line_xdyd::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyd::x1#1 = bitmap_line_xdyd::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxd:646::bitmap_plot:740 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] { { bitmap_line_ydxd::xd#0 = bitmap_line_ydxd::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxd::x#0 = bitmap_line_ydxd::x#5 bitmap_line::x0#0 } { bitmap_line_ydxd::y#0 = bitmap_line_ydxd::y#7 bitmap_line::y0#0 } { bitmap_line_ydxd::yd#0 = bitmap_line_ydxd::yd#5 bitmap_line::yd#1 } { bitmap_line_ydxd::y1#0 = bitmap_line_ydxd::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxd:662::bitmap_plot:740 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] { { bitmap_line_ydxd::xd#1 = bitmap_line_ydxd::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxd::x#1 = bitmap_line_ydxd::x#5 bitmap_line::x1#0 } { bitmap_line_ydxd::y#1 = bitmap_line_ydxd::y#7 bitmap_line::y1#0 } { bitmap_line_ydxd::yd#1 = bitmap_line_ydxd::yd#5 bitmap_line::yd#10 } { bitmap_line_ydxd::y1#1 = bitmap_line_ydxd::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  ) always clobbers reg byte a 
Statement [700] (word) bitmap_plot::plotter_y#0 ← *((const to_nomodify byte*) bitmap_plot_yhi + (byte) bitmap_plot::y#4) w= *((const to_nomodify byte*) bitmap_plot_ylo + (byte) bitmap_plot::y#4) [ bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyi:638::bitmap_plot:688 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] { { bitmap_line_xdyi::yd#0 = bitmap_line_xdyi::yd#2 bitmap_line::yd#2 } { bitmap_line_xdyi::x#0 = bitmap_line_xdyi::x#6 bitmap_line::x1#0 } { bitmap_line_xdyi::y#0 = bitmap_line_xdyi::y#5 bitmap_line::y1#0 } { bitmap_line_xdyi::xd#0 = bitmap_line_xdyi::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyi::x1#0 = bitmap_line_xdyi::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyi:682::bitmap_plot:688 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] { { bitmap_line_xdyi::yd#1 = bitmap_line_xdyi::yd#2 bitmap_line::yd#11 } { bitmap_line_xdyi::x#1 = bitmap_line_xdyi::x#6 bitmap_line::x0#0 } { bitmap_line_xdyi::y#1 = bitmap_line_xdyi::y#5 bitmap_line::y0#0 } { bitmap_line_xdyi::xd#1 = bitmap_line_xdyi::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyi::x1#1 = bitmap_line_xdyi::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxi:631::bitmap_plot:710 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] { { bitmap_line_ydxi::xd#0 = bitmap_line_ydxi::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxi::x#0 = bitmap_line_ydxi::x#5 bitmap_line::x1#0 } { bitmap_line_ydxi::y#0 = bitmap_line_ydxi::y#6 bitmap_line::y1#0 } { bitmap_line_ydxi::yd#0 = bitmap_line_ydxi::yd#5 bitmap_line::yd#2 } { bitmap_line_ydxi::y1#0 = bitmap_line_ydxi::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxi:676::bitmap_plot:710 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] { { bitmap_line_ydxi::xd#1 = bitmap_line_ydxi::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxi::x#1 = bitmap_line_ydxi::x#5 bitmap_line::x0#0 } { bitmap_line_ydxi::y#1 = bitmap_line_ydxi::y#6 bitmap_line::y0#0 } { bitmap_line_ydxi::yd#1 = bitmap_line_ydxi::yd#5 bitmap_line::yd#11 } { bitmap_line_ydxi::y1#1 = bitmap_line_ydxi::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyd:652::bitmap_plot:725 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] { { bitmap_line_xdyd::yd#0 = bitmap_line_xdyd::yd#2 bitmap_line::yd#1 } { bitmap_line_xdyd::x#0 = bitmap_line_xdyd::x#6 bitmap_line::x1#0 } { bitmap_line_xdyd::y#0 = bitmap_line_xdyd::y#5 bitmap_line::y1#0 } { bitmap_line_xdyd::xd#0 = bitmap_line_xdyd::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyd::x1#0 = bitmap_line_xdyd::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyd:668::bitmap_plot:725 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] { { bitmap_line_xdyd::yd#1 = bitmap_line_xdyd::yd#2 bitmap_line::yd#10 } { bitmap_line_xdyd::x#1 = bitmap_line_xdyd::x#6 bitmap_line::x0#0 } { bitmap_line_xdyd::y#1 = bitmap_line_xdyd::y#5 bitmap_line::y0#0 } { bitmap_line_xdyd::xd#1 = bitmap_line_xdyd::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyd::x1#1 = bitmap_line_xdyd::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxd:646::bitmap_plot:740 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] { { bitmap_line_ydxd::xd#0 = bitmap_line_ydxd::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxd::x#0 = bitmap_line_ydxd::x#5 bitmap_line::x0#0 } { bitmap_line_ydxd::y#0 = bitmap_line_ydxd::y#7 bitmap_line::y0#0 } { bitmap_line_ydxd::yd#0 = bitmap_line_ydxd::yd#5 bitmap_line::yd#1 } { bitmap_line_ydxd::y1#0 = bitmap_line_ydxd::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxd:662::bitmap_plot:740 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] { { bitmap_line_ydxd::xd#1 = bitmap_line_ydxd::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxd::x#1 = bitmap_line_ydxd::x#5 bitmap_line::x1#0 } { bitmap_line_ydxd::y#1 = bitmap_line_ydxd::y#7 bitmap_line::y1#0 } { bitmap_line_ydxd::yd#1 = bitmap_line_ydxd::yd#5 bitmap_line::yd#10 } { bitmap_line_ydxd::y1#1 = bitmap_line_ydxd::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  ) always clobbers reg byte a 
Statement [701] (word) bitmap_plot::plotter#0 ← (word) bitmap_plot::plotter_x#0 + (word) bitmap_plot::plotter_y#0 [ bitmap_plot::x#4 bitmap_plot::plotter#0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyi:638::bitmap_plot:688 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_line_xdyi::yd#0 = bitmap_line_xdyi::yd#2 bitmap_line::yd#2 } { bitmap_line_xdyi::x#0 = bitmap_line_xdyi::x#6 bitmap_line::x1#0 } { bitmap_line_xdyi::y#0 = bitmap_line_xdyi::y#5 bitmap_line::y1#0 } { bitmap_line_xdyi::xd#0 = bitmap_line_xdyi::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyi::x1#0 = bitmap_line_xdyi::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyi:682::bitmap_plot:688 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_line_xdyi::yd#1 = bitmap_line_xdyi::yd#2 bitmap_line::yd#11 } { bitmap_line_xdyi::x#1 = bitmap_line_xdyi::x#6 bitmap_line::x0#0 } { bitmap_line_xdyi::y#1 = bitmap_line_xdyi::y#5 bitmap_line::y0#0 } { bitmap_line_xdyi::xd#1 = bitmap_line_xdyi::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyi::x1#1 = bitmap_line_xdyi::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxi:631::bitmap_plot:710 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_line_ydxi::xd#0 = bitmap_line_ydxi::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxi::x#0 = bitmap_line_ydxi::x#5 bitmap_line::x1#0 } { bitmap_line_ydxi::y#0 = bitmap_line_ydxi::y#6 bitmap_line::y1#0 } { bitmap_line_ydxi::yd#0 = bitmap_line_ydxi::yd#5 bitmap_line::yd#2 } { bitmap_line_ydxi::y1#0 = bitmap_line_ydxi::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxi:676::bitmap_plot:710 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_line_ydxi::xd#1 = bitmap_line_ydxi::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxi::x#1 = bitmap_line_ydxi::x#5 bitmap_line::x0#0 } { bitmap_line_ydxi::y#1 = bitmap_line_ydxi::y#6 bitmap_line::y0#0 } { bitmap_line_ydxi::yd#1 = bitmap_line_ydxi::yd#5 bitmap_line::yd#11 } { bitmap_line_ydxi::y1#1 = bitmap_line_ydxi::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyd:652::bitmap_plot:725 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_line_xdyd::yd#0 = bitmap_line_xdyd::yd#2 bitmap_line::yd#1 } { bitmap_line_xdyd::x#0 = bitmap_line_xdyd::x#6 bitmap_line::x1#0 } { bitmap_line_xdyd::y#0 = bitmap_line_xdyd::y#5 bitmap_line::y1#0 } { bitmap_line_xdyd::xd#0 = bitmap_line_xdyd::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyd::x1#0 = bitmap_line_xdyd::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyd:668::bitmap_plot:725 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_line_xdyd::yd#1 = bitmap_line_xdyd::yd#2 bitmap_line::yd#10 } { bitmap_line_xdyd::x#1 = bitmap_line_xdyd::x#6 bitmap_line::x0#0 } { bitmap_line_xdyd::y#1 = bitmap_line_xdyd::y#5 bitmap_line::y0#0 } { bitmap_line_xdyd::xd#1 = bitmap_line_xdyd::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyd::x1#1 = bitmap_line_xdyd::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxd:646::bitmap_plot:740 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_line_ydxd::xd#0 = bitmap_line_ydxd::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxd::x#0 = bitmap_line_ydxd::x#5 bitmap_line::x0#0 } { bitmap_line_ydxd::y#0 = bitmap_line_ydxd::y#7 bitmap_line::y0#0 } { bitmap_line_ydxd::yd#0 = bitmap_line_ydxd::yd#5 bitmap_line::yd#1 } { bitmap_line_ydxd::y1#0 = bitmap_line_ydxd::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxd:662::bitmap_plot:740 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { bitmap_line_ydxd::xd#1 = bitmap_line_ydxd::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxd::x#1 = bitmap_line_ydxd::x#5 bitmap_line::x1#0 } { bitmap_line_ydxd::y#1 = bitmap_line_ydxd::y#7 bitmap_line::y1#0 } { bitmap_line_ydxd::yd#1 = bitmap_line_ydxd::yd#5 bitmap_line::yd#10 } { bitmap_line_ydxd::y1#1 = bitmap_line_ydxd::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  ) always clobbers reg byte a 
Statement [702] (byte~) bitmap_plot::$1 ← *((byte*)(word) bitmap_plot::plotter#0) | *((const to_nomodify byte*) bitmap_plot_bit + (byte) bitmap_plot::x#4) [ bitmap_plot::plotter#0 bitmap_plot::$1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyi:638::bitmap_plot:688 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] { { bitmap_line_xdyi::yd#0 = bitmap_line_xdyi::yd#2 bitmap_line::yd#2 } { bitmap_line_xdyi::x#0 = bitmap_line_xdyi::x#6 bitmap_line::x1#0 } { bitmap_line_xdyi::y#0 = bitmap_line_xdyi::y#5 bitmap_line::y1#0 } { bitmap_line_xdyi::xd#0 = bitmap_line_xdyi::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyi::x1#0 = bitmap_line_xdyi::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyi:682::bitmap_plot:688 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] { { bitmap_line_xdyi::yd#1 = bitmap_line_xdyi::yd#2 bitmap_line::yd#11 } { bitmap_line_xdyi::x#1 = bitmap_line_xdyi::x#6 bitmap_line::x0#0 } { bitmap_line_xdyi::y#1 = bitmap_line_xdyi::y#5 bitmap_line::y0#0 } { bitmap_line_xdyi::xd#1 = bitmap_line_xdyi::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyi::x1#1 = bitmap_line_xdyi::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxi:631::bitmap_plot:710 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] { { bitmap_line_ydxi::xd#0 = bitmap_line_ydxi::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxi::x#0 = bitmap_line_ydxi::x#5 bitmap_line::x1#0 } { bitmap_line_ydxi::y#0 = bitmap_line_ydxi::y#6 bitmap_line::y1#0 } { bitmap_line_ydxi::yd#0 = bitmap_line_ydxi::yd#5 bitmap_line::yd#2 } { bitmap_line_ydxi::y1#0 = bitmap_line_ydxi::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxi:676::bitmap_plot:710 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] { { bitmap_line_ydxi::xd#1 = bitmap_line_ydxi::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxi::x#1 = bitmap_line_ydxi::x#5 bitmap_line::x0#0 } { bitmap_line_ydxi::y#1 = bitmap_line_ydxi::y#6 bitmap_line::y0#0 } { bitmap_line_ydxi::yd#1 = bitmap_line_ydxi::yd#5 bitmap_line::yd#11 } { bitmap_line_ydxi::y1#1 = bitmap_line_ydxi::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyd:652::bitmap_plot:725 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] { { bitmap_line_xdyd::yd#0 = bitmap_line_xdyd::yd#2 bitmap_line::yd#1 } { bitmap_line_xdyd::x#0 = bitmap_line_xdyd::x#6 bitmap_line::x1#0 } { bitmap_line_xdyd::y#0 = bitmap_line_xdyd::y#5 bitmap_line::y1#0 } { bitmap_line_xdyd::xd#0 = bitmap_line_xdyd::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyd::x1#0 = bitmap_line_xdyd::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyd:668::bitmap_plot:725 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] { { bitmap_line_xdyd::yd#1 = bitmap_line_xdyd::yd#2 bitmap_line::yd#10 } { bitmap_line_xdyd::x#1 = bitmap_line_xdyd::x#6 bitmap_line::x0#0 } { bitmap_line_xdyd::y#1 = bitmap_line_xdyd::y#5 bitmap_line::y0#0 } { bitmap_line_xdyd::xd#1 = bitmap_line_xdyd::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyd::x1#1 = bitmap_line_xdyd::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxd:646::bitmap_plot:740 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] { { bitmap_line_ydxd::xd#0 = bitmap_line_ydxd::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxd::x#0 = bitmap_line_ydxd::x#5 bitmap_line::x0#0 } { bitmap_line_ydxd::y#0 = bitmap_line_ydxd::y#7 bitmap_line::y0#0 } { bitmap_line_ydxd::yd#0 = bitmap_line_ydxd::yd#5 bitmap_line::yd#1 } { bitmap_line_ydxd::y1#0 = bitmap_line_ydxd::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxd:662::bitmap_plot:740 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] { { bitmap_line_ydxd::xd#1 = bitmap_line_ydxd::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxd::x#1 = bitmap_line_ydxd::x#5 bitmap_line::x1#0 } { bitmap_line_ydxd::y#1 = bitmap_line_ydxd::y#7 bitmap_line::y1#0 } { bitmap_line_ydxd::yd#1 = bitmap_line_ydxd::yd#5 bitmap_line::yd#10 } { bitmap_line_ydxd::y1#1 = bitmap_line_ydxd::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  ) always clobbers reg byte a reg byte y 
Statement [703] *((byte*)(word) bitmap_plot::plotter#0) ← (byte~) bitmap_plot::$1 [ ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyi:638::bitmap_plot:688 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 ] { { bitmap_line_xdyi::yd#0 = bitmap_line_xdyi::yd#2 bitmap_line::yd#2 } { bitmap_line_xdyi::x#0 = bitmap_line_xdyi::x#6 bitmap_line::x1#0 } { bitmap_line_xdyi::y#0 = bitmap_line_xdyi::y#5 bitmap_line::y1#0 } { bitmap_line_xdyi::xd#0 = bitmap_line_xdyi::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyi::x1#0 = bitmap_line_xdyi::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyi:682::bitmap_plot:688 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 ] { { bitmap_line_xdyi::yd#1 = bitmap_line_xdyi::yd#2 bitmap_line::yd#11 } { bitmap_line_xdyi::x#1 = bitmap_line_xdyi::x#6 bitmap_line::x0#0 } { bitmap_line_xdyi::y#1 = bitmap_line_xdyi::y#5 bitmap_line::y0#0 } { bitmap_line_xdyi::xd#1 = bitmap_line_xdyi::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyi::x1#1 = bitmap_line_xdyi::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line_xdyi::x#3 } { bitmap_plot::y#0 = bitmap_plot::y#4 bitmap_line_xdyi::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxi:631::bitmap_plot:710 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 ] { { bitmap_line_ydxi::xd#0 = bitmap_line_ydxi::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxi::x#0 = bitmap_line_ydxi::x#5 bitmap_line::x1#0 } { bitmap_line_ydxi::y#0 = bitmap_line_ydxi::y#6 bitmap_line::y1#0 } { bitmap_line_ydxi::yd#0 = bitmap_line_ydxi::yd#5 bitmap_line::yd#2 } { bitmap_line_ydxi::y1#0 = bitmap_line_ydxi::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxi:676::bitmap_plot:710 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 ] { { bitmap_line_ydxi::xd#1 = bitmap_line_ydxi::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxi::x#1 = bitmap_line_ydxi::x#5 bitmap_line::x0#0 } { bitmap_line_ydxi::y#1 = bitmap_line_ydxi::y#6 bitmap_line::y0#0 } { bitmap_line_ydxi::yd#1 = bitmap_line_ydxi::yd#5 bitmap_line::yd#11 } { bitmap_line_ydxi::y1#1 = bitmap_line_ydxi::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line_ydxi::x#3 } { bitmap_plot::y#2 = bitmap_plot::y#4 bitmap_line_ydxi::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyd:652::bitmap_plot:725 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 ] { { bitmap_line_xdyd::yd#0 = bitmap_line_xdyd::yd#2 bitmap_line::yd#1 } { bitmap_line_xdyd::x#0 = bitmap_line_xdyd::x#6 bitmap_line::x1#0 } { bitmap_line_xdyd::y#0 = bitmap_line_xdyd::y#5 bitmap_line::y1#0 } { bitmap_line_xdyd::xd#0 = bitmap_line_xdyd::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyd::x1#0 = bitmap_line_xdyd::x1#6 bitmap_line::x0#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyd:668::bitmap_plot:725 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 ] { { bitmap_line_xdyd::yd#1 = bitmap_line_xdyd::yd#2 bitmap_line::yd#10 } { bitmap_line_xdyd::x#1 = bitmap_line_xdyd::x#6 bitmap_line::x0#0 } { bitmap_line_xdyd::y#1 = bitmap_line_xdyd::y#5 bitmap_line::y0#0 } { bitmap_line_xdyd::xd#1 = bitmap_line_xdyd::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyd::x1#1 = bitmap_line_xdyd::x1#6 bitmap_line::x1#0 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line_xdyd::x#3 } { bitmap_plot::y#1 = bitmap_plot::y#4 bitmap_line_xdyd::y#3 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxd:646::bitmap_plot:740 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 ] { { bitmap_line_ydxd::xd#0 = bitmap_line_ydxd::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxd::x#0 = bitmap_line_ydxd::x#5 bitmap_line::x0#0 } { bitmap_line_ydxd::y#0 = bitmap_line_ydxd::y#7 bitmap_line::y0#0 } { bitmap_line_ydxd::yd#0 = bitmap_line_ydxd::yd#5 bitmap_line::yd#1 } { bitmap_line_ydxd::y1#0 = bitmap_line_ydxd::y1#6 bitmap_line::y1#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxd:662::bitmap_plot:740 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 ] { { bitmap_line_ydxd::xd#1 = bitmap_line_ydxd::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxd::x#1 = bitmap_line_ydxd::x#5 bitmap_line::x1#0 } { bitmap_line_ydxd::y#1 = bitmap_line_ydxd::y#7 bitmap_line::y1#0 } { bitmap_line_ydxd::yd#1 = bitmap_line_ydxd::yd#5 bitmap_line::yd#10 } { bitmap_line_ydxd::y1#1 = bitmap_line_ydxd::y1#6 bitmap_line::y0#0 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line_ydxd::x#3 } { bitmap_plot::y#3 = bitmap_plot::y#4 bitmap_line_ydxd::y#2 } }  ) always clobbers reg byte y 
Statement [706] (byte) bitmap_line_ydxi::e#0 ← (byte) bitmap_line_ydxi::xd#2 >> (byte) 1 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::x#5 bitmap_line_ydxi::y#6 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::e#0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxi:631 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::x#5 bitmap_line_ydxi::y#6 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::e#0 ] { { bitmap_line_ydxi::xd#0 = bitmap_line_ydxi::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxi::x#0 = bitmap_line_ydxi::x#5 bitmap_line::x1#0 } { bitmap_line_ydxi::y#0 = bitmap_line_ydxi::y#6 bitmap_line::y1#0 } { bitmap_line_ydxi::yd#0 = bitmap_line_ydxi::yd#5 bitmap_line::yd#2 } { bitmap_line_ydxi::y1#0 = bitmap_line_ydxi::y1#6 bitmap_line::y0#0 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxi:676 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::x#5 bitmap_line_ydxi::y#6 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::e#0 ] { { bitmap_line_ydxi::xd#1 = bitmap_line_ydxi::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxi::x#1 = bitmap_line_ydxi::x#5 bitmap_line::x0#0 } { bitmap_line_ydxi::y#1 = bitmap_line_ydxi::y#6 bitmap_line::y0#0 } { bitmap_line_ydxi::yd#1 = bitmap_line_ydxi::yd#5 bitmap_line::yd#11 } { bitmap_line_ydxi::y1#1 = bitmap_line_ydxi::y1#6 bitmap_line::y1#0 } }  ) always clobbers reg byte a 
Statement [712] (byte) bitmap_line_ydxi::e#1 ← (byte) bitmap_line_ydxi::e#3 + (byte) bitmap_line_ydxi::xd#2 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#2 bitmap_line_ydxi::e#1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxi:631 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#2 bitmap_line_ydxi::e#1 ] { { bitmap_line_ydxi::xd#0 = bitmap_line_ydxi::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxi::x#0 = bitmap_line_ydxi::x#5 bitmap_line::x1#0 } { bitmap_line_ydxi::y#0 = bitmap_line_ydxi::y#6 bitmap_line::y1#0 } { bitmap_line_ydxi::yd#0 = bitmap_line_ydxi::yd#5 bitmap_line::yd#2 } { bitmap_line_ydxi::y1#0 = bitmap_line_ydxi::y1#6 bitmap_line::y0#0 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxi:676 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#2 bitmap_line_ydxi::e#1 ] { { bitmap_line_ydxi::xd#1 = bitmap_line_ydxi::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxi::x#1 = bitmap_line_ydxi::x#5 bitmap_line::x0#0 } { bitmap_line_ydxi::y#1 = bitmap_line_ydxi::y#6 bitmap_line::y0#0 } { bitmap_line_ydxi::yd#1 = bitmap_line_ydxi::yd#5 bitmap_line::yd#11 } { bitmap_line_ydxi::y1#1 = bitmap_line_ydxi::y1#6 bitmap_line::y1#0 } }  ) always clobbers reg byte a 
Statement [715] (byte) bitmap_line_ydxi::e#2 ← (byte) bitmap_line_ydxi::e#1 - (byte) bitmap_line_ydxi::yd#5 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y#2 bitmap_line_ydxi::x#2 bitmap_line_ydxi::e#2 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxi:631 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y#2 bitmap_line_ydxi::x#2 bitmap_line_ydxi::e#2 ] { { bitmap_line_ydxi::xd#0 = bitmap_line_ydxi::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxi::x#0 = bitmap_line_ydxi::x#5 bitmap_line::x1#0 } { bitmap_line_ydxi::y#0 = bitmap_line_ydxi::y#6 bitmap_line::y1#0 } { bitmap_line_ydxi::yd#0 = bitmap_line_ydxi::yd#5 bitmap_line::yd#2 } { bitmap_line_ydxi::y1#0 = bitmap_line_ydxi::y1#6 bitmap_line::y0#0 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxi:676 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y#2 bitmap_line_ydxi::x#2 bitmap_line_ydxi::e#2 ] { { bitmap_line_ydxi::xd#1 = bitmap_line_ydxi::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxi::x#1 = bitmap_line_ydxi::x#5 bitmap_line::x0#0 } { bitmap_line_ydxi::y#1 = bitmap_line_ydxi::y#6 bitmap_line::y0#0 } { bitmap_line_ydxi::yd#1 = bitmap_line_ydxi::yd#5 bitmap_line::yd#11 } { bitmap_line_ydxi::y1#1 = bitmap_line_ydxi::y1#6 bitmap_line::y1#0 } }  ) always clobbers reg byte a 
Statement [721] (byte) bitmap_line_xdyd::e#0 ← (byte) bitmap_line_xdyd::yd#2 >> (byte) 1 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::x#6 bitmap_line_xdyd::y#5 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::e#0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyd:652 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::x#6 bitmap_line_xdyd::y#5 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::e#0 ] { { bitmap_line_xdyd::yd#0 = bitmap_line_xdyd::yd#2 bitmap_line::yd#1 } { bitmap_line_xdyd::x#0 = bitmap_line_xdyd::x#6 bitmap_line::x1#0 } { bitmap_line_xdyd::y#0 = bitmap_line_xdyd::y#5 bitmap_line::y1#0 } { bitmap_line_xdyd::xd#0 = bitmap_line_xdyd::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyd::x1#0 = bitmap_line_xdyd::x1#6 bitmap_line::x0#0 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyd:668 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::x#6 bitmap_line_xdyd::y#5 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::e#0 ] { { bitmap_line_xdyd::yd#1 = bitmap_line_xdyd::yd#2 bitmap_line::yd#10 } { bitmap_line_xdyd::x#1 = bitmap_line_xdyd::x#6 bitmap_line::x0#0 } { bitmap_line_xdyd::y#1 = bitmap_line_xdyd::y#5 bitmap_line::y0#0 } { bitmap_line_xdyd::xd#1 = bitmap_line_xdyd::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyd::x1#1 = bitmap_line_xdyd::x1#6 bitmap_line::x1#0 } }  ) always clobbers reg byte a 
Statement [727] (byte) bitmap_line_xdyd::e#1 ← (byte) bitmap_line_xdyd::e#3 + (byte) bitmap_line_xdyd::yd#2 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::y#3 bitmap_line_xdyd::x#2 bitmap_line_xdyd::e#1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyd:652 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::y#3 bitmap_line_xdyd::x#2 bitmap_line_xdyd::e#1 ] { { bitmap_line_xdyd::yd#0 = bitmap_line_xdyd::yd#2 bitmap_line::yd#1 } { bitmap_line_xdyd::x#0 = bitmap_line_xdyd::x#6 bitmap_line::x1#0 } { bitmap_line_xdyd::y#0 = bitmap_line_xdyd::y#5 bitmap_line::y1#0 } { bitmap_line_xdyd::xd#0 = bitmap_line_xdyd::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyd::x1#0 = bitmap_line_xdyd::x1#6 bitmap_line::x0#0 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyd:668 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::y#3 bitmap_line_xdyd::x#2 bitmap_line_xdyd::e#1 ] { { bitmap_line_xdyd::yd#1 = bitmap_line_xdyd::yd#2 bitmap_line::yd#10 } { bitmap_line_xdyd::x#1 = bitmap_line_xdyd::x#6 bitmap_line::x0#0 } { bitmap_line_xdyd::y#1 = bitmap_line_xdyd::y#5 bitmap_line::y0#0 } { bitmap_line_xdyd::xd#1 = bitmap_line_xdyd::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyd::x1#1 = bitmap_line_xdyd::x1#6 bitmap_line::x1#0 } }  ) always clobbers reg byte a 
Statement [730] (byte) bitmap_line_xdyd::e#2 ← (byte) bitmap_line_xdyd::e#1 - (byte) bitmap_line_xdyd::xd#5 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#2 bitmap_line_xdyd::y#2 bitmap_line_xdyd::e#2 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyd:652 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#2 bitmap_line_xdyd::y#2 bitmap_line_xdyd::e#2 ] { { bitmap_line_xdyd::yd#0 = bitmap_line_xdyd::yd#2 bitmap_line::yd#1 } { bitmap_line_xdyd::x#0 = bitmap_line_xdyd::x#6 bitmap_line::x1#0 } { bitmap_line_xdyd::y#0 = bitmap_line_xdyd::y#5 bitmap_line::y1#0 } { bitmap_line_xdyd::xd#0 = bitmap_line_xdyd::xd#5 bitmap_line::xd#2 } { bitmap_line_xdyd::x1#0 = bitmap_line_xdyd::x1#6 bitmap_line::x0#0 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_xdyd:668 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#2 bitmap_line_xdyd::y#2 bitmap_line_xdyd::e#2 ] { { bitmap_line_xdyd::yd#1 = bitmap_line_xdyd::yd#2 bitmap_line::yd#10 } { bitmap_line_xdyd::x#1 = bitmap_line_xdyd::x#6 bitmap_line::x0#0 } { bitmap_line_xdyd::y#1 = bitmap_line_xdyd::y#5 bitmap_line::y0#0 } { bitmap_line_xdyd::xd#1 = bitmap_line_xdyd::xd#5 bitmap_line::xd#1 } { bitmap_line_xdyd::x1#1 = bitmap_line_xdyd::x1#6 bitmap_line::x1#0 } }  ) always clobbers reg byte a 
Statement [736] (byte) bitmap_line_ydxd::e#0 ← (byte) bitmap_line_ydxd::xd#2 >> (byte) 1 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::x#5 bitmap_line_ydxd::y#7 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::e#0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxd:646 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::x#5 bitmap_line_ydxd::y#7 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::e#0 ] { { bitmap_line_ydxd::xd#0 = bitmap_line_ydxd::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxd::x#0 = bitmap_line_ydxd::x#5 bitmap_line::x0#0 } { bitmap_line_ydxd::y#0 = bitmap_line_ydxd::y#7 bitmap_line::y0#0 } { bitmap_line_ydxd::yd#0 = bitmap_line_ydxd::yd#5 bitmap_line::yd#1 } { bitmap_line_ydxd::y1#0 = bitmap_line_ydxd::y1#6 bitmap_line::y1#0 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxd:662 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::x#5 bitmap_line_ydxd::y#7 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::e#0 ] { { bitmap_line_ydxd::xd#1 = bitmap_line_ydxd::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxd::x#1 = bitmap_line_ydxd::x#5 bitmap_line::x1#0 } { bitmap_line_ydxd::y#1 = bitmap_line_ydxd::y#7 bitmap_line::y1#0 } { bitmap_line_ydxd::yd#1 = bitmap_line_ydxd::yd#5 bitmap_line::yd#10 } { bitmap_line_ydxd::y1#1 = bitmap_line_ydxd::y1#6 bitmap_line::y0#0 } }  ) always clobbers reg byte a 
Statement [742] (byte) bitmap_line_ydxd::e#1 ← (byte) bitmap_line_ydxd::e#3 + (byte) bitmap_line_ydxd::xd#2 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#3 bitmap_line_ydxd::e#1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxd:646 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#3 bitmap_line_ydxd::e#1 ] { { bitmap_line_ydxd::xd#0 = bitmap_line_ydxd::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxd::x#0 = bitmap_line_ydxd::x#5 bitmap_line::x0#0 } { bitmap_line_ydxd::y#0 = bitmap_line_ydxd::y#7 bitmap_line::y0#0 } { bitmap_line_ydxd::yd#0 = bitmap_line_ydxd::yd#5 bitmap_line::yd#1 } { bitmap_line_ydxd::y1#0 = bitmap_line_ydxd::y1#6 bitmap_line::y1#0 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxd:662 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#3 bitmap_line_ydxd::e#1 ] { { bitmap_line_ydxd::xd#1 = bitmap_line_ydxd::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxd::x#1 = bitmap_line_ydxd::x#5 bitmap_line::x1#0 } { bitmap_line_ydxd::y#1 = bitmap_line_ydxd::y#7 bitmap_line::y1#0 } { bitmap_line_ydxd::yd#1 = bitmap_line_ydxd::yd#5 bitmap_line::yd#10 } { bitmap_line_ydxd::y1#1 = bitmap_line_ydxd::y1#6 bitmap_line::y0#0 } }  ) always clobbers reg byte a 
Statement [745] (byte) bitmap_line_ydxd::e#2 ← (byte) bitmap_line_ydxd::e#1 - (byte) bitmap_line_ydxd::yd#5 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y#3 bitmap_line_ydxd::x#2 bitmap_line_ydxd::e#2 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxd:646 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y#3 bitmap_line_ydxd::x#2 bitmap_line_ydxd::e#2 ] { { bitmap_line_ydxd::xd#0 = bitmap_line_ydxd::xd#2 bitmap_line::xd#2 } { bitmap_line_ydxd::x#0 = bitmap_line_ydxd::x#5 bitmap_line::x0#0 } { bitmap_line_ydxd::y#0 = bitmap_line_ydxd::y#7 bitmap_line::y0#0 } { bitmap_line_ydxd::yd#0 = bitmap_line_ydxd::yd#5 bitmap_line::yd#1 } { bitmap_line_ydxd::y1#0 = bitmap_line_ydxd::y1#6 bitmap_line::y1#0 } }  main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_line:619::bitmap_line_ydxd:662 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y#3 bitmap_line_ydxd::x#2 bitmap_line_ydxd::e#2 ] { { bitmap_line_ydxd::xd#1 = bitmap_line_ydxd::xd#2 bitmap_line::xd#1 } { bitmap_line_ydxd::x#1 = bitmap_line_ydxd::x#5 bitmap_line::x1#0 } { bitmap_line_ydxd::y#1 = bitmap_line_ydxd::y#7 bitmap_line::y1#0 } { bitmap_line_ydxd::yd#1 = bitmap_line_ydxd::yd#5 bitmap_line::yd#10 } { bitmap_line_ydxd::y1#1 = bitmap_line_ydxd::y1#6 bitmap_line::y0#0 } }  ) always clobbers reg byte a 
Statement [750] (word) bitmap_clear::bitmap#0 ← *((const to_nomodify byte*) bitmap_plot_xhi) w= *((const to_nomodify byte*) bitmap_plot_xlo) [ bitmap_clear::bitmap#0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_clear:611 [ bitmap_clear::bitmap#0 ] { }  ) always clobbers reg byte a 
Statement [751] (byte*) bitmap_clear::bitmap#5 ← (byte*)(word) bitmap_clear::bitmap#0 [ bitmap_clear::bitmap#5 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_clear:611 [ bitmap_clear::bitmap#5 ] { }  ) always clobbers reg byte a 
Statement [754] *((byte*) bitmap_clear::bitmap#2) ← (byte) 0 [ bitmap_clear::y#4 bitmap_clear::bitmap#2 bitmap_clear::x#2 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_clear:611 [ bitmap_clear::y#4 bitmap_clear::bitmap#2 bitmap_clear::x#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [763] (byte~) bitmap_init::$0 ← (byte) bitmap_init::x#2 & (byte) $f8 [ bitmap_init::x#2 bitmap_init::bits#3 bitmap_init::$0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_init:609 [ bitmap_init::x#2 bitmap_init::bits#3 bitmap_init::$0 ] { }  ) always clobbers reg byte a 
Statement [765] *((const to_nomodify byte*) bitmap_plot_xhi + (byte) bitmap_init::x#2) ← >(const nomodify byte*) VIC_BITMAP [ bitmap_init::x#2 bitmap_init::bits#3 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_init:609 [ bitmap_init::x#2 bitmap_init::bits#3 ] { }  ) always clobbers reg byte a 
Statement [766] *((const to_nomodify byte*) bitmap_plot_bit + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3 [ bitmap_init::x#2 bitmap_init::bits#3 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_init:609 [ bitmap_init::x#2 bitmap_init::bits#3 ] { }  ) always clobbers reg byte a 
Statement [774] (byte~) bitmap_init::$10 ← (byte) bitmap_init::y#2 & (byte) 7 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$10 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_init:609 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$10 ] { }  ) always clobbers reg byte a 
Statement [781] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (word)(number) $28*(number) 8 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:465::bitmap_init:609 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] { }  ) always clobbers reg byte a 
Statement [786] *((const nomodify byte*) PROCPORT) ← (byte) $32 [ ] ( main:2::gfx_init:10::gfx_init_charset:463 [ ] { }  ) always clobbers reg byte a 
Statement [789] *((byte*) gfx_init_charset::charset#2) ← *((byte*) gfx_init_charset::chargen#2) [ gfx_init_charset::c#4 gfx_init_charset::chargen#2 gfx_init_charset::charset#2 gfx_init_charset::l#2 ] ( main:2::gfx_init:10::gfx_init_charset:463 [ gfx_init_charset::c#4 gfx_init_charset::chargen#2 gfx_init_charset::charset#2 gfx_init_charset::l#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [796] *((const nomodify byte*) PROCPORT) ← (byte) $37 [ ] ( main:2::gfx_init:10::gfx_init_charset:463 [ ] { }  ) always clobbers reg byte a 
Statement [801] *((byte*) gfx_init_screen4::ch#2) ← (byte) 0 [ gfx_init_screen4::cy#4 gfx_init_screen4::ch#2 gfx_init_screen4::cx#2 ] ( main:2::gfx_init:10::gfx_init_screen4:461 [ gfx_init_screen4::cy#4 gfx_init_screen4::ch#2 gfx_init_screen4::cx#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [811] (byte~) gfx_init_screen3::$0 ← (byte) gfx_init_screen3::cx#2 & (byte) 3 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 gfx_init_screen3::$0 ] ( main:2::gfx_init:10::gfx_init_screen3:459 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 gfx_init_screen3::$0 ] { }  ) always clobbers reg byte a 
Statement [812] (byte~) gfx_init_screen3::$1 ← (byte~) gfx_init_screen3::$0 << (byte) 4 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 gfx_init_screen3::$1 ] ( main:2::gfx_init:10::gfx_init_screen3:459 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 gfx_init_screen3::$1 ] { }  ) always clobbers reg byte a 
Statement [813] (byte~) gfx_init_screen3::$2 ← (byte) gfx_init_screen3::cy#4 & (byte) 3 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 gfx_init_screen3::$1 gfx_init_screen3::$2 ] ( main:2::gfx_init:10::gfx_init_screen3:459 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 gfx_init_screen3::$1 gfx_init_screen3::$2 ] { }  ) always clobbers reg byte a 
Statement [815] *((byte*) gfx_init_screen3::ch#2) ← (byte~) gfx_init_screen3::$3 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 ] ( main:2::gfx_init:10::gfx_init_screen3:459 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 ] { }  ) always clobbers reg byte y 
Statement [825] (byte~) gfx_init_screen2::$0 ← (byte) gfx_init_screen2::cx#2 + (byte) gfx_init_screen2::cy#4 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::$0 ] ( main:2::gfx_init:10::gfx_init_screen2:457 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::$0 ] { }  ) always clobbers reg byte a 
Statement [827] (byte) gfx_init_screen2::col2#0 ← (byte) $f - (byte) gfx_init_screen2::col#0 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::col#0 gfx_init_screen2::col2#0 ] ( main:2::gfx_init:10::gfx_init_screen2:457 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::col#0 gfx_init_screen2::col2#0 ] { }  ) always clobbers reg byte a 
Statement [828] (byte~) gfx_init_screen2::$3 ← (byte) gfx_init_screen2::col#0 << (byte) 4 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::col2#0 gfx_init_screen2::$3 ] ( main:2::gfx_init:10::gfx_init_screen2:457 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::col2#0 gfx_init_screen2::$3 ] { }  ) always clobbers reg byte a 
Statement [830] *((byte*) gfx_init_screen2::ch#2) ← (byte~) gfx_init_screen2::$4 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 ] ( main:2::gfx_init:10::gfx_init_screen2:457 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 ] { }  ) always clobbers reg byte y 
Statement [840] (byte~) gfx_init_screen1::$0 ← (byte) gfx_init_screen1::cx#2 + (byte) gfx_init_screen1::cy#4 [ gfx_init_screen1::cy#4 gfx_init_screen1::cx#2 gfx_init_screen1::ch#2 gfx_init_screen1::$0 ] ( main:2::gfx_init:10::gfx_init_screen1:455 [ gfx_init_screen1::cy#4 gfx_init_screen1::cx#2 gfx_init_screen1::ch#2 gfx_init_screen1::$0 ] { }  ) always clobbers reg byte a 
Statement [842] *((byte*) gfx_init_screen1::ch#2) ← (byte~) gfx_init_screen1::$1 [ gfx_init_screen1::cy#4 gfx_init_screen1::cx#2 gfx_init_screen1::ch#2 ] ( main:2::gfx_init:10::gfx_init_screen1:455 [ gfx_init_screen1::cy#4 gfx_init_screen1::cx#2 gfx_init_screen1::ch#2 ] { }  ) always clobbers reg byte y 
Statement [852] (byte~) gfx_init_screen0::$0 ← (byte) gfx_init_screen0::cy#4 & (byte) $f [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$0 ] ( main:2::gfx_init:10::gfx_init_screen0:453 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$0 ] { }  ) always clobbers reg byte a 
Statement [853] (byte~) gfx_init_screen0::$1 ← (byte~) gfx_init_screen0::$0 << (byte) 4 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$1 ] ( main:2::gfx_init:10::gfx_init_screen0:453 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$1 ] { }  ) always clobbers reg byte a 
Statement [854] (byte~) gfx_init_screen0::$2 ← (byte) gfx_init_screen0::cx#2 & (byte) $f [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$1 gfx_init_screen0::$2 ] ( main:2::gfx_init:10::gfx_init_screen0:453 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$1 gfx_init_screen0::$2 ] { }  ) always clobbers reg byte a 
Statement [856] *((byte*) gfx_init_screen0::ch#2) ← (byte~) gfx_init_screen0::$3 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 ] ( main:2::gfx_init:10::gfx_init_screen0:453 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 ] { }  ) always clobbers reg byte y 
Statement [863] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) ← (byte) $ff [ ] ( main:2::keyboard_init:8 [ ] { }  ) always clobbers reg byte a 
Statement [864] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_B_DDR) ← (byte) 0 [ ] ( main:2::keyboard_init:8 [ ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ gfx_mode::dtv_control#12 gfx_mode::dtv_control#6 gfx_mode::dtv_control#13 gfx_mode::dtv_control#5 gfx_mode::dtv_control#11 gfx_mode::dtv_control#4 gfx_mode::dtv_control#10 gfx_mode::dtv_control#3 gfx_mode::dtv_control#15 gfx_mode::dtv_control#14 gfx_mode::dtv_control#2 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ gfx_mode::vic_control#4 gfx_mode::vic_control#2 gfx_mode::vic_control#5 ] : zp[1]:3 , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ gfx_mode::vic_control2#2 ] : zp[1]:4 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:5 [ gfx_mode::cy#4 gfx_mode::cy#1 ] : zp[1]:5 , reg byte x , 
Potential registers zp[2]:6 [ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 ] : zp[2]:6 , 
Potential registers zp[2]:8 [ gfx_mode::col#2 gfx_mode::col#3 gfx_mode::col#1 ] : zp[2]:8 , 
Potential registers zp[1]:10 [ gfx_mode::cx#2 gfx_mode::cx#1 ] : zp[1]:10 , reg byte x , 
Potential registers zp[1]:11 [ gfx_mode::j#2 gfx_mode::j#1 ] : zp[1]:11 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:12 [ gfx_mode::i#2 gfx_mode::i#1 ] : zp[1]:12 , reg byte x , reg byte y , 
Potential registers zp[1]:13 [ keyboard_event_get::return#2 keyboard_event_get::return#1 ] : zp[1]:13 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:14 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ] : zp[1]:14 , reg byte x , reg byte y , 
Potential registers zp[1]:15 [ keyboard_modifiers#21 keyboard_modifiers#20 keyboard_modifiers#19 keyboard_modifiers#18 keyboard_modifiers#3 keyboard_modifiers#4 keyboard_modifiers#5 ] : zp[1]:15 , reg byte x , 
Potential registers zp[1]:16 [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ] : zp[1]:16 , reg byte x , reg byte y , 
Potential registers zp[1]:17 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ] : zp[1]:17 , reg byte x , reg byte y , 
Potential registers zp[1]:18 [ keyboard_events_size#18 keyboard_events_size#106 keyboard_events_size#97 keyboard_events_size#47 keyboard_events_size#27 keyboard_events_size#24 keyboard_events_size#100 keyboard_events_size#4 keyboard_events_size#105 keyboard_events_size#1 keyboard_events_size#2 ] : zp[1]:18 , reg byte x , 
Potential registers zp[1]:19 [ keyboard_event_pressed::keycode#4 ] : zp[1]:19 , reg byte x , reg byte y , 
Potential registers zp[1]:20 [ get_vic_screen::idx#2 get_vic_screen::idx#0 get_vic_screen::idx#1 ] : zp[1]:20 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:21 [ get_vic_screen::return#5 ] : zp[2]:21 , 
Potential registers zp[2]:23 [ get_vic_charset::return#2 ] : zp[2]:23 , 
Potential registers zp[1]:25 [ get_plane::idx#10 get_plane::idx#1 get_plane::idx#0 ] : zp[1]:25 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[4]:26 [ get_plane::return#14 ] : zp[4]:26 , 
Potential registers zp[1]:30 [ form_mode::i#2 form_mode::i#1 ] : zp[1]:30 , reg byte x , reg byte y , 
Potential registers zp[1]:31 [ form_cursor_count#21 form_cursor_count#1 form_cursor_count#16 form_cursor_count#15 form_cursor_count#5 ] : zp[1]:31 , reg byte x , 
Potential registers zp[1]:32 [ form_field_idx#28 form_field_idx#1 form_field_idx#18 form_field_idx#31 form_field_idx#6 form_field_idx#5 ] : zp[1]:32 , reg byte x , 
Potential registers zp[1]:33 [ form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 ] : zp[1]:33 , reg byte x , 
Potential registers zp[1]:34 [ render_preset_name::idx#10 render_preset_name::idx#0 render_preset_name::idx#1 ] : zp[1]:34 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:35 [ render_preset_name::name#13 ] : zp[2]:35 , 
Potential registers zp[2]:37 [ print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 ] : zp[2]:37 , 
Potential registers zp[2]:39 [ print_str_at::at#2 print_str_at::at#0 ] : zp[2]:39 , 
Potential registers zp[1]:41 [ form_render_values::idx#2 form_render_values::idx#1 ] : zp[1]:41 , reg byte x , reg byte y , 
Potential registers zp[1]:42 [ form_field_ptr::field_idx#2 form_field_ptr::field_idx#1 form_field_ptr::field_idx#0 ] : zp[1]:42 , reg byte x , reg byte y , 
Potential registers zp[2]:43 [ apply_preset::preset#15 ] : zp[2]:43 , 
Potential registers zp[1]:45 [ apply_preset::i#2 apply_preset::i#1 ] : zp[1]:45 , reg byte x , reg byte y , 
Potential registers zp[1]:46 [ form_control::return#2 ] : zp[1]:46 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:47 [ form_set_screen::line#2 form_set_screen::line#1 ] : zp[2]:47 , 
Potential registers zp[1]:49 [ form_set_screen::y#2 form_set_screen::y#1 ] : zp[1]:49 , reg byte x , reg byte y , 
Potential registers zp[2]:50 [ print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 ] : zp[2]:50 , 
Potential registers zp[2]:52 [ print_char_cursor#41 print_char_cursor#24 print_char_cursor#72 print_char_cursor#73 print_char_cursor#42 print_char_cursor#28 ] : zp[2]:52 , 
Potential registers zp[2]:54 [ print_line_cursor#21 print_line_cursor#2 print_set_screen::screen#2 print_line_cursor#22 ] : zp[2]:54 , 
Potential registers zp[2]:56 [ memset::dst#2 memset::dst#4 memset::dst#1 ] : zp[2]:56 , 
Potential registers zp[4]:58 [ gfx_init_plane_fill::plane_addr#3 ] : zp[4]:58 , 
Potential registers zp[1]:62 [ gfx_init_plane_fill::fill#6 ] : zp[1]:62 , reg byte x , 
Potential registers zp[1]:63 [ gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 ] : zp[1]:63 , reg byte x , 
Potential registers zp[2]:64 [ gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 ] : zp[2]:64 , 
Potential registers zp[1]:66 [ gfx_init_plane_fill::bx#2 gfx_init_plane_fill::bx#1 ] : zp[1]:66 , reg byte x , 
Potential registers zp[1]:67 [ dtvSetCpuBankSegment1::cpuBankIdx#13 dtvSetCpuBankSegment1::cpuBankIdx#1 dtvSetCpuBankSegment1::cpuBankIdx#11 ] : zp[1]:67 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:68 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 ] : zp[1]:68 , reg byte x , 
Potential registers zp[2]:69 [ gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 ] : zp[2]:69 , 
Potential registers zp[1]:71 [ gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::ax#1 ] : zp[1]:71 , reg byte x , 
Potential registers zp[1]:72 [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 ] : zp[1]:72 , reg byte x , 
Potential registers zp[2]:73 [ gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 ] : zp[2]:73 , 
Potential registers zp[1]:75 [ gfx_init_plane_vertical::bx#2 gfx_init_plane_vertical::bx#1 ] : zp[1]:75 , reg byte x , 
Potential registers zp[1]:76 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 ] : zp[1]:76 , reg byte x , 
Potential registers zp[2]:77 [ gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 ] : zp[2]:77 , 
Potential registers zp[1]:79 [ gfx_init_plane_horisontal::ax#2 gfx_init_plane_horisontal::ax#1 ] : zp[1]:79 , reg byte x , 
Potential registers zp[1]:80 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ] : zp[1]:80 , reg byte x , 
Potential registers zp[2]:81 [ gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 ] : zp[2]:81 , 
Potential registers zp[1]:83 [ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ] : zp[1]:83 , reg byte x , 
Potential registers zp[1]:84 [ gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ] : zp[1]:84 , reg byte a , reg byte x , 
Potential registers zp[2]:85 [ gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 ] : zp[2]:85 , 
Potential registers zp[1]:87 [ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ] : zp[1]:87 , reg byte x , 
Potential registers zp[1]:88 [ gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::cp#1 ] : zp[1]:88 , reg byte a , reg byte x , 
Potential registers zp[1]:89 [ gfx_init_plane_charset8::c#2 gfx_init_plane_charset8::c#3 ] : zp[1]:89 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:90 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 ] : zp[1]:90 , reg byte x , 
Potential registers zp[2]:91 [ gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 ] : zp[2]:91 , 
Potential registers zp[1]:93 [ gfx_init_plane_8bppchunky::gfxbCpuBank#4 gfx_init_plane_8bppchunky::gfxbCpuBank#7 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::gfxbCpuBank#2 ] : zp[1]:93 , reg byte x , 
Potential registers zp[2]:94 [ gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::gfxb#1 ] : zp[2]:94 , 
Potential registers zp[1]:96 [ gfx_init_vic_bitmap::l#2 gfx_init_vic_bitmap::l#1 ] : zp[1]:96 , reg byte x , 
Potential registers zp[1]:97 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 ] : zp[1]:97 , reg byte x , 
Potential registers zp[1]:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 ] : zp[1]:98 , reg byte x , 
Potential registers zp[1]:99 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 ] : zp[1]:99 , reg byte x , 
Potential registers zp[1]:100 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 ] : zp[1]:100 , reg byte x , 
Potential registers zp[1]:101 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ] : zp[1]:101 , reg byte x , 
Potential registers zp[1]:102 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ] : zp[1]:102 , reg byte x , 
Potential registers zp[1]:103 [ bitmap_plot::x#4 bitmap_plot::x#1 bitmap_plot::x#0 bitmap_plot::x#3 bitmap_plot::x#2 ] : zp[1]:103 , reg byte x , reg byte y , 
Potential registers zp[1]:104 [ bitmap_plot::y#4 bitmap_plot::y#1 bitmap_plot::y#0 bitmap_plot::y#3 bitmap_plot::y#2 ] : zp[1]:104 , reg byte x , reg byte y , 
Potential registers zp[1]:105 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ] : zp[1]:105 , reg byte x , 
Potential registers zp[1]:106 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ] : zp[1]:106 , reg byte x , 
Potential registers zp[1]:107 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ] : zp[1]:107 , reg byte x , 
Potential registers zp[1]:108 [ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ] : zp[1]:108 , reg byte x , 
Potential registers zp[1]:109 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ] : zp[1]:109 , reg byte x , 
Potential registers zp[1]:110 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ] : zp[1]:110 , reg byte x , 
Potential registers zp[1]:111 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 ] : zp[1]:111 , reg byte x , 
Potential registers zp[1]:112 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 ] : zp[1]:112 , reg byte x , 
Potential registers zp[1]:113 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 ] : zp[1]:113 , reg byte x , 
Potential registers zp[1]:114 [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 ] : zp[1]:114 , reg byte x , 
Potential registers zp[1]:115 [ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ] : zp[1]:115 , reg byte x , 
Potential registers zp[1]:116 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ] : zp[1]:116 , reg byte x , 
Potential registers zp[1]:117 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ] : zp[1]:117 , reg byte x , 
Potential registers zp[1]:118 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ] : zp[1]:118 , reg byte x , 
Potential registers zp[1]:119 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ] : zp[1]:119 , reg byte x , 
Potential registers zp[1]:120 [ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ] : zp[1]:120 , reg byte x , 
Potential registers zp[1]:121 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ] : zp[1]:121 , reg byte x , 
Potential registers zp[1]:122 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ] : zp[1]:122 , reg byte x , 
Potential registers zp[1]:123 [ bitmap_clear::y#4 bitmap_clear::y#1 ] : zp[1]:123 , reg byte x , 
Potential registers zp[2]:124 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ] : zp[2]:124 , 
Potential registers zp[1]:126 [ bitmap_clear::x#2 bitmap_clear::x#1 ] : zp[1]:126 , reg byte x , 
Potential registers zp[1]:127 [ bitmap_init::x#2 bitmap_init::x#1 ] : zp[1]:127 , reg byte x , reg byte y , 
Potential registers zp[1]:128 [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ] : zp[1]:128 , reg byte x , reg byte y , 
Potential registers zp[1]:129 [ bitmap_init::y#2 bitmap_init::y#1 ] : zp[1]:129 , reg byte x , reg byte y , 
Potential registers zp[2]:130 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] : zp[2]:130 , 
Potential registers zp[1]:132 [ gfx_init_charset::c#4 gfx_init_charset::c#1 ] : zp[1]:132 , reg byte x , 
Potential registers zp[2]:133 [ gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 ] : zp[2]:133 , 
Potential registers zp[2]:135 [ gfx_init_charset::charset#2 gfx_init_charset::charset#3 gfx_init_charset::charset#1 ] : zp[2]:135 , 
Potential registers zp[1]:137 [ gfx_init_charset::l#2 gfx_init_charset::l#1 ] : zp[1]:137 , reg byte x , 
Potential registers zp[1]:138 [ gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 ] : zp[1]:138 , reg byte x , 
Potential registers zp[2]:139 [ gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 ] : zp[2]:139 , 
Potential registers zp[1]:141 [ gfx_init_screen4::cx#2 gfx_init_screen4::cx#1 ] : zp[1]:141 , reg byte x , 
Potential registers zp[1]:142 [ gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 ] : zp[1]:142 , reg byte x , 
Potential registers zp[1]:143 [ gfx_init_screen3::cx#2 gfx_init_screen3::cx#1 ] : zp[1]:143 , reg byte x , 
Potential registers zp[2]:144 [ gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 ] : zp[2]:144 , 
Potential registers zp[1]:146 [ gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 ] : zp[1]:146 , reg byte x , 
Potential registers zp[1]:147 [ gfx_init_screen2::cx#2 gfx_init_screen2::cx#1 ] : zp[1]:147 , reg byte x , 
Potential registers zp[2]:148 [ gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 ] : zp[2]:148 , 
Potential registers zp[1]:150 [ gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 ] : zp[1]:150 , reg byte x , 
Potential registers zp[1]:151 [ gfx_init_screen1::cx#2 gfx_init_screen1::cx#1 ] : zp[1]:151 , reg byte x , 
Potential registers zp[2]:152 [ gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 ] : zp[2]:152 , 
Potential registers zp[1]:154 [ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ] : zp[1]:154 , reg byte x , 
Potential registers zp[1]:155 [ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ] : zp[1]:155 , reg byte x , 
Potential registers zp[2]:156 [ gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 ] : zp[2]:156 , 
Potential registers zp[1]:158 [ gfx_mode::$18 ] : zp[1]:158 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:159 [ gfx_mode::plane_a_offs#0 ] : zp[1]:159 , reg byte x , reg byte y , 
Potential registers zp[4]:160 [ get_plane::return#16 ] : zp[4]:160 , 
Potential registers zp[4]:164 [ gfx_mode::$20 ] : zp[4]:164 , 
Potential registers zp[4]:168 [ gfx_mode::plane_a#0 ] : zp[4]:168 , 
Potential registers zp[2]:172 [ gfx_mode::$24 ] : zp[2]:172 , 
Potential registers zp[1]:174 [ gfx_mode::$23 ] : zp[1]:174 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:175 [ gfx_mode::$25 ] : zp[1]:175 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:176 [ gfx_mode::$26 ] : zp[2]:176 , 
Potential registers zp[1]:178 [ gfx_mode::$27 ] : zp[1]:178 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:179 [ gfx_mode::$28 ] : zp[1]:179 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:180 [ gfx_mode::$29 ] : zp[1]:180 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:181 [ gfx_mode::$30 ] : zp[1]:181 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:182 [ gfx_mode::$31 ] : zp[1]:182 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:183 [ gfx_mode::$32 ] : zp[1]:183 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:184 [ gfx_mode::plane_b_offs#0 ] : zp[1]:184 , reg byte x , reg byte y , 
Potential registers zp[4]:185 [ get_plane::return#17 ] : zp[4]:185 , 
Potential registers zp[4]:189 [ gfx_mode::$34 ] : zp[4]:189 , 
Potential registers zp[4]:193 [ gfx_mode::plane_b#0 ] : zp[4]:193 , 
Potential registers zp[2]:197 [ gfx_mode::$38 ] : zp[2]:197 , 
Potential registers zp[1]:199 [ gfx_mode::$37 ] : zp[1]:199 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:200 [ gfx_mode::$39 ] : zp[1]:200 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:201 [ gfx_mode::$40 ] : zp[2]:201 , 
Potential registers zp[1]:203 [ gfx_mode::$41 ] : zp[1]:203 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:204 [ gfx_mode::$42 ] : zp[1]:204 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:205 [ gfx_mode::$43 ] : zp[1]:205 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:206 [ gfx_mode::$44 ] : zp[1]:206 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:207 [ gfx_mode::$45 ] : zp[1]:207 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:208 [ get_vic_screen::return#10 ] : zp[2]:208 , 
Potential registers zp[2]:210 [ gfx_mode::$82 ] : zp[2]:210 , 
Potential registers zp[2]:212 [ gfx_mode::$47 ] : zp[2]:212 , 
Potential registers zp[2]:214 [ gfx_mode::$48 ] : zp[2]:214 , 
Potential registers zp[1]:216 [ get_vic_charset::idx#0 ] : zp[1]:216 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:217 [ get_vic_charset::return#4 ] : zp[2]:217 , 
Potential registers zp[2]:219 [ gfx_mode::$83 ] : zp[2]:219 , 
Potential registers zp[2]:221 [ gfx_mode::$50 ] : zp[2]:221 , 
Potential registers zp[1]:223 [ gfx_mode::$51 ] : zp[1]:223 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:224 [ gfx_mode::$52 ] : zp[1]:224 , reg byte x , reg byte y , 
Potential registers zp[1]:225 [ gfx_mode::$84 ] : zp[1]:225 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:226 [ gfx_mode::$53 ] : zp[1]:226 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:227 [ get_vic_screen::return#11 ] : zp[2]:227 , 
Potential registers zp[1]:229 [ gfx_mode::$55 ] : zp[1]:229 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:230 [ gfx_mode::$56 ] : zp[1]:230 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:231 [ gfx_mode::$57 ] : zp[1]:231 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:232 [ gfx_mode::$58 ] : zp[1]:232 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:233 [ gfx_mode::$59 ] : zp[1]:233 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:234 [ gfx_mode::$60 ] : zp[1]:234 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:235 [ gfx_mode::$61 ] : zp[1]:235 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:236 [ gfx_mode::$62 ] : zp[1]:236 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:237 [ keyboard_event_get::return#3 ] : zp[1]:237 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:238 [ gfx_mode::keyboard_event#0 ] : zp[1]:238 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:239 [ keyboard_matrix_read::rowid#0 ] : zp[1]:239 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:240 [ keyboard_matrix_read::return#2 ] : zp[1]:240 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:241 [ keyboard_event_scan::row_scan#0 ] : zp[1]:241 , reg byte x , reg byte y , 
Potential registers zp[1]:242 [ keyboard_event_pressed::return#0 ] : zp[1]:242 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:243 [ keyboard_event_scan::$0 ] : zp[1]:243 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:244 [ keyboard_event_pressed::return#1 ] : zp[1]:244 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:245 [ keyboard_event_scan::$3 ] : zp[1]:245 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:246 [ keyboard_event_pressed::return#2 ] : zp[1]:246 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:247 [ keyboard_event_scan::$6 ] : zp[1]:247 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:248 [ keyboard_event_pressed::return#3 ] : zp[1]:248 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:249 [ keyboard_event_scan::$9 ] : zp[1]:249 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:250 [ keyboard_event_scan::$15 ] : zp[1]:250 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:251 [ keyboard_event_scan::$16 ] : zp[1]:251 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:252 [ keyboard_event_scan::event_type#0 ] : zp[1]:252 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:253 [ keyboard_event_scan::$23 ] : zp[1]:253 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:254 [ keyboard_event_pressed::$0 ] : zp[1]:254 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:255 [ keyboard_event_pressed::row_bits#0 ] : zp[1]:255 , reg byte x , reg byte y , 
Potential registers zp[1]:256 [ keyboard_event_pressed::$1 ] : zp[1]:256 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:257 [ keyboard_event_pressed::return#10 ] : zp[1]:257 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:258 [ keyboard_matrix_read::return#0 ] : zp[1]:258 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:259 [ form_control::return#0 ] : zp[1]:259 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:260 [ form_mode::$11 ] : zp[1]:260 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:261 [ apply_preset::idx#0 ] : zp[1]:261 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:262 [ form_field_ptr::y#0 ] : zp[1]:262 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:263 [ form_field_ptr::line#0 ] : zp[2]:263 , 
Potential registers zp[1]:265 [ form_field_ptr::x#0 ] : zp[1]:265 , reg byte x , reg byte y , 
Potential registers zp[2]:266 [ form_field_ptr::return#0 ] : zp[2]:266 , 
Potential registers zp[2]:268 [ form_field_ptr::return#3 ] : zp[2]:268 , 
Potential registers zp[2]:270 [ form_control::field#0 ] : zp[2]:270 , 
Potential registers zp[1]:272 [ form_control::$12 ] : zp[1]:272 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:273 [ keyboard_event_get::return#4 ] : zp[1]:273 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:274 [ form_control::key_event#0 ] : zp[1]:274 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:275 [ form_control::$14 ] : zp[1]:275 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:276 [ form_control::$15 ] : zp[1]:276 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:277 [ form_control::$22 ] : zp[1]:277 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:278 [ form_control::$13 ] : zp[1]:278 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:279 [ form_set_screen::$0 ] : zp[1]:279 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:280 [ form_set_screen::$1 ] : zp[1]:280 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:281 [ print_str_lines::ch#0 ] : zp[1]:281 , reg byte a , reg byte x , 
Potential registers zp[1]:282 [ print_char::ch#0 ] : zp[1]:282 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:283 [ memset::str#0 ] : zp[2]:283 , 
Potential registers zp[2]:285 [ memset::end#0 ] : zp[2]:285 , 
Potential registers zp[4]:287 [ gfx_init_plane_fill::$0 ] : zp[4]:287 , 
Potential registers zp[2]:291 [ gfx_init_plane_fill::$1 ] : zp[2]:291 , 
Potential registers zp[1]:293 [ gfx_init_plane_fill::gfxbCpuBank#0 ] : zp[1]:293 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:294 [ gfx_init_plane_fill::$4 ] : zp[2]:294 , 
Potential registers zp[2]:296 [ gfx_init_plane_fill::$5 ] : zp[2]:296 , 
Potential registers zp[2]:298 [ gfx_init_plane_fill::gfxb#0 ] : zp[2]:298 , 
Potential registers zp[1]:300 [ gfx_init_plane_horisontal2::$2 ] : zp[1]:300 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:301 [ gfx_init_plane_horisontal2::row#0 ] : zp[1]:301 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:302 [ gfx_init_plane_horisontal::$2 ] : zp[1]:302 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:303 [ gfx_init_plane_charset8::$2 ] : zp[1]:303 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:304 [ gfx_init_plane_8bppchunky::$5 ] : zp[2]:304 , 
Potential registers zp[1]:306 [ gfx_init_plane_8bppchunky::c#0 ] : zp[1]:306 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:307 [ bitmap_line::x0#0 ] : zp[1]:307 , reg byte x , reg byte y , 
Potential registers zp[1]:308 [ bitmap_line::x1#0 ] : zp[1]:308 , reg byte x , reg byte y , 
Potential registers zp[1]:309 [ bitmap_line::y0#0 ] : zp[1]:309 , reg byte x , reg byte y , 
Potential registers zp[1]:310 [ bitmap_line::y1#0 ] : zp[1]:310 , reg byte x , reg byte y , 
Potential registers zp[1]:311 [ bitmap_line::xd#2 ] : zp[1]:311 , reg byte x , reg byte y , 
Potential registers zp[1]:312 [ bitmap_line::yd#2 ] : zp[1]:312 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:313 [ bitmap_line::yd#1 ] : zp[1]:313 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:314 [ bitmap_line::xd#1 ] : zp[1]:314 , reg byte x , reg byte y , 
Potential registers zp[1]:315 [ bitmap_line::yd#10 ] : zp[1]:315 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:316 [ bitmap_line::yd#11 ] : zp[1]:316 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:317 [ bitmap_line_xdyi::$6 ] : zp[1]:317 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:318 [ bitmap_plot::plotter_x#0 ] : zp[2]:318 , 
Potential registers zp[2]:320 [ bitmap_plot::plotter_y#0 ] : zp[2]:320 , 
Potential registers zp[2]:322 [ bitmap_plot::plotter#0 ] : zp[2]:322 , 
Potential registers zp[1]:324 [ bitmap_plot::$1 ] : zp[1]:324 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:325 [ bitmap_line_ydxi::$6 ] : zp[1]:325 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:326 [ bitmap_line_xdyd::$6 ] : zp[1]:326 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:327 [ bitmap_line_ydxd::$6 ] : zp[1]:327 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:328 [ bitmap_clear::bitmap#0 ] : zp[2]:328 , 
Potential registers zp[1]:330 [ bitmap_init::$0 ] : zp[1]:330 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:331 [ bitmap_init::$10 ] : zp[1]:331 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:332 [ bitmap_init::$7 ] : zp[1]:332 , reg byte a , reg byte x , reg byte y , reg byte alu , 
Potential registers zp[1]:333 [ bitmap_init::$8 ] : zp[1]:333 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:334 [ bitmap_init::$9 ] : zp[1]:334 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:335 [ gfx_init_screen3::$0 ] : zp[1]:335 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:336 [ gfx_init_screen3::$1 ] : zp[1]:336 , reg byte x , reg byte y , 
Potential registers zp[1]:337 [ gfx_init_screen3::$2 ] : zp[1]:337 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:338 [ gfx_init_screen3::$3 ] : zp[1]:338 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:339 [ gfx_init_screen2::$0 ] : zp[1]:339 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:340 [ gfx_init_screen2::col#0 ] : zp[1]:340 , reg byte x , reg byte y , 
Potential registers zp[1]:341 [ gfx_init_screen2::col2#0 ] : zp[1]:341 , reg byte x , reg byte y , 
Potential registers zp[1]:342 [ gfx_init_screen2::$3 ] : zp[1]:342 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:343 [ gfx_init_screen2::$4 ] : zp[1]:343 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:344 [ gfx_init_screen1::$0 ] : zp[1]:344 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:345 [ gfx_init_screen1::$1 ] : zp[1]:345 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:346 [ gfx_init_screen0::$0 ] : zp[1]:346 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:347 [ gfx_init_screen0::$1 ] : zp[1]:347 , reg byte x , reg byte y , 
Potential registers zp[1]:348 [ gfx_init_screen0::$2 ] : zp[1]:348 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:349 [ gfx_init_screen0::$3 ] : zp[1]:349 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [keyboard_event_scan] 20,000,000,000,002: zp[1]:250 [ keyboard_event_scan::$15 ] 20,000,000,000,002: zp[1]:251 [ keyboard_event_scan::$16 ] 20,000,000,000,002: zp[1]:252 [ keyboard_event_scan::event_type#0 ] 20,000,000,000,002: zp[1]:253 [ keyboard_event_scan::$23 ] 17,857,142,857,144.64: zp[1]:16 [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ] 11,903,846,153,850.79: zp[1]:17 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ] 2,100,000,000,001.74: zp[1]:14 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ] 1,277,777,777,778.06: zp[1]:241 [ keyboard_event_scan::row_scan#0 ] 200,000,002: zp[1]:243 [ keyboard_event_scan::$0 ] 200,000,002: zp[1]:245 [ keyboard_event_scan::$3 ] 200,000,002: zp[1]:247 [ keyboard_event_scan::$6 ] 200,000,002: zp[1]:249 [ keyboard_event_scan::$9 ] 
Uplift Scope [] 58,817,091,702,750.98: zp[1]:18 [ keyboard_events_size#18 keyboard_events_size#106 keyboard_events_size#97 keyboard_events_size#47 keyboard_events_size#27 keyboard_events_size#24 keyboard_events_size#100 keyboard_events_size#4 keyboard_events_size#105 keyboard_events_size#1 keyboard_events_size#2 ] 26,011,318,837.72: zp[2]:54 [ print_line_cursor#21 print_line_cursor#2 print_set_screen::screen#2 print_line_cursor#22 ] 1,509,382,150.43: zp[2]:52 [ print_char_cursor#41 print_char_cursor#24 print_char_cursor#72 print_char_cursor#73 print_char_cursor#42 print_char_cursor#28 ] 820,000,008.36: zp[1]:15 [ keyboard_modifiers#21 keyboard_modifiers#20 keyboard_modifiers#19 keyboard_modifiers#18 keyboard_modifiers#3 keyboard_modifiers#4 keyboard_modifiers#5 ] 56,804,892.25: zp[1]:32 [ form_field_idx#28 form_field_idx#1 form_field_idx#18 form_field_idx#31 form_field_idx#6 form_field_idx#5 ] 15,415,305.17: zp[1]:31 [ form_cursor_count#21 form_cursor_count#1 form_cursor_count#16 form_cursor_count#15 form_cursor_count#5 ] 
Uplift Scope [keyboard_matrix_read] 11,000,000,000,002: zp[1]:239 [ keyboard_matrix_read::rowid#0 ] 3,666,666,666,667.33: zp[1]:258 [ keyboard_matrix_read::return#0 ] 2,000,000,000,002: zp[1]:240 [ keyboard_matrix_read::return#2 ] 
Uplift Scope [print_str_at] 30,008,000,004.25: zp[2]:37 [ print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 ] 20,000,000,002: zp[2]:39 [ print_str_at::at#2 print_str_at::at#0 ] 
Uplift Scope [form_field_ptr] 30,000,000,003: zp[1]:262 [ form_field_ptr::y#0 ] 9,023,333,338.67: zp[1]:42 [ form_field_ptr::field_idx#2 form_field_ptr::field_idx#1 form_field_ptr::field_idx#0 ] 5,250,000,000.75: zp[1]:265 [ form_field_ptr::x#0 ] 3,336,666,667.33: zp[2]:266 [ form_field_ptr::return#0 ] 2,000,000,000.2: zp[2]:263 [ form_field_ptr::line#0 ] 20,000,002: zp[2]:268 [ form_field_ptr::return#3 ] 
Uplift Scope [bitmap_plot] 2,000,000,011: zp[1]:104 [ bitmap_plot::y#4 bitmap_plot::y#1 bitmap_plot::y#0 bitmap_plot::y#3 bitmap_plot::y#2 ] 2,000,000,002: zp[2]:320 [ bitmap_plot::plotter_y#0 ] 2,000,000,002: zp[1]:324 [ bitmap_plot::$1 ] 1,250,000,005.75: zp[1]:103 [ bitmap_plot::x#4 bitmap_plot::x#1 bitmap_plot::x#0 bitmap_plot::x#3 bitmap_plot::x#2 ] 1,000,000,001: zp[2]:318 [ bitmap_plot::plotter_x#0 ] 500,000,000.5: zp[2]:322 [ bitmap_plot::plotter#0 ] 
Uplift Scope [keyboard_event_pressed] 2,000,000,002: zp[1]:254 [ keyboard_event_pressed::$0 ] 2,000,000,002: zp[1]:256 [ keyboard_event_pressed::$1 ] 1,000,000,001: zp[1]:255 [ keyboard_event_pressed::row_bits#0 ] 666,666,667.33: zp[1]:19 [ keyboard_event_pressed::keycode#4 ] 233,333,334.17: zp[1]:257 [ keyboard_event_pressed::return#10 ] 200,000,002: zp[1]:242 [ keyboard_event_pressed::return#0 ] 200,000,002: zp[1]:244 [ keyboard_event_pressed::return#1 ] 200,000,002: zp[1]:246 [ keyboard_event_pressed::return#2 ] 200,000,002: zp[1]:248 [ keyboard_event_pressed::return#3 ] 
Uplift Scope [apply_preset] 3,666,666,670.33: zp[1]:45 [ apply_preset::i#2 apply_preset::i#1 ] 200,000,000.2: zp[2]:43 [ apply_preset::preset#15 ] 1,009,092: zp[1]:261 [ apply_preset::idx#0 ] 
Uplift Scope [form_render_values] 3,000,000,003: zp[1]:41 [ form_render_values::idx#2 form_render_values::idx#1 ] 
Uplift Scope [bitmap_line_xdyi] 475,533,340.27: zp[1]:102 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ] 257,985,719.5: zp[1]:101 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ] 200,000,002: zp[1]:317 [ bitmap_line_xdyi::$6 ] 113,430,003.68: zp[1]:100 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 ] 14,500,002.29: zp[1]:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 ] 7,628,575.71: zp[1]:97 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 ] 7,290,477.74: zp[1]:99 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 ] 
Uplift Scope [bitmap_line_xdyd] 475,533,340.27: zp[1]:116 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ] 257,985,719.5: zp[1]:115 [ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ] 200,000,002: zp[1]:326 [ bitmap_line_xdyd::$6 ] 113,430,003.68: zp[1]:114 [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 ] 14,500,002.29: zp[1]:112 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 ] 7,628,575.71: zp[1]:111 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 ] 7,290,477.74: zp[1]:113 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 ] 
Uplift Scope [bitmap_line_ydxi] 475,533,340.27: zp[1]:110 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ] 257,985,719.5: zp[1]:108 [ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ] 200,000,002: zp[1]:325 [ bitmap_line_ydxi::$6 ] 113,430,003.68: zp[1]:109 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ] 14,500,002.29: zp[1]:106 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ] 7,628,575.71: zp[1]:105 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ] 7,290,477.74: zp[1]:107 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ] 
Uplift Scope [bitmap_line_ydxd] 475,533,340.27: zp[1]:122 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ] 257,985,719.5: zp[1]:120 [ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ] 200,000,002: zp[1]:327 [ bitmap_line_ydxd::$6 ] 113,430,003.68: zp[1]:121 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ] 14,500,002.29: zp[1]:118 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ] 7,628,575.71: zp[1]:117 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ] 7,290,477.74: zp[1]:119 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ] 
Uplift Scope [keyboard_event_get] 227,525,002.75: zp[1]:13 [ keyboard_event_get::return#2 keyboard_event_get::return#1 ] 20,000,002: zp[1]:273 [ keyboard_event_get::return#4 ] 200,002: zp[1]:237 [ keyboard_event_get::return#3 ] 
Uplift Scope [form_control] 20,000,002: zp[1]:272 [ form_control::$12 ] 20,000,002: zp[1]:275 [ form_control::$14 ] 20,000,002: zp[1]:276 [ form_control::$15 ] 20,000,002: zp[1]:277 [ form_control::$22 ] 20,000,002: zp[1]:278 [ form_control::$13 ] 13,333,334.67: zp[1]:274 [ form_control::key_event#0 ] 2,962,963.26: zp[2]:270 [ form_control::field#0 ] 2,000,002: zp[1]:259 [ form_control::return#0 ] 333,333.67: zp[1]:46 [ form_control::return#2 ] 
Uplift Scope [print_char] 110,000,002: zp[1]:282 [ print_char::ch#0 ] 
Uplift Scope [memset] 33,566,672.33: zp[2]:56 [ memset::dst#2 memset::dst#4 memset::dst#1 ] 1,683,333.67: zp[2]:285 [ memset::end#0 ] 3,333.67: zp[2]:283 [ memset::str#0 ] 
Uplift Scope [print_str_lines] 19,343,338.17: zp[2]:50 [ print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 ] 6,666,667.33: zp[1]:281 [ print_str_lines::ch#0 ] 
Uplift Scope [gfx_init_plane_charset8] 4,000,004: zp[1]:89 [ gfx_init_plane_charset8::c#2 gfx_init_plane_charset8::c#3 ] 2,000,002: zp[1]:303 [ gfx_init_plane_charset8::$2 ] 1,722,223.94: zp[1]:88 [ gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::cp#1 ] 1,042,859.21: zp[1]:84 [ gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ] 841,115.22: zp[2]:85 [ gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 ] 778,932.64: zp[1]:87 [ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ] 188,129.19: zp[2]:81 [ gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 ] 164,287.36: zp[1]:83 [ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ] 16,178.09: zp[1]:80 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ] 
Uplift Scope [form_set_screen] 2,166,668.83: zp[1]:49 [ form_set_screen::y#2 form_set_screen::y#1 ] 2,000,002: zp[1]:279 [ form_set_screen::$0 ] 2,000,002: zp[1]:280 [ form_set_screen::$1 ] 1,466,668.13: zp[2]:47 [ form_set_screen::line#2 form_set_screen::line#1 ] 
Uplift Scope [gfx_mode] 2,100,004.5: zp[2]:8 [ gfx_mode::col#2 gfx_mode::col#3 gfx_mode::col#1 ] 2,000,002: zp[1]:10 [ gfx_mode::cx#2 gfx_mode::cx#1 ] 1,656,340.27: zp[2]:6 [ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 ] 350,003.5: zp[1]:11 [ gfx_mode::j#2 gfx_mode::j#1 ] 350,003.5: zp[1]:12 [ gfx_mode::i#2 gfx_mode::i#1 ] 200,002: zp[1]:238 [ gfx_mode::keyboard_event#0 ] 178,573.21: zp[1]:5 [ gfx_mode::cy#4 gfx_mode::cy#1 ] 22,022: zp[1]:2 [ gfx_mode::dtv_control#12 gfx_mode::dtv_control#6 gfx_mode::dtv_control#13 gfx_mode::dtv_control#5 gfx_mode::dtv_control#11 gfx_mode::dtv_control#4 gfx_mode::dtv_control#10 gfx_mode::dtv_control#3 gfx_mode::dtv_control#15 gfx_mode::dtv_control#14 gfx_mode::dtv_control#2 ] 6,006: zp[1]:3 [ gfx_mode::vic_control#4 gfx_mode::vic_control#2 gfx_mode::vic_control#5 ] 2,002: zp[1]:158 [ gfx_mode::$18 ] 2,002: zp[4]:164 [ gfx_mode::$20 ] 2,002: zp[1]:174 [ gfx_mode::$23 ] 2,002: zp[1]:175 [ gfx_mode::$25 ] 2,002: zp[2]:176 [ gfx_mode::$26 ] 2,002: zp[1]:178 [ gfx_mode::$27 ] 2,002: zp[1]:179 [ gfx_mode::$28 ] 2,002: zp[1]:180 [ gfx_mode::$29 ] 2,002: zp[1]:181 [ gfx_mode::$30 ] 2,002: zp[1]:182 [ gfx_mode::$31 ] 2,002: zp[1]:183 [ gfx_mode::$32 ] 2,002: zp[4]:189 [ gfx_mode::$34 ] 2,002: zp[1]:199 [ gfx_mode::$37 ] 2,002: zp[1]:200 [ gfx_mode::$39 ] 2,002: zp[2]:201 [ gfx_mode::$40 ] 2,002: zp[1]:203 [ gfx_mode::$41 ] 2,002: zp[1]:204 [ gfx_mode::$42 ] 2,002: zp[1]:205 [ gfx_mode::$43 ] 2,002: zp[1]:206 [ gfx_mode::$44 ] 2,002: zp[1]:207 [ gfx_mode::$45 ] 2,002: zp[2]:212 [ gfx_mode::$47 ] 2,002: zp[2]:221 [ gfx_mode::$50 ] 2,002: zp[1]:223 [ gfx_mode::$51 ] 2,002: zp[1]:225 [ gfx_mode::$84 ] 2,002: zp[1]:226 [ gfx_mode::$53 ] 2,002: zp[1]:229 [ gfx_mode::$55 ] 2,002: zp[1]:230 [ gfx_mode::$56 ] 2,002: zp[1]:231 [ gfx_mode::$57 ] 2,002: zp[1]:232 [ gfx_mode::$58 ] 2,002: zp[1]:233 [ gfx_mode::$59 ] 2,002: zp[1]:234 [ gfx_mode::$60 ] 2,002: zp[1]:235 [ gfx_mode::$61 ] 2,002: zp[1]:236 [ gfx_mode::$62 ] 1,001: zp[1]:4 [ gfx_mode::vic_control2#2 ] 1,001: zp[2]:172 [ gfx_mode::$24 ] 1,001: zp[2]:197 [ gfx_mode::$38 ] 1,001: zp[2]:210 [ gfx_mode::$82 ] 1,001: zp[2]:219 [ gfx_mode::$83 ] 1,001: zp[1]:224 [ gfx_mode::$52 ] 500.5: zp[4]:168 [ gfx_mode::plane_a#0 ] 500.5: zp[4]:193 [ gfx_mode::plane_b#0 ] 400.4: zp[1]:159 [ gfx_mode::plane_a_offs#0 ] 400.4: zp[1]:184 [ gfx_mode::plane_b_offs#0 ] 125.12: zp[2]:214 [ gfx_mode::$48 ] 
Uplift Scope [gfx_init_plane_fill] 2,200,007.6: zp[2]:64 [ gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 ] 2,166,668.83: zp[1]:66 [ gfx_init_plane_fill::bx#2 gfx_init_plane_fill::bx#1 ] 183,335.17: zp[1]:63 [ gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 ] 55,555.61: zp[1]:62 [ gfx_init_plane_fill::fill#6 ] 20,002: zp[4]:287 [ gfx_init_plane_fill::$0 ] 20,002: zp[2]:291 [ gfx_init_plane_fill::$1 ] 20,002: zp[1]:293 [ gfx_init_plane_fill::gfxbCpuBank#0 ] 20,002: zp[2]:294 [ gfx_init_plane_fill::$4 ] 20,002: zp[2]:296 [ gfx_init_plane_fill::$5 ] 10,001: zp[2]:298 [ gfx_init_plane_fill::gfxb#0 ] 3,333.67: zp[4]:58 [ gfx_init_plane_fill::plane_addr#3 ] 
Uplift Scope [bitmap_clear] 2,200,007.6: zp[2]:124 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ] 2,166,668.83: zp[1]:126 [ bitmap_clear::x#2 bitmap_clear::x#1 ] 183,335.17: zp[1]:123 [ bitmap_clear::y#4 bitmap_clear::y#1 ] 10,001: zp[2]:328 [ bitmap_clear::bitmap#0 ] 
Uplift Scope [form_mode] 2,000,002: zp[1]:260 [ form_mode::$11 ] 439,628.12: zp[1]:33 [ form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 ] 350,003.5: zp[1]:30 [ form_mode::i#2 form_mode::i#1 ] 
Uplift Scope [render_preset_name] 1,211,187: zp[1]:34 [ render_preset_name::idx#10 render_preset_name::idx#0 render_preset_name::idx#1 ] 1,000,001: zp[2]:35 [ render_preset_name::name#13 ] 
Uplift Scope [bitmap_init] 362,503.62: zp[2]:130 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] 226,668.93: zp[1]:128 [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ] 216,668.83: zp[1]:127 [ bitmap_init::x#2 bitmap_init::x#1 ] 200,002: zp[1]:129 [ bitmap_init::y#2 bitmap_init::y#1 ] 200,002: zp[1]:330 [ bitmap_init::$0 ] 200,002: zp[1]:332 [ bitmap_init::$7 ] 200,002: zp[1]:333 [ bitmap_init::$8 ] 200,002: zp[1]:334 [ bitmap_init::$9 ] 50,000.5: zp[1]:331 [ bitmap_init::$10 ] 
Uplift Scope [dtvSetCpuBankSegment1] 1,330,007: zp[1]:67 [ dtvSetCpuBankSegment1::cpuBankIdx#13 dtvSetCpuBankSegment1::cpuBankIdx#1 dtvSetCpuBankSegment1::cpuBankIdx#11 ] 
Uplift Scope [gfx_init_screen2] 200,002: zp[1]:339 [ gfx_init_screen2::$0 ] 200,002: zp[1]:342 [ gfx_init_screen2::$3 ] 200,002: zp[1]:343 [ gfx_init_screen2::$4 ] 187,501.88: zp[1]:147 [ gfx_init_screen2::cx#2 gfx_init_screen2::cx#1 ] 150,001.5: zp[1]:340 [ gfx_init_screen2::col#0 ] 106,288.89: zp[2]:148 [ gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 ] 100,001: zp[1]:341 [ gfx_init_screen2::col2#0 ] 25,910.86: zp[1]:146 [ gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 ] 
Uplift Scope [gfx_init_plane_8bppchunky] 356,950.14: zp[1]:93 [ gfx_init_plane_8bppchunky::gfxbCpuBank#4 gfx_init_plane_8bppchunky::gfxbCpuBank#7 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::gfxbCpuBank#2 ] 292,005.35: zp[2]:94 [ gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::gfxb#1 ] 200,002: zp[1]:306 [ gfx_init_plane_8bppchunky::c#0 ] 180,001.8: zp[2]:91 [ gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 ] 100,001: zp[2]:304 [ gfx_init_plane_8bppchunky::$5 ] 24,232.5: zp[1]:90 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 ] 
Uplift Scope [gfx_init_screen0] 200,002: zp[1]:346 [ gfx_init_screen0::$0 ] 200,002: zp[1]:348 [ gfx_init_screen0::$2 ] 200,002: zp[1]:349 [ gfx_init_screen0::$3 ] 192,859.07: zp[1]:155 [ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ] 113,669.93: zp[2]:156 [ gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 ] 100,001: zp[1]:347 [ gfx_init_screen0::$1 ] 27,001.8: zp[1]:154 [ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ] 
Uplift Scope [gfx_init_screen3] 200,002: zp[1]:335 [ gfx_init_screen3::$0 ] 200,002: zp[1]:337 [ gfx_init_screen3::$2 ] 200,002: zp[1]:338 [ gfx_init_screen3::$3 ] 192,859.07: zp[1]:143 [ gfx_init_screen3::cx#2 gfx_init_screen3::cx#1 ] 113,669.93: zp[2]:144 [ gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 ] 100,001: zp[1]:336 [ gfx_init_screen3::$1 ] 27,001.8: zp[1]:142 [ gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 ] 
Uplift Scope [gfx_init_plane_horisontal] 584,008: zp[2]:77 [ gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 ] 200,002: zp[1]:302 [ gfx_init_plane_horisontal::$2 ] 175,001.75: zp[1]:79 [ gfx_init_plane_horisontal::ax#2 gfx_init_plane_horisontal::ax#1 ] 25,910.86: zp[1]:76 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 ] 
Uplift Scope [gfx_init_screen1] 210,002.1: zp[1]:151 [ gfx_init_screen1::cx#2 gfx_init_screen1::cx#1 ] 200,002: zp[1]:344 [ gfx_init_screen1::$0 ] 200,002: zp[1]:345 [ gfx_init_screen1::$1 ] 139,503.6: zp[2]:152 [ gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 ] 30,001.88: zp[1]:150 [ gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 ] 
Uplift Scope [gfx_init_plane_horisontal2] 200,002: zp[1]:300 [ gfx_init_plane_horisontal2::$2 ] 200,002: zp[1]:301 [ gfx_init_plane_horisontal2::row#0 ] 190,001.9: zp[1]:71 [ gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::ax#1 ] 139,503.6: zp[2]:69 [ gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 ] 30,001.88: zp[1]:68 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 ] 
Uplift Scope [gfx_init_charset] 210,004.5: zp[2]:135 [ gfx_init_charset::charset#2 gfx_init_charset::charset#3 gfx_init_charset::charset#1 ] 200,002: zp[1]:137 [ gfx_init_charset::l#2 gfx_init_charset::l#1 ] 165,337.27: zp[2]:133 [ gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 ] 17,858.93: zp[1]:132 [ gfx_init_charset::c#4 gfx_init_charset::c#1 ] 
Uplift Scope [gfx_init_screen4] 217,004.6: zp[2]:139 [ gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 ] 216,668.83: zp[1]:141 [ gfx_init_screen4::cx#2 gfx_init_screen4::cx#1 ] 18,335.17: zp[1]:138 [ gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 ] 
Uplift Scope [gfx_init_plane_vertical] 217,004.6: zp[2]:73 [ gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 ] 216,668.83: zp[1]:75 [ gfx_init_plane_vertical::bx#2 gfx_init_plane_vertical::bx#1 ] 18,335.17: zp[1]:72 [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 ] 
Uplift Scope [bitmap_line] 60,500.65: zp[1]:310 [ bitmap_line::y1#0 ] 57,619.67: zp[1]:309 [ bitmap_line::y0#0 ] 44,444.89: zp[1]:312 [ bitmap_line::yd#2 ] 44,444.89: zp[1]:313 [ bitmap_line::yd#1 ] 44,444.89: zp[1]:315 [ bitmap_line::yd#10 ] 44,444.89: zp[1]:316 [ bitmap_line::yd#11 ] 41,364.09: zp[1]:308 [ bitmap_line::x1#0 ] 39,565.65: zp[1]:307 [ bitmap_line::x0#0 ] 35,000.35: zp[1]:311 [ bitmap_line::xd#2 ] 35,000.35: zp[1]:314 [ bitmap_line::xd#1 ] 
Uplift Scope [gfx_init_vic_bitmap] 30,003: zp[1]:96 [ gfx_init_vic_bitmap::l#2 gfx_init_vic_bitmap::l#1 ] 
Uplift Scope [get_vic_screen] 14,405.4: zp[1]:20 [ get_vic_screen::idx#2 get_vic_screen::idx#0 get_vic_screen::idx#1 ] 2,002: zp[2]:208 [ get_vic_screen::return#10 ] 2,002: zp[2]:227 [ get_vic_screen::return#11 ] 500.5: zp[2]:21 [ get_vic_screen::return#5 ] 
Uplift Scope [get_plane] 14,148: zp[1]:25 [ get_plane::idx#10 get_plane::idx#1 get_plane::idx#0 ] 2,002: zp[4]:160 [ get_plane::return#16 ] 2,002: zp[4]:185 [ get_plane::return#17 ] 500.5: zp[4]:26 [ get_plane::return#14 ] 
Uplift Scope [get_vic_charset] 10,501.5: zp[1]:216 [ get_vic_charset::idx#0 ] 2,002: zp[2]:217 [ get_vic_charset::return#4 ] 333.67: zp[2]:23 [ get_vic_charset::return#2 ] 
Uplift Scope [MOS6526_CIA] 
Uplift Scope [MOS6569_VICII] 
Uplift Scope [MOS6581_SID] 
Uplift Scope [RADIX] 
Uplift Scope [print_ln] 
Uplift Scope [print_cls] 
Uplift Scope [print_set_screen] 
Uplift Scope [keyboard_init] 
Uplift Scope [main] 
Uplift Scope [gfx_init] 
Uplift Scope [gfx_init_plane_vertical2] 
Uplift Scope [gfx_init_plane_blank] 
Uplift Scope [gfx_init_plane_full] 

Uplifting [keyboard_event_scan] best 15469512 combination reg byte a [ keyboard_event_scan::$15 ] reg byte a [ keyboard_event_scan::$16 ] zp[1]:252 [ keyboard_event_scan::event_type#0 ] zp[1]:253 [ keyboard_event_scan::$23 ] zp[1]:16 [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ] zp[1]:17 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ] zp[1]:14 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ] zp[1]:241 [ keyboard_event_scan::row_scan#0 ] zp[1]:243 [ keyboard_event_scan::$0 ] zp[1]:245 [ keyboard_event_scan::$3 ] zp[1]:247 [ keyboard_event_scan::$6 ] zp[1]:249 [ keyboard_event_scan::$9 ] 
Limited combination testing to 10 combinations of 5308416 possible.
Uplifting [] best 15469494 combination zp[1]:18 [ keyboard_events_size#18 keyboard_events_size#106 keyboard_events_size#97 keyboard_events_size#47 keyboard_events_size#27 keyboard_events_size#24 keyboard_events_size#100 keyboard_events_size#4 keyboard_events_size#105 keyboard_events_size#1 keyboard_events_size#2 ] zp[2]:54 [ print_line_cursor#21 print_line_cursor#2 print_set_screen::screen#2 print_line_cursor#22 ] zp[2]:52 [ print_char_cursor#41 print_char_cursor#24 print_char_cursor#72 print_char_cursor#73 print_char_cursor#42 print_char_cursor#28 ] reg byte x [ keyboard_modifiers#21 keyboard_modifiers#20 keyboard_modifiers#19 keyboard_modifiers#18 keyboard_modifiers#3 keyboard_modifiers#4 keyboard_modifiers#5 ] zp[1]:32 [ form_field_idx#28 form_field_idx#1 form_field_idx#18 form_field_idx#31 form_field_idx#6 form_field_idx#5 ] zp[1]:31 [ form_cursor_count#21 form_cursor_count#1 form_cursor_count#16 form_cursor_count#15 form_cursor_count#5 ] 
Limited combination testing to 10 combinations of 16 possible.
Uplifting [keyboard_matrix_read] best 15409488 combination reg byte x [ keyboard_matrix_read::rowid#0 ] reg byte a [ keyboard_matrix_read::return#0 ] zp[1]:240 [ keyboard_matrix_read::return#2 ] 
Limited combination testing to 10 combinations of 64 possible.
Uplifting [print_str_at] best 15409488 combination zp[2]:37 [ print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 ] zp[2]:39 [ print_str_at::at#2 print_str_at::at#0 ] 
Uplifting [form_field_ptr] best 15406473 combination reg byte y [ form_field_ptr::y#0 ] reg byte x [ form_field_ptr::field_idx#2 form_field_ptr::field_idx#1 form_field_ptr::field_idx#0 ] zp[1]:265 [ form_field_ptr::x#0 ] zp[2]:266 [ form_field_ptr::return#0 ] zp[2]:263 [ form_field_ptr::line#0 ] zp[2]:268 [ form_field_ptr::return#3 ] 
Limited combination testing to 10 combinations of 36 possible.
Uplifting [bitmap_plot] best 15405264 combination reg byte x [ bitmap_plot::y#4 bitmap_plot::y#1 bitmap_plot::y#0 bitmap_plot::y#3 bitmap_plot::y#2 ] zp[2]:320 [ bitmap_plot::plotter_y#0 ] reg byte a [ bitmap_plot::$1 ] zp[1]:103 [ bitmap_plot::x#4 bitmap_plot::x#1 bitmap_plot::x#0 bitmap_plot::x#3 bitmap_plot::x#2 ] zp[2]:318 [ bitmap_plot::plotter_x#0 ] zp[2]:322 [ bitmap_plot::plotter#0 ] 
Limited combination testing to 10 combinations of 36 possible.
Uplifting [keyboard_event_pressed] best 15405256 combination reg byte a [ keyboard_event_pressed::$0 ] reg byte a [ keyboard_event_pressed::$1 ] zp[1]:255 [ keyboard_event_pressed::row_bits#0 ] zp[1]:19 [ keyboard_event_pressed::keycode#4 ] zp[1]:257 [ keyboard_event_pressed::return#10 ] zp[1]:242 [ keyboard_event_pressed::return#0 ] zp[1]:244 [ keyboard_event_pressed::return#1 ] zp[1]:246 [ keyboard_event_pressed::return#2 ] zp[1]:248 [ keyboard_event_pressed::return#3 ] 
Limited combination testing to 10 combinations of 147456 possible.
Uplifting [apply_preset] best 15392923 combination reg byte y [ apply_preset::i#2 apply_preset::i#1 ] zp[2]:43 [ apply_preset::preset#15 ] reg byte a [ apply_preset::idx#0 ] 
Limited combination testing to 10 combinations of 12 possible.
Uplifting [form_render_values] best 15377923 combination reg byte x [ form_render_values::idx#2 form_render_values::idx#1 ] 
Uplifting [bitmap_line_xdyi] best 15376917 combination zp[1]:102 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ] reg byte x [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ] reg byte a [ bitmap_line_xdyi::$6 ] zp[1]:100 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 ] zp[1]:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 ] zp[1]:97 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 ] zp[1]:99 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 ] 
Limited combination testing to 10 combinations of 256 possible.
Uplifting [bitmap_line_xdyd] best 15375911 combination zp[1]:116 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ] reg byte x [ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ] reg byte a [ bitmap_line_xdyd::$6 ] zp[1]:114 [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 ] zp[1]:112 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 ] zp[1]:111 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 ] zp[1]:113 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 ] 
Limited combination testing to 10 combinations of 256 possible.
Uplifting [bitmap_line_ydxi] best 15375311 combination zp[1]:110 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ] zp[1]:108 [ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ] reg byte x [ bitmap_line_ydxi::$6 ] zp[1]:109 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ] zp[1]:106 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ] zp[1]:105 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ] zp[1]:107 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ] 
Limited combination testing to 10 combinations of 256 possible.
Uplifting [bitmap_line_ydxd] best 15374711 combination zp[1]:122 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ] zp[1]:120 [ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ] reg byte x [ bitmap_line_ydxd::$6 ] zp[1]:121 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ] zp[1]:118 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ] zp[1]:117 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ] zp[1]:119 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ] 
Limited combination testing to 10 combinations of 256 possible.
Uplifting [keyboard_event_get] best 15374396 combination reg byte a [ keyboard_event_get::return#2 keyboard_event_get::return#1 ] reg byte a [ keyboard_event_get::return#4 ] zp[1]:237 [ keyboard_event_get::return#3 ] 
Limited combination testing to 10 combinations of 64 possible.
Uplifting [form_control] best 15374384 combination reg byte a [ form_control::$12 ] reg byte a [ form_control::$14 ] zp[1]:276 [ form_control::$15 ] zp[1]:277 [ form_control::$22 ] zp[1]:278 [ form_control::$13 ] zp[1]:274 [ form_control::key_event#0 ] zp[2]:270 [ form_control::field#0 ] zp[1]:259 [ form_control::return#0 ] zp[1]:46 [ form_control::return#2 ] 
Limited combination testing to 10 combinations of 65536 possible.
Uplifting [print_char] best 15371381 combination reg byte a [ print_char::ch#0 ] 
Uplifting [memset] best 15371381 combination zp[2]:56 [ memset::dst#2 memset::dst#4 memset::dst#1 ] zp[2]:285 [ memset::end#0 ] zp[2]:283 [ memset::str#0 ] 
Uplifting [print_str_lines] best 15359381 combination zp[2]:50 [ print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 ] reg byte a [ print_str_lines::ch#0 ] 
Uplifting [gfx_init_plane_charset8] best 15344381 combination reg byte a [ gfx_init_plane_charset8::c#2 gfx_init_plane_charset8::c#3 ] reg byte a [ gfx_init_plane_charset8::$2 ] zp[1]:88 [ gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::cp#1 ] zp[1]:84 [ gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ] zp[2]:85 [ gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 ] zp[1]:87 [ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ] zp[2]:81 [ gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 ] zp[1]:83 [ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ] zp[1]:80 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ] 
Limited combination testing to 10 combinations of 1152 possible.
Uplifting [form_set_screen] best 15342281 combination reg byte x [ form_set_screen::y#2 form_set_screen::y#1 ] reg byte a [ form_set_screen::$0 ] zp[1]:280 [ form_set_screen::$1 ] zp[2]:47 [ form_set_screen::line#2 form_set_screen::line#1 ] 
Limited combination testing to 10 combinations of 48 possible.
Uplifting [gfx_init_plane_fill] best 15341375 combination zp[2]:64 [ gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 ] reg byte x [ gfx_init_plane_fill::bx#2 gfx_init_plane_fill::bx#1 ] zp[1]:63 [ gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 ] zp[1]:62 [ gfx_init_plane_fill::fill#6 ] zp[4]:287 [ gfx_init_plane_fill::$0 ] zp[2]:291 [ gfx_init_plane_fill::$1 ] reg byte a [ gfx_init_plane_fill::gfxbCpuBank#0 ] zp[2]:294 [ gfx_init_plane_fill::$4 ] zp[2]:296 [ gfx_init_plane_fill::$5 ] zp[2]:298 [ gfx_init_plane_fill::gfxb#0 ] zp[4]:58 [ gfx_init_plane_fill::plane_addr#3 ] 
Limited combination testing to 10 combinations of 32 possible.
Uplifting [bitmap_clear] best 15340475 combination zp[2]:124 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ] reg byte x [ bitmap_clear::x#2 bitmap_clear::x#1 ] zp[1]:123 [ bitmap_clear::y#4 bitmap_clear::y#1 ] zp[2]:328 [ bitmap_clear::bitmap#0 ] 
Uplifting [form_mode] best 15333275 combination reg byte a [ form_mode::$11 ] zp[1]:33 [ form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 ] reg byte x [ form_mode::i#2 form_mode::i#1 ] 
Limited combination testing to 10 combinations of 24 possible.
Uplifting [render_preset_name] best 15332939 combination reg byte a [ render_preset_name::idx#10 render_preset_name::idx#0 render_preset_name::idx#1 ] zp[2]:35 [ render_preset_name::name#13 ] 
Uplifting [bitmap_init] best 15332639 combination zp[2]:130 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] reg byte y [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ] reg byte x [ bitmap_init::x#2 bitmap_init::x#1 ] zp[1]:129 [ bitmap_init::y#2 bitmap_init::y#1 ] zp[1]:330 [ bitmap_init::$0 ] zp[1]:332 [ bitmap_init::$7 ] zp[1]:333 [ bitmap_init::$8 ] zp[1]:334 [ bitmap_init::$9 ] zp[1]:331 [ bitmap_init::$10 ] 
Limited combination testing to 10 combinations of 34560 possible.
Uplifting [dtvSetCpuBankSegment1] best 15332300 combination reg byte a [ dtvSetCpuBankSegment1::cpuBankIdx#13 dtvSetCpuBankSegment1::cpuBankIdx#1 dtvSetCpuBankSegment1::cpuBankIdx#11 ] 
Uplifting [gfx_init_screen2] best 15331100 combination reg byte a [ gfx_init_screen2::$0 ] reg byte a [ gfx_init_screen2::$3 ] zp[1]:343 [ gfx_init_screen2::$4 ] zp[1]:147 [ gfx_init_screen2::cx#2 gfx_init_screen2::cx#1 ] zp[1]:340 [ gfx_init_screen2::col#0 ] zp[2]:148 [ gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 ] zp[1]:341 [ gfx_init_screen2::col2#0 ] zp[1]:146 [ gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 ] 
Limited combination testing to 10 combinations of 2304 possible.
Uplifting [gfx_init_plane_8bppchunky] best 15330070 combination reg byte x [ gfx_init_plane_8bppchunky::gfxbCpuBank#4 gfx_init_plane_8bppchunky::gfxbCpuBank#7 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::gfxbCpuBank#2 ] zp[2]:94 [ gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::gfxb#1 ] reg byte a [ gfx_init_plane_8bppchunky::c#0 ] zp[2]:91 [ gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 ] zp[2]:304 [ gfx_init_plane_8bppchunky::$5 ] zp[1]:90 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 ] 
Limited combination testing to 10 combinations of 16 possible.
Uplifting [gfx_init_screen0] best 15328870 combination reg byte a [ gfx_init_screen0::$0 ] reg byte a [ gfx_init_screen0::$2 ] zp[1]:349 [ gfx_init_screen0::$3 ] zp[1]:155 [ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ] zp[2]:156 [ gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 ] zp[1]:347 [ gfx_init_screen0::$1 ] zp[1]:154 [ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ] 
Limited combination testing to 10 combinations of 768 possible.
Uplifting [gfx_init_screen3] best 15327670 combination reg byte a [ gfx_init_screen3::$0 ] reg byte a [ gfx_init_screen3::$2 ] zp[1]:338 [ gfx_init_screen3::$3 ] zp[1]:143 [ gfx_init_screen3::cx#2 gfx_init_screen3::cx#1 ] zp[2]:144 [ gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 ] zp[1]:336 [ gfx_init_screen3::$1 ] zp[1]:142 [ gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 ] 
Limited combination testing to 10 combinations of 768 possible.
Uplifting [gfx_init_plane_horisontal] best 15326170 combination zp[2]:77 [ gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 ] reg byte a [ gfx_init_plane_horisontal::$2 ] reg byte x [ gfx_init_plane_horisontal::ax#2 gfx_init_plane_horisontal::ax#1 ] zp[1]:76 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 ] 
Limited combination testing to 10 combinations of 16 possible.
Uplifting [gfx_init_screen1] best 15324570 combination reg byte x [ gfx_init_screen1::cx#2 gfx_init_screen1::cx#1 ] reg byte a [ gfx_init_screen1::$0 ] zp[1]:345 [ gfx_init_screen1::$1 ] zp[2]:152 [ gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 ] zp[1]:150 [ gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 ] 
Limited combination testing to 10 combinations of 64 possible.
Uplifting [gfx_init_plane_horisontal2] best 15323570 combination reg byte a [ gfx_init_plane_horisontal2::$2 ] reg byte a [ gfx_init_plane_horisontal2::row#0 ] zp[1]:71 [ gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::ax#1 ] zp[2]:69 [ gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 ] zp[1]:68 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 ] 
Limited combination testing to 10 combinations of 64 possible.
Uplifting [gfx_init_charset] best 15322670 combination zp[2]:135 [ gfx_init_charset::charset#2 gfx_init_charset::charset#3 gfx_init_charset::charset#1 ] reg byte x [ gfx_init_charset::l#2 gfx_init_charset::l#1 ] zp[2]:133 [ gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 ] zp[1]:132 [ gfx_init_charset::c#4 gfx_init_charset::c#1 ] 
Uplifting [gfx_init_screen4] best 15321770 combination zp[2]:139 [ gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 ] reg byte x [ gfx_init_screen4::cx#2 gfx_init_screen4::cx#1 ] zp[1]:138 [ gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 ] 
Uplifting [gfx_init_plane_vertical] best 15320870 combination zp[2]:73 [ gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 ] reg byte x [ gfx_init_plane_vertical::bx#2 gfx_init_plane_vertical::bx#1 ] zp[1]:72 [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 ] 
Uplifting [bitmap_line] best 15320816 combination zp[1]:310 [ bitmap_line::y1#0 ] reg byte x [ bitmap_line::y0#0 ] zp[1]:312 [ bitmap_line::yd#2 ] zp[1]:313 [ bitmap_line::yd#1 ] zp[1]:315 [ bitmap_line::yd#10 ] zp[1]:316 [ bitmap_line::yd#11 ] zp[1]:308 [ bitmap_line::x1#0 ] zp[1]:307 [ bitmap_line::x0#0 ] zp[1]:311 [ bitmap_line::xd#2 ] zp[1]:314 [ bitmap_line::xd#1 ] 
Limited combination testing to 10 combinations of 186624 possible.
Uplifting [gfx_init_vic_bitmap] best 15320816 combination zp[1]:96 [ gfx_init_vic_bitmap::l#2 gfx_init_vic_bitmap::l#1 ] 
Uplifting [get_vic_screen] best 15320795 combination reg byte a [ get_vic_screen::idx#2 get_vic_screen::idx#0 get_vic_screen::idx#1 ] zp[2]:208 [ get_vic_screen::return#10 ] zp[2]:227 [ get_vic_screen::return#11 ] zp[2]:21 [ get_vic_screen::return#5 ] 
Uplifting [get_plane] best 15320747 combination reg byte a [ get_plane::idx#10 get_plane::idx#1 get_plane::idx#0 ] zp[4]:160 [ get_plane::return#16 ] zp[4]:185 [ get_plane::return#17 ] zp[4]:26 [ get_plane::return#14 ] 
Uplifting [get_vic_charset] best 15320738 combination reg byte a [ get_vic_charset::idx#0 ] zp[2]:217 [ get_vic_charset::return#4 ] zp[2]:23 [ get_vic_charset::return#2 ] 
Uplifting [MOS6526_CIA] best 15320738 combination 
Uplifting [MOS6569_VICII] best 15320738 combination 
Uplifting [MOS6581_SID] best 15320738 combination 
Uplifting [RADIX] best 15320738 combination 
Uplifting [print_ln] best 15320738 combination 
Uplifting [print_cls] best 15320738 combination 
Uplifting [print_set_screen] best 15320738 combination 
Uplifting [keyboard_init] best 15320738 combination 
Uplifting [main] best 15320738 combination 
Uplifting [gfx_init] best 15320738 combination 
Uplifting [gfx_init_plane_vertical2] best 15320738 combination 
Uplifting [gfx_init_plane_blank] best 15320738 combination 
Uplifting [gfx_init_plane_full] best 15320738 combination 
Attempting to uplift remaining variables inzp[1]:18 [ keyboard_events_size#18 keyboard_events_size#106 keyboard_events_size#97 keyboard_events_size#47 keyboard_events_size#27 keyboard_events_size#24 keyboard_events_size#100 keyboard_events_size#4 keyboard_events_size#105 keyboard_events_size#1 keyboard_events_size#2 ]
Uplifting [] best 15320738 combination zp[1]:18 [ keyboard_events_size#18 keyboard_events_size#106 keyboard_events_size#97 keyboard_events_size#47 keyboard_events_size#27 keyboard_events_size#24 keyboard_events_size#100 keyboard_events_size#4 keyboard_events_size#105 keyboard_events_size#1 keyboard_events_size#2 ] 
Attempting to uplift remaining variables inzp[1]:252 [ keyboard_event_scan::event_type#0 ]
Uplifting [keyboard_event_scan] best 14720738 combination reg byte a [ keyboard_event_scan::event_type#0 ] 
Attempting to uplift remaining variables inzp[1]:253 [ keyboard_event_scan::$23 ]
Uplifting [keyboard_event_scan] best 14120738 combination reg byte a [ keyboard_event_scan::$23 ] 
Attempting to uplift remaining variables inzp[1]:16 [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ]
Uplifting [keyboard_event_scan] best 12620738 combination reg byte x [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ] 
Attempting to uplift remaining variables inzp[1]:17 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ]
Uplifting [keyboard_event_scan] best 12620738 combination zp[1]:17 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ] 
Attempting to uplift remaining variables inzp[1]:14 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ]
Uplifting [keyboard_event_scan] best 12620738 combination zp[1]:14 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ] 
Attempting to uplift remaining variables inzp[1]:240 [ keyboard_matrix_read::return#2 ]
Uplifting [keyboard_matrix_read] best 12560738 combination reg byte a [ keyboard_matrix_read::return#2 ] 
Attempting to uplift remaining variables inzp[1]:241 [ keyboard_event_scan::row_scan#0 ]
Uplifting [keyboard_event_scan] best 12560738 combination zp[1]:241 [ keyboard_event_scan::row_scan#0 ] 
Attempting to uplift remaining variables inzp[1]:265 [ form_field_ptr::x#0 ]
Uplifting [form_field_ptr] best 12560738 combination zp[1]:265 [ form_field_ptr::x#0 ] 
Attempting to uplift remaining variables inzp[1]:103 [ bitmap_plot::x#4 bitmap_plot::x#1 bitmap_plot::x#0 bitmap_plot::x#3 bitmap_plot::x#2 ]
Uplifting [bitmap_plot] best 12559532 combination reg byte y [ bitmap_plot::x#4 bitmap_plot::x#1 bitmap_plot::x#0 bitmap_plot::x#3 bitmap_plot::x#2 ] 
Attempting to uplift remaining variables inzp[1]:255 [ keyboard_event_pressed::row_bits#0 ]
Uplifting [keyboard_event_pressed] best 12559532 combination zp[1]:255 [ keyboard_event_pressed::row_bits#0 ] 
Attempting to uplift remaining variables inzp[1]:19 [ keyboard_event_pressed::keycode#4 ]
Uplifting [keyboard_event_pressed] best 12559532 combination zp[1]:19 [ keyboard_event_pressed::keycode#4 ] 
Attempting to uplift remaining variables inzp[1]:102 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ]
Uplifting [bitmap_line_xdyi] best 12559532 combination zp[1]:102 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ] 
Attempting to uplift remaining variables inzp[1]:110 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ]
Uplifting [bitmap_line_ydxi] best 12559532 combination zp[1]:110 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ] 
Attempting to uplift remaining variables inzp[1]:116 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ]
Uplifting [bitmap_line_xdyd] best 12559532 combination zp[1]:116 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ] 
Attempting to uplift remaining variables inzp[1]:122 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ]
Uplifting [bitmap_line_ydxd] best 12559532 combination zp[1]:122 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ] 
Attempting to uplift remaining variables inzp[1]:108 [ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ]
Uplifting [bitmap_line_ydxi] best 12559532 combination zp[1]:108 [ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ] 
Attempting to uplift remaining variables inzp[1]:120 [ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ]
Uplifting [bitmap_line_ydxd] best 12559532 combination zp[1]:120 [ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ] 
Attempting to uplift remaining variables inzp[1]:257 [ keyboard_event_pressed::return#10 ]
Uplifting [keyboard_event_pressed] best 12559517 combination reg byte a [ keyboard_event_pressed::return#10 ] 
Attempting to uplift remaining variables inzp[1]:242 [ keyboard_event_pressed::return#0 ]
Uplifting [keyboard_event_pressed] best 12559511 combination reg byte a [ keyboard_event_pressed::return#0 ] 
Attempting to uplift remaining variables inzp[1]:243 [ keyboard_event_scan::$0 ]
Uplifting [keyboard_event_scan] best 12559505 combination reg byte a [ keyboard_event_scan::$0 ] 
Attempting to uplift remaining variables inzp[1]:244 [ keyboard_event_pressed::return#1 ]
Uplifting [keyboard_event_pressed] best 12559499 combination reg byte a [ keyboard_event_pressed::return#1 ] 
Attempting to uplift remaining variables inzp[1]:245 [ keyboard_event_scan::$3 ]
Uplifting [keyboard_event_scan] best 12559493 combination reg byte a [ keyboard_event_scan::$3 ] 
Attempting to uplift remaining variables inzp[1]:246 [ keyboard_event_pressed::return#2 ]
Uplifting [keyboard_event_pressed] best 12559487 combination reg byte a [ keyboard_event_pressed::return#2 ] 
Attempting to uplift remaining variables inzp[1]:247 [ keyboard_event_scan::$6 ]
Uplifting [keyboard_event_scan] best 12559481 combination reg byte a [ keyboard_event_scan::$6 ] 
Attempting to uplift remaining variables inzp[1]:248 [ keyboard_event_pressed::return#3 ]
Uplifting [keyboard_event_pressed] best 12559475 combination reg byte a [ keyboard_event_pressed::return#3 ] 
Attempting to uplift remaining variables inzp[1]:249 [ keyboard_event_scan::$9 ]
Uplifting [keyboard_event_scan] best 12559469 combination reg byte a [ keyboard_event_scan::$9 ] 
Attempting to uplift remaining variables inzp[1]:100 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 ]
Uplifting [bitmap_line_xdyi] best 12559469 combination zp[1]:100 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 ] 
Attempting to uplift remaining variables inzp[1]:109 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ]
Uplifting [bitmap_line_ydxi] best 12559469 combination zp[1]:109 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ] 
Attempting to uplift remaining variables inzp[1]:114 [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 ]
Uplifting [bitmap_line_xdyd] best 12559469 combination zp[1]:114 [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 ] 
Attempting to uplift remaining variables inzp[1]:121 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ]
Uplifting [bitmap_line_ydxd] best 12559469 combination zp[1]:121 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ] 
Attempting to uplift remaining variables inzp[1]:32 [ form_field_idx#28 form_field_idx#1 form_field_idx#18 form_field_idx#31 form_field_idx#6 form_field_idx#5 ]
Uplifting [] best 12559469 combination zp[1]:32 [ form_field_idx#28 form_field_idx#1 form_field_idx#18 form_field_idx#31 form_field_idx#6 form_field_idx#5 ] 
Attempting to uplift remaining variables inzp[1]:276 [ form_control::$15 ]
Uplifting [form_control] best 12559465 combination reg byte a [ form_control::$15 ] 
Attempting to uplift remaining variables inzp[1]:277 [ form_control::$22 ]
Uplifting [form_control] best 12559461 combination reg byte a [ form_control::$22 ] 
Attempting to uplift remaining variables inzp[1]:278 [ form_control::$13 ]
Uplifting [form_control] best 12559455 combination reg byte a [ form_control::$13 ] 
Attempting to uplift remaining variables inzp[1]:31 [ form_cursor_count#21 form_cursor_count#1 form_cursor_count#16 form_cursor_count#15 form_cursor_count#5 ]
Uplifting [] best 12559455 combination zp[1]:31 [ form_cursor_count#21 form_cursor_count#1 form_cursor_count#16 form_cursor_count#15 form_cursor_count#5 ] 
Attempting to uplift remaining variables inzp[1]:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 ]
Uplifting [bitmap_line_xdyi] best 12559455 combination zp[1]:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 ] 
Attempting to uplift remaining variables inzp[1]:106 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ]
Uplifting [bitmap_line_ydxi] best 12559455 combination zp[1]:106 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ] 
Attempting to uplift remaining variables inzp[1]:112 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 ]
Uplifting [bitmap_line_xdyd] best 12559455 combination zp[1]:112 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 ] 
Attempting to uplift remaining variables inzp[1]:118 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ]
Uplifting [bitmap_line_ydxd] best 12559455 combination zp[1]:118 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ] 
Attempting to uplift remaining variables inzp[1]:274 [ form_control::key_event#0 ]
Uplifting [form_control] best 12559443 combination reg byte a [ form_control::key_event#0 ] 
Attempting to uplift remaining variables inzp[1]:97 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 ]
Uplifting [bitmap_line_xdyi] best 12559443 combination zp[1]:97 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 ] 
Attempting to uplift remaining variables inzp[1]:105 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ]
Uplifting [bitmap_line_ydxi] best 12559443 combination zp[1]:105 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ] 
Attempting to uplift remaining variables inzp[1]:111 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 ]
Uplifting [bitmap_line_xdyd] best 12559443 combination zp[1]:111 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 ] 
Attempting to uplift remaining variables inzp[1]:117 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ]
Uplifting [bitmap_line_ydxd] best 12559443 combination zp[1]:117 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ] 
Attempting to uplift remaining variables inzp[1]:99 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 ]
Uplifting [bitmap_line_xdyi] best 12559443 combination zp[1]:99 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 ] 
Attempting to uplift remaining variables inzp[1]:107 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ]
Uplifting [bitmap_line_ydxi] best 12559443 combination zp[1]:107 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ] 
Attempting to uplift remaining variables inzp[1]:113 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 ]
Uplifting [bitmap_line_xdyd] best 12559443 combination zp[1]:113 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 ] 
Attempting to uplift remaining variables inzp[1]:119 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ]
Uplifting [bitmap_line_ydxd] best 12559443 combination zp[1]:119 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ] 
Attempting to uplift remaining variables inzp[1]:10 [ gfx_mode::cx#2 gfx_mode::cx#1 ]
Uplifting [gfx_mode] best 12550443 combination reg byte x [ gfx_mode::cx#2 gfx_mode::cx#1 ] 
Attempting to uplift remaining variables inzp[1]:259 [ form_control::return#0 ]
Uplifting [form_control] best 12544443 combination reg byte a [ form_control::return#0 ] 
Attempting to uplift remaining variables inzp[1]:280 [ form_set_screen::$1 ]
Uplifting [form_set_screen] best 12543843 combination reg byte a [ form_set_screen::$1 ] 
Attempting to uplift remaining variables inzp[1]:88 [ gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::cp#1 ]
Uplifting [gfx_init_plane_charset8] best 12534843 combination reg byte x [ gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::cp#1 ] 
Attempting to uplift remaining variables inzp[1]:84 [ gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ]
Uplifting [gfx_init_plane_charset8] best 12534843 combination zp[1]:84 [ gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ] 
Attempting to uplift remaining variables inzp[1]:87 [ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ]
Uplifting [gfx_init_plane_charset8] best 12534843 combination zp[1]:87 [ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ] 
Attempting to uplift remaining variables inzp[1]:33 [ form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 ]
Uplifting [form_mode] best 12534843 combination zp[1]:33 [ form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 ] 
Attempting to uplift remaining variables inzp[1]:11 [ gfx_mode::j#2 gfx_mode::j#1 ]
Uplifting [gfx_mode] best 12533643 combination reg byte x [ gfx_mode::j#2 gfx_mode::j#1 ] 
Attempting to uplift remaining variables inzp[1]:12 [ gfx_mode::i#2 gfx_mode::i#1 ]
Uplifting [gfx_mode] best 12532443 combination reg byte x [ gfx_mode::i#2 gfx_mode::i#1 ] 
Attempting to uplift remaining variables inzp[1]:46 [ form_control::return#2 ]
Uplifting [form_control] best 12531434 combination reg byte x [ form_control::return#2 ] 
Attempting to uplift remaining variables inzp[1]:129 [ bitmap_init::y#2 bitmap_init::y#1 ]
Uplifting [bitmap_init] best 12531254 combination reg byte x [ bitmap_init::y#2 bitmap_init::y#1 ] 
Attempting to uplift remaining variables inzp[1]:237 [ keyboard_event_get::return#3 ]
Uplifting [keyboard_event_get] best 12530654 combination reg byte a [ keyboard_event_get::return#3 ] 
Attempting to uplift remaining variables inzp[1]:238 [ gfx_mode::keyboard_event#0 ]
Uplifting [gfx_mode] best 12530054 combination reg byte a [ gfx_mode::keyboard_event#0 ] 
Attempting to uplift remaining variables inzp[1]:330 [ bitmap_init::$0 ]
Uplifting [bitmap_init] best 12530014 combination reg byte a [ bitmap_init::$0 ] 
Attempting to uplift remaining variables inzp[1]:332 [ bitmap_init::$7 ]
Uplifting [bitmap_init] best 12529954 combination reg byte a [ bitmap_init::$7 ] 
Attempting to uplift remaining variables inzp[1]:333 [ bitmap_init::$8 ]
Uplifting [bitmap_init] best 12529894 combination reg byte a [ bitmap_init::$8 ] 
Attempting to uplift remaining variables inzp[1]:334 [ bitmap_init::$9 ]
Uplifting [bitmap_init] best 12529834 combination reg byte a [ bitmap_init::$9 ] 
Attempting to uplift remaining variables inzp[1]:338 [ gfx_init_screen3::$3 ]
Uplifting [gfx_init_screen3] best 12529234 combination reg byte a [ gfx_init_screen3::$3 ] 
Attempting to uplift remaining variables inzp[1]:343 [ gfx_init_screen2::$4 ]
Uplifting [gfx_init_screen2] best 12528634 combination reg byte a [ gfx_init_screen2::$4 ] 
Attempting to uplift remaining variables inzp[1]:345 [ gfx_init_screen1::$1 ]
Uplifting [gfx_init_screen1] best 12528034 combination reg byte a [ gfx_init_screen1::$1 ] 
Attempting to uplift remaining variables inzp[1]:349 [ gfx_init_screen0::$3 ]
Uplifting [gfx_init_screen0] best 12527434 combination reg byte a [ gfx_init_screen0::$3 ] 
Attempting to uplift remaining variables inzp[1]:143 [ gfx_init_screen3::cx#2 gfx_init_screen3::cx#1 ]
Uplifting [gfx_init_screen3] best 12526434 combination reg byte x [ gfx_init_screen3::cx#2 gfx_init_screen3::cx#1 ] 
Attempting to uplift remaining variables inzp[1]:155 [ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ]
Uplifting [gfx_init_screen0] best 12525434 combination reg byte x [ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ] 
Attempting to uplift remaining variables inzp[1]:71 [ gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::ax#1 ]
Uplifting [gfx_init_plane_horisontal2] best 12524534 combination reg byte x [ gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::ax#1 ] 
Attempting to uplift remaining variables inzp[1]:147 [ gfx_init_screen2::cx#2 gfx_init_screen2::cx#1 ]
Uplifting [gfx_init_screen2] best 12523534 combination reg byte x [ gfx_init_screen2::cx#2 gfx_init_screen2::cx#1 ] 
Attempting to uplift remaining variables inzp[1]:63 [ gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 ]
Uplifting [gfx_init_plane_fill] best 12523534 combination zp[1]:63 [ gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 ] 
Attempting to uplift remaining variables inzp[1]:123 [ bitmap_clear::y#4 bitmap_clear::y#1 ]
Uplifting [bitmap_clear] best 12523534 combination zp[1]:123 [ bitmap_clear::y#4 bitmap_clear::y#1 ] 
Attempting to uplift remaining variables inzp[1]:5 [ gfx_mode::cy#4 gfx_mode::cy#1 ]
Uplifting [gfx_mode] best 12523534 combination zp[1]:5 [ gfx_mode::cy#4 gfx_mode::cy#1 ] 
Attempting to uplift remaining variables inzp[1]:83 [ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ]
Uplifting [gfx_init_plane_charset8] best 12523534 combination zp[1]:83 [ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ] 
Attempting to uplift remaining variables inzp[1]:340 [ gfx_init_screen2::col#0 ]
Uplifting [gfx_init_screen2] best 12523434 combination reg byte y [ gfx_init_screen2::col#0 ] 
Attempting to uplift remaining variables inzp[1]:336 [ gfx_init_screen3::$1 ]
Uplifting [gfx_init_screen3] best 12523434 combination zp[1]:336 [ gfx_init_screen3::$1 ] 
Attempting to uplift remaining variables inzp[1]:341 [ gfx_init_screen2::col2#0 ]
Uplifting [gfx_init_screen2] best 12523434 combination zp[1]:341 [ gfx_init_screen2::col2#0 ] 
Attempting to uplift remaining variables inzp[1]:347 [ gfx_init_screen0::$1 ]
Uplifting [gfx_init_screen0] best 12523434 combination zp[1]:347 [ gfx_init_screen0::$1 ] 
Attempting to uplift remaining variables inzp[1]:310 [ bitmap_line::y1#0 ]
Uplifting [bitmap_line] best 12523434 combination zp[1]:310 [ bitmap_line::y1#0 ] 
Attempting to uplift remaining variables inzp[1]:62 [ gfx_init_plane_fill::fill#6 ]
Uplifting [gfx_init_plane_fill] best 12523434 combination zp[1]:62 [ gfx_init_plane_fill::fill#6 ] 
Attempting to uplift remaining variables inzp[1]:331 [ bitmap_init::$10 ]
Uplifting [bitmap_init] best 12523434 combination zp[1]:331 [ bitmap_init::$10 ] 
Attempting to uplift remaining variables inzp[1]:312 [ bitmap_line::yd#2 ]
Uplifting [bitmap_line] best 12523424 combination reg byte y [ bitmap_line::yd#2 ] 
Attempting to uplift remaining variables inzp[1]:313 [ bitmap_line::yd#1 ]
Uplifting [bitmap_line] best 12523414 combination reg byte y [ bitmap_line::yd#1 ] 
Attempting to uplift remaining variables inzp[1]:315 [ bitmap_line::yd#10 ]
Uplifting [bitmap_line] best 12523404 combination reg byte y [ bitmap_line::yd#10 ] 
Attempting to uplift remaining variables inzp[1]:316 [ bitmap_line::yd#11 ]
Uplifting [bitmap_line] best 12523394 combination reg byte y [ bitmap_line::yd#11 ] 
Attempting to uplift remaining variables inzp[1]:308 [ bitmap_line::x1#0 ]
Uplifting [bitmap_line] best 12523394 combination zp[1]:308 [ bitmap_line::x1#0 ] 
Attempting to uplift remaining variables inzp[1]:307 [ bitmap_line::x0#0 ]
Uplifting [bitmap_line] best 12523394 combination zp[1]:307 [ bitmap_line::x0#0 ] 
Attempting to uplift remaining variables inzp[1]:311 [ bitmap_line::xd#2 ]
Uplifting [bitmap_line] best 12523394 combination zp[1]:311 [ bitmap_line::xd#2 ] 
Attempting to uplift remaining variables inzp[1]:314 [ bitmap_line::xd#1 ]
Uplifting [bitmap_line] best 12523394 combination zp[1]:314 [ bitmap_line::xd#1 ] 
Attempting to uplift remaining variables inzp[1]:96 [ gfx_init_vic_bitmap::l#2 gfx_init_vic_bitmap::l#1 ]
Uplifting [gfx_init_vic_bitmap] best 12523394 combination zp[1]:96 [ gfx_init_vic_bitmap::l#2 gfx_init_vic_bitmap::l#1 ] 
Attempting to uplift remaining variables inzp[1]:68 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 ]
Uplifting [gfx_init_plane_horisontal2] best 12523394 combination zp[1]:68 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 ] 
Attempting to uplift remaining variables inzp[1]:150 [ gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 ]
Uplifting [gfx_init_screen1] best 12523394 combination zp[1]:150 [ gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 ] 
Attempting to uplift remaining variables inzp[1]:142 [ gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 ]
Uplifting [gfx_init_screen3] best 12523394 combination zp[1]:142 [ gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 ] 
Attempting to uplift remaining variables inzp[1]:154 [ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ]
Uplifting [gfx_init_screen0] best 12523394 combination zp[1]:154 [ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ] 
Attempting to uplift remaining variables inzp[1]:76 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 ]
Uplifting [gfx_init_plane_horisontal] best 12523394 combination zp[1]:76 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 ] 
Attempting to uplift remaining variables inzp[1]:146 [ gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 ]
Uplifting [gfx_init_screen2] best 12523394 combination zp[1]:146 [ gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 ] 
Attempting to uplift remaining variables inzp[1]:90 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 ]
Uplifting [gfx_init_plane_8bppchunky] best 12523394 combination zp[1]:90 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 ] 
Attempting to uplift remaining variables inzp[1]:2 [ gfx_mode::dtv_control#12 gfx_mode::dtv_control#6 gfx_mode::dtv_control#13 gfx_mode::dtv_control#5 gfx_mode::dtv_control#11 gfx_mode::dtv_control#4 gfx_mode::dtv_control#10 gfx_mode::dtv_control#3 gfx_mode::dtv_control#15 gfx_mode::dtv_control#14 gfx_mode::dtv_control#2 ]
Uplifting [gfx_mode] best 12523375 combination reg byte x [ gfx_mode::dtv_control#12 gfx_mode::dtv_control#6 gfx_mode::dtv_control#13 gfx_mode::dtv_control#5 gfx_mode::dtv_control#11 gfx_mode::dtv_control#4 gfx_mode::dtv_control#10 gfx_mode::dtv_control#3 gfx_mode::dtv_control#15 gfx_mode::dtv_control#14 gfx_mode::dtv_control#2 ] 
Attempting to uplift remaining variables inzp[1]:72 [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 ]
Uplifting [gfx_init_plane_vertical] best 12523375 combination zp[1]:72 [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 ] 
Attempting to uplift remaining variables inzp[1]:138 [ gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 ]
Uplifting [gfx_init_screen4] best 12523375 combination zp[1]:138 [ gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 ] 
Attempting to uplift remaining variables inzp[1]:132 [ gfx_init_charset::c#4 gfx_init_charset::c#1 ]
Uplifting [gfx_init_charset] best 12523375 combination zp[1]:132 [ gfx_init_charset::c#4 gfx_init_charset::c#1 ] 
Attempting to uplift remaining variables inzp[1]:80 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ]
Uplifting [gfx_init_plane_charset8] best 12523375 combination zp[1]:80 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ] 
Attempting to uplift remaining variables inzp[1]:3 [ gfx_mode::vic_control#4 gfx_mode::vic_control#2 gfx_mode::vic_control#5 ]
Uplifting [gfx_mode] best 12523364 combination reg byte x [ gfx_mode::vic_control#4 gfx_mode::vic_control#2 gfx_mode::vic_control#5 ] 
Attempting to uplift remaining variables inzp[1]:158 [ gfx_mode::$18 ]
Uplifting [gfx_mode] best 12523358 combination reg byte a [ gfx_mode::$18 ] 
Attempting to uplift remaining variables inzp[1]:174 [ gfx_mode::$23 ]
Uplifting [gfx_mode] best 12523352 combination reg byte a [ gfx_mode::$23 ] 
Attempting to uplift remaining variables inzp[1]:175 [ gfx_mode::$25 ]
Uplifting [gfx_mode] best 12523346 combination reg byte a [ gfx_mode::$25 ] 
Attempting to uplift remaining variables inzp[1]:178 [ gfx_mode::$27 ]
Uplifting [gfx_mode] best 12523340 combination reg byte a [ gfx_mode::$27 ] 
Attempting to uplift remaining variables inzp[1]:179 [ gfx_mode::$28 ]
Uplifting [gfx_mode] best 12523334 combination reg byte a [ gfx_mode::$28 ] 
Attempting to uplift remaining variables inzp[1]:180 [ gfx_mode::$29 ]
Uplifting [gfx_mode] best 12523328 combination reg byte a [ gfx_mode::$29 ] 
Attempting to uplift remaining variables inzp[1]:181 [ gfx_mode::$30 ]
Uplifting [gfx_mode] best 12523322 combination reg byte a [ gfx_mode::$30 ] 
Attempting to uplift remaining variables inzp[1]:182 [ gfx_mode::$31 ]
Uplifting [gfx_mode] best 12523316 combination reg byte a [ gfx_mode::$31 ] 
Attempting to uplift remaining variables inzp[1]:183 [ gfx_mode::$32 ]
Uplifting [gfx_mode] best 12523310 combination reg byte a [ gfx_mode::$32 ] 
Attempting to uplift remaining variables inzp[1]:199 [ gfx_mode::$37 ]
Uplifting [gfx_mode] best 12523304 combination reg byte a [ gfx_mode::$37 ] 
Attempting to uplift remaining variables inzp[1]:200 [ gfx_mode::$39 ]
Uplifting [gfx_mode] best 12523298 combination reg byte a [ gfx_mode::$39 ] 
Attempting to uplift remaining variables inzp[1]:203 [ gfx_mode::$41 ]
Uplifting [gfx_mode] best 12523292 combination reg byte a [ gfx_mode::$41 ] 
Attempting to uplift remaining variables inzp[1]:204 [ gfx_mode::$42 ]
Uplifting [gfx_mode] best 12523286 combination reg byte a [ gfx_mode::$42 ] 
Attempting to uplift remaining variables inzp[1]:205 [ gfx_mode::$43 ]
Uplifting [gfx_mode] best 12523280 combination reg byte a [ gfx_mode::$43 ] 
Attempting to uplift remaining variables inzp[1]:206 [ gfx_mode::$44 ]
Uplifting [gfx_mode] best 12523274 combination reg byte a [ gfx_mode::$44 ] 
Attempting to uplift remaining variables inzp[1]:207 [ gfx_mode::$45 ]
Uplifting [gfx_mode] best 12523268 combination reg byte a [ gfx_mode::$45 ] 
Attempting to uplift remaining variables inzp[1]:223 [ gfx_mode::$51 ]
Uplifting [gfx_mode] best 12523262 combination reg byte a [ gfx_mode::$51 ] 
Attempting to uplift remaining variables inzp[1]:225 [ gfx_mode::$84 ]
Uplifting [gfx_mode] best 12523256 combination reg byte a [ gfx_mode::$84 ] 
Attempting to uplift remaining variables inzp[1]:226 [ gfx_mode::$53 ]
Uplifting [gfx_mode] best 12523250 combination reg byte a [ gfx_mode::$53 ] 
Attempting to uplift remaining variables inzp[1]:229 [ gfx_mode::$55 ]
Uplifting [gfx_mode] best 12523244 combination reg byte a [ gfx_mode::$55 ] 
Attempting to uplift remaining variables inzp[1]:230 [ gfx_mode::$56 ]
Uplifting [gfx_mode] best 12523238 combination reg byte a [ gfx_mode::$56 ] 
Attempting to uplift remaining variables inzp[1]:231 [ gfx_mode::$57 ]
Uplifting [gfx_mode] best 12523232 combination reg byte a [ gfx_mode::$57 ] 
Attempting to uplift remaining variables inzp[1]:232 [ gfx_mode::$58 ]
Uplifting [gfx_mode] best 12523226 combination reg byte a [ gfx_mode::$58 ] 
Attempting to uplift remaining variables inzp[1]:233 [ gfx_mode::$59 ]
Uplifting [gfx_mode] best 12523220 combination reg byte a [ gfx_mode::$59 ] 
Attempting to uplift remaining variables inzp[1]:234 [ gfx_mode::$60 ]
Uplifting [gfx_mode] best 12523214 combination reg byte a [ gfx_mode::$60 ] 
Attempting to uplift remaining variables inzp[1]:235 [ gfx_mode::$61 ]
Uplifting [gfx_mode] best 12523208 combination reg byte a [ gfx_mode::$61 ] 
Attempting to uplift remaining variables inzp[1]:236 [ gfx_mode::$62 ]
Uplifting [gfx_mode] best 12523202 combination reg byte a [ gfx_mode::$62 ] 
Attempting to uplift remaining variables inzp[1]:4 [ gfx_mode::vic_control2#2 ]
Uplifting [gfx_mode] best 12523193 combination reg byte a [ gfx_mode::vic_control2#2 ] 
Attempting to uplift remaining variables inzp[1]:224 [ gfx_mode::$52 ]
Uplifting [gfx_mode] best 12523193 combination zp[1]:224 [ gfx_mode::$52 ] 
Attempting to uplift remaining variables inzp[1]:159 [ gfx_mode::plane_a_offs#0 ]
Uplifting [gfx_mode] best 12523191 combination reg byte x [ gfx_mode::plane_a_offs#0 ] 
Attempting to uplift remaining variables inzp[1]:184 [ gfx_mode::plane_b_offs#0 ]
Uplifting [gfx_mode] best 12523189 combination reg byte x [ gfx_mode::plane_b_offs#0 ] 
Coalescing zero page register [ zp[2]:6 [ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 ] ] with [ zp[2]:227 [ get_vic_screen::return#11 ] ] - score: 1
Coalescing zero page register [ zp[2]:21 [ get_vic_screen::return#5 ] ] with [ zp[2]:208 [ get_vic_screen::return#10 ] ] - score: 1
Coalescing zero page register [ zp[2]:23 [ get_vic_charset::return#2 ] ] with [ zp[2]:217 [ get_vic_charset::return#4 ] ] - score: 1
Coalescing zero page register [ zp[4]:26 [ get_plane::return#14 ] ] with [ zp[4]:160 [ get_plane::return#16 ] ] - score: 1
Coalescing zero page register [ zp[4]:26 [ get_plane::return#14 get_plane::return#16 ] ] with [ zp[4]:185 [ get_plane::return#17 ] ] - score: 1
Coalescing zero page register [ zp[2]:35 [ render_preset_name::name#13 ] ] with [ zp[2]:37 [ print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:56 [ memset::dst#2 memset::dst#4 memset::dst#1 ] ] with [ zp[2]:283 [ memset::str#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:64 [ gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 ] ] with [ zp[2]:298 [ gfx_init_plane_fill::gfxb#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 ] ] with [ zp[1]:311 [ bitmap_line::xd#2 ] ] - score: 1
Coalescing zero page register [ zp[1]:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 bitmap_line::xd#2 ] ] with [ zp[1]:314 [ bitmap_line::xd#1 ] ] - score: 1
Coalescing zero page register [ zp[1]:99 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 ] ] with [ zp[1]:307 [ bitmap_line::x0#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:107 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ] ] with [ zp[1]:310 [ bitmap_line::y1#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:108 [ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ] ] with [ zp[1]:308 [ bitmap_line::x1#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:124 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ] ] with [ zp[2]:328 [ bitmap_clear::bitmap#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:164 [ gfx_mode::$20 ] ] with [ zp[4]:168 [ gfx_mode::plane_a#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:189 [ gfx_mode::$34 ] ] with [ zp[4]:193 [ gfx_mode::plane_b#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:210 [ gfx_mode::$82 ] ] with [ zp[2]:212 [ gfx_mode::$47 ] ] - score: 1
Coalescing zero page register [ zp[2]:219 [ gfx_mode::$83 ] ] with [ zp[2]:221 [ gfx_mode::$50 ] ] - score: 1
Coalescing zero page register [ zp[2]:266 [ form_field_ptr::return#0 ] ] with [ zp[2]:268 [ form_field_ptr::return#3 ] ] - score: 1
Coalescing zero page register [ zp[2]:294 [ gfx_init_plane_fill::$4 ] ] with [ zp[2]:296 [ gfx_init_plane_fill::$5 ] ] - score: 1
Coalescing zero page register [ zp[2]:318 [ bitmap_plot::plotter_x#0 ] ] with [ zp[2]:322 [ bitmap_plot::plotter#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 bitmap_line::xd#2 bitmap_line::xd#1 ] ] with [ zp[1]:105 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ] ] - score: 2
Coalescing zero page register [ zp[1]:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 bitmap_line::xd#2 bitmap_line::xd#1 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ] ] with [ zp[1]:112 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 ] ] - score: 2
Coalescing zero page register [ zp[1]:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 bitmap_line::xd#2 bitmap_line::xd#1 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 ] ] with [ zp[1]:117 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ] ] - score: 2
Coalescing zero page register [ zp[2]:6 [ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 get_vic_screen::return#11 ] ] with [ zp[2]:21 [ get_vic_screen::return#5 get_vic_screen::return#10 ] ] - score: 1
Coalescing zero page register [ zp[2]:23 [ get_vic_charset::return#2 get_vic_charset::return#4 ] ] with [ zp[2]:219 [ gfx_mode::$83 gfx_mode::$50 ] ] - score: 1
Coalescing zero page register [ zp[4]:26 [ get_plane::return#14 get_plane::return#16 get_plane::return#17 ] ] with [ zp[4]:164 [ gfx_mode::$20 gfx_mode::plane_a#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:26 [ get_plane::return#14 get_plane::return#16 get_plane::return#17 gfx_mode::$20 gfx_mode::plane_a#0 ] ] with [ zp[4]:189 [ gfx_mode::$34 gfx_mode::plane_b#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:64 [ gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 gfx_init_plane_fill::gfxb#0 ] ] with [ zp[2]:294 [ gfx_init_plane_fill::$4 gfx_init_plane_fill::$5 ] ] - score: 1
Coalescing zero page register [ zp[1]:99 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 bitmap_line::x0#0 ] ] with [ zp[1]:113 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:99 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 bitmap_line::x0#0 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 ] ] with [ zp[1]:120 [ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ] ] - score: 1
Coalescing zero page register [ zp[1]:107 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 bitmap_line::y1#0 ] ] with [ zp[1]:119 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:210 [ gfx_mode::$82 gfx_mode::$47 ] ] with [ zp[2]:214 [ gfx_mode::$48 ] ] - score: 1
Coalescing zero page register [ zp[2]:266 [ form_field_ptr::return#0 form_field_ptr::return#3 ] ] with [ zp[2]:270 [ form_control::field#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:6 [ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 get_vic_screen::return#11 get_vic_screen::return#5 get_vic_screen::return#10 ] ] with [ zp[2]:210 [ gfx_mode::$82 gfx_mode::$47 gfx_mode::$48 ] ] - score: 1
Coalescing zero page register [ zp[1]:33 [ form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 ] ] with [ zp[1]:5 [ gfx_mode::cy#4 gfx_mode::cy#1 ] ]
Coalescing zero page register [ zp[2]:35 [ render_preset_name::name#13 print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 ] ] with [ zp[2]:6 [ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 get_vic_screen::return#11 get_vic_screen::return#5 get_vic_screen::return#10 gfx_mode::$82 gfx_mode::$47 gfx_mode::$48 ] ]
Coalescing zero page register [ zp[2]:39 [ print_str_at::at#2 print_str_at::at#0 ] ] with [ zp[2]:8 [ gfx_mode::col#2 gfx_mode::col#3 gfx_mode::col#1 ] ]
Coalescing zero page register [ zp[2]:43 [ apply_preset::preset#15 ] ] with [ zp[2]:23 [ get_vic_charset::return#2 get_vic_charset::return#4 gfx_mode::$83 gfx_mode::$50 ] ]
Coalescing zero page register [ zp[2]:50 [ print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 ] ] with [ zp[2]:47 [ form_set_screen::line#2 form_set_screen::line#1 ] ]
Coalescing zero page register [ zp[4]:58 [ gfx_init_plane_fill::plane_addr#3 ] ] with [ zp[4]:26 [ get_plane::return#14 get_plane::return#16 get_plane::return#17 gfx_mode::$20 gfx_mode::plane_a#0 gfx_mode::$34 gfx_mode::plane_b#0 ] ]
Coalescing zero page register [ zp[1]:62 [ gfx_init_plane_fill::fill#6 ] ] with [ zp[1]:14 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ] ]
Coalescing zero page register [ zp[1]:63 [ gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 ] ] with [ zp[1]:17 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ] ]
Coalescing zero page register [ zp[2]:64 [ gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 gfx_init_plane_fill::gfxb#0 gfx_init_plane_fill::$4 gfx_init_plane_fill::$5 ] ] with [ zp[2]:56 [ memset::dst#2 memset::dst#4 memset::dst#1 memset::str#0 ] ]
Coalescing zero page register [ zp[1]:68 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 ] ] with [ zp[1]:19 [ keyboard_event_pressed::keycode#4 ] ]
Coalescing zero page register [ zp[2]:73 [ gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 ] ] with [ zp[2]:69 [ gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 ] ]
Coalescing zero page register [ zp[1]:76 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 ] ] with [ zp[1]:72 [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 ] ]
Coalescing zero page register [ zp[2]:81 [ gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 ] ] with [ zp[2]:77 [ gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 ] ]
Coalescing zero page register [ zp[1]:90 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 ] ] with [ zp[1]:80 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ] ]
Coalescing zero page register [ zp[2]:91 [ gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 ] ] with [ zp[2]:85 [ gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 ] ]
Coalescing zero page register [ zp[1]:96 [ gfx_init_vic_bitmap::l#2 gfx_init_vic_bitmap::l#1 ] ] with [ zp[1]:83 [ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ] ]
Coalescing zero page register [ zp[1]:97 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 ] ] with [ zp[1]:84 [ gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ] ]
Coalescing zero page register [ zp[1]:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 bitmap_line::xd#2 bitmap_line::xd#1 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ] ] with [ zp[1]:87 [ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ] ]
Coalescing zero page register [ zp[1]:106 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ] ] with [ zp[1]:100 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 ] ]
Coalescing zero page register [ zp[1]:107 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 bitmap_line::y1#0 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ] ] with [ zp[1]:102 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ] ]
Coalescing zero page register [ zp[1]:111 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 ] ] with [ zp[1]:109 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ] ]
Coalescing zero page register [ zp[1]:114 [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 ] ] with [ zp[1]:110 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ] ]
Coalescing zero page register [ zp[1]:118 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ] ] with [ zp[1]:116 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ] ]
Coalescing zero page register [ zp[1]:123 [ bitmap_clear::y#4 bitmap_clear::y#1 ] ] with [ zp[1]:99 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 bitmap_line::x0#0 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ] ]
Coalescing zero page register [ zp[2]:124 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::bitmap#0 ] ] with [ zp[2]:94 [ gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::gfxb#1 ] ]
Coalescing zero page register [ zp[1]:132 [ gfx_init_charset::c#4 gfx_init_charset::c#1 ] ] with [ zp[1]:108 [ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 bitmap_line::x1#0 ] ]
Coalescing zero page register [ zp[2]:133 [ gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 ] ] with [ zp[2]:130 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] ]
Coalescing zero page register [ zp[1]:138 [ gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 ] ] with [ zp[1]:121 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ] ]
Coalescing zero page register [ zp[2]:139 [ gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 ] ] with [ zp[2]:135 [ gfx_init_charset::charset#2 gfx_init_charset::charset#3 gfx_init_charset::charset#1 ] ]
Coalescing zero page register [ zp[1]:142 [ gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 ] ] with [ zp[1]:122 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ] ]
Coalescing zero page register [ zp[2]:148 [ gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 ] ] with [ zp[2]:144 [ gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 ] ]
Coalescing zero page register [ zp[1]:150 [ gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 ] ] with [ zp[1]:146 [ gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 ] ]
Coalescing zero page register [ zp[2]:156 [ gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 ] ] with [ zp[2]:152 [ gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 ] ]
Coalescing zero page register [ zp[1]:224 [ gfx_mode::$52 ] ] with [ zp[1]:154 [ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ] ]
Coalescing zero page register [ zp[2]:263 [ form_field_ptr::line#0 ] ] with [ zp[2]:172 [ gfx_mode::$24 ] ]
Coalescing zero page register [ zp[1]:265 [ form_field_ptr::x#0 ] ] with [ zp[1]:241 [ keyboard_event_scan::row_scan#0 ] ]
Coalescing zero page register [ zp[2]:266 [ form_field_ptr::return#0 form_field_ptr::return#3 form_control::field#0 ] ] with [ zp[2]:176 [ gfx_mode::$26 ] ]
Coalescing zero page register [ zp[2]:285 [ memset::end#0 ] ] with [ zp[2]:197 [ gfx_mode::$38 ] ]
Coalescing zero page register [ zp[2]:291 [ gfx_init_plane_fill::$1 ] ] with [ zp[2]:201 [ gfx_mode::$40 ] ]
Coalescing zero page register [ zp[2]:318 [ bitmap_plot::plotter_x#0 bitmap_plot::plotter#0 ] ] with [ zp[2]:304 [ gfx_init_plane_8bppchunky::$5 ] ]
Coalescing zero page register [ zp[1]:331 [ bitmap_init::$10 ] ] with [ zp[1]:255 [ keyboard_event_pressed::row_bits#0 ] ]
Coalescing zero page register [ zp[1]:341 [ gfx_init_screen2::col2#0 ] ] with [ zp[1]:336 [ gfx_init_screen3::$1 ] ]
Coalescing zero page register [ zp[2]:50 [ print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 form_set_screen::line#2 form_set_screen::line#1 ] ] with [ zp[2]:35 [ render_preset_name::name#13 print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 get_vic_screen::return#11 get_vic_screen::return#5 get_vic_screen::return#10 gfx_mode::$82 gfx_mode::$47 gfx_mode::$48 ] ]
Coalescing zero page register [ zp[2]:52 [ print_char_cursor#41 print_char_cursor#24 print_char_cursor#72 print_char_cursor#73 print_char_cursor#42 print_char_cursor#28 ] ] with [ zp[2]:39 [ print_str_at::at#2 print_str_at::at#0 gfx_mode::col#2 gfx_mode::col#3 gfx_mode::col#1 ] ]
Coalescing zero page register [ zp[2]:54 [ print_line_cursor#21 print_line_cursor#2 print_set_screen::screen#2 print_line_cursor#22 ] ] with [ zp[2]:43 [ apply_preset::preset#15 get_vic_charset::return#2 get_vic_charset::return#4 gfx_mode::$83 gfx_mode::$50 ] ]
Coalescing zero page register [ zp[2]:73 [ gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 ] ] with [ zp[2]:64 [ gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 gfx_init_plane_fill::gfxb#0 gfx_init_plane_fill::$4 gfx_init_plane_fill::$5 memset::dst#2 memset::dst#4 memset::dst#1 memset::str#0 ] ]
Coalescing zero page register [ zp[1]:76 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 ] ] with [ zp[1]:33 [ form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 gfx_mode::cy#4 gfx_mode::cy#1 ] ]
Coalescing zero page register [ zp[1]:90 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ] ] with [ zp[1]:62 [ gfx_init_plane_fill::fill#6 keyboard_event_scan::row#2 keyboard_event_scan::row#1 ] ]
Coalescing zero page register [ zp[1]:96 [ gfx_init_vic_bitmap::l#2 gfx_init_vic_bitmap::l#1 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ] ] with [ zp[1]:63 [ gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ] ]
Coalescing zero page register [ zp[1]:97 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ] ] with [ zp[1]:68 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 keyboard_event_pressed::keycode#4 ] ]
Coalescing zero page register [ zp[1]:118 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ] ] with [ zp[1]:106 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 ] ]
Coalescing zero page register [ zp[2]:124 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::bitmap#0 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::gfxb#1 ] ] with [ zp[2]:81 [ gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 ] ]
Coalescing zero page register [ zp[2]:133 [ gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] ] with [ zp[2]:91 [ gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 ] ]
Coalescing zero page register [ zp[1]:138 [ gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ] ] with [ zp[1]:111 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ] ]
Coalescing zero page register [ zp[1]:142 [ gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ] ] with [ zp[1]:114 [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ] ]
Coalescing zero page register [ zp[2]:148 [ gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 ] ] with [ zp[2]:139 [ gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 gfx_init_charset::charset#2 gfx_init_charset::charset#3 gfx_init_charset::charset#1 ] ]
Coalescing zero page register [ zp[1]:150 [ gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 ] ] with [ zp[1]:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 bitmap_line::xd#2 bitmap_line::xd#1 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ] ]
Coalescing zero page register [ zp[1]:224 [ gfx_mode::$52 gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ] ] with [ zp[1]:107 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 bitmap_line::y1#0 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ] ]
Coalescing zero page register [ zp[2]:263 [ form_field_ptr::line#0 gfx_mode::$24 ] ] with [ zp[2]:156 [ gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 ] ]
Coalescing zero page register [ zp[1]:265 [ form_field_ptr::x#0 keyboard_event_scan::row_scan#0 ] ] with [ zp[1]:123 [ bitmap_clear::y#4 bitmap_clear::y#1 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 bitmap_line::x0#0 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ] ]
Coalescing zero page register [ zp[2]:318 [ bitmap_plot::plotter_x#0 bitmap_plot::plotter#0 gfx_init_plane_8bppchunky::$5 ] ] with [ zp[2]:266 [ form_field_ptr::return#0 form_field_ptr::return#3 form_control::field#0 gfx_mode::$26 ] ]
Coalescing zero page register [ zp[2]:320 [ bitmap_plot::plotter_y#0 ] ] with [ zp[2]:285 [ memset::end#0 gfx_mode::$38 ] ]
Coalescing zero page register [ zp[1]:331 [ bitmap_init::$10 keyboard_event_pressed::row_bits#0 ] ] with [ zp[1]:132 [ gfx_init_charset::c#4 gfx_init_charset::c#1 bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 bitmap_line::x1#0 ] ]
Coalescing zero page register [ zp[1]:347 [ gfx_init_screen0::$1 ] ] with [ zp[1]:341 [ gfx_init_screen2::col2#0 gfx_init_screen3::$1 ] ]
Coalescing zero page register [ zp[2]:73 [ gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 gfx_init_plane_fill::gfxb#0 gfx_init_plane_fill::$4 gfx_init_plane_fill::$5 memset::dst#2 memset::dst#4 memset::dst#1 memset::str#0 ] ] with [ zp[2]:50 [ print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 form_set_screen::line#2 form_set_screen::line#1 render_preset_name::name#13 print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 get_vic_screen::return#11 get_vic_screen::return#5 get_vic_screen::return#10 gfx_mode::$82 gfx_mode::$47 gfx_mode::$48 ] ]
Coalescing zero page register [ zp[1]:118 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 ] ] with [ zp[1]:76 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 gfx_mode::cy#4 gfx_mode::cy#1 ] ]
Coalescing zero page register [ zp[1]:138 [ gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ] ] with [ zp[1]:90 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 gfx_init_plane_fill::fill#6 keyboard_event_scan::row#2 keyboard_event_scan::row#1 ] ]
Coalescing zero page register [ zp[1]:142 [ gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ] ] with [ zp[1]:97 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 keyboard_event_pressed::keycode#4 ] ]
Coalescing zero page register [ zp[2]:148 [ gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 gfx_init_charset::charset#2 gfx_init_charset::charset#3 gfx_init_charset::charset#1 ] ] with [ zp[2]:124 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::bitmap#0 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::gfxb#1 gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 ] ]
Coalescing zero page register [ zp[2]:263 [ form_field_ptr::line#0 gfx_mode::$24 gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 ] ] with [ zp[2]:133 [ gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 ] ]
Coalescing zero page register [ zp[1]:347 [ gfx_init_screen0::$1 gfx_init_screen2::col2#0 gfx_init_screen3::$1 ] ] with [ zp[1]:96 [ gfx_init_vic_bitmap::l#2 gfx_init_vic_bitmap::l#1 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ] ]
Coalescing zero page register [ zp[2]:148 [ gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 gfx_init_charset::charset#2 gfx_init_charset::charset#3 gfx_init_charset::charset#1 bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::bitmap#0 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::gfxb#1 gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 ] ] with [ zp[2]:73 [ gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 gfx_init_plane_fill::gfxb#0 gfx_init_plane_fill::$4 gfx_init_plane_fill::$5 memset::dst#2 memset::dst#4 memset::dst#1 memset::str#0 print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 form_set_screen::line#2 form_set_screen::line#1 render_preset_name::name#13 print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 get_vic_screen::return#11 get_vic_screen::return#5 get_vic_screen::return#10 gfx_mode::$82 gfx_mode::$47 gfx_mode::$48 ] ]
Allocated (was zp[1]:18) zp[1]:2 [ keyboard_events_size#18 keyboard_events_size#106 keyboard_events_size#97 keyboard_events_size#47 keyboard_events_size#27 keyboard_events_size#24 keyboard_events_size#100 keyboard_events_size#4 keyboard_events_size#105 keyboard_events_size#1 keyboard_events_size#2 ]
Allocated (was zp[1]:31) zp[1]:3 [ form_cursor_count#21 form_cursor_count#1 form_cursor_count#16 form_cursor_count#15 form_cursor_count#5 ]
Allocated (was zp[1]:32) zp[1]:4 [ form_field_idx#28 form_field_idx#1 form_field_idx#18 form_field_idx#31 form_field_idx#6 form_field_idx#5 ]
Allocated (was zp[2]:52) zp[2]:5 [ print_char_cursor#41 print_char_cursor#24 print_char_cursor#72 print_char_cursor#73 print_char_cursor#42 print_char_cursor#28 print_str_at::at#2 print_str_at::at#0 gfx_mode::col#2 gfx_mode::col#3 gfx_mode::col#1 ]
Allocated (was zp[2]:54) zp[2]:7 [ print_line_cursor#21 print_line_cursor#2 print_set_screen::screen#2 print_line_cursor#22 apply_preset::preset#15 get_vic_charset::return#2 get_vic_charset::return#4 gfx_mode::$83 gfx_mode::$50 ]
Allocated (was zp[4]:58) zp[4]:9 [ gfx_init_plane_fill::plane_addr#3 get_plane::return#14 get_plane::return#16 get_plane::return#17 gfx_mode::$20 gfx_mode::plane_a#0 gfx_mode::$34 gfx_mode::plane_b#0 ]
Allocated (was zp[1]:118) zp[1]:13 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 gfx_mode::cy#4 gfx_mode::cy#1 ]
Allocated (was zp[1]:138) zp[1]:14 [ gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 gfx_init_plane_fill::fill#6 keyboard_event_scan::row#2 keyboard_event_scan::row#1 ]
Allocated (was zp[1]:142) zp[1]:15 [ gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 keyboard_event_pressed::keycode#4 ]
Allocated (was zp[2]:148) zp[2]:16 [ gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 gfx_init_charset::charset#2 gfx_init_charset::charset#3 gfx_init_charset::charset#1 bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::bitmap#0 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::gfxb#1 gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 gfx_init_plane_fill::gfxb#0 gfx_init_plane_fill::$4 gfx_init_plane_fill::$5 memset::dst#2 memset::dst#4 memset::dst#1 memset::str#0 print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 form_set_screen::line#2 form_set_screen::line#1 render_preset_name::name#13 print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 get_vic_screen::return#11 get_vic_screen::return#5 get_vic_screen::return#10 gfx_mode::$82 gfx_mode::$47 gfx_mode::$48 ]
Allocated (was zp[1]:150) zp[1]:18 [ gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 bitmap_line::xd#2 bitmap_line::xd#1 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ]
Allocated (was zp[1]:224) zp[1]:19 [ gfx_mode::$52 gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 bitmap_line::y1#0 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ]
Allocated (was zp[2]:263) zp[2]:20 [ form_field_ptr::line#0 gfx_mode::$24 gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 ]
Allocated (was zp[1]:265) zp[1]:22 [ form_field_ptr::x#0 keyboard_event_scan::row_scan#0 bitmap_clear::y#4 bitmap_clear::y#1 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 bitmap_line::x0#0 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ]
Allocated (was zp[4]:287) zp[4]:23 [ gfx_init_plane_fill::$0 ]
Allocated (was zp[2]:291) zp[2]:27 [ gfx_init_plane_fill::$1 gfx_mode::$40 ]
Allocated (was zp[2]:318) zp[2]:29 [ bitmap_plot::plotter_x#0 bitmap_plot::plotter#0 gfx_init_plane_8bppchunky::$5 form_field_ptr::return#0 form_field_ptr::return#3 form_control::field#0 gfx_mode::$26 ]
Allocated (was zp[2]:320) zp[2]:31 [ bitmap_plot::plotter_y#0 memset::end#0 gfx_mode::$38 ]
Allocated (was zp[1]:331) zp[1]:33 [ bitmap_init::$10 keyboard_event_pressed::row_bits#0 gfx_init_charset::c#4 gfx_init_charset::c#1 bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 bitmap_line::x1#0 ]
Allocated (was zp[1]:347) zp[1]:34 [ gfx_init_screen0::$1 gfx_init_screen2::col2#0 gfx_init_screen3::$1 gfx_init_vic_bitmap::l#2 gfx_init_vic_bitmap::l#1 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Interactive Explorer for C64DTV Screen Modes
// C64 DTV version 2 Registers and Constants
//
// Sources
// (J) https://www.c64-wiki.com/wiki/C64DTV_Programming_Guide
// (H) http://dtvhacking.cbm8bit.com/dtv_wiki/images/d/d9/Dtv_registers_full.txt
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const VIC_ECM = $40
  .const VIC_BMM = $20
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  .const VIC_MCM = $10
  .const VIC_CSEL = 8
  // Mask for PROCESSOR_PORT_DDR which allows only memory configuration to be written
  .const PROCPORT_DDR_MEMORY_MASK = 7
  // RAM in 0xA000, 0xE000 I/O in 0xD000
  .const PROCPORT_RAM_IO = 5
  // RAM in 0xA000, 0xE000 CHAR ROM in 0xD000
  .const PROCPORT_RAM_CHARROM = 1
  .const DTV_FEATURE_ENABLE = 1
  .const DTV_LINEAR = 1
  .const DTV_BORDER_OFF = 2
  .const DTV_HIGHCOLOR = 4
  .const DTV_OVERSCAN = 8
  .const DTV_COLORRAM_OFF = $10
  .const DTV_CHUNKY = $40
  .const DTV_COLOR_BANK_DEFAULT = $1d800
  .const KEY_CRSR_RIGHT = 2
  .const KEY_CRSR_DOWN = 7
  .const KEY_LSHIFT = $f
  .const KEY_RSHIFT = $34
  .const KEY_CTRL = $3a
  .const KEY_SPACE = $3c
  .const KEY_COMMODORE = $3d
  // Left shift is pressed
  .const KEY_MODIFIER_LSHIFT = 1
  // Right shift is pressed
  .const KEY_MODIFIER_RSHIFT = 2
  // CTRL is pressed
  .const KEY_MODIFIER_CTRL = 4
  // Commodore is pressed
  .const KEY_MODIFIER_COMMODORE = 8
  // Any shift is pressed
  .const KEY_MODIFIER_SHIFT = KEY_MODIFIER_LSHIFT|KEY_MODIFIER_RSHIFT
  // 8BPP Chunky Bitmap (contains 8bpp pixels)
  .const PLANE_8BPP_CHUNKY = $20000
  // Plane with horisontal stripes
  .const PLANE_HORISONTAL = $30000
  // Plane with vertical stripes
  .const PLANE_VERTICAL = $32000
  // Plane with horisontal stripes every 2 pixels
  .const PLANE_HORISONTAL2 = $34000
  // Plane with vertical stripes every 2 pixels
  .const PLANE_VERTICAL2 = $36000
  // Plane with blank pixels
  .const PLANE_BLANK = $38000
  // Plane with all pixels
  .const PLANE_FULL = $3a000
  // Plane with all pixels
  .const PLANE_CHARSET8 = $3c000
  // The number of frames to use for a full blink cycle
  .const FORM_CURSOR_BLINK = $28
  .const OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR = 2
  .const OFFSET_STRUCT_MOS6526_CIA_PORT_B_DDR = 3
  .const OFFSET_STRUCT_MOS6526_CIA_PORT_B = 1
  .const OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
  .const OFFSET_STRUCT_MOS6569_VICII_BG_COLOR = $21
  .const OFFSET_STRUCT_MOS6569_VICII_BG_COLOR1 = $22
  .const OFFSET_STRUCT_MOS6569_VICII_BG_COLOR2 = $23
  .const OFFSET_STRUCT_MOS6569_VICII_BG_COLOR3 = $24
  .const OFFSET_STRUCT_MOS6569_VICII_RASTER = $12
  .const OFFSET_STRUCT_MOS6569_VICII_CONTROL1 = $11
  .const OFFSET_STRUCT_MOS6569_VICII_CONTROL2 = $16
  .const OFFSET_STRUCT_MOS6569_VICII_MEMORY = $18
  // Number of form fields
  .const form_fields_cnt = $24
  .label VIC_CONTROL = $d011
  .label VIC_CONTROL2 = $d016
  .label VIC_MEMORY = $d018
  // Processor port data direction register
  .label PROCPORT_DDR = 0
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // The address of the CHARGEN character set
  .label CHARGEN = $d000
  // The VIC-II MOS 6567/6569
  .label VICII = $d000
  // Color Ram
  .label COLS = $d800
  // The CIA#1: keyboard matrix, joystick #1/#2
  .label CIA1 = $dc00
  // The CIA#2: Serial bus, RS-232, VIC memory bank
  .label CIA2 = $dd00
  // Feature enables or disables the extra C64 DTV features
  .label DTV_FEATURE = $d03f
  // Controls the graphics modes of the C64 DTV
  .label DTV_CONTROL = $d03c
  // Defines colors for the 16 first colors ($00-$0f)
  .label DTV_PALETTE = $d200
  // Linear Graphics Plane A Counter Control
  .label DTV_PLANEA_START_LO = $d03a
  .label DTV_PLANEA_START_MI = $d03b
  .label DTV_PLANEA_START_HI = $d045
  .label DTV_PLANEA_STEP = $d046
  .label DTV_PLANEA_MODULO_LO = $d038
  .label DTV_PLANEA_MODULO_HI = $d039
  // Linear Graphics Plane B Counter Control
  .label DTV_PLANEB_START_LO = $d049
  .label DTV_PLANEB_START_MI = $d04a
  .label DTV_PLANEB_START_HI = $d04b
  .label DTV_PLANEB_STEP = $d04c
  .label DTV_PLANEB_MODULO_LO = $d047
  .label DTV_PLANEB_MODULO_HI = $d048
  // Select memory bank where color data is fetched from (bits 11:0)
  // Memory address of Color RAM is ColorBank*$400
  .label DTV_COLOR_BANK_LO = $d036
  .label DTV_COLOR_BANK_HI = $d037
  // Selects memory bank for normal VIC color mode and lower data for high color modes. (bits 5:0)
  // Memory address of VIC Graphics is GraphicsBank*$10000
  .label DTV_GRAPHICS_VIC_BANK = $d03d
  // VIC Screens
  .label VIC_SCREEN0 = $4000
  .label VIC_SCREEN1 = $4400
  .label VIC_SCREEN2 = $4800
  .label VIC_SCREEN3 = $4c00
  .label VIC_SCREEN4 = $5000
  // VIC Charset from ROM
  .label VIC_CHARSET_ROM = $5800
  // VIC Bitmap
  .label VIC_BITMAP = $6000
  // Screen containing the FORM
  .label FORM_SCREEN = $400
  // Charset used for the FORM
  .label FORM_CHARSET = $1800
  .label form_ctrl_bmm = form_fields_val+1
  .label form_ctrl_mcm = form_fields_val+2
  .label form_ctrl_ecm = form_fields_val+3
  .label form_ctrl_hicol = form_fields_val+4
  .label form_ctrl_line = form_fields_val+5
  .label form_ctrl_colof = form_fields_val+6
  .label form_ctrl_chunk = form_fields_val+7
  .label form_ctrl_borof = form_fields_val+8
  .label form_ctrl_overs = form_fields_val+9
  .label form_a_pattern = form_fields_val+$a
  .label form_a_start_hi = form_fields_val+$b
  .label form_a_start_lo = form_fields_val+$c
  .label form_a_step_hi = form_fields_val+$d
  .label form_a_step_lo = form_fields_val+$e
  .label form_a_mod_hi = form_fields_val+$f
  .label form_a_mod_lo = form_fields_val+$10
  .label form_b_pattern = form_fields_val+$11
  .label form_b_start_hi = form_fields_val+$12
  .label form_b_start_lo = form_fields_val+$13
  .label form_b_step_hi = form_fields_val+$14
  .label form_b_step_lo = form_fields_val+$15
  .label form_b_mod_hi = form_fields_val+$16
  .label form_b_mod_lo = form_fields_val+$17
  .label form_vic_screen = form_fields_val+$18
  .label form_vic_gfx = form_fields_val+$19
  .label form_vic_cols = form_fields_val+$1a
  .label form_dtv_palet = form_fields_val+$1b
  .label form_vic_bg0_hi = form_fields_val+$1c
  .label form_vic_bg0_lo = form_fields_val+$1d
  .label form_vic_bg1_hi = form_fields_val+$1e
  .label form_vic_bg1_lo = form_fields_val+$1f
  .label form_vic_bg2_hi = form_fields_val+$20
  .label form_vic_bg2_lo = form_fields_val+$21
  .label form_vic_bg3_hi = form_fields_val+$22
  .label form_vic_bg3_lo = form_fields_val+$23
  .label print_line_cursor = 7
  // Keyboard event buffer size. The number of events currently in the event buffer
  .label keyboard_events_size = 2
  // Counts down to blink for form cursor (it is inversed in the lower half)
  // Always blink cursor in new field
  .label form_cursor_count = 3
  // Current selected field in the form
  .label form_field_idx = 4
  .label print_char_cursor = 5
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // asm { sei  }
    sei
    // [5] *((const nomodify byte*) PROCPORT_DDR) ← (const nomodify byte) PROCPORT_DDR_MEMORY_MASK -- _deref_pbuc1=vbuc2 
    // Disable normal interrupt (prevent keyboard reading glitches and allows to hide basic/kernal)
    // Disable kernal & basic
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
    // [6] *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_RAM_IO -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
    // [7] *((const nomodify byte*) DTV_FEATURE) ← (const nomodify byte) DTV_FEATURE_ENABLE -- _deref_pbuc1=vbuc2 
    // Enable DTV extended modes
    lda #DTV_FEATURE_ENABLE
    sta DTV_FEATURE
    // [8] call keyboard_init 
    jsr keyboard_init
    // [9] phi from main to main::@3 [phi:main->main::@3]
  __b3_from_main:
    jmp __b3
    // main::@3
  __b3:
    // [10] call gfx_init 
    // [452] phi from main::@3 to gfx_init [phi:main::@3->gfx_init]
  gfx_init_from___b3:
    jsr gfx_init
    // [11] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  __b1_from___b3:
    // [11] phi (byte) form_field_idx#1 = (byte) 0 [phi:main::@3->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z form_field_idx
    // [11] phi (byte) keyboard_events_size#27 = (byte) 0 [phi:main::@3->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z keyboard_events_size
    // [11] phi (signed byte) form_cursor_count#1 = (const nomodify signed byte) FORM_CURSOR_BLINK/(signed byte) 2 [phi:main::@3->main::@1#2] -- vbsz1=vbsc1 
    lda #FORM_CURSOR_BLINK/2
    sta.z form_cursor_count
    jmp __b1
    // main::@1
  __b1:
    // [12] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [13] call form_mode 
  // Let the user change the GFX configuration
    // [252] phi from main::@2 to form_mode [phi:main::@2->form_mode]
  form_mode_from___b2:
    jsr form_mode
    // [14] phi from main::@2 to main::@4 [phi:main::@2->main::@4]
  __b4_from___b2:
    jmp __b4
    // main::@4
  __b4:
    // [15] call gfx_mode 
    // Show the GFX configuration
    jsr gfx_mode
    // [11] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
  __b1_from___b4:
    // [11] phi (byte) form_field_idx#1 = (byte) form_field_idx#18 [phi:main::@4->main::@1#0] -- register_copy 
    // [11] phi (byte) keyboard_events_size#27 = (byte) keyboard_events_size#24 [phi:main::@4->main::@1#1] -- register_copy 
    // [11] phi (signed byte) form_cursor_count#1 = (signed byte) form_cursor_count#16 [phi:main::@4->main::@1#2] -- register_copy 
    jmp __b1
}
  // gfx_mode
// Change graphics mode to show the selected graphics mode
gfx_mode: {
    .label __20 = 9
    .label __24 = $14
    .label __26 = $1d
    .label __34 = 9
    .label __38 = $1f
    .label __40 = $1b
    .label __47 = $10
    .label __48 = $10
    .label __50 = 7
    .label __52 = $13
    .label __82 = $10
    .label __83 = 7
    .label plane_a = 9
    .label plane_b = 9
    .label vic_colors = $10
    .label col = 5
    .label cy = $d
    // [16] if(*((const nomodify byte*) form_ctrl_line)==(byte) 0) goto gfx_mode::@1 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_line
    cmp #0
    beq __b1_from_gfx_mode
    // [17] phi from gfx_mode to gfx_mode::@10 [phi:gfx_mode->gfx_mode::@10]
  __b10_from_gfx_mode:
    jmp __b10
    // gfx_mode::@10
  __b10:
    // [18] phi from gfx_mode::@10 to gfx_mode::@1 [phi:gfx_mode::@10->gfx_mode::@1]
  __b1_from___b10:
    // [18] phi (byte) gfx_mode::dtv_control#14 = (const nomodify byte) DTV_LINEAR [phi:gfx_mode::@10->gfx_mode::@1#0] -- vbuxx=vbuc1 
    ldx #DTV_LINEAR
    jmp __b1
    // [18] phi from gfx_mode to gfx_mode::@1 [phi:gfx_mode->gfx_mode::@1]
  __b1_from_gfx_mode:
    // [18] phi (byte) gfx_mode::dtv_control#14 = (byte) 0 [phi:gfx_mode->gfx_mode::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // gfx_mode::@1
  __b1:
    // [19] if(*((const nomodify byte*) form_ctrl_borof)==(byte) 0) goto gfx_mode::@2 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_borof
    cmp #0
    beq __b2_from___b1
    jmp __b11
    // gfx_mode::@11
  __b11:
    // [20] (byte) gfx_mode::dtv_control#2 ← (byte) gfx_mode::dtv_control#14 | (const nomodify byte) DTV_BORDER_OFF -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #DTV_BORDER_OFF
    tax
    // [21] phi from gfx_mode::@1 gfx_mode::@11 to gfx_mode::@2 [phi:gfx_mode::@1/gfx_mode::@11->gfx_mode::@2]
  __b2_from___b1:
  __b2_from___b11:
    // [21] phi (byte) gfx_mode::dtv_control#15 = (byte) gfx_mode::dtv_control#14 [phi:gfx_mode::@1/gfx_mode::@11->gfx_mode::@2#0] -- register_copy 
    jmp __b2
    // gfx_mode::@2
  __b2:
    // [22] if(*((const nomodify byte*) form_ctrl_hicol)==(byte) 0) goto gfx_mode::@3 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_hicol
    cmp #0
    beq __b3_from___b2
    jmp __b12
    // gfx_mode::@12
  __b12:
    // [23] (byte) gfx_mode::dtv_control#3 ← (byte) gfx_mode::dtv_control#15 | (const nomodify byte) DTV_HIGHCOLOR -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #DTV_HIGHCOLOR
    tax
    // [24] phi from gfx_mode::@12 gfx_mode::@2 to gfx_mode::@3 [phi:gfx_mode::@12/gfx_mode::@2->gfx_mode::@3]
  __b3_from___b12:
  __b3_from___b2:
    // [24] phi (byte) gfx_mode::dtv_control#10 = (byte) gfx_mode::dtv_control#3 [phi:gfx_mode::@12/gfx_mode::@2->gfx_mode::@3#0] -- register_copy 
    jmp __b3
    // gfx_mode::@3
  __b3:
    // [25] if(*((const nomodify byte*) form_ctrl_overs)==(byte) 0) goto gfx_mode::@4 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_overs
    cmp #0
    beq __b4_from___b3
    jmp __b13
    // gfx_mode::@13
  __b13:
    // [26] (byte) gfx_mode::dtv_control#4 ← (byte) gfx_mode::dtv_control#10 | (const nomodify byte) DTV_OVERSCAN -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #DTV_OVERSCAN
    tax
    // [27] phi from gfx_mode::@13 gfx_mode::@3 to gfx_mode::@4 [phi:gfx_mode::@13/gfx_mode::@3->gfx_mode::@4]
  __b4_from___b13:
  __b4_from___b3:
    // [27] phi (byte) gfx_mode::dtv_control#11 = (byte) gfx_mode::dtv_control#4 [phi:gfx_mode::@13/gfx_mode::@3->gfx_mode::@4#0] -- register_copy 
    jmp __b4
    // gfx_mode::@4
  __b4:
    // [28] if(*((const nomodify byte*) form_ctrl_colof)==(byte) 0) goto gfx_mode::@5 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_colof
    cmp #0
    beq __b5_from___b4
    jmp __b14
    // gfx_mode::@14
  __b14:
    // [29] (byte) gfx_mode::dtv_control#5 ← (byte) gfx_mode::dtv_control#11 | (const nomodify byte) DTV_COLORRAM_OFF -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #DTV_COLORRAM_OFF
    tax
    // [30] phi from gfx_mode::@14 gfx_mode::@4 to gfx_mode::@5 [phi:gfx_mode::@14/gfx_mode::@4->gfx_mode::@5]
  __b5_from___b14:
  __b5_from___b4:
    // [30] phi (byte) gfx_mode::dtv_control#13 = (byte) gfx_mode::dtv_control#5 [phi:gfx_mode::@14/gfx_mode::@4->gfx_mode::@5#0] -- register_copy 
    jmp __b5
    // gfx_mode::@5
  __b5:
    // [31] if(*((const nomodify byte*) form_ctrl_chunk)==(byte) 0) goto gfx_mode::@6 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_chunk
    cmp #0
    beq __b6_from___b5
    jmp __b15
    // gfx_mode::@15
  __b15:
    // [32] (byte) gfx_mode::dtv_control#6 ← (byte) gfx_mode::dtv_control#13 | (const nomodify byte) DTV_CHUNKY -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #DTV_CHUNKY
    tax
    // [33] phi from gfx_mode::@15 gfx_mode::@5 to gfx_mode::@6 [phi:gfx_mode::@15/gfx_mode::@5->gfx_mode::@6]
  __b6_from___b15:
  __b6_from___b5:
    // [33] phi (byte) gfx_mode::dtv_control#12 = (byte) gfx_mode::dtv_control#6 [phi:gfx_mode::@15/gfx_mode::@5->gfx_mode::@6#0] -- register_copy 
    jmp __b6
    // gfx_mode::@6
  __b6:
    // [34] *((const nomodify byte*) DTV_CONTROL) ← (byte) gfx_mode::dtv_control#12 -- _deref_pbuc1=vbuxx 
    stx DTV_CONTROL
    // [35] if(*((const nomodify byte*) form_ctrl_ecm)==(byte) 0) goto gfx_mode::@7 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_ecm
    cmp #0
    beq __b7_from___b6
    // [36] phi from gfx_mode::@6 to gfx_mode::@16 [phi:gfx_mode::@6->gfx_mode::@16]
  __b16_from___b6:
    jmp __b16
    // gfx_mode::@16
  __b16:
    // [37] phi from gfx_mode::@16 to gfx_mode::@7 [phi:gfx_mode::@16->gfx_mode::@7]
  __b7_from___b16:
    // [37] phi (byte) gfx_mode::vic_control#5 = (const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(byte) 3|(const nomodify byte) VIC_ECM [phi:gfx_mode::@16->gfx_mode::@7#0] -- vbuxx=vbuc1 
    ldx #VIC_DEN|VIC_RSEL|3|VIC_ECM
    jmp __b7
    // [37] phi from gfx_mode::@6 to gfx_mode::@7 [phi:gfx_mode::@6->gfx_mode::@7]
  __b7_from___b6:
    // [37] phi (byte) gfx_mode::vic_control#5 = (const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(byte) 3 [phi:gfx_mode::@6->gfx_mode::@7#0] -- vbuxx=vbuc1 
    ldx #VIC_DEN|VIC_RSEL|3
    jmp __b7
    // gfx_mode::@7
  __b7:
    // [38] if(*((const nomodify byte*) form_ctrl_bmm)==(byte) 0) goto gfx_mode::@8 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_bmm
    cmp #0
    beq __b8_from___b7
    jmp __b17
    // gfx_mode::@17
  __b17:
    // [39] (byte) gfx_mode::vic_control#2 ← (byte) gfx_mode::vic_control#5 | (const nomodify byte) VIC_BMM -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #VIC_BMM
    tax
    // [40] phi from gfx_mode::@17 gfx_mode::@7 to gfx_mode::@8 [phi:gfx_mode::@17/gfx_mode::@7->gfx_mode::@8]
  __b8_from___b17:
  __b8_from___b7:
    // [40] phi (byte) gfx_mode::vic_control#4 = (byte) gfx_mode::vic_control#2 [phi:gfx_mode::@17/gfx_mode::@7->gfx_mode::@8#0] -- register_copy 
    jmp __b8
    // gfx_mode::@8
  __b8:
    // [41] *((const nomodify byte*) VIC_CONTROL) ← (byte) gfx_mode::vic_control#4 -- _deref_pbuc1=vbuxx 
    stx VIC_CONTROL
    // [42] if(*((const nomodify byte*) form_ctrl_mcm)==(byte) 0) goto gfx_mode::@9 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_mcm
    cmp #0
    beq __b9_from___b8
    // [43] phi from gfx_mode::@8 to gfx_mode::@18 [phi:gfx_mode::@8->gfx_mode::@18]
  __b18_from___b8:
    jmp __b18
    // gfx_mode::@18
  __b18:
    // [44] phi from gfx_mode::@18 to gfx_mode::@9 [phi:gfx_mode::@18->gfx_mode::@9]
  __b9_from___b18:
    // [44] phi (byte) gfx_mode::vic_control2#2 = (const nomodify byte) VIC_CSEL|(const nomodify byte) VIC_MCM [phi:gfx_mode::@18->gfx_mode::@9#0] -- vbuaa=vbuc1 
    lda #VIC_CSEL|VIC_MCM
    jmp __b9
    // [44] phi from gfx_mode::@8 to gfx_mode::@9 [phi:gfx_mode::@8->gfx_mode::@9]
  __b9_from___b8:
    // [44] phi (byte) gfx_mode::vic_control2#2 = (const nomodify byte) VIC_CSEL [phi:gfx_mode::@8->gfx_mode::@9#0] -- vbuaa=vbuc1 
    lda #VIC_CSEL
    jmp __b9
    // gfx_mode::@9
  __b9:
    // [45] *((const nomodify byte*) VIC_CONTROL2) ← (byte) gfx_mode::vic_control2#2 -- _deref_pbuc1=vbuaa 
    sta VIC_CONTROL2
    // [46] (byte~) gfx_mode::$18 ← *((const nomodify byte*) form_a_start_hi) << (byte) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_a_start_hi
    asl
    asl
    asl
    asl
    // [47] (byte) gfx_mode::plane_a_offs#0 ← (byte~) gfx_mode::$18 | *((const nomodify byte*) form_a_start_lo) -- vbuxx=vbuaa_bor__deref_pbuc1 
    ora form_a_start_lo
    tax
    // [48] (byte) get_plane::idx#0 ← *((const nomodify byte*) form_a_pattern) -- vbuaa=_deref_pbuc1 
    lda form_a_pattern
    // [49] call get_plane 
    // [234] phi from gfx_mode::@9 to get_plane [phi:gfx_mode::@9->get_plane]
  get_plane_from___b9:
    // [234] phi (byte) get_plane::idx#10 = (byte) get_plane::idx#0 [phi:gfx_mode::@9->get_plane#0] -- register_copy 
    jsr get_plane
    // [50] (dword) get_plane::return#16 ← (dword) get_plane::return#14
    jmp __b27
    // gfx_mode::@27
  __b27:
    // [51] (dword~) gfx_mode::$20 ← (dword) get_plane::return#16
    // [52] (dword) gfx_mode::plane_a#0 ← (dword~) gfx_mode::$20 + (byte) gfx_mode::plane_a_offs#0 -- vduz1=vduz1_plus_vbuxx 
    txa
    clc
    adc.z plane_a
    sta.z plane_a
    lda.z plane_a+1
    adc #0
    sta.z plane_a+1
    lda.z plane_a+2
    adc #0
    sta.z plane_a+2
    lda.z plane_a+3
    adc #0
    sta.z plane_a+3
    // [53] (word~) gfx_mode::$24 ← < (dword) gfx_mode::plane_a#0 -- vwuz1=_lo_vduz2 
    lda.z plane_a
    sta.z __24
    lda.z plane_a+1
    sta.z __24+1
    // [54] (byte~) gfx_mode::$23 ← < (word~) gfx_mode::$24 -- vbuaa=_lo_vwuz1 
    lda.z __24
    // [55] *((const nomodify byte*) DTV_PLANEA_START_LO) ← (byte~) gfx_mode::$23 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEA_START_LO
    // [56] (byte~) gfx_mode::$25 ← > (word~) gfx_mode::$24 -- vbuaa=_hi_vwuz1 
    lda.z __24+1
    // [57] *((const nomodify byte*) DTV_PLANEA_START_MI) ← (byte~) gfx_mode::$25 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEA_START_MI
    // [58] (word~) gfx_mode::$26 ← > (dword) gfx_mode::plane_a#0 -- vwuz1=_hi_vduz2 
    lda.z plane_a+2
    sta.z __26
    lda.z plane_a+3
    sta.z __26+1
    // [59] (byte~) gfx_mode::$27 ← < (word~) gfx_mode::$26 -- vbuaa=_lo_vwuz1 
    lda.z __26
    // [60] *((const nomodify byte*) DTV_PLANEA_START_HI) ← (byte~) gfx_mode::$27 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEA_START_HI
    // [61] (byte~) gfx_mode::$28 ← *((const nomodify byte*) form_a_step_hi) << (byte) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_a_step_hi
    asl
    asl
    asl
    asl
    // [62] (byte~) gfx_mode::$29 ← (byte~) gfx_mode::$28 | *((const nomodify byte*) form_a_step_lo) -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_a_step_lo
    // [63] *((const nomodify byte*) DTV_PLANEA_STEP) ← (byte~) gfx_mode::$29 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEA_STEP
    // [64] (byte~) gfx_mode::$30 ← *((const nomodify byte*) form_a_mod_hi) << (byte) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_a_mod_hi
    asl
    asl
    asl
    asl
    // [65] (byte~) gfx_mode::$31 ← (byte~) gfx_mode::$30 | *((const nomodify byte*) form_a_mod_lo) -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_a_mod_lo
    // [66] *((const nomodify byte*) DTV_PLANEA_MODULO_LO) ← (byte~) gfx_mode::$31 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEA_MODULO_LO
    // [67] *((const nomodify byte*) DTV_PLANEA_MODULO_HI) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_HI
    // [68] (byte~) gfx_mode::$32 ← *((const nomodify byte*) form_b_start_hi) << (byte) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_b_start_hi
    asl
    asl
    asl
    asl
    // [69] (byte) gfx_mode::plane_b_offs#0 ← (byte~) gfx_mode::$32 | *((const nomodify byte*) form_b_start_lo) -- vbuxx=vbuaa_bor__deref_pbuc1 
    ora form_b_start_lo
    tax
    // [70] (byte) get_plane::idx#1 ← *((const nomodify byte*) form_b_pattern) -- vbuaa=_deref_pbuc1 
    lda form_b_pattern
    // [71] call get_plane 
    // [234] phi from gfx_mode::@27 to get_plane [phi:gfx_mode::@27->get_plane]
  get_plane_from___b27:
    // [234] phi (byte) get_plane::idx#10 = (byte) get_plane::idx#1 [phi:gfx_mode::@27->get_plane#0] -- register_copy 
    jsr get_plane
    // [72] (dword) get_plane::return#17 ← (dword) get_plane::return#14
    jmp __b28
    // gfx_mode::@28
  __b28:
    // [73] (dword~) gfx_mode::$34 ← (dword) get_plane::return#17
    // [74] (dword) gfx_mode::plane_b#0 ← (dword~) gfx_mode::$34 + (byte) gfx_mode::plane_b_offs#0 -- vduz1=vduz1_plus_vbuxx 
    txa
    clc
    adc.z plane_b
    sta.z plane_b
    lda.z plane_b+1
    adc #0
    sta.z plane_b+1
    lda.z plane_b+2
    adc #0
    sta.z plane_b+2
    lda.z plane_b+3
    adc #0
    sta.z plane_b+3
    // [75] (word~) gfx_mode::$38 ← < (dword) gfx_mode::plane_b#0 -- vwuz1=_lo_vduz2 
    lda.z plane_b
    sta.z __38
    lda.z plane_b+1
    sta.z __38+1
    // [76] (byte~) gfx_mode::$37 ← < (word~) gfx_mode::$38 -- vbuaa=_lo_vwuz1 
    lda.z __38
    // [77] *((const nomodify byte*) DTV_PLANEB_START_LO) ← (byte~) gfx_mode::$37 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEB_START_LO
    // [78] (byte~) gfx_mode::$39 ← > (word~) gfx_mode::$38 -- vbuaa=_hi_vwuz1 
    lda.z __38+1
    // [79] *((const nomodify byte*) DTV_PLANEB_START_MI) ← (byte~) gfx_mode::$39 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEB_START_MI
    // [80] (word~) gfx_mode::$40 ← > (dword) gfx_mode::plane_b#0 -- vwuz1=_hi_vduz2 
    lda.z plane_b+2
    sta.z __40
    lda.z plane_b+3
    sta.z __40+1
    // [81] (byte~) gfx_mode::$41 ← < (word~) gfx_mode::$40 -- vbuaa=_lo_vwuz1 
    lda.z __40
    // [82] *((const nomodify byte*) DTV_PLANEB_START_HI) ← (byte~) gfx_mode::$41 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEB_START_HI
    // [83] (byte~) gfx_mode::$42 ← *((const nomodify byte*) form_b_step_hi) << (byte) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_b_step_hi
    asl
    asl
    asl
    asl
    // [84] (byte~) gfx_mode::$43 ← (byte~) gfx_mode::$42 | *((const nomodify byte*) form_b_step_lo) -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_b_step_lo
    // [85] *((const nomodify byte*) DTV_PLANEB_STEP) ← (byte~) gfx_mode::$43 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEB_STEP
    // [86] (byte~) gfx_mode::$44 ← *((const nomodify byte*) form_b_mod_hi) << (byte) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_b_mod_hi
    asl
    asl
    asl
    asl
    // [87] (byte~) gfx_mode::$45 ← (byte~) gfx_mode::$44 | *((const nomodify byte*) form_b_mod_lo) -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_b_mod_lo
    // [88] *((const nomodify byte*) DTV_PLANEB_MODULO_LO) ← (byte~) gfx_mode::$45 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEB_MODULO_LO
    // [89] *((const nomodify byte*) DTV_PLANEB_MODULO_HI) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_HI
    // [90] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) ← (byte) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR
    // [91] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2) ← (byte) 3^(byte)(word)(const nomodify byte*) VIC_SCREEN0/(word) $4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^VIC_SCREEN0/$4000
    sta CIA2
    // [92] (byte) get_vic_screen::idx#0 ← *((const nomodify byte*) form_vic_screen) -- vbuaa=_deref_pbuc1 
    lda form_vic_screen
    // [93] call get_vic_screen 
    // [220] phi from gfx_mode::@28 to get_vic_screen [phi:gfx_mode::@28->get_vic_screen]
  get_vic_screen_from___b28:
    // [220] phi (byte) get_vic_screen::idx#2 = (byte) get_vic_screen::idx#0 [phi:gfx_mode::@28->get_vic_screen#0] -- register_copy 
    jsr get_vic_screen
    // [94] (byte*) get_vic_screen::return#10 ← (byte*) get_vic_screen::return#5
    jmp __b29
    // gfx_mode::@29
  __b29:
    // [95] (byte*~) gfx_mode::$82 ← (byte*) get_vic_screen::return#10
    // [96] (word~) gfx_mode::$47 ← (word)(byte*~) gfx_mode::$82 & (word) $3fff -- vwuz1=vwuz1_band_vwuc1 
    lda.z __47
    and #<$3fff
    sta.z __47
    lda.z __47+1
    and #>$3fff
    sta.z __47+1
    // [97] (word~) gfx_mode::$48 ← (word~) gfx_mode::$47 >> (byte) 6 -- vwuz1=vwuz1_ror_6 
    lda.z __48
    asl
    sta.z $ff
    lda.z __48+1
    rol
    sta.z __48
    lda #0
    rol
    sta.z __48+1
    asl.z $ff
    rol.z __48
    rol.z __48+1
    // [98] (byte) get_vic_charset::idx#0 ← *((const nomodify byte*) form_vic_gfx) -- vbuaa=_deref_pbuc1 
    lda form_vic_gfx
    // [99] call get_vic_charset 
    jsr get_vic_charset
    // [100] (byte*) get_vic_charset::return#4 ← (byte*) get_vic_charset::return#2
    jmp __b30
    // gfx_mode::@30
  __b30:
    // [101] (byte*~) gfx_mode::$83 ← (byte*) get_vic_charset::return#4
    // [102] (word~) gfx_mode::$50 ← (word)(byte*~) gfx_mode::$83 & (word) $3fff -- vwuz1=vwuz1_band_vwuc1 
    lda.z __50
    and #<$3fff
    sta.z __50
    lda.z __50+1
    and #>$3fff
    sta.z __50+1
    // [103] (byte~) gfx_mode::$51 ← > (word~) gfx_mode::$50 -- vbuaa=_hi_vwuz1 
    lda.z __50+1
    // [104] (byte~) gfx_mode::$52 ← (byte~) gfx_mode::$51 >> (byte) 2 -- vbuz1=vbuaa_ror_2 
    lsr
    lsr
    sta.z __52
    // [105] (byte~) gfx_mode::$84 ← (byte)(word~) gfx_mode::$48 -- vbuaa=_byte_vwuz1 
    lda.z __48
    // [106] (byte~) gfx_mode::$53 ← (byte~) gfx_mode::$84 | (byte~) gfx_mode::$52 -- vbuaa=vbuaa_bor_vbuz1 
    ora.z __52
    // [107] *((const nomodify byte*) VIC_MEMORY) ← (byte~) gfx_mode::$53 -- _deref_pbuc1=vbuaa 
    // Set VIC Bank
    // VIC memory
    sta VIC_MEMORY
    // [108] (byte) get_vic_screen::idx#1 ← *((const nomodify byte*) form_vic_cols) -- vbuaa=_deref_pbuc1 
    lda form_vic_cols
    // [109] call get_vic_screen 
    // [220] phi from gfx_mode::@30 to get_vic_screen [phi:gfx_mode::@30->get_vic_screen]
  get_vic_screen_from___b30:
    // [220] phi (byte) get_vic_screen::idx#2 = (byte) get_vic_screen::idx#1 [phi:gfx_mode::@30->get_vic_screen#0] -- register_copy 
    jsr get_vic_screen
    // [110] (byte*) get_vic_screen::return#11 ← (byte*) get_vic_screen::return#5
    jmp __b31
    // gfx_mode::@31
  __b31:
    // [111] (byte*) gfx_mode::vic_colors#0 ← (byte*) get_vic_screen::return#11
    // [112] phi from gfx_mode::@31 to gfx_mode::@19 [phi:gfx_mode::@31->gfx_mode::@19]
  __b19_from___b31:
    // [112] phi (byte) gfx_mode::cy#4 = (byte) 0 [phi:gfx_mode::@31->gfx_mode::@19#0] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    // [112] phi (byte*) gfx_mode::col#3 = (const nomodify byte*) COLS [phi:gfx_mode::@31->gfx_mode::@19#1] -- pbuz1=pbuc1 
    lda #<COLS
    sta.z col
    lda #>COLS
    sta.z col+1
    // [112] phi (byte*) gfx_mode::vic_colors#3 = (byte*) gfx_mode::vic_colors#0 [phi:gfx_mode::@31->gfx_mode::@19#2] -- register_copy 
    jmp __b19
    // [112] phi from gfx_mode::@21 to gfx_mode::@19 [phi:gfx_mode::@21->gfx_mode::@19]
  __b19_from___b21:
    // [112] phi (byte) gfx_mode::cy#4 = (byte) gfx_mode::cy#1 [phi:gfx_mode::@21->gfx_mode::@19#0] -- register_copy 
    // [112] phi (byte*) gfx_mode::col#3 = (byte*) gfx_mode::col#1 [phi:gfx_mode::@21->gfx_mode::@19#1] -- register_copy 
    // [112] phi (byte*) gfx_mode::vic_colors#3 = (byte*) gfx_mode::vic_colors#1 [phi:gfx_mode::@21->gfx_mode::@19#2] -- register_copy 
    jmp __b19
    // gfx_mode::@19
  __b19:
    // [113] phi from gfx_mode::@19 to gfx_mode::@20 [phi:gfx_mode::@19->gfx_mode::@20]
  __b20_from___b19:
    // [113] phi (byte) gfx_mode::cx#2 = (byte) 0 [phi:gfx_mode::@19->gfx_mode::@20#0] -- vbuxx=vbuc1 
    ldx #0
    // [113] phi (byte*) gfx_mode::col#2 = (byte*) gfx_mode::col#3 [phi:gfx_mode::@19->gfx_mode::@20#1] -- register_copy 
    // [113] phi (byte*) gfx_mode::vic_colors#2 = (byte*) gfx_mode::vic_colors#3 [phi:gfx_mode::@19->gfx_mode::@20#2] -- register_copy 
    jmp __b20
    // [113] phi from gfx_mode::@20 to gfx_mode::@20 [phi:gfx_mode::@20->gfx_mode::@20]
  __b20_from___b20:
    // [113] phi (byte) gfx_mode::cx#2 = (byte) gfx_mode::cx#1 [phi:gfx_mode::@20->gfx_mode::@20#0] -- register_copy 
    // [113] phi (byte*) gfx_mode::col#2 = (byte*) gfx_mode::col#1 [phi:gfx_mode::@20->gfx_mode::@20#1] -- register_copy 
    // [113] phi (byte*) gfx_mode::vic_colors#2 = (byte*) gfx_mode::vic_colors#1 [phi:gfx_mode::@20->gfx_mode::@20#2] -- register_copy 
    jmp __b20
    // gfx_mode::@20
  __b20:
    // [114] *((byte*) gfx_mode::col#2) ← *((byte*) gfx_mode::vic_colors#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (vic_colors),y
    ldy #0
    sta (col),y
    // [115] (byte*) gfx_mode::col#1 ← ++ (byte*) gfx_mode::col#2 -- pbuz1=_inc_pbuz1 
    inc.z col
    bne !+
    inc.z col+1
  !:
    // [116] (byte*) gfx_mode::vic_colors#1 ← ++ (byte*) gfx_mode::vic_colors#2 -- pbuz1=_inc_pbuz1 
    inc.z vic_colors
    bne !+
    inc.z vic_colors+1
  !:
    // [117] (byte) gfx_mode::cx#1 ← ++ (byte) gfx_mode::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [118] if((byte) gfx_mode::cx#1!=(byte) $28) goto gfx_mode::@20 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b20_from___b20
    jmp __b21
    // gfx_mode::@21
  __b21:
    // [119] (byte) gfx_mode::cy#1 ← ++ (byte) gfx_mode::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [120] if((byte) gfx_mode::cy#1!=(byte) $19) goto gfx_mode::@19 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b19_from___b21
    jmp __b22
    // gfx_mode::@22
  __b22:
    // [121] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Background colors
    lda #0
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // [122] (byte~) gfx_mode::$55 ← *((const nomodify byte*) form_vic_bg0_hi) << (byte) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_vic_bg0_hi
    asl
    asl
    asl
    asl
    // [123] (byte~) gfx_mode::$56 ← (byte~) gfx_mode::$55 | *((const nomodify byte*) form_vic_bg0_lo) -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_vic_bg0_lo
    // [124] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) ← (byte~) gfx_mode::$56 -- _deref_pbuc1=vbuaa 
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR
    // [125] (byte~) gfx_mode::$57 ← *((const nomodify byte*) form_vic_bg1_hi) << (byte) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_vic_bg1_hi
    asl
    asl
    asl
    asl
    // [126] (byte~) gfx_mode::$58 ← (byte~) gfx_mode::$57 | *((const nomodify byte*) form_vic_bg1_lo) -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_vic_bg1_lo
    // [127] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR1) ← (byte~) gfx_mode::$58 -- _deref_pbuc1=vbuaa 
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR1
    // [128] (byte~) gfx_mode::$59 ← *((const nomodify byte*) form_vic_bg2_hi) << (byte) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_vic_bg2_hi
    asl
    asl
    asl
    asl
    // [129] (byte~) gfx_mode::$60 ← (byte~) gfx_mode::$59 | *((const nomodify byte*) form_vic_bg2_lo) -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_vic_bg2_lo
    // [130] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR2) ← (byte~) gfx_mode::$60 -- _deref_pbuc1=vbuaa 
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR2
    // [131] (byte~) gfx_mode::$61 ← *((const nomodify byte*) form_vic_bg3_hi) << (byte) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_vic_bg3_hi
    asl
    asl
    asl
    asl
    // [132] (byte~) gfx_mode::$62 ← (byte~) gfx_mode::$61 | *((const nomodify byte*) form_vic_bg3_lo) -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_vic_bg3_lo
    // [133] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR3) ← (byte~) gfx_mode::$62 -- _deref_pbuc1=vbuaa 
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR3
    // [134] if(*((const nomodify byte*) form_dtv_palet)==(byte) 0) goto gfx_mode::@24 -- _deref_pbuc1_eq_0_then_la1 
    // DTV Palette
    lda form_dtv_palet
    cmp #0
    beq __b24_from___b22
    // [135] phi from gfx_mode::@22 to gfx_mode::@23 [phi:gfx_mode::@22->gfx_mode::@23]
  __b23_from___b22:
    // [135] phi (byte) gfx_mode::j#2 = (byte) 0 [phi:gfx_mode::@22->gfx_mode::@23#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b23
  // DTV Palette - Grey Tones
    // [135] phi from gfx_mode::@23 to gfx_mode::@23 [phi:gfx_mode::@23->gfx_mode::@23]
  __b23_from___b23:
    // [135] phi (byte) gfx_mode::j#2 = (byte) gfx_mode::j#1 [phi:gfx_mode::@23->gfx_mode::@23#0] -- register_copy 
    jmp __b23
    // gfx_mode::@23
  __b23:
    // [136] *((const nomodify byte*) DTV_PALETTE + (byte) gfx_mode::j#2) ← (byte) gfx_mode::j#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta DTV_PALETTE,x
    // [137] (byte) gfx_mode::j#1 ← ++ (byte) gfx_mode::j#2 -- vbuxx=_inc_vbuxx 
    inx
    // [138] if((byte) gfx_mode::j#1!=(byte) $10) goto gfx_mode::@23 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b23_from___b23
    jmp __b25
    // gfx_mode::@25
  __b25:
    // [139] if(*((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)!=(byte) $ff) goto gfx_mode::@25 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    bne __b25
    // [140] phi from gfx_mode::@25 to gfx_mode::@26 [phi:gfx_mode::@25->gfx_mode::@26]
  __b26_from___b25:
    jmp __b26
    // gfx_mode::@26
  __b26:
    // [141] call keyboard_event_scan 
    // [157] phi from gfx_mode::@26 to keyboard_event_scan [phi:gfx_mode::@26->keyboard_event_scan]
  keyboard_event_scan_from___b26:
    // [157] phi (byte) keyboard_events_size#97 = (byte) keyboard_events_size#24 [phi:gfx_mode::@26->keyboard_event_scan#0] -- register_copy 
    jsr keyboard_event_scan
    // [142] phi from gfx_mode::@26 to gfx_mode::@32 [phi:gfx_mode::@26->gfx_mode::@32]
  __b32_from___b26:
    jmp __b32
    // gfx_mode::@32
  __b32:
    // [143] call keyboard_event_get 
    jsr keyboard_event_get
    // [144] (byte) keyboard_event_get::return#3 ← (byte) keyboard_event_get::return#2
    jmp __b33
    // gfx_mode::@33
  __b33:
    // [145] (byte) gfx_mode::keyboard_event#0 ← (byte) keyboard_event_get::return#3
    // [146] if((byte) gfx_mode::keyboard_event#0==(const nomodify byte) KEY_SPACE) goto gfx_mode::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #KEY_SPACE
    beq __breturn
    jmp __b25
    // gfx_mode::@return
  __breturn:
    // [147] return 
    rts
  // DTV Palette - default
    // [148] phi from gfx_mode::@22 to gfx_mode::@24 [phi:gfx_mode::@22->gfx_mode::@24]
  __b24_from___b22:
    // [148] phi (byte) gfx_mode::i#2 = (byte) 0 [phi:gfx_mode::@22->gfx_mode::@24#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b24
    // [148] phi from gfx_mode::@24 to gfx_mode::@24 [phi:gfx_mode::@24->gfx_mode::@24]
  __b24_from___b24:
    // [148] phi (byte) gfx_mode::i#2 = (byte) gfx_mode::i#1 [phi:gfx_mode::@24->gfx_mode::@24#0] -- register_copy 
    jmp __b24
    // gfx_mode::@24
  __b24:
    // [149] *((const nomodify byte*) DTV_PALETTE + (byte) gfx_mode::i#2) ← *((const byte*) DTV_PALETTE_DEFAULT + (byte) gfx_mode::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda DTV_PALETTE_DEFAULT,x
    sta DTV_PALETTE,x
    // [150] (byte) gfx_mode::i#1 ← ++ (byte) gfx_mode::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [151] if((byte) gfx_mode::i#1!=(byte) $10) goto gfx_mode::@24 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b24_from___b24
    jmp __b25
}
  // keyboard_event_get
// Get the next event from the keyboard event buffer.
// Returns $ff if there is no event waiting. As all events are <$7f it is enough to examine bit 7 when determining if there is any event to process.
// The buffer is filled by keyboard_event_scan()
keyboard_event_get: {
    // [152] if((byte) keyboard_events_size#100==(byte) 0) goto keyboard_event_get::@return -- vbuz1_eq_0_then_la1 
    lda.z keyboard_events_size
    cmp #0
    beq __breturn_from_keyboard_event_get
    jmp __b1
    // keyboard_event_get::@1
  __b1:
    // [153] (byte) keyboard_events_size#4 ← -- (byte) keyboard_events_size#100 -- vbuz1=_dec_vbuz1 
    dec.z keyboard_events_size
    // [154] (byte) keyboard_event_get::return#1 ← *((const byte*) keyboard_events + (byte) keyboard_events_size#4) -- vbuaa=pbuc1_derefidx_vbuz1 
    ldy.z keyboard_events_size
    lda keyboard_events,y
    // [155] phi from keyboard_event_get::@1 to keyboard_event_get::@return [phi:keyboard_event_get::@1->keyboard_event_get::@return]
  __breturn_from___b1:
    // [155] phi (byte) keyboard_events_size#24 = (byte) keyboard_events_size#4 [phi:keyboard_event_get::@1->keyboard_event_get::@return#0] -- register_copy 
    // [155] phi (byte) keyboard_event_get::return#2 = (byte) keyboard_event_get::return#1 [phi:keyboard_event_get::@1->keyboard_event_get::@return#1] -- register_copy 
    jmp __breturn
    // [155] phi from keyboard_event_get to keyboard_event_get::@return [phi:keyboard_event_get->keyboard_event_get::@return]
  __breturn_from_keyboard_event_get:
    // [155] phi (byte) keyboard_events_size#24 = (byte) keyboard_events_size#100 [phi:keyboard_event_get->keyboard_event_get::@return#0] -- register_copy 
    // [155] phi (byte) keyboard_event_get::return#2 = (byte) $ff [phi:keyboard_event_get->keyboard_event_get::@return#1] -- vbuaa=vbuc1 
    lda #$ff
    jmp __breturn
    // keyboard_event_get::@return
  __breturn:
    // [156] return 
    rts
}
  // keyboard_event_scan
// Scans the entire matrix to determine which keys have been pressed/depressed.
// Generates keyboard events into the event buffer. Events can be read using keyboard_event_get().
// Handles debounce and only generates events when the status of a key changes.
// Also stores current status of modifiers in keyboard_modifiers.
keyboard_event_scan: {
    .label row_scan = $16
    .label keycode = $22
    .label row = $e
    // [158] phi from keyboard_event_scan to keyboard_event_scan::@7 [phi:keyboard_event_scan->keyboard_event_scan::@7]
  __b7_from_keyboard_event_scan:
    // [158] phi (byte) keyboard_events_size#106 = (byte) keyboard_events_size#97 [phi:keyboard_event_scan->keyboard_event_scan::@7#0] -- register_copy 
    // [158] phi (byte) keyboard_event_scan::keycode#11 = (byte) 0 [phi:keyboard_event_scan->keyboard_event_scan::@7#1] -- vbuz1=vbuc1 
    lda #0
    sta.z keycode
    // [158] phi (byte) keyboard_event_scan::row#2 = (byte) 0 [phi:keyboard_event_scan->keyboard_event_scan::@7#2] -- vbuz1=vbuc1 
    lda #0
    sta.z row
    jmp __b7
    // [158] phi from keyboard_event_scan::@8 to keyboard_event_scan::@7 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7]
  __b7_from___b8:
    // [158] phi (byte) keyboard_events_size#106 = (byte) keyboard_events_size#100 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7#0] -- register_copy 
    // [158] phi (byte) keyboard_event_scan::keycode#11 = (byte) keyboard_event_scan::keycode#13 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7#1] -- register_copy 
    // [158] phi (byte) keyboard_event_scan::row#2 = (byte) keyboard_event_scan::row#1 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7#2] -- register_copy 
    jmp __b7
    // keyboard_event_scan::@7
  __b7:
    // [159] (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_event_scan::row#2 -- vbuxx=vbuz1 
    ldx.z row
    // [160] call keyboard_matrix_read 
    jsr keyboard_matrix_read
    // [161] (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#0
    jmp __b19
    // keyboard_event_scan::@19
  __b19:
    // [162] (byte) keyboard_event_scan::row_scan#0 ← (byte) keyboard_matrix_read::return#2 -- vbuz1=vbuaa 
    sta.z row_scan
    // [163] if((byte) keyboard_event_scan::row_scan#0!=*((const byte*) keyboard_scan_values + (byte) keyboard_event_scan::row#2)) goto keyboard_event_scan::@9 -- vbuz1_neq_pbuc1_derefidx_vbuz2_then_la1 
    lda.z row_scan
    ldy.z row
    cmp keyboard_scan_values,y
    bne __b9_from___b19
    jmp __b16
    // keyboard_event_scan::@16
  __b16:
    // [164] (byte) keyboard_event_scan::keycode#1 ← (byte) keyboard_event_scan::keycode#11 + (byte) 8 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z keycode
    axs #-[8]
    stx.z keycode
    // [165] phi from keyboard_event_scan::@15 keyboard_event_scan::@16 to keyboard_event_scan::@8 [phi:keyboard_event_scan::@15/keyboard_event_scan::@16->keyboard_event_scan::@8]
  __b8_from___b15:
  __b8_from___b16:
    // [165] phi (byte) keyboard_events_size#100 = (byte) keyboard_events_size#105 [phi:keyboard_event_scan::@15/keyboard_event_scan::@16->keyboard_event_scan::@8#0] -- register_copy 
    // [165] phi (byte) keyboard_event_scan::keycode#13 = (byte) keyboard_event_scan::keycode#14 [phi:keyboard_event_scan::@15/keyboard_event_scan::@16->keyboard_event_scan::@8#1] -- register_copy 
    jmp __b8
    // keyboard_event_scan::@8
  __b8:
    // [166] (byte) keyboard_event_scan::row#1 ← ++ (byte) keyboard_event_scan::row#2 -- vbuz1=_inc_vbuz1 
    inc.z row
    // [167] if((byte) keyboard_event_scan::row#1!=(byte) 8) goto keyboard_event_scan::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z row
    bne __b7_from___b8
    // [168] phi from keyboard_event_scan::@8 to keyboard_event_scan::@17 [phi:keyboard_event_scan::@8->keyboard_event_scan::@17]
  __b17_from___b8:
    jmp __b17
    // keyboard_event_scan::@17
  __b17:
    // [169] call keyboard_event_pressed 
    // [211] phi from keyboard_event_scan::@17 to keyboard_event_pressed [phi:keyboard_event_scan::@17->keyboard_event_pressed]
  keyboard_event_pressed_from___b17:
    // [211] phi (byte) keyboard_event_pressed::keycode#4 = (const nomodify byte) KEY_LSHIFT [phi:keyboard_event_scan::@17->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_LSHIFT
    sta.z keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
    // [170] (byte) keyboard_event_pressed::return#0 ← (byte) keyboard_event_pressed::return#10
    jmp __b20
    // keyboard_event_scan::@20
  __b20:
    // [171] (byte~) keyboard_event_scan::$0 ← (byte) keyboard_event_pressed::return#0
    // [172] if((byte~) keyboard_event_scan::$0==(byte) 0) goto keyboard_event_scan::@1 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b1_from___b20
    // [173] phi from keyboard_event_scan::@20 to keyboard_event_scan::@18 [phi:keyboard_event_scan::@20->keyboard_event_scan::@18]
  __b18_from___b20:
    jmp __b18
    // keyboard_event_scan::@18
  __b18:
    // [174] phi from keyboard_event_scan::@18 to keyboard_event_scan::@1 [phi:keyboard_event_scan::@18->keyboard_event_scan::@1]
  __b1_from___b18:
    // [174] phi (byte) keyboard_modifiers#18 = (const nomodify byte) KEY_MODIFIER_LSHIFT [phi:keyboard_event_scan::@18->keyboard_event_scan::@1#0] -- vbuxx=vbuc1 
    ldx #KEY_MODIFIER_LSHIFT
    jmp __b1
    // [174] phi from keyboard_event_scan::@20 to keyboard_event_scan::@1 [phi:keyboard_event_scan::@20->keyboard_event_scan::@1]
  __b1_from___b20:
    // [174] phi (byte) keyboard_modifiers#18 = (byte) 0 [phi:keyboard_event_scan::@20->keyboard_event_scan::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // keyboard_event_scan::@1
  __b1:
    // [175] call keyboard_event_pressed 
    // [211] phi from keyboard_event_scan::@1 to keyboard_event_pressed [phi:keyboard_event_scan::@1->keyboard_event_pressed]
  keyboard_event_pressed_from___b1:
    // [211] phi (byte) keyboard_event_pressed::keycode#4 = (const nomodify byte) KEY_RSHIFT [phi:keyboard_event_scan::@1->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_RSHIFT
    sta.z keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
    // [176] (byte) keyboard_event_pressed::return#1 ← (byte) keyboard_event_pressed::return#10
    jmp __b21
    // keyboard_event_scan::@21
  __b21:
    // [177] (byte~) keyboard_event_scan::$3 ← (byte) keyboard_event_pressed::return#1
    // [178] if((byte~) keyboard_event_scan::$3==(byte) 0) goto keyboard_event_scan::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b2_from___b21
    jmp __b4
    // keyboard_event_scan::@4
  __b4:
    // [179] (byte) keyboard_modifiers#3 ← (byte) keyboard_modifiers#18 | (const nomodify byte) KEY_MODIFIER_RSHIFT -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #KEY_MODIFIER_RSHIFT
    tax
    // [180] phi from keyboard_event_scan::@21 keyboard_event_scan::@4 to keyboard_event_scan::@2 [phi:keyboard_event_scan::@21/keyboard_event_scan::@4->keyboard_event_scan::@2]
  __b2_from___b21:
  __b2_from___b4:
    // [180] phi (byte) keyboard_modifiers#19 = (byte) keyboard_modifiers#18 [phi:keyboard_event_scan::@21/keyboard_event_scan::@4->keyboard_event_scan::@2#0] -- register_copy 
    jmp __b2
    // keyboard_event_scan::@2
  __b2:
    // [181] call keyboard_event_pressed 
    // [211] phi from keyboard_event_scan::@2 to keyboard_event_pressed [phi:keyboard_event_scan::@2->keyboard_event_pressed]
  keyboard_event_pressed_from___b2:
    // [211] phi (byte) keyboard_event_pressed::keycode#4 = (const nomodify byte) KEY_CTRL [phi:keyboard_event_scan::@2->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_CTRL
    sta.z keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
    // [182] (byte) keyboard_event_pressed::return#2 ← (byte) keyboard_event_pressed::return#10
    jmp __b22
    // keyboard_event_scan::@22
  __b22:
    // [183] (byte~) keyboard_event_scan::$6 ← (byte) keyboard_event_pressed::return#2
    // [184] if((byte~) keyboard_event_scan::$6==(byte) 0) goto keyboard_event_scan::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3_from___b22
    jmp __b5
    // keyboard_event_scan::@5
  __b5:
    // [185] (byte) keyboard_modifiers#4 ← (byte) keyboard_modifiers#19 | (const nomodify byte) KEY_MODIFIER_CTRL -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #KEY_MODIFIER_CTRL
    tax
    // [186] phi from keyboard_event_scan::@22 keyboard_event_scan::@5 to keyboard_event_scan::@3 [phi:keyboard_event_scan::@22/keyboard_event_scan::@5->keyboard_event_scan::@3]
  __b3_from___b22:
  __b3_from___b5:
    // [186] phi (byte) keyboard_modifiers#20 = (byte) keyboard_modifiers#19 [phi:keyboard_event_scan::@22/keyboard_event_scan::@5->keyboard_event_scan::@3#0] -- register_copy 
    jmp __b3
    // keyboard_event_scan::@3
  __b3:
    // [187] call keyboard_event_pressed 
    // [211] phi from keyboard_event_scan::@3 to keyboard_event_pressed [phi:keyboard_event_scan::@3->keyboard_event_pressed]
  keyboard_event_pressed_from___b3:
    // [211] phi (byte) keyboard_event_pressed::keycode#4 = (const nomodify byte) KEY_COMMODORE [phi:keyboard_event_scan::@3->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_COMMODORE
    sta.z keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
    // [188] (byte) keyboard_event_pressed::return#3 ← (byte) keyboard_event_pressed::return#10
    jmp __b23
    // keyboard_event_scan::@23
  __b23:
    // [189] (byte~) keyboard_event_scan::$9 ← (byte) keyboard_event_pressed::return#3
    // [190] if((byte~) keyboard_event_scan::$9==(byte) 0) goto keyboard_event_scan::@return -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __breturn_from___b23
    jmp __b6
    // keyboard_event_scan::@6
  __b6:
    // [191] (byte) keyboard_modifiers#5 ← (byte) keyboard_modifiers#20 | (const nomodify byte) KEY_MODIFIER_COMMODORE -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #KEY_MODIFIER_COMMODORE
    tax
    // [192] phi from keyboard_event_scan::@23 keyboard_event_scan::@6 to keyboard_event_scan::@return [phi:keyboard_event_scan::@23/keyboard_event_scan::@6->keyboard_event_scan::@return]
  __breturn_from___b23:
  __breturn_from___b6:
    // [192] phi (byte) keyboard_modifiers#21 = (byte) keyboard_modifiers#20 [phi:keyboard_event_scan::@23/keyboard_event_scan::@6->keyboard_event_scan::@return#0] -- register_copy 
    jmp __breturn
    // keyboard_event_scan::@return
  __breturn:
    // [193] return 
    rts
  // Something has changed on the keyboard row - check each column
    // [194] phi from keyboard_event_scan::@10 to keyboard_event_scan::@9 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9]
  __b9_from___b10:
    // [194] phi (byte) keyboard_events_size#18 = (byte) keyboard_events_size#105 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9#0] -- register_copy 
    // [194] phi (byte) keyboard_event_scan::keycode#10 = (byte) keyboard_event_scan::keycode#14 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9#1] -- register_copy 
    // [194] phi (byte) keyboard_event_scan::col#2 = (byte) keyboard_event_scan::col#1 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9#2] -- register_copy 
    jmp __b9
    // [194] phi from keyboard_event_scan::@19 to keyboard_event_scan::@9 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9]
  __b9_from___b19:
    // [194] phi (byte) keyboard_events_size#18 = (byte) keyboard_events_size#106 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9#0] -- register_copy 
    // [194] phi (byte) keyboard_event_scan::keycode#10 = (byte) keyboard_event_scan::keycode#11 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9#1] -- register_copy 
    // [194] phi (byte) keyboard_event_scan::col#2 = (byte) 0 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9#2] -- vbuxx=vbuc1 
    ldx #0
    jmp __b9
    // keyboard_event_scan::@9
  __b9:
    // [195] (byte~) keyboard_event_scan::$15 ← (byte) keyboard_event_scan::row_scan#0 ^ *((const byte*) keyboard_scan_values + (byte) keyboard_event_scan::row#2) -- vbuaa=vbuz1_bxor_pbuc1_derefidx_vbuz2 
    lda.z row_scan
    ldy.z row
    eor keyboard_scan_values,y
    // [196] (byte~) keyboard_event_scan::$16 ← (byte~) keyboard_event_scan::$15 & *((const byte*) keyboard_matrix_col_bitmask + (byte) keyboard_event_scan::col#2) -- vbuaa=vbuaa_band_pbuc1_derefidx_vbuxx 
    and keyboard_matrix_col_bitmask,x
    // [197] if((byte~) keyboard_event_scan::$16==(byte) 0) goto keyboard_event_scan::@10 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b10_from___b9
    jmp __b12
    // keyboard_event_scan::@12
  __b12:
    // [198] if((byte) keyboard_events_size#18==(byte) 8) goto keyboard_event_scan::@10 -- vbuz1_eq_vbuc1_then_la1 
    lda #8
    cmp.z keyboard_events_size
    beq __b10_from___b12
    jmp __b13
    // keyboard_event_scan::@13
  __b13:
    // [199] (byte) keyboard_event_scan::event_type#0 ← (byte) keyboard_event_scan::row_scan#0 & *((const byte*) keyboard_matrix_col_bitmask + (byte) keyboard_event_scan::col#2) -- vbuaa=vbuz1_band_pbuc1_derefidx_vbuxx 
    lda keyboard_matrix_col_bitmask,x
    and.z row_scan
    // [200] if((byte) keyboard_event_scan::event_type#0==(byte) 0) goto keyboard_event_scan::@11 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b11
    jmp __b14
    // keyboard_event_scan::@14
  __b14:
    // [201] *((const byte*) keyboard_events + (byte) keyboard_events_size#18) ← (byte) keyboard_event_scan::keycode#10 -- pbuc1_derefidx_vbuz1=vbuz2 
    // Key pressed
    lda.z keycode
    ldy.z keyboard_events_size
    sta keyboard_events,y
    // [202] (byte) keyboard_events_size#2 ← ++ (byte) keyboard_events_size#18 -- vbuz1=_inc_vbuz1 
    inc.z keyboard_events_size
    // [203] phi from keyboard_event_scan::@11 keyboard_event_scan::@12 keyboard_event_scan::@14 keyboard_event_scan::@9 to keyboard_event_scan::@10 [phi:keyboard_event_scan::@11/keyboard_event_scan::@12/keyboard_event_scan::@14/keyboard_event_scan::@9->keyboard_event_scan::@10]
  __b10_from___b11:
  __b10_from___b12:
  __b10_from___b14:
  __b10_from___b9:
    // [203] phi (byte) keyboard_events_size#105 = (byte) keyboard_events_size#1 [phi:keyboard_event_scan::@11/keyboard_event_scan::@12/keyboard_event_scan::@14/keyboard_event_scan::@9->keyboard_event_scan::@10#0] -- register_copy 
    jmp __b10
    // keyboard_event_scan::@10
  __b10:
    // [204] (byte) keyboard_event_scan::keycode#14 ← ++ (byte) keyboard_event_scan::keycode#10 -- vbuz1=_inc_vbuz1 
    inc.z keycode
    // [205] (byte) keyboard_event_scan::col#1 ← ++ (byte) keyboard_event_scan::col#2 -- vbuxx=_inc_vbuxx 
    inx
    // [206] if((byte) keyboard_event_scan::col#1!=(byte) 8) goto keyboard_event_scan::@9 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne __b9_from___b10
    jmp __b15
    // keyboard_event_scan::@15
  __b15:
    // [207] *((const byte*) keyboard_scan_values + (byte) keyboard_event_scan::row#2) ← (byte) keyboard_event_scan::row_scan#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    // Store the current keyboard status for the row to debounce
    lda.z row_scan
    ldy.z row
    sta keyboard_scan_values,y
    jmp __b8_from___b15
    // keyboard_event_scan::@11
  __b11:
    // [208] (byte~) keyboard_event_scan::$23 ← (byte) keyboard_event_scan::keycode#10 | (byte) $40 -- vbuaa=vbuz1_bor_vbuc1 
    lda #$40
    ora.z keycode
    // [209] *((const byte*) keyboard_events + (byte) keyboard_events_size#18) ← (byte~) keyboard_event_scan::$23 -- pbuc1_derefidx_vbuz1=vbuaa 
    // Key released
    ldy.z keyboard_events_size
    sta keyboard_events,y
    // [210] (byte) keyboard_events_size#1 ← ++ (byte) keyboard_events_size#18 -- vbuz1=_inc_vbuz1 
    inc.z keyboard_events_size
    jmp __b10_from___b11
}
  // keyboard_event_pressed
// Determine if a specific key is currently pressed based on the last keyboard_event_scan()
// Returns 0 is not pressed and non-0 if pressed
// keyboard_event_pressed(byte zp($f) keycode)
keyboard_event_pressed: {
    .label row_bits = $21
    .label keycode = $f
    // [212] (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#4 >> (byte) 3 -- vbuaa=vbuz1_ror_3 
    lda.z keycode
    lsr
    lsr
    lsr
    // [213] (byte) keyboard_event_pressed::row_bits#0 ← *((const byte*) keyboard_scan_values + (byte~) keyboard_event_pressed::$0) -- vbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda keyboard_scan_values,y
    sta.z row_bits
    // [214] (byte~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#4 & (byte) 7 -- vbuaa=vbuz1_band_vbuc1 
    lda #7
    and.z keycode
    // [215] (byte) keyboard_event_pressed::return#10 ← (byte) keyboard_event_pressed::row_bits#0 & *((const byte*) keyboard_matrix_col_bitmask + (byte~) keyboard_event_pressed::$1) -- vbuaa=vbuz1_band_pbuc1_derefidx_vbuaa 
    tay
    lda keyboard_matrix_col_bitmask,y
    and.z row_bits
    jmp __breturn
    // keyboard_event_pressed::@return
  __breturn:
    // [216] return 
    rts
}
  // keyboard_matrix_read
// Read a single row of the keyboard matrix
// The row ID (0-7) of the keyboard matrix row to read. See the C64 key matrix for row IDs.
// Returns the keys pressed on the row as bits according to the C64 key matrix.
// Notice: If the C64 normal interrupt is still running it will occasionally interrupt right between the read & write
// leading to erroneous readings. You must disable the normal interrupt or sei/cli around calls to the keyboard matrix reader.
// keyboard_matrix_read(byte register(X) rowid)
keyboard_matrix_read: {
    // [217] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1) ← *((const byte*) keyboard_matrix_row_bitmask + (byte) keyboard_matrix_read::rowid#0) -- _deref_pbuc1=pbuc2_derefidx_vbuxx 
    lda keyboard_matrix_row_bitmask,x
    sta CIA1
    // [218] (byte) keyboard_matrix_read::return#0 ← ~ *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_B) -- vbuaa=_bnot__deref_pbuc1 
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_B
    eor #$ff
    jmp __breturn
    // keyboard_matrix_read::@return
  __breturn:
    // [219] return 
    rts
}
  // get_vic_screen
// Get the VIC screen address from the screen index
// get_vic_screen(byte register(A) idx)
get_vic_screen: {
    .label return = $10
    // [221] if((byte) get_vic_screen::idx#2==(byte) 0) goto get_vic_screen::@return -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __breturn_from_get_vic_screen
    jmp __b2
    // get_vic_screen::@2
  __b2:
    // [222] if((byte) get_vic_screen::idx#2==(byte) 1) goto get_vic_screen::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #1
    beq __breturn_from___b2
    jmp __b3
    // get_vic_screen::@3
  __b3:
    // [223] if((byte) get_vic_screen::idx#2==(byte) 2) goto get_vic_screen::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #2
    beq __breturn_from___b3
    jmp __b4
    // get_vic_screen::@4
  __b4:
    // [224] if((byte) get_vic_screen::idx#2==(byte) 3) goto get_vic_screen::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #3
    beq __breturn_from___b4
    jmp __b5
    // get_vic_screen::@5
  __b5:
    // [225] if((byte) get_vic_screen::idx#2!=(byte) 4) goto get_vic_screen::@1 -- vbuaa_neq_vbuc1_then_la1 
    cmp #4
    bne __b1_from___b5
    // [227] phi from get_vic_screen::@5 to get_vic_screen::@return [phi:get_vic_screen::@5->get_vic_screen::@return]
  __breturn_from___b5:
    // [227] phi (byte*) get_vic_screen::return#5 = (const nomodify byte*) VIC_SCREEN4 [phi:get_vic_screen::@5->get_vic_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN4
    sta.z return
    lda #>VIC_SCREEN4
    sta.z return+1
    jmp __breturn
    // [226] phi from get_vic_screen::@5 to get_vic_screen::@1 [phi:get_vic_screen::@5->get_vic_screen::@1]
  __b1_from___b5:
    jmp __b1
    // get_vic_screen::@1
  __b1:
    // [227] phi from get_vic_screen get_vic_screen::@1 to get_vic_screen::@return [phi:get_vic_screen/get_vic_screen::@1->get_vic_screen::@return]
  __breturn_from_get_vic_screen:
  __breturn_from___b1:
    // [227] phi (byte*) get_vic_screen::return#5 = (const nomodify byte*) VIC_SCREEN0 [phi:get_vic_screen/get_vic_screen::@1->get_vic_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN0
    sta.z return
    lda #>VIC_SCREEN0
    sta.z return+1
    jmp __breturn
    // [227] phi from get_vic_screen::@2 to get_vic_screen::@return [phi:get_vic_screen::@2->get_vic_screen::@return]
  __breturn_from___b2:
    // [227] phi (byte*) get_vic_screen::return#5 = (const nomodify byte*) VIC_SCREEN1 [phi:get_vic_screen::@2->get_vic_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN1
    sta.z return
    lda #>VIC_SCREEN1
    sta.z return+1
    jmp __breturn
    // [227] phi from get_vic_screen::@3 to get_vic_screen::@return [phi:get_vic_screen::@3->get_vic_screen::@return]
  __breturn_from___b3:
    // [227] phi (byte*) get_vic_screen::return#5 = (const nomodify byte*) VIC_SCREEN2 [phi:get_vic_screen::@3->get_vic_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN2
    sta.z return
    lda #>VIC_SCREEN2
    sta.z return+1
    jmp __breturn
    // [227] phi from get_vic_screen::@4 to get_vic_screen::@return [phi:get_vic_screen::@4->get_vic_screen::@return]
  __breturn_from___b4:
    // [227] phi (byte*) get_vic_screen::return#5 = (const nomodify byte*) VIC_SCREEN3 [phi:get_vic_screen::@4->get_vic_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN3
    sta.z return
    lda #>VIC_SCREEN3
    sta.z return+1
    jmp __breturn
    // get_vic_screen::@return
  __breturn:
    // [228] return 
    rts
}
  // get_vic_charset
// Get the VIC charset/bitmap address from the index
// get_vic_charset(byte register(A) idx)
get_vic_charset: {
    .label return = 7
    // [229] if((byte) get_vic_charset::idx#0==(byte) 0) goto get_vic_charset::@return -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __breturn_from_get_vic_charset
    jmp __b2
    // get_vic_charset::@2
  __b2:
    // [230] if((byte) get_vic_charset::idx#0!=(byte) 1) goto get_vic_charset::@1 -- vbuaa_neq_vbuc1_then_la1 
    cmp #1
    bne __b1_from___b2
    // [232] phi from get_vic_charset::@2 to get_vic_charset::@return [phi:get_vic_charset::@2->get_vic_charset::@return]
  __breturn_from___b2:
    // [232] phi (byte*) get_vic_charset::return#2 = (const nomodify byte*) VIC_BITMAP [phi:get_vic_charset::@2->get_vic_charset::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_BITMAP
    sta.z return
    lda #>VIC_BITMAP
    sta.z return+1
    jmp __breturn
    // [231] phi from get_vic_charset::@2 to get_vic_charset::@1 [phi:get_vic_charset::@2->get_vic_charset::@1]
  __b1_from___b2:
    jmp __b1
    // get_vic_charset::@1
  __b1:
    // [232] phi from get_vic_charset get_vic_charset::@1 to get_vic_charset::@return [phi:get_vic_charset/get_vic_charset::@1->get_vic_charset::@return]
  __breturn_from_get_vic_charset:
  __breturn_from___b1:
    // [232] phi (byte*) get_vic_charset::return#2 = (const nomodify byte*) VIC_CHARSET_ROM [phi:get_vic_charset/get_vic_charset::@1->get_vic_charset::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_CHARSET_ROM
    sta.z return
    lda #>VIC_CHARSET_ROM
    sta.z return+1
    jmp __breturn
    // get_vic_charset::@return
  __breturn:
    // [233] return 
    rts
}
  // get_plane
// Get plane address from a plane index (from the form)
// get_plane(byte register(A) idx)
get_plane: {
    .label return = 9
    // [235] if((byte) get_plane::idx#10==(byte) 0) goto get_plane::@return -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __breturn_from_get_plane
    jmp __b2
    // get_plane::@2
  __b2:
    // [236] if((byte) get_plane::idx#10==(byte) 1) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #1
    beq __breturn_from___b2
    jmp __b3
    // get_plane::@3
  __b3:
    // [237] if((byte) get_plane::idx#10==(byte) 2) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #2
    beq __breturn_from___b3
    jmp __b4
    // get_plane::@4
  __b4:
    // [238] if((byte) get_plane::idx#10==(byte) 3) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #3
    beq __breturn_from___b4
    jmp __b5
    // get_plane::@5
  __b5:
    // [239] if((byte) get_plane::idx#10==(byte) 4) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #4
    beq __breturn_from___b5
    jmp __b6
    // get_plane::@6
  __b6:
    // [240] if((byte) get_plane::idx#10==(byte) 5) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #5
    beq __breturn_from___b6
    jmp __b7
    // get_plane::@7
  __b7:
    // [241] if((byte) get_plane::idx#10==(byte) 6) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #6
    beq __breturn_from___b7
    jmp __b8
    // get_plane::@8
  __b8:
    // [242] if((byte) get_plane::idx#10==(byte) 7) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #7
    beq __breturn_from___b8
    jmp __b9
    // get_plane::@9
  __b9:
    // [243] if((byte) get_plane::idx#10==(byte) 8) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #8
    beq __breturn_from___b9
    jmp __b10
    // get_plane::@10
  __b10:
    // [244] if((byte) get_plane::idx#10==(byte) 9) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #9
    beq __breturn_from___b10
    jmp __b11
    // get_plane::@11
  __b11:
    // [245] if((byte) get_plane::idx#10==(byte) $a) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #$a
    beq __breturn_from___b11
    jmp __b12
    // get_plane::@12
  __b12:
    // [246] if((byte) get_plane::idx#10==(byte) $b) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #$b
    beq __breturn_from___b12
    jmp __b13
    // get_plane::@13
  __b13:
    // [247] if((byte) get_plane::idx#10==(byte) $c) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #$c
    beq __breturn_from___b13
    jmp __b14
    // get_plane::@14
  __b14:
    // [248] if((byte) get_plane::idx#10!=(byte) $d) goto get_plane::@1 -- vbuaa_neq_vbuc1_then_la1 
    cmp #$d
    bne __b1_from___b14
    // [250] phi from get_plane::@14 to get_plane::@return [phi:get_plane::@14->get_plane::@return]
  __breturn_from___b14:
    // [250] phi (dword) get_plane::return#14 = (const nomodify dword) PLANE_FULL [phi:get_plane::@14->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_FULL
    sta.z return
    lda #>PLANE_FULL
    sta.z return+1
    lda #<PLANE_FULL>>$10
    sta.z return+2
    lda #>PLANE_FULL>>$10
    sta.z return+3
    jmp __breturn
    // [249] phi from get_plane::@14 to get_plane::@1 [phi:get_plane::@14->get_plane::@1]
  __b1_from___b14:
    jmp __b1
    // get_plane::@1
  __b1:
    // [250] phi from get_plane get_plane::@1 to get_plane::@return [phi:get_plane/get_plane::@1->get_plane::@return]
  __breturn_from_get_plane:
  __breturn_from___b1:
    // [250] phi (dword) get_plane::return#14 = (dword)(const nomodify byte*) VIC_SCREEN0 [phi:get_plane/get_plane::@1->get_plane::@return#0] -- vduz1=vduc1 
    lda #<VIC_SCREEN0
    sta.z return
    lda #>VIC_SCREEN0
    sta.z return+1
    lda #<VIC_SCREEN0>>$10
    sta.z return+2
    lda #>VIC_SCREEN0>>$10
    sta.z return+3
    jmp __breturn
    // [250] phi from get_plane::@10 to get_plane::@return [phi:get_plane::@10->get_plane::@return]
  __breturn_from___b10:
    // [250] phi (dword) get_plane::return#14 = (const nomodify dword) PLANE_HORISONTAL2 [phi:get_plane::@10->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_HORISONTAL2
    sta.z return
    lda #>PLANE_HORISONTAL2
    sta.z return+1
    lda #<PLANE_HORISONTAL2>>$10
    sta.z return+2
    lda #>PLANE_HORISONTAL2>>$10
    sta.z return+3
    jmp __breturn
    // [250] phi from get_plane::@11 to get_plane::@return [phi:get_plane::@11->get_plane::@return]
  __breturn_from___b11:
    // [250] phi (dword) get_plane::return#14 = (const nomodify dword) PLANE_VERTICAL2 [phi:get_plane::@11->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_VERTICAL2
    sta.z return
    lda #>PLANE_VERTICAL2
    sta.z return+1
    lda #<PLANE_VERTICAL2>>$10
    sta.z return+2
    lda #>PLANE_VERTICAL2>>$10
    sta.z return+3
    jmp __breturn
    // [250] phi from get_plane::@12 to get_plane::@return [phi:get_plane::@12->get_plane::@return]
  __breturn_from___b12:
    // [250] phi (dword) get_plane::return#14 = (const nomodify dword) PLANE_CHARSET8 [phi:get_plane::@12->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_CHARSET8
    sta.z return
    lda #>PLANE_CHARSET8
    sta.z return+1
    lda #<PLANE_CHARSET8>>$10
    sta.z return+2
    lda #>PLANE_CHARSET8>>$10
    sta.z return+3
    jmp __breturn
    // [250] phi from get_plane::@13 to get_plane::@return [phi:get_plane::@13->get_plane::@return]
  __breturn_from___b13:
    // [250] phi (dword) get_plane::return#14 = (const nomodify dword) PLANE_BLANK [phi:get_plane::@13->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_BLANK
    sta.z return
    lda #>PLANE_BLANK
    sta.z return+1
    lda #<PLANE_BLANK>>$10
    sta.z return+2
    lda #>PLANE_BLANK>>$10
    sta.z return+3
    jmp __breturn
    // [250] phi from get_plane::@2 to get_plane::@return [phi:get_plane::@2->get_plane::@return]
  __breturn_from___b2:
    // [250] phi (dword) get_plane::return#14 = (dword)(const nomodify byte*) VIC_SCREEN1 [phi:get_plane::@2->get_plane::@return#0] -- vduz1=vduc1 
    lda #<VIC_SCREEN1
    sta.z return
    lda #>VIC_SCREEN1
    sta.z return+1
    lda #<VIC_SCREEN1>>$10
    sta.z return+2
    lda #>VIC_SCREEN1>>$10
    sta.z return+3
    jmp __breturn
    // [250] phi from get_plane::@3 to get_plane::@return [phi:get_plane::@3->get_plane::@return]
  __breturn_from___b3:
    // [250] phi (dword) get_plane::return#14 = (dword)(const nomodify byte*) VIC_SCREEN2 [phi:get_plane::@3->get_plane::@return#0] -- vduz1=vduc1 
    lda #<VIC_SCREEN2
    sta.z return
    lda #>VIC_SCREEN2
    sta.z return+1
    lda #<VIC_SCREEN2>>$10
    sta.z return+2
    lda #>VIC_SCREEN2>>$10
    sta.z return+3
    jmp __breturn
    // [250] phi from get_plane::@4 to get_plane::@return [phi:get_plane::@4->get_plane::@return]
  __breturn_from___b4:
    // [250] phi (dword) get_plane::return#14 = (dword)(const nomodify byte*) VIC_SCREEN3 [phi:get_plane::@4->get_plane::@return#0] -- vduz1=vduc1 
    lda #<VIC_SCREEN3
    sta.z return
    lda #>VIC_SCREEN3
    sta.z return+1
    lda #<VIC_SCREEN3>>$10
    sta.z return+2
    lda #>VIC_SCREEN3>>$10
    sta.z return+3
    jmp __breturn
    // [250] phi from get_plane::@5 to get_plane::@return [phi:get_plane::@5->get_plane::@return]
  __breturn_from___b5:
    // [250] phi (dword) get_plane::return#14 = (dword)(const nomodify byte*) VIC_BITMAP [phi:get_plane::@5->get_plane::@return#0] -- vduz1=vduc1 
    lda #<VIC_BITMAP
    sta.z return
    lda #>VIC_BITMAP
    sta.z return+1
    lda #<VIC_BITMAP>>$10
    sta.z return+2
    lda #>VIC_BITMAP>>$10
    sta.z return+3
    jmp __breturn
    // [250] phi from get_plane::@6 to get_plane::@return [phi:get_plane::@6->get_plane::@return]
  __breturn_from___b6:
    // [250] phi (dword) get_plane::return#14 = (dword)(const nomodify byte*) VIC_CHARSET_ROM [phi:get_plane::@6->get_plane::@return#0] -- vduz1=vduc1 
    lda #<VIC_CHARSET_ROM
    sta.z return
    lda #>VIC_CHARSET_ROM
    sta.z return+1
    lda #<VIC_CHARSET_ROM>>$10
    sta.z return+2
    lda #>VIC_CHARSET_ROM>>$10
    sta.z return+3
    jmp __breturn
    // [250] phi from get_plane::@7 to get_plane::@return [phi:get_plane::@7->get_plane::@return]
  __breturn_from___b7:
    // [250] phi (dword) get_plane::return#14 = (const nomodify dword) PLANE_8BPP_CHUNKY [phi:get_plane::@7->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_8BPP_CHUNKY
    sta.z return
    lda #>PLANE_8BPP_CHUNKY
    sta.z return+1
    lda #<PLANE_8BPP_CHUNKY>>$10
    sta.z return+2
    lda #>PLANE_8BPP_CHUNKY>>$10
    sta.z return+3
    jmp __breturn
    // [250] phi from get_plane::@8 to get_plane::@return [phi:get_plane::@8->get_plane::@return]
  __breturn_from___b8:
    // [250] phi (dword) get_plane::return#14 = (const nomodify dword) PLANE_HORISONTAL [phi:get_plane::@8->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_HORISONTAL
    sta.z return
    lda #>PLANE_HORISONTAL
    sta.z return+1
    lda #<PLANE_HORISONTAL>>$10
    sta.z return+2
    lda #>PLANE_HORISONTAL>>$10
    sta.z return+3
    jmp __breturn
    // [250] phi from get_plane::@9 to get_plane::@return [phi:get_plane::@9->get_plane::@return]
  __breturn_from___b9:
    // [250] phi (dword) get_plane::return#14 = (const nomodify dword) PLANE_VERTICAL [phi:get_plane::@9->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_VERTICAL
    sta.z return
    lda #>PLANE_VERTICAL
    sta.z return+1
    lda #<PLANE_VERTICAL>>$10
    sta.z return+2
    lda #>PLANE_VERTICAL>>$10
    sta.z return+3
    jmp __breturn
    // get_plane::@return
  __breturn:
    // [251] return 
    rts
}
  // form_mode
// Show the form - and let the user change values
form_mode: {
    .label preset_current = $d
    // [253] call print_set_screen 
  // Form Colors
    // [450] phi from form_mode to print_set_screen [phi:form_mode->print_set_screen]
  print_set_screen_from_form_mode:
    // [450] phi (byte*) print_set_screen::screen#2 = (const nomodify byte*) COLS [phi:form_mode->print_set_screen#0] -- pbuz1=pbuc1 
    lda #<COLS
    sta.z print_set_screen.screen
    lda #>COLS
    sta.z print_set_screen.screen+1
    jsr print_set_screen
    // [254] phi from form_mode to form_mode::@8 [phi:form_mode->form_mode::@8]
  __b8_from_form_mode:
    jmp __b8
    // form_mode::@8
  __b8:
    // [255] call print_cls 
    jsr print_cls
    // [256] phi from form_mode::@8 to form_mode::@9 [phi:form_mode::@8->form_mode::@9]
  __b9_from___b8:
    jmp __b9
    // form_mode::@9
  __b9:
    // [257] call print_str_lines 
    // [415] phi from form_mode::@9 to print_str_lines [phi:form_mode::@9->print_str_lines]
  print_str_lines_from___b9:
    // [415] phi (byte*) print_str_lines::str#5 = (const byte*) FORM_COLS [phi:form_mode::@9->print_str_lines#0] -- pbuz1=pbuc1 
    lda #<FORM_COLS
    sta.z print_str_lines.str
    lda #>FORM_COLS
    sta.z print_str_lines.str+1
    jsr print_str_lines
    // [258] phi from form_mode::@9 to form_mode::@10 [phi:form_mode::@9->form_mode::@10]
  __b10_from___b9:
    jmp __b10
    // form_mode::@10
  __b10:
    // [259] call print_set_screen 
  // Form Text
    // [450] phi from form_mode::@10 to print_set_screen [phi:form_mode::@10->print_set_screen]
  print_set_screen_from___b10:
    // [450] phi (byte*) print_set_screen::screen#2 = (const nomodify byte*) FORM_SCREEN [phi:form_mode::@10->print_set_screen#0] -- pbuz1=pbuc1 
    lda #<FORM_SCREEN
    sta.z print_set_screen.screen
    lda #>FORM_SCREEN
    sta.z print_set_screen.screen+1
    jsr print_set_screen
    // [260] phi from form_mode::@10 to form_mode::@11 [phi:form_mode::@10->form_mode::@11]
  __b11_from___b10:
    jmp __b11
    // form_mode::@11
  __b11:
    // [261] call print_cls 
    jsr print_cls
    // [262] phi from form_mode::@11 to form_mode::@12 [phi:form_mode::@11->form_mode::@12]
  __b12_from___b11:
    jmp __b12
    // form_mode::@12
  __b12:
    // [263] call print_str_lines 
    // [415] phi from form_mode::@12 to print_str_lines [phi:form_mode::@12->print_str_lines]
  print_str_lines_from___b12:
    // [415] phi (byte*) print_str_lines::str#5 = (const byte*) FORM_TEXT [phi:form_mode::@12->print_str_lines#0] -- pbuz1=pbuc1 
    lda #<FORM_TEXT
    sta.z print_str_lines.str
    lda #>FORM_TEXT
    sta.z print_str_lines.str+1
    jsr print_str_lines
    // [264] phi from form_mode::@12 to form_mode::@13 [phi:form_mode::@12->form_mode::@13]
  __b13_from___b12:
    jmp __b13
    // form_mode::@13
  __b13:
    // [265] call form_set_screen 
  // Form Fields
    // [405] phi from form_mode::@13 to form_set_screen [phi:form_mode::@13->form_set_screen]
  form_set_screen_from___b13:
    jsr form_set_screen
    // [266] phi from form_mode::@13 to form_mode::@14 [phi:form_mode::@13->form_mode::@14]
  __b14_from___b13:
    jmp __b14
    // form_mode::@14
  __b14:
    // [267] call form_render_values 
    // [328] phi from form_mode::@14 to form_render_values [phi:form_mode::@14->form_render_values]
  form_render_values_from___b14:
    jsr form_render_values
    jmp __b15
    // form_mode::@15
  __b15:
    // [268] (byte) render_preset_name::idx#0 ← *((const byte*) form_fields_val) -- vbuaa=_deref_pbuc1 
    lda form_fields_val
    // [269] call render_preset_name 
    // [304] phi from form_mode::@15 to render_preset_name [phi:form_mode::@15->render_preset_name]
  render_preset_name_from___b15:
    // [304] phi (byte) render_preset_name::idx#10 = (byte) render_preset_name::idx#0 [phi:form_mode::@15->render_preset_name#0] -- register_copy 
    jsr render_preset_name
    jmp __b16
    // form_mode::@16
  __b16:
    // [270] *((const nomodify byte*) DTV_GRAPHICS_VIC_BANK) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // DTV Graphics Bank
    lda #0
    sta DTV_GRAPHICS_VIC_BANK
    // [271] *((const nomodify byte*) DTV_COLOR_BANK_LO) ← <(word)(const nomodify dword) DTV_COLOR_BANK_DEFAULT/(word) $400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #<DTV_COLOR_BANK_DEFAULT/$400
    sta DTV_COLOR_BANK_LO
    // [272] *((const nomodify byte*) DTV_COLOR_BANK_HI) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_COLOR_BANK_HI
    // [273] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) ← (byte) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR
    // [274] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2) ← (byte) 3 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3
    sta CIA2
    // [275] *((const nomodify byte*) DTV_CONTROL) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank
    // DTV Graphics Mode
    lda #0
    sta DTV_CONTROL
    // [276] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1) ← (const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(byte) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Mode
    lda #VIC_DEN|VIC_RSEL|3
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1
    // [277] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL2) ← (const nomodify byte) VIC_CSEL -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL2
    // [278] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_MEMORY) ← (byte)(word)(const nomodify byte*) FORM_SCREEN&(word) $3fff/(byte) $40|(word)(const nomodify byte*) FORM_CHARSET&(word) $3fff/(word) $400 -- _deref_pbuc1=vbuc2 
    // VIC Memory Pointers
    lda #(FORM_SCREEN&$3fff)/$40|(FORM_CHARSET&$3fff)/$400
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY
    // [279] *((const nomodify byte*) DTV_PLANEA_START_LO) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // DTV Plane A to FORM_SCREEN also
    lda #0
    sta DTV_PLANEA_START_LO
    // [280] *((const nomodify byte*) DTV_PLANEA_START_MI) ← >(const nomodify byte*) FORM_SCREEN -- _deref_pbuc1=vbuc2 
    lda #>FORM_SCREEN
    sta DTV_PLANEA_START_MI
    // [281] *((const nomodify byte*) DTV_PLANEA_START_HI) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_START_HI
    // [282] phi from form_mode::@16 to form_mode::@1 [phi:form_mode::@16->form_mode::@1]
  __b1_from___b16:
    // [282] phi (byte) form_mode::i#2 = (byte) 0 [phi:form_mode::@16->form_mode::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
  // DTV Palette - default
    // [282] phi from form_mode::@1 to form_mode::@1 [phi:form_mode::@1->form_mode::@1]
  __b1_from___b1:
    // [282] phi (byte) form_mode::i#2 = (byte) form_mode::i#1 [phi:form_mode::@1->form_mode::@1#0] -- register_copy 
    jmp __b1
    // form_mode::@1
  __b1:
    // [283] *((const nomodify byte*) DTV_PALETTE + (byte) form_mode::i#2) ← *((const byte*) DTV_PALETTE_DEFAULT + (byte) form_mode::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda DTV_PALETTE_DEFAULT,x
    sta DTV_PALETTE,x
    // [284] (byte) form_mode::i#1 ← ++ (byte) form_mode::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [285] if((byte) form_mode::i#1!=(byte) $10) goto form_mode::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1_from___b1
    jmp __b2
    // form_mode::@2
  __b2:
    // [286] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR
    // [287] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // [288] (byte) form_mode::preset_current#0 ← *((const byte*) form_fields_val) -- vbuz1=_deref_pbuc1 
    lda form_fields_val
    sta.z preset_current
    // [289] phi from form_mode::@19 form_mode::@2 form_mode::@6 to form_mode::@3 [phi:form_mode::@19/form_mode::@2/form_mode::@6->form_mode::@3]
  __b3_from___b19:
  __b3_from___b2:
  __b3_from___b6:
    // [289] phi (byte) form_mode::preset_current#6 = (byte) form_mode::preset_current#1 [phi:form_mode::@19/form_mode::@2/form_mode::@6->form_mode::@3#0] -- register_copy 
    // [289] phi (byte) form_field_idx#28 = (byte) form_field_idx#18 [phi:form_mode::@19/form_mode::@2/form_mode::@6->form_mode::@3#1] -- register_copy 
    // [289] phi (byte) keyboard_events_size#47 = (byte) keyboard_events_size#24 [phi:form_mode::@19/form_mode::@2/form_mode::@6->form_mode::@3#2] -- register_copy 
    // [289] phi (signed byte) form_cursor_count#21 = (signed byte) form_cursor_count#16 [phi:form_mode::@19/form_mode::@2/form_mode::@6->form_mode::@3#3] -- register_copy 
    jmp __b3
  // Let the user change values in the form
    // form_mode::@3
  __b3:
    jmp __b4
    // form_mode::@4
  __b4:
    // [290] if(*((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)!=(byte) $ff) goto form_mode::@4 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    bne __b4
    // [291] phi from form_mode::@4 to form_mode::@5 [phi:form_mode::@4->form_mode::@5]
  __b5_from___b4:
    jmp __b5
    // form_mode::@5
  __b5:
    // [292] call form_control 
    jsr form_control
    // [293] (byte) form_control::return#0 ← (byte) form_control::return#2 -- vbuaa=vbuxx 
    txa
    jmp __b17
    // form_mode::@17
  __b17:
    // [294] (byte~) form_mode::$11 ← (byte) form_control::return#0
    // [295] if((byte~) form_mode::$11==(byte) 0) goto form_mode::@6 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b6
    jmp __breturn
    // form_mode::@return
  __breturn:
    // [296] return 
    rts
    // form_mode::@6
  __b6:
    // [297] if((byte) form_mode::preset_current#6==*((const byte*) form_fields_val)) goto form_mode::@3 -- vbuz1_eq__deref_pbuc1_then_la1 
    lda form_fields_val
    cmp.z preset_current
    beq __b3_from___b6
    jmp __b7
    // form_mode::@7
  __b7:
    // [298] (byte) apply_preset::idx#0 ← *((const byte*) form_fields_val) -- vbuaa=_deref_pbuc1 
    lda form_fields_val
    // [299] call apply_preset 
    // Preset changed - update field values and render
    jsr apply_preset
    jmp __b18
    // form_mode::@18
  __b18:
    // [300] (byte) form_mode::preset_current#1 ← *((const byte*) form_fields_val) -- vbuz1=_deref_pbuc1 
    lda form_fields_val
    sta.z preset_current
    // [301] call form_render_values 
    // [328] phi from form_mode::@18 to form_render_values [phi:form_mode::@18->form_render_values]
  form_render_values_from___b18:
    jsr form_render_values
    jmp __b19
    // form_mode::@19
  __b19:
    // [302] (byte) render_preset_name::idx#1 ← *((const byte*) form_fields_val) -- vbuaa=_deref_pbuc1 
    lda form_fields_val
    // [303] call render_preset_name 
    // [304] phi from form_mode::@19 to render_preset_name [phi:form_mode::@19->render_preset_name]
  render_preset_name_from___b19:
    // [304] phi (byte) render_preset_name::idx#10 = (byte) render_preset_name::idx#1 [phi:form_mode::@19->render_preset_name#0] -- register_copy 
    jsr render_preset_name
    jmp __b3_from___b19
}
  // render_preset_name
// Render form preset name in the form
// idx is the ID of the preset
// render_preset_name(byte register(A) idx)
render_preset_name: {
    .label name = $10
    // [305] if((byte) render_preset_name::idx#10==(byte) 0) goto render_preset_name::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b2_from_render_preset_name
    jmp __b3
    // render_preset_name::@3
  __b3:
    // [306] if((byte) render_preset_name::idx#10==(byte) 1) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #1
    beq __b2_from___b3
    jmp __b4
    // render_preset_name::@4
  __b4:
    // [307] if((byte) render_preset_name::idx#10==(byte) 2) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #2
    beq __b2_from___b4
    jmp __b5
    // render_preset_name::@5
  __b5:
    // [308] if((byte) render_preset_name::idx#10==(byte) 3) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #3
    beq __b2_from___b5
    jmp __b6
    // render_preset_name::@6
  __b6:
    // [309] if((byte) render_preset_name::idx#10==(byte) 4) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #4
    beq __b2_from___b6
    jmp __b7
    // render_preset_name::@7
  __b7:
    // [310] if((byte) render_preset_name::idx#10==(byte) 5) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #5
    beq __b2_from___b7
    jmp __b8
    // render_preset_name::@8
  __b8:
    // [311] if((byte) render_preset_name::idx#10==(byte) 6) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #6
    beq __b2_from___b8
    jmp __b9
    // render_preset_name::@9
  __b9:
    // [312] if((byte) render_preset_name::idx#10==(byte) 7) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #7
    beq __b2_from___b9
    jmp __b10
    // render_preset_name::@10
  __b10:
    // [313] if((byte) render_preset_name::idx#10==(byte) 8) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #8
    beq __b2_from___b10
    jmp __b11
    // render_preset_name::@11
  __b11:
    // [314] if((byte) render_preset_name::idx#10==(byte) 9) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #9
    beq __b2_from___b11
    jmp __b12
    // render_preset_name::@12
  __b12:
    // [315] if((byte) render_preset_name::idx#10==(byte) $a) goto render_preset_name::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #$a
    beq __b1_from___b12
    // [317] phi from render_preset_name render_preset_name::@12 to render_preset_name::@2 [phi:render_preset_name/render_preset_name::@12->render_preset_name::@2]
  __b2_from_render_preset_name:
  __b2_from___b12:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#1 [phi:render_preset_name/render_preset_name::@12->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_1
    sta.z name
    lda #>name_1
    sta.z name+1
    jmp __b2
    // [316] phi from render_preset_name::@12 to render_preset_name::@1 [phi:render_preset_name::@12->render_preset_name::@1]
  __b1_from___b12:
    jmp __b1
    // render_preset_name::@1
  __b1:
    // [317] phi from render_preset_name::@1 to render_preset_name::@2 [phi:render_preset_name::@1->render_preset_name::@2]
  __b2_from___b1:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#11 [phi:render_preset_name::@1->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_11
    sta.z name
    lda #>name_11
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@10 to render_preset_name::@2 [phi:render_preset_name::@10->render_preset_name::@2]
  __b2_from___b10:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#9 [phi:render_preset_name::@10->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_9
    sta.z name
    lda #>name_9
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@11 to render_preset_name::@2 [phi:render_preset_name::@11->render_preset_name::@2]
  __b2_from___b11:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#10 [phi:render_preset_name::@11->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_10
    sta.z name
    lda #>name_10
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@3 to render_preset_name::@2 [phi:render_preset_name::@3->render_preset_name::@2]
  __b2_from___b3:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#2 [phi:render_preset_name::@3->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_2
    sta.z name
    lda #>name_2
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@4 to render_preset_name::@2 [phi:render_preset_name::@4->render_preset_name::@2]
  __b2_from___b4:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#3 [phi:render_preset_name::@4->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_3
    sta.z name
    lda #>name_3
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@5 to render_preset_name::@2 [phi:render_preset_name::@5->render_preset_name::@2]
  __b2_from___b5:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#4 [phi:render_preset_name::@5->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_4
    sta.z name
    lda #>name_4
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@6 to render_preset_name::@2 [phi:render_preset_name::@6->render_preset_name::@2]
  __b2_from___b6:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#5 [phi:render_preset_name::@6->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_5
    sta.z name
    lda #>name_5
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@7 to render_preset_name::@2 [phi:render_preset_name::@7->render_preset_name::@2]
  __b2_from___b7:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#6 [phi:render_preset_name::@7->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_6
    sta.z name
    lda #>name_6
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@8 to render_preset_name::@2 [phi:render_preset_name::@8->render_preset_name::@2]
  __b2_from___b8:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#7 [phi:render_preset_name::@8->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_7
    sta.z name
    lda #>name_7
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@9 to render_preset_name::@2 [phi:render_preset_name::@9->render_preset_name::@2]
  __b2_from___b9:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#8 [phi:render_preset_name::@9->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_8
    sta.z name
    lda #>name_8
    sta.z name+1
    jmp __b2
    // render_preset_name::@2
  __b2:
    // [318] (byte*) print_str_at::str#1 ← (byte*) render_preset_name::name#13
    // [319] call print_str_at 
  // Render it
    // [321] phi from render_preset_name::@2 to print_str_at [phi:render_preset_name::@2->print_str_at]
  print_str_at_from___b2:
    jsr print_str_at
    jmp __breturn
    // render_preset_name::@return
  __breturn:
    // [320] return 
    rts
    name_1: .text "Standard Charset              "
    .byte 0
    name_2: .text "Extended Color Charset        "
    .byte 0
    name_3: .text "Standard Bitmap               "
    .byte 0
    name_4: .text "Multicolor Bitmap             "
    .byte 0
    name_5: .text "Hicolor Charset               "
    .byte 0
    name_6: .text "Hicolor Extended Color Charset"
    .byte 0
    name_7: .text "Twoplane Bitmap               "
    .byte 0
    name_8: .text "Chunky 8bpp                   "
    .byte 0
    name_9: .text "Sixs Fred                     "
    .byte 0
    name_10: .text "Sixs Fred 2                   "
    .byte 0
    name_11: .text "8bpp Pixel Cell               "
    .byte 0
}
  // print_str_at
// Print a string at a specific screen position
// print_str_at(byte* zp($10) str, byte* zp(5) at)
print_str_at: {
    .label at = 5
    .label str = $10
    // [322] phi from print_str_at to print_str_at::@1 [phi:print_str_at->print_str_at::@1]
  __b1_from_print_str_at:
    // [322] phi (byte*) print_str_at::at#2 = (const nomodify byte*) FORM_SCREEN+(byte)(number) $28*(number) 2+(byte) $a [phi:print_str_at->print_str_at::@1#0] -- pbuz1=pbuc1 
    lda #<FORM_SCREEN+$28*2+$a
    sta.z at
    lda #>FORM_SCREEN+$28*2+$a
    sta.z at+1
    // [322] phi (byte*) print_str_at::str#2 = (byte*) print_str_at::str#1 [phi:print_str_at->print_str_at::@1#1] -- register_copy 
    jmp __b1
    // print_str_at::@1
  __b1:
    // [323] if((byte) 0!=*((byte*) print_str_at::str#2)) goto print_str_at::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // print_str_at::@return
  __breturn:
    // [324] return 
    rts
    // print_str_at::@2
  __b2:
    // [325] *((byte*) print_str_at::at#2) ← *((byte*) print_str_at::str#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (at),y
    // [326] (byte*) print_str_at::at#0 ← ++ (byte*) print_str_at::at#2 -- pbuz1=_inc_pbuz1 
    inc.z at
    bne !+
    inc.z at+1
  !:
    // [327] (byte*) print_str_at::str#0 ← ++ (byte*) print_str_at::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [322] phi from print_str_at::@2 to print_str_at::@1 [phi:print_str_at::@2->print_str_at::@1]
  __b1_from___b2:
    // [322] phi (byte*) print_str_at::at#2 = (byte*) print_str_at::at#0 [phi:print_str_at::@2->print_str_at::@1#0] -- register_copy 
    // [322] phi (byte*) print_str_at::str#2 = (byte*) print_str_at::str#0 [phi:print_str_at::@2->print_str_at::@1#1] -- register_copy 
    jmp __b1
}
  // form_render_values
// Render all form values from the form_fields_val array
form_render_values: {
    // [329] phi from form_render_values to form_render_values::@1 [phi:form_render_values->form_render_values::@1]
  __b1_from_form_render_values:
    // [329] phi (byte) form_render_values::idx#2 = (byte) 0 [phi:form_render_values->form_render_values::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // form_render_values::@1
  __b1:
    // [330] if((byte) form_render_values::idx#2<(const byte) form_fields_cnt) goto form_render_values::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #form_fields_cnt
    bcc __b2
    jmp __breturn
    // form_render_values::@return
  __breturn:
    // [331] return 
    rts
    // form_render_values::@2
  __b2:
    // [332] (byte) form_field_ptr::field_idx#0 ← (byte) form_render_values::idx#2
    // [333] call form_field_ptr 
    // [336] phi from form_render_values::@2 to form_field_ptr [phi:form_render_values::@2->form_field_ptr]
  form_field_ptr_from___b2:
    // [336] phi (byte) form_field_ptr::field_idx#2 = (byte) form_field_ptr::field_idx#0 [phi:form_render_values::@2->form_field_ptr#0] -- register_copy 
    jsr form_field_ptr
    jmp __b3
    // form_render_values::@3
  __b3:
    // [334] *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) ← *((const to_nomodify byte*) print_hextab + *((const byte*) form_fields_val + (byte) form_render_values::idx#2)) -- pbuz1_derefidx_vbuz2=pbuc1_derefidx_(pbuc2_derefidx_vbuxx) 
    ldy form_fields_val,x
    lda print_hextab,y
    ldy.z form_field_ptr.x
    sta (form_field_ptr.line),y
    // [335] (byte) form_render_values::idx#1 ← ++ (byte) form_render_values::idx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [329] phi from form_render_values::@3 to form_render_values::@1 [phi:form_render_values::@3->form_render_values::@1]
  __b1_from___b3:
    // [329] phi (byte) form_render_values::idx#2 = (byte) form_render_values::idx#1 [phi:form_render_values::@3->form_render_values::@1#0] -- register_copy 
    jmp __b1
}
  // form_field_ptr
// Get the screen address of a form field
// field_idx is the index of the field to get the screen address for
// form_field_ptr(byte register(X) field_idx)
form_field_ptr: {
    .label line = $14
    .label x = $16
    .label return = $1d
    // [337] (byte) form_field_ptr::y#0 ← *((const byte*) form_fields_y + (byte) form_field_ptr::field_idx#2) -- vbuyy=pbuc1_derefidx_vbuxx 
    ldy form_fields_y,x
    // [338] (word) form_field_ptr::line#0 ← *((const byte*) form_line_hi + (byte) form_field_ptr::y#0) w= *((const byte*) form_line_lo + (byte) form_field_ptr::y#0) -- vwuz1=pbuc1_derefidx_vbuyy_word_pbuc2_derefidx_vbuyy 
    lda form_line_hi,y
    sta.z line+1
    lda form_line_lo,y
    sta.z line
    // [339] (byte) form_field_ptr::x#0 ← *((const byte*) form_fields_x + (byte) form_field_ptr::field_idx#2) -- vbuz1=pbuc1_derefidx_vbuxx 
    lda form_fields_x,x
    sta.z x
    // [340] (byte*) form_field_ptr::return#0 ← (byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0 -- pbuz1=pbuz2_plus_vbuz3 
    lda.z x
    clc
    adc.z line
    sta.z return
    lda #0
    adc.z line+1
    sta.z return+1
    jmp __breturn
    // form_field_ptr::@return
  __breturn:
    // [341] return 
    rts
}
  // apply_preset
// Apply a form value preset to the form values
// idx is the ID of the preset
// apply_preset(byte register(A) idx)
apply_preset: {
    .label preset = 7
    // [342] if((byte) apply_preset::idx#0==(byte) 0) goto apply_preset::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b2_from_apply_preset
    jmp __b3
    // apply_preset::@3
  __b3:
    // [343] if((byte) apply_preset::idx#0==(byte) 1) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #1
    beq __b2_from___b3
    jmp __b4
    // apply_preset::@4
  __b4:
    // [344] if((byte) apply_preset::idx#0==(byte) 2) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #2
    beq __b2_from___b4
    jmp __b5
    // apply_preset::@5
  __b5:
    // [345] if((byte) apply_preset::idx#0==(byte) 3) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #3
    beq __b2_from___b5
    jmp __b6
    // apply_preset::@6
  __b6:
    // [346] if((byte) apply_preset::idx#0==(byte) 4) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #4
    beq __b2_from___b6
    jmp __b7
    // apply_preset::@7
  __b7:
    // [347] if((byte) apply_preset::idx#0==(byte) 5) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #5
    beq __b2_from___b7
    jmp __b8
    // apply_preset::@8
  __b8:
    // [348] if((byte) apply_preset::idx#0==(byte) 6) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #6
    beq __b2_from___b8
    jmp __b9
    // apply_preset::@9
  __b9:
    // [349] if((byte) apply_preset::idx#0==(byte) 7) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #7
    beq __b2_from___b9
    jmp __b10
    // apply_preset::@10
  __b10:
    // [350] if((byte) apply_preset::idx#0==(byte) 8) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #8
    beq __b2_from___b10
    jmp __b11
    // apply_preset::@11
  __b11:
    // [351] if((byte) apply_preset::idx#0==(byte) 9) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #9
    beq __b2_from___b11
    jmp __b12
    // apply_preset::@12
  __b12:
    // [352] if((byte) apply_preset::idx#0==(byte) $a) goto apply_preset::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #$a
    beq __b1_from___b12
    // [354] phi from apply_preset apply_preset::@12 to apply_preset::@2 [phi:apply_preset/apply_preset::@12->apply_preset::@2]
  __b2_from_apply_preset:
  __b2_from___b12:
    // [354] phi (byte*) apply_preset::preset#15 = (const byte*) preset_stdchar [phi:apply_preset/apply_preset::@12->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_stdchar
    sta.z preset
    lda #>preset_stdchar
    sta.z preset+1
    jmp __b2
    // [353] phi from apply_preset::@12 to apply_preset::@1 [phi:apply_preset::@12->apply_preset::@1]
  __b1_from___b12:
    jmp __b1
    // apply_preset::@1
  __b1:
    // [354] phi from apply_preset::@1 to apply_preset::@2 [phi:apply_preset::@1->apply_preset::@2]
  __b2_from___b1:
    // [354] phi (byte*) apply_preset::preset#15 = (const byte*) preset_8bpppixelcell [phi:apply_preset::@1->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_8bpppixelcell
    sta.z preset
    lda #>preset_8bpppixelcell
    sta.z preset+1
    jmp __b2
    // [354] phi from apply_preset::@10 to apply_preset::@2 [phi:apply_preset::@10->apply_preset::@2]
  __b2_from___b10:
    // [354] phi (byte*) apply_preset::preset#15 = (const byte*) preset_sixsfred [phi:apply_preset::@10->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_sixsfred
    sta.z preset
    lda #>preset_sixsfred
    sta.z preset+1
    jmp __b2
    // [354] phi from apply_preset::@11 to apply_preset::@2 [phi:apply_preset::@11->apply_preset::@2]
  __b2_from___b11:
    // [354] phi (byte*) apply_preset::preset#15 = (const byte*) preset_sixsfred2 [phi:apply_preset::@11->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_sixsfred2
    sta.z preset
    lda #>preset_sixsfred2
    sta.z preset+1
    jmp __b2
    // [354] phi from apply_preset::@3 to apply_preset::@2 [phi:apply_preset::@3->apply_preset::@2]
  __b2_from___b3:
    // [354] phi (byte*) apply_preset::preset#15 = (const byte*) preset_ecmchar [phi:apply_preset::@3->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_ecmchar
    sta.z preset
    lda #>preset_ecmchar
    sta.z preset+1
    jmp __b2
    // [354] phi from apply_preset::@4 to apply_preset::@2 [phi:apply_preset::@4->apply_preset::@2]
  __b2_from___b4:
    // [354] phi (byte*) apply_preset::preset#15 = (const byte*) preset_stdbm [phi:apply_preset::@4->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_stdbm
    sta.z preset
    lda #>preset_stdbm
    sta.z preset+1
    jmp __b2
    // [354] phi from apply_preset::@5 to apply_preset::@2 [phi:apply_preset::@5->apply_preset::@2]
  __b2_from___b5:
    // [354] phi (byte*) apply_preset::preset#15 = (const byte*) preset_mcbm [phi:apply_preset::@5->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_mcbm
    sta.z preset
    lda #>preset_mcbm
    sta.z preset+1
    jmp __b2
    // [354] phi from apply_preset::@6 to apply_preset::@2 [phi:apply_preset::@6->apply_preset::@2]
  __b2_from___b6:
    // [354] phi (byte*) apply_preset::preset#15 = (const byte*) preset_hi_stdchar [phi:apply_preset::@6->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_hi_stdchar
    sta.z preset
    lda #>preset_hi_stdchar
    sta.z preset+1
    jmp __b2
    // [354] phi from apply_preset::@7 to apply_preset::@2 [phi:apply_preset::@7->apply_preset::@2]
  __b2_from___b7:
    // [354] phi (byte*) apply_preset::preset#15 = (const byte*) preset_hi_ecmchar [phi:apply_preset::@7->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_hi_ecmchar
    sta.z preset
    lda #>preset_hi_ecmchar
    sta.z preset+1
    jmp __b2
    // [354] phi from apply_preset::@8 to apply_preset::@2 [phi:apply_preset::@8->apply_preset::@2]
  __b2_from___b8:
    // [354] phi (byte*) apply_preset::preset#15 = (const byte*) preset_twoplane [phi:apply_preset::@8->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_twoplane
    sta.z preset
    lda #>preset_twoplane
    sta.z preset+1
    jmp __b2
    // [354] phi from apply_preset::@9 to apply_preset::@2 [phi:apply_preset::@9->apply_preset::@2]
  __b2_from___b9:
    // [354] phi (byte*) apply_preset::preset#15 = (const byte*) preset_chunky [phi:apply_preset::@9->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_chunky
    sta.z preset
    lda #>preset_chunky
    sta.z preset+1
    jmp __b2
    // apply_preset::@2
  __b2:
    // [355] phi from apply_preset::@2 to apply_preset::@13 [phi:apply_preset::@2->apply_preset::@13]
  __b13_from___b2:
    // [355] phi (byte) apply_preset::i#2 = (byte) 0 [phi:apply_preset::@2->apply_preset::@13#0] -- vbuyy=vbuc1 
    ldy #0
    jmp __b13
  // Copy preset values into the fields
    // apply_preset::@13
  __b13:
    // [356] if((byte) apply_preset::i#2!=(const byte) form_fields_cnt) goto apply_preset::@14 -- vbuyy_neq_vbuc1_then_la1 
    cpy #form_fields_cnt
    bne __b14
    jmp __breturn
    // apply_preset::@return
  __breturn:
    // [357] return 
    rts
    // apply_preset::@14
  __b14:
    // [358] *((const byte*) form_fields_val + (byte) apply_preset::i#2) ← *((byte*) apply_preset::preset#15 + (byte) apply_preset::i#2) -- pbuc1_derefidx_vbuyy=pbuz1_derefidx_vbuyy 
    lda (preset),y
    sta form_fields_val,y
    // [359] (byte) apply_preset::i#1 ← ++ (byte) apply_preset::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [355] phi from apply_preset::@14 to apply_preset::@13 [phi:apply_preset::@14->apply_preset::@13]
  __b13_from___b14:
    // [355] phi (byte) apply_preset::i#2 = (byte) apply_preset::i#1 [phi:apply_preset::@14->apply_preset::@13#0] -- register_copy 
    jmp __b13
}
  // form_control
// Reads keyboard and allows the user to navigate and change the fields of the form
// Returns 0 if space is not pressed, non-0 if space is pressed
form_control: {
    .label field = $1d
    // [360] (byte) form_field_ptr::field_idx#1 ← (byte) form_field_idx#28 -- vbuxx=vbuz1 
    ldx.z form_field_idx
    // [361] call form_field_ptr 
    // [336] phi from form_control to form_field_ptr [phi:form_control->form_field_ptr]
  form_field_ptr_from_form_control:
    // [336] phi (byte) form_field_ptr::field_idx#2 = (byte) form_field_ptr::field_idx#1 [phi:form_control->form_field_ptr#0] -- register_copy 
    jsr form_field_ptr
    // [362] (byte*) form_field_ptr::return#3 ← (byte*) form_field_ptr::return#0
    jmp __b18
    // form_control::@18
  __b18:
    // [363] (byte*) form_control::field#0 ← (byte*) form_field_ptr::return#3
    // [364] (signed byte) form_cursor_count#5 ← -- (signed byte) form_cursor_count#21 -- vbsz1=_dec_vbsz1 
    dec.z form_cursor_count
    // [365] if((signed byte) form_cursor_count#5>=(signed byte) 0) goto form_control::@21 -- vbsz1_ge_0_then_la1 
    lda.z form_cursor_count
    cmp #0
    bpl __b21_from___b18
    // [367] phi from form_control::@18 to form_control::@1 [phi:form_control::@18->form_control::@1]
  __b1_from___b18:
    // [367] phi (signed byte) form_cursor_count#15 = (const nomodify signed byte) FORM_CURSOR_BLINK [phi:form_control::@18->form_control::@1#0] -- vbsz1=vbsc1 
    lda #FORM_CURSOR_BLINK
    sta.z form_cursor_count
    jmp __b1
    // [366] phi from form_control::@18 to form_control::@21 [phi:form_control::@18->form_control::@21]
  __b21_from___b18:
    jmp __b21
    // form_control::@21
  __b21:
    // [367] phi from form_control::@21 to form_control::@1 [phi:form_control::@21->form_control::@1]
  __b1_from___b21:
    // [367] phi (signed byte) form_cursor_count#15 = (signed byte) form_cursor_count#5 [phi:form_control::@21->form_control::@1#0] -- register_copy 
    jmp __b1
    // form_control::@1
  __b1:
    // [368] if((signed byte) form_cursor_count#15<(const nomodify signed byte) FORM_CURSOR_BLINK/(signed byte) 2) goto form_control::@2 -- vbsz1_lt_vbsc1_then_la1 
    lda.z form_cursor_count
    sec
    sbc #FORM_CURSOR_BLINK/2
    bvc !+
    eor #$80
  !:
    bmi __b2
    jmp __b7
    // form_control::@7
  __b7:
    // [369] (byte~) form_control::$12 ← *((byte*) form_control::field#0) & (byte) $7f -- vbuaa=_deref_pbuz1_band_vbuc1 
    lda #$7f
    ldy #0
    and (field),y
    // [370] *((byte*) form_control::field#0) ← (byte~) form_control::$12 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (field),y
    // [371] phi from form_control::@2 form_control::@7 to form_control::@3 [phi:form_control::@2/form_control::@7->form_control::@3]
  __b3_from___b2:
  __b3_from___b7:
    jmp __b3
    // form_control::@3
  __b3:
    // [372] call keyboard_event_scan 
  // Scan the keyboard
    // [157] phi from form_control::@3 to keyboard_event_scan [phi:form_control::@3->keyboard_event_scan]
  keyboard_event_scan_from___b3:
    // [157] phi (byte) keyboard_events_size#97 = (byte) keyboard_events_size#47 [phi:form_control::@3->keyboard_event_scan#0] -- register_copy 
    jsr keyboard_event_scan
    // [373] phi from form_control::@3 to form_control::@19 [phi:form_control::@3->form_control::@19]
  __b19_from___b3:
    jmp __b19
    // form_control::@19
  __b19:
    // [374] call keyboard_event_get 
    jsr keyboard_event_get
    // [375] (byte) keyboard_event_get::return#4 ← (byte) keyboard_event_get::return#2
    jmp __b20
    // form_control::@20
  __b20:
    // [376] (byte) form_control::key_event#0 ← (byte) keyboard_event_get::return#4
    // [377] if((byte) form_control::key_event#0!=(const nomodify byte) KEY_CRSR_DOWN) goto form_control::@4 -- vbuaa_neq_vbuc1_then_la1 
    cmp #KEY_CRSR_DOWN
    bne __b4
    jmp __b8
    // form_control::@8
  __b8:
    // [378] (byte~) form_control::$14 ← *((byte*) form_control::field#0) & (byte) $7f -- vbuaa=_deref_pbuz1_band_vbuc1 
    lda #$7f
    ldy #0
    and (field),y
    // [379] *((byte*) form_control::field#0) ← (byte~) form_control::$14 -- _deref_pbuz1=vbuaa 
    // Unblink the cursor
    ldy #0
    sta (field),y
    // [380] (byte~) form_control::$15 ← (byte) keyboard_modifiers#21 & (const nomodify byte) KEY_MODIFIER_SHIFT -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #KEY_MODIFIER_SHIFT
    // [381] if((byte~) form_control::$15==(byte) 0) goto form_control::@13 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b13
    jmp __b9
    // form_control::@9
  __b9:
    // [382] (byte) form_field_idx#6 ← -- (byte) form_field_idx#28 -- vbuz1=_dec_vbuz1 
    dec.z form_field_idx
    // [383] if((byte) form_field_idx#6!=(byte) $ff) goto form_control::@22 -- vbuz1_neq_vbuc1_then_la1 
    lda #$ff
    cmp.z form_field_idx
    bne __b22_from___b9
    // [385] phi from form_control::@9 to form_control::@14 [phi:form_control::@9->form_control::@14]
  __b14_from___b9:
    // [385] phi (byte) form_field_idx#31 = (const byte) form_fields_cnt-(byte) 1 [phi:form_control::@9->form_control::@14#0] -- vbuz1=vbuc1 
    lda #form_fields_cnt-1
    sta.z form_field_idx
    jmp __b14
    // [384] phi from form_control::@9 to form_control::@22 [phi:form_control::@9->form_control::@22]
  __b22_from___b9:
    jmp __b22
    // form_control::@22
  __b22:
    // [385] phi from form_control::@22 form_control::@23 to form_control::@14 [phi:form_control::@22/form_control::@23->form_control::@14]
  __b14_from___b22:
  __b14_from___b23:
    // [385] phi (byte) form_field_idx#31 = (byte) form_field_idx#6 [phi:form_control::@22/form_control::@23->form_control::@14#0] -- register_copy 
    jmp __b14
    // form_control::@14
  __b14:
    // [386] phi from form_control::@14 to form_control::@return [phi:form_control::@14->form_control::@return]
  __breturn_from___b14:
    // [386] phi (byte) form_field_idx#18 = (byte) form_field_idx#31 [phi:form_control::@14->form_control::@return#0] -- register_copy 
    // [386] phi (signed byte) form_cursor_count#16 = (const nomodify signed byte) FORM_CURSOR_BLINK/(signed byte) 2 [phi:form_control::@14->form_control::@return#1] -- vbsz1=vbsc1 
    lda #FORM_CURSOR_BLINK/2
    sta.z form_cursor_count
    // [386] phi (byte) form_control::return#2 = (byte) 0 [phi:form_control::@14->form_control::@return#2] -- vbuxx=vbuc1 
    ldx #0
    jmp __breturn
    // form_control::@return
  __breturn:
    // [387] return 
    rts
    // form_control::@13
  __b13:
    // [388] (byte) form_field_idx#5 ← ++ (byte) form_field_idx#28 -- vbuz1=_inc_vbuz1 
    inc.z form_field_idx
    // [389] if((byte) form_field_idx#5!=(const byte) form_fields_cnt) goto form_control::@23 -- vbuz1_neq_vbuc1_then_la1 
    lda #form_fields_cnt
    cmp.z form_field_idx
    bne __b23_from___b13
    // [385] phi from form_control::@13 to form_control::@14 [phi:form_control::@13->form_control::@14]
  __b14_from___b13:
    // [385] phi (byte) form_field_idx#31 = (byte) 0 [phi:form_control::@13->form_control::@14#0] -- vbuz1=vbuc1 
    lda #0
    sta.z form_field_idx
    jmp __b14
    // [390] phi from form_control::@13 to form_control::@23 [phi:form_control::@13->form_control::@23]
  __b23_from___b13:
    jmp __b23
    // form_control::@23
  __b23:
    jmp __b14_from___b23
    // form_control::@4
  __b4:
    // [391] if((byte) form_control::key_event#0!=(const nomodify byte) KEY_CRSR_RIGHT) goto form_control::@5 -- vbuaa_neq_vbuc1_then_la1 
    cmp #KEY_CRSR_RIGHT
    bne __b5
    jmp __b10
    // form_control::@10
  __b10:
    // [392] (byte~) form_control::$22 ← (byte) keyboard_modifiers#21 & (const nomodify byte) KEY_MODIFIER_SHIFT -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #KEY_MODIFIER_SHIFT
    // [393] if((byte~) form_control::$22==(byte) 0) goto form_control::@15 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b15
    jmp __b11
    // form_control::@11
  __b11:
    // [394] *((const byte*) form_fields_val + (byte) form_field_idx#28) ← -- *((const byte*) form_fields_val + (byte) form_field_idx#28) -- pbuc1_derefidx_vbuz1=_dec_pbuc1_derefidx_vbuz1 
    ldx.z form_field_idx
    dec form_fields_val,x
    // [395] if(*((const byte*) form_fields_val + (byte) form_field_idx#28)!=(byte) $ff) goto form_control::@16 -- pbuc1_derefidx_vbuz1_neq_vbuc2_then_la1 
    lda #$ff
    ldy.z form_field_idx
    cmp form_fields_val,y
    bne __b16
    jmp __b12
    // form_control::@12
  __b12:
    // [396] *((const byte*) form_fields_val + (byte) form_field_idx#28) ← *((const byte*) form_fields_max + (byte) form_field_idx#28) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz1 
    ldy.z form_field_idx
    lda form_fields_max,y
    sta form_fields_val,y
    jmp __b16
    // form_control::@16
  __b16:
    // [397] *((byte*) form_control::field#0) ← *((const to_nomodify byte*) print_hextab + *((const byte*) form_fields_val + (byte) form_field_idx#28)) -- _deref_pbuz1=pbuc1_derefidx_(pbuc2_derefidx_vbuz2) 
    // Render field value
    ldx.z form_field_idx
    ldy form_fields_val,x
    lda print_hextab,y
    ldy #0
    sta (field),y
    // [386] phi from form_control::@16 form_control::@6 to form_control::@return [phi:form_control::@16/form_control::@6->form_control::@return]
  __breturn_from___b16:
  __breturn_from___b6:
    // [386] phi (byte) form_field_idx#18 = (byte) form_field_idx#28 [phi:form_control::@16/form_control::@6->form_control::@return#0] -- register_copy 
    // [386] phi (signed byte) form_cursor_count#16 = (signed byte) form_cursor_count#15 [phi:form_control::@16/form_control::@6->form_control::@return#1] -- register_copy 
    // [386] phi (byte) form_control::return#2 = (byte) 0 [phi:form_control::@16/form_control::@6->form_control::@return#2] -- vbuxx=vbuc1 
    ldx #0
    jmp __breturn
    // form_control::@15
  __b15:
    // [398] *((const byte*) form_fields_val + (byte) form_field_idx#28) ← ++ *((const byte*) form_fields_val + (byte) form_field_idx#28) -- pbuc1_derefidx_vbuz1=_inc_pbuc1_derefidx_vbuz1 
    ldx.z form_field_idx
    inc form_fields_val,x
    // [399] if(*((const byte*) form_fields_val + (byte) form_field_idx#28)<=*((const byte*) form_fields_max + (byte) form_field_idx#28)) goto form_control::@16 -- pbuc1_derefidx_vbuz1_le_pbuc2_derefidx_vbuz1_then_la1 
    ldy.z form_field_idx
    lda form_fields_max,y
    cmp form_fields_val,y
    bcs __b16
    jmp __b17
    // form_control::@17
  __b17:
    // [400] *((const byte*) form_fields_val + (byte) form_field_idx#28) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy.z form_field_idx
    sta form_fields_val,y
    jmp __b16
    // form_control::@5
  __b5:
    // [401] if((byte) form_control::key_event#0!=(const nomodify byte) KEY_SPACE) goto form_control::@6 -- vbuaa_neq_vbuc1_then_la1 
    cmp #KEY_SPACE
    bne __b6_from___b5
    // [386] phi from form_control::@5 to form_control::@return [phi:form_control::@5->form_control::@return]
  __breturn_from___b5:
    // [386] phi (byte) form_field_idx#18 = (byte) form_field_idx#28 [phi:form_control::@5->form_control::@return#0] -- register_copy 
    // [386] phi (signed byte) form_cursor_count#16 = (signed byte) form_cursor_count#15 [phi:form_control::@5->form_control::@return#1] -- register_copy 
    // [386] phi (byte) form_control::return#2 = (byte) $ff [phi:form_control::@5->form_control::@return#2] -- vbuxx=vbuc1 
    ldx #$ff
    jmp __breturn
    // [402] phi from form_control::@5 to form_control::@6 [phi:form_control::@5->form_control::@6]
  __b6_from___b5:
    jmp __b6
    // form_control::@6
  __b6:
    jmp __breturn_from___b6
    // form_control::@2
  __b2:
    // [403] (byte~) form_control::$13 ← *((byte*) form_control::field#0) | (byte) $80 -- vbuaa=_deref_pbuz1_bor_vbuc1 
    lda #$80
    ldy #0
    ora (field),y
    // [404] *((byte*) form_control::field#0) ← (byte~) form_control::$13 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (field),y
    jmp __b3_from___b2
}
  // form_set_screen
// Set the screen to use for the form.
// screen is the start address of the screen to use
form_set_screen: {
    .label line = $10
    // [406] phi from form_set_screen to form_set_screen::@1 [phi:form_set_screen->form_set_screen::@1]
  __b1_from_form_set_screen:
    // [406] phi (byte) form_set_screen::y#2 = (byte) 0 [phi:form_set_screen->form_set_screen::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [406] phi (byte*) form_set_screen::line#2 = (const nomodify byte*) FORM_SCREEN [phi:form_set_screen->form_set_screen::@1#1] -- pbuz1=pbuc1 
    lda #<FORM_SCREEN
    sta.z line
    lda #>FORM_SCREEN
    sta.z line+1
    jmp __b1
    // [406] phi from form_set_screen::@1 to form_set_screen::@1 [phi:form_set_screen::@1->form_set_screen::@1]
  __b1_from___b1:
    // [406] phi (byte) form_set_screen::y#2 = (byte) form_set_screen::y#1 [phi:form_set_screen::@1->form_set_screen::@1#0] -- register_copy 
    // [406] phi (byte*) form_set_screen::line#2 = (byte*) form_set_screen::line#1 [phi:form_set_screen::@1->form_set_screen::@1#1] -- register_copy 
    jmp __b1
    // form_set_screen::@1
  __b1:
    // [407] (byte~) form_set_screen::$0 ← < (byte*) form_set_screen::line#2 -- vbuaa=_lo_pbuz1 
    lda.z line
    // [408] *((const byte*) form_line_lo + (byte) form_set_screen::y#2) ← (byte~) form_set_screen::$0 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta form_line_lo,x
    // [409] (byte~) form_set_screen::$1 ← > (byte*) form_set_screen::line#2 -- vbuaa=_hi_pbuz1 
    lda.z line+1
    // [410] *((const byte*) form_line_hi + (byte) form_set_screen::y#2) ← (byte~) form_set_screen::$1 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta form_line_hi,x
    // [411] (byte*) form_set_screen::line#1 ← (byte*) form_set_screen::line#2 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line
    sta.z line
    bcc !+
    inc.z line+1
  !:
    // [412] (byte) form_set_screen::y#1 ← ++ (byte) form_set_screen::y#2 -- vbuxx=_inc_vbuxx 
    inx
    // [413] if((byte) form_set_screen::y#1!=(byte) $19) goto form_set_screen::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$19
    bne __b1_from___b1
    jmp __breturn
    // form_set_screen::@return
  __breturn:
    // [414] return 
    rts
}
  // print_str_lines
// Print a number of zero-terminated strings, each followed by a newline.
// The sequence of lines is terminated by another zero.
// print_str_lines(byte* zp($10) str)
print_str_lines: {
    .label str = $10
    // [416] (byte*) print_char_cursor#72 ← (byte*) print_set_screen::screen#2 -- pbuz1=pbuz2 
    lda.z print_set_screen.screen
    sta.z print_char_cursor
    lda.z print_set_screen.screen+1
    sta.z print_char_cursor+1
    // [417] phi from print_str_lines print_str_lines::@6 to print_str_lines::@1 [phi:print_str_lines/print_str_lines::@6->print_str_lines::@1]
  __b1_from_print_str_lines:
  __b1_from___b6:
    // [417] phi (byte*) print_line_cursor#2 = (byte*) print_set_screen::screen#2 [phi:print_str_lines/print_str_lines::@6->print_str_lines::@1#0] -- register_copy 
    // [417] phi (byte*) print_char_cursor#24 = (byte*) print_char_cursor#72 [phi:print_str_lines/print_str_lines::@6->print_str_lines::@1#1] -- register_copy 
    // [417] phi (byte*) print_str_lines::str#3 = (byte*) print_str_lines::str#5 [phi:print_str_lines/print_str_lines::@6->print_str_lines::@1#2] -- register_copy 
    jmp __b1
    // print_str_lines::@1
  __b1:
    // [418] if((byte) 0!=*((byte*) print_str_lines::str#3)) goto print_str_lines::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2_from___b1
    jmp __breturn
    // print_str_lines::@return
  __breturn:
    // [419] return 
    rts
    // [420] phi from print_str_lines::@1 print_str_lines::@3 to print_str_lines::@2 [phi:print_str_lines::@1/print_str_lines::@3->print_str_lines::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [420] phi (byte*) print_char_cursor#41 = (byte*) print_char_cursor#24 [phi:print_str_lines::@1/print_str_lines::@3->print_str_lines::@2#0] -- register_copy 
    // [420] phi (byte*) print_str_lines::str#4 = (byte*) print_str_lines::str#3 [phi:print_str_lines::@1/print_str_lines::@3->print_str_lines::@2#1] -- register_copy 
    jmp __b2
    // print_str_lines::@2
  __b2:
    // [421] (byte) print_str_lines::ch#0 ← *((byte*) print_str_lines::str#4) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
    // [422] (byte*) print_str_lines::str#0 ← ++ (byte*) print_str_lines::str#4 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [423] if((byte) 0==(byte) print_str_lines::ch#0) goto print_str_lines::@3 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq __b3_from___b2
    jmp __b4
    // print_str_lines::@4
  __b4:
    // [424] (byte) print_char::ch#0 ← (byte) print_str_lines::ch#0
    // [425] call print_char 
    jsr print_char
    // [426] phi from print_str_lines::@2 print_str_lines::@4 to print_str_lines::@3 [phi:print_str_lines::@2/print_str_lines::@4->print_str_lines::@3]
  __b3_from___b2:
  __b3_from___b4:
    // [426] phi (byte*) print_char_cursor#42 = (byte*) print_char_cursor#41 [phi:print_str_lines::@2/print_str_lines::@4->print_str_lines::@3#0] -- register_copy 
    jmp __b3
    // print_str_lines::@3
  __b3:
    // [427] if((byte) 0!=(byte) print_str_lines::ch#0) goto print_str_lines::@2 -- vbuc1_neq_vbuaa_then_la1 
    cmp #0
    bne __b2_from___b3
    // [428] phi from print_str_lines::@3 to print_str_lines::@5 [phi:print_str_lines::@3->print_str_lines::@5]
  __b5_from___b3:
    jmp __b5
    // print_str_lines::@5
  __b5:
    // [429] call print_ln 
    // [431] phi from print_str_lines::@5 to print_ln [phi:print_str_lines::@5->print_ln]
  print_ln_from___b5:
    jsr print_ln
    jmp __b6
    // print_str_lines::@6
  __b6:
    // [430] (byte*) print_char_cursor#73 ← (byte*) print_line_cursor#22 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    jmp __b1_from___b6
}
  // print_ln
// Print a newline
print_ln: {
    // [432] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  __b1_from_print_ln:
  __b1_from___b1:
    // [432] phi (byte*) print_line_cursor#21 = (byte*) print_line_cursor#2 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp __b1
    // print_ln::@1
  __b1:
    // [433] (byte*) print_line_cursor#22 ← (byte*) print_line_cursor#21 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // [434] if((byte*) print_line_cursor#22<(byte*) print_char_cursor#42) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1_from___b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1_from___b1
  !:
    jmp __breturn
    // print_ln::@return
  __breturn:
    // [435] return 
    rts
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // [436] *((byte*) print_char_cursor#41) ← (byte) print_char::ch#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // [437] (byte*) print_char_cursor#28 ← ++ (byte*) print_char_cursor#41 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp __breturn
    // print_char::@return
  __breturn:
    // [438] return 
    rts
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // [439] (void*) memset::str#0 ← (void*)(byte*) print_set_screen::screen#2 -- pvoz1=pvoz2 
    lda.z print_set_screen.screen
    sta.z memset.str
    lda.z print_set_screen.screen+1
    sta.z memset.str+1
    // [440] call memset 
    // [442] phi from print_cls to memset [phi:print_cls->memset]
  memset_from_print_cls:
    jsr memset
    jmp __breturn
    // print_cls::@return
  __breturn:
    // [441] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp($10) str)
memset: {
    .const c = ' '
    .const num = $3e8
    .label end = $1f
    .label dst = $10
    .label str = $10
    jmp __b1
    // memset::@1
  __b1:
    // [443] (byte*) memset::end#0 ← (byte*)(void*) memset::str#0 + (const word) memset::num#0 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z str
    clc
    adc #<num
    sta.z end
    lda.z str+1
    adc #>num
    sta.z end+1
    // [444] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#0
    // [445] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [445] phi (byte*) memset::dst#2 = (byte*) memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    jmp __b2
    // memset::@2
  __b2:
    // [446] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    jmp __breturn
    // memset::@return
  __breturn:
    // [447] return 
    rts
    // memset::@3
  __b3:
    // [448] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // [449] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2_from___b3
}
  // print_set_screen
// Set the screen to print on. Also resets current line/char cursor.
// print_set_screen(byte* zp(7) screen)
print_set_screen: {
    .label screen = 7
    jmp __breturn
    // print_set_screen::@return
  __breturn:
    // [451] return 
    rts
}
  // gfx_init
// Initialize the different graphics in the memory
gfx_init: {
    // [453] call gfx_init_screen0 
    // [849] phi from gfx_init to gfx_init_screen0 [phi:gfx_init->gfx_init_screen0]
  gfx_init_screen0_from_gfx_init:
    jsr gfx_init_screen0
    // [454] phi from gfx_init to gfx_init::@1 [phi:gfx_init->gfx_init::@1]
  __b1_from_gfx_init:
    jmp __b1
    // gfx_init::@1
  __b1:
    // [455] call gfx_init_screen1 
    // [837] phi from gfx_init::@1 to gfx_init_screen1 [phi:gfx_init::@1->gfx_init_screen1]
  gfx_init_screen1_from___b1:
    jsr gfx_init_screen1
    // [456] phi from gfx_init::@1 to gfx_init::@2 [phi:gfx_init::@1->gfx_init::@2]
  __b2_from___b1:
    jmp __b2
    // gfx_init::@2
  __b2:
    // [457] call gfx_init_screen2 
    // [822] phi from gfx_init::@2 to gfx_init_screen2 [phi:gfx_init::@2->gfx_init_screen2]
  gfx_init_screen2_from___b2:
    jsr gfx_init_screen2
    // [458] phi from gfx_init::@2 to gfx_init::@3 [phi:gfx_init::@2->gfx_init::@3]
  __b3_from___b2:
    jmp __b3
    // gfx_init::@3
  __b3:
    // [459] call gfx_init_screen3 
    // [808] phi from gfx_init::@3 to gfx_init_screen3 [phi:gfx_init::@3->gfx_init_screen3]
  gfx_init_screen3_from___b3:
    jsr gfx_init_screen3
    // [460] phi from gfx_init::@3 to gfx_init::@4 [phi:gfx_init::@3->gfx_init::@4]
  __b4_from___b3:
    jmp __b4
    // gfx_init::@4
  __b4:
    // [461] call gfx_init_screen4 
    // [798] phi from gfx_init::@4 to gfx_init_screen4 [phi:gfx_init::@4->gfx_init_screen4]
  gfx_init_screen4_from___b4:
    jsr gfx_init_screen4
    // [462] phi from gfx_init::@4 to gfx_init::@5 [phi:gfx_init::@4->gfx_init::@5]
  __b5_from___b4:
    jmp __b5
    // gfx_init::@5
  __b5:
    // [463] call gfx_init_charset 
    jsr gfx_init_charset
    // [464] phi from gfx_init::@5 to gfx_init::@6 [phi:gfx_init::@5->gfx_init::@6]
  __b6_from___b5:
    jmp __b6
    // gfx_init::@6
  __b6:
    // [465] call gfx_init_vic_bitmap 
    // [608] phi from gfx_init::@6 to gfx_init_vic_bitmap [phi:gfx_init::@6->gfx_init_vic_bitmap]
  gfx_init_vic_bitmap_from___b6:
    jsr gfx_init_vic_bitmap
    // [466] phi from gfx_init::@6 to gfx_init::@7 [phi:gfx_init::@6->gfx_init::@7]
  __b7_from___b6:
    jmp __b7
    // gfx_init::@7
  __b7:
    // [467] call gfx_init_plane_8bppchunky 
    // [588] phi from gfx_init::@7 to gfx_init_plane_8bppchunky [phi:gfx_init::@7->gfx_init_plane_8bppchunky]
  gfx_init_plane_8bppchunky_from___b7:
    jsr gfx_init_plane_8bppchunky
    // [468] phi from gfx_init::@7 to gfx_init::@8 [phi:gfx_init::@7->gfx_init::@8]
  __b8_from___b7:
    jmp __b8
    // gfx_init::@8
  __b8:
    // [469] call gfx_init_plane_charset8 
    // [563] phi from gfx_init::@8 to gfx_init_plane_charset8 [phi:gfx_init::@8->gfx_init_plane_charset8]
  gfx_init_plane_charset8_from___b8:
    jsr gfx_init_plane_charset8
    // [470] phi from gfx_init::@8 to gfx_init::@9 [phi:gfx_init::@8->gfx_init::@9]
  __b9_from___b8:
    jmp __b9
    // gfx_init::@9
  __b9:
    // [471] call gfx_init_plane_horisontal 
    // [545] phi from gfx_init::@9 to gfx_init_plane_horisontal [phi:gfx_init::@9->gfx_init_plane_horisontal]
  gfx_init_plane_horisontal_from___b9:
    jsr gfx_init_plane_horisontal
    // [472] phi from gfx_init::@9 to gfx_init::@10 [phi:gfx_init::@9->gfx_init::@10]
  __b10_from___b9:
    jmp __b10
    // gfx_init::@10
  __b10:
    // [473] call gfx_init_plane_vertical 
    // [532] phi from gfx_init::@10 to gfx_init_plane_vertical [phi:gfx_init::@10->gfx_init_plane_vertical]
  gfx_init_plane_vertical_from___b10:
    jsr gfx_init_plane_vertical
    // [474] phi from gfx_init::@10 to gfx_init::@11 [phi:gfx_init::@10->gfx_init::@11]
  __b11_from___b10:
    jmp __b11
    // gfx_init::@11
  __b11:
    // [475] call gfx_init_plane_horisontal2 
    // [517] phi from gfx_init::@11 to gfx_init_plane_horisontal2 [phi:gfx_init::@11->gfx_init_plane_horisontal2]
  gfx_init_plane_horisontal2_from___b11:
    jsr gfx_init_plane_horisontal2
    // [476] phi from gfx_init::@11 to gfx_init::@12 [phi:gfx_init::@11->gfx_init::@12]
  __b12_from___b11:
    jmp __b12
    // gfx_init::@12
  __b12:
    // [477] call gfx_init_plane_vertical2 
    // [514] phi from gfx_init::@12 to gfx_init_plane_vertical2 [phi:gfx_init::@12->gfx_init_plane_vertical2]
  gfx_init_plane_vertical2_from___b12:
    jsr gfx_init_plane_vertical2
    // [478] phi from gfx_init::@12 to gfx_init::@13 [phi:gfx_init::@12->gfx_init::@13]
  __b13_from___b12:
    jmp __b13
    // gfx_init::@13
  __b13:
    // [479] call gfx_init_plane_blank 
    // [511] phi from gfx_init::@13 to gfx_init_plane_blank [phi:gfx_init::@13->gfx_init_plane_blank]
  gfx_init_plane_blank_from___b13:
    jsr gfx_init_plane_blank
    // [480] phi from gfx_init::@13 to gfx_init::@14 [phi:gfx_init::@13->gfx_init::@14]
  __b14_from___b13:
    jmp __b14
    // gfx_init::@14
  __b14:
    // [481] call gfx_init_plane_full 
    // [483] phi from gfx_init::@14 to gfx_init_plane_full [phi:gfx_init::@14->gfx_init_plane_full]
  gfx_init_plane_full_from___b14:
    jsr gfx_init_plane_full
    jmp __breturn
    // gfx_init::@return
  __breturn:
    // [482] return 
    rts
}
  // gfx_init_plane_full
// Initialize Plane with all pixels
gfx_init_plane_full: {
    // [484] call gfx_init_plane_fill 
    // [486] phi from gfx_init_plane_full to gfx_init_plane_fill [phi:gfx_init_plane_full->gfx_init_plane_fill]
  gfx_init_plane_fill_from_gfx_init_plane_full:
    // [486] phi (byte) gfx_init_plane_fill::fill#6 = (byte) $ff [phi:gfx_init_plane_full->gfx_init_plane_fill#0] -- vbuz1=vbuc1 
    lda #$ff
    sta.z gfx_init_plane_fill.fill
    // [486] phi (dword) gfx_init_plane_fill::plane_addr#3 = (const nomodify dword) PLANE_FULL [phi:gfx_init_plane_full->gfx_init_plane_fill#1] -- vduz1=vduc1 
    lda #<PLANE_FULL
    sta.z gfx_init_plane_fill.plane_addr
    lda #>PLANE_FULL
    sta.z gfx_init_plane_fill.plane_addr+1
    lda #<PLANE_FULL>>$10
    sta.z gfx_init_plane_fill.plane_addr+2
    lda #>PLANE_FULL>>$10
    sta.z gfx_init_plane_fill.plane_addr+3
    jsr gfx_init_plane_fill
    jmp __breturn
    // gfx_init_plane_full::@return
  __breturn:
    // [485] return 
    rts
}
  // gfx_init_plane_fill
// Initialize 320*200 1bpp pixel ($2000) plane with identical bytes
// gfx_init_plane_fill(dword zp(9) plane_addr, byte zp($e) fill)
gfx_init_plane_fill: {
    .label __0 = $17
    .label __1 = $1b
    .label __4 = $10
    .label __5 = $10
    .label gfxb = $10
    .label by = $22
    .label plane_addr = 9
    .label fill = $e
    // [487] (dword~) gfx_init_plane_fill::$0 ← (dword) gfx_init_plane_fill::plane_addr#3 << (byte) 2 -- vduz1=vduz2_rol_2 
    lda.z plane_addr
    asl
    sta.z __0
    lda.z plane_addr+1
    rol
    sta.z __0+1
    lda.z plane_addr+2
    rol
    sta.z __0+2
    lda.z plane_addr+3
    rol
    sta.z __0+3
    asl.z __0
    rol.z __0+1
    rol.z __0+2
    rol.z __0+3
    // [488] (word~) gfx_init_plane_fill::$1 ← > (dword~) gfx_init_plane_fill::$0 -- vwuz1=_hi_vduz2 
    lda.z __0+2
    sta.z __1
    lda.z __0+3
    sta.z __1+1
    // [489] (byte) gfx_init_plane_fill::gfxbCpuBank#0 ← < (word~) gfx_init_plane_fill::$1 -- vbuaa=_lo_vwuz1 
    lda.z __1
    // [490] (byte) dtvSetCpuBankSegment1::cpuBankIdx#11 ← (byte) gfx_init_plane_fill::gfxbCpuBank#0
    // [491] call dtvSetCpuBankSegment1 
    // [507] phi from gfx_init_plane_fill to dtvSetCpuBankSegment1 [phi:gfx_init_plane_fill->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_gfx_init_plane_fill:
    // [507] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte) dtvSetCpuBankSegment1::cpuBankIdx#11 [phi:gfx_init_plane_fill->dtvSetCpuBankSegment1#0] -- register_copy 
    jsr dtvSetCpuBankSegment1
    jmp __b5
    // gfx_init_plane_fill::@5
  __b5:
    // [492] (word~) gfx_init_plane_fill::$4 ← < (dword) gfx_init_plane_fill::plane_addr#3 -- vwuz1=_lo_vduz2 
    lda.z plane_addr
    sta.z __4
    lda.z plane_addr+1
    sta.z __4+1
    // [493] (word~) gfx_init_plane_fill::$5 ← (word~) gfx_init_plane_fill::$4 & (word) $3fff -- vwuz1=vwuz1_band_vwuc1 
    lda.z __5
    and #<$3fff
    sta.z __5
    lda.z __5+1
    and #>$3fff
    sta.z __5+1
    // [494] (word) gfx_init_plane_fill::gfxb#0 ← (word) $4000 + (word~) gfx_init_plane_fill::$5 -- vwuz1=vwuc1_plus_vwuz1 
    clc
    lda.z gfxb
    adc #<$4000
    sta.z gfxb
    lda.z gfxb+1
    adc #>$4000
    sta.z gfxb+1
    // [495] (byte*) gfx_init_plane_fill::gfxb#6 ← (byte*)(word) gfx_init_plane_fill::gfxb#0
    // [496] phi from gfx_init_plane_fill::@5 to gfx_init_plane_fill::@1 [phi:gfx_init_plane_fill::@5->gfx_init_plane_fill::@1]
  __b1_from___b5:
    // [496] phi (byte) gfx_init_plane_fill::by#4 = (byte) 0 [phi:gfx_init_plane_fill::@5->gfx_init_plane_fill::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z by
    // [496] phi (byte*) gfx_init_plane_fill::gfxb#3 = (byte*) gfx_init_plane_fill::gfxb#6 [phi:gfx_init_plane_fill::@5->gfx_init_plane_fill::@1#1] -- register_copy 
    jmp __b1
    // [496] phi from gfx_init_plane_fill::@3 to gfx_init_plane_fill::@1 [phi:gfx_init_plane_fill::@3->gfx_init_plane_fill::@1]
  __b1_from___b3:
    // [496] phi (byte) gfx_init_plane_fill::by#4 = (byte) gfx_init_plane_fill::by#1 [phi:gfx_init_plane_fill::@3->gfx_init_plane_fill::@1#0] -- register_copy 
    // [496] phi (byte*) gfx_init_plane_fill::gfxb#3 = (byte*) gfx_init_plane_fill::gfxb#1 [phi:gfx_init_plane_fill::@3->gfx_init_plane_fill::@1#1] -- register_copy 
    jmp __b1
    // gfx_init_plane_fill::@1
  __b1:
    // [497] phi from gfx_init_plane_fill::@1 to gfx_init_plane_fill::@2 [phi:gfx_init_plane_fill::@1->gfx_init_plane_fill::@2]
  __b2_from___b1:
    // [497] phi (byte) gfx_init_plane_fill::bx#2 = (byte) 0 [phi:gfx_init_plane_fill::@1->gfx_init_plane_fill::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [497] phi (byte*) gfx_init_plane_fill::gfxb#2 = (byte*) gfx_init_plane_fill::gfxb#3 [phi:gfx_init_plane_fill::@1->gfx_init_plane_fill::@2#1] -- register_copy 
    jmp __b2
    // [497] phi from gfx_init_plane_fill::@2 to gfx_init_plane_fill::@2 [phi:gfx_init_plane_fill::@2->gfx_init_plane_fill::@2]
  __b2_from___b2:
    // [497] phi (byte) gfx_init_plane_fill::bx#2 = (byte) gfx_init_plane_fill::bx#1 [phi:gfx_init_plane_fill::@2->gfx_init_plane_fill::@2#0] -- register_copy 
    // [497] phi (byte*) gfx_init_plane_fill::gfxb#2 = (byte*) gfx_init_plane_fill::gfxb#1 [phi:gfx_init_plane_fill::@2->gfx_init_plane_fill::@2#1] -- register_copy 
    jmp __b2
    // gfx_init_plane_fill::@2
  __b2:
    // [498] *((byte*) gfx_init_plane_fill::gfxb#2) ← (byte) gfx_init_plane_fill::fill#6 -- _deref_pbuz1=vbuz2 
    lda.z fill
    ldy #0
    sta (gfxb),y
    // [499] (byte*) gfx_init_plane_fill::gfxb#1 ← ++ (byte*) gfx_init_plane_fill::gfxb#2 -- pbuz1=_inc_pbuz1 
    inc.z gfxb
    bne !+
    inc.z gfxb+1
  !:
    // [500] (byte) gfx_init_plane_fill::bx#1 ← ++ (byte) gfx_init_plane_fill::bx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [501] if((byte) gfx_init_plane_fill::bx#1!=(byte) $28) goto gfx_init_plane_fill::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2_from___b2
    jmp __b3
    // gfx_init_plane_fill::@3
  __b3:
    // [502] (byte) gfx_init_plane_fill::by#1 ← ++ (byte) gfx_init_plane_fill::by#4 -- vbuz1=_inc_vbuz1 
    inc.z by
    // [503] if((byte) gfx_init_plane_fill::by#1!=(byte) $c8) goto gfx_init_plane_fill::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z by
    bne __b1_from___b3
    // [504] phi from gfx_init_plane_fill::@3 to gfx_init_plane_fill::@4 [phi:gfx_init_plane_fill::@3->gfx_init_plane_fill::@4]
  __b4_from___b3:
    jmp __b4
    // gfx_init_plane_fill::@4
  __b4:
    // [505] call dtvSetCpuBankSegment1 
  // Reset CPU BANK segment to $4000
    // [507] phi from gfx_init_plane_fill::@4 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_fill::@4->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from___b4:
    // [507] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)(number) $4000/(number) $4000 [phi:gfx_init_plane_fill::@4->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
    jmp __breturn
    // gfx_init_plane_fill::@return
  __breturn:
    // [506] return 
    rts
}
  // dtvSetCpuBankSegment1
// Set the memory pointed to by CPU BANK 1 SEGMENT ($4000-$7fff)
// This sets which actual memory is addressed when the CPU reads/writes to $4000-$7fff
// The actual memory addressed will be $4000*cpuSegmentIdx
// dtvSetCpuBankSegment1(byte register(A) cpuBankIdx)
dtvSetCpuBankSegment1: {
    // Move CPU BANK 1 SEGMENT ($4000-$7fff)
    .label cpuBank = $ff
    // [508] *((const byte*) dtvSetCpuBankSegment1::cpuBank) ← (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 -- _deref_pbuc1=vbuaa 
    sta cpuBank
    // asm { .byte$32,$dd lda$ff .byte$32,$00  }
    .byte $32, $dd
    lda.z $ff
    .byte $32, $00
    jmp __breturn
    // dtvSetCpuBankSegment1::@return
  __breturn:
    // [510] return 
    rts
}
  // gfx_init_plane_blank
// Initialize Plane with blank pixels
gfx_init_plane_blank: {
    // [512] call gfx_init_plane_fill 
    // [486] phi from gfx_init_plane_blank to gfx_init_plane_fill [phi:gfx_init_plane_blank->gfx_init_plane_fill]
  gfx_init_plane_fill_from_gfx_init_plane_blank:
    // [486] phi (byte) gfx_init_plane_fill::fill#6 = (byte) 0 [phi:gfx_init_plane_blank->gfx_init_plane_fill#0] -- vbuz1=vbuc1 
    lda #0
    sta.z gfx_init_plane_fill.fill
    // [486] phi (dword) gfx_init_plane_fill::plane_addr#3 = (const nomodify dword) PLANE_BLANK [phi:gfx_init_plane_blank->gfx_init_plane_fill#1] -- vduz1=vduc1 
    lda #<PLANE_BLANK
    sta.z gfx_init_plane_fill.plane_addr
    lda #>PLANE_BLANK
    sta.z gfx_init_plane_fill.plane_addr+1
    lda #<PLANE_BLANK>>$10
    sta.z gfx_init_plane_fill.plane_addr+2
    lda #>PLANE_BLANK>>$10
    sta.z gfx_init_plane_fill.plane_addr+3
    jsr gfx_init_plane_fill
    jmp __breturn
    // gfx_init_plane_blank::@return
  __breturn:
    // [513] return 
    rts
}
  // gfx_init_plane_vertical2
// Initialize Plane with Vertical Stripes every 2 pixels
gfx_init_plane_vertical2: {
    // [515] call gfx_init_plane_fill 
    // [486] phi from gfx_init_plane_vertical2 to gfx_init_plane_fill [phi:gfx_init_plane_vertical2->gfx_init_plane_fill]
  gfx_init_plane_fill_from_gfx_init_plane_vertical2:
    // [486] phi (byte) gfx_init_plane_fill::fill#6 = (byte) $1b [phi:gfx_init_plane_vertical2->gfx_init_plane_fill#0] -- vbuz1=vbuc1 
    lda #$1b
    sta.z gfx_init_plane_fill.fill
    // [486] phi (dword) gfx_init_plane_fill::plane_addr#3 = (const nomodify dword) PLANE_VERTICAL2 [phi:gfx_init_plane_vertical2->gfx_init_plane_fill#1] -- vduz1=vduc1 
    lda #<PLANE_VERTICAL2
    sta.z gfx_init_plane_fill.plane_addr
    lda #>PLANE_VERTICAL2
    sta.z gfx_init_plane_fill.plane_addr+1
    lda #<PLANE_VERTICAL2>>$10
    sta.z gfx_init_plane_fill.plane_addr+2
    lda #>PLANE_VERTICAL2>>$10
    sta.z gfx_init_plane_fill.plane_addr+3
    jsr gfx_init_plane_fill
    jmp __breturn
    // gfx_init_plane_vertical2::@return
  __breturn:
    // [516] return 
    rts
}
  // gfx_init_plane_horisontal2
// Initialize Plane with Horizontal Stripes every 2 pixels
gfx_init_plane_horisontal2: {
    .const gfxbCpuBank = PLANE_HORISONTAL2/$4000
    .label gfxa = $10
    .label ay = $f
    // [518] call dtvSetCpuBankSegment1 
    // [507] phi from gfx_init_plane_horisontal2 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_horisontal2->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_gfx_init_plane_horisontal2:
    // [507] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (const byte) gfx_init_plane_horisontal2::gfxbCpuBank#0 [phi:gfx_init_plane_horisontal2->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #gfxbCpuBank
    jsr dtvSetCpuBankSegment1
    // [519] phi from gfx_init_plane_horisontal2 to gfx_init_plane_horisontal2::@1 [phi:gfx_init_plane_horisontal2->gfx_init_plane_horisontal2::@1]
  __b1_from_gfx_init_plane_horisontal2:
    // [519] phi (byte*) gfx_init_plane_horisontal2::gfxa#3 = (byte*)(word) $4000 [phi:gfx_init_plane_horisontal2->gfx_init_plane_horisontal2::@1#0] -- pbuz1=pbuc1 
    lda #<$4000
    sta.z gfxa
    lda #>$4000
    sta.z gfxa+1
    // [519] phi (byte) gfx_init_plane_horisontal2::ay#4 = (byte) 0 [phi:gfx_init_plane_horisontal2->gfx_init_plane_horisontal2::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z ay
    jmp __b1
    // [519] phi from gfx_init_plane_horisontal2::@3 to gfx_init_plane_horisontal2::@1 [phi:gfx_init_plane_horisontal2::@3->gfx_init_plane_horisontal2::@1]
  __b1_from___b3:
    // [519] phi (byte*) gfx_init_plane_horisontal2::gfxa#3 = (byte*) gfx_init_plane_horisontal2::gfxa#1 [phi:gfx_init_plane_horisontal2::@3->gfx_init_plane_horisontal2::@1#0] -- register_copy 
    // [519] phi (byte) gfx_init_plane_horisontal2::ay#4 = (byte) gfx_init_plane_horisontal2::ay#1 [phi:gfx_init_plane_horisontal2::@3->gfx_init_plane_horisontal2::@1#1] -- register_copy 
    jmp __b1
    // gfx_init_plane_horisontal2::@1
  __b1:
    // [520] phi from gfx_init_plane_horisontal2::@1 to gfx_init_plane_horisontal2::@2 [phi:gfx_init_plane_horisontal2::@1->gfx_init_plane_horisontal2::@2]
  __b2_from___b1:
    // [520] phi (byte) gfx_init_plane_horisontal2::ax#2 = (byte) 0 [phi:gfx_init_plane_horisontal2::@1->gfx_init_plane_horisontal2::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [520] phi (byte*) gfx_init_plane_horisontal2::gfxa#2 = (byte*) gfx_init_plane_horisontal2::gfxa#3 [phi:gfx_init_plane_horisontal2::@1->gfx_init_plane_horisontal2::@2#1] -- register_copy 
    jmp __b2
    // [520] phi from gfx_init_plane_horisontal2::@2 to gfx_init_plane_horisontal2::@2 [phi:gfx_init_plane_horisontal2::@2->gfx_init_plane_horisontal2::@2]
  __b2_from___b2:
    // [520] phi (byte) gfx_init_plane_horisontal2::ax#2 = (byte) gfx_init_plane_horisontal2::ax#1 [phi:gfx_init_plane_horisontal2::@2->gfx_init_plane_horisontal2::@2#0] -- register_copy 
    // [520] phi (byte*) gfx_init_plane_horisontal2::gfxa#2 = (byte*) gfx_init_plane_horisontal2::gfxa#1 [phi:gfx_init_plane_horisontal2::@2->gfx_init_plane_horisontal2::@2#1] -- register_copy 
    jmp __b2
    // gfx_init_plane_horisontal2::@2
  __b2:
    // [521] (byte~) gfx_init_plane_horisontal2::$2 ← (byte) gfx_init_plane_horisontal2::ay#4 >> (byte) 1 -- vbuaa=vbuz1_ror_1 
    lda.z ay
    lsr
    // [522] (byte) gfx_init_plane_horisontal2::row#0 ← (byte~) gfx_init_plane_horisontal2::$2 & (byte) 3 -- vbuaa=vbuaa_band_vbuc1 
    and #3
    // [523] *((byte*) gfx_init_plane_horisontal2::gfxa#2) ← *((const byte*) gfx_init_plane_horisontal2::row_bitmask + (byte) gfx_init_plane_horisontal2::row#0) -- _deref_pbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda row_bitmask,y
    ldy #0
    sta (gfxa),y
    // [524] (byte*) gfx_init_plane_horisontal2::gfxa#1 ← ++ (byte*) gfx_init_plane_horisontal2::gfxa#2 -- pbuz1=_inc_pbuz1 
    inc.z gfxa
    bne !+
    inc.z gfxa+1
  !:
    // [525] (byte) gfx_init_plane_horisontal2::ax#1 ← ++ (byte) gfx_init_plane_horisontal2::ax#2 -- vbuxx=_inc_vbuxx 
    inx
    // [526] if((byte) gfx_init_plane_horisontal2::ax#1!=(byte) $28) goto gfx_init_plane_horisontal2::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2_from___b2
    jmp __b3
    // gfx_init_plane_horisontal2::@3
  __b3:
    // [527] (byte) gfx_init_plane_horisontal2::ay#1 ← ++ (byte) gfx_init_plane_horisontal2::ay#4 -- vbuz1=_inc_vbuz1 
    inc.z ay
    // [528] if((byte) gfx_init_plane_horisontal2::ay#1!=(byte) $c8) goto gfx_init_plane_horisontal2::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z ay
    bne __b1_from___b3
    // [529] phi from gfx_init_plane_horisontal2::@3 to gfx_init_plane_horisontal2::@4 [phi:gfx_init_plane_horisontal2::@3->gfx_init_plane_horisontal2::@4]
  __b4_from___b3:
    jmp __b4
    // gfx_init_plane_horisontal2::@4
  __b4:
    // [530] call dtvSetCpuBankSegment1 
  // Reset CPU BANK segment to $4000
    // [507] phi from gfx_init_plane_horisontal2::@4 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_horisontal2::@4->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from___b4:
    // [507] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)(number) $4000/(number) $4000 [phi:gfx_init_plane_horisontal2::@4->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
    jmp __breturn
    // gfx_init_plane_horisontal2::@return
  __breturn:
    // [531] return 
    rts
    row_bitmask: .byte 0, $55, $aa, $ff
}
  // gfx_init_plane_vertical
// Initialize Plane with Vertical Stripes
gfx_init_plane_vertical: {
    .const gfxbCpuBank = PLANE_VERTICAL/$4000
    .label gfxb = $10
    .label by = $d
    // [533] call dtvSetCpuBankSegment1 
    // [507] phi from gfx_init_plane_vertical to dtvSetCpuBankSegment1 [phi:gfx_init_plane_vertical->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_gfx_init_plane_vertical:
    // [507] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (const byte) gfx_init_plane_vertical::gfxbCpuBank#0 [phi:gfx_init_plane_vertical->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #gfxbCpuBank
    jsr dtvSetCpuBankSegment1
    // [534] phi from gfx_init_plane_vertical to gfx_init_plane_vertical::@1 [phi:gfx_init_plane_vertical->gfx_init_plane_vertical::@1]
  __b1_from_gfx_init_plane_vertical:
    // [534] phi (byte) gfx_init_plane_vertical::by#4 = (byte) 0 [phi:gfx_init_plane_vertical->gfx_init_plane_vertical::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z by
    // [534] phi (byte*) gfx_init_plane_vertical::gfxb#3 = (byte*)(word) $4000+(const nomodify dword) PLANE_VERTICAL&(word) $3fff [phi:gfx_init_plane_vertical->gfx_init_plane_vertical::@1#1] -- pbuz1=pbuc1 
    lda #<$4000+(PLANE_VERTICAL&$3fff)
    sta.z gfxb
    lda #>$4000+(PLANE_VERTICAL&$3fff)
    sta.z gfxb+1
    jmp __b1
    // [534] phi from gfx_init_plane_vertical::@3 to gfx_init_plane_vertical::@1 [phi:gfx_init_plane_vertical::@3->gfx_init_plane_vertical::@1]
  __b1_from___b3:
    // [534] phi (byte) gfx_init_plane_vertical::by#4 = (byte) gfx_init_plane_vertical::by#1 [phi:gfx_init_plane_vertical::@3->gfx_init_plane_vertical::@1#0] -- register_copy 
    // [534] phi (byte*) gfx_init_plane_vertical::gfxb#3 = (byte*) gfx_init_plane_vertical::gfxb#1 [phi:gfx_init_plane_vertical::@3->gfx_init_plane_vertical::@1#1] -- register_copy 
    jmp __b1
    // gfx_init_plane_vertical::@1
  __b1:
    // [535] phi from gfx_init_plane_vertical::@1 to gfx_init_plane_vertical::@2 [phi:gfx_init_plane_vertical::@1->gfx_init_plane_vertical::@2]
  __b2_from___b1:
    // [535] phi (byte) gfx_init_plane_vertical::bx#2 = (byte) 0 [phi:gfx_init_plane_vertical::@1->gfx_init_plane_vertical::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [535] phi (byte*) gfx_init_plane_vertical::gfxb#2 = (byte*) gfx_init_plane_vertical::gfxb#3 [phi:gfx_init_plane_vertical::@1->gfx_init_plane_vertical::@2#1] -- register_copy 
    jmp __b2
    // [535] phi from gfx_init_plane_vertical::@2 to gfx_init_plane_vertical::@2 [phi:gfx_init_plane_vertical::@2->gfx_init_plane_vertical::@2]
  __b2_from___b2:
    // [535] phi (byte) gfx_init_plane_vertical::bx#2 = (byte) gfx_init_plane_vertical::bx#1 [phi:gfx_init_plane_vertical::@2->gfx_init_plane_vertical::@2#0] -- register_copy 
    // [535] phi (byte*) gfx_init_plane_vertical::gfxb#2 = (byte*) gfx_init_plane_vertical::gfxb#1 [phi:gfx_init_plane_vertical::@2->gfx_init_plane_vertical::@2#1] -- register_copy 
    jmp __b2
    // gfx_init_plane_vertical::@2
  __b2:
    // [536] *((byte*) gfx_init_plane_vertical::gfxb#2) ← (byte) $f -- _deref_pbuz1=vbuc1 
    lda #$f
    ldy #0
    sta (gfxb),y
    // [537] (byte*) gfx_init_plane_vertical::gfxb#1 ← ++ (byte*) gfx_init_plane_vertical::gfxb#2 -- pbuz1=_inc_pbuz1 
    inc.z gfxb
    bne !+
    inc.z gfxb+1
  !:
    // [538] (byte) gfx_init_plane_vertical::bx#1 ← ++ (byte) gfx_init_plane_vertical::bx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [539] if((byte) gfx_init_plane_vertical::bx#1!=(byte) $28) goto gfx_init_plane_vertical::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2_from___b2
    jmp __b3
    // gfx_init_plane_vertical::@3
  __b3:
    // [540] (byte) gfx_init_plane_vertical::by#1 ← ++ (byte) gfx_init_plane_vertical::by#4 -- vbuz1=_inc_vbuz1 
    inc.z by
    // [541] if((byte) gfx_init_plane_vertical::by#1!=(byte) $c8) goto gfx_init_plane_vertical::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z by
    bne __b1_from___b3
    // [542] phi from gfx_init_plane_vertical::@3 to gfx_init_plane_vertical::@4 [phi:gfx_init_plane_vertical::@3->gfx_init_plane_vertical::@4]
  __b4_from___b3:
    jmp __b4
    // gfx_init_plane_vertical::@4
  __b4:
    // [543] call dtvSetCpuBankSegment1 
  // Reset CPU BANK segment to $4000
    // [507] phi from gfx_init_plane_vertical::@4 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_vertical::@4->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from___b4:
    // [507] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)(number) $4000/(number) $4000 [phi:gfx_init_plane_vertical::@4->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
    jmp __breturn
    // gfx_init_plane_vertical::@return
  __breturn:
    // [544] return 
    rts
}
  // gfx_init_plane_horisontal
// Initialize Plane with Horizontal Stripes
gfx_init_plane_horisontal: {
    .const gfxbCpuBank = PLANE_HORISONTAL/$4000
    .label gfxa = $10
    .label ay = $d
    // [546] call dtvSetCpuBankSegment1 
    // [507] phi from gfx_init_plane_horisontal to dtvSetCpuBankSegment1 [phi:gfx_init_plane_horisontal->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_gfx_init_plane_horisontal:
    // [507] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (const byte) gfx_init_plane_horisontal::gfxbCpuBank#0 [phi:gfx_init_plane_horisontal->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #gfxbCpuBank
    jsr dtvSetCpuBankSegment1
    // [547] phi from gfx_init_plane_horisontal to gfx_init_plane_horisontal::@1 [phi:gfx_init_plane_horisontal->gfx_init_plane_horisontal::@1]
  __b1_from_gfx_init_plane_horisontal:
    // [547] phi (byte*) gfx_init_plane_horisontal::gfxa#6 = (byte*)(word) $4000 [phi:gfx_init_plane_horisontal->gfx_init_plane_horisontal::@1#0] -- pbuz1=pbuc1 
    lda #<$4000
    sta.z gfxa
    lda #>$4000
    sta.z gfxa+1
    // [547] phi (byte) gfx_init_plane_horisontal::ay#4 = (byte) 0 [phi:gfx_init_plane_horisontal->gfx_init_plane_horisontal::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z ay
    jmp __b1
    // [547] phi from gfx_init_plane_horisontal::@6 to gfx_init_plane_horisontal::@1 [phi:gfx_init_plane_horisontal::@6->gfx_init_plane_horisontal::@1]
  __b1_from___b6:
    // [547] phi (byte*) gfx_init_plane_horisontal::gfxa#6 = (byte*) gfx_init_plane_horisontal::gfxa#7 [phi:gfx_init_plane_horisontal::@6->gfx_init_plane_horisontal::@1#0] -- register_copy 
    // [547] phi (byte) gfx_init_plane_horisontal::ay#4 = (byte) gfx_init_plane_horisontal::ay#1 [phi:gfx_init_plane_horisontal::@6->gfx_init_plane_horisontal::@1#1] -- register_copy 
    jmp __b1
    // gfx_init_plane_horisontal::@1
  __b1:
    // [548] phi from gfx_init_plane_horisontal::@1 to gfx_init_plane_horisontal::@2 [phi:gfx_init_plane_horisontal::@1->gfx_init_plane_horisontal::@2]
  __b2_from___b1:
    // [548] phi (byte) gfx_init_plane_horisontal::ax#2 = (byte) 0 [phi:gfx_init_plane_horisontal::@1->gfx_init_plane_horisontal::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [548] phi (byte*) gfx_init_plane_horisontal::gfxa#3 = (byte*) gfx_init_plane_horisontal::gfxa#6 [phi:gfx_init_plane_horisontal::@1->gfx_init_plane_horisontal::@2#1] -- register_copy 
    jmp __b2
    // [548] phi from gfx_init_plane_horisontal::@4 to gfx_init_plane_horisontal::@2 [phi:gfx_init_plane_horisontal::@4->gfx_init_plane_horisontal::@2]
  __b2_from___b4:
    // [548] phi (byte) gfx_init_plane_horisontal::ax#2 = (byte) gfx_init_plane_horisontal::ax#1 [phi:gfx_init_plane_horisontal::@4->gfx_init_plane_horisontal::@2#0] -- register_copy 
    // [548] phi (byte*) gfx_init_plane_horisontal::gfxa#3 = (byte*) gfx_init_plane_horisontal::gfxa#7 [phi:gfx_init_plane_horisontal::@4->gfx_init_plane_horisontal::@2#1] -- register_copy 
    jmp __b2
    // gfx_init_plane_horisontal::@2
  __b2:
    // [549] (byte~) gfx_init_plane_horisontal::$2 ← (byte) gfx_init_plane_horisontal::ay#4 & (byte) 4 -- vbuaa=vbuz1_band_vbuc1 
    lda #4
    and.z ay
    // [550] if((byte~) gfx_init_plane_horisontal::$2==(byte) 0) goto gfx_init_plane_horisontal::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3
    jmp __b5
    // gfx_init_plane_horisontal::@5
  __b5:
    // [551] *((byte*) gfx_init_plane_horisontal::gfxa#3) ← (byte) $ff -- _deref_pbuz1=vbuc1 
    lda #$ff
    ldy #0
    sta (gfxa),y
    // [552] (byte*) gfx_init_plane_horisontal::gfxa#2 ← ++ (byte*) gfx_init_plane_horisontal::gfxa#3 -- pbuz1=_inc_pbuz1 
    inc.z gfxa
    bne !+
    inc.z gfxa+1
  !:
    // [553] phi from gfx_init_plane_horisontal::@3 gfx_init_plane_horisontal::@5 to gfx_init_plane_horisontal::@4 [phi:gfx_init_plane_horisontal::@3/gfx_init_plane_horisontal::@5->gfx_init_plane_horisontal::@4]
  __b4_from___b3:
  __b4_from___b5:
    // [553] phi (byte*) gfx_init_plane_horisontal::gfxa#7 = (byte*) gfx_init_plane_horisontal::gfxa#1 [phi:gfx_init_plane_horisontal::@3/gfx_init_plane_horisontal::@5->gfx_init_plane_horisontal::@4#0] -- register_copy 
    jmp __b4
    // gfx_init_plane_horisontal::@4
  __b4:
    // [554] (byte) gfx_init_plane_horisontal::ax#1 ← ++ (byte) gfx_init_plane_horisontal::ax#2 -- vbuxx=_inc_vbuxx 
    inx
    // [555] if((byte) gfx_init_plane_horisontal::ax#1!=(byte) $28) goto gfx_init_plane_horisontal::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2_from___b4
    jmp __b6
    // gfx_init_plane_horisontal::@6
  __b6:
    // [556] (byte) gfx_init_plane_horisontal::ay#1 ← ++ (byte) gfx_init_plane_horisontal::ay#4 -- vbuz1=_inc_vbuz1 
    inc.z ay
    // [557] if((byte) gfx_init_plane_horisontal::ay#1!=(byte) $c8) goto gfx_init_plane_horisontal::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z ay
    bne __b1_from___b6
    // [558] phi from gfx_init_plane_horisontal::@6 to gfx_init_plane_horisontal::@7 [phi:gfx_init_plane_horisontal::@6->gfx_init_plane_horisontal::@7]
  __b7_from___b6:
    jmp __b7
    // gfx_init_plane_horisontal::@7
  __b7:
    // [559] call dtvSetCpuBankSegment1 
  // Reset CPU BANK segment to $4000
    // [507] phi from gfx_init_plane_horisontal::@7 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_horisontal::@7->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from___b7:
    // [507] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)(number) $4000/(number) $4000 [phi:gfx_init_plane_horisontal::@7->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
    jmp __breturn
    // gfx_init_plane_horisontal::@return
  __breturn:
    // [560] return 
    rts
    // gfx_init_plane_horisontal::@3
  __b3:
    // [561] *((byte*) gfx_init_plane_horisontal::gfxa#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (gfxa),y
    // [562] (byte*) gfx_init_plane_horisontal::gfxa#1 ← ++ (byte*) gfx_init_plane_horisontal::gfxa#3 -- pbuz1=_inc_pbuz1 
    inc.z gfxa
    bne !+
    inc.z gfxa+1
  !:
    jmp __b4_from___b3
}
  // gfx_init_plane_charset8
// Initialize Plane with 8bpp charset
gfx_init_plane_charset8: {
    // 8bpp cells for Plane B (charset) - ROM charset with 256 colors
    .const gfxbCpuBank = PLANE_CHARSET8/$4000
    .label bits = $f
    .label chargen = $10
    .label gfxa = $14
    .label col = $12
    .label cr = $22
    .label ch = $e
    // [564] call dtvSetCpuBankSegment1 
    // [507] phi from gfx_init_plane_charset8 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_charset8->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_gfx_init_plane_charset8:
    // [507] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (const byte) gfx_init_plane_charset8::gfxbCpuBank#0 [phi:gfx_init_plane_charset8->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #gfxbCpuBank
    jsr dtvSetCpuBankSegment1
    jmp __b9
    // gfx_init_plane_charset8::@9
  __b9:
    // [565] *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_RAM_CHARROM -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_CHARROM
    sta PROCPORT
    // [566] phi from gfx_init_plane_charset8::@9 to gfx_init_plane_charset8::@1 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1]
  __b1_from___b9:
    // [566] phi (byte) gfx_init_plane_charset8::ch#8 = (byte) 0 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z ch
    // [566] phi (byte) gfx_init_plane_charset8::col#6 = (byte) 0 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z col
    // [566] phi (byte*) gfx_init_plane_charset8::gfxa#6 = (byte*)(word) $4000 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#2] -- pbuz1=pbuc1 
    lda #<$4000
    sta.z gfxa
    lda #>$4000
    sta.z gfxa+1
    // [566] phi (byte*) gfx_init_plane_charset8::chargen#3 = (const nomodify byte*) CHARGEN [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#3] -- pbuz1=pbuc1 
    lda #<CHARGEN
    sta.z chargen
    lda #>CHARGEN
    sta.z chargen+1
    jmp __b1
    // [566] phi from gfx_init_plane_charset8::@7 to gfx_init_plane_charset8::@1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1]
  __b1_from___b7:
    // [566] phi (byte) gfx_init_plane_charset8::ch#8 = (byte) gfx_init_plane_charset8::ch#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#0] -- register_copy 
    // [566] phi (byte) gfx_init_plane_charset8::col#6 = (byte) gfx_init_plane_charset8::col#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#1] -- register_copy 
    // [566] phi (byte*) gfx_init_plane_charset8::gfxa#6 = (byte*) gfx_init_plane_charset8::gfxa#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#2] -- register_copy 
    // [566] phi (byte*) gfx_init_plane_charset8::chargen#3 = (byte*) gfx_init_plane_charset8::chargen#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#3] -- register_copy 
    jmp __b1
    // gfx_init_plane_charset8::@1
  __b1:
    // [567] phi from gfx_init_plane_charset8::@1 to gfx_init_plane_charset8::@2 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2]
  __b2_from___b1:
    // [567] phi (byte) gfx_init_plane_charset8::cr#6 = (byte) 0 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z cr
    // [567] phi (byte) gfx_init_plane_charset8::col#5 = (byte) gfx_init_plane_charset8::col#6 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#1] -- register_copy 
    // [567] phi (byte*) gfx_init_plane_charset8::gfxa#5 = (byte*) gfx_init_plane_charset8::gfxa#6 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#2] -- register_copy 
    // [567] phi (byte*) gfx_init_plane_charset8::chargen#2 = (byte*) gfx_init_plane_charset8::chargen#3 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#3] -- register_copy 
    jmp __b2
    // [567] phi from gfx_init_plane_charset8::@6 to gfx_init_plane_charset8::@2 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2]
  __b2_from___b6:
    // [567] phi (byte) gfx_init_plane_charset8::cr#6 = (byte) gfx_init_plane_charset8::cr#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#0] -- register_copy 
    // [567] phi (byte) gfx_init_plane_charset8::col#5 = (byte) gfx_init_plane_charset8::col#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#1] -- register_copy 
    // [567] phi (byte*) gfx_init_plane_charset8::gfxa#5 = (byte*) gfx_init_plane_charset8::gfxa#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#2] -- register_copy 
    // [567] phi (byte*) gfx_init_plane_charset8::chargen#2 = (byte*) gfx_init_plane_charset8::chargen#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#3] -- register_copy 
    jmp __b2
    // gfx_init_plane_charset8::@2
  __b2:
    // [568] (byte) gfx_init_plane_charset8::bits#0 ← *((byte*) gfx_init_plane_charset8::chargen#2) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (chargen),y
    sta.z bits
    // [569] (byte*) gfx_init_plane_charset8::chargen#1 ← ++ (byte*) gfx_init_plane_charset8::chargen#2 -- pbuz1=_inc_pbuz1 
    inc.z chargen
    bne !+
    inc.z chargen+1
  !:
    // [570] phi from gfx_init_plane_charset8::@2 to gfx_init_plane_charset8::@3 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3]
  __b3_from___b2:
    // [570] phi (byte) gfx_init_plane_charset8::cp#2 = (byte) 0 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#0] -- vbuxx=vbuc1 
    ldx #0
    // [570] phi (byte) gfx_init_plane_charset8::col#2 = (byte) gfx_init_plane_charset8::col#5 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#1] -- register_copy 
    // [570] phi (byte*) gfx_init_plane_charset8::gfxa#2 = (byte*) gfx_init_plane_charset8::gfxa#5 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#2] -- register_copy 
    // [570] phi (byte) gfx_init_plane_charset8::bits#2 = (byte) gfx_init_plane_charset8::bits#0 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#3] -- register_copy 
    jmp __b3
    // [570] phi from gfx_init_plane_charset8::@4 to gfx_init_plane_charset8::@3 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3]
  __b3_from___b4:
    // [570] phi (byte) gfx_init_plane_charset8::cp#2 = (byte) gfx_init_plane_charset8::cp#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#0] -- register_copy 
    // [570] phi (byte) gfx_init_plane_charset8::col#2 = (byte) gfx_init_plane_charset8::col#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#1] -- register_copy 
    // [570] phi (byte*) gfx_init_plane_charset8::gfxa#2 = (byte*) gfx_init_plane_charset8::gfxa#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#2] -- register_copy 
    // [570] phi (byte) gfx_init_plane_charset8::bits#2 = (byte) gfx_init_plane_charset8::bits#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#3] -- register_copy 
    jmp __b3
    // gfx_init_plane_charset8::@3
  __b3:
    // [571] (byte~) gfx_init_plane_charset8::$2 ← (byte) gfx_init_plane_charset8::bits#2 & (byte) $80 -- vbuaa=vbuz1_band_vbuc1 
    lda #$80
    and.z bits
    // [572] if((byte~) gfx_init_plane_charset8::$2==(byte) 0) goto gfx_init_plane_charset8::@4 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b4_from___b3
    jmp __b5
    // gfx_init_plane_charset8::@5
  __b5:
    // [573] (byte) gfx_init_plane_charset8::c#3 ← (byte) gfx_init_plane_charset8::col#2 -- vbuaa=vbuz1 
    lda.z col
    // [574] phi from gfx_init_plane_charset8::@5 to gfx_init_plane_charset8::@4 [phi:gfx_init_plane_charset8::@5->gfx_init_plane_charset8::@4]
  __b4_from___b5:
    // [574] phi (byte) gfx_init_plane_charset8::c#2 = (byte) gfx_init_plane_charset8::c#3 [phi:gfx_init_plane_charset8::@5->gfx_init_plane_charset8::@4#0] -- register_copy 
    jmp __b4
    // [574] phi from gfx_init_plane_charset8::@3 to gfx_init_plane_charset8::@4 [phi:gfx_init_plane_charset8::@3->gfx_init_plane_charset8::@4]
  __b4_from___b3:
    // [574] phi (byte) gfx_init_plane_charset8::c#2 = (byte) 0 [phi:gfx_init_plane_charset8::@3->gfx_init_plane_charset8::@4#0] -- vbuaa=vbuc1 
    lda #0
    jmp __b4
    // gfx_init_plane_charset8::@4
  __b4:
    // [575] *((byte*) gfx_init_plane_charset8::gfxa#2) ← (byte) gfx_init_plane_charset8::c#2 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (gfxa),y
    // [576] (byte*) gfx_init_plane_charset8::gfxa#1 ← ++ (byte*) gfx_init_plane_charset8::gfxa#2 -- pbuz1=_inc_pbuz1 
    inc.z gfxa
    bne !+
    inc.z gfxa+1
  !:
    // [577] (byte) gfx_init_plane_charset8::bits#1 ← (byte) gfx_init_plane_charset8::bits#2 << (byte) 1 -- vbuz1=vbuz1_rol_1 
    asl.z bits
    // [578] (byte) gfx_init_plane_charset8::col#1 ← ++ (byte) gfx_init_plane_charset8::col#2 -- vbuz1=_inc_vbuz1 
    inc.z col
    // [579] (byte) gfx_init_plane_charset8::cp#1 ← ++ (byte) gfx_init_plane_charset8::cp#2 -- vbuxx=_inc_vbuxx 
    inx
    // [580] if((byte) gfx_init_plane_charset8::cp#1!=(byte) 8) goto gfx_init_plane_charset8::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne __b3_from___b4
    jmp __b6
    // gfx_init_plane_charset8::@6
  __b6:
    // [581] (byte) gfx_init_plane_charset8::cr#1 ← ++ (byte) gfx_init_plane_charset8::cr#6 -- vbuz1=_inc_vbuz1 
    inc.z cr
    // [582] if((byte) gfx_init_plane_charset8::cr#1!=(byte) 8) goto gfx_init_plane_charset8::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z cr
    bne __b2_from___b6
    jmp __b7
    // gfx_init_plane_charset8::@7
  __b7:
    // [583] (byte) gfx_init_plane_charset8::ch#1 ← ++ (byte) gfx_init_plane_charset8::ch#8 -- vbuz1=_inc_vbuz1 
    inc.z ch
    // [584] if((byte) gfx_init_plane_charset8::ch#1!=(byte) 0) goto gfx_init_plane_charset8::@1 -- vbuz1_neq_0_then_la1 
    lda.z ch
    cmp #0
    bne __b1_from___b7
    jmp __b8
    // gfx_init_plane_charset8::@8
  __b8:
    // [585] *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_RAM_IO -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
    // [586] call dtvSetCpuBankSegment1 
  // Reset CPU BANK segment to $4000
    // [507] phi from gfx_init_plane_charset8::@8 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_charset8::@8->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from___b8:
    // [507] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)(number) $4000/(number) $4000 [phi:gfx_init_plane_charset8::@8->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
    jmp __breturn
    // gfx_init_plane_charset8::@return
  __breturn:
    // [587] return 
    rts
}
  // gfx_init_plane_8bppchunky
// Initialize 8BPP Chunky Bitmap (contains 8bpp pixels)
gfx_init_plane_8bppchunky: {
    .label __5 = $1d
    .label gfxb = $10
    .label x = $14
    .label y = $e
    // [589] call dtvSetCpuBankSegment1 
    // [507] phi from gfx_init_plane_8bppchunky to dtvSetCpuBankSegment1 [phi:gfx_init_plane_8bppchunky->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_gfx_init_plane_8bppchunky:
    // [507] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)(const nomodify dword) PLANE_8BPP_CHUNKY/(word) $4000 [phi:gfx_init_plane_8bppchunky->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #PLANE_8BPP_CHUNKY/$4000
    jsr dtvSetCpuBankSegment1
    // [590] phi from gfx_init_plane_8bppchunky to gfx_init_plane_8bppchunky::@1 [phi:gfx_init_plane_8bppchunky->gfx_init_plane_8bppchunky::@1]
  __b1_from_gfx_init_plane_8bppchunky:
    // [590] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#7 = ++(byte)(const nomodify dword) PLANE_8BPP_CHUNKY/(word) $4000 [phi:gfx_init_plane_8bppchunky->gfx_init_plane_8bppchunky::@1#0] -- vbuxx=vbuc1 
    ldx #PLANE_8BPP_CHUNKY/$4000+1
    // [590] phi (byte) gfx_init_plane_8bppchunky::y#6 = (byte) 0 [phi:gfx_init_plane_8bppchunky->gfx_init_plane_8bppchunky::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    // [590] phi (byte*) gfx_init_plane_8bppchunky::gfxb#5 = (byte*) 16384 [phi:gfx_init_plane_8bppchunky->gfx_init_plane_8bppchunky::@1#2] -- pbuz1=pbuc1 
    lda #<$4000
    sta.z gfxb
    lda #>$4000
    sta.z gfxb+1
    jmp __b1
    // [590] phi from gfx_init_plane_8bppchunky::@5 to gfx_init_plane_8bppchunky::@1 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@1]
  __b1_from___b5:
    // [590] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#7 = (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@1#0] -- register_copy 
    // [590] phi (byte) gfx_init_plane_8bppchunky::y#6 = (byte) gfx_init_plane_8bppchunky::y#1 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@1#1] -- register_copy 
    // [590] phi (byte*) gfx_init_plane_8bppchunky::gfxb#5 = (byte*) gfx_init_plane_8bppchunky::gfxb#1 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@1#2] -- register_copy 
    jmp __b1
    // gfx_init_plane_8bppchunky::@1
  __b1:
    // [591] phi from gfx_init_plane_8bppchunky::@1 to gfx_init_plane_8bppchunky::@2 [phi:gfx_init_plane_8bppchunky::@1->gfx_init_plane_8bppchunky::@2]
  __b2_from___b1:
    // [591] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 = (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#7 [phi:gfx_init_plane_8bppchunky::@1->gfx_init_plane_8bppchunky::@2#0] -- register_copy 
    // [591] phi (word) gfx_init_plane_8bppchunky::x#2 = (word) 0 [phi:gfx_init_plane_8bppchunky::@1->gfx_init_plane_8bppchunky::@2#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z x
    lda #>0
    sta.z x+1
    // [591] phi (byte*) gfx_init_plane_8bppchunky::gfxb#3 = (byte*) gfx_init_plane_8bppchunky::gfxb#5 [phi:gfx_init_plane_8bppchunky::@1->gfx_init_plane_8bppchunky::@2#2] -- register_copy 
    jmp __b2
    // [591] phi from gfx_init_plane_8bppchunky::@3 to gfx_init_plane_8bppchunky::@2 [phi:gfx_init_plane_8bppchunky::@3->gfx_init_plane_8bppchunky::@2]
  __b2_from___b3:
    // [591] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 = (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 [phi:gfx_init_plane_8bppchunky::@3->gfx_init_plane_8bppchunky::@2#0] -- register_copy 
    // [591] phi (word) gfx_init_plane_8bppchunky::x#2 = (word) gfx_init_plane_8bppchunky::x#1 [phi:gfx_init_plane_8bppchunky::@3->gfx_init_plane_8bppchunky::@2#1] -- register_copy 
    // [591] phi (byte*) gfx_init_plane_8bppchunky::gfxb#3 = (byte*) gfx_init_plane_8bppchunky::gfxb#1 [phi:gfx_init_plane_8bppchunky::@3->gfx_init_plane_8bppchunky::@2#2] -- register_copy 
    jmp __b2
    // gfx_init_plane_8bppchunky::@2
  __b2:
    // [592] if((byte*) gfx_init_plane_8bppchunky::gfxb#3!=(word) $8000) goto gfx_init_plane_8bppchunky::@3 -- pbuz1_neq_vwuc1_then_la1 
    lda.z gfxb+1
    cmp #>$8000
    bne __b3_from___b2
    lda.z gfxb
    cmp #<$8000
    bne __b3_from___b2
    jmp __b4
    // gfx_init_plane_8bppchunky::@4
  __b4:
    // [593] (byte) dtvSetCpuBankSegment1::cpuBankIdx#1 ← (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 -- vbuaa=vbuxx 
    txa
    // [594] call dtvSetCpuBankSegment1 
    // [507] phi from gfx_init_plane_8bppchunky::@4 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_8bppchunky::@4->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from___b4:
    // [507] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte) dtvSetCpuBankSegment1::cpuBankIdx#1 [phi:gfx_init_plane_8bppchunky::@4->dtvSetCpuBankSegment1#0] -- register_copy 
    jsr dtvSetCpuBankSegment1
    jmp __b7
    // gfx_init_plane_8bppchunky::@7
  __b7:
    // [595] (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#2 ← ++ (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 -- vbuxx=_inc_vbuxx 
    inx
    // [596] phi from gfx_init_plane_8bppchunky::@7 to gfx_init_plane_8bppchunky::@3 [phi:gfx_init_plane_8bppchunky::@7->gfx_init_plane_8bppchunky::@3]
  __b3_from___b7:
    // [596] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 = (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#2 [phi:gfx_init_plane_8bppchunky::@7->gfx_init_plane_8bppchunky::@3#0] -- register_copy 
    // [596] phi (byte*) gfx_init_plane_8bppchunky::gfxb#4 = (byte*) 16384 [phi:gfx_init_plane_8bppchunky::@7->gfx_init_plane_8bppchunky::@3#1] -- pbuz1=pbuc1 
    lda #<$4000
    sta.z gfxb
    lda #>$4000
    sta.z gfxb+1
    jmp __b3
    // [596] phi from gfx_init_plane_8bppchunky::@2 to gfx_init_plane_8bppchunky::@3 [phi:gfx_init_plane_8bppchunky::@2->gfx_init_plane_8bppchunky::@3]
  __b3_from___b2:
    // [596] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 = (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 [phi:gfx_init_plane_8bppchunky::@2->gfx_init_plane_8bppchunky::@3#0] -- register_copy 
    // [596] phi (byte*) gfx_init_plane_8bppchunky::gfxb#4 = (byte*) gfx_init_plane_8bppchunky::gfxb#3 [phi:gfx_init_plane_8bppchunky::@2->gfx_init_plane_8bppchunky::@3#1] -- register_copy 
    jmp __b3
    // gfx_init_plane_8bppchunky::@3
  __b3:
    // [597] (word~) gfx_init_plane_8bppchunky::$5 ← (word) gfx_init_plane_8bppchunky::x#2 + (byte) gfx_init_plane_8bppchunky::y#6 -- vwuz1=vwuz2_plus_vbuz3 
    lda.z y
    clc
    adc.z x
    sta.z __5
    lda #0
    adc.z x+1
    sta.z __5+1
    // [598] (byte) gfx_init_plane_8bppchunky::c#0 ← (byte)(word~) gfx_init_plane_8bppchunky::$5 -- vbuaa=_byte_vwuz1 
    lda.z __5
    // [599] *((byte*) gfx_init_plane_8bppchunky::gfxb#4) ← (byte) gfx_init_plane_8bppchunky::c#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (gfxb),y
    // [600] (byte*) gfx_init_plane_8bppchunky::gfxb#1 ← ++ (byte*) gfx_init_plane_8bppchunky::gfxb#4 -- pbuz1=_inc_pbuz1 
    inc.z gfxb
    bne !+
    inc.z gfxb+1
  !:
    // [601] (word) gfx_init_plane_8bppchunky::x#1 ← ++ (word) gfx_init_plane_8bppchunky::x#2 -- vwuz1=_inc_vwuz1 
    inc.z x
    bne !+
    inc.z x+1
  !:
    // [602] if((word) gfx_init_plane_8bppchunky::x#1!=(word) $140) goto gfx_init_plane_8bppchunky::@2 -- vwuz1_neq_vwuc1_then_la1 
    lda.z x+1
    cmp #>$140
    bne __b2_from___b3
    lda.z x
    cmp #<$140
    bne __b2_from___b3
    jmp __b5
    // gfx_init_plane_8bppchunky::@5
  __b5:
    // [603] (byte) gfx_init_plane_8bppchunky::y#1 ← ++ (byte) gfx_init_plane_8bppchunky::y#6 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [604] if((byte) gfx_init_plane_8bppchunky::y#1!=(byte) $c8) goto gfx_init_plane_8bppchunky::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z y
    bne __b1_from___b5
    // [605] phi from gfx_init_plane_8bppchunky::@5 to gfx_init_plane_8bppchunky::@6 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@6]
  __b6_from___b5:
    jmp __b6
    // gfx_init_plane_8bppchunky::@6
  __b6:
    // [606] call dtvSetCpuBankSegment1 
  // Reset CPU BANK segment to $4000
    // [507] phi from gfx_init_plane_8bppchunky::@6 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_8bppchunky::@6->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from___b6:
    // [507] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)(number) $4000/(number) $4000 [phi:gfx_init_plane_8bppchunky::@6->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
    jmp __breturn
    // gfx_init_plane_8bppchunky::@return
  __breturn:
    // [607] return 
    rts
}
  // gfx_init_vic_bitmap
// Initialize VIC bitmap
gfx_init_vic_bitmap: {
    .const lines_cnt = 9
    .label l = $22
    // [609] call bitmap_init 
  // Draw some lines on the bitmap
    // [761] phi from gfx_init_vic_bitmap to bitmap_init [phi:gfx_init_vic_bitmap->bitmap_init]
  bitmap_init_from_gfx_init_vic_bitmap:
    jsr bitmap_init
    // [610] phi from gfx_init_vic_bitmap to gfx_init_vic_bitmap::@3 [phi:gfx_init_vic_bitmap->gfx_init_vic_bitmap::@3]
  __b3_from_gfx_init_vic_bitmap:
    jmp __b3
    // gfx_init_vic_bitmap::@3
  __b3:
    // [611] call bitmap_clear 
    jsr bitmap_clear
    // [612] phi from gfx_init_vic_bitmap::@3 to gfx_init_vic_bitmap::@1 [phi:gfx_init_vic_bitmap::@3->gfx_init_vic_bitmap::@1]
  __b1_from___b3:
    // [612] phi (byte) gfx_init_vic_bitmap::l#2 = (byte) 0 [phi:gfx_init_vic_bitmap::@3->gfx_init_vic_bitmap::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    jmp __b1
    // gfx_init_vic_bitmap::@1
  __b1:
    // [613] if((byte) gfx_init_vic_bitmap::l#2<(const byte) gfx_init_vic_bitmap::lines_cnt) goto gfx_init_vic_bitmap::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z l
    cmp #lines_cnt
    bcc __b2
    jmp __breturn
    // gfx_init_vic_bitmap::@return
  __breturn:
    // [614] return 
    rts
    // gfx_init_vic_bitmap::@2
  __b2:
    // [615] (byte) bitmap_line::x0#0 ← *((const byte*) gfx_init_vic_bitmap::lines_x + (byte) gfx_init_vic_bitmap::l#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z l
    lda lines_x,y
    sta.z bitmap_line.x0
    // [616] (byte) bitmap_line::x1#0 ← *((const byte*) gfx_init_vic_bitmap::lines_x+(byte) 1 + (byte) gfx_init_vic_bitmap::l#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z l
    lda lines_x+1,y
    sta.z bitmap_line.x1
    // [617] (byte) bitmap_line::y0#0 ← *((const byte*) gfx_init_vic_bitmap::lines_y + (byte) gfx_init_vic_bitmap::l#2) -- vbuxx=pbuc1_derefidx_vbuz1 
    ldy.z l
    ldx lines_y,y
    // [618] (byte) bitmap_line::y1#0 ← *((const byte*) gfx_init_vic_bitmap::lines_y+(byte) 1 + (byte) gfx_init_vic_bitmap::l#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z l
    lda lines_y+1,y
    sta.z bitmap_line.y1
    // [619] call bitmap_line 
    jsr bitmap_line
    jmp __b4
    // gfx_init_vic_bitmap::@4
  __b4:
    // [620] (byte) gfx_init_vic_bitmap::l#1 ← ++ (byte) gfx_init_vic_bitmap::l#2 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [612] phi from gfx_init_vic_bitmap::@4 to gfx_init_vic_bitmap::@1 [phi:gfx_init_vic_bitmap::@4->gfx_init_vic_bitmap::@1]
  __b1_from___b4:
    // [612] phi (byte) gfx_init_vic_bitmap::l#2 = (byte) gfx_init_vic_bitmap::l#1 [phi:gfx_init_vic_bitmap::@4->gfx_init_vic_bitmap::@1#0] -- register_copy 
    jmp __b1
    lines_x: .byte 0, $ff, $ff, 0, 0, $80, $ff, $80, 0, $80
    lines_y: .byte 0, 0, $c7, $c7, 0, 0, $64, $c7, $64, 0
}
  // bitmap_line
// Draw a line on the bitmap
// bitmap_line(byte zp($16) x0, byte zp($21) x1, byte register(X) y0, byte zp($13) y1)
bitmap_line: {
    .label xd = $12
    .label x0 = $16
    .label x1 = $21
    .label y1 = $13
    // [621] if((byte) bitmap_line::x0#0<(byte) bitmap_line::x1#0) goto bitmap_line::@1 -- vbuz1_lt_vbuz2_then_la1 
    lda.z x0
    cmp.z x1
    bcc __b1
    jmp __b2
    // bitmap_line::@2
  __b2:
    // [622] (byte) bitmap_line::xd#2 ← (byte) bitmap_line::x0#0 - (byte) bitmap_line::x1#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda.z x0
    sec
    sbc.z x1
    sta.z xd
    // [623] if((byte) bitmap_line::y0#0<(byte) bitmap_line::y1#0) goto bitmap_line::@7 -- vbuxx_lt_vbuz1_then_la1 
    cpx.z y1
    bcc __b7
    jmp __b3
    // bitmap_line::@3
  __b3:
    // [624] (byte) bitmap_line::yd#2 ← (byte) bitmap_line::y0#0 - (byte) bitmap_line::y1#0 -- vbuyy=vbuxx_minus_vbuz1 
    txa
    sec
    sbc.z y1
    tay
    // [625] if((byte) bitmap_line::yd#2<(byte) bitmap_line::xd#2) goto bitmap_line::@8 -- vbuyy_lt_vbuz1_then_la1 
    cpy.z xd
    bcc __b8
    jmp __b4
    // bitmap_line::@4
  __b4:
    // [626] (byte) bitmap_line_ydxi::y#0 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuz2 
    lda.z y1
    sta.z bitmap_line_ydxi.y
    // [627] (byte) bitmap_line_ydxi::x#0 ← (byte) bitmap_line::x1#0
    // [628] (byte) bitmap_line_ydxi::y1#0 ← (byte) bitmap_line::y0#0 -- vbuz1=vbuxx 
    stx.z bitmap_line_ydxi.y1
    // [629] (byte) bitmap_line_ydxi::yd#0 ← (byte) bitmap_line::yd#2 -- vbuz1=vbuyy 
    sty.z bitmap_line_ydxi.yd
    // [630] (byte) bitmap_line_ydxi::xd#0 ← (byte) bitmap_line::xd#2
    // [631] call bitmap_line_ydxi 
    // [705] phi from bitmap_line::@4 to bitmap_line_ydxi [phi:bitmap_line::@4->bitmap_line_ydxi]
  bitmap_line_ydxi_from___b4:
    // [705] phi (byte) bitmap_line_ydxi::y1#6 = (byte) bitmap_line_ydxi::y1#0 [phi:bitmap_line::@4->bitmap_line_ydxi#0] -- register_copy 
    // [705] phi (byte) bitmap_line_ydxi::yd#5 = (byte) bitmap_line_ydxi::yd#0 [phi:bitmap_line::@4->bitmap_line_ydxi#1] -- register_copy 
    // [705] phi (byte) bitmap_line_ydxi::y#6 = (byte) bitmap_line_ydxi::y#0 [phi:bitmap_line::@4->bitmap_line_ydxi#2] -- register_copy 
    // [705] phi (byte) bitmap_line_ydxi::x#5 = (byte) bitmap_line_ydxi::x#0 [phi:bitmap_line::@4->bitmap_line_ydxi#3] -- register_copy 
    // [705] phi (byte) bitmap_line_ydxi::xd#2 = (byte) bitmap_line_ydxi::xd#0 [phi:bitmap_line::@4->bitmap_line_ydxi#4] -- register_copy 
    jsr bitmap_line_ydxi
    jmp __breturn
    // bitmap_line::@return
  __breturn:
    // [632] return 
    rts
    // bitmap_line::@8
  __b8:
    // [633] (byte) bitmap_line_xdyi::x#0 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z bitmap_line_xdyi.x
    // [634] (byte) bitmap_line_xdyi::y#0 ← (byte) bitmap_line::y1#0 -- vbuxx=vbuz1 
    ldx.z y1
    // [635] (byte) bitmap_line_xdyi::x1#0 ← (byte) bitmap_line::x0#0
    // [636] (byte) bitmap_line_xdyi::xd#0 ← (byte) bitmap_line::xd#2
    // [637] (byte) bitmap_line_xdyi::yd#0 ← (byte) bitmap_line::yd#2 -- vbuz1=vbuyy 
    sty.z bitmap_line_xdyi.yd
    // [638] call bitmap_line_xdyi 
    // [683] phi from bitmap_line::@8 to bitmap_line_xdyi [phi:bitmap_line::@8->bitmap_line_xdyi]
  bitmap_line_xdyi_from___b8:
    // [683] phi (byte) bitmap_line_xdyi::x1#6 = (byte) bitmap_line_xdyi::x1#0 [phi:bitmap_line::@8->bitmap_line_xdyi#0] -- register_copy 
    // [683] phi (byte) bitmap_line_xdyi::xd#5 = (byte) bitmap_line_xdyi::xd#0 [phi:bitmap_line::@8->bitmap_line_xdyi#1] -- register_copy 
    // [683] phi (byte) bitmap_line_xdyi::y#5 = (byte) bitmap_line_xdyi::y#0 [phi:bitmap_line::@8->bitmap_line_xdyi#2] -- register_copy 
    // [683] phi (byte) bitmap_line_xdyi::x#6 = (byte) bitmap_line_xdyi::x#0 [phi:bitmap_line::@8->bitmap_line_xdyi#3] -- register_copy 
    // [683] phi (byte) bitmap_line_xdyi::yd#2 = (byte) bitmap_line_xdyi::yd#0 [phi:bitmap_line::@8->bitmap_line_xdyi#4] -- register_copy 
    jsr bitmap_line_xdyi
    jmp __breturn
    // bitmap_line::@7
  __b7:
    // [639] (byte) bitmap_line::yd#1 ← (byte) bitmap_line::y1#0 - (byte) bitmap_line::y0#0 -- vbuyy=vbuz1_minus_vbuxx 
    txa
    eor #$ff
    sec
    adc.z y1
    tay
    // [640] if((byte) bitmap_line::yd#1<(byte) bitmap_line::xd#2) goto bitmap_line::@9 -- vbuyy_lt_vbuz1_then_la1 
    cpy.z xd
    bcc __b9
    jmp __b10
    // bitmap_line::@10
  __b10:
    // [641] (byte) bitmap_line_ydxd::y#0 ← (byte) bitmap_line::y0#0 -- vbuz1=vbuxx 
    stx.z bitmap_line_ydxd.y
    // [642] (byte) bitmap_line_ydxd::x#0 ← (byte) bitmap_line::x0#0
    // [643] (byte) bitmap_line_ydxd::y1#0 ← (byte) bitmap_line::y1#0
    // [644] (byte) bitmap_line_ydxd::yd#0 ← (byte) bitmap_line::yd#1 -- vbuz1=vbuyy 
    sty.z bitmap_line_ydxd.yd
    // [645] (byte) bitmap_line_ydxd::xd#0 ← (byte) bitmap_line::xd#2
    // [646] call bitmap_line_ydxd 
    // [735] phi from bitmap_line::@10 to bitmap_line_ydxd [phi:bitmap_line::@10->bitmap_line_ydxd]
  bitmap_line_ydxd_from___b10:
    // [735] phi (byte) bitmap_line_ydxd::y1#6 = (byte) bitmap_line_ydxd::y1#0 [phi:bitmap_line::@10->bitmap_line_ydxd#0] -- register_copy 
    // [735] phi (byte) bitmap_line_ydxd::yd#5 = (byte) bitmap_line_ydxd::yd#0 [phi:bitmap_line::@10->bitmap_line_ydxd#1] -- register_copy 
    // [735] phi (byte) bitmap_line_ydxd::y#7 = (byte) bitmap_line_ydxd::y#0 [phi:bitmap_line::@10->bitmap_line_ydxd#2] -- register_copy 
    // [735] phi (byte) bitmap_line_ydxd::x#5 = (byte) bitmap_line_ydxd::x#0 [phi:bitmap_line::@10->bitmap_line_ydxd#3] -- register_copy 
    // [735] phi (byte) bitmap_line_ydxd::xd#2 = (byte) bitmap_line_ydxd::xd#0 [phi:bitmap_line::@10->bitmap_line_ydxd#4] -- register_copy 
    jsr bitmap_line_ydxd
    jmp __breturn
    // bitmap_line::@9
  __b9:
    // [647] (byte) bitmap_line_xdyd::x#0 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z bitmap_line_xdyd.x
    // [648] (byte) bitmap_line_xdyd::y#0 ← (byte) bitmap_line::y1#0 -- vbuxx=vbuz1 
    ldx.z y1
    // [649] (byte) bitmap_line_xdyd::x1#0 ← (byte) bitmap_line::x0#0
    // [650] (byte) bitmap_line_xdyd::xd#0 ← (byte) bitmap_line::xd#2
    // [651] (byte) bitmap_line_xdyd::yd#0 ← (byte) bitmap_line::yd#1 -- vbuz1=vbuyy 
    sty.z bitmap_line_xdyd.yd
    // [652] call bitmap_line_xdyd 
    // [720] phi from bitmap_line::@9 to bitmap_line_xdyd [phi:bitmap_line::@9->bitmap_line_xdyd]
  bitmap_line_xdyd_from___b9:
    // [720] phi (byte) bitmap_line_xdyd::x1#6 = (byte) bitmap_line_xdyd::x1#0 [phi:bitmap_line::@9->bitmap_line_xdyd#0] -- register_copy 
    // [720] phi (byte) bitmap_line_xdyd::xd#5 = (byte) bitmap_line_xdyd::xd#0 [phi:bitmap_line::@9->bitmap_line_xdyd#1] -- register_copy 
    // [720] phi (byte) bitmap_line_xdyd::y#5 = (byte) bitmap_line_xdyd::y#0 [phi:bitmap_line::@9->bitmap_line_xdyd#2] -- register_copy 
    // [720] phi (byte) bitmap_line_xdyd::x#6 = (byte) bitmap_line_xdyd::x#0 [phi:bitmap_line::@9->bitmap_line_xdyd#3] -- register_copy 
    // [720] phi (byte) bitmap_line_xdyd::yd#2 = (byte) bitmap_line_xdyd::yd#0 [phi:bitmap_line::@9->bitmap_line_xdyd#4] -- register_copy 
    jsr bitmap_line_xdyd
    jmp __breturn
    // bitmap_line::@1
  __b1:
    // [653] (byte) bitmap_line::xd#1 ← (byte) bitmap_line::x1#0 - (byte) bitmap_line::x0#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda.z x1
    sec
    sbc.z x0
    sta.z xd
    // [654] if((byte) bitmap_line::y0#0<(byte) bitmap_line::y1#0) goto bitmap_line::@11 -- vbuxx_lt_vbuz1_then_la1 
    cpx.z y1
    bcc __b11
    jmp __b5
    // bitmap_line::@5
  __b5:
    // [655] (byte) bitmap_line::yd#10 ← (byte) bitmap_line::y0#0 - (byte) bitmap_line::y1#0 -- vbuyy=vbuxx_minus_vbuz1 
    txa
    sec
    sbc.z y1
    tay
    // [656] if((byte) bitmap_line::yd#10<(byte) bitmap_line::xd#1) goto bitmap_line::@12 -- vbuyy_lt_vbuz1_then_la1 
    cpy.z xd
    bcc __b12
    jmp __b6
    // bitmap_line::@6
  __b6:
    // [657] (byte) bitmap_line_ydxd::y#1 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuz2 
    lda.z y1
    sta.z bitmap_line_ydxd.y
    // [658] (byte) bitmap_line_ydxd::x#1 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z bitmap_line_ydxd.x
    // [659] (byte) bitmap_line_ydxd::y1#1 ← (byte) bitmap_line::y0#0 -- vbuz1=vbuxx 
    stx.z bitmap_line_ydxd.y1
    // [660] (byte) bitmap_line_ydxd::yd#1 ← (byte) bitmap_line::yd#10 -- vbuz1=vbuyy 
    sty.z bitmap_line_ydxd.yd
    // [661] (byte) bitmap_line_ydxd::xd#1 ← (byte) bitmap_line::xd#1
    // [662] call bitmap_line_ydxd 
    // [735] phi from bitmap_line::@6 to bitmap_line_ydxd [phi:bitmap_line::@6->bitmap_line_ydxd]
  bitmap_line_ydxd_from___b6:
    // [735] phi (byte) bitmap_line_ydxd::y1#6 = (byte) bitmap_line_ydxd::y1#1 [phi:bitmap_line::@6->bitmap_line_ydxd#0] -- register_copy 
    // [735] phi (byte) bitmap_line_ydxd::yd#5 = (byte) bitmap_line_ydxd::yd#1 [phi:bitmap_line::@6->bitmap_line_ydxd#1] -- register_copy 
    // [735] phi (byte) bitmap_line_ydxd::y#7 = (byte) bitmap_line_ydxd::y#1 [phi:bitmap_line::@6->bitmap_line_ydxd#2] -- register_copy 
    // [735] phi (byte) bitmap_line_ydxd::x#5 = (byte) bitmap_line_ydxd::x#1 [phi:bitmap_line::@6->bitmap_line_ydxd#3] -- register_copy 
    // [735] phi (byte) bitmap_line_ydxd::xd#2 = (byte) bitmap_line_ydxd::xd#1 [phi:bitmap_line::@6->bitmap_line_ydxd#4] -- register_copy 
    jsr bitmap_line_ydxd
    jmp __breturn
    // bitmap_line::@12
  __b12:
    // [663] (byte) bitmap_line_xdyd::x#1 ← (byte) bitmap_line::x0#0 -- vbuz1=vbuz2 
    lda.z x0
    sta.z bitmap_line_xdyd.x
    // [664] (byte) bitmap_line_xdyd::y#1 ← (byte) bitmap_line::y0#0
    // [665] (byte) bitmap_line_xdyd::x1#1 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z bitmap_line_xdyd.x1
    // [666] (byte) bitmap_line_xdyd::xd#1 ← (byte) bitmap_line::xd#1
    // [667] (byte) bitmap_line_xdyd::yd#1 ← (byte) bitmap_line::yd#10 -- vbuz1=vbuyy 
    sty.z bitmap_line_xdyd.yd
    // [668] call bitmap_line_xdyd 
    // [720] phi from bitmap_line::@12 to bitmap_line_xdyd [phi:bitmap_line::@12->bitmap_line_xdyd]
  bitmap_line_xdyd_from___b12:
    // [720] phi (byte) bitmap_line_xdyd::x1#6 = (byte) bitmap_line_xdyd::x1#1 [phi:bitmap_line::@12->bitmap_line_xdyd#0] -- register_copy 
    // [720] phi (byte) bitmap_line_xdyd::xd#5 = (byte) bitmap_line_xdyd::xd#1 [phi:bitmap_line::@12->bitmap_line_xdyd#1] -- register_copy 
    // [720] phi (byte) bitmap_line_xdyd::y#5 = (byte) bitmap_line_xdyd::y#1 [phi:bitmap_line::@12->bitmap_line_xdyd#2] -- register_copy 
    // [720] phi (byte) bitmap_line_xdyd::x#6 = (byte) bitmap_line_xdyd::x#1 [phi:bitmap_line::@12->bitmap_line_xdyd#3] -- register_copy 
    // [720] phi (byte) bitmap_line_xdyd::yd#2 = (byte) bitmap_line_xdyd::yd#1 [phi:bitmap_line::@12->bitmap_line_xdyd#4] -- register_copy 
    jsr bitmap_line_xdyd
    jmp __breturn
    // bitmap_line::@11
  __b11:
    // [669] (byte) bitmap_line::yd#11 ← (byte) bitmap_line::y1#0 - (byte) bitmap_line::y0#0 -- vbuyy=vbuz1_minus_vbuxx 
    txa
    eor #$ff
    sec
    adc.z y1
    tay
    // [670] if((byte) bitmap_line::yd#11<(byte) bitmap_line::xd#1) goto bitmap_line::@13 -- vbuyy_lt_vbuz1_then_la1 
    cpy.z xd
    bcc __b13
    jmp __b14
    // bitmap_line::@14
  __b14:
    // [671] (byte) bitmap_line_ydxi::y#1 ← (byte) bitmap_line::y0#0 -- vbuz1=vbuxx 
    stx.z bitmap_line_ydxi.y
    // [672] (byte) bitmap_line_ydxi::x#1 ← (byte) bitmap_line::x0#0 -- vbuz1=vbuz2 
    lda.z x0
    sta.z bitmap_line_ydxi.x
    // [673] (byte) bitmap_line_ydxi::y1#1 ← (byte) bitmap_line::y1#0
    // [674] (byte) bitmap_line_ydxi::yd#1 ← (byte) bitmap_line::yd#11 -- vbuz1=vbuyy 
    sty.z bitmap_line_ydxi.yd
    // [675] (byte) bitmap_line_ydxi::xd#1 ← (byte) bitmap_line::xd#1
    // [676] call bitmap_line_ydxi 
    // [705] phi from bitmap_line::@14 to bitmap_line_ydxi [phi:bitmap_line::@14->bitmap_line_ydxi]
  bitmap_line_ydxi_from___b14:
    // [705] phi (byte) bitmap_line_ydxi::y1#6 = (byte) bitmap_line_ydxi::y1#1 [phi:bitmap_line::@14->bitmap_line_ydxi#0] -- register_copy 
    // [705] phi (byte) bitmap_line_ydxi::yd#5 = (byte) bitmap_line_ydxi::yd#1 [phi:bitmap_line::@14->bitmap_line_ydxi#1] -- register_copy 
    // [705] phi (byte) bitmap_line_ydxi::y#6 = (byte) bitmap_line_ydxi::y#1 [phi:bitmap_line::@14->bitmap_line_ydxi#2] -- register_copy 
    // [705] phi (byte) bitmap_line_ydxi::x#5 = (byte) bitmap_line_ydxi::x#1 [phi:bitmap_line::@14->bitmap_line_ydxi#3] -- register_copy 
    // [705] phi (byte) bitmap_line_ydxi::xd#2 = (byte) bitmap_line_ydxi::xd#1 [phi:bitmap_line::@14->bitmap_line_ydxi#4] -- register_copy 
    jsr bitmap_line_ydxi
    jmp __breturn
    // bitmap_line::@13
  __b13:
    // [677] (byte) bitmap_line_xdyi::x#1 ← (byte) bitmap_line::x0#0 -- vbuz1=vbuz2 
    lda.z x0
    sta.z bitmap_line_xdyi.x
    // [678] (byte) bitmap_line_xdyi::y#1 ← (byte) bitmap_line::y0#0
    // [679] (byte) bitmap_line_xdyi::x1#1 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z bitmap_line_xdyi.x1
    // [680] (byte) bitmap_line_xdyi::xd#1 ← (byte) bitmap_line::xd#1
    // [681] (byte) bitmap_line_xdyi::yd#1 ← (byte) bitmap_line::yd#11 -- vbuz1=vbuyy 
    sty.z bitmap_line_xdyi.yd
    // [682] call bitmap_line_xdyi 
    // [683] phi from bitmap_line::@13 to bitmap_line_xdyi [phi:bitmap_line::@13->bitmap_line_xdyi]
  bitmap_line_xdyi_from___b13:
    // [683] phi (byte) bitmap_line_xdyi::x1#6 = (byte) bitmap_line_xdyi::x1#1 [phi:bitmap_line::@13->bitmap_line_xdyi#0] -- register_copy 
    // [683] phi (byte) bitmap_line_xdyi::xd#5 = (byte) bitmap_line_xdyi::xd#1 [phi:bitmap_line::@13->bitmap_line_xdyi#1] -- register_copy 
    // [683] phi (byte) bitmap_line_xdyi::y#5 = (byte) bitmap_line_xdyi::y#1 [phi:bitmap_line::@13->bitmap_line_xdyi#2] -- register_copy 
    // [683] phi (byte) bitmap_line_xdyi::x#6 = (byte) bitmap_line_xdyi::x#1 [phi:bitmap_line::@13->bitmap_line_xdyi#3] -- register_copy 
    // [683] phi (byte) bitmap_line_xdyi::yd#2 = (byte) bitmap_line_xdyi::yd#1 [phi:bitmap_line::@13->bitmap_line_xdyi#4] -- register_copy 
    jsr bitmap_line_xdyi
    jmp __breturn
}
  // bitmap_line_xdyi
// bitmap_line_xdyi(byte zp($d) x, byte register(X) y, byte zp($16) x1, byte zp($12) xd, byte zp($f) yd)
bitmap_line_xdyi: {
    .label x = $d
    .label x1 = $16
    .label xd = $12
    .label yd = $f
    .label e = $13
    // [684] (byte) bitmap_line_xdyi::e#0 ← (byte) bitmap_line_xdyi::yd#2 >> (byte) 1 -- vbuz1=vbuz2_ror_1 
    lda.z yd
    lsr
    sta.z e
    // [685] phi from bitmap_line_xdyi bitmap_line_xdyi::@2 to bitmap_line_xdyi::@1 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1]
  __b1_from_bitmap_line_xdyi:
  __b1_from___b2:
    // [685] phi (byte) bitmap_line_xdyi::e#3 = (byte) bitmap_line_xdyi::e#0 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1#0] -- register_copy 
    // [685] phi (byte) bitmap_line_xdyi::y#3 = (byte) bitmap_line_xdyi::y#5 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1#1] -- register_copy 
    // [685] phi (byte) bitmap_line_xdyi::x#3 = (byte) bitmap_line_xdyi::x#6 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1#2] -- register_copy 
    jmp __b1
    // bitmap_line_xdyi::@1
  __b1:
    // [686] (byte) bitmap_plot::x#0 ← (byte) bitmap_line_xdyi::x#3 -- vbuyy=vbuz1 
    ldy.z x
    // [687] (byte) bitmap_plot::y#0 ← (byte) bitmap_line_xdyi::y#3
    // [688] call bitmap_plot 
    // [698] phi from bitmap_line_xdyi::@1 to bitmap_plot [phi:bitmap_line_xdyi::@1->bitmap_plot]
  bitmap_plot_from___b1:
    // [698] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#0 [phi:bitmap_line_xdyi::@1->bitmap_plot#0] -- register_copy 
    // [698] phi (byte) bitmap_plot::x#4 = (byte) bitmap_plot::x#0 [phi:bitmap_line_xdyi::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp __b4
    // bitmap_line_xdyi::@4
  __b4:
    // [689] (byte) bitmap_line_xdyi::x#2 ← ++ (byte) bitmap_line_xdyi::x#3 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [690] (byte) bitmap_line_xdyi::e#1 ← (byte) bitmap_line_xdyi::e#3 + (byte) bitmap_line_xdyi::yd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z e
    clc
    adc.z yd
    sta.z e
    // [691] if((byte) bitmap_line_xdyi::xd#5>=(byte) bitmap_line_xdyi::e#1) goto bitmap_line_xdyi::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z xd
    cmp.z e
    bcs __b2_from___b4
    jmp __b3
    // bitmap_line_xdyi::@3
  __b3:
    // [692] (byte) bitmap_line_xdyi::y#2 ← ++ (byte) bitmap_line_xdyi::y#3 -- vbuxx=_inc_vbuxx 
    inx
    // [693] (byte) bitmap_line_xdyi::e#2 ← (byte) bitmap_line_xdyi::e#1 - (byte) bitmap_line_xdyi::xd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z e
    sec
    sbc.z xd
    sta.z e
    // [694] phi from bitmap_line_xdyi::@3 bitmap_line_xdyi::@4 to bitmap_line_xdyi::@2 [phi:bitmap_line_xdyi::@3/bitmap_line_xdyi::@4->bitmap_line_xdyi::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [694] phi (byte) bitmap_line_xdyi::e#6 = (byte) bitmap_line_xdyi::e#2 [phi:bitmap_line_xdyi::@3/bitmap_line_xdyi::@4->bitmap_line_xdyi::@2#0] -- register_copy 
    // [694] phi (byte) bitmap_line_xdyi::y#6 = (byte) bitmap_line_xdyi::y#2 [phi:bitmap_line_xdyi::@3/bitmap_line_xdyi::@4->bitmap_line_xdyi::@2#1] -- register_copy 
    jmp __b2
    // bitmap_line_xdyi::@2
  __b2:
    // [695] (byte~) bitmap_line_xdyi::$6 ← (byte) bitmap_line_xdyi::x1#6 + (byte) 1 -- vbuaa=vbuz1_plus_1 
    lda.z x1
    clc
    adc #1
    // [696] if((byte) bitmap_line_xdyi::x#2!=(byte~) bitmap_line_xdyi::$6) goto bitmap_line_xdyi::@1 -- vbuz1_neq_vbuaa_then_la1 
    cmp.z x
    bne __b1_from___b2
    jmp __breturn
    // bitmap_line_xdyi::@return
  __breturn:
    // [697] return 
    rts
}
  // bitmap_plot
// bitmap_plot(byte register(Y) x, byte register(X) y)
bitmap_plot: {
    .label plotter_x = $1d
    .label plotter_y = $1f
    .label plotter = $1d
    // [699] (word) bitmap_plot::plotter_x#0 ← *((const to_nomodify byte*) bitmap_plot_xhi + (byte) bitmap_plot::x#4) w= *((const to_nomodify byte*) bitmap_plot_xlo + (byte) bitmap_plot::x#4) -- vwuz1=pbuc1_derefidx_vbuyy_word_pbuc2_derefidx_vbuyy 
    lda bitmap_plot_xhi,y
    sta.z plotter_x+1
    lda bitmap_plot_xlo,y
    sta.z plotter_x
    // [700] (word) bitmap_plot::plotter_y#0 ← *((const to_nomodify byte*) bitmap_plot_yhi + (byte) bitmap_plot::y#4) w= *((const to_nomodify byte*) bitmap_plot_ylo + (byte) bitmap_plot::y#4) -- vwuz1=pbuc1_derefidx_vbuxx_word_pbuc2_derefidx_vbuxx 
    lda bitmap_plot_yhi,x
    sta.z plotter_y+1
    lda bitmap_plot_ylo,x
    sta.z plotter_y
    // [701] (word) bitmap_plot::plotter#0 ← (word) bitmap_plot::plotter_x#0 + (word) bitmap_plot::plotter_y#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z plotter
    clc
    adc.z plotter_y
    sta.z plotter
    lda.z plotter+1
    adc.z plotter_y+1
    sta.z plotter+1
    // [702] (byte~) bitmap_plot::$1 ← *((byte*)(word) bitmap_plot::plotter#0) | *((const to_nomodify byte*) bitmap_plot_bit + (byte) bitmap_plot::x#4) -- vbuaa=_deref_pbuz1_bor_pbuc1_derefidx_vbuyy 
    lda bitmap_plot_bit,y
    ldy #0
    ora (plotter),y
    // [703] *((byte*)(word) bitmap_plot::plotter#0) ← (byte~) bitmap_plot::$1 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (plotter),y
    jmp __breturn
    // bitmap_plot::@return
  __breturn:
    // [704] return 
    rts
}
  // bitmap_line_ydxi
// bitmap_line_ydxi(byte zp($e) y, byte zp($21) x, byte zp($13) y1, byte zp($d) yd, byte zp($12) xd)
bitmap_line_ydxi: {
    .label y = $e
    .label x = $21
    .label y1 = $13
    .label yd = $d
    .label xd = $12
    .label e = $f
    // [706] (byte) bitmap_line_ydxi::e#0 ← (byte) bitmap_line_ydxi::xd#2 >> (byte) 1 -- vbuz1=vbuz2_ror_1 
    lda.z xd
    lsr
    sta.z e
    // [707] phi from bitmap_line_ydxi bitmap_line_ydxi::@2 to bitmap_line_ydxi::@1 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1]
  __b1_from_bitmap_line_ydxi:
  __b1_from___b2:
    // [707] phi (byte) bitmap_line_ydxi::e#3 = (byte) bitmap_line_ydxi::e#0 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1#0] -- register_copy 
    // [707] phi (byte) bitmap_line_ydxi::y#3 = (byte) bitmap_line_ydxi::y#6 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1#1] -- register_copy 
    // [707] phi (byte) bitmap_line_ydxi::x#3 = (byte) bitmap_line_ydxi::x#5 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1#2] -- register_copy 
    jmp __b1
    // bitmap_line_ydxi::@1
  __b1:
    // [708] (byte) bitmap_plot::x#2 ← (byte) bitmap_line_ydxi::x#3 -- vbuyy=vbuz1 
    ldy.z x
    // [709] (byte) bitmap_plot::y#2 ← (byte) bitmap_line_ydxi::y#3 -- vbuxx=vbuz1 
    ldx.z y
    // [710] call bitmap_plot 
    // [698] phi from bitmap_line_ydxi::@1 to bitmap_plot [phi:bitmap_line_ydxi::@1->bitmap_plot]
  bitmap_plot_from___b1:
    // [698] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#2 [phi:bitmap_line_ydxi::@1->bitmap_plot#0] -- register_copy 
    // [698] phi (byte) bitmap_plot::x#4 = (byte) bitmap_plot::x#2 [phi:bitmap_line_ydxi::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp __b4
    // bitmap_line_ydxi::@4
  __b4:
    // [711] (byte) bitmap_line_ydxi::y#2 ← ++ (byte) bitmap_line_ydxi::y#3 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [712] (byte) bitmap_line_ydxi::e#1 ← (byte) bitmap_line_ydxi::e#3 + (byte) bitmap_line_ydxi::xd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z e
    clc
    adc.z xd
    sta.z e
    // [713] if((byte) bitmap_line_ydxi::yd#5>=(byte) bitmap_line_ydxi::e#1) goto bitmap_line_ydxi::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z yd
    cmp.z e
    bcs __b2_from___b4
    jmp __b3
    // bitmap_line_ydxi::@3
  __b3:
    // [714] (byte) bitmap_line_ydxi::x#2 ← ++ (byte) bitmap_line_ydxi::x#3 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [715] (byte) bitmap_line_ydxi::e#2 ← (byte) bitmap_line_ydxi::e#1 - (byte) bitmap_line_ydxi::yd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z e
    sec
    sbc.z yd
    sta.z e
    // [716] phi from bitmap_line_ydxi::@3 bitmap_line_ydxi::@4 to bitmap_line_ydxi::@2 [phi:bitmap_line_ydxi::@3/bitmap_line_ydxi::@4->bitmap_line_ydxi::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [716] phi (byte) bitmap_line_ydxi::e#6 = (byte) bitmap_line_ydxi::e#2 [phi:bitmap_line_ydxi::@3/bitmap_line_ydxi::@4->bitmap_line_ydxi::@2#0] -- register_copy 
    // [716] phi (byte) bitmap_line_ydxi::x#6 = (byte) bitmap_line_ydxi::x#2 [phi:bitmap_line_ydxi::@3/bitmap_line_ydxi::@4->bitmap_line_ydxi::@2#1] -- register_copy 
    jmp __b2
    // bitmap_line_ydxi::@2
  __b2:
    // [717] (byte~) bitmap_line_ydxi::$6 ← (byte) bitmap_line_ydxi::y1#6 + (byte) 1 -- vbuxx=vbuz1_plus_1 
    ldx.z y1
    inx
    // [718] if((byte) bitmap_line_ydxi::y#2!=(byte~) bitmap_line_ydxi::$6) goto bitmap_line_ydxi::@1 -- vbuz1_neq_vbuxx_then_la1 
    cpx.z y
    bne __b1_from___b2
    jmp __breturn
    // bitmap_line_ydxi::@return
  __breturn:
    // [719] return 
    rts
}
  // bitmap_line_xdyd
// bitmap_line_xdyd(byte zp($f) x, byte register(X) y, byte zp($16) x1, byte zp($12) xd, byte zp($e) yd)
bitmap_line_xdyd: {
    .label x = $f
    .label x1 = $16
    .label xd = $12
    .label yd = $e
    .label e = $d
    // [721] (byte) bitmap_line_xdyd::e#0 ← (byte) bitmap_line_xdyd::yd#2 >> (byte) 1 -- vbuz1=vbuz2_ror_1 
    lda.z yd
    lsr
    sta.z e
    // [722] phi from bitmap_line_xdyd bitmap_line_xdyd::@2 to bitmap_line_xdyd::@1 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1]
  __b1_from_bitmap_line_xdyd:
  __b1_from___b2:
    // [722] phi (byte) bitmap_line_xdyd::e#3 = (byte) bitmap_line_xdyd::e#0 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1#0] -- register_copy 
    // [722] phi (byte) bitmap_line_xdyd::y#3 = (byte) bitmap_line_xdyd::y#5 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1#1] -- register_copy 
    // [722] phi (byte) bitmap_line_xdyd::x#3 = (byte) bitmap_line_xdyd::x#6 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1#2] -- register_copy 
    jmp __b1
    // bitmap_line_xdyd::@1
  __b1:
    // [723] (byte) bitmap_plot::x#1 ← (byte) bitmap_line_xdyd::x#3 -- vbuyy=vbuz1 
    ldy.z x
    // [724] (byte) bitmap_plot::y#1 ← (byte) bitmap_line_xdyd::y#3
    // [725] call bitmap_plot 
    // [698] phi from bitmap_line_xdyd::@1 to bitmap_plot [phi:bitmap_line_xdyd::@1->bitmap_plot]
  bitmap_plot_from___b1:
    // [698] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#1 [phi:bitmap_line_xdyd::@1->bitmap_plot#0] -- register_copy 
    // [698] phi (byte) bitmap_plot::x#4 = (byte) bitmap_plot::x#1 [phi:bitmap_line_xdyd::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp __b4
    // bitmap_line_xdyd::@4
  __b4:
    // [726] (byte) bitmap_line_xdyd::x#2 ← ++ (byte) bitmap_line_xdyd::x#3 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [727] (byte) bitmap_line_xdyd::e#1 ← (byte) bitmap_line_xdyd::e#3 + (byte) bitmap_line_xdyd::yd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z e
    clc
    adc.z yd
    sta.z e
    // [728] if((byte) bitmap_line_xdyd::xd#5>=(byte) bitmap_line_xdyd::e#1) goto bitmap_line_xdyd::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z xd
    cmp.z e
    bcs __b2_from___b4
    jmp __b3
    // bitmap_line_xdyd::@3
  __b3:
    // [729] (byte) bitmap_line_xdyd::y#2 ← -- (byte) bitmap_line_xdyd::y#3 -- vbuxx=_dec_vbuxx 
    dex
    // [730] (byte) bitmap_line_xdyd::e#2 ← (byte) bitmap_line_xdyd::e#1 - (byte) bitmap_line_xdyd::xd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z e
    sec
    sbc.z xd
    sta.z e
    // [731] phi from bitmap_line_xdyd::@3 bitmap_line_xdyd::@4 to bitmap_line_xdyd::@2 [phi:bitmap_line_xdyd::@3/bitmap_line_xdyd::@4->bitmap_line_xdyd::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [731] phi (byte) bitmap_line_xdyd::e#6 = (byte) bitmap_line_xdyd::e#2 [phi:bitmap_line_xdyd::@3/bitmap_line_xdyd::@4->bitmap_line_xdyd::@2#0] -- register_copy 
    // [731] phi (byte) bitmap_line_xdyd::y#6 = (byte) bitmap_line_xdyd::y#2 [phi:bitmap_line_xdyd::@3/bitmap_line_xdyd::@4->bitmap_line_xdyd::@2#1] -- register_copy 
    jmp __b2
    // bitmap_line_xdyd::@2
  __b2:
    // [732] (byte~) bitmap_line_xdyd::$6 ← (byte) bitmap_line_xdyd::x1#6 + (byte) 1 -- vbuaa=vbuz1_plus_1 
    lda.z x1
    clc
    adc #1
    // [733] if((byte) bitmap_line_xdyd::x#2!=(byte~) bitmap_line_xdyd::$6) goto bitmap_line_xdyd::@1 -- vbuz1_neq_vbuaa_then_la1 
    cmp.z x
    bne __b1_from___b2
    jmp __breturn
    // bitmap_line_xdyd::@return
  __breturn:
    // [734] return 
    rts
}
  // bitmap_line_ydxd
// bitmap_line_ydxd(byte zp($e) y, byte zp($16) x, byte zp($13) y1, byte zp($d) yd, byte zp($12) xd)
bitmap_line_ydxd: {
    .label y = $e
    .label x = $16
    .label y1 = $13
    .label yd = $d
    .label xd = $12
    .label e = $f
    // [736] (byte) bitmap_line_ydxd::e#0 ← (byte) bitmap_line_ydxd::xd#2 >> (byte) 1 -- vbuz1=vbuz2_ror_1 
    lda.z xd
    lsr
    sta.z e
    // [737] phi from bitmap_line_ydxd bitmap_line_ydxd::@2 to bitmap_line_ydxd::@1 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1]
  __b1_from_bitmap_line_ydxd:
  __b1_from___b2:
    // [737] phi (byte) bitmap_line_ydxd::e#3 = (byte) bitmap_line_ydxd::e#0 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1#0] -- register_copy 
    // [737] phi (byte) bitmap_line_ydxd::y#2 = (byte) bitmap_line_ydxd::y#7 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1#1] -- register_copy 
    // [737] phi (byte) bitmap_line_ydxd::x#3 = (byte) bitmap_line_ydxd::x#5 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1#2] -- register_copy 
    jmp __b1
    // bitmap_line_ydxd::@1
  __b1:
    // [738] (byte) bitmap_plot::x#3 ← (byte) bitmap_line_ydxd::x#3 -- vbuyy=vbuz1 
    ldy.z x
    // [739] (byte) bitmap_plot::y#3 ← (byte) bitmap_line_ydxd::y#2 -- vbuxx=vbuz1 
    ldx.z y
    // [740] call bitmap_plot 
    // [698] phi from bitmap_line_ydxd::@1 to bitmap_plot [phi:bitmap_line_ydxd::@1->bitmap_plot]
  bitmap_plot_from___b1:
    // [698] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#3 [phi:bitmap_line_ydxd::@1->bitmap_plot#0] -- register_copy 
    // [698] phi (byte) bitmap_plot::x#4 = (byte) bitmap_plot::x#3 [phi:bitmap_line_ydxd::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp __b4
    // bitmap_line_ydxd::@4
  __b4:
    // [741] (byte) bitmap_line_ydxd::y#3 ← ++ (byte) bitmap_line_ydxd::y#2 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [742] (byte) bitmap_line_ydxd::e#1 ← (byte) bitmap_line_ydxd::e#3 + (byte) bitmap_line_ydxd::xd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z e
    clc
    adc.z xd
    sta.z e
    // [743] if((byte) bitmap_line_ydxd::yd#5>=(byte) bitmap_line_ydxd::e#1) goto bitmap_line_ydxd::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z yd
    cmp.z e
    bcs __b2_from___b4
    jmp __b3
    // bitmap_line_ydxd::@3
  __b3:
    // [744] (byte) bitmap_line_ydxd::x#2 ← -- (byte) bitmap_line_ydxd::x#3 -- vbuz1=_dec_vbuz1 
    dec.z x
    // [745] (byte) bitmap_line_ydxd::e#2 ← (byte) bitmap_line_ydxd::e#1 - (byte) bitmap_line_ydxd::yd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z e
    sec
    sbc.z yd
    sta.z e
    // [746] phi from bitmap_line_ydxd::@3 bitmap_line_ydxd::@4 to bitmap_line_ydxd::@2 [phi:bitmap_line_ydxd::@3/bitmap_line_ydxd::@4->bitmap_line_ydxd::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [746] phi (byte) bitmap_line_ydxd::e#6 = (byte) bitmap_line_ydxd::e#2 [phi:bitmap_line_ydxd::@3/bitmap_line_ydxd::@4->bitmap_line_ydxd::@2#0] -- register_copy 
    // [746] phi (byte) bitmap_line_ydxd::x#6 = (byte) bitmap_line_ydxd::x#2 [phi:bitmap_line_ydxd::@3/bitmap_line_ydxd::@4->bitmap_line_ydxd::@2#1] -- register_copy 
    jmp __b2
    // bitmap_line_ydxd::@2
  __b2:
    // [747] (byte~) bitmap_line_ydxd::$6 ← (byte) bitmap_line_ydxd::y1#6 + (byte) 1 -- vbuxx=vbuz1_plus_1 
    ldx.z y1
    inx
    // [748] if((byte) bitmap_line_ydxd::y#3!=(byte~) bitmap_line_ydxd::$6) goto bitmap_line_ydxd::@1 -- vbuz1_neq_vbuxx_then_la1 
    cpx.z y
    bne __b1_from___b2
    jmp __breturn
    // bitmap_line_ydxd::@return
  __breturn:
    // [749] return 
    rts
}
  // bitmap_clear
// Clear all graphics on the bitmap
bitmap_clear: {
    .label bitmap = $10
    .label y = $16
    // [750] (word) bitmap_clear::bitmap#0 ← *((const to_nomodify byte*) bitmap_plot_xhi) w= *((const to_nomodify byte*) bitmap_plot_xlo) -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda bitmap_plot_xlo
    sta.z bitmap
    lda bitmap_plot_xhi
    sta.z bitmap+1
    // [751] (byte*) bitmap_clear::bitmap#5 ← (byte*)(word) bitmap_clear::bitmap#0
    // [752] phi from bitmap_clear to bitmap_clear::@1 [phi:bitmap_clear->bitmap_clear::@1]
  __b1_from_bitmap_clear:
    // [752] phi (byte) bitmap_clear::y#4 = (byte) 0 [phi:bitmap_clear->bitmap_clear::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    // [752] phi (byte*) bitmap_clear::bitmap#3 = (byte*) bitmap_clear::bitmap#5 [phi:bitmap_clear->bitmap_clear::@1#1] -- register_copy 
    jmp __b1
    // [752] phi from bitmap_clear::@3 to bitmap_clear::@1 [phi:bitmap_clear::@3->bitmap_clear::@1]
  __b1_from___b3:
    // [752] phi (byte) bitmap_clear::y#4 = (byte) bitmap_clear::y#1 [phi:bitmap_clear::@3->bitmap_clear::@1#0] -- register_copy 
    // [752] phi (byte*) bitmap_clear::bitmap#3 = (byte*) bitmap_clear::bitmap#1 [phi:bitmap_clear::@3->bitmap_clear::@1#1] -- register_copy 
    jmp __b1
    // bitmap_clear::@1
  __b1:
    // [753] phi from bitmap_clear::@1 to bitmap_clear::@2 [phi:bitmap_clear::@1->bitmap_clear::@2]
  __b2_from___b1:
    // [753] phi (byte) bitmap_clear::x#2 = (byte) 0 [phi:bitmap_clear::@1->bitmap_clear::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [753] phi (byte*) bitmap_clear::bitmap#2 = (byte*) bitmap_clear::bitmap#3 [phi:bitmap_clear::@1->bitmap_clear::@2#1] -- register_copy 
    jmp __b2
    // [753] phi from bitmap_clear::@2 to bitmap_clear::@2 [phi:bitmap_clear::@2->bitmap_clear::@2]
  __b2_from___b2:
    // [753] phi (byte) bitmap_clear::x#2 = (byte) bitmap_clear::x#1 [phi:bitmap_clear::@2->bitmap_clear::@2#0] -- register_copy 
    // [753] phi (byte*) bitmap_clear::bitmap#2 = (byte*) bitmap_clear::bitmap#1 [phi:bitmap_clear::@2->bitmap_clear::@2#1] -- register_copy 
    jmp __b2
    // bitmap_clear::@2
  __b2:
    // [754] *((byte*) bitmap_clear::bitmap#2) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (bitmap),y
    // [755] (byte*) bitmap_clear::bitmap#1 ← ++ (byte*) bitmap_clear::bitmap#2 -- pbuz1=_inc_pbuz1 
    inc.z bitmap
    bne !+
    inc.z bitmap+1
  !:
    // [756] (byte) bitmap_clear::x#1 ← ++ (byte) bitmap_clear::x#2 -- vbuxx=_inc_vbuxx 
    inx
    // [757] if((byte) bitmap_clear::x#1!=(byte) $c8) goto bitmap_clear::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$c8
    bne __b2_from___b2
    jmp __b3
    // bitmap_clear::@3
  __b3:
    // [758] (byte) bitmap_clear::y#1 ← ++ (byte) bitmap_clear::y#4 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [759] if((byte) bitmap_clear::y#1!=(byte) $28) goto bitmap_clear::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z y
    bne __b1_from___b3
    jmp __breturn
    // bitmap_clear::@return
  __breturn:
    // [760] return 
    rts
}
  // bitmap_init
// Initialize the bitmap plotter tables for a specific bitmap
bitmap_init: {
    .label __10 = $21
    .label yoffs = $14
    // [762] phi from bitmap_init to bitmap_init::@1 [phi:bitmap_init->bitmap_init::@1]
  __b1_from_bitmap_init:
    // [762] phi (byte) bitmap_init::bits#3 = (byte) $80 [phi:bitmap_init->bitmap_init::@1#0] -- vbuyy=vbuc1 
    ldy #$80
    // [762] phi (byte) bitmap_init::x#2 = (byte) 0 [phi:bitmap_init->bitmap_init::@1#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [762] phi from bitmap_init::@2 to bitmap_init::@1 [phi:bitmap_init::@2->bitmap_init::@1]
  __b1_from___b2:
    // [762] phi (byte) bitmap_init::bits#3 = (byte) bitmap_init::bits#4 [phi:bitmap_init::@2->bitmap_init::@1#0] -- register_copy 
    // [762] phi (byte) bitmap_init::x#2 = (byte) bitmap_init::x#1 [phi:bitmap_init::@2->bitmap_init::@1#1] -- register_copy 
    jmp __b1
    // bitmap_init::@1
  __b1:
    // [763] (byte~) bitmap_init::$0 ← (byte) bitmap_init::x#2 & (byte) $f8 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f8
    // [764] *((const to_nomodify byte*) bitmap_plot_xlo + (byte) bitmap_init::x#2) ← (byte~) bitmap_init::$0 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_xlo,x
    // [765] *((const to_nomodify byte*) bitmap_plot_xhi + (byte) bitmap_init::x#2) ← >(const nomodify byte*) VIC_BITMAP -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #>VIC_BITMAP
    sta bitmap_plot_xhi,x
    // [766] *((const to_nomodify byte*) bitmap_plot_bit + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3 -- pbuc1_derefidx_vbuxx=vbuyy 
    tya
    sta bitmap_plot_bit,x
    // [767] (byte) bitmap_init::bits#1 ← (byte) bitmap_init::bits#3 >> (byte) 1 -- vbuyy=vbuyy_ror_1 
    tya
    lsr
    tay
    // [768] if((byte) bitmap_init::bits#1!=(byte) 0) goto bitmap_init::@6 -- vbuyy_neq_0_then_la1 
    cpy #0
    bne __b6_from___b1
    // [770] phi from bitmap_init::@1 to bitmap_init::@2 [phi:bitmap_init::@1->bitmap_init::@2]
  __b2_from___b1:
    // [770] phi (byte) bitmap_init::bits#4 = (byte) $80 [phi:bitmap_init::@1->bitmap_init::@2#0] -- vbuyy=vbuc1 
    ldy #$80
    jmp __b2
    // [769] phi from bitmap_init::@1 to bitmap_init::@6 [phi:bitmap_init::@1->bitmap_init::@6]
  __b6_from___b1:
    jmp __b6
    // bitmap_init::@6
  __b6:
    // [770] phi from bitmap_init::@6 to bitmap_init::@2 [phi:bitmap_init::@6->bitmap_init::@2]
  __b2_from___b6:
    // [770] phi (byte) bitmap_init::bits#4 = (byte) bitmap_init::bits#1 [phi:bitmap_init::@6->bitmap_init::@2#0] -- register_copy 
    jmp __b2
    // bitmap_init::@2
  __b2:
    // [771] (byte) bitmap_init::x#1 ← ++ (byte) bitmap_init::x#2 -- vbuxx=_inc_vbuxx 
    inx
    // [772] if((byte) bitmap_init::x#1!=(byte) 0) goto bitmap_init::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b1_from___b2
    // [773] phi from bitmap_init::@2 to bitmap_init::@3 [phi:bitmap_init::@2->bitmap_init::@3]
  __b3_from___b2:
    // [773] phi (byte*) bitmap_init::yoffs#2 = (byte*) 0 [phi:bitmap_init::@2->bitmap_init::@3#0] -- pbuz1=pbuc1 
    lda #<0
    sta.z yoffs
    lda #>0
    sta.z yoffs+1
    // [773] phi (byte) bitmap_init::y#2 = (byte) 0 [phi:bitmap_init::@2->bitmap_init::@3#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b3
    // [773] phi from bitmap_init::@4 to bitmap_init::@3 [phi:bitmap_init::@4->bitmap_init::@3]
  __b3_from___b4:
    // [773] phi (byte*) bitmap_init::yoffs#2 = (byte*) bitmap_init::yoffs#4 [phi:bitmap_init::@4->bitmap_init::@3#0] -- register_copy 
    // [773] phi (byte) bitmap_init::y#2 = (byte) bitmap_init::y#1 [phi:bitmap_init::@4->bitmap_init::@3#1] -- register_copy 
    jmp __b3
    // bitmap_init::@3
  __b3:
    // [774] (byte~) bitmap_init::$10 ← (byte) bitmap_init::y#2 & (byte) 7 -- vbuz1=vbuxx_band_vbuc1 
    lda #7
    sax.z __10
    // [775] (byte~) bitmap_init::$7 ← < (byte*) bitmap_init::yoffs#2 -- vbuaa=_lo_pbuz1 
    lda.z yoffs
    // [776] (byte~) bitmap_init::$8 ← (byte~) bitmap_init::$10 | (byte~) bitmap_init::$7 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __10
    // [777] *((const to_nomodify byte*) bitmap_plot_ylo + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$8 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_ylo,x
    // [778] (byte~) bitmap_init::$9 ← > (byte*) bitmap_init::yoffs#2 -- vbuaa=_hi_pbuz1 
    lda.z yoffs+1
    // [779] *((const to_nomodify byte*) bitmap_plot_yhi + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$9 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_yhi,x
    // [780] if((byte~) bitmap_init::$10!=(byte) 7) goto bitmap_init::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp.z __10
    bne __b4_from___b3
    jmp __b5
    // bitmap_init::@5
  __b5:
    // [781] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (word)(number) $28*(number) 8 -- pbuz1=pbuz1_plus_vwuc1 
    clc
    lda.z yoffs
    adc #<$28*8
    sta.z yoffs
    lda.z yoffs+1
    adc #>$28*8
    sta.z yoffs+1
    // [782] phi from bitmap_init::@3 bitmap_init::@5 to bitmap_init::@4 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4]
  __b4_from___b3:
  __b4_from___b5:
    // [782] phi (byte*) bitmap_init::yoffs#4 = (byte*) bitmap_init::yoffs#2 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4#0] -- register_copy 
    jmp __b4
    // bitmap_init::@4
  __b4:
    // [783] (byte) bitmap_init::y#1 ← ++ (byte) bitmap_init::y#2 -- vbuxx=_inc_vbuxx 
    inx
    // [784] if((byte) bitmap_init::y#1!=(byte) 0) goto bitmap_init::@3 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b3_from___b4
    jmp __breturn
    // bitmap_init::@return
  __breturn:
    // [785] return 
    rts
}
  // gfx_init_charset
gfx_init_charset: {
    .label charset = $10
    .label chargen = $14
    .label c = $21
    // [786] *((const nomodify byte*) PROCPORT) ← (byte) $32 -- _deref_pbuc1=vbuc2 
    lda #$32
    sta PROCPORT
    // [787] phi from gfx_init_charset to gfx_init_charset::@1 [phi:gfx_init_charset->gfx_init_charset::@1]
  __b1_from_gfx_init_charset:
    // [787] phi (byte) gfx_init_charset::c#4 = (byte) 0 [phi:gfx_init_charset->gfx_init_charset::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    // [787] phi (byte*) gfx_init_charset::charset#3 = (const nomodify byte*) VIC_CHARSET_ROM [phi:gfx_init_charset->gfx_init_charset::@1#1] -- pbuz1=pbuc1 
    lda #<VIC_CHARSET_ROM
    sta.z charset
    lda #>VIC_CHARSET_ROM
    sta.z charset+1
    // [787] phi (byte*) gfx_init_charset::chargen#3 = (const nomodify byte*) CHARGEN [phi:gfx_init_charset->gfx_init_charset::@1#2] -- pbuz1=pbuc1 
    lda #<CHARGEN
    sta.z chargen
    lda #>CHARGEN
    sta.z chargen+1
    jmp __b1
    // [787] phi from gfx_init_charset::@3 to gfx_init_charset::@1 [phi:gfx_init_charset::@3->gfx_init_charset::@1]
  __b1_from___b3:
    // [787] phi (byte) gfx_init_charset::c#4 = (byte) gfx_init_charset::c#1 [phi:gfx_init_charset::@3->gfx_init_charset::@1#0] -- register_copy 
    // [787] phi (byte*) gfx_init_charset::charset#3 = (byte*) gfx_init_charset::charset#1 [phi:gfx_init_charset::@3->gfx_init_charset::@1#1] -- register_copy 
    // [787] phi (byte*) gfx_init_charset::chargen#3 = (byte*) gfx_init_charset::chargen#1 [phi:gfx_init_charset::@3->gfx_init_charset::@1#2] -- register_copy 
    jmp __b1
    // gfx_init_charset::@1
  __b1:
    // [788] phi from gfx_init_charset::@1 to gfx_init_charset::@2 [phi:gfx_init_charset::@1->gfx_init_charset::@2]
  __b2_from___b1:
    // [788] phi (byte) gfx_init_charset::l#2 = (byte) 0 [phi:gfx_init_charset::@1->gfx_init_charset::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [788] phi (byte*) gfx_init_charset::charset#2 = (byte*) gfx_init_charset::charset#3 [phi:gfx_init_charset::@1->gfx_init_charset::@2#1] -- register_copy 
    // [788] phi (byte*) gfx_init_charset::chargen#2 = (byte*) gfx_init_charset::chargen#3 [phi:gfx_init_charset::@1->gfx_init_charset::@2#2] -- register_copy 
    jmp __b2
    // [788] phi from gfx_init_charset::@2 to gfx_init_charset::@2 [phi:gfx_init_charset::@2->gfx_init_charset::@2]
  __b2_from___b2:
    // [788] phi (byte) gfx_init_charset::l#2 = (byte) gfx_init_charset::l#1 [phi:gfx_init_charset::@2->gfx_init_charset::@2#0] -- register_copy 
    // [788] phi (byte*) gfx_init_charset::charset#2 = (byte*) gfx_init_charset::charset#1 [phi:gfx_init_charset::@2->gfx_init_charset::@2#1] -- register_copy 
    // [788] phi (byte*) gfx_init_charset::chargen#2 = (byte*) gfx_init_charset::chargen#1 [phi:gfx_init_charset::@2->gfx_init_charset::@2#2] -- register_copy 
    jmp __b2
    // gfx_init_charset::@2
  __b2:
    // [789] *((byte*) gfx_init_charset::charset#2) ← *((byte*) gfx_init_charset::chargen#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (chargen),y
    ldy #0
    sta (charset),y
    // [790] (byte*) gfx_init_charset::charset#1 ← ++ (byte*) gfx_init_charset::charset#2 -- pbuz1=_inc_pbuz1 
    inc.z charset
    bne !+
    inc.z charset+1
  !:
    // [791] (byte*) gfx_init_charset::chargen#1 ← ++ (byte*) gfx_init_charset::chargen#2 -- pbuz1=_inc_pbuz1 
    inc.z chargen
    bne !+
    inc.z chargen+1
  !:
    // [792] (byte) gfx_init_charset::l#1 ← ++ (byte) gfx_init_charset::l#2 -- vbuxx=_inc_vbuxx 
    inx
    // [793] if((byte) gfx_init_charset::l#1!=(byte) 8) goto gfx_init_charset::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne __b2_from___b2
    jmp __b3
    // gfx_init_charset::@3
  __b3:
    // [794] (byte) gfx_init_charset::c#1 ← ++ (byte) gfx_init_charset::c#4 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [795] if((byte) gfx_init_charset::c#1!=(byte) 0) goto gfx_init_charset::@1 -- vbuz1_neq_0_then_la1 
    lda.z c
    cmp #0
    bne __b1_from___b3
    jmp __b4
    // gfx_init_charset::@4
  __b4:
    // [796] *((const nomodify byte*) PROCPORT) ← (byte) $37 -- _deref_pbuc1=vbuc2 
    lda #$37
    sta PROCPORT
    jmp __breturn
    // gfx_init_charset::@return
  __breturn:
    // [797] return 
    rts
}
  // gfx_init_screen4
// Initialize VIC screen 4 - all chars are 00
gfx_init_screen4: {
    .label ch = $10
    .label cy = $e
    // [799] phi from gfx_init_screen4 to gfx_init_screen4::@1 [phi:gfx_init_screen4->gfx_init_screen4::@1]
  __b1_from_gfx_init_screen4:
    // [799] phi (byte) gfx_init_screen4::cy#4 = (byte) 0 [phi:gfx_init_screen4->gfx_init_screen4::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    // [799] phi (byte*) gfx_init_screen4::ch#3 = (const nomodify byte*) VIC_SCREEN4 [phi:gfx_init_screen4->gfx_init_screen4::@1#1] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN4
    sta.z ch
    lda #>VIC_SCREEN4
    sta.z ch+1
    jmp __b1
    // [799] phi from gfx_init_screen4::@3 to gfx_init_screen4::@1 [phi:gfx_init_screen4::@3->gfx_init_screen4::@1]
  __b1_from___b3:
    // [799] phi (byte) gfx_init_screen4::cy#4 = (byte) gfx_init_screen4::cy#1 [phi:gfx_init_screen4::@3->gfx_init_screen4::@1#0] -- register_copy 
    // [799] phi (byte*) gfx_init_screen4::ch#3 = (byte*) gfx_init_screen4::ch#1 [phi:gfx_init_screen4::@3->gfx_init_screen4::@1#1] -- register_copy 
    jmp __b1
    // gfx_init_screen4::@1
  __b1:
    // [800] phi from gfx_init_screen4::@1 to gfx_init_screen4::@2 [phi:gfx_init_screen4::@1->gfx_init_screen4::@2]
  __b2_from___b1:
    // [800] phi (byte) gfx_init_screen4::cx#2 = (byte) 0 [phi:gfx_init_screen4::@1->gfx_init_screen4::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [800] phi (byte*) gfx_init_screen4::ch#2 = (byte*) gfx_init_screen4::ch#3 [phi:gfx_init_screen4::@1->gfx_init_screen4::@2#1] -- register_copy 
    jmp __b2
    // [800] phi from gfx_init_screen4::@2 to gfx_init_screen4::@2 [phi:gfx_init_screen4::@2->gfx_init_screen4::@2]
  __b2_from___b2:
    // [800] phi (byte) gfx_init_screen4::cx#2 = (byte) gfx_init_screen4::cx#1 [phi:gfx_init_screen4::@2->gfx_init_screen4::@2#0] -- register_copy 
    // [800] phi (byte*) gfx_init_screen4::ch#2 = (byte*) gfx_init_screen4::ch#1 [phi:gfx_init_screen4::@2->gfx_init_screen4::@2#1] -- register_copy 
    jmp __b2
    // gfx_init_screen4::@2
  __b2:
    // [801] *((byte*) gfx_init_screen4::ch#2) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (ch),y
    // [802] (byte*) gfx_init_screen4::ch#1 ← ++ (byte*) gfx_init_screen4::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // [803] (byte) gfx_init_screen4::cx#1 ← ++ (byte) gfx_init_screen4::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [804] if((byte) gfx_init_screen4::cx#1!=(byte) $28) goto gfx_init_screen4::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2_from___b2
    jmp __b3
    // gfx_init_screen4::@3
  __b3:
    // [805] (byte) gfx_init_screen4::cy#1 ← ++ (byte) gfx_init_screen4::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [806] if((byte) gfx_init_screen4::cy#1!=(byte) $19) goto gfx_init_screen4::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b1_from___b3
    jmp __breturn
    // gfx_init_screen4::@return
  __breturn:
    // [807] return 
    rts
}
  // gfx_init_screen3
// Initialize VIC screen 3 ( value is %00xx00yy where xx is xpos and yy is ypos
gfx_init_screen3: {
    .label __1 = $22
    .label ch = $10
    .label cy = $f
    // [809] phi from gfx_init_screen3 to gfx_init_screen3::@1 [phi:gfx_init_screen3->gfx_init_screen3::@1]
  __b1_from_gfx_init_screen3:
    // [809] phi (byte*) gfx_init_screen3::ch#3 = (const nomodify byte*) VIC_SCREEN3 [phi:gfx_init_screen3->gfx_init_screen3::@1#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN3
    sta.z ch
    lda #>VIC_SCREEN3
    sta.z ch+1
    // [809] phi (byte) gfx_init_screen3::cy#4 = (byte) 0 [phi:gfx_init_screen3->gfx_init_screen3::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    jmp __b1
    // [809] phi from gfx_init_screen3::@3 to gfx_init_screen3::@1 [phi:gfx_init_screen3::@3->gfx_init_screen3::@1]
  __b1_from___b3:
    // [809] phi (byte*) gfx_init_screen3::ch#3 = (byte*) gfx_init_screen3::ch#1 [phi:gfx_init_screen3::@3->gfx_init_screen3::@1#0] -- register_copy 
    // [809] phi (byte) gfx_init_screen3::cy#4 = (byte) gfx_init_screen3::cy#1 [phi:gfx_init_screen3::@3->gfx_init_screen3::@1#1] -- register_copy 
    jmp __b1
    // gfx_init_screen3::@1
  __b1:
    // [810] phi from gfx_init_screen3::@1 to gfx_init_screen3::@2 [phi:gfx_init_screen3::@1->gfx_init_screen3::@2]
  __b2_from___b1:
    // [810] phi (byte*) gfx_init_screen3::ch#2 = (byte*) gfx_init_screen3::ch#3 [phi:gfx_init_screen3::@1->gfx_init_screen3::@2#0] -- register_copy 
    // [810] phi (byte) gfx_init_screen3::cx#2 = (byte) 0 [phi:gfx_init_screen3::@1->gfx_init_screen3::@2#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b2
    // [810] phi from gfx_init_screen3::@2 to gfx_init_screen3::@2 [phi:gfx_init_screen3::@2->gfx_init_screen3::@2]
  __b2_from___b2:
    // [810] phi (byte*) gfx_init_screen3::ch#2 = (byte*) gfx_init_screen3::ch#1 [phi:gfx_init_screen3::@2->gfx_init_screen3::@2#0] -- register_copy 
    // [810] phi (byte) gfx_init_screen3::cx#2 = (byte) gfx_init_screen3::cx#1 [phi:gfx_init_screen3::@2->gfx_init_screen3::@2#1] -- register_copy 
    jmp __b2
    // gfx_init_screen3::@2
  __b2:
    // [811] (byte~) gfx_init_screen3::$0 ← (byte) gfx_init_screen3::cx#2 & (byte) 3 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #3
    // [812] (byte~) gfx_init_screen3::$1 ← (byte~) gfx_init_screen3::$0 << (byte) 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta.z __1
    // [813] (byte~) gfx_init_screen3::$2 ← (byte) gfx_init_screen3::cy#4 & (byte) 3 -- vbuaa=vbuz1_band_vbuc1 
    lda #3
    and.z cy
    // [814] (byte~) gfx_init_screen3::$3 ← (byte~) gfx_init_screen3::$1 | (byte~) gfx_init_screen3::$2 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __1
    // [815] *((byte*) gfx_init_screen3::ch#2) ← (byte~) gfx_init_screen3::$3 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
    // [816] (byte*) gfx_init_screen3::ch#1 ← ++ (byte*) gfx_init_screen3::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // [817] (byte) gfx_init_screen3::cx#1 ← ++ (byte) gfx_init_screen3::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [818] if((byte) gfx_init_screen3::cx#1!=(byte) $28) goto gfx_init_screen3::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2_from___b2
    jmp __b3
    // gfx_init_screen3::@3
  __b3:
    // [819] (byte) gfx_init_screen3::cy#1 ← ++ (byte) gfx_init_screen3::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [820] if((byte) gfx_init_screen3::cy#1!=(byte) $19) goto gfx_init_screen3::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b1_from___b3
    jmp __breturn
    // gfx_init_screen3::@return
  __breturn:
    // [821] return 
    rts
}
  // gfx_init_screen2
// Initialize VIC screen 2 ( value is %ccccrrrr where cccc is (x+y mod $f) and rrrr is %1111-%cccc)
gfx_init_screen2: {
    .label col2 = $22
    .label ch = $10
    .label cy = $12
    // [823] phi from gfx_init_screen2 to gfx_init_screen2::@1 [phi:gfx_init_screen2->gfx_init_screen2::@1]
  __b1_from_gfx_init_screen2:
    // [823] phi (byte*) gfx_init_screen2::ch#3 = (const nomodify byte*) VIC_SCREEN2 [phi:gfx_init_screen2->gfx_init_screen2::@1#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN2
    sta.z ch
    lda #>VIC_SCREEN2
    sta.z ch+1
    // [823] phi (byte) gfx_init_screen2::cy#4 = (byte) 0 [phi:gfx_init_screen2->gfx_init_screen2::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    jmp __b1
    // [823] phi from gfx_init_screen2::@3 to gfx_init_screen2::@1 [phi:gfx_init_screen2::@3->gfx_init_screen2::@1]
  __b1_from___b3:
    // [823] phi (byte*) gfx_init_screen2::ch#3 = (byte*) gfx_init_screen2::ch#1 [phi:gfx_init_screen2::@3->gfx_init_screen2::@1#0] -- register_copy 
    // [823] phi (byte) gfx_init_screen2::cy#4 = (byte) gfx_init_screen2::cy#1 [phi:gfx_init_screen2::@3->gfx_init_screen2::@1#1] -- register_copy 
    jmp __b1
    // gfx_init_screen2::@1
  __b1:
    // [824] phi from gfx_init_screen2::@1 to gfx_init_screen2::@2 [phi:gfx_init_screen2::@1->gfx_init_screen2::@2]
  __b2_from___b1:
    // [824] phi (byte*) gfx_init_screen2::ch#2 = (byte*) gfx_init_screen2::ch#3 [phi:gfx_init_screen2::@1->gfx_init_screen2::@2#0] -- register_copy 
    // [824] phi (byte) gfx_init_screen2::cx#2 = (byte) 0 [phi:gfx_init_screen2::@1->gfx_init_screen2::@2#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b2
    // [824] phi from gfx_init_screen2::@2 to gfx_init_screen2::@2 [phi:gfx_init_screen2::@2->gfx_init_screen2::@2]
  __b2_from___b2:
    // [824] phi (byte*) gfx_init_screen2::ch#2 = (byte*) gfx_init_screen2::ch#1 [phi:gfx_init_screen2::@2->gfx_init_screen2::@2#0] -- register_copy 
    // [824] phi (byte) gfx_init_screen2::cx#2 = (byte) gfx_init_screen2::cx#1 [phi:gfx_init_screen2::@2->gfx_init_screen2::@2#1] -- register_copy 
    jmp __b2
    // gfx_init_screen2::@2
  __b2:
    // [825] (byte~) gfx_init_screen2::$0 ← (byte) gfx_init_screen2::cx#2 + (byte) gfx_init_screen2::cy#4 -- vbuaa=vbuxx_plus_vbuz1 
    txa
    clc
    adc.z cy
    // [826] (byte) gfx_init_screen2::col#0 ← (byte~) gfx_init_screen2::$0 & (byte) $f -- vbuyy=vbuaa_band_vbuc1 
    and #$f
    tay
    // [827] (byte) gfx_init_screen2::col2#0 ← (byte) $f - (byte) gfx_init_screen2::col#0 -- vbuz1=vbuc1_minus_vbuyy 
    tya
    eor #$ff
    clc
    adc #$f+1
    sta.z col2
    // [828] (byte~) gfx_init_screen2::$3 ← (byte) gfx_init_screen2::col#0 << (byte) 4 -- vbuaa=vbuyy_rol_4 
    tya
    asl
    asl
    asl
    asl
    // [829] (byte~) gfx_init_screen2::$4 ← (byte~) gfx_init_screen2::$3 | (byte) gfx_init_screen2::col2#0 -- vbuaa=vbuaa_bor_vbuz1 
    ora.z col2
    // [830] *((byte*) gfx_init_screen2::ch#2) ← (byte~) gfx_init_screen2::$4 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
    // [831] (byte*) gfx_init_screen2::ch#1 ← ++ (byte*) gfx_init_screen2::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // [832] (byte) gfx_init_screen2::cx#1 ← ++ (byte) gfx_init_screen2::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [833] if((byte) gfx_init_screen2::cx#1!=(byte) $28) goto gfx_init_screen2::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2_from___b2
    jmp __b3
    // gfx_init_screen2::@3
  __b3:
    // [834] (byte) gfx_init_screen2::cy#1 ← ++ (byte) gfx_init_screen2::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [835] if((byte) gfx_init_screen2::cy#1!=(byte) $19) goto gfx_init_screen2::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b1_from___b3
    jmp __breturn
    // gfx_init_screen2::@return
  __breturn:
    // [836] return 
    rts
}
  // gfx_init_screen1
// Initialize VIC screen 1 ( value is %0000cccc where cccc is (x+y mod $f))
gfx_init_screen1: {
    .label ch = $14
    .label cy = $12
    // [838] phi from gfx_init_screen1 to gfx_init_screen1::@1 [phi:gfx_init_screen1->gfx_init_screen1::@1]
  __b1_from_gfx_init_screen1:
    // [838] phi (byte*) gfx_init_screen1::ch#3 = (const nomodify byte*) VIC_SCREEN1 [phi:gfx_init_screen1->gfx_init_screen1::@1#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN1
    sta.z ch
    lda #>VIC_SCREEN1
    sta.z ch+1
    // [838] phi (byte) gfx_init_screen1::cy#4 = (byte) 0 [phi:gfx_init_screen1->gfx_init_screen1::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    jmp __b1
    // [838] phi from gfx_init_screen1::@3 to gfx_init_screen1::@1 [phi:gfx_init_screen1::@3->gfx_init_screen1::@1]
  __b1_from___b3:
    // [838] phi (byte*) gfx_init_screen1::ch#3 = (byte*) gfx_init_screen1::ch#1 [phi:gfx_init_screen1::@3->gfx_init_screen1::@1#0] -- register_copy 
    // [838] phi (byte) gfx_init_screen1::cy#4 = (byte) gfx_init_screen1::cy#1 [phi:gfx_init_screen1::@3->gfx_init_screen1::@1#1] -- register_copy 
    jmp __b1
    // gfx_init_screen1::@1
  __b1:
    // [839] phi from gfx_init_screen1::@1 to gfx_init_screen1::@2 [phi:gfx_init_screen1::@1->gfx_init_screen1::@2]
  __b2_from___b1:
    // [839] phi (byte*) gfx_init_screen1::ch#2 = (byte*) gfx_init_screen1::ch#3 [phi:gfx_init_screen1::@1->gfx_init_screen1::@2#0] -- register_copy 
    // [839] phi (byte) gfx_init_screen1::cx#2 = (byte) 0 [phi:gfx_init_screen1::@1->gfx_init_screen1::@2#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b2
    // [839] phi from gfx_init_screen1::@2 to gfx_init_screen1::@2 [phi:gfx_init_screen1::@2->gfx_init_screen1::@2]
  __b2_from___b2:
    // [839] phi (byte*) gfx_init_screen1::ch#2 = (byte*) gfx_init_screen1::ch#1 [phi:gfx_init_screen1::@2->gfx_init_screen1::@2#0] -- register_copy 
    // [839] phi (byte) gfx_init_screen1::cx#2 = (byte) gfx_init_screen1::cx#1 [phi:gfx_init_screen1::@2->gfx_init_screen1::@2#1] -- register_copy 
    jmp __b2
    // gfx_init_screen1::@2
  __b2:
    // [840] (byte~) gfx_init_screen1::$0 ← (byte) gfx_init_screen1::cx#2 + (byte) gfx_init_screen1::cy#4 -- vbuaa=vbuxx_plus_vbuz1 
    txa
    clc
    adc.z cy
    // [841] (byte~) gfx_init_screen1::$1 ← (byte~) gfx_init_screen1::$0 & (byte) $f -- vbuaa=vbuaa_band_vbuc1 
    and #$f
    // [842] *((byte*) gfx_init_screen1::ch#2) ← (byte~) gfx_init_screen1::$1 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
    // [843] (byte*) gfx_init_screen1::ch#1 ← ++ (byte*) gfx_init_screen1::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // [844] (byte) gfx_init_screen1::cx#1 ← ++ (byte) gfx_init_screen1::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [845] if((byte) gfx_init_screen1::cx#1!=(byte) $28) goto gfx_init_screen1::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2_from___b2
    jmp __b3
    // gfx_init_screen1::@3
  __b3:
    // [846] (byte) gfx_init_screen1::cy#1 ← ++ (byte) gfx_init_screen1::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [847] if((byte) gfx_init_screen1::cy#1!=(byte) $19) goto gfx_init_screen1::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b1_from___b3
    jmp __breturn
    // gfx_init_screen1::@return
  __breturn:
    // [848] return 
    rts
}
  // gfx_init_screen0
// Initialize VIC screen 0 ( value is %yyyyxxxx where yyyy is ypos and xxxx is xpos)
gfx_init_screen0: {
    .label __1 = $22
    .label ch = $14
    .label cy = $13
    // [850] phi from gfx_init_screen0 to gfx_init_screen0::@1 [phi:gfx_init_screen0->gfx_init_screen0::@1]
  __b1_from_gfx_init_screen0:
    // [850] phi (byte*) gfx_init_screen0::ch#3 = (const nomodify byte*) VIC_SCREEN0 [phi:gfx_init_screen0->gfx_init_screen0::@1#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN0
    sta.z ch
    lda #>VIC_SCREEN0
    sta.z ch+1
    // [850] phi (byte) gfx_init_screen0::cy#4 = (byte) 0 [phi:gfx_init_screen0->gfx_init_screen0::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    jmp __b1
    // [850] phi from gfx_init_screen0::@3 to gfx_init_screen0::@1 [phi:gfx_init_screen0::@3->gfx_init_screen0::@1]
  __b1_from___b3:
    // [850] phi (byte*) gfx_init_screen0::ch#3 = (byte*) gfx_init_screen0::ch#1 [phi:gfx_init_screen0::@3->gfx_init_screen0::@1#0] -- register_copy 
    // [850] phi (byte) gfx_init_screen0::cy#4 = (byte) gfx_init_screen0::cy#1 [phi:gfx_init_screen0::@3->gfx_init_screen0::@1#1] -- register_copy 
    jmp __b1
    // gfx_init_screen0::@1
  __b1:
    // [851] phi from gfx_init_screen0::@1 to gfx_init_screen0::@2 [phi:gfx_init_screen0::@1->gfx_init_screen0::@2]
  __b2_from___b1:
    // [851] phi (byte*) gfx_init_screen0::ch#2 = (byte*) gfx_init_screen0::ch#3 [phi:gfx_init_screen0::@1->gfx_init_screen0::@2#0] -- register_copy 
    // [851] phi (byte) gfx_init_screen0::cx#2 = (byte) 0 [phi:gfx_init_screen0::@1->gfx_init_screen0::@2#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b2
    // [851] phi from gfx_init_screen0::@2 to gfx_init_screen0::@2 [phi:gfx_init_screen0::@2->gfx_init_screen0::@2]
  __b2_from___b2:
    // [851] phi (byte*) gfx_init_screen0::ch#2 = (byte*) gfx_init_screen0::ch#1 [phi:gfx_init_screen0::@2->gfx_init_screen0::@2#0] -- register_copy 
    // [851] phi (byte) gfx_init_screen0::cx#2 = (byte) gfx_init_screen0::cx#1 [phi:gfx_init_screen0::@2->gfx_init_screen0::@2#1] -- register_copy 
    jmp __b2
    // gfx_init_screen0::@2
  __b2:
    // [852] (byte~) gfx_init_screen0::$0 ← (byte) gfx_init_screen0::cy#4 & (byte) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z cy
    // [853] (byte~) gfx_init_screen0::$1 ← (byte~) gfx_init_screen0::$0 << (byte) 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta.z __1
    // [854] (byte~) gfx_init_screen0::$2 ← (byte) gfx_init_screen0::cx#2 & (byte) $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
    // [855] (byte~) gfx_init_screen0::$3 ← (byte~) gfx_init_screen0::$1 | (byte~) gfx_init_screen0::$2 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __1
    // [856] *((byte*) gfx_init_screen0::ch#2) ← (byte~) gfx_init_screen0::$3 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
    // [857] (byte*) gfx_init_screen0::ch#1 ← ++ (byte*) gfx_init_screen0::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // [858] (byte) gfx_init_screen0::cx#1 ← ++ (byte) gfx_init_screen0::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [859] if((byte) gfx_init_screen0::cx#1!=(byte) $28) goto gfx_init_screen0::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2_from___b2
    jmp __b3
    // gfx_init_screen0::@3
  __b3:
    // [860] (byte) gfx_init_screen0::cy#1 ← ++ (byte) gfx_init_screen0::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [861] if((byte) gfx_init_screen0::cy#1!=(byte) $19) goto gfx_init_screen0::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b1_from___b3
    jmp __breturn
    // gfx_init_screen0::@return
  __breturn:
    // [862] return 
    rts
}
  // keyboard_init
// Initialize keyboard reading by setting CIA#$ Data Direction Registers
keyboard_init: {
    // [863] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) ← (byte) $ff -- _deref_pbuc1=vbuc2 
    // Keyboard Matrix Columns Write Mode
    lda #$ff
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR
    // [864] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_B_DDR) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Keyboard Matrix Columns Read Mode
    lda #0
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_B_DDR
    jmp __breturn
    // keyboard_init::@return
  __breturn:
    // [865] return 
    rts
}
  // File Data
  // Default vallues for the palette
  DTV_PALETTE_DEFAULT: .byte 0, $f, $36, $be, $58, $db, $86, $ff, $29, $26, $3b, 5, 7, $df, $9a, $a
  print_hextab: .text "0123456789abcdef"
  // Keyboard row bitmask as expected by CIA#1 Port A when reading a specific keyboard matrix row (rows are numbered 0-7)
  keyboard_matrix_row_bitmask: .byte $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f
  // Keyboard matrix column bitmasks for a specific keybooard matrix column when reading the keyboard. (columns are numbered 0-7)
  keyboard_matrix_col_bitmask: .byte 1, 2, 4, 8, $10, $20, $40, $80
  // Keyboard event buffer. Contains keycodes for key presses/releases. Presses are represented by the keycode. Releases by keycode | $40. The buffer is filled by keyboard_scan()
  keyboard_events: .fill 8, 0
  // The values scanned values for each row. Set by keyboard_scan() and used by keyboard_get_event()
  keyboard_scan_values: .fill 8, 0
  // Tables for the plotter - initialized by calling bitmap_draw_init();
  bitmap_plot_xlo: .fill $100, 0
  bitmap_plot_xhi: .fill $100, 0
  bitmap_plot_ylo: .fill $100, 0
  bitmap_plot_yhi: .fill $100, 0
  bitmap_plot_bit: .fill $100, 0
  // Charset ROM
  FORM_TEXT: .text " C64 DTV Graphics Mode Explorer         @                                        @ PRESET 0 Standard Charset              @                                        @ CONTROL        PLANE  A     VIC II     @ bmm        0   pattern p0   screen s0  @ mcm        0   start   00   gfx    g0  @ ecm        0   step    00   colors c0  @ hicolor    0   modulo  00              @ linear     0                COLORS     @ color off  0   PLANE  B     palet   0  @ chunky     0   pattern p0   bgcol0 00  @ border off 0   start   00   bgcol1 00  @ overscan   0   step    00   bgcol2 00  @                modulo  00   bgcol3 00  @"
  .byte 0
  FORM_COLS: .text "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@                                        @aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@                                        @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm              @ nnnnnnnnnnnn                jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"
  .byte 0
  // Form fields x/y-positions
  form_fields_x: .byte 8, $c, $c, $c, $c, $c, $c, $c, $c, $c, $19, $18, $19, $18, $19, $18, $19, $19, $18, $19, $18, $19, $18, $19, $25, $25, $25, $25, $24, $25, $24, $25, $24, $25, $24, $25
  form_fields_y: .byte 2, 5, 6, 7, 8, 9, $a, $b, $c, $d, 5, 6, 6, 7, 7, 8, 8, $b, $c, $c, $d, $d, $e, $e, 5, 6, 7, $a, $b, $b, $c, $c, $d, $d, $e, $e
  // Form field max values (all values are in the interval 0..max)
  form_fields_max: .byte $a, 1, 1, 1, 1, 1, 1, 1, 1, 1, $d, $f, $f, $f, $f, $f, $f, $d, $f, $f, $f, $f, $f, $f, 3, 1, 4, 1, $f, $f, $f, $f, $f, $f, $f, $f
  // Form fields values
  form_fields_val: .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Standard Char Mode
  preset_stdchar: .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Extended Color Char Mode
  preset_ecmchar: .byte 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 5, 0, 6
  // Preset: Standard Bitmap
  preset_stdbm: .byte 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: MC Bitmap
  preset_mcbm: .byte 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0
  // Preset: Hicolor Standard Char Mode
  preset_hi_stdchar: .byte 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Hicolor Extended Color Char Mode
  preset_hi_ecmchar: .byte 5, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 4, 6, 8, 9, $c, $c
  // Preset: Two plane mode
  preset_twoplane: .byte 6, 1, 0, 1, 1, 1, 0, 0, 0, 0, 7, 0, 0, 0, 1, 0, 0, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 7, 0, $d, 4, 0, 0, 0, 0
  // Preset: Chunky 8bpp
  preset_chunky: .byte 7, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 8, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Sixs FREDs mode
  preset_sixsfred: .byte 8, 1, 1, 1, 1, 1, 0, 0, 0, 0, 9, 0, 0, 0, 1, 0, 0, $a, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Sixs FREDs 2 mode
  preset_sixsfred2: .byte 9, 1, 1, 1, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 1, 0, 0, $a, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: 8bpp Pixel Cell
  preset_8bpppixelcell: .byte $a, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, $b, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Table with addresses of the y-lines of the form. The first line contains the address of the form screen.
  form_line_lo: .fill $19, 0
  form_line_hi: .fill $19, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b4
Removing instruction jmp __b10
Removing instruction jmp __b1
Removing instruction jmp __b11
Removing instruction jmp __b2
Removing instruction jmp __b12
Removing instruction jmp __b3
Removing instruction jmp __b13
Removing instruction jmp __b4
Removing instruction jmp __b14
Removing instruction jmp __b5
Removing instruction jmp __b15
Removing instruction jmp __b6
Removing instruction jmp __b16
Removing instruction jmp __b7
Removing instruction jmp __b17
Removing instruction jmp __b8
Removing instruction jmp __b18
Removing instruction jmp __b9
Removing instruction jmp __b27
Removing instruction jmp __b28
Removing instruction jmp __b29
Removing instruction jmp __b30
Removing instruction jmp __b31
Removing instruction jmp __b19
Removing instruction jmp __b20
Removing instruction jmp __b21
Removing instruction jmp __b22
Removing instruction jmp __b23
Removing instruction jmp __b25
Removing instruction jmp __b26
Removing instruction jmp __b32
Removing instruction jmp __b33
Removing instruction jmp __b24
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b7
Removing instruction jmp __b19
Removing instruction jmp __b16
Removing instruction jmp __b8
Removing instruction jmp __b17
Removing instruction jmp __b20
Removing instruction jmp __b18
Removing instruction jmp __b1
Removing instruction jmp __b21
Removing instruction jmp __b4
Removing instruction jmp __b2
Removing instruction jmp __b22
Removing instruction jmp __b5
Removing instruction jmp __b3
Removing instruction jmp __b23
Removing instruction jmp __b6
Removing instruction jmp __breturn
Removing instruction jmp __b9
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp __b14
Removing instruction jmp __b10
Removing instruction jmp __b15
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp __b14
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp __b14
Removing instruction jmp __b15
Removing instruction jmp __b16
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b17
Removing instruction jmp __breturn
Removing instruction jmp __b7
Removing instruction jmp __b18
Removing instruction jmp __b19
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b13
Removing instruction jmp __breturn
Removing instruction jmp __b18
Removing instruction jmp __b21
Removing instruction jmp __b1
Removing instruction jmp __b7
Removing instruction jmp __b3
Removing instruction jmp __b19
Removing instruction jmp __b20
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b22
Removing instruction jmp __b14
Removing instruction jmp __breturn
Removing instruction jmp __b23
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __b16
Removing instruction jmp __b17
Removing instruction jmp __b6
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b4
Removing instruction jmp __b3
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp __b14
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b5
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b5
Removing instruction jmp __b4
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __breturn
Removing instruction jmp __b9
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b5
Removing instruction jmp __b4
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b4
Removing instruction jmp __b7
Removing instruction jmp __b3
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b4
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b10
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b14
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b6
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b5
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda.z __50+1
Removing instruction ldy #0
Removing instruction lda #0
Removing instruction lda.z row_scan
Removing instruction lda #3
Removing instruction lda #0
Removing instruction ldy #0
Removing instruction lda.z x
Removing instruction ldy #0
Removing instruction ldy #0
Removing instruction ldy #0
Replacing instruction ldy #0 with TAY
Removing instruction lda #0
Removing instruction lda #>0
Removing instruction ldy.z l
Removing instruction ldy.z l
Removing instruction ldy.z l
Removing instruction ldy #0
Replacing instruction ldy #0 with TAY
Removing instruction lda #>0
Replacing instruction ldx #0 with TAX
Removing instruction ldy #0
Replacing instruction ldy #0 with TAY
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1 with __b2
Replacing label __b2_from___b1 with __b2
Replacing label __b3_from___b2 with __b3
Replacing label __b4_from___b3 with __b4
Replacing label __b5_from___b4 with __b5
Replacing label __b6_from___b5 with __b6
Replacing label __b8_from___b7 with __b8
Replacing label __b20_from___b20 with __b20
Replacing label __b19_from___b21 with __b19
Replacing label __b23_from___b23 with __b23
Replacing label __b24_from___b24 with __b24
Replacing label __b7_from___b8 with __b7
Replacing label __b2_from___b21 with __b2
Replacing label __b3_from___b22 with __b3
Replacing label __breturn_from___b23 with __breturn
Replacing label __b10_from___b9 with __b10
Replacing label __b10_from___b12 with __b10
Replacing label __b8_from___b15 with __b8
Replacing label __b10_from___b11 with __b10
Replacing label __breturn_from_get_vic_screen with __b1
Replacing label __b1_from___b5 with __b1
Replacing label __breturn_from_get_vic_charset with __b1
Replacing label __b1_from___b2 with __b1
Replacing label __breturn_from_get_plane with __b1
Replacing label __b1_from___b14 with __b1
Replacing label __b1_from___b1 with __b1
Replacing label __b3_from___b19 with __b3_from___b6
Replacing label __b2_from_render_preset_name with __b2_from___b12
Replacing label __b1_from___b12 with __b1
Replacing label __b2_from_apply_preset with __b2_from___b12
Replacing label __b1_from___b12 with __b1
Replacing label __b21_from___b18 with __b1
Replacing label __b22_from___b9 with __b14
Replacing label __b23_from___b13 with __b23
Replacing label __b14_from___b23 with __b14
Replacing label __b6_from___b5 with __b6
Replacing label __b3_from___b2 with __b3
Replacing label __b1_from___b1 with __b1
Replacing label __b2_from___b1 with __b2
Replacing label __b3_from___b2 with __b3
Replacing label __b2_from___b3 with __b2
Replacing label __b1_from___b6 with __b1
Replacing label __b1_from___b1 with __b1
Replacing label __b1_from___b1 with __b1
Replacing label __b2_from___b3 with __b2
Replacing label __b2_from___b2 with __b2
Replacing label __b1_from___b3 with __b1
Replacing label __b2_from___b2 with __b2
Replacing label __b1_from___b3 with __b1
Replacing label __b2_from___b2 with __b2
Replacing label __b1_from___b3 with __b1
Replacing label __b2_from___b4 with __b2
Replacing label __b1_from___b6 with __b1
Replacing label __b4_from___b3 with __b4
Replacing label __b3_from___b4 with __b3
Replacing label __b2_from___b6 with __b2
Replacing label __b1_from___b7 with __b1
Replacing label __b3_from___b2 with __b3
Replacing label __b3_from___b2 with __b3
Replacing label __b2_from___b3 with __b2
Replacing label __b2_from___b3 with __b2
Replacing label __b1_from___b5 with __b1
Replacing label __b2_from___b4 with __b2
Replacing label __b1_from___b2 with __b1
Replacing label __b2_from___b4 with __b2
Replacing label __b1_from___b2 with __b1
Replacing label __b2_from___b4 with __b2
Replacing label __b1_from___b2 with __b1
Replacing label __b2_from___b4 with __b2
Replacing label __b1_from___b2 with __b1
Replacing label __b2_from___b2 with __b2
Replacing label __b1_from___b3 with __b1
Replacing label __b6_from___b1 with __b2
Replacing label __b1_from___b2 with __b1
Replacing label __b4_from___b3 with __b4
Replacing label __b3_from___b4 with __b3
Replacing label __b2_from___b2 with __b2
Replacing label __b1_from___b3 with __b1
Replacing label __b2_from___b2 with __b2
Replacing label __b1_from___b3 with __b1
Replacing label __b2_from___b2 with __b2
Replacing label __b1_from___b3 with __b1
Replacing label __b2_from___b2 with __b2
Replacing label __b1_from___b3 with __b1
Replacing label __b2_from___b2 with __b2
Replacing label __b1_from___b3 with __b1
Replacing label __b2_from___b2 with __b2
Replacing label __b1_from___b3 with __b1
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction __bend_from___b1:
Removing instruction __b3_from_main:
Removing instruction gfx_init_from___b3:
Removing instruction __b1:
Removing instruction __b2_from___b1:
Removing instruction __b4_from___b2:
Removing instruction __b10_from_gfx_mode:
Removing instruction __b1_from___b10:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b11:
Removing instruction __b3_from___b12:
Removing instruction __b3_from___b2:
Removing instruction __b4_from___b13:
Removing instruction __b4_from___b3:
Removing instruction __b5_from___b14:
Removing instruction __b5_from___b4:
Removing instruction __b6_from___b15:
Removing instruction __b6_from___b5:
Removing instruction __b16_from___b6:
Removing instruction __b7_from___b16:
Removing instruction __b8_from___b17:
Removing instruction __b8_from___b7:
Removing instruction __b18_from___b8:
Removing instruction __b9_from___b18:
Removing instruction __b19_from___b31:
Removing instruction __b19_from___b21:
Removing instruction __b20_from___b19:
Removing instruction __b20_from___b20:
Removing instruction __b23_from___b23:
Removing instruction __b26_from___b25:
Removing instruction keyboard_event_scan_from___b26:
Removing instruction __b32_from___b26:
Removing instruction __b24_from___b24:
Removing instruction __b7_from___b8:
Removing instruction __b8_from___b15:
Removing instruction __b8_from___b16:
Removing instruction __b17_from___b8:
Removing instruction keyboard_event_pressed_from___b17:
Removing instruction __b18_from___b20:
Removing instruction __b1_from___b18:
Removing instruction keyboard_event_pressed_from___b1:
Removing instruction __b2_from___b21:
Removing instruction __b2_from___b4:
Removing instruction keyboard_event_pressed_from___b2:
Removing instruction __b3_from___b22:
Removing instruction __b3_from___b5:
Removing instruction keyboard_event_pressed_from___b3:
Removing instruction __breturn_from___b23:
Removing instruction __breturn_from___b6:
Removing instruction __b10_from___b11:
Removing instruction __b10_from___b12:
Removing instruction __b10_from___b14:
Removing instruction __b10_from___b9:
Removing instruction __b1_from___b5:
Removing instruction __breturn_from_get_vic_screen:
Removing instruction __breturn_from___b1:
Removing instruction __b1_from___b2:
Removing instruction __breturn_from_get_vic_charset:
Removing instruction __breturn_from___b1:
Removing instruction __b1_from___b14:
Removing instruction __breturn_from_get_plane:
Removing instruction __breturn_from___b1:
Removing instruction __b8_from_form_mode:
Removing instruction __b9_from___b8:
Removing instruction print_str_lines_from___b9:
Removing instruction __b10_from___b9:
Removing instruction __b11_from___b10:
Removing instruction __b12_from___b11:
Removing instruction print_str_lines_from___b12:
Removing instruction __b13_from___b12:
Removing instruction __b14_from___b13:
Removing instruction form_render_values_from___b14:
Removing instruction __b1_from___b1:
Removing instruction __b3_from___b19:
Removing instruction __b3_from___b2:
Removing instruction __b3:
Removing instruction __b5_from___b4:
Removing instruction __b2_from_render_preset_name:
Removing instruction __b1_from___b12:
Removing instruction __b2_from___b1:
Removing instruction form_field_ptr_from___b2:
Removing instruction __b2_from_apply_preset:
Removing instruction __b1_from___b12:
Removing instruction __b2_from___b1:
Removing instruction __b13_from___b2:
Removing instruction __b21_from___b18:
Removing instruction __b21:
Removing instruction __b1_from___b21:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b7:
Removing instruction __b19_from___b3:
Removing instruction __b22_from___b9:
Removing instruction __b22:
Removing instruction __b14_from___b22:
Removing instruction __b14_from___b23:
Removing instruction __breturn_from___b14:
Removing instruction __b23_from___b13:
Removing instruction __breturn_from___b16:
Removing instruction __b6_from___b5:
Removing instruction __b1_from___b1:
Removing instruction __b1_from_print_str_lines:
Removing instruction __b1_from___b6:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b3:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b4:
Removing instruction __b5_from___b3:
Removing instruction print_ln_from___b5:
Removing instruction __b1_from_print_ln:
Removing instruction __b1_from___b1:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b3:
Removing instruction __b1_from_gfx_init:
Removing instruction gfx_init_screen1_from___b1:
Removing instruction __b2_from___b1:
Removing instruction gfx_init_screen2_from___b2:
Removing instruction __b3_from___b2:
Removing instruction gfx_init_screen3_from___b3:
Removing instruction __b4_from___b3:
Removing instruction gfx_init_screen4_from___b4:
Removing instruction __b5_from___b4:
Removing instruction __b6_from___b5:
Removing instruction gfx_init_vic_bitmap_from___b6:
Removing instruction __b7_from___b6:
Removing instruction gfx_init_plane_8bppchunky_from___b7:
Removing instruction __b8_from___b7:
Removing instruction gfx_init_plane_charset8_from___b8:
Removing instruction __b9_from___b8:
Removing instruction gfx_init_plane_horisontal_from___b9:
Removing instruction __b10_from___b9:
Removing instruction gfx_init_plane_vertical_from___b10:
Removing instruction __b11_from___b10:
Removing instruction gfx_init_plane_horisontal2_from___b11:
Removing instruction __b12_from___b11:
Removing instruction gfx_init_plane_vertical2_from___b12:
Removing instruction __b13_from___b12:
Removing instruction gfx_init_plane_blank_from___b13:
Removing instruction __b14_from___b13:
Removing instruction gfx_init_plane_full_from___b14:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b2:
Removing instruction __b4_from___b3:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b2:
Removing instruction __b4_from___b3:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b2:
Removing instruction __b4_from___b3:
Removing instruction __b1_from___b6:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b4:
Removing instruction __b4_from___b3:
Removing instruction __b4_from___b5:
Removing instruction __b7_from___b6:
Removing instruction __b1_from___b7:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b6:
Removing instruction __b3_from___b4:
Removing instruction __b1_from___b5:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b3:
Removing instruction __b3_from___b2:
Removing instruction __b6_from___b5:
Removing instruction __b3_from_gfx_init_vic_bitmap:
Removing instruction __b1_from_bitmap_line_xdyi:
Removing instruction __b1_from___b2:
Removing instruction __b2_from___b3:
Removing instruction __b2_from___b4:
Removing instruction __b1_from_bitmap_line_ydxi:
Removing instruction __b1_from___b2:
Removing instruction __b2_from___b3:
Removing instruction __b2_from___b4:
Removing instruction __b1_from_bitmap_line_xdyd:
Removing instruction __b1_from___b2:
Removing instruction __b2_from___b3:
Removing instruction __b2_from___b4:
Removing instruction __b1_from_bitmap_line_ydxd:
Removing instruction __b1_from___b2:
Removing instruction __b2_from___b3:
Removing instruction __b2_from___b4:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b2:
Removing instruction __b1_from___b2:
Removing instruction __b6_from___b1:
Removing instruction __b6:
Removing instruction __b2_from___b6:
Removing instruction __b3_from___b4:
Removing instruction __b4_from___b3:
Removing instruction __b4_from___b5:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b2:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b2:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b2:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b2:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b2:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bbegin:
Removing instruction __bend:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction form_mode_from___b2:
Removing instruction __b4:
Removing instruction __b1_from___b4:
Removing instruction __b10:
Removing instruction __b11:
Removing instruction __b12:
Removing instruction __b13:
Removing instruction __b14:
Removing instruction __b15:
Removing instruction __b16:
Removing instruction __b17:
Removing instruction __b18:
Removing instruction get_plane_from___b9:
Removing instruction __b27:
Removing instruction get_plane_from___b27:
Removing instruction __b28:
Removing instruction get_vic_screen_from___b28:
Removing instruction __b29:
Removing instruction __b30:
Removing instruction get_vic_screen_from___b30:
Removing instruction __b31:
Removing instruction __b21:
Removing instruction __b22:
Removing instruction __b23_from___b22:
Removing instruction __b26:
Removing instruction __b32:
Removing instruction __b33:
Removing instruction __b1:
Removing instruction __breturn_from___b1:
Removing instruction __b7_from_keyboard_event_scan:
Removing instruction __b19:
Removing instruction __b16:
Removing instruction __b17:
Removing instruction __b20:
Removing instruction __b18:
Removing instruction __b21:
Removing instruction __b4:
Removing instruction __b22:
Removing instruction __b5:
Removing instruction __b23:
Removing instruction __b6:
Removing instruction __b12:
Removing instruction __b13:
Removing instruction __b14:
Removing instruction __b15:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __breturn_from___b5:
Removing instruction __b2:
Removing instruction __breturn_from___b2:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction __b8:
Removing instruction __b9:
Removing instruction __b10:
Removing instruction __b11:
Removing instruction __b12:
Removing instruction __b13:
Removing instruction __b14:
Removing instruction __breturn_from___b14:
Removing instruction print_set_screen_from_form_mode:
Removing instruction __b8:
Removing instruction __b9:
Removing instruction __b10:
Removing instruction print_set_screen_from___b10:
Removing instruction __b11:
Removing instruction __b12:
Removing instruction __b13:
Removing instruction form_set_screen_from___b13:
Removing instruction __b14:
Removing instruction __b15:
Removing instruction render_preset_name_from___b15:
Removing instruction __b16:
Removing instruction __b1_from___b16:
Removing instruction __b2:
Removing instruction __b5:
Removing instruction __b17:
Removing instruction __breturn:
Removing instruction __b7:
Removing instruction __b18:
Removing instruction form_render_values_from___b18:
Removing instruction __b19:
Removing instruction render_preset_name_from___b19:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction __b8:
Removing instruction __b9:
Removing instruction __b10:
Removing instruction __b11:
Removing instruction __b12:
Removing instruction print_str_at_from___b2:
Removing instruction __breturn:
Removing instruction __b1_from_print_str_at:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __b1_from_form_render_values:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction __b8:
Removing instruction __b9:
Removing instruction __b10:
Removing instruction __b11:
Removing instruction __b12:
Removing instruction __breturn:
Removing instruction __b13_from___b14:
Removing instruction form_field_ptr_from_form_control:
Removing instruction __b18:
Removing instruction __b1_from___b18:
Removing instruction __b7:
Removing instruction keyboard_event_scan_from___b3:
Removing instruction __b19:
Removing instruction __b20:
Removing instruction __b8:
Removing instruction __b9:
Removing instruction __b14_from___b9:
Removing instruction __b14_from___b13:
Removing instruction __b10:
Removing instruction __b11:
Removing instruction __b12:
Removing instruction __b17:
Removing instruction __breturn_from___b5:
Removing instruction __b1_from_form_set_screen:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction memset_from_print_cls:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction gfx_init_screen0_from_gfx_init:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction __b8:
Removing instruction __b9:
Removing instruction __b10:
Removing instruction __b11:
Removing instruction __b12:
Removing instruction __b13:
Removing instruction __b14:
Removing instruction __breturn:
Removing instruction gfx_init_plane_fill_from_gfx_init_plane_full:
Removing instruction __breturn:
Removing instruction dtvSetCpuBankSegment1_from_gfx_init_plane_fill:
Removing instruction __b5:
Removing instruction __b1_from___b5:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction dtvSetCpuBankSegment1_from___b4:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction gfx_init_plane_fill_from_gfx_init_plane_blank:
Removing instruction __breturn:
Removing instruction gfx_init_plane_fill_from_gfx_init_plane_vertical2:
Removing instruction __breturn:
Removing instruction dtvSetCpuBankSegment1_from_gfx_init_plane_horisontal2:
Removing instruction __b1_from_gfx_init_plane_horisontal2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction dtvSetCpuBankSegment1_from___b4:
Removing instruction __breturn:
Removing instruction dtvSetCpuBankSegment1_from_gfx_init_plane_vertical:
Removing instruction __b1_from_gfx_init_plane_vertical:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction dtvSetCpuBankSegment1_from___b4:
Removing instruction __breturn:
Removing instruction dtvSetCpuBankSegment1_from_gfx_init_plane_horisontal:
Removing instruction __b1_from_gfx_init_plane_horisontal:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction dtvSetCpuBankSegment1_from___b7:
Removing instruction __breturn:
Removing instruction dtvSetCpuBankSegment1_from_gfx_init_plane_charset8:
Removing instruction __b9:
Removing instruction __b1_from___b9:
Removing instruction __b3_from___b2:
Removing instruction __b5:
Removing instruction __b4_from___b5:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction __b8:
Removing instruction dtvSetCpuBankSegment1_from___b8:
Removing instruction __breturn:
Removing instruction dtvSetCpuBankSegment1_from_gfx_init_plane_8bppchunky:
Removing instruction __b1_from_gfx_init_plane_8bppchunky:
Removing instruction __b4:
Removing instruction dtvSetCpuBankSegment1_from___b4:
Removing instruction __b7:
Removing instruction __b3_from___b7:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction dtvSetCpuBankSegment1_from___b6:
Removing instruction __breturn:
Removing instruction bitmap_init_from_gfx_init_vic_bitmap:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __b1_from___b4:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction bitmap_line_ydxi_from___b4:
Removing instruction bitmap_line_xdyi_from___b8:
Removing instruction __b10:
Removing instruction bitmap_line_ydxd_from___b10:
Removing instruction bitmap_line_xdyd_from___b9:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction bitmap_line_ydxd_from___b6:
Removing instruction bitmap_line_xdyd_from___b12:
Removing instruction __b14:
Removing instruction bitmap_line_ydxi_from___b14:
Removing instruction bitmap_line_xdyi_from___b13:
Removing instruction bitmap_plot_from___b1:
Removing instruction __b4:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction bitmap_plot_from___b1:
Removing instruction __b4:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction bitmap_plot_from___b1:
Removing instruction __b4:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction bitmap_plot_from___b1:
Removing instruction __b4:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from_bitmap_clear:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from_bitmap_init:
Removing instruction __b2_from___b1:
Removing instruction __b3_from___b2:
Removing instruction __b5:
Removing instruction __breturn:
Removing instruction __b1_from_gfx_init_charset:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __breturn:
Removing instruction __b1_from_gfx_init_screen4:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from_gfx_init_screen3:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from_gfx_init_screen2:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from_gfx_init_screen1:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from_gfx_init_screen0:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Replacing jump to rts with rts in jmp __breturn
Skipping double jump to __b9 in bne __b9_from___b10
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Skipping double jump to __b14 in bne __b23
Replacing jump to rts with rts in jmp __breturn
Skipping double jump to __breturn_from___b6 in bne __b6
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label __b1_from_gfx_mode to __b10
Relabelling long label __b7_from___b6 to __b11
Relabelling long label __b9_from___b8 to __b12
Relabelling long label __b24_from___b22 to __b13
Relabelling long label __breturn_from_keyboard_event_get to __b1
Relabelling long label __b1_from___b20 to __b4
Relabelling long label __b9_from___b10 to __b5
Relabelling long label __b9_from___b19 to __b6
Relabelling long label __breturn_from___b2 to __b2
Relabelling long label __breturn_from___b3 to __b3
Relabelling long label __breturn_from___b4 to __b4
Relabelling long label __breturn_from___b10 to __b2
Relabelling long label __breturn_from___b11 to __b3
Relabelling long label __breturn_from___b12 to __b4
Relabelling long label __breturn_from___b13 to __b5
Relabelling long label __breturn_from___b2 to __b6
Relabelling long label __breturn_from___b3 to __b7
Relabelling long label __breturn_from___b4 to __b8
Relabelling long label __breturn_from___b5 to __b9
Relabelling long label __breturn_from___b6 to __b10
Relabelling long label __breturn_from___b7 to __b11
Relabelling long label __breturn_from___b8 to __b12
Relabelling long label __breturn_from___b9 to __b13
Relabelling long label __b3_from___b6 to __b2
Relabelling long label __b2_from___b12 to __b3
Relabelling long label __b2_from___b10 to __b4
Relabelling long label __b2_from___b11 to __b5
Relabelling long label __b2_from___b3 to __b6
Relabelling long label __b2_from___b4 to __b7
Relabelling long label __b2_from___b5 to __b8
Relabelling long label __b2_from___b6 to __b9
Relabelling long label __b2_from___b7 to __b10
Relabelling long label __b2_from___b8 to __b11
Relabelling long label __b2_from___b9 to __b12
Relabelling long label __b2_from___b12 to __b3
Relabelling long label __b2_from___b10 to __b4
Relabelling long label __b2_from___b11 to __b5
Relabelling long label __b2_from___b3 to __b6
Relabelling long label __b2_from___b4 to __b7
Relabelling long label __b2_from___b5 to __b8
Relabelling long label __b2_from___b6 to __b9
Relabelling long label __b2_from___b7 to __b10
Relabelling long label __b2_from___b8 to __b11
Relabelling long label __b2_from___b9 to __b12
Relabelling long label __breturn_from___b6 to __b7
Relabelling long label __b4_from___b3 to __b5
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp __b19
Removing instruction jmp __b20
Removing instruction jmp __b23
Removing instruction jmp __b24
Removing instruction jmp __b7
Removing instruction jmp __b1
Removing instruction jmp __b1
Removing instruction jmp __b14
Removing instruction jmp __b1
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __b2
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction ldx #0 with TAX
Removing instruction lda form_fields_val
Removing instruction ldy.z form_field_idx
Removing instruction ldy.z form_field_idx
Removing instruction lda.z x0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __breturn:
Removing instruction __b5:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b23:
Removing instruction __b6:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing unreachable instruction jmp __b9
Removing unreachable instruction jmp __b14
Removing unreachable instruction jmp __b7
Succesful ASM optimization Pass5UnreachableCodeElimination
Fixing long branch [757] beq __b6 to bne
Fixing long branch [761] beq __b7 to bne
Fixing long branch [765] beq __b8 to bne
Fixing long branch [769] beq __b9 to bne
Fixing long branch [773] beq __b10 to bne
Fixing long branch [777] beq __b11 to bne
Fixing long branch [781] beq __b12 to bne
Fixing long branch [785] beq __b13 to bne
Fixing long branch [1350] bmi __b2 to bpl

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const nomodify byte*) CHARGEN = (byte*) 53248
(const nomodify struct MOS6526_CIA*) CIA1 = (struct MOS6526_CIA*) 56320
(const nomodify struct MOS6526_CIA*) CIA2 = (struct MOS6526_CIA*) 56576
(const nomodify byte*) COLS = (byte*) 55296
(const nomodify byte) DTV_BORDER_OFF = (byte) 2
(const nomodify byte) DTV_CHUNKY = (byte) $40
(const nomodify byte) DTV_COLORRAM_OFF = (byte) $10
(const nomodify dword) DTV_COLOR_BANK_DEFAULT = (dword) $1d800
(const nomodify byte*) DTV_COLOR_BANK_HI = (byte*) 53303
(const nomodify byte*) DTV_COLOR_BANK_LO = (byte*) 53302
(const nomodify byte*) DTV_CONTROL = (byte*) 53308
(const nomodify byte*) DTV_FEATURE = (byte*) 53311
(const nomodify byte) DTV_FEATURE_ENABLE = (byte) 1
(const nomodify byte*) DTV_GRAPHICS_VIC_BANK = (byte*) 53309
(const nomodify byte) DTV_HIGHCOLOR = (byte) 4
(const nomodify byte) DTV_LINEAR = (byte) 1
(const nomodify byte) DTV_OVERSCAN = (byte) 8
(const nomodify byte*) DTV_PALETTE = (byte*) 53760
(const byte*) DTV_PALETTE_DEFAULT[(number) $10]  = { (byte) 0, (byte) $f, (byte) $36, (byte) $be, (byte) $58, (byte) $db, (byte) $86, (byte) $ff, (byte) $29, (byte) $26, (byte) $3b, (byte) 5, (byte) 7, (byte) $df, (byte) $9a, (byte) $a }
(const nomodify byte*) DTV_PLANEA_MODULO_HI = (byte*) 53305
(const nomodify byte*) DTV_PLANEA_MODULO_LO = (byte*) 53304
(const nomodify byte*) DTV_PLANEA_START_HI = (byte*) 53317
(const nomodify byte*) DTV_PLANEA_START_LO = (byte*) 53306
(const nomodify byte*) DTV_PLANEA_START_MI = (byte*) 53307
(const nomodify byte*) DTV_PLANEA_STEP = (byte*) 53318
(const nomodify byte*) DTV_PLANEB_MODULO_HI = (byte*) 53320
(const nomodify byte*) DTV_PLANEB_MODULO_LO = (byte*) 53319
(const nomodify byte*) DTV_PLANEB_START_HI = (byte*) 53323
(const nomodify byte*) DTV_PLANEB_START_LO = (byte*) 53321
(const nomodify byte*) DTV_PLANEB_START_MI = (byte*) 53322
(const nomodify byte*) DTV_PLANEB_STEP = (byte*) 53324
(const nomodify byte*) FORM_CHARSET = (byte*) 6144
(const byte*) FORM_COLS[]  = (byte*) "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@                                        @aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@                                        @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm              @ nnnnnnnnnnnn                jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"
(const nomodify signed byte) FORM_CURSOR_BLINK = (signed byte) $28
(const nomodify byte*) FORM_SCREEN = (byte*) 1024
(const byte*) FORM_TEXT[]  = (byte*) " C64 DTV Graphics Mode Explorer         @                                        @ PRESET 0 Standard Charset              @                                        @ CONTROL        PLANE  A     VIC II     @ bmm        0   pattern p0   screen s0  @ mcm        0   start   00   gfx    g0  @ ecm        0   step    00   colors c0  @ hicolor    0   modulo  00              @ linear     0                COLORS     @ color off  0   PLANE  B     palet   0  @ chunky     0   pattern p0   bgcol0 00  @ border off 0   start   00   bgcol1 00  @ overscan   0   step    00   bgcol2 00  @                modulo  00   bgcol3 00  @"
(const nomodify byte) KEY_COMMODORE = (byte) $3d
(const nomodify byte) KEY_CRSR_DOWN = (byte) 7
(const nomodify byte) KEY_CRSR_RIGHT = (byte) 2
(const nomodify byte) KEY_CTRL = (byte) $3a
(const nomodify byte) KEY_LSHIFT = (byte) $f
(const nomodify byte) KEY_MODIFIER_COMMODORE = (byte) 8
(const nomodify byte) KEY_MODIFIER_CTRL = (byte) 4
(const nomodify byte) KEY_MODIFIER_LSHIFT = (byte) 1
(const nomodify byte) KEY_MODIFIER_RSHIFT = (byte) 2
(const nomodify byte) KEY_MODIFIER_SHIFT = (const nomodify byte) KEY_MODIFIER_LSHIFT|(const nomodify byte) KEY_MODIFIER_RSHIFT
(const nomodify byte) KEY_RSHIFT = (byte) $34
(const nomodify byte) KEY_SPACE = (byte) $3c
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6569_VICII::BG_COLOR
(byte) MOS6569_VICII::BG_COLOR1
(byte) MOS6569_VICII::BG_COLOR2
(byte) MOS6569_VICII::BG_COLOR3
(byte) MOS6569_VICII::BORDER_COLOR
(byte) MOS6569_VICII::CONTROL1
(byte) MOS6569_VICII::CONTROL2
(byte) MOS6569_VICII::IRQ_ENABLE
(byte) MOS6569_VICII::IRQ_STATUS
(byte) MOS6569_VICII::LIGHTPEN_X
(byte) MOS6569_VICII::LIGHTPEN_Y
(byte) MOS6569_VICII::MEMORY
(byte) MOS6569_VICII::RASTER
(byte) MOS6569_VICII::SPRITE0_COLOR
(byte) MOS6569_VICII::SPRITE0_X
(byte) MOS6569_VICII::SPRITE0_Y
(byte) MOS6569_VICII::SPRITE1_COLOR
(byte) MOS6569_VICII::SPRITE1_X
(byte) MOS6569_VICII::SPRITE1_Y
(byte) MOS6569_VICII::SPRITE2_COLOR
(byte) MOS6569_VICII::SPRITE2_X
(byte) MOS6569_VICII::SPRITE2_Y
(byte) MOS6569_VICII::SPRITE3_COLOR
(byte) MOS6569_VICII::SPRITE3_X
(byte) MOS6569_VICII::SPRITE3_Y
(byte) MOS6569_VICII::SPRITE4_COLOR
(byte) MOS6569_VICII::SPRITE4_X
(byte) MOS6569_VICII::SPRITE4_Y
(byte) MOS6569_VICII::SPRITE5_COLOR
(byte) MOS6569_VICII::SPRITE5_X
(byte) MOS6569_VICII::SPRITE5_Y
(byte) MOS6569_VICII::SPRITE6_COLOR
(byte) MOS6569_VICII::SPRITE6_X
(byte) MOS6569_VICII::SPRITE6_Y
(byte) MOS6569_VICII::SPRITE7_COLOR
(byte) MOS6569_VICII::SPRITE7_X
(byte) MOS6569_VICII::SPRITE7_Y
(byte) MOS6569_VICII::SPRITES_BG_COLLISION
(byte) MOS6569_VICII::SPRITES_COLLISION
(byte) MOS6569_VICII::SPRITES_ENABLE
(byte) MOS6569_VICII::SPRITES_EXPAND_X
(byte) MOS6569_VICII::SPRITES_EXPAND_Y
(byte) MOS6569_VICII::SPRITES_MC
(byte) MOS6569_VICII::SPRITES_MCOLOR1
(byte) MOS6569_VICII::SPRITES_MCOLOR2
(byte) MOS6569_VICII::SPRITES_PRIORITY
(byte) MOS6569_VICII::SPRITES_XMSB
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR = (byte) 2
(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_B = (byte) 1
(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_B_DDR = (byte) 3
(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR = (byte) $21
(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR1 = (byte) $22
(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR2 = (byte) $23
(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR3 = (byte) $24
(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = (byte) $20
(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1 = (byte) $11
(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL2 = (byte) $16
(const byte) OFFSET_STRUCT_MOS6569_VICII_MEMORY = (byte) $18
(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER = (byte) $12
(const nomodify dword) PLANE_8BPP_CHUNKY = (dword) $20000
(const nomodify dword) PLANE_BLANK = (dword) $38000
(const nomodify dword) PLANE_CHARSET8 = (dword) $3c000
(const nomodify dword) PLANE_FULL = (dword) $3a000
(const nomodify dword) PLANE_HORISONTAL = (dword) $30000
(const nomodify dword) PLANE_HORISONTAL2 = (dword) $34000
(const nomodify dword) PLANE_VERTICAL = (dword) $32000
(const nomodify dword) PLANE_VERTICAL2 = (dword) $36000
(const nomodify byte*) PROCPORT = (byte*) 1
(const nomodify byte*) PROCPORT_DDR = (byte*) 0
(const nomodify byte) PROCPORT_DDR_MEMORY_MASK = (byte) 7
(const nomodify byte) PROCPORT_RAM_CHARROM = (byte) 1
(const nomodify byte) PROCPORT_RAM_IO = (byte) 5
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(const nomodify struct MOS6569_VICII*) VICII = (struct MOS6569_VICII*) 53248
(const nomodify byte*) VIC_BITMAP = (byte*) 24576
(const nomodify byte) VIC_BMM = (byte) $20
(const nomodify byte*) VIC_CHARSET_ROM = (byte*) 22528
(const nomodify byte*) VIC_CONTROL = (byte*) 53265
(const nomodify byte*) VIC_CONTROL2 = (byte*) 53270
(const nomodify byte) VIC_CSEL = (byte) 8
(const nomodify byte) VIC_DEN = (byte) $10
(const nomodify byte) VIC_ECM = (byte) $40
(const nomodify byte) VIC_MCM = (byte) $10
(const nomodify byte*) VIC_MEMORY = (byte*) 53272
(const nomodify byte) VIC_RSEL = (byte) 8
(const nomodify byte*) VIC_SCREEN0 = (byte*) 16384
(const nomodify byte*) VIC_SCREEN1 = (byte*) 17408
(const nomodify byte*) VIC_SCREEN2 = (byte*) 18432
(const nomodify byte*) VIC_SCREEN3 = (byte*) 19456
(const nomodify byte*) VIC_SCREEN4 = (byte*) 20480
(void()) apply_preset((byte) apply_preset::idx)
(label) apply_preset::@1
(label) apply_preset::@10
(label) apply_preset::@11
(label) apply_preset::@12
(label) apply_preset::@13
(label) apply_preset::@14
(label) apply_preset::@2
(label) apply_preset::@3
(label) apply_preset::@4
(label) apply_preset::@5
(label) apply_preset::@6
(label) apply_preset::@7
(label) apply_preset::@8
(label) apply_preset::@9
(label) apply_preset::@return
(byte) apply_preset::i
(byte) apply_preset::i#1 reg byte y 2.000000002E9
(byte) apply_preset::i#2 reg byte y 1.6666666683333335E9
(byte) apply_preset::idx
(byte) apply_preset::idx#0 reg byte a 1009092.0000000002
(byte*) apply_preset::preset
(byte*) apply_preset::preset#15 preset zp[2]:7 2.000000002E8
(void()) bitmap_clear()
(label) bitmap_clear::@1
(label) bitmap_clear::@2
(label) bitmap_clear::@3
(label) bitmap_clear::@return
(byte*) bitmap_clear::bitmap
(word) bitmap_clear::bitmap#0 bitmap zp[2]:16 10001.0
(byte*) bitmap_clear::bitmap#1 bitmap zp[2]:16 420000.60000000003
(byte*) bitmap_clear::bitmap#2 bitmap zp[2]:16 1550002.0
(byte*) bitmap_clear::bitmap#3 bitmap zp[2]:16 210003.0
(byte*) bitmap_clear::bitmap#5 bitmap zp[2]:16 20002.0
(byte) bitmap_clear::x
(byte) bitmap_clear::x#1 reg byte x 1500001.5
(byte) bitmap_clear::x#2 reg byte x 666667.3333333334
(byte) bitmap_clear::y
(byte) bitmap_clear::y#1 y zp[1]:22 150001.5
(byte) bitmap_clear::y#4 y zp[1]:22 33333.666666666664
(void()) bitmap_init((byte*) bitmap_init::bitmap)
(byte~) bitmap_init::$0 reg byte a 200002.0
(byte~) bitmap_init::$10 zp[1]:33 50000.5
(byte~) bitmap_init::$7 reg byte a 200002.0
(byte~) bitmap_init::$8 reg byte a 200002.0
(byte~) bitmap_init::$9 reg byte a 200002.0
(label) bitmap_init::@1
(label) bitmap_init::@2
(label) bitmap_init::@3
(label) bitmap_init::@4
(label) bitmap_init::@5
(label) bitmap_init::@6
(label) bitmap_init::@return
(byte*) bitmap_init::bitmap
(byte) bitmap_init::bits
(byte) bitmap_init::bits#1 reg byte y 100001.0
(byte) bitmap_init::bits#3 reg byte y 60000.600000000006
(byte) bitmap_init::bits#4 reg byte y 66667.33333333333
(byte) bitmap_init::x
(byte) bitmap_init::x#1 reg byte x 150001.5
(byte) bitmap_init::x#2 reg byte x 66667.33333333333
(byte) bitmap_init::y
(byte) bitmap_init::y#1 reg byte x 150001.5
(byte) bitmap_init::y#2 reg byte x 50000.5
(byte*) bitmap_init::yoffs
(byte*) bitmap_init::yoffs#1 yoffs zp[2]:20 200002.0
(byte*) bitmap_init::yoffs#2 yoffs zp[2]:20 62500.625
(byte*) bitmap_init::yoffs#4 yoffs zp[2]:20 100001.0
(void()) bitmap_line((byte) bitmap_line::x0 , (byte) bitmap_line::x1 , (byte) bitmap_line::y0 , (byte) bitmap_line::y1)
(label) bitmap_line::@1
(label) bitmap_line::@10
(label) bitmap_line::@11
(label) bitmap_line::@12
(label) bitmap_line::@13
(label) bitmap_line::@14
(label) bitmap_line::@2
(label) bitmap_line::@3
(label) bitmap_line::@4
(label) bitmap_line::@5
(label) bitmap_line::@6
(label) bitmap_line::@7
(label) bitmap_line::@8
(label) bitmap_line::@9
(label) bitmap_line::@return
(byte) bitmap_line::x0
(byte) bitmap_line::x0#0 x0 zp[1]:22 39565.65217391305
(byte) bitmap_line::x1
(byte) bitmap_line::x1#0 x1 zp[1]:33 41364.09090909091
(byte) bitmap_line::xd
(byte) bitmap_line::xd#1 xd zp[1]:18 35000.35
(byte) bitmap_line::xd#2 xd zp[1]:18 35000.35
(byte) bitmap_line::y0
(byte) bitmap_line::y0#0 reg byte x 57619.66666666667
(byte) bitmap_line::y1
(byte) bitmap_line::y1#0 y1 zp[1]:19 60500.650000000016
(byte) bitmap_line::yd
(byte) bitmap_line::yd#1 reg byte y 44444.88888888889
(byte) bitmap_line::yd#10 reg byte y 44444.88888888889
(byte) bitmap_line::yd#11 reg byte y 44444.88888888889
(byte) bitmap_line::yd#2 reg byte y 44444.88888888889
(void()) bitmap_line_xdyd((byte) bitmap_line_xdyd::x , (byte) bitmap_line_xdyd::y , (byte) bitmap_line_xdyd::x1 , (byte) bitmap_line_xdyd::xd , (byte) bitmap_line_xdyd::yd)
(byte~) bitmap_line_xdyd::$6 reg byte a 2.00000002E8
(label) bitmap_line_xdyd::@1
(label) bitmap_line_xdyd::@2
(label) bitmap_line_xdyd::@3
(label) bitmap_line_xdyd::@4
(label) bitmap_line_xdyd::@return
(byte) bitmap_line_xdyd::e
(byte) bitmap_line_xdyd::e#0 e zp[1]:13 2000002.0
(byte) bitmap_line_xdyd::e#1 e zp[1]:13 1.3333333466666667E8
(byte) bitmap_line_xdyd::e#2 e zp[1]:13 2.00000002E8
(byte) bitmap_line_xdyd::e#3 e zp[1]:13 4.0200000599999994E7
(byte) bitmap_line_xdyd::e#6 e zp[1]:13 1.00000001E8
(byte) bitmap_line_xdyd::x
(byte) bitmap_line_xdyd::x#0 x zp[1]:15 40000.4
(byte) bitmap_line_xdyd::x#1 x zp[1]:15 40000.4
(byte) bitmap_line_xdyd::x#2 x zp[1]:15 3.7500000375E7
(byte) bitmap_line_xdyd::x#3 x zp[1]:15 7.5250001E7
(byte) bitmap_line_xdyd::x#6 x zp[1]:15 600001.5
(byte) bitmap_line_xdyd::x1
(byte) bitmap_line_xdyd::x1#0 x1 zp[1]:22 66667.33333333333
(byte) bitmap_line_xdyd::x1#1 x1 zp[1]:22 66667.33333333333
(byte) bitmap_line_xdyd::x1#6 x1 zp[1]:22 7157143.071428572
(byte) bitmap_line_xdyd::xd
(byte) bitmap_line_xdyd::xd#0 xd zp[1]:18 100001.0
(byte) bitmap_line_xdyd::xd#1 xd zp[1]:18 100001.0
(byte) bitmap_line_xdyd::xd#5 xd zp[1]:18 1.4300000285714287E7
(byte) bitmap_line_xdyd::y
(byte) bitmap_line_xdyd::y#0 reg byte x 50000.5
(byte) bitmap_line_xdyd::y#1 reg byte x 50000.5
(byte) bitmap_line_xdyd::y#2 reg byte x 1.00000001E8
(byte) bitmap_line_xdyd::y#3 reg byte x 5.7285715E7
(byte) bitmap_line_xdyd::y#5 reg byte x 600001.5
(byte) bitmap_line_xdyd::y#6 reg byte x 1.00000001E8
(byte) bitmap_line_xdyd::yd
(byte) bitmap_line_xdyd::yd#0 yd zp[1]:14 200002.0
(byte) bitmap_line_xdyd::yd#1 yd zp[1]:14 200002.0
(byte) bitmap_line_xdyd::yd#2 yd zp[1]:14 7228571.714285715
(void()) bitmap_line_xdyi((byte) bitmap_line_xdyi::x , (byte) bitmap_line_xdyi::y , (byte) bitmap_line_xdyi::x1 , (byte) bitmap_line_xdyi::xd , (byte) bitmap_line_xdyi::yd)
(byte~) bitmap_line_xdyi::$6 reg byte a 2.00000002E8
(label) bitmap_line_xdyi::@1
(label) bitmap_line_xdyi::@2
(label) bitmap_line_xdyi::@3
(label) bitmap_line_xdyi::@4
(label) bitmap_line_xdyi::@return
(byte) bitmap_line_xdyi::e
(byte) bitmap_line_xdyi::e#0 e zp[1]:19 2000002.0
(byte) bitmap_line_xdyi::e#1 e zp[1]:19 1.3333333466666667E8
(byte) bitmap_line_xdyi::e#2 e zp[1]:19 2.00000002E8
(byte) bitmap_line_xdyi::e#3 e zp[1]:19 4.0200000599999994E7
(byte) bitmap_line_xdyi::e#6 e zp[1]:19 1.00000001E8
(byte) bitmap_line_xdyi::x
(byte) bitmap_line_xdyi::x#0 x zp[1]:13 40000.4
(byte) bitmap_line_xdyi::x#1 x zp[1]:13 40000.4
(byte) bitmap_line_xdyi::x#2 x zp[1]:13 3.7500000375E7
(byte) bitmap_line_xdyi::x#3 x zp[1]:13 7.5250001E7
(byte) bitmap_line_xdyi::x#6 x zp[1]:13 600001.5
(byte) bitmap_line_xdyi::x1
(byte) bitmap_line_xdyi::x1#0 x1 zp[1]:22 66667.33333333333
(byte) bitmap_line_xdyi::x1#1 x1 zp[1]:22 66667.33333333333
(byte) bitmap_line_xdyi::x1#6 x1 zp[1]:22 7157143.071428572
(byte) bitmap_line_xdyi::xd
(byte) bitmap_line_xdyi::xd#0 xd zp[1]:18 100001.0
(byte) bitmap_line_xdyi::xd#1 xd zp[1]:18 100001.0
(byte) bitmap_line_xdyi::xd#5 xd zp[1]:18 1.4300000285714287E7
(byte) bitmap_line_xdyi::y
(byte) bitmap_line_xdyi::y#0 reg byte x 50000.5
(byte) bitmap_line_xdyi::y#1 reg byte x 50000.5
(byte) bitmap_line_xdyi::y#2 reg byte x 1.00000001E8
(byte) bitmap_line_xdyi::y#3 reg byte x 5.7285715E7
(byte) bitmap_line_xdyi::y#5 reg byte x 600001.5
(byte) bitmap_line_xdyi::y#6 reg byte x 1.00000001E8
(byte) bitmap_line_xdyi::yd
(byte) bitmap_line_xdyi::yd#0 yd zp[1]:15 200002.0
(byte) bitmap_line_xdyi::yd#1 yd zp[1]:15 200002.0
(byte) bitmap_line_xdyi::yd#2 yd zp[1]:15 7228571.714285715
(void()) bitmap_line_ydxd((byte) bitmap_line_ydxd::y , (byte) bitmap_line_ydxd::x , (byte) bitmap_line_ydxd::y1 , (byte) bitmap_line_ydxd::yd , (byte) bitmap_line_ydxd::xd)
(byte~) bitmap_line_ydxd::$6 reg byte x 2.00000002E8
(label) bitmap_line_ydxd::@1
(label) bitmap_line_ydxd::@2
(label) bitmap_line_ydxd::@3
(label) bitmap_line_ydxd::@4
(label) bitmap_line_ydxd::@return
(byte) bitmap_line_ydxd::e
(byte) bitmap_line_ydxd::e#0 e zp[1]:15 2000002.0
(byte) bitmap_line_ydxd::e#1 e zp[1]:15 1.3333333466666667E8
(byte) bitmap_line_ydxd::e#2 e zp[1]:15 2.00000002E8
(byte) bitmap_line_ydxd::e#3 e zp[1]:15 4.0200000599999994E7
(byte) bitmap_line_ydxd::e#6 e zp[1]:15 1.00000001E8
(byte) bitmap_line_ydxd::x
(byte) bitmap_line_ydxd::x#0 x zp[1]:22 50000.5
(byte) bitmap_line_ydxd::x#1 x zp[1]:22 50000.5
(byte) bitmap_line_ydxd::x#2 x zp[1]:22 1.00000001E8
(byte) bitmap_line_ydxd::x#3 x zp[1]:22 5.7285715E7
(byte) bitmap_line_ydxd::x#5 x zp[1]:22 600001.5
(byte) bitmap_line_ydxd::x#6 x zp[1]:22 1.00000001E8
(byte) bitmap_line_ydxd::xd
(byte) bitmap_line_ydxd::xd#0 xd zp[1]:18 200002.0
(byte) bitmap_line_ydxd::xd#1 xd zp[1]:18 200002.0
(byte) bitmap_line_ydxd::xd#2 xd zp[1]:18 7228571.714285715
(byte) bitmap_line_ydxd::y
(byte) bitmap_line_ydxd::y#0 y zp[1]:14 40000.4
(byte) bitmap_line_ydxd::y#1 y zp[1]:14 40000.4
(byte) bitmap_line_ydxd::y#2 y zp[1]:14 7.5250001E7
(byte) bitmap_line_ydxd::y#3 y zp[1]:14 3.7500000375E7
(byte) bitmap_line_ydxd::y#7 y zp[1]:14 600001.5
(byte) bitmap_line_ydxd::y1
(byte) bitmap_line_ydxd::y1#0 y1 zp[1]:19 66667.33333333333
(byte) bitmap_line_ydxd::y1#1 y1 zp[1]:19 66667.33333333333
(byte) bitmap_line_ydxd::y1#6 y1 zp[1]:19 7157143.071428572
(byte) bitmap_line_ydxd::yd
(byte) bitmap_line_ydxd::yd#0 yd zp[1]:13 100001.0
(byte) bitmap_line_ydxd::yd#1 yd zp[1]:13 100001.0
(byte) bitmap_line_ydxd::yd#5 yd zp[1]:13 1.4300000285714287E7
(void()) bitmap_line_ydxi((byte) bitmap_line_ydxi::y , (byte) bitmap_line_ydxi::x , (byte) bitmap_line_ydxi::y1 , (byte) bitmap_line_ydxi::yd , (byte) bitmap_line_ydxi::xd)
(byte~) bitmap_line_ydxi::$6 reg byte x 2.00000002E8
(label) bitmap_line_ydxi::@1
(label) bitmap_line_ydxi::@2
(label) bitmap_line_ydxi::@3
(label) bitmap_line_ydxi::@4
(label) bitmap_line_ydxi::@return
(byte) bitmap_line_ydxi::e
(byte) bitmap_line_ydxi::e#0 e zp[1]:15 2000002.0
(byte) bitmap_line_ydxi::e#1 e zp[1]:15 1.3333333466666667E8
(byte) bitmap_line_ydxi::e#2 e zp[1]:15 2.00000002E8
(byte) bitmap_line_ydxi::e#3 e zp[1]:15 4.0200000599999994E7
(byte) bitmap_line_ydxi::e#6 e zp[1]:15 1.00000001E8
(byte) bitmap_line_ydxi::x
(byte) bitmap_line_ydxi::x#0 x zp[1]:33 50000.5
(byte) bitmap_line_ydxi::x#1 x zp[1]:33 50000.5
(byte) bitmap_line_ydxi::x#2 x zp[1]:33 1.00000001E8
(byte) bitmap_line_ydxi::x#3 x zp[1]:33 5.7285715E7
(byte) bitmap_line_ydxi::x#5 x zp[1]:33 600001.5
(byte) bitmap_line_ydxi::x#6 x zp[1]:33 1.00000001E8
(byte) bitmap_line_ydxi::xd
(byte) bitmap_line_ydxi::xd#0 xd zp[1]:18 200002.0
(byte) bitmap_line_ydxi::xd#1 xd zp[1]:18 200002.0
(byte) bitmap_line_ydxi::xd#2 xd zp[1]:18 7228571.714285715
(byte) bitmap_line_ydxi::y
(byte) bitmap_line_ydxi::y#0 y zp[1]:14 40000.4
(byte) bitmap_line_ydxi::y#1 y zp[1]:14 40000.4
(byte) bitmap_line_ydxi::y#2 y zp[1]:14 3.7500000375E7
(byte) bitmap_line_ydxi::y#3 y zp[1]:14 7.5250001E7
(byte) bitmap_line_ydxi::y#6 y zp[1]:14 600001.5
(byte) bitmap_line_ydxi::y1
(byte) bitmap_line_ydxi::y1#0 y1 zp[1]:19 66667.33333333333
(byte) bitmap_line_ydxi::y1#1 y1 zp[1]:19 66667.33333333333
(byte) bitmap_line_ydxi::y1#6 y1 zp[1]:19 7157143.071428572
(byte) bitmap_line_ydxi::yd
(byte) bitmap_line_ydxi::yd#0 yd zp[1]:13 100001.0
(byte) bitmap_line_ydxi::yd#1 yd zp[1]:13 100001.0
(byte) bitmap_line_ydxi::yd#5 yd zp[1]:13 1.4300000285714287E7
(void()) bitmap_plot((byte) bitmap_plot::x , (byte) bitmap_plot::y)
(byte~) bitmap_plot::$1 reg byte a 2.000000002E9
(label) bitmap_plot::@return
(byte*) bitmap_plot::plotter
(word) bitmap_plot::plotter#0 plotter zp[2]:29 5.000000005E8
(word) bitmap_plot::plotter_x
(word) bitmap_plot::plotter_x#0 plotter_x zp[2]:29 1.000000001E9
(word) bitmap_plot::plotter_y
(word) bitmap_plot::plotter_y#0 plotter_y zp[2]:31 2.000000002E9
(byte) bitmap_plot::x
(byte) bitmap_plot::x#0 reg byte y 1.00000001E8
(byte) bitmap_plot::x#1 reg byte y 1.00000001E8
(byte) bitmap_plot::x#2 reg byte y 1.00000001E8
(byte) bitmap_plot::x#3 reg byte y 1.00000001E8
(byte) bitmap_plot::x#4 reg byte y 8.5000000175E8
(byte) bitmap_plot::y
(byte) bitmap_plot::y#0 reg byte x 2.00000002E8
(byte) bitmap_plot::y#1 reg byte x 2.00000002E8
(byte) bitmap_plot::y#2 reg byte x 2.00000002E8
(byte) bitmap_plot::y#3 reg byte x 2.00000002E8
(byte) bitmap_plot::y#4 reg byte x 1.200000003E9
(const to_nomodify byte*) bitmap_plot_bit[(number) $100]  = { fill( $100, 0) }
(const to_nomodify byte*) bitmap_plot_xhi[(number) $100]  = { fill( $100, 0) }
(const to_nomodify byte*) bitmap_plot_xlo[(number) $100]  = { fill( $100, 0) }
(const to_nomodify byte*) bitmap_plot_yhi[(number) $100]  = { fill( $100, 0) }
(const to_nomodify byte*) bitmap_plot_ylo[(number) $100]  = { fill( $100, 0) }
(void()) dtvSetCpuBankSegment1((byte) dtvSetCpuBankSegment1::cpuBankIdx)
(label) dtvSetCpuBankSegment1::@return
(const byte*) dtvSetCpuBankSegment1::cpuBank = (byte*) 255
(byte) dtvSetCpuBankSegment1::cpuBankIdx
(byte) dtvSetCpuBankSegment1::cpuBankIdx#1 reg byte a 200002.0
(byte) dtvSetCpuBankSegment1::cpuBankIdx#11 reg byte a 20002.0
(byte) dtvSetCpuBankSegment1::cpuBankIdx#13 reg byte a 1110003.0
(const nomodify byte*) form_a_mod_hi = (const byte*) form_fields_val+(byte) $f
(const nomodify byte*) form_a_mod_lo = (const byte*) form_fields_val+(byte) $10
(const nomodify byte*) form_a_pattern = (const byte*) form_fields_val+(byte) $a
(const nomodify byte*) form_a_start_hi = (const byte*) form_fields_val+(byte) $b
(const nomodify byte*) form_a_start_lo = (const byte*) form_fields_val+(byte) $c
(const nomodify byte*) form_a_step_hi = (const byte*) form_fields_val+(byte) $d
(const nomodify byte*) form_a_step_lo = (const byte*) form_fields_val+(byte) $e
(const nomodify byte*) form_b_mod_hi = (const byte*) form_fields_val+(byte) $16
(const nomodify byte*) form_b_mod_lo = (const byte*) form_fields_val+(byte) $17
(const nomodify byte*) form_b_pattern = (const byte*) form_fields_val+(byte) $11
(const nomodify byte*) form_b_start_hi = (const byte*) form_fields_val+(byte) $12
(const nomodify byte*) form_b_start_lo = (const byte*) form_fields_val+(byte) $13
(const nomodify byte*) form_b_step_hi = (const byte*) form_fields_val+(byte) $14
(const nomodify byte*) form_b_step_lo = (const byte*) form_fields_val+(byte) $15
(byte()) form_control()
(byte~) form_control::$12 reg byte a 2.0000002E7
(byte~) form_control::$13 reg byte a 2.0000002E7
(byte~) form_control::$14 reg byte a 2.0000002E7
(byte~) form_control::$15 reg byte a 2.0000002E7
(byte~) form_control::$22 reg byte a 2.0000002E7
(label) form_control::@1
(label) form_control::@10
(label) form_control::@11
(label) form_control::@12
(label) form_control::@13
(label) form_control::@14
(label) form_control::@15
(label) form_control::@16
(label) form_control::@17
(label) form_control::@18
(label) form_control::@19
(label) form_control::@2
(label) form_control::@20
(label) form_control::@21
(label) form_control::@22
(label) form_control::@23
(label) form_control::@3
(label) form_control::@4
(label) form_control::@5
(label) form_control::@6
(label) form_control::@7
(label) form_control::@8
(label) form_control::@9
(label) form_control::@return
(byte*) form_control::field
(byte*) form_control::field#0 field zp[2]:29 2962963.2592592593
(byte) form_control::key_event
(byte) form_control::key_event#0 reg byte a 1.3333334666666666E7
(byte) form_control::return
(byte) form_control::return#0 reg byte a 2000002.0
(byte) form_control::return#2 reg byte x 333333.6666666667
(const nomodify byte*) form_ctrl_bmm = (const byte*) form_fields_val+(byte) 1
(const nomodify byte*) form_ctrl_borof = (const byte*) form_fields_val+(byte) 8
(const nomodify byte*) form_ctrl_chunk = (const byte*) form_fields_val+(byte) 7
(const nomodify byte*) form_ctrl_colof = (const byte*) form_fields_val+(byte) 6
(const nomodify byte*) form_ctrl_ecm = (const byte*) form_fields_val+(byte) 3
(const nomodify byte*) form_ctrl_hicol = (const byte*) form_fields_val+(byte) 4
(const nomodify byte*) form_ctrl_line = (const byte*) form_fields_val+(byte) 5
(const nomodify byte*) form_ctrl_mcm = (const byte*) form_fields_val+(byte) 2
(const nomodify byte*) form_ctrl_overs = (const byte*) form_fields_val+(byte) 9
(signed byte) form_cursor_count
(signed byte) form_cursor_count#1 form_cursor_count zp[1]:3 28.25641025641026
(signed byte) form_cursor_count#15 form_cursor_count zp[1]:3 2000000.2
(signed byte) form_cursor_count#16 form_cursor_count zp[1]:3 1829418.0
(signed byte) form_cursor_count#21 form_cursor_count zp[1]:3 1585857.714285714
(signed byte) form_cursor_count#5 form_cursor_count zp[1]:3 1.0000001E7
(const nomodify byte*) form_dtv_palet = (const byte*) form_fields_val+(byte) $1b
(byte) form_field_idx
(byte) form_field_idx#1 form_field_idx zp[1]:4 28.25641025641026
(byte) form_field_idx#18 form_field_idx zp[1]:4 2417653.3529411764
(byte) form_field_idx#28 form_field_idx zp[1]:4 4387205.641025641
(byte) form_field_idx#31 form_field_idx zp[1]:4 3.0000003E7
(byte) form_field_idx#5 form_field_idx zp[1]:4 1.0000001E7
(byte) form_field_idx#6 form_field_idx zp[1]:4 1.0000001E7
(byte*()) form_field_ptr((byte) form_field_ptr::field_idx)
(label) form_field_ptr::@return
(byte*) form_field_ptr::field
(byte) form_field_ptr::field_idx
(byte) form_field_ptr::field_idx#0 reg byte x 2.000000002E9
(byte) form_field_ptr::field_idx#1 reg byte x 2.0000002E7
(byte) form_field_ptr::field_idx#2 reg byte x 7.003333334666666E9
(byte*) form_field_ptr::line
(word) form_field_ptr::line#0 line zp[2]:20 2.0000000002E9
(byte*) form_field_ptr::return
(byte*) form_field_ptr::return#0 return zp[2]:29 3.336666667333333E9
(byte*) form_field_ptr::return#3 return zp[2]:29 2.0000002E7
(byte) form_field_ptr::x
(byte) form_field_ptr::x#0 x zp[1]:22 5.25000000075E9
(byte) form_field_ptr::y
(byte) form_field_ptr::y#0 reg byte y 3.0000000003E10
(const byte) form_fields_cnt = (byte) $24
(const byte*) form_fields_max[]  = { (byte) $a, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) $d, (byte) $f, (byte) $f, (byte) $f, (byte) $f, (byte) $f, (byte) $f, (byte) $d, (byte) $f, (byte) $f, (byte) $f, (byte) $f, (byte) $f, (byte) $f, (byte) 3, (byte) 1, (byte) 4, (byte) 1, (byte) $f, (byte) $f, (byte) $f, (byte) $f, (byte) $f, (byte) $f, (byte) $f, (byte) $f }
(const byte*) form_fields_val[]  = { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(const byte*) form_fields_x[]  = { (byte) 8, (byte) $c, (byte) $c, (byte) $c, (byte) $c, (byte) $c, (byte) $c, (byte) $c, (byte) $c, (byte) $c, (byte) $19, (byte) $18, (byte) $19, (byte) $18, (byte) $19, (byte) $18, (byte) $19, (byte) $19, (byte) $18, (byte) $19, (byte) $18, (byte) $19, (byte) $18, (byte) $19, (byte) $25, (byte) $25, (byte) $25, (byte) $25, (byte) $24, (byte) $25, (byte) $24, (byte) $25, (byte) $24, (byte) $25, (byte) $24, (byte) $25 }
(const byte*) form_fields_y[]  = { (byte) 2, (byte) 5, (byte) 6, (byte) 7, (byte) 8, (byte) 9, (byte) $a, (byte) $b, (byte) $c, (byte) $d, (byte) 5, (byte) 6, (byte) 6, (byte) 7, (byte) 7, (byte) 8, (byte) 8, (byte) $b, (byte) $c, (byte) $c, (byte) $d, (byte) $d, (byte) $e, (byte) $e, (byte) 5, (byte) 6, (byte) 7, (byte) $a, (byte) $b, (byte) $b, (byte) $c, (byte) $c, (byte) $d, (byte) $d, (byte) $e, (byte) $e }
(const byte*) form_line_hi[(number) $19]  = { fill( $19, 0) }
(const byte*) form_line_lo[(number) $19]  = { fill( $19, 0) }
(void()) form_mode()
(byte~) form_mode::$11 reg byte a 2000002.0
(label) form_mode::@1
(label) form_mode::@10
(label) form_mode::@11
(label) form_mode::@12
(label) form_mode::@13
(label) form_mode::@14
(label) form_mode::@15
(label) form_mode::@16
(label) form_mode::@17
(label) form_mode::@18
(label) form_mode::@19
(label) form_mode::@2
(label) form_mode::@3
(label) form_mode::@4
(label) form_mode::@5
(label) form_mode::@6
(label) form_mode::@7
(label) form_mode::@8
(label) form_mode::@9
(label) form_mode::@return
(byte) form_mode::i
(byte) form_mode::i#1 reg byte x 150001.5
(byte) form_mode::i#2 reg byte x 200002.0
(byte) form_mode::preset_current
(byte) form_mode::preset_current#0 preset_current zp[1]:13 2002.0
(byte) form_mode::preset_current#1 preset_current zp[1]:13 50000.5
(byte) form_mode::preset_current#6 preset_current zp[1]:13 387625.625
(void()) form_render_values()
(label) form_render_values::@1
(label) form_render_values::@2
(label) form_render_values::@3
(label) form_render_values::@return
(byte*) form_render_values::field
(byte) form_render_values::idx
(byte) form_render_values::idx#1 reg byte x 2.000000002E9
(byte) form_render_values::idx#2 reg byte x 1.000000001E9
(void()) form_set_screen((byte*) form_set_screen::screen)
(byte~) form_set_screen::$0 reg byte a 2000002.0
(byte~) form_set_screen::$1 reg byte a 2000002.0
(label) form_set_screen::@1
(label) form_set_screen::@return
(byte*) form_set_screen::line
(byte*) form_set_screen::line#1 line zp[2]:16 666667.3333333334
(byte*) form_set_screen::line#2 line zp[2]:16 800000.8
(byte*) form_set_screen::screen
(byte) form_set_screen::y
(byte) form_set_screen::y#1 reg byte x 1500001.5
(byte) form_set_screen::y#2 reg byte x 666667.3333333334
(const nomodify byte*) form_vic_bg0_hi = (const byte*) form_fields_val+(byte) $1c
(const nomodify byte*) form_vic_bg0_lo = (const byte*) form_fields_val+(byte) $1d
(const nomodify byte*) form_vic_bg1_hi = (const byte*) form_fields_val+(byte) $1e
(const nomodify byte*) form_vic_bg1_lo = (const byte*) form_fields_val+(byte) $1f
(const nomodify byte*) form_vic_bg2_hi = (const byte*) form_fields_val+(byte) $20
(const nomodify byte*) form_vic_bg2_lo = (const byte*) form_fields_val+(byte) $21
(const nomodify byte*) form_vic_bg3_hi = (const byte*) form_fields_val+(byte) $22
(const nomodify byte*) form_vic_bg3_lo = (const byte*) form_fields_val+(byte) $23
(const nomodify byte*) form_vic_cols = (const byte*) form_fields_val+(byte) $1a
(const nomodify byte*) form_vic_gfx = (const byte*) form_fields_val+(byte) $19
(const nomodify byte*) form_vic_screen = (const byte*) form_fields_val+(byte) $18
(dword()) get_plane((byte) get_plane::idx)
(label) get_plane::@1
(label) get_plane::@10
(label) get_plane::@11
(label) get_plane::@12
(label) get_plane::@13
(label) get_plane::@14
(label) get_plane::@2
(label) get_plane::@3
(label) get_plane::@4
(label) get_plane::@5
(label) get_plane::@6
(label) get_plane::@7
(label) get_plane::@8
(label) get_plane::@9
(label) get_plane::@return
(byte) get_plane::idx
(byte) get_plane::idx#0 reg byte a 2002.0
(byte) get_plane::idx#1 reg byte a 2002.0
(byte) get_plane::idx#10 reg byte a 10144.000000000002
(dword) get_plane::return
(dword) get_plane::return#14 return zp[4]:9 500.5
(dword) get_plane::return#16 return zp[4]:9 2002.0
(dword) get_plane::return#17 return zp[4]:9 2002.0
(byte*()) get_vic_charset((byte) get_vic_charset::idx)
(label) get_vic_charset::@1
(label) get_vic_charset::@2
(label) get_vic_charset::@return
(byte) get_vic_charset::idx
(byte) get_vic_charset::idx#0 reg byte a 10501.5
(byte*) get_vic_charset::return
(byte*) get_vic_charset::return#2 return zp[2]:7 333.6666666666667
(byte*) get_vic_charset::return#4 return zp[2]:7 2002.0
(byte*()) get_vic_screen((byte) get_vic_screen::idx)
(label) get_vic_screen::@1
(label) get_vic_screen::@2
(label) get_vic_screen::@3
(label) get_vic_screen::@4
(label) get_vic_screen::@5
(label) get_vic_screen::@return
(byte) get_vic_screen::idx
(byte) get_vic_screen::idx#0 reg byte a 2002.0
(byte) get_vic_screen::idx#1 reg byte a 2002.0
(byte) get_vic_screen::idx#2 reg byte a 10401.400000000001
(byte*) get_vic_screen::return
(byte*) get_vic_screen::return#10 return zp[2]:16 2002.0
(byte*) get_vic_screen::return#11 return zp[2]:16 2002.0
(byte*) get_vic_screen::return#5 return zp[2]:16 500.5
(void()) gfx_init()
(label) gfx_init::@1
(label) gfx_init::@10
(label) gfx_init::@11
(label) gfx_init::@12
(label) gfx_init::@13
(label) gfx_init::@14
(label) gfx_init::@2
(label) gfx_init::@3
(label) gfx_init::@4
(label) gfx_init::@5
(label) gfx_init::@6
(label) gfx_init::@7
(label) gfx_init::@8
(label) gfx_init::@9
(label) gfx_init::@return
(void()) gfx_init_charset()
(label) gfx_init_charset::@1
(label) gfx_init_charset::@2
(label) gfx_init_charset::@3
(label) gfx_init_charset::@4
(label) gfx_init_charset::@return
(byte) gfx_init_charset::c
(byte) gfx_init_charset::c#1 c zp[1]:33 15001.5
(byte) gfx_init_charset::c#4 c zp[1]:33 2857.4285714285716
(byte*) gfx_init_charset::chargen
(byte*) gfx_init_charset::chargen#1 chargen zp[2]:20 42000.600000000006
(byte*) gfx_init_charset::chargen#2 chargen zp[2]:20 103334.66666666666
(byte*) gfx_init_charset::chargen#3 chargen zp[2]:20 20002.0
(byte*) gfx_init_charset::charset
(byte*) gfx_init_charset::charset#1 charset zp[2]:16 35000.5
(byte*) gfx_init_charset::charset#2 charset zp[2]:16 155002.0
(byte*) gfx_init_charset::charset#3 charset zp[2]:16 20002.0
(byte) gfx_init_charset::l
(byte) gfx_init_charset::l#1 reg byte x 150001.5
(byte) gfx_init_charset::l#2 reg byte x 50000.5
(void()) gfx_init_plane_8bppchunky()
(word~) gfx_init_plane_8bppchunky::$5 zp[2]:29 100001.0
(label) gfx_init_plane_8bppchunky::@1
(label) gfx_init_plane_8bppchunky::@2
(label) gfx_init_plane_8bppchunky::@3
(label) gfx_init_plane_8bppchunky::@4
(label) gfx_init_plane_8bppchunky::@5
(label) gfx_init_plane_8bppchunky::@6
(label) gfx_init_plane_8bppchunky::@7
(label) gfx_init_plane_8bppchunky::@return
(byte) gfx_init_plane_8bppchunky::c
(byte) gfx_init_plane_8bppchunky::c#0 reg byte a 200002.0
(byte*) gfx_init_plane_8bppchunky::gfxb
(byte*) gfx_init_plane_8bppchunky::gfxb#1 gfxb zp[2]:16 42000.600000000006
(byte*) gfx_init_plane_8bppchunky::gfxb#3 gfxb zp[2]:16 155002.0
(byte*) gfx_init_plane_8bppchunky::gfxb#4 gfxb zp[2]:16 75000.75
(byte*) gfx_init_plane_8bppchunky::gfxb#5 gfxb zp[2]:16 20002.0
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#2 reg byte x 200002.0
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 reg byte x 102501.25
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#7 reg byte x 20002.0
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 reg byte x 34444.88888888889
(word) gfx_init_plane_8bppchunky::x
(word) gfx_init_plane_8bppchunky::x#1 x zp[2]:20 150001.5
(word) gfx_init_plane_8bppchunky::x#2 x zp[2]:20 30000.300000000003
(byte) gfx_init_plane_8bppchunky::y
(byte) gfx_init_plane_8bppchunky::y#1 y zp[1]:14 15001.5
(byte) gfx_init_plane_8bppchunky::y#6 y zp[1]:14 9230.999999999998
(void()) gfx_init_plane_blank()
(label) gfx_init_plane_blank::@return
(void()) gfx_init_plane_charset8()
(byte~) gfx_init_plane_charset8::$2 reg byte a 2000002.0
(label) gfx_init_plane_charset8::@1
(label) gfx_init_plane_charset8::@2
(label) gfx_init_plane_charset8::@3
(label) gfx_init_plane_charset8::@4
(label) gfx_init_plane_charset8::@5
(label) gfx_init_plane_charset8::@6
(label) gfx_init_plane_charset8::@7
(label) gfx_init_plane_charset8::@8
(label) gfx_init_plane_charset8::@9
(label) gfx_init_plane_charset8::@return
(byte) gfx_init_plane_charset8::bits
(byte) gfx_init_plane_charset8::bits#0 bits zp[1]:15 100001.0
(byte) gfx_init_plane_charset8::bits#1 bits zp[1]:15 500000.5
(byte) gfx_init_plane_charset8::bits#2 bits zp[1]:15 442857.7142857142
(byte) gfx_init_plane_charset8::c
(byte) gfx_init_plane_charset8::c#2 reg byte a 2000002.0
(byte) gfx_init_plane_charset8::c#3 reg byte a 2000002.0
(byte) gfx_init_plane_charset8::ch
(byte) gfx_init_plane_charset8::ch#1 ch zp[1]:14 15001.5
(byte) gfx_init_plane_charset8::ch#8 ch zp[1]:14 1176.5882352941176
(byte*) gfx_init_plane_charset8::chargen
(byte*) gfx_init_plane_charset8::chargen#1 chargen zp[2]:16 13125.1875
(byte*) gfx_init_plane_charset8::chargen#2 chargen zp[2]:16 155002.0
(byte*) gfx_init_plane_charset8::chargen#3 chargen zp[2]:16 20002.0
(byte) gfx_init_plane_charset8::col
(byte) gfx_init_plane_charset8::col#1 col zp[1]:18 301429.14285714284
(byte) gfx_init_plane_charset8::col#2 col zp[1]:18 387500.5
(byte) gfx_init_plane_charset8::col#5 col zp[1]:18 70001.0
(byte) gfx_init_plane_charset8::col#6 col zp[1]:18 20002.0
(byte) gfx_init_plane_charset8::cp
(byte) gfx_init_plane_charset8::cp#1 reg byte x 1500001.5
(byte) gfx_init_plane_charset8::cp#2 reg byte x 222222.44444444444
(byte) gfx_init_plane_charset8::cr
(byte) gfx_init_plane_charset8::cr#1 cr zp[1]:34 150001.5
(byte) gfx_init_plane_charset8::cr#6 cr zp[1]:34 14285.857142857143
(byte*) gfx_init_plane_charset8::gfxa
(byte*) gfx_init_plane_charset8::gfxa#1 gfxa zp[2]:20 234444.88888888888
(byte*) gfx_init_plane_charset8::gfxa#2 gfxa zp[2]:20 516667.3333333334
(byte*) gfx_init_plane_charset8::gfxa#5 gfxa zp[2]:20 70001.0
(byte*) gfx_init_plane_charset8::gfxa#6 gfxa zp[2]:20 20002.0
(byte) gfx_init_plane_charset8::gfxbCpuBank
(const byte) gfx_init_plane_charset8::gfxbCpuBank#0 gfxbCpuBank = (byte)(const nomodify dword) PLANE_CHARSET8/(word) $4000
(void()) gfx_init_plane_fill((dword) gfx_init_plane_fill::plane_addr , (byte) gfx_init_plane_fill::fill)
(dword~) gfx_init_plane_fill::$0 zp[4]:23 20002.0
(word~) gfx_init_plane_fill::$1 zp[2]:27 20002.0
(word~) gfx_init_plane_fill::$4 zp[2]:16 20002.0
(word~) gfx_init_plane_fill::$5 zp[2]:16 20002.0
(label) gfx_init_plane_fill::@1
(label) gfx_init_plane_fill::@2
(label) gfx_init_plane_fill::@3
(label) gfx_init_plane_fill::@4
(label) gfx_init_plane_fill::@5
(label) gfx_init_plane_fill::@return
(byte) gfx_init_plane_fill::bx
(byte) gfx_init_plane_fill::bx#1 reg byte x 1500001.5
(byte) gfx_init_plane_fill::bx#2 reg byte x 666667.3333333334
(byte) gfx_init_plane_fill::by
(byte) gfx_init_plane_fill::by#1 by zp[1]:34 150001.5
(byte) gfx_init_plane_fill::by#4 by zp[1]:34 33333.666666666664
(byte) gfx_init_plane_fill::fill
(byte) gfx_init_plane_fill::fill#6 fill zp[1]:14 55555.61111111111
(byte*) gfx_init_plane_fill::gfxb
(word) gfx_init_plane_fill::gfxb#0 gfxb zp[2]:16 10001.0
(byte*) gfx_init_plane_fill::gfxb#1 gfxb zp[2]:16 420000.60000000003
(byte*) gfx_init_plane_fill::gfxb#2 gfxb zp[2]:16 1550002.0
(byte*) gfx_init_plane_fill::gfxb#3 gfxb zp[2]:16 210003.0
(byte*) gfx_init_plane_fill::gfxb#6 gfxb zp[2]:16 20002.0
(byte) gfx_init_plane_fill::gfxbCpuBank
(byte) gfx_init_plane_fill::gfxbCpuBank#0 reg byte a 20002.0
(dword) gfx_init_plane_fill::plane_addr
(dword) gfx_init_plane_fill::plane_addr#3 plane_addr zp[4]:9 3333.6666666666665
(void()) gfx_init_plane_full()
(label) gfx_init_plane_full::@return
(void()) gfx_init_plane_horisontal()
(byte~) gfx_init_plane_horisontal::$2 reg byte a 200002.0
(label) gfx_init_plane_horisontal::@1
(label) gfx_init_plane_horisontal::@2
(label) gfx_init_plane_horisontal::@3
(label) gfx_init_plane_horisontal::@4
(label) gfx_init_plane_horisontal::@5
(label) gfx_init_plane_horisontal::@6
(label) gfx_init_plane_horisontal::@7
(label) gfx_init_plane_horisontal::@return
(byte) gfx_init_plane_horisontal::ax
(byte) gfx_init_plane_horisontal::ax#1 reg byte x 150001.5
(byte) gfx_init_plane_horisontal::ax#2 reg byte x 25000.25
(byte) gfx_init_plane_horisontal::ay
(byte) gfx_init_plane_horisontal::ay#1 ay zp[1]:13 15001.5
(byte) gfx_init_plane_horisontal::ay#4 ay zp[1]:13 10909.363636363636
(byte*) gfx_init_plane_horisontal::gfxa
(byte*) gfx_init_plane_horisontal::gfxa#1 gfxa zp[2]:16 200002.0
(byte*) gfx_init_plane_horisontal::gfxa#2 gfxa zp[2]:16 200002.0
(byte*) gfx_init_plane_horisontal::gfxa#3 gfxa zp[2]:16 102001.2
(byte*) gfx_init_plane_horisontal::gfxa#6 gfxa zp[2]:16 20002.0
(byte*) gfx_init_plane_horisontal::gfxa#7 gfxa zp[2]:16 62000.8
(byte) gfx_init_plane_horisontal::gfxbCpuBank
(const byte) gfx_init_plane_horisontal::gfxbCpuBank#0 gfxbCpuBank = (byte)(const nomodify dword) PLANE_HORISONTAL/(word) $4000
(void()) gfx_init_plane_horisontal2()
(byte~) gfx_init_plane_horisontal2::$2 reg byte a 200002.0
(label) gfx_init_plane_horisontal2::@1
(label) gfx_init_plane_horisontal2::@2
(label) gfx_init_plane_horisontal2::@3
(label) gfx_init_plane_horisontal2::@4
(label) gfx_init_plane_horisontal2::@return
(byte) gfx_init_plane_horisontal2::ax
(byte) gfx_init_plane_horisontal2::ax#1 reg byte x 150001.5
(byte) gfx_init_plane_horisontal2::ax#2 reg byte x 40000.4
(byte) gfx_init_plane_horisontal2::ay
(byte) gfx_init_plane_horisontal2::ay#1 ay zp[1]:15 15001.5
(byte) gfx_init_plane_horisontal2::ay#4 ay zp[1]:15 15000.375
(byte*) gfx_init_plane_horisontal2::gfxa
(byte*) gfx_init_plane_horisontal2::gfxa#1 gfxa zp[2]:16 42000.600000000006
(byte*) gfx_init_plane_horisontal2::gfxa#2 gfxa zp[2]:16 77501.0
(byte*) gfx_init_plane_horisontal2::gfxa#3 gfxa zp[2]:16 20002.0
(byte) gfx_init_plane_horisontal2::gfxbCpuBank
(const byte) gfx_init_plane_horisontal2::gfxbCpuBank#0 gfxbCpuBank = (byte)(const nomodify dword) PLANE_HORISONTAL2/(word) $4000
(byte) gfx_init_plane_horisontal2::row
(byte) gfx_init_plane_horisontal2::row#0 reg byte a 200002.0
(const byte*) gfx_init_plane_horisontal2::row_bitmask[]  = { (byte) 0, (byte) $55, (byte) $aa, (byte) $ff }
(void()) gfx_init_plane_vertical()
(label) gfx_init_plane_vertical::@1
(label) gfx_init_plane_vertical::@2
(label) gfx_init_plane_vertical::@3
(label) gfx_init_plane_vertical::@4
(label) gfx_init_plane_vertical::@return
(byte) gfx_init_plane_vertical::bx
(byte) gfx_init_plane_vertical::bx#1 reg byte x 150001.5
(byte) gfx_init_plane_vertical::bx#2 reg byte x 66667.33333333333
(byte) gfx_init_plane_vertical::by
(byte) gfx_init_plane_vertical::by#1 by zp[1]:13 15001.5
(byte) gfx_init_plane_vertical::by#4 by zp[1]:13 3333.6666666666665
(byte*) gfx_init_plane_vertical::gfxb
(byte*) gfx_init_plane_vertical::gfxb#1 gfxb zp[2]:16 42000.600000000006
(byte*) gfx_init_plane_vertical::gfxb#2 gfxb zp[2]:16 155002.0
(byte*) gfx_init_plane_vertical::gfxb#3 gfxb zp[2]:16 20002.0
(byte) gfx_init_plane_vertical::gfxbCpuBank
(const byte) gfx_init_plane_vertical::gfxbCpuBank#0 gfxbCpuBank = (byte)(const nomodify dword) PLANE_VERTICAL/(word) $4000
(void()) gfx_init_plane_vertical2()
(label) gfx_init_plane_vertical2::@return
(void()) gfx_init_screen0()
(byte~) gfx_init_screen0::$0 reg byte a 200002.0
(byte~) gfx_init_screen0::$1 zp[1]:34 100001.0
(byte~) gfx_init_screen0::$2 reg byte a 200002.0
(byte~) gfx_init_screen0::$3 reg byte a 200002.0
(label) gfx_init_screen0::@1
(label) gfx_init_screen0::@2
(label) gfx_init_screen0::@3
(label) gfx_init_screen0::@return
(byte*) gfx_init_screen0::ch
(byte*) gfx_init_screen0::ch#1 ch zp[2]:20 42000.600000000006
(byte*) gfx_init_screen0::ch#2 ch zp[2]:20 51667.33333333333
(byte*) gfx_init_screen0::ch#3 ch zp[2]:20 20002.0
(byte) gfx_init_screen0::cx
(byte) gfx_init_screen0::cx#1 reg byte x 150001.5
(byte) gfx_init_screen0::cx#2 reg byte x 42857.57142857143
(byte) gfx_init_screen0::cy
(byte) gfx_init_screen0::cy#1 cy zp[1]:19 15001.5
(byte) gfx_init_screen0::cy#4 cy zp[1]:19 12000.300000000001
(void()) gfx_init_screen1()
(byte~) gfx_init_screen1::$0 reg byte a 200002.0
(byte~) gfx_init_screen1::$1 reg byte a 200002.0
(label) gfx_init_screen1::@1
(label) gfx_init_screen1::@2
(label) gfx_init_screen1::@3
(label) gfx_init_screen1::@return
(byte*) gfx_init_screen1::ch
(byte*) gfx_init_screen1::ch#1 ch zp[2]:20 42000.600000000006
(byte*) gfx_init_screen1::ch#2 ch zp[2]:20 77501.0
(byte*) gfx_init_screen1::ch#3 ch zp[2]:20 20002.0
(byte) gfx_init_screen1::cx
(byte) gfx_init_screen1::cx#1 reg byte x 150001.5
(byte) gfx_init_screen1::cx#2 reg byte x 60000.600000000006
(byte) gfx_init_screen1::cy
(byte) gfx_init_screen1::cy#1 cy zp[1]:18 15001.5
(byte) gfx_init_screen1::cy#4 cy zp[1]:18 15000.375
(void()) gfx_init_screen2()
(byte~) gfx_init_screen2::$0 reg byte a 200002.0
(byte~) gfx_init_screen2::$3 reg byte a 200002.0
(byte~) gfx_init_screen2::$4 reg byte a 200002.0
(label) gfx_init_screen2::@1
(label) gfx_init_screen2::@2
(label) gfx_init_screen2::@3
(label) gfx_init_screen2::@return
(byte*) gfx_init_screen2::ch
(byte*) gfx_init_screen2::ch#1 ch zp[2]:16 42000.600000000006
(byte*) gfx_init_screen2::ch#2 ch zp[2]:16 44286.28571428572
(byte*) gfx_init_screen2::ch#3 ch zp[2]:16 20002.0
(byte) gfx_init_screen2::col
(byte) gfx_init_screen2::col#0 reg byte y 150001.5
(byte) gfx_init_screen2::col2
(byte) gfx_init_screen2::col2#0 col2 zp[1]:34 100001.0
(byte) gfx_init_screen2::cx
(byte) gfx_init_screen2::cx#1 reg byte x 150001.5
(byte) gfx_init_screen2::cx#2 reg byte x 37500.375
(byte) gfx_init_screen2::cy
(byte) gfx_init_screen2::cy#1 cy zp[1]:18 15001.5
(byte) gfx_init_screen2::cy#4 cy zp[1]:18 10909.363636363636
(void()) gfx_init_screen3()
(byte~) gfx_init_screen3::$0 reg byte a 200002.0
(byte~) gfx_init_screen3::$1 zp[1]:34 100001.0
(byte~) gfx_init_screen3::$2 reg byte a 200002.0
(byte~) gfx_init_screen3::$3 reg byte a 200002.0
(label) gfx_init_screen3::@1
(label) gfx_init_screen3::@2
(label) gfx_init_screen3::@3
(label) gfx_init_screen3::@return
(byte*) gfx_init_screen3::ch
(byte*) gfx_init_screen3::ch#1 ch zp[2]:16 42000.600000000006
(byte*) gfx_init_screen3::ch#2 ch zp[2]:16 51667.33333333333
(byte*) gfx_init_screen3::ch#3 ch zp[2]:16 20002.0
(byte) gfx_init_screen3::cx
(byte) gfx_init_screen3::cx#1 reg byte x 150001.5
(byte) gfx_init_screen3::cx#2 reg byte x 42857.57142857143
(byte) gfx_init_screen3::cy
(byte) gfx_init_screen3::cy#1 cy zp[1]:15 15001.5
(byte) gfx_init_screen3::cy#4 cy zp[1]:15 12000.300000000001
(void()) gfx_init_screen4()
(label) gfx_init_screen4::@1
(label) gfx_init_screen4::@2
(label) gfx_init_screen4::@3
(label) gfx_init_screen4::@return
(byte*) gfx_init_screen4::ch
(byte*) gfx_init_screen4::ch#1 ch zp[2]:16 42000.600000000006
(byte*) gfx_init_screen4::ch#2 ch zp[2]:16 155002.0
(byte*) gfx_init_screen4::ch#3 ch zp[2]:16 20002.0
(byte) gfx_init_screen4::cx
(byte) gfx_init_screen4::cx#1 reg byte x 150001.5
(byte) gfx_init_screen4::cx#2 reg byte x 66667.33333333333
(byte) gfx_init_screen4::cy
(byte) gfx_init_screen4::cy#1 cy zp[1]:14 15001.5
(byte) gfx_init_screen4::cy#4 cy zp[1]:14 3333.6666666666665
(void()) gfx_init_vic_bitmap()
(label) gfx_init_vic_bitmap::@1
(label) gfx_init_vic_bitmap::@2
(label) gfx_init_vic_bitmap::@3
(label) gfx_init_vic_bitmap::@4
(label) gfx_init_vic_bitmap::@return
(byte) gfx_init_vic_bitmap::l
(byte) gfx_init_vic_bitmap::l#1 l zp[1]:34 20002.0
(byte) gfx_init_vic_bitmap::l#2 l zp[1]:34 10001.000000000002
(const byte) gfx_init_vic_bitmap::lines_cnt = (byte) 9
(const byte*) gfx_init_vic_bitmap::lines_x[]  = { (byte) 0, (byte) $ff, (byte) $ff, (byte) 0, (byte) 0, (byte) $80, (byte) $ff, (byte) $80, (byte) 0, (byte) $80 }
(const byte*) gfx_init_vic_bitmap::lines_y[]  = { (byte) 0, (byte) 0, (byte) $c7, (byte) $c7, (byte) 0, (byte) 0, (byte) $64, (byte) $c7, (byte) $64, (byte) 0 }
(void()) gfx_mode()
(byte~) gfx_mode::$18 reg byte a 2002.0
(dword~) gfx_mode::$20 zp[4]:9 2002.0
(byte~) gfx_mode::$23 reg byte a 2002.0
(word~) gfx_mode::$24 zp[2]:20 1001.0
(byte~) gfx_mode::$25 reg byte a 2002.0
(word~) gfx_mode::$26 zp[2]:29 2002.0
(byte~) gfx_mode::$27 reg byte a 2002.0
(byte~) gfx_mode::$28 reg byte a 2002.0
(byte~) gfx_mode::$29 reg byte a 2002.0
(byte~) gfx_mode::$30 reg byte a 2002.0
(byte~) gfx_mode::$31 reg byte a 2002.0
(byte~) gfx_mode::$32 reg byte a 2002.0
(dword~) gfx_mode::$34 zp[4]:9 2002.0
(byte~) gfx_mode::$37 reg byte a 2002.0
(word~) gfx_mode::$38 zp[2]:31 1001.0
(byte~) gfx_mode::$39 reg byte a 2002.0
(word~) gfx_mode::$40 zp[2]:27 2002.0
(byte~) gfx_mode::$41 reg byte a 2002.0
(byte~) gfx_mode::$42 reg byte a 2002.0
(byte~) gfx_mode::$43 reg byte a 2002.0
(byte~) gfx_mode::$44 reg byte a 2002.0
(byte~) gfx_mode::$45 reg byte a 2002.0
(word~) gfx_mode::$47 zp[2]:16 2002.0
(word~) gfx_mode::$48 zp[2]:16 125.125
(word~) gfx_mode::$50 zp[2]:7 2002.0
(byte~) gfx_mode::$51 reg byte a 2002.0
(byte~) gfx_mode::$52 zp[1]:19 1001.0
(byte~) gfx_mode::$53 reg byte a 2002.0
(byte~) gfx_mode::$55 reg byte a 2002.0
(byte~) gfx_mode::$56 reg byte a 2002.0
(byte~) gfx_mode::$57 reg byte a 2002.0
(byte~) gfx_mode::$58 reg byte a 2002.0
(byte~) gfx_mode::$59 reg byte a 2002.0
(byte~) gfx_mode::$60 reg byte a 2002.0
(byte~) gfx_mode::$61 reg byte a 2002.0
(byte~) gfx_mode::$62 reg byte a 2002.0
(byte*~) gfx_mode::$82 zp[2]:16 1001.0
(byte*~) gfx_mode::$83 zp[2]:7 1001.0
(byte~) gfx_mode::$84 reg byte a 2002.0
(label) gfx_mode::@1
(label) gfx_mode::@10
(label) gfx_mode::@11
(label) gfx_mode::@12
(label) gfx_mode::@13
(label) gfx_mode::@14
(label) gfx_mode::@15
(label) gfx_mode::@16
(label) gfx_mode::@17
(label) gfx_mode::@18
(label) gfx_mode::@19
(label) gfx_mode::@2
(label) gfx_mode::@20
(label) gfx_mode::@21
(label) gfx_mode::@22
(label) gfx_mode::@23
(label) gfx_mode::@24
(label) gfx_mode::@25
(label) gfx_mode::@26
(label) gfx_mode::@27
(label) gfx_mode::@28
(label) gfx_mode::@29
(label) gfx_mode::@3
(label) gfx_mode::@30
(label) gfx_mode::@31
(label) gfx_mode::@32
(label) gfx_mode::@33
(label) gfx_mode::@4
(label) gfx_mode::@5
(label) gfx_mode::@6
(label) gfx_mode::@7
(label) gfx_mode::@8
(label) gfx_mode::@9
(label) gfx_mode::@return
(byte*) gfx_mode::col
(byte*) gfx_mode::col#1 col zp[2]:5 350000.5
(byte*) gfx_mode::col#2 col zp[2]:5 1550002.0
(byte*) gfx_mode::col#3 col zp[2]:5 200002.0
(byte) gfx_mode::cx
(byte) gfx_mode::cx#1 reg byte x 1500001.5
(byte) gfx_mode::cx#2 reg byte x 500000.5
(byte) gfx_mode::cy
(byte) gfx_mode::cy#1 cy zp[1]:13 150001.5
(byte) gfx_mode::cy#4 cy zp[1]:13 28571.714285714286
(byte) gfx_mode::dtv_control
(byte) gfx_mode::dtv_control#10 reg byte x 2002.0
(byte) gfx_mode::dtv_control#11 reg byte x 2002.0
(byte) gfx_mode::dtv_control#12 reg byte x 3003.0
(byte) gfx_mode::dtv_control#13 reg byte x 2002.0
(byte) gfx_mode::dtv_control#14 reg byte x 1001.0
(byte) gfx_mode::dtv_control#15 reg byte x 2002.0
(byte) gfx_mode::dtv_control#2 reg byte x 2002.0
(byte) gfx_mode::dtv_control#3 reg byte x 2002.0
(byte) gfx_mode::dtv_control#4 reg byte x 2002.0
(byte) gfx_mode::dtv_control#5 reg byte x 2002.0
(byte) gfx_mode::dtv_control#6 reg byte x 2002.0
(byte) gfx_mode::i
(byte) gfx_mode::i#1 reg byte x 150001.5
(byte) gfx_mode::i#2 reg byte x 200002.0
(byte) gfx_mode::j
(byte) gfx_mode::j#1 reg byte x 150001.5
(byte) gfx_mode::j#2 reg byte x 200002.0
(byte) gfx_mode::keyboard_event
(byte) gfx_mode::keyboard_event#0 reg byte a 200002.0
(dword) gfx_mode::plane_a
(dword) gfx_mode::plane_a#0 plane_a zp[4]:9 500.5
(byte) gfx_mode::plane_a_offs
(byte) gfx_mode::plane_a_offs#0 reg byte x 400.4
(dword) gfx_mode::plane_b
(dword) gfx_mode::plane_b#0 plane_b zp[4]:9 500.5
(byte) gfx_mode::plane_b_offs
(byte) gfx_mode::plane_b_offs#0 reg byte x 400.4
(byte*) gfx_mode::vic_colors
(byte*) gfx_mode::vic_colors#0 vic_colors zp[2]:16 2002.0
(byte*) gfx_mode::vic_colors#1 vic_colors zp[2]:16 420000.60000000003
(byte*) gfx_mode::vic_colors#2 vic_colors zp[2]:16 1033334.6666666667
(byte*) gfx_mode::vic_colors#3 vic_colors zp[2]:16 201003.0
(byte) gfx_mode::vic_control
(byte) gfx_mode::vic_control#2 reg byte x 2002.0
(byte) gfx_mode::vic_control#4 reg byte x 3003.0
(byte) gfx_mode::vic_control#5 reg byte x 1001.0
(byte) gfx_mode::vic_control2
(byte) gfx_mode::vic_control2#2 reg byte a 1001.0
(byte()) keyboard_event_get()
(label) keyboard_event_get::@1
(label) keyboard_event_get::@return
(byte) keyboard_event_get::return
(byte) keyboard_event_get::return#1 reg byte a 2.00000002E8
(byte) keyboard_event_get::return#2 reg byte a 2.752500075E7
(byte) keyboard_event_get::return#3 reg byte a 200002.0
(byte) keyboard_event_get::return#4 reg byte a 2.0000002E7
(byte()) keyboard_event_pressed((byte) keyboard_event_pressed::keycode)
(byte~) keyboard_event_pressed::$0 reg byte a 2.000000002E9
(byte~) keyboard_event_pressed::$1 reg byte a 2.000000002E9
(label) keyboard_event_pressed::@return
(byte) keyboard_event_pressed::keycode
(byte) keyboard_event_pressed::keycode#4 keycode zp[1]:15 6.666666673333334E8
(byte) keyboard_event_pressed::return
(byte) keyboard_event_pressed::return#0 reg byte a 2.00000002E8
(byte) keyboard_event_pressed::return#1 reg byte a 2.00000002E8
(byte) keyboard_event_pressed::return#10 reg byte a 2.333333341666667E8
(byte) keyboard_event_pressed::return#2 reg byte a 2.00000002E8
(byte) keyboard_event_pressed::return#3 reg byte a 2.00000002E8
(byte) keyboard_event_pressed::row_bits
(byte) keyboard_event_pressed::row_bits#0 row_bits zp[1]:33 1.000000001E9
(void()) keyboard_event_scan()
(byte~) keyboard_event_scan::$0 reg byte a 2.00000002E8
(byte~) keyboard_event_scan::$15 reg byte a 2.0000000000002E13
(byte~) keyboard_event_scan::$16 reg byte a 2.0000000000002E13
(byte~) keyboard_event_scan::$23 reg byte a 2.0000000000002E13
(byte~) keyboard_event_scan::$3 reg byte a 2.00000002E8
(byte~) keyboard_event_scan::$6 reg byte a 2.00000002E8
(byte~) keyboard_event_scan::$9 reg byte a 2.00000002E8
(label) keyboard_event_scan::@1
(label) keyboard_event_scan::@10
(label) keyboard_event_scan::@11
(label) keyboard_event_scan::@12
(label) keyboard_event_scan::@13
(label) keyboard_event_scan::@14
(label) keyboard_event_scan::@15
(label) keyboard_event_scan::@16
(label) keyboard_event_scan::@17
(label) keyboard_event_scan::@18
(label) keyboard_event_scan::@19
(label) keyboard_event_scan::@2
(label) keyboard_event_scan::@20
(label) keyboard_event_scan::@21
(label) keyboard_event_scan::@22
(label) keyboard_event_scan::@23
(label) keyboard_event_scan::@3
(label) keyboard_event_scan::@4
(label) keyboard_event_scan::@5
(label) keyboard_event_scan::@6
(label) keyboard_event_scan::@7
(label) keyboard_event_scan::@8
(label) keyboard_event_scan::@9
(label) keyboard_event_scan::@return
(byte) keyboard_event_scan::col
(byte) keyboard_event_scan::col#1 reg byte x 1.50000000000015E13
(byte) keyboard_event_scan::col#2 reg byte x 2.857142857143143E12
(byte) keyboard_event_scan::event_type
(byte) keyboard_event_scan::event_type#0 reg byte a 2.0000000000002E13
(byte) keyboard_event_scan::keycode
(byte) keyboard_event_scan::keycode#1 keycode zp[1]:34 2.000000000002E12
(byte) keyboard_event_scan::keycode#10 keycode zp[1]:34 3.1538461538465386E12
(byte) keyboard_event_scan::keycode#11 keycode zp[1]:34 5.000000000005E11
(byte) keyboard_event_scan::keycode#13 keycode zp[1]:34 1.000000000001E12
(byte) keyboard_event_scan::keycode#14 keycode zp[1]:34 5.25000000000075E12
(byte) keyboard_event_scan::row
(byte) keyboard_event_scan::row#1 row zp[1]:14 1.5000000000015E12
(byte) keyboard_event_scan::row#2 row zp[1]:14 6.0000000000024E11
(byte) keyboard_event_scan::row_scan
(byte) keyboard_event_scan::row_scan#0 row_scan zp[1]:22 1.2777777777780554E12
(const byte*) keyboard_events[(number) 8]  = { fill( 8, 0) }
(byte) keyboard_events_size
(byte) keyboard_events_size#1 keyboard_events_size zp[1]:2 2.0000000000002E13
(byte) keyboard_events_size#100 keyboard_events_size zp[1]:2 8.824411764723529E10
(byte) keyboard_events_size#105 keyboard_events_size zp[1]:2 1.02000000000012E13
(byte) keyboard_events_size#106 keyboard_events_size zp[1]:2 4.285857142862857E11
(byte) keyboard_events_size#18 keyboard_events_size zp[1]:2 8.100000000000898E12
(byte) keyboard_events_size#2 keyboard_events_size zp[1]:2 2.0000000000002E13
(byte) keyboard_events_size#24 keyboard_events_size zp[1]:2 1117778.3666666667
(byte) keyboard_events_size#27 keyboard_events_size zp[1]:2 28.25641025641026
(byte) keyboard_events_size#4 keyboard_events_size zp[1]:2 1.500000015E8
(byte) keyboard_events_size#47 keyboard_events_size zp[1]:2 653000.2352941177
(byte) keyboard_events_size#97 keyboard_events_size zp[1]:2 1.10100003E8
(void()) keyboard_init()
(label) keyboard_init::@return
(const byte*) keyboard_matrix_col_bitmask[(number) 8]  = { (byte) 1, (byte) 2, (byte) 4, (byte) 8, (byte) $10, (byte) $20, (byte) $40, (byte) $80 }
(byte()) keyboard_matrix_read((byte) keyboard_matrix_read::rowid)
(label) keyboard_matrix_read::@return
(byte) keyboard_matrix_read::return
(byte) keyboard_matrix_read::return#0 reg byte a 3.666666666667333E12
(byte) keyboard_matrix_read::return#2 reg byte a 2.000000000002E12
(byte) keyboard_matrix_read::row_pressed_bits
(byte) keyboard_matrix_read::rowid
(byte) keyboard_matrix_read::rowid#0 reg byte x 1.1000000000002E13
(const byte*) keyboard_matrix_row_bitmask[(number) 8]  = { (byte) $fe, (byte) $fd, (byte) $fb, (byte) $f7, (byte) $ef, (byte) $df, (byte) $bf, (byte) $7f }
(byte) keyboard_modifiers
(byte) keyboard_modifiers#18 reg byte x 4.00000004E7
(byte) keyboard_modifiers#19 reg byte x 8.00000008E7
(byte) keyboard_modifiers#20 reg byte x 8.00000008E7
(byte) keyboard_modifiers#21 reg byte x 2.0000000363636363E7
(byte) keyboard_modifiers#3 reg byte x 2.00000002E8
(byte) keyboard_modifiers#4 reg byte x 2.00000002E8
(byte) keyboard_modifiers#5 reg byte x 2.00000002E8
(const byte*) keyboard_scan_values[(number) 8]  = { fill( 8, 0) }
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@3
(label) memset::@return
(byte) memset::c
(const byte) memset::c#0 c = (byte) ' '
(byte*) memset::dst
(byte*) memset::dst#1 dst zp[2]:16 2.0000002E7
(byte*) memset::dst#2 dst zp[2]:16 1.3366668333333332E7
(byte*) memset::dst#4 dst zp[2]:16 200002.0
(byte*) memset::end
(byte*) memset::end#0 end zp[2]:31 1683333.6666666665
(word) memset::num
(const word) memset::num#0 num = (word) $3e8
(void*) memset::return
(void*) memset::str
(void*) memset::str#0 str zp[2]:16 3333.6666666666665
(const byte*) preset_8bpppixelcell[]  = { (byte) $a, (byte) 0, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) $b, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(const byte*) preset_chunky[]  = { (byte) 7, (byte) 0, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 6, (byte) 0, (byte) 0, (byte) 0, (byte) 8, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(const byte*) preset_ecmchar[]  = { (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 2, (byte) 0, (byte) 5, (byte) 0, (byte) 6 }
(const byte*) preset_hi_ecmchar[]  = { (byte) 5, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 3, (byte) 4, (byte) 6, (byte) 8, (byte) 9, (byte) $c, (byte) $c }
(const byte*) preset_hi_stdchar[]  = { (byte) 4, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(const byte*) preset_mcbm[]  = { (byte) 3, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 2, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 9, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(const byte*) preset_sixsfred[]  = { (byte) 8, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 9, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) $a, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(const byte*) preset_sixsfred2[]  = { (byte) 9, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 9, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) $a, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(const byte*) preset_stdbm[]  = { (byte) 2, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 2, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(const byte*) preset_stdchar[]  = { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(const byte*) preset_twoplane[]  = { (byte) 6, (byte) 1, (byte) 0, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 7, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 8, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 7, (byte) 0, (byte) $d, (byte) 4, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0 reg byte a 1.10000002E8
(byte*) print_char_cursor
(byte*) print_char_cursor#24 print_char_cursor zp[2]:5 1005001.5
(byte*) print_char_cursor#28 print_char_cursor zp[2]:5 3.6666667333333336E7
(byte*) print_char_cursor#41 print_char_cursor zp[2]:5 3.683333416666667E7
(byte*) print_char_cursor#42 print_char_cursor zp[2]:5 1.4328571434285712E9
(byte*) print_char_cursor#72 print_char_cursor zp[2]:5 20002.0
(byte*) print_char_cursor#73 print_char_cursor zp[2]:5 2000002.0
(void()) print_cls()
(label) print_cls::@return
(const to_nomodify byte*) print_hextab[]  = (byte*) "0123456789abcdef"z
(byte*) print_line_cursor
(byte*) print_line_cursor#2 print_line_cursor zp[2]:7 917500.25
(byte*) print_line_cursor#21 print_line_cursor zp[2]:7 2.0010000003E10
(byte*) print_line_cursor#22 print_line_cursor zp[2]:7 6.000400001E9
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(byte*) print_screen
(void()) print_set_screen((byte*) print_set_screen::screen)
(label) print_set_screen::@return
(byte*) print_set_screen::screen
(byte*) print_set_screen::screen#2 screen zp[2]:7 1333.4666666666667
(void()) print_str_at((byte*) print_str_at::str , (byte*) print_str_at::at)
(label) print_str_at::@1
(label) print_str_at::@2
(label) print_str_at::@return
(byte*) print_str_at::at
(byte*) print_str_at::at#0 at zp[2]:5 1.0000000001E10
(byte*) print_str_at::at#2 at zp[2]:5 1.0000000001E10
(byte*) print_str_at::str
(byte*) print_str_at::str#0 str zp[2]:16 2.0000000002E10
(byte*) print_str_at::str#1 str zp[2]:16 5500001.0
(byte*) print_str_at::str#2 str zp[2]:16 1.000250000125E10
(void()) print_str_lines((byte*) print_str_lines::str)
(label) print_str_lines::@1
(label) print_str_lines::@2
(label) print_str_lines::@3
(label) print_str_lines::@4
(label) print_str_lines::@5
(label) print_str_lines::@6
(label) print_str_lines::@return
(byte) print_str_lines::ch
(byte) print_str_lines::ch#0 reg byte a 6666667.333333333
(byte*) print_str_lines::str
(byte*) print_str_lines::str#0 str zp[2]:16 2333333.666666667
(byte*) print_str_lines::str#3 str zp[2]:16 1505002.0
(byte*) print_str_lines::str#4 str zp[2]:16 1.5500002E7
(byte*) print_str_lines::str#5 str zp[2]:16 5000.5
(void()) render_preset_name((byte) render_preset_name::idx)
(label) render_preset_name::@1
(label) render_preset_name::@10
(label) render_preset_name::@11
(label) render_preset_name::@12
(label) render_preset_name::@2
(label) render_preset_name::@3
(label) render_preset_name::@4
(label) render_preset_name::@5
(label) render_preset_name::@6
(label) render_preset_name::@7
(label) render_preset_name::@8
(label) render_preset_name::@9
(label) render_preset_name::@return
(byte) render_preset_name::idx
(byte) render_preset_name::idx#0 reg byte a 2002.0
(byte) render_preset_name::idx#1 reg byte a 200002.0
(byte) render_preset_name::idx#10 reg byte a 1009183.0000000002
(byte*) render_preset_name::name
(const byte*) render_preset_name::name#1 name_1 = (byte*) "Standard Charset              "
(const byte*) render_preset_name::name#10 name_10 = (byte*) "Sixs Fred 2                   "
(const byte*) render_preset_name::name#11 name_11 = (byte*) "8bpp Pixel Cell               "
(byte*) render_preset_name::name#13 name zp[2]:16 1000001.0
(const byte*) render_preset_name::name#2 name_2 = (byte*) "Extended Color Charset        "
(const byte*) render_preset_name::name#3 name_3 = (byte*) "Standard Bitmap               "
(const byte*) render_preset_name::name#4 name_4 = (byte*) "Multicolor Bitmap             "
(const byte*) render_preset_name::name#5 name_5 = (byte*) "Hicolor Charset               "
(const byte*) render_preset_name::name#6 name_6 = (byte*) "Hicolor Extended Color Charset"
(const byte*) render_preset_name::name#7 name_7 = (byte*) "Twoplane Bitmap               "
(const byte*) render_preset_name::name#8 name_8 = (byte*) "Chunky 8bpp                   "
(const byte*) render_preset_name::name#9 name_9 = (byte*) "Sixs Fred                     "

reg byte x [ gfx_mode::dtv_control#12 gfx_mode::dtv_control#6 gfx_mode::dtv_control#13 gfx_mode::dtv_control#5 gfx_mode::dtv_control#11 gfx_mode::dtv_control#4 gfx_mode::dtv_control#10 gfx_mode::dtv_control#3 gfx_mode::dtv_control#15 gfx_mode::dtv_control#14 gfx_mode::dtv_control#2 ]
reg byte x [ gfx_mode::vic_control#4 gfx_mode::vic_control#2 gfx_mode::vic_control#5 ]
reg byte a [ gfx_mode::vic_control2#2 ]
reg byte x [ gfx_mode::cx#2 gfx_mode::cx#1 ]
reg byte x [ gfx_mode::j#2 gfx_mode::j#1 ]
reg byte x [ gfx_mode::i#2 gfx_mode::i#1 ]
reg byte a [ keyboard_event_get::return#2 keyboard_event_get::return#1 ]
reg byte x [ keyboard_modifiers#21 keyboard_modifiers#20 keyboard_modifiers#19 keyboard_modifiers#18 keyboard_modifiers#3 keyboard_modifiers#4 keyboard_modifiers#5 ]
reg byte x [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ]
zp[1]:2 [ keyboard_events_size#18 keyboard_events_size#106 keyboard_events_size#97 keyboard_events_size#47 keyboard_events_size#27 keyboard_events_size#24 keyboard_events_size#100 keyboard_events_size#4 keyboard_events_size#105 keyboard_events_size#1 keyboard_events_size#2 ]
reg byte a [ get_vic_screen::idx#2 get_vic_screen::idx#0 get_vic_screen::idx#1 ]
reg byte a [ get_plane::idx#10 get_plane::idx#1 get_plane::idx#0 ]
reg byte x [ form_mode::i#2 form_mode::i#1 ]
zp[1]:3 [ form_cursor_count#21 form_cursor_count#1 form_cursor_count#16 form_cursor_count#15 form_cursor_count#5 ]
zp[1]:4 [ form_field_idx#28 form_field_idx#1 form_field_idx#18 form_field_idx#31 form_field_idx#6 form_field_idx#5 ]
reg byte a [ render_preset_name::idx#10 render_preset_name::idx#0 render_preset_name::idx#1 ]
reg byte x [ form_render_values::idx#2 form_render_values::idx#1 ]
reg byte x [ form_field_ptr::field_idx#2 form_field_ptr::field_idx#1 form_field_ptr::field_idx#0 ]
reg byte y [ apply_preset::i#2 apply_preset::i#1 ]
reg byte x [ form_control::return#2 ]
reg byte x [ form_set_screen::y#2 form_set_screen::y#1 ]
zp[2]:5 [ print_char_cursor#41 print_char_cursor#24 print_char_cursor#72 print_char_cursor#73 print_char_cursor#42 print_char_cursor#28 print_str_at::at#2 print_str_at::at#0 gfx_mode::col#2 gfx_mode::col#3 gfx_mode::col#1 ]
zp[2]:7 [ print_line_cursor#21 print_line_cursor#2 print_set_screen::screen#2 print_line_cursor#22 apply_preset::preset#15 get_vic_charset::return#2 get_vic_charset::return#4 gfx_mode::$83 gfx_mode::$50 ]
zp[4]:9 [ gfx_init_plane_fill::plane_addr#3 get_plane::return#14 get_plane::return#16 get_plane::return#17 gfx_mode::$20 gfx_mode::plane_a#0 gfx_mode::$34 gfx_mode::plane_b#0 ]
reg byte x [ gfx_init_plane_fill::bx#2 gfx_init_plane_fill::bx#1 ]
reg byte a [ dtvSetCpuBankSegment1::cpuBankIdx#13 dtvSetCpuBankSegment1::cpuBankIdx#1 dtvSetCpuBankSegment1::cpuBankIdx#11 ]
reg byte x [ gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::ax#1 ]
reg byte x [ gfx_init_plane_vertical::bx#2 gfx_init_plane_vertical::bx#1 ]
reg byte x [ gfx_init_plane_horisontal::ax#2 gfx_init_plane_horisontal::ax#1 ]
reg byte x [ gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::cp#1 ]
reg byte a [ gfx_init_plane_charset8::c#2 gfx_init_plane_charset8::c#3 ]
reg byte x [ gfx_init_plane_8bppchunky::gfxbCpuBank#4 gfx_init_plane_8bppchunky::gfxbCpuBank#7 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::gfxbCpuBank#2 ]
reg byte x [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ]
reg byte y [ bitmap_plot::x#4 bitmap_plot::x#1 bitmap_plot::x#0 bitmap_plot::x#3 bitmap_plot::x#2 ]
reg byte x [ bitmap_plot::y#4 bitmap_plot::y#1 bitmap_plot::y#0 bitmap_plot::y#3 bitmap_plot::y#2 ]
reg byte x [ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ]
zp[1]:13 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#2 gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 gfx_mode::cy#4 gfx_mode::cy#1 ]
reg byte x [ bitmap_clear::x#2 bitmap_clear::x#1 ]
reg byte x [ bitmap_init::x#2 bitmap_init::x#1 ]
reg byte y [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
reg byte x [ bitmap_init::y#2 bitmap_init::y#1 ]
reg byte x [ gfx_init_charset::l#2 gfx_init_charset::l#1 ]
zp[1]:14 [ gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#1 bitmap_line_xdyd::yd#0 bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 gfx_init_plane_fill::fill#6 keyboard_event_scan::row#2 keyboard_event_scan::row#1 ]
reg byte x [ gfx_init_screen4::cx#2 gfx_init_screen4::cx#1 ]
zp[1]:15 [ gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#2 bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#1 bitmap_line_xdyi::yd#0 gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 keyboard_event_pressed::keycode#4 ]
reg byte x [ gfx_init_screen3::cx#2 gfx_init_screen3::cx#1 ]
reg byte x [ gfx_init_screen2::cx#2 gfx_init_screen2::cx#1 ]
zp[2]:16 [ gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 gfx_init_charset::charset#2 gfx_init_charset::charset#3 gfx_init_charset::charset#1 bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::bitmap#0 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::gfxb#1 gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 gfx_init_plane_fill::gfxb#0 gfx_init_plane_fill::$4 gfx_init_plane_fill::$5 memset::dst#2 memset::dst#4 memset::dst#1 memset::str#0 print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 form_set_screen::line#2 form_set_screen::line#1 render_preset_name::name#13 print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 get_vic_screen::return#11 get_vic_screen::return#5 get_vic_screen::return#10 gfx_mode::$82 gfx_mode::$47 gfx_mode::$48 ]
zp[1]:18 [ gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#1 bitmap_line_xdyi::xd#0 bitmap_line::xd#2 bitmap_line::xd#1 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#1 bitmap_line_xdyd::xd#0 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ]
reg byte x [ gfx_init_screen1::cx#2 gfx_init_screen1::cx#1 ]
reg byte x [ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ]
reg byte a [ gfx_mode::$18 ]
reg byte x [ gfx_mode::plane_a_offs#0 ]
reg byte a [ gfx_mode::$23 ]
reg byte a [ gfx_mode::$25 ]
reg byte a [ gfx_mode::$27 ]
reg byte a [ gfx_mode::$28 ]
reg byte a [ gfx_mode::$29 ]
reg byte a [ gfx_mode::$30 ]
reg byte a [ gfx_mode::$31 ]
reg byte a [ gfx_mode::$32 ]
reg byte x [ gfx_mode::plane_b_offs#0 ]
reg byte a [ gfx_mode::$37 ]
reg byte a [ gfx_mode::$39 ]
reg byte a [ gfx_mode::$41 ]
reg byte a [ gfx_mode::$42 ]
reg byte a [ gfx_mode::$43 ]
reg byte a [ gfx_mode::$44 ]
reg byte a [ gfx_mode::$45 ]
reg byte a [ get_vic_charset::idx#0 ]
reg byte a [ gfx_mode::$51 ]
zp[1]:19 [ gfx_mode::$52 gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 bitmap_line::y1#0 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ]
reg byte a [ gfx_mode::$84 ]
reg byte a [ gfx_mode::$53 ]
reg byte a [ gfx_mode::$55 ]
reg byte a [ gfx_mode::$56 ]
reg byte a [ gfx_mode::$57 ]
reg byte a [ gfx_mode::$58 ]
reg byte a [ gfx_mode::$59 ]
reg byte a [ gfx_mode::$60 ]
reg byte a [ gfx_mode::$61 ]
reg byte a [ gfx_mode::$62 ]
reg byte a [ keyboard_event_get::return#3 ]
reg byte a [ gfx_mode::keyboard_event#0 ]
reg byte x [ keyboard_matrix_read::rowid#0 ]
reg byte a [ keyboard_matrix_read::return#2 ]
reg byte a [ keyboard_event_pressed::return#0 ]
reg byte a [ keyboard_event_scan::$0 ]
reg byte a [ keyboard_event_pressed::return#1 ]
reg byte a [ keyboard_event_scan::$3 ]
reg byte a [ keyboard_event_pressed::return#2 ]
reg byte a [ keyboard_event_scan::$6 ]
reg byte a [ keyboard_event_pressed::return#3 ]
reg byte a [ keyboard_event_scan::$9 ]
reg byte a [ keyboard_event_scan::$15 ]
reg byte a [ keyboard_event_scan::$16 ]
reg byte a [ keyboard_event_scan::event_type#0 ]
reg byte a [ keyboard_event_scan::$23 ]
reg byte a [ keyboard_event_pressed::$0 ]
reg byte a [ keyboard_event_pressed::$1 ]
reg byte a [ keyboard_event_pressed::return#10 ]
reg byte a [ keyboard_matrix_read::return#0 ]
reg byte a [ form_control::return#0 ]
reg byte a [ form_mode::$11 ]
reg byte a [ apply_preset::idx#0 ]
reg byte y [ form_field_ptr::y#0 ]
zp[2]:20 [ form_field_ptr::line#0 gfx_mode::$24 gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 ]
zp[1]:22 [ form_field_ptr::x#0 keyboard_event_scan::row_scan#0 bitmap_clear::y#4 bitmap_clear::y#1 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#1 bitmap_line_xdyi::x1#0 bitmap_line::x0#0 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#1 bitmap_line_xdyd::x1#0 bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ]
reg byte a [ form_control::$12 ]
reg byte a [ keyboard_event_get::return#4 ]
reg byte a [ form_control::key_event#0 ]
reg byte a [ form_control::$14 ]
reg byte a [ form_control::$15 ]
reg byte a [ form_control::$22 ]
reg byte a [ form_control::$13 ]
reg byte a [ form_set_screen::$0 ]
reg byte a [ form_set_screen::$1 ]
reg byte a [ print_str_lines::ch#0 ]
reg byte a [ print_char::ch#0 ]
zp[4]:23 [ gfx_init_plane_fill::$0 ]
zp[2]:27 [ gfx_init_plane_fill::$1 gfx_mode::$40 ]
reg byte a [ gfx_init_plane_fill::gfxbCpuBank#0 ]
reg byte a [ gfx_init_plane_horisontal2::$2 ]
reg byte a [ gfx_init_plane_horisontal2::row#0 ]
reg byte a [ gfx_init_plane_horisontal::$2 ]
reg byte a [ gfx_init_plane_charset8::$2 ]
reg byte a [ gfx_init_plane_8bppchunky::c#0 ]
reg byte x [ bitmap_line::y0#0 ]
reg byte y [ bitmap_line::yd#2 ]
reg byte y [ bitmap_line::yd#1 ]
reg byte y [ bitmap_line::yd#10 ]
reg byte y [ bitmap_line::yd#11 ]
reg byte a [ bitmap_line_xdyi::$6 ]
zp[2]:29 [ bitmap_plot::plotter_x#0 bitmap_plot::plotter#0 gfx_init_plane_8bppchunky::$5 form_field_ptr::return#0 form_field_ptr::return#3 form_control::field#0 gfx_mode::$26 ]
zp[2]:31 [ bitmap_plot::plotter_y#0 memset::end#0 gfx_mode::$38 ]
reg byte a [ bitmap_plot::$1 ]
reg byte x [ bitmap_line_ydxi::$6 ]
reg byte a [ bitmap_line_xdyd::$6 ]
reg byte x [ bitmap_line_ydxd::$6 ]
reg byte a [ bitmap_init::$0 ]
zp[1]:33 [ bitmap_init::$10 keyboard_event_pressed::row_bits#0 gfx_init_charset::c#4 gfx_init_charset::c#1 bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 bitmap_line::x1#0 ]
reg byte a [ bitmap_init::$7 ]
reg byte a [ bitmap_init::$8 ]
reg byte a [ bitmap_init::$9 ]
reg byte a [ gfx_init_screen3::$0 ]
reg byte a [ gfx_init_screen3::$2 ]
reg byte a [ gfx_init_screen3::$3 ]
reg byte a [ gfx_init_screen2::$0 ]
reg byte y [ gfx_init_screen2::col#0 ]
reg byte a [ gfx_init_screen2::$3 ]
reg byte a [ gfx_init_screen2::$4 ]
reg byte a [ gfx_init_screen1::$0 ]
reg byte a [ gfx_init_screen1::$1 ]
reg byte a [ gfx_init_screen0::$0 ]
zp[1]:34 [ gfx_init_screen0::$1 gfx_init_screen2::col2#0 gfx_init_screen3::$1 gfx_init_vic_bitmap::l#2 gfx_init_vic_bitmap::l#1 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ]
reg byte a [ gfx_init_screen0::$2 ]
reg byte a [ gfx_init_screen0::$3 ]


FINAL ASSEMBLER
Score: 10118912

  // File Comments
// Interactive Explorer for C64DTV Screen Modes
// C64 DTV version 2 Registers and Constants
//
// Sources
// (J) https://www.c64-wiki.com/wiki/C64DTV_Programming_Guide
// (H) http://dtvhacking.cbm8bit.com/dtv_wiki/images/d/d9/Dtv_registers_full.txt
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const VIC_ECM = $40
  .const VIC_BMM = $20
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  .const VIC_MCM = $10
  .const VIC_CSEL = 8
  // Mask for PROCESSOR_PORT_DDR which allows only memory configuration to be written
  .const PROCPORT_DDR_MEMORY_MASK = 7
  // RAM in 0xA000, 0xE000 I/O in 0xD000
  .const PROCPORT_RAM_IO = 5
  // RAM in 0xA000, 0xE000 CHAR ROM in 0xD000
  .const PROCPORT_RAM_CHARROM = 1
  .const DTV_FEATURE_ENABLE = 1
  .const DTV_LINEAR = 1
  .const DTV_BORDER_OFF = 2
  .const DTV_HIGHCOLOR = 4
  .const DTV_OVERSCAN = 8
  .const DTV_COLORRAM_OFF = $10
  .const DTV_CHUNKY = $40
  .const DTV_COLOR_BANK_DEFAULT = $1d800
  .const KEY_CRSR_RIGHT = 2
  .const KEY_CRSR_DOWN = 7
  .const KEY_LSHIFT = $f
  .const KEY_RSHIFT = $34
  .const KEY_CTRL = $3a
  .const KEY_SPACE = $3c
  .const KEY_COMMODORE = $3d
  // Left shift is pressed
  .const KEY_MODIFIER_LSHIFT = 1
  // Right shift is pressed
  .const KEY_MODIFIER_RSHIFT = 2
  // CTRL is pressed
  .const KEY_MODIFIER_CTRL = 4
  // Commodore is pressed
  .const KEY_MODIFIER_COMMODORE = 8
  // Any shift is pressed
  .const KEY_MODIFIER_SHIFT = KEY_MODIFIER_LSHIFT|KEY_MODIFIER_RSHIFT
  // 8BPP Chunky Bitmap (contains 8bpp pixels)
  .const PLANE_8BPP_CHUNKY = $20000
  // Plane with horisontal stripes
  .const PLANE_HORISONTAL = $30000
  // Plane with vertical stripes
  .const PLANE_VERTICAL = $32000
  // Plane with horisontal stripes every 2 pixels
  .const PLANE_HORISONTAL2 = $34000
  // Plane with vertical stripes every 2 pixels
  .const PLANE_VERTICAL2 = $36000
  // Plane with blank pixels
  .const PLANE_BLANK = $38000
  // Plane with all pixels
  .const PLANE_FULL = $3a000
  // Plane with all pixels
  .const PLANE_CHARSET8 = $3c000
  // The number of frames to use for a full blink cycle
  .const FORM_CURSOR_BLINK = $28
  .const OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR = 2
  .const OFFSET_STRUCT_MOS6526_CIA_PORT_B_DDR = 3
  .const OFFSET_STRUCT_MOS6526_CIA_PORT_B = 1
  .const OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
  .const OFFSET_STRUCT_MOS6569_VICII_BG_COLOR = $21
  .const OFFSET_STRUCT_MOS6569_VICII_BG_COLOR1 = $22
  .const OFFSET_STRUCT_MOS6569_VICII_BG_COLOR2 = $23
  .const OFFSET_STRUCT_MOS6569_VICII_BG_COLOR3 = $24
  .const OFFSET_STRUCT_MOS6569_VICII_RASTER = $12
  .const OFFSET_STRUCT_MOS6569_VICII_CONTROL1 = $11
  .const OFFSET_STRUCT_MOS6569_VICII_CONTROL2 = $16
  .const OFFSET_STRUCT_MOS6569_VICII_MEMORY = $18
  // Number of form fields
  .const form_fields_cnt = $24
  .label VIC_CONTROL = $d011
  .label VIC_CONTROL2 = $d016
  .label VIC_MEMORY = $d018
  // Processor port data direction register
  .label PROCPORT_DDR = 0
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // The address of the CHARGEN character set
  .label CHARGEN = $d000
  // The VIC-II MOS 6567/6569
  .label VICII = $d000
  // Color Ram
  .label COLS = $d800
  // The CIA#1: keyboard matrix, joystick #1/#2
  .label CIA1 = $dc00
  // The CIA#2: Serial bus, RS-232, VIC memory bank
  .label CIA2 = $dd00
  // Feature enables or disables the extra C64 DTV features
  .label DTV_FEATURE = $d03f
  // Controls the graphics modes of the C64 DTV
  .label DTV_CONTROL = $d03c
  // Defines colors for the 16 first colors ($00-$0f)
  .label DTV_PALETTE = $d200
  // Linear Graphics Plane A Counter Control
  .label DTV_PLANEA_START_LO = $d03a
  .label DTV_PLANEA_START_MI = $d03b
  .label DTV_PLANEA_START_HI = $d045
  .label DTV_PLANEA_STEP = $d046
  .label DTV_PLANEA_MODULO_LO = $d038
  .label DTV_PLANEA_MODULO_HI = $d039
  // Linear Graphics Plane B Counter Control
  .label DTV_PLANEB_START_LO = $d049
  .label DTV_PLANEB_START_MI = $d04a
  .label DTV_PLANEB_START_HI = $d04b
  .label DTV_PLANEB_STEP = $d04c
  .label DTV_PLANEB_MODULO_LO = $d047
  .label DTV_PLANEB_MODULO_HI = $d048
  // Select memory bank where color data is fetched from (bits 11:0)
  // Memory address of Color RAM is ColorBank*$400
  .label DTV_COLOR_BANK_LO = $d036
  .label DTV_COLOR_BANK_HI = $d037
  // Selects memory bank for normal VIC color mode and lower data for high color modes. (bits 5:0)
  // Memory address of VIC Graphics is GraphicsBank*$10000
  .label DTV_GRAPHICS_VIC_BANK = $d03d
  // VIC Screens
  .label VIC_SCREEN0 = $4000
  .label VIC_SCREEN1 = $4400
  .label VIC_SCREEN2 = $4800
  .label VIC_SCREEN3 = $4c00
  .label VIC_SCREEN4 = $5000
  // VIC Charset from ROM
  .label VIC_CHARSET_ROM = $5800
  // VIC Bitmap
  .label VIC_BITMAP = $6000
  // Screen containing the FORM
  .label FORM_SCREEN = $400
  // Charset used for the FORM
  .label FORM_CHARSET = $1800
  .label form_ctrl_bmm = form_fields_val+1
  .label form_ctrl_mcm = form_fields_val+2
  .label form_ctrl_ecm = form_fields_val+3
  .label form_ctrl_hicol = form_fields_val+4
  .label form_ctrl_line = form_fields_val+5
  .label form_ctrl_colof = form_fields_val+6
  .label form_ctrl_chunk = form_fields_val+7
  .label form_ctrl_borof = form_fields_val+8
  .label form_ctrl_overs = form_fields_val+9
  .label form_a_pattern = form_fields_val+$a
  .label form_a_start_hi = form_fields_val+$b
  .label form_a_start_lo = form_fields_val+$c
  .label form_a_step_hi = form_fields_val+$d
  .label form_a_step_lo = form_fields_val+$e
  .label form_a_mod_hi = form_fields_val+$f
  .label form_a_mod_lo = form_fields_val+$10
  .label form_b_pattern = form_fields_val+$11
  .label form_b_start_hi = form_fields_val+$12
  .label form_b_start_lo = form_fields_val+$13
  .label form_b_step_hi = form_fields_val+$14
  .label form_b_step_lo = form_fields_val+$15
  .label form_b_mod_hi = form_fields_val+$16
  .label form_b_mod_lo = form_fields_val+$17
  .label form_vic_screen = form_fields_val+$18
  .label form_vic_gfx = form_fields_val+$19
  .label form_vic_cols = form_fields_val+$1a
  .label form_dtv_palet = form_fields_val+$1b
  .label form_vic_bg0_hi = form_fields_val+$1c
  .label form_vic_bg0_lo = form_fields_val+$1d
  .label form_vic_bg1_hi = form_fields_val+$1e
  .label form_vic_bg1_lo = form_fields_val+$1f
  .label form_vic_bg2_hi = form_fields_val+$20
  .label form_vic_bg2_lo = form_fields_val+$21
  .label form_vic_bg3_hi = form_fields_val+$22
  .label form_vic_bg3_lo = form_fields_val+$23
  .label print_line_cursor = 7
  // Keyboard event buffer size. The number of events currently in the event buffer
  .label keyboard_events_size = 2
  // Counts down to blink for form cursor (it is inversed in the lower half)
  // Always blink cursor in new field
  .label form_cursor_count = 3
  // Current selected field in the form
  .label form_field_idx = 4
  .label print_char_cursor = 5
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    // asm
    // asm { sei  }
    sei
    // *PROCPORT_DDR = PROCPORT_DDR_MEMORY_MASK
    // [5] *((const nomodify byte*) PROCPORT_DDR) ← (const nomodify byte) PROCPORT_DDR_MEMORY_MASK -- _deref_pbuc1=vbuc2 
    // Disable normal interrupt (prevent keyboard reading glitches and allows to hide basic/kernal)
    // Disable kernal & basic
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
    // *PROCPORT = PROCPORT_RAM_IO
    // [6] *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_RAM_IO -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
    // *DTV_FEATURE = DTV_FEATURE_ENABLE
    // [7] *((const nomodify byte*) DTV_FEATURE) ← (const nomodify byte) DTV_FEATURE_ENABLE -- _deref_pbuc1=vbuc2 
    // Enable DTV extended modes
    lda #DTV_FEATURE_ENABLE
    sta DTV_FEATURE
    // keyboard_init()
    // [8] call keyboard_init 
    jsr keyboard_init
    // [9] phi from main to main::@3 [phi:main->main::@3]
    // main::@3
    // gfx_init()
    // [10] call gfx_init 
    // [452] phi from main::@3 to gfx_init [phi:main::@3->gfx_init]
    jsr gfx_init
    // [11] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
    // [11] phi (byte) form_field_idx#1 = (byte) 0 [phi:main::@3->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z form_field_idx
    // [11] phi (byte) keyboard_events_size#27 = (byte) 0 [phi:main::@3->main::@1#1] -- vbuz1=vbuc1 
    sta.z keyboard_events_size
    // [11] phi (signed byte) form_cursor_count#1 = (const nomodify signed byte) FORM_CURSOR_BLINK/(signed byte) 2 [phi:main::@3->main::@1#2] -- vbsz1=vbsc1 
    lda #FORM_CURSOR_BLINK/2
    sta.z form_cursor_count
    // main::@1
    // [12] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // main::@2
  __b2:
    // form_mode()
    // [13] call form_mode 
  // Let the user change the GFX configuration
    // [252] phi from main::@2 to form_mode [phi:main::@2->form_mode]
    jsr form_mode
    // [14] phi from main::@2 to main::@4 [phi:main::@2->main::@4]
    // main::@4
    // gfx_mode()
    // [15] call gfx_mode 
    // Show the GFX configuration
    jsr gfx_mode
    // [11] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
    // [11] phi (byte) form_field_idx#1 = (byte) form_field_idx#18 [phi:main::@4->main::@1#0] -- register_copy 
    // [11] phi (byte) keyboard_events_size#27 = (byte) keyboard_events_size#24 [phi:main::@4->main::@1#1] -- register_copy 
    // [11] phi (signed byte) form_cursor_count#1 = (signed byte) form_cursor_count#16 [phi:main::@4->main::@1#2] -- register_copy 
    jmp __b2
}
  // gfx_mode
// Change graphics mode to show the selected graphics mode
gfx_mode: {
    .label __20 = 9
    .label __24 = $14
    .label __26 = $1d
    .label __34 = 9
    .label __38 = $1f
    .label __40 = $1b
    .label __47 = $10
    .label __48 = $10
    .label __50 = 7
    .label __52 = $13
    .label __82 = $10
    .label __83 = 7
    .label plane_a = 9
    .label plane_b = 9
    .label vic_colors = $10
    .label col = 5
    .label cy = $d
    // if(*form_ctrl_line!=0)
    // [16] if(*((const nomodify byte*) form_ctrl_line)==(byte) 0) goto gfx_mode::@1 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_line
    cmp #0
    beq __b10
    // [17] phi from gfx_mode to gfx_mode::@10 [phi:gfx_mode->gfx_mode::@10]
    // gfx_mode::@10
    // [18] phi from gfx_mode::@10 to gfx_mode::@1 [phi:gfx_mode::@10->gfx_mode::@1]
    // [18] phi (byte) gfx_mode::dtv_control#14 = (const nomodify byte) DTV_LINEAR [phi:gfx_mode::@10->gfx_mode::@1#0] -- vbuxx=vbuc1 
    ldx #DTV_LINEAR
    jmp __b1
    // [18] phi from gfx_mode to gfx_mode::@1 [phi:gfx_mode->gfx_mode::@1]
  __b10:
    // [18] phi (byte) gfx_mode::dtv_control#14 = (byte) 0 [phi:gfx_mode->gfx_mode::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // gfx_mode::@1
  __b1:
    // if(*form_ctrl_borof!=0)
    // [19] if(*((const nomodify byte*) form_ctrl_borof)==(byte) 0) goto gfx_mode::@2 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_borof
    cmp #0
    beq __b2
    // gfx_mode::@11
    // dtv_control = dtv_control | DTV_BORDER_OFF
    // [20] (byte) gfx_mode::dtv_control#2 ← (byte) gfx_mode::dtv_control#14 | (const nomodify byte) DTV_BORDER_OFF -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #DTV_BORDER_OFF
    tax
    // [21] phi from gfx_mode::@1 gfx_mode::@11 to gfx_mode::@2 [phi:gfx_mode::@1/gfx_mode::@11->gfx_mode::@2]
    // [21] phi (byte) gfx_mode::dtv_control#15 = (byte) gfx_mode::dtv_control#14 [phi:gfx_mode::@1/gfx_mode::@11->gfx_mode::@2#0] -- register_copy 
    // gfx_mode::@2
  __b2:
    // if(*form_ctrl_hicol!=0)
    // [22] if(*((const nomodify byte*) form_ctrl_hicol)==(byte) 0) goto gfx_mode::@3 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_hicol
    cmp #0
    beq __b3
    // gfx_mode::@12
    // dtv_control = dtv_control | DTV_HIGHCOLOR
    // [23] (byte) gfx_mode::dtv_control#3 ← (byte) gfx_mode::dtv_control#15 | (const nomodify byte) DTV_HIGHCOLOR -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #DTV_HIGHCOLOR
    tax
    // [24] phi from gfx_mode::@12 gfx_mode::@2 to gfx_mode::@3 [phi:gfx_mode::@12/gfx_mode::@2->gfx_mode::@3]
    // [24] phi (byte) gfx_mode::dtv_control#10 = (byte) gfx_mode::dtv_control#3 [phi:gfx_mode::@12/gfx_mode::@2->gfx_mode::@3#0] -- register_copy 
    // gfx_mode::@3
  __b3:
    // if(*form_ctrl_overs!=0)
    // [25] if(*((const nomodify byte*) form_ctrl_overs)==(byte) 0) goto gfx_mode::@4 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_overs
    cmp #0
    beq __b4
    // gfx_mode::@13
    // dtv_control = dtv_control | DTV_OVERSCAN
    // [26] (byte) gfx_mode::dtv_control#4 ← (byte) gfx_mode::dtv_control#10 | (const nomodify byte) DTV_OVERSCAN -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #DTV_OVERSCAN
    tax
    // [27] phi from gfx_mode::@13 gfx_mode::@3 to gfx_mode::@4 [phi:gfx_mode::@13/gfx_mode::@3->gfx_mode::@4]
    // [27] phi (byte) gfx_mode::dtv_control#11 = (byte) gfx_mode::dtv_control#4 [phi:gfx_mode::@13/gfx_mode::@3->gfx_mode::@4#0] -- register_copy 
    // gfx_mode::@4
  __b4:
    // if(*form_ctrl_colof!=0)
    // [28] if(*((const nomodify byte*) form_ctrl_colof)==(byte) 0) goto gfx_mode::@5 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_colof
    cmp #0
    beq __b5
    // gfx_mode::@14
    // dtv_control = dtv_control | DTV_COLORRAM_OFF
    // [29] (byte) gfx_mode::dtv_control#5 ← (byte) gfx_mode::dtv_control#11 | (const nomodify byte) DTV_COLORRAM_OFF -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #DTV_COLORRAM_OFF
    tax
    // [30] phi from gfx_mode::@14 gfx_mode::@4 to gfx_mode::@5 [phi:gfx_mode::@14/gfx_mode::@4->gfx_mode::@5]
    // [30] phi (byte) gfx_mode::dtv_control#13 = (byte) gfx_mode::dtv_control#5 [phi:gfx_mode::@14/gfx_mode::@4->gfx_mode::@5#0] -- register_copy 
    // gfx_mode::@5
  __b5:
    // if(*form_ctrl_chunk!=0)
    // [31] if(*((const nomodify byte*) form_ctrl_chunk)==(byte) 0) goto gfx_mode::@6 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_chunk
    cmp #0
    beq __b6
    // gfx_mode::@15
    // dtv_control = dtv_control | DTV_CHUNKY
    // [32] (byte) gfx_mode::dtv_control#6 ← (byte) gfx_mode::dtv_control#13 | (const nomodify byte) DTV_CHUNKY -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #DTV_CHUNKY
    tax
    // [33] phi from gfx_mode::@15 gfx_mode::@5 to gfx_mode::@6 [phi:gfx_mode::@15/gfx_mode::@5->gfx_mode::@6]
    // [33] phi (byte) gfx_mode::dtv_control#12 = (byte) gfx_mode::dtv_control#6 [phi:gfx_mode::@15/gfx_mode::@5->gfx_mode::@6#0] -- register_copy 
    // gfx_mode::@6
  __b6:
    // *DTV_CONTROL = dtv_control
    // [34] *((const nomodify byte*) DTV_CONTROL) ← (byte) gfx_mode::dtv_control#12 -- _deref_pbuc1=vbuxx 
    stx DTV_CONTROL
    // if(*form_ctrl_ecm!=0)
    // [35] if(*((const nomodify byte*) form_ctrl_ecm)==(byte) 0) goto gfx_mode::@7 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_ecm
    cmp #0
    beq __b11
    // [36] phi from gfx_mode::@6 to gfx_mode::@16 [phi:gfx_mode::@6->gfx_mode::@16]
    // gfx_mode::@16
    // [37] phi from gfx_mode::@16 to gfx_mode::@7 [phi:gfx_mode::@16->gfx_mode::@7]
    // [37] phi (byte) gfx_mode::vic_control#5 = (const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(byte) 3|(const nomodify byte) VIC_ECM [phi:gfx_mode::@16->gfx_mode::@7#0] -- vbuxx=vbuc1 
    ldx #VIC_DEN|VIC_RSEL|3|VIC_ECM
    jmp __b7
    // [37] phi from gfx_mode::@6 to gfx_mode::@7 [phi:gfx_mode::@6->gfx_mode::@7]
  __b11:
    // [37] phi (byte) gfx_mode::vic_control#5 = (const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(byte) 3 [phi:gfx_mode::@6->gfx_mode::@7#0] -- vbuxx=vbuc1 
    ldx #VIC_DEN|VIC_RSEL|3
    // gfx_mode::@7
  __b7:
    // if(*form_ctrl_bmm!=0)
    // [38] if(*((const nomodify byte*) form_ctrl_bmm)==(byte) 0) goto gfx_mode::@8 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_bmm
    cmp #0
    beq __b8
    // gfx_mode::@17
    // vic_control = vic_control | VIC_BMM
    // [39] (byte) gfx_mode::vic_control#2 ← (byte) gfx_mode::vic_control#5 | (const nomodify byte) VIC_BMM -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #VIC_BMM
    tax
    // [40] phi from gfx_mode::@17 gfx_mode::@7 to gfx_mode::@8 [phi:gfx_mode::@17/gfx_mode::@7->gfx_mode::@8]
    // [40] phi (byte) gfx_mode::vic_control#4 = (byte) gfx_mode::vic_control#2 [phi:gfx_mode::@17/gfx_mode::@7->gfx_mode::@8#0] -- register_copy 
    // gfx_mode::@8
  __b8:
    // *VIC_CONTROL = vic_control
    // [41] *((const nomodify byte*) VIC_CONTROL) ← (byte) gfx_mode::vic_control#4 -- _deref_pbuc1=vbuxx 
    stx VIC_CONTROL
    // if(*form_ctrl_mcm!=0)
    // [42] if(*((const nomodify byte*) form_ctrl_mcm)==(byte) 0) goto gfx_mode::@9 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_mcm
    cmp #0
    beq __b12
    // [43] phi from gfx_mode::@8 to gfx_mode::@18 [phi:gfx_mode::@8->gfx_mode::@18]
    // gfx_mode::@18
    // [44] phi from gfx_mode::@18 to gfx_mode::@9 [phi:gfx_mode::@18->gfx_mode::@9]
    // [44] phi (byte) gfx_mode::vic_control2#2 = (const nomodify byte) VIC_CSEL|(const nomodify byte) VIC_MCM [phi:gfx_mode::@18->gfx_mode::@9#0] -- vbuaa=vbuc1 
    lda #VIC_CSEL|VIC_MCM
    jmp __b9
    // [44] phi from gfx_mode::@8 to gfx_mode::@9 [phi:gfx_mode::@8->gfx_mode::@9]
  __b12:
    // [44] phi (byte) gfx_mode::vic_control2#2 = (const nomodify byte) VIC_CSEL [phi:gfx_mode::@8->gfx_mode::@9#0] -- vbuaa=vbuc1 
    lda #VIC_CSEL
    // gfx_mode::@9
  __b9:
    // *VIC_CONTROL2 = vic_control2
    // [45] *((const nomodify byte*) VIC_CONTROL2) ← (byte) gfx_mode::vic_control2#2 -- _deref_pbuc1=vbuaa 
    sta VIC_CONTROL2
    // *form_a_start_hi*$10
    // [46] (byte~) gfx_mode::$18 ← *((const nomodify byte*) form_a_start_hi) << (byte) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_a_start_hi
    asl
    asl
    asl
    asl
    // plane_a_offs = *form_a_start_hi*$10|*form_a_start_lo
    // [47] (byte) gfx_mode::plane_a_offs#0 ← (byte~) gfx_mode::$18 | *((const nomodify byte*) form_a_start_lo) -- vbuxx=vbuaa_bor__deref_pbuc1 
    ora form_a_start_lo
    tax
    // get_plane(*form_a_pattern)
    // [48] (byte) get_plane::idx#0 ← *((const nomodify byte*) form_a_pattern) -- vbuaa=_deref_pbuc1 
    lda form_a_pattern
    // [49] call get_plane 
    // [234] phi from gfx_mode::@9 to get_plane [phi:gfx_mode::@9->get_plane]
    // [234] phi (byte) get_plane::idx#10 = (byte) get_plane::idx#0 [phi:gfx_mode::@9->get_plane#0] -- register_copy 
    jsr get_plane
    // get_plane(*form_a_pattern)
    // [50] (dword) get_plane::return#16 ← (dword) get_plane::return#14
    // gfx_mode::@27
    // [51] (dword~) gfx_mode::$20 ← (dword) get_plane::return#16
    // plane_a = get_plane(*form_a_pattern) + plane_a_offs
    // [52] (dword) gfx_mode::plane_a#0 ← (dword~) gfx_mode::$20 + (byte) gfx_mode::plane_a_offs#0 -- vduz1=vduz1_plus_vbuxx 
    txa
    clc
    adc.z plane_a
    sta.z plane_a
    lda.z plane_a+1
    adc #0
    sta.z plane_a+1
    lda.z plane_a+2
    adc #0
    sta.z plane_a+2
    lda.z plane_a+3
    adc #0
    sta.z plane_a+3
    // < plane_a
    // [53] (word~) gfx_mode::$24 ← < (dword) gfx_mode::plane_a#0 -- vwuz1=_lo_vduz2 
    lda.z plane_a
    sta.z __24
    lda.z plane_a+1
    sta.z __24+1
    // < < plane_a
    // [54] (byte~) gfx_mode::$23 ← < (word~) gfx_mode::$24 -- vbuaa=_lo_vwuz1 
    lda.z __24
    // *DTV_PLANEA_START_LO = < < plane_a
    // [55] *((const nomodify byte*) DTV_PLANEA_START_LO) ← (byte~) gfx_mode::$23 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEA_START_LO
    // > < plane_a
    // [56] (byte~) gfx_mode::$25 ← > (word~) gfx_mode::$24 -- vbuaa=_hi_vwuz1 
    lda.z __24+1
    // *DTV_PLANEA_START_MI = > < plane_a
    // [57] *((const nomodify byte*) DTV_PLANEA_START_MI) ← (byte~) gfx_mode::$25 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEA_START_MI
    // > plane_a
    // [58] (word~) gfx_mode::$26 ← > (dword) gfx_mode::plane_a#0 -- vwuz1=_hi_vduz2 
    lda.z plane_a+2
    sta.z __26
    lda.z plane_a+3
    sta.z __26+1
    // < > plane_a
    // [59] (byte~) gfx_mode::$27 ← < (word~) gfx_mode::$26 -- vbuaa=_lo_vwuz1 
    lda.z __26
    // *DTV_PLANEA_START_HI = < > plane_a
    // [60] *((const nomodify byte*) DTV_PLANEA_START_HI) ← (byte~) gfx_mode::$27 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEA_START_HI
    // *form_a_step_hi*$10
    // [61] (byte~) gfx_mode::$28 ← *((const nomodify byte*) form_a_step_hi) << (byte) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_a_step_hi
    asl
    asl
    asl
    asl
    // *form_a_step_hi*$10|*form_a_step_lo
    // [62] (byte~) gfx_mode::$29 ← (byte~) gfx_mode::$28 | *((const nomodify byte*) form_a_step_lo) -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_a_step_lo
    // *DTV_PLANEA_STEP = *form_a_step_hi*$10|*form_a_step_lo
    // [63] *((const nomodify byte*) DTV_PLANEA_STEP) ← (byte~) gfx_mode::$29 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEA_STEP
    // *form_a_mod_hi*$10
    // [64] (byte~) gfx_mode::$30 ← *((const nomodify byte*) form_a_mod_hi) << (byte) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_a_mod_hi
    asl
    asl
    asl
    asl
    // *form_a_mod_hi*$10|*form_a_mod_lo
    // [65] (byte~) gfx_mode::$31 ← (byte~) gfx_mode::$30 | *((const nomodify byte*) form_a_mod_lo) -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_a_mod_lo
    // *DTV_PLANEA_MODULO_LO = *form_a_mod_hi*$10|*form_a_mod_lo
    // [66] *((const nomodify byte*) DTV_PLANEA_MODULO_LO) ← (byte~) gfx_mode::$31 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEA_MODULO_LO
    // *DTV_PLANEA_MODULO_HI = 0
    // [67] *((const nomodify byte*) DTV_PLANEA_MODULO_HI) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_HI
    // *form_b_start_hi*$10
    // [68] (byte~) gfx_mode::$32 ← *((const nomodify byte*) form_b_start_hi) << (byte) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_b_start_hi
    asl
    asl
    asl
    asl
    // plane_b_offs = *form_b_start_hi*$10|*form_b_start_lo
    // [69] (byte) gfx_mode::plane_b_offs#0 ← (byte~) gfx_mode::$32 | *((const nomodify byte*) form_b_start_lo) -- vbuxx=vbuaa_bor__deref_pbuc1 
    ora form_b_start_lo
    tax
    // get_plane(*form_b_pattern)
    // [70] (byte) get_plane::idx#1 ← *((const nomodify byte*) form_b_pattern) -- vbuaa=_deref_pbuc1 
    lda form_b_pattern
    // [71] call get_plane 
    // [234] phi from gfx_mode::@27 to get_plane [phi:gfx_mode::@27->get_plane]
    // [234] phi (byte) get_plane::idx#10 = (byte) get_plane::idx#1 [phi:gfx_mode::@27->get_plane#0] -- register_copy 
    jsr get_plane
    // get_plane(*form_b_pattern)
    // [72] (dword) get_plane::return#17 ← (dword) get_plane::return#14
    // gfx_mode::@28
    // [73] (dword~) gfx_mode::$34 ← (dword) get_plane::return#17
    // plane_b = get_plane(*form_b_pattern) + plane_b_offs
    // [74] (dword) gfx_mode::plane_b#0 ← (dword~) gfx_mode::$34 + (byte) gfx_mode::plane_b_offs#0 -- vduz1=vduz1_plus_vbuxx 
    txa
    clc
    adc.z plane_b
    sta.z plane_b
    lda.z plane_b+1
    adc #0
    sta.z plane_b+1
    lda.z plane_b+2
    adc #0
    sta.z plane_b+2
    lda.z plane_b+3
    adc #0
    sta.z plane_b+3
    // < plane_b
    // [75] (word~) gfx_mode::$38 ← < (dword) gfx_mode::plane_b#0 -- vwuz1=_lo_vduz2 
    lda.z plane_b
    sta.z __38
    lda.z plane_b+1
    sta.z __38+1
    // < < plane_b
    // [76] (byte~) gfx_mode::$37 ← < (word~) gfx_mode::$38 -- vbuaa=_lo_vwuz1 
    lda.z __38
    // *DTV_PLANEB_START_LO = < < plane_b
    // [77] *((const nomodify byte*) DTV_PLANEB_START_LO) ← (byte~) gfx_mode::$37 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEB_START_LO
    // > < plane_b
    // [78] (byte~) gfx_mode::$39 ← > (word~) gfx_mode::$38 -- vbuaa=_hi_vwuz1 
    lda.z __38+1
    // *DTV_PLANEB_START_MI = > < plane_b
    // [79] *((const nomodify byte*) DTV_PLANEB_START_MI) ← (byte~) gfx_mode::$39 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEB_START_MI
    // > plane_b
    // [80] (word~) gfx_mode::$40 ← > (dword) gfx_mode::plane_b#0 -- vwuz1=_hi_vduz2 
    lda.z plane_b+2
    sta.z __40
    lda.z plane_b+3
    sta.z __40+1
    // < > plane_b
    // [81] (byte~) gfx_mode::$41 ← < (word~) gfx_mode::$40 -- vbuaa=_lo_vwuz1 
    lda.z __40
    // *DTV_PLANEB_START_HI = < > plane_b
    // [82] *((const nomodify byte*) DTV_PLANEB_START_HI) ← (byte~) gfx_mode::$41 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEB_START_HI
    // *form_b_step_hi*$10
    // [83] (byte~) gfx_mode::$42 ← *((const nomodify byte*) form_b_step_hi) << (byte) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_b_step_hi
    asl
    asl
    asl
    asl
    // *form_b_step_hi*$10|*form_b_step_lo
    // [84] (byte~) gfx_mode::$43 ← (byte~) gfx_mode::$42 | *((const nomodify byte*) form_b_step_lo) -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_b_step_lo
    // *DTV_PLANEB_STEP = *form_b_step_hi*$10|*form_b_step_lo
    // [85] *((const nomodify byte*) DTV_PLANEB_STEP) ← (byte~) gfx_mode::$43 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEB_STEP
    // *form_b_mod_hi*$10
    // [86] (byte~) gfx_mode::$44 ← *((const nomodify byte*) form_b_mod_hi) << (byte) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_b_mod_hi
    asl
    asl
    asl
    asl
    // *form_b_mod_hi*$10|*form_b_mod_lo
    // [87] (byte~) gfx_mode::$45 ← (byte~) gfx_mode::$44 | *((const nomodify byte*) form_b_mod_lo) -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_b_mod_lo
    // *DTV_PLANEB_MODULO_LO = *form_b_mod_hi*$10|*form_b_mod_lo
    // [88] *((const nomodify byte*) DTV_PLANEB_MODULO_LO) ← (byte~) gfx_mode::$45 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEB_MODULO_LO
    // *DTV_PLANEB_MODULO_HI = 0
    // [89] *((const nomodify byte*) DTV_PLANEB_MODULO_HI) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_HI
    // CIA2->PORT_A_DDR = %00000011
    // [90] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) ← (byte) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR
    // CIA2->PORT_A = %00000011 ^ (byte)((word)VIC_SCREEN0/$4000)
    // [91] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2) ← (byte) 3^(byte)(word)(const nomodify byte*) VIC_SCREEN0/(word) $4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^VIC_SCREEN0/$4000
    sta CIA2
    // get_vic_screen(*form_vic_screen)
    // [92] (byte) get_vic_screen::idx#0 ← *((const nomodify byte*) form_vic_screen) -- vbuaa=_deref_pbuc1 
    lda form_vic_screen
    // [93] call get_vic_screen 
    // [220] phi from gfx_mode::@28 to get_vic_screen [phi:gfx_mode::@28->get_vic_screen]
    // [220] phi (byte) get_vic_screen::idx#2 = (byte) get_vic_screen::idx#0 [phi:gfx_mode::@28->get_vic_screen#0] -- register_copy 
    jsr get_vic_screen
    // get_vic_screen(*form_vic_screen)
    // [94] (byte*) get_vic_screen::return#10 ← (byte*) get_vic_screen::return#5
    // gfx_mode::@29
    // [95] (byte*~) gfx_mode::$82 ← (byte*) get_vic_screen::return#10
    // (word)get_vic_screen(*form_vic_screen)&$3fff
    // [96] (word~) gfx_mode::$47 ← (word)(byte*~) gfx_mode::$82 & (word) $3fff -- vwuz1=vwuz1_band_vwuc1 
    lda.z __47
    and #<$3fff
    sta.z __47
    lda.z __47+1
    and #>$3fff
    sta.z __47+1
    // ((word)get_vic_screen(*form_vic_screen)&$3fff)/$40
    // [97] (word~) gfx_mode::$48 ← (word~) gfx_mode::$47 >> (byte) 6 -- vwuz1=vwuz1_ror_6 
    lda.z __48
    asl
    sta.z $ff
    lda.z __48+1
    rol
    sta.z __48
    lda #0
    rol
    sta.z __48+1
    asl.z $ff
    rol.z __48
    rol.z __48+1
    // get_vic_charset(*form_vic_gfx)
    // [98] (byte) get_vic_charset::idx#0 ← *((const nomodify byte*) form_vic_gfx) -- vbuaa=_deref_pbuc1 
    lda form_vic_gfx
    // [99] call get_vic_charset 
    jsr get_vic_charset
    // [100] (byte*) get_vic_charset::return#4 ← (byte*) get_vic_charset::return#2
    // gfx_mode::@30
    // [101] (byte*~) gfx_mode::$83 ← (byte*) get_vic_charset::return#4
    // (word)get_vic_charset(*form_vic_gfx)&$3fff
    // [102] (word~) gfx_mode::$50 ← (word)(byte*~) gfx_mode::$83 & (word) $3fff -- vwuz1=vwuz1_band_vwuc1 
    lda.z __50
    and #<$3fff
    sta.z __50
    lda.z __50+1
    and #>$3fff
    sta.z __50+1
    // >((word)get_vic_charset(*form_vic_gfx)&$3fff)
    // [103] (byte~) gfx_mode::$51 ← > (word~) gfx_mode::$50 -- vbuaa=_hi_vwuz1 
    // (>((word)get_vic_charset(*form_vic_gfx)&$3fff))/4
    // [104] (byte~) gfx_mode::$52 ← (byte~) gfx_mode::$51 >> (byte) 2 -- vbuz1=vbuaa_ror_2 
    lsr
    lsr
    sta.z __52
    // (byte)(((word)get_vic_screen(*form_vic_screen)&$3fff)/$40)  |   ((>((word)get_vic_charset(*form_vic_gfx)&$3fff))/4)
    // [105] (byte~) gfx_mode::$84 ← (byte)(word~) gfx_mode::$48 -- vbuaa=_byte_vwuz1 
    lda.z __48
    // [106] (byte~) gfx_mode::$53 ← (byte~) gfx_mode::$84 | (byte~) gfx_mode::$52 -- vbuaa=vbuaa_bor_vbuz1 
    ora.z __52
    // *VIC_MEMORY = (byte)(((word)get_vic_screen(*form_vic_screen)&$3fff)/$40)  |   ((>((word)get_vic_charset(*form_vic_gfx)&$3fff))/4)
    // [107] *((const nomodify byte*) VIC_MEMORY) ← (byte~) gfx_mode::$53 -- _deref_pbuc1=vbuaa 
    // Set VIC Bank
    // VIC memory
    sta VIC_MEMORY
    // get_vic_screen(*form_vic_cols)
    // [108] (byte) get_vic_screen::idx#1 ← *((const nomodify byte*) form_vic_cols) -- vbuaa=_deref_pbuc1 
    lda form_vic_cols
    // [109] call get_vic_screen 
    // [220] phi from gfx_mode::@30 to get_vic_screen [phi:gfx_mode::@30->get_vic_screen]
    // [220] phi (byte) get_vic_screen::idx#2 = (byte) get_vic_screen::idx#1 [phi:gfx_mode::@30->get_vic_screen#0] -- register_copy 
    jsr get_vic_screen
    // get_vic_screen(*form_vic_cols)
    // [110] (byte*) get_vic_screen::return#11 ← (byte*) get_vic_screen::return#5
    // gfx_mode::@31
    // vic_colors = get_vic_screen(*form_vic_cols)
    // [111] (byte*) gfx_mode::vic_colors#0 ← (byte*) get_vic_screen::return#11
    // [112] phi from gfx_mode::@31 to gfx_mode::@19 [phi:gfx_mode::@31->gfx_mode::@19]
    // [112] phi (byte) gfx_mode::cy#4 = (byte) 0 [phi:gfx_mode::@31->gfx_mode::@19#0] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    // [112] phi (byte*) gfx_mode::col#3 = (const nomodify byte*) COLS [phi:gfx_mode::@31->gfx_mode::@19#1] -- pbuz1=pbuc1 
    lda #<COLS
    sta.z col
    lda #>COLS
    sta.z col+1
    // [112] phi (byte*) gfx_mode::vic_colors#3 = (byte*) gfx_mode::vic_colors#0 [phi:gfx_mode::@31->gfx_mode::@19#2] -- register_copy 
    // [112] phi from gfx_mode::@21 to gfx_mode::@19 [phi:gfx_mode::@21->gfx_mode::@19]
    // [112] phi (byte) gfx_mode::cy#4 = (byte) gfx_mode::cy#1 [phi:gfx_mode::@21->gfx_mode::@19#0] -- register_copy 
    // [112] phi (byte*) gfx_mode::col#3 = (byte*) gfx_mode::col#1 [phi:gfx_mode::@21->gfx_mode::@19#1] -- register_copy 
    // [112] phi (byte*) gfx_mode::vic_colors#3 = (byte*) gfx_mode::vic_colors#1 [phi:gfx_mode::@21->gfx_mode::@19#2] -- register_copy 
    // gfx_mode::@19
  __b19:
    // [113] phi from gfx_mode::@19 to gfx_mode::@20 [phi:gfx_mode::@19->gfx_mode::@20]
    // [113] phi (byte) gfx_mode::cx#2 = (byte) 0 [phi:gfx_mode::@19->gfx_mode::@20#0] -- vbuxx=vbuc1 
    ldx #0
    // [113] phi (byte*) gfx_mode::col#2 = (byte*) gfx_mode::col#3 [phi:gfx_mode::@19->gfx_mode::@20#1] -- register_copy 
    // [113] phi (byte*) gfx_mode::vic_colors#2 = (byte*) gfx_mode::vic_colors#3 [phi:gfx_mode::@19->gfx_mode::@20#2] -- register_copy 
    // [113] phi from gfx_mode::@20 to gfx_mode::@20 [phi:gfx_mode::@20->gfx_mode::@20]
    // [113] phi (byte) gfx_mode::cx#2 = (byte) gfx_mode::cx#1 [phi:gfx_mode::@20->gfx_mode::@20#0] -- register_copy 
    // [113] phi (byte*) gfx_mode::col#2 = (byte*) gfx_mode::col#1 [phi:gfx_mode::@20->gfx_mode::@20#1] -- register_copy 
    // [113] phi (byte*) gfx_mode::vic_colors#2 = (byte*) gfx_mode::vic_colors#1 [phi:gfx_mode::@20->gfx_mode::@20#2] -- register_copy 
    // gfx_mode::@20
  __b20:
    // *col++ = *vic_colors++
    // [114] *((byte*) gfx_mode::col#2) ← *((byte*) gfx_mode::vic_colors#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (vic_colors),y
    sta (col),y
    // *col++ = *vic_colors++;
    // [115] (byte*) gfx_mode::col#1 ← ++ (byte*) gfx_mode::col#2 -- pbuz1=_inc_pbuz1 
    inc.z col
    bne !+
    inc.z col+1
  !:
    // [116] (byte*) gfx_mode::vic_colors#1 ← ++ (byte*) gfx_mode::vic_colors#2 -- pbuz1=_inc_pbuz1 
    inc.z vic_colors
    bne !+
    inc.z vic_colors+1
  !:
    // for(byte cx: 0..39)
    // [117] (byte) gfx_mode::cx#1 ← ++ (byte) gfx_mode::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [118] if((byte) gfx_mode::cx#1!=(byte) $28) goto gfx_mode::@20 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b20
    // gfx_mode::@21
    // for(byte cy: 0..24 )
    // [119] (byte) gfx_mode::cy#1 ← ++ (byte) gfx_mode::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [120] if((byte) gfx_mode::cy#1!=(byte) $19) goto gfx_mode::@19 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b19
    // gfx_mode::@22
    // VICII->BORDER_COLOR = 0
    // [121] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Background colors
    lda #0
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // *form_vic_bg0_hi*$10
    // [122] (byte~) gfx_mode::$55 ← *((const nomodify byte*) form_vic_bg0_hi) << (byte) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_vic_bg0_hi
    asl
    asl
    asl
    asl
    // *form_vic_bg0_hi*$10|*form_vic_bg0_lo
    // [123] (byte~) gfx_mode::$56 ← (byte~) gfx_mode::$55 | *((const nomodify byte*) form_vic_bg0_lo) -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_vic_bg0_lo
    // VICII->BG_COLOR = *form_vic_bg0_hi*$10|*form_vic_bg0_lo
    // [124] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) ← (byte~) gfx_mode::$56 -- _deref_pbuc1=vbuaa 
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR
    // *form_vic_bg1_hi*$10
    // [125] (byte~) gfx_mode::$57 ← *((const nomodify byte*) form_vic_bg1_hi) << (byte) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_vic_bg1_hi
    asl
    asl
    asl
    asl
    // *form_vic_bg1_hi*$10|*form_vic_bg1_lo
    // [126] (byte~) gfx_mode::$58 ← (byte~) gfx_mode::$57 | *((const nomodify byte*) form_vic_bg1_lo) -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_vic_bg1_lo
    // VICII->BG_COLOR1 = *form_vic_bg1_hi*$10|*form_vic_bg1_lo
    // [127] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR1) ← (byte~) gfx_mode::$58 -- _deref_pbuc1=vbuaa 
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR1
    // *form_vic_bg2_hi*$10
    // [128] (byte~) gfx_mode::$59 ← *((const nomodify byte*) form_vic_bg2_hi) << (byte) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_vic_bg2_hi
    asl
    asl
    asl
    asl
    // *form_vic_bg2_hi*$10|*form_vic_bg2_lo
    // [129] (byte~) gfx_mode::$60 ← (byte~) gfx_mode::$59 | *((const nomodify byte*) form_vic_bg2_lo) -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_vic_bg2_lo
    // VICII->BG_COLOR2 = *form_vic_bg2_hi*$10|*form_vic_bg2_lo
    // [130] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR2) ← (byte~) gfx_mode::$60 -- _deref_pbuc1=vbuaa 
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR2
    // *form_vic_bg3_hi*$10
    // [131] (byte~) gfx_mode::$61 ← *((const nomodify byte*) form_vic_bg3_hi) << (byte) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_vic_bg3_hi
    asl
    asl
    asl
    asl
    // *form_vic_bg3_hi*$10|*form_vic_bg3_lo
    // [132] (byte~) gfx_mode::$62 ← (byte~) gfx_mode::$61 | *((const nomodify byte*) form_vic_bg3_lo) -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_vic_bg3_lo
    // VICII->BG_COLOR3 = *form_vic_bg3_hi*$10|*form_vic_bg3_lo
    // [133] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR3) ← (byte~) gfx_mode::$62 -- _deref_pbuc1=vbuaa 
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR3
    // if(*form_dtv_palet==0)
    // [134] if(*((const nomodify byte*) form_dtv_palet)==(byte) 0) goto gfx_mode::@24 -- _deref_pbuc1_eq_0_then_la1 
    // DTV Palette
    lda form_dtv_palet
    cmp #0
    beq __b13
    // [135] phi from gfx_mode::@22 to gfx_mode::@23 [phi:gfx_mode::@22->gfx_mode::@23]
    // [135] phi (byte) gfx_mode::j#2 = (byte) 0 [phi:gfx_mode::@22->gfx_mode::@23#0] -- vbuxx=vbuc1 
    ldx #0
  // DTV Palette - Grey Tones
    // [135] phi from gfx_mode::@23 to gfx_mode::@23 [phi:gfx_mode::@23->gfx_mode::@23]
    // [135] phi (byte) gfx_mode::j#2 = (byte) gfx_mode::j#1 [phi:gfx_mode::@23->gfx_mode::@23#0] -- register_copy 
    // gfx_mode::@23
  __b23:
    // DTV_PALETTE[j] = j
    // [136] *((const nomodify byte*) DTV_PALETTE + (byte) gfx_mode::j#2) ← (byte) gfx_mode::j#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta DTV_PALETTE,x
    // for(byte j : 0..$f)
    // [137] (byte) gfx_mode::j#1 ← ++ (byte) gfx_mode::j#2 -- vbuxx=_inc_vbuxx 
    inx
    // [138] if((byte) gfx_mode::j#1!=(byte) $10) goto gfx_mode::@23 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b23
    // gfx_mode::@25
  __b25:
    // while(VICII->RASTER!=$ff)
    // [139] if(*((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)!=(byte) $ff) goto gfx_mode::@25 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    bne __b25
    // [140] phi from gfx_mode::@25 to gfx_mode::@26 [phi:gfx_mode::@25->gfx_mode::@26]
    // gfx_mode::@26
    // keyboard_event_scan()
    // [141] call keyboard_event_scan 
    // [157] phi from gfx_mode::@26 to keyboard_event_scan [phi:gfx_mode::@26->keyboard_event_scan]
    // [157] phi (byte) keyboard_events_size#97 = (byte) keyboard_events_size#24 [phi:gfx_mode::@26->keyboard_event_scan#0] -- register_copy 
    jsr keyboard_event_scan
    // [142] phi from gfx_mode::@26 to gfx_mode::@32 [phi:gfx_mode::@26->gfx_mode::@32]
    // gfx_mode::@32
    // keyboard_event_get()
    // [143] call keyboard_event_get 
    jsr keyboard_event_get
    // [144] (byte) keyboard_event_get::return#3 ← (byte) keyboard_event_get::return#2
    // gfx_mode::@33
    // keyboard_event = keyboard_event_get()
    // [145] (byte) gfx_mode::keyboard_event#0 ← (byte) keyboard_event_get::return#3
    // if(keyboard_event==KEY_SPACE)
    // [146] if((byte) gfx_mode::keyboard_event#0==(const nomodify byte) KEY_SPACE) goto gfx_mode::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #KEY_SPACE
    beq __breturn
    jmp __b25
    // gfx_mode::@return
  __breturn:
    // }
    // [147] return 
    rts
  // DTV Palette - default
    // [148] phi from gfx_mode::@22 to gfx_mode::@24 [phi:gfx_mode::@22->gfx_mode::@24]
  __b13:
    // [148] phi (byte) gfx_mode::i#2 = (byte) 0 [phi:gfx_mode::@22->gfx_mode::@24#0] -- vbuxx=vbuc1 
    ldx #0
    // [148] phi from gfx_mode::@24 to gfx_mode::@24 [phi:gfx_mode::@24->gfx_mode::@24]
    // [148] phi (byte) gfx_mode::i#2 = (byte) gfx_mode::i#1 [phi:gfx_mode::@24->gfx_mode::@24#0] -- register_copy 
    // gfx_mode::@24
  __b24:
    // DTV_PALETTE[i] = DTV_PALETTE_DEFAULT[i]
    // [149] *((const nomodify byte*) DTV_PALETTE + (byte) gfx_mode::i#2) ← *((const byte*) DTV_PALETTE_DEFAULT + (byte) gfx_mode::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda DTV_PALETTE_DEFAULT,x
    sta DTV_PALETTE,x
    // for(byte i : 0..$f)
    // [150] (byte) gfx_mode::i#1 ← ++ (byte) gfx_mode::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [151] if((byte) gfx_mode::i#1!=(byte) $10) goto gfx_mode::@24 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b24
    jmp __b25
}
  // keyboard_event_get
// Get the next event from the keyboard event buffer.
// Returns $ff if there is no event waiting. As all events are <$7f it is enough to examine bit 7 when determining if there is any event to process.
// The buffer is filled by keyboard_event_scan()
keyboard_event_get: {
    // if(keyboard_events_size==0)
    // [152] if((byte) keyboard_events_size#100==(byte) 0) goto keyboard_event_get::@return -- vbuz1_eq_0_then_la1 
    lda.z keyboard_events_size
    cmp #0
    beq __b1
    // keyboard_event_get::@1
    // return keyboard_events[--keyboard_events_size];
    // [153] (byte) keyboard_events_size#4 ← -- (byte) keyboard_events_size#100 -- vbuz1=_dec_vbuz1 
    dec.z keyboard_events_size
    // [154] (byte) keyboard_event_get::return#1 ← *((const byte*) keyboard_events + (byte) keyboard_events_size#4) -- vbuaa=pbuc1_derefidx_vbuz1 
    ldy.z keyboard_events_size
    lda keyboard_events,y
    // [155] phi from keyboard_event_get::@1 to keyboard_event_get::@return [phi:keyboard_event_get::@1->keyboard_event_get::@return]
    // [155] phi (byte) keyboard_events_size#24 = (byte) keyboard_events_size#4 [phi:keyboard_event_get::@1->keyboard_event_get::@return#0] -- register_copy 
    // [155] phi (byte) keyboard_event_get::return#2 = (byte) keyboard_event_get::return#1 [phi:keyboard_event_get::@1->keyboard_event_get::@return#1] -- register_copy 
    rts
    // [155] phi from keyboard_event_get to keyboard_event_get::@return [phi:keyboard_event_get->keyboard_event_get::@return]
  __b1:
    // [155] phi (byte) keyboard_events_size#24 = (byte) keyboard_events_size#100 [phi:keyboard_event_get->keyboard_event_get::@return#0] -- register_copy 
    // [155] phi (byte) keyboard_event_get::return#2 = (byte) $ff [phi:keyboard_event_get->keyboard_event_get::@return#1] -- vbuaa=vbuc1 
    lda #$ff
    // keyboard_event_get::@return
    // }
    // [156] return 
    rts
}
  // keyboard_event_scan
// Scans the entire matrix to determine which keys have been pressed/depressed.
// Generates keyboard events into the event buffer. Events can be read using keyboard_event_get().
// Handles debounce and only generates events when the status of a key changes.
// Also stores current status of modifiers in keyboard_modifiers.
keyboard_event_scan: {
    .label row_scan = $16
    .label keycode = $22
    .label row = $e
    // [158] phi from keyboard_event_scan to keyboard_event_scan::@7 [phi:keyboard_event_scan->keyboard_event_scan::@7]
    // [158] phi (byte) keyboard_events_size#106 = (byte) keyboard_events_size#97 [phi:keyboard_event_scan->keyboard_event_scan::@7#0] -- register_copy 
    // [158] phi (byte) keyboard_event_scan::keycode#11 = (byte) 0 [phi:keyboard_event_scan->keyboard_event_scan::@7#1] -- vbuz1=vbuc1 
    lda #0
    sta.z keycode
    // [158] phi (byte) keyboard_event_scan::row#2 = (byte) 0 [phi:keyboard_event_scan->keyboard_event_scan::@7#2] -- vbuz1=vbuc1 
    sta.z row
    // [158] phi from keyboard_event_scan::@8 to keyboard_event_scan::@7 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7]
    // [158] phi (byte) keyboard_events_size#106 = (byte) keyboard_events_size#100 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7#0] -- register_copy 
    // [158] phi (byte) keyboard_event_scan::keycode#11 = (byte) keyboard_event_scan::keycode#13 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7#1] -- register_copy 
    // [158] phi (byte) keyboard_event_scan::row#2 = (byte) keyboard_event_scan::row#1 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7#2] -- register_copy 
    // keyboard_event_scan::@7
  __b7:
    // keyboard_matrix_read(row)
    // [159] (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_event_scan::row#2 -- vbuxx=vbuz1 
    ldx.z row
    // [160] call keyboard_matrix_read 
    jsr keyboard_matrix_read
    // [161] (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#0
    // keyboard_event_scan::@19
    // row_scan = keyboard_matrix_read(row)
    // [162] (byte) keyboard_event_scan::row_scan#0 ← (byte) keyboard_matrix_read::return#2 -- vbuz1=vbuaa 
    sta.z row_scan
    // if(row_scan!=keyboard_scan_values[row])
    // [163] if((byte) keyboard_event_scan::row_scan#0!=*((const byte*) keyboard_scan_values + (byte) keyboard_event_scan::row#2)) goto keyboard_event_scan::@9 -- vbuz1_neq_pbuc1_derefidx_vbuz2_then_la1 
    ldy.z row
    cmp keyboard_scan_values,y
    bne __b6
    // keyboard_event_scan::@16
    // keycode = keycode + 8
    // [164] (byte) keyboard_event_scan::keycode#1 ← (byte) keyboard_event_scan::keycode#11 + (byte) 8 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z keycode
    axs #-[8]
    stx.z keycode
    // [165] phi from keyboard_event_scan::@15 keyboard_event_scan::@16 to keyboard_event_scan::@8 [phi:keyboard_event_scan::@15/keyboard_event_scan::@16->keyboard_event_scan::@8]
    // [165] phi (byte) keyboard_events_size#100 = (byte) keyboard_events_size#105 [phi:keyboard_event_scan::@15/keyboard_event_scan::@16->keyboard_event_scan::@8#0] -- register_copy 
    // [165] phi (byte) keyboard_event_scan::keycode#13 = (byte) keyboard_event_scan::keycode#14 [phi:keyboard_event_scan::@15/keyboard_event_scan::@16->keyboard_event_scan::@8#1] -- register_copy 
    // keyboard_event_scan::@8
  __b8:
    // for(char row : 0..7)
    // [166] (byte) keyboard_event_scan::row#1 ← ++ (byte) keyboard_event_scan::row#2 -- vbuz1=_inc_vbuz1 
    inc.z row
    // [167] if((byte) keyboard_event_scan::row#1!=(byte) 8) goto keyboard_event_scan::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z row
    bne __b7
    // [168] phi from keyboard_event_scan::@8 to keyboard_event_scan::@17 [phi:keyboard_event_scan::@8->keyboard_event_scan::@17]
    // keyboard_event_scan::@17
    // keyboard_event_pressed(KEY_LSHIFT)
    // [169] call keyboard_event_pressed 
    // [211] phi from keyboard_event_scan::@17 to keyboard_event_pressed [phi:keyboard_event_scan::@17->keyboard_event_pressed]
    // [211] phi (byte) keyboard_event_pressed::keycode#4 = (const nomodify byte) KEY_LSHIFT [phi:keyboard_event_scan::@17->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_LSHIFT
    sta.z keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
    // keyboard_event_pressed(KEY_LSHIFT)
    // [170] (byte) keyboard_event_pressed::return#0 ← (byte) keyboard_event_pressed::return#10
    // keyboard_event_scan::@20
    // [171] (byte~) keyboard_event_scan::$0 ← (byte) keyboard_event_pressed::return#0
    // if(keyboard_event_pressed(KEY_LSHIFT)!= 0)
    // [172] if((byte~) keyboard_event_scan::$0==(byte) 0) goto keyboard_event_scan::@1 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b4
    // [173] phi from keyboard_event_scan::@20 to keyboard_event_scan::@18 [phi:keyboard_event_scan::@20->keyboard_event_scan::@18]
    // keyboard_event_scan::@18
    // [174] phi from keyboard_event_scan::@18 to keyboard_event_scan::@1 [phi:keyboard_event_scan::@18->keyboard_event_scan::@1]
    // [174] phi (byte) keyboard_modifiers#18 = (const nomodify byte) KEY_MODIFIER_LSHIFT [phi:keyboard_event_scan::@18->keyboard_event_scan::@1#0] -- vbuxx=vbuc1 
    ldx #KEY_MODIFIER_LSHIFT
    jmp __b1
    // [174] phi from keyboard_event_scan::@20 to keyboard_event_scan::@1 [phi:keyboard_event_scan::@20->keyboard_event_scan::@1]
  __b4:
    // [174] phi (byte) keyboard_modifiers#18 = (byte) 0 [phi:keyboard_event_scan::@20->keyboard_event_scan::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // keyboard_event_scan::@1
  __b1:
    // keyboard_event_pressed(KEY_RSHIFT)
    // [175] call keyboard_event_pressed 
    // [211] phi from keyboard_event_scan::@1 to keyboard_event_pressed [phi:keyboard_event_scan::@1->keyboard_event_pressed]
    // [211] phi (byte) keyboard_event_pressed::keycode#4 = (const nomodify byte) KEY_RSHIFT [phi:keyboard_event_scan::@1->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_RSHIFT
    sta.z keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
    // keyboard_event_pressed(KEY_RSHIFT)
    // [176] (byte) keyboard_event_pressed::return#1 ← (byte) keyboard_event_pressed::return#10
    // keyboard_event_scan::@21
    // [177] (byte~) keyboard_event_scan::$3 ← (byte) keyboard_event_pressed::return#1
    // if(keyboard_event_pressed(KEY_RSHIFT)!= 0)
    // [178] if((byte~) keyboard_event_scan::$3==(byte) 0) goto keyboard_event_scan::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b2
    // keyboard_event_scan::@4
    // keyboard_modifiers = keyboard_modifiers | KEY_MODIFIER_RSHIFT
    // [179] (byte) keyboard_modifiers#3 ← (byte) keyboard_modifiers#18 | (const nomodify byte) KEY_MODIFIER_RSHIFT -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #KEY_MODIFIER_RSHIFT
    tax
    // [180] phi from keyboard_event_scan::@21 keyboard_event_scan::@4 to keyboard_event_scan::@2 [phi:keyboard_event_scan::@21/keyboard_event_scan::@4->keyboard_event_scan::@2]
    // [180] phi (byte) keyboard_modifiers#19 = (byte) keyboard_modifiers#18 [phi:keyboard_event_scan::@21/keyboard_event_scan::@4->keyboard_event_scan::@2#0] -- register_copy 
    // keyboard_event_scan::@2
  __b2:
    // keyboard_event_pressed(KEY_CTRL)
    // [181] call keyboard_event_pressed 
    // [211] phi from keyboard_event_scan::@2 to keyboard_event_pressed [phi:keyboard_event_scan::@2->keyboard_event_pressed]
    // [211] phi (byte) keyboard_event_pressed::keycode#4 = (const nomodify byte) KEY_CTRL [phi:keyboard_event_scan::@2->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_CTRL
    sta.z keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
    // keyboard_event_pressed(KEY_CTRL)
    // [182] (byte) keyboard_event_pressed::return#2 ← (byte) keyboard_event_pressed::return#10
    // keyboard_event_scan::@22
    // [183] (byte~) keyboard_event_scan::$6 ← (byte) keyboard_event_pressed::return#2
    // if(keyboard_event_pressed(KEY_CTRL)!= 0)
    // [184] if((byte~) keyboard_event_scan::$6==(byte) 0) goto keyboard_event_scan::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3
    // keyboard_event_scan::@5
    // keyboard_modifiers = keyboard_modifiers | KEY_MODIFIER_CTRL
    // [185] (byte) keyboard_modifiers#4 ← (byte) keyboard_modifiers#19 | (const nomodify byte) KEY_MODIFIER_CTRL -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #KEY_MODIFIER_CTRL
    tax
    // [186] phi from keyboard_event_scan::@22 keyboard_event_scan::@5 to keyboard_event_scan::@3 [phi:keyboard_event_scan::@22/keyboard_event_scan::@5->keyboard_event_scan::@3]
    // [186] phi (byte) keyboard_modifiers#20 = (byte) keyboard_modifiers#19 [phi:keyboard_event_scan::@22/keyboard_event_scan::@5->keyboard_event_scan::@3#0] -- register_copy 
    // keyboard_event_scan::@3
  __b3:
    // keyboard_event_pressed(KEY_COMMODORE)
    // [187] call keyboard_event_pressed 
    // [211] phi from keyboard_event_scan::@3 to keyboard_event_pressed [phi:keyboard_event_scan::@3->keyboard_event_pressed]
    // [211] phi (byte) keyboard_event_pressed::keycode#4 = (const nomodify byte) KEY_COMMODORE [phi:keyboard_event_scan::@3->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_COMMODORE
    sta.z keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
    // keyboard_event_pressed(KEY_COMMODORE)
    // [188] (byte) keyboard_event_pressed::return#3 ← (byte) keyboard_event_pressed::return#10
    // keyboard_event_scan::@23
    // [189] (byte~) keyboard_event_scan::$9 ← (byte) keyboard_event_pressed::return#3
    // if(keyboard_event_pressed(KEY_COMMODORE)!= 0)
    // [190] if((byte~) keyboard_event_scan::$9==(byte) 0) goto keyboard_event_scan::@return -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __breturn
    // keyboard_event_scan::@6
    // keyboard_modifiers = keyboard_modifiers | KEY_MODIFIER_COMMODORE
    // [191] (byte) keyboard_modifiers#5 ← (byte) keyboard_modifiers#20 | (const nomodify byte) KEY_MODIFIER_COMMODORE -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #KEY_MODIFIER_COMMODORE
    tax
    // [192] phi from keyboard_event_scan::@23 keyboard_event_scan::@6 to keyboard_event_scan::@return [phi:keyboard_event_scan::@23/keyboard_event_scan::@6->keyboard_event_scan::@return]
    // [192] phi (byte) keyboard_modifiers#21 = (byte) keyboard_modifiers#20 [phi:keyboard_event_scan::@23/keyboard_event_scan::@6->keyboard_event_scan::@return#0] -- register_copy 
    // keyboard_event_scan::@return
  __breturn:
    // }
    // [193] return 
    rts
  // Something has changed on the keyboard row - check each column
    // [194] phi from keyboard_event_scan::@10 to keyboard_event_scan::@9 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9]
    // [194] phi (byte) keyboard_events_size#18 = (byte) keyboard_events_size#105 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9#0] -- register_copy 
    // [194] phi (byte) keyboard_event_scan::keycode#10 = (byte) keyboard_event_scan::keycode#14 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9#1] -- register_copy 
    // [194] phi (byte) keyboard_event_scan::col#2 = (byte) keyboard_event_scan::col#1 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9#2] -- register_copy 
    // [194] phi from keyboard_event_scan::@19 to keyboard_event_scan::@9 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9]
  __b6:
    // [194] phi (byte) keyboard_events_size#18 = (byte) keyboard_events_size#106 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9#0] -- register_copy 
    // [194] phi (byte) keyboard_event_scan::keycode#10 = (byte) keyboard_event_scan::keycode#11 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9#1] -- register_copy 
    // [194] phi (byte) keyboard_event_scan::col#2 = (byte) 0 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9#2] -- vbuxx=vbuc1 
    ldx #0
    // keyboard_event_scan::@9
  __b9:
    // row_scan^keyboard_scan_values[row]
    // [195] (byte~) keyboard_event_scan::$15 ← (byte) keyboard_event_scan::row_scan#0 ^ *((const byte*) keyboard_scan_values + (byte) keyboard_event_scan::row#2) -- vbuaa=vbuz1_bxor_pbuc1_derefidx_vbuz2 
    lda.z row_scan
    ldy.z row
    eor keyboard_scan_values,y
    // (row_scan^keyboard_scan_values[row])&keyboard_matrix_col_bitmask[col]
    // [196] (byte~) keyboard_event_scan::$16 ← (byte~) keyboard_event_scan::$15 & *((const byte*) keyboard_matrix_col_bitmask + (byte) keyboard_event_scan::col#2) -- vbuaa=vbuaa_band_pbuc1_derefidx_vbuxx 
    and keyboard_matrix_col_bitmask,x
    // if(((row_scan^keyboard_scan_values[row])&keyboard_matrix_col_bitmask[col])!=0)
    // [197] if((byte~) keyboard_event_scan::$16==(byte) 0) goto keyboard_event_scan::@10 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b10
    // keyboard_event_scan::@12
    // if(keyboard_events_size!=8)
    // [198] if((byte) keyboard_events_size#18==(byte) 8) goto keyboard_event_scan::@10 -- vbuz1_eq_vbuc1_then_la1 
    lda #8
    cmp.z keyboard_events_size
    beq __b10
    // keyboard_event_scan::@13
    // event_type = row_scan&keyboard_matrix_col_bitmask[col]
    // [199] (byte) keyboard_event_scan::event_type#0 ← (byte) keyboard_event_scan::row_scan#0 & *((const byte*) keyboard_matrix_col_bitmask + (byte) keyboard_event_scan::col#2) -- vbuaa=vbuz1_band_pbuc1_derefidx_vbuxx 
    lda keyboard_matrix_col_bitmask,x
    and.z row_scan
    // if(event_type==0)
    // [200] if((byte) keyboard_event_scan::event_type#0==(byte) 0) goto keyboard_event_scan::@11 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b11
    // keyboard_event_scan::@14
    // keyboard_events[keyboard_events_size++] = keycode
    // [201] *((const byte*) keyboard_events + (byte) keyboard_events_size#18) ← (byte) keyboard_event_scan::keycode#10 -- pbuc1_derefidx_vbuz1=vbuz2 
    // Key pressed
    lda.z keycode
    ldy.z keyboard_events_size
    sta keyboard_events,y
    // keyboard_events[keyboard_events_size++] = keycode;
    // [202] (byte) keyboard_events_size#2 ← ++ (byte) keyboard_events_size#18 -- vbuz1=_inc_vbuz1 
    inc.z keyboard_events_size
    // [203] phi from keyboard_event_scan::@11 keyboard_event_scan::@12 keyboard_event_scan::@14 keyboard_event_scan::@9 to keyboard_event_scan::@10 [phi:keyboard_event_scan::@11/keyboard_event_scan::@12/keyboard_event_scan::@14/keyboard_event_scan::@9->keyboard_event_scan::@10]
    // [203] phi (byte) keyboard_events_size#105 = (byte) keyboard_events_size#1 [phi:keyboard_event_scan::@11/keyboard_event_scan::@12/keyboard_event_scan::@14/keyboard_event_scan::@9->keyboard_event_scan::@10#0] -- register_copy 
    // keyboard_event_scan::@10
  __b10:
    // keycode++;
    // [204] (byte) keyboard_event_scan::keycode#14 ← ++ (byte) keyboard_event_scan::keycode#10 -- vbuz1=_inc_vbuz1 
    inc.z keycode
    // for(char col : 0..7)
    // [205] (byte) keyboard_event_scan::col#1 ← ++ (byte) keyboard_event_scan::col#2 -- vbuxx=_inc_vbuxx 
    inx
    // [206] if((byte) keyboard_event_scan::col#1!=(byte) 8) goto keyboard_event_scan::@9 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne __b9
    // keyboard_event_scan::@15
    // keyboard_scan_values[row] = row_scan
    // [207] *((const byte*) keyboard_scan_values + (byte) keyboard_event_scan::row#2) ← (byte) keyboard_event_scan::row_scan#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    // Store the current keyboard status for the row to debounce
    lda.z row_scan
    ldy.z row
    sta keyboard_scan_values,y
    jmp __b8
    // keyboard_event_scan::@11
  __b11:
    // keycode|$40
    // [208] (byte~) keyboard_event_scan::$23 ← (byte) keyboard_event_scan::keycode#10 | (byte) $40 -- vbuaa=vbuz1_bor_vbuc1 
    lda #$40
    ora.z keycode
    // keyboard_events[keyboard_events_size++] = keycode|$40
    // [209] *((const byte*) keyboard_events + (byte) keyboard_events_size#18) ← (byte~) keyboard_event_scan::$23 -- pbuc1_derefidx_vbuz1=vbuaa 
    // Key released
    ldy.z keyboard_events_size
    sta keyboard_events,y
    // keyboard_events[keyboard_events_size++] = keycode|$40;
    // [210] (byte) keyboard_events_size#1 ← ++ (byte) keyboard_events_size#18 -- vbuz1=_inc_vbuz1 
    inc.z keyboard_events_size
    jmp __b10
}
  // keyboard_event_pressed
// Determine if a specific key is currently pressed based on the last keyboard_event_scan()
// Returns 0 is not pressed and non-0 if pressed
// keyboard_event_pressed(byte zp($f) keycode)
keyboard_event_pressed: {
    .label row_bits = $21
    .label keycode = $f
    // keycode>>3
    // [212] (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#4 >> (byte) 3 -- vbuaa=vbuz1_ror_3 
    lda.z keycode
    lsr
    lsr
    lsr
    // row_bits = keyboard_scan_values[keycode>>3]
    // [213] (byte) keyboard_event_pressed::row_bits#0 ← *((const byte*) keyboard_scan_values + (byte~) keyboard_event_pressed::$0) -- vbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda keyboard_scan_values,y
    sta.z row_bits
    // keycode&7
    // [214] (byte~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#4 & (byte) 7 -- vbuaa=vbuz1_band_vbuc1 
    lda #7
    and.z keycode
    // row_bits & keyboard_matrix_col_bitmask[keycode&7]
    // [215] (byte) keyboard_event_pressed::return#10 ← (byte) keyboard_event_pressed::row_bits#0 & *((const byte*) keyboard_matrix_col_bitmask + (byte~) keyboard_event_pressed::$1) -- vbuaa=vbuz1_band_pbuc1_derefidx_vbuaa 
    tay
    lda keyboard_matrix_col_bitmask,y
    and.z row_bits
    // keyboard_event_pressed::@return
    // }
    // [216] return 
    rts
}
  // keyboard_matrix_read
// Read a single row of the keyboard matrix
// The row ID (0-7) of the keyboard matrix row to read. See the C64 key matrix for row IDs.
// Returns the keys pressed on the row as bits according to the C64 key matrix.
// Notice: If the C64 normal interrupt is still running it will occasionally interrupt right between the read & write
// leading to erroneous readings. You must disable the normal interrupt or sei/cli around calls to the keyboard matrix reader.
// keyboard_matrix_read(byte register(X) rowid)
keyboard_matrix_read: {
    // CIA1->PORT_A = keyboard_matrix_row_bitmask[rowid]
    // [217] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1) ← *((const byte*) keyboard_matrix_row_bitmask + (byte) keyboard_matrix_read::rowid#0) -- _deref_pbuc1=pbuc2_derefidx_vbuxx 
    lda keyboard_matrix_row_bitmask,x
    sta CIA1
    // ~CIA1->PORT_B
    // [218] (byte) keyboard_matrix_read::return#0 ← ~ *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_B) -- vbuaa=_bnot__deref_pbuc1 
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_B
    eor #$ff
    // keyboard_matrix_read::@return
    // }
    // [219] return 
    rts
}
  // get_vic_screen
// Get the VIC screen address from the screen index
// get_vic_screen(byte register(A) idx)
get_vic_screen: {
    .label return = $10
    // if(idx==0)
    // [221] if((byte) get_vic_screen::idx#2==(byte) 0) goto get_vic_screen::@return -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b1
    // get_vic_screen::@2
    // if(idx==1)
    // [222] if((byte) get_vic_screen::idx#2==(byte) 1) goto get_vic_screen::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #1
    beq __b2
    // get_vic_screen::@3
    // if(idx==2)
    // [223] if((byte) get_vic_screen::idx#2==(byte) 2) goto get_vic_screen::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #2
    beq __b3
    // get_vic_screen::@4
    // if(idx==3)
    // [224] if((byte) get_vic_screen::idx#2==(byte) 3) goto get_vic_screen::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #3
    beq __b4
    // get_vic_screen::@5
    // if(idx==4)
    // [225] if((byte) get_vic_screen::idx#2!=(byte) 4) goto get_vic_screen::@1 -- vbuaa_neq_vbuc1_then_la1 
    cmp #4
    bne __b1
    // [227] phi from get_vic_screen::@5 to get_vic_screen::@return [phi:get_vic_screen::@5->get_vic_screen::@return]
    // [227] phi (byte*) get_vic_screen::return#5 = (const nomodify byte*) VIC_SCREEN4 [phi:get_vic_screen::@5->get_vic_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN4
    sta.z return
    lda #>VIC_SCREEN4
    sta.z return+1
    rts
    // [226] phi from get_vic_screen::@5 to get_vic_screen::@1 [phi:get_vic_screen::@5->get_vic_screen::@1]
    // get_vic_screen::@1
  __b1:
    // [227] phi from get_vic_screen get_vic_screen::@1 to get_vic_screen::@return [phi:get_vic_screen/get_vic_screen::@1->get_vic_screen::@return]
    // [227] phi (byte*) get_vic_screen::return#5 = (const nomodify byte*) VIC_SCREEN0 [phi:get_vic_screen/get_vic_screen::@1->get_vic_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN0
    sta.z return
    lda #>VIC_SCREEN0
    sta.z return+1
    rts
    // [227] phi from get_vic_screen::@2 to get_vic_screen::@return [phi:get_vic_screen::@2->get_vic_screen::@return]
  __b2:
    // [227] phi (byte*) get_vic_screen::return#5 = (const nomodify byte*) VIC_SCREEN1 [phi:get_vic_screen::@2->get_vic_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN1
    sta.z return
    lda #>VIC_SCREEN1
    sta.z return+1
    rts
    // [227] phi from get_vic_screen::@3 to get_vic_screen::@return [phi:get_vic_screen::@3->get_vic_screen::@return]
  __b3:
    // [227] phi (byte*) get_vic_screen::return#5 = (const nomodify byte*) VIC_SCREEN2 [phi:get_vic_screen::@3->get_vic_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN2
    sta.z return
    lda #>VIC_SCREEN2
    sta.z return+1
    rts
    // [227] phi from get_vic_screen::@4 to get_vic_screen::@return [phi:get_vic_screen::@4->get_vic_screen::@return]
  __b4:
    // [227] phi (byte*) get_vic_screen::return#5 = (const nomodify byte*) VIC_SCREEN3 [phi:get_vic_screen::@4->get_vic_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN3
    sta.z return
    lda #>VIC_SCREEN3
    sta.z return+1
    // get_vic_screen::@return
    // }
    // [228] return 
    rts
}
  // get_vic_charset
// Get the VIC charset/bitmap address from the index
// get_vic_charset(byte register(A) idx)
get_vic_charset: {
    .label return = 7
    // if(idx==0)
    // [229] if((byte) get_vic_charset::idx#0==(byte) 0) goto get_vic_charset::@return -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b1
    // get_vic_charset::@2
    // if(idx==1)
    // [230] if((byte) get_vic_charset::idx#0!=(byte) 1) goto get_vic_charset::@1 -- vbuaa_neq_vbuc1_then_la1 
    cmp #1
    bne __b1
    // [232] phi from get_vic_charset::@2 to get_vic_charset::@return [phi:get_vic_charset::@2->get_vic_charset::@return]
    // [232] phi (byte*) get_vic_charset::return#2 = (const nomodify byte*) VIC_BITMAP [phi:get_vic_charset::@2->get_vic_charset::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_BITMAP
    sta.z return
    lda #>VIC_BITMAP
    sta.z return+1
    rts
    // [231] phi from get_vic_charset::@2 to get_vic_charset::@1 [phi:get_vic_charset::@2->get_vic_charset::@1]
    // get_vic_charset::@1
  __b1:
    // [232] phi from get_vic_charset get_vic_charset::@1 to get_vic_charset::@return [phi:get_vic_charset/get_vic_charset::@1->get_vic_charset::@return]
    // [232] phi (byte*) get_vic_charset::return#2 = (const nomodify byte*) VIC_CHARSET_ROM [phi:get_vic_charset/get_vic_charset::@1->get_vic_charset::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_CHARSET_ROM
    sta.z return
    lda #>VIC_CHARSET_ROM
    sta.z return+1
    // get_vic_charset::@return
    // }
    // [233] return 
    rts
}
  // get_plane
// Get plane address from a plane index (from the form)
// get_plane(byte register(A) idx)
get_plane: {
    .label return = 9
    // if(idx==0)
    // [235] if((byte) get_plane::idx#10==(byte) 0) goto get_plane::@return -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b1
    // get_plane::@2
    // if(idx==1)
    // [236] if((byte) get_plane::idx#10==(byte) 1) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #1
    bne !__b6+
    jmp __b6
  !__b6:
    // get_plane::@3
    // if(idx==2)
    // [237] if((byte) get_plane::idx#10==(byte) 2) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #2
    bne !__b7+
    jmp __b7
  !__b7:
    // get_plane::@4
    // if(idx==3)
    // [238] if((byte) get_plane::idx#10==(byte) 3) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #3
    bne !__b8+
    jmp __b8
  !__b8:
    // get_plane::@5
    // if(idx==4)
    // [239] if((byte) get_plane::idx#10==(byte) 4) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #4
    bne !__b9+
    jmp __b9
  !__b9:
    // get_plane::@6
    // if(idx==5)
    // [240] if((byte) get_plane::idx#10==(byte) 5) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #5
    bne !__b10+
    jmp __b10
  !__b10:
    // get_plane::@7
    // if(idx==6)
    // [241] if((byte) get_plane::idx#10==(byte) 6) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #6
    bne !__b11+
    jmp __b11
  !__b11:
    // get_plane::@8
    // if(idx==7)
    // [242] if((byte) get_plane::idx#10==(byte) 7) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #7
    bne !__b12+
    jmp __b12
  !__b12:
    // get_plane::@9
    // if(idx==8)
    // [243] if((byte) get_plane::idx#10==(byte) 8) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #8
    bne !__b13+
    jmp __b13
  !__b13:
    // get_plane::@10
    // if(idx==9)
    // [244] if((byte) get_plane::idx#10==(byte) 9) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #9
    beq __b2
    // get_plane::@11
    // if(idx==10)
    // [245] if((byte) get_plane::idx#10==(byte) $a) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #$a
    beq __b3
    // get_plane::@12
    // if(idx==11)
    // [246] if((byte) get_plane::idx#10==(byte) $b) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #$b
    beq __b4
    // get_plane::@13
    // if(idx==12)
    // [247] if((byte) get_plane::idx#10==(byte) $c) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #$c
    beq __b5
    // get_plane::@14
    // if(idx==13)
    // [248] if((byte) get_plane::idx#10!=(byte) $d) goto get_plane::@1 -- vbuaa_neq_vbuc1_then_la1 
    cmp #$d
    bne __b1
    // [250] phi from get_plane::@14 to get_plane::@return [phi:get_plane::@14->get_plane::@return]
    // [250] phi (dword) get_plane::return#14 = (const nomodify dword) PLANE_FULL [phi:get_plane::@14->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_FULL
    sta.z return
    lda #>PLANE_FULL
    sta.z return+1
    lda #<PLANE_FULL>>$10
    sta.z return+2
    lda #>PLANE_FULL>>$10
    sta.z return+3
    rts
    // [249] phi from get_plane::@14 to get_plane::@1 [phi:get_plane::@14->get_plane::@1]
    // get_plane::@1
  __b1:
    // [250] phi from get_plane get_plane::@1 to get_plane::@return [phi:get_plane/get_plane::@1->get_plane::@return]
    // [250] phi (dword) get_plane::return#14 = (dword)(const nomodify byte*) VIC_SCREEN0 [phi:get_plane/get_plane::@1->get_plane::@return#0] -- vduz1=vduc1 
    lda #<VIC_SCREEN0
    sta.z return
    lda #>VIC_SCREEN0
    sta.z return+1
    lda #<VIC_SCREEN0>>$10
    sta.z return+2
    lda #>VIC_SCREEN0>>$10
    sta.z return+3
    rts
    // [250] phi from get_plane::@10 to get_plane::@return [phi:get_plane::@10->get_plane::@return]
  __b2:
    // [250] phi (dword) get_plane::return#14 = (const nomodify dword) PLANE_HORISONTAL2 [phi:get_plane::@10->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_HORISONTAL2
    sta.z return
    lda #>PLANE_HORISONTAL2
    sta.z return+1
    lda #<PLANE_HORISONTAL2>>$10
    sta.z return+2
    lda #>PLANE_HORISONTAL2>>$10
    sta.z return+3
    rts
    // [250] phi from get_plane::@11 to get_plane::@return [phi:get_plane::@11->get_plane::@return]
  __b3:
    // [250] phi (dword) get_plane::return#14 = (const nomodify dword) PLANE_VERTICAL2 [phi:get_plane::@11->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_VERTICAL2
    sta.z return
    lda #>PLANE_VERTICAL2
    sta.z return+1
    lda #<PLANE_VERTICAL2>>$10
    sta.z return+2
    lda #>PLANE_VERTICAL2>>$10
    sta.z return+3
    rts
    // [250] phi from get_plane::@12 to get_plane::@return [phi:get_plane::@12->get_plane::@return]
  __b4:
    // [250] phi (dword) get_plane::return#14 = (const nomodify dword) PLANE_CHARSET8 [phi:get_plane::@12->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_CHARSET8
    sta.z return
    lda #>PLANE_CHARSET8
    sta.z return+1
    lda #<PLANE_CHARSET8>>$10
    sta.z return+2
    lda #>PLANE_CHARSET8>>$10
    sta.z return+3
    rts
    // [250] phi from get_plane::@13 to get_plane::@return [phi:get_plane::@13->get_plane::@return]
  __b5:
    // [250] phi (dword) get_plane::return#14 = (const nomodify dword) PLANE_BLANK [phi:get_plane::@13->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_BLANK
    sta.z return
    lda #>PLANE_BLANK
    sta.z return+1
    lda #<PLANE_BLANK>>$10
    sta.z return+2
    lda #>PLANE_BLANK>>$10
    sta.z return+3
    rts
    // [250] phi from get_plane::@2 to get_plane::@return [phi:get_plane::@2->get_plane::@return]
  __b6:
    // [250] phi (dword) get_plane::return#14 = (dword)(const nomodify byte*) VIC_SCREEN1 [phi:get_plane::@2->get_plane::@return#0] -- vduz1=vduc1 
    lda #<VIC_SCREEN1
    sta.z return
    lda #>VIC_SCREEN1
    sta.z return+1
    lda #<VIC_SCREEN1>>$10
    sta.z return+2
    lda #>VIC_SCREEN1>>$10
    sta.z return+3
    rts
    // [250] phi from get_plane::@3 to get_plane::@return [phi:get_plane::@3->get_plane::@return]
  __b7:
    // [250] phi (dword) get_plane::return#14 = (dword)(const nomodify byte*) VIC_SCREEN2 [phi:get_plane::@3->get_plane::@return#0] -- vduz1=vduc1 
    lda #<VIC_SCREEN2
    sta.z return
    lda #>VIC_SCREEN2
    sta.z return+1
    lda #<VIC_SCREEN2>>$10
    sta.z return+2
    lda #>VIC_SCREEN2>>$10
    sta.z return+3
    rts
    // [250] phi from get_plane::@4 to get_plane::@return [phi:get_plane::@4->get_plane::@return]
  __b8:
    // [250] phi (dword) get_plane::return#14 = (dword)(const nomodify byte*) VIC_SCREEN3 [phi:get_plane::@4->get_plane::@return#0] -- vduz1=vduc1 
    lda #<VIC_SCREEN3
    sta.z return
    lda #>VIC_SCREEN3
    sta.z return+1
    lda #<VIC_SCREEN3>>$10
    sta.z return+2
    lda #>VIC_SCREEN3>>$10
    sta.z return+3
    rts
    // [250] phi from get_plane::@5 to get_plane::@return [phi:get_plane::@5->get_plane::@return]
  __b9:
    // [250] phi (dword) get_plane::return#14 = (dword)(const nomodify byte*) VIC_BITMAP [phi:get_plane::@5->get_plane::@return#0] -- vduz1=vduc1 
    lda #<VIC_BITMAP
    sta.z return
    lda #>VIC_BITMAP
    sta.z return+1
    lda #<VIC_BITMAP>>$10
    sta.z return+2
    lda #>VIC_BITMAP>>$10
    sta.z return+3
    rts
    // [250] phi from get_plane::@6 to get_plane::@return [phi:get_plane::@6->get_plane::@return]
  __b10:
    // [250] phi (dword) get_plane::return#14 = (dword)(const nomodify byte*) VIC_CHARSET_ROM [phi:get_plane::@6->get_plane::@return#0] -- vduz1=vduc1 
    lda #<VIC_CHARSET_ROM
    sta.z return
    lda #>VIC_CHARSET_ROM
    sta.z return+1
    lda #<VIC_CHARSET_ROM>>$10
    sta.z return+2
    lda #>VIC_CHARSET_ROM>>$10
    sta.z return+3
    rts
    // [250] phi from get_plane::@7 to get_plane::@return [phi:get_plane::@7->get_plane::@return]
  __b11:
    // [250] phi (dword) get_plane::return#14 = (const nomodify dword) PLANE_8BPP_CHUNKY [phi:get_plane::@7->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_8BPP_CHUNKY
    sta.z return
    lda #>PLANE_8BPP_CHUNKY
    sta.z return+1
    lda #<PLANE_8BPP_CHUNKY>>$10
    sta.z return+2
    lda #>PLANE_8BPP_CHUNKY>>$10
    sta.z return+3
    rts
    // [250] phi from get_plane::@8 to get_plane::@return [phi:get_plane::@8->get_plane::@return]
  __b12:
    // [250] phi (dword) get_plane::return#14 = (const nomodify dword) PLANE_HORISONTAL [phi:get_plane::@8->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_HORISONTAL
    sta.z return
    lda #>PLANE_HORISONTAL
    sta.z return+1
    lda #<PLANE_HORISONTAL>>$10
    sta.z return+2
    lda #>PLANE_HORISONTAL>>$10
    sta.z return+3
    rts
    // [250] phi from get_plane::@9 to get_plane::@return [phi:get_plane::@9->get_plane::@return]
  __b13:
    // [250] phi (dword) get_plane::return#14 = (const nomodify dword) PLANE_VERTICAL [phi:get_plane::@9->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_VERTICAL
    sta.z return
    lda #>PLANE_VERTICAL
    sta.z return+1
    lda #<PLANE_VERTICAL>>$10
    sta.z return+2
    lda #>PLANE_VERTICAL>>$10
    sta.z return+3
    // get_plane::@return
    // }
    // [251] return 
    rts
}
  // form_mode
// Show the form - and let the user change values
form_mode: {
    .label preset_current = $d
    // print_set_screen(COLS)
    // [253] call print_set_screen 
  // Form Colors
    // [450] phi from form_mode to print_set_screen [phi:form_mode->print_set_screen]
    // [450] phi (byte*) print_set_screen::screen#2 = (const nomodify byte*) COLS [phi:form_mode->print_set_screen#0] -- pbuz1=pbuc1 
    lda #<COLS
    sta.z print_set_screen.screen
    lda #>COLS
    sta.z print_set_screen.screen+1
    jsr print_set_screen
    // [254] phi from form_mode to form_mode::@8 [phi:form_mode->form_mode::@8]
    // form_mode::@8
    // print_cls()
    // [255] call print_cls 
    jsr print_cls
    // [256] phi from form_mode::@8 to form_mode::@9 [phi:form_mode::@8->form_mode::@9]
    // form_mode::@9
    // print_str_lines(FORM_COLS)
    // [257] call print_str_lines 
    // [415] phi from form_mode::@9 to print_str_lines [phi:form_mode::@9->print_str_lines]
    // [415] phi (byte*) print_str_lines::str#5 = (const byte*) FORM_COLS [phi:form_mode::@9->print_str_lines#0] -- pbuz1=pbuc1 
    lda #<FORM_COLS
    sta.z print_str_lines.str
    lda #>FORM_COLS
    sta.z print_str_lines.str+1
    jsr print_str_lines
    // [258] phi from form_mode::@9 to form_mode::@10 [phi:form_mode::@9->form_mode::@10]
    // form_mode::@10
    // print_set_screen(FORM_SCREEN)
    // [259] call print_set_screen 
  // Form Text
    // [450] phi from form_mode::@10 to print_set_screen [phi:form_mode::@10->print_set_screen]
    // [450] phi (byte*) print_set_screen::screen#2 = (const nomodify byte*) FORM_SCREEN [phi:form_mode::@10->print_set_screen#0] -- pbuz1=pbuc1 
    lda #<FORM_SCREEN
    sta.z print_set_screen.screen
    lda #>FORM_SCREEN
    sta.z print_set_screen.screen+1
    jsr print_set_screen
    // [260] phi from form_mode::@10 to form_mode::@11 [phi:form_mode::@10->form_mode::@11]
    // form_mode::@11
    // print_cls()
    // [261] call print_cls 
    jsr print_cls
    // [262] phi from form_mode::@11 to form_mode::@12 [phi:form_mode::@11->form_mode::@12]
    // form_mode::@12
    // print_str_lines(FORM_TEXT)
    // [263] call print_str_lines 
    // [415] phi from form_mode::@12 to print_str_lines [phi:form_mode::@12->print_str_lines]
    // [415] phi (byte*) print_str_lines::str#5 = (const byte*) FORM_TEXT [phi:form_mode::@12->print_str_lines#0] -- pbuz1=pbuc1 
    lda #<FORM_TEXT
    sta.z print_str_lines.str
    lda #>FORM_TEXT
    sta.z print_str_lines.str+1
    jsr print_str_lines
    // [264] phi from form_mode::@12 to form_mode::@13 [phi:form_mode::@12->form_mode::@13]
    // form_mode::@13
    // form_set_screen(FORM_SCREEN)
    // [265] call form_set_screen 
  // Form Fields
    // [405] phi from form_mode::@13 to form_set_screen [phi:form_mode::@13->form_set_screen]
    jsr form_set_screen
    // [266] phi from form_mode::@13 to form_mode::@14 [phi:form_mode::@13->form_mode::@14]
    // form_mode::@14
    // form_render_values()
    // [267] call form_render_values 
    // [328] phi from form_mode::@14 to form_render_values [phi:form_mode::@14->form_render_values]
    jsr form_render_values
    // form_mode::@15
    // render_preset_name(*form_preset)
    // [268] (byte) render_preset_name::idx#0 ← *((const byte*) form_fields_val) -- vbuaa=_deref_pbuc1 
    lda form_fields_val
    // [269] call render_preset_name 
    // [304] phi from form_mode::@15 to render_preset_name [phi:form_mode::@15->render_preset_name]
    // [304] phi (byte) render_preset_name::idx#10 = (byte) render_preset_name::idx#0 [phi:form_mode::@15->render_preset_name#0] -- register_copy 
    jsr render_preset_name
    // form_mode::@16
    // *DTV_GRAPHICS_VIC_BANK = (byte)((dword)FORM_CHARSET/$10000)
    // [270] *((const nomodify byte*) DTV_GRAPHICS_VIC_BANK) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // DTV Graphics Bank
    lda #0
    sta DTV_GRAPHICS_VIC_BANK
    // *DTV_COLOR_BANK_LO = <((word)(DTV_COLOR_BANK_DEFAULT/$400))
    // [271] *((const nomodify byte*) DTV_COLOR_BANK_LO) ← <(word)(const nomodify dword) DTV_COLOR_BANK_DEFAULT/(word) $400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #<DTV_COLOR_BANK_DEFAULT/$400
    sta DTV_COLOR_BANK_LO
    // *DTV_COLOR_BANK_HI = >((word)(DTV_COLOR_BANK_DEFAULT/$400))
    // [272] *((const nomodify byte*) DTV_COLOR_BANK_HI) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_COLOR_BANK_HI
    // CIA2->PORT_A_DDR = %00000011
    // [273] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) ← (byte) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR
    // CIA2->PORT_A = %00000011 ^ (byte)((word)FORM_CHARSET/$4000)
    // [274] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2) ← (byte) 3 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    sta CIA2
    // *DTV_CONTROL = 0
    // [275] *((const nomodify byte*) DTV_CONTROL) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank
    // DTV Graphics Mode
    lda #0
    sta DTV_CONTROL
    // VICII->CONTROL1 = VIC_DEN|VIC_RSEL|3
    // [276] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1) ← (const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(byte) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Mode
    lda #VIC_DEN|VIC_RSEL|3
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1
    // VICII->CONTROL2 = VIC_CSEL
    // [277] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL2) ← (const nomodify byte) VIC_CSEL -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL2
    // VICII->MEMORY =  (byte)((((word)FORM_SCREEN&$3fff)/$40)|(((word)FORM_CHARSET&$3fff)/$400))
    // [278] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_MEMORY) ← (byte)(word)(const nomodify byte*) FORM_SCREEN&(word) $3fff/(byte) $40|(word)(const nomodify byte*) FORM_CHARSET&(word) $3fff/(word) $400 -- _deref_pbuc1=vbuc2 
    // VIC Memory Pointers
    lda #(FORM_SCREEN&$3fff)/$40|(FORM_CHARSET&$3fff)/$400
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY
    // *DTV_PLANEA_START_LO = < FORM_SCREEN
    // [279] *((const nomodify byte*) DTV_PLANEA_START_LO) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // DTV Plane A to FORM_SCREEN also
    lda #0
    sta DTV_PLANEA_START_LO
    // *DTV_PLANEA_START_MI = > FORM_SCREEN
    // [280] *((const nomodify byte*) DTV_PLANEA_START_MI) ← >(const nomodify byte*) FORM_SCREEN -- _deref_pbuc1=vbuc2 
    lda #>FORM_SCREEN
    sta DTV_PLANEA_START_MI
    // *DTV_PLANEA_START_HI = 0
    // [281] *((const nomodify byte*) DTV_PLANEA_START_HI) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_START_HI
    // [282] phi from form_mode::@16 to form_mode::@1 [phi:form_mode::@16->form_mode::@1]
    // [282] phi (byte) form_mode::i#2 = (byte) 0 [phi:form_mode::@16->form_mode::@1#0] -- vbuxx=vbuc1 
    tax
  // DTV Palette - default
    // [282] phi from form_mode::@1 to form_mode::@1 [phi:form_mode::@1->form_mode::@1]
    // [282] phi (byte) form_mode::i#2 = (byte) form_mode::i#1 [phi:form_mode::@1->form_mode::@1#0] -- register_copy 
    // form_mode::@1
  __b1:
    // DTV_PALETTE[i] = DTV_PALETTE_DEFAULT[i]
    // [283] *((const nomodify byte*) DTV_PALETTE + (byte) form_mode::i#2) ← *((const byte*) DTV_PALETTE_DEFAULT + (byte) form_mode::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda DTV_PALETTE_DEFAULT,x
    sta DTV_PALETTE,x
    // for(byte i : 0..$f)
    // [284] (byte) form_mode::i#1 ← ++ (byte) form_mode::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [285] if((byte) form_mode::i#1!=(byte) $10) goto form_mode::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1
    // form_mode::@2
    // VICII->BG_COLOR = 0
    // [286] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR
    // VICII->BORDER_COLOR = 0
    // [287] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // preset_current = *form_preset
    // [288] (byte) form_mode::preset_current#0 ← *((const byte*) form_fields_val) -- vbuz1=_deref_pbuc1 
    lda form_fields_val
    sta.z preset_current
    // [289] phi from form_mode::@19 form_mode::@2 form_mode::@6 to form_mode::@3 [phi:form_mode::@19/form_mode::@2/form_mode::@6->form_mode::@3]
  __b2:
    // [289] phi (byte) form_mode::preset_current#6 = (byte) form_mode::preset_current#1 [phi:form_mode::@19/form_mode::@2/form_mode::@6->form_mode::@3#0] -- register_copy 
    // [289] phi (byte) form_field_idx#28 = (byte) form_field_idx#18 [phi:form_mode::@19/form_mode::@2/form_mode::@6->form_mode::@3#1] -- register_copy 
    // [289] phi (byte) keyboard_events_size#47 = (byte) keyboard_events_size#24 [phi:form_mode::@19/form_mode::@2/form_mode::@6->form_mode::@3#2] -- register_copy 
    // [289] phi (signed byte) form_cursor_count#21 = (signed byte) form_cursor_count#16 [phi:form_mode::@19/form_mode::@2/form_mode::@6->form_mode::@3#3] -- register_copy 
  // Let the user change values in the form
    // form_mode::@3
    // form_mode::@4
  __b4:
    // while(VICII->RASTER!=$ff)
    // [290] if(*((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)!=(byte) $ff) goto form_mode::@4 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    bne __b4
    // [291] phi from form_mode::@4 to form_mode::@5 [phi:form_mode::@4->form_mode::@5]
    // form_mode::@5
    // form_control()
    // [292] call form_control 
    jsr form_control
    // [293] (byte) form_control::return#0 ← (byte) form_control::return#2 -- vbuaa=vbuxx 
    txa
    // form_mode::@17
    // [294] (byte~) form_mode::$11 ← (byte) form_control::return#0
    // if(form_control()!=0)
    // [295] if((byte~) form_mode::$11==(byte) 0) goto form_mode::@6 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b6
    // form_mode::@return
    // }
    // [296] return 
    rts
    // form_mode::@6
  __b6:
    // if(preset_current!=*form_preset)
    // [297] if((byte) form_mode::preset_current#6==*((const byte*) form_fields_val)) goto form_mode::@3 -- vbuz1_eq__deref_pbuc1_then_la1 
    lda form_fields_val
    cmp.z preset_current
    beq __b2
    // form_mode::@7
    // apply_preset(*form_preset)
    // [298] (byte) apply_preset::idx#0 ← *((const byte*) form_fields_val) -- vbuaa=_deref_pbuc1 
    // [299] call apply_preset 
    // Preset changed - update field values and render
    jsr apply_preset
    // form_mode::@18
    // preset_current = *form_preset
    // [300] (byte) form_mode::preset_current#1 ← *((const byte*) form_fields_val) -- vbuz1=_deref_pbuc1 
    lda form_fields_val
    sta.z preset_current
    // form_render_values()
    // [301] call form_render_values 
    // [328] phi from form_mode::@18 to form_render_values [phi:form_mode::@18->form_render_values]
    jsr form_render_values
    // form_mode::@19
    // render_preset_name(*form_preset)
    // [302] (byte) render_preset_name::idx#1 ← *((const byte*) form_fields_val) -- vbuaa=_deref_pbuc1 
    lda form_fields_val
    // [303] call render_preset_name 
    // [304] phi from form_mode::@19 to render_preset_name [phi:form_mode::@19->render_preset_name]
    // [304] phi (byte) render_preset_name::idx#10 = (byte) render_preset_name::idx#1 [phi:form_mode::@19->render_preset_name#0] -- register_copy 
    jsr render_preset_name
    jmp __b2
}
  // render_preset_name
// Render form preset name in the form
// idx is the ID of the preset
// render_preset_name(byte register(A) idx)
render_preset_name: {
    .label name = $10
    // if(idx==0)
    // [305] if((byte) render_preset_name::idx#10==(byte) 0) goto render_preset_name::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3
    // render_preset_name::@3
    // if(idx==1)
    // [306] if((byte) render_preset_name::idx#10==(byte) 1) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #1
    beq __b6
    // render_preset_name::@4
    // if(idx==2)
    // [307] if((byte) render_preset_name::idx#10==(byte) 2) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #2
    beq __b7
    // render_preset_name::@5
    // if(idx==3)
    // [308] if((byte) render_preset_name::idx#10==(byte) 3) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #3
    beq __b8
    // render_preset_name::@6
    // if(idx==4)
    // [309] if((byte) render_preset_name::idx#10==(byte) 4) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #4
    beq __b9
    // render_preset_name::@7
    // if(idx==5)
    // [310] if((byte) render_preset_name::idx#10==(byte) 5) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #5
    beq __b10
    // render_preset_name::@8
    // if(idx==6)
    // [311] if((byte) render_preset_name::idx#10==(byte) 6) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #6
    beq __b11
    // render_preset_name::@9
    // if(idx==7)
    // [312] if((byte) render_preset_name::idx#10==(byte) 7) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #7
    beq __b12
    // render_preset_name::@10
    // if(idx==8)
    // [313] if((byte) render_preset_name::idx#10==(byte) 8) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #8
    beq __b4
    // render_preset_name::@11
    // if(idx==9)
    // [314] if((byte) render_preset_name::idx#10==(byte) 9) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #9
    beq __b5
    // render_preset_name::@12
    // if(idx==10)
    // [315] if((byte) render_preset_name::idx#10==(byte) $a) goto render_preset_name::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #$a
    beq __b1
    // [317] phi from render_preset_name render_preset_name::@12 to render_preset_name::@2 [phi:render_preset_name/render_preset_name::@12->render_preset_name::@2]
  __b3:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#1 [phi:render_preset_name/render_preset_name::@12->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_1
    sta.z name
    lda #>name_1
    sta.z name+1
    jmp __b2
    // [316] phi from render_preset_name::@12 to render_preset_name::@1 [phi:render_preset_name::@12->render_preset_name::@1]
    // render_preset_name::@1
  __b1:
    // [317] phi from render_preset_name::@1 to render_preset_name::@2 [phi:render_preset_name::@1->render_preset_name::@2]
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#11 [phi:render_preset_name::@1->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_11
    sta.z name
    lda #>name_11
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@10 to render_preset_name::@2 [phi:render_preset_name::@10->render_preset_name::@2]
  __b4:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#9 [phi:render_preset_name::@10->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_9
    sta.z name
    lda #>name_9
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@11 to render_preset_name::@2 [phi:render_preset_name::@11->render_preset_name::@2]
  __b5:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#10 [phi:render_preset_name::@11->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_10
    sta.z name
    lda #>name_10
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@3 to render_preset_name::@2 [phi:render_preset_name::@3->render_preset_name::@2]
  __b6:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#2 [phi:render_preset_name::@3->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_2
    sta.z name
    lda #>name_2
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@4 to render_preset_name::@2 [phi:render_preset_name::@4->render_preset_name::@2]
  __b7:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#3 [phi:render_preset_name::@4->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_3
    sta.z name
    lda #>name_3
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@5 to render_preset_name::@2 [phi:render_preset_name::@5->render_preset_name::@2]
  __b8:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#4 [phi:render_preset_name::@5->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_4
    sta.z name
    lda #>name_4
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@6 to render_preset_name::@2 [phi:render_preset_name::@6->render_preset_name::@2]
  __b9:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#5 [phi:render_preset_name::@6->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_5
    sta.z name
    lda #>name_5
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@7 to render_preset_name::@2 [phi:render_preset_name::@7->render_preset_name::@2]
  __b10:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#6 [phi:render_preset_name::@7->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_6
    sta.z name
    lda #>name_6
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@8 to render_preset_name::@2 [phi:render_preset_name::@8->render_preset_name::@2]
  __b11:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#7 [phi:render_preset_name::@8->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_7
    sta.z name
    lda #>name_7
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@9 to render_preset_name::@2 [phi:render_preset_name::@9->render_preset_name::@2]
  __b12:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#8 [phi:render_preset_name::@9->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_8
    sta.z name
    lda #>name_8
    sta.z name+1
    // render_preset_name::@2
  __b2:
    // print_str_at(name, FORM_SCREEN+40*2+10)
    // [318] (byte*) print_str_at::str#1 ← (byte*) render_preset_name::name#13
    // [319] call print_str_at 
  // Render it
    // [321] phi from render_preset_name::@2 to print_str_at [phi:render_preset_name::@2->print_str_at]
    jsr print_str_at
    // render_preset_name::@return
    // }
    // [320] return 
    rts
    name_1: .text "Standard Charset              "
    .byte 0
    name_2: .text "Extended Color Charset        "
    .byte 0
    name_3: .text "Standard Bitmap               "
    .byte 0
    name_4: .text "Multicolor Bitmap             "
    .byte 0
    name_5: .text "Hicolor Charset               "
    .byte 0
    name_6: .text "Hicolor Extended Color Charset"
    .byte 0
    name_7: .text "Twoplane Bitmap               "
    .byte 0
    name_8: .text "Chunky 8bpp                   "
    .byte 0
    name_9: .text "Sixs Fred                     "
    .byte 0
    name_10: .text "Sixs Fred 2                   "
    .byte 0
    name_11: .text "8bpp Pixel Cell               "
    .byte 0
}
  // print_str_at
// Print a string at a specific screen position
// print_str_at(byte* zp($10) str, byte* zp(5) at)
print_str_at: {
    .label at = 5
    .label str = $10
    // [322] phi from print_str_at to print_str_at::@1 [phi:print_str_at->print_str_at::@1]
    // [322] phi (byte*) print_str_at::at#2 = (const nomodify byte*) FORM_SCREEN+(byte)(number) $28*(number) 2+(byte) $a [phi:print_str_at->print_str_at::@1#0] -- pbuz1=pbuc1 
    lda #<FORM_SCREEN+$28*2+$a
    sta.z at
    lda #>FORM_SCREEN+$28*2+$a
    sta.z at+1
    // [322] phi (byte*) print_str_at::str#2 = (byte*) print_str_at::str#1 [phi:print_str_at->print_str_at::@1#1] -- register_copy 
    // print_str_at::@1
  __b1:
    // while(*str)
    // [323] if((byte) 0!=*((byte*) print_str_at::str#2)) goto print_str_at::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    // print_str_at::@return
    // }
    // [324] return 
    rts
    // print_str_at::@2
  __b2:
    // *(at++) = *(str++)
    // [325] *((byte*) print_str_at::at#2) ← *((byte*) print_str_at::str#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    sta (at),y
    // *(at++) = *(str++);
    // [326] (byte*) print_str_at::at#0 ← ++ (byte*) print_str_at::at#2 -- pbuz1=_inc_pbuz1 
    inc.z at
    bne !+
    inc.z at+1
  !:
    // [327] (byte*) print_str_at::str#0 ← ++ (byte*) print_str_at::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [322] phi from print_str_at::@2 to print_str_at::@1 [phi:print_str_at::@2->print_str_at::@1]
    // [322] phi (byte*) print_str_at::at#2 = (byte*) print_str_at::at#0 [phi:print_str_at::@2->print_str_at::@1#0] -- register_copy 
    // [322] phi (byte*) print_str_at::str#2 = (byte*) print_str_at::str#0 [phi:print_str_at::@2->print_str_at::@1#1] -- register_copy 
    jmp __b1
}
  // form_render_values
// Render all form values from the form_fields_val array
form_render_values: {
    // [329] phi from form_render_values to form_render_values::@1 [phi:form_render_values->form_render_values::@1]
    // [329] phi (byte) form_render_values::idx#2 = (byte) 0 [phi:form_render_values->form_render_values::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // form_render_values::@1
  __b1:
    // for( byte idx=0; idx<form_fields_cnt; idx++)
    // [330] if((byte) form_render_values::idx#2<(const byte) form_fields_cnt) goto form_render_values::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #form_fields_cnt
    bcc __b2
    // form_render_values::@return
    // }
    // [331] return 
    rts
    // form_render_values::@2
  __b2:
    // form_field_ptr(idx)
    // [332] (byte) form_field_ptr::field_idx#0 ← (byte) form_render_values::idx#2
    // [333] call form_field_ptr 
    // [336] phi from form_render_values::@2 to form_field_ptr [phi:form_render_values::@2->form_field_ptr]
    // [336] phi (byte) form_field_ptr::field_idx#2 = (byte) form_field_ptr::field_idx#0 [phi:form_render_values::@2->form_field_ptr#0] -- register_copy 
    jsr form_field_ptr
    // form_render_values::@3
    // *field = print_hextab[form_fields_val[idx]]
    // [334] *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) ← *((const to_nomodify byte*) print_hextab + *((const byte*) form_fields_val + (byte) form_render_values::idx#2)) -- pbuz1_derefidx_vbuz2=pbuc1_derefidx_(pbuc2_derefidx_vbuxx) 
    ldy form_fields_val,x
    lda print_hextab,y
    ldy.z form_field_ptr.x
    sta (form_field_ptr.line),y
    // for( byte idx=0; idx<form_fields_cnt; idx++)
    // [335] (byte) form_render_values::idx#1 ← ++ (byte) form_render_values::idx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [329] phi from form_render_values::@3 to form_render_values::@1 [phi:form_render_values::@3->form_render_values::@1]
    // [329] phi (byte) form_render_values::idx#2 = (byte) form_render_values::idx#1 [phi:form_render_values::@3->form_render_values::@1#0] -- register_copy 
    jmp __b1
}
  // form_field_ptr
// Get the screen address of a form field
// field_idx is the index of the field to get the screen address for
// form_field_ptr(byte register(X) field_idx)
form_field_ptr: {
    .label line = $14
    .label x = $16
    .label return = $1d
    // y = form_fields_y[field_idx]
    // [337] (byte) form_field_ptr::y#0 ← *((const byte*) form_fields_y + (byte) form_field_ptr::field_idx#2) -- vbuyy=pbuc1_derefidx_vbuxx 
    ldy form_fields_y,x
    // line = (byte*) { form_line_hi[y], form_line_lo[y] }
    // [338] (word) form_field_ptr::line#0 ← *((const byte*) form_line_hi + (byte) form_field_ptr::y#0) w= *((const byte*) form_line_lo + (byte) form_field_ptr::y#0) -- vwuz1=pbuc1_derefidx_vbuyy_word_pbuc2_derefidx_vbuyy 
    lda form_line_hi,y
    sta.z line+1
    lda form_line_lo,y
    sta.z line
    // x = form_fields_x[field_idx]
    // [339] (byte) form_field_ptr::x#0 ← *((const byte*) form_fields_x + (byte) form_field_ptr::field_idx#2) -- vbuz1=pbuc1_derefidx_vbuxx 
    lda form_fields_x,x
    sta.z x
    // line+x
    // [340] (byte*) form_field_ptr::return#0 ← (byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0 -- pbuz1=pbuz2_plus_vbuz3 
    clc
    adc.z line
    sta.z return
    lda #0
    adc.z line+1
    sta.z return+1
    // form_field_ptr::@return
    // }
    // [341] return 
    rts
}
  // apply_preset
// Apply a form value preset to the form values
// idx is the ID of the preset
// apply_preset(byte register(A) idx)
apply_preset: {
    .label preset = 7
    // if(idx==0)
    // [342] if((byte) apply_preset::idx#0==(byte) 0) goto apply_preset::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3
    // apply_preset::@3
    // if(idx==1)
    // [343] if((byte) apply_preset::idx#0==(byte) 1) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #1
    beq __b6
    // apply_preset::@4
    // if(idx==2)
    // [344] if((byte) apply_preset::idx#0==(byte) 2) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #2
    beq __b7
    // apply_preset::@5
    // if(idx==3)
    // [345] if((byte) apply_preset::idx#0==(byte) 3) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #3
    beq __b8
    // apply_preset::@6
    // if(idx==4)
    // [346] if((byte) apply_preset::idx#0==(byte) 4) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #4
    beq __b9
    // apply_preset::@7
    // if(idx==5)
    // [347] if((byte) apply_preset::idx#0==(byte) 5) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #5
    beq __b10
    // apply_preset::@8
    // if(idx==6)
    // [348] if((byte) apply_preset::idx#0==(byte) 6) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #6
    beq __b11
    // apply_preset::@9
    // if(idx==7)
    // [349] if((byte) apply_preset::idx#0==(byte) 7) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #7
    beq __b12
    // apply_preset::@10
    // if(idx==8)
    // [350] if((byte) apply_preset::idx#0==(byte) 8) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #8
    beq __b4
    // apply_preset::@11
    // if(idx==9)
    // [351] if((byte) apply_preset::idx#0==(byte) 9) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #9
    beq __b5
    // apply_preset::@12
    // if(idx==10)
    // [352] if((byte) apply_preset::idx#0==(byte) $a) goto apply_preset::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #$a
    beq __b1
    // [354] phi from apply_preset apply_preset::@12 to apply_preset::@2 [phi:apply_preset/apply_preset::@12->apply_preset::@2]
  __b3:
    // [354] phi (byte*) apply_preset::preset#15 = (const byte*) preset_stdchar [phi:apply_preset/apply_preset::@12->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_stdchar
    sta.z preset
    lda #>preset_stdchar
    sta.z preset+1
    jmp __b2
    // [353] phi from apply_preset::@12 to apply_preset::@1 [phi:apply_preset::@12->apply_preset::@1]
    // apply_preset::@1
  __b1:
    // [354] phi from apply_preset::@1 to apply_preset::@2 [phi:apply_preset::@1->apply_preset::@2]
    // [354] phi (byte*) apply_preset::preset#15 = (const byte*) preset_8bpppixelcell [phi:apply_preset::@1->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_8bpppixelcell
    sta.z preset
    lda #>preset_8bpppixelcell
    sta.z preset+1
    jmp __b2
    // [354] phi from apply_preset::@10 to apply_preset::@2 [phi:apply_preset::@10->apply_preset::@2]
  __b4:
    // [354] phi (byte*) apply_preset::preset#15 = (const byte*) preset_sixsfred [phi:apply_preset::@10->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_sixsfred
    sta.z preset
    lda #>preset_sixsfred
    sta.z preset+1
    jmp __b2
    // [354] phi from apply_preset::@11 to apply_preset::@2 [phi:apply_preset::@11->apply_preset::@2]
  __b5:
    // [354] phi (byte*) apply_preset::preset#15 = (const byte*) preset_sixsfred2 [phi:apply_preset::@11->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_sixsfred2
    sta.z preset
    lda #>preset_sixsfred2
    sta.z preset+1
    jmp __b2
    // [354] phi from apply_preset::@3 to apply_preset::@2 [phi:apply_preset::@3->apply_preset::@2]
  __b6:
    // [354] phi (byte*) apply_preset::preset#15 = (const byte*) preset_ecmchar [phi:apply_preset::@3->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_ecmchar
    sta.z preset
    lda #>preset_ecmchar
    sta.z preset+1
    jmp __b2
    // [354] phi from apply_preset::@4 to apply_preset::@2 [phi:apply_preset::@4->apply_preset::@2]
  __b7:
    // [354] phi (byte*) apply_preset::preset#15 = (const byte*) preset_stdbm [phi:apply_preset::@4->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_stdbm
    sta.z preset
    lda #>preset_stdbm
    sta.z preset+1
    jmp __b2
    // [354] phi from apply_preset::@5 to apply_preset::@2 [phi:apply_preset::@5->apply_preset::@2]
  __b8:
    // [354] phi (byte*) apply_preset::preset#15 = (const byte*) preset_mcbm [phi:apply_preset::@5->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_mcbm
    sta.z preset
    lda #>preset_mcbm
    sta.z preset+1
    jmp __b2
    // [354] phi from apply_preset::@6 to apply_preset::@2 [phi:apply_preset::@6->apply_preset::@2]
  __b9:
    // [354] phi (byte*) apply_preset::preset#15 = (const byte*) preset_hi_stdchar [phi:apply_preset::@6->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_hi_stdchar
    sta.z preset
    lda #>preset_hi_stdchar
    sta.z preset+1
    jmp __b2
    // [354] phi from apply_preset::@7 to apply_preset::@2 [phi:apply_preset::@7->apply_preset::@2]
  __b10:
    // [354] phi (byte*) apply_preset::preset#15 = (const byte*) preset_hi_ecmchar [phi:apply_preset::@7->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_hi_ecmchar
    sta.z preset
    lda #>preset_hi_ecmchar
    sta.z preset+1
    jmp __b2
    // [354] phi from apply_preset::@8 to apply_preset::@2 [phi:apply_preset::@8->apply_preset::@2]
  __b11:
    // [354] phi (byte*) apply_preset::preset#15 = (const byte*) preset_twoplane [phi:apply_preset::@8->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_twoplane
    sta.z preset
    lda #>preset_twoplane
    sta.z preset+1
    jmp __b2
    // [354] phi from apply_preset::@9 to apply_preset::@2 [phi:apply_preset::@9->apply_preset::@2]
  __b12:
    // [354] phi (byte*) apply_preset::preset#15 = (const byte*) preset_chunky [phi:apply_preset::@9->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_chunky
    sta.z preset
    lda #>preset_chunky
    sta.z preset+1
    // apply_preset::@2
  __b2:
    // [355] phi from apply_preset::@2 to apply_preset::@13 [phi:apply_preset::@2->apply_preset::@13]
    // [355] phi (byte) apply_preset::i#2 = (byte) 0 [phi:apply_preset::@2->apply_preset::@13#0] -- vbuyy=vbuc1 
    ldy #0
  // Copy preset values into the fields
    // apply_preset::@13
  __b13:
    // for( byte i=0; i != form_fields_cnt; i++)
    // [356] if((byte) apply_preset::i#2!=(const byte) form_fields_cnt) goto apply_preset::@14 -- vbuyy_neq_vbuc1_then_la1 
    cpy #form_fields_cnt
    bne __b14
    // apply_preset::@return
    // }
    // [357] return 
    rts
    // apply_preset::@14
  __b14:
    // form_fields_val[i] = preset[i]
    // [358] *((const byte*) form_fields_val + (byte) apply_preset::i#2) ← *((byte*) apply_preset::preset#15 + (byte) apply_preset::i#2) -- pbuc1_derefidx_vbuyy=pbuz1_derefidx_vbuyy 
    lda (preset),y
    sta form_fields_val,y
    // for( byte i=0; i != form_fields_cnt; i++)
    // [359] (byte) apply_preset::i#1 ← ++ (byte) apply_preset::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [355] phi from apply_preset::@14 to apply_preset::@13 [phi:apply_preset::@14->apply_preset::@13]
    // [355] phi (byte) apply_preset::i#2 = (byte) apply_preset::i#1 [phi:apply_preset::@14->apply_preset::@13#0] -- register_copy 
    jmp __b13
}
  // form_control
// Reads keyboard and allows the user to navigate and change the fields of the form
// Returns 0 if space is not pressed, non-0 if space is pressed
form_control: {
    .label field = $1d
    // form_field_ptr(form_field_idx)
    // [360] (byte) form_field_ptr::field_idx#1 ← (byte) form_field_idx#28 -- vbuxx=vbuz1 
    ldx.z form_field_idx
    // [361] call form_field_ptr 
    // [336] phi from form_control to form_field_ptr [phi:form_control->form_field_ptr]
    // [336] phi (byte) form_field_ptr::field_idx#2 = (byte) form_field_ptr::field_idx#1 [phi:form_control->form_field_ptr#0] -- register_copy 
    jsr form_field_ptr
    // form_field_ptr(form_field_idx)
    // [362] (byte*) form_field_ptr::return#3 ← (byte*) form_field_ptr::return#0
    // form_control::@18
    // field = form_field_ptr(form_field_idx)
    // [363] (byte*) form_control::field#0 ← (byte*) form_field_ptr::return#3
    // if(--form_cursor_count < 0)
    // [364] (signed byte) form_cursor_count#5 ← -- (signed byte) form_cursor_count#21 -- vbsz1=_dec_vbsz1 
    dec.z form_cursor_count
    // [365] if((signed byte) form_cursor_count#5>=(signed byte) 0) goto form_control::@21 -- vbsz1_ge_0_then_la1 
    lda.z form_cursor_count
    cmp #0
    bpl __b1
    // [367] phi from form_control::@18 to form_control::@1 [phi:form_control::@18->form_control::@1]
    // [367] phi (signed byte) form_cursor_count#15 = (const nomodify signed byte) FORM_CURSOR_BLINK [phi:form_control::@18->form_control::@1#0] -- vbsz1=vbsc1 
    lda #FORM_CURSOR_BLINK
    sta.z form_cursor_count
    // [366] phi from form_control::@18 to form_control::@21 [phi:form_control::@18->form_control::@21]
    // form_control::@21
    // [367] phi from form_control::@21 to form_control::@1 [phi:form_control::@21->form_control::@1]
    // [367] phi (signed byte) form_cursor_count#15 = (signed byte) form_cursor_count#5 [phi:form_control::@21->form_control::@1#0] -- register_copy 
    // form_control::@1
  __b1:
    // if(form_cursor_count<FORM_CURSOR_BLINK/2)
    // [368] if((signed byte) form_cursor_count#15<(const nomodify signed byte) FORM_CURSOR_BLINK/(signed byte) 2) goto form_control::@2 -- vbsz1_lt_vbsc1_then_la1 
    lda.z form_cursor_count
    sec
    sbc #FORM_CURSOR_BLINK/2
    bvc !+
    eor #$80
  !:
    bpl !__b2+
    jmp __b2
  !__b2:
    // form_control::@7
    // *field & $7f
    // [369] (byte~) form_control::$12 ← *((byte*) form_control::field#0) & (byte) $7f -- vbuaa=_deref_pbuz1_band_vbuc1 
    lda #$7f
    ldy #0
    and (field),y
    // *field = *field & $7f
    // [370] *((byte*) form_control::field#0) ← (byte~) form_control::$12 -- _deref_pbuz1=vbuaa 
    sta (field),y
    // [371] phi from form_control::@2 form_control::@7 to form_control::@3 [phi:form_control::@2/form_control::@7->form_control::@3]
    // form_control::@3
  __b3:
    // keyboard_event_scan()
    // [372] call keyboard_event_scan 
  // Scan the keyboard
    // [157] phi from form_control::@3 to keyboard_event_scan [phi:form_control::@3->keyboard_event_scan]
    // [157] phi (byte) keyboard_events_size#97 = (byte) keyboard_events_size#47 [phi:form_control::@3->keyboard_event_scan#0] -- register_copy 
    jsr keyboard_event_scan
    // [373] phi from form_control::@3 to form_control::@19 [phi:form_control::@3->form_control::@19]
    // form_control::@19
    // keyboard_event_get()
    // [374] call keyboard_event_get 
    jsr keyboard_event_get
    // [375] (byte) keyboard_event_get::return#4 ← (byte) keyboard_event_get::return#2
    // form_control::@20
    // key_event = keyboard_event_get()
    // [376] (byte) form_control::key_event#0 ← (byte) keyboard_event_get::return#4
    // if(key_event==KEY_CRSR_DOWN)
    // [377] if((byte) form_control::key_event#0!=(const nomodify byte) KEY_CRSR_DOWN) goto form_control::@4 -- vbuaa_neq_vbuc1_then_la1 
    cmp #KEY_CRSR_DOWN
    bne __b4
    // form_control::@8
    // *field & $7f
    // [378] (byte~) form_control::$14 ← *((byte*) form_control::field#0) & (byte) $7f -- vbuaa=_deref_pbuz1_band_vbuc1 
    lda #$7f
    ldy #0
    and (field),y
    // *field = *field & $7f
    // [379] *((byte*) form_control::field#0) ← (byte~) form_control::$14 -- _deref_pbuz1=vbuaa 
    // Unblink the cursor
    sta (field),y
    // keyboard_modifiers&KEY_MODIFIER_SHIFT
    // [380] (byte~) form_control::$15 ← (byte) keyboard_modifiers#21 & (const nomodify byte) KEY_MODIFIER_SHIFT -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #KEY_MODIFIER_SHIFT
    // if((keyboard_modifiers&KEY_MODIFIER_SHIFT)==0)
    // [381] if((byte~) form_control::$15==(byte) 0) goto form_control::@13 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b13
    // form_control::@9
    // if(--form_field_idx==$ff)
    // [382] (byte) form_field_idx#6 ← -- (byte) form_field_idx#28 -- vbuz1=_dec_vbuz1 
    dec.z form_field_idx
    // [383] if((byte) form_field_idx#6!=(byte) $ff) goto form_control::@22 -- vbuz1_neq_vbuc1_then_la1 
    lda #$ff
    cmp.z form_field_idx
    bne __b14
    // [385] phi from form_control::@9 to form_control::@14 [phi:form_control::@9->form_control::@14]
    // [385] phi (byte) form_field_idx#31 = (const byte) form_fields_cnt-(byte) 1 [phi:form_control::@9->form_control::@14#0] -- vbuz1=vbuc1 
    lda #form_fields_cnt-1
    sta.z form_field_idx
    // [384] phi from form_control::@9 to form_control::@22 [phi:form_control::@9->form_control::@22]
    // form_control::@22
    // [385] phi from form_control::@22 form_control::@23 to form_control::@14 [phi:form_control::@22/form_control::@23->form_control::@14]
    // [385] phi (byte) form_field_idx#31 = (byte) form_field_idx#6 [phi:form_control::@22/form_control::@23->form_control::@14#0] -- register_copy 
    // form_control::@14
  __b14:
    // [386] phi from form_control::@14 to form_control::@return [phi:form_control::@14->form_control::@return]
    // [386] phi (byte) form_field_idx#18 = (byte) form_field_idx#31 [phi:form_control::@14->form_control::@return#0] -- register_copy 
    // [386] phi (signed byte) form_cursor_count#16 = (const nomodify signed byte) FORM_CURSOR_BLINK/(signed byte) 2 [phi:form_control::@14->form_control::@return#1] -- vbsz1=vbsc1 
    lda #FORM_CURSOR_BLINK/2
    sta.z form_cursor_count
    // [386] phi (byte) form_control::return#2 = (byte) 0 [phi:form_control::@14->form_control::@return#2] -- vbuxx=vbuc1 
    ldx #0
    // form_control::@return
    // }
    // [387] return 
    rts
    // form_control::@13
  __b13:
    // if(++form_field_idx==form_fields_cnt)
    // [388] (byte) form_field_idx#5 ← ++ (byte) form_field_idx#28 -- vbuz1=_inc_vbuz1 
    inc.z form_field_idx
    // [389] if((byte) form_field_idx#5!=(const byte) form_fields_cnt) goto form_control::@23 -- vbuz1_neq_vbuc1_then_la1 
    lda #form_fields_cnt
    cmp.z form_field_idx
    bne __b14
    // [385] phi from form_control::@13 to form_control::@14 [phi:form_control::@13->form_control::@14]
    // [385] phi (byte) form_field_idx#31 = (byte) 0 [phi:form_control::@13->form_control::@14#0] -- vbuz1=vbuc1 
    lda #0
    sta.z form_field_idx
    jmp __b14
    // [390] phi from form_control::@13 to form_control::@23 [phi:form_control::@13->form_control::@23]
    // form_control::@23
    // form_control::@4
  __b4:
    // if(key_event==KEY_CRSR_RIGHT)
    // [391] if((byte) form_control::key_event#0!=(const nomodify byte) KEY_CRSR_RIGHT) goto form_control::@5 -- vbuaa_neq_vbuc1_then_la1 
    cmp #KEY_CRSR_RIGHT
    bne __b5
    // form_control::@10
    // keyboard_modifiers&KEY_MODIFIER_SHIFT
    // [392] (byte~) form_control::$22 ← (byte) keyboard_modifiers#21 & (const nomodify byte) KEY_MODIFIER_SHIFT -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #KEY_MODIFIER_SHIFT
    // if((keyboard_modifiers&KEY_MODIFIER_SHIFT)==0)
    // [393] if((byte~) form_control::$22==(byte) 0) goto form_control::@15 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b15
    // form_control::@11
    // if(--form_fields_val[form_field_idx]==$ff)
    // [394] *((const byte*) form_fields_val + (byte) form_field_idx#28) ← -- *((const byte*) form_fields_val + (byte) form_field_idx#28) -- pbuc1_derefidx_vbuz1=_dec_pbuc1_derefidx_vbuz1 
    ldx.z form_field_idx
    dec form_fields_val,x
    // [395] if(*((const byte*) form_fields_val + (byte) form_field_idx#28)!=(byte) $ff) goto form_control::@16 -- pbuc1_derefidx_vbuz1_neq_vbuc2_then_la1 
    lda #$ff
    ldy.z form_field_idx
    cmp form_fields_val,y
    bne __b16
    // form_control::@12
    // form_fields_val[form_field_idx] = form_fields_max[form_field_idx]
    // [396] *((const byte*) form_fields_val + (byte) form_field_idx#28) ← *((const byte*) form_fields_max + (byte) form_field_idx#28) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz1 
    lda form_fields_max,y
    sta form_fields_val,y
    // form_control::@16
  __b16:
    // *field = print_hextab[form_fields_val[form_field_idx]]
    // [397] *((byte*) form_control::field#0) ← *((const to_nomodify byte*) print_hextab + *((const byte*) form_fields_val + (byte) form_field_idx#28)) -- _deref_pbuz1=pbuc1_derefidx_(pbuc2_derefidx_vbuz2) 
    // Render field value
    ldx.z form_field_idx
    ldy form_fields_val,x
    lda print_hextab,y
    ldy #0
    sta (field),y
    // [386] phi from form_control::@16 form_control::@6 to form_control::@return [phi:form_control::@16/form_control::@6->form_control::@return]
  __b7:
    // [386] phi (byte) form_field_idx#18 = (byte) form_field_idx#28 [phi:form_control::@16/form_control::@6->form_control::@return#0] -- register_copy 
    // [386] phi (signed byte) form_cursor_count#16 = (signed byte) form_cursor_count#15 [phi:form_control::@16/form_control::@6->form_control::@return#1] -- register_copy 
    // [386] phi (byte) form_control::return#2 = (byte) 0 [phi:form_control::@16/form_control::@6->form_control::@return#2] -- vbuxx=vbuc1 
    ldx #0
    rts
    // form_control::@15
  __b15:
    // if(++form_fields_val[form_field_idx]>form_fields_max[form_field_idx])
    // [398] *((const byte*) form_fields_val + (byte) form_field_idx#28) ← ++ *((const byte*) form_fields_val + (byte) form_field_idx#28) -- pbuc1_derefidx_vbuz1=_inc_pbuc1_derefidx_vbuz1 
    ldx.z form_field_idx
    inc form_fields_val,x
    // [399] if(*((const byte*) form_fields_val + (byte) form_field_idx#28)<=*((const byte*) form_fields_max + (byte) form_field_idx#28)) goto form_control::@16 -- pbuc1_derefidx_vbuz1_le_pbuc2_derefidx_vbuz1_then_la1 
    ldy.z form_field_idx
    lda form_fields_max,y
    cmp form_fields_val,y
    bcs __b16
    // form_control::@17
    // form_fields_val[form_field_idx] = 0
    // [400] *((const byte*) form_fields_val + (byte) form_field_idx#28) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    sta form_fields_val,y
    jmp __b16
    // form_control::@5
  __b5:
    // if(key_event==KEY_SPACE)
    // [401] if((byte) form_control::key_event#0!=(const nomodify byte) KEY_SPACE) goto form_control::@6 -- vbuaa_neq_vbuc1_then_la1 
    cmp #KEY_SPACE
    bne __b7
    // [386] phi from form_control::@5 to form_control::@return [phi:form_control::@5->form_control::@return]
    // [386] phi (byte) form_field_idx#18 = (byte) form_field_idx#28 [phi:form_control::@5->form_control::@return#0] -- register_copy 
    // [386] phi (signed byte) form_cursor_count#16 = (signed byte) form_cursor_count#15 [phi:form_control::@5->form_control::@return#1] -- register_copy 
    // [386] phi (byte) form_control::return#2 = (byte) $ff [phi:form_control::@5->form_control::@return#2] -- vbuxx=vbuc1 
    ldx #$ff
    rts
    // [402] phi from form_control::@5 to form_control::@6 [phi:form_control::@5->form_control::@6]
    // form_control::@6
    // form_control::@2
  __b2:
    // *field | $80
    // [403] (byte~) form_control::$13 ← *((byte*) form_control::field#0) | (byte) $80 -- vbuaa=_deref_pbuz1_bor_vbuc1 
    lda #$80
    ldy #0
    ora (field),y
    // *field = *field | $80
    // [404] *((byte*) form_control::field#0) ← (byte~) form_control::$13 -- _deref_pbuz1=vbuaa 
    sta (field),y
    jmp __b3
}
  // form_set_screen
// Set the screen to use for the form.
// screen is the start address of the screen to use
form_set_screen: {
    .label line = $10
    // [406] phi from form_set_screen to form_set_screen::@1 [phi:form_set_screen->form_set_screen::@1]
    // [406] phi (byte) form_set_screen::y#2 = (byte) 0 [phi:form_set_screen->form_set_screen::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [406] phi (byte*) form_set_screen::line#2 = (const nomodify byte*) FORM_SCREEN [phi:form_set_screen->form_set_screen::@1#1] -- pbuz1=pbuc1 
    lda #<FORM_SCREEN
    sta.z line
    lda #>FORM_SCREEN
    sta.z line+1
    // [406] phi from form_set_screen::@1 to form_set_screen::@1 [phi:form_set_screen::@1->form_set_screen::@1]
    // [406] phi (byte) form_set_screen::y#2 = (byte) form_set_screen::y#1 [phi:form_set_screen::@1->form_set_screen::@1#0] -- register_copy 
    // [406] phi (byte*) form_set_screen::line#2 = (byte*) form_set_screen::line#1 [phi:form_set_screen::@1->form_set_screen::@1#1] -- register_copy 
    // form_set_screen::@1
  __b1:
    // <line
    // [407] (byte~) form_set_screen::$0 ← < (byte*) form_set_screen::line#2 -- vbuaa=_lo_pbuz1 
    lda.z line
    // form_line_lo[y] = <line
    // [408] *((const byte*) form_line_lo + (byte) form_set_screen::y#2) ← (byte~) form_set_screen::$0 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta form_line_lo,x
    // >line
    // [409] (byte~) form_set_screen::$1 ← > (byte*) form_set_screen::line#2 -- vbuaa=_hi_pbuz1 
    lda.z line+1
    // form_line_hi[y] = >line
    // [410] *((const byte*) form_line_hi + (byte) form_set_screen::y#2) ← (byte~) form_set_screen::$1 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta form_line_hi,x
    // line = line + 40
    // [411] (byte*) form_set_screen::line#1 ← (byte*) form_set_screen::line#2 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line
    sta.z line
    bcc !+
    inc.z line+1
  !:
    // for(byte y: 0..24)
    // [412] (byte) form_set_screen::y#1 ← ++ (byte) form_set_screen::y#2 -- vbuxx=_inc_vbuxx 
    inx
    // [413] if((byte) form_set_screen::y#1!=(byte) $19) goto form_set_screen::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$19
    bne __b1
    // form_set_screen::@return
    // }
    // [414] return 
    rts
}
  // print_str_lines
// Print a number of zero-terminated strings, each followed by a newline.
// The sequence of lines is terminated by another zero.
// print_str_lines(byte* zp($10) str)
print_str_lines: {
    .label str = $10
    // [416] (byte*) print_char_cursor#72 ← (byte*) print_set_screen::screen#2 -- pbuz1=pbuz2 
    lda.z print_set_screen.screen
    sta.z print_char_cursor
    lda.z print_set_screen.screen+1
    sta.z print_char_cursor+1
    // [417] phi from print_str_lines print_str_lines::@6 to print_str_lines::@1 [phi:print_str_lines/print_str_lines::@6->print_str_lines::@1]
    // [417] phi (byte*) print_line_cursor#2 = (byte*) print_set_screen::screen#2 [phi:print_str_lines/print_str_lines::@6->print_str_lines::@1#0] -- register_copy 
    // [417] phi (byte*) print_char_cursor#24 = (byte*) print_char_cursor#72 [phi:print_str_lines/print_str_lines::@6->print_str_lines::@1#1] -- register_copy 
    // [417] phi (byte*) print_str_lines::str#3 = (byte*) print_str_lines::str#5 [phi:print_str_lines/print_str_lines::@6->print_str_lines::@1#2] -- register_copy 
    // print_str_lines::@1
  __b1:
    // while(*str)
    // [418] if((byte) 0!=*((byte*) print_str_lines::str#3)) goto print_str_lines::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    // print_str_lines::@return
    // }
    // [419] return 
    rts
    // [420] phi from print_str_lines::@1 print_str_lines::@3 to print_str_lines::@2 [phi:print_str_lines::@1/print_str_lines::@3->print_str_lines::@2]
    // [420] phi (byte*) print_char_cursor#41 = (byte*) print_char_cursor#24 [phi:print_str_lines::@1/print_str_lines::@3->print_str_lines::@2#0] -- register_copy 
    // [420] phi (byte*) print_str_lines::str#4 = (byte*) print_str_lines::str#3 [phi:print_str_lines::@1/print_str_lines::@3->print_str_lines::@2#1] -- register_copy 
    // print_str_lines::@2
  __b2:
    // ch = *(str++)
    // [421] (byte) print_str_lines::ch#0 ← *((byte*) print_str_lines::str#4) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
    // [422] (byte*) print_str_lines::str#0 ← ++ (byte*) print_str_lines::str#4 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // if(ch)
    // [423] if((byte) 0==(byte) print_str_lines::ch#0) goto print_str_lines::@3 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq __b3
    // print_str_lines::@4
    // print_char(ch)
    // [424] (byte) print_char::ch#0 ← (byte) print_str_lines::ch#0
    // [425] call print_char 
    jsr print_char
    // [426] phi from print_str_lines::@2 print_str_lines::@4 to print_str_lines::@3 [phi:print_str_lines::@2/print_str_lines::@4->print_str_lines::@3]
    // [426] phi (byte*) print_char_cursor#42 = (byte*) print_char_cursor#41 [phi:print_str_lines::@2/print_str_lines::@4->print_str_lines::@3#0] -- register_copy 
    // print_str_lines::@3
  __b3:
    // while (ch)
    // [427] if((byte) 0!=(byte) print_str_lines::ch#0) goto print_str_lines::@2 -- vbuc1_neq_vbuaa_then_la1 
    cmp #0
    bne __b2
    // [428] phi from print_str_lines::@3 to print_str_lines::@5 [phi:print_str_lines::@3->print_str_lines::@5]
    // print_str_lines::@5
    // print_ln()
    // [429] call print_ln 
    // [431] phi from print_str_lines::@5 to print_ln [phi:print_str_lines::@5->print_ln]
    jsr print_ln
    // print_str_lines::@6
    // [430] (byte*) print_char_cursor#73 ← (byte*) print_line_cursor#22 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    jmp __b1
}
  // print_ln
// Print a newline
print_ln: {
    // [432] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
    // [432] phi (byte*) print_line_cursor#21 = (byte*) print_line_cursor#2 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    // print_ln::@1
  __b1:
    // print_line_cursor + $28
    // [433] (byte*) print_line_cursor#22 ← (byte*) print_line_cursor#21 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // while (print_line_cursor<print_char_cursor)
    // [434] if((byte*) print_line_cursor#22<(byte*) print_char_cursor#42) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1
  !:
    // print_ln::@return
    // }
    // [435] return 
    rts
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // *(print_char_cursor++) = ch
    // [436] *((byte*) print_char_cursor#41) ← (byte) print_char::ch#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // *(print_char_cursor++) = ch;
    // [437] (byte*) print_char_cursor#28 ← ++ (byte*) print_char_cursor#41 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    // print_char::@return
    // }
    // [438] return 
    rts
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // memset(print_screen, ' ', 1000)
    // [439] (void*) memset::str#0 ← (void*)(byte*) print_set_screen::screen#2 -- pvoz1=pvoz2 
    lda.z print_set_screen.screen
    sta.z memset.str
    lda.z print_set_screen.screen+1
    sta.z memset.str+1
    // [440] call memset 
    // [442] phi from print_cls to memset [phi:print_cls->memset]
    jsr memset
    // print_cls::@return
    // }
    // [441] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp($10) str)
memset: {
    .const c = ' '
    .const num = $3e8
    .label end = $1f
    .label dst = $10
    .label str = $10
    // memset::@1
    // end = (char*)str + num
    // [443] (byte*) memset::end#0 ← (byte*)(void*) memset::str#0 + (const word) memset::num#0 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z str
    clc
    adc #<num
    sta.z end
    lda.z str+1
    adc #>num
    sta.z end+1
    // [444] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#0
    // [445] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
    // [445] phi (byte*) memset::dst#2 = (byte*) memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    // memset::@2
  __b2:
    // for(char* dst = str; dst!=end; dst++)
    // [446] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    // memset::@return
    // }
    // [447] return 
    rts
    // memset::@3
  __b3:
    // *dst = c
    // [448] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [449] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2
}
  // print_set_screen
// Set the screen to print on. Also resets current line/char cursor.
// print_set_screen(byte* zp(7) screen)
print_set_screen: {
    .label screen = 7
    // print_set_screen::@return
    // }
    // [451] return 
    rts
}
  // gfx_init
// Initialize the different graphics in the memory
gfx_init: {
    // gfx_init_screen0()
    // [453] call gfx_init_screen0 
    // [849] phi from gfx_init to gfx_init_screen0 [phi:gfx_init->gfx_init_screen0]
    jsr gfx_init_screen0
    // [454] phi from gfx_init to gfx_init::@1 [phi:gfx_init->gfx_init::@1]
    // gfx_init::@1
    // gfx_init_screen1()
    // [455] call gfx_init_screen1 
    // [837] phi from gfx_init::@1 to gfx_init_screen1 [phi:gfx_init::@1->gfx_init_screen1]
    jsr gfx_init_screen1
    // [456] phi from gfx_init::@1 to gfx_init::@2 [phi:gfx_init::@1->gfx_init::@2]
    // gfx_init::@2
    // gfx_init_screen2()
    // [457] call gfx_init_screen2 
    // [822] phi from gfx_init::@2 to gfx_init_screen2 [phi:gfx_init::@2->gfx_init_screen2]
    jsr gfx_init_screen2
    // [458] phi from gfx_init::@2 to gfx_init::@3 [phi:gfx_init::@2->gfx_init::@3]
    // gfx_init::@3
    // gfx_init_screen3()
    // [459] call gfx_init_screen3 
    // [808] phi from gfx_init::@3 to gfx_init_screen3 [phi:gfx_init::@3->gfx_init_screen3]
    jsr gfx_init_screen3
    // [460] phi from gfx_init::@3 to gfx_init::@4 [phi:gfx_init::@3->gfx_init::@4]
    // gfx_init::@4
    // gfx_init_screen4()
    // [461] call gfx_init_screen4 
    // [798] phi from gfx_init::@4 to gfx_init_screen4 [phi:gfx_init::@4->gfx_init_screen4]
    jsr gfx_init_screen4
    // [462] phi from gfx_init::@4 to gfx_init::@5 [phi:gfx_init::@4->gfx_init::@5]
    // gfx_init::@5
    // gfx_init_charset()
    // [463] call gfx_init_charset 
    jsr gfx_init_charset
    // [464] phi from gfx_init::@5 to gfx_init::@6 [phi:gfx_init::@5->gfx_init::@6]
    // gfx_init::@6
    // gfx_init_vic_bitmap()
    // [465] call gfx_init_vic_bitmap 
    // [608] phi from gfx_init::@6 to gfx_init_vic_bitmap [phi:gfx_init::@6->gfx_init_vic_bitmap]
    jsr gfx_init_vic_bitmap
    // [466] phi from gfx_init::@6 to gfx_init::@7 [phi:gfx_init::@6->gfx_init::@7]
    // gfx_init::@7
    // gfx_init_plane_8bppchunky()
    // [467] call gfx_init_plane_8bppchunky 
    // [588] phi from gfx_init::@7 to gfx_init_plane_8bppchunky [phi:gfx_init::@7->gfx_init_plane_8bppchunky]
    jsr gfx_init_plane_8bppchunky
    // [468] phi from gfx_init::@7 to gfx_init::@8 [phi:gfx_init::@7->gfx_init::@8]
    // gfx_init::@8
    // gfx_init_plane_charset8()
    // [469] call gfx_init_plane_charset8 
    // [563] phi from gfx_init::@8 to gfx_init_plane_charset8 [phi:gfx_init::@8->gfx_init_plane_charset8]
    jsr gfx_init_plane_charset8
    // [470] phi from gfx_init::@8 to gfx_init::@9 [phi:gfx_init::@8->gfx_init::@9]
    // gfx_init::@9
    // gfx_init_plane_horisontal()
    // [471] call gfx_init_plane_horisontal 
    // [545] phi from gfx_init::@9 to gfx_init_plane_horisontal [phi:gfx_init::@9->gfx_init_plane_horisontal]
    jsr gfx_init_plane_horisontal
    // [472] phi from gfx_init::@9 to gfx_init::@10 [phi:gfx_init::@9->gfx_init::@10]
    // gfx_init::@10
    // gfx_init_plane_vertical()
    // [473] call gfx_init_plane_vertical 
    // [532] phi from gfx_init::@10 to gfx_init_plane_vertical [phi:gfx_init::@10->gfx_init_plane_vertical]
    jsr gfx_init_plane_vertical
    // [474] phi from gfx_init::@10 to gfx_init::@11 [phi:gfx_init::@10->gfx_init::@11]
    // gfx_init::@11
    // gfx_init_plane_horisontal2()
    // [475] call gfx_init_plane_horisontal2 
    // [517] phi from gfx_init::@11 to gfx_init_plane_horisontal2 [phi:gfx_init::@11->gfx_init_plane_horisontal2]
    jsr gfx_init_plane_horisontal2
    // [476] phi from gfx_init::@11 to gfx_init::@12 [phi:gfx_init::@11->gfx_init::@12]
    // gfx_init::@12
    // gfx_init_plane_vertical2()
    // [477] call gfx_init_plane_vertical2 
    // [514] phi from gfx_init::@12 to gfx_init_plane_vertical2 [phi:gfx_init::@12->gfx_init_plane_vertical2]
    jsr gfx_init_plane_vertical2
    // [478] phi from gfx_init::@12 to gfx_init::@13 [phi:gfx_init::@12->gfx_init::@13]
    // gfx_init::@13
    // gfx_init_plane_blank()
    // [479] call gfx_init_plane_blank 
    // [511] phi from gfx_init::@13 to gfx_init_plane_blank [phi:gfx_init::@13->gfx_init_plane_blank]
    jsr gfx_init_plane_blank
    // [480] phi from gfx_init::@13 to gfx_init::@14 [phi:gfx_init::@13->gfx_init::@14]
    // gfx_init::@14
    // gfx_init_plane_full()
    // [481] call gfx_init_plane_full 
    // [483] phi from gfx_init::@14 to gfx_init_plane_full [phi:gfx_init::@14->gfx_init_plane_full]
    jsr gfx_init_plane_full
    // gfx_init::@return
    // }
    // [482] return 
    rts
}
  // gfx_init_plane_full
// Initialize Plane with all pixels
gfx_init_plane_full: {
    // gfx_init_plane_fill(PLANE_FULL, $ff)
    // [484] call gfx_init_plane_fill 
    // [486] phi from gfx_init_plane_full to gfx_init_plane_fill [phi:gfx_init_plane_full->gfx_init_plane_fill]
    // [486] phi (byte) gfx_init_plane_fill::fill#6 = (byte) $ff [phi:gfx_init_plane_full->gfx_init_plane_fill#0] -- vbuz1=vbuc1 
    lda #$ff
    sta.z gfx_init_plane_fill.fill
    // [486] phi (dword) gfx_init_plane_fill::plane_addr#3 = (const nomodify dword) PLANE_FULL [phi:gfx_init_plane_full->gfx_init_plane_fill#1] -- vduz1=vduc1 
    lda #<PLANE_FULL
    sta.z gfx_init_plane_fill.plane_addr
    lda #>PLANE_FULL
    sta.z gfx_init_plane_fill.plane_addr+1
    lda #<PLANE_FULL>>$10
    sta.z gfx_init_plane_fill.plane_addr+2
    lda #>PLANE_FULL>>$10
    sta.z gfx_init_plane_fill.plane_addr+3
    jsr gfx_init_plane_fill
    // gfx_init_plane_full::@return
    // }
    // [485] return 
    rts
}
  // gfx_init_plane_fill
// Initialize 320*200 1bpp pixel ($2000) plane with identical bytes
// gfx_init_plane_fill(dword zp(9) plane_addr, byte zp($e) fill)
gfx_init_plane_fill: {
    .label __0 = $17
    .label __1 = $1b
    .label __4 = $10
    .label __5 = $10
    .label gfxb = $10
    .label by = $22
    .label plane_addr = 9
    .label fill = $e
    // plane_addr*4
    // [487] (dword~) gfx_init_plane_fill::$0 ← (dword) gfx_init_plane_fill::plane_addr#3 << (byte) 2 -- vduz1=vduz2_rol_2 
    lda.z plane_addr
    asl
    sta.z __0
    lda.z plane_addr+1
    rol
    sta.z __0+1
    lda.z plane_addr+2
    rol
    sta.z __0+2
    lda.z plane_addr+3
    rol
    sta.z __0+3
    asl.z __0
    rol.z __0+1
    rol.z __0+2
    rol.z __0+3
    // >(plane_addr*4)
    // [488] (word~) gfx_init_plane_fill::$1 ← > (dword~) gfx_init_plane_fill::$0 -- vwuz1=_hi_vduz2 
    lda.z __0+2
    sta.z __1
    lda.z __0+3
    sta.z __1+1
    // gfxbCpuBank = < >(plane_addr*4)
    // [489] (byte) gfx_init_plane_fill::gfxbCpuBank#0 ← < (word~) gfx_init_plane_fill::$1 -- vbuaa=_lo_vwuz1 
    lda.z __1
    // dtvSetCpuBankSegment1(gfxbCpuBank++)
    // [490] (byte) dtvSetCpuBankSegment1::cpuBankIdx#11 ← (byte) gfx_init_plane_fill::gfxbCpuBank#0
    // [491] call dtvSetCpuBankSegment1 
    // [507] phi from gfx_init_plane_fill to dtvSetCpuBankSegment1 [phi:gfx_init_plane_fill->dtvSetCpuBankSegment1]
    // [507] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte) dtvSetCpuBankSegment1::cpuBankIdx#11 [phi:gfx_init_plane_fill->dtvSetCpuBankSegment1#0] -- register_copy 
    jsr dtvSetCpuBankSegment1
    // gfx_init_plane_fill::@5
    // <plane_addr
    // [492] (word~) gfx_init_plane_fill::$4 ← < (dword) gfx_init_plane_fill::plane_addr#3 -- vwuz1=_lo_vduz2 
    lda.z plane_addr
    sta.z __4
    lda.z plane_addr+1
    sta.z __4+1
    // <plane_addr & $3fff
    // [493] (word~) gfx_init_plane_fill::$5 ← (word~) gfx_init_plane_fill::$4 & (word) $3fff -- vwuz1=vwuz1_band_vwuc1 
    lda.z __5
    and #<$3fff
    sta.z __5
    lda.z __5+1
    and #>$3fff
    sta.z __5+1
    // $4000 + (<plane_addr & $3fff)
    // [494] (word) gfx_init_plane_fill::gfxb#0 ← (word) $4000 + (word~) gfx_init_plane_fill::$5 -- vwuz1=vwuc1_plus_vwuz1 
    clc
    lda.z gfxb
    adc #<$4000
    sta.z gfxb
    lda.z gfxb+1
    adc #>$4000
    sta.z gfxb+1
    // [495] (byte*) gfx_init_plane_fill::gfxb#6 ← (byte*)(word) gfx_init_plane_fill::gfxb#0
    // [496] phi from gfx_init_plane_fill::@5 to gfx_init_plane_fill::@1 [phi:gfx_init_plane_fill::@5->gfx_init_plane_fill::@1]
    // [496] phi (byte) gfx_init_plane_fill::by#4 = (byte) 0 [phi:gfx_init_plane_fill::@5->gfx_init_plane_fill::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z by
    // [496] phi (byte*) gfx_init_plane_fill::gfxb#3 = (byte*) gfx_init_plane_fill::gfxb#6 [phi:gfx_init_plane_fill::@5->gfx_init_plane_fill::@1#1] -- register_copy 
    // [496] phi from gfx_init_plane_fill::@3 to gfx_init_plane_fill::@1 [phi:gfx_init_plane_fill::@3->gfx_init_plane_fill::@1]
    // [496] phi (byte) gfx_init_plane_fill::by#4 = (byte) gfx_init_plane_fill::by#1 [phi:gfx_init_plane_fill::@3->gfx_init_plane_fill::@1#0] -- register_copy 
    // [496] phi (byte*) gfx_init_plane_fill::gfxb#3 = (byte*) gfx_init_plane_fill::gfxb#1 [phi:gfx_init_plane_fill::@3->gfx_init_plane_fill::@1#1] -- register_copy 
    // gfx_init_plane_fill::@1
  __b1:
    // [497] phi from gfx_init_plane_fill::@1 to gfx_init_plane_fill::@2 [phi:gfx_init_plane_fill::@1->gfx_init_plane_fill::@2]
    // [497] phi (byte) gfx_init_plane_fill::bx#2 = (byte) 0 [phi:gfx_init_plane_fill::@1->gfx_init_plane_fill::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [497] phi (byte*) gfx_init_plane_fill::gfxb#2 = (byte*) gfx_init_plane_fill::gfxb#3 [phi:gfx_init_plane_fill::@1->gfx_init_plane_fill::@2#1] -- register_copy 
    // [497] phi from gfx_init_plane_fill::@2 to gfx_init_plane_fill::@2 [phi:gfx_init_plane_fill::@2->gfx_init_plane_fill::@2]
    // [497] phi (byte) gfx_init_plane_fill::bx#2 = (byte) gfx_init_plane_fill::bx#1 [phi:gfx_init_plane_fill::@2->gfx_init_plane_fill::@2#0] -- register_copy 
    // [497] phi (byte*) gfx_init_plane_fill::gfxb#2 = (byte*) gfx_init_plane_fill::gfxb#1 [phi:gfx_init_plane_fill::@2->gfx_init_plane_fill::@2#1] -- register_copy 
    // gfx_init_plane_fill::@2
  __b2:
    // *gfxb++ = fill
    // [498] *((byte*) gfx_init_plane_fill::gfxb#2) ← (byte) gfx_init_plane_fill::fill#6 -- _deref_pbuz1=vbuz2 
    lda.z fill
    ldy #0
    sta (gfxb),y
    // *gfxb++ = fill;
    // [499] (byte*) gfx_init_plane_fill::gfxb#1 ← ++ (byte*) gfx_init_plane_fill::gfxb#2 -- pbuz1=_inc_pbuz1 
    inc.z gfxb
    bne !+
    inc.z gfxb+1
  !:
    // for ( byte bx : 0..39)
    // [500] (byte) gfx_init_plane_fill::bx#1 ← ++ (byte) gfx_init_plane_fill::bx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [501] if((byte) gfx_init_plane_fill::bx#1!=(byte) $28) goto gfx_init_plane_fill::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2
    // gfx_init_plane_fill::@3
    // for(byte by : 0..199)
    // [502] (byte) gfx_init_plane_fill::by#1 ← ++ (byte) gfx_init_plane_fill::by#4 -- vbuz1=_inc_vbuz1 
    inc.z by
    // [503] if((byte) gfx_init_plane_fill::by#1!=(byte) $c8) goto gfx_init_plane_fill::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z by
    bne __b1
    // [504] phi from gfx_init_plane_fill::@3 to gfx_init_plane_fill::@4 [phi:gfx_init_plane_fill::@3->gfx_init_plane_fill::@4]
    // gfx_init_plane_fill::@4
    // dtvSetCpuBankSegment1((byte)($4000/$4000))
    // [505] call dtvSetCpuBankSegment1 
  // Reset CPU BANK segment to $4000
    // [507] phi from gfx_init_plane_fill::@4 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_fill::@4->dtvSetCpuBankSegment1]
    // [507] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)(number) $4000/(number) $4000 [phi:gfx_init_plane_fill::@4->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
    // gfx_init_plane_fill::@return
    // }
    // [506] return 
    rts
}
  // dtvSetCpuBankSegment1
// Set the memory pointed to by CPU BANK 1 SEGMENT ($4000-$7fff)
// This sets which actual memory is addressed when the CPU reads/writes to $4000-$7fff
// The actual memory addressed will be $4000*cpuSegmentIdx
// dtvSetCpuBankSegment1(byte register(A) cpuBankIdx)
dtvSetCpuBankSegment1: {
    // Move CPU BANK 1 SEGMENT ($4000-$7fff)
    .label cpuBank = $ff
    // *cpuBank = cpuBankIdx
    // [508] *((const byte*) dtvSetCpuBankSegment1::cpuBank) ← (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 -- _deref_pbuc1=vbuaa 
    sta cpuBank
    // asm
    // asm { .byte$32,$dd lda$ff .byte$32,$00  }
    .byte $32, $dd
    lda.z $ff
    .byte $32, $00
    // dtvSetCpuBankSegment1::@return
    // }
    // [510] return 
    rts
}
  // gfx_init_plane_blank
// Initialize Plane with blank pixels
gfx_init_plane_blank: {
    // gfx_init_plane_fill(PLANE_BLANK, 0)
    // [512] call gfx_init_plane_fill 
    // [486] phi from gfx_init_plane_blank to gfx_init_plane_fill [phi:gfx_init_plane_blank->gfx_init_plane_fill]
    // [486] phi (byte) gfx_init_plane_fill::fill#6 = (byte) 0 [phi:gfx_init_plane_blank->gfx_init_plane_fill#0] -- vbuz1=vbuc1 
    lda #0
    sta.z gfx_init_plane_fill.fill
    // [486] phi (dword) gfx_init_plane_fill::plane_addr#3 = (const nomodify dword) PLANE_BLANK [phi:gfx_init_plane_blank->gfx_init_plane_fill#1] -- vduz1=vduc1 
    lda #<PLANE_BLANK
    sta.z gfx_init_plane_fill.plane_addr
    lda #>PLANE_BLANK
    sta.z gfx_init_plane_fill.plane_addr+1
    lda #<PLANE_BLANK>>$10
    sta.z gfx_init_plane_fill.plane_addr+2
    lda #>PLANE_BLANK>>$10
    sta.z gfx_init_plane_fill.plane_addr+3
    jsr gfx_init_plane_fill
    // gfx_init_plane_blank::@return
    // }
    // [513] return 
    rts
}
  // gfx_init_plane_vertical2
// Initialize Plane with Vertical Stripes every 2 pixels
gfx_init_plane_vertical2: {
    // gfx_init_plane_fill(PLANE_VERTICAL2, %00011011)
    // [515] call gfx_init_plane_fill 
    // [486] phi from gfx_init_plane_vertical2 to gfx_init_plane_fill [phi:gfx_init_plane_vertical2->gfx_init_plane_fill]
    // [486] phi (byte) gfx_init_plane_fill::fill#6 = (byte) $1b [phi:gfx_init_plane_vertical2->gfx_init_plane_fill#0] -- vbuz1=vbuc1 
    lda #$1b
    sta.z gfx_init_plane_fill.fill
    // [486] phi (dword) gfx_init_plane_fill::plane_addr#3 = (const nomodify dword) PLANE_VERTICAL2 [phi:gfx_init_plane_vertical2->gfx_init_plane_fill#1] -- vduz1=vduc1 
    lda #<PLANE_VERTICAL2
    sta.z gfx_init_plane_fill.plane_addr
    lda #>PLANE_VERTICAL2
    sta.z gfx_init_plane_fill.plane_addr+1
    lda #<PLANE_VERTICAL2>>$10
    sta.z gfx_init_plane_fill.plane_addr+2
    lda #>PLANE_VERTICAL2>>$10
    sta.z gfx_init_plane_fill.plane_addr+3
    jsr gfx_init_plane_fill
    // gfx_init_plane_vertical2::@return
    // }
    // [516] return 
    rts
}
  // gfx_init_plane_horisontal2
// Initialize Plane with Horizontal Stripes every 2 pixels
gfx_init_plane_horisontal2: {
    .const gfxbCpuBank = PLANE_HORISONTAL2/$4000
    .label gfxa = $10
    .label ay = $f
    // dtvSetCpuBankSegment1(gfxbCpuBank++)
    // [518] call dtvSetCpuBankSegment1 
    // [507] phi from gfx_init_plane_horisontal2 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_horisontal2->dtvSetCpuBankSegment1]
    // [507] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (const byte) gfx_init_plane_horisontal2::gfxbCpuBank#0 [phi:gfx_init_plane_horisontal2->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #gfxbCpuBank
    jsr dtvSetCpuBankSegment1
    // [519] phi from gfx_init_plane_horisontal2 to gfx_init_plane_horisontal2::@1 [phi:gfx_init_plane_horisontal2->gfx_init_plane_horisontal2::@1]
    // [519] phi (byte*) gfx_init_plane_horisontal2::gfxa#3 = (byte*)(word) $4000 [phi:gfx_init_plane_horisontal2->gfx_init_plane_horisontal2::@1#0] -- pbuz1=pbuc1 
    lda #<$4000
    sta.z gfxa
    lda #>$4000
    sta.z gfxa+1
    // [519] phi (byte) gfx_init_plane_horisontal2::ay#4 = (byte) 0 [phi:gfx_init_plane_horisontal2->gfx_init_plane_horisontal2::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z ay
    // [519] phi from gfx_init_plane_horisontal2::@3 to gfx_init_plane_horisontal2::@1 [phi:gfx_init_plane_horisontal2::@3->gfx_init_plane_horisontal2::@1]
    // [519] phi (byte*) gfx_init_plane_horisontal2::gfxa#3 = (byte*) gfx_init_plane_horisontal2::gfxa#1 [phi:gfx_init_plane_horisontal2::@3->gfx_init_plane_horisontal2::@1#0] -- register_copy 
    // [519] phi (byte) gfx_init_plane_horisontal2::ay#4 = (byte) gfx_init_plane_horisontal2::ay#1 [phi:gfx_init_plane_horisontal2::@3->gfx_init_plane_horisontal2::@1#1] -- register_copy 
    // gfx_init_plane_horisontal2::@1
  __b1:
    // [520] phi from gfx_init_plane_horisontal2::@1 to gfx_init_plane_horisontal2::@2 [phi:gfx_init_plane_horisontal2::@1->gfx_init_plane_horisontal2::@2]
    // [520] phi (byte) gfx_init_plane_horisontal2::ax#2 = (byte) 0 [phi:gfx_init_plane_horisontal2::@1->gfx_init_plane_horisontal2::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [520] phi (byte*) gfx_init_plane_horisontal2::gfxa#2 = (byte*) gfx_init_plane_horisontal2::gfxa#3 [phi:gfx_init_plane_horisontal2::@1->gfx_init_plane_horisontal2::@2#1] -- register_copy 
    // [520] phi from gfx_init_plane_horisontal2::@2 to gfx_init_plane_horisontal2::@2 [phi:gfx_init_plane_horisontal2::@2->gfx_init_plane_horisontal2::@2]
    // [520] phi (byte) gfx_init_plane_horisontal2::ax#2 = (byte) gfx_init_plane_horisontal2::ax#1 [phi:gfx_init_plane_horisontal2::@2->gfx_init_plane_horisontal2::@2#0] -- register_copy 
    // [520] phi (byte*) gfx_init_plane_horisontal2::gfxa#2 = (byte*) gfx_init_plane_horisontal2::gfxa#1 [phi:gfx_init_plane_horisontal2::@2->gfx_init_plane_horisontal2::@2#1] -- register_copy 
    // gfx_init_plane_horisontal2::@2
  __b2:
    // ay/2
    // [521] (byte~) gfx_init_plane_horisontal2::$2 ← (byte) gfx_init_plane_horisontal2::ay#4 >> (byte) 1 -- vbuaa=vbuz1_ror_1 
    lda.z ay
    lsr
    // row = (ay/2) & 3
    // [522] (byte) gfx_init_plane_horisontal2::row#0 ← (byte~) gfx_init_plane_horisontal2::$2 & (byte) 3 -- vbuaa=vbuaa_band_vbuc1 
    and #3
    // *gfxa++ = row_bitmask[row]
    // [523] *((byte*) gfx_init_plane_horisontal2::gfxa#2) ← *((const byte*) gfx_init_plane_horisontal2::row_bitmask + (byte) gfx_init_plane_horisontal2::row#0) -- _deref_pbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda row_bitmask,y
    ldy #0
    sta (gfxa),y
    // *gfxa++ = row_bitmask[row];
    // [524] (byte*) gfx_init_plane_horisontal2::gfxa#1 ← ++ (byte*) gfx_init_plane_horisontal2::gfxa#2 -- pbuz1=_inc_pbuz1 
    inc.z gfxa
    bne !+
    inc.z gfxa+1
  !:
    // for (byte ax : 0..39)
    // [525] (byte) gfx_init_plane_horisontal2::ax#1 ← ++ (byte) gfx_init_plane_horisontal2::ax#2 -- vbuxx=_inc_vbuxx 
    inx
    // [526] if((byte) gfx_init_plane_horisontal2::ax#1!=(byte) $28) goto gfx_init_plane_horisontal2::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2
    // gfx_init_plane_horisontal2::@3
    // for(byte ay : 0..199)
    // [527] (byte) gfx_init_plane_horisontal2::ay#1 ← ++ (byte) gfx_init_plane_horisontal2::ay#4 -- vbuz1=_inc_vbuz1 
    inc.z ay
    // [528] if((byte) gfx_init_plane_horisontal2::ay#1!=(byte) $c8) goto gfx_init_plane_horisontal2::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z ay
    bne __b1
    // [529] phi from gfx_init_plane_horisontal2::@3 to gfx_init_plane_horisontal2::@4 [phi:gfx_init_plane_horisontal2::@3->gfx_init_plane_horisontal2::@4]
    // gfx_init_plane_horisontal2::@4
    // dtvSetCpuBankSegment1((byte)($4000/$4000))
    // [530] call dtvSetCpuBankSegment1 
  // Reset CPU BANK segment to $4000
    // [507] phi from gfx_init_plane_horisontal2::@4 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_horisontal2::@4->dtvSetCpuBankSegment1]
    // [507] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)(number) $4000/(number) $4000 [phi:gfx_init_plane_horisontal2::@4->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
    // gfx_init_plane_horisontal2::@return
    // }
    // [531] return 
    rts
    row_bitmask: .byte 0, $55, $aa, $ff
}
  // gfx_init_plane_vertical
// Initialize Plane with Vertical Stripes
gfx_init_plane_vertical: {
    .const gfxbCpuBank = PLANE_VERTICAL/$4000
    .label gfxb = $10
    .label by = $d
    // dtvSetCpuBankSegment1(gfxbCpuBank++)
    // [533] call dtvSetCpuBankSegment1 
    // [507] phi from gfx_init_plane_vertical to dtvSetCpuBankSegment1 [phi:gfx_init_plane_vertical->dtvSetCpuBankSegment1]
    // [507] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (const byte) gfx_init_plane_vertical::gfxbCpuBank#0 [phi:gfx_init_plane_vertical->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #gfxbCpuBank
    jsr dtvSetCpuBankSegment1
    // [534] phi from gfx_init_plane_vertical to gfx_init_plane_vertical::@1 [phi:gfx_init_plane_vertical->gfx_init_plane_vertical::@1]
    // [534] phi (byte) gfx_init_plane_vertical::by#4 = (byte) 0 [phi:gfx_init_plane_vertical->gfx_init_plane_vertical::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z by
    // [534] phi (byte*) gfx_init_plane_vertical::gfxb#3 = (byte*)(word) $4000+(const nomodify dword) PLANE_VERTICAL&(word) $3fff [phi:gfx_init_plane_vertical->gfx_init_plane_vertical::@1#1] -- pbuz1=pbuc1 
    lda #<$4000+(PLANE_VERTICAL&$3fff)
    sta.z gfxb
    lda #>$4000+(PLANE_VERTICAL&$3fff)
    sta.z gfxb+1
    // [534] phi from gfx_init_plane_vertical::@3 to gfx_init_plane_vertical::@1 [phi:gfx_init_plane_vertical::@3->gfx_init_plane_vertical::@1]
    // [534] phi (byte) gfx_init_plane_vertical::by#4 = (byte) gfx_init_plane_vertical::by#1 [phi:gfx_init_plane_vertical::@3->gfx_init_plane_vertical::@1#0] -- register_copy 
    // [534] phi (byte*) gfx_init_plane_vertical::gfxb#3 = (byte*) gfx_init_plane_vertical::gfxb#1 [phi:gfx_init_plane_vertical::@3->gfx_init_plane_vertical::@1#1] -- register_copy 
    // gfx_init_plane_vertical::@1
  __b1:
    // [535] phi from gfx_init_plane_vertical::@1 to gfx_init_plane_vertical::@2 [phi:gfx_init_plane_vertical::@1->gfx_init_plane_vertical::@2]
    // [535] phi (byte) gfx_init_plane_vertical::bx#2 = (byte) 0 [phi:gfx_init_plane_vertical::@1->gfx_init_plane_vertical::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [535] phi (byte*) gfx_init_plane_vertical::gfxb#2 = (byte*) gfx_init_plane_vertical::gfxb#3 [phi:gfx_init_plane_vertical::@1->gfx_init_plane_vertical::@2#1] -- register_copy 
    // [535] phi from gfx_init_plane_vertical::@2 to gfx_init_plane_vertical::@2 [phi:gfx_init_plane_vertical::@2->gfx_init_plane_vertical::@2]
    // [535] phi (byte) gfx_init_plane_vertical::bx#2 = (byte) gfx_init_plane_vertical::bx#1 [phi:gfx_init_plane_vertical::@2->gfx_init_plane_vertical::@2#0] -- register_copy 
    // [535] phi (byte*) gfx_init_plane_vertical::gfxb#2 = (byte*) gfx_init_plane_vertical::gfxb#1 [phi:gfx_init_plane_vertical::@2->gfx_init_plane_vertical::@2#1] -- register_copy 
    // gfx_init_plane_vertical::@2
  __b2:
    // *gfxb++ = %00001111
    // [536] *((byte*) gfx_init_plane_vertical::gfxb#2) ← (byte) $f -- _deref_pbuz1=vbuc1 
    lda #$f
    ldy #0
    sta (gfxb),y
    // *gfxb++ = %00001111;
    // [537] (byte*) gfx_init_plane_vertical::gfxb#1 ← ++ (byte*) gfx_init_plane_vertical::gfxb#2 -- pbuz1=_inc_pbuz1 
    inc.z gfxb
    bne !+
    inc.z gfxb+1
  !:
    // for ( byte bx : 0..39)
    // [538] (byte) gfx_init_plane_vertical::bx#1 ← ++ (byte) gfx_init_plane_vertical::bx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [539] if((byte) gfx_init_plane_vertical::bx#1!=(byte) $28) goto gfx_init_plane_vertical::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2
    // gfx_init_plane_vertical::@3
    // for(byte by : 0..199)
    // [540] (byte) gfx_init_plane_vertical::by#1 ← ++ (byte) gfx_init_plane_vertical::by#4 -- vbuz1=_inc_vbuz1 
    inc.z by
    // [541] if((byte) gfx_init_plane_vertical::by#1!=(byte) $c8) goto gfx_init_plane_vertical::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z by
    bne __b1
    // [542] phi from gfx_init_plane_vertical::@3 to gfx_init_plane_vertical::@4 [phi:gfx_init_plane_vertical::@3->gfx_init_plane_vertical::@4]
    // gfx_init_plane_vertical::@4
    // dtvSetCpuBankSegment1((byte)($4000/$4000))
    // [543] call dtvSetCpuBankSegment1 
  // Reset CPU BANK segment to $4000
    // [507] phi from gfx_init_plane_vertical::@4 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_vertical::@4->dtvSetCpuBankSegment1]
    // [507] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)(number) $4000/(number) $4000 [phi:gfx_init_plane_vertical::@4->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
    // gfx_init_plane_vertical::@return
    // }
    // [544] return 
    rts
}
  // gfx_init_plane_horisontal
// Initialize Plane with Horizontal Stripes
gfx_init_plane_horisontal: {
    .const gfxbCpuBank = PLANE_HORISONTAL/$4000
    .label gfxa = $10
    .label ay = $d
    // dtvSetCpuBankSegment1(gfxbCpuBank++)
    // [546] call dtvSetCpuBankSegment1 
    // [507] phi from gfx_init_plane_horisontal to dtvSetCpuBankSegment1 [phi:gfx_init_plane_horisontal->dtvSetCpuBankSegment1]
    // [507] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (const byte) gfx_init_plane_horisontal::gfxbCpuBank#0 [phi:gfx_init_plane_horisontal->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #gfxbCpuBank
    jsr dtvSetCpuBankSegment1
    // [547] phi from gfx_init_plane_horisontal to gfx_init_plane_horisontal::@1 [phi:gfx_init_plane_horisontal->gfx_init_plane_horisontal::@1]
    // [547] phi (byte*) gfx_init_plane_horisontal::gfxa#6 = (byte*)(word) $4000 [phi:gfx_init_plane_horisontal->gfx_init_plane_horisontal::@1#0] -- pbuz1=pbuc1 
    lda #<$4000
    sta.z gfxa
    lda #>$4000
    sta.z gfxa+1
    // [547] phi (byte) gfx_init_plane_horisontal::ay#4 = (byte) 0 [phi:gfx_init_plane_horisontal->gfx_init_plane_horisontal::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z ay
    // [547] phi from gfx_init_plane_horisontal::@6 to gfx_init_plane_horisontal::@1 [phi:gfx_init_plane_horisontal::@6->gfx_init_plane_horisontal::@1]
    // [547] phi (byte*) gfx_init_plane_horisontal::gfxa#6 = (byte*) gfx_init_plane_horisontal::gfxa#7 [phi:gfx_init_plane_horisontal::@6->gfx_init_plane_horisontal::@1#0] -- register_copy 
    // [547] phi (byte) gfx_init_plane_horisontal::ay#4 = (byte) gfx_init_plane_horisontal::ay#1 [phi:gfx_init_plane_horisontal::@6->gfx_init_plane_horisontal::@1#1] -- register_copy 
    // gfx_init_plane_horisontal::@1
  __b1:
    // [548] phi from gfx_init_plane_horisontal::@1 to gfx_init_plane_horisontal::@2 [phi:gfx_init_plane_horisontal::@1->gfx_init_plane_horisontal::@2]
    // [548] phi (byte) gfx_init_plane_horisontal::ax#2 = (byte) 0 [phi:gfx_init_plane_horisontal::@1->gfx_init_plane_horisontal::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [548] phi (byte*) gfx_init_plane_horisontal::gfxa#3 = (byte*) gfx_init_plane_horisontal::gfxa#6 [phi:gfx_init_plane_horisontal::@1->gfx_init_plane_horisontal::@2#1] -- register_copy 
    // [548] phi from gfx_init_plane_horisontal::@4 to gfx_init_plane_horisontal::@2 [phi:gfx_init_plane_horisontal::@4->gfx_init_plane_horisontal::@2]
    // [548] phi (byte) gfx_init_plane_horisontal::ax#2 = (byte) gfx_init_plane_horisontal::ax#1 [phi:gfx_init_plane_horisontal::@4->gfx_init_plane_horisontal::@2#0] -- register_copy 
    // [548] phi (byte*) gfx_init_plane_horisontal::gfxa#3 = (byte*) gfx_init_plane_horisontal::gfxa#7 [phi:gfx_init_plane_horisontal::@4->gfx_init_plane_horisontal::@2#1] -- register_copy 
    // gfx_init_plane_horisontal::@2
  __b2:
    // ay&4
    // [549] (byte~) gfx_init_plane_horisontal::$2 ← (byte) gfx_init_plane_horisontal::ay#4 & (byte) 4 -- vbuaa=vbuz1_band_vbuc1 
    lda #4
    and.z ay
    // if((ay&4)==0)
    // [550] if((byte~) gfx_init_plane_horisontal::$2==(byte) 0) goto gfx_init_plane_horisontal::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3
    // gfx_init_plane_horisontal::@5
    // *gfxa++ = %11111111
    // [551] *((byte*) gfx_init_plane_horisontal::gfxa#3) ← (byte) $ff -- _deref_pbuz1=vbuc1 
    lda #$ff
    ldy #0
    sta (gfxa),y
    // *gfxa++ = %11111111;
    // [552] (byte*) gfx_init_plane_horisontal::gfxa#2 ← ++ (byte*) gfx_init_plane_horisontal::gfxa#3 -- pbuz1=_inc_pbuz1 
    inc.z gfxa
    bne !+
    inc.z gfxa+1
  !:
    // [553] phi from gfx_init_plane_horisontal::@3 gfx_init_plane_horisontal::@5 to gfx_init_plane_horisontal::@4 [phi:gfx_init_plane_horisontal::@3/gfx_init_plane_horisontal::@5->gfx_init_plane_horisontal::@4]
    // [553] phi (byte*) gfx_init_plane_horisontal::gfxa#7 = (byte*) gfx_init_plane_horisontal::gfxa#1 [phi:gfx_init_plane_horisontal::@3/gfx_init_plane_horisontal::@5->gfx_init_plane_horisontal::@4#0] -- register_copy 
    // gfx_init_plane_horisontal::@4
  __b4:
    // for (byte ax : 0..39)
    // [554] (byte) gfx_init_plane_horisontal::ax#1 ← ++ (byte) gfx_init_plane_horisontal::ax#2 -- vbuxx=_inc_vbuxx 
    inx
    // [555] if((byte) gfx_init_plane_horisontal::ax#1!=(byte) $28) goto gfx_init_plane_horisontal::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2
    // gfx_init_plane_horisontal::@6
    // for(byte ay : 0..199)
    // [556] (byte) gfx_init_plane_horisontal::ay#1 ← ++ (byte) gfx_init_plane_horisontal::ay#4 -- vbuz1=_inc_vbuz1 
    inc.z ay
    // [557] if((byte) gfx_init_plane_horisontal::ay#1!=(byte) $c8) goto gfx_init_plane_horisontal::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z ay
    bne __b1
    // [558] phi from gfx_init_plane_horisontal::@6 to gfx_init_plane_horisontal::@7 [phi:gfx_init_plane_horisontal::@6->gfx_init_plane_horisontal::@7]
    // gfx_init_plane_horisontal::@7
    // dtvSetCpuBankSegment1((byte)($4000/$4000))
    // [559] call dtvSetCpuBankSegment1 
  // Reset CPU BANK segment to $4000
    // [507] phi from gfx_init_plane_horisontal::@7 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_horisontal::@7->dtvSetCpuBankSegment1]
    // [507] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)(number) $4000/(number) $4000 [phi:gfx_init_plane_horisontal::@7->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
    // gfx_init_plane_horisontal::@return
    // }
    // [560] return 
    rts
    // gfx_init_plane_horisontal::@3
  __b3:
    // *gfxa++ = %00000000
    // [561] *((byte*) gfx_init_plane_horisontal::gfxa#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (gfxa),y
    // *gfxa++ = %00000000;
    // [562] (byte*) gfx_init_plane_horisontal::gfxa#1 ← ++ (byte*) gfx_init_plane_horisontal::gfxa#3 -- pbuz1=_inc_pbuz1 
    inc.z gfxa
    bne !+
    inc.z gfxa+1
  !:
    jmp __b4
}
  // gfx_init_plane_charset8
// Initialize Plane with 8bpp charset
gfx_init_plane_charset8: {
    // 8bpp cells for Plane B (charset) - ROM charset with 256 colors
    .const gfxbCpuBank = PLANE_CHARSET8/$4000
    .label bits = $f
    .label chargen = $10
    .label gfxa = $14
    .label col = $12
    .label cr = $22
    .label ch = $e
    // dtvSetCpuBankSegment1(gfxbCpuBank++)
    // [564] call dtvSetCpuBankSegment1 
    // [507] phi from gfx_init_plane_charset8 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_charset8->dtvSetCpuBankSegment1]
    // [507] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (const byte) gfx_init_plane_charset8::gfxbCpuBank#0 [phi:gfx_init_plane_charset8->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #gfxbCpuBank
    jsr dtvSetCpuBankSegment1
    // gfx_init_plane_charset8::@9
    // *PROCPORT = PROCPORT_RAM_CHARROM
    // [565] *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_RAM_CHARROM -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_CHARROM
    sta PROCPORT
    // [566] phi from gfx_init_plane_charset8::@9 to gfx_init_plane_charset8::@1 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1]
    // [566] phi (byte) gfx_init_plane_charset8::ch#8 = (byte) 0 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z ch
    // [566] phi (byte) gfx_init_plane_charset8::col#6 = (byte) 0 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#1] -- vbuz1=vbuc1 
    sta.z col
    // [566] phi (byte*) gfx_init_plane_charset8::gfxa#6 = (byte*)(word) $4000 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#2] -- pbuz1=pbuc1 
    lda #<$4000
    sta.z gfxa
    lda #>$4000
    sta.z gfxa+1
    // [566] phi (byte*) gfx_init_plane_charset8::chargen#3 = (const nomodify byte*) CHARGEN [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#3] -- pbuz1=pbuc1 
    lda #<CHARGEN
    sta.z chargen
    lda #>CHARGEN
    sta.z chargen+1
    // [566] phi from gfx_init_plane_charset8::@7 to gfx_init_plane_charset8::@1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1]
    // [566] phi (byte) gfx_init_plane_charset8::ch#8 = (byte) gfx_init_plane_charset8::ch#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#0] -- register_copy 
    // [566] phi (byte) gfx_init_plane_charset8::col#6 = (byte) gfx_init_plane_charset8::col#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#1] -- register_copy 
    // [566] phi (byte*) gfx_init_plane_charset8::gfxa#6 = (byte*) gfx_init_plane_charset8::gfxa#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#2] -- register_copy 
    // [566] phi (byte*) gfx_init_plane_charset8::chargen#3 = (byte*) gfx_init_plane_charset8::chargen#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#3] -- register_copy 
    // gfx_init_plane_charset8::@1
  __b1:
    // [567] phi from gfx_init_plane_charset8::@1 to gfx_init_plane_charset8::@2 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2]
    // [567] phi (byte) gfx_init_plane_charset8::cr#6 = (byte) 0 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z cr
    // [567] phi (byte) gfx_init_plane_charset8::col#5 = (byte) gfx_init_plane_charset8::col#6 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#1] -- register_copy 
    // [567] phi (byte*) gfx_init_plane_charset8::gfxa#5 = (byte*) gfx_init_plane_charset8::gfxa#6 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#2] -- register_copy 
    // [567] phi (byte*) gfx_init_plane_charset8::chargen#2 = (byte*) gfx_init_plane_charset8::chargen#3 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#3] -- register_copy 
    // [567] phi from gfx_init_plane_charset8::@6 to gfx_init_plane_charset8::@2 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2]
    // [567] phi (byte) gfx_init_plane_charset8::cr#6 = (byte) gfx_init_plane_charset8::cr#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#0] -- register_copy 
    // [567] phi (byte) gfx_init_plane_charset8::col#5 = (byte) gfx_init_plane_charset8::col#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#1] -- register_copy 
    // [567] phi (byte*) gfx_init_plane_charset8::gfxa#5 = (byte*) gfx_init_plane_charset8::gfxa#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#2] -- register_copy 
    // [567] phi (byte*) gfx_init_plane_charset8::chargen#2 = (byte*) gfx_init_plane_charset8::chargen#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#3] -- register_copy 
    // gfx_init_plane_charset8::@2
  __b2:
    // bits = *chargen++
    // [568] (byte) gfx_init_plane_charset8::bits#0 ← *((byte*) gfx_init_plane_charset8::chargen#2) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (chargen),y
    sta.z bits
    // [569] (byte*) gfx_init_plane_charset8::chargen#1 ← ++ (byte*) gfx_init_plane_charset8::chargen#2 -- pbuz1=_inc_pbuz1 
    inc.z chargen
    bne !+
    inc.z chargen+1
  !:
    // [570] phi from gfx_init_plane_charset8::@2 to gfx_init_plane_charset8::@3 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3]
    // [570] phi (byte) gfx_init_plane_charset8::cp#2 = (byte) 0 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#0] -- vbuxx=vbuc1 
    ldx #0
    // [570] phi (byte) gfx_init_plane_charset8::col#2 = (byte) gfx_init_plane_charset8::col#5 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#1] -- register_copy 
    // [570] phi (byte*) gfx_init_plane_charset8::gfxa#2 = (byte*) gfx_init_plane_charset8::gfxa#5 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#2] -- register_copy 
    // [570] phi (byte) gfx_init_plane_charset8::bits#2 = (byte) gfx_init_plane_charset8::bits#0 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#3] -- register_copy 
    // [570] phi from gfx_init_plane_charset8::@4 to gfx_init_plane_charset8::@3 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3]
    // [570] phi (byte) gfx_init_plane_charset8::cp#2 = (byte) gfx_init_plane_charset8::cp#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#0] -- register_copy 
    // [570] phi (byte) gfx_init_plane_charset8::col#2 = (byte) gfx_init_plane_charset8::col#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#1] -- register_copy 
    // [570] phi (byte*) gfx_init_plane_charset8::gfxa#2 = (byte*) gfx_init_plane_charset8::gfxa#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#2] -- register_copy 
    // [570] phi (byte) gfx_init_plane_charset8::bits#2 = (byte) gfx_init_plane_charset8::bits#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#3] -- register_copy 
    // gfx_init_plane_charset8::@3
  __b3:
    // bits & $80
    // [571] (byte~) gfx_init_plane_charset8::$2 ← (byte) gfx_init_plane_charset8::bits#2 & (byte) $80 -- vbuaa=vbuz1_band_vbuc1 
    lda #$80
    and.z bits
    // if((bits & $80) != 0)
    // [572] if((byte~) gfx_init_plane_charset8::$2==(byte) 0) goto gfx_init_plane_charset8::@4 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b5
    // gfx_init_plane_charset8::@5
    // [573] (byte) gfx_init_plane_charset8::c#3 ← (byte) gfx_init_plane_charset8::col#2 -- vbuaa=vbuz1 
    lda.z col
    // [574] phi from gfx_init_plane_charset8::@5 to gfx_init_plane_charset8::@4 [phi:gfx_init_plane_charset8::@5->gfx_init_plane_charset8::@4]
    // [574] phi (byte) gfx_init_plane_charset8::c#2 = (byte) gfx_init_plane_charset8::c#3 [phi:gfx_init_plane_charset8::@5->gfx_init_plane_charset8::@4#0] -- register_copy 
    jmp __b4
    // [574] phi from gfx_init_plane_charset8::@3 to gfx_init_plane_charset8::@4 [phi:gfx_init_plane_charset8::@3->gfx_init_plane_charset8::@4]
  __b5:
    // [574] phi (byte) gfx_init_plane_charset8::c#2 = (byte) 0 [phi:gfx_init_plane_charset8::@3->gfx_init_plane_charset8::@4#0] -- vbuaa=vbuc1 
    lda #0
    // gfx_init_plane_charset8::@4
  __b4:
    // *gfxa++ = c
    // [575] *((byte*) gfx_init_plane_charset8::gfxa#2) ← (byte) gfx_init_plane_charset8::c#2 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (gfxa),y
    // *gfxa++ = c;
    // [576] (byte*) gfx_init_plane_charset8::gfxa#1 ← ++ (byte*) gfx_init_plane_charset8::gfxa#2 -- pbuz1=_inc_pbuz1 
    inc.z gfxa
    bne !+
    inc.z gfxa+1
  !:
    // bits = bits*2
    // [577] (byte) gfx_init_plane_charset8::bits#1 ← (byte) gfx_init_plane_charset8::bits#2 << (byte) 1 -- vbuz1=vbuz1_rol_1 
    asl.z bits
    // col++;
    // [578] (byte) gfx_init_plane_charset8::col#1 ← ++ (byte) gfx_init_plane_charset8::col#2 -- vbuz1=_inc_vbuz1 
    inc.z col
    // for ( byte cp : 0..7)
    // [579] (byte) gfx_init_plane_charset8::cp#1 ← ++ (byte) gfx_init_plane_charset8::cp#2 -- vbuxx=_inc_vbuxx 
    inx
    // [580] if((byte) gfx_init_plane_charset8::cp#1!=(byte) 8) goto gfx_init_plane_charset8::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne __b3
    // gfx_init_plane_charset8::@6
    // for ( byte cr : 0..7)
    // [581] (byte) gfx_init_plane_charset8::cr#1 ← ++ (byte) gfx_init_plane_charset8::cr#6 -- vbuz1=_inc_vbuz1 
    inc.z cr
    // [582] if((byte) gfx_init_plane_charset8::cr#1!=(byte) 8) goto gfx_init_plane_charset8::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z cr
    bne __b2
    // gfx_init_plane_charset8::@7
    // for(byte ch : $00..$ff)
    // [583] (byte) gfx_init_plane_charset8::ch#1 ← ++ (byte) gfx_init_plane_charset8::ch#8 -- vbuz1=_inc_vbuz1 
    inc.z ch
    // [584] if((byte) gfx_init_plane_charset8::ch#1!=(byte) 0) goto gfx_init_plane_charset8::@1 -- vbuz1_neq_0_then_la1 
    lda.z ch
    cmp #0
    bne __b1
    // gfx_init_plane_charset8::@8
    // *PROCPORT = PROCPORT_RAM_IO
    // [585] *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_RAM_IO -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
    // dtvSetCpuBankSegment1((byte)($4000/$4000))
    // [586] call dtvSetCpuBankSegment1 
  // Reset CPU BANK segment to $4000
    // [507] phi from gfx_init_plane_charset8::@8 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_charset8::@8->dtvSetCpuBankSegment1]
    // [507] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)(number) $4000/(number) $4000 [phi:gfx_init_plane_charset8::@8->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
    // gfx_init_plane_charset8::@return
    // }
    // [587] return 
    rts
}
  // gfx_init_plane_8bppchunky
// Initialize 8BPP Chunky Bitmap (contains 8bpp pixels)
gfx_init_plane_8bppchunky: {
    .label __5 = $1d
    .label gfxb = $10
    .label x = $14
    .label y = $e
    // dtvSetCpuBankSegment1(gfxbCpuBank++)
    // [589] call dtvSetCpuBankSegment1 
    // [507] phi from gfx_init_plane_8bppchunky to dtvSetCpuBankSegment1 [phi:gfx_init_plane_8bppchunky->dtvSetCpuBankSegment1]
    // [507] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)(const nomodify dword) PLANE_8BPP_CHUNKY/(word) $4000 [phi:gfx_init_plane_8bppchunky->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #PLANE_8BPP_CHUNKY/$4000
    jsr dtvSetCpuBankSegment1
    // [590] phi from gfx_init_plane_8bppchunky to gfx_init_plane_8bppchunky::@1 [phi:gfx_init_plane_8bppchunky->gfx_init_plane_8bppchunky::@1]
    // [590] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#7 = ++(byte)(const nomodify dword) PLANE_8BPP_CHUNKY/(word) $4000 [phi:gfx_init_plane_8bppchunky->gfx_init_plane_8bppchunky::@1#0] -- vbuxx=vbuc1 
    ldx #PLANE_8BPP_CHUNKY/$4000+1
    // [590] phi (byte) gfx_init_plane_8bppchunky::y#6 = (byte) 0 [phi:gfx_init_plane_8bppchunky->gfx_init_plane_8bppchunky::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    // [590] phi (byte*) gfx_init_plane_8bppchunky::gfxb#5 = (byte*) 16384 [phi:gfx_init_plane_8bppchunky->gfx_init_plane_8bppchunky::@1#2] -- pbuz1=pbuc1 
    lda #<$4000
    sta.z gfxb
    lda #>$4000
    sta.z gfxb+1
    // [590] phi from gfx_init_plane_8bppchunky::@5 to gfx_init_plane_8bppchunky::@1 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@1]
    // [590] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#7 = (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@1#0] -- register_copy 
    // [590] phi (byte) gfx_init_plane_8bppchunky::y#6 = (byte) gfx_init_plane_8bppchunky::y#1 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@1#1] -- register_copy 
    // [590] phi (byte*) gfx_init_plane_8bppchunky::gfxb#5 = (byte*) gfx_init_plane_8bppchunky::gfxb#1 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@1#2] -- register_copy 
    // gfx_init_plane_8bppchunky::@1
  __b1:
    // [591] phi from gfx_init_plane_8bppchunky::@1 to gfx_init_plane_8bppchunky::@2 [phi:gfx_init_plane_8bppchunky::@1->gfx_init_plane_8bppchunky::@2]
    // [591] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 = (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#7 [phi:gfx_init_plane_8bppchunky::@1->gfx_init_plane_8bppchunky::@2#0] -- register_copy 
    // [591] phi (word) gfx_init_plane_8bppchunky::x#2 = (word) 0 [phi:gfx_init_plane_8bppchunky::@1->gfx_init_plane_8bppchunky::@2#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z x
    sta.z x+1
    // [591] phi (byte*) gfx_init_plane_8bppchunky::gfxb#3 = (byte*) gfx_init_plane_8bppchunky::gfxb#5 [phi:gfx_init_plane_8bppchunky::@1->gfx_init_plane_8bppchunky::@2#2] -- register_copy 
    // [591] phi from gfx_init_plane_8bppchunky::@3 to gfx_init_plane_8bppchunky::@2 [phi:gfx_init_plane_8bppchunky::@3->gfx_init_plane_8bppchunky::@2]
    // [591] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 = (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 [phi:gfx_init_plane_8bppchunky::@3->gfx_init_plane_8bppchunky::@2#0] -- register_copy 
    // [591] phi (word) gfx_init_plane_8bppchunky::x#2 = (word) gfx_init_plane_8bppchunky::x#1 [phi:gfx_init_plane_8bppchunky::@3->gfx_init_plane_8bppchunky::@2#1] -- register_copy 
    // [591] phi (byte*) gfx_init_plane_8bppchunky::gfxb#3 = (byte*) gfx_init_plane_8bppchunky::gfxb#1 [phi:gfx_init_plane_8bppchunky::@3->gfx_init_plane_8bppchunky::@2#2] -- register_copy 
    // gfx_init_plane_8bppchunky::@2
  __b2:
    // if(gfxb==$8000)
    // [592] if((byte*) gfx_init_plane_8bppchunky::gfxb#3!=(word) $8000) goto gfx_init_plane_8bppchunky::@3 -- pbuz1_neq_vwuc1_then_la1 
    lda.z gfxb+1
    cmp #>$8000
    bne __b3
    lda.z gfxb
    cmp #<$8000
    bne __b3
    // gfx_init_plane_8bppchunky::@4
    // dtvSetCpuBankSegment1(gfxbCpuBank++)
    // [593] (byte) dtvSetCpuBankSegment1::cpuBankIdx#1 ← (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 -- vbuaa=vbuxx 
    txa
    // [594] call dtvSetCpuBankSegment1 
    // [507] phi from gfx_init_plane_8bppchunky::@4 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_8bppchunky::@4->dtvSetCpuBankSegment1]
    // [507] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte) dtvSetCpuBankSegment1::cpuBankIdx#1 [phi:gfx_init_plane_8bppchunky::@4->dtvSetCpuBankSegment1#0] -- register_copy 
    jsr dtvSetCpuBankSegment1
    // gfx_init_plane_8bppchunky::@7
    // dtvSetCpuBankSegment1(gfxbCpuBank++);
    // [595] (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#2 ← ++ (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 -- vbuxx=_inc_vbuxx 
    inx
    // [596] phi from gfx_init_plane_8bppchunky::@7 to gfx_init_plane_8bppchunky::@3 [phi:gfx_init_plane_8bppchunky::@7->gfx_init_plane_8bppchunky::@3]
    // [596] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 = (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#2 [phi:gfx_init_plane_8bppchunky::@7->gfx_init_plane_8bppchunky::@3#0] -- register_copy 
    // [596] phi (byte*) gfx_init_plane_8bppchunky::gfxb#4 = (byte*) 16384 [phi:gfx_init_plane_8bppchunky::@7->gfx_init_plane_8bppchunky::@3#1] -- pbuz1=pbuc1 
    lda #<$4000
    sta.z gfxb
    lda #>$4000
    sta.z gfxb+1
    // [596] phi from gfx_init_plane_8bppchunky::@2 to gfx_init_plane_8bppchunky::@3 [phi:gfx_init_plane_8bppchunky::@2->gfx_init_plane_8bppchunky::@3]
    // [596] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 = (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 [phi:gfx_init_plane_8bppchunky::@2->gfx_init_plane_8bppchunky::@3#0] -- register_copy 
    // [596] phi (byte*) gfx_init_plane_8bppchunky::gfxb#4 = (byte*) gfx_init_plane_8bppchunky::gfxb#3 [phi:gfx_init_plane_8bppchunky::@2->gfx_init_plane_8bppchunky::@3#1] -- register_copy 
    // gfx_init_plane_8bppchunky::@3
  __b3:
    // x+y
    // [597] (word~) gfx_init_plane_8bppchunky::$5 ← (word) gfx_init_plane_8bppchunky::x#2 + (byte) gfx_init_plane_8bppchunky::y#6 -- vwuz1=vwuz2_plus_vbuz3 
    lda.z y
    clc
    adc.z x
    sta.z __5
    lda #0
    adc.z x+1
    sta.z __5+1
    // c = (byte)(x+y)
    // [598] (byte) gfx_init_plane_8bppchunky::c#0 ← (byte)(word~) gfx_init_plane_8bppchunky::$5 -- vbuaa=_byte_vwuz1 
    lda.z __5
    // *gfxb++ = c
    // [599] *((byte*) gfx_init_plane_8bppchunky::gfxb#4) ← (byte) gfx_init_plane_8bppchunky::c#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (gfxb),y
    // *gfxb++ = c;
    // [600] (byte*) gfx_init_plane_8bppchunky::gfxb#1 ← ++ (byte*) gfx_init_plane_8bppchunky::gfxb#4 -- pbuz1=_inc_pbuz1 
    inc.z gfxb
    bne !+
    inc.z gfxb+1
  !:
    // for (word x : 0..319)
    // [601] (word) gfx_init_plane_8bppchunky::x#1 ← ++ (word) gfx_init_plane_8bppchunky::x#2 -- vwuz1=_inc_vwuz1 
    inc.z x
    bne !+
    inc.z x+1
  !:
    // [602] if((word) gfx_init_plane_8bppchunky::x#1!=(word) $140) goto gfx_init_plane_8bppchunky::@2 -- vwuz1_neq_vwuc1_then_la1 
    lda.z x+1
    cmp #>$140
    bne __b2
    lda.z x
    cmp #<$140
    bne __b2
    // gfx_init_plane_8bppchunky::@5
    // for(byte y : 0..199)
    // [603] (byte) gfx_init_plane_8bppchunky::y#1 ← ++ (byte) gfx_init_plane_8bppchunky::y#6 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [604] if((byte) gfx_init_plane_8bppchunky::y#1!=(byte) $c8) goto gfx_init_plane_8bppchunky::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z y
    bne __b1
    // [605] phi from gfx_init_plane_8bppchunky::@5 to gfx_init_plane_8bppchunky::@6 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@6]
    // gfx_init_plane_8bppchunky::@6
    // dtvSetCpuBankSegment1((byte)($4000/$4000))
    // [606] call dtvSetCpuBankSegment1 
  // Reset CPU BANK segment to $4000
    // [507] phi from gfx_init_plane_8bppchunky::@6 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_8bppchunky::@6->dtvSetCpuBankSegment1]
    // [507] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)(number) $4000/(number) $4000 [phi:gfx_init_plane_8bppchunky::@6->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
    // gfx_init_plane_8bppchunky::@return
    // }
    // [607] return 
    rts
}
  // gfx_init_vic_bitmap
// Initialize VIC bitmap
gfx_init_vic_bitmap: {
    .const lines_cnt = 9
    .label l = $22
    // bitmap_init(VIC_BITMAP)
    // [609] call bitmap_init 
  // Draw some lines on the bitmap
    // [761] phi from gfx_init_vic_bitmap to bitmap_init [phi:gfx_init_vic_bitmap->bitmap_init]
    jsr bitmap_init
    // [610] phi from gfx_init_vic_bitmap to gfx_init_vic_bitmap::@3 [phi:gfx_init_vic_bitmap->gfx_init_vic_bitmap::@3]
    // gfx_init_vic_bitmap::@3
    // bitmap_clear()
    // [611] call bitmap_clear 
    jsr bitmap_clear
    // [612] phi from gfx_init_vic_bitmap::@3 to gfx_init_vic_bitmap::@1 [phi:gfx_init_vic_bitmap::@3->gfx_init_vic_bitmap::@1]
    // [612] phi (byte) gfx_init_vic_bitmap::l#2 = (byte) 0 [phi:gfx_init_vic_bitmap::@3->gfx_init_vic_bitmap::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    // gfx_init_vic_bitmap::@1
  __b1:
    // for(byte l=0; l<lines_cnt;l++)
    // [613] if((byte) gfx_init_vic_bitmap::l#2<(const byte) gfx_init_vic_bitmap::lines_cnt) goto gfx_init_vic_bitmap::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z l
    cmp #lines_cnt
    bcc __b2
    // gfx_init_vic_bitmap::@return
    // }
    // [614] return 
    rts
    // gfx_init_vic_bitmap::@2
  __b2:
    // bitmap_line(lines_x[l], lines_x[l+1], lines_y[l], lines_y[l+1])
    // [615] (byte) bitmap_line::x0#0 ← *((const byte*) gfx_init_vic_bitmap::lines_x + (byte) gfx_init_vic_bitmap::l#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z l
    lda lines_x,y
    sta.z bitmap_line.x0
    // [616] (byte) bitmap_line::x1#0 ← *((const byte*) gfx_init_vic_bitmap::lines_x+(byte) 1 + (byte) gfx_init_vic_bitmap::l#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    lda lines_x+1,y
    sta.z bitmap_line.x1
    // [617] (byte) bitmap_line::y0#0 ← *((const byte*) gfx_init_vic_bitmap::lines_y + (byte) gfx_init_vic_bitmap::l#2) -- vbuxx=pbuc1_derefidx_vbuz1 
    ldx lines_y,y
    // [618] (byte) bitmap_line::y1#0 ← *((const byte*) gfx_init_vic_bitmap::lines_y+(byte) 1 + (byte) gfx_init_vic_bitmap::l#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    lda lines_y+1,y
    sta.z bitmap_line.y1
    // [619] call bitmap_line 
    jsr bitmap_line
    // gfx_init_vic_bitmap::@4
    // for(byte l=0; l<lines_cnt;l++)
    // [620] (byte) gfx_init_vic_bitmap::l#1 ← ++ (byte) gfx_init_vic_bitmap::l#2 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [612] phi from gfx_init_vic_bitmap::@4 to gfx_init_vic_bitmap::@1 [phi:gfx_init_vic_bitmap::@4->gfx_init_vic_bitmap::@1]
    // [612] phi (byte) gfx_init_vic_bitmap::l#2 = (byte) gfx_init_vic_bitmap::l#1 [phi:gfx_init_vic_bitmap::@4->gfx_init_vic_bitmap::@1#0] -- register_copy 
    jmp __b1
    lines_x: .byte 0, $ff, $ff, 0, 0, $80, $ff, $80, 0, $80
    lines_y: .byte 0, 0, $c7, $c7, 0, 0, $64, $c7, $64, 0
}
  // bitmap_line
// Draw a line on the bitmap
// bitmap_line(byte zp($16) x0, byte zp($21) x1, byte register(X) y0, byte zp($13) y1)
bitmap_line: {
    .label xd = $12
    .label x0 = $16
    .label x1 = $21
    .label y1 = $13
    // if(x0<x1)
    // [621] if((byte) bitmap_line::x0#0<(byte) bitmap_line::x1#0) goto bitmap_line::@1 -- vbuz1_lt_vbuz2_then_la1 
    lda.z x0
    cmp.z x1
    bcc __b1
    // bitmap_line::@2
    // xd = x0-x1
    // [622] (byte) bitmap_line::xd#2 ← (byte) bitmap_line::x0#0 - (byte) bitmap_line::x1#0 -- vbuz1=vbuz2_minus_vbuz3 
    sec
    sbc.z x1
    sta.z xd
    // if(y0<y1)
    // [623] if((byte) bitmap_line::y0#0<(byte) bitmap_line::y1#0) goto bitmap_line::@7 -- vbuxx_lt_vbuz1_then_la1 
    cpx.z y1
    bcc __b7
    // bitmap_line::@3
    // yd = y0-y1
    // [624] (byte) bitmap_line::yd#2 ← (byte) bitmap_line::y0#0 - (byte) bitmap_line::y1#0 -- vbuyy=vbuxx_minus_vbuz1 
    txa
    sec
    sbc.z y1
    tay
    // if(yd<xd)
    // [625] if((byte) bitmap_line::yd#2<(byte) bitmap_line::xd#2) goto bitmap_line::@8 -- vbuyy_lt_vbuz1_then_la1 
    cpy.z xd
    bcc __b8
    // bitmap_line::@4
    // bitmap_line_ydxi(y1, x1, y0, yd, xd)
    // [626] (byte) bitmap_line_ydxi::y#0 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuz2 
    lda.z y1
    sta.z bitmap_line_ydxi.y
    // [627] (byte) bitmap_line_ydxi::x#0 ← (byte) bitmap_line::x1#0
    // [628] (byte) bitmap_line_ydxi::y1#0 ← (byte) bitmap_line::y0#0 -- vbuz1=vbuxx 
    stx.z bitmap_line_ydxi.y1
    // [629] (byte) bitmap_line_ydxi::yd#0 ← (byte) bitmap_line::yd#2 -- vbuz1=vbuyy 
    sty.z bitmap_line_ydxi.yd
    // [630] (byte) bitmap_line_ydxi::xd#0 ← (byte) bitmap_line::xd#2
    // [631] call bitmap_line_ydxi 
    // [705] phi from bitmap_line::@4 to bitmap_line_ydxi [phi:bitmap_line::@4->bitmap_line_ydxi]
    // [705] phi (byte) bitmap_line_ydxi::y1#6 = (byte) bitmap_line_ydxi::y1#0 [phi:bitmap_line::@4->bitmap_line_ydxi#0] -- register_copy 
    // [705] phi (byte) bitmap_line_ydxi::yd#5 = (byte) bitmap_line_ydxi::yd#0 [phi:bitmap_line::@4->bitmap_line_ydxi#1] -- register_copy 
    // [705] phi (byte) bitmap_line_ydxi::y#6 = (byte) bitmap_line_ydxi::y#0 [phi:bitmap_line::@4->bitmap_line_ydxi#2] -- register_copy 
    // [705] phi (byte) bitmap_line_ydxi::x#5 = (byte) bitmap_line_ydxi::x#0 [phi:bitmap_line::@4->bitmap_line_ydxi#3] -- register_copy 
    // [705] phi (byte) bitmap_line_ydxi::xd#2 = (byte) bitmap_line_ydxi::xd#0 [phi:bitmap_line::@4->bitmap_line_ydxi#4] -- register_copy 
    jsr bitmap_line_ydxi
    // bitmap_line::@return
    // }
    // [632] return 
    rts
    // bitmap_line::@8
  __b8:
    // bitmap_line_xdyi(x1, y1, x0, xd, yd)
    // [633] (byte) bitmap_line_xdyi::x#0 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z bitmap_line_xdyi.x
    // [634] (byte) bitmap_line_xdyi::y#0 ← (byte) bitmap_line::y1#0 -- vbuxx=vbuz1 
    ldx.z y1
    // [635] (byte) bitmap_line_xdyi::x1#0 ← (byte) bitmap_line::x0#0
    // [636] (byte) bitmap_line_xdyi::xd#0 ← (byte) bitmap_line::xd#2
    // [637] (byte) bitmap_line_xdyi::yd#0 ← (byte) bitmap_line::yd#2 -- vbuz1=vbuyy 
    sty.z bitmap_line_xdyi.yd
    // [638] call bitmap_line_xdyi 
    // [683] phi from bitmap_line::@8 to bitmap_line_xdyi [phi:bitmap_line::@8->bitmap_line_xdyi]
    // [683] phi (byte) bitmap_line_xdyi::x1#6 = (byte) bitmap_line_xdyi::x1#0 [phi:bitmap_line::@8->bitmap_line_xdyi#0] -- register_copy 
    // [683] phi (byte) bitmap_line_xdyi::xd#5 = (byte) bitmap_line_xdyi::xd#0 [phi:bitmap_line::@8->bitmap_line_xdyi#1] -- register_copy 
    // [683] phi (byte) bitmap_line_xdyi::y#5 = (byte) bitmap_line_xdyi::y#0 [phi:bitmap_line::@8->bitmap_line_xdyi#2] -- register_copy 
    // [683] phi (byte) bitmap_line_xdyi::x#6 = (byte) bitmap_line_xdyi::x#0 [phi:bitmap_line::@8->bitmap_line_xdyi#3] -- register_copy 
    // [683] phi (byte) bitmap_line_xdyi::yd#2 = (byte) bitmap_line_xdyi::yd#0 [phi:bitmap_line::@8->bitmap_line_xdyi#4] -- register_copy 
    jsr bitmap_line_xdyi
    rts
    // bitmap_line::@7
  __b7:
    // yd = y1-y0
    // [639] (byte) bitmap_line::yd#1 ← (byte) bitmap_line::y1#0 - (byte) bitmap_line::y0#0 -- vbuyy=vbuz1_minus_vbuxx 
    txa
    eor #$ff
    sec
    adc.z y1
    tay
    // if(yd<xd)
    // [640] if((byte) bitmap_line::yd#1<(byte) bitmap_line::xd#2) goto bitmap_line::@9 -- vbuyy_lt_vbuz1_then_la1 
    cpy.z xd
    bcc __b9
    // bitmap_line::@10
    // bitmap_line_ydxd(y0, x0, y1, yd, xd)
    // [641] (byte) bitmap_line_ydxd::y#0 ← (byte) bitmap_line::y0#0 -- vbuz1=vbuxx 
    stx.z bitmap_line_ydxd.y
    // [642] (byte) bitmap_line_ydxd::x#0 ← (byte) bitmap_line::x0#0
    // [643] (byte) bitmap_line_ydxd::y1#0 ← (byte) bitmap_line::y1#0
    // [644] (byte) bitmap_line_ydxd::yd#0 ← (byte) bitmap_line::yd#1 -- vbuz1=vbuyy 
    sty.z bitmap_line_ydxd.yd
    // [645] (byte) bitmap_line_ydxd::xd#0 ← (byte) bitmap_line::xd#2
    // [646] call bitmap_line_ydxd 
    // [735] phi from bitmap_line::@10 to bitmap_line_ydxd [phi:bitmap_line::@10->bitmap_line_ydxd]
    // [735] phi (byte) bitmap_line_ydxd::y1#6 = (byte) bitmap_line_ydxd::y1#0 [phi:bitmap_line::@10->bitmap_line_ydxd#0] -- register_copy 
    // [735] phi (byte) bitmap_line_ydxd::yd#5 = (byte) bitmap_line_ydxd::yd#0 [phi:bitmap_line::@10->bitmap_line_ydxd#1] -- register_copy 
    // [735] phi (byte) bitmap_line_ydxd::y#7 = (byte) bitmap_line_ydxd::y#0 [phi:bitmap_line::@10->bitmap_line_ydxd#2] -- register_copy 
    // [735] phi (byte) bitmap_line_ydxd::x#5 = (byte) bitmap_line_ydxd::x#0 [phi:bitmap_line::@10->bitmap_line_ydxd#3] -- register_copy 
    // [735] phi (byte) bitmap_line_ydxd::xd#2 = (byte) bitmap_line_ydxd::xd#0 [phi:bitmap_line::@10->bitmap_line_ydxd#4] -- register_copy 
    jsr bitmap_line_ydxd
    rts
    // bitmap_line::@9
  __b9:
    // bitmap_line_xdyd(x1, y1, x0, xd, yd)
    // [647] (byte) bitmap_line_xdyd::x#0 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z bitmap_line_xdyd.x
    // [648] (byte) bitmap_line_xdyd::y#0 ← (byte) bitmap_line::y1#0 -- vbuxx=vbuz1 
    ldx.z y1
    // [649] (byte) bitmap_line_xdyd::x1#0 ← (byte) bitmap_line::x0#0
    // [650] (byte) bitmap_line_xdyd::xd#0 ← (byte) bitmap_line::xd#2
    // [651] (byte) bitmap_line_xdyd::yd#0 ← (byte) bitmap_line::yd#1 -- vbuz1=vbuyy 
    sty.z bitmap_line_xdyd.yd
    // [652] call bitmap_line_xdyd 
    // [720] phi from bitmap_line::@9 to bitmap_line_xdyd [phi:bitmap_line::@9->bitmap_line_xdyd]
    // [720] phi (byte) bitmap_line_xdyd::x1#6 = (byte) bitmap_line_xdyd::x1#0 [phi:bitmap_line::@9->bitmap_line_xdyd#0] -- register_copy 
    // [720] phi (byte) bitmap_line_xdyd::xd#5 = (byte) bitmap_line_xdyd::xd#0 [phi:bitmap_line::@9->bitmap_line_xdyd#1] -- register_copy 
    // [720] phi (byte) bitmap_line_xdyd::y#5 = (byte) bitmap_line_xdyd::y#0 [phi:bitmap_line::@9->bitmap_line_xdyd#2] -- register_copy 
    // [720] phi (byte) bitmap_line_xdyd::x#6 = (byte) bitmap_line_xdyd::x#0 [phi:bitmap_line::@9->bitmap_line_xdyd#3] -- register_copy 
    // [720] phi (byte) bitmap_line_xdyd::yd#2 = (byte) bitmap_line_xdyd::yd#0 [phi:bitmap_line::@9->bitmap_line_xdyd#4] -- register_copy 
    jsr bitmap_line_xdyd
    rts
    // bitmap_line::@1
  __b1:
    // xd = x1-x0
    // [653] (byte) bitmap_line::xd#1 ← (byte) bitmap_line::x1#0 - (byte) bitmap_line::x0#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda.z x1
    sec
    sbc.z x0
    sta.z xd
    // if(y0<y1)
    // [654] if((byte) bitmap_line::y0#0<(byte) bitmap_line::y1#0) goto bitmap_line::@11 -- vbuxx_lt_vbuz1_then_la1 
    cpx.z y1
    bcc __b11
    // bitmap_line::@5
    // yd = y0-y1
    // [655] (byte) bitmap_line::yd#10 ← (byte) bitmap_line::y0#0 - (byte) bitmap_line::y1#0 -- vbuyy=vbuxx_minus_vbuz1 
    txa
    sec
    sbc.z y1
    tay
    // if(yd<xd)
    // [656] if((byte) bitmap_line::yd#10<(byte) bitmap_line::xd#1) goto bitmap_line::@12 -- vbuyy_lt_vbuz1_then_la1 
    cpy.z xd
    bcc __b12
    // bitmap_line::@6
    // bitmap_line_ydxd(y1, x1, y0, yd, xd)
    // [657] (byte) bitmap_line_ydxd::y#1 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuz2 
    lda.z y1
    sta.z bitmap_line_ydxd.y
    // [658] (byte) bitmap_line_ydxd::x#1 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z bitmap_line_ydxd.x
    // [659] (byte) bitmap_line_ydxd::y1#1 ← (byte) bitmap_line::y0#0 -- vbuz1=vbuxx 
    stx.z bitmap_line_ydxd.y1
    // [660] (byte) bitmap_line_ydxd::yd#1 ← (byte) bitmap_line::yd#10 -- vbuz1=vbuyy 
    sty.z bitmap_line_ydxd.yd
    // [661] (byte) bitmap_line_ydxd::xd#1 ← (byte) bitmap_line::xd#1
    // [662] call bitmap_line_ydxd 
    // [735] phi from bitmap_line::@6 to bitmap_line_ydxd [phi:bitmap_line::@6->bitmap_line_ydxd]
    // [735] phi (byte) bitmap_line_ydxd::y1#6 = (byte) bitmap_line_ydxd::y1#1 [phi:bitmap_line::@6->bitmap_line_ydxd#0] -- register_copy 
    // [735] phi (byte) bitmap_line_ydxd::yd#5 = (byte) bitmap_line_ydxd::yd#1 [phi:bitmap_line::@6->bitmap_line_ydxd#1] -- register_copy 
    // [735] phi (byte) bitmap_line_ydxd::y#7 = (byte) bitmap_line_ydxd::y#1 [phi:bitmap_line::@6->bitmap_line_ydxd#2] -- register_copy 
    // [735] phi (byte) bitmap_line_ydxd::x#5 = (byte) bitmap_line_ydxd::x#1 [phi:bitmap_line::@6->bitmap_line_ydxd#3] -- register_copy 
    // [735] phi (byte) bitmap_line_ydxd::xd#2 = (byte) bitmap_line_ydxd::xd#1 [phi:bitmap_line::@6->bitmap_line_ydxd#4] -- register_copy 
    jsr bitmap_line_ydxd
    rts
    // bitmap_line::@12
  __b12:
    // bitmap_line_xdyd(x0, y0, x1, xd, yd)
    // [663] (byte) bitmap_line_xdyd::x#1 ← (byte) bitmap_line::x0#0 -- vbuz1=vbuz2 
    lda.z x0
    sta.z bitmap_line_xdyd.x
    // [664] (byte) bitmap_line_xdyd::y#1 ← (byte) bitmap_line::y0#0
    // [665] (byte) bitmap_line_xdyd::x1#1 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z bitmap_line_xdyd.x1
    // [666] (byte) bitmap_line_xdyd::xd#1 ← (byte) bitmap_line::xd#1
    // [667] (byte) bitmap_line_xdyd::yd#1 ← (byte) bitmap_line::yd#10 -- vbuz1=vbuyy 
    sty.z bitmap_line_xdyd.yd
    // [668] call bitmap_line_xdyd 
    // [720] phi from bitmap_line::@12 to bitmap_line_xdyd [phi:bitmap_line::@12->bitmap_line_xdyd]
    // [720] phi (byte) bitmap_line_xdyd::x1#6 = (byte) bitmap_line_xdyd::x1#1 [phi:bitmap_line::@12->bitmap_line_xdyd#0] -- register_copy 
    // [720] phi (byte) bitmap_line_xdyd::xd#5 = (byte) bitmap_line_xdyd::xd#1 [phi:bitmap_line::@12->bitmap_line_xdyd#1] -- register_copy 
    // [720] phi (byte) bitmap_line_xdyd::y#5 = (byte) bitmap_line_xdyd::y#1 [phi:bitmap_line::@12->bitmap_line_xdyd#2] -- register_copy 
    // [720] phi (byte) bitmap_line_xdyd::x#6 = (byte) bitmap_line_xdyd::x#1 [phi:bitmap_line::@12->bitmap_line_xdyd#3] -- register_copy 
    // [720] phi (byte) bitmap_line_xdyd::yd#2 = (byte) bitmap_line_xdyd::yd#1 [phi:bitmap_line::@12->bitmap_line_xdyd#4] -- register_copy 
    jsr bitmap_line_xdyd
    rts
    // bitmap_line::@11
  __b11:
    // yd = y1-y0
    // [669] (byte) bitmap_line::yd#11 ← (byte) bitmap_line::y1#0 - (byte) bitmap_line::y0#0 -- vbuyy=vbuz1_minus_vbuxx 
    txa
    eor #$ff
    sec
    adc.z y1
    tay
    // if(yd<xd)
    // [670] if((byte) bitmap_line::yd#11<(byte) bitmap_line::xd#1) goto bitmap_line::@13 -- vbuyy_lt_vbuz1_then_la1 
    cpy.z xd
    bcc __b13
    // bitmap_line::@14
    // bitmap_line_ydxi(y0, x0, y1, yd, xd)
    // [671] (byte) bitmap_line_ydxi::y#1 ← (byte) bitmap_line::y0#0 -- vbuz1=vbuxx 
    stx.z bitmap_line_ydxi.y
    // [672] (byte) bitmap_line_ydxi::x#1 ← (byte) bitmap_line::x0#0 -- vbuz1=vbuz2 
    lda.z x0
    sta.z bitmap_line_ydxi.x
    // [673] (byte) bitmap_line_ydxi::y1#1 ← (byte) bitmap_line::y1#0
    // [674] (byte) bitmap_line_ydxi::yd#1 ← (byte) bitmap_line::yd#11 -- vbuz1=vbuyy 
    sty.z bitmap_line_ydxi.yd
    // [675] (byte) bitmap_line_ydxi::xd#1 ← (byte) bitmap_line::xd#1
    // [676] call bitmap_line_ydxi 
    // [705] phi from bitmap_line::@14 to bitmap_line_ydxi [phi:bitmap_line::@14->bitmap_line_ydxi]
    // [705] phi (byte) bitmap_line_ydxi::y1#6 = (byte) bitmap_line_ydxi::y1#1 [phi:bitmap_line::@14->bitmap_line_ydxi#0] -- register_copy 
    // [705] phi (byte) bitmap_line_ydxi::yd#5 = (byte) bitmap_line_ydxi::yd#1 [phi:bitmap_line::@14->bitmap_line_ydxi#1] -- register_copy 
    // [705] phi (byte) bitmap_line_ydxi::y#6 = (byte) bitmap_line_ydxi::y#1 [phi:bitmap_line::@14->bitmap_line_ydxi#2] -- register_copy 
    // [705] phi (byte) bitmap_line_ydxi::x#5 = (byte) bitmap_line_ydxi::x#1 [phi:bitmap_line::@14->bitmap_line_ydxi#3] -- register_copy 
    // [705] phi (byte) bitmap_line_ydxi::xd#2 = (byte) bitmap_line_ydxi::xd#1 [phi:bitmap_line::@14->bitmap_line_ydxi#4] -- register_copy 
    jsr bitmap_line_ydxi
    rts
    // bitmap_line::@13
  __b13:
    // bitmap_line_xdyi(x0, y0, x1, xd, yd)
    // [677] (byte) bitmap_line_xdyi::x#1 ← (byte) bitmap_line::x0#0 -- vbuz1=vbuz2 
    lda.z x0
    sta.z bitmap_line_xdyi.x
    // [678] (byte) bitmap_line_xdyi::y#1 ← (byte) bitmap_line::y0#0
    // [679] (byte) bitmap_line_xdyi::x1#1 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z bitmap_line_xdyi.x1
    // [680] (byte) bitmap_line_xdyi::xd#1 ← (byte) bitmap_line::xd#1
    // [681] (byte) bitmap_line_xdyi::yd#1 ← (byte) bitmap_line::yd#11 -- vbuz1=vbuyy 
    sty.z bitmap_line_xdyi.yd
    // [682] call bitmap_line_xdyi 
    // [683] phi from bitmap_line::@13 to bitmap_line_xdyi [phi:bitmap_line::@13->bitmap_line_xdyi]
    // [683] phi (byte) bitmap_line_xdyi::x1#6 = (byte) bitmap_line_xdyi::x1#1 [phi:bitmap_line::@13->bitmap_line_xdyi#0] -- register_copy 
    // [683] phi (byte) bitmap_line_xdyi::xd#5 = (byte) bitmap_line_xdyi::xd#1 [phi:bitmap_line::@13->bitmap_line_xdyi#1] -- register_copy 
    // [683] phi (byte) bitmap_line_xdyi::y#5 = (byte) bitmap_line_xdyi::y#1 [phi:bitmap_line::@13->bitmap_line_xdyi#2] -- register_copy 
    // [683] phi (byte) bitmap_line_xdyi::x#6 = (byte) bitmap_line_xdyi::x#1 [phi:bitmap_line::@13->bitmap_line_xdyi#3] -- register_copy 
    // [683] phi (byte) bitmap_line_xdyi::yd#2 = (byte) bitmap_line_xdyi::yd#1 [phi:bitmap_line::@13->bitmap_line_xdyi#4] -- register_copy 
    jsr bitmap_line_xdyi
    rts
}
  // bitmap_line_xdyi
// bitmap_line_xdyi(byte zp($d) x, byte register(X) y, byte zp($16) x1, byte zp($12) xd, byte zp($f) yd)
bitmap_line_xdyi: {
    .label x = $d
    .label x1 = $16
    .label xd = $12
    .label yd = $f
    .label e = $13
    // e = yd>>1
    // [684] (byte) bitmap_line_xdyi::e#0 ← (byte) bitmap_line_xdyi::yd#2 >> (byte) 1 -- vbuz1=vbuz2_ror_1 
    lda.z yd
    lsr
    sta.z e
    // [685] phi from bitmap_line_xdyi bitmap_line_xdyi::@2 to bitmap_line_xdyi::@1 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1]
    // [685] phi (byte) bitmap_line_xdyi::e#3 = (byte) bitmap_line_xdyi::e#0 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1#0] -- register_copy 
    // [685] phi (byte) bitmap_line_xdyi::y#3 = (byte) bitmap_line_xdyi::y#5 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1#1] -- register_copy 
    // [685] phi (byte) bitmap_line_xdyi::x#3 = (byte) bitmap_line_xdyi::x#6 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1#2] -- register_copy 
    // bitmap_line_xdyi::@1
  __b1:
    // bitmap_plot(x,y)
    // [686] (byte) bitmap_plot::x#0 ← (byte) bitmap_line_xdyi::x#3 -- vbuyy=vbuz1 
    ldy.z x
    // [687] (byte) bitmap_plot::y#0 ← (byte) bitmap_line_xdyi::y#3
    // [688] call bitmap_plot 
    // [698] phi from bitmap_line_xdyi::@1 to bitmap_plot [phi:bitmap_line_xdyi::@1->bitmap_plot]
    // [698] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#0 [phi:bitmap_line_xdyi::@1->bitmap_plot#0] -- register_copy 
    // [698] phi (byte) bitmap_plot::x#4 = (byte) bitmap_plot::x#0 [phi:bitmap_line_xdyi::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    // bitmap_line_xdyi::@4
    // x++;
    // [689] (byte) bitmap_line_xdyi::x#2 ← ++ (byte) bitmap_line_xdyi::x#3 -- vbuz1=_inc_vbuz1 
    inc.z x
    // e = e+yd
    // [690] (byte) bitmap_line_xdyi::e#1 ← (byte) bitmap_line_xdyi::e#3 + (byte) bitmap_line_xdyi::yd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z e
    clc
    adc.z yd
    sta.z e
    // if(xd<e)
    // [691] if((byte) bitmap_line_xdyi::xd#5>=(byte) bitmap_line_xdyi::e#1) goto bitmap_line_xdyi::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z xd
    cmp.z e
    bcs __b2
    // bitmap_line_xdyi::@3
    // y++;
    // [692] (byte) bitmap_line_xdyi::y#2 ← ++ (byte) bitmap_line_xdyi::y#3 -- vbuxx=_inc_vbuxx 
    inx
    // e = e - xd
    // [693] (byte) bitmap_line_xdyi::e#2 ← (byte) bitmap_line_xdyi::e#1 - (byte) bitmap_line_xdyi::xd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z e
    sec
    sbc.z xd
    sta.z e
    // [694] phi from bitmap_line_xdyi::@3 bitmap_line_xdyi::@4 to bitmap_line_xdyi::@2 [phi:bitmap_line_xdyi::@3/bitmap_line_xdyi::@4->bitmap_line_xdyi::@2]
    // [694] phi (byte) bitmap_line_xdyi::e#6 = (byte) bitmap_line_xdyi::e#2 [phi:bitmap_line_xdyi::@3/bitmap_line_xdyi::@4->bitmap_line_xdyi::@2#0] -- register_copy 
    // [694] phi (byte) bitmap_line_xdyi::y#6 = (byte) bitmap_line_xdyi::y#2 [phi:bitmap_line_xdyi::@3/bitmap_line_xdyi::@4->bitmap_line_xdyi::@2#1] -- register_copy 
    // bitmap_line_xdyi::@2
  __b2:
    // x1+1
    // [695] (byte~) bitmap_line_xdyi::$6 ← (byte) bitmap_line_xdyi::x1#6 + (byte) 1 -- vbuaa=vbuz1_plus_1 
    lda.z x1
    clc
    adc #1
    // while (x!=(x1+1))
    // [696] if((byte) bitmap_line_xdyi::x#2!=(byte~) bitmap_line_xdyi::$6) goto bitmap_line_xdyi::@1 -- vbuz1_neq_vbuaa_then_la1 
    cmp.z x
    bne __b1
    // bitmap_line_xdyi::@return
    // }
    // [697] return 
    rts
}
  // bitmap_plot
// bitmap_plot(byte register(Y) x, byte register(X) y)
bitmap_plot: {
    .label plotter_x = $1d
    .label plotter_y = $1f
    .label plotter = $1d
    // plotter_x = { bitmap_plot_xhi[x], bitmap_plot_xlo[x] }
    // [699] (word) bitmap_plot::plotter_x#0 ← *((const to_nomodify byte*) bitmap_plot_xhi + (byte) bitmap_plot::x#4) w= *((const to_nomodify byte*) bitmap_plot_xlo + (byte) bitmap_plot::x#4) -- vwuz1=pbuc1_derefidx_vbuyy_word_pbuc2_derefidx_vbuyy 
    lda bitmap_plot_xhi,y
    sta.z plotter_x+1
    lda bitmap_plot_xlo,y
    sta.z plotter_x
    // plotter_y = { bitmap_plot_yhi[y], bitmap_plot_ylo[y] }
    // [700] (word) bitmap_plot::plotter_y#0 ← *((const to_nomodify byte*) bitmap_plot_yhi + (byte) bitmap_plot::y#4) w= *((const to_nomodify byte*) bitmap_plot_ylo + (byte) bitmap_plot::y#4) -- vwuz1=pbuc1_derefidx_vbuxx_word_pbuc2_derefidx_vbuxx 
    lda bitmap_plot_yhi,x
    sta.z plotter_y+1
    lda bitmap_plot_ylo,x
    sta.z plotter_y
    // plotter_x+plotter_y
    // [701] (word) bitmap_plot::plotter#0 ← (word) bitmap_plot::plotter_x#0 + (word) bitmap_plot::plotter_y#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z plotter
    clc
    adc.z plotter_y
    sta.z plotter
    lda.z plotter+1
    adc.z plotter_y+1
    sta.z plotter+1
    // *plotter | bitmap_plot_bit[x]
    // [702] (byte~) bitmap_plot::$1 ← *((byte*)(word) bitmap_plot::plotter#0) | *((const to_nomodify byte*) bitmap_plot_bit + (byte) bitmap_plot::x#4) -- vbuaa=_deref_pbuz1_bor_pbuc1_derefidx_vbuyy 
    lda bitmap_plot_bit,y
    ldy #0
    ora (plotter),y
    // *plotter = *plotter | bitmap_plot_bit[x]
    // [703] *((byte*)(word) bitmap_plot::plotter#0) ← (byte~) bitmap_plot::$1 -- _deref_pbuz1=vbuaa 
    sta (plotter),y
    // bitmap_plot::@return
    // }
    // [704] return 
    rts
}
  // bitmap_line_ydxi
// bitmap_line_ydxi(byte zp($e) y, byte zp($21) x, byte zp($13) y1, byte zp($d) yd, byte zp($12) xd)
bitmap_line_ydxi: {
    .label y = $e
    .label x = $21
    .label y1 = $13
    .label yd = $d
    .label xd = $12
    .label e = $f
    // e = xd>>1
    // [706] (byte) bitmap_line_ydxi::e#0 ← (byte) bitmap_line_ydxi::xd#2 >> (byte) 1 -- vbuz1=vbuz2_ror_1 
    lda.z xd
    lsr
    sta.z e
    // [707] phi from bitmap_line_ydxi bitmap_line_ydxi::@2 to bitmap_line_ydxi::@1 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1]
    // [707] phi (byte) bitmap_line_ydxi::e#3 = (byte) bitmap_line_ydxi::e#0 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1#0] -- register_copy 
    // [707] phi (byte) bitmap_line_ydxi::y#3 = (byte) bitmap_line_ydxi::y#6 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1#1] -- register_copy 
    // [707] phi (byte) bitmap_line_ydxi::x#3 = (byte) bitmap_line_ydxi::x#5 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1#2] -- register_copy 
    // bitmap_line_ydxi::@1
  __b1:
    // bitmap_plot(x,y)
    // [708] (byte) bitmap_plot::x#2 ← (byte) bitmap_line_ydxi::x#3 -- vbuyy=vbuz1 
    ldy.z x
    // [709] (byte) bitmap_plot::y#2 ← (byte) bitmap_line_ydxi::y#3 -- vbuxx=vbuz1 
    ldx.z y
    // [710] call bitmap_plot 
    // [698] phi from bitmap_line_ydxi::@1 to bitmap_plot [phi:bitmap_line_ydxi::@1->bitmap_plot]
    // [698] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#2 [phi:bitmap_line_ydxi::@1->bitmap_plot#0] -- register_copy 
    // [698] phi (byte) bitmap_plot::x#4 = (byte) bitmap_plot::x#2 [phi:bitmap_line_ydxi::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    // bitmap_line_ydxi::@4
    // y++;
    // [711] (byte) bitmap_line_ydxi::y#2 ← ++ (byte) bitmap_line_ydxi::y#3 -- vbuz1=_inc_vbuz1 
    inc.z y
    // e = e+xd
    // [712] (byte) bitmap_line_ydxi::e#1 ← (byte) bitmap_line_ydxi::e#3 + (byte) bitmap_line_ydxi::xd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z e
    clc
    adc.z xd
    sta.z e
    // if(yd<e)
    // [713] if((byte) bitmap_line_ydxi::yd#5>=(byte) bitmap_line_ydxi::e#1) goto bitmap_line_ydxi::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z yd
    cmp.z e
    bcs __b2
    // bitmap_line_ydxi::@3
    // x++;
    // [714] (byte) bitmap_line_ydxi::x#2 ← ++ (byte) bitmap_line_ydxi::x#3 -- vbuz1=_inc_vbuz1 
    inc.z x
    // e = e - yd
    // [715] (byte) bitmap_line_ydxi::e#2 ← (byte) bitmap_line_ydxi::e#1 - (byte) bitmap_line_ydxi::yd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z e
    sec
    sbc.z yd
    sta.z e
    // [716] phi from bitmap_line_ydxi::@3 bitmap_line_ydxi::@4 to bitmap_line_ydxi::@2 [phi:bitmap_line_ydxi::@3/bitmap_line_ydxi::@4->bitmap_line_ydxi::@2]
    // [716] phi (byte) bitmap_line_ydxi::e#6 = (byte) bitmap_line_ydxi::e#2 [phi:bitmap_line_ydxi::@3/bitmap_line_ydxi::@4->bitmap_line_ydxi::@2#0] -- register_copy 
    // [716] phi (byte) bitmap_line_ydxi::x#6 = (byte) bitmap_line_ydxi::x#2 [phi:bitmap_line_ydxi::@3/bitmap_line_ydxi::@4->bitmap_line_ydxi::@2#1] -- register_copy 
    // bitmap_line_ydxi::@2
  __b2:
    // y1+1
    // [717] (byte~) bitmap_line_ydxi::$6 ← (byte) bitmap_line_ydxi::y1#6 + (byte) 1 -- vbuxx=vbuz1_plus_1 
    ldx.z y1
    inx
    // while (y!=(y1+1))
    // [718] if((byte) bitmap_line_ydxi::y#2!=(byte~) bitmap_line_ydxi::$6) goto bitmap_line_ydxi::@1 -- vbuz1_neq_vbuxx_then_la1 
    cpx.z y
    bne __b1
    // bitmap_line_ydxi::@return
    // }
    // [719] return 
    rts
}
  // bitmap_line_xdyd
// bitmap_line_xdyd(byte zp($f) x, byte register(X) y, byte zp($16) x1, byte zp($12) xd, byte zp($e) yd)
bitmap_line_xdyd: {
    .label x = $f
    .label x1 = $16
    .label xd = $12
    .label yd = $e
    .label e = $d
    // e = yd>>1
    // [721] (byte) bitmap_line_xdyd::e#0 ← (byte) bitmap_line_xdyd::yd#2 >> (byte) 1 -- vbuz1=vbuz2_ror_1 
    lda.z yd
    lsr
    sta.z e
    // [722] phi from bitmap_line_xdyd bitmap_line_xdyd::@2 to bitmap_line_xdyd::@1 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1]
    // [722] phi (byte) bitmap_line_xdyd::e#3 = (byte) bitmap_line_xdyd::e#0 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1#0] -- register_copy 
    // [722] phi (byte) bitmap_line_xdyd::y#3 = (byte) bitmap_line_xdyd::y#5 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1#1] -- register_copy 
    // [722] phi (byte) bitmap_line_xdyd::x#3 = (byte) bitmap_line_xdyd::x#6 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1#2] -- register_copy 
    // bitmap_line_xdyd::@1
  __b1:
    // bitmap_plot(x,y)
    // [723] (byte) bitmap_plot::x#1 ← (byte) bitmap_line_xdyd::x#3 -- vbuyy=vbuz1 
    ldy.z x
    // [724] (byte) bitmap_plot::y#1 ← (byte) bitmap_line_xdyd::y#3
    // [725] call bitmap_plot 
    // [698] phi from bitmap_line_xdyd::@1 to bitmap_plot [phi:bitmap_line_xdyd::@1->bitmap_plot]
    // [698] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#1 [phi:bitmap_line_xdyd::@1->bitmap_plot#0] -- register_copy 
    // [698] phi (byte) bitmap_plot::x#4 = (byte) bitmap_plot::x#1 [phi:bitmap_line_xdyd::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    // bitmap_line_xdyd::@4
    // x++;
    // [726] (byte) bitmap_line_xdyd::x#2 ← ++ (byte) bitmap_line_xdyd::x#3 -- vbuz1=_inc_vbuz1 
    inc.z x
    // e = e+yd
    // [727] (byte) bitmap_line_xdyd::e#1 ← (byte) bitmap_line_xdyd::e#3 + (byte) bitmap_line_xdyd::yd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z e
    clc
    adc.z yd
    sta.z e
    // if(xd<e)
    // [728] if((byte) bitmap_line_xdyd::xd#5>=(byte) bitmap_line_xdyd::e#1) goto bitmap_line_xdyd::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z xd
    cmp.z e
    bcs __b2
    // bitmap_line_xdyd::@3
    // y--;
    // [729] (byte) bitmap_line_xdyd::y#2 ← -- (byte) bitmap_line_xdyd::y#3 -- vbuxx=_dec_vbuxx 
    dex
    // e = e - xd
    // [730] (byte) bitmap_line_xdyd::e#2 ← (byte) bitmap_line_xdyd::e#1 - (byte) bitmap_line_xdyd::xd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z e
    sec
    sbc.z xd
    sta.z e
    // [731] phi from bitmap_line_xdyd::@3 bitmap_line_xdyd::@4 to bitmap_line_xdyd::@2 [phi:bitmap_line_xdyd::@3/bitmap_line_xdyd::@4->bitmap_line_xdyd::@2]
    // [731] phi (byte) bitmap_line_xdyd::e#6 = (byte) bitmap_line_xdyd::e#2 [phi:bitmap_line_xdyd::@3/bitmap_line_xdyd::@4->bitmap_line_xdyd::@2#0] -- register_copy 
    // [731] phi (byte) bitmap_line_xdyd::y#6 = (byte) bitmap_line_xdyd::y#2 [phi:bitmap_line_xdyd::@3/bitmap_line_xdyd::@4->bitmap_line_xdyd::@2#1] -- register_copy 
    // bitmap_line_xdyd::@2
  __b2:
    // x1+1
    // [732] (byte~) bitmap_line_xdyd::$6 ← (byte) bitmap_line_xdyd::x1#6 + (byte) 1 -- vbuaa=vbuz1_plus_1 
    lda.z x1
    clc
    adc #1
    // while (x!=(x1+1))
    // [733] if((byte) bitmap_line_xdyd::x#2!=(byte~) bitmap_line_xdyd::$6) goto bitmap_line_xdyd::@1 -- vbuz1_neq_vbuaa_then_la1 
    cmp.z x
    bne __b1
    // bitmap_line_xdyd::@return
    // }
    // [734] return 
    rts
}
  // bitmap_line_ydxd
// bitmap_line_ydxd(byte zp($e) y, byte zp($16) x, byte zp($13) y1, byte zp($d) yd, byte zp($12) xd)
bitmap_line_ydxd: {
    .label y = $e
    .label x = $16
    .label y1 = $13
    .label yd = $d
    .label xd = $12
    .label e = $f
    // e = xd>>1
    // [736] (byte) bitmap_line_ydxd::e#0 ← (byte) bitmap_line_ydxd::xd#2 >> (byte) 1 -- vbuz1=vbuz2_ror_1 
    lda.z xd
    lsr
    sta.z e
    // [737] phi from bitmap_line_ydxd bitmap_line_ydxd::@2 to bitmap_line_ydxd::@1 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1]
    // [737] phi (byte) bitmap_line_ydxd::e#3 = (byte) bitmap_line_ydxd::e#0 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1#0] -- register_copy 
    // [737] phi (byte) bitmap_line_ydxd::y#2 = (byte) bitmap_line_ydxd::y#7 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1#1] -- register_copy 
    // [737] phi (byte) bitmap_line_ydxd::x#3 = (byte) bitmap_line_ydxd::x#5 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1#2] -- register_copy 
    // bitmap_line_ydxd::@1
  __b1:
    // bitmap_plot(x,y)
    // [738] (byte) bitmap_plot::x#3 ← (byte) bitmap_line_ydxd::x#3 -- vbuyy=vbuz1 
    ldy.z x
    // [739] (byte) bitmap_plot::y#3 ← (byte) bitmap_line_ydxd::y#2 -- vbuxx=vbuz1 
    ldx.z y
    // [740] call bitmap_plot 
    // [698] phi from bitmap_line_ydxd::@1 to bitmap_plot [phi:bitmap_line_ydxd::@1->bitmap_plot]
    // [698] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#3 [phi:bitmap_line_ydxd::@1->bitmap_plot#0] -- register_copy 
    // [698] phi (byte) bitmap_plot::x#4 = (byte) bitmap_plot::x#3 [phi:bitmap_line_ydxd::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    // bitmap_line_ydxd::@4
    // y = y++;
    // [741] (byte) bitmap_line_ydxd::y#3 ← ++ (byte) bitmap_line_ydxd::y#2 -- vbuz1=_inc_vbuz1 
    inc.z y
    // e = e+xd
    // [742] (byte) bitmap_line_ydxd::e#1 ← (byte) bitmap_line_ydxd::e#3 + (byte) bitmap_line_ydxd::xd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z e
    clc
    adc.z xd
    sta.z e
    // if(yd<e)
    // [743] if((byte) bitmap_line_ydxd::yd#5>=(byte) bitmap_line_ydxd::e#1) goto bitmap_line_ydxd::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z yd
    cmp.z e
    bcs __b2
    // bitmap_line_ydxd::@3
    // x--;
    // [744] (byte) bitmap_line_ydxd::x#2 ← -- (byte) bitmap_line_ydxd::x#3 -- vbuz1=_dec_vbuz1 
    dec.z x
    // e = e - yd
    // [745] (byte) bitmap_line_ydxd::e#2 ← (byte) bitmap_line_ydxd::e#1 - (byte) bitmap_line_ydxd::yd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z e
    sec
    sbc.z yd
    sta.z e
    // [746] phi from bitmap_line_ydxd::@3 bitmap_line_ydxd::@4 to bitmap_line_ydxd::@2 [phi:bitmap_line_ydxd::@3/bitmap_line_ydxd::@4->bitmap_line_ydxd::@2]
    // [746] phi (byte) bitmap_line_ydxd::e#6 = (byte) bitmap_line_ydxd::e#2 [phi:bitmap_line_ydxd::@3/bitmap_line_ydxd::@4->bitmap_line_ydxd::@2#0] -- register_copy 
    // [746] phi (byte) bitmap_line_ydxd::x#6 = (byte) bitmap_line_ydxd::x#2 [phi:bitmap_line_ydxd::@3/bitmap_line_ydxd::@4->bitmap_line_ydxd::@2#1] -- register_copy 
    // bitmap_line_ydxd::@2
  __b2:
    // y1+1
    // [747] (byte~) bitmap_line_ydxd::$6 ← (byte) bitmap_line_ydxd::y1#6 + (byte) 1 -- vbuxx=vbuz1_plus_1 
    ldx.z y1
    inx
    // while (y!=(y1+1))
    // [748] if((byte) bitmap_line_ydxd::y#3!=(byte~) bitmap_line_ydxd::$6) goto bitmap_line_ydxd::@1 -- vbuz1_neq_vbuxx_then_la1 
    cpx.z y
    bne __b1
    // bitmap_line_ydxd::@return
    // }
    // [749] return 
    rts
}
  // bitmap_clear
// Clear all graphics on the bitmap
bitmap_clear: {
    .label bitmap = $10
    .label y = $16
    // bitmap = (char*) { bitmap_plot_xhi[0], bitmap_plot_xlo[0] }
    // [750] (word) bitmap_clear::bitmap#0 ← *((const to_nomodify byte*) bitmap_plot_xhi) w= *((const to_nomodify byte*) bitmap_plot_xlo) -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda bitmap_plot_xlo
    sta.z bitmap
    lda bitmap_plot_xhi
    sta.z bitmap+1
    // [751] (byte*) bitmap_clear::bitmap#5 ← (byte*)(word) bitmap_clear::bitmap#0
    // [752] phi from bitmap_clear to bitmap_clear::@1 [phi:bitmap_clear->bitmap_clear::@1]
    // [752] phi (byte) bitmap_clear::y#4 = (byte) 0 [phi:bitmap_clear->bitmap_clear::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    // [752] phi (byte*) bitmap_clear::bitmap#3 = (byte*) bitmap_clear::bitmap#5 [phi:bitmap_clear->bitmap_clear::@1#1] -- register_copy 
    // [752] phi from bitmap_clear::@3 to bitmap_clear::@1 [phi:bitmap_clear::@3->bitmap_clear::@1]
    // [752] phi (byte) bitmap_clear::y#4 = (byte) bitmap_clear::y#1 [phi:bitmap_clear::@3->bitmap_clear::@1#0] -- register_copy 
    // [752] phi (byte*) bitmap_clear::bitmap#3 = (byte*) bitmap_clear::bitmap#1 [phi:bitmap_clear::@3->bitmap_clear::@1#1] -- register_copy 
    // bitmap_clear::@1
  __b1:
    // [753] phi from bitmap_clear::@1 to bitmap_clear::@2 [phi:bitmap_clear::@1->bitmap_clear::@2]
    // [753] phi (byte) bitmap_clear::x#2 = (byte) 0 [phi:bitmap_clear::@1->bitmap_clear::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [753] phi (byte*) bitmap_clear::bitmap#2 = (byte*) bitmap_clear::bitmap#3 [phi:bitmap_clear::@1->bitmap_clear::@2#1] -- register_copy 
    // [753] phi from bitmap_clear::@2 to bitmap_clear::@2 [phi:bitmap_clear::@2->bitmap_clear::@2]
    // [753] phi (byte) bitmap_clear::x#2 = (byte) bitmap_clear::x#1 [phi:bitmap_clear::@2->bitmap_clear::@2#0] -- register_copy 
    // [753] phi (byte*) bitmap_clear::bitmap#2 = (byte*) bitmap_clear::bitmap#1 [phi:bitmap_clear::@2->bitmap_clear::@2#1] -- register_copy 
    // bitmap_clear::@2
  __b2:
    // *bitmap++ = 0
    // [754] *((byte*) bitmap_clear::bitmap#2) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (bitmap),y
    // *bitmap++ = 0;
    // [755] (byte*) bitmap_clear::bitmap#1 ← ++ (byte*) bitmap_clear::bitmap#2 -- pbuz1=_inc_pbuz1 
    inc.z bitmap
    bne !+
    inc.z bitmap+1
  !:
    // for( char x: 0..199 )
    // [756] (byte) bitmap_clear::x#1 ← ++ (byte) bitmap_clear::x#2 -- vbuxx=_inc_vbuxx 
    inx
    // [757] if((byte) bitmap_clear::x#1!=(byte) $c8) goto bitmap_clear::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$c8
    bne __b2
    // bitmap_clear::@3
    // for( char y: 0..39 )
    // [758] (byte) bitmap_clear::y#1 ← ++ (byte) bitmap_clear::y#4 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [759] if((byte) bitmap_clear::y#1!=(byte) $28) goto bitmap_clear::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z y
    bne __b1
    // bitmap_clear::@return
    // }
    // [760] return 
    rts
}
  // bitmap_init
// Initialize the bitmap plotter tables for a specific bitmap
bitmap_init: {
    .label __10 = $21
    .label yoffs = $14
    // [762] phi from bitmap_init to bitmap_init::@1 [phi:bitmap_init->bitmap_init::@1]
    // [762] phi (byte) bitmap_init::bits#3 = (byte) $80 [phi:bitmap_init->bitmap_init::@1#0] -- vbuyy=vbuc1 
    ldy #$80
    // [762] phi (byte) bitmap_init::x#2 = (byte) 0 [phi:bitmap_init->bitmap_init::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [762] phi from bitmap_init::@2 to bitmap_init::@1 [phi:bitmap_init::@2->bitmap_init::@1]
    // [762] phi (byte) bitmap_init::bits#3 = (byte) bitmap_init::bits#4 [phi:bitmap_init::@2->bitmap_init::@1#0] -- register_copy 
    // [762] phi (byte) bitmap_init::x#2 = (byte) bitmap_init::x#1 [phi:bitmap_init::@2->bitmap_init::@1#1] -- register_copy 
    // bitmap_init::@1
  __b1:
    // x&$f8
    // [763] (byte~) bitmap_init::$0 ← (byte) bitmap_init::x#2 & (byte) $f8 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f8
    // bitmap_plot_xlo[x] = x&$f8
    // [764] *((const to_nomodify byte*) bitmap_plot_xlo + (byte) bitmap_init::x#2) ← (byte~) bitmap_init::$0 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_xlo,x
    // bitmap_plot_xhi[x] = >bitmap
    // [765] *((const to_nomodify byte*) bitmap_plot_xhi + (byte) bitmap_init::x#2) ← >(const nomodify byte*) VIC_BITMAP -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #>VIC_BITMAP
    sta bitmap_plot_xhi,x
    // bitmap_plot_bit[x] = bits
    // [766] *((const to_nomodify byte*) bitmap_plot_bit + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3 -- pbuc1_derefidx_vbuxx=vbuyy 
    tya
    sta bitmap_plot_bit,x
    // bits = bits>>1
    // [767] (byte) bitmap_init::bits#1 ← (byte) bitmap_init::bits#3 >> (byte) 1 -- vbuyy=vbuyy_ror_1 
    tya
    lsr
    tay
    // if(bits==0)
    // [768] if((byte) bitmap_init::bits#1!=(byte) 0) goto bitmap_init::@6 -- vbuyy_neq_0_then_la1 
    cpy #0
    bne __b2
    // [770] phi from bitmap_init::@1 to bitmap_init::@2 [phi:bitmap_init::@1->bitmap_init::@2]
    // [770] phi (byte) bitmap_init::bits#4 = (byte) $80 [phi:bitmap_init::@1->bitmap_init::@2#0] -- vbuyy=vbuc1 
    ldy #$80
    // [769] phi from bitmap_init::@1 to bitmap_init::@6 [phi:bitmap_init::@1->bitmap_init::@6]
    // bitmap_init::@6
    // [770] phi from bitmap_init::@6 to bitmap_init::@2 [phi:bitmap_init::@6->bitmap_init::@2]
    // [770] phi (byte) bitmap_init::bits#4 = (byte) bitmap_init::bits#1 [phi:bitmap_init::@6->bitmap_init::@2#0] -- register_copy 
    // bitmap_init::@2
  __b2:
    // for(char x : 0..255)
    // [771] (byte) bitmap_init::x#1 ← ++ (byte) bitmap_init::x#2 -- vbuxx=_inc_vbuxx 
    inx
    // [772] if((byte) bitmap_init::x#1!=(byte) 0) goto bitmap_init::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b1
    // [773] phi from bitmap_init::@2 to bitmap_init::@3 [phi:bitmap_init::@2->bitmap_init::@3]
    // [773] phi (byte*) bitmap_init::yoffs#2 = (byte*) 0 [phi:bitmap_init::@2->bitmap_init::@3#0] -- pbuz1=pbuc1 
    lda #<0
    sta.z yoffs
    sta.z yoffs+1
    // [773] phi (byte) bitmap_init::y#2 = (byte) 0 [phi:bitmap_init::@2->bitmap_init::@3#1] -- vbuxx=vbuc1 
    tax
    // [773] phi from bitmap_init::@4 to bitmap_init::@3 [phi:bitmap_init::@4->bitmap_init::@3]
    // [773] phi (byte*) bitmap_init::yoffs#2 = (byte*) bitmap_init::yoffs#4 [phi:bitmap_init::@4->bitmap_init::@3#0] -- register_copy 
    // [773] phi (byte) bitmap_init::y#2 = (byte) bitmap_init::y#1 [phi:bitmap_init::@4->bitmap_init::@3#1] -- register_copy 
    // bitmap_init::@3
  __b3:
    // y&$7
    // [774] (byte~) bitmap_init::$10 ← (byte) bitmap_init::y#2 & (byte) 7 -- vbuz1=vbuxx_band_vbuc1 
    lda #7
    sax.z __10
    // <yoffs
    // [775] (byte~) bitmap_init::$7 ← < (byte*) bitmap_init::yoffs#2 -- vbuaa=_lo_pbuz1 
    lda.z yoffs
    // y&$7 | <yoffs
    // [776] (byte~) bitmap_init::$8 ← (byte~) bitmap_init::$10 | (byte~) bitmap_init::$7 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __10
    // bitmap_plot_ylo[y] = y&$7 | <yoffs
    // [777] *((const to_nomodify byte*) bitmap_plot_ylo + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$8 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_ylo,x
    // >yoffs
    // [778] (byte~) bitmap_init::$9 ← > (byte*) bitmap_init::yoffs#2 -- vbuaa=_hi_pbuz1 
    lda.z yoffs+1
    // bitmap_plot_yhi[y] = >yoffs
    // [779] *((const to_nomodify byte*) bitmap_plot_yhi + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$9 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_yhi,x
    // if((y&$7)==7)
    // [780] if((byte~) bitmap_init::$10!=(byte) 7) goto bitmap_init::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp.z __10
    bne __b4
    // bitmap_init::@5
    // yoffs = yoffs + 40*8
    // [781] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (word)(number) $28*(number) 8 -- pbuz1=pbuz1_plus_vwuc1 
    clc
    lda.z yoffs
    adc #<$28*8
    sta.z yoffs
    lda.z yoffs+1
    adc #>$28*8
    sta.z yoffs+1
    // [782] phi from bitmap_init::@3 bitmap_init::@5 to bitmap_init::@4 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4]
    // [782] phi (byte*) bitmap_init::yoffs#4 = (byte*) bitmap_init::yoffs#2 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4#0] -- register_copy 
    // bitmap_init::@4
  __b4:
    // for(char y : 0..255)
    // [783] (byte) bitmap_init::y#1 ← ++ (byte) bitmap_init::y#2 -- vbuxx=_inc_vbuxx 
    inx
    // [784] if((byte) bitmap_init::y#1!=(byte) 0) goto bitmap_init::@3 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b3
    // bitmap_init::@return
    // }
    // [785] return 
    rts
}
  // gfx_init_charset
gfx_init_charset: {
    .label charset = $10
    .label chargen = $14
    .label c = $21
    // *PROCPORT = $32
    // [786] *((const nomodify byte*) PROCPORT) ← (byte) $32 -- _deref_pbuc1=vbuc2 
    lda #$32
    sta PROCPORT
    // [787] phi from gfx_init_charset to gfx_init_charset::@1 [phi:gfx_init_charset->gfx_init_charset::@1]
    // [787] phi (byte) gfx_init_charset::c#4 = (byte) 0 [phi:gfx_init_charset->gfx_init_charset::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    // [787] phi (byte*) gfx_init_charset::charset#3 = (const nomodify byte*) VIC_CHARSET_ROM [phi:gfx_init_charset->gfx_init_charset::@1#1] -- pbuz1=pbuc1 
    lda #<VIC_CHARSET_ROM
    sta.z charset
    lda #>VIC_CHARSET_ROM
    sta.z charset+1
    // [787] phi (byte*) gfx_init_charset::chargen#3 = (const nomodify byte*) CHARGEN [phi:gfx_init_charset->gfx_init_charset::@1#2] -- pbuz1=pbuc1 
    lda #<CHARGEN
    sta.z chargen
    lda #>CHARGEN
    sta.z chargen+1
    // [787] phi from gfx_init_charset::@3 to gfx_init_charset::@1 [phi:gfx_init_charset::@3->gfx_init_charset::@1]
    // [787] phi (byte) gfx_init_charset::c#4 = (byte) gfx_init_charset::c#1 [phi:gfx_init_charset::@3->gfx_init_charset::@1#0] -- register_copy 
    // [787] phi (byte*) gfx_init_charset::charset#3 = (byte*) gfx_init_charset::charset#1 [phi:gfx_init_charset::@3->gfx_init_charset::@1#1] -- register_copy 
    // [787] phi (byte*) gfx_init_charset::chargen#3 = (byte*) gfx_init_charset::chargen#1 [phi:gfx_init_charset::@3->gfx_init_charset::@1#2] -- register_copy 
    // gfx_init_charset::@1
  __b1:
    // [788] phi from gfx_init_charset::@1 to gfx_init_charset::@2 [phi:gfx_init_charset::@1->gfx_init_charset::@2]
    // [788] phi (byte) gfx_init_charset::l#2 = (byte) 0 [phi:gfx_init_charset::@1->gfx_init_charset::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [788] phi (byte*) gfx_init_charset::charset#2 = (byte*) gfx_init_charset::charset#3 [phi:gfx_init_charset::@1->gfx_init_charset::@2#1] -- register_copy 
    // [788] phi (byte*) gfx_init_charset::chargen#2 = (byte*) gfx_init_charset::chargen#3 [phi:gfx_init_charset::@1->gfx_init_charset::@2#2] -- register_copy 
    // [788] phi from gfx_init_charset::@2 to gfx_init_charset::@2 [phi:gfx_init_charset::@2->gfx_init_charset::@2]
    // [788] phi (byte) gfx_init_charset::l#2 = (byte) gfx_init_charset::l#1 [phi:gfx_init_charset::@2->gfx_init_charset::@2#0] -- register_copy 
    // [788] phi (byte*) gfx_init_charset::charset#2 = (byte*) gfx_init_charset::charset#1 [phi:gfx_init_charset::@2->gfx_init_charset::@2#1] -- register_copy 
    // [788] phi (byte*) gfx_init_charset::chargen#2 = (byte*) gfx_init_charset::chargen#1 [phi:gfx_init_charset::@2->gfx_init_charset::@2#2] -- register_copy 
    // gfx_init_charset::@2
  __b2:
    // *charset++ = *chargen++
    // [789] *((byte*) gfx_init_charset::charset#2) ← *((byte*) gfx_init_charset::chargen#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (chargen),y
    sta (charset),y
    // *charset++ = *chargen++;
    // [790] (byte*) gfx_init_charset::charset#1 ← ++ (byte*) gfx_init_charset::charset#2 -- pbuz1=_inc_pbuz1 
    inc.z charset
    bne !+
    inc.z charset+1
  !:
    // [791] (byte*) gfx_init_charset::chargen#1 ← ++ (byte*) gfx_init_charset::chargen#2 -- pbuz1=_inc_pbuz1 
    inc.z chargen
    bne !+
    inc.z chargen+1
  !:
    // for( byte l: 0..7)
    // [792] (byte) gfx_init_charset::l#1 ← ++ (byte) gfx_init_charset::l#2 -- vbuxx=_inc_vbuxx 
    inx
    // [793] if((byte) gfx_init_charset::l#1!=(byte) 8) goto gfx_init_charset::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne __b2
    // gfx_init_charset::@3
    // for(byte c: 0..$ff)
    // [794] (byte) gfx_init_charset::c#1 ← ++ (byte) gfx_init_charset::c#4 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [795] if((byte) gfx_init_charset::c#1!=(byte) 0) goto gfx_init_charset::@1 -- vbuz1_neq_0_then_la1 
    lda.z c
    cmp #0
    bne __b1
    // gfx_init_charset::@4
    // *PROCPORT = $37
    // [796] *((const nomodify byte*) PROCPORT) ← (byte) $37 -- _deref_pbuc1=vbuc2 
    lda #$37
    sta PROCPORT
    // gfx_init_charset::@return
    // }
    // [797] return 
    rts
}
  // gfx_init_screen4
// Initialize VIC screen 4 - all chars are 00
gfx_init_screen4: {
    .label ch = $10
    .label cy = $e
    // [799] phi from gfx_init_screen4 to gfx_init_screen4::@1 [phi:gfx_init_screen4->gfx_init_screen4::@1]
    // [799] phi (byte) gfx_init_screen4::cy#4 = (byte) 0 [phi:gfx_init_screen4->gfx_init_screen4::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    // [799] phi (byte*) gfx_init_screen4::ch#3 = (const nomodify byte*) VIC_SCREEN4 [phi:gfx_init_screen4->gfx_init_screen4::@1#1] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN4
    sta.z ch
    lda #>VIC_SCREEN4
    sta.z ch+1
    // [799] phi from gfx_init_screen4::@3 to gfx_init_screen4::@1 [phi:gfx_init_screen4::@3->gfx_init_screen4::@1]
    // [799] phi (byte) gfx_init_screen4::cy#4 = (byte) gfx_init_screen4::cy#1 [phi:gfx_init_screen4::@3->gfx_init_screen4::@1#0] -- register_copy 
    // [799] phi (byte*) gfx_init_screen4::ch#3 = (byte*) gfx_init_screen4::ch#1 [phi:gfx_init_screen4::@3->gfx_init_screen4::@1#1] -- register_copy 
    // gfx_init_screen4::@1
  __b1:
    // [800] phi from gfx_init_screen4::@1 to gfx_init_screen4::@2 [phi:gfx_init_screen4::@1->gfx_init_screen4::@2]
    // [800] phi (byte) gfx_init_screen4::cx#2 = (byte) 0 [phi:gfx_init_screen4::@1->gfx_init_screen4::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [800] phi (byte*) gfx_init_screen4::ch#2 = (byte*) gfx_init_screen4::ch#3 [phi:gfx_init_screen4::@1->gfx_init_screen4::@2#1] -- register_copy 
    // [800] phi from gfx_init_screen4::@2 to gfx_init_screen4::@2 [phi:gfx_init_screen4::@2->gfx_init_screen4::@2]
    // [800] phi (byte) gfx_init_screen4::cx#2 = (byte) gfx_init_screen4::cx#1 [phi:gfx_init_screen4::@2->gfx_init_screen4::@2#0] -- register_copy 
    // [800] phi (byte*) gfx_init_screen4::ch#2 = (byte*) gfx_init_screen4::ch#1 [phi:gfx_init_screen4::@2->gfx_init_screen4::@2#1] -- register_copy 
    // gfx_init_screen4::@2
  __b2:
    // *ch++ = 0
    // [801] *((byte*) gfx_init_screen4::ch#2) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (ch),y
    // *ch++ = 0;
    // [802] (byte*) gfx_init_screen4::ch#1 ← ++ (byte*) gfx_init_screen4::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // for(byte cx: 0..39)
    // [803] (byte) gfx_init_screen4::cx#1 ← ++ (byte) gfx_init_screen4::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [804] if((byte) gfx_init_screen4::cx#1!=(byte) $28) goto gfx_init_screen4::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2
    // gfx_init_screen4::@3
    // for(byte cy: 0..24 )
    // [805] (byte) gfx_init_screen4::cy#1 ← ++ (byte) gfx_init_screen4::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [806] if((byte) gfx_init_screen4::cy#1!=(byte) $19) goto gfx_init_screen4::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b1
    // gfx_init_screen4::@return
    // }
    // [807] return 
    rts
}
  // gfx_init_screen3
// Initialize VIC screen 3 ( value is %00xx00yy where xx is xpos and yy is ypos
gfx_init_screen3: {
    .label __1 = $22
    .label ch = $10
    .label cy = $f
    // [809] phi from gfx_init_screen3 to gfx_init_screen3::@1 [phi:gfx_init_screen3->gfx_init_screen3::@1]
    // [809] phi (byte*) gfx_init_screen3::ch#3 = (const nomodify byte*) VIC_SCREEN3 [phi:gfx_init_screen3->gfx_init_screen3::@1#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN3
    sta.z ch
    lda #>VIC_SCREEN3
    sta.z ch+1
    // [809] phi (byte) gfx_init_screen3::cy#4 = (byte) 0 [phi:gfx_init_screen3->gfx_init_screen3::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    // [809] phi from gfx_init_screen3::@3 to gfx_init_screen3::@1 [phi:gfx_init_screen3::@3->gfx_init_screen3::@1]
    // [809] phi (byte*) gfx_init_screen3::ch#3 = (byte*) gfx_init_screen3::ch#1 [phi:gfx_init_screen3::@3->gfx_init_screen3::@1#0] -- register_copy 
    // [809] phi (byte) gfx_init_screen3::cy#4 = (byte) gfx_init_screen3::cy#1 [phi:gfx_init_screen3::@3->gfx_init_screen3::@1#1] -- register_copy 
    // gfx_init_screen3::@1
  __b1:
    // [810] phi from gfx_init_screen3::@1 to gfx_init_screen3::@2 [phi:gfx_init_screen3::@1->gfx_init_screen3::@2]
    // [810] phi (byte*) gfx_init_screen3::ch#2 = (byte*) gfx_init_screen3::ch#3 [phi:gfx_init_screen3::@1->gfx_init_screen3::@2#0] -- register_copy 
    // [810] phi (byte) gfx_init_screen3::cx#2 = (byte) 0 [phi:gfx_init_screen3::@1->gfx_init_screen3::@2#1] -- vbuxx=vbuc1 
    ldx #0
    // [810] phi from gfx_init_screen3::@2 to gfx_init_screen3::@2 [phi:gfx_init_screen3::@2->gfx_init_screen3::@2]
    // [810] phi (byte*) gfx_init_screen3::ch#2 = (byte*) gfx_init_screen3::ch#1 [phi:gfx_init_screen3::@2->gfx_init_screen3::@2#0] -- register_copy 
    // [810] phi (byte) gfx_init_screen3::cx#2 = (byte) gfx_init_screen3::cx#1 [phi:gfx_init_screen3::@2->gfx_init_screen3::@2#1] -- register_copy 
    // gfx_init_screen3::@2
  __b2:
    // cx&3
    // [811] (byte~) gfx_init_screen3::$0 ← (byte) gfx_init_screen3::cx#2 & (byte) 3 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #3
    // (cx&3)*$10
    // [812] (byte~) gfx_init_screen3::$1 ← (byte~) gfx_init_screen3::$0 << (byte) 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta.z __1
    // cy&3
    // [813] (byte~) gfx_init_screen3::$2 ← (byte) gfx_init_screen3::cy#4 & (byte) 3 -- vbuaa=vbuz1_band_vbuc1 
    lda #3
    and.z cy
    // (cx&3)*$10|(cy&3)
    // [814] (byte~) gfx_init_screen3::$3 ← (byte~) gfx_init_screen3::$1 | (byte~) gfx_init_screen3::$2 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __1
    // *ch++ = (cx&3)*$10|(cy&3)
    // [815] *((byte*) gfx_init_screen3::ch#2) ← (byte~) gfx_init_screen3::$3 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
    // *ch++ = (cx&3)*$10|(cy&3);
    // [816] (byte*) gfx_init_screen3::ch#1 ← ++ (byte*) gfx_init_screen3::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // for(byte cx: 0..39)
    // [817] (byte) gfx_init_screen3::cx#1 ← ++ (byte) gfx_init_screen3::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [818] if((byte) gfx_init_screen3::cx#1!=(byte) $28) goto gfx_init_screen3::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2
    // gfx_init_screen3::@3
    // for(byte cy: 0..24 )
    // [819] (byte) gfx_init_screen3::cy#1 ← ++ (byte) gfx_init_screen3::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [820] if((byte) gfx_init_screen3::cy#1!=(byte) $19) goto gfx_init_screen3::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b1
    // gfx_init_screen3::@return
    // }
    // [821] return 
    rts
}
  // gfx_init_screen2
// Initialize VIC screen 2 ( value is %ccccrrrr where cccc is (x+y mod $f) and rrrr is %1111-%cccc)
gfx_init_screen2: {
    .label col2 = $22
    .label ch = $10
    .label cy = $12
    // [823] phi from gfx_init_screen2 to gfx_init_screen2::@1 [phi:gfx_init_screen2->gfx_init_screen2::@1]
    // [823] phi (byte*) gfx_init_screen2::ch#3 = (const nomodify byte*) VIC_SCREEN2 [phi:gfx_init_screen2->gfx_init_screen2::@1#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN2
    sta.z ch
    lda #>VIC_SCREEN2
    sta.z ch+1
    // [823] phi (byte) gfx_init_screen2::cy#4 = (byte) 0 [phi:gfx_init_screen2->gfx_init_screen2::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    // [823] phi from gfx_init_screen2::@3 to gfx_init_screen2::@1 [phi:gfx_init_screen2::@3->gfx_init_screen2::@1]
    // [823] phi (byte*) gfx_init_screen2::ch#3 = (byte*) gfx_init_screen2::ch#1 [phi:gfx_init_screen2::@3->gfx_init_screen2::@1#0] -- register_copy 
    // [823] phi (byte) gfx_init_screen2::cy#4 = (byte) gfx_init_screen2::cy#1 [phi:gfx_init_screen2::@3->gfx_init_screen2::@1#1] -- register_copy 
    // gfx_init_screen2::@1
  __b1:
    // [824] phi from gfx_init_screen2::@1 to gfx_init_screen2::@2 [phi:gfx_init_screen2::@1->gfx_init_screen2::@2]
    // [824] phi (byte*) gfx_init_screen2::ch#2 = (byte*) gfx_init_screen2::ch#3 [phi:gfx_init_screen2::@1->gfx_init_screen2::@2#0] -- register_copy 
    // [824] phi (byte) gfx_init_screen2::cx#2 = (byte) 0 [phi:gfx_init_screen2::@1->gfx_init_screen2::@2#1] -- vbuxx=vbuc1 
    ldx #0
    // [824] phi from gfx_init_screen2::@2 to gfx_init_screen2::@2 [phi:gfx_init_screen2::@2->gfx_init_screen2::@2]
    // [824] phi (byte*) gfx_init_screen2::ch#2 = (byte*) gfx_init_screen2::ch#1 [phi:gfx_init_screen2::@2->gfx_init_screen2::@2#0] -- register_copy 
    // [824] phi (byte) gfx_init_screen2::cx#2 = (byte) gfx_init_screen2::cx#1 [phi:gfx_init_screen2::@2->gfx_init_screen2::@2#1] -- register_copy 
    // gfx_init_screen2::@2
  __b2:
    // cx+cy
    // [825] (byte~) gfx_init_screen2::$0 ← (byte) gfx_init_screen2::cx#2 + (byte) gfx_init_screen2::cy#4 -- vbuaa=vbuxx_plus_vbuz1 
    txa
    clc
    adc.z cy
    // col = (cx+cy)&$f
    // [826] (byte) gfx_init_screen2::col#0 ← (byte~) gfx_init_screen2::$0 & (byte) $f -- vbuyy=vbuaa_band_vbuc1 
    and #$f
    tay
    // col2 = ($f-col)
    // [827] (byte) gfx_init_screen2::col2#0 ← (byte) $f - (byte) gfx_init_screen2::col#0 -- vbuz1=vbuc1_minus_vbuyy 
    tya
    eor #$ff
    clc
    adc #$f+1
    sta.z col2
    // col*$10
    // [828] (byte~) gfx_init_screen2::$3 ← (byte) gfx_init_screen2::col#0 << (byte) 4 -- vbuaa=vbuyy_rol_4 
    tya
    asl
    asl
    asl
    asl
    // col*$10 | col2
    // [829] (byte~) gfx_init_screen2::$4 ← (byte~) gfx_init_screen2::$3 | (byte) gfx_init_screen2::col2#0 -- vbuaa=vbuaa_bor_vbuz1 
    ora.z col2
    // *ch++ = col*$10 | col2
    // [830] *((byte*) gfx_init_screen2::ch#2) ← (byte~) gfx_init_screen2::$4 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
    // *ch++ = col*$10 | col2;
    // [831] (byte*) gfx_init_screen2::ch#1 ← ++ (byte*) gfx_init_screen2::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // for(byte cx: 0..39)
    // [832] (byte) gfx_init_screen2::cx#1 ← ++ (byte) gfx_init_screen2::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [833] if((byte) gfx_init_screen2::cx#1!=(byte) $28) goto gfx_init_screen2::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2
    // gfx_init_screen2::@3
    // for(byte cy: 0..24 )
    // [834] (byte) gfx_init_screen2::cy#1 ← ++ (byte) gfx_init_screen2::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [835] if((byte) gfx_init_screen2::cy#1!=(byte) $19) goto gfx_init_screen2::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b1
    // gfx_init_screen2::@return
    // }
    // [836] return 
    rts
}
  // gfx_init_screen1
// Initialize VIC screen 1 ( value is %0000cccc where cccc is (x+y mod $f))
gfx_init_screen1: {
    .label ch = $14
    .label cy = $12
    // [838] phi from gfx_init_screen1 to gfx_init_screen1::@1 [phi:gfx_init_screen1->gfx_init_screen1::@1]
    // [838] phi (byte*) gfx_init_screen1::ch#3 = (const nomodify byte*) VIC_SCREEN1 [phi:gfx_init_screen1->gfx_init_screen1::@1#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN1
    sta.z ch
    lda #>VIC_SCREEN1
    sta.z ch+1
    // [838] phi (byte) gfx_init_screen1::cy#4 = (byte) 0 [phi:gfx_init_screen1->gfx_init_screen1::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    // [838] phi from gfx_init_screen1::@3 to gfx_init_screen1::@1 [phi:gfx_init_screen1::@3->gfx_init_screen1::@1]
    // [838] phi (byte*) gfx_init_screen1::ch#3 = (byte*) gfx_init_screen1::ch#1 [phi:gfx_init_screen1::@3->gfx_init_screen1::@1#0] -- register_copy 
    // [838] phi (byte) gfx_init_screen1::cy#4 = (byte) gfx_init_screen1::cy#1 [phi:gfx_init_screen1::@3->gfx_init_screen1::@1#1] -- register_copy 
    // gfx_init_screen1::@1
  __b1:
    // [839] phi from gfx_init_screen1::@1 to gfx_init_screen1::@2 [phi:gfx_init_screen1::@1->gfx_init_screen1::@2]
    // [839] phi (byte*) gfx_init_screen1::ch#2 = (byte*) gfx_init_screen1::ch#3 [phi:gfx_init_screen1::@1->gfx_init_screen1::@2#0] -- register_copy 
    // [839] phi (byte) gfx_init_screen1::cx#2 = (byte) 0 [phi:gfx_init_screen1::@1->gfx_init_screen1::@2#1] -- vbuxx=vbuc1 
    ldx #0
    // [839] phi from gfx_init_screen1::@2 to gfx_init_screen1::@2 [phi:gfx_init_screen1::@2->gfx_init_screen1::@2]
    // [839] phi (byte*) gfx_init_screen1::ch#2 = (byte*) gfx_init_screen1::ch#1 [phi:gfx_init_screen1::@2->gfx_init_screen1::@2#0] -- register_copy 
    // [839] phi (byte) gfx_init_screen1::cx#2 = (byte) gfx_init_screen1::cx#1 [phi:gfx_init_screen1::@2->gfx_init_screen1::@2#1] -- register_copy 
    // gfx_init_screen1::@2
  __b2:
    // cx+cy
    // [840] (byte~) gfx_init_screen1::$0 ← (byte) gfx_init_screen1::cx#2 + (byte) gfx_init_screen1::cy#4 -- vbuaa=vbuxx_plus_vbuz1 
    txa
    clc
    adc.z cy
    // (cx+cy)&$f
    // [841] (byte~) gfx_init_screen1::$1 ← (byte~) gfx_init_screen1::$0 & (byte) $f -- vbuaa=vbuaa_band_vbuc1 
    and #$f
    // *ch++ = (cx+cy)&$f
    // [842] *((byte*) gfx_init_screen1::ch#2) ← (byte~) gfx_init_screen1::$1 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
    // *ch++ = (cx+cy)&$f;
    // [843] (byte*) gfx_init_screen1::ch#1 ← ++ (byte*) gfx_init_screen1::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // for(byte cx: 0..39)
    // [844] (byte) gfx_init_screen1::cx#1 ← ++ (byte) gfx_init_screen1::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [845] if((byte) gfx_init_screen1::cx#1!=(byte) $28) goto gfx_init_screen1::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2
    // gfx_init_screen1::@3
    // for(byte cy: 0..24 )
    // [846] (byte) gfx_init_screen1::cy#1 ← ++ (byte) gfx_init_screen1::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [847] if((byte) gfx_init_screen1::cy#1!=(byte) $19) goto gfx_init_screen1::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b1
    // gfx_init_screen1::@return
    // }
    // [848] return 
    rts
}
  // gfx_init_screen0
// Initialize VIC screen 0 ( value is %yyyyxxxx where yyyy is ypos and xxxx is xpos)
gfx_init_screen0: {
    .label __1 = $22
    .label ch = $14
    .label cy = $13
    // [850] phi from gfx_init_screen0 to gfx_init_screen0::@1 [phi:gfx_init_screen0->gfx_init_screen0::@1]
    // [850] phi (byte*) gfx_init_screen0::ch#3 = (const nomodify byte*) VIC_SCREEN0 [phi:gfx_init_screen0->gfx_init_screen0::@1#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN0
    sta.z ch
    lda #>VIC_SCREEN0
    sta.z ch+1
    // [850] phi (byte) gfx_init_screen0::cy#4 = (byte) 0 [phi:gfx_init_screen0->gfx_init_screen0::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    // [850] phi from gfx_init_screen0::@3 to gfx_init_screen0::@1 [phi:gfx_init_screen0::@3->gfx_init_screen0::@1]
    // [850] phi (byte*) gfx_init_screen0::ch#3 = (byte*) gfx_init_screen0::ch#1 [phi:gfx_init_screen0::@3->gfx_init_screen0::@1#0] -- register_copy 
    // [850] phi (byte) gfx_init_screen0::cy#4 = (byte) gfx_init_screen0::cy#1 [phi:gfx_init_screen0::@3->gfx_init_screen0::@1#1] -- register_copy 
    // gfx_init_screen0::@1
  __b1:
    // [851] phi from gfx_init_screen0::@1 to gfx_init_screen0::@2 [phi:gfx_init_screen0::@1->gfx_init_screen0::@2]
    // [851] phi (byte*) gfx_init_screen0::ch#2 = (byte*) gfx_init_screen0::ch#3 [phi:gfx_init_screen0::@1->gfx_init_screen0::@2#0] -- register_copy 
    // [851] phi (byte) gfx_init_screen0::cx#2 = (byte) 0 [phi:gfx_init_screen0::@1->gfx_init_screen0::@2#1] -- vbuxx=vbuc1 
    ldx #0
    // [851] phi from gfx_init_screen0::@2 to gfx_init_screen0::@2 [phi:gfx_init_screen0::@2->gfx_init_screen0::@2]
    // [851] phi (byte*) gfx_init_screen0::ch#2 = (byte*) gfx_init_screen0::ch#1 [phi:gfx_init_screen0::@2->gfx_init_screen0::@2#0] -- register_copy 
    // [851] phi (byte) gfx_init_screen0::cx#2 = (byte) gfx_init_screen0::cx#1 [phi:gfx_init_screen0::@2->gfx_init_screen0::@2#1] -- register_copy 
    // gfx_init_screen0::@2
  __b2:
    // cy&$f
    // [852] (byte~) gfx_init_screen0::$0 ← (byte) gfx_init_screen0::cy#4 & (byte) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z cy
    // (cy&$f)*$10
    // [853] (byte~) gfx_init_screen0::$1 ← (byte~) gfx_init_screen0::$0 << (byte) 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta.z __1
    // cx&$f
    // [854] (byte~) gfx_init_screen0::$2 ← (byte) gfx_init_screen0::cx#2 & (byte) $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
    // (cy&$f)*$10|(cx&$f)
    // [855] (byte~) gfx_init_screen0::$3 ← (byte~) gfx_init_screen0::$1 | (byte~) gfx_init_screen0::$2 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __1
    // *ch++ = (cy&$f)*$10|(cx&$f)
    // [856] *((byte*) gfx_init_screen0::ch#2) ← (byte~) gfx_init_screen0::$3 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
    // *ch++ = (cy&$f)*$10|(cx&$f);
    // [857] (byte*) gfx_init_screen0::ch#1 ← ++ (byte*) gfx_init_screen0::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // for(byte cx: 0..39)
    // [858] (byte) gfx_init_screen0::cx#1 ← ++ (byte) gfx_init_screen0::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [859] if((byte) gfx_init_screen0::cx#1!=(byte) $28) goto gfx_init_screen0::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2
    // gfx_init_screen0::@3
    // for(byte cy: 0..24 )
    // [860] (byte) gfx_init_screen0::cy#1 ← ++ (byte) gfx_init_screen0::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [861] if((byte) gfx_init_screen0::cy#1!=(byte) $19) goto gfx_init_screen0::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b1
    // gfx_init_screen0::@return
    // }
    // [862] return 
    rts
}
  // keyboard_init
// Initialize keyboard reading by setting CIA#$ Data Direction Registers
keyboard_init: {
    // CIA1->PORT_A_DDR = $ff
    // [863] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) ← (byte) $ff -- _deref_pbuc1=vbuc2 
    // Keyboard Matrix Columns Write Mode
    lda #$ff
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR
    // CIA1->PORT_B_DDR = $00
    // [864] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_B_DDR) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Keyboard Matrix Columns Read Mode
    lda #0
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_B_DDR
    // keyboard_init::@return
    // }
    // [865] return 
    rts
}
  // File Data
  // Default vallues for the palette
  DTV_PALETTE_DEFAULT: .byte 0, $f, $36, $be, $58, $db, $86, $ff, $29, $26, $3b, 5, 7, $df, $9a, $a
  print_hextab: .text "0123456789abcdef"
  // Keyboard row bitmask as expected by CIA#1 Port A when reading a specific keyboard matrix row (rows are numbered 0-7)
  keyboard_matrix_row_bitmask: .byte $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f
  // Keyboard matrix column bitmasks for a specific keybooard matrix column when reading the keyboard. (columns are numbered 0-7)
  keyboard_matrix_col_bitmask: .byte 1, 2, 4, 8, $10, $20, $40, $80
  // Keyboard event buffer. Contains keycodes for key presses/releases. Presses are represented by the keycode. Releases by keycode | $40. The buffer is filled by keyboard_scan()
  keyboard_events: .fill 8, 0
  // The values scanned values for each row. Set by keyboard_scan() and used by keyboard_get_event()
  keyboard_scan_values: .fill 8, 0
  // Tables for the plotter - initialized by calling bitmap_draw_init();
  bitmap_plot_xlo: .fill $100, 0
  bitmap_plot_xhi: .fill $100, 0
  bitmap_plot_ylo: .fill $100, 0
  bitmap_plot_yhi: .fill $100, 0
  bitmap_plot_bit: .fill $100, 0
  // Charset ROM
  FORM_TEXT: .text " C64 DTV Graphics Mode Explorer         @                                        @ PRESET 0 Standard Charset              @                                        @ CONTROL        PLANE  A     VIC II     @ bmm        0   pattern p0   screen s0  @ mcm        0   start   00   gfx    g0  @ ecm        0   step    00   colors c0  @ hicolor    0   modulo  00              @ linear     0                COLORS     @ color off  0   PLANE  B     palet   0  @ chunky     0   pattern p0   bgcol0 00  @ border off 0   start   00   bgcol1 00  @ overscan   0   step    00   bgcol2 00  @                modulo  00   bgcol3 00  @"
  .byte 0
  FORM_COLS: .text "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@                                        @aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@                                        @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm              @ nnnnnnnnnnnn                jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"
  .byte 0
  // Form fields x/y-positions
  form_fields_x: .byte 8, $c, $c, $c, $c, $c, $c, $c, $c, $c, $19, $18, $19, $18, $19, $18, $19, $19, $18, $19, $18, $19, $18, $19, $25, $25, $25, $25, $24, $25, $24, $25, $24, $25, $24, $25
  form_fields_y: .byte 2, 5, 6, 7, 8, 9, $a, $b, $c, $d, 5, 6, 6, 7, 7, 8, 8, $b, $c, $c, $d, $d, $e, $e, 5, 6, 7, $a, $b, $b, $c, $c, $d, $d, $e, $e
  // Form field max values (all values are in the interval 0..max)
  form_fields_max: .byte $a, 1, 1, 1, 1, 1, 1, 1, 1, 1, $d, $f, $f, $f, $f, $f, $f, $d, $f, $f, $f, $f, $f, $f, 3, 1, 4, 1, $f, $f, $f, $f, $f, $f, $f, $f
  // Form fields values
  form_fields_val: .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Standard Char Mode
  preset_stdchar: .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Extended Color Char Mode
  preset_ecmchar: .byte 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 5, 0, 6
  // Preset: Standard Bitmap
  preset_stdbm: .byte 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: MC Bitmap
  preset_mcbm: .byte 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0
  // Preset: Hicolor Standard Char Mode
  preset_hi_stdchar: .byte 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Hicolor Extended Color Char Mode
  preset_hi_ecmchar: .byte 5, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 4, 6, 8, 9, $c, $c
  // Preset: Two plane mode
  preset_twoplane: .byte 6, 1, 0, 1, 1, 1, 0, 0, 0, 0, 7, 0, 0, 0, 1, 0, 0, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 7, 0, $d, 4, 0, 0, 0, 0
  // Preset: Chunky 8bpp
  preset_chunky: .byte 7, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 8, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Sixs FREDs mode
  preset_sixsfred: .byte 8, 1, 1, 1, 1, 1, 0, 0, 0, 0, 9, 0, 0, 0, 1, 0, 0, $a, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Sixs FREDs 2 mode
  preset_sixsfred2: .byte 9, 1, 1, 1, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 1, 0, 0, $a, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: 8bpp Pixel Cell
  preset_8bpppixelcell: .byte $a, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, $b, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Table with addresses of the y-lines of the form. The first line contains the address of the form screen.
  form_line_lo: .fill $19, 0
  form_line_hi: .fill $19, 0

