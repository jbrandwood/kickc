Inlined call call _init 

CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start::@1
  *((const nomodify byte*) SCREEN + (number) 0) ← (const nomodify byte) c
  *((const nomodify byte*) SCREEN + (number) 1) ← (volatile byte) v
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  to:_start::_init1
_start::_init1: scope:[_start]  from _start
  (volatile byte) v ← (byte) 'v'
  to:_start::@1
_start::@1: scope:[_start]  from _start::_init1
  call main 
  to:_start::@2
_start::@2: scope:[_start]  from _start::@1
  to:_start::@return
_start::@return: scope:[_start]  from _start::@2
  return 
  to:@return

SYMBOL TABLE SSA
(const nomodify byte*) SCREEN = (byte*)(number) $400
(void()) _start()
(label) _start::@1
(label) _start::@2
(label) _start::@return
(label) _start::_init1
(const nomodify byte) c = (byte) 'c'
(void()) main()
(label) main::@return
(volatile byte) v loadstore

Adding number conversion cast (unumber) 0 in *((const nomodify byte*) SCREEN + (number) 0) ← (const nomodify byte) c
Adding number conversion cast (unumber) 1 in *((const nomodify byte*) SCREEN + (number) 1) ← (volatile byte) v
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simplifying expression containing zero SCREEN in [0] *((const nomodify byte*) SCREEN + (byte) 0) ← (const nomodify byte) c
Successful SSA optimization PassNSimplifyExpressionWithZero
Consolidated array index constant in *(SCREEN+1)
Successful SSA optimization Pass2ConstantAdditionElimination
Adding NOP phi() at start of _start
Adding NOP phi() at start of _start::@1
Adding NOP phi() at start of _start::@2
CALL GRAPH
Calls in [_start] to main:3 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) _start::@2
Adding NOP phi() at start of _start
Adding NOP phi() at start of _start::@1

FINAL CONTROL FLOW GRAPH

(void()) _start()
_start: scope:[_start]  from
  [0] phi()
  to:_start::_init1
_start::_init1: scope:[_start]  from _start
  [1] (volatile byte) v ← (byte) 'v'
  to:_start::@1
_start::@1: scope:[_start]  from _start::_init1
  [2] phi()
  [3] call main 
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  [4] return 
  to:@return

(void()) main()
main: scope:[main]  from _start::@1
  [5] *((const nomodify byte*) SCREEN) ← (const nomodify byte) c
  [6] *((const nomodify byte*) SCREEN+(byte) 1) ← (volatile byte) v
  to:main::@return
main::@return: scope:[main]  from main
  [7] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) _start()
(void()) main()
(volatile byte) v loadstore 4.333333333333333

Initial phi equivalence classes
Added variable v to live range equivalence class [ v ]
Complete equivalence classes
[ v ]
Allocated zp[1]:2 [ v ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Typedef const/volatile type
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(_start)
.pc = $80d "Program"
  // Global Constants & labels
  .const c = 'c'
  .label SCREEN = $400
  .label v = 2
  // _start
_start: {
    jmp _init1
    // _start::_init1
  _init1:
    // [1] (volatile byte) v ← (byte) 'v' -- vbuz1=vbuc1 
    lda #'v'
    sta.z v
    // [2] phi from _start::_init1 to _start::@1 [phi:_start::_init1->_start::@1]
  __b1_from__init1:
    jmp __b1
    // _start::@1
  __b1:
    // [3] call main 
    jsr main
    jmp __breturn
    // _start::@return
  __breturn:
    // [4] return 
    rts
}
  // main
main: {
    // [5] *((const nomodify byte*) SCREEN) ← (const nomodify byte) c -- _deref_pbuc1=vbuc2 
    lda #c
    sta SCREEN
    // [6] *((const nomodify byte*) SCREEN+(byte) 1) ← (volatile byte) v -- _deref_pbuc1=vbuz1 
    lda.z v
    sta SCREEN+1
    jmp __breturn
    // main::@return
  __breturn:
    // [7] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] (volatile byte) v ← (byte) 'v' [ v ] (  [ v ] { }  ) always clobbers reg byte a 
Statement [5] *((const nomodify byte*) SCREEN) ← (const nomodify byte) c [ v ] ( main:3 [ v ] { }  ) always clobbers reg byte a 
Statement [6] *((const nomodify byte*) SCREEN+(byte) 1) ← (volatile byte) v [ ] ( main:3 [ ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ v ] : zp[1]:2 , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 4.33: zp[1]:2 [ v ] 
Uplift Scope [main] 
Uplift Scope [_start] 

Uplifting [] best 75 combination zp[1]:2 [ v ] 
Uplifting [main] best 75 combination 
Uplifting [_start] best 75 combination 
Attempting to uplift remaining variables inzp[1]:2 [ v ]
Uplifting [] best 75 combination zp[1]:2 [ v ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Typedef const/volatile type
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(_start)
.pc = $80d "Program"
  // Global Constants & labels
  .const c = 'c'
  .label SCREEN = $400
  .label v = 2
  // _start
_start: {
    jmp _init1
    // _start::_init1
  _init1:
    // [1] (volatile byte) v ← (byte) 'v' -- vbuz1=vbuc1 
    lda #'v'
    sta.z v
    // [2] phi from _start::_init1 to _start::@1 [phi:_start::_init1->_start::@1]
  __b1_from__init1:
    jmp __b1
    // _start::@1
  __b1:
    // [3] call main 
    jsr main
    jmp __breturn
    // _start::@return
  __breturn:
    // [4] return 
    rts
}
  // main
main: {
    // [5] *((const nomodify byte*) SCREEN) ← (const nomodify byte) c -- _deref_pbuc1=vbuc2 
    lda #c
    sta SCREEN
    // [6] *((const nomodify byte*) SCREEN+(byte) 1) ← (volatile byte) v -- _deref_pbuc1=vbuz1 
    lda.z v
    sta SCREEN+1
    jmp __breturn
    // main::@return
  __breturn:
    // [7] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp _init1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from__init1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction _init1:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(const nomodify byte*) SCREEN = (byte*) 1024
(void()) _start()
(label) _start::@1
(label) _start::@return
(label) _start::_init1
(const nomodify byte) c = (byte) 'c'
(void()) main()
(label) main::@return
(volatile byte) v loadstore zp[1]:2 4.333333333333333

zp[1]:2 [ v ]


FINAL ASSEMBLER
Score: 36

  // File Comments
// Typedef const/volatile type
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(_start)
.pc = $80d "Program"
  // Global Constants & labels
  .const c = 'c'
  .label SCREEN = $400
  .label v = 2
  // _start
_start: {
    // _start::_init1
    // v = 'v'
    // [1] (volatile byte) v ← (byte) 'v' -- vbuz1=vbuc1 
    lda #'v'
    sta.z v
    // [2] phi from _start::_init1 to _start::@1 [phi:_start::_init1->_start::@1]
    // _start::@1
    // [3] call main 
    jsr main
    // _start::@return
    // [4] return 
    rts
}
  // main
main: {
    // SCREEN[0] = c
    // [5] *((const nomodify byte*) SCREEN) ← (const nomodify byte) c -- _deref_pbuc1=vbuc2 
    lda #c
    sta SCREEN
    // SCREEN[1] = v
    // [6] *((const nomodify byte*) SCREEN+(byte) 1) ← (volatile byte) v -- _deref_pbuc1=vbuz1 
    lda.z v
    sta SCREEN+1
    // main::@return
    // }
    // [7] return 
    rts
}
  // File Data

