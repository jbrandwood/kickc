// The screen
byte *SCREEN = $0400;
byte *COLORS = $D800;

byte FILL = 230;

// The total number of voronoi points
byte numpoints = 0;

// Points to create the Voronoi from
byte[$100] XPOS = $1000;
byte[$100] YPOS = $1100;
byte[$100] COLS = $1200;

main();

void main() {
  addpoint(5, 5, 1);
  addpoint(15, 8, 2);
  addpoint(6, 14, 3);
  addpoint(34, 2, 4);
  addpoint(21, 17, 5);
  addpoint(31, 22, 7);
  initscreen();
  do {
    render();
    animate();
  } while(true)
}

void animate() {
    XPOS[0] = XPOS[0]+1;
    if(XPOS[0]==40) {
      XPOS[0] = 0;
    }
    YPOS[0] = YPOS[0]+1;
    if(YPOS[0]==25) {
      YPOS[0] = 0;
    }
    XPOS[1] = XPOS[1]-1;
    if(XPOS[1]==255) {
      XPOS[1] = 40;
    }
    YPOS[2] = YPOS[2]+1;
    if(YPOS[2]==25) {
      YPOS[2] = 0;
    }
    YPOS[3] = YPOS[3]-1;
    if(YPOS[3]==255) {
      YPOS[3] = 25;
      XPOS[3] = XPOS[3]+7;
      if(XPOS[3]>=40) {
        XPOS[3] = XPOS[3]-40;
      }
    }
}

void addpoint(byte x, byte y, byte c) {
  XPOS[numpoints] = x;
  YPOS[numpoints] = y;
  COLS[numpoints] = c;
  numpoints++;
}

void initscreen() {
  byte* screen = SCREEN;
  do {
    *screen = FILL;
  } while(++screen<$0800)
}

void render() {
  byte* colline = COLORS;
  byte y=0;
  do {
    byte x=0;
    do {
      byte col = findcol(x, y);
      colline[x] = col;
    } while(++x < 40)
    colline = colline+40;
  } while(++y < 25)
}

byte findcol(byte x, byte y) {
  byte mindiff = 255;
  byte mincol = 0;
  byte i=0;
  do {
     byte xp = XPOS[i];
     byte yp = YPOS[i];
     if(x==xp) {
       if(y==yp) {
         return 0;
       }
     }
     byte diff;
     if(x<xp) {
       diff = xp-x;
     } else {
       diff = x-xp;
     }
     if(y<yp) {
       diff = diff + (yp-y);
     } else {
       diff = diff + (y-yp);
     }
     if(diff<mindiff) {
       mindiff=diff;
       mincol = COLS[i];
     }
  } while(++i<numpoints)
  return mincol;
}



Adding pre/post-modifier (byte) numpoints ← ++ (byte) numpoints
Adding pre/post-modifier (byte*) initscreen::screen ← ++ (byte*) initscreen::screen
Adding pre/post-modifier (byte) render::x ← ++ (byte) render::x
Adding pre/post-modifier (byte) render::y ← ++ (byte) render::y
Adding pre/post-modifier (byte) findcol::i ← ++ (byte) findcol::i
PROGRAM
  (byte*) SCREEN ← (word) 1024
  (byte*) COLORS ← (word) 55296
  (byte) FILL ← (byte) 230
  (byte) numpoints ← (byte) 0
  (byte[256]) XPOS ← (word) 4096
  (byte[256]) YPOS ← (word) 4352
  (byte[256]) COLS ← (word) 4608
  (void~) $0 ← call main 
  proc (void()) main()
  (void~) main::$0 ← call addpoint (byte) 5 (byte) 5 (byte) 1 
  (void~) main::$1 ← call addpoint (byte) 15 (byte) 8 (byte) 2 
  (void~) main::$2 ← call addpoint (byte) 6 (byte) 14 (byte) 3 
  (void~) main::$3 ← call addpoint (byte) 34 (byte) 2 (byte) 4 
  (void~) main::$4 ← call addpoint (byte) 21 (byte) 17 (byte) 5 
  (void~) main::$5 ← call addpoint (byte) 31 (byte) 22 (byte) 7 
  (void~) main::$6 ← call initscreen 
main::@1:
  (void~) main::$7 ← call render 
  (void~) main::$8 ← call animate 
  if(true) goto main::@1
main::@return:
  return 
  endproc // main()
  proc (void()) animate()
  (byte~) animate::$0 ← (byte[256]) XPOS *idx (byte) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((byte[256]) XPOS + (byte) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (byte[256]) XPOS *idx (byte) 0
  (boolean~) animate::$3 ← (byte~) animate::$2 == (byte) 40
  if((boolean~) animate::$3) goto animate::@1
  goto animate::@2
animate::@1:
  *((byte[256]) XPOS + (byte) 0) ← (byte) 0
animate::@2:
  (byte~) animate::$4 ← (byte[256]) YPOS *idx (byte) 0
  (byte~) animate::$5 ← (byte~) animate::$4 + (byte) 1
  *((byte[256]) YPOS + (byte) 0) ← (byte~) animate::$5
  (byte~) animate::$6 ← (byte[256]) YPOS *idx (byte) 0
  (boolean~) animate::$7 ← (byte~) animate::$6 == (byte) 25
  if((boolean~) animate::$7) goto animate::@3
  goto animate::@4
animate::@3:
  *((byte[256]) YPOS + (byte) 0) ← (byte) 0
animate::@4:
  (byte~) animate::$8 ← (byte[256]) XPOS *idx (byte) 1
  (byte~) animate::$9 ← (byte~) animate::$8 - (byte) 1
  *((byte[256]) XPOS + (byte) 1) ← (byte~) animate::$9
  (byte~) animate::$10 ← (byte[256]) XPOS *idx (byte) 1
  (boolean~) animate::$11 ← (byte~) animate::$10 == (byte) 255
  if((boolean~) animate::$11) goto animate::@5
  goto animate::@6
animate::@5:
  *((byte[256]) XPOS + (byte) 1) ← (byte) 40
animate::@6:
  (byte~) animate::$12 ← (byte[256]) YPOS *idx (byte) 2
  (byte~) animate::$13 ← (byte~) animate::$12 + (byte) 1
  *((byte[256]) YPOS + (byte) 2) ← (byte~) animate::$13
  (byte~) animate::$14 ← (byte[256]) YPOS *idx (byte) 2
  (boolean~) animate::$15 ← (byte~) animate::$14 == (byte) 25
  if((boolean~) animate::$15) goto animate::@7
  goto animate::@8
animate::@7:
  *((byte[256]) YPOS + (byte) 2) ← (byte) 0
animate::@8:
  (byte~) animate::$16 ← (byte[256]) YPOS *idx (byte) 3
  (byte~) animate::$17 ← (byte~) animate::$16 - (byte) 1
  *((byte[256]) YPOS + (byte) 3) ← (byte~) animate::$17
  (byte~) animate::$18 ← (byte[256]) YPOS *idx (byte) 3
  (boolean~) animate::$19 ← (byte~) animate::$18 == (byte) 255
  if((boolean~) animate::$19) goto animate::@9
  goto animate::@10
animate::@9:
  *((byte[256]) YPOS + (byte) 3) ← (byte) 25
  (byte~) animate::$20 ← (byte[256]) XPOS *idx (byte) 3
  (byte~) animate::$21 ← (byte~) animate::$20 + (byte) 7
  *((byte[256]) XPOS + (byte) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (byte[256]) XPOS *idx (byte) 3
  (boolean~) animate::$23 ← (byte~) animate::$22 >= (byte) 40
  if((boolean~) animate::$23) goto animate::@11
  goto animate::@12
animate::@11:
  (byte~) animate::$24 ← (byte[256]) XPOS *idx (byte) 3
  (byte~) animate::$25 ← (byte~) animate::$24 - (byte) 40
  *((byte[256]) XPOS + (byte) 3) ← (byte~) animate::$25
animate::@12:
animate::@10:
animate::@return:
  return 
  endproc // animate()
  proc (void()) addpoint((byte) addpoint::x , (byte) addpoint::y , (byte) addpoint::c)
  *((byte[256]) XPOS + (byte) numpoints) ← (byte) addpoint::x
  *((byte[256]) YPOS + (byte) numpoints) ← (byte) addpoint::y
  *((byte[256]) COLS + (byte) numpoints) ← (byte) addpoint::c
  (byte) numpoints ← ++ (byte) numpoints
addpoint::@return:
  return 
  endproc // addpoint()
  proc (void()) initscreen()
  (byte*) initscreen::screen ← (byte*) SCREEN
initscreen::@1:
  *((byte*) initscreen::screen) ← (byte) FILL
  (byte*) initscreen::screen ← ++ (byte*) initscreen::screen
  (boolean~) initscreen::$0 ← (byte*) initscreen::screen < (word) 2048
  if((boolean~) initscreen::$0) goto initscreen::@1
initscreen::@return:
  return 
  endproc // initscreen()
  proc (void()) render()
  (byte*) render::colline ← (byte*) COLORS
  (byte) render::y ← (byte) 0
render::@1:
  (byte) render::x ← (byte) 0
render::@2:
  (byte~) render::$0 ← call findcol (byte) render::x (byte) render::y 
  (byte) render::col ← (byte~) render::$0
  *((byte*) render::colline + (byte) render::x) ← (byte) render::col
  (byte) render::x ← ++ (byte) render::x
  (boolean~) render::$1 ← (byte) render::x < (byte) 40
  if((boolean~) render::$1) goto render::@2
  (byte*~) render::$2 ← (byte*) render::colline + (byte) 40
  (byte*) render::colline ← (byte*~) render::$2
  (byte) render::y ← ++ (byte) render::y
  (boolean~) render::$3 ← (byte) render::y < (byte) 25
  if((boolean~) render::$3) goto render::@1
render::@return:
  return 
  endproc // render()
  proc (byte()) findcol((byte) findcol::x , (byte) findcol::y)
  (byte) findcol::mindiff ← (byte) 255
  (byte) findcol::mincol ← (byte) 0
  (byte) findcol::i ← (byte) 0
findcol::@1:
  (byte~) findcol::$0 ← (byte[256]) XPOS *idx (byte) findcol::i
  (byte) findcol::xp ← (byte~) findcol::$0
  (byte~) findcol::$1 ← (byte[256]) YPOS *idx (byte) findcol::i
  (byte) findcol::yp ← (byte~) findcol::$1
  (boolean~) findcol::$2 ← (byte) findcol::x == (byte) findcol::xp
  if((boolean~) findcol::$2) goto findcol::@2
  goto findcol::@3
findcol::@2:
  (boolean~) findcol::$3 ← (byte) findcol::y == (byte) findcol::yp
  if((boolean~) findcol::$3) goto findcol::@4
  goto findcol::@5
findcol::@4:
  (byte) findcol::return ← (byte) 0
  goto findcol::@return
findcol::@5:
findcol::@3:
  (boolean~) findcol::$4 ← (byte) findcol::x < (byte) findcol::xp
  if((boolean~) findcol::$4) goto findcol::@6
  goto findcol::@7
findcol::@6:
  (byte~) findcol::$5 ← (byte) findcol::xp - (byte) findcol::x
  (byte) findcol::diff ← (byte~) findcol::$5
  goto findcol::@8
findcol::@7:
  (byte~) findcol::$6 ← (byte) findcol::x - (byte) findcol::xp
  (byte) findcol::diff ← (byte~) findcol::$6
findcol::@8:
  (boolean~) findcol::$7 ← (byte) findcol::y < (byte) findcol::yp
  if((boolean~) findcol::$7) goto findcol::@9
  goto findcol::@10
findcol::@9:
  (byte~) findcol::$8 ← (byte) findcol::yp - (byte) findcol::y
  (byte~) findcol::$9 ← (byte) findcol::diff + (byte~) findcol::$8
  (byte) findcol::diff ← (byte~) findcol::$9
  goto findcol::@11
findcol::@10:
  (byte~) findcol::$10 ← (byte) findcol::y - (byte) findcol::yp
  (byte~) findcol::$11 ← (byte) findcol::diff + (byte~) findcol::$10
  (byte) findcol::diff ← (byte~) findcol::$11
findcol::@11:
  (boolean~) findcol::$12 ← (byte) findcol::diff < (byte) findcol::mindiff
  if((boolean~) findcol::$12) goto findcol::@12
  goto findcol::@13
findcol::@12:
  (byte) findcol::mindiff ← (byte) findcol::diff
  (byte~) findcol::$13 ← (byte[256]) COLS *idx (byte) findcol::i
  (byte) findcol::mincol ← (byte~) findcol::$13
findcol::@13:
  (byte) findcol::i ← ++ (byte) findcol::i
  (boolean~) findcol::$14 ← (byte) findcol::i < (byte) numpoints
  if((boolean~) findcol::$14) goto findcol::@1
  (byte) findcol::return ← (byte) findcol::mincol
  goto findcol::@return
findcol::@return:
  (byte) findcol::return ← (byte) findcol::return
  return (byte) findcol::return
  endproc // findcol()

SYMBOLS
(void~) $0
(byte*) COLORS
(byte[256]) COLS
(byte) FILL
(byte*) SCREEN
(byte[256]) XPOS
(byte[256]) YPOS
(void()) addpoint((byte) addpoint::x , (byte) addpoint::y , (byte) addpoint::c)
(label) addpoint::@return
(byte) addpoint::c
(byte) addpoint::x
(byte) addpoint::y
(void()) animate()
(byte~) animate::$0
(byte~) animate::$1
(byte~) animate::$10
(boolean~) animate::$11
(byte~) animate::$12
(byte~) animate::$13
(byte~) animate::$14
(boolean~) animate::$15
(byte~) animate::$16
(byte~) animate::$17
(byte~) animate::$18
(boolean~) animate::$19
(byte~) animate::$2
(byte~) animate::$20
(byte~) animate::$21
(byte~) animate::$22
(boolean~) animate::$23
(byte~) animate::$24
(byte~) animate::$25
(boolean~) animate::$3
(byte~) animate::$4
(byte~) animate::$5
(byte~) animate::$6
(boolean~) animate::$7
(byte~) animate::$8
(byte~) animate::$9
(label) animate::@1
(label) animate::@10
(label) animate::@11
(label) animate::@12
(label) animate::@2
(label) animate::@3
(label) animate::@4
(label) animate::@5
(label) animate::@6
(label) animate::@7
(label) animate::@8
(label) animate::@9
(label) animate::@return
(byte()) findcol((byte) findcol::x , (byte) findcol::y)
(byte~) findcol::$0
(byte~) findcol::$1
(byte~) findcol::$10
(byte~) findcol::$11
(boolean~) findcol::$12
(byte~) findcol::$13
(boolean~) findcol::$14
(boolean~) findcol::$2
(boolean~) findcol::$3
(boolean~) findcol::$4
(byte~) findcol::$5
(byte~) findcol::$6
(boolean~) findcol::$7
(byte~) findcol::$8
(byte~) findcol::$9
(label) findcol::@1
(label) findcol::@10
(label) findcol::@11
(label) findcol::@12
(label) findcol::@13
(label) findcol::@2
(label) findcol::@3
(label) findcol::@4
(label) findcol::@5
(label) findcol::@6
(label) findcol::@7
(label) findcol::@8
(label) findcol::@9
(label) findcol::@return
(byte) findcol::diff
(byte) findcol::i
(byte) findcol::mincol
(byte) findcol::mindiff
(byte) findcol::return
(byte) findcol::x
(byte) findcol::xp
(byte) findcol::y
(byte) findcol::yp
(void()) initscreen()
(boolean~) initscreen::$0
(label) initscreen::@1
(label) initscreen::@return
(byte*) initscreen::screen
(void()) main()
(void~) main::$0
(void~) main::$1
(void~) main::$2
(void~) main::$3
(void~) main::$4
(void~) main::$5
(void~) main::$6
(void~) main::$7
(void~) main::$8
(label) main::@1
(label) main::@return
(byte) numpoints
(void()) render()
(byte~) render::$0
(boolean~) render::$1
(byte*~) render::$2
(boolean~) render::$3
(label) render::@1
(label) render::@2
(label) render::@return
(byte) render::col
(byte*) render::colline
(byte) render::x
(byte) render::y

INITIAL CONTROL FLOW GRAPH
@BEGIN: from
  (byte*) SCREEN ← (word) 1024
  (byte*) COLORS ← (word) 55296
  (byte) FILL ← (byte) 230
  (byte) numpoints ← (byte) 0
  (byte[256]) XPOS ← (word) 4096
  (byte[256]) YPOS ← (word) 4352
  (byte[256]) COLS ← (word) 4608
  (void~) $0 ← call main 
  to:@1
main: from
  (void~) main::$0 ← call addpoint (byte) 5 (byte) 5 (byte) 1 
  (void~) main::$1 ← call addpoint (byte) 15 (byte) 8 (byte) 2 
  (void~) main::$2 ← call addpoint (byte) 6 (byte) 14 (byte) 3 
  (void~) main::$3 ← call addpoint (byte) 34 (byte) 2 (byte) 4 
  (void~) main::$4 ← call addpoint (byte) 21 (byte) 17 (byte) 5 
  (void~) main::$5 ← call addpoint (byte) 31 (byte) 22 (byte) 7 
  (void~) main::$6 ← call initscreen 
  to:main::@1
main::@1: from main main::@1
  (void~) main::$7 ← call render 
  (void~) main::$8 ← call animate 
  if(true) goto main::@1
  to:main::@2
main::@2: from main::@1
  to:main::@return
main::@return: from main::@2
  return 
  to:@RETURN
@1: from @BEGIN
  to:@2
animate: from
  (byte~) animate::$0 ← (byte[256]) XPOS *idx (byte) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((byte[256]) XPOS + (byte) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (byte[256]) XPOS *idx (byte) 0
  (boolean~) animate::$3 ← (byte~) animate::$2 == (byte) 40
  if((boolean~) animate::$3) goto animate::@1
  to:animate::@13
animate::@1: from animate animate::@14
  *((byte[256]) XPOS + (byte) 0) ← (byte) 0
  to:animate::@2
animate::@13: from animate
  to:animate::@2
animate::@2: from animate::@1 animate::@13
  (byte~) animate::$4 ← (byte[256]) YPOS *idx (byte) 0
  (byte~) animate::$5 ← (byte~) animate::$4 + (byte) 1
  *((byte[256]) YPOS + (byte) 0) ← (byte~) animate::$5
  (byte~) animate::$6 ← (byte[256]) YPOS *idx (byte) 0
  (boolean~) animate::$7 ← (byte~) animate::$6 == (byte) 25
  if((boolean~) animate::$7) goto animate::@3
  to:animate::@15
animate::@14: from
  to:animate::@1
animate::@3: from animate::@16 animate::@2
  *((byte[256]) YPOS + (byte) 0) ← (byte) 0
  to:animate::@4
animate::@15: from animate::@2
  to:animate::@4
animate::@4: from animate::@15 animate::@3
  (byte~) animate::$8 ← (byte[256]) XPOS *idx (byte) 1
  (byte~) animate::$9 ← (byte~) animate::$8 - (byte) 1
  *((byte[256]) XPOS + (byte) 1) ← (byte~) animate::$9
  (byte~) animate::$10 ← (byte[256]) XPOS *idx (byte) 1
  (boolean~) animate::$11 ← (byte~) animate::$10 == (byte) 255
  if((boolean~) animate::$11) goto animate::@5
  to:animate::@17
animate::@16: from
  to:animate::@3
animate::@5: from animate::@18 animate::@4
  *((byte[256]) XPOS + (byte) 1) ← (byte) 40
  to:animate::@6
animate::@17: from animate::@4
  to:animate::@6
animate::@6: from animate::@17 animate::@5
  (byte~) animate::$12 ← (byte[256]) YPOS *idx (byte) 2
  (byte~) animate::$13 ← (byte~) animate::$12 + (byte) 1
  *((byte[256]) YPOS + (byte) 2) ← (byte~) animate::$13
  (byte~) animate::$14 ← (byte[256]) YPOS *idx (byte) 2
  (boolean~) animate::$15 ← (byte~) animate::$14 == (byte) 25
  if((boolean~) animate::$15) goto animate::@7
  to:animate::@19
animate::@18: from
  to:animate::@5
animate::@7: from animate::@20 animate::@6
  *((byte[256]) YPOS + (byte) 2) ← (byte) 0
  to:animate::@8
animate::@19: from animate::@6
  to:animate::@8
animate::@8: from animate::@19 animate::@7
  (byte~) animate::$16 ← (byte[256]) YPOS *idx (byte) 3
  (byte~) animate::$17 ← (byte~) animate::$16 - (byte) 1
  *((byte[256]) YPOS + (byte) 3) ← (byte~) animate::$17
  (byte~) animate::$18 ← (byte[256]) YPOS *idx (byte) 3
  (boolean~) animate::$19 ← (byte~) animate::$18 == (byte) 255
  if((boolean~) animate::$19) goto animate::@9
  to:animate::@21
animate::@20: from
  to:animate::@7
animate::@9: from animate::@22 animate::@8
  *((byte[256]) YPOS + (byte) 3) ← (byte) 25
  (byte~) animate::$20 ← (byte[256]) XPOS *idx (byte) 3
  (byte~) animate::$21 ← (byte~) animate::$20 + (byte) 7
  *((byte[256]) XPOS + (byte) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (byte[256]) XPOS *idx (byte) 3
  (boolean~) animate::$23 ← (byte~) animate::$22 >= (byte) 40
  if((boolean~) animate::$23) goto animate::@11
  to:animate::@23
animate::@21: from animate::@8
  to:animate::@10
animate::@10: from animate::@12 animate::@21
  to:animate::@return
animate::@22: from
  to:animate::@9
animate::@11: from animate::@24 animate::@9
  (byte~) animate::$24 ← (byte[256]) XPOS *idx (byte) 3
  (byte~) animate::$25 ← (byte~) animate::$24 - (byte) 40
  *((byte[256]) XPOS + (byte) 3) ← (byte~) animate::$25
  to:animate::@12
animate::@23: from animate::@9
  to:animate::@12
animate::@12: from animate::@11 animate::@23
  to:animate::@10
animate::@24: from
  to:animate::@11
animate::@return: from animate::@10
  return 
  to:@RETURN
@2: from @1
  to:@3
addpoint: from
  *((byte[256]) XPOS + (byte) numpoints) ← (byte) addpoint::x
  *((byte[256]) YPOS + (byte) numpoints) ← (byte) addpoint::y
  *((byte[256]) COLS + (byte) numpoints) ← (byte) addpoint::c
  (byte) numpoints ← ++ (byte) numpoints
  to:addpoint::@return
addpoint::@return: from addpoint
  return 
  to:@RETURN
@3: from @2
  to:@4
initscreen: from
  (byte*) initscreen::screen ← (byte*) SCREEN
  to:initscreen::@1
initscreen::@1: from initscreen initscreen::@1
  *((byte*) initscreen::screen) ← (byte) FILL
  (byte*) initscreen::screen ← ++ (byte*) initscreen::screen
  (boolean~) initscreen::$0 ← (byte*) initscreen::screen < (word) 2048
  if((boolean~) initscreen::$0) goto initscreen::@1
  to:initscreen::@2
initscreen::@2: from initscreen::@1
  to:initscreen::@return
initscreen::@return: from initscreen::@2
  return 
  to:@RETURN
@4: from @3
  to:@5
render: from
  (byte*) render::colline ← (byte*) COLORS
  (byte) render::y ← (byte) 0
  to:render::@1
render::@1: from render render::@3
  (byte) render::x ← (byte) 0
  to:render::@2
render::@2: from render::@1 render::@2
  (byte~) render::$0 ← call findcol (byte) render::x (byte) render::y 
  (byte) render::col ← (byte~) render::$0
  *((byte*) render::colline + (byte) render::x) ← (byte) render::col
  (byte) render::x ← ++ (byte) render::x
  (boolean~) render::$1 ← (byte) render::x < (byte) 40
  if((boolean~) render::$1) goto render::@2
  to:render::@3
render::@3: from render::@2
  (byte*~) render::$2 ← (byte*) render::colline + (byte) 40
  (byte*) render::colline ← (byte*~) render::$2
  (byte) render::y ← ++ (byte) render::y
  (boolean~) render::$3 ← (byte) render::y < (byte) 25
  if((boolean~) render::$3) goto render::@1
  to:render::@4
render::@4: from render::@3
  to:render::@return
render::@return: from render::@4
  return 
  to:@RETURN
@5: from @4
  to:@6
findcol: from
  (byte) findcol::mindiff ← (byte) 255
  (byte) findcol::mincol ← (byte) 0
  (byte) findcol::i ← (byte) 0
  to:findcol::@1
findcol::@1: from findcol findcol::@13
  (byte~) findcol::$0 ← (byte[256]) XPOS *idx (byte) findcol::i
  (byte) findcol::xp ← (byte~) findcol::$0
  (byte~) findcol::$1 ← (byte[256]) YPOS *idx (byte) findcol::i
  (byte) findcol::yp ← (byte~) findcol::$1
  (boolean~) findcol::$2 ← (byte) findcol::x == (byte) findcol::xp
  if((boolean~) findcol::$2) goto findcol::@2
  to:findcol::@14
findcol::@2: from findcol::@1 findcol::@15
  (boolean~) findcol::$3 ← (byte) findcol::y == (byte) findcol::yp
  if((boolean~) findcol::$3) goto findcol::@4
  to:findcol::@16
findcol::@14: from findcol::@1
  to:findcol::@3
findcol::@3: from findcol::@14 findcol::@5
  (boolean~) findcol::$4 ← (byte) findcol::x < (byte) findcol::xp
  if((boolean~) findcol::$4) goto findcol::@6
  to:findcol::@19
findcol::@15: from
  to:findcol::@2
findcol::@4: from findcol::@17 findcol::@2
  (byte) findcol::return ← (byte) 0
  to:findcol::@return
findcol::@16: from findcol::@2
  to:findcol::@5
findcol::@5: from findcol::@16 findcol::@18
  to:findcol::@3
findcol::@17: from
  to:findcol::@4
findcol::@return: from findcol::@27 findcol::@28 findcol::@4
  (byte) findcol::return ← (byte) findcol::return
  return (byte) findcol::return
  to:@RETURN
findcol::@18: from
  to:findcol::@5
findcol::@6: from findcol::@20 findcol::@3
  (byte~) findcol::$5 ← (byte) findcol::xp - (byte) findcol::x
  (byte) findcol::diff ← (byte~) findcol::$5
  to:findcol::@8
findcol::@19: from findcol::@3
  to:findcol::@7
findcol::@7: from findcol::@19 findcol::@21
  (byte~) findcol::$6 ← (byte) findcol::x - (byte) findcol::xp
  (byte) findcol::diff ← (byte~) findcol::$6
  to:findcol::@8
findcol::@20: from
  to:findcol::@6
findcol::@8: from findcol::@6 findcol::@7
  (boolean~) findcol::$7 ← (byte) findcol::y < (byte) findcol::yp
  if((boolean~) findcol::$7) goto findcol::@9
  to:findcol::@22
findcol::@21: from
  to:findcol::@7
findcol::@9: from findcol::@23 findcol::@8
  (byte~) findcol::$8 ← (byte) findcol::yp - (byte) findcol::y
  (byte~) findcol::$9 ← (byte) findcol::diff + (byte~) findcol::$8
  (byte) findcol::diff ← (byte~) findcol::$9
  to:findcol::@11
findcol::@22: from findcol::@8
  to:findcol::@10
findcol::@10: from findcol::@22 findcol::@24
  (byte~) findcol::$10 ← (byte) findcol::y - (byte) findcol::yp
  (byte~) findcol::$11 ← (byte) findcol::diff + (byte~) findcol::$10
  (byte) findcol::diff ← (byte~) findcol::$11
  to:findcol::@11
findcol::@23: from
  to:findcol::@9
findcol::@11: from findcol::@10 findcol::@9
  (boolean~) findcol::$12 ← (byte) findcol::diff < (byte) findcol::mindiff
  if((boolean~) findcol::$12) goto findcol::@12
  to:findcol::@25
findcol::@24: from
  to:findcol::@10
findcol::@12: from findcol::@11 findcol::@26
  (byte) findcol::mindiff ← (byte) findcol::diff
  (byte~) findcol::$13 ← (byte[256]) COLS *idx (byte) findcol::i
  (byte) findcol::mincol ← (byte~) findcol::$13
  to:findcol::@13
findcol::@25: from findcol::@11
  to:findcol::@13
findcol::@13: from findcol::@12 findcol::@25
  (byte) findcol::i ← ++ (byte) findcol::i
  (boolean~) findcol::$14 ← (byte) findcol::i < (byte) numpoints
  if((boolean~) findcol::$14) goto findcol::@1
  to:findcol::@27
findcol::@26: from
  to:findcol::@12
findcol::@27: from findcol::@13
  (byte) findcol::return ← (byte) findcol::mincol
  to:findcol::@return
findcol::@28: from
  to:findcol::@return
@6: from @5
  to:@END
@END: from @6

Removing empty block main::@2
Removing empty block @1
Removing empty block animate::@13
Removing empty block animate::@14
Removing empty block animate::@15
Removing empty block animate::@16
Removing empty block animate::@17
Removing empty block animate::@18
Removing empty block animate::@19
Removing empty block animate::@20
Removing empty block animate::@21
Removing empty block animate::@10
Removing empty block animate::@22
Removing empty block animate::@23
Removing empty block animate::@12
Removing empty block animate::@24
Removing empty block @2
Removing empty block @3
Removing empty block initscreen::@2
Removing empty block @4
Removing empty block render::@4
Removing empty block @5
Removing empty block findcol::@14
Removing empty block findcol::@15
Removing empty block findcol::@16
Removing empty block findcol::@5
Removing empty block findcol::@17
Removing empty block findcol::@18
Removing empty block findcol::@19
Removing empty block findcol::@20
Removing empty block findcol::@21
Removing empty block findcol::@22
Removing empty block findcol::@23
Removing empty block findcol::@24
Removing empty block findcol::@25
Removing empty block findcol::@26
Removing empty block findcol::@28
Removing empty block @6
CONTROL FLOW GRAPH
@BEGIN: from
  (byte*) SCREEN ← (word) 1024
  (byte*) COLORS ← (word) 55296
  (byte) FILL ← (byte) 230
  (byte) numpoints ← (byte) 0
  (byte[256]) XPOS ← (word) 4096
  (byte[256]) YPOS ← (word) 4352
  (byte[256]) COLS ← (word) 4608
  (void~) $0 ← call main 
  to:@END
main: from
  (void~) main::$0 ← call addpoint (byte) 5 (byte) 5 (byte) 1 
  (void~) main::$1 ← call addpoint (byte) 15 (byte) 8 (byte) 2 
  (void~) main::$2 ← call addpoint (byte) 6 (byte) 14 (byte) 3 
  (void~) main::$3 ← call addpoint (byte) 34 (byte) 2 (byte) 4 
  (void~) main::$4 ← call addpoint (byte) 21 (byte) 17 (byte) 5 
  (void~) main::$5 ← call addpoint (byte) 31 (byte) 22 (byte) 7 
  (void~) main::$6 ← call initscreen 
  to:main::@1
main::@1: from main main::@1
  (void~) main::$7 ← call render 
  (void~) main::$8 ← call animate 
  if(true) goto main::@1
  to:main::@return
main::@return: from main::@1
  return 
  to:@RETURN
animate: from
  (byte~) animate::$0 ← (byte[256]) XPOS *idx (byte) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((byte[256]) XPOS + (byte) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (byte[256]) XPOS *idx (byte) 0
  (boolean~) animate::$3 ← (byte~) animate::$2 == (byte) 40
  if((boolean~) animate::$3) goto animate::@1
  to:animate::@2
animate::@1: from animate
  *((byte[256]) XPOS + (byte) 0) ← (byte) 0
  to:animate::@2
animate::@2: from animate animate::@1
  (byte~) animate::$4 ← (byte[256]) YPOS *idx (byte) 0
  (byte~) animate::$5 ← (byte~) animate::$4 + (byte) 1
  *((byte[256]) YPOS + (byte) 0) ← (byte~) animate::$5
  (byte~) animate::$6 ← (byte[256]) YPOS *idx (byte) 0
  (boolean~) animate::$7 ← (byte~) animate::$6 == (byte) 25
  if((boolean~) animate::$7) goto animate::@3
  to:animate::@4
animate::@3: from animate::@2
  *((byte[256]) YPOS + (byte) 0) ← (byte) 0
  to:animate::@4
animate::@4: from animate::@2 animate::@3
  (byte~) animate::$8 ← (byte[256]) XPOS *idx (byte) 1
  (byte~) animate::$9 ← (byte~) animate::$8 - (byte) 1
  *((byte[256]) XPOS + (byte) 1) ← (byte~) animate::$9
  (byte~) animate::$10 ← (byte[256]) XPOS *idx (byte) 1
  (boolean~) animate::$11 ← (byte~) animate::$10 == (byte) 255
  if((boolean~) animate::$11) goto animate::@5
  to:animate::@6
animate::@5: from animate::@4
  *((byte[256]) XPOS + (byte) 1) ← (byte) 40
  to:animate::@6
animate::@6: from animate::@4 animate::@5
  (byte~) animate::$12 ← (byte[256]) YPOS *idx (byte) 2
  (byte~) animate::$13 ← (byte~) animate::$12 + (byte) 1
  *((byte[256]) YPOS + (byte) 2) ← (byte~) animate::$13
  (byte~) animate::$14 ← (byte[256]) YPOS *idx (byte) 2
  (boolean~) animate::$15 ← (byte~) animate::$14 == (byte) 25
  if((boolean~) animate::$15) goto animate::@7
  to:animate::@8
animate::@7: from animate::@6
  *((byte[256]) YPOS + (byte) 2) ← (byte) 0
  to:animate::@8
animate::@8: from animate::@6 animate::@7
  (byte~) animate::$16 ← (byte[256]) YPOS *idx (byte) 3
  (byte~) animate::$17 ← (byte~) animate::$16 - (byte) 1
  *((byte[256]) YPOS + (byte) 3) ← (byte~) animate::$17
  (byte~) animate::$18 ← (byte[256]) YPOS *idx (byte) 3
  (boolean~) animate::$19 ← (byte~) animate::$18 == (byte) 255
  if((boolean~) animate::$19) goto animate::@9
  to:animate::@return
animate::@9: from animate::@8
  *((byte[256]) YPOS + (byte) 3) ← (byte) 25
  (byte~) animate::$20 ← (byte[256]) XPOS *idx (byte) 3
  (byte~) animate::$21 ← (byte~) animate::$20 + (byte) 7
  *((byte[256]) XPOS + (byte) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (byte[256]) XPOS *idx (byte) 3
  (boolean~) animate::$23 ← (byte~) animate::$22 >= (byte) 40
  if((boolean~) animate::$23) goto animate::@11
  to:animate::@return
animate::@11: from animate::@9
  (byte~) animate::$24 ← (byte[256]) XPOS *idx (byte) 3
  (byte~) animate::$25 ← (byte~) animate::$24 - (byte) 40
  *((byte[256]) XPOS + (byte) 3) ← (byte~) animate::$25
  to:animate::@return
animate::@return: from animate::@11 animate::@8 animate::@9
  return 
  to:@RETURN
addpoint: from
  *((byte[256]) XPOS + (byte) numpoints) ← (byte) addpoint::x
  *((byte[256]) YPOS + (byte) numpoints) ← (byte) addpoint::y
  *((byte[256]) COLS + (byte) numpoints) ← (byte) addpoint::c
  (byte) numpoints ← ++ (byte) numpoints
  to:addpoint::@return
addpoint::@return: from addpoint
  return 
  to:@RETURN
initscreen: from
  (byte*) initscreen::screen ← (byte*) SCREEN
  to:initscreen::@1
initscreen::@1: from initscreen initscreen::@1
  *((byte*) initscreen::screen) ← (byte) FILL
  (byte*) initscreen::screen ← ++ (byte*) initscreen::screen
  (boolean~) initscreen::$0 ← (byte*) initscreen::screen < (word) 2048
  if((boolean~) initscreen::$0) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: from initscreen::@1
  return 
  to:@RETURN
render: from
  (byte*) render::colline ← (byte*) COLORS
  (byte) render::y ← (byte) 0
  to:render::@1
render::@1: from render render::@3
  (byte) render::x ← (byte) 0
  to:render::@2
render::@2: from render::@1 render::@2
  (byte~) render::$0 ← call findcol (byte) render::x (byte) render::y 
  (byte) render::col ← (byte~) render::$0
  *((byte*) render::colline + (byte) render::x) ← (byte) render::col
  (byte) render::x ← ++ (byte) render::x
  (boolean~) render::$1 ← (byte) render::x < (byte) 40
  if((boolean~) render::$1) goto render::@2
  to:render::@3
render::@3: from render::@2
  (byte*~) render::$2 ← (byte*) render::colline + (byte) 40
  (byte*) render::colline ← (byte*~) render::$2
  (byte) render::y ← ++ (byte) render::y
  (boolean~) render::$3 ← (byte) render::y < (byte) 25
  if((boolean~) render::$3) goto render::@1
  to:render::@return
render::@return: from render::@3
  return 
  to:@RETURN
findcol: from
  (byte) findcol::mindiff ← (byte) 255
  (byte) findcol::mincol ← (byte) 0
  (byte) findcol::i ← (byte) 0
  to:findcol::@1
findcol::@1: from findcol findcol::@13
  (byte~) findcol::$0 ← (byte[256]) XPOS *idx (byte) findcol::i
  (byte) findcol::xp ← (byte~) findcol::$0
  (byte~) findcol::$1 ← (byte[256]) YPOS *idx (byte) findcol::i
  (byte) findcol::yp ← (byte~) findcol::$1
  (boolean~) findcol::$2 ← (byte) findcol::x == (byte) findcol::xp
  if((boolean~) findcol::$2) goto findcol::@2
  to:findcol::@3
findcol::@2: from findcol::@1
  (boolean~) findcol::$3 ← (byte) findcol::y == (byte) findcol::yp
  if((boolean~) findcol::$3) goto findcol::@4
  to:findcol::@3
findcol::@3: from findcol::@1 findcol::@2
  (boolean~) findcol::$4 ← (byte) findcol::x < (byte) findcol::xp
  if((boolean~) findcol::$4) goto findcol::@6
  to:findcol::@7
findcol::@4: from findcol::@2
  (byte) findcol::return ← (byte) 0
  to:findcol::@return
findcol::@return: from findcol::@27 findcol::@4
  (byte) findcol::return ← (byte) findcol::return
  return (byte) findcol::return
  to:@RETURN
findcol::@6: from findcol::@3
  (byte~) findcol::$5 ← (byte) findcol::xp - (byte) findcol::x
  (byte) findcol::diff ← (byte~) findcol::$5
  to:findcol::@8
findcol::@7: from findcol::@3
  (byte~) findcol::$6 ← (byte) findcol::x - (byte) findcol::xp
  (byte) findcol::diff ← (byte~) findcol::$6
  to:findcol::@8
findcol::@8: from findcol::@6 findcol::@7
  (boolean~) findcol::$7 ← (byte) findcol::y < (byte) findcol::yp
  if((boolean~) findcol::$7) goto findcol::@9
  to:findcol::@10
findcol::@9: from findcol::@8
  (byte~) findcol::$8 ← (byte) findcol::yp - (byte) findcol::y
  (byte~) findcol::$9 ← (byte) findcol::diff + (byte~) findcol::$8
  (byte) findcol::diff ← (byte~) findcol::$9
  to:findcol::@11
findcol::@10: from findcol::@8
  (byte~) findcol::$10 ← (byte) findcol::y - (byte) findcol::yp
  (byte~) findcol::$11 ← (byte) findcol::diff + (byte~) findcol::$10
  (byte) findcol::diff ← (byte~) findcol::$11
  to:findcol::@11
findcol::@11: from findcol::@10 findcol::@9
  (boolean~) findcol::$12 ← (byte) findcol::diff < (byte) findcol::mindiff
  if((boolean~) findcol::$12) goto findcol::@12
  to:findcol::@13
findcol::@12: from findcol::@11
  (byte) findcol::mindiff ← (byte) findcol::diff
  (byte~) findcol::$13 ← (byte[256]) COLS *idx (byte) findcol::i
  (byte) findcol::mincol ← (byte~) findcol::$13
  to:findcol::@13
findcol::@13: from findcol::@11 findcol::@12
  (byte) findcol::i ← ++ (byte) findcol::i
  (boolean~) findcol::$14 ← (byte) findcol::i < (byte) numpoints
  if((boolean~) findcol::$14) goto findcol::@1
  to:findcol::@27
findcol::@27: from findcol::@13
  (byte) findcol::return ← (byte) findcol::mincol
  to:findcol::@return
@END: from @BEGIN

PROCEDURE MODIFY VARIABLE ANALYSIS
main modifies numpoints
addpoint modifies numpoints

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL
@BEGIN: from
  (byte*) SCREEN ← (word) 1024
  (byte*) COLORS ← (word) 55296
  (byte) FILL ← (byte) 230
  (byte) numpoints ← (byte) 0
  (byte[256]) XPOS ← (word) 4096
  (byte[256]) YPOS ← (word) 4352
  (byte[256]) COLS ← (word) 4608
  call main param-assignment
  to:@7
@7: from @BEGIN
  (byte) numpoints ← (byte) numpoints
  to:@END
main: from @BEGIN
  (byte) addpoint::x ← (byte) 5
  (byte) addpoint::y ← (byte) 5
  (byte) addpoint::c ← (byte) 1
  call addpoint param-assignment
  to:main::@3
main::@3: from main
  (byte) numpoints ← (byte) numpoints
  (byte) addpoint::x ← (byte) 15
  (byte) addpoint::y ← (byte) 8
  (byte) addpoint::c ← (byte) 2
  call addpoint param-assignment
  to:main::@4
main::@4: from main::@3
  (byte) numpoints ← (byte) numpoints
  (byte) addpoint::x ← (byte) 6
  (byte) addpoint::y ← (byte) 14
  (byte) addpoint::c ← (byte) 3
  call addpoint param-assignment
  to:main::@5
main::@5: from main::@4
  (byte) numpoints ← (byte) numpoints
  (byte) addpoint::x ← (byte) 34
  (byte) addpoint::y ← (byte) 2
  (byte) addpoint::c ← (byte) 4
  call addpoint param-assignment
  to:main::@6
main::@6: from main::@5
  (byte) numpoints ← (byte) numpoints
  (byte) addpoint::x ← (byte) 21
  (byte) addpoint::y ← (byte) 17
  (byte) addpoint::c ← (byte) 5
  call addpoint param-assignment
  to:main::@7
main::@7: from main::@6
  (byte) numpoints ← (byte) numpoints
  (byte) addpoint::x ← (byte) 31
  (byte) addpoint::y ← (byte) 22
  (byte) addpoint::c ← (byte) 7
  call addpoint param-assignment
  to:main::@8
main::@8: from main::@7
  (byte) numpoints ← (byte) numpoints
  call initscreen param-assignment
  to:main::@9
main::@9: from main::@8
  to:main::@1
main::@1: from main::@11 main::@9
  call render param-assignment
  to:main::@10
main::@10: from main::@1
  call animate param-assignment
  to:main::@11
main::@11: from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: from main::@11
  (byte) numpoints ← (byte) numpoints
  return 
  to:@RETURN
animate: from main::@10
  (byte~) animate::$0 ← (byte[256]) XPOS *idx (byte) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((byte[256]) XPOS + (byte) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (byte[256]) XPOS *idx (byte) 0
  (boolean~) animate::$3 ← (byte~) animate::$2 == (byte) 40
  if((boolean~) animate::$3) goto animate::@1
  to:animate::@2
animate::@1: from animate
  *((byte[256]) XPOS + (byte) 0) ← (byte) 0
  to:animate::@2
animate::@2: from animate animate::@1
  (byte~) animate::$4 ← (byte[256]) YPOS *idx (byte) 0
  (byte~) animate::$5 ← (byte~) animate::$4 + (byte) 1
  *((byte[256]) YPOS + (byte) 0) ← (byte~) animate::$5
  (byte~) animate::$6 ← (byte[256]) YPOS *idx (byte) 0
  (boolean~) animate::$7 ← (byte~) animate::$6 == (byte) 25
  if((boolean~) animate::$7) goto animate::@3
  to:animate::@4
animate::@3: from animate::@2
  *((byte[256]) YPOS + (byte) 0) ← (byte) 0
  to:animate::@4
animate::@4: from animate::@2 animate::@3
  (byte~) animate::$8 ← (byte[256]) XPOS *idx (byte) 1
  (byte~) animate::$9 ← (byte~) animate::$8 - (byte) 1
  *((byte[256]) XPOS + (byte) 1) ← (byte~) animate::$9
  (byte~) animate::$10 ← (byte[256]) XPOS *idx (byte) 1
  (boolean~) animate::$11 ← (byte~) animate::$10 == (byte) 255
  if((boolean~) animate::$11) goto animate::@5
  to:animate::@6
animate::@5: from animate::@4
  *((byte[256]) XPOS + (byte) 1) ← (byte) 40
  to:animate::@6
animate::@6: from animate::@4 animate::@5
  (byte~) animate::$12 ← (byte[256]) YPOS *idx (byte) 2
  (byte~) animate::$13 ← (byte~) animate::$12 + (byte) 1
  *((byte[256]) YPOS + (byte) 2) ← (byte~) animate::$13
  (byte~) animate::$14 ← (byte[256]) YPOS *idx (byte) 2
  (boolean~) animate::$15 ← (byte~) animate::$14 == (byte) 25
  if((boolean~) animate::$15) goto animate::@7
  to:animate::@8
animate::@7: from animate::@6
  *((byte[256]) YPOS + (byte) 2) ← (byte) 0
  to:animate::@8
animate::@8: from animate::@6 animate::@7
  (byte~) animate::$16 ← (byte[256]) YPOS *idx (byte) 3
  (byte~) animate::$17 ← (byte~) animate::$16 - (byte) 1
  *((byte[256]) YPOS + (byte) 3) ← (byte~) animate::$17
  (byte~) animate::$18 ← (byte[256]) YPOS *idx (byte) 3
  (boolean~) animate::$19 ← (byte~) animate::$18 == (byte) 255
  if((boolean~) animate::$19) goto animate::@9
  to:animate::@return
animate::@9: from animate::@8
  *((byte[256]) YPOS + (byte) 3) ← (byte) 25
  (byte~) animate::$20 ← (byte[256]) XPOS *idx (byte) 3
  (byte~) animate::$21 ← (byte~) animate::$20 + (byte) 7
  *((byte[256]) XPOS + (byte) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (byte[256]) XPOS *idx (byte) 3
  (boolean~) animate::$23 ← (byte~) animate::$22 >= (byte) 40
  if((boolean~) animate::$23) goto animate::@11
  to:animate::@return
animate::@11: from animate::@9
  (byte~) animate::$24 ← (byte[256]) XPOS *idx (byte) 3
  (byte~) animate::$25 ← (byte~) animate::$24 - (byte) 40
  *((byte[256]) XPOS + (byte) 3) ← (byte~) animate::$25
  to:animate::@return
animate::@return: from animate::@11 animate::@8 animate::@9
  return 
  to:@RETURN
addpoint: from main main::@3 main::@4 main::@5 main::@6 main::@7
  *((byte[256]) XPOS + (byte) numpoints) ← (byte) addpoint::x
  *((byte[256]) YPOS + (byte) numpoints) ← (byte) addpoint::y
  *((byte[256]) COLS + (byte) numpoints) ← (byte) addpoint::c
  (byte) numpoints ← ++ (byte) numpoints
  to:addpoint::@return
addpoint::@return: from addpoint
  (byte) numpoints ← (byte) numpoints
  return 
  to:@RETURN
initscreen: from main::@8
  (byte*) initscreen::screen ← (byte*) SCREEN
  to:initscreen::@1
initscreen::@1: from initscreen initscreen::@1
  *((byte*) initscreen::screen) ← (byte) FILL
  (byte*) initscreen::screen ← ++ (byte*) initscreen::screen
  (boolean~) initscreen::$0 ← (byte*) initscreen::screen < (word) 2048
  if((boolean~) initscreen::$0) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: from initscreen::@1
  return 
  to:@RETURN
render: from main::@1
  (byte*) render::colline ← (byte*) COLORS
  (byte) render::y ← (byte) 0
  to:render::@1
render::@1: from render render::@3
  (byte) render::x ← (byte) 0
  to:render::@2
render::@2: from render::@1 render::@5
  (byte) findcol::x ← (byte) render::x
  (byte) findcol::y ← (byte) render::y
  (byte) findcol::return ← call findcol param-assignment
  to:render::@5
render::@5: from render::@2
  (byte~) render::$0 ← (byte) findcol::return
  (byte) render::col ← (byte~) render::$0
  *((byte*) render::colline + (byte) render::x) ← (byte) render::col
  (byte) render::x ← ++ (byte) render::x
  (boolean~) render::$1 ← (byte) render::x < (byte) 40
  if((boolean~) render::$1) goto render::@2
  to:render::@3
render::@3: from render::@5
  (byte*~) render::$2 ← (byte*) render::colline + (byte) 40
  (byte*) render::colline ← (byte*~) render::$2
  (byte) render::y ← ++ (byte) render::y
  (boolean~) render::$3 ← (byte) render::y < (byte) 25
  if((boolean~) render::$3) goto render::@1
  to:render::@return
render::@return: from render::@3
  return 
  to:@RETURN
findcol: from render::@2
  (byte) findcol::mindiff ← (byte) 255
  (byte) findcol::mincol ← (byte) 0
  (byte) findcol::i ← (byte) 0
  to:findcol::@1
findcol::@1: from findcol findcol::@13
  (byte~) findcol::$0 ← (byte[256]) XPOS *idx (byte) findcol::i
  (byte) findcol::xp ← (byte~) findcol::$0
  (byte~) findcol::$1 ← (byte[256]) YPOS *idx (byte) findcol::i
  (byte) findcol::yp ← (byte~) findcol::$1
  (boolean~) findcol::$2 ← (byte) findcol::x == (byte) findcol::xp
  if((boolean~) findcol::$2) goto findcol::@2
  to:findcol::@3
findcol::@2: from findcol::@1
  (boolean~) findcol::$3 ← (byte) findcol::y == (byte) findcol::yp
  if((boolean~) findcol::$3) goto findcol::@4
  to:findcol::@3
findcol::@3: from findcol::@1 findcol::@2
  (boolean~) findcol::$4 ← (byte) findcol::x < (byte) findcol::xp
  if((boolean~) findcol::$4) goto findcol::@6
  to:findcol::@7
findcol::@4: from findcol::@2
  (byte) findcol::return ← (byte) 0
  to:findcol::@return
findcol::@return: from findcol::@27 findcol::@4
  (byte) findcol::return ← (byte) findcol::return
  return (byte) findcol::return
  to:@RETURN
findcol::@6: from findcol::@3
  (byte~) findcol::$5 ← (byte) findcol::xp - (byte) findcol::x
  (byte) findcol::diff ← (byte~) findcol::$5
  to:findcol::@8
findcol::@7: from findcol::@3
  (byte~) findcol::$6 ← (byte) findcol::x - (byte) findcol::xp
  (byte) findcol::diff ← (byte~) findcol::$6
  to:findcol::@8
findcol::@8: from findcol::@6 findcol::@7
  (boolean~) findcol::$7 ← (byte) findcol::y < (byte) findcol::yp
  if((boolean~) findcol::$7) goto findcol::@9
  to:findcol::@10
findcol::@9: from findcol::@8
  (byte~) findcol::$8 ← (byte) findcol::yp - (byte) findcol::y
  (byte~) findcol::$9 ← (byte) findcol::diff + (byte~) findcol::$8
  (byte) findcol::diff ← (byte~) findcol::$9
  to:findcol::@11
findcol::@10: from findcol::@8
  (byte~) findcol::$10 ← (byte) findcol::y - (byte) findcol::yp
  (byte~) findcol::$11 ← (byte) findcol::diff + (byte~) findcol::$10
  (byte) findcol::diff ← (byte~) findcol::$11
  to:findcol::@11
findcol::@11: from findcol::@10 findcol::@9
  (boolean~) findcol::$12 ← (byte) findcol::diff < (byte) findcol::mindiff
  if((boolean~) findcol::$12) goto findcol::@12
  to:findcol::@13
findcol::@12: from findcol::@11
  (byte) findcol::mindiff ← (byte) findcol::diff
  (byte~) findcol::$13 ← (byte[256]) COLS *idx (byte) findcol::i
  (byte) findcol::mincol ← (byte~) findcol::$13
  to:findcol::@13
findcol::@13: from findcol::@11 findcol::@12
  (byte) findcol::i ← ++ (byte) findcol::i
  (boolean~) findcol::$14 ← (byte) findcol::i < (byte) numpoints
  if((boolean~) findcol::$14) goto findcol::@1
  to:findcol::@27
findcol::@27: from findcol::@13
  (byte) findcol::return ← (byte) findcol::mincol
  to:findcol::@return
@END: from @7

Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
CONTROL FLOW GRAPH SSA
@BEGIN: from
  (byte*) SCREEN#0 ← (word) 1024
  (byte*) COLORS#0 ← (word) 55296
  (byte) FILL#0 ← (byte) 230
  (byte) numpoints#0 ← (byte) 0
  (byte[256]) XPOS#0 ← (word) 4096
  (byte[256]) YPOS#0 ← (word) 4352
  (byte[256]) COLS#0 ← (word) 4608
  call main param-assignment
  to:@7
@7: from @BEGIN
  (byte) numpoints#11 ← phi( @BEGIN/(byte) numpoints#0 )
  (byte) numpoints#1 ← (byte) numpoints#11
  to:@END
main: from @BEGIN
  (byte*) COLORS#12 ← phi( @BEGIN/(byte*) COLORS#0 )
  (byte) FILL#9 ← phi( @BEGIN/(byte) FILL#0 )
  (byte*) SCREEN#8 ← phi( @BEGIN/(byte*) SCREEN#0 )
  (byte[256]) COLS#3 ← phi( @BEGIN/(byte[256]) COLS#0 )
  (byte[256]) YPOS#13 ← phi( @BEGIN/(byte[256]) YPOS#0 )
  (byte[256]) XPOS#13 ← phi( @BEGIN/(byte[256]) XPOS#0 )
  (byte) numpoints#22 ← phi( @BEGIN/(byte) numpoints#0 )
  (byte) addpoint::x#0 ← (byte) 5
  (byte) addpoint::y#0 ← (byte) 5
  (byte) addpoint::c#0 ← (byte) 1
  call addpoint param-assignment
  to:main::@3
main::@3: from main
  (byte*) COLORS#11 ← phi( main/(byte*) COLORS#12 )
  (byte) FILL#8 ← phi( main/(byte) FILL#9 )
  (byte*) SCREEN#7 ← phi( main/(byte*) SCREEN#8 )
  (byte[256]) COLS#4 ← phi( main/(byte[256]) COLS#3 )
  (byte[256]) YPOS#14 ← phi( main/(byte[256]) YPOS#13 )
  (byte[256]) XPOS#14 ← phi( main/(byte[256]) XPOS#13 )
  (byte) numpoints#12 ← phi( main/(byte) numpoints#22 )
  (byte) numpoints#2 ← (byte) numpoints#12
  (byte) addpoint::x#1 ← (byte) 15
  (byte) addpoint::y#1 ← (byte) 8
  (byte) addpoint::c#1 ← (byte) 2
  call addpoint param-assignment
  to:main::@4
main::@4: from main::@3
  (byte*) COLORS#10 ← phi( main::@3/(byte*) COLORS#11 )
  (byte) FILL#7 ← phi( main::@3/(byte) FILL#8 )
  (byte*) SCREEN#6 ← phi( main::@3/(byte*) SCREEN#7 )
  (byte[256]) COLS#5 ← phi( main::@3/(byte[256]) COLS#4 )
  (byte[256]) YPOS#15 ← phi( main::@3/(byte[256]) YPOS#14 )
  (byte[256]) XPOS#15 ← phi( main::@3/(byte[256]) XPOS#14 )
  (byte) numpoints#13 ← phi( main::@3/(byte) numpoints#2 )
  (byte) numpoints#3 ← (byte) numpoints#13
  (byte) addpoint::x#2 ← (byte) 6
  (byte) addpoint::y#2 ← (byte) 14
  (byte) addpoint::c#2 ← (byte) 3
  call addpoint param-assignment
  to:main::@5
main::@5: from main::@4
  (byte*) COLORS#9 ← phi( main::@4/(byte*) COLORS#10 )
  (byte) FILL#6 ← phi( main::@4/(byte) FILL#7 )
  (byte*) SCREEN#5 ← phi( main::@4/(byte*) SCREEN#6 )
  (byte[256]) COLS#6 ← phi( main::@4/(byte[256]) COLS#5 )
  (byte[256]) YPOS#16 ← phi( main::@4/(byte[256]) YPOS#15 )
  (byte[256]) XPOS#16 ← phi( main::@4/(byte[256]) XPOS#15 )
  (byte) numpoints#14 ← phi( main::@4/(byte) numpoints#3 )
  (byte) numpoints#4 ← (byte) numpoints#14
  (byte) addpoint::x#3 ← (byte) 34
  (byte) addpoint::y#3 ← (byte) 2
  (byte) addpoint::c#3 ← (byte) 4
  call addpoint param-assignment
  to:main::@6
main::@6: from main::@5
  (byte*) COLORS#8 ← phi( main::@5/(byte*) COLORS#9 )
  (byte) FILL#5 ← phi( main::@5/(byte) FILL#6 )
  (byte*) SCREEN#4 ← phi( main::@5/(byte*) SCREEN#5 )
  (byte[256]) COLS#7 ← phi( main::@5/(byte[256]) COLS#6 )
  (byte[256]) YPOS#17 ← phi( main::@5/(byte[256]) YPOS#16 )
  (byte[256]) XPOS#17 ← phi( main::@5/(byte[256]) XPOS#16 )
  (byte) numpoints#15 ← phi( main::@5/(byte) numpoints#4 )
  (byte) numpoints#5 ← (byte) numpoints#15
  (byte) addpoint::x#4 ← (byte) 21
  (byte) addpoint::y#4 ← (byte) 17
  (byte) addpoint::c#4 ← (byte) 5
  call addpoint param-assignment
  to:main::@7
main::@7: from main::@6
  (byte*) COLORS#7 ← phi( main::@6/(byte*) COLORS#8 )
  (byte) FILL#4 ← phi( main::@6/(byte) FILL#5 )
  (byte*) SCREEN#3 ← phi( main::@6/(byte*) SCREEN#4 )
  (byte[256]) COLS#8 ← phi( main::@6/(byte[256]) COLS#7 )
  (byte[256]) YPOS#18 ← phi( main::@6/(byte[256]) YPOS#17 )
  (byte[256]) XPOS#18 ← phi( main::@6/(byte[256]) XPOS#17 )
  (byte) numpoints#16 ← phi( main::@6/(byte) numpoints#5 )
  (byte) numpoints#6 ← (byte) numpoints#16
  (byte) addpoint::x#5 ← (byte) 31
  (byte) addpoint::y#5 ← (byte) 22
  (byte) addpoint::c#5 ← (byte) 7
  call addpoint param-assignment
  to:main::@8
main::@8: from main::@7
  (byte[256]) COLS#28 ← phi( main::@7/(byte[256]) COLS#8 )
  (byte[256]) YPOS#35 ← phi( main::@7/(byte[256]) YPOS#18 )
  (byte[256]) XPOS#33 ← phi( main::@7/(byte[256]) XPOS#18 )
  (byte*) COLORS#5 ← phi( main::@7/(byte*) COLORS#7 )
  (byte) FILL#3 ← phi( main::@7/(byte) FILL#4 )
  (byte*) SCREEN#2 ← phi( main::@7/(byte*) SCREEN#3 )
  (byte) numpoints#17 ← phi( main::@7/(byte) numpoints#6 )
  (byte) numpoints#7 ← (byte) numpoints#17
  call initscreen param-assignment
  to:main::@9
main::@9: from main::@8
  (byte[256]) COLS#27 ← phi( main::@8/(byte[256]) COLS#28 )
  (byte[256]) YPOS#31 ← phi( main::@8/(byte[256]) YPOS#35 )
  (byte) numpoints#31 ← phi( main::@8/(byte) numpoints#7 )
  (byte[256]) XPOS#28 ← phi( main::@8/(byte[256]) XPOS#33 )
  (byte*) COLORS#4 ← phi( main::@8/(byte*) COLORS#5 )
  to:main::@1
main::@1: from main::@11 main::@9
  (byte[256]) COLS#25 ← phi( main::@11/(byte[256]) COLS#26 main::@9/(byte[256]) COLS#27 )
  (byte[256]) YPOS#25 ← phi( main::@11/(byte[256]) YPOS#30 main::@9/(byte[256]) YPOS#31 )
  (byte) numpoints#29 ← phi( main::@11/(byte) numpoints#23 main::@9/(byte) numpoints#31 )
  (byte[256]) XPOS#21 ← phi( main::@11/(byte[256]) XPOS#27 main::@9/(byte[256]) XPOS#28 )
  (byte*) COLORS#2 ← phi( main::@11/(byte*) COLORS#3 main::@9/(byte*) COLORS#4 )
  call render param-assignment
  to:main::@10
main::@10: from main::@1
  (byte[256]) COLS#29 ← phi( main::@1/(byte[256]) COLS#25 )
  (byte*) COLORS#6 ← phi( main::@1/(byte*) COLORS#2 )
  (byte[256]) YPOS#21 ← phi( main::@1/(byte[256]) YPOS#25 )
  (byte) numpoints#26 ← phi( main::@1/(byte) numpoints#29 )
  (byte[256]) XPOS#9 ← phi( main::@1/(byte[256]) XPOS#21 )
  call animate param-assignment
  to:main::@11
main::@11: from main::@10
  (byte[256]) COLS#26 ← phi( main::@10/(byte[256]) COLS#29 )
  (byte[256]) YPOS#30 ← phi( main::@10/(byte[256]) YPOS#21 )
  (byte[256]) XPOS#27 ← phi( main::@10/(byte[256]) XPOS#9 )
  (byte*) COLORS#3 ← phi( main::@10/(byte*) COLORS#6 )
  (byte) numpoints#23 ← phi( main::@10/(byte) numpoints#26 )
  if(true) goto main::@1
  to:main::@return
main::@return: from main::@11
  (byte) numpoints#18 ← phi( main::@11/(byte) numpoints#23 )
  (byte) numpoints#8 ← (byte) numpoints#18
  return 
  to:@RETURN
animate: from main::@10
  (byte[256]) YPOS#9 ← phi( main::@10/(byte[256]) YPOS#21 )
  (byte[256]) XPOS#1 ← phi( main::@10/(byte[256]) XPOS#9 )
  (byte~) animate::$0 ← (byte[256]) XPOS#1 *idx (byte) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((byte[256]) XPOS#1 + (byte) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (byte[256]) XPOS#1 *idx (byte) 0
  (boolean~) animate::$3 ← (byte~) animate::$2 == (byte) 40
  if((boolean~) animate::$3) goto animate::@1
  to:animate::@2
animate::@1: from animate
  (byte[256]) YPOS#10 ← phi( animate/(byte[256]) YPOS#9 )
  (byte[256]) XPOS#2 ← phi( animate/(byte[256]) XPOS#1 )
  *((byte[256]) XPOS#2 + (byte) 0) ← (byte) 0
  to:animate::@2
animate::@2: from animate animate::@1
  (byte[256]) XPOS#10 ← phi( animate/(byte[256]) XPOS#1 animate::@1/(byte[256]) XPOS#2 )
  (byte[256]) YPOS#1 ← phi( animate/(byte[256]) YPOS#9 animate::@1/(byte[256]) YPOS#10 )
  (byte~) animate::$4 ← (byte[256]) YPOS#1 *idx (byte) 0
  (byte~) animate::$5 ← (byte~) animate::$4 + (byte) 1
  *((byte[256]) YPOS#1 + (byte) 0) ← (byte~) animate::$5
  (byte~) animate::$6 ← (byte[256]) YPOS#1 *idx (byte) 0
  (boolean~) animate::$7 ← (byte~) animate::$6 == (byte) 25
  if((boolean~) animate::$7) goto animate::@3
  to:animate::@4
animate::@3: from animate::@2
  (byte[256]) XPOS#11 ← phi( animate::@2/(byte[256]) XPOS#10 )
  (byte[256]) YPOS#2 ← phi( animate::@2/(byte[256]) YPOS#1 )
  *((byte[256]) YPOS#2 + (byte) 0) ← (byte) 0
  to:animate::@4
animate::@4: from animate::@2 animate::@3
  (byte[256]) YPOS#11 ← phi( animate::@2/(byte[256]) YPOS#1 animate::@3/(byte[256]) YPOS#2 )
  (byte[256]) XPOS#3 ← phi( animate::@2/(byte[256]) XPOS#10 animate::@3/(byte[256]) XPOS#11 )
  (byte~) animate::$8 ← (byte[256]) XPOS#3 *idx (byte) 1
  (byte~) animate::$9 ← (byte~) animate::$8 - (byte) 1
  *((byte[256]) XPOS#3 + (byte) 1) ← (byte~) animate::$9
  (byte~) animate::$10 ← (byte[256]) XPOS#3 *idx (byte) 1
  (boolean~) animate::$11 ← (byte~) animate::$10 == (byte) 255
  if((boolean~) animate::$11) goto animate::@5
  to:animate::@6
animate::@5: from animate::@4
  (byte[256]) YPOS#12 ← phi( animate::@4/(byte[256]) YPOS#11 )
  (byte[256]) XPOS#4 ← phi( animate::@4/(byte[256]) XPOS#3 )
  *((byte[256]) XPOS#4 + (byte) 1) ← (byte) 40
  to:animate::@6
animate::@6: from animate::@4 animate::@5
  (byte[256]) XPOS#22 ← phi( animate::@4/(byte[256]) XPOS#3 animate::@5/(byte[256]) XPOS#4 )
  (byte[256]) YPOS#3 ← phi( animate::@4/(byte[256]) YPOS#11 animate::@5/(byte[256]) YPOS#12 )
  (byte~) animate::$12 ← (byte[256]) YPOS#3 *idx (byte) 2
  (byte~) animate::$13 ← (byte~) animate::$12 + (byte) 1
  *((byte[256]) YPOS#3 + (byte) 2) ← (byte~) animate::$13
  (byte~) animate::$14 ← (byte[256]) YPOS#3 *idx (byte) 2
  (boolean~) animate::$15 ← (byte~) animate::$14 == (byte) 25
  if((boolean~) animate::$15) goto animate::@7
  to:animate::@8
animate::@7: from animate::@6
  (byte[256]) XPOS#23 ← phi( animate::@6/(byte[256]) XPOS#22 )
  (byte[256]) YPOS#4 ← phi( animate::@6/(byte[256]) YPOS#3 )
  *((byte[256]) YPOS#4 + (byte) 2) ← (byte) 0
  to:animate::@8
animate::@8: from animate::@6 animate::@7
  (byte[256]) XPOS#12 ← phi( animate::@6/(byte[256]) XPOS#22 animate::@7/(byte[256]) XPOS#23 )
  (byte[256]) YPOS#5 ← phi( animate::@6/(byte[256]) YPOS#3 animate::@7/(byte[256]) YPOS#4 )
  (byte~) animate::$16 ← (byte[256]) YPOS#5 *idx (byte) 3
  (byte~) animate::$17 ← (byte~) animate::$16 - (byte) 1
  *((byte[256]) YPOS#5 + (byte) 3) ← (byte~) animate::$17
  (byte~) animate::$18 ← (byte[256]) YPOS#5 *idx (byte) 3
  (boolean~) animate::$19 ← (byte~) animate::$18 == (byte) 255
  if((boolean~) animate::$19) goto animate::@9
  to:animate::@return
animate::@9: from animate::@8
  (byte[256]) XPOS#5 ← phi( animate::@8/(byte[256]) XPOS#12 )
  (byte[256]) YPOS#6 ← phi( animate::@8/(byte[256]) YPOS#5 )
  *((byte[256]) YPOS#6 + (byte) 3) ← (byte) 25
  (byte~) animate::$20 ← (byte[256]) XPOS#5 *idx (byte) 3
  (byte~) animate::$21 ← (byte~) animate::$20 + (byte) 7
  *((byte[256]) XPOS#5 + (byte) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (byte[256]) XPOS#5 *idx (byte) 3
  (boolean~) animate::$23 ← (byte~) animate::$22 >= (byte) 40
  if((boolean~) animate::$23) goto animate::@11
  to:animate::@return
animate::@11: from animate::@9
  (byte[256]) XPOS#6 ← phi( animate::@9/(byte[256]) XPOS#5 )
  (byte~) animate::$24 ← (byte[256]) XPOS#6 *idx (byte) 3
  (byte~) animate::$25 ← (byte~) animate::$24 - (byte) 40
  *((byte[256]) XPOS#6 + (byte) 3) ← (byte~) animate::$25
  to:animate::@return
animate::@return: from animate::@11 animate::@8 animate::@9
  return 
  to:@RETURN
addpoint: from main main::@3 main::@4 main::@5 main::@6 main::@7
  (byte[256]) COLS#1 ← phi( main/(byte[256]) COLS#3 main::@3/(byte[256]) COLS#4 main::@4/(byte[256]) COLS#5 main::@5/(byte[256]) COLS#6 main::@6/(byte[256]) COLS#7 main::@7/(byte[256]) COLS#8 )
  (byte) addpoint::c#6 ← phi( main/(byte) addpoint::c#0 main::@3/(byte) addpoint::c#1 main::@4/(byte) addpoint::c#2 main::@5/(byte) addpoint::c#3 main::@6/(byte) addpoint::c#4 main::@7/(byte) addpoint::c#5 )
  (byte[256]) YPOS#7 ← phi( main/(byte[256]) YPOS#13 main::@3/(byte[256]) YPOS#14 main::@4/(byte[256]) YPOS#15 main::@5/(byte[256]) YPOS#16 main::@6/(byte[256]) YPOS#17 main::@7/(byte[256]) YPOS#18 )
  (byte) addpoint::y#6 ← phi( main/(byte) addpoint::y#0 main::@3/(byte) addpoint::y#1 main::@4/(byte) addpoint::y#2 main::@5/(byte) addpoint::y#3 main::@6/(byte) addpoint::y#4 main::@7/(byte) addpoint::y#5 )
  (byte) numpoints#19 ← phi( main/(byte) numpoints#22 main::@3/(byte) numpoints#2 main::@4/(byte) numpoints#3 main::@5/(byte) numpoints#4 main::@6/(byte) numpoints#5 main::@7/(byte) numpoints#6 )
  (byte[256]) XPOS#7 ← phi( main/(byte[256]) XPOS#13 main::@3/(byte[256]) XPOS#14 main::@4/(byte[256]) XPOS#15 main::@5/(byte[256]) XPOS#16 main::@6/(byte[256]) XPOS#17 main::@7/(byte[256]) XPOS#18 )
  (byte) addpoint::x#6 ← phi( main/(byte) addpoint::x#0 main::@3/(byte) addpoint::x#1 main::@4/(byte) addpoint::x#2 main::@5/(byte) addpoint::x#3 main::@6/(byte) addpoint::x#4 main::@7/(byte) addpoint::x#5 )
  *((byte[256]) XPOS#7 + (byte) numpoints#19) ← (byte) addpoint::x#6
  *((byte[256]) YPOS#7 + (byte) numpoints#19) ← (byte) addpoint::y#6
  *((byte[256]) COLS#1 + (byte) numpoints#19) ← (byte) addpoint::c#6
  (byte) numpoints#9 ← ++ (byte) numpoints#19
  to:addpoint::@return
addpoint::@return: from addpoint
  (byte) numpoints#20 ← phi( addpoint/(byte) numpoints#9 )
  (byte) numpoints#10 ← (byte) numpoints#20
  return 
  to:@RETURN
initscreen: from main::@8
  (byte) FILL#2 ← phi( main::@8/(byte) FILL#3 )
  (byte*) SCREEN#1 ← phi( main::@8/(byte*) SCREEN#2 )
  (byte*) initscreen::screen#0 ← (byte*) SCREEN#1
  to:initscreen::@1
initscreen::@1: from initscreen initscreen::@1
  (byte*) initscreen::screen#2 ← phi( initscreen/(byte*) initscreen::screen#0 initscreen::@1/(byte*) initscreen::screen#1 )
  (byte) FILL#1 ← phi( initscreen/(byte) FILL#2 initscreen::@1/(byte) FILL#1 )
  *((byte*) initscreen::screen#2) ← (byte) FILL#1
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  (boolean~) initscreen::$0 ← (byte*) initscreen::screen#1 < (word) 2048
  if((boolean~) initscreen::$0) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: from initscreen::@1
  return 
  to:@RETURN
render: from main::@1
  (byte) numpoints#41 ← phi( main::@1/(byte) numpoints#29 )
  (byte[256]) COLS#23 ← phi( main::@1/(byte[256]) COLS#25 )
  (byte[256]) YPOS#32 ← phi( main::@1/(byte[256]) YPOS#25 )
  (byte[256]) XPOS#34 ← phi( main::@1/(byte[256]) XPOS#21 )
  (byte*) COLORS#1 ← phi( main::@1/(byte*) COLORS#2 )
  (byte*) render::colline#0 ← (byte*) COLORS#1
  (byte) render::y#0 ← (byte) 0
  to:render::@1
render::@1: from render render::@3
  (byte) numpoints#39 ← phi( render/(byte) numpoints#41 render::@3/(byte) numpoints#42 )
  (byte[256]) COLS#21 ← phi( render/(byte[256]) COLS#23 render::@3/(byte[256]) COLS#24 )
  (byte[256]) YPOS#26 ← phi( render/(byte[256]) YPOS#32 render::@3/(byte[256]) YPOS#33 )
  (byte[256]) XPOS#29 ← phi( render/(byte[256]) XPOS#34 render::@3/(byte[256]) XPOS#35 )
  (byte*) render::colline#5 ← phi( render/(byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#4 ← phi( render/(byte) render::y#0 render::@3/(byte) render::y#1 )
  (byte) render::x#0 ← (byte) 0
  to:render::@2
render::@2: from render::@1 render::@5
  (byte) numpoints#38 ← phi( render::@1/(byte) numpoints#39 render::@5/(byte) numpoints#40 )
  (byte[256]) COLS#20 ← phi( render::@1/(byte[256]) COLS#21 render::@5/(byte[256]) COLS#22 )
  (byte[256]) YPOS#22 ← phi( render::@1/(byte[256]) YPOS#26 render::@5/(byte[256]) YPOS#27 )
  (byte[256]) XPOS#24 ← phi( render::@1/(byte[256]) XPOS#29 render::@5/(byte[256]) XPOS#30 )
  (byte*) render::colline#4 ← phi( render::@1/(byte*) render::colline#5 render::@5/(byte*) render::colline#2 )
  (byte) render::y#2 ← phi( render::@1/(byte) render::y#4 render::@5/(byte) render::y#5 )
  (byte) render::x#2 ← phi( render::@1/(byte) render::x#0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  (byte) findcol::return#0 ← call findcol param-assignment
  to:render::@5
render::@5: from render::@2
  (byte) numpoints#40 ← phi( render::@2/(byte) numpoints#38 )
  (byte[256]) COLS#22 ← phi( render::@2/(byte[256]) COLS#20 )
  (byte[256]) YPOS#27 ← phi( render::@2/(byte[256]) YPOS#22 )
  (byte[256]) XPOS#30 ← phi( render::@2/(byte[256]) XPOS#24 )
  (byte) render::y#5 ← phi( render::@2/(byte) render::y#2 )
  (byte) render::x#3 ← phi( render::@2/(byte) render::x#2 )
  (byte*) render::colline#2 ← phi( render::@2/(byte*) render::colline#4 )
  (byte) findcol::return#4 ← phi( render::@2/(byte) findcol::return#0 )
  (byte~) render::$0 ← (byte) findcol::return#4
  (byte) render::col#0 ← (byte~) render::$0
  *((byte*) render::colline#2 + (byte) render::x#3) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#3
  (boolean~) render::$1 ← (byte) render::x#1 < (byte) 40
  if((boolean~) render::$1) goto render::@2
  to:render::@3
render::@3: from render::@5
  (byte) numpoints#42 ← phi( render::@5/(byte) numpoints#40 )
  (byte[256]) COLS#24 ← phi( render::@5/(byte[256]) COLS#22 )
  (byte[256]) YPOS#33 ← phi( render::@5/(byte[256]) YPOS#27 )
  (byte[256]) XPOS#35 ← phi( render::@5/(byte[256]) XPOS#30 )
  (byte) render::y#3 ← phi( render::@5/(byte) render::y#5 )
  (byte*) render::colline#3 ← phi( render::@5/(byte*) render::colline#2 )
  (byte*~) render::$2 ← (byte*) render::colline#3 + (byte) 40
  (byte*) render::colline#1 ← (byte*~) render::$2
  (byte) render::y#1 ← ++ (byte) render::y#3
  (boolean~) render::$3 ← (byte) render::y#1 < (byte) 25
  if((boolean~) render::$3) goto render::@1
  to:render::@return
render::@return: from render::@3
  return 
  to:@RETURN
findcol: from render::@2
  (byte) numpoints#37 ← phi( render::@2/(byte) numpoints#38 )
  (byte[256]) COLS#18 ← phi( render::@2/(byte[256]) COLS#20 )
  (byte) findcol::y#8 ← phi( render::@2/(byte) findcol::y#0 )
  (byte) findcol::x#5 ← phi( render::@2/(byte) findcol::x#0 )
  (byte[256]) YPOS#19 ← phi( render::@2/(byte[256]) YPOS#22 )
  (byte[256]) XPOS#19 ← phi( render::@2/(byte[256]) XPOS#24 )
  (byte) findcol::mindiff#0 ← (byte) 255
  (byte) findcol::mincol#0 ← (byte) 0
  (byte) findcol::i#0 ← (byte) 0
  to:findcol::@1
findcol::@1: from findcol findcol::@13
  (byte) findcol::mincol#11 ← phi( findcol/(byte) findcol::mincol#0 findcol::@13/(byte) findcol::mincol#3 )
  (byte) numpoints#35 ← phi( findcol/(byte) numpoints#37 findcol::@13/(byte) numpoints#21 )
  (byte[256]) COLS#16 ← phi( findcol/(byte[256]) COLS#18 findcol::@13/(byte[256]) COLS#19 )
  (byte) findcol::mindiff#9 ← phi( findcol/(byte) findcol::mindiff#0 findcol::@13/(byte) findcol::mindiff#11 )
  (byte) findcol::y#5 ← phi( findcol/(byte) findcol::y#8 findcol::@13/(byte) findcol::y#9 )
  (byte) findcol::x#1 ← phi( findcol/(byte) findcol::x#5 findcol::@13/(byte) findcol::x#6 )
  (byte[256]) YPOS#8 ← phi( findcol/(byte[256]) YPOS#19 findcol::@13/(byte[256]) YPOS#20 )
  (byte) findcol::i#2 ← phi( findcol/(byte) findcol::i#0 findcol::@13/(byte) findcol::i#1 )
  (byte[256]) XPOS#8 ← phi( findcol/(byte[256]) XPOS#19 findcol::@13/(byte[256]) XPOS#20 )
  (byte~) findcol::$0 ← (byte[256]) XPOS#8 *idx (byte) findcol::i#2
  (byte) findcol::xp#0 ← (byte~) findcol::$0
  (byte~) findcol::$1 ← (byte[256]) YPOS#8 *idx (byte) findcol::i#2
  (byte) findcol::yp#0 ← (byte~) findcol::$1
  (boolean~) findcol::$2 ← (byte) findcol::x#1 == (byte) findcol::xp#0
  if((boolean~) findcol::$2) goto findcol::@2
  to:findcol::@3
findcol::@2: from findcol::@1
  (byte) findcol::mincol#12 ← phi( findcol::@1/(byte) findcol::mincol#11 )
  (byte[256]) YPOS#39 ← phi( findcol::@1/(byte[256]) YPOS#8 )
  (byte[256]) XPOS#40 ← phi( findcol::@1/(byte[256]) XPOS#8 )
  (byte) numpoints#36 ← phi( findcol::@1/(byte) numpoints#35 )
  (byte) findcol::i#12 ← phi( findcol::@1/(byte) findcol::i#2 )
  (byte[256]) COLS#17 ← phi( findcol::@1/(byte[256]) COLS#16 )
  (byte) findcol::mindiff#10 ← phi( findcol::@1/(byte) findcol::mindiff#9 )
  (byte) findcol::xp#4 ← phi( findcol::@1/(byte) findcol::xp#0 )
  (byte) findcol::x#7 ← phi( findcol::@1/(byte) findcol::x#1 )
  (byte) findcol::yp#1 ← phi( findcol::@1/(byte) findcol::yp#0 )
  (byte) findcol::y#1 ← phi( findcol::@1/(byte) findcol::y#5 )
  (boolean~) findcol::$3 ← (byte) findcol::y#1 == (byte) findcol::yp#1
  if((boolean~) findcol::$3) goto findcol::@4
  to:findcol::@3
findcol::@3: from findcol::@1 findcol::@2
  (byte) findcol::mincol#10 ← phi( findcol::@1/(byte) findcol::mincol#11 findcol::@2/(byte) findcol::mincol#12 )
  (byte[256]) YPOS#38 ← phi( findcol::@1/(byte[256]) YPOS#8 findcol::@2/(byte[256]) YPOS#39 )
  (byte[256]) XPOS#39 ← phi( findcol::@1/(byte[256]) XPOS#8 findcol::@2/(byte[256]) XPOS#40 )
  (byte) numpoints#34 ← phi( findcol::@1/(byte) numpoints#35 findcol::@2/(byte) numpoints#36 )
  (byte) findcol::i#11 ← phi( findcol::@1/(byte) findcol::i#2 findcol::@2/(byte) findcol::i#12 )
  (byte[256]) COLS#15 ← phi( findcol::@1/(byte[256]) COLS#16 findcol::@2/(byte[256]) COLS#17 )
  (byte) findcol::mindiff#8 ← phi( findcol::@1/(byte) findcol::mindiff#9 findcol::@2/(byte) findcol::mindiff#10 )
  (byte) findcol::yp#7 ← phi( findcol::@1/(byte) findcol::yp#0 findcol::@2/(byte) findcol::yp#1 )
  (byte) findcol::y#10 ← phi( findcol::@1/(byte) findcol::y#5 findcol::@2/(byte) findcol::y#1 )
  (byte) findcol::xp#1 ← phi( findcol::@1/(byte) findcol::xp#0 findcol::@2/(byte) findcol::xp#4 )
  (byte) findcol::x#2 ← phi( findcol::@1/(byte) findcol::x#1 findcol::@2/(byte) findcol::x#7 )
  (boolean~) findcol::$4 ← (byte) findcol::x#2 < (byte) findcol::xp#1
  if((boolean~) findcol::$4) goto findcol::@6
  to:findcol::@7
findcol::@4: from findcol::@2
  (byte) findcol::return#1 ← (byte) 0
  to:findcol::@return
findcol::@return: from findcol::@27 findcol::@4
  (byte) findcol::return#5 ← phi( findcol::@27/(byte) findcol::return#3 findcol::@4/(byte) findcol::return#1 )
  (byte) findcol::return#2 ← (byte) findcol::return#5
  return (byte) findcol::return#2
  to:@RETURN
findcol::@6: from findcol::@3
  (byte) findcol::mincol#8 ← phi( findcol::@3/(byte) findcol::mincol#10 )
  (byte[256]) YPOS#36 ← phi( findcol::@3/(byte[256]) YPOS#38 )
  (byte[256]) XPOS#37 ← phi( findcol::@3/(byte[256]) XPOS#39 )
  (byte) numpoints#32 ← phi( findcol::@3/(byte) numpoints#34 )
  (byte) findcol::i#9 ← phi( findcol::@3/(byte) findcol::i#11 )
  (byte[256]) COLS#13 ← phi( findcol::@3/(byte[256]) COLS#15 )
  (byte) findcol::mindiff#6 ← phi( findcol::@3/(byte) findcol::mindiff#8 )
  (byte) findcol::yp#5 ← phi( findcol::@3/(byte) findcol::yp#7 )
  (byte) findcol::y#6 ← phi( findcol::@3/(byte) findcol::y#10 )
  (byte) findcol::x#3 ← phi( findcol::@3/(byte) findcol::x#2 )
  (byte) findcol::xp#2 ← phi( findcol::@3/(byte) findcol::xp#1 )
  (byte~) findcol::$5 ← (byte) findcol::xp#2 - (byte) findcol::x#3
  (byte) findcol::diff#0 ← (byte~) findcol::$5
  to:findcol::@8
findcol::@7: from findcol::@3
  (byte) findcol::mincol#9 ← phi( findcol::@3/(byte) findcol::mincol#10 )
  (byte[256]) YPOS#37 ← phi( findcol::@3/(byte[256]) YPOS#38 )
  (byte[256]) XPOS#38 ← phi( findcol::@3/(byte[256]) XPOS#39 )
  (byte) numpoints#33 ← phi( findcol::@3/(byte) numpoints#34 )
  (byte) findcol::i#10 ← phi( findcol::@3/(byte) findcol::i#11 )
  (byte[256]) COLS#14 ← phi( findcol::@3/(byte[256]) COLS#15 )
  (byte) findcol::mindiff#7 ← phi( findcol::@3/(byte) findcol::mindiff#8 )
  (byte) findcol::yp#6 ← phi( findcol::@3/(byte) findcol::yp#7 )
  (byte) findcol::y#7 ← phi( findcol::@3/(byte) findcol::y#10 )
  (byte) findcol::xp#3 ← phi( findcol::@3/(byte) findcol::xp#1 )
  (byte) findcol::x#4 ← phi( findcol::@3/(byte) findcol::x#2 )
  (byte~) findcol::$6 ← (byte) findcol::x#4 - (byte) findcol::xp#3
  (byte) findcol::diff#1 ← (byte~) findcol::$6
  to:findcol::@8
findcol::@8: from findcol::@6 findcol::@7
  (byte) findcol::mincol#7 ← phi( findcol::@6/(byte) findcol::mincol#8 findcol::@7/(byte) findcol::mincol#9 )
  (byte) findcol::x#12 ← phi( findcol::@6/(byte) findcol::x#3 findcol::@7/(byte) findcol::x#4 )
  (byte[256]) YPOS#34 ← phi( findcol::@6/(byte[256]) YPOS#36 findcol::@7/(byte[256]) YPOS#37 )
  (byte[256]) XPOS#36 ← phi( findcol::@6/(byte[256]) XPOS#37 findcol::@7/(byte[256]) XPOS#38 )
  (byte) numpoints#30 ← phi( findcol::@6/(byte) numpoints#32 findcol::@7/(byte) numpoints#33 )
  (byte) findcol::i#8 ← phi( findcol::@6/(byte) findcol::i#9 findcol::@7/(byte) findcol::i#10 )
  (byte[256]) COLS#12 ← phi( findcol::@6/(byte[256]) COLS#13 findcol::@7/(byte[256]) COLS#14 )
  (byte) findcol::mindiff#5 ← phi( findcol::@6/(byte) findcol::mindiff#6 findcol::@7/(byte) findcol::mindiff#7 )
  (byte) findcol::diff#8 ← phi( findcol::@6/(byte) findcol::diff#0 findcol::@7/(byte) findcol::diff#1 )
  (byte) findcol::yp#2 ← phi( findcol::@6/(byte) findcol::yp#5 findcol::@7/(byte) findcol::yp#6 )
  (byte) findcol::y#2 ← phi( findcol::@6/(byte) findcol::y#6 findcol::@7/(byte) findcol::y#7 )
  (boolean~) findcol::$7 ← (byte) findcol::y#2 < (byte) findcol::yp#2
  if((boolean~) findcol::$7) goto findcol::@9
  to:findcol::@10
findcol::@9: from findcol::@8
  (byte) findcol::mincol#6 ← phi( findcol::@8/(byte) findcol::mincol#7 )
  (byte) findcol::x#11 ← phi( findcol::@8/(byte) findcol::x#12 )
  (byte[256]) YPOS#29 ← phi( findcol::@8/(byte[256]) YPOS#34 )
  (byte[256]) XPOS#32 ← phi( findcol::@8/(byte[256]) XPOS#36 )
  (byte) numpoints#28 ← phi( findcol::@8/(byte) numpoints#30 )
  (byte) findcol::i#7 ← phi( findcol::@8/(byte) findcol::i#8 )
  (byte[256]) COLS#11 ← phi( findcol::@8/(byte[256]) COLS#12 )
  (byte) findcol::mindiff#4 ← phi( findcol::@8/(byte) findcol::mindiff#5 )
  (byte) findcol::diff#4 ← phi( findcol::@8/(byte) findcol::diff#8 )
  (byte) findcol::y#3 ← phi( findcol::@8/(byte) findcol::y#2 )
  (byte) findcol::yp#3 ← phi( findcol::@8/(byte) findcol::yp#2 )
  (byte~) findcol::$8 ← (byte) findcol::yp#3 - (byte) findcol::y#3
  (byte~) findcol::$9 ← (byte) findcol::diff#4 + (byte~) findcol::$8
  (byte) findcol::diff#2 ← (byte~) findcol::$9
  to:findcol::@11
findcol::@10: from findcol::@8
  (byte) findcol::mincol#5 ← phi( findcol::@8/(byte) findcol::mincol#7 )
  (byte) findcol::x#10 ← phi( findcol::@8/(byte) findcol::x#12 )
  (byte[256]) YPOS#28 ← phi( findcol::@8/(byte[256]) YPOS#34 )
  (byte[256]) XPOS#31 ← phi( findcol::@8/(byte[256]) XPOS#36 )
  (byte) numpoints#27 ← phi( findcol::@8/(byte) numpoints#30 )
  (byte) findcol::i#6 ← phi( findcol::@8/(byte) findcol::i#8 )
  (byte[256]) COLS#10 ← phi( findcol::@8/(byte[256]) COLS#12 )
  (byte) findcol::mindiff#3 ← phi( findcol::@8/(byte) findcol::mindiff#5 )
  (byte) findcol::diff#5 ← phi( findcol::@8/(byte) findcol::diff#8 )
  (byte) findcol::yp#4 ← phi( findcol::@8/(byte) findcol::yp#2 )
  (byte) findcol::y#4 ← phi( findcol::@8/(byte) findcol::y#2 )
  (byte~) findcol::$10 ← (byte) findcol::y#4 - (byte) findcol::yp#4
  (byte~) findcol::$11 ← (byte) findcol::diff#5 + (byte~) findcol::$10
  (byte) findcol::diff#3 ← (byte~) findcol::$11
  to:findcol::@11
findcol::@11: from findcol::@10 findcol::@9
  (byte) findcol::y#11 ← phi( findcol::@10/(byte) findcol::y#4 findcol::@9/(byte) findcol::y#3 )
  (byte) findcol::mincol#4 ← phi( findcol::@10/(byte) findcol::mincol#5 findcol::@9/(byte) findcol::mincol#6 )
  (byte) findcol::x#8 ← phi( findcol::@10/(byte) findcol::x#10 findcol::@9/(byte) findcol::x#11 )
  (byte[256]) YPOS#23 ← phi( findcol::@10/(byte[256]) YPOS#28 findcol::@9/(byte[256]) YPOS#29 )
  (byte[256]) XPOS#25 ← phi( findcol::@10/(byte[256]) XPOS#31 findcol::@9/(byte[256]) XPOS#32 )
  (byte) numpoints#24 ← phi( findcol::@10/(byte) numpoints#27 findcol::@9/(byte) numpoints#28 )
  (byte) findcol::i#5 ← phi( findcol::@10/(byte) findcol::i#6 findcol::@9/(byte) findcol::i#7 )
  (byte[256]) COLS#9 ← phi( findcol::@10/(byte[256]) COLS#10 findcol::@9/(byte[256]) COLS#11 )
  (byte) findcol::mindiff#2 ← phi( findcol::@10/(byte) findcol::mindiff#3 findcol::@9/(byte) findcol::mindiff#4 )
  (byte) findcol::diff#6 ← phi( findcol::@10/(byte) findcol::diff#3 findcol::@9/(byte) findcol::diff#2 )
  (boolean~) findcol::$12 ← (byte) findcol::diff#6 < (byte) findcol::mindiff#2
  if((boolean~) findcol::$12) goto findcol::@12
  to:findcol::@13
findcol::@12: from findcol::@11
  (byte) findcol::y#12 ← phi( findcol::@11/(byte) findcol::y#11 )
  (byte) findcol::x#9 ← phi( findcol::@11/(byte) findcol::x#8 )
  (byte[256]) YPOS#24 ← phi( findcol::@11/(byte[256]) YPOS#23 )
  (byte[256]) XPOS#26 ← phi( findcol::@11/(byte[256]) XPOS#25 )
  (byte) numpoints#25 ← phi( findcol::@11/(byte) numpoints#24 )
  (byte) findcol::i#3 ← phi( findcol::@11/(byte) findcol::i#5 )
  (byte[256]) COLS#2 ← phi( findcol::@11/(byte[256]) COLS#9 )
  (byte) findcol::diff#7 ← phi( findcol::@11/(byte) findcol::diff#6 )
  (byte) findcol::mindiff#1 ← (byte) findcol::diff#7
  (byte~) findcol::$13 ← (byte[256]) COLS#2 *idx (byte) findcol::i#3
  (byte) findcol::mincol#1 ← (byte~) findcol::$13
  to:findcol::@13
findcol::@13: from findcol::@11 findcol::@12
  (byte[256]) COLS#19 ← phi( findcol::@11/(byte[256]) COLS#9 findcol::@12/(byte[256]) COLS#2 )
  (byte) findcol::mindiff#11 ← phi( findcol::@11/(byte) findcol::mindiff#2 findcol::@12/(byte) findcol::mindiff#1 )
  (byte) findcol::y#9 ← phi( findcol::@11/(byte) findcol::y#11 findcol::@12/(byte) findcol::y#12 )
  (byte) findcol::mincol#3 ← phi( findcol::@11/(byte) findcol::mincol#4 findcol::@12/(byte) findcol::mincol#1 )
  (byte) findcol::x#6 ← phi( findcol::@11/(byte) findcol::x#8 findcol::@12/(byte) findcol::x#9 )
  (byte[256]) YPOS#20 ← phi( findcol::@11/(byte[256]) YPOS#23 findcol::@12/(byte[256]) YPOS#24 )
  (byte[256]) XPOS#20 ← phi( findcol::@11/(byte[256]) XPOS#25 findcol::@12/(byte[256]) XPOS#26 )
  (byte) numpoints#21 ← phi( findcol::@11/(byte) numpoints#24 findcol::@12/(byte) numpoints#25 )
  (byte) findcol::i#4 ← phi( findcol::@11/(byte) findcol::i#5 findcol::@12/(byte) findcol::i#3 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#4
  (boolean~) findcol::$14 ← (byte) findcol::i#1 < (byte) numpoints#21
  if((boolean~) findcol::$14) goto findcol::@1
  to:findcol::@27
findcol::@27: from findcol::@13
  (byte) findcol::mincol#2 ← phi( findcol::@13/(byte) findcol::mincol#3 )
  (byte) findcol::return#3 ← (byte) findcol::mincol#2
  to:findcol::@return
@END: from @7

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL & RETURN
@BEGIN: from
  (byte*) SCREEN#0 ← (word) 1024
  (byte*) COLORS#0 ← (word) 55296
  (byte) FILL#0 ← (byte) 230
  (byte) numpoints#0 ← (byte) 0
  (byte[256]) XPOS#0 ← (word) 4096
  (byte[256]) YPOS#0 ← (word) 4352
  (byte[256]) COLS#0 ← (word) 4608
  call main param-assignment
  to:@7
@7: from @BEGIN
  (byte) numpoints#11 ← phi( @BEGIN/(byte) numpoints#8 )
  (byte) numpoints#1 ← (byte) numpoints#11
  to:@END
main: from @BEGIN
  (byte*) COLORS#12 ← phi( @BEGIN/(byte*) COLORS#0 )
  (byte) FILL#9 ← phi( @BEGIN/(byte) FILL#0 )
  (byte*) SCREEN#8 ← phi( @BEGIN/(byte*) SCREEN#0 )
  (byte[256]) COLS#3 ← phi( @BEGIN/(byte[256]) COLS#0 )
  (byte[256]) YPOS#13 ← phi( @BEGIN/(byte[256]) YPOS#0 )
  (byte[256]) XPOS#13 ← phi( @BEGIN/(byte[256]) XPOS#0 )
  (byte) numpoints#22 ← phi( @BEGIN/(byte) numpoints#0 )
  (byte) addpoint::x#0 ← (byte) 5
  (byte) addpoint::y#0 ← (byte) 5
  (byte) addpoint::c#0 ← (byte) 1
  call addpoint param-assignment
  to:main::@3
main::@3: from main
  (byte*) COLORS#11 ← phi( main/(byte*) COLORS#12 )
  (byte) FILL#8 ← phi( main/(byte) FILL#9 )
  (byte*) SCREEN#7 ← phi( main/(byte*) SCREEN#8 )
  (byte[256]) COLS#4 ← phi( main/(byte[256]) COLS#3 )
  (byte[256]) YPOS#14 ← phi( main/(byte[256]) YPOS#13 )
  (byte[256]) XPOS#14 ← phi( main/(byte[256]) XPOS#13 )
  (byte) numpoints#12 ← phi( main/(byte) numpoints#10 )
  (byte) numpoints#2 ← (byte) numpoints#12
  (byte) addpoint::x#1 ← (byte) 15
  (byte) addpoint::y#1 ← (byte) 8
  (byte) addpoint::c#1 ← (byte) 2
  call addpoint param-assignment
  to:main::@4
main::@4: from main::@3
  (byte*) COLORS#10 ← phi( main::@3/(byte*) COLORS#11 )
  (byte) FILL#7 ← phi( main::@3/(byte) FILL#8 )
  (byte*) SCREEN#6 ← phi( main::@3/(byte*) SCREEN#7 )
  (byte[256]) COLS#5 ← phi( main::@3/(byte[256]) COLS#4 )
  (byte[256]) YPOS#15 ← phi( main::@3/(byte[256]) YPOS#14 )
  (byte[256]) XPOS#15 ← phi( main::@3/(byte[256]) XPOS#14 )
  (byte) numpoints#13 ← phi( main::@3/(byte) numpoints#10 )
  (byte) numpoints#3 ← (byte) numpoints#13
  (byte) addpoint::x#2 ← (byte) 6
  (byte) addpoint::y#2 ← (byte) 14
  (byte) addpoint::c#2 ← (byte) 3
  call addpoint param-assignment
  to:main::@5
main::@5: from main::@4
  (byte*) COLORS#9 ← phi( main::@4/(byte*) COLORS#10 )
  (byte) FILL#6 ← phi( main::@4/(byte) FILL#7 )
  (byte*) SCREEN#5 ← phi( main::@4/(byte*) SCREEN#6 )
  (byte[256]) COLS#6 ← phi( main::@4/(byte[256]) COLS#5 )
  (byte[256]) YPOS#16 ← phi( main::@4/(byte[256]) YPOS#15 )
  (byte[256]) XPOS#16 ← phi( main::@4/(byte[256]) XPOS#15 )
  (byte) numpoints#14 ← phi( main::@4/(byte) numpoints#10 )
  (byte) numpoints#4 ← (byte) numpoints#14
  (byte) addpoint::x#3 ← (byte) 34
  (byte) addpoint::y#3 ← (byte) 2
  (byte) addpoint::c#3 ← (byte) 4
  call addpoint param-assignment
  to:main::@6
main::@6: from main::@5
  (byte*) COLORS#8 ← phi( main::@5/(byte*) COLORS#9 )
  (byte) FILL#5 ← phi( main::@5/(byte) FILL#6 )
  (byte*) SCREEN#4 ← phi( main::@5/(byte*) SCREEN#5 )
  (byte[256]) COLS#7 ← phi( main::@5/(byte[256]) COLS#6 )
  (byte[256]) YPOS#17 ← phi( main::@5/(byte[256]) YPOS#16 )
  (byte[256]) XPOS#17 ← phi( main::@5/(byte[256]) XPOS#16 )
  (byte) numpoints#15 ← phi( main::@5/(byte) numpoints#10 )
  (byte) numpoints#5 ← (byte) numpoints#15
  (byte) addpoint::x#4 ← (byte) 21
  (byte) addpoint::y#4 ← (byte) 17
  (byte) addpoint::c#4 ← (byte) 5
  call addpoint param-assignment
  to:main::@7
main::@7: from main::@6
  (byte*) COLORS#7 ← phi( main::@6/(byte*) COLORS#8 )
  (byte) FILL#4 ← phi( main::@6/(byte) FILL#5 )
  (byte*) SCREEN#3 ← phi( main::@6/(byte*) SCREEN#4 )
  (byte[256]) COLS#8 ← phi( main::@6/(byte[256]) COLS#7 )
  (byte[256]) YPOS#18 ← phi( main::@6/(byte[256]) YPOS#17 )
  (byte[256]) XPOS#18 ← phi( main::@6/(byte[256]) XPOS#17 )
  (byte) numpoints#16 ← phi( main::@6/(byte) numpoints#10 )
  (byte) numpoints#6 ← (byte) numpoints#16
  (byte) addpoint::x#5 ← (byte) 31
  (byte) addpoint::y#5 ← (byte) 22
  (byte) addpoint::c#5 ← (byte) 7
  call addpoint param-assignment
  to:main::@8
main::@8: from main::@7
  (byte[256]) COLS#28 ← phi( main::@7/(byte[256]) COLS#8 )
  (byte[256]) YPOS#35 ← phi( main::@7/(byte[256]) YPOS#18 )
  (byte[256]) XPOS#33 ← phi( main::@7/(byte[256]) XPOS#18 )
  (byte*) COLORS#5 ← phi( main::@7/(byte*) COLORS#7 )
  (byte) FILL#3 ← phi( main::@7/(byte) FILL#4 )
  (byte*) SCREEN#2 ← phi( main::@7/(byte*) SCREEN#3 )
  (byte) numpoints#17 ← phi( main::@7/(byte) numpoints#10 )
  (byte) numpoints#7 ← (byte) numpoints#17
  call initscreen param-assignment
  to:main::@9
main::@9: from main::@8
  (byte[256]) COLS#27 ← phi( main::@8/(byte[256]) COLS#28 )
  (byte[256]) YPOS#31 ← phi( main::@8/(byte[256]) YPOS#35 )
  (byte) numpoints#31 ← phi( main::@8/(byte) numpoints#7 )
  (byte[256]) XPOS#28 ← phi( main::@8/(byte[256]) XPOS#33 )
  (byte*) COLORS#4 ← phi( main::@8/(byte*) COLORS#5 )
  to:main::@1
main::@1: from main::@11 main::@9
  (byte[256]) COLS#25 ← phi( main::@11/(byte[256]) COLS#26 main::@9/(byte[256]) COLS#27 )
  (byte[256]) YPOS#25 ← phi( main::@11/(byte[256]) YPOS#30 main::@9/(byte[256]) YPOS#31 )
  (byte) numpoints#29 ← phi( main::@11/(byte) numpoints#23 main::@9/(byte) numpoints#31 )
  (byte[256]) XPOS#21 ← phi( main::@11/(byte[256]) XPOS#27 main::@9/(byte[256]) XPOS#28 )
  (byte*) COLORS#2 ← phi( main::@11/(byte*) COLORS#3 main::@9/(byte*) COLORS#4 )
  call render param-assignment
  to:main::@10
main::@10: from main::@1
  (byte[256]) COLS#29 ← phi( main::@1/(byte[256]) COLS#25 )
  (byte*) COLORS#6 ← phi( main::@1/(byte*) COLORS#2 )
  (byte[256]) YPOS#21 ← phi( main::@1/(byte[256]) YPOS#25 )
  (byte) numpoints#26 ← phi( main::@1/(byte) numpoints#29 )
  (byte[256]) XPOS#9 ← phi( main::@1/(byte[256]) XPOS#21 )
  call animate param-assignment
  to:main::@11
main::@11: from main::@10
  (byte[256]) COLS#26 ← phi( main::@10/(byte[256]) COLS#29 )
  (byte[256]) YPOS#30 ← phi( main::@10/(byte[256]) YPOS#21 )
  (byte[256]) XPOS#27 ← phi( main::@10/(byte[256]) XPOS#9 )
  (byte*) COLORS#3 ← phi( main::@10/(byte*) COLORS#6 )
  (byte) numpoints#23 ← phi( main::@10/(byte) numpoints#26 )
  if(true) goto main::@1
  to:main::@return
main::@return: from main::@11
  (byte) numpoints#18 ← phi( main::@11/(byte) numpoints#23 )
  (byte) numpoints#8 ← (byte) numpoints#18
  return 
  to:@RETURN
animate: from main::@10
  (byte[256]) YPOS#9 ← phi( main::@10/(byte[256]) YPOS#21 )
  (byte[256]) XPOS#1 ← phi( main::@10/(byte[256]) XPOS#9 )
  (byte~) animate::$0 ← (byte[256]) XPOS#1 *idx (byte) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((byte[256]) XPOS#1 + (byte) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (byte[256]) XPOS#1 *idx (byte) 0
  (boolean~) animate::$3 ← (byte~) animate::$2 == (byte) 40
  if((boolean~) animate::$3) goto animate::@1
  to:animate::@2
animate::@1: from animate
  (byte[256]) YPOS#10 ← phi( animate/(byte[256]) YPOS#9 )
  (byte[256]) XPOS#2 ← phi( animate/(byte[256]) XPOS#1 )
  *((byte[256]) XPOS#2 + (byte) 0) ← (byte) 0
  to:animate::@2
animate::@2: from animate animate::@1
  (byte[256]) XPOS#10 ← phi( animate/(byte[256]) XPOS#1 animate::@1/(byte[256]) XPOS#2 )
  (byte[256]) YPOS#1 ← phi( animate/(byte[256]) YPOS#9 animate::@1/(byte[256]) YPOS#10 )
  (byte~) animate::$4 ← (byte[256]) YPOS#1 *idx (byte) 0
  (byte~) animate::$5 ← (byte~) animate::$4 + (byte) 1
  *((byte[256]) YPOS#1 + (byte) 0) ← (byte~) animate::$5
  (byte~) animate::$6 ← (byte[256]) YPOS#1 *idx (byte) 0
  (boolean~) animate::$7 ← (byte~) animate::$6 == (byte) 25
  if((boolean~) animate::$7) goto animate::@3
  to:animate::@4
animate::@3: from animate::@2
  (byte[256]) XPOS#11 ← phi( animate::@2/(byte[256]) XPOS#10 )
  (byte[256]) YPOS#2 ← phi( animate::@2/(byte[256]) YPOS#1 )
  *((byte[256]) YPOS#2 + (byte) 0) ← (byte) 0
  to:animate::@4
animate::@4: from animate::@2 animate::@3
  (byte[256]) YPOS#11 ← phi( animate::@2/(byte[256]) YPOS#1 animate::@3/(byte[256]) YPOS#2 )
  (byte[256]) XPOS#3 ← phi( animate::@2/(byte[256]) XPOS#10 animate::@3/(byte[256]) XPOS#11 )
  (byte~) animate::$8 ← (byte[256]) XPOS#3 *idx (byte) 1
  (byte~) animate::$9 ← (byte~) animate::$8 - (byte) 1
  *((byte[256]) XPOS#3 + (byte) 1) ← (byte~) animate::$9
  (byte~) animate::$10 ← (byte[256]) XPOS#3 *idx (byte) 1
  (boolean~) animate::$11 ← (byte~) animate::$10 == (byte) 255
  if((boolean~) animate::$11) goto animate::@5
  to:animate::@6
animate::@5: from animate::@4
  (byte[256]) YPOS#12 ← phi( animate::@4/(byte[256]) YPOS#11 )
  (byte[256]) XPOS#4 ← phi( animate::@4/(byte[256]) XPOS#3 )
  *((byte[256]) XPOS#4 + (byte) 1) ← (byte) 40
  to:animate::@6
animate::@6: from animate::@4 animate::@5
  (byte[256]) XPOS#22 ← phi( animate::@4/(byte[256]) XPOS#3 animate::@5/(byte[256]) XPOS#4 )
  (byte[256]) YPOS#3 ← phi( animate::@4/(byte[256]) YPOS#11 animate::@5/(byte[256]) YPOS#12 )
  (byte~) animate::$12 ← (byte[256]) YPOS#3 *idx (byte) 2
  (byte~) animate::$13 ← (byte~) animate::$12 + (byte) 1
  *((byte[256]) YPOS#3 + (byte) 2) ← (byte~) animate::$13
  (byte~) animate::$14 ← (byte[256]) YPOS#3 *idx (byte) 2
  (boolean~) animate::$15 ← (byte~) animate::$14 == (byte) 25
  if((boolean~) animate::$15) goto animate::@7
  to:animate::@8
animate::@7: from animate::@6
  (byte[256]) XPOS#23 ← phi( animate::@6/(byte[256]) XPOS#22 )
  (byte[256]) YPOS#4 ← phi( animate::@6/(byte[256]) YPOS#3 )
  *((byte[256]) YPOS#4 + (byte) 2) ← (byte) 0
  to:animate::@8
animate::@8: from animate::@6 animate::@7
  (byte[256]) XPOS#12 ← phi( animate::@6/(byte[256]) XPOS#22 animate::@7/(byte[256]) XPOS#23 )
  (byte[256]) YPOS#5 ← phi( animate::@6/(byte[256]) YPOS#3 animate::@7/(byte[256]) YPOS#4 )
  (byte~) animate::$16 ← (byte[256]) YPOS#5 *idx (byte) 3
  (byte~) animate::$17 ← (byte~) animate::$16 - (byte) 1
  *((byte[256]) YPOS#5 + (byte) 3) ← (byte~) animate::$17
  (byte~) animate::$18 ← (byte[256]) YPOS#5 *idx (byte) 3
  (boolean~) animate::$19 ← (byte~) animate::$18 == (byte) 255
  if((boolean~) animate::$19) goto animate::@9
  to:animate::@return
animate::@9: from animate::@8
  (byte[256]) XPOS#5 ← phi( animate::@8/(byte[256]) XPOS#12 )
  (byte[256]) YPOS#6 ← phi( animate::@8/(byte[256]) YPOS#5 )
  *((byte[256]) YPOS#6 + (byte) 3) ← (byte) 25
  (byte~) animate::$20 ← (byte[256]) XPOS#5 *idx (byte) 3
  (byte~) animate::$21 ← (byte~) animate::$20 + (byte) 7
  *((byte[256]) XPOS#5 + (byte) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (byte[256]) XPOS#5 *idx (byte) 3
  (boolean~) animate::$23 ← (byte~) animate::$22 >= (byte) 40
  if((boolean~) animate::$23) goto animate::@11
  to:animate::@return
animate::@11: from animate::@9
  (byte[256]) XPOS#6 ← phi( animate::@9/(byte[256]) XPOS#5 )
  (byte~) animate::$24 ← (byte[256]) XPOS#6 *idx (byte) 3
  (byte~) animate::$25 ← (byte~) animate::$24 - (byte) 40
  *((byte[256]) XPOS#6 + (byte) 3) ← (byte~) animate::$25
  to:animate::@return
animate::@return: from animate::@11 animate::@8 animate::@9
  return 
  to:@RETURN
addpoint: from main main::@3 main::@4 main::@5 main::@6 main::@7
  (byte[256]) COLS#1 ← phi( main/(byte[256]) COLS#3 main::@3/(byte[256]) COLS#4 main::@4/(byte[256]) COLS#5 main::@5/(byte[256]) COLS#6 main::@6/(byte[256]) COLS#7 main::@7/(byte[256]) COLS#8 )
  (byte) addpoint::c#6 ← phi( main/(byte) addpoint::c#0 main::@3/(byte) addpoint::c#1 main::@4/(byte) addpoint::c#2 main::@5/(byte) addpoint::c#3 main::@6/(byte) addpoint::c#4 main::@7/(byte) addpoint::c#5 )
  (byte[256]) YPOS#7 ← phi( main/(byte[256]) YPOS#13 main::@3/(byte[256]) YPOS#14 main::@4/(byte[256]) YPOS#15 main::@5/(byte[256]) YPOS#16 main::@6/(byte[256]) YPOS#17 main::@7/(byte[256]) YPOS#18 )
  (byte) addpoint::y#6 ← phi( main/(byte) addpoint::y#0 main::@3/(byte) addpoint::y#1 main::@4/(byte) addpoint::y#2 main::@5/(byte) addpoint::y#3 main::@6/(byte) addpoint::y#4 main::@7/(byte) addpoint::y#5 )
  (byte) numpoints#19 ← phi( main/(byte) numpoints#22 main::@3/(byte) numpoints#2 main::@4/(byte) numpoints#3 main::@5/(byte) numpoints#4 main::@6/(byte) numpoints#5 main::@7/(byte) numpoints#6 )
  (byte[256]) XPOS#7 ← phi( main/(byte[256]) XPOS#13 main::@3/(byte[256]) XPOS#14 main::@4/(byte[256]) XPOS#15 main::@5/(byte[256]) XPOS#16 main::@6/(byte[256]) XPOS#17 main::@7/(byte[256]) XPOS#18 )
  (byte) addpoint::x#6 ← phi( main/(byte) addpoint::x#0 main::@3/(byte) addpoint::x#1 main::@4/(byte) addpoint::x#2 main::@5/(byte) addpoint::x#3 main::@6/(byte) addpoint::x#4 main::@7/(byte) addpoint::x#5 )
  *((byte[256]) XPOS#7 + (byte) numpoints#19) ← (byte) addpoint::x#6
  *((byte[256]) YPOS#7 + (byte) numpoints#19) ← (byte) addpoint::y#6
  *((byte[256]) COLS#1 + (byte) numpoints#19) ← (byte) addpoint::c#6
  (byte) numpoints#9 ← ++ (byte) numpoints#19
  to:addpoint::@return
addpoint::@return: from addpoint
  (byte) numpoints#20 ← phi( addpoint/(byte) numpoints#9 )
  (byte) numpoints#10 ← (byte) numpoints#20
  return 
  to:@RETURN
initscreen: from main::@8
  (byte) FILL#2 ← phi( main::@8/(byte) FILL#3 )
  (byte*) SCREEN#1 ← phi( main::@8/(byte*) SCREEN#2 )
  (byte*) initscreen::screen#0 ← (byte*) SCREEN#1
  to:initscreen::@1
initscreen::@1: from initscreen initscreen::@1
  (byte*) initscreen::screen#2 ← phi( initscreen/(byte*) initscreen::screen#0 initscreen::@1/(byte*) initscreen::screen#1 )
  (byte) FILL#1 ← phi( initscreen/(byte) FILL#2 initscreen::@1/(byte) FILL#1 )
  *((byte*) initscreen::screen#2) ← (byte) FILL#1
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  (boolean~) initscreen::$0 ← (byte*) initscreen::screen#1 < (word) 2048
  if((boolean~) initscreen::$0) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: from initscreen::@1
  return 
  to:@RETURN
render: from main::@1
  (byte) numpoints#41 ← phi( main::@1/(byte) numpoints#29 )
  (byte[256]) COLS#23 ← phi( main::@1/(byte[256]) COLS#25 )
  (byte[256]) YPOS#32 ← phi( main::@1/(byte[256]) YPOS#25 )
  (byte[256]) XPOS#34 ← phi( main::@1/(byte[256]) XPOS#21 )
  (byte*) COLORS#1 ← phi( main::@1/(byte*) COLORS#2 )
  (byte*) render::colline#0 ← (byte*) COLORS#1
  (byte) render::y#0 ← (byte) 0
  to:render::@1
render::@1: from render render::@3
  (byte) numpoints#39 ← phi( render/(byte) numpoints#41 render::@3/(byte) numpoints#42 )
  (byte[256]) COLS#21 ← phi( render/(byte[256]) COLS#23 render::@3/(byte[256]) COLS#24 )
  (byte[256]) YPOS#26 ← phi( render/(byte[256]) YPOS#32 render::@3/(byte[256]) YPOS#33 )
  (byte[256]) XPOS#29 ← phi( render/(byte[256]) XPOS#34 render::@3/(byte[256]) XPOS#35 )
  (byte*) render::colline#5 ← phi( render/(byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#4 ← phi( render/(byte) render::y#0 render::@3/(byte) render::y#1 )
  (byte) render::x#0 ← (byte) 0
  to:render::@2
render::@2: from render::@1 render::@5
  (byte) numpoints#38 ← phi( render::@1/(byte) numpoints#39 render::@5/(byte) numpoints#40 )
  (byte[256]) COLS#20 ← phi( render::@1/(byte[256]) COLS#21 render::@5/(byte[256]) COLS#22 )
  (byte[256]) YPOS#22 ← phi( render::@1/(byte[256]) YPOS#26 render::@5/(byte[256]) YPOS#27 )
  (byte[256]) XPOS#24 ← phi( render::@1/(byte[256]) XPOS#29 render::@5/(byte[256]) XPOS#30 )
  (byte*) render::colline#4 ← phi( render::@1/(byte*) render::colline#5 render::@5/(byte*) render::colline#2 )
  (byte) render::y#2 ← phi( render::@1/(byte) render::y#4 render::@5/(byte) render::y#5 )
  (byte) render::x#2 ← phi( render::@1/(byte) render::x#0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  (byte) findcol::return#0 ← (byte) findcol::return#2
  to:render::@5
render::@5: from render::@2
  (byte) numpoints#40 ← phi( render::@2/(byte) numpoints#38 )
  (byte[256]) COLS#22 ← phi( render::@2/(byte[256]) COLS#20 )
  (byte[256]) YPOS#27 ← phi( render::@2/(byte[256]) YPOS#22 )
  (byte[256]) XPOS#30 ← phi( render::@2/(byte[256]) XPOS#24 )
  (byte) render::y#5 ← phi( render::@2/(byte) render::y#2 )
  (byte) render::x#3 ← phi( render::@2/(byte) render::x#2 )
  (byte*) render::colline#2 ← phi( render::@2/(byte*) render::colline#4 )
  (byte) findcol::return#4 ← phi( render::@2/(byte) findcol::return#0 )
  (byte~) render::$0 ← (byte) findcol::return#4
  (byte) render::col#0 ← (byte~) render::$0
  *((byte*) render::colline#2 + (byte) render::x#3) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#3
  (boolean~) render::$1 ← (byte) render::x#1 < (byte) 40
  if((boolean~) render::$1) goto render::@2
  to:render::@3
render::@3: from render::@5
  (byte) numpoints#42 ← phi( render::@5/(byte) numpoints#40 )
  (byte[256]) COLS#24 ← phi( render::@5/(byte[256]) COLS#22 )
  (byte[256]) YPOS#33 ← phi( render::@5/(byte[256]) YPOS#27 )
  (byte[256]) XPOS#35 ← phi( render::@5/(byte[256]) XPOS#30 )
  (byte) render::y#3 ← phi( render::@5/(byte) render::y#5 )
  (byte*) render::colline#3 ← phi( render::@5/(byte*) render::colline#2 )
  (byte*~) render::$2 ← (byte*) render::colline#3 + (byte) 40
  (byte*) render::colline#1 ← (byte*~) render::$2
  (byte) render::y#1 ← ++ (byte) render::y#3
  (boolean~) render::$3 ← (byte) render::y#1 < (byte) 25
  if((boolean~) render::$3) goto render::@1
  to:render::@return
render::@return: from render::@3
  return 
  to:@RETURN
findcol: from render::@2
  (byte) numpoints#37 ← phi( render::@2/(byte) numpoints#38 )
  (byte[256]) COLS#18 ← phi( render::@2/(byte[256]) COLS#20 )
  (byte) findcol::y#8 ← phi( render::@2/(byte) findcol::y#0 )
  (byte) findcol::x#5 ← phi( render::@2/(byte) findcol::x#0 )
  (byte[256]) YPOS#19 ← phi( render::@2/(byte[256]) YPOS#22 )
  (byte[256]) XPOS#19 ← phi( render::@2/(byte[256]) XPOS#24 )
  (byte) findcol::mindiff#0 ← (byte) 255
  (byte) findcol::mincol#0 ← (byte) 0
  (byte) findcol::i#0 ← (byte) 0
  to:findcol::@1
findcol::@1: from findcol findcol::@13
  (byte) findcol::mincol#11 ← phi( findcol/(byte) findcol::mincol#0 findcol::@13/(byte) findcol::mincol#3 )
  (byte) numpoints#35 ← phi( findcol/(byte) numpoints#37 findcol::@13/(byte) numpoints#21 )
  (byte[256]) COLS#16 ← phi( findcol/(byte[256]) COLS#18 findcol::@13/(byte[256]) COLS#19 )
  (byte) findcol::mindiff#9 ← phi( findcol/(byte) findcol::mindiff#0 findcol::@13/(byte) findcol::mindiff#11 )
  (byte) findcol::y#5 ← phi( findcol/(byte) findcol::y#8 findcol::@13/(byte) findcol::y#9 )
  (byte) findcol::x#1 ← phi( findcol/(byte) findcol::x#5 findcol::@13/(byte) findcol::x#6 )
  (byte[256]) YPOS#8 ← phi( findcol/(byte[256]) YPOS#19 findcol::@13/(byte[256]) YPOS#20 )
  (byte) findcol::i#2 ← phi( findcol/(byte) findcol::i#0 findcol::@13/(byte) findcol::i#1 )
  (byte[256]) XPOS#8 ← phi( findcol/(byte[256]) XPOS#19 findcol::@13/(byte[256]) XPOS#20 )
  (byte~) findcol::$0 ← (byte[256]) XPOS#8 *idx (byte) findcol::i#2
  (byte) findcol::xp#0 ← (byte~) findcol::$0
  (byte~) findcol::$1 ← (byte[256]) YPOS#8 *idx (byte) findcol::i#2
  (byte) findcol::yp#0 ← (byte~) findcol::$1
  (boolean~) findcol::$2 ← (byte) findcol::x#1 == (byte) findcol::xp#0
  if((boolean~) findcol::$2) goto findcol::@2
  to:findcol::@3
findcol::@2: from findcol::@1
  (byte) findcol::mincol#12 ← phi( findcol::@1/(byte) findcol::mincol#11 )
  (byte[256]) YPOS#39 ← phi( findcol::@1/(byte[256]) YPOS#8 )
  (byte[256]) XPOS#40 ← phi( findcol::@1/(byte[256]) XPOS#8 )
  (byte) numpoints#36 ← phi( findcol::@1/(byte) numpoints#35 )
  (byte) findcol::i#12 ← phi( findcol::@1/(byte) findcol::i#2 )
  (byte[256]) COLS#17 ← phi( findcol::@1/(byte[256]) COLS#16 )
  (byte) findcol::mindiff#10 ← phi( findcol::@1/(byte) findcol::mindiff#9 )
  (byte) findcol::xp#4 ← phi( findcol::@1/(byte) findcol::xp#0 )
  (byte) findcol::x#7 ← phi( findcol::@1/(byte) findcol::x#1 )
  (byte) findcol::yp#1 ← phi( findcol::@1/(byte) findcol::yp#0 )
  (byte) findcol::y#1 ← phi( findcol::@1/(byte) findcol::y#5 )
  (boolean~) findcol::$3 ← (byte) findcol::y#1 == (byte) findcol::yp#1
  if((boolean~) findcol::$3) goto findcol::@4
  to:findcol::@3
findcol::@3: from findcol::@1 findcol::@2
  (byte) findcol::mincol#10 ← phi( findcol::@1/(byte) findcol::mincol#11 findcol::@2/(byte) findcol::mincol#12 )
  (byte[256]) YPOS#38 ← phi( findcol::@1/(byte[256]) YPOS#8 findcol::@2/(byte[256]) YPOS#39 )
  (byte[256]) XPOS#39 ← phi( findcol::@1/(byte[256]) XPOS#8 findcol::@2/(byte[256]) XPOS#40 )
  (byte) numpoints#34 ← phi( findcol::@1/(byte) numpoints#35 findcol::@2/(byte) numpoints#36 )
  (byte) findcol::i#11 ← phi( findcol::@1/(byte) findcol::i#2 findcol::@2/(byte) findcol::i#12 )
  (byte[256]) COLS#15 ← phi( findcol::@1/(byte[256]) COLS#16 findcol::@2/(byte[256]) COLS#17 )
  (byte) findcol::mindiff#8 ← phi( findcol::@1/(byte) findcol::mindiff#9 findcol::@2/(byte) findcol::mindiff#10 )
  (byte) findcol::yp#7 ← phi( findcol::@1/(byte) findcol::yp#0 findcol::@2/(byte) findcol::yp#1 )
  (byte) findcol::y#10 ← phi( findcol::@1/(byte) findcol::y#5 findcol::@2/(byte) findcol::y#1 )
  (byte) findcol::xp#1 ← phi( findcol::@1/(byte) findcol::xp#0 findcol::@2/(byte) findcol::xp#4 )
  (byte) findcol::x#2 ← phi( findcol::@1/(byte) findcol::x#1 findcol::@2/(byte) findcol::x#7 )
  (boolean~) findcol::$4 ← (byte) findcol::x#2 < (byte) findcol::xp#1
  if((boolean~) findcol::$4) goto findcol::@6
  to:findcol::@7
findcol::@4: from findcol::@2
  (byte) findcol::return#1 ← (byte) 0
  to:findcol::@return
findcol::@return: from findcol::@27 findcol::@4
  (byte) findcol::return#5 ← phi( findcol::@27/(byte) findcol::return#3 findcol::@4/(byte) findcol::return#1 )
  (byte) findcol::return#2 ← (byte) findcol::return#5
  return 
  to:@RETURN
findcol::@6: from findcol::@3
  (byte) findcol::mincol#8 ← phi( findcol::@3/(byte) findcol::mincol#10 )
  (byte[256]) YPOS#36 ← phi( findcol::@3/(byte[256]) YPOS#38 )
  (byte[256]) XPOS#37 ← phi( findcol::@3/(byte[256]) XPOS#39 )
  (byte) numpoints#32 ← phi( findcol::@3/(byte) numpoints#34 )
  (byte) findcol::i#9 ← phi( findcol::@3/(byte) findcol::i#11 )
  (byte[256]) COLS#13 ← phi( findcol::@3/(byte[256]) COLS#15 )
  (byte) findcol::mindiff#6 ← phi( findcol::@3/(byte) findcol::mindiff#8 )
  (byte) findcol::yp#5 ← phi( findcol::@3/(byte) findcol::yp#7 )
  (byte) findcol::y#6 ← phi( findcol::@3/(byte) findcol::y#10 )
  (byte) findcol::x#3 ← phi( findcol::@3/(byte) findcol::x#2 )
  (byte) findcol::xp#2 ← phi( findcol::@3/(byte) findcol::xp#1 )
  (byte~) findcol::$5 ← (byte) findcol::xp#2 - (byte) findcol::x#3
  (byte) findcol::diff#0 ← (byte~) findcol::$5
  to:findcol::@8
findcol::@7: from findcol::@3
  (byte) findcol::mincol#9 ← phi( findcol::@3/(byte) findcol::mincol#10 )
  (byte[256]) YPOS#37 ← phi( findcol::@3/(byte[256]) YPOS#38 )
  (byte[256]) XPOS#38 ← phi( findcol::@3/(byte[256]) XPOS#39 )
  (byte) numpoints#33 ← phi( findcol::@3/(byte) numpoints#34 )
  (byte) findcol::i#10 ← phi( findcol::@3/(byte) findcol::i#11 )
  (byte[256]) COLS#14 ← phi( findcol::@3/(byte[256]) COLS#15 )
  (byte) findcol::mindiff#7 ← phi( findcol::@3/(byte) findcol::mindiff#8 )
  (byte) findcol::yp#6 ← phi( findcol::@3/(byte) findcol::yp#7 )
  (byte) findcol::y#7 ← phi( findcol::@3/(byte) findcol::y#10 )
  (byte) findcol::xp#3 ← phi( findcol::@3/(byte) findcol::xp#1 )
  (byte) findcol::x#4 ← phi( findcol::@3/(byte) findcol::x#2 )
  (byte~) findcol::$6 ← (byte) findcol::x#4 - (byte) findcol::xp#3
  (byte) findcol::diff#1 ← (byte~) findcol::$6
  to:findcol::@8
findcol::@8: from findcol::@6 findcol::@7
  (byte) findcol::mincol#7 ← phi( findcol::@6/(byte) findcol::mincol#8 findcol::@7/(byte) findcol::mincol#9 )
  (byte) findcol::x#12 ← phi( findcol::@6/(byte) findcol::x#3 findcol::@7/(byte) findcol::x#4 )
  (byte[256]) YPOS#34 ← phi( findcol::@6/(byte[256]) YPOS#36 findcol::@7/(byte[256]) YPOS#37 )
  (byte[256]) XPOS#36 ← phi( findcol::@6/(byte[256]) XPOS#37 findcol::@7/(byte[256]) XPOS#38 )
  (byte) numpoints#30 ← phi( findcol::@6/(byte) numpoints#32 findcol::@7/(byte) numpoints#33 )
  (byte) findcol::i#8 ← phi( findcol::@6/(byte) findcol::i#9 findcol::@7/(byte) findcol::i#10 )
  (byte[256]) COLS#12 ← phi( findcol::@6/(byte[256]) COLS#13 findcol::@7/(byte[256]) COLS#14 )
  (byte) findcol::mindiff#5 ← phi( findcol::@6/(byte) findcol::mindiff#6 findcol::@7/(byte) findcol::mindiff#7 )
  (byte) findcol::diff#8 ← phi( findcol::@6/(byte) findcol::diff#0 findcol::@7/(byte) findcol::diff#1 )
  (byte) findcol::yp#2 ← phi( findcol::@6/(byte) findcol::yp#5 findcol::@7/(byte) findcol::yp#6 )
  (byte) findcol::y#2 ← phi( findcol::@6/(byte) findcol::y#6 findcol::@7/(byte) findcol::y#7 )
  (boolean~) findcol::$7 ← (byte) findcol::y#2 < (byte) findcol::yp#2
  if((boolean~) findcol::$7) goto findcol::@9
  to:findcol::@10
findcol::@9: from findcol::@8
  (byte) findcol::mincol#6 ← phi( findcol::@8/(byte) findcol::mincol#7 )
  (byte) findcol::x#11 ← phi( findcol::@8/(byte) findcol::x#12 )
  (byte[256]) YPOS#29 ← phi( findcol::@8/(byte[256]) YPOS#34 )
  (byte[256]) XPOS#32 ← phi( findcol::@8/(byte[256]) XPOS#36 )
  (byte) numpoints#28 ← phi( findcol::@8/(byte) numpoints#30 )
  (byte) findcol::i#7 ← phi( findcol::@8/(byte) findcol::i#8 )
  (byte[256]) COLS#11 ← phi( findcol::@8/(byte[256]) COLS#12 )
  (byte) findcol::mindiff#4 ← phi( findcol::@8/(byte) findcol::mindiff#5 )
  (byte) findcol::diff#4 ← phi( findcol::@8/(byte) findcol::diff#8 )
  (byte) findcol::y#3 ← phi( findcol::@8/(byte) findcol::y#2 )
  (byte) findcol::yp#3 ← phi( findcol::@8/(byte) findcol::yp#2 )
  (byte~) findcol::$8 ← (byte) findcol::yp#3 - (byte) findcol::y#3
  (byte~) findcol::$9 ← (byte) findcol::diff#4 + (byte~) findcol::$8
  (byte) findcol::diff#2 ← (byte~) findcol::$9
  to:findcol::@11
findcol::@10: from findcol::@8
  (byte) findcol::mincol#5 ← phi( findcol::@8/(byte) findcol::mincol#7 )
  (byte) findcol::x#10 ← phi( findcol::@8/(byte) findcol::x#12 )
  (byte[256]) YPOS#28 ← phi( findcol::@8/(byte[256]) YPOS#34 )
  (byte[256]) XPOS#31 ← phi( findcol::@8/(byte[256]) XPOS#36 )
  (byte) numpoints#27 ← phi( findcol::@8/(byte) numpoints#30 )
  (byte) findcol::i#6 ← phi( findcol::@8/(byte) findcol::i#8 )
  (byte[256]) COLS#10 ← phi( findcol::@8/(byte[256]) COLS#12 )
  (byte) findcol::mindiff#3 ← phi( findcol::@8/(byte) findcol::mindiff#5 )
  (byte) findcol::diff#5 ← phi( findcol::@8/(byte) findcol::diff#8 )
  (byte) findcol::yp#4 ← phi( findcol::@8/(byte) findcol::yp#2 )
  (byte) findcol::y#4 ← phi( findcol::@8/(byte) findcol::y#2 )
  (byte~) findcol::$10 ← (byte) findcol::y#4 - (byte) findcol::yp#4
  (byte~) findcol::$11 ← (byte) findcol::diff#5 + (byte~) findcol::$10
  (byte) findcol::diff#3 ← (byte~) findcol::$11
  to:findcol::@11
findcol::@11: from findcol::@10 findcol::@9
  (byte) findcol::y#11 ← phi( findcol::@10/(byte) findcol::y#4 findcol::@9/(byte) findcol::y#3 )
  (byte) findcol::mincol#4 ← phi( findcol::@10/(byte) findcol::mincol#5 findcol::@9/(byte) findcol::mincol#6 )
  (byte) findcol::x#8 ← phi( findcol::@10/(byte) findcol::x#10 findcol::@9/(byte) findcol::x#11 )
  (byte[256]) YPOS#23 ← phi( findcol::@10/(byte[256]) YPOS#28 findcol::@9/(byte[256]) YPOS#29 )
  (byte[256]) XPOS#25 ← phi( findcol::@10/(byte[256]) XPOS#31 findcol::@9/(byte[256]) XPOS#32 )
  (byte) numpoints#24 ← phi( findcol::@10/(byte) numpoints#27 findcol::@9/(byte) numpoints#28 )
  (byte) findcol::i#5 ← phi( findcol::@10/(byte) findcol::i#6 findcol::@9/(byte) findcol::i#7 )
  (byte[256]) COLS#9 ← phi( findcol::@10/(byte[256]) COLS#10 findcol::@9/(byte[256]) COLS#11 )
  (byte) findcol::mindiff#2 ← phi( findcol::@10/(byte) findcol::mindiff#3 findcol::@9/(byte) findcol::mindiff#4 )
  (byte) findcol::diff#6 ← phi( findcol::@10/(byte) findcol::diff#3 findcol::@9/(byte) findcol::diff#2 )
  (boolean~) findcol::$12 ← (byte) findcol::diff#6 < (byte) findcol::mindiff#2
  if((boolean~) findcol::$12) goto findcol::@12
  to:findcol::@13
findcol::@12: from findcol::@11
  (byte) findcol::y#12 ← phi( findcol::@11/(byte) findcol::y#11 )
  (byte) findcol::x#9 ← phi( findcol::@11/(byte) findcol::x#8 )
  (byte[256]) YPOS#24 ← phi( findcol::@11/(byte[256]) YPOS#23 )
  (byte[256]) XPOS#26 ← phi( findcol::@11/(byte[256]) XPOS#25 )
  (byte) numpoints#25 ← phi( findcol::@11/(byte) numpoints#24 )
  (byte) findcol::i#3 ← phi( findcol::@11/(byte) findcol::i#5 )
  (byte[256]) COLS#2 ← phi( findcol::@11/(byte[256]) COLS#9 )
  (byte) findcol::diff#7 ← phi( findcol::@11/(byte) findcol::diff#6 )
  (byte) findcol::mindiff#1 ← (byte) findcol::diff#7
  (byte~) findcol::$13 ← (byte[256]) COLS#2 *idx (byte) findcol::i#3
  (byte) findcol::mincol#1 ← (byte~) findcol::$13
  to:findcol::@13
findcol::@13: from findcol::@11 findcol::@12
  (byte[256]) COLS#19 ← phi( findcol::@11/(byte[256]) COLS#9 findcol::@12/(byte[256]) COLS#2 )
  (byte) findcol::mindiff#11 ← phi( findcol::@11/(byte) findcol::mindiff#2 findcol::@12/(byte) findcol::mindiff#1 )
  (byte) findcol::y#9 ← phi( findcol::@11/(byte) findcol::y#11 findcol::@12/(byte) findcol::y#12 )
  (byte) findcol::mincol#3 ← phi( findcol::@11/(byte) findcol::mincol#4 findcol::@12/(byte) findcol::mincol#1 )
  (byte) findcol::x#6 ← phi( findcol::@11/(byte) findcol::x#8 findcol::@12/(byte) findcol::x#9 )
  (byte[256]) YPOS#20 ← phi( findcol::@11/(byte[256]) YPOS#23 findcol::@12/(byte[256]) YPOS#24 )
  (byte[256]) XPOS#20 ← phi( findcol::@11/(byte[256]) XPOS#25 findcol::@12/(byte[256]) XPOS#26 )
  (byte) numpoints#21 ← phi( findcol::@11/(byte) numpoints#24 findcol::@12/(byte) numpoints#25 )
  (byte) findcol::i#4 ← phi( findcol::@11/(byte) findcol::i#5 findcol::@12/(byte) findcol::i#3 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#4
  (boolean~) findcol::$14 ← (byte) findcol::i#1 < (byte) numpoints#21
  if((boolean~) findcol::$14) goto findcol::@1
  to:findcol::@27
findcol::@27: from findcol::@13
  (byte) findcol::mincol#2 ← phi( findcol::@13/(byte) findcol::mincol#3 )
  (byte) findcol::return#3 ← (byte) findcol::mincol#2
  to:findcol::@return
@END: from @7

Constant (byte*) SCREEN#0 (word) 1024
Constant (byte*) COLORS#0 (word) 55296
Constant (byte) FILL#0 (byte) 230
Constant (byte) numpoints#0 (byte) 0
Constant (byte[256]) XPOS#0 (word) 4096
Constant (byte[256]) YPOS#0 (word) 4352
Constant (byte[256]) COLS#0 (word) 4608
Constant (byte) addpoint::x#0 (byte) 5
Constant (byte) addpoint::y#0 (byte) 5
Constant (byte) addpoint::c#0 (byte) 1
Constant (byte) addpoint::x#1 (byte) 15
Constant (byte) addpoint::y#1 (byte) 8
Constant (byte) addpoint::c#1 (byte) 2
Constant (byte) addpoint::x#2 (byte) 6
Constant (byte) addpoint::y#2 (byte) 14
Constant (byte) addpoint::c#2 (byte) 3
Constant (byte) addpoint::x#3 (byte) 34
Constant (byte) addpoint::y#3 (byte) 2
Constant (byte) addpoint::c#3 (byte) 4
Constant (byte) addpoint::x#4 (byte) 21
Constant (byte) addpoint::y#4 (byte) 17
Constant (byte) addpoint::c#4 (byte) 5
Constant (byte) addpoint::x#5 (byte) 31
Constant (byte) addpoint::y#5 (byte) 22
Constant (byte) addpoint::c#5 (byte) 7
Constant (byte) render::y#0 (byte) 0
Constant (byte) render::x#0 (byte) 0
Constant (byte) findcol::mindiff#0 (byte) 255
Constant (byte) findcol::mincol#0 (byte) 0
Constant (byte) findcol::i#0 (byte) 0
Constant (byte) findcol::return#1 (byte) 0
Succesful SSA optimization Pass2ConstantPropagation
CONTROL FLOW GRAPH
@BEGIN: from
  call main param-assignment
  to:@7
@7: from @BEGIN
  (byte) numpoints#11 ← phi( @BEGIN/(byte) numpoints#8 )
  (byte) numpoints#1 ← (byte) numpoints#11
  to:@END
main: from @BEGIN
  (byte*) COLORS#12 ← phi( @BEGIN/(word) 55296 )
  (byte) FILL#9 ← phi( @BEGIN/(byte) 230 )
  (byte*) SCREEN#8 ← phi( @BEGIN/(word) 1024 )
  (byte[256]) COLS#3 ← phi( @BEGIN/(word) 4608 )
  (byte[256]) YPOS#13 ← phi( @BEGIN/(word) 4352 )
  (byte[256]) XPOS#13 ← phi( @BEGIN/(word) 4096 )
  (byte) numpoints#22 ← phi( @BEGIN/(byte) 0 )
  call addpoint param-assignment
  to:main::@3
main::@3: from main
  (byte*) COLORS#11 ← phi( main/(byte*) COLORS#12 )
  (byte) FILL#8 ← phi( main/(byte) FILL#9 )
  (byte*) SCREEN#7 ← phi( main/(byte*) SCREEN#8 )
  (byte[256]) COLS#4 ← phi( main/(byte[256]) COLS#3 )
  (byte[256]) YPOS#14 ← phi( main/(byte[256]) YPOS#13 )
  (byte[256]) XPOS#14 ← phi( main/(byte[256]) XPOS#13 )
  (byte) numpoints#12 ← phi( main/(byte) numpoints#10 )
  (byte) numpoints#2 ← (byte) numpoints#12
  call addpoint param-assignment
  to:main::@4
main::@4: from main::@3
  (byte*) COLORS#10 ← phi( main::@3/(byte*) COLORS#11 )
  (byte) FILL#7 ← phi( main::@3/(byte) FILL#8 )
  (byte*) SCREEN#6 ← phi( main::@3/(byte*) SCREEN#7 )
  (byte[256]) COLS#5 ← phi( main::@3/(byte[256]) COLS#4 )
  (byte[256]) YPOS#15 ← phi( main::@3/(byte[256]) YPOS#14 )
  (byte[256]) XPOS#15 ← phi( main::@3/(byte[256]) XPOS#14 )
  (byte) numpoints#13 ← phi( main::@3/(byte) numpoints#10 )
  (byte) numpoints#3 ← (byte) numpoints#13
  call addpoint param-assignment
  to:main::@5
main::@5: from main::@4
  (byte*) COLORS#9 ← phi( main::@4/(byte*) COLORS#10 )
  (byte) FILL#6 ← phi( main::@4/(byte) FILL#7 )
  (byte*) SCREEN#5 ← phi( main::@4/(byte*) SCREEN#6 )
  (byte[256]) COLS#6 ← phi( main::@4/(byte[256]) COLS#5 )
  (byte[256]) YPOS#16 ← phi( main::@4/(byte[256]) YPOS#15 )
  (byte[256]) XPOS#16 ← phi( main::@4/(byte[256]) XPOS#15 )
  (byte) numpoints#14 ← phi( main::@4/(byte) numpoints#10 )
  (byte) numpoints#4 ← (byte) numpoints#14
  call addpoint param-assignment
  to:main::@6
main::@6: from main::@5
  (byte*) COLORS#8 ← phi( main::@5/(byte*) COLORS#9 )
  (byte) FILL#5 ← phi( main::@5/(byte) FILL#6 )
  (byte*) SCREEN#4 ← phi( main::@5/(byte*) SCREEN#5 )
  (byte[256]) COLS#7 ← phi( main::@5/(byte[256]) COLS#6 )
  (byte[256]) YPOS#17 ← phi( main::@5/(byte[256]) YPOS#16 )
  (byte[256]) XPOS#17 ← phi( main::@5/(byte[256]) XPOS#16 )
  (byte) numpoints#15 ← phi( main::@5/(byte) numpoints#10 )
  (byte) numpoints#5 ← (byte) numpoints#15
  call addpoint param-assignment
  to:main::@7
main::@7: from main::@6
  (byte*) COLORS#7 ← phi( main::@6/(byte*) COLORS#8 )
  (byte) FILL#4 ← phi( main::@6/(byte) FILL#5 )
  (byte*) SCREEN#3 ← phi( main::@6/(byte*) SCREEN#4 )
  (byte[256]) COLS#8 ← phi( main::@6/(byte[256]) COLS#7 )
  (byte[256]) YPOS#18 ← phi( main::@6/(byte[256]) YPOS#17 )
  (byte[256]) XPOS#18 ← phi( main::@6/(byte[256]) XPOS#17 )
  (byte) numpoints#16 ← phi( main::@6/(byte) numpoints#10 )
  (byte) numpoints#6 ← (byte) numpoints#16
  call addpoint param-assignment
  to:main::@8
main::@8: from main::@7
  (byte[256]) COLS#28 ← phi( main::@7/(byte[256]) COLS#8 )
  (byte[256]) YPOS#35 ← phi( main::@7/(byte[256]) YPOS#18 )
  (byte[256]) XPOS#33 ← phi( main::@7/(byte[256]) XPOS#18 )
  (byte*) COLORS#5 ← phi( main::@7/(byte*) COLORS#7 )
  (byte) FILL#3 ← phi( main::@7/(byte) FILL#4 )
  (byte*) SCREEN#2 ← phi( main::@7/(byte*) SCREEN#3 )
  (byte) numpoints#17 ← phi( main::@7/(byte) numpoints#10 )
  (byte) numpoints#7 ← (byte) numpoints#17
  call initscreen param-assignment
  to:main::@9
main::@9: from main::@8
  (byte[256]) COLS#27 ← phi( main::@8/(byte[256]) COLS#28 )
  (byte[256]) YPOS#31 ← phi( main::@8/(byte[256]) YPOS#35 )
  (byte) numpoints#31 ← phi( main::@8/(byte) numpoints#7 )
  (byte[256]) XPOS#28 ← phi( main::@8/(byte[256]) XPOS#33 )
  (byte*) COLORS#4 ← phi( main::@8/(byte*) COLORS#5 )
  to:main::@1
main::@1: from main::@11 main::@9
  (byte[256]) COLS#25 ← phi( main::@11/(byte[256]) COLS#26 main::@9/(byte[256]) COLS#27 )
  (byte[256]) YPOS#25 ← phi( main::@11/(byte[256]) YPOS#30 main::@9/(byte[256]) YPOS#31 )
  (byte) numpoints#29 ← phi( main::@11/(byte) numpoints#23 main::@9/(byte) numpoints#31 )
  (byte[256]) XPOS#21 ← phi( main::@11/(byte[256]) XPOS#27 main::@9/(byte[256]) XPOS#28 )
  (byte*) COLORS#2 ← phi( main::@11/(byte*) COLORS#3 main::@9/(byte*) COLORS#4 )
  call render param-assignment
  to:main::@10
main::@10: from main::@1
  (byte[256]) COLS#29 ← phi( main::@1/(byte[256]) COLS#25 )
  (byte*) COLORS#6 ← phi( main::@1/(byte*) COLORS#2 )
  (byte[256]) YPOS#21 ← phi( main::@1/(byte[256]) YPOS#25 )
  (byte) numpoints#26 ← phi( main::@1/(byte) numpoints#29 )
  (byte[256]) XPOS#9 ← phi( main::@1/(byte[256]) XPOS#21 )
  call animate param-assignment
  to:main::@11
main::@11: from main::@10
  (byte[256]) COLS#26 ← phi( main::@10/(byte[256]) COLS#29 )
  (byte[256]) YPOS#30 ← phi( main::@10/(byte[256]) YPOS#21 )
  (byte[256]) XPOS#27 ← phi( main::@10/(byte[256]) XPOS#9 )
  (byte*) COLORS#3 ← phi( main::@10/(byte*) COLORS#6 )
  (byte) numpoints#23 ← phi( main::@10/(byte) numpoints#26 )
  if(true) goto main::@1
  to:main::@return
main::@return: from main::@11
  (byte) numpoints#18 ← phi( main::@11/(byte) numpoints#23 )
  (byte) numpoints#8 ← (byte) numpoints#18
  return 
  to:@RETURN
animate: from main::@10
  (byte[256]) YPOS#9 ← phi( main::@10/(byte[256]) YPOS#21 )
  (byte[256]) XPOS#1 ← phi( main::@10/(byte[256]) XPOS#9 )
  (byte~) animate::$0 ← (byte[256]) XPOS#1 *idx (byte) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((byte[256]) XPOS#1 + (byte) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (byte[256]) XPOS#1 *idx (byte) 0
  (boolean~) animate::$3 ← (byte~) animate::$2 == (byte) 40
  if((boolean~) animate::$3) goto animate::@1
  to:animate::@2
animate::@1: from animate
  (byte[256]) YPOS#10 ← phi( animate/(byte[256]) YPOS#9 )
  (byte[256]) XPOS#2 ← phi( animate/(byte[256]) XPOS#1 )
  *((byte[256]) XPOS#2 + (byte) 0) ← (byte) 0
  to:animate::@2
animate::@2: from animate animate::@1
  (byte[256]) XPOS#10 ← phi( animate/(byte[256]) XPOS#1 animate::@1/(byte[256]) XPOS#2 )
  (byte[256]) YPOS#1 ← phi( animate/(byte[256]) YPOS#9 animate::@1/(byte[256]) YPOS#10 )
  (byte~) animate::$4 ← (byte[256]) YPOS#1 *idx (byte) 0
  (byte~) animate::$5 ← (byte~) animate::$4 + (byte) 1
  *((byte[256]) YPOS#1 + (byte) 0) ← (byte~) animate::$5
  (byte~) animate::$6 ← (byte[256]) YPOS#1 *idx (byte) 0
  (boolean~) animate::$7 ← (byte~) animate::$6 == (byte) 25
  if((boolean~) animate::$7) goto animate::@3
  to:animate::@4
animate::@3: from animate::@2
  (byte[256]) XPOS#11 ← phi( animate::@2/(byte[256]) XPOS#10 )
  (byte[256]) YPOS#2 ← phi( animate::@2/(byte[256]) YPOS#1 )
  *((byte[256]) YPOS#2 + (byte) 0) ← (byte) 0
  to:animate::@4
animate::@4: from animate::@2 animate::@3
  (byte[256]) YPOS#11 ← phi( animate::@2/(byte[256]) YPOS#1 animate::@3/(byte[256]) YPOS#2 )
  (byte[256]) XPOS#3 ← phi( animate::@2/(byte[256]) XPOS#10 animate::@3/(byte[256]) XPOS#11 )
  (byte~) animate::$8 ← (byte[256]) XPOS#3 *idx (byte) 1
  (byte~) animate::$9 ← (byte~) animate::$8 - (byte) 1
  *((byte[256]) XPOS#3 + (byte) 1) ← (byte~) animate::$9
  (byte~) animate::$10 ← (byte[256]) XPOS#3 *idx (byte) 1
  (boolean~) animate::$11 ← (byte~) animate::$10 == (byte) 255
  if((boolean~) animate::$11) goto animate::@5
  to:animate::@6
animate::@5: from animate::@4
  (byte[256]) YPOS#12 ← phi( animate::@4/(byte[256]) YPOS#11 )
  (byte[256]) XPOS#4 ← phi( animate::@4/(byte[256]) XPOS#3 )
  *((byte[256]) XPOS#4 + (byte) 1) ← (byte) 40
  to:animate::@6
animate::@6: from animate::@4 animate::@5
  (byte[256]) XPOS#22 ← phi( animate::@4/(byte[256]) XPOS#3 animate::@5/(byte[256]) XPOS#4 )
  (byte[256]) YPOS#3 ← phi( animate::@4/(byte[256]) YPOS#11 animate::@5/(byte[256]) YPOS#12 )
  (byte~) animate::$12 ← (byte[256]) YPOS#3 *idx (byte) 2
  (byte~) animate::$13 ← (byte~) animate::$12 + (byte) 1
  *((byte[256]) YPOS#3 + (byte) 2) ← (byte~) animate::$13
  (byte~) animate::$14 ← (byte[256]) YPOS#3 *idx (byte) 2
  (boolean~) animate::$15 ← (byte~) animate::$14 == (byte) 25
  if((boolean~) animate::$15) goto animate::@7
  to:animate::@8
animate::@7: from animate::@6
  (byte[256]) XPOS#23 ← phi( animate::@6/(byte[256]) XPOS#22 )
  (byte[256]) YPOS#4 ← phi( animate::@6/(byte[256]) YPOS#3 )
  *((byte[256]) YPOS#4 + (byte) 2) ← (byte) 0
  to:animate::@8
animate::@8: from animate::@6 animate::@7
  (byte[256]) XPOS#12 ← phi( animate::@6/(byte[256]) XPOS#22 animate::@7/(byte[256]) XPOS#23 )
  (byte[256]) YPOS#5 ← phi( animate::@6/(byte[256]) YPOS#3 animate::@7/(byte[256]) YPOS#4 )
  (byte~) animate::$16 ← (byte[256]) YPOS#5 *idx (byte) 3
  (byte~) animate::$17 ← (byte~) animate::$16 - (byte) 1
  *((byte[256]) YPOS#5 + (byte) 3) ← (byte~) animate::$17
  (byte~) animate::$18 ← (byte[256]) YPOS#5 *idx (byte) 3
  (boolean~) animate::$19 ← (byte~) animate::$18 == (byte) 255
  if((boolean~) animate::$19) goto animate::@9
  to:animate::@return
animate::@9: from animate::@8
  (byte[256]) XPOS#5 ← phi( animate::@8/(byte[256]) XPOS#12 )
  (byte[256]) YPOS#6 ← phi( animate::@8/(byte[256]) YPOS#5 )
  *((byte[256]) YPOS#6 + (byte) 3) ← (byte) 25
  (byte~) animate::$20 ← (byte[256]) XPOS#5 *idx (byte) 3
  (byte~) animate::$21 ← (byte~) animate::$20 + (byte) 7
  *((byte[256]) XPOS#5 + (byte) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (byte[256]) XPOS#5 *idx (byte) 3
  (boolean~) animate::$23 ← (byte~) animate::$22 >= (byte) 40
  if((boolean~) animate::$23) goto animate::@11
  to:animate::@return
animate::@11: from animate::@9
  (byte[256]) XPOS#6 ← phi( animate::@9/(byte[256]) XPOS#5 )
  (byte~) animate::$24 ← (byte[256]) XPOS#6 *idx (byte) 3
  (byte~) animate::$25 ← (byte~) animate::$24 - (byte) 40
  *((byte[256]) XPOS#6 + (byte) 3) ← (byte~) animate::$25
  to:animate::@return
animate::@return: from animate::@11 animate::@8 animate::@9
  return 
  to:@RETURN
addpoint: from main main::@3 main::@4 main::@5 main::@6 main::@7
  (byte[256]) COLS#1 ← phi( main/(byte[256]) COLS#3 main::@3/(byte[256]) COLS#4 main::@4/(byte[256]) COLS#5 main::@5/(byte[256]) COLS#6 main::@6/(byte[256]) COLS#7 main::@7/(byte[256]) COLS#8 )
  (byte) addpoint::c#6 ← phi( main/(byte) 1 main::@3/(byte) 2 main::@4/(byte) 3 main::@5/(byte) 4 main::@6/(byte) 5 main::@7/(byte) 7 )
  (byte[256]) YPOS#7 ← phi( main/(byte[256]) YPOS#13 main::@3/(byte[256]) YPOS#14 main::@4/(byte[256]) YPOS#15 main::@5/(byte[256]) YPOS#16 main::@6/(byte[256]) YPOS#17 main::@7/(byte[256]) YPOS#18 )
  (byte) addpoint::y#6 ← phi( main/(byte) 5 main::@3/(byte) 8 main::@4/(byte) 14 main::@5/(byte) 2 main::@6/(byte) 17 main::@7/(byte) 22 )
  (byte) numpoints#19 ← phi( main/(byte) numpoints#22 main::@3/(byte) numpoints#2 main::@4/(byte) numpoints#3 main::@5/(byte) numpoints#4 main::@6/(byte) numpoints#5 main::@7/(byte) numpoints#6 )
  (byte[256]) XPOS#7 ← phi( main/(byte[256]) XPOS#13 main::@3/(byte[256]) XPOS#14 main::@4/(byte[256]) XPOS#15 main::@5/(byte[256]) XPOS#16 main::@6/(byte[256]) XPOS#17 main::@7/(byte[256]) XPOS#18 )
  (byte) addpoint::x#6 ← phi( main/(byte) 5 main::@3/(byte) 15 main::@4/(byte) 6 main::@5/(byte) 34 main::@6/(byte) 21 main::@7/(byte) 31 )
  *((byte[256]) XPOS#7 + (byte) numpoints#19) ← (byte) addpoint::x#6
  *((byte[256]) YPOS#7 + (byte) numpoints#19) ← (byte) addpoint::y#6
  *((byte[256]) COLS#1 + (byte) numpoints#19) ← (byte) addpoint::c#6
  (byte) numpoints#9 ← ++ (byte) numpoints#19
  to:addpoint::@return
addpoint::@return: from addpoint
  (byte) numpoints#20 ← phi( addpoint/(byte) numpoints#9 )
  (byte) numpoints#10 ← (byte) numpoints#20
  return 
  to:@RETURN
initscreen: from main::@8
  (byte) FILL#2 ← phi( main::@8/(byte) FILL#3 )
  (byte*) SCREEN#1 ← phi( main::@8/(byte*) SCREEN#2 )
  (byte*) initscreen::screen#0 ← (byte*) SCREEN#1
  to:initscreen::@1
initscreen::@1: from initscreen initscreen::@1
  (byte*) initscreen::screen#2 ← phi( initscreen/(byte*) initscreen::screen#0 initscreen::@1/(byte*) initscreen::screen#1 )
  (byte) FILL#1 ← phi( initscreen/(byte) FILL#2 initscreen::@1/(byte) FILL#1 )
  *((byte*) initscreen::screen#2) ← (byte) FILL#1
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  (boolean~) initscreen::$0 ← (byte*) initscreen::screen#1 < (word) 2048
  if((boolean~) initscreen::$0) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: from initscreen::@1
  return 
  to:@RETURN
render: from main::@1
  (byte) numpoints#41 ← phi( main::@1/(byte) numpoints#29 )
  (byte[256]) COLS#23 ← phi( main::@1/(byte[256]) COLS#25 )
  (byte[256]) YPOS#32 ← phi( main::@1/(byte[256]) YPOS#25 )
  (byte[256]) XPOS#34 ← phi( main::@1/(byte[256]) XPOS#21 )
  (byte*) COLORS#1 ← phi( main::@1/(byte*) COLORS#2 )
  (byte*) render::colline#0 ← (byte*) COLORS#1
  to:render::@1
render::@1: from render render::@3
  (byte) numpoints#39 ← phi( render/(byte) numpoints#41 render::@3/(byte) numpoints#42 )
  (byte[256]) COLS#21 ← phi( render/(byte[256]) COLS#23 render::@3/(byte[256]) COLS#24 )
  (byte[256]) YPOS#26 ← phi( render/(byte[256]) YPOS#32 render::@3/(byte[256]) YPOS#33 )
  (byte[256]) XPOS#29 ← phi( render/(byte[256]) XPOS#34 render::@3/(byte[256]) XPOS#35 )
  (byte*) render::colline#5 ← phi( render/(byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#4 ← phi( render/(byte) 0 render::@3/(byte) render::y#1 )
  to:render::@2
render::@2: from render::@1 render::@5
  (byte) numpoints#38 ← phi( render::@1/(byte) numpoints#39 render::@5/(byte) numpoints#40 )
  (byte[256]) COLS#20 ← phi( render::@1/(byte[256]) COLS#21 render::@5/(byte[256]) COLS#22 )
  (byte[256]) YPOS#22 ← phi( render::@1/(byte[256]) YPOS#26 render::@5/(byte[256]) YPOS#27 )
  (byte[256]) XPOS#24 ← phi( render::@1/(byte[256]) XPOS#29 render::@5/(byte[256]) XPOS#30 )
  (byte*) render::colline#4 ← phi( render::@1/(byte*) render::colline#5 render::@5/(byte*) render::colline#2 )
  (byte) render::y#2 ← phi( render::@1/(byte) render::y#4 render::@5/(byte) render::y#5 )
  (byte) render::x#2 ← phi( render::@1/(byte) 0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  (byte) findcol::return#0 ← (byte) findcol::return#2
  to:render::@5
render::@5: from render::@2
  (byte) numpoints#40 ← phi( render::@2/(byte) numpoints#38 )
  (byte[256]) COLS#22 ← phi( render::@2/(byte[256]) COLS#20 )
  (byte[256]) YPOS#27 ← phi( render::@2/(byte[256]) YPOS#22 )
  (byte[256]) XPOS#30 ← phi( render::@2/(byte[256]) XPOS#24 )
  (byte) render::y#5 ← phi( render::@2/(byte) render::y#2 )
  (byte) render::x#3 ← phi( render::@2/(byte) render::x#2 )
  (byte*) render::colline#2 ← phi( render::@2/(byte*) render::colline#4 )
  (byte) findcol::return#4 ← phi( render::@2/(byte) findcol::return#0 )
  (byte~) render::$0 ← (byte) findcol::return#4
  (byte) render::col#0 ← (byte~) render::$0
  *((byte*) render::colline#2 + (byte) render::x#3) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#3
  (boolean~) render::$1 ← (byte) render::x#1 < (byte) 40
  if((boolean~) render::$1) goto render::@2
  to:render::@3
render::@3: from render::@5
  (byte) numpoints#42 ← phi( render::@5/(byte) numpoints#40 )
  (byte[256]) COLS#24 ← phi( render::@5/(byte[256]) COLS#22 )
  (byte[256]) YPOS#33 ← phi( render::@5/(byte[256]) YPOS#27 )
  (byte[256]) XPOS#35 ← phi( render::@5/(byte[256]) XPOS#30 )
  (byte) render::y#3 ← phi( render::@5/(byte) render::y#5 )
  (byte*) render::colline#3 ← phi( render::@5/(byte*) render::colline#2 )
  (byte*~) render::$2 ← (byte*) render::colline#3 + (byte) 40
  (byte*) render::colline#1 ← (byte*~) render::$2
  (byte) render::y#1 ← ++ (byte) render::y#3
  (boolean~) render::$3 ← (byte) render::y#1 < (byte) 25
  if((boolean~) render::$3) goto render::@1
  to:render::@return
render::@return: from render::@3
  return 
  to:@RETURN
findcol: from render::@2
  (byte) numpoints#37 ← phi( render::@2/(byte) numpoints#38 )
  (byte[256]) COLS#18 ← phi( render::@2/(byte[256]) COLS#20 )
  (byte) findcol::y#8 ← phi( render::@2/(byte) findcol::y#0 )
  (byte) findcol::x#5 ← phi( render::@2/(byte) findcol::x#0 )
  (byte[256]) YPOS#19 ← phi( render::@2/(byte[256]) YPOS#22 )
  (byte[256]) XPOS#19 ← phi( render::@2/(byte[256]) XPOS#24 )
  to:findcol::@1
findcol::@1: from findcol findcol::@13
  (byte) findcol::mincol#11 ← phi( findcol/(byte) 0 findcol::@13/(byte) findcol::mincol#3 )
  (byte) numpoints#35 ← phi( findcol/(byte) numpoints#37 findcol::@13/(byte) numpoints#21 )
  (byte[256]) COLS#16 ← phi( findcol/(byte[256]) COLS#18 findcol::@13/(byte[256]) COLS#19 )
  (byte) findcol::mindiff#9 ← phi( findcol/(byte) 255 findcol::@13/(byte) findcol::mindiff#11 )
  (byte) findcol::y#5 ← phi( findcol/(byte) findcol::y#8 findcol::@13/(byte) findcol::y#9 )
  (byte) findcol::x#1 ← phi( findcol/(byte) findcol::x#5 findcol::@13/(byte) findcol::x#6 )
  (byte[256]) YPOS#8 ← phi( findcol/(byte[256]) YPOS#19 findcol::@13/(byte[256]) YPOS#20 )
  (byte) findcol::i#2 ← phi( findcol/(byte) 0 findcol::@13/(byte) findcol::i#1 )
  (byte[256]) XPOS#8 ← phi( findcol/(byte[256]) XPOS#19 findcol::@13/(byte[256]) XPOS#20 )
  (byte~) findcol::$0 ← (byte[256]) XPOS#8 *idx (byte) findcol::i#2
  (byte) findcol::xp#0 ← (byte~) findcol::$0
  (byte~) findcol::$1 ← (byte[256]) YPOS#8 *idx (byte) findcol::i#2
  (byte) findcol::yp#0 ← (byte~) findcol::$1
  (boolean~) findcol::$2 ← (byte) findcol::x#1 == (byte) findcol::xp#0
  if((boolean~) findcol::$2) goto findcol::@2
  to:findcol::@3
findcol::@2: from findcol::@1
  (byte) findcol::mincol#12 ← phi( findcol::@1/(byte) findcol::mincol#11 )
  (byte[256]) YPOS#39 ← phi( findcol::@1/(byte[256]) YPOS#8 )
  (byte[256]) XPOS#40 ← phi( findcol::@1/(byte[256]) XPOS#8 )
  (byte) numpoints#36 ← phi( findcol::@1/(byte) numpoints#35 )
  (byte) findcol::i#12 ← phi( findcol::@1/(byte) findcol::i#2 )
  (byte[256]) COLS#17 ← phi( findcol::@1/(byte[256]) COLS#16 )
  (byte) findcol::mindiff#10 ← phi( findcol::@1/(byte) findcol::mindiff#9 )
  (byte) findcol::xp#4 ← phi( findcol::@1/(byte) findcol::xp#0 )
  (byte) findcol::x#7 ← phi( findcol::@1/(byte) findcol::x#1 )
  (byte) findcol::yp#1 ← phi( findcol::@1/(byte) findcol::yp#0 )
  (byte) findcol::y#1 ← phi( findcol::@1/(byte) findcol::y#5 )
  (boolean~) findcol::$3 ← (byte) findcol::y#1 == (byte) findcol::yp#1
  if((boolean~) findcol::$3) goto findcol::@4
  to:findcol::@3
findcol::@3: from findcol::@1 findcol::@2
  (byte) findcol::mincol#10 ← phi( findcol::@1/(byte) findcol::mincol#11 findcol::@2/(byte) findcol::mincol#12 )
  (byte[256]) YPOS#38 ← phi( findcol::@1/(byte[256]) YPOS#8 findcol::@2/(byte[256]) YPOS#39 )
  (byte[256]) XPOS#39 ← phi( findcol::@1/(byte[256]) XPOS#8 findcol::@2/(byte[256]) XPOS#40 )
  (byte) numpoints#34 ← phi( findcol::@1/(byte) numpoints#35 findcol::@2/(byte) numpoints#36 )
  (byte) findcol::i#11 ← phi( findcol::@1/(byte) findcol::i#2 findcol::@2/(byte) findcol::i#12 )
  (byte[256]) COLS#15 ← phi( findcol::@1/(byte[256]) COLS#16 findcol::@2/(byte[256]) COLS#17 )
  (byte) findcol::mindiff#8 ← phi( findcol::@1/(byte) findcol::mindiff#9 findcol::@2/(byte) findcol::mindiff#10 )
  (byte) findcol::yp#7 ← phi( findcol::@1/(byte) findcol::yp#0 findcol::@2/(byte) findcol::yp#1 )
  (byte) findcol::y#10 ← phi( findcol::@1/(byte) findcol::y#5 findcol::@2/(byte) findcol::y#1 )
  (byte) findcol::xp#1 ← phi( findcol::@1/(byte) findcol::xp#0 findcol::@2/(byte) findcol::xp#4 )
  (byte) findcol::x#2 ← phi( findcol::@1/(byte) findcol::x#1 findcol::@2/(byte) findcol::x#7 )
  (boolean~) findcol::$4 ← (byte) findcol::x#2 < (byte) findcol::xp#1
  if((boolean~) findcol::$4) goto findcol::@6
  to:findcol::@7
findcol::@4: from findcol::@2
  to:findcol::@return
findcol::@return: from findcol::@27 findcol::@4
  (byte) findcol::return#5 ← phi( findcol::@27/(byte) findcol::return#3 findcol::@4/(byte) 0 )
  (byte) findcol::return#2 ← (byte) findcol::return#5
  return 
  to:@RETURN
findcol::@6: from findcol::@3
  (byte) findcol::mincol#8 ← phi( findcol::@3/(byte) findcol::mincol#10 )
  (byte[256]) YPOS#36 ← phi( findcol::@3/(byte[256]) YPOS#38 )
  (byte[256]) XPOS#37 ← phi( findcol::@3/(byte[256]) XPOS#39 )
  (byte) numpoints#32 ← phi( findcol::@3/(byte) numpoints#34 )
  (byte) findcol::i#9 ← phi( findcol::@3/(byte) findcol::i#11 )
  (byte[256]) COLS#13 ← phi( findcol::@3/(byte[256]) COLS#15 )
  (byte) findcol::mindiff#6 ← phi( findcol::@3/(byte) findcol::mindiff#8 )
  (byte) findcol::yp#5 ← phi( findcol::@3/(byte) findcol::yp#7 )
  (byte) findcol::y#6 ← phi( findcol::@3/(byte) findcol::y#10 )
  (byte) findcol::x#3 ← phi( findcol::@3/(byte) findcol::x#2 )
  (byte) findcol::xp#2 ← phi( findcol::@3/(byte) findcol::xp#1 )
  (byte~) findcol::$5 ← (byte) findcol::xp#2 - (byte) findcol::x#3
  (byte) findcol::diff#0 ← (byte~) findcol::$5
  to:findcol::@8
findcol::@7: from findcol::@3
  (byte) findcol::mincol#9 ← phi( findcol::@3/(byte) findcol::mincol#10 )
  (byte[256]) YPOS#37 ← phi( findcol::@3/(byte[256]) YPOS#38 )
  (byte[256]) XPOS#38 ← phi( findcol::@3/(byte[256]) XPOS#39 )
  (byte) numpoints#33 ← phi( findcol::@3/(byte) numpoints#34 )
  (byte) findcol::i#10 ← phi( findcol::@3/(byte) findcol::i#11 )
  (byte[256]) COLS#14 ← phi( findcol::@3/(byte[256]) COLS#15 )
  (byte) findcol::mindiff#7 ← phi( findcol::@3/(byte) findcol::mindiff#8 )
  (byte) findcol::yp#6 ← phi( findcol::@3/(byte) findcol::yp#7 )
  (byte) findcol::y#7 ← phi( findcol::@3/(byte) findcol::y#10 )
  (byte) findcol::xp#3 ← phi( findcol::@3/(byte) findcol::xp#1 )
  (byte) findcol::x#4 ← phi( findcol::@3/(byte) findcol::x#2 )
  (byte~) findcol::$6 ← (byte) findcol::x#4 - (byte) findcol::xp#3
  (byte) findcol::diff#1 ← (byte~) findcol::$6
  to:findcol::@8
findcol::@8: from findcol::@6 findcol::@7
  (byte) findcol::mincol#7 ← phi( findcol::@6/(byte) findcol::mincol#8 findcol::@7/(byte) findcol::mincol#9 )
  (byte) findcol::x#12 ← phi( findcol::@6/(byte) findcol::x#3 findcol::@7/(byte) findcol::x#4 )
  (byte[256]) YPOS#34 ← phi( findcol::@6/(byte[256]) YPOS#36 findcol::@7/(byte[256]) YPOS#37 )
  (byte[256]) XPOS#36 ← phi( findcol::@6/(byte[256]) XPOS#37 findcol::@7/(byte[256]) XPOS#38 )
  (byte) numpoints#30 ← phi( findcol::@6/(byte) numpoints#32 findcol::@7/(byte) numpoints#33 )
  (byte) findcol::i#8 ← phi( findcol::@6/(byte) findcol::i#9 findcol::@7/(byte) findcol::i#10 )
  (byte[256]) COLS#12 ← phi( findcol::@6/(byte[256]) COLS#13 findcol::@7/(byte[256]) COLS#14 )
  (byte) findcol::mindiff#5 ← phi( findcol::@6/(byte) findcol::mindiff#6 findcol::@7/(byte) findcol::mindiff#7 )
  (byte) findcol::diff#8 ← phi( findcol::@6/(byte) findcol::diff#0 findcol::@7/(byte) findcol::diff#1 )
  (byte) findcol::yp#2 ← phi( findcol::@6/(byte) findcol::yp#5 findcol::@7/(byte) findcol::yp#6 )
  (byte) findcol::y#2 ← phi( findcol::@6/(byte) findcol::y#6 findcol::@7/(byte) findcol::y#7 )
  (boolean~) findcol::$7 ← (byte) findcol::y#2 < (byte) findcol::yp#2
  if((boolean~) findcol::$7) goto findcol::@9
  to:findcol::@10
findcol::@9: from findcol::@8
  (byte) findcol::mincol#6 ← phi( findcol::@8/(byte) findcol::mincol#7 )
  (byte) findcol::x#11 ← phi( findcol::@8/(byte) findcol::x#12 )
  (byte[256]) YPOS#29 ← phi( findcol::@8/(byte[256]) YPOS#34 )
  (byte[256]) XPOS#32 ← phi( findcol::@8/(byte[256]) XPOS#36 )
  (byte) numpoints#28 ← phi( findcol::@8/(byte) numpoints#30 )
  (byte) findcol::i#7 ← phi( findcol::@8/(byte) findcol::i#8 )
  (byte[256]) COLS#11 ← phi( findcol::@8/(byte[256]) COLS#12 )
  (byte) findcol::mindiff#4 ← phi( findcol::@8/(byte) findcol::mindiff#5 )
  (byte) findcol::diff#4 ← phi( findcol::@8/(byte) findcol::diff#8 )
  (byte) findcol::y#3 ← phi( findcol::@8/(byte) findcol::y#2 )
  (byte) findcol::yp#3 ← phi( findcol::@8/(byte) findcol::yp#2 )
  (byte~) findcol::$8 ← (byte) findcol::yp#3 - (byte) findcol::y#3
  (byte~) findcol::$9 ← (byte) findcol::diff#4 + (byte~) findcol::$8
  (byte) findcol::diff#2 ← (byte~) findcol::$9
  to:findcol::@11
findcol::@10: from findcol::@8
  (byte) findcol::mincol#5 ← phi( findcol::@8/(byte) findcol::mincol#7 )
  (byte) findcol::x#10 ← phi( findcol::@8/(byte) findcol::x#12 )
  (byte[256]) YPOS#28 ← phi( findcol::@8/(byte[256]) YPOS#34 )
  (byte[256]) XPOS#31 ← phi( findcol::@8/(byte[256]) XPOS#36 )
  (byte) numpoints#27 ← phi( findcol::@8/(byte) numpoints#30 )
  (byte) findcol::i#6 ← phi( findcol::@8/(byte) findcol::i#8 )
  (byte[256]) COLS#10 ← phi( findcol::@8/(byte[256]) COLS#12 )
  (byte) findcol::mindiff#3 ← phi( findcol::@8/(byte) findcol::mindiff#5 )
  (byte) findcol::diff#5 ← phi( findcol::@8/(byte) findcol::diff#8 )
  (byte) findcol::yp#4 ← phi( findcol::@8/(byte) findcol::yp#2 )
  (byte) findcol::y#4 ← phi( findcol::@8/(byte) findcol::y#2 )
  (byte~) findcol::$10 ← (byte) findcol::y#4 - (byte) findcol::yp#4
  (byte~) findcol::$11 ← (byte) findcol::diff#5 + (byte~) findcol::$10
  (byte) findcol::diff#3 ← (byte~) findcol::$11
  to:findcol::@11
findcol::@11: from findcol::@10 findcol::@9
  (byte) findcol::y#11 ← phi( findcol::@10/(byte) findcol::y#4 findcol::@9/(byte) findcol::y#3 )
  (byte) findcol::mincol#4 ← phi( findcol::@10/(byte) findcol::mincol#5 findcol::@9/(byte) findcol::mincol#6 )
  (byte) findcol::x#8 ← phi( findcol::@10/(byte) findcol::x#10 findcol::@9/(byte) findcol::x#11 )
  (byte[256]) YPOS#23 ← phi( findcol::@10/(byte[256]) YPOS#28 findcol::@9/(byte[256]) YPOS#29 )
  (byte[256]) XPOS#25 ← phi( findcol::@10/(byte[256]) XPOS#31 findcol::@9/(byte[256]) XPOS#32 )
  (byte) numpoints#24 ← phi( findcol::@10/(byte) numpoints#27 findcol::@9/(byte) numpoints#28 )
  (byte) findcol::i#5 ← phi( findcol::@10/(byte) findcol::i#6 findcol::@9/(byte) findcol::i#7 )
  (byte[256]) COLS#9 ← phi( findcol::@10/(byte[256]) COLS#10 findcol::@9/(byte[256]) COLS#11 )
  (byte) findcol::mindiff#2 ← phi( findcol::@10/(byte) findcol::mindiff#3 findcol::@9/(byte) findcol::mindiff#4 )
  (byte) findcol::diff#6 ← phi( findcol::@10/(byte) findcol::diff#3 findcol::@9/(byte) findcol::diff#2 )
  (boolean~) findcol::$12 ← (byte) findcol::diff#6 < (byte) findcol::mindiff#2
  if((boolean~) findcol::$12) goto findcol::@12
  to:findcol::@13
findcol::@12: from findcol::@11
  (byte) findcol::y#12 ← phi( findcol::@11/(byte) findcol::y#11 )
  (byte) findcol::x#9 ← phi( findcol::@11/(byte) findcol::x#8 )
  (byte[256]) YPOS#24 ← phi( findcol::@11/(byte[256]) YPOS#23 )
  (byte[256]) XPOS#26 ← phi( findcol::@11/(byte[256]) XPOS#25 )
  (byte) numpoints#25 ← phi( findcol::@11/(byte) numpoints#24 )
  (byte) findcol::i#3 ← phi( findcol::@11/(byte) findcol::i#5 )
  (byte[256]) COLS#2 ← phi( findcol::@11/(byte[256]) COLS#9 )
  (byte) findcol::diff#7 ← phi( findcol::@11/(byte) findcol::diff#6 )
  (byte) findcol::mindiff#1 ← (byte) findcol::diff#7
  (byte~) findcol::$13 ← (byte[256]) COLS#2 *idx (byte) findcol::i#3
  (byte) findcol::mincol#1 ← (byte~) findcol::$13
  to:findcol::@13
findcol::@13: from findcol::@11 findcol::@12
  (byte[256]) COLS#19 ← phi( findcol::@11/(byte[256]) COLS#9 findcol::@12/(byte[256]) COLS#2 )
  (byte) findcol::mindiff#11 ← phi( findcol::@11/(byte) findcol::mindiff#2 findcol::@12/(byte) findcol::mindiff#1 )
  (byte) findcol::y#9 ← phi( findcol::@11/(byte) findcol::y#11 findcol::@12/(byte) findcol::y#12 )
  (byte) findcol::mincol#3 ← phi( findcol::@11/(byte) findcol::mincol#4 findcol::@12/(byte) findcol::mincol#1 )
  (byte) findcol::x#6 ← phi( findcol::@11/(byte) findcol::x#8 findcol::@12/(byte) findcol::x#9 )
  (byte[256]) YPOS#20 ← phi( findcol::@11/(byte[256]) YPOS#23 findcol::@12/(byte[256]) YPOS#24 )
  (byte[256]) XPOS#20 ← phi( findcol::@11/(byte[256]) XPOS#25 findcol::@12/(byte[256]) XPOS#26 )
  (byte) numpoints#21 ← phi( findcol::@11/(byte) numpoints#24 findcol::@12/(byte) numpoints#25 )
  (byte) findcol::i#4 ← phi( findcol::@11/(byte) findcol::i#5 findcol::@12/(byte) findcol::i#3 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#4
  (boolean~) findcol::$14 ← (byte) findcol::i#1 < (byte) numpoints#21
  if((boolean~) findcol::$14) goto findcol::@1
  to:findcol::@27
findcol::@27: from findcol::@13
  (byte) findcol::mincol#2 ← phi( findcol::@13/(byte) findcol::mincol#3 )
  (byte) findcol::return#3 ← (byte) findcol::mincol#2
  to:findcol::@return
@END: from @7

Not aliassing across scopes: initscreen::screen#0 SCREEN#1
Not aliassing across scopes: render::colline#0 COLORS#1
Not aliassing across scopes: findcol::x#0 render::x#2
Not aliassing across scopes: findcol::y#0 render::y#2
Not aliassing across scopes: render::$0 findcol::return#4
Alias (byte) numpoints#1 = (byte) numpoints#11 (byte) numpoints#8 (byte) numpoints#26 (byte) numpoints#29 (byte) numpoints#23 (byte) numpoints#18 (byte) numpoints#41 
Alias (byte) numpoints#10 = (byte) numpoints#12 (byte) numpoints#2 (byte) numpoints#13 (byte) numpoints#3 (byte) numpoints#14 (byte) numpoints#4 (byte) numpoints#15 (byte) numpoints#5 (byte) numpoints#16 (byte) numpoints#6 (byte) numpoints#17 (byte) numpoints#7 (byte) numpoints#31 (byte) numpoints#20 (byte) numpoints#9 
Alias (byte[256]) XPOS#13 = (byte[256]) XPOS#14 (byte[256]) XPOS#15 (byte[256]) XPOS#16 (byte[256]) XPOS#17 (byte[256]) XPOS#18 (byte[256]) XPOS#33 (byte[256]) XPOS#28 
Alias (byte[256]) YPOS#13 = (byte[256]) YPOS#14 (byte[256]) YPOS#15 (byte[256]) YPOS#16 (byte[256]) YPOS#17 (byte[256]) YPOS#18 (byte[256]) YPOS#35 (byte[256]) YPOS#31 
Alias (byte[256]) COLS#27 = (byte[256]) COLS#4 (byte[256]) COLS#3 (byte[256]) COLS#5 (byte[256]) COLS#6 (byte[256]) COLS#7 (byte[256]) COLS#8 (byte[256]) COLS#28 
Alias (byte*) SCREEN#1 = (byte*) SCREEN#7 (byte*) SCREEN#8 (byte*) SCREEN#6 (byte*) SCREEN#5 (byte*) SCREEN#4 (byte*) SCREEN#3 (byte*) SCREEN#2 
Alias (byte) FILL#2 = (byte) FILL#8 (byte) FILL#9 (byte) FILL#7 (byte) FILL#6 (byte) FILL#5 (byte) FILL#4 (byte) FILL#3 
Alias (byte*) COLORS#10 = (byte*) COLORS#11 (byte*) COLORS#12 (byte*) COLORS#9 (byte*) COLORS#8 (byte*) COLORS#7 (byte*) COLORS#5 (byte*) COLORS#4 
Alias (byte[256]) XPOS#1 = (byte[256]) XPOS#9 (byte[256]) XPOS#21 (byte[256]) XPOS#27 (byte[256]) XPOS#2 (byte[256]) XPOS#34 
Alias (byte[256]) YPOS#10 = (byte[256]) YPOS#21 (byte[256]) YPOS#25 (byte[256]) YPOS#30 (byte[256]) YPOS#9 (byte[256]) YPOS#32 
Alias (byte*) COLORS#1 = (byte*) COLORS#6 (byte*) COLORS#2 (byte*) COLORS#3 
Alias (byte[256]) COLS#23 = (byte[256]) COLS#29 (byte[256]) COLS#25 (byte[256]) COLS#26 
Alias (byte[256]) YPOS#1 = (byte[256]) YPOS#2 
Alias (byte[256]) XPOS#10 = (byte[256]) XPOS#11 
Alias (byte[256]) XPOS#3 = (byte[256]) XPOS#4 
Alias (byte[256]) YPOS#11 = (byte[256]) YPOS#12 
Alias (byte[256]) YPOS#3 = (byte[256]) YPOS#4 
Alias (byte[256]) XPOS#22 = (byte[256]) XPOS#23 
Alias (byte[256]) YPOS#5 = (byte[256]) YPOS#6 
Alias (byte[256]) XPOS#12 = (byte[256]) XPOS#5 (byte[256]) XPOS#6 
Alias (byte) findcol::return#0 = (byte) findcol::return#2 (byte) findcol::return#4 (byte) findcol::return#5 
Alias (byte*) render::colline#2 = (byte*) render::colline#4 (byte*) render::colline#3 
Alias (byte) render::x#2 = (byte) render::x#3 
Alias (byte) render::y#2 = (byte) render::y#5 (byte) render::y#3 
Alias (byte[256]) XPOS#19 = (byte[256]) XPOS#30 (byte[256]) XPOS#24 (byte[256]) XPOS#35 
Alias (byte[256]) YPOS#19 = (byte[256]) YPOS#27 (byte[256]) YPOS#22 (byte[256]) YPOS#33 
Alias (byte[256]) COLS#18 = (byte[256]) COLS#22 (byte[256]) COLS#20 (byte[256]) COLS#24 
Alias (byte) numpoints#37 = (byte) numpoints#40 (byte) numpoints#38 (byte) numpoints#42 
Alias (byte) render::col#0 = (byte~) render::$0 
Alias (byte*) render::colline#1 = (byte*~) render::$2 
Alias (byte) findcol::x#0 = (byte) findcol::x#5 
Alias (byte) findcol::y#0 = (byte) findcol::y#8 
Alias (byte) findcol::xp#0 = (byte~) findcol::$0 (byte) findcol::xp#4 
Alias (byte) findcol::yp#0 = (byte~) findcol::$1 (byte) findcol::yp#1 
Alias (byte) findcol::y#1 = (byte) findcol::y#5 
Alias (byte) findcol::x#1 = (byte) findcol::x#7 
Alias (byte) findcol::mindiff#10 = (byte) findcol::mindiff#9 
Alias (byte[256]) COLS#16 = (byte[256]) COLS#17 
Alias (byte) findcol::i#12 = (byte) findcol::i#2 
Alias (byte) numpoints#35 = (byte) numpoints#36 
Alias (byte[256]) XPOS#40 = (byte[256]) XPOS#8 
Alias (byte[256]) YPOS#39 = (byte[256]) YPOS#8 
Alias (byte) findcol::mincol#11 = (byte) findcol::mincol#12 
Alias (byte) findcol::xp#1 = (byte) findcol::xp#2 (byte) findcol::xp#3 
Alias (byte) findcol::x#2 = (byte) findcol::x#3 (byte) findcol::x#4 
Alias (byte) findcol::y#10 = (byte) findcol::y#6 (byte) findcol::y#7 
Alias (byte) findcol::yp#5 = (byte) findcol::yp#7 (byte) findcol::yp#6 
Alias (byte) findcol::mindiff#6 = (byte) findcol::mindiff#8 (byte) findcol::mindiff#7 
Alias (byte[256]) COLS#13 = (byte[256]) COLS#15 (byte[256]) COLS#14 
Alias (byte) findcol::i#10 = (byte) findcol::i#9 (byte) findcol::i#11 
Alias (byte) numpoints#32 = (byte) numpoints#34 (byte) numpoints#33 
Alias (byte[256]) XPOS#37 = (byte[256]) XPOS#39 (byte[256]) XPOS#38 
Alias (byte[256]) YPOS#36 = (byte[256]) YPOS#38 (byte[256]) YPOS#37 
Alias (byte) findcol::mincol#10 = (byte) findcol::mincol#8 (byte) findcol::mincol#9 
Alias (byte) findcol::diff#0 = (byte~) findcol::$5 
Alias (byte) findcol::diff#1 = (byte~) findcol::$6 
Alias (byte) findcol::yp#2 = (byte) findcol::yp#3 (byte) findcol::yp#4 
Alias (byte) findcol::y#2 = (byte) findcol::y#3 (byte) findcol::y#4 
Alias (byte) findcol::diff#4 = (byte) findcol::diff#8 (byte) findcol::diff#5 
Alias (byte) findcol::mindiff#3 = (byte) findcol::mindiff#4 (byte) findcol::mindiff#5 
Alias (byte[256]) COLS#10 = (byte[256]) COLS#11 (byte[256]) COLS#12 
Alias (byte) findcol::i#6 = (byte) findcol::i#7 (byte) findcol::i#8 
Alias (byte) numpoints#27 = (byte) numpoints#28 (byte) numpoints#30 
Alias (byte[256]) XPOS#31 = (byte[256]) XPOS#32 (byte[256]) XPOS#36 
Alias (byte[256]) YPOS#28 = (byte[256]) YPOS#29 (byte[256]) YPOS#34 
Alias (byte) findcol::x#10 = (byte) findcol::x#11 (byte) findcol::x#12 
Alias (byte) findcol::mincol#5 = (byte) findcol::mincol#6 (byte) findcol::mincol#7 
Alias (byte) findcol::diff#2 = (byte~) findcol::$9 
Alias (byte) findcol::diff#3 = (byte~) findcol::$11 
Alias (byte) findcol::diff#6 = (byte) findcol::diff#7 (byte) findcol::mindiff#1 
Alias (byte[256]) COLS#2 = (byte[256]) COLS#9 
Alias (byte) findcol::i#3 = (byte) findcol::i#5 
Alias (byte) numpoints#24 = (byte) numpoints#25 
Alias (byte[256]) XPOS#25 = (byte[256]) XPOS#26 
Alias (byte[256]) YPOS#23 = (byte[256]) YPOS#24 
Alias (byte) findcol::x#8 = (byte) findcol::x#9 
Alias (byte) findcol::y#11 = (byte) findcol::y#12 
Alias (byte) findcol::mincol#1 = (byte~) findcol::$13 
Alias (byte) findcol::mincol#2 = (byte) findcol::mincol#3 (byte) findcol::return#3 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@BEGIN: from
  call main param-assignment
  to:@7
@7: from @BEGIN
  to:@END
main: from @BEGIN
  (byte*) COLORS#10 ← phi( @BEGIN/(word) 55296 )
  (byte) FILL#2 ← phi( @BEGIN/(byte) 230 )
  (byte*) SCREEN#1 ← phi( @BEGIN/(word) 1024 )
  (byte[256]) COLS#27 ← phi( @BEGIN/(word) 4608 )
  (byte[256]) YPOS#13 ← phi( @BEGIN/(word) 4352 )
  (byte[256]) XPOS#13 ← phi( @BEGIN/(word) 4096 )
  (byte) numpoints#22 ← phi( @BEGIN/(byte) 0 )
  call addpoint param-assignment
  to:main::@3
main::@3: from main
  call addpoint param-assignment
  to:main::@4
main::@4: from main::@3
  call addpoint param-assignment
  to:main::@5
main::@5: from main::@4
  call addpoint param-assignment
  to:main::@6
main::@6: from main::@5
  call addpoint param-assignment
  to:main::@7
main::@7: from main::@6
  call addpoint param-assignment
  to:main::@8
main::@8: from main::@7
  call initscreen param-assignment
  to:main::@9
main::@9: from main::@8
  to:main::@1
main::@1: from main::@11 main::@9
  (byte[256]) COLS#23 ← phi( main::@11/(byte[256]) COLS#23 main::@9/(byte[256]) COLS#27 )
  (byte[256]) YPOS#10 ← phi( main::@11/(byte[256]) YPOS#10 main::@9/(byte[256]) YPOS#13 )
  (byte) numpoints#1 ← phi( main::@11/(byte) numpoints#1 main::@9/(byte) numpoints#10 )
  (byte[256]) XPOS#1 ← phi( main::@11/(byte[256]) XPOS#1 main::@9/(byte[256]) XPOS#13 )
  (byte*) COLORS#1 ← phi( main::@11/(byte*) COLORS#1 main::@9/(byte*) COLORS#10 )
  call render param-assignment
  to:main::@10
main::@10: from main::@1
  call animate param-assignment
  to:main::@11
main::@11: from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: from main::@11
  return 
  to:@RETURN
animate: from main::@10
  (byte~) animate::$0 ← (byte[256]) XPOS#1 *idx (byte) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((byte[256]) XPOS#1 + (byte) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (byte[256]) XPOS#1 *idx (byte) 0
  (boolean~) animate::$3 ← (byte~) animate::$2 == (byte) 40
  if((boolean~) animate::$3) goto animate::@1
  to:animate::@2
animate::@1: from animate
  *((byte[256]) XPOS#1 + (byte) 0) ← (byte) 0
  to:animate::@2
animate::@2: from animate animate::@1
  (byte[256]) XPOS#10 ← phi( animate/(byte[256]) XPOS#1 animate::@1/(byte[256]) XPOS#1 )
  (byte[256]) YPOS#1 ← phi( animate/(byte[256]) YPOS#10 animate::@1/(byte[256]) YPOS#10 )
  (byte~) animate::$4 ← (byte[256]) YPOS#1 *idx (byte) 0
  (byte~) animate::$5 ← (byte~) animate::$4 + (byte) 1
  *((byte[256]) YPOS#1 + (byte) 0) ← (byte~) animate::$5
  (byte~) animate::$6 ← (byte[256]) YPOS#1 *idx (byte) 0
  (boolean~) animate::$7 ← (byte~) animate::$6 == (byte) 25
  if((boolean~) animate::$7) goto animate::@3
  to:animate::@4
animate::@3: from animate::@2
  *((byte[256]) YPOS#1 + (byte) 0) ← (byte) 0
  to:animate::@4
animate::@4: from animate::@2 animate::@3
  (byte[256]) YPOS#11 ← phi( animate::@2/(byte[256]) YPOS#1 animate::@3/(byte[256]) YPOS#1 )
  (byte[256]) XPOS#3 ← phi( animate::@2/(byte[256]) XPOS#10 animate::@3/(byte[256]) XPOS#10 )
  (byte~) animate::$8 ← (byte[256]) XPOS#3 *idx (byte) 1
  (byte~) animate::$9 ← (byte~) animate::$8 - (byte) 1
  *((byte[256]) XPOS#3 + (byte) 1) ← (byte~) animate::$9
  (byte~) animate::$10 ← (byte[256]) XPOS#3 *idx (byte) 1
  (boolean~) animate::$11 ← (byte~) animate::$10 == (byte) 255
  if((boolean~) animate::$11) goto animate::@5
  to:animate::@6
animate::@5: from animate::@4
  *((byte[256]) XPOS#3 + (byte) 1) ← (byte) 40
  to:animate::@6
animate::@6: from animate::@4 animate::@5
  (byte[256]) XPOS#22 ← phi( animate::@4/(byte[256]) XPOS#3 animate::@5/(byte[256]) XPOS#3 )
  (byte[256]) YPOS#3 ← phi( animate::@4/(byte[256]) YPOS#11 animate::@5/(byte[256]) YPOS#11 )
  (byte~) animate::$12 ← (byte[256]) YPOS#3 *idx (byte) 2
  (byte~) animate::$13 ← (byte~) animate::$12 + (byte) 1
  *((byte[256]) YPOS#3 + (byte) 2) ← (byte~) animate::$13
  (byte~) animate::$14 ← (byte[256]) YPOS#3 *idx (byte) 2
  (boolean~) animate::$15 ← (byte~) animate::$14 == (byte) 25
  if((boolean~) animate::$15) goto animate::@7
  to:animate::@8
animate::@7: from animate::@6
  *((byte[256]) YPOS#3 + (byte) 2) ← (byte) 0
  to:animate::@8
animate::@8: from animate::@6 animate::@7
  (byte[256]) XPOS#12 ← phi( animate::@6/(byte[256]) XPOS#22 animate::@7/(byte[256]) XPOS#22 )
  (byte[256]) YPOS#5 ← phi( animate::@6/(byte[256]) YPOS#3 animate::@7/(byte[256]) YPOS#3 )
  (byte~) animate::$16 ← (byte[256]) YPOS#5 *idx (byte) 3
  (byte~) animate::$17 ← (byte~) animate::$16 - (byte) 1
  *((byte[256]) YPOS#5 + (byte) 3) ← (byte~) animate::$17
  (byte~) animate::$18 ← (byte[256]) YPOS#5 *idx (byte) 3
  (boolean~) animate::$19 ← (byte~) animate::$18 == (byte) 255
  if((boolean~) animate::$19) goto animate::@9
  to:animate::@return
animate::@9: from animate::@8
  *((byte[256]) YPOS#5 + (byte) 3) ← (byte) 25
  (byte~) animate::$20 ← (byte[256]) XPOS#12 *idx (byte) 3
  (byte~) animate::$21 ← (byte~) animate::$20 + (byte) 7
  *((byte[256]) XPOS#12 + (byte) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (byte[256]) XPOS#12 *idx (byte) 3
  (boolean~) animate::$23 ← (byte~) animate::$22 >= (byte) 40
  if((boolean~) animate::$23) goto animate::@11
  to:animate::@return
animate::@11: from animate::@9
  (byte~) animate::$24 ← (byte[256]) XPOS#12 *idx (byte) 3
  (byte~) animate::$25 ← (byte~) animate::$24 - (byte) 40
  *((byte[256]) XPOS#12 + (byte) 3) ← (byte~) animate::$25
  to:animate::@return
animate::@return: from animate::@11 animate::@8 animate::@9
  return 
  to:@RETURN
addpoint: from main main::@3 main::@4 main::@5 main::@6 main::@7
  (byte[256]) COLS#1 ← phi( main/(byte[256]) COLS#27 main::@3/(byte[256]) COLS#27 main::@4/(byte[256]) COLS#27 main::@5/(byte[256]) COLS#27 main::@6/(byte[256]) COLS#27 main::@7/(byte[256]) COLS#27 )
  (byte) addpoint::c#6 ← phi( main/(byte) 1 main::@3/(byte) 2 main::@4/(byte) 3 main::@5/(byte) 4 main::@6/(byte) 5 main::@7/(byte) 7 )
  (byte[256]) YPOS#7 ← phi( main/(byte[256]) YPOS#13 main::@3/(byte[256]) YPOS#13 main::@4/(byte[256]) YPOS#13 main::@5/(byte[256]) YPOS#13 main::@6/(byte[256]) YPOS#13 main::@7/(byte[256]) YPOS#13 )
  (byte) addpoint::y#6 ← phi( main/(byte) 5 main::@3/(byte) 8 main::@4/(byte) 14 main::@5/(byte) 2 main::@6/(byte) 17 main::@7/(byte) 22 )
  (byte) numpoints#19 ← phi( main/(byte) numpoints#22 main::@3/(byte) numpoints#10 main::@4/(byte) numpoints#10 main::@5/(byte) numpoints#10 main::@6/(byte) numpoints#10 main::@7/(byte) numpoints#10 )
  (byte[256]) XPOS#7 ← phi( main/(byte[256]) XPOS#13 main::@3/(byte[256]) XPOS#13 main::@4/(byte[256]) XPOS#13 main::@5/(byte[256]) XPOS#13 main::@6/(byte[256]) XPOS#13 main::@7/(byte[256]) XPOS#13 )
  (byte) addpoint::x#6 ← phi( main/(byte) 5 main::@3/(byte) 15 main::@4/(byte) 6 main::@5/(byte) 34 main::@6/(byte) 21 main::@7/(byte) 31 )
  *((byte[256]) XPOS#7 + (byte) numpoints#19) ← (byte) addpoint::x#6
  *((byte[256]) YPOS#7 + (byte) numpoints#19) ← (byte) addpoint::y#6
  *((byte[256]) COLS#1 + (byte) numpoints#19) ← (byte) addpoint::c#6
  (byte) numpoints#10 ← ++ (byte) numpoints#19
  to:addpoint::@return
addpoint::@return: from addpoint
  return 
  to:@RETURN
initscreen: from main::@8
  (byte*) initscreen::screen#0 ← (byte*) SCREEN#1
  to:initscreen::@1
initscreen::@1: from initscreen initscreen::@1
  (byte*) initscreen::screen#2 ← phi( initscreen/(byte*) initscreen::screen#0 initscreen::@1/(byte*) initscreen::screen#1 )
  (byte) FILL#1 ← phi( initscreen/(byte) FILL#2 initscreen::@1/(byte) FILL#1 )
  *((byte*) initscreen::screen#2) ← (byte) FILL#1
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  (boolean~) initscreen::$0 ← (byte*) initscreen::screen#1 < (word) 2048
  if((boolean~) initscreen::$0) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: from initscreen::@1
  return 
  to:@RETURN
render: from main::@1
  (byte*) render::colline#0 ← (byte*) COLORS#1
  to:render::@1
render::@1: from render render::@3
  (byte) numpoints#39 ← phi( render/(byte) numpoints#1 render::@3/(byte) numpoints#37 )
  (byte[256]) COLS#21 ← phi( render/(byte[256]) COLS#23 render::@3/(byte[256]) COLS#18 )
  (byte[256]) YPOS#26 ← phi( render/(byte[256]) YPOS#10 render::@3/(byte[256]) YPOS#19 )
  (byte[256]) XPOS#29 ← phi( render/(byte[256]) XPOS#1 render::@3/(byte[256]) XPOS#19 )
  (byte*) render::colline#5 ← phi( render/(byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#4 ← phi( render/(byte) 0 render::@3/(byte) render::y#1 )
  to:render::@2
render::@2: from render::@1 render::@5
  (byte) numpoints#37 ← phi( render::@1/(byte) numpoints#39 render::@5/(byte) numpoints#37 )
  (byte[256]) COLS#18 ← phi( render::@1/(byte[256]) COLS#21 render::@5/(byte[256]) COLS#18 )
  (byte[256]) YPOS#19 ← phi( render::@1/(byte[256]) YPOS#26 render::@5/(byte[256]) YPOS#19 )
  (byte[256]) XPOS#19 ← phi( render::@1/(byte[256]) XPOS#29 render::@5/(byte[256]) XPOS#19 )
  (byte*) render::colline#2 ← phi( render::@1/(byte*) render::colline#5 render::@5/(byte*) render::colline#2 )
  (byte) render::y#2 ← phi( render::@1/(byte) render::y#4 render::@5/(byte) render::y#2 )
  (byte) render::x#2 ← phi( render::@1/(byte) 0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  to:render::@5
render::@5: from render::@2
  (byte) render::col#0 ← (byte) findcol::return#0
  *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#2
  (boolean~) render::$1 ← (byte) render::x#1 < (byte) 40
  if((boolean~) render::$1) goto render::@2
  to:render::@3
render::@3: from render::@5
  (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40
  (byte) render::y#1 ← ++ (byte) render::y#2
  (boolean~) render::$3 ← (byte) render::y#1 < (byte) 25
  if((boolean~) render::$3) goto render::@1
  to:render::@return
render::@return: from render::@3
  return 
  to:@RETURN
findcol: from render::@2
  to:findcol::@1
findcol::@1: from findcol findcol::@13
  (byte) findcol::mincol#11 ← phi( findcol/(byte) 0 findcol::@13/(byte) findcol::mincol#2 )
  (byte) numpoints#35 ← phi( findcol/(byte) numpoints#37 findcol::@13/(byte) numpoints#21 )
  (byte[256]) COLS#16 ← phi( findcol/(byte[256]) COLS#18 findcol::@13/(byte[256]) COLS#19 )
  (byte) findcol::mindiff#10 ← phi( findcol/(byte) 255 findcol::@13/(byte) findcol::mindiff#11 )
  (byte) findcol::y#1 ← phi( findcol/(byte) findcol::y#0 findcol::@13/(byte) findcol::y#9 )
  (byte) findcol::x#1 ← phi( findcol/(byte) findcol::x#0 findcol::@13/(byte) findcol::x#6 )
  (byte[256]) YPOS#39 ← phi( findcol/(byte[256]) YPOS#19 findcol::@13/(byte[256]) YPOS#20 )
  (byte) findcol::i#12 ← phi( findcol/(byte) 0 findcol::@13/(byte) findcol::i#1 )
  (byte[256]) XPOS#40 ← phi( findcol/(byte[256]) XPOS#19 findcol::@13/(byte[256]) XPOS#20 )
  (byte) findcol::xp#0 ← (byte[256]) XPOS#40 *idx (byte) findcol::i#12
  (byte) findcol::yp#0 ← (byte[256]) YPOS#39 *idx (byte) findcol::i#12
  (boolean~) findcol::$2 ← (byte) findcol::x#1 == (byte) findcol::xp#0
  if((boolean~) findcol::$2) goto findcol::@2
  to:findcol::@3
findcol::@2: from findcol::@1
  (boolean~) findcol::$3 ← (byte) findcol::y#1 == (byte) findcol::yp#0
  if((boolean~) findcol::$3) goto findcol::@4
  to:findcol::@3
findcol::@3: from findcol::@1 findcol::@2
  (byte) findcol::mincol#10 ← phi( findcol::@1/(byte) findcol::mincol#11 findcol::@2/(byte) findcol::mincol#11 )
  (byte[256]) YPOS#36 ← phi( findcol::@1/(byte[256]) YPOS#39 findcol::@2/(byte[256]) YPOS#39 )
  (byte[256]) XPOS#37 ← phi( findcol::@1/(byte[256]) XPOS#40 findcol::@2/(byte[256]) XPOS#40 )
  (byte) numpoints#32 ← phi( findcol::@1/(byte) numpoints#35 findcol::@2/(byte) numpoints#35 )
  (byte) findcol::i#10 ← phi( findcol::@1/(byte) findcol::i#12 findcol::@2/(byte) findcol::i#12 )
  (byte[256]) COLS#13 ← phi( findcol::@1/(byte[256]) COLS#16 findcol::@2/(byte[256]) COLS#16 )
  (byte) findcol::mindiff#6 ← phi( findcol::@1/(byte) findcol::mindiff#10 findcol::@2/(byte) findcol::mindiff#10 )
  (byte) findcol::yp#5 ← phi( findcol::@1/(byte) findcol::yp#0 findcol::@2/(byte) findcol::yp#0 )
  (byte) findcol::y#10 ← phi( findcol::@1/(byte) findcol::y#1 findcol::@2/(byte) findcol::y#1 )
  (byte) findcol::xp#1 ← phi( findcol::@1/(byte) findcol::xp#0 findcol::@2/(byte) findcol::xp#0 )
  (byte) findcol::x#2 ← phi( findcol::@1/(byte) findcol::x#1 findcol::@2/(byte) findcol::x#1 )
  (boolean~) findcol::$4 ← (byte) findcol::x#2 < (byte) findcol::xp#1
  if((boolean~) findcol::$4) goto findcol::@6
  to:findcol::@7
findcol::@4: from findcol::@2
  to:findcol::@return
findcol::@return: from findcol::@27 findcol::@4
  (byte) findcol::return#0 ← phi( findcol::@27/(byte) findcol::mincol#2 findcol::@4/(byte) 0 )
  return 
  to:@RETURN
findcol::@6: from findcol::@3
  (byte) findcol::diff#0 ← (byte) findcol::xp#1 - (byte) findcol::x#2
  to:findcol::@8
findcol::@7: from findcol::@3
  (byte) findcol::diff#1 ← (byte) findcol::x#2 - (byte) findcol::xp#1
  to:findcol::@8
findcol::@8: from findcol::@6 findcol::@7
  (byte) findcol::mincol#5 ← phi( findcol::@6/(byte) findcol::mincol#10 findcol::@7/(byte) findcol::mincol#10 )
  (byte) findcol::x#10 ← phi( findcol::@6/(byte) findcol::x#2 findcol::@7/(byte) findcol::x#2 )
  (byte[256]) YPOS#28 ← phi( findcol::@6/(byte[256]) YPOS#36 findcol::@7/(byte[256]) YPOS#36 )
  (byte[256]) XPOS#31 ← phi( findcol::@6/(byte[256]) XPOS#37 findcol::@7/(byte[256]) XPOS#37 )
  (byte) numpoints#27 ← phi( findcol::@6/(byte) numpoints#32 findcol::@7/(byte) numpoints#32 )
  (byte) findcol::i#6 ← phi( findcol::@6/(byte) findcol::i#10 findcol::@7/(byte) findcol::i#10 )
  (byte[256]) COLS#10 ← phi( findcol::@6/(byte[256]) COLS#13 findcol::@7/(byte[256]) COLS#13 )
  (byte) findcol::mindiff#3 ← phi( findcol::@6/(byte) findcol::mindiff#6 findcol::@7/(byte) findcol::mindiff#6 )
  (byte) findcol::diff#4 ← phi( findcol::@6/(byte) findcol::diff#0 findcol::@7/(byte) findcol::diff#1 )
  (byte) findcol::yp#2 ← phi( findcol::@6/(byte) findcol::yp#5 findcol::@7/(byte) findcol::yp#5 )
  (byte) findcol::y#2 ← phi( findcol::@6/(byte) findcol::y#10 findcol::@7/(byte) findcol::y#10 )
  (boolean~) findcol::$7 ← (byte) findcol::y#2 < (byte) findcol::yp#2
  if((boolean~) findcol::$7) goto findcol::@9
  to:findcol::@10
findcol::@9: from findcol::@8
  (byte~) findcol::$8 ← (byte) findcol::yp#2 - (byte) findcol::y#2
  (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$8
  to:findcol::@11
findcol::@10: from findcol::@8
  (byte~) findcol::$10 ← (byte) findcol::y#2 - (byte) findcol::yp#2
  (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$10
  to:findcol::@11
findcol::@11: from findcol::@10 findcol::@9
  (byte) findcol::y#11 ← phi( findcol::@10/(byte) findcol::y#2 findcol::@9/(byte) findcol::y#2 )
  (byte) findcol::mincol#4 ← phi( findcol::@10/(byte) findcol::mincol#5 findcol::@9/(byte) findcol::mincol#5 )
  (byte) findcol::x#8 ← phi( findcol::@10/(byte) findcol::x#10 findcol::@9/(byte) findcol::x#10 )
  (byte[256]) YPOS#23 ← phi( findcol::@10/(byte[256]) YPOS#28 findcol::@9/(byte[256]) YPOS#28 )
  (byte[256]) XPOS#25 ← phi( findcol::@10/(byte[256]) XPOS#31 findcol::@9/(byte[256]) XPOS#31 )
  (byte) numpoints#24 ← phi( findcol::@10/(byte) numpoints#27 findcol::@9/(byte) numpoints#27 )
  (byte) findcol::i#3 ← phi( findcol::@10/(byte) findcol::i#6 findcol::@9/(byte) findcol::i#6 )
  (byte[256]) COLS#2 ← phi( findcol::@10/(byte[256]) COLS#10 findcol::@9/(byte[256]) COLS#10 )
  (byte) findcol::mindiff#2 ← phi( findcol::@10/(byte) findcol::mindiff#3 findcol::@9/(byte) findcol::mindiff#3 )
  (byte) findcol::diff#6 ← phi( findcol::@10/(byte) findcol::diff#3 findcol::@9/(byte) findcol::diff#2 )
  (boolean~) findcol::$12 ← (byte) findcol::diff#6 < (byte) findcol::mindiff#2
  if((boolean~) findcol::$12) goto findcol::@12
  to:findcol::@13
findcol::@12: from findcol::@11
  (byte) findcol::mincol#1 ← (byte[256]) COLS#2 *idx (byte) findcol::i#3
  to:findcol::@13
findcol::@13: from findcol::@11 findcol::@12
  (byte[256]) COLS#19 ← phi( findcol::@11/(byte[256]) COLS#2 findcol::@12/(byte[256]) COLS#2 )
  (byte) findcol::mindiff#11 ← phi( findcol::@11/(byte) findcol::mindiff#2 findcol::@12/(byte) findcol::diff#6 )
  (byte) findcol::y#9 ← phi( findcol::@11/(byte) findcol::y#11 findcol::@12/(byte) findcol::y#11 )
  (byte) findcol::mincol#2 ← phi( findcol::@11/(byte) findcol::mincol#4 findcol::@12/(byte) findcol::mincol#1 )
  (byte) findcol::x#6 ← phi( findcol::@11/(byte) findcol::x#8 findcol::@12/(byte) findcol::x#8 )
  (byte[256]) YPOS#20 ← phi( findcol::@11/(byte[256]) YPOS#23 findcol::@12/(byte[256]) YPOS#23 )
  (byte[256]) XPOS#20 ← phi( findcol::@11/(byte[256]) XPOS#25 findcol::@12/(byte[256]) XPOS#25 )
  (byte) numpoints#21 ← phi( findcol::@11/(byte) numpoints#24 findcol::@12/(byte) numpoints#24 )
  (byte) findcol::i#4 ← phi( findcol::@11/(byte) findcol::i#3 findcol::@12/(byte) findcol::i#3 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#4
  (boolean~) findcol::$14 ← (byte) findcol::i#1 < (byte) numpoints#21
  if((boolean~) findcol::$14) goto findcol::@1
  to:findcol::@27
findcol::@27: from findcol::@13
  to:findcol::@return
@END: from @7

Redundant Phi (byte) numpoints#22 (byte) 0
Redundant Phi (byte[256]) XPOS#13 (word) 4096
Redundant Phi (byte[256]) YPOS#13 (word) 4352
Redundant Phi (byte[256]) COLS#27 (word) 4608
Redundant Phi (byte*) SCREEN#1 (word) 1024
Redundant Phi (byte) FILL#2 (byte) 230
Redundant Phi (byte*) COLORS#10 (word) 55296
Redundant Phi (byte[256]) YPOS#1 (byte[256]) YPOS#10
Redundant Phi (byte[256]) XPOS#10 (byte[256]) XPOS#1
Redundant Phi (byte[256]) XPOS#3 (byte[256]) XPOS#10
Redundant Phi (byte[256]) YPOS#11 (byte[256]) YPOS#1
Redundant Phi (byte[256]) YPOS#3 (byte[256]) YPOS#11
Redundant Phi (byte[256]) XPOS#22 (byte[256]) XPOS#3
Redundant Phi (byte[256]) YPOS#5 (byte[256]) YPOS#3
Redundant Phi (byte[256]) XPOS#12 (byte[256]) XPOS#22
Redundant Phi (byte[256]) XPOS#7 (byte[256]) XPOS#13
Redundant Phi (byte[256]) YPOS#7 (byte[256]) YPOS#13
Redundant Phi (byte[256]) COLS#1 (byte[256]) COLS#27
Redundant Phi (byte) findcol::x#2 (byte) findcol::x#1
Redundant Phi (byte) findcol::xp#1 (byte) findcol::xp#0
Redundant Phi (byte) findcol::y#10 (byte) findcol::y#1
Redundant Phi (byte) findcol::yp#5 (byte) findcol::yp#0
Redundant Phi (byte) findcol::mindiff#6 (byte) findcol::mindiff#10
Redundant Phi (byte[256]) COLS#13 (byte[256]) COLS#16
Redundant Phi (byte) findcol::i#10 (byte) findcol::i#12
Redundant Phi (byte) numpoints#32 (byte) numpoints#35
Redundant Phi (byte[256]) XPOS#37 (byte[256]) XPOS#40
Redundant Phi (byte[256]) YPOS#36 (byte[256]) YPOS#39
Redundant Phi (byte) findcol::mincol#10 (byte) findcol::mincol#11
Redundant Phi (byte) findcol::y#2 (byte) findcol::y#10
Redundant Phi (byte) findcol::yp#2 (byte) findcol::yp#5
Redundant Phi (byte) findcol::mindiff#3 (byte) findcol::mindiff#6
Redundant Phi (byte[256]) COLS#10 (byte[256]) COLS#13
Redundant Phi (byte) findcol::i#6 (byte) findcol::i#10
Redundant Phi (byte) numpoints#27 (byte) numpoints#32
Redundant Phi (byte[256]) XPOS#31 (byte[256]) XPOS#37
Redundant Phi (byte[256]) YPOS#28 (byte[256]) YPOS#36
Redundant Phi (byte) findcol::x#10 (byte) findcol::x#2
Redundant Phi (byte) findcol::mincol#5 (byte) findcol::mincol#10
Redundant Phi (byte) findcol::mindiff#2 (byte) findcol::mindiff#3
Redundant Phi (byte[256]) COLS#2 (byte[256]) COLS#10
Redundant Phi (byte) findcol::i#3 (byte) findcol::i#6
Redundant Phi (byte) numpoints#24 (byte) numpoints#27
Redundant Phi (byte[256]) XPOS#25 (byte[256]) XPOS#31
Redundant Phi (byte[256]) YPOS#23 (byte[256]) YPOS#28
Redundant Phi (byte) findcol::x#8 (byte) findcol::x#10
Redundant Phi (byte) findcol::mincol#4 (byte) findcol::mincol#5
Redundant Phi (byte) findcol::y#11 (byte) findcol::y#2
Redundant Phi (byte) findcol::i#4 (byte) findcol::i#3
Redundant Phi (byte) numpoints#21 (byte) numpoints#24
Redundant Phi (byte[256]) XPOS#20 (byte[256]) XPOS#25
Redundant Phi (byte[256]) YPOS#20 (byte[256]) YPOS#23
Redundant Phi (byte) findcol::x#6 (byte) findcol::x#8
Redundant Phi (byte) findcol::y#9 (byte) findcol::y#11
Redundant Phi (byte[256]) COLS#19 (byte[256]) COLS#2
Succesful SSA optimization Pass2RedundantPhiElimination
CONTROL FLOW GRAPH
@BEGIN: from
  call main param-assignment
  to:@7
@7: from @BEGIN
  to:@END
main: from @BEGIN
  call addpoint param-assignment
  to:main::@3
main::@3: from main
  call addpoint param-assignment
  to:main::@4
main::@4: from main::@3
  call addpoint param-assignment
  to:main::@5
main::@5: from main::@4
  call addpoint param-assignment
  to:main::@6
main::@6: from main::@5
  call addpoint param-assignment
  to:main::@7
main::@7: from main::@6
  call addpoint param-assignment
  to:main::@8
main::@8: from main::@7
  call initscreen param-assignment
  to:main::@9
main::@9: from main::@8
  to:main::@1
main::@1: from main::@11 main::@9
  (byte[256]) COLS#23 ← phi( main::@11/(byte[256]) COLS#23 main::@9/(word) 4608 )
  (byte[256]) YPOS#10 ← phi( main::@11/(byte[256]) YPOS#10 main::@9/(word) 4352 )
  (byte) numpoints#1 ← phi( main::@11/(byte) numpoints#1 main::@9/(byte) numpoints#10 )
  (byte[256]) XPOS#1 ← phi( main::@11/(byte[256]) XPOS#1 main::@9/(word) 4096 )
  (byte*) COLORS#1 ← phi( main::@11/(byte*) COLORS#1 main::@9/(word) 55296 )
  call render param-assignment
  to:main::@10
main::@10: from main::@1
  call animate param-assignment
  to:main::@11
main::@11: from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: from main::@11
  return 
  to:@RETURN
animate: from main::@10
  (byte~) animate::$0 ← (byte[256]) XPOS#1 *idx (byte) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((byte[256]) XPOS#1 + (byte) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (byte[256]) XPOS#1 *idx (byte) 0
  (boolean~) animate::$3 ← (byte~) animate::$2 == (byte) 40
  if((boolean~) animate::$3) goto animate::@1
  to:animate::@2
animate::@1: from animate
  *((byte[256]) XPOS#1 + (byte) 0) ← (byte) 0
  to:animate::@2
animate::@2: from animate animate::@1
  (byte~) animate::$4 ← (byte[256]) YPOS#10 *idx (byte) 0
  (byte~) animate::$5 ← (byte~) animate::$4 + (byte) 1
  *((byte[256]) YPOS#10 + (byte) 0) ← (byte~) animate::$5
  (byte~) animate::$6 ← (byte[256]) YPOS#10 *idx (byte) 0
  (boolean~) animate::$7 ← (byte~) animate::$6 == (byte) 25
  if((boolean~) animate::$7) goto animate::@3
  to:animate::@4
animate::@3: from animate::@2
  *((byte[256]) YPOS#10 + (byte) 0) ← (byte) 0
  to:animate::@4
animate::@4: from animate::@2 animate::@3
  (byte~) animate::$8 ← (byte[256]) XPOS#1 *idx (byte) 1
  (byte~) animate::$9 ← (byte~) animate::$8 - (byte) 1
  *((byte[256]) XPOS#1 + (byte) 1) ← (byte~) animate::$9
  (byte~) animate::$10 ← (byte[256]) XPOS#1 *idx (byte) 1
  (boolean~) animate::$11 ← (byte~) animate::$10 == (byte) 255
  if((boolean~) animate::$11) goto animate::@5
  to:animate::@6
animate::@5: from animate::@4
  *((byte[256]) XPOS#1 + (byte) 1) ← (byte) 40
  to:animate::@6
animate::@6: from animate::@4 animate::@5
  (byte~) animate::$12 ← (byte[256]) YPOS#10 *idx (byte) 2
  (byte~) animate::$13 ← (byte~) animate::$12 + (byte) 1
  *((byte[256]) YPOS#10 + (byte) 2) ← (byte~) animate::$13
  (byte~) animate::$14 ← (byte[256]) YPOS#10 *idx (byte) 2
  (boolean~) animate::$15 ← (byte~) animate::$14 == (byte) 25
  if((boolean~) animate::$15) goto animate::@7
  to:animate::@8
animate::@7: from animate::@6
  *((byte[256]) YPOS#10 + (byte) 2) ← (byte) 0
  to:animate::@8
animate::@8: from animate::@6 animate::@7
  (byte~) animate::$16 ← (byte[256]) YPOS#10 *idx (byte) 3
  (byte~) animate::$17 ← (byte~) animate::$16 - (byte) 1
  *((byte[256]) YPOS#10 + (byte) 3) ← (byte~) animate::$17
  (byte~) animate::$18 ← (byte[256]) YPOS#10 *idx (byte) 3
  (boolean~) animate::$19 ← (byte~) animate::$18 == (byte) 255
  if((boolean~) animate::$19) goto animate::@9
  to:animate::@return
animate::@9: from animate::@8
  *((byte[256]) YPOS#10 + (byte) 3) ← (byte) 25
  (byte~) animate::$20 ← (byte[256]) XPOS#1 *idx (byte) 3
  (byte~) animate::$21 ← (byte~) animate::$20 + (byte) 7
  *((byte[256]) XPOS#1 + (byte) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (byte[256]) XPOS#1 *idx (byte) 3
  (boolean~) animate::$23 ← (byte~) animate::$22 >= (byte) 40
  if((boolean~) animate::$23) goto animate::@11
  to:animate::@return
animate::@11: from animate::@9
  (byte~) animate::$24 ← (byte[256]) XPOS#1 *idx (byte) 3
  (byte~) animate::$25 ← (byte~) animate::$24 - (byte) 40
  *((byte[256]) XPOS#1 + (byte) 3) ← (byte~) animate::$25
  to:animate::@return
animate::@return: from animate::@11 animate::@8 animate::@9
  return 
  to:@RETURN
addpoint: from main main::@3 main::@4 main::@5 main::@6 main::@7
  (byte) addpoint::c#6 ← phi( main/(byte) 1 main::@3/(byte) 2 main::@4/(byte) 3 main::@5/(byte) 4 main::@6/(byte) 5 main::@7/(byte) 7 )
  (byte) addpoint::y#6 ← phi( main/(byte) 5 main::@3/(byte) 8 main::@4/(byte) 14 main::@5/(byte) 2 main::@6/(byte) 17 main::@7/(byte) 22 )
  (byte) numpoints#19 ← phi( main/(byte) 0 main::@3/(byte) numpoints#10 main::@4/(byte) numpoints#10 main::@5/(byte) numpoints#10 main::@6/(byte) numpoints#10 main::@7/(byte) numpoints#10 )
  (byte) addpoint::x#6 ← phi( main/(byte) 5 main::@3/(byte) 15 main::@4/(byte) 6 main::@5/(byte) 34 main::@6/(byte) 21 main::@7/(byte) 31 )
  *((word) 4096 + (byte) numpoints#19) ← (byte) addpoint::x#6
  *((word) 4352 + (byte) numpoints#19) ← (byte) addpoint::y#6
  *((word) 4608 + (byte) numpoints#19) ← (byte) addpoint::c#6
  (byte) numpoints#10 ← ++ (byte) numpoints#19
  to:addpoint::@return
addpoint::@return: from addpoint
  return 
  to:@RETURN
initscreen: from main::@8
  (byte*) initscreen::screen#0 ← (word) 1024
  to:initscreen::@1
initscreen::@1: from initscreen initscreen::@1
  (byte*) initscreen::screen#2 ← phi( initscreen/(byte*) initscreen::screen#0 initscreen::@1/(byte*) initscreen::screen#1 )
  (byte) FILL#1 ← phi( initscreen/(byte) 230 initscreen::@1/(byte) FILL#1 )
  *((byte*) initscreen::screen#2) ← (byte) FILL#1
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  (boolean~) initscreen::$0 ← (byte*) initscreen::screen#1 < (word) 2048
  if((boolean~) initscreen::$0) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: from initscreen::@1
  return 
  to:@RETURN
render: from main::@1
  (byte*) render::colline#0 ← (byte*) COLORS#1
  to:render::@1
render::@1: from render render::@3
  (byte) numpoints#39 ← phi( render/(byte) numpoints#1 render::@3/(byte) numpoints#37 )
  (byte[256]) COLS#21 ← phi( render/(byte[256]) COLS#23 render::@3/(byte[256]) COLS#18 )
  (byte[256]) YPOS#26 ← phi( render/(byte[256]) YPOS#10 render::@3/(byte[256]) YPOS#19 )
  (byte[256]) XPOS#29 ← phi( render/(byte[256]) XPOS#1 render::@3/(byte[256]) XPOS#19 )
  (byte*) render::colline#5 ← phi( render/(byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#4 ← phi( render/(byte) 0 render::@3/(byte) render::y#1 )
  to:render::@2
render::@2: from render::@1 render::@5
  (byte) numpoints#37 ← phi( render::@1/(byte) numpoints#39 render::@5/(byte) numpoints#37 )
  (byte[256]) COLS#18 ← phi( render::@1/(byte[256]) COLS#21 render::@5/(byte[256]) COLS#18 )
  (byte[256]) YPOS#19 ← phi( render::@1/(byte[256]) YPOS#26 render::@5/(byte[256]) YPOS#19 )
  (byte[256]) XPOS#19 ← phi( render::@1/(byte[256]) XPOS#29 render::@5/(byte[256]) XPOS#19 )
  (byte*) render::colline#2 ← phi( render::@1/(byte*) render::colline#5 render::@5/(byte*) render::colline#2 )
  (byte) render::y#2 ← phi( render::@1/(byte) render::y#4 render::@5/(byte) render::y#2 )
  (byte) render::x#2 ← phi( render::@1/(byte) 0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  to:render::@5
render::@5: from render::@2
  (byte) render::col#0 ← (byte) findcol::return#0
  *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#2
  (boolean~) render::$1 ← (byte) render::x#1 < (byte) 40
  if((boolean~) render::$1) goto render::@2
  to:render::@3
render::@3: from render::@5
  (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40
  (byte) render::y#1 ← ++ (byte) render::y#2
  (boolean~) render::$3 ← (byte) render::y#1 < (byte) 25
  if((boolean~) render::$3) goto render::@1
  to:render::@return
render::@return: from render::@3
  return 
  to:@RETURN
findcol: from render::@2
  to:findcol::@1
findcol::@1: from findcol findcol::@13
  (byte) findcol::mincol#11 ← phi( findcol/(byte) 0 findcol::@13/(byte) findcol::mincol#2 )
  (byte) numpoints#35 ← phi( findcol/(byte) numpoints#37 findcol::@13/(byte) numpoints#35 )
  (byte[256]) COLS#16 ← phi( findcol/(byte[256]) COLS#18 findcol::@13/(byte[256]) COLS#16 )
  (byte) findcol::mindiff#10 ← phi( findcol/(byte) 255 findcol::@13/(byte) findcol::mindiff#11 )
  (byte) findcol::y#1 ← phi( findcol/(byte) findcol::y#0 findcol::@13/(byte) findcol::y#1 )
  (byte) findcol::x#1 ← phi( findcol/(byte) findcol::x#0 findcol::@13/(byte) findcol::x#1 )
  (byte[256]) YPOS#39 ← phi( findcol/(byte[256]) YPOS#19 findcol::@13/(byte[256]) YPOS#39 )
  (byte) findcol::i#12 ← phi( findcol/(byte) 0 findcol::@13/(byte) findcol::i#1 )
  (byte[256]) XPOS#40 ← phi( findcol/(byte[256]) XPOS#19 findcol::@13/(byte[256]) XPOS#40 )
  (byte) findcol::xp#0 ← (byte[256]) XPOS#40 *idx (byte) findcol::i#12
  (byte) findcol::yp#0 ← (byte[256]) YPOS#39 *idx (byte) findcol::i#12
  (boolean~) findcol::$2 ← (byte) findcol::x#1 == (byte) findcol::xp#0
  if((boolean~) findcol::$2) goto findcol::@2
  to:findcol::@3
findcol::@2: from findcol::@1
  (boolean~) findcol::$3 ← (byte) findcol::y#1 == (byte) findcol::yp#0
  if((boolean~) findcol::$3) goto findcol::@4
  to:findcol::@3
findcol::@3: from findcol::@1 findcol::@2
  (boolean~) findcol::$4 ← (byte) findcol::x#1 < (byte) findcol::xp#0
  if((boolean~) findcol::$4) goto findcol::@6
  to:findcol::@7
findcol::@4: from findcol::@2
  to:findcol::@return
findcol::@return: from findcol::@27 findcol::@4
  (byte) findcol::return#0 ← phi( findcol::@27/(byte) findcol::mincol#2 findcol::@4/(byte) 0 )
  return 
  to:@RETURN
findcol::@6: from findcol::@3
  (byte) findcol::diff#0 ← (byte) findcol::xp#0 - (byte) findcol::x#1
  to:findcol::@8
findcol::@7: from findcol::@3
  (byte) findcol::diff#1 ← (byte) findcol::x#1 - (byte) findcol::xp#0
  to:findcol::@8
findcol::@8: from findcol::@6 findcol::@7
  (byte) findcol::diff#4 ← phi( findcol::@6/(byte) findcol::diff#0 findcol::@7/(byte) findcol::diff#1 )
  (boolean~) findcol::$7 ← (byte) findcol::y#1 < (byte) findcol::yp#0
  if((boolean~) findcol::$7) goto findcol::@9
  to:findcol::@10
findcol::@9: from findcol::@8
  (byte~) findcol::$8 ← (byte) findcol::yp#0 - (byte) findcol::y#1
  (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$8
  to:findcol::@11
findcol::@10: from findcol::@8
  (byte~) findcol::$10 ← (byte) findcol::y#1 - (byte) findcol::yp#0
  (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$10
  to:findcol::@11
findcol::@11: from findcol::@10 findcol::@9
  (byte) findcol::diff#6 ← phi( findcol::@10/(byte) findcol::diff#3 findcol::@9/(byte) findcol::diff#2 )
  (boolean~) findcol::$12 ← (byte) findcol::diff#6 < (byte) findcol::mindiff#10
  if((boolean~) findcol::$12) goto findcol::@12
  to:findcol::@13
findcol::@12: from findcol::@11
  (byte) findcol::mincol#1 ← (byte[256]) COLS#16 *idx (byte) findcol::i#12
  to:findcol::@13
findcol::@13: from findcol::@11 findcol::@12
  (byte) findcol::mindiff#11 ← phi( findcol::@11/(byte) findcol::mindiff#10 findcol::@12/(byte) findcol::diff#6 )
  (byte) findcol::mincol#2 ← phi( findcol::@11/(byte) findcol::mincol#11 findcol::@12/(byte) findcol::mincol#1 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#12
  (boolean~) findcol::$14 ← (byte) findcol::i#1 < (byte) numpoints#35
  if((boolean~) findcol::$14) goto findcol::@1
  to:findcol::@27
findcol::@27: from findcol::@13
  to:findcol::@return
@END: from @7

Self Phi Eliminated (byte*) COLORS#1
Self Phi Eliminated (byte[256]) XPOS#1
Self Phi Eliminated (byte) numpoints#1
Self Phi Eliminated (byte[256]) YPOS#10
Self Phi Eliminated (byte[256]) COLS#23
Self Phi Eliminated (byte) FILL#1
Self Phi Eliminated (byte) render::y#2
Self Phi Eliminated (byte*) render::colline#2
Self Phi Eliminated (byte[256]) XPOS#19
Self Phi Eliminated (byte[256]) YPOS#19
Self Phi Eliminated (byte[256]) COLS#18
Self Phi Eliminated (byte) numpoints#37
Self Phi Eliminated (byte[256]) XPOS#40
Self Phi Eliminated (byte[256]) YPOS#39
Self Phi Eliminated (byte) findcol::x#1
Self Phi Eliminated (byte) findcol::y#1
Self Phi Eliminated (byte[256]) COLS#16
Self Phi Eliminated (byte) numpoints#35
Succesful SSA optimization Pass2SelfPhiElimination
CONTROL FLOW GRAPH
@BEGIN: from
  call main param-assignment
  to:@7
@7: from @BEGIN
  to:@END
main: from @BEGIN
  call addpoint param-assignment
  to:main::@3
main::@3: from main
  call addpoint param-assignment
  to:main::@4
main::@4: from main::@3
  call addpoint param-assignment
  to:main::@5
main::@5: from main::@4
  call addpoint param-assignment
  to:main::@6
main::@6: from main::@5
  call addpoint param-assignment
  to:main::@7
main::@7: from main::@6
  call addpoint param-assignment
  to:main::@8
main::@8: from main::@7
  call initscreen param-assignment
  to:main::@9
main::@9: from main::@8
  to:main::@1
main::@1: from main::@11 main::@9
  (byte[256]) COLS#23 ← phi( main::@9/(word) 4608 )
  (byte[256]) YPOS#10 ← phi( main::@9/(word) 4352 )
  (byte) numpoints#1 ← phi( main::@9/(byte) numpoints#10 )
  (byte[256]) XPOS#1 ← phi( main::@9/(word) 4096 )
  (byte*) COLORS#1 ← phi( main::@9/(word) 55296 )
  call render param-assignment
  to:main::@10
main::@10: from main::@1
  call animate param-assignment
  to:main::@11
main::@11: from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: from main::@11
  return 
  to:@RETURN
animate: from main::@10
  (byte~) animate::$0 ← (byte[256]) XPOS#1 *idx (byte) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((byte[256]) XPOS#1 + (byte) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (byte[256]) XPOS#1 *idx (byte) 0
  (boolean~) animate::$3 ← (byte~) animate::$2 == (byte) 40
  if((boolean~) animate::$3) goto animate::@1
  to:animate::@2
animate::@1: from animate
  *((byte[256]) XPOS#1 + (byte) 0) ← (byte) 0
  to:animate::@2
animate::@2: from animate animate::@1
  (byte~) animate::$4 ← (byte[256]) YPOS#10 *idx (byte) 0
  (byte~) animate::$5 ← (byte~) animate::$4 + (byte) 1
  *((byte[256]) YPOS#10 + (byte) 0) ← (byte~) animate::$5
  (byte~) animate::$6 ← (byte[256]) YPOS#10 *idx (byte) 0
  (boolean~) animate::$7 ← (byte~) animate::$6 == (byte) 25
  if((boolean~) animate::$7) goto animate::@3
  to:animate::@4
animate::@3: from animate::@2
  *((byte[256]) YPOS#10 + (byte) 0) ← (byte) 0
  to:animate::@4
animate::@4: from animate::@2 animate::@3
  (byte~) animate::$8 ← (byte[256]) XPOS#1 *idx (byte) 1
  (byte~) animate::$9 ← (byte~) animate::$8 - (byte) 1
  *((byte[256]) XPOS#1 + (byte) 1) ← (byte~) animate::$9
  (byte~) animate::$10 ← (byte[256]) XPOS#1 *idx (byte) 1
  (boolean~) animate::$11 ← (byte~) animate::$10 == (byte) 255
  if((boolean~) animate::$11) goto animate::@5
  to:animate::@6
animate::@5: from animate::@4
  *((byte[256]) XPOS#1 + (byte) 1) ← (byte) 40
  to:animate::@6
animate::@6: from animate::@4 animate::@5
  (byte~) animate::$12 ← (byte[256]) YPOS#10 *idx (byte) 2
  (byte~) animate::$13 ← (byte~) animate::$12 + (byte) 1
  *((byte[256]) YPOS#10 + (byte) 2) ← (byte~) animate::$13
  (byte~) animate::$14 ← (byte[256]) YPOS#10 *idx (byte) 2
  (boolean~) animate::$15 ← (byte~) animate::$14 == (byte) 25
  if((boolean~) animate::$15) goto animate::@7
  to:animate::@8
animate::@7: from animate::@6
  *((byte[256]) YPOS#10 + (byte) 2) ← (byte) 0
  to:animate::@8
animate::@8: from animate::@6 animate::@7
  (byte~) animate::$16 ← (byte[256]) YPOS#10 *idx (byte) 3
  (byte~) animate::$17 ← (byte~) animate::$16 - (byte) 1
  *((byte[256]) YPOS#10 + (byte) 3) ← (byte~) animate::$17
  (byte~) animate::$18 ← (byte[256]) YPOS#10 *idx (byte) 3
  (boolean~) animate::$19 ← (byte~) animate::$18 == (byte) 255
  if((boolean~) animate::$19) goto animate::@9
  to:animate::@return
animate::@9: from animate::@8
  *((byte[256]) YPOS#10 + (byte) 3) ← (byte) 25
  (byte~) animate::$20 ← (byte[256]) XPOS#1 *idx (byte) 3
  (byte~) animate::$21 ← (byte~) animate::$20 + (byte) 7
  *((byte[256]) XPOS#1 + (byte) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (byte[256]) XPOS#1 *idx (byte) 3
  (boolean~) animate::$23 ← (byte~) animate::$22 >= (byte) 40
  if((boolean~) animate::$23) goto animate::@11
  to:animate::@return
animate::@11: from animate::@9
  (byte~) animate::$24 ← (byte[256]) XPOS#1 *idx (byte) 3
  (byte~) animate::$25 ← (byte~) animate::$24 - (byte) 40
  *((byte[256]) XPOS#1 + (byte) 3) ← (byte~) animate::$25
  to:animate::@return
animate::@return: from animate::@11 animate::@8 animate::@9
  return 
  to:@RETURN
addpoint: from main main::@3 main::@4 main::@5 main::@6 main::@7
  (byte) addpoint::c#6 ← phi( main/(byte) 1 main::@3/(byte) 2 main::@4/(byte) 3 main::@5/(byte) 4 main::@6/(byte) 5 main::@7/(byte) 7 )
  (byte) addpoint::y#6 ← phi( main/(byte) 5 main::@3/(byte) 8 main::@4/(byte) 14 main::@5/(byte) 2 main::@6/(byte) 17 main::@7/(byte) 22 )
  (byte) numpoints#19 ← phi( main/(byte) 0 main::@3/(byte) numpoints#10 main::@4/(byte) numpoints#10 main::@5/(byte) numpoints#10 main::@6/(byte) numpoints#10 main::@7/(byte) numpoints#10 )
  (byte) addpoint::x#6 ← phi( main/(byte) 5 main::@3/(byte) 15 main::@4/(byte) 6 main::@5/(byte) 34 main::@6/(byte) 21 main::@7/(byte) 31 )
  *((word) 4096 + (byte) numpoints#19) ← (byte) addpoint::x#6
  *((word) 4352 + (byte) numpoints#19) ← (byte) addpoint::y#6
  *((word) 4608 + (byte) numpoints#19) ← (byte) addpoint::c#6
  (byte) numpoints#10 ← ++ (byte) numpoints#19
  to:addpoint::@return
addpoint::@return: from addpoint
  return 
  to:@RETURN
initscreen: from main::@8
  (byte*) initscreen::screen#0 ← (word) 1024
  to:initscreen::@1
initscreen::@1: from initscreen initscreen::@1
  (byte*) initscreen::screen#2 ← phi( initscreen/(byte*) initscreen::screen#0 initscreen::@1/(byte*) initscreen::screen#1 )
  (byte) FILL#1 ← phi( initscreen/(byte) 230 )
  *((byte*) initscreen::screen#2) ← (byte) FILL#1
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  (boolean~) initscreen::$0 ← (byte*) initscreen::screen#1 < (word) 2048
  if((boolean~) initscreen::$0) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: from initscreen::@1
  return 
  to:@RETURN
render: from main::@1
  (byte*) render::colline#0 ← (byte*) COLORS#1
  to:render::@1
render::@1: from render render::@3
  (byte) numpoints#39 ← phi( render/(byte) numpoints#1 render::@3/(byte) numpoints#37 )
  (byte[256]) COLS#21 ← phi( render/(byte[256]) COLS#23 render::@3/(byte[256]) COLS#18 )
  (byte[256]) YPOS#26 ← phi( render/(byte[256]) YPOS#10 render::@3/(byte[256]) YPOS#19 )
  (byte[256]) XPOS#29 ← phi( render/(byte[256]) XPOS#1 render::@3/(byte[256]) XPOS#19 )
  (byte*) render::colline#5 ← phi( render/(byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#4 ← phi( render/(byte) 0 render::@3/(byte) render::y#1 )
  to:render::@2
render::@2: from render::@1 render::@5
  (byte) numpoints#37 ← phi( render::@1/(byte) numpoints#39 )
  (byte[256]) COLS#18 ← phi( render::@1/(byte[256]) COLS#21 )
  (byte[256]) YPOS#19 ← phi( render::@1/(byte[256]) YPOS#26 )
  (byte[256]) XPOS#19 ← phi( render::@1/(byte[256]) XPOS#29 )
  (byte*) render::colline#2 ← phi( render::@1/(byte*) render::colline#5 )
  (byte) render::y#2 ← phi( render::@1/(byte) render::y#4 )
  (byte) render::x#2 ← phi( render::@1/(byte) 0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  to:render::@5
render::@5: from render::@2
  (byte) render::col#0 ← (byte) findcol::return#0
  *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#2
  (boolean~) render::$1 ← (byte) render::x#1 < (byte) 40
  if((boolean~) render::$1) goto render::@2
  to:render::@3
render::@3: from render::@5
  (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40
  (byte) render::y#1 ← ++ (byte) render::y#2
  (boolean~) render::$3 ← (byte) render::y#1 < (byte) 25
  if((boolean~) render::$3) goto render::@1
  to:render::@return
render::@return: from render::@3
  return 
  to:@RETURN
findcol: from render::@2
  to:findcol::@1
findcol::@1: from findcol findcol::@13
  (byte) findcol::mincol#11 ← phi( findcol/(byte) 0 findcol::@13/(byte) findcol::mincol#2 )
  (byte) numpoints#35 ← phi( findcol/(byte) numpoints#37 )
  (byte[256]) COLS#16 ← phi( findcol/(byte[256]) COLS#18 )
  (byte) findcol::mindiff#10 ← phi( findcol/(byte) 255 findcol::@13/(byte) findcol::mindiff#11 )
  (byte) findcol::y#1 ← phi( findcol/(byte) findcol::y#0 )
  (byte) findcol::x#1 ← phi( findcol/(byte) findcol::x#0 )
  (byte[256]) YPOS#39 ← phi( findcol/(byte[256]) YPOS#19 )
  (byte) findcol::i#12 ← phi( findcol/(byte) 0 findcol::@13/(byte) findcol::i#1 )
  (byte[256]) XPOS#40 ← phi( findcol/(byte[256]) XPOS#19 )
  (byte) findcol::xp#0 ← (byte[256]) XPOS#40 *idx (byte) findcol::i#12
  (byte) findcol::yp#0 ← (byte[256]) YPOS#39 *idx (byte) findcol::i#12
  (boolean~) findcol::$2 ← (byte) findcol::x#1 == (byte) findcol::xp#0
  if((boolean~) findcol::$2) goto findcol::@2
  to:findcol::@3
findcol::@2: from findcol::@1
  (boolean~) findcol::$3 ← (byte) findcol::y#1 == (byte) findcol::yp#0
  if((boolean~) findcol::$3) goto findcol::@4
  to:findcol::@3
findcol::@3: from findcol::@1 findcol::@2
  (boolean~) findcol::$4 ← (byte) findcol::x#1 < (byte) findcol::xp#0
  if((boolean~) findcol::$4) goto findcol::@6
  to:findcol::@7
findcol::@4: from findcol::@2
  to:findcol::@return
findcol::@return: from findcol::@27 findcol::@4
  (byte) findcol::return#0 ← phi( findcol::@27/(byte) findcol::mincol#2 findcol::@4/(byte) 0 )
  return 
  to:@RETURN
findcol::@6: from findcol::@3
  (byte) findcol::diff#0 ← (byte) findcol::xp#0 - (byte) findcol::x#1
  to:findcol::@8
findcol::@7: from findcol::@3
  (byte) findcol::diff#1 ← (byte) findcol::x#1 - (byte) findcol::xp#0
  to:findcol::@8
findcol::@8: from findcol::@6 findcol::@7
  (byte) findcol::diff#4 ← phi( findcol::@6/(byte) findcol::diff#0 findcol::@7/(byte) findcol::diff#1 )
  (boolean~) findcol::$7 ← (byte) findcol::y#1 < (byte) findcol::yp#0
  if((boolean~) findcol::$7) goto findcol::@9
  to:findcol::@10
findcol::@9: from findcol::@8
  (byte~) findcol::$8 ← (byte) findcol::yp#0 - (byte) findcol::y#1
  (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$8
  to:findcol::@11
findcol::@10: from findcol::@8
  (byte~) findcol::$10 ← (byte) findcol::y#1 - (byte) findcol::yp#0
  (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$10
  to:findcol::@11
findcol::@11: from findcol::@10 findcol::@9
  (byte) findcol::diff#6 ← phi( findcol::@10/(byte) findcol::diff#3 findcol::@9/(byte) findcol::diff#2 )
  (boolean~) findcol::$12 ← (byte) findcol::diff#6 < (byte) findcol::mindiff#10
  if((boolean~) findcol::$12) goto findcol::@12
  to:findcol::@13
findcol::@12: from findcol::@11
  (byte) findcol::mincol#1 ← (byte[256]) COLS#16 *idx (byte) findcol::i#12
  to:findcol::@13
findcol::@13: from findcol::@11 findcol::@12
  (byte) findcol::mindiff#11 ← phi( findcol::@11/(byte) findcol::mindiff#10 findcol::@12/(byte) findcol::diff#6 )
  (byte) findcol::mincol#2 ← phi( findcol::@11/(byte) findcol::mincol#11 findcol::@12/(byte) findcol::mincol#1 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#12
  (boolean~) findcol::$14 ← (byte) findcol::i#1 < (byte) numpoints#35
  if((boolean~) findcol::$14) goto findcol::@1
  to:findcol::@27
findcol::@27: from findcol::@13
  to:findcol::@return
@END: from @7

Simple Condition (boolean~) animate::$3 if((byte~) animate::$2==(byte) 40) goto animate::@1
Simple Condition (boolean~) animate::$7 if((byte~) animate::$6==(byte) 25) goto animate::@3
Simple Condition (boolean~) animate::$11 if((byte~) animate::$10==(byte) 255) goto animate::@5
Simple Condition (boolean~) animate::$15 if((byte~) animate::$14==(byte) 25) goto animate::@7
Simple Condition (boolean~) animate::$19 if((byte~) animate::$18==(byte) 255) goto animate::@9
Simple Condition (boolean~) animate::$23 if((byte~) animate::$22>=(byte) 40) goto animate::@11
Simple Condition (boolean~) initscreen::$0 if((byte*) initscreen::screen#1<(word) 2048) goto initscreen::@1
Simple Condition (boolean~) render::$1 if((byte) render::x#1<(byte) 40) goto render::@2
Simple Condition (boolean~) render::$3 if((byte) render::y#1<(byte) 25) goto render::@1
Simple Condition (boolean~) findcol::$2 if((byte) findcol::x#1==(byte) findcol::xp#0) goto findcol::@2
Simple Condition (boolean~) findcol::$3 if((byte) findcol::y#1==(byte) findcol::yp#0) goto findcol::@4
Simple Condition (boolean~) findcol::$4 if((byte) findcol::x#1<(byte) findcol::xp#0) goto findcol::@6
Simple Condition (boolean~) findcol::$7 if((byte) findcol::y#1<(byte) findcol::yp#0) goto findcol::@9
Simple Condition (boolean~) findcol::$12 if((byte) findcol::diff#6<(byte) findcol::mindiff#10) goto findcol::@12
Simple Condition (boolean~) findcol::$14 if((byte) findcol::i#1<(byte) numpoints#35) goto findcol::@1
Succesful SSA optimization Pass2ConditionalJumpSimplification
CONTROL FLOW GRAPH
@BEGIN: from
  call main param-assignment
  to:@7
@7: from @BEGIN
  to:@END
main: from @BEGIN
  call addpoint param-assignment
  to:main::@3
main::@3: from main
  call addpoint param-assignment
  to:main::@4
main::@4: from main::@3
  call addpoint param-assignment
  to:main::@5
main::@5: from main::@4
  call addpoint param-assignment
  to:main::@6
main::@6: from main::@5
  call addpoint param-assignment
  to:main::@7
main::@7: from main::@6
  call addpoint param-assignment
  to:main::@8
main::@8: from main::@7
  call initscreen param-assignment
  to:main::@9
main::@9: from main::@8
  to:main::@1
main::@1: from main::@11 main::@9
  (byte[256]) COLS#23 ← phi( main::@9/(word) 4608 )
  (byte[256]) YPOS#10 ← phi( main::@9/(word) 4352 )
  (byte) numpoints#1 ← phi( main::@9/(byte) numpoints#10 )
  (byte[256]) XPOS#1 ← phi( main::@9/(word) 4096 )
  (byte*) COLORS#1 ← phi( main::@9/(word) 55296 )
  call render param-assignment
  to:main::@10
main::@10: from main::@1
  call animate param-assignment
  to:main::@11
main::@11: from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: from main::@11
  return 
  to:@RETURN
animate: from main::@10
  (byte~) animate::$0 ← (byte[256]) XPOS#1 *idx (byte) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((byte[256]) XPOS#1 + (byte) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (byte[256]) XPOS#1 *idx (byte) 0
  if((byte~) animate::$2==(byte) 40) goto animate::@1
  to:animate::@2
animate::@1: from animate
  *((byte[256]) XPOS#1 + (byte) 0) ← (byte) 0
  to:animate::@2
animate::@2: from animate animate::@1
  (byte~) animate::$4 ← (byte[256]) YPOS#10 *idx (byte) 0
  (byte~) animate::$5 ← (byte~) animate::$4 + (byte) 1
  *((byte[256]) YPOS#10 + (byte) 0) ← (byte~) animate::$5
  (byte~) animate::$6 ← (byte[256]) YPOS#10 *idx (byte) 0
  if((byte~) animate::$6==(byte) 25) goto animate::@3
  to:animate::@4
animate::@3: from animate::@2
  *((byte[256]) YPOS#10 + (byte) 0) ← (byte) 0
  to:animate::@4
animate::@4: from animate::@2 animate::@3
  (byte~) animate::$8 ← (byte[256]) XPOS#1 *idx (byte) 1
  (byte~) animate::$9 ← (byte~) animate::$8 - (byte) 1
  *((byte[256]) XPOS#1 + (byte) 1) ← (byte~) animate::$9
  (byte~) animate::$10 ← (byte[256]) XPOS#1 *idx (byte) 1
  if((byte~) animate::$10==(byte) 255) goto animate::@5
  to:animate::@6
animate::@5: from animate::@4
  *((byte[256]) XPOS#1 + (byte) 1) ← (byte) 40
  to:animate::@6
animate::@6: from animate::@4 animate::@5
  (byte~) animate::$12 ← (byte[256]) YPOS#10 *idx (byte) 2
  (byte~) animate::$13 ← (byte~) animate::$12 + (byte) 1
  *((byte[256]) YPOS#10 + (byte) 2) ← (byte~) animate::$13
  (byte~) animate::$14 ← (byte[256]) YPOS#10 *idx (byte) 2
  if((byte~) animate::$14==(byte) 25) goto animate::@7
  to:animate::@8
animate::@7: from animate::@6
  *((byte[256]) YPOS#10 + (byte) 2) ← (byte) 0
  to:animate::@8
animate::@8: from animate::@6 animate::@7
  (byte~) animate::$16 ← (byte[256]) YPOS#10 *idx (byte) 3
  (byte~) animate::$17 ← (byte~) animate::$16 - (byte) 1
  *((byte[256]) YPOS#10 + (byte) 3) ← (byte~) animate::$17
  (byte~) animate::$18 ← (byte[256]) YPOS#10 *idx (byte) 3
  if((byte~) animate::$18==(byte) 255) goto animate::@9
  to:animate::@return
animate::@9: from animate::@8
  *((byte[256]) YPOS#10 + (byte) 3) ← (byte) 25
  (byte~) animate::$20 ← (byte[256]) XPOS#1 *idx (byte) 3
  (byte~) animate::$21 ← (byte~) animate::$20 + (byte) 7
  *((byte[256]) XPOS#1 + (byte) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (byte[256]) XPOS#1 *idx (byte) 3
  if((byte~) animate::$22>=(byte) 40) goto animate::@11
  to:animate::@return
animate::@11: from animate::@9
  (byte~) animate::$24 ← (byte[256]) XPOS#1 *idx (byte) 3
  (byte~) animate::$25 ← (byte~) animate::$24 - (byte) 40
  *((byte[256]) XPOS#1 + (byte) 3) ← (byte~) animate::$25
  to:animate::@return
animate::@return: from animate::@11 animate::@8 animate::@9
  return 
  to:@RETURN
addpoint: from main main::@3 main::@4 main::@5 main::@6 main::@7
  (byte) addpoint::c#6 ← phi( main/(byte) 1 main::@3/(byte) 2 main::@4/(byte) 3 main::@5/(byte) 4 main::@6/(byte) 5 main::@7/(byte) 7 )
  (byte) addpoint::y#6 ← phi( main/(byte) 5 main::@3/(byte) 8 main::@4/(byte) 14 main::@5/(byte) 2 main::@6/(byte) 17 main::@7/(byte) 22 )
  (byte) numpoints#19 ← phi( main/(byte) 0 main::@3/(byte) numpoints#10 main::@4/(byte) numpoints#10 main::@5/(byte) numpoints#10 main::@6/(byte) numpoints#10 main::@7/(byte) numpoints#10 )
  (byte) addpoint::x#6 ← phi( main/(byte) 5 main::@3/(byte) 15 main::@4/(byte) 6 main::@5/(byte) 34 main::@6/(byte) 21 main::@7/(byte) 31 )
  *((word) 4096 + (byte) numpoints#19) ← (byte) addpoint::x#6
  *((word) 4352 + (byte) numpoints#19) ← (byte) addpoint::y#6
  *((word) 4608 + (byte) numpoints#19) ← (byte) addpoint::c#6
  (byte) numpoints#10 ← ++ (byte) numpoints#19
  to:addpoint::@return
addpoint::@return: from addpoint
  return 
  to:@RETURN
initscreen: from main::@8
  (byte*) initscreen::screen#0 ← (word) 1024
  to:initscreen::@1
initscreen::@1: from initscreen initscreen::@1
  (byte*) initscreen::screen#2 ← phi( initscreen/(byte*) initscreen::screen#0 initscreen::@1/(byte*) initscreen::screen#1 )
  (byte) FILL#1 ← phi( initscreen/(byte) 230 )
  *((byte*) initscreen::screen#2) ← (byte) FILL#1
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  if((byte*) initscreen::screen#1<(word) 2048) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: from initscreen::@1
  return 
  to:@RETURN
render: from main::@1
  (byte*) render::colline#0 ← (byte*) COLORS#1
  to:render::@1
render::@1: from render render::@3
  (byte) numpoints#39 ← phi( render/(byte) numpoints#1 render::@3/(byte) numpoints#37 )
  (byte[256]) COLS#21 ← phi( render/(byte[256]) COLS#23 render::@3/(byte[256]) COLS#18 )
  (byte[256]) YPOS#26 ← phi( render/(byte[256]) YPOS#10 render::@3/(byte[256]) YPOS#19 )
  (byte[256]) XPOS#29 ← phi( render/(byte[256]) XPOS#1 render::@3/(byte[256]) XPOS#19 )
  (byte*) render::colline#5 ← phi( render/(byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#4 ← phi( render/(byte) 0 render::@3/(byte) render::y#1 )
  to:render::@2
render::@2: from render::@1 render::@5
  (byte) numpoints#37 ← phi( render::@1/(byte) numpoints#39 )
  (byte[256]) COLS#18 ← phi( render::@1/(byte[256]) COLS#21 )
  (byte[256]) YPOS#19 ← phi( render::@1/(byte[256]) YPOS#26 )
  (byte[256]) XPOS#19 ← phi( render::@1/(byte[256]) XPOS#29 )
  (byte*) render::colline#2 ← phi( render::@1/(byte*) render::colline#5 )
  (byte) render::y#2 ← phi( render::@1/(byte) render::y#4 )
  (byte) render::x#2 ← phi( render::@1/(byte) 0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  to:render::@5
render::@5: from render::@2
  (byte) render::col#0 ← (byte) findcol::return#0
  *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#2
  if((byte) render::x#1<(byte) 40) goto render::@2
  to:render::@3
render::@3: from render::@5
  (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40
  (byte) render::y#1 ← ++ (byte) render::y#2
  if((byte) render::y#1<(byte) 25) goto render::@1
  to:render::@return
render::@return: from render::@3
  return 
  to:@RETURN
findcol: from render::@2
  to:findcol::@1
findcol::@1: from findcol findcol::@13
  (byte) findcol::mincol#11 ← phi( findcol/(byte) 0 findcol::@13/(byte) findcol::mincol#2 )
  (byte) numpoints#35 ← phi( findcol/(byte) numpoints#37 )
  (byte[256]) COLS#16 ← phi( findcol/(byte[256]) COLS#18 )
  (byte) findcol::mindiff#10 ← phi( findcol/(byte) 255 findcol::@13/(byte) findcol::mindiff#11 )
  (byte) findcol::y#1 ← phi( findcol/(byte) findcol::y#0 )
  (byte) findcol::x#1 ← phi( findcol/(byte) findcol::x#0 )
  (byte[256]) YPOS#39 ← phi( findcol/(byte[256]) YPOS#19 )
  (byte) findcol::i#12 ← phi( findcol/(byte) 0 findcol::@13/(byte) findcol::i#1 )
  (byte[256]) XPOS#40 ← phi( findcol/(byte[256]) XPOS#19 )
  (byte) findcol::xp#0 ← (byte[256]) XPOS#40 *idx (byte) findcol::i#12
  (byte) findcol::yp#0 ← (byte[256]) YPOS#39 *idx (byte) findcol::i#12
  if((byte) findcol::x#1==(byte) findcol::xp#0) goto findcol::@2
  to:findcol::@3
findcol::@2: from findcol::@1
  if((byte) findcol::y#1==(byte) findcol::yp#0) goto findcol::@4
  to:findcol::@3
findcol::@3: from findcol::@1 findcol::@2
  if((byte) findcol::x#1<(byte) findcol::xp#0) goto findcol::@6
  to:findcol::@7
findcol::@4: from findcol::@2
  to:findcol::@return
findcol::@return: from findcol::@27 findcol::@4
  (byte) findcol::return#0 ← phi( findcol::@27/(byte) findcol::mincol#2 findcol::@4/(byte) 0 )
  return 
  to:@RETURN
findcol::@6: from findcol::@3
  (byte) findcol::diff#0 ← (byte) findcol::xp#0 - (byte) findcol::x#1
  to:findcol::@8
findcol::@7: from findcol::@3
  (byte) findcol::diff#1 ← (byte) findcol::x#1 - (byte) findcol::xp#0
  to:findcol::@8
findcol::@8: from findcol::@6 findcol::@7
  (byte) findcol::diff#4 ← phi( findcol::@6/(byte) findcol::diff#0 findcol::@7/(byte) findcol::diff#1 )
  if((byte) findcol::y#1<(byte) findcol::yp#0) goto findcol::@9
  to:findcol::@10
findcol::@9: from findcol::@8
  (byte~) findcol::$8 ← (byte) findcol::yp#0 - (byte) findcol::y#1
  (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$8
  to:findcol::@11
findcol::@10: from findcol::@8
  (byte~) findcol::$10 ← (byte) findcol::y#1 - (byte) findcol::yp#0
  (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$10
  to:findcol::@11
findcol::@11: from findcol::@10 findcol::@9
  (byte) findcol::diff#6 ← phi( findcol::@10/(byte) findcol::diff#3 findcol::@9/(byte) findcol::diff#2 )
  if((byte) findcol::diff#6<(byte) findcol::mindiff#10) goto findcol::@12
  to:findcol::@13
findcol::@12: from findcol::@11
  (byte) findcol::mincol#1 ← (byte[256]) COLS#16 *idx (byte) findcol::i#12
  to:findcol::@13
findcol::@13: from findcol::@11 findcol::@12
  (byte) findcol::mindiff#11 ← phi( findcol::@11/(byte) findcol::mindiff#10 findcol::@12/(byte) findcol::diff#6 )
  (byte) findcol::mincol#2 ← phi( findcol::@11/(byte) findcol::mincol#11 findcol::@12/(byte) findcol::mincol#1 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#12
  if((byte) findcol::i#1<(byte) numpoints#35) goto findcol::@1
  to:findcol::@27
findcol::@27: from findcol::@13
  to:findcol::@return
@END: from @7

Culled Empty Block (label) @7
Culled Empty Block (label) main::@9
Culled Empty Block (label) findcol::@4
Culled Empty Block (label) findcol::@27
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@BEGIN: from
  call main param-assignment
  to:@END
main: from @BEGIN
  call addpoint param-assignment
  to:main::@3
main::@3: from main
  call addpoint param-assignment
  to:main::@4
main::@4: from main::@3
  call addpoint param-assignment
  to:main::@5
main::@5: from main::@4
  call addpoint param-assignment
  to:main::@6
main::@6: from main::@5
  call addpoint param-assignment
  to:main::@7
main::@7: from main::@6
  call addpoint param-assignment
  to:main::@8
main::@8: from main::@7
  call initscreen param-assignment
  to:main::@1
main::@1: from main::@11 main::@8
  (byte[256]) COLS#23 ← phi( main::@8/(word) 4608 )
  (byte[256]) YPOS#10 ← phi( main::@8/(word) 4352 )
  (byte) numpoints#1 ← phi( main::@8/(byte) numpoints#10 )
  (byte[256]) XPOS#1 ← phi( main::@8/(word) 4096 )
  (byte*) COLORS#1 ← phi( main::@8/(word) 55296 )
  call render param-assignment
  to:main::@10
main::@10: from main::@1
  call animate param-assignment
  to:main::@11
main::@11: from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: from main::@11
  return 
  to:@RETURN
animate: from main::@10
  (byte~) animate::$0 ← (byte[256]) XPOS#1 *idx (byte) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((byte[256]) XPOS#1 + (byte) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (byte[256]) XPOS#1 *idx (byte) 0
  if((byte~) animate::$2==(byte) 40) goto animate::@1
  to:animate::@2
animate::@1: from animate
  *((byte[256]) XPOS#1 + (byte) 0) ← (byte) 0
  to:animate::@2
animate::@2: from animate animate::@1
  (byte~) animate::$4 ← (byte[256]) YPOS#10 *idx (byte) 0
  (byte~) animate::$5 ← (byte~) animate::$4 + (byte) 1
  *((byte[256]) YPOS#10 + (byte) 0) ← (byte~) animate::$5
  (byte~) animate::$6 ← (byte[256]) YPOS#10 *idx (byte) 0
  if((byte~) animate::$6==(byte) 25) goto animate::@3
  to:animate::@4
animate::@3: from animate::@2
  *((byte[256]) YPOS#10 + (byte) 0) ← (byte) 0
  to:animate::@4
animate::@4: from animate::@2 animate::@3
  (byte~) animate::$8 ← (byte[256]) XPOS#1 *idx (byte) 1
  (byte~) animate::$9 ← (byte~) animate::$8 - (byte) 1
  *((byte[256]) XPOS#1 + (byte) 1) ← (byte~) animate::$9
  (byte~) animate::$10 ← (byte[256]) XPOS#1 *idx (byte) 1
  if((byte~) animate::$10==(byte) 255) goto animate::@5
  to:animate::@6
animate::@5: from animate::@4
  *((byte[256]) XPOS#1 + (byte) 1) ← (byte) 40
  to:animate::@6
animate::@6: from animate::@4 animate::@5
  (byte~) animate::$12 ← (byte[256]) YPOS#10 *idx (byte) 2
  (byte~) animate::$13 ← (byte~) animate::$12 + (byte) 1
  *((byte[256]) YPOS#10 + (byte) 2) ← (byte~) animate::$13
  (byte~) animate::$14 ← (byte[256]) YPOS#10 *idx (byte) 2
  if((byte~) animate::$14==(byte) 25) goto animate::@7
  to:animate::@8
animate::@7: from animate::@6
  *((byte[256]) YPOS#10 + (byte) 2) ← (byte) 0
  to:animate::@8
animate::@8: from animate::@6 animate::@7
  (byte~) animate::$16 ← (byte[256]) YPOS#10 *idx (byte) 3
  (byte~) animate::$17 ← (byte~) animate::$16 - (byte) 1
  *((byte[256]) YPOS#10 + (byte) 3) ← (byte~) animate::$17
  (byte~) animate::$18 ← (byte[256]) YPOS#10 *idx (byte) 3
  if((byte~) animate::$18==(byte) 255) goto animate::@9
  to:animate::@return
animate::@9: from animate::@8
  *((byte[256]) YPOS#10 + (byte) 3) ← (byte) 25
  (byte~) animate::$20 ← (byte[256]) XPOS#1 *idx (byte) 3
  (byte~) animate::$21 ← (byte~) animate::$20 + (byte) 7
  *((byte[256]) XPOS#1 + (byte) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (byte[256]) XPOS#1 *idx (byte) 3
  if((byte~) animate::$22>=(byte) 40) goto animate::@11
  to:animate::@return
animate::@11: from animate::@9
  (byte~) animate::$24 ← (byte[256]) XPOS#1 *idx (byte) 3
  (byte~) animate::$25 ← (byte~) animate::$24 - (byte) 40
  *((byte[256]) XPOS#1 + (byte) 3) ← (byte~) animate::$25
  to:animate::@return
animate::@return: from animate::@11 animate::@8 animate::@9
  return 
  to:@RETURN
addpoint: from main main::@3 main::@4 main::@5 main::@6 main::@7
  (byte) addpoint::c#6 ← phi( main/(byte) 1 main::@3/(byte) 2 main::@4/(byte) 3 main::@5/(byte) 4 main::@6/(byte) 5 main::@7/(byte) 7 )
  (byte) addpoint::y#6 ← phi( main/(byte) 5 main::@3/(byte) 8 main::@4/(byte) 14 main::@5/(byte) 2 main::@6/(byte) 17 main::@7/(byte) 22 )
  (byte) numpoints#19 ← phi( main/(byte) 0 main::@3/(byte) numpoints#10 main::@4/(byte) numpoints#10 main::@5/(byte) numpoints#10 main::@6/(byte) numpoints#10 main::@7/(byte) numpoints#10 )
  (byte) addpoint::x#6 ← phi( main/(byte) 5 main::@3/(byte) 15 main::@4/(byte) 6 main::@5/(byte) 34 main::@6/(byte) 21 main::@7/(byte) 31 )
  *((word) 4096 + (byte) numpoints#19) ← (byte) addpoint::x#6
  *((word) 4352 + (byte) numpoints#19) ← (byte) addpoint::y#6
  *((word) 4608 + (byte) numpoints#19) ← (byte) addpoint::c#6
  (byte) numpoints#10 ← ++ (byte) numpoints#19
  to:addpoint::@return
addpoint::@return: from addpoint
  return 
  to:@RETURN
initscreen: from main::@8
  (byte*) initscreen::screen#0 ← (word) 1024
  to:initscreen::@1
initscreen::@1: from initscreen initscreen::@1
  (byte*) initscreen::screen#2 ← phi( initscreen/(byte*) initscreen::screen#0 initscreen::@1/(byte*) initscreen::screen#1 )
  (byte) FILL#1 ← phi( initscreen/(byte) 230 )
  *((byte*) initscreen::screen#2) ← (byte) FILL#1
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  if((byte*) initscreen::screen#1<(word) 2048) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: from initscreen::@1
  return 
  to:@RETURN
render: from main::@1
  (byte*) render::colline#0 ← (byte*) COLORS#1
  to:render::@1
render::@1: from render render::@3
  (byte) numpoints#39 ← phi( render/(byte) numpoints#1 render::@3/(byte) numpoints#37 )
  (byte[256]) COLS#21 ← phi( render/(byte[256]) COLS#23 render::@3/(byte[256]) COLS#18 )
  (byte[256]) YPOS#26 ← phi( render/(byte[256]) YPOS#10 render::@3/(byte[256]) YPOS#19 )
  (byte[256]) XPOS#29 ← phi( render/(byte[256]) XPOS#1 render::@3/(byte[256]) XPOS#19 )
  (byte*) render::colline#5 ← phi( render/(byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#4 ← phi( render/(byte) 0 render::@3/(byte) render::y#1 )
  to:render::@2
render::@2: from render::@1 render::@5
  (byte) numpoints#37 ← phi( render::@1/(byte) numpoints#39 )
  (byte[256]) COLS#18 ← phi( render::@1/(byte[256]) COLS#21 )
  (byte[256]) YPOS#19 ← phi( render::@1/(byte[256]) YPOS#26 )
  (byte[256]) XPOS#19 ← phi( render::@1/(byte[256]) XPOS#29 )
  (byte*) render::colline#2 ← phi( render::@1/(byte*) render::colline#5 )
  (byte) render::y#2 ← phi( render::@1/(byte) render::y#4 )
  (byte) render::x#2 ← phi( render::@1/(byte) 0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  to:render::@5
render::@5: from render::@2
  (byte) render::col#0 ← (byte) findcol::return#0
  *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#2
  if((byte) render::x#1<(byte) 40) goto render::@2
  to:render::@3
render::@3: from render::@5
  (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40
  (byte) render::y#1 ← ++ (byte) render::y#2
  if((byte) render::y#1<(byte) 25) goto render::@1
  to:render::@return
render::@return: from render::@3
  return 
  to:@RETURN
findcol: from render::@2
  to:findcol::@1
findcol::@1: from findcol findcol::@13
  (byte) findcol::mincol#11 ← phi( findcol/(byte) 0 findcol::@13/(byte) findcol::mincol#2 )
  (byte) numpoints#35 ← phi( findcol/(byte) numpoints#37 )
  (byte[256]) COLS#16 ← phi( findcol/(byte[256]) COLS#18 )
  (byte) findcol::mindiff#10 ← phi( findcol/(byte) 255 findcol::@13/(byte) findcol::mindiff#11 )
  (byte) findcol::y#1 ← phi( findcol/(byte) findcol::y#0 )
  (byte) findcol::x#1 ← phi( findcol/(byte) findcol::x#0 )
  (byte[256]) YPOS#39 ← phi( findcol/(byte[256]) YPOS#19 )
  (byte) findcol::i#12 ← phi( findcol/(byte) 0 findcol::@13/(byte) findcol::i#1 )
  (byte[256]) XPOS#40 ← phi( findcol/(byte[256]) XPOS#19 )
  (byte) findcol::xp#0 ← (byte[256]) XPOS#40 *idx (byte) findcol::i#12
  (byte) findcol::yp#0 ← (byte[256]) YPOS#39 *idx (byte) findcol::i#12
  if((byte) findcol::x#1==(byte) findcol::xp#0) goto findcol::@2
  to:findcol::@3
findcol::@2: from findcol::@1
  if((byte) findcol::y#1==(byte) findcol::yp#0) goto findcol::@return
  to:findcol::@3
findcol::@3: from findcol::@1 findcol::@2
  if((byte) findcol::x#1<(byte) findcol::xp#0) goto findcol::@6
  to:findcol::@7
findcol::@return: from findcol::@13 findcol::@2
  (byte) findcol::return#0 ← phi( findcol::@13/(byte) findcol::mincol#2 findcol::@2/(byte) 0 )
  return 
  to:@RETURN
findcol::@6: from findcol::@3
  (byte) findcol::diff#0 ← (byte) findcol::xp#0 - (byte) findcol::x#1
  to:findcol::@8
findcol::@7: from findcol::@3
  (byte) findcol::diff#1 ← (byte) findcol::x#1 - (byte) findcol::xp#0
  to:findcol::@8
findcol::@8: from findcol::@6 findcol::@7
  (byte) findcol::diff#4 ← phi( findcol::@6/(byte) findcol::diff#0 findcol::@7/(byte) findcol::diff#1 )
  if((byte) findcol::y#1<(byte) findcol::yp#0) goto findcol::@9
  to:findcol::@10
findcol::@9: from findcol::@8
  (byte~) findcol::$8 ← (byte) findcol::yp#0 - (byte) findcol::y#1
  (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$8
  to:findcol::@11
findcol::@10: from findcol::@8
  (byte~) findcol::$10 ← (byte) findcol::y#1 - (byte) findcol::yp#0
  (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$10
  to:findcol::@11
findcol::@11: from findcol::@10 findcol::@9
  (byte) findcol::diff#6 ← phi( findcol::@10/(byte) findcol::diff#3 findcol::@9/(byte) findcol::diff#2 )
  if((byte) findcol::diff#6<(byte) findcol::mindiff#10) goto findcol::@12
  to:findcol::@13
findcol::@12: from findcol::@11
  (byte) findcol::mincol#1 ← (byte[256]) COLS#16 *idx (byte) findcol::i#12
  to:findcol::@13
findcol::@13: from findcol::@11 findcol::@12
  (byte) findcol::mindiff#11 ← phi( findcol::@11/(byte) findcol::mindiff#10 findcol::@12/(byte) findcol::diff#6 )
  (byte) findcol::mincol#2 ← phi( findcol::@11/(byte) findcol::mincol#11 findcol::@12/(byte) findcol::mincol#1 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#12
  if((byte) findcol::i#1<(byte) numpoints#35) goto findcol::@1
  to:findcol::@return
@END: from @BEGIN

Constant (byte*) COLORS#1 (word) 55296
Constant (byte[256]) XPOS#1 (word) 4096
Constant (byte[256]) YPOS#10 (word) 4352
Constant (byte[256]) COLS#23 (word) 4608
Constant (byte*) initscreen::screen#0 (word) 1024
Constant (byte) FILL#1 (byte) 230
Succesful SSA optimization Pass2ConstantPropagation
CONTROL FLOW GRAPH
@BEGIN: from
  call main param-assignment
  to:@END
main: from @BEGIN
  call addpoint param-assignment
  to:main::@3
main::@3: from main
  call addpoint param-assignment
  to:main::@4
main::@4: from main::@3
  call addpoint param-assignment
  to:main::@5
main::@5: from main::@4
  call addpoint param-assignment
  to:main::@6
main::@6: from main::@5
  call addpoint param-assignment
  to:main::@7
main::@7: from main::@6
  call addpoint param-assignment
  to:main::@8
main::@8: from main::@7
  call initscreen param-assignment
  to:main::@1
main::@1: from main::@11 main::@8
  (byte) numpoints#1 ← phi( main::@8/(byte) numpoints#10 )
  call render param-assignment
  to:main::@10
main::@10: from main::@1
  call animate param-assignment
  to:main::@11
main::@11: from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: from main::@11
  return 
  to:@RETURN
animate: from main::@10
  (byte~) animate::$0 ← (word) 4096 *idx (byte) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((word) 4096 + (byte) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (word) 4096 *idx (byte) 0
  if((byte~) animate::$2==(byte) 40) goto animate::@1
  to:animate::@2
animate::@1: from animate
  *((word) 4096 + (byte) 0) ← (byte) 0
  to:animate::@2
animate::@2: from animate animate::@1
  (byte~) animate::$4 ← (word) 4352 *idx (byte) 0
  (byte~) animate::$5 ← (byte~) animate::$4 + (byte) 1
  *((word) 4352 + (byte) 0) ← (byte~) animate::$5
  (byte~) animate::$6 ← (word) 4352 *idx (byte) 0
  if((byte~) animate::$6==(byte) 25) goto animate::@3
  to:animate::@4
animate::@3: from animate::@2
  *((word) 4352 + (byte) 0) ← (byte) 0
  to:animate::@4
animate::@4: from animate::@2 animate::@3
  (byte~) animate::$8 ← (word) 4096 *idx (byte) 1
  (byte~) animate::$9 ← (byte~) animate::$8 - (byte) 1
  *((word) 4096 + (byte) 1) ← (byte~) animate::$9
  (byte~) animate::$10 ← (word) 4096 *idx (byte) 1
  if((byte~) animate::$10==(byte) 255) goto animate::@5
  to:animate::@6
animate::@5: from animate::@4
  *((word) 4096 + (byte) 1) ← (byte) 40
  to:animate::@6
animate::@6: from animate::@4 animate::@5
  (byte~) animate::$12 ← (word) 4352 *idx (byte) 2
  (byte~) animate::$13 ← (byte~) animate::$12 + (byte) 1
  *((word) 4352 + (byte) 2) ← (byte~) animate::$13
  (byte~) animate::$14 ← (word) 4352 *idx (byte) 2
  if((byte~) animate::$14==(byte) 25) goto animate::@7
  to:animate::@8
animate::@7: from animate::@6
  *((word) 4352 + (byte) 2) ← (byte) 0
  to:animate::@8
animate::@8: from animate::@6 animate::@7
  (byte~) animate::$16 ← (word) 4352 *idx (byte) 3
  (byte~) animate::$17 ← (byte~) animate::$16 - (byte) 1
  *((word) 4352 + (byte) 3) ← (byte~) animate::$17
  (byte~) animate::$18 ← (word) 4352 *idx (byte) 3
  if((byte~) animate::$18==(byte) 255) goto animate::@9
  to:animate::@return
animate::@9: from animate::@8
  *((word) 4352 + (byte) 3) ← (byte) 25
  (byte~) animate::$20 ← (word) 4096 *idx (byte) 3
  (byte~) animate::$21 ← (byte~) animate::$20 + (byte) 7
  *((word) 4096 + (byte) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (word) 4096 *idx (byte) 3
  if((byte~) animate::$22>=(byte) 40) goto animate::@11
  to:animate::@return
animate::@11: from animate::@9
  (byte~) animate::$24 ← (word) 4096 *idx (byte) 3
  (byte~) animate::$25 ← (byte~) animate::$24 - (byte) 40
  *((word) 4096 + (byte) 3) ← (byte~) animate::$25
  to:animate::@return
animate::@return: from animate::@11 animate::@8 animate::@9
  return 
  to:@RETURN
addpoint: from main main::@3 main::@4 main::@5 main::@6 main::@7
  (byte) addpoint::c#6 ← phi( main/(byte) 1 main::@3/(byte) 2 main::@4/(byte) 3 main::@5/(byte) 4 main::@6/(byte) 5 main::@7/(byte) 7 )
  (byte) addpoint::y#6 ← phi( main/(byte) 5 main::@3/(byte) 8 main::@4/(byte) 14 main::@5/(byte) 2 main::@6/(byte) 17 main::@7/(byte) 22 )
  (byte) numpoints#19 ← phi( main/(byte) 0 main::@3/(byte) numpoints#10 main::@4/(byte) numpoints#10 main::@5/(byte) numpoints#10 main::@6/(byte) numpoints#10 main::@7/(byte) numpoints#10 )
  (byte) addpoint::x#6 ← phi( main/(byte) 5 main::@3/(byte) 15 main::@4/(byte) 6 main::@5/(byte) 34 main::@6/(byte) 21 main::@7/(byte) 31 )
  *((word) 4096 + (byte) numpoints#19) ← (byte) addpoint::x#6
  *((word) 4352 + (byte) numpoints#19) ← (byte) addpoint::y#6
  *((word) 4608 + (byte) numpoints#19) ← (byte) addpoint::c#6
  (byte) numpoints#10 ← ++ (byte) numpoints#19
  to:addpoint::@return
addpoint::@return: from addpoint
  return 
  to:@RETURN
initscreen: from main::@8
  to:initscreen::@1
initscreen::@1: from initscreen initscreen::@1
  (byte*) initscreen::screen#2 ← phi( initscreen/(word) 1024 initscreen::@1/(byte*) initscreen::screen#1 )
  *((byte*) initscreen::screen#2) ← (byte) 230
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  if((byte*) initscreen::screen#1<(word) 2048) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: from initscreen::@1
  return 
  to:@RETURN
render: from main::@1
  (byte*) render::colline#0 ← (word) 55296
  to:render::@1
render::@1: from render render::@3
  (byte) numpoints#39 ← phi( render/(byte) numpoints#1 render::@3/(byte) numpoints#37 )
  (byte[256]) COLS#21 ← phi( render/(word) 4608 render::@3/(byte[256]) COLS#18 )
  (byte[256]) YPOS#26 ← phi( render/(word) 4352 render::@3/(byte[256]) YPOS#19 )
  (byte[256]) XPOS#29 ← phi( render/(word) 4096 render::@3/(byte[256]) XPOS#19 )
  (byte*) render::colline#5 ← phi( render/(byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#4 ← phi( render/(byte) 0 render::@3/(byte) render::y#1 )
  to:render::@2
render::@2: from render::@1 render::@5
  (byte) numpoints#37 ← phi( render::@1/(byte) numpoints#39 )
  (byte[256]) COLS#18 ← phi( render::@1/(byte[256]) COLS#21 )
  (byte[256]) YPOS#19 ← phi( render::@1/(byte[256]) YPOS#26 )
  (byte[256]) XPOS#19 ← phi( render::@1/(byte[256]) XPOS#29 )
  (byte*) render::colline#2 ← phi( render::@1/(byte*) render::colline#5 )
  (byte) render::y#2 ← phi( render::@1/(byte) render::y#4 )
  (byte) render::x#2 ← phi( render::@1/(byte) 0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  to:render::@5
render::@5: from render::@2
  (byte) render::col#0 ← (byte) findcol::return#0
  *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#2
  if((byte) render::x#1<(byte) 40) goto render::@2
  to:render::@3
render::@3: from render::@5
  (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40
  (byte) render::y#1 ← ++ (byte) render::y#2
  if((byte) render::y#1<(byte) 25) goto render::@1
  to:render::@return
render::@return: from render::@3
  return 
  to:@RETURN
findcol: from render::@2
  to:findcol::@1
findcol::@1: from findcol findcol::@13
  (byte) findcol::mincol#11 ← phi( findcol/(byte) 0 findcol::@13/(byte) findcol::mincol#2 )
  (byte) numpoints#35 ← phi( findcol/(byte) numpoints#37 )
  (byte[256]) COLS#16 ← phi( findcol/(byte[256]) COLS#18 )
  (byte) findcol::mindiff#10 ← phi( findcol/(byte) 255 findcol::@13/(byte) findcol::mindiff#11 )
  (byte) findcol::y#1 ← phi( findcol/(byte) findcol::y#0 )
  (byte) findcol::x#1 ← phi( findcol/(byte) findcol::x#0 )
  (byte[256]) YPOS#39 ← phi( findcol/(byte[256]) YPOS#19 )
  (byte) findcol::i#12 ← phi( findcol/(byte) 0 findcol::@13/(byte) findcol::i#1 )
  (byte[256]) XPOS#40 ← phi( findcol/(byte[256]) XPOS#19 )
  (byte) findcol::xp#0 ← (byte[256]) XPOS#40 *idx (byte) findcol::i#12
  (byte) findcol::yp#0 ← (byte[256]) YPOS#39 *idx (byte) findcol::i#12
  if((byte) findcol::x#1==(byte) findcol::xp#0) goto findcol::@2
  to:findcol::@3
findcol::@2: from findcol::@1
  if((byte) findcol::y#1==(byte) findcol::yp#0) goto findcol::@return
  to:findcol::@3
findcol::@3: from findcol::@1 findcol::@2
  if((byte) findcol::x#1<(byte) findcol::xp#0) goto findcol::@6
  to:findcol::@7
findcol::@return: from findcol::@13 findcol::@2
  (byte) findcol::return#0 ← phi( findcol::@13/(byte) findcol::mincol#2 findcol::@2/(byte) 0 )
  return 
  to:@RETURN
findcol::@6: from findcol::@3
  (byte) findcol::diff#0 ← (byte) findcol::xp#0 - (byte) findcol::x#1
  to:findcol::@8
findcol::@7: from findcol::@3
  (byte) findcol::diff#1 ← (byte) findcol::x#1 - (byte) findcol::xp#0
  to:findcol::@8
findcol::@8: from findcol::@6 findcol::@7
  (byte) findcol::diff#4 ← phi( findcol::@6/(byte) findcol::diff#0 findcol::@7/(byte) findcol::diff#1 )
  if((byte) findcol::y#1<(byte) findcol::yp#0) goto findcol::@9
  to:findcol::@10
findcol::@9: from findcol::@8
  (byte~) findcol::$8 ← (byte) findcol::yp#0 - (byte) findcol::y#1
  (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$8
  to:findcol::@11
findcol::@10: from findcol::@8
  (byte~) findcol::$10 ← (byte) findcol::y#1 - (byte) findcol::yp#0
  (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$10
  to:findcol::@11
findcol::@11: from findcol::@10 findcol::@9
  (byte) findcol::diff#6 ← phi( findcol::@10/(byte) findcol::diff#3 findcol::@9/(byte) findcol::diff#2 )
  if((byte) findcol::diff#6<(byte) findcol::mindiff#10) goto findcol::@12
  to:findcol::@13
findcol::@12: from findcol::@11
  (byte) findcol::mincol#1 ← (byte[256]) COLS#16 *idx (byte) findcol::i#12
  to:findcol::@13
findcol::@13: from findcol::@11 findcol::@12
  (byte) findcol::mindiff#11 ← phi( findcol::@11/(byte) findcol::mindiff#10 findcol::@12/(byte) findcol::diff#6 )
  (byte) findcol::mincol#2 ← phi( findcol::@11/(byte) findcol::mincol#11 findcol::@12/(byte) findcol::mincol#1 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#12
  if((byte) findcol::i#1<(byte) numpoints#35) goto findcol::@1
  to:findcol::@return
@END: from @BEGIN

Consolidated referenced array index constant in assignment animate::$0
Consolidated assigned array index constant in assignment *(4096)
Consolidated referenced array index constant in assignment animate::$2
Consolidated assigned array index constant in assignment *(4096)
Consolidated referenced array index constant in assignment animate::$4
Consolidated assigned array index constant in assignment *(4352)
Consolidated referenced array index constant in assignment animate::$6
Consolidated assigned array index constant in assignment *(4352)
Consolidated referenced array index constant in assignment animate::$8
Consolidated assigned array index constant in assignment *(4097)
Consolidated referenced array index constant in assignment animate::$10
Consolidated assigned array index constant in assignment *(4097)
Consolidated referenced array index constant in assignment animate::$12
Consolidated assigned array index constant in assignment *(4354)
Consolidated referenced array index constant in assignment animate::$14
Consolidated assigned array index constant in assignment *(4354)
Consolidated referenced array index constant in assignment animate::$16
Consolidated assigned array index constant in assignment *(4355)
Consolidated referenced array index constant in assignment animate::$18
Consolidated assigned array index constant in assignment *(4355)
Consolidated referenced array index constant in assignment animate::$20
Consolidated assigned array index constant in assignment *(4099)
Consolidated referenced array index constant in assignment animate::$22
Consolidated referenced array index constant in assignment animate::$24
Consolidated assigned array index constant in assignment *(4099)
Succesful SSA optimization Pass2ConstantAdditionElimination
CONTROL FLOW GRAPH
@BEGIN: from
  call main param-assignment
  to:@END
main: from @BEGIN
  call addpoint param-assignment
  to:main::@3
main::@3: from main
  call addpoint param-assignment
  to:main::@4
main::@4: from main::@3
  call addpoint param-assignment
  to:main::@5
main::@5: from main::@4
  call addpoint param-assignment
  to:main::@6
main::@6: from main::@5
  call addpoint param-assignment
  to:main::@7
main::@7: from main::@6
  call addpoint param-assignment
  to:main::@8
main::@8: from main::@7
  call initscreen param-assignment
  to:main::@1
main::@1: from main::@11 main::@8
  (byte) numpoints#1 ← phi( main::@8/(byte) numpoints#10 )
  call render param-assignment
  to:main::@10
main::@10: from main::@1
  call animate param-assignment
  to:main::@11
main::@11: from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: from main::@11
  return 
  to:@RETURN
animate: from main::@10
  (byte~) animate::$0 ← * (word) 4096
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((word) 4096) ← (byte~) animate::$1
  (byte~) animate::$2 ← * (word) 4096
  if((byte~) animate::$2==(byte) 40) goto animate::@1
  to:animate::@2
animate::@1: from animate
  *((word) 4096) ← (byte) 0
  to:animate::@2
animate::@2: from animate animate::@1
  (byte~) animate::$4 ← * (word) 4352
  (byte~) animate::$5 ← (byte~) animate::$4 + (byte) 1
  *((word) 4352) ← (byte~) animate::$5
  (byte~) animate::$6 ← * (word) 4352
  if((byte~) animate::$6==(byte) 25) goto animate::@3
  to:animate::@4
animate::@3: from animate::@2
  *((word) 4352) ← (byte) 0
  to:animate::@4
animate::@4: from animate::@2 animate::@3
  (byte~) animate::$8 ← * (word) 4097
  (byte~) animate::$9 ← (byte~) animate::$8 - (byte) 1
  *((word) 4097) ← (byte~) animate::$9
  (byte~) animate::$10 ← * (word) 4097
  if((byte~) animate::$10==(byte) 255) goto animate::@5
  to:animate::@6
animate::@5: from animate::@4
  *((word) 4097) ← (byte) 40
  to:animate::@6
animate::@6: from animate::@4 animate::@5
  (byte~) animate::$12 ← * (word) 4354
  (byte~) animate::$13 ← (byte~) animate::$12 + (byte) 1
  *((word) 4354) ← (byte~) animate::$13
  (byte~) animate::$14 ← * (word) 4354
  if((byte~) animate::$14==(byte) 25) goto animate::@7
  to:animate::@8
animate::@7: from animate::@6
  *((word) 4354) ← (byte) 0
  to:animate::@8
animate::@8: from animate::@6 animate::@7
  (byte~) animate::$16 ← * (word) 4355
  (byte~) animate::$17 ← (byte~) animate::$16 - (byte) 1
  *((word) 4355) ← (byte~) animate::$17
  (byte~) animate::$18 ← * (word) 4355
  if((byte~) animate::$18==(byte) 255) goto animate::@9
  to:animate::@return
animate::@9: from animate::@8
  *((word) 4355) ← (byte) 25
  (byte~) animate::$20 ← * (word) 4099
  (byte~) animate::$21 ← (byte~) animate::$20 + (byte) 7
  *((word) 4099) ← (byte~) animate::$21
  (byte~) animate::$22 ← * (word) 4099
  if((byte~) animate::$22>=(byte) 40) goto animate::@11
  to:animate::@return
animate::@11: from animate::@9
  (byte~) animate::$24 ← * (word) 4099
  (byte~) animate::$25 ← (byte~) animate::$24 - (byte) 40
  *((word) 4099) ← (byte~) animate::$25
  to:animate::@return
animate::@return: from animate::@11 animate::@8 animate::@9
  return 
  to:@RETURN
addpoint: from main main::@3 main::@4 main::@5 main::@6 main::@7
  (byte) addpoint::c#6 ← phi( main/(byte) 1 main::@3/(byte) 2 main::@4/(byte) 3 main::@5/(byte) 4 main::@6/(byte) 5 main::@7/(byte) 7 )
  (byte) addpoint::y#6 ← phi( main/(byte) 5 main::@3/(byte) 8 main::@4/(byte) 14 main::@5/(byte) 2 main::@6/(byte) 17 main::@7/(byte) 22 )
  (byte) numpoints#19 ← phi( main/(byte) 0 main::@3/(byte) numpoints#10 main::@4/(byte) numpoints#10 main::@5/(byte) numpoints#10 main::@6/(byte) numpoints#10 main::@7/(byte) numpoints#10 )
  (byte) addpoint::x#6 ← phi( main/(byte) 5 main::@3/(byte) 15 main::@4/(byte) 6 main::@5/(byte) 34 main::@6/(byte) 21 main::@7/(byte) 31 )
  *((word) 4096 + (byte) numpoints#19) ← (byte) addpoint::x#6
  *((word) 4352 + (byte) numpoints#19) ← (byte) addpoint::y#6
  *((word) 4608 + (byte) numpoints#19) ← (byte) addpoint::c#6
  (byte) numpoints#10 ← ++ (byte) numpoints#19
  to:addpoint::@return
addpoint::@return: from addpoint
  return 
  to:@RETURN
initscreen: from main::@8
  to:initscreen::@1
initscreen::@1: from initscreen initscreen::@1
  (byte*) initscreen::screen#2 ← phi( initscreen/(word) 1024 initscreen::@1/(byte*) initscreen::screen#1 )
  *((byte*) initscreen::screen#2) ← (byte) 230
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  if((byte*) initscreen::screen#1<(word) 2048) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: from initscreen::@1
  return 
  to:@RETURN
render: from main::@1
  (byte*) render::colline#0 ← (word) 55296
  to:render::@1
render::@1: from render render::@3
  (byte) numpoints#39 ← phi( render/(byte) numpoints#1 render::@3/(byte) numpoints#37 )
  (byte[256]) COLS#21 ← phi( render/(word) 4608 render::@3/(byte[256]) COLS#18 )
  (byte[256]) YPOS#26 ← phi( render/(word) 4352 render::@3/(byte[256]) YPOS#19 )
  (byte[256]) XPOS#29 ← phi( render/(word) 4096 render::@3/(byte[256]) XPOS#19 )
  (byte*) render::colline#5 ← phi( render/(byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#4 ← phi( render/(byte) 0 render::@3/(byte) render::y#1 )
  to:render::@2
render::@2: from render::@1 render::@5
  (byte) numpoints#37 ← phi( render::@1/(byte) numpoints#39 )
  (byte[256]) COLS#18 ← phi( render::@1/(byte[256]) COLS#21 )
  (byte[256]) YPOS#19 ← phi( render::@1/(byte[256]) YPOS#26 )
  (byte[256]) XPOS#19 ← phi( render::@1/(byte[256]) XPOS#29 )
  (byte*) render::colline#2 ← phi( render::@1/(byte*) render::colline#5 )
  (byte) render::y#2 ← phi( render::@1/(byte) render::y#4 )
  (byte) render::x#2 ← phi( render::@1/(byte) 0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  to:render::@5
render::@5: from render::@2
  (byte) render::col#0 ← (byte) findcol::return#0
  *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#2
  if((byte) render::x#1<(byte) 40) goto render::@2
  to:render::@3
render::@3: from render::@5
  (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40
  (byte) render::y#1 ← ++ (byte) render::y#2
  if((byte) render::y#1<(byte) 25) goto render::@1
  to:render::@return
render::@return: from render::@3
  return 
  to:@RETURN
findcol: from render::@2
  to:findcol::@1
findcol::@1: from findcol findcol::@13
  (byte) findcol::mincol#11 ← phi( findcol/(byte) 0 findcol::@13/(byte) findcol::mincol#2 )
  (byte) numpoints#35 ← phi( findcol/(byte) numpoints#37 )
  (byte[256]) COLS#16 ← phi( findcol/(byte[256]) COLS#18 )
  (byte) findcol::mindiff#10 ← phi( findcol/(byte) 255 findcol::@13/(byte) findcol::mindiff#11 )
  (byte) findcol::y#1 ← phi( findcol/(byte) findcol::y#0 )
  (byte) findcol::x#1 ← phi( findcol/(byte) findcol::x#0 )
  (byte[256]) YPOS#39 ← phi( findcol/(byte[256]) YPOS#19 )
  (byte) findcol::i#12 ← phi( findcol/(byte) 0 findcol::@13/(byte) findcol::i#1 )
  (byte[256]) XPOS#40 ← phi( findcol/(byte[256]) XPOS#19 )
  (byte) findcol::xp#0 ← (byte[256]) XPOS#40 *idx (byte) findcol::i#12
  (byte) findcol::yp#0 ← (byte[256]) YPOS#39 *idx (byte) findcol::i#12
  if((byte) findcol::x#1==(byte) findcol::xp#0) goto findcol::@2
  to:findcol::@3
findcol::@2: from findcol::@1
  if((byte) findcol::y#1==(byte) findcol::yp#0) goto findcol::@return
  to:findcol::@3
findcol::@3: from findcol::@1 findcol::@2
  if((byte) findcol::x#1<(byte) findcol::xp#0) goto findcol::@6
  to:findcol::@7
findcol::@return: from findcol::@13 findcol::@2
  (byte) findcol::return#0 ← phi( findcol::@13/(byte) findcol::mincol#2 findcol::@2/(byte) 0 )
  return 
  to:@RETURN
findcol::@6: from findcol::@3
  (byte) findcol::diff#0 ← (byte) findcol::xp#0 - (byte) findcol::x#1
  to:findcol::@8
findcol::@7: from findcol::@3
  (byte) findcol::diff#1 ← (byte) findcol::x#1 - (byte) findcol::xp#0
  to:findcol::@8
findcol::@8: from findcol::@6 findcol::@7
  (byte) findcol::diff#4 ← phi( findcol::@6/(byte) findcol::diff#0 findcol::@7/(byte) findcol::diff#1 )
  if((byte) findcol::y#1<(byte) findcol::yp#0) goto findcol::@9
  to:findcol::@10
findcol::@9: from findcol::@8
  (byte~) findcol::$8 ← (byte) findcol::yp#0 - (byte) findcol::y#1
  (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$8
  to:findcol::@11
findcol::@10: from findcol::@8
  (byte~) findcol::$10 ← (byte) findcol::y#1 - (byte) findcol::yp#0
  (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$10
  to:findcol::@11
findcol::@11: from findcol::@10 findcol::@9
  (byte) findcol::diff#6 ← phi( findcol::@10/(byte) findcol::diff#3 findcol::@9/(byte) findcol::diff#2 )
  if((byte) findcol::diff#6<(byte) findcol::mindiff#10) goto findcol::@12
  to:findcol::@13
findcol::@12: from findcol::@11
  (byte) findcol::mincol#1 ← (byte[256]) COLS#16 *idx (byte) findcol::i#12
  to:findcol::@13
findcol::@13: from findcol::@11 findcol::@12
  (byte) findcol::mindiff#11 ← phi( findcol::@11/(byte) findcol::mindiff#10 findcol::@12/(byte) findcol::diff#6 )
  (byte) findcol::mincol#2 ← phi( findcol::@11/(byte) findcol::mincol#11 findcol::@12/(byte) findcol::mincol#1 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#12
  if((byte) findcol::i#1<(byte) numpoints#35) goto findcol::@1
  to:findcol::@return
@END: from @BEGIN

Not aliassing across scopes: findcol::x#0 render::x#2
Not aliassing across scopes: findcol::y#0 render::y#2
Not aliassing across scopes: render::col#0 findcol::return#0
Alias (byte) numpoints#1 = (byte) numpoints#10 
Alias (byte) render::y#2 = (byte) render::y#4 
Alias (byte*) render::colline#2 = (byte*) render::colline#5 
Alias (byte[256]) XPOS#19 = (byte[256]) XPOS#29 (byte[256]) XPOS#40 
Alias (byte[256]) YPOS#19 = (byte[256]) YPOS#26 (byte[256]) YPOS#39 
Alias (byte[256]) COLS#16 = (byte[256]) COLS#18 (byte[256]) COLS#21 
Alias (byte) numpoints#35 = (byte) numpoints#37 (byte) numpoints#39 
Alias (byte) findcol::x#0 = (byte) findcol::x#1 
Alias (byte) findcol::y#0 = (byte) findcol::y#1 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@BEGIN: from
  call main param-assignment
  to:@END
main: from @BEGIN
  call addpoint param-assignment
  to:main::@3
main::@3: from main
  call addpoint param-assignment
  to:main::@4
main::@4: from main::@3
  call addpoint param-assignment
  to:main::@5
main::@5: from main::@4
  call addpoint param-assignment
  to:main::@6
main::@6: from main::@5
  call addpoint param-assignment
  to:main::@7
main::@7: from main::@6
  call addpoint param-assignment
  to:main::@8
main::@8: from main::@7
  call initscreen param-assignment
  to:main::@1
main::@1: from main::@11 main::@8
  call render param-assignment
  to:main::@10
main::@10: from main::@1
  call animate param-assignment
  to:main::@11
main::@11: from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: from main::@11
  return 
  to:@RETURN
animate: from main::@10
  (byte~) animate::$0 ← * (word) 4096
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((word) 4096) ← (byte~) animate::$1
  (byte~) animate::$2 ← * (word) 4096
  if((byte~) animate::$2==(byte) 40) goto animate::@1
  to:animate::@2
animate::@1: from animate
  *((word) 4096) ← (byte) 0
  to:animate::@2
animate::@2: from animate animate::@1
  (byte~) animate::$4 ← * (word) 4352
  (byte~) animate::$5 ← (byte~) animate::$4 + (byte) 1
  *((word) 4352) ← (byte~) animate::$5
  (byte~) animate::$6 ← * (word) 4352
  if((byte~) animate::$6==(byte) 25) goto animate::@3
  to:animate::@4
animate::@3: from animate::@2
  *((word) 4352) ← (byte) 0
  to:animate::@4
animate::@4: from animate::@2 animate::@3
  (byte~) animate::$8 ← * (word) 4097
  (byte~) animate::$9 ← (byte~) animate::$8 - (byte) 1
  *((word) 4097) ← (byte~) animate::$9
  (byte~) animate::$10 ← * (word) 4097
  if((byte~) animate::$10==(byte) 255) goto animate::@5
  to:animate::@6
animate::@5: from animate::@4
  *((word) 4097) ← (byte) 40
  to:animate::@6
animate::@6: from animate::@4 animate::@5
  (byte~) animate::$12 ← * (word) 4354
  (byte~) animate::$13 ← (byte~) animate::$12 + (byte) 1
  *((word) 4354) ← (byte~) animate::$13
  (byte~) animate::$14 ← * (word) 4354
  if((byte~) animate::$14==(byte) 25) goto animate::@7
  to:animate::@8
animate::@7: from animate::@6
  *((word) 4354) ← (byte) 0
  to:animate::@8
animate::@8: from animate::@6 animate::@7
  (byte~) animate::$16 ← * (word) 4355
  (byte~) animate::$17 ← (byte~) animate::$16 - (byte) 1
  *((word) 4355) ← (byte~) animate::$17
  (byte~) animate::$18 ← * (word) 4355
  if((byte~) animate::$18==(byte) 255) goto animate::@9
  to:animate::@return
animate::@9: from animate::@8
  *((word) 4355) ← (byte) 25
  (byte~) animate::$20 ← * (word) 4099
  (byte~) animate::$21 ← (byte~) animate::$20 + (byte) 7
  *((word) 4099) ← (byte~) animate::$21
  (byte~) animate::$22 ← * (word) 4099
  if((byte~) animate::$22>=(byte) 40) goto animate::@11
  to:animate::@return
animate::@11: from animate::@9
  (byte~) animate::$24 ← * (word) 4099
  (byte~) animate::$25 ← (byte~) animate::$24 - (byte) 40
  *((word) 4099) ← (byte~) animate::$25
  to:animate::@return
animate::@return: from animate::@11 animate::@8 animate::@9
  return 
  to:@RETURN
addpoint: from main main::@3 main::@4 main::@5 main::@6 main::@7
  (byte) addpoint::c#6 ← phi( main/(byte) 1 main::@3/(byte) 2 main::@4/(byte) 3 main::@5/(byte) 4 main::@6/(byte) 5 main::@7/(byte) 7 )
  (byte) addpoint::y#6 ← phi( main/(byte) 5 main::@3/(byte) 8 main::@4/(byte) 14 main::@5/(byte) 2 main::@6/(byte) 17 main::@7/(byte) 22 )
  (byte) numpoints#19 ← phi( main/(byte) 0 main::@3/(byte) numpoints#1 main::@4/(byte) numpoints#1 main::@5/(byte) numpoints#1 main::@6/(byte) numpoints#1 main::@7/(byte) numpoints#1 )
  (byte) addpoint::x#6 ← phi( main/(byte) 5 main::@3/(byte) 15 main::@4/(byte) 6 main::@5/(byte) 34 main::@6/(byte) 21 main::@7/(byte) 31 )
  *((word) 4096 + (byte) numpoints#19) ← (byte) addpoint::x#6
  *((word) 4352 + (byte) numpoints#19) ← (byte) addpoint::y#6
  *((word) 4608 + (byte) numpoints#19) ← (byte) addpoint::c#6
  (byte) numpoints#1 ← ++ (byte) numpoints#19
  to:addpoint::@return
addpoint::@return: from addpoint
  return 
  to:@RETURN
initscreen: from main::@8
  to:initscreen::@1
initscreen::@1: from initscreen initscreen::@1
  (byte*) initscreen::screen#2 ← phi( initscreen/(word) 1024 initscreen::@1/(byte*) initscreen::screen#1 )
  *((byte*) initscreen::screen#2) ← (byte) 230
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  if((byte*) initscreen::screen#1<(word) 2048) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: from initscreen::@1
  return 
  to:@RETURN
render: from main::@1
  (byte*) render::colline#0 ← (word) 55296
  to:render::@1
render::@1: from render render::@3
  (byte) numpoints#35 ← phi( render/(byte) numpoints#1 render::@3/(byte) numpoints#35 )
  (byte[256]) COLS#16 ← phi( render/(word) 4608 render::@3/(byte[256]) COLS#16 )
  (byte[256]) YPOS#19 ← phi( render/(word) 4352 render::@3/(byte[256]) YPOS#19 )
  (byte[256]) XPOS#19 ← phi( render/(word) 4096 render::@3/(byte[256]) XPOS#19 )
  (byte*) render::colline#2 ← phi( render/(byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#2 ← phi( render/(byte) 0 render::@3/(byte) render::y#1 )
  to:render::@2
render::@2: from render::@1 render::@5
  (byte) render::x#2 ← phi( render::@1/(byte) 0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  to:render::@5
render::@5: from render::@2
  (byte) render::col#0 ← (byte) findcol::return#0
  *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#2
  if((byte) render::x#1<(byte) 40) goto render::@2
  to:render::@3
render::@3: from render::@5
  (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40
  (byte) render::y#1 ← ++ (byte) render::y#2
  if((byte) render::y#1<(byte) 25) goto render::@1
  to:render::@return
render::@return: from render::@3
  return 
  to:@RETURN
findcol: from render::@2
  to:findcol::@1
findcol::@1: from findcol findcol::@13
  (byte) findcol::mincol#11 ← phi( findcol/(byte) 0 findcol::@13/(byte) findcol::mincol#2 )
  (byte) findcol::mindiff#10 ← phi( findcol/(byte) 255 findcol::@13/(byte) findcol::mindiff#11 )
  (byte) findcol::i#12 ← phi( findcol/(byte) 0 findcol::@13/(byte) findcol::i#1 )
  (byte) findcol::xp#0 ← (byte[256]) XPOS#19 *idx (byte) findcol::i#12
  (byte) findcol::yp#0 ← (byte[256]) YPOS#19 *idx (byte) findcol::i#12
  if((byte) findcol::x#0==(byte) findcol::xp#0) goto findcol::@2
  to:findcol::@3
findcol::@2: from findcol::@1
  if((byte) findcol::y#0==(byte) findcol::yp#0) goto findcol::@return
  to:findcol::@3
findcol::@3: from findcol::@1 findcol::@2
  if((byte) findcol::x#0<(byte) findcol::xp#0) goto findcol::@6
  to:findcol::@7
findcol::@return: from findcol::@13 findcol::@2
  (byte) findcol::return#0 ← phi( findcol::@13/(byte) findcol::mincol#2 findcol::@2/(byte) 0 )
  return 
  to:@RETURN
findcol::@6: from findcol::@3
  (byte) findcol::diff#0 ← (byte) findcol::xp#0 - (byte) findcol::x#0
  to:findcol::@8
findcol::@7: from findcol::@3
  (byte) findcol::diff#1 ← (byte) findcol::x#0 - (byte) findcol::xp#0
  to:findcol::@8
findcol::@8: from findcol::@6 findcol::@7
  (byte) findcol::diff#4 ← phi( findcol::@6/(byte) findcol::diff#0 findcol::@7/(byte) findcol::diff#1 )
  if((byte) findcol::y#0<(byte) findcol::yp#0) goto findcol::@9
  to:findcol::@10
findcol::@9: from findcol::@8
  (byte~) findcol::$8 ← (byte) findcol::yp#0 - (byte) findcol::y#0
  (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$8
  to:findcol::@11
findcol::@10: from findcol::@8
  (byte~) findcol::$10 ← (byte) findcol::y#0 - (byte) findcol::yp#0
  (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$10
  to:findcol::@11
findcol::@11: from findcol::@10 findcol::@9
  (byte) findcol::diff#6 ← phi( findcol::@10/(byte) findcol::diff#3 findcol::@9/(byte) findcol::diff#2 )
  if((byte) findcol::diff#6<(byte) findcol::mindiff#10) goto findcol::@12
  to:findcol::@13
findcol::@12: from findcol::@11
  (byte) findcol::mincol#1 ← (byte[256]) COLS#16 *idx (byte) findcol::i#12
  to:findcol::@13
findcol::@13: from findcol::@11 findcol::@12
  (byte) findcol::mindiff#11 ← phi( findcol::@11/(byte) findcol::mindiff#10 findcol::@12/(byte) findcol::diff#6 )
  (byte) findcol::mincol#2 ← phi( findcol::@11/(byte) findcol::mincol#11 findcol::@12/(byte) findcol::mincol#1 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#12
  if((byte) findcol::i#1<(byte) numpoints#35) goto findcol::@1
  to:findcol::@return
@END: from @BEGIN

Self Phi Eliminated (byte[256]) XPOS#19
Self Phi Eliminated (byte[256]) YPOS#19
Self Phi Eliminated (byte[256]) COLS#16
Self Phi Eliminated (byte) numpoints#35
Succesful SSA optimization Pass2SelfPhiElimination
CONTROL FLOW GRAPH
@BEGIN: from
  call main param-assignment
  to:@END
main: from @BEGIN
  call addpoint param-assignment
  to:main::@3
main::@3: from main
  call addpoint param-assignment
  to:main::@4
main::@4: from main::@3
  call addpoint param-assignment
  to:main::@5
main::@5: from main::@4
  call addpoint param-assignment
  to:main::@6
main::@6: from main::@5
  call addpoint param-assignment
  to:main::@7
main::@7: from main::@6
  call addpoint param-assignment
  to:main::@8
main::@8: from main::@7
  call initscreen param-assignment
  to:main::@1
main::@1: from main::@11 main::@8
  call render param-assignment
  to:main::@10
main::@10: from main::@1
  call animate param-assignment
  to:main::@11
main::@11: from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: from main::@11
  return 
  to:@RETURN
animate: from main::@10
  (byte~) animate::$0 ← * (word) 4096
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((word) 4096) ← (byte~) animate::$1
  (byte~) animate::$2 ← * (word) 4096
  if((byte~) animate::$2==(byte) 40) goto animate::@1
  to:animate::@2
animate::@1: from animate
  *((word) 4096) ← (byte) 0
  to:animate::@2
animate::@2: from animate animate::@1
  (byte~) animate::$4 ← * (word) 4352
  (byte~) animate::$5 ← (byte~) animate::$4 + (byte) 1
  *((word) 4352) ← (byte~) animate::$5
  (byte~) animate::$6 ← * (word) 4352
  if((byte~) animate::$6==(byte) 25) goto animate::@3
  to:animate::@4
animate::@3: from animate::@2
  *((word) 4352) ← (byte) 0
  to:animate::@4
animate::@4: from animate::@2 animate::@3
  (byte~) animate::$8 ← * (word) 4097
  (byte~) animate::$9 ← (byte~) animate::$8 - (byte) 1
  *((word) 4097) ← (byte~) animate::$9
  (byte~) animate::$10 ← * (word) 4097
  if((byte~) animate::$10==(byte) 255) goto animate::@5
  to:animate::@6
animate::@5: from animate::@4
  *((word) 4097) ← (byte) 40
  to:animate::@6
animate::@6: from animate::@4 animate::@5
  (byte~) animate::$12 ← * (word) 4354
  (byte~) animate::$13 ← (byte~) animate::$12 + (byte) 1
  *((word) 4354) ← (byte~) animate::$13
  (byte~) animate::$14 ← * (word) 4354
  if((byte~) animate::$14==(byte) 25) goto animate::@7
  to:animate::@8
animate::@7: from animate::@6
  *((word) 4354) ← (byte) 0
  to:animate::@8
animate::@8: from animate::@6 animate::@7
  (byte~) animate::$16 ← * (word) 4355
  (byte~) animate::$17 ← (byte~) animate::$16 - (byte) 1
  *((word) 4355) ← (byte~) animate::$17
  (byte~) animate::$18 ← * (word) 4355
  if((byte~) animate::$18==(byte) 255) goto animate::@9
  to:animate::@return
animate::@9: from animate::@8
  *((word) 4355) ← (byte) 25
  (byte~) animate::$20 ← * (word) 4099
  (byte~) animate::$21 ← (byte~) animate::$20 + (byte) 7
  *((word) 4099) ← (byte~) animate::$21
  (byte~) animate::$22 ← * (word) 4099
  if((byte~) animate::$22>=(byte) 40) goto animate::@11
  to:animate::@return
animate::@11: from animate::@9
  (byte~) animate::$24 ← * (word) 4099
  (byte~) animate::$25 ← (byte~) animate::$24 - (byte) 40
  *((word) 4099) ← (byte~) animate::$25
  to:animate::@return
animate::@return: from animate::@11 animate::@8 animate::@9
  return 
  to:@RETURN
addpoint: from main main::@3 main::@4 main::@5 main::@6 main::@7
  (byte) addpoint::c#6 ← phi( main/(byte) 1 main::@3/(byte) 2 main::@4/(byte) 3 main::@5/(byte) 4 main::@6/(byte) 5 main::@7/(byte) 7 )
  (byte) addpoint::y#6 ← phi( main/(byte) 5 main::@3/(byte) 8 main::@4/(byte) 14 main::@5/(byte) 2 main::@6/(byte) 17 main::@7/(byte) 22 )
  (byte) numpoints#19 ← phi( main/(byte) 0 main::@3/(byte) numpoints#1 main::@4/(byte) numpoints#1 main::@5/(byte) numpoints#1 main::@6/(byte) numpoints#1 main::@7/(byte) numpoints#1 )
  (byte) addpoint::x#6 ← phi( main/(byte) 5 main::@3/(byte) 15 main::@4/(byte) 6 main::@5/(byte) 34 main::@6/(byte) 21 main::@7/(byte) 31 )
  *((word) 4096 + (byte) numpoints#19) ← (byte) addpoint::x#6
  *((word) 4352 + (byte) numpoints#19) ← (byte) addpoint::y#6
  *((word) 4608 + (byte) numpoints#19) ← (byte) addpoint::c#6
  (byte) numpoints#1 ← ++ (byte) numpoints#19
  to:addpoint::@return
addpoint::@return: from addpoint
  return 
  to:@RETURN
initscreen: from main::@8
  to:initscreen::@1
initscreen::@1: from initscreen initscreen::@1
  (byte*) initscreen::screen#2 ← phi( initscreen/(word) 1024 initscreen::@1/(byte*) initscreen::screen#1 )
  *((byte*) initscreen::screen#2) ← (byte) 230
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  if((byte*) initscreen::screen#1<(word) 2048) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: from initscreen::@1
  return 
  to:@RETURN
render: from main::@1
  (byte*) render::colline#0 ← (word) 55296
  to:render::@1
render::@1: from render render::@3
  (byte) numpoints#35 ← phi( render/(byte) numpoints#1 )
  (byte[256]) COLS#16 ← phi( render/(word) 4608 )
  (byte[256]) YPOS#19 ← phi( render/(word) 4352 )
  (byte[256]) XPOS#19 ← phi( render/(word) 4096 )
  (byte*) render::colline#2 ← phi( render/(byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#2 ← phi( render/(byte) 0 render::@3/(byte) render::y#1 )
  to:render::@2
render::@2: from render::@1 render::@5
  (byte) render::x#2 ← phi( render::@1/(byte) 0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  to:render::@5
render::@5: from render::@2
  (byte) render::col#0 ← (byte) findcol::return#0
  *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#2
  if((byte) render::x#1<(byte) 40) goto render::@2
  to:render::@3
render::@3: from render::@5
  (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40
  (byte) render::y#1 ← ++ (byte) render::y#2
  if((byte) render::y#1<(byte) 25) goto render::@1
  to:render::@return
render::@return: from render::@3
  return 
  to:@RETURN
findcol: from render::@2
  to:findcol::@1
findcol::@1: from findcol findcol::@13
  (byte) findcol::mincol#11 ← phi( findcol/(byte) 0 findcol::@13/(byte) findcol::mincol#2 )
  (byte) findcol::mindiff#10 ← phi( findcol/(byte) 255 findcol::@13/(byte) findcol::mindiff#11 )
  (byte) findcol::i#12 ← phi( findcol/(byte) 0 findcol::@13/(byte) findcol::i#1 )
  (byte) findcol::xp#0 ← (byte[256]) XPOS#19 *idx (byte) findcol::i#12
  (byte) findcol::yp#0 ← (byte[256]) YPOS#19 *idx (byte) findcol::i#12
  if((byte) findcol::x#0==(byte) findcol::xp#0) goto findcol::@2
  to:findcol::@3
findcol::@2: from findcol::@1
  if((byte) findcol::y#0==(byte) findcol::yp#0) goto findcol::@return
  to:findcol::@3
findcol::@3: from findcol::@1 findcol::@2
  if((byte) findcol::x#0<(byte) findcol::xp#0) goto findcol::@6
  to:findcol::@7
findcol::@return: from findcol::@13 findcol::@2
  (byte) findcol::return#0 ← phi( findcol::@13/(byte) findcol::mincol#2 findcol::@2/(byte) 0 )
  return 
  to:@RETURN
findcol::@6: from findcol::@3
  (byte) findcol::diff#0 ← (byte) findcol::xp#0 - (byte) findcol::x#0
  to:findcol::@8
findcol::@7: from findcol::@3
  (byte) findcol::diff#1 ← (byte) findcol::x#0 - (byte) findcol::xp#0
  to:findcol::@8
findcol::@8: from findcol::@6 findcol::@7
  (byte) findcol::diff#4 ← phi( findcol::@6/(byte) findcol::diff#0 findcol::@7/(byte) findcol::diff#1 )
  if((byte) findcol::y#0<(byte) findcol::yp#0) goto findcol::@9
  to:findcol::@10
findcol::@9: from findcol::@8
  (byte~) findcol::$8 ← (byte) findcol::yp#0 - (byte) findcol::y#0
  (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$8
  to:findcol::@11
findcol::@10: from findcol::@8
  (byte~) findcol::$10 ← (byte) findcol::y#0 - (byte) findcol::yp#0
  (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$10
  to:findcol::@11
findcol::@11: from findcol::@10 findcol::@9
  (byte) findcol::diff#6 ← phi( findcol::@10/(byte) findcol::diff#3 findcol::@9/(byte) findcol::diff#2 )
  if((byte) findcol::diff#6<(byte) findcol::mindiff#10) goto findcol::@12
  to:findcol::@13
findcol::@12: from findcol::@11
  (byte) findcol::mincol#1 ← (byte[256]) COLS#16 *idx (byte) findcol::i#12
  to:findcol::@13
findcol::@13: from findcol::@11 findcol::@12
  (byte) findcol::mindiff#11 ← phi( findcol::@11/(byte) findcol::mindiff#10 findcol::@12/(byte) findcol::diff#6 )
  (byte) findcol::mincol#2 ← phi( findcol::@11/(byte) findcol::mincol#11 findcol::@12/(byte) findcol::mincol#1 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#12
  if((byte) findcol::i#1<(byte) numpoints#35) goto findcol::@1
  to:findcol::@return
@END: from @BEGIN

Constant (byte*) render::colline#0 (word) 55296
Constant (byte[256]) XPOS#19 (word) 4096
Constant (byte[256]) YPOS#19 (word) 4352
Constant (byte[256]) COLS#16 (word) 4608
Succesful SSA optimization Pass2ConstantPropagation
CONTROL FLOW GRAPH
@BEGIN: from
  call main param-assignment
  to:@END
main: from @BEGIN
  call addpoint param-assignment
  to:main::@3
main::@3: from main
  call addpoint param-assignment
  to:main::@4
main::@4: from main::@3
  call addpoint param-assignment
  to:main::@5
main::@5: from main::@4
  call addpoint param-assignment
  to:main::@6
main::@6: from main::@5
  call addpoint param-assignment
  to:main::@7
main::@7: from main::@6
  call addpoint param-assignment
  to:main::@8
main::@8: from main::@7
  call initscreen param-assignment
  to:main::@1
main::@1: from main::@11 main::@8
  call render param-assignment
  to:main::@10
main::@10: from main::@1
  call animate param-assignment
  to:main::@11
main::@11: from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: from main::@11
  return 
  to:@RETURN
animate: from main::@10
  (byte~) animate::$0 ← * (word) 4096
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((word) 4096) ← (byte~) animate::$1
  (byte~) animate::$2 ← * (word) 4096
  if((byte~) animate::$2==(byte) 40) goto animate::@1
  to:animate::@2
animate::@1: from animate
  *((word) 4096) ← (byte) 0
  to:animate::@2
animate::@2: from animate animate::@1
  (byte~) animate::$4 ← * (word) 4352
  (byte~) animate::$5 ← (byte~) animate::$4 + (byte) 1
  *((word) 4352) ← (byte~) animate::$5
  (byte~) animate::$6 ← * (word) 4352
  if((byte~) animate::$6==(byte) 25) goto animate::@3
  to:animate::@4
animate::@3: from animate::@2
  *((word) 4352) ← (byte) 0
  to:animate::@4
animate::@4: from animate::@2 animate::@3
  (byte~) animate::$8 ← * (word) 4097
  (byte~) animate::$9 ← (byte~) animate::$8 - (byte) 1
  *((word) 4097) ← (byte~) animate::$9
  (byte~) animate::$10 ← * (word) 4097
  if((byte~) animate::$10==(byte) 255) goto animate::@5
  to:animate::@6
animate::@5: from animate::@4
  *((word) 4097) ← (byte) 40
  to:animate::@6
animate::@6: from animate::@4 animate::@5
  (byte~) animate::$12 ← * (word) 4354
  (byte~) animate::$13 ← (byte~) animate::$12 + (byte) 1
  *((word) 4354) ← (byte~) animate::$13
  (byte~) animate::$14 ← * (word) 4354
  if((byte~) animate::$14==(byte) 25) goto animate::@7
  to:animate::@8
animate::@7: from animate::@6
  *((word) 4354) ← (byte) 0
  to:animate::@8
animate::@8: from animate::@6 animate::@7
  (byte~) animate::$16 ← * (word) 4355
  (byte~) animate::$17 ← (byte~) animate::$16 - (byte) 1
  *((word) 4355) ← (byte~) animate::$17
  (byte~) animate::$18 ← * (word) 4355
  if((byte~) animate::$18==(byte) 255) goto animate::@9
  to:animate::@return
animate::@9: from animate::@8
  *((word) 4355) ← (byte) 25
  (byte~) animate::$20 ← * (word) 4099
  (byte~) animate::$21 ← (byte~) animate::$20 + (byte) 7
  *((word) 4099) ← (byte~) animate::$21
  (byte~) animate::$22 ← * (word) 4099
  if((byte~) animate::$22>=(byte) 40) goto animate::@11
  to:animate::@return
animate::@11: from animate::@9
  (byte~) animate::$24 ← * (word) 4099
  (byte~) animate::$25 ← (byte~) animate::$24 - (byte) 40
  *((word) 4099) ← (byte~) animate::$25
  to:animate::@return
animate::@return: from animate::@11 animate::@8 animate::@9
  return 
  to:@RETURN
addpoint: from main main::@3 main::@4 main::@5 main::@6 main::@7
  (byte) addpoint::c#6 ← phi( main/(byte) 1 main::@3/(byte) 2 main::@4/(byte) 3 main::@5/(byte) 4 main::@6/(byte) 5 main::@7/(byte) 7 )
  (byte) addpoint::y#6 ← phi( main/(byte) 5 main::@3/(byte) 8 main::@4/(byte) 14 main::@5/(byte) 2 main::@6/(byte) 17 main::@7/(byte) 22 )
  (byte) numpoints#19 ← phi( main/(byte) 0 main::@3/(byte) numpoints#1 main::@4/(byte) numpoints#1 main::@5/(byte) numpoints#1 main::@6/(byte) numpoints#1 main::@7/(byte) numpoints#1 )
  (byte) addpoint::x#6 ← phi( main/(byte) 5 main::@3/(byte) 15 main::@4/(byte) 6 main::@5/(byte) 34 main::@6/(byte) 21 main::@7/(byte) 31 )
  *((word) 4096 + (byte) numpoints#19) ← (byte) addpoint::x#6
  *((word) 4352 + (byte) numpoints#19) ← (byte) addpoint::y#6
  *((word) 4608 + (byte) numpoints#19) ← (byte) addpoint::c#6
  (byte) numpoints#1 ← ++ (byte) numpoints#19
  to:addpoint::@return
addpoint::@return: from addpoint
  return 
  to:@RETURN
initscreen: from main::@8
  to:initscreen::@1
initscreen::@1: from initscreen initscreen::@1
  (byte*) initscreen::screen#2 ← phi( initscreen/(word) 1024 initscreen::@1/(byte*) initscreen::screen#1 )
  *((byte*) initscreen::screen#2) ← (byte) 230
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  if((byte*) initscreen::screen#1<(word) 2048) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: from initscreen::@1
  return 
  to:@RETURN
render: from main::@1
  to:render::@1
render::@1: from render render::@3
  (byte) numpoints#35 ← phi( render/(byte) numpoints#1 )
  (byte*) render::colline#2 ← phi( render/(word) 55296 render::@3/(byte*) render::colline#1 )
  (byte) render::y#2 ← phi( render/(byte) 0 render::@3/(byte) render::y#1 )
  to:render::@2
render::@2: from render::@1 render::@5
  (byte) render::x#2 ← phi( render::@1/(byte) 0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  to:render::@5
render::@5: from render::@2
  (byte) render::col#0 ← (byte) findcol::return#0
  *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#2
  if((byte) render::x#1<(byte) 40) goto render::@2
  to:render::@3
render::@3: from render::@5
  (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40
  (byte) render::y#1 ← ++ (byte) render::y#2
  if((byte) render::y#1<(byte) 25) goto render::@1
  to:render::@return
render::@return: from render::@3
  return 
  to:@RETURN
findcol: from render::@2
  to:findcol::@1
findcol::@1: from findcol findcol::@13
  (byte) findcol::mincol#11 ← phi( findcol/(byte) 0 findcol::@13/(byte) findcol::mincol#2 )
  (byte) findcol::mindiff#10 ← phi( findcol/(byte) 255 findcol::@13/(byte) findcol::mindiff#11 )
  (byte) findcol::i#12 ← phi( findcol/(byte) 0 findcol::@13/(byte) findcol::i#1 )
  (byte) findcol::xp#0 ← (word) 4096 *idx (byte) findcol::i#12
  (byte) findcol::yp#0 ← (word) 4352 *idx (byte) findcol::i#12
  if((byte) findcol::x#0==(byte) findcol::xp#0) goto findcol::@2
  to:findcol::@3
findcol::@2: from findcol::@1
  if((byte) findcol::y#0==(byte) findcol::yp#0) goto findcol::@return
  to:findcol::@3
findcol::@3: from findcol::@1 findcol::@2
  if((byte) findcol::x#0<(byte) findcol::xp#0) goto findcol::@6
  to:findcol::@7
findcol::@return: from findcol::@13 findcol::@2
  (byte) findcol::return#0 ← phi( findcol::@13/(byte) findcol::mincol#2 findcol::@2/(byte) 0 )
  return 
  to:@RETURN
findcol::@6: from findcol::@3
  (byte) findcol::diff#0 ← (byte) findcol::xp#0 - (byte) findcol::x#0
  to:findcol::@8
findcol::@7: from findcol::@3
  (byte) findcol::diff#1 ← (byte) findcol::x#0 - (byte) findcol::xp#0
  to:findcol::@8
findcol::@8: from findcol::@6 findcol::@7
  (byte) findcol::diff#4 ← phi( findcol::@6/(byte) findcol::diff#0 findcol::@7/(byte) findcol::diff#1 )
  if((byte) findcol::y#0<(byte) findcol::yp#0) goto findcol::@9
  to:findcol::@10
findcol::@9: from findcol::@8
  (byte~) findcol::$8 ← (byte) findcol::yp#0 - (byte) findcol::y#0
  (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$8
  to:findcol::@11
findcol::@10: from findcol::@8
  (byte~) findcol::$10 ← (byte) findcol::y#0 - (byte) findcol::yp#0
  (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$10
  to:findcol::@11
findcol::@11: from findcol::@10 findcol::@9
  (byte) findcol::diff#6 ← phi( findcol::@10/(byte) findcol::diff#3 findcol::@9/(byte) findcol::diff#2 )
  if((byte) findcol::diff#6<(byte) findcol::mindiff#10) goto findcol::@12
  to:findcol::@13
findcol::@12: from findcol::@11
  (byte) findcol::mincol#1 ← (word) 4608 *idx (byte) findcol::i#12
  to:findcol::@13
findcol::@13: from findcol::@11 findcol::@12
  (byte) findcol::mindiff#11 ← phi( findcol::@11/(byte) findcol::mindiff#10 findcol::@12/(byte) findcol::diff#6 )
  (byte) findcol::mincol#2 ← phi( findcol::@11/(byte) findcol::mincol#11 findcol::@12/(byte) findcol::mincol#1 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#12
  if((byte) findcol::i#1<(byte) numpoints#35) goto findcol::@1
  to:findcol::@return
@END: from @BEGIN

Multiple usages for variable. Not optimizing sub-constant (byte) findcol::i#12
Multiple usages for variable. Not optimizing sub-constant (byte) findcol::i#12
Multiple usages for variable. Not optimizing sub-constant (byte) findcol::i#12
Not aliassing across scopes: findcol::x#0 render::x#2
Not aliassing across scopes: findcol::y#0 render::y#2
Not aliassing across scopes: render::col#0 findcol::return#0
Alias (byte) numpoints#1 = (byte) numpoints#35 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@BEGIN: from
  call main param-assignment
  to:@END
main: from @BEGIN
  call addpoint param-assignment
  to:main::@3
main::@3: from main
  call addpoint param-assignment
  to:main::@4
main::@4: from main::@3
  call addpoint param-assignment
  to:main::@5
main::@5: from main::@4
  call addpoint param-assignment
  to:main::@6
main::@6: from main::@5
  call addpoint param-assignment
  to:main::@7
main::@7: from main::@6
  call addpoint param-assignment
  to:main::@8
main::@8: from main::@7
  call initscreen param-assignment
  to:main::@1
main::@1: from main::@11 main::@8
  call render param-assignment
  to:main::@10
main::@10: from main::@1
  call animate param-assignment
  to:main::@11
main::@11: from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: from main::@11
  return 
  to:@RETURN
animate: from main::@10
  (byte~) animate::$0 ← * (word) 4096
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((word) 4096) ← (byte~) animate::$1
  (byte~) animate::$2 ← * (word) 4096
  if((byte~) animate::$2==(byte) 40) goto animate::@1
  to:animate::@2
animate::@1: from animate
  *((word) 4096) ← (byte) 0
  to:animate::@2
animate::@2: from animate animate::@1
  (byte~) animate::$4 ← * (word) 4352
  (byte~) animate::$5 ← (byte~) animate::$4 + (byte) 1
  *((word) 4352) ← (byte~) animate::$5
  (byte~) animate::$6 ← * (word) 4352
  if((byte~) animate::$6==(byte) 25) goto animate::@3
  to:animate::@4
animate::@3: from animate::@2
  *((word) 4352) ← (byte) 0
  to:animate::@4
animate::@4: from animate::@2 animate::@3
  (byte~) animate::$8 ← * (word) 4097
  (byte~) animate::$9 ← (byte~) animate::$8 - (byte) 1
  *((word) 4097) ← (byte~) animate::$9
  (byte~) animate::$10 ← * (word) 4097
  if((byte~) animate::$10==(byte) 255) goto animate::@5
  to:animate::@6
animate::@5: from animate::@4
  *((word) 4097) ← (byte) 40
  to:animate::@6
animate::@6: from animate::@4 animate::@5
  (byte~) animate::$12 ← * (word) 4354
  (byte~) animate::$13 ← (byte~) animate::$12 + (byte) 1
  *((word) 4354) ← (byte~) animate::$13
  (byte~) animate::$14 ← * (word) 4354
  if((byte~) animate::$14==(byte) 25) goto animate::@7
  to:animate::@8
animate::@7: from animate::@6
  *((word) 4354) ← (byte) 0
  to:animate::@8
animate::@8: from animate::@6 animate::@7
  (byte~) animate::$16 ← * (word) 4355
  (byte~) animate::$17 ← (byte~) animate::$16 - (byte) 1
  *((word) 4355) ← (byte~) animate::$17
  (byte~) animate::$18 ← * (word) 4355
  if((byte~) animate::$18==(byte) 255) goto animate::@9
  to:animate::@return
animate::@9: from animate::@8
  *((word) 4355) ← (byte) 25
  (byte~) animate::$20 ← * (word) 4099
  (byte~) animate::$21 ← (byte~) animate::$20 + (byte) 7
  *((word) 4099) ← (byte~) animate::$21
  (byte~) animate::$22 ← * (word) 4099
  if((byte~) animate::$22>=(byte) 40) goto animate::@11
  to:animate::@return
animate::@11: from animate::@9
  (byte~) animate::$24 ← * (word) 4099
  (byte~) animate::$25 ← (byte~) animate::$24 - (byte) 40
  *((word) 4099) ← (byte~) animate::$25
  to:animate::@return
animate::@return: from animate::@11 animate::@8 animate::@9
  return 
  to:@RETURN
addpoint: from main main::@3 main::@4 main::@5 main::@6 main::@7
  (byte) addpoint::c#6 ← phi( main/(byte) 1 main::@3/(byte) 2 main::@4/(byte) 3 main::@5/(byte) 4 main::@6/(byte) 5 main::@7/(byte) 7 )
  (byte) addpoint::y#6 ← phi( main/(byte) 5 main::@3/(byte) 8 main::@4/(byte) 14 main::@5/(byte) 2 main::@6/(byte) 17 main::@7/(byte) 22 )
  (byte) numpoints#19 ← phi( main/(byte) 0 main::@3/(byte) numpoints#1 main::@4/(byte) numpoints#1 main::@5/(byte) numpoints#1 main::@6/(byte) numpoints#1 main::@7/(byte) numpoints#1 )
  (byte) addpoint::x#6 ← phi( main/(byte) 5 main::@3/(byte) 15 main::@4/(byte) 6 main::@5/(byte) 34 main::@6/(byte) 21 main::@7/(byte) 31 )
  *((word) 4096 + (byte) numpoints#19) ← (byte) addpoint::x#6
  *((word) 4352 + (byte) numpoints#19) ← (byte) addpoint::y#6
  *((word) 4608 + (byte) numpoints#19) ← (byte) addpoint::c#6
  (byte) numpoints#1 ← ++ (byte) numpoints#19
  to:addpoint::@return
addpoint::@return: from addpoint
  return 
  to:@RETURN
initscreen: from main::@8
  to:initscreen::@1
initscreen::@1: from initscreen initscreen::@1
  (byte*) initscreen::screen#2 ← phi( initscreen/(word) 1024 initscreen::@1/(byte*) initscreen::screen#1 )
  *((byte*) initscreen::screen#2) ← (byte) 230
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  if((byte*) initscreen::screen#1<(word) 2048) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: from initscreen::@1
  return 
  to:@RETURN
render: from main::@1
  to:render::@1
render::@1: from render render::@3
  (byte*) render::colline#2 ← phi( render/(word) 55296 render::@3/(byte*) render::colline#1 )
  (byte) render::y#2 ← phi( render/(byte) 0 render::@3/(byte) render::y#1 )
  to:render::@2
render::@2: from render::@1 render::@5
  (byte) render::x#2 ← phi( render::@1/(byte) 0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  to:render::@5
render::@5: from render::@2
  (byte) render::col#0 ← (byte) findcol::return#0
  *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#2
  if((byte) render::x#1<(byte) 40) goto render::@2
  to:render::@3
render::@3: from render::@5
  (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40
  (byte) render::y#1 ← ++ (byte) render::y#2
  if((byte) render::y#1<(byte) 25) goto render::@1
  to:render::@return
render::@return: from render::@3
  return 
  to:@RETURN
findcol: from render::@2
  to:findcol::@1
findcol::@1: from findcol findcol::@13
  (byte) findcol::mincol#11 ← phi( findcol/(byte) 0 findcol::@13/(byte) findcol::mincol#2 )
  (byte) findcol::mindiff#10 ← phi( findcol/(byte) 255 findcol::@13/(byte) findcol::mindiff#11 )
  (byte) findcol::i#12 ← phi( findcol/(byte) 0 findcol::@13/(byte) findcol::i#1 )
  (byte) findcol::xp#0 ← (word) 4096 *idx (byte) findcol::i#12
  (byte) findcol::yp#0 ← (word) 4352 *idx (byte) findcol::i#12
  if((byte) findcol::x#0==(byte) findcol::xp#0) goto findcol::@2
  to:findcol::@3
findcol::@2: from findcol::@1
  if((byte) findcol::y#0==(byte) findcol::yp#0) goto findcol::@return
  to:findcol::@3
findcol::@3: from findcol::@1 findcol::@2
  if((byte) findcol::x#0<(byte) findcol::xp#0) goto findcol::@6
  to:findcol::@7
findcol::@return: from findcol::@13 findcol::@2
  (byte) findcol::return#0 ← phi( findcol::@13/(byte) findcol::mincol#2 findcol::@2/(byte) 0 )
  return 
  to:@RETURN
findcol::@6: from findcol::@3
  (byte) findcol::diff#0 ← (byte) findcol::xp#0 - (byte) findcol::x#0
  to:findcol::@8
findcol::@7: from findcol::@3
  (byte) findcol::diff#1 ← (byte) findcol::x#0 - (byte) findcol::xp#0
  to:findcol::@8
findcol::@8: from findcol::@6 findcol::@7
  (byte) findcol::diff#4 ← phi( findcol::@6/(byte) findcol::diff#0 findcol::@7/(byte) findcol::diff#1 )
  if((byte) findcol::y#0<(byte) findcol::yp#0) goto findcol::@9
  to:findcol::@10
findcol::@9: from findcol::@8
  (byte~) findcol::$8 ← (byte) findcol::yp#0 - (byte) findcol::y#0
  (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$8
  to:findcol::@11
findcol::@10: from findcol::@8
  (byte~) findcol::$10 ← (byte) findcol::y#0 - (byte) findcol::yp#0
  (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$10
  to:findcol::@11
findcol::@11: from findcol::@10 findcol::@9
  (byte) findcol::diff#6 ← phi( findcol::@10/(byte) findcol::diff#3 findcol::@9/(byte) findcol::diff#2 )
  if((byte) findcol::diff#6<(byte) findcol::mindiff#10) goto findcol::@12
  to:findcol::@13
findcol::@12: from findcol::@11
  (byte) findcol::mincol#1 ← (word) 4608 *idx (byte) findcol::i#12
  to:findcol::@13
findcol::@13: from findcol::@11 findcol::@12
  (byte) findcol::mindiff#11 ← phi( findcol::@11/(byte) findcol::mindiff#10 findcol::@12/(byte) findcol::diff#6 )
  (byte) findcol::mincol#2 ← phi( findcol::@11/(byte) findcol::mincol#11 findcol::@12/(byte) findcol::mincol#1 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#12
  if((byte) findcol::i#1<(byte) numpoints#1) goto findcol::@1
  to:findcol::@return
@END: from @BEGIN

Multiple usages for variable. Not optimizing sub-constant (byte) findcol::i#12
Multiple usages for variable. Not optimizing sub-constant (byte) findcol::i#12
Multiple usages for variable. Not optimizing sub-constant (byte) findcol::i#12
Not aliassing across scopes: findcol::x#0 render::x#2
Not aliassing across scopes: findcol::y#0 render::y#2
Not aliassing across scopes: render::col#0 findcol::return#0
Block Sequence Planned @BEGIN @END main main::@3 main::@4 main::@5 main::@6 main::@7 main::@8 main::@1 main::@10 main::@11 main::@return animate animate::@2 animate::@4 animate::@6 animate::@8 animate::@return animate::@9 animate::@11 animate::@7 animate::@5 animate::@3 animate::@1 render render::@1 render::@2 render::@5 render::@3 render::@return findcol findcol::@1 findcol::@3 findcol::@7 findcol::@8 findcol::@10 findcol::@11 findcol::@13 findcol::@return findcol::@12 findcol::@9 findcol::@6 findcol::@2 initscreen initscreen::@1 initscreen::@return addpoint addpoint::@return 
Added new block during phi lifting render::@6(between render::@3 and render::@1)
Added new block during phi lifting render::@7(between render::@5 and render::@2)
Added new block during phi lifting findcol::@29(between findcol::@13 and findcol::@1)
Added new block during phi lifting findcol::@30(between findcol::@11 and findcol::@13)
Added new block during phi lifting findcol::@31(between findcol::@13 and findcol::@return)
Added new block during phi lifting initscreen::@3(between initscreen::@1 and initscreen::@1)
Block Sequence Planned @BEGIN @END main main::@3 main::@4 main::@5 main::@6 main::@7 main::@8 main::@1 main::@10 main::@11 main::@return animate animate::@2 animate::@4 animate::@6 animate::@8 animate::@return animate::@9 animate::@11 animate::@7 animate::@5 animate::@3 animate::@1 render render::@1 render::@2 render::@5 render::@3 render::@return render::@6 render::@7 findcol findcol::@1 findcol::@3 findcol::@7 findcol::@8 findcol::@10 findcol::@11 findcol::@30 findcol::@13 findcol::@31 findcol::@return findcol::@29 findcol::@12 findcol::@9 findcol::@6 findcol::@2 initscreen initscreen::@1 initscreen::@return initscreen::@3 addpoint addpoint::@return 
CONTROL FLOW GRAPH - PHI LIFTED
@BEGIN: from
  call main param-assignment
  to:@END
@END: from @BEGIN
main: from @BEGIN
  call addpoint param-assignment
  to:main::@3
main::@3: from main
  (byte~) numpoints#43 ← (byte) numpoints#1
  call addpoint param-assignment
  to:main::@4
main::@4: from main::@3
  (byte~) numpoints#44 ← (byte) numpoints#1
  call addpoint param-assignment
  to:main::@5
main::@5: from main::@4
  (byte~) numpoints#45 ← (byte) numpoints#1
  call addpoint param-assignment
  to:main::@6
main::@6: from main::@5
  (byte~) numpoints#46 ← (byte) numpoints#1
  call addpoint param-assignment
  to:main::@7
main::@7: from main::@6
  (byte~) numpoints#47 ← (byte) numpoints#1
  call addpoint param-assignment
  to:main::@8
main::@8: from main::@7
  call initscreen param-assignment
  to:main::@1
main::@1: from main::@11 main::@8
  call render param-assignment
  to:main::@10
main::@10: from main::@1
  call animate param-assignment
  to:main::@11
main::@11: from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: from main::@11
  return 
  to:@RETURN
animate: from main::@10
  (byte~) animate::$0 ← * (word) 4096
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((word) 4096) ← (byte~) animate::$1
  (byte~) animate::$2 ← * (word) 4096
  if((byte~) animate::$2==(byte) 40) goto animate::@1
  to:animate::@2
animate::@2: from animate animate::@1
  (byte~) animate::$4 ← * (word) 4352
  (byte~) animate::$5 ← (byte~) animate::$4 + (byte) 1
  *((word) 4352) ← (byte~) animate::$5
  (byte~) animate::$6 ← * (word) 4352
  if((byte~) animate::$6==(byte) 25) goto animate::@3
  to:animate::@4
animate::@4: from animate::@2 animate::@3
  (byte~) animate::$8 ← * (word) 4097
  (byte~) animate::$9 ← (byte~) animate::$8 - (byte) 1
  *((word) 4097) ← (byte~) animate::$9
  (byte~) animate::$10 ← * (word) 4097
  if((byte~) animate::$10==(byte) 255) goto animate::@5
  to:animate::@6
animate::@6: from animate::@4 animate::@5
  (byte~) animate::$12 ← * (word) 4354
  (byte~) animate::$13 ← (byte~) animate::$12 + (byte) 1
  *((word) 4354) ← (byte~) animate::$13
  (byte~) animate::$14 ← * (word) 4354
  if((byte~) animate::$14==(byte) 25) goto animate::@7
  to:animate::@8
animate::@8: from animate::@6 animate::@7
  (byte~) animate::$16 ← * (word) 4355
  (byte~) animate::$17 ← (byte~) animate::$16 - (byte) 1
  *((word) 4355) ← (byte~) animate::$17
  (byte~) animate::$18 ← * (word) 4355
  if((byte~) animate::$18==(byte) 255) goto animate::@9
  to:animate::@return
animate::@return: from animate::@11 animate::@8 animate::@9
  return 
  to:@RETURN
animate::@9: from animate::@8
  *((word) 4355) ← (byte) 25
  (byte~) animate::$20 ← * (word) 4099
  (byte~) animate::$21 ← (byte~) animate::$20 + (byte) 7
  *((word) 4099) ← (byte~) animate::$21
  (byte~) animate::$22 ← * (word) 4099
  if((byte~) animate::$22>=(byte) 40) goto animate::@11
  to:animate::@return
animate::@11: from animate::@9
  (byte~) animate::$24 ← * (word) 4099
  (byte~) animate::$25 ← (byte~) animate::$24 - (byte) 40
  *((word) 4099) ← (byte~) animate::$25
  to:animate::@return
animate::@7: from animate::@6
  *((word) 4354) ← (byte) 0
  to:animate::@8
animate::@5: from animate::@4
  *((word) 4097) ← (byte) 40
  to:animate::@6
animate::@3: from animate::@2
  *((word) 4352) ← (byte) 0
  to:animate::@4
animate::@1: from animate
  *((word) 4096) ← (byte) 0
  to:animate::@2
render: from main::@1
  to:render::@1
render::@1: from render render::@6
  (byte*) render::colline#2 ← phi( render/(word) 55296 render::@6/(byte*~) render::colline#6 )
  (byte) render::y#2 ← phi( render/(byte) 0 render::@6/(byte~) render::y#6 )
  to:render::@2
render::@2: from render::@1 render::@7
  (byte) render::x#2 ← phi( render::@1/(byte) 0 render::@7/(byte~) render::x#4 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  to:render::@5
render::@5: from render::@2
  (byte) render::col#0 ← (byte) findcol::return#0
  *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#2
  if((byte) render::x#1<(byte) 40) goto render::@7
  to:render::@3
render::@3: from render::@5
  (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40
  (byte) render::y#1 ← ++ (byte) render::y#2
  if((byte) render::y#1<(byte) 25) goto render::@6
  to:render::@return
render::@return: from render::@3
  return 
  to:@RETURN
render::@6: from render::@3
  (byte~) render::y#6 ← (byte) render::y#1
  (byte*~) render::colline#6 ← (byte*) render::colline#1
  to:render::@1
render::@7: from render::@5
  (byte~) render::x#4 ← (byte) render::x#1
  to:render::@2
findcol: from render::@2
  to:findcol::@1
findcol::@1: from findcol findcol::@29
  (byte) findcol::mincol#11 ← phi( findcol/(byte) 0 findcol::@29/(byte~) findcol::mincol#13 )
  (byte) findcol::mindiff#10 ← phi( findcol/(byte) 255 findcol::@29/(byte~) findcol::mindiff#12 )
  (byte) findcol::i#12 ← phi( findcol/(byte) 0 findcol::@29/(byte~) findcol::i#13 )
  (byte) findcol::xp#0 ← (word) 4096 *idx (byte) findcol::i#12
  (byte) findcol::yp#0 ← (word) 4352 *idx (byte) findcol::i#12
  if((byte) findcol::x#0==(byte) findcol::xp#0) goto findcol::@2
  to:findcol::@3
findcol::@3: from findcol::@1 findcol::@2
  if((byte) findcol::x#0<(byte) findcol::xp#0) goto findcol::@6
  to:findcol::@7
findcol::@7: from findcol::@3
  (byte) findcol::diff#1 ← (byte) findcol::x#0 - (byte) findcol::xp#0
  (byte~) findcol::diff#10 ← (byte) findcol::diff#1
  to:findcol::@8
findcol::@8: from findcol::@6 findcol::@7
  (byte) findcol::diff#4 ← phi( findcol::@6/(byte~) findcol::diff#9 findcol::@7/(byte~) findcol::diff#10 )
  if((byte) findcol::y#0<(byte) findcol::yp#0) goto findcol::@9
  to:findcol::@10
findcol::@10: from findcol::@8
  (byte~) findcol::$10 ← (byte) findcol::y#0 - (byte) findcol::yp#0
  (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$10
  (byte~) findcol::diff#11 ← (byte) findcol::diff#3
  to:findcol::@11
findcol::@11: from findcol::@10 findcol::@9
  (byte) findcol::diff#6 ← phi( findcol::@10/(byte~) findcol::diff#11 findcol::@9/(byte~) findcol::diff#12 )
  if((byte) findcol::diff#6<(byte) findcol::mindiff#10) goto findcol::@12
  to:findcol::@30
findcol::@30: from findcol::@11
  (byte~) findcol::mincol#14 ← (byte) findcol::mincol#11
  (byte~) findcol::mindiff#13 ← (byte) findcol::mindiff#10
  to:findcol::@13
findcol::@13: from findcol::@12 findcol::@30
  (byte) findcol::mindiff#11 ← phi( findcol::@30/(byte~) findcol::mindiff#13 findcol::@12/(byte~) findcol::diff#13 )
  (byte) findcol::mincol#2 ← phi( findcol::@30/(byte~) findcol::mincol#14 findcol::@12/(byte~) findcol::mincol#15 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#12
  if((byte) findcol::i#1<(byte) numpoints#1) goto findcol::@29
  to:findcol::@31
findcol::@31: from findcol::@13
  (byte~) findcol::mincol#16 ← (byte) findcol::mincol#2
  to:findcol::@return
findcol::@return: from findcol::@2 findcol::@31
  (byte) findcol::return#0 ← phi( findcol::@31/(byte~) findcol::mincol#16 findcol::@2/(byte) 0 )
  return 
  to:@RETURN
findcol::@29: from findcol::@13
  (byte~) findcol::i#13 ← (byte) findcol::i#1
  (byte~) findcol::mindiff#12 ← (byte) findcol::mindiff#11
  (byte~) findcol::mincol#13 ← (byte) findcol::mincol#2
  to:findcol::@1
findcol::@12: from findcol::@11
  (byte) findcol::mincol#1 ← (word) 4608 *idx (byte) findcol::i#12
  (byte~) findcol::mincol#15 ← (byte) findcol::mincol#1
  (byte~) findcol::diff#13 ← (byte) findcol::diff#6
  to:findcol::@13
findcol::@9: from findcol::@8
  (byte~) findcol::$8 ← (byte) findcol::yp#0 - (byte) findcol::y#0
  (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$8
  (byte~) findcol::diff#12 ← (byte) findcol::diff#2
  to:findcol::@11
findcol::@6: from findcol::@3
  (byte) findcol::diff#0 ← (byte) findcol::xp#0 - (byte) findcol::x#0
  (byte~) findcol::diff#9 ← (byte) findcol::diff#0
  to:findcol::@8
findcol::@2: from findcol::@1
  if((byte) findcol::y#0==(byte) findcol::yp#0) goto findcol::@return
  to:findcol::@3
initscreen: from main::@8
  to:initscreen::@1
initscreen::@1: from initscreen initscreen::@3
  (byte*) initscreen::screen#2 ← phi( initscreen/(word) 1024 initscreen::@3/(byte*~) initscreen::screen#3 )
  *((byte*) initscreen::screen#2) ← (byte) 230
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  if((byte*) initscreen::screen#1<(word) 2048) goto initscreen::@3
  to:initscreen::@return
initscreen::@return: from initscreen::@1
  return 
  to:@RETURN
initscreen::@3: from initscreen::@1
  (byte*~) initscreen::screen#3 ← (byte*) initscreen::screen#1
  to:initscreen::@1
addpoint: from main main::@3 main::@4 main::@5 main::@6 main::@7
  (byte) addpoint::c#6 ← phi( main/(byte) 1 main::@3/(byte) 2 main::@4/(byte) 3 main::@5/(byte) 4 main::@6/(byte) 5 main::@7/(byte) 7 )
  (byte) addpoint::y#6 ← phi( main/(byte) 5 main::@3/(byte) 8 main::@4/(byte) 14 main::@5/(byte) 2 main::@6/(byte) 17 main::@7/(byte) 22 )
  (byte) numpoints#19 ← phi( main/(byte) 0 main::@3/(byte~) numpoints#43 main::@4/(byte~) numpoints#44 main::@5/(byte~) numpoints#45 main::@6/(byte~) numpoints#46 main::@7/(byte~) numpoints#47 )
  (byte) addpoint::x#6 ← phi( main/(byte) 5 main::@3/(byte) 15 main::@4/(byte) 6 main::@5/(byte) 34 main::@6/(byte) 21 main::@7/(byte) 31 )
  *((word) 4096 + (byte) numpoints#19) ← (byte) addpoint::x#6
  *((word) 4352 + (byte) numpoints#19) ← (byte) addpoint::y#6
  *((word) 4608 + (byte) numpoints#19) ← (byte) addpoint::c#6
  (byte) numpoints#1 ← ++ (byte) numpoints#19
  to:addpoint::@return
addpoint::@return: from addpoint
  return 
  to:@RETURN

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagated render::x#2 through call [60] call findcol param-assignment
Propagated render::colline#2 through call [60] call findcol param-assignment
Propagating live ranges...
Propagated render::x#2 through call [60] call findcol param-assignment
Propagated render::colline#2 through call [60] call findcol param-assignment
Propagating live ranges...
Propagated render::x#2 through call [60] call findcol param-assignment
Propagated render::colline#2 through call [60] call findcol param-assignment
Propagating live ranges...
Propagated render::x#2 through call [60] call findcol param-assignment
Propagated render::colline#2 through call [60] call findcol param-assignment
Propagating live ranges...
Propagated render::x#2 through call [60] call findcol param-assignment
Propagated render::y#2 through call [60] call findcol param-assignment
Propagated render::colline#2 through call [60] call findcol param-assignment
Propagating live ranges...
Propagated render::x#2 through call [60] call findcol param-assignment
Propagated render::y#2 through call [60] call findcol param-assignment
Propagated render::colline#2 through call [60] call findcol param-assignment
Propagating live ranges...
Propagated render::x#2 through call [60] call findcol param-assignment
Propagated render::y#2 through call [60] call findcol param-assignment
Propagated render::colline#2 through call [60] call findcol param-assignment
Propagating live ranges...
Propagated render::x#2 through call [60] call findcol param-assignment
Propagated render::y#2 through call [60] call findcol param-assignment
Propagated render::colline#2 through call [60] call findcol param-assignment
Propagating live ranges...
Propagated render::x#2 through call [60] call findcol param-assignment
Propagated render::y#2 through call [60] call findcol param-assignment
Propagated render::colline#2 through call [60] call findcol param-assignment
Propagating live ranges...
Propagated render::x#2 through call [60] call findcol param-assignment
Propagated render::y#2 through call [60] call findcol param-assignment
Propagated render::colline#2 through call [60] call findcol param-assignment
Propagating live ranges...
Propagated render::x#2 through call [60] call findcol param-assignment
Propagated render::y#2 through call [60] call findcol param-assignment
Propagated render::colline#2 through call [60] call findcol param-assignment
Propagating live ranges...
Propagated render::x#2 through call [60] call findcol param-assignment
Propagated render::y#2 through call [60] call findcol param-assignment
Propagated render::colline#2 through call [60] call findcol param-assignment
Propagating live ranges...
Propagated render::x#2 through call [60] call findcol param-assignment
Propagated render::y#2 through call [60] call findcol param-assignment
Propagated render::colline#2 through call [60] call findcol param-assignment
Propagating live ranges...
Propagated render::x#2 through call [60] call findcol param-assignment
Propagated render::y#2 through call [60] call findcol param-assignment
Propagated render::colline#2 through call [60] call findcol param-assignment
Propagating live ranges...
Propagated render::x#2 through call [60] call findcol param-assignment
Propagated render::y#2 through call [60] call findcol param-assignment
Propagated render::colline#2 through call [60] call findcol param-assignment
Propagating live ranges...
CONTROL FLOW GRAPH - LIVE RANGES
@BEGIN: from
  [0] call main param-assignment [ ]
  to:@END
@END: from @BEGIN
main: from @BEGIN
  [1] call addpoint param-assignment [ numpoints#1 ]
  to:main::@3
main::@3: from main
  [2] (byte~) numpoints#43 ← (byte) numpoints#1 [ numpoints#43 ]
  [3] call addpoint param-assignment [ numpoints#1 ]
  to:main::@4
main::@4: from main::@3
  [4] (byte~) numpoints#44 ← (byte) numpoints#1 [ numpoints#44 ]
  [5] call addpoint param-assignment [ numpoints#1 ]
  to:main::@5
main::@5: from main::@4
  [6] (byte~) numpoints#45 ← (byte) numpoints#1 [ numpoints#45 ]
  [7] call addpoint param-assignment [ numpoints#1 ]
  to:main::@6
main::@6: from main::@5
  [8] (byte~) numpoints#46 ← (byte) numpoints#1 [ numpoints#46 ]
  [9] call addpoint param-assignment [ numpoints#1 ]
  to:main::@7
main::@7: from main::@6
  [10] (byte~) numpoints#47 ← (byte) numpoints#1 [ numpoints#47 ]
  [11] call addpoint param-assignment [ ]
  to:main::@8
main::@8: from main::@7
  [12] call initscreen param-assignment [ ]
  to:main::@1
main::@1: from main::@11 main::@8
  [13] call render param-assignment [ ]
  to:main::@10
main::@10: from main::@1
  [14] call animate param-assignment [ ]
  to:main::@11
main::@11: from main::@10
  [15] if(true) goto main::@1 [ ]
  to:main::@return
main::@return: from main::@11
  [16] return  [ ]
  to:@RETURN
animate: from main::@10
  [17] (byte~) animate::$0 ← * (word) 4096 [ animate::$0 ]
  [18] (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1 [ animate::$1 ]
  [19] *((word) 4096) ← (byte~) animate::$1 [ ]
  [20] (byte~) animate::$2 ← * (word) 4096 [ animate::$2 ]
  [21] if((byte~) animate::$2==(byte) 40) goto animate::@1 [ ]
  to:animate::@2
animate::@2: from animate animate::@1
  [22] (byte~) animate::$4 ← * (word) 4352 [ animate::$4 ]
  [23] (byte~) animate::$5 ← (byte~) animate::$4 + (byte) 1 [ animate::$5 ]
  [24] *((word) 4352) ← (byte~) animate::$5 [ ]
  [25] (byte~) animate::$6 ← * (word) 4352 [ animate::$6 ]
  [26] if((byte~) animate::$6==(byte) 25) goto animate::@3 [ ]
  to:animate::@4
animate::@4: from animate::@2 animate::@3
  [27] (byte~) animate::$8 ← * (word) 4097 [ animate::$8 ]
  [28] (byte~) animate::$9 ← (byte~) animate::$8 - (byte) 1 [ animate::$9 ]
  [29] *((word) 4097) ← (byte~) animate::$9 [ ]
  [30] (byte~) animate::$10 ← * (word) 4097 [ animate::$10 ]
  [31] if((byte~) animate::$10==(byte) 255) goto animate::@5 [ ]
  to:animate::@6
animate::@6: from animate::@4 animate::@5
  [32] (byte~) animate::$12 ← * (word) 4354 [ animate::$12 ]
  [33] (byte~) animate::$13 ← (byte~) animate::$12 + (byte) 1 [ animate::$13 ]
  [34] *((word) 4354) ← (byte~) animate::$13 [ ]
  [35] (byte~) animate::$14 ← * (word) 4354 [ animate::$14 ]
  [36] if((byte~) animate::$14==(byte) 25) goto animate::@7 [ ]
  to:animate::@8
animate::@8: from animate::@6 animate::@7
  [37] (byte~) animate::$16 ← * (word) 4355 [ animate::$16 ]
  [38] (byte~) animate::$17 ← (byte~) animate::$16 - (byte) 1 [ animate::$17 ]
  [39] *((word) 4355) ← (byte~) animate::$17 [ ]
  [40] (byte~) animate::$18 ← * (word) 4355 [ animate::$18 ]
  [41] if((byte~) animate::$18==(byte) 255) goto animate::@9 [ ]
  to:animate::@return
animate::@return: from animate::@11 animate::@8 animate::@9
  [42] return  [ ]
  to:@RETURN
animate::@9: from animate::@8
  [43] *((word) 4355) ← (byte) 25 [ ]
  [44] (byte~) animate::$20 ← * (word) 4099 [ animate::$20 ]
  [45] (byte~) animate::$21 ← (byte~) animate::$20 + (byte) 7 [ animate::$21 ]
  [46] *((word) 4099) ← (byte~) animate::$21 [ ]
  [47] (byte~) animate::$22 ← * (word) 4099 [ animate::$22 ]
  [48] if((byte~) animate::$22>=(byte) 40) goto animate::@11 [ ]
  to:animate::@return
animate::@11: from animate::@9
  [49] (byte~) animate::$24 ← * (word) 4099 [ animate::$24 ]
  [50] (byte~) animate::$25 ← (byte~) animate::$24 - (byte) 40 [ animate::$25 ]
  [51] *((word) 4099) ← (byte~) animate::$25 [ ]
  to:animate::@return
animate::@7: from animate::@6
  [52] *((word) 4354) ← (byte) 0 [ ]
  to:animate::@8
animate::@5: from animate::@4
  [53] *((word) 4097) ← (byte) 40 [ ]
  to:animate::@6
animate::@3: from animate::@2
  [54] *((word) 4352) ← (byte) 0 [ ]
  to:animate::@4
animate::@1: from animate
  [55] *((word) 4096) ← (byte) 0 [ ]
  to:animate::@2
render: from main::@1
  to:render::@1
render::@1: from render render::@6
  [56] (byte*) render::colline#2 ← phi( render/(word) 55296 render::@6/(byte*~) render::colline#6 ) [ render::y#2 render::colline#2 ]
  [56] (byte) render::y#2 ← phi( render/(byte) 0 render::@6/(byte~) render::y#6 ) [ render::y#2 render::colline#2 ]
  to:render::@2
render::@2: from render::@1 render::@7
  [57] (byte) render::x#2 ← phi( render::@1/(byte) 0 render::@7/(byte~) render::x#4 ) [ render::x#2 render::y#2 render::colline#2 ]
  [58] (byte) findcol::x#0 ← (byte) render::x#2 [ render::x#2 render::y#2 render::colline#2 ]
  [59] (byte) findcol::y#0 ← (byte) render::y#2 [ render::x#2 render::y#2 render::colline#2 ]
  [60] call findcol param-assignment [ render::x#2 render::y#2 findcol::return#0 render::colline#2 ]
  to:render::@5
render::@5: from render::@2
  [61] (byte) render::col#0 ← (byte) findcol::return#0 [ render::x#2 render::y#2 render::colline#2 render::col#0 ]
  [62] *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0 [ render::x#2 render::y#2 render::colline#2 ]
  [63] (byte) render::x#1 ← ++ (byte) render::x#2 [ render::y#2 render::colline#2 render::x#1 ]
  [64] if((byte) render::x#1<(byte) 40) goto render::@7 [ render::y#2 render::colline#2 render::x#1 ]
  to:render::@3
render::@3: from render::@5
  [65] (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40 [ render::y#2 render::colline#1 ]
  [66] (byte) render::y#1 ← ++ (byte) render::y#2 [ render::y#1 render::colline#1 ]
  [67] if((byte) render::y#1<(byte) 25) goto render::@6 [ render::y#1 render::colline#1 ]
  to:render::@return
render::@return: from render::@3
  [68] return  [ ]
  to:@RETURN
render::@6: from render::@3
  [69] (byte~) render::y#6 ← (byte) render::y#1 [ render::y#6 render::colline#1 ]
  [70] (byte*~) render::colline#6 ← (byte*) render::colline#1 [ render::y#6 render::colline#6 ]
  to:render::@1
render::@7: from render::@5
  [71] (byte~) render::x#4 ← (byte) render::x#1 [ render::x#4 render::y#2 render::colline#2 ]
  to:render::@2
findcol: from render::@2
  to:findcol::@1
findcol::@1: from findcol findcol::@29
  [72] (byte) findcol::mincol#11 ← phi( findcol/(byte) 0 findcol::@29/(byte~) findcol::mincol#13 ) [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::mindiff#10 findcol::mincol#11 ]
  [72] (byte) findcol::mindiff#10 ← phi( findcol/(byte) 255 findcol::@29/(byte~) findcol::mindiff#12 ) [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::mindiff#10 findcol::mincol#11 ]
  [72] (byte) findcol::i#12 ← phi( findcol/(byte) 0 findcol::@29/(byte~) findcol::i#13 ) [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::mindiff#10 findcol::mincol#11 ]
  [73] (byte) findcol::xp#0 ← (word) 4096 *idx (byte) findcol::i#12 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::mindiff#10 findcol::mincol#11 ]
  [74] (byte) findcol::yp#0 ← (word) 4352 *idx (byte) findcol::i#12 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 ]
  [75] if((byte) findcol::x#0==(byte) findcol::xp#0) goto findcol::@2 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 ]
  to:findcol::@3
findcol::@3: from findcol::@1 findcol::@2
  [76] if((byte) findcol::x#0<(byte) findcol::xp#0) goto findcol::@6 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 ]
  to:findcol::@7
findcol::@7: from findcol::@3
  [77] (byte) findcol::diff#1 ← (byte) findcol::x#0 - (byte) findcol::xp#0 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::diff#1 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 ]
  [78] (byte~) findcol::diff#10 ← (byte) findcol::diff#1 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::diff#10 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 ]
  to:findcol::@8
findcol::@8: from findcol::@6 findcol::@7
  [79] (byte) findcol::diff#4 ← phi( findcol::@6/(byte~) findcol::diff#9 findcol::@7/(byte~) findcol::diff#10 ) [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::yp#0 findcol::diff#4 findcol::mindiff#10 findcol::mincol#11 ]
  [80] if((byte) findcol::y#0<(byte) findcol::yp#0) goto findcol::@9 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::yp#0 findcol::diff#4 findcol::mindiff#10 findcol::mincol#11 ]
  to:findcol::@10
findcol::@10: from findcol::@8
  [81] (byte~) findcol::$10 ← (byte) findcol::y#0 - (byte) findcol::yp#0 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#4 findcol::$10 findcol::mindiff#10 findcol::mincol#11 ]
  [82] (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$10 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#3 findcol::mindiff#10 findcol::mincol#11 ]
  [83] (byte~) findcol::diff#11 ← (byte) findcol::diff#3 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#11 findcol::mindiff#10 findcol::mincol#11 ]
  to:findcol::@11
findcol::@11: from findcol::@10 findcol::@9
  [84] (byte) findcol::diff#6 ← phi( findcol::@10/(byte~) findcol::diff#11 findcol::@9/(byte~) findcol::diff#12 ) [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#6 findcol::mindiff#10 findcol::mincol#11 ]
  [85] if((byte) findcol::diff#6<(byte) findcol::mindiff#10) goto findcol::@12 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#6 findcol::mindiff#10 findcol::mincol#11 ]
  to:findcol::@30
findcol::@30: from findcol::@11
  [86] (byte~) findcol::mincol#14 ← (byte) findcol::mincol#11 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::mindiff#10 findcol::mincol#14 ]
  [87] (byte~) findcol::mindiff#13 ← (byte) findcol::mindiff#10 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::mincol#14 findcol::mindiff#13 ]
  to:findcol::@13
findcol::@13: from findcol::@12 findcol::@30
  [88] (byte) findcol::mindiff#11 ← phi( findcol::@30/(byte~) findcol::mindiff#13 findcol::@12/(byte~) findcol::diff#13 ) [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::mincol#2 findcol::mindiff#11 ]
  [88] (byte) findcol::mincol#2 ← phi( findcol::@30/(byte~) findcol::mincol#14 findcol::@12/(byte~) findcol::mincol#15 ) [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::mincol#2 findcol::mindiff#11 ]
  [89] (byte) findcol::i#1 ← ++ (byte) findcol::i#12 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 ]
  [90] if((byte) findcol::i#1<(byte) numpoints#1) goto findcol::@29 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 ]
  to:findcol::@31
findcol::@31: from findcol::@13
  [91] (byte~) findcol::mincol#16 ← (byte) findcol::mincol#2 [ render::x#2 render::y#2 render::colline#2 findcol::mincol#16 ]
  to:findcol::@return
findcol::@return: from findcol::@2 findcol::@31
  [92] (byte) findcol::return#0 ← phi( findcol::@31/(byte~) findcol::mincol#16 findcol::@2/(byte) 0 ) [ render::x#2 render::y#2 findcol::return#0 render::colline#2 ]
  [93] return  [ render::x#2 render::y#2 findcol::return#0 render::colline#2 ]
  to:@RETURN
findcol::@29: from findcol::@13
  [94] (byte~) findcol::i#13 ← (byte) findcol::i#1 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#13 findcol::x#0 findcol::y#0 findcol::mincol#2 findcol::mindiff#11 ]
  [95] (byte~) findcol::mindiff#12 ← (byte) findcol::mindiff#11 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#13 findcol::mindiff#12 findcol::x#0 findcol::y#0 findcol::mincol#2 ]
  [96] (byte~) findcol::mincol#13 ← (byte) findcol::mincol#2 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#13 findcol::mindiff#12 findcol::mincol#13 findcol::x#0 findcol::y#0 ]
  to:findcol::@1
findcol::@12: from findcol::@11
  [97] (byte) findcol::mincol#1 ← (word) 4608 *idx (byte) findcol::i#12 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#6 findcol::mincol#1 ]
  [98] (byte~) findcol::mincol#15 ← (byte) findcol::mincol#1 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#6 findcol::mincol#15 ]
  [99] (byte~) findcol::diff#13 ← (byte) findcol::diff#6 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::mincol#15 findcol::diff#13 ]
  to:findcol::@13
findcol::@9: from findcol::@8
  [100] (byte~) findcol::$8 ← (byte) findcol::yp#0 - (byte) findcol::y#0 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#4 findcol::mindiff#10 findcol::mincol#11 findcol::$8 ]
  [101] (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$8 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::mindiff#10 findcol::mincol#11 findcol::diff#2 ]
  [102] (byte~) findcol::diff#12 ← (byte) findcol::diff#2 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#12 findcol::mindiff#10 findcol::mincol#11 ]
  to:findcol::@11
findcol::@6: from findcol::@3
  [103] (byte) findcol::diff#0 ← (byte) findcol::xp#0 - (byte) findcol::x#0 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 findcol::diff#0 ]
  [104] (byte~) findcol::diff#9 ← (byte) findcol::diff#0 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::diff#9 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 ]
  to:findcol::@8
findcol::@2: from findcol::@1
  [105] if((byte) findcol::y#0==(byte) findcol::yp#0) goto findcol::@return [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 ]
  to:findcol::@3
initscreen: from main::@8
  to:initscreen::@1
initscreen::@1: from initscreen initscreen::@3
  [106] (byte*) initscreen::screen#2 ← phi( initscreen/(word) 1024 initscreen::@3/(byte*~) initscreen::screen#3 ) [ initscreen::screen#2 ]
  [107] *((byte*) initscreen::screen#2) ← (byte) 230 [ initscreen::screen#2 ]
  [108] (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2 [ initscreen::screen#1 ]
  [109] if((byte*) initscreen::screen#1<(word) 2048) goto initscreen::@3 [ initscreen::screen#1 ]
  to:initscreen::@return
initscreen::@return: from initscreen::@1
  [110] return  [ ]
  to:@RETURN
initscreen::@3: from initscreen::@1
  [111] (byte*~) initscreen::screen#3 ← (byte*) initscreen::screen#1 [ initscreen::screen#3 ]
  to:initscreen::@1
addpoint: from main main::@3 main::@4 main::@5 main::@6 main::@7
  [112] (byte) addpoint::c#6 ← phi( main/(byte) 1 main::@3/(byte) 2 main::@4/(byte) 3 main::@5/(byte) 4 main::@6/(byte) 5 main::@7/(byte) 7 ) [ numpoints#19 addpoint::x#6 addpoint::y#6 addpoint::c#6 ]
  [112] (byte) addpoint::y#6 ← phi( main/(byte) 5 main::@3/(byte) 8 main::@4/(byte) 14 main::@5/(byte) 2 main::@6/(byte) 17 main::@7/(byte) 22 ) [ numpoints#19 addpoint::x#6 addpoint::y#6 addpoint::c#6 ]
  [112] (byte) numpoints#19 ← phi( main/(byte) 0 main::@3/(byte~) numpoints#43 main::@4/(byte~) numpoints#44 main::@5/(byte~) numpoints#45 main::@6/(byte~) numpoints#46 main::@7/(byte~) numpoints#47 ) [ numpoints#19 addpoint::x#6 addpoint::y#6 addpoint::c#6 ]
  [112] (byte) addpoint::x#6 ← phi( main/(byte) 5 main::@3/(byte) 15 main::@4/(byte) 6 main::@5/(byte) 34 main::@6/(byte) 21 main::@7/(byte) 31 ) [ numpoints#19 addpoint::x#6 addpoint::y#6 addpoint::c#6 ]
  [113] *((word) 4096 + (byte) numpoints#19) ← (byte) addpoint::x#6 [ numpoints#19 addpoint::y#6 addpoint::c#6 ]
  [114] *((word) 4352 + (byte) numpoints#19) ← (byte) addpoint::y#6 [ numpoints#19 addpoint::c#6 ]
  [115] *((word) 4608 + (byte) numpoints#19) ← (byte) addpoint::c#6 [ numpoints#19 ]
  [116] (byte) numpoints#1 ← ++ (byte) numpoints#19 [ numpoints#1 ]
  to:addpoint::@return
addpoint::@return: from addpoint
  [117] return  [ numpoints#1 ]
  to:@RETURN

Created 16 initial phi equivalence classes
Coalesced [2] numpoints#43 ← numpoints#1
Coalesced (already) [4] numpoints#44 ← numpoints#1
Coalesced (already) [6] numpoints#45 ← numpoints#1
Coalesced (already) [8] numpoints#46 ← numpoints#1
Coalesced (already) [10] numpoints#47 ← numpoints#1
Coalesced [69] render::y#6 ← render::y#1
Coalesced [70] render::colline#6 ← render::colline#1
Coalesced [71] render::x#4 ← render::x#1
Coalesced [78] findcol::diff#10 ← findcol::diff#1
Coalesced [83] findcol::diff#11 ← findcol::diff#3
Coalesced [86] findcol::mincol#14 ← findcol::mincol#11
Coalesced [87] findcol::mindiff#13 ← findcol::mindiff#10
Coalesced [91] findcol::mincol#16 ← findcol::mincol#2
Coalesced [94] findcol::i#13 ← findcol::i#1
Coalesced (already) [95] findcol::mindiff#12 ← findcol::mindiff#11
Coalesced (already) [96] findcol::mincol#13 ← findcol::mincol#2
Coalesced [98] findcol::mincol#15 ← findcol::mincol#1
Not coalescing [99] findcol::diff#13 ← findcol::diff#6
Coalesced [102] findcol::diff#12 ← findcol::diff#2
Coalesced [104] findcol::diff#9 ← findcol::diff#0
Coalesced [111] initscreen::screen#3 ← initscreen::screen#1
Coalesced down to 13 phi equivalence classes
Culled Empty Block (label) render::@6
Culled Empty Block (label) render::@7
Culled Empty Block (label) findcol::@30
Culled Empty Block (label) findcol::@31
Culled Empty Block (label) findcol::@29
Culled Empty Block (label) initscreen::@3
Block Sequence Planned @BEGIN @END main main::@3 main::@4 main::@5 main::@6 main::@7 main::@8 main::@1 main::@10 main::@11 main::@return animate animate::@2 animate::@4 animate::@6 animate::@8 animate::@return animate::@9 animate::@11 animate::@7 animate::@5 animate::@3 animate::@1 render render::@1 render::@2 render::@5 render::@3 render::@return findcol findcol::@1 findcol::@3 findcol::@7 findcol::@8 findcol::@10 findcol::@11 findcol::@13 findcol::@return findcol::@12 findcol::@9 findcol::@6 findcol::@2 initscreen initscreen::@1 initscreen::@return addpoint addpoint::@return 
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagated render::x#2 through call [55] call findcol param-assignment
Propagated render::colline#2 through call [55] call findcol param-assignment
Propagating live ranges...
Propagated render::x#2 through call [55] call findcol param-assignment
Propagated render::colline#2 through call [55] call findcol param-assignment
Propagating live ranges...
Propagated render::x#2 through call [55] call findcol param-assignment
Propagated render::colline#2 through call [55] call findcol param-assignment
Propagating live ranges...
Propagated render::x#2 through call [55] call findcol param-assignment
Propagated render::colline#2 through call [55] call findcol param-assignment
Propagating live ranges...
Propagated render::x#2 through call [55] call findcol param-assignment
Propagated render::y#2 through call [55] call findcol param-assignment
Propagated render::colline#2 through call [55] call findcol param-assignment
Propagating live ranges...
Propagated render::x#2 through call [55] call findcol param-assignment
Propagated render::y#2 through call [55] call findcol param-assignment
Propagated render::colline#2 through call [55] call findcol param-assignment
Propagating live ranges...
Propagated render::x#2 through call [55] call findcol param-assignment
Propagated render::y#2 through call [55] call findcol param-assignment
Propagated render::colline#2 through call [55] call findcol param-assignment
Propagating live ranges...
Propagated render::x#2 through call [55] call findcol param-assignment
Propagated render::y#2 through call [55] call findcol param-assignment
Propagated render::colline#2 through call [55] call findcol param-assignment
Propagating live ranges...
Propagated render::x#2 through call [55] call findcol param-assignment
Propagated render::y#2 through call [55] call findcol param-assignment
Propagated render::colline#2 through call [55] call findcol param-assignment
Propagating live ranges...
Propagated render::x#2 through call [55] call findcol param-assignment
Propagated render::y#2 through call [55] call findcol param-assignment
Propagated render::colline#2 through call [55] call findcol param-assignment
Propagating live ranges...
CONTROL FLOW GRAPH - PHI MEM COALESCED
@BEGIN: from
  [0] call main param-assignment [ ]
  to:@END
@END: from @BEGIN
main: from @BEGIN
  [1] call addpoint param-assignment [ ]
  to:main::@3
main::@3: from main
  [2] call addpoint param-assignment [ ]
  to:main::@4
main::@4: from main::@3
  [3] call addpoint param-assignment [ ]
  to:main::@5
main::@5: from main::@4
  [4] call addpoint param-assignment [ ]
  to:main::@6
main::@6: from main::@5
  [5] call addpoint param-assignment [ ]
  to:main::@7
main::@7: from main::@6
  [6] call addpoint param-assignment [ ]
  to:main::@8
main::@8: from main::@7
  [7] call initscreen param-assignment [ ]
  to:main::@1
main::@1: from main::@11 main::@8
  [8] call render param-assignment [ ]
  to:main::@10
main::@10: from main::@1
  [9] call animate param-assignment [ ]
  to:main::@11
main::@11: from main::@10
  [10] if(true) goto main::@1 [ ]
  to:main::@return
main::@return: from main::@11
  [11] return  [ ]
  to:@RETURN
animate: from main::@10
  [12] (byte~) animate::$0 ← * (word) 4096 [ animate::$0 ]
  [13] (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1 [ animate::$1 ]
  [14] *((word) 4096) ← (byte~) animate::$1 [ ]
  [15] (byte~) animate::$2 ← * (word) 4096 [ animate::$2 ]
  [16] if((byte~) animate::$2==(byte) 40) goto animate::@1 [ ]
  to:animate::@2
animate::@2: from animate animate::@1
  [17] (byte~) animate::$4 ← * (word) 4352 [ animate::$4 ]
  [18] (byte~) animate::$5 ← (byte~) animate::$4 + (byte) 1 [ animate::$5 ]
  [19] *((word) 4352) ← (byte~) animate::$5 [ ]
  [20] (byte~) animate::$6 ← * (word) 4352 [ animate::$6 ]
  [21] if((byte~) animate::$6==(byte) 25) goto animate::@3 [ ]
  to:animate::@4
animate::@4: from animate::@2 animate::@3
  [22] (byte~) animate::$8 ← * (word) 4097 [ animate::$8 ]
  [23] (byte~) animate::$9 ← (byte~) animate::$8 - (byte) 1 [ animate::$9 ]
  [24] *((word) 4097) ← (byte~) animate::$9 [ ]
  [25] (byte~) animate::$10 ← * (word) 4097 [ animate::$10 ]
  [26] if((byte~) animate::$10==(byte) 255) goto animate::@5 [ ]
  to:animate::@6
animate::@6: from animate::@4 animate::@5
  [27] (byte~) animate::$12 ← * (word) 4354 [ animate::$12 ]
  [28] (byte~) animate::$13 ← (byte~) animate::$12 + (byte) 1 [ animate::$13 ]
  [29] *((word) 4354) ← (byte~) animate::$13 [ ]
  [30] (byte~) animate::$14 ← * (word) 4354 [ animate::$14 ]
  [31] if((byte~) animate::$14==(byte) 25) goto animate::@7 [ ]
  to:animate::@8
animate::@8: from animate::@6 animate::@7
  [32] (byte~) animate::$16 ← * (word) 4355 [ animate::$16 ]
  [33] (byte~) animate::$17 ← (byte~) animate::$16 - (byte) 1 [ animate::$17 ]
  [34] *((word) 4355) ← (byte~) animate::$17 [ ]
  [35] (byte~) animate::$18 ← * (word) 4355 [ animate::$18 ]
  [36] if((byte~) animate::$18==(byte) 255) goto animate::@9 [ ]
  to:animate::@return
animate::@return: from animate::@11 animate::@8 animate::@9
  [37] return  [ ]
  to:@RETURN
animate::@9: from animate::@8
  [38] *((word) 4355) ← (byte) 25 [ ]
  [39] (byte~) animate::$20 ← * (word) 4099 [ animate::$20 ]
  [40] (byte~) animate::$21 ← (byte~) animate::$20 + (byte) 7 [ animate::$21 ]
  [41] *((word) 4099) ← (byte~) animate::$21 [ ]
  [42] (byte~) animate::$22 ← * (word) 4099 [ animate::$22 ]
  [43] if((byte~) animate::$22>=(byte) 40) goto animate::@11 [ ]
  to:animate::@return
animate::@11: from animate::@9
  [44] (byte~) animate::$24 ← * (word) 4099 [ animate::$24 ]
  [45] (byte~) animate::$25 ← (byte~) animate::$24 - (byte) 40 [ animate::$25 ]
  [46] *((word) 4099) ← (byte~) animate::$25 [ ]
  to:animate::@return
animate::@7: from animate::@6
  [47] *((word) 4354) ← (byte) 0 [ ]
  to:animate::@8
animate::@5: from animate::@4
  [48] *((word) 4097) ← (byte) 40 [ ]
  to:animate::@6
animate::@3: from animate::@2
  [49] *((word) 4352) ← (byte) 0 [ ]
  to:animate::@4
animate::@1: from animate
  [50] *((word) 4096) ← (byte) 0 [ ]
  to:animate::@2
render: from main::@1
  to:render::@1
render::@1: from render render::@3
  [51] (byte*) render::colline#2 ← phi( render/(word) 55296 render::@3/(byte*) render::colline#1 ) [ render::y#2 render::colline#2 ]
  [51] (byte) render::y#2 ← phi( render/(byte) 0 render::@3/(byte) render::y#1 ) [ render::y#2 render::colline#2 ]
  to:render::@2
render::@2: from render::@1 render::@5
  [52] (byte) render::x#2 ← phi( render::@1/(byte) 0 render::@5/(byte) render::x#1 ) [ render::x#2 render::y#2 render::colline#2 ]
  [53] (byte) findcol::x#0 ← (byte) render::x#2 [ render::x#2 render::y#2 render::colline#2 ]
  [54] (byte) findcol::y#0 ← (byte) render::y#2 [ render::x#2 render::y#2 render::colline#2 ]
  [55] call findcol param-assignment [ render::x#2 render::y#2 findcol::return#0 render::colline#2 ]
  to:render::@5
render::@5: from render::@2
  [56] (byte) render::col#0 ← (byte) findcol::return#0 [ render::x#2 render::y#2 render::colline#2 render::col#0 ]
  [57] *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0 [ render::x#2 render::y#2 render::colline#2 ]
  [58] (byte) render::x#1 ← ++ (byte) render::x#2 [ render::x#1 render::y#2 render::colline#2 ]
  [59] if((byte) render::x#1<(byte) 40) goto render::@2 [ render::x#1 render::y#2 render::colline#2 ]
  to:render::@3
render::@3: from render::@5
  [60] (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40 [ render::colline#1 render::y#2 ]
  [61] (byte) render::y#1 ← ++ (byte) render::y#2 [ render::y#1 render::colline#1 ]
  [62] if((byte) render::y#1<(byte) 25) goto render::@1 [ render::y#1 render::colline#1 ]
  to:render::@return
render::@return: from render::@3
  [63] return  [ ]
  to:@RETURN
findcol: from render::@2
  to:findcol::@1
findcol::@1: from findcol findcol::@13
  [64] (byte) findcol::mincol#11 ← phi( findcol/(byte) 0 findcol::@13/(byte) findcol::mincol#2 ) [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  [64] (byte) findcol::mindiff#10 ← phi( findcol/(byte) 255 findcol::@13/(byte) findcol::mindiff#11 ) [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  [64] (byte) findcol::i#12 ← phi( findcol/(byte) 0 findcol::@13/(byte) findcol::i#1 ) [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  [65] (byte) findcol::xp#0 ← (word) 4096 *idx (byte) findcol::i#12 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  [66] (byte) findcol::yp#0 ← (word) 4352 *idx (byte) findcol::i#12 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  [67] if((byte) findcol::x#0==(byte) findcol::xp#0) goto findcol::@2 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  to:findcol::@3
findcol::@3: from findcol::@1 findcol::@2
  [68] if((byte) findcol::x#0<(byte) findcol::xp#0) goto findcol::@6 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  to:findcol::@7
findcol::@7: from findcol::@3
  [69] (byte) findcol::diff#1 ← (byte) findcol::x#0 - (byte) findcol::xp#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::diff#1 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  to:findcol::@8
findcol::@8: from findcol::@6 findcol::@7
  [70] (byte) findcol::diff#4 ← phi( findcol::@6/(byte) findcol::diff#0 findcol::@7/(byte) findcol::diff#1 ) [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::yp#0 findcol::diff#4 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  [71] if((byte) findcol::y#0<(byte) findcol::yp#0) goto findcol::@9 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::yp#0 findcol::diff#4 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  to:findcol::@10
findcol::@10: from findcol::@8
  [72] (byte~) findcol::$10 ← (byte) findcol::y#0 - (byte) findcol::yp#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#4 findcol::$10 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  [73] (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$10 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#3 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  to:findcol::@11
findcol::@11: from findcol::@10 findcol::@9
  [74] (byte) findcol::diff#6 ← phi( findcol::@10/(byte) findcol::diff#3 findcol::@9/(byte) findcol::diff#2 ) [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#6 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  [75] if((byte) findcol::diff#6<(byte) findcol::mindiff#10) goto findcol::@12 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#6 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  to:findcol::@13
findcol::@13: from findcol::@11 findcol::@12
  [76] (byte) findcol::mindiff#11 ← phi( findcol::@11/(byte) findcol::mindiff#10 findcol::@12/(byte~) findcol::diff#13 ) [ render::x#2 render::y#2 render::colline#2 findcol::mindiff#11 findcol::mincol#2 findcol::i#12 findcol::x#0 findcol::y#0 numpoints#1 ]
  [76] (byte) findcol::mincol#2 ← phi( findcol::@11/(byte) findcol::mincol#11 findcol::@12/(byte) findcol::mincol#1 ) [ render::x#2 render::y#2 render::colline#2 findcol::mindiff#11 findcol::mincol#2 findcol::i#12 findcol::x#0 findcol::y#0 numpoints#1 ]
  [77] (byte) findcol::i#1 ← ++ (byte) findcol::i#12 [ render::x#2 render::y#2 render::colline#2 findcol::i#1 findcol::mindiff#11 findcol::mincol#2 findcol::x#0 findcol::y#0 numpoints#1 ]
  [78] if((byte) findcol::i#1<(byte) numpoints#1) goto findcol::@1 [ render::x#2 render::y#2 render::colline#2 findcol::i#1 findcol::mindiff#11 findcol::mincol#2 findcol::x#0 findcol::y#0 numpoints#1 ]
  to:findcol::@return
findcol::@return: from findcol::@13 findcol::@2
  [79] (byte) findcol::return#0 ← phi( findcol::@13/(byte) findcol::mincol#2 findcol::@2/(byte) 0 ) [ render::x#2 render::y#2 findcol::return#0 render::colline#2 ]
  [80] return  [ render::x#2 render::y#2 findcol::return#0 render::colline#2 ]
  to:@RETURN
findcol::@12: from findcol::@11
  [81] (byte) findcol::mincol#1 ← (word) 4608 *idx (byte) findcol::i#12 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#6 findcol::mincol#1 numpoints#1 ]
  [82] (byte~) findcol::diff#13 ← (byte) findcol::diff#6 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::mincol#1 findcol::diff#13 numpoints#1 ]
  to:findcol::@13
findcol::@9: from findcol::@8
  [83] (byte~) findcol::$8 ← (byte) findcol::yp#0 - (byte) findcol::y#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#4 findcol::mindiff#10 findcol::mincol#11 numpoints#1 findcol::$8 ]
  [84] (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$8 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#2 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  to:findcol::@11
findcol::@6: from findcol::@3
  [85] (byte) findcol::diff#0 ← (byte) findcol::xp#0 - (byte) findcol::x#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::diff#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  to:findcol::@8
findcol::@2: from findcol::@1
  [86] if((byte) findcol::y#0==(byte) findcol::yp#0) goto findcol::@return [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  to:findcol::@3
initscreen: from main::@8
  to:initscreen::@1
initscreen::@1: from initscreen initscreen::@1
  [87] (byte*) initscreen::screen#2 ← phi( initscreen/(word) 1024 initscreen::@1/(byte*) initscreen::screen#1 ) [ initscreen::screen#2 ]
  [88] *((byte*) initscreen::screen#2) ← (byte) 230 [ initscreen::screen#2 ]
  [89] (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2 [ initscreen::screen#1 ]
  [90] if((byte*) initscreen::screen#1<(word) 2048) goto initscreen::@1 [ initscreen::screen#1 ]
  to:initscreen::@return
initscreen::@return: from initscreen::@1
  [91] return  [ ]
  to:@RETURN
addpoint: from main main::@3 main::@4 main::@5 main::@6 main::@7
  [92] (byte) addpoint::c#6 ← phi( main/(byte) 1 main::@3/(byte) 2 main::@4/(byte) 3 main::@5/(byte) 4 main::@6/(byte) 5 main::@7/(byte) 7 ) [ numpoints#19 addpoint::x#6 addpoint::y#6 addpoint::c#6 ]
  [92] (byte) addpoint::y#6 ← phi( main/(byte) 5 main::@3/(byte) 8 main::@4/(byte) 14 main::@5/(byte) 2 main::@6/(byte) 17 main::@7/(byte) 22 ) [ numpoints#19 addpoint::x#6 addpoint::y#6 addpoint::c#6 ]
  [92] (byte) numpoints#19 ← phi( main/(byte) 0 main::@3/(byte) numpoints#1 main::@4/(byte) numpoints#1 main::@5/(byte) numpoints#1 main::@6/(byte) numpoints#1 main::@7/(byte) numpoints#1 ) [ numpoints#19 addpoint::x#6 addpoint::y#6 addpoint::c#6 ]
  [92] (byte) addpoint::x#6 ← phi( main/(byte) 5 main::@3/(byte) 15 main::@4/(byte) 6 main::@5/(byte) 34 main::@6/(byte) 21 main::@7/(byte) 31 ) [ numpoints#19 addpoint::x#6 addpoint::y#6 addpoint::c#6 ]
  [93] *((word) 4096 + (byte) numpoints#19) ← (byte) addpoint::x#6 [ numpoints#19 addpoint::y#6 addpoint::c#6 ]
  [94] *((word) 4352 + (byte) numpoints#19) ← (byte) addpoint::y#6 [ numpoints#19 addpoint::c#6 ]
  [95] *((word) 4608 + (byte) numpoints#19) ← (byte) addpoint::c#6 [ numpoints#19 ]
  [96] (byte) numpoints#1 ← ++ (byte) numpoints#19 [ ]
  to:addpoint::@return
addpoint::@return: from addpoint
  [97] return  [ ]
  to:@RETURN

CALL GRAPH
Calls in [] to 0:main 
Calls in [main] to 1:addpoint 2:addpoint 3:addpoint 4:addpoint 5:addpoint 6:addpoint 7:initscreen 8:render 9:animate 
Calls in [render] to 55:findcol 

DOMINATORS
@BEGIN dominated by  @BEGIN 
@END dominated by  @BEGIN @END 
main dominated by  @BEGIN main 
main::@3 dominated by  @BEGIN main::@3 main 
main::@4 dominated by  @BEGIN main::@4 main::@3 main 
main::@5 dominated by  @BEGIN main::@4 main::@3 main::@5 main 
main::@6 dominated by  @BEGIN main::@4 main::@3 main::@6 main::@5 main 
main::@7 dominated by  @BEGIN main::@4 main::@3 main::@6 main::@5 main::@7 main 
main::@8 dominated by  @BEGIN main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
main::@1 dominated by  @BEGIN main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
main::@10 dominated by  @BEGIN main::@10 main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
main::@11 dominated by  @BEGIN main::@10 main::@11 main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
main::@return dominated by  @BEGIN main::@return main::@10 main::@11 main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
animate dominated by  @BEGIN animate main::@10 main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
animate::@2 dominated by  @BEGIN animate animate::@2 main::@10 main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
animate::@4 dominated by  @BEGIN animate animate::@4 animate::@2 main::@10 main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
animate::@6 dominated by  @BEGIN animate animate::@6 animate::@4 animate::@2 main::@10 main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
animate::@8 dominated by  @BEGIN animate animate::@6 animate::@4 animate::@2 animate::@8 main::@10 main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
animate::@return dominated by  @BEGIN animate animate::@return animate::@6 animate::@4 animate::@2 animate::@8 main::@10 main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
animate::@9 dominated by  @BEGIN animate animate::@6 animate::@4 animate::@2 animate::@9 animate::@8 main::@10 main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
animate::@11 dominated by  @BEGIN animate animate::@11 animate::@6 animate::@4 animate::@2 animate::@9 animate::@8 main::@10 main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
animate::@7 dominated by  @BEGIN animate animate::@6 animate::@4 animate::@2 animate::@7 main::@10 main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
animate::@5 dominated by  @BEGIN animate animate::@5 animate::@4 animate::@2 main::@10 main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
animate::@3 dominated by  @BEGIN animate animate::@3 animate::@2 main::@10 main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
animate::@1 dominated by  @BEGIN animate animate::@1 main::@10 main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
render dominated by  @BEGIN render main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
render::@1 dominated by  @BEGIN render::@1 render main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
render::@2 dominated by  @BEGIN render::@2 render::@1 render main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
render::@5 dominated by  @BEGIN render::@2 render::@5 render::@1 render main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
render::@3 dominated by  @BEGIN render::@3 render::@2 render::@5 render::@1 render main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
render::@return dominated by  @BEGIN render::@3 render::@2 render::@5 render::@1 render main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 render::@return main 
findcol dominated by  @BEGIN findcol render::@2 render::@1 render main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
findcol::@1 dominated by  @BEGIN findcol render::@2 render::@1 render main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 findcol::@1 main 
findcol::@3 dominated by  @BEGIN findcol render::@2 render::@1 render main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 findcol::@3 findcol::@1 main 
findcol::@7 dominated by  @BEGIN findcol render::@2 render::@1 render main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 findcol::@7 main::@8 findcol::@3 findcol::@1 main 
findcol::@8 dominated by  @BEGIN findcol render::@2 render::@1 render main::@1 main::@4 main::@3 main::@6 main::@5 findcol::@8 main::@7 main::@8 findcol::@3 findcol::@1 main 
findcol::@10 dominated by  @BEGIN findcol render::@2 render::@1 render main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 findcol::@8 main::@8 findcol::@3 findcol::@1 findcol::@10 main 
findcol::@11 dominated by  @BEGIN findcol render::@2 render::@1 render main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 findcol::@8 main::@8 findcol::@3 findcol::@1 findcol::@11 main 
findcol::@13 dominated by  @BEGIN findcol render::@2 render::@1 render main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 findcol::@8 main::@8 findcol::@3 findcol::@1 findcol::@13 findcol::@11 main 
findcol::@return dominated by  @BEGIN findcol render::@2 render::@1 render main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 findcol::@1 findcol::@return main 
findcol::@12 dominated by  @BEGIN findcol render::@2 render::@1 render main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 findcol::@8 main::@8 findcol::@3 findcol::@1 findcol::@12 findcol::@11 main 
findcol::@9 dominated by  @BEGIN findcol render::@2 render::@1 render main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 findcol::@8 main::@8 findcol::@3 findcol::@1 findcol::@9 main 
findcol::@6 dominated by  @BEGIN findcol render::@2 render::@1 render main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 findcol::@6 findcol::@3 findcol::@1 main 
findcol::@2 dominated by  @BEGIN findcol render::@2 render::@1 render main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 findcol::@2 findcol::@1 main 
initscreen dominated by  @BEGIN initscreen main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
initscreen::@1 dominated by  @BEGIN main::@4 initscreen main::@3 main::@6 main::@5 main::@7 main::@8 main initscreen::@1 
initscreen::@return dominated by  @BEGIN main::@4 initscreen main::@3 main::@6 main::@5 main::@7 main::@8 initscreen::@return main initscreen::@1 
addpoint dominated by  @BEGIN addpoint main 
addpoint::@return dominated by  @BEGIN addpoint addpoint::@return main 

Found back edge: Loop head: main::@1 tails: main::@11 blocks: null
Found back edge: Loop head: render::@2 tails: render::@5 blocks: null
Found back edge: Loop head: render::@1 tails: render::@3 blocks: null
Found back edge: Loop head: findcol::@1 tails: findcol::@13 blocks: null
Found back edge: Loop head: initscreen::@1 tails: initscreen::@1 blocks: null
Populated: Loop head: main::@1 tails: main::@11 blocks: main::@11 main::@10 main::@1 
Populated: Loop head: render::@2 tails: render::@5 blocks: render::@5 render::@2 
Populated: Loop head: render::@1 tails: render::@3 blocks: render::@3 render::@5 render::@2 render::@1 
Populated: Loop head: findcol::@1 tails: findcol::@13 blocks: findcol::@13 findcol::@11 findcol::@12 findcol::@10 findcol::@9 findcol::@8 findcol::@6 findcol::@7 findcol::@3 findcol::@1 findcol::@2 
Populated: Loop head: initscreen::@1 tails: initscreen::@1 blocks: initscreen::@1 
NATURAL LOOPS
Loop head: main::@1 tails: main::@11 blocks: main::@11 main::@10 main::@1 
Loop head: render::@2 tails: render::@5 blocks: render::@5 render::@2 
Loop head: render::@1 tails: render::@3 blocks: render::@3 render::@5 render::@2 render::@1 
Loop head: findcol::@1 tails: findcol::@13 blocks: findcol::@13 findcol::@11 findcol::@12 findcol::@10 findcol::@9 findcol::@8 findcol::@6 findcol::@7 findcol::@3 findcol::@1 findcol::@2 
Loop head: initscreen::@1 tails: initscreen::@1 blocks: initscreen::@1 

Found 0 loops in scope []
Found 1 loops in scope [main]
  Loop head: main::@1 tails: main::@11 blocks: main::@11 main::@10 main::@1 
Found 0 loops in scope [addpoint]
Found 1 loops in scope [initscreen]
  Loop head: initscreen::@1 tails: initscreen::@1 blocks: initscreen::@1 
Found 2 loops in scope [render]
  Loop head: render::@2 tails: render::@5 blocks: render::@5 render::@2 
  Loop head: render::@1 tails: render::@3 blocks: render::@3 render::@5 render::@2 render::@1 
Found 0 loops in scope [animate]
Found 1 loops in scope [findcol]
  Loop head: findcol::@1 tails: findcol::@13 blocks: findcol::@13 findcol::@11 findcol::@12 findcol::@10 findcol::@9 findcol::@8 findcol::@6 findcol::@7 findcol::@3 findcol::@1 findcol::@2 
NATURAL LOOPS WITH DEPTH
Loop head: main::@1 tails: main::@11 blocks: main::@11 main::@10 main::@1  depth: 1
Loop head: render::@2 tails: render::@5 blocks: render::@5 render::@2  depth: 3
Loop head: render::@1 tails: render::@3 blocks: render::@3 render::@5 render::@2 render::@1  depth: 2
Loop head: findcol::@1 tails: findcol::@13 blocks: findcol::@13 findcol::@11 findcol::@12 findcol::@10 findcol::@9 findcol::@8 findcol::@6 findcol::@7 findcol::@3 findcol::@1 findcol::@2  depth: 4
Loop head: initscreen::@1 tails: initscreen::@1 blocks: initscreen::@1  depth: 1


VARIABLE REGISTER WEIGHTS
(byte*) COLORS
(byte[256]) COLS
(byte) FILL
(byte*) SCREEN
(byte[256]) XPOS
(byte[256]) YPOS
(void()) addpoint((byte) addpoint::x , (byte) addpoint::y , (byte) addpoint::c)
(byte) addpoint::c
(byte) addpoint::c#6 0.6666666666666666
(byte) addpoint::x
(byte) addpoint::x#6 2.0
(byte) addpoint::y
(byte) addpoint::y#6 1.0
(void()) animate()
(byte~) animate::$0 4.0
(byte~) animate::$1 4.0
(byte~) animate::$10 4.0
(byte~) animate::$12 4.0
(byte~) animate::$13 4.0
(byte~) animate::$14 4.0
(byte~) animate::$16 4.0
(byte~) animate::$17 4.0
(byte~) animate::$18 4.0
(byte~) animate::$2 4.0
(byte~) animate::$20 4.0
(byte~) animate::$21 4.0
(byte~) animate::$22 4.0
(byte~) animate::$24 4.0
(byte~) animate::$25 4.0
(byte~) animate::$4 4.0
(byte~) animate::$5 4.0
(byte~) animate::$6 4.0
(byte~) animate::$8 4.0
(byte~) animate::$9 4.0
(byte()) findcol((byte) findcol::x , (byte) findcol::y)
(byte~) findcol::$10 20002.0
(byte~) findcol::$8 20002.0
(byte) findcol::diff
(byte) findcol::diff#0 20002.0
(byte) findcol::diff#1 20002.0
(byte~) findcol::diff#13 20002.0
(byte) findcol::diff#2 20002.0
(byte) findcol::diff#3 20002.0
(byte) findcol::diff#4 10001.0
(byte) findcol::diff#6 13334.666666666666
(byte) findcol::i
(byte) findcol::i#1 15001.5
(byte) findcol::i#12 2631.842105263158
(byte) findcol::mincol
(byte) findcol::mincol#1 10001.0
(byte) findcol::mincol#11 1250.125
(byte) findcol::mincol#2 13334.666666666666
(byte) findcol::mindiff
(byte) findcol::mindiff#10 1875.1875
(byte) findcol::mindiff#11 10001.0
(byte) findcol::return
(byte) findcol::return#0 3667.333333333333
(byte) findcol::x
(byte) findcol::x#0 1952.6190476190475
(byte) findcol::xp
(byte) findcol::xp#0 10001.0
(byte) findcol::y
(byte) findcol::y#0 1952.6190476190475
(byte) findcol::yp
(byte) findcol::yp#0 6250.625
(void()) initscreen()
(byte*) initscreen::screen
(byte*) initscreen::screen#1 16.5
(byte*) initscreen::screen#2 16.5
(void()) main()
(byte) numpoints
(byte) numpoints#1 476.8095238095237
(byte) numpoints#19 4.5
(void()) render()
(byte) render::col
(byte) render::col#0 2002.0
(byte*) render::colline
(byte*) render::colline#1 67.33333333333333
(byte*) render::colline#2 37.59375
(byte) render::x
(byte) render::x#1 1501.5
(byte) render::x#2 138.06896551724137
(byte) render::y
(byte) render::y#1 151.5
(byte) render::y#2 36.45454545454545

Initial phi equivalence classes
[ render::y#2 render::y#1 ]
[ render::colline#2 render::colline#1 ]
[ render::x#2 render::x#1 ]
[ findcol::i#12 findcol::i#1 ]
[ findcol::mindiff#10 findcol::mindiff#11 findcol::diff#13 ]
[ findcol::diff#4 findcol::diff#0 findcol::diff#1 ]
[ findcol::diff#6 findcol::diff#3 findcol::diff#2 ]
[ findcol::return#0 findcol::mincol#11 findcol::mincol#2 findcol::mincol#1 ]
[ initscreen::screen#2 initscreen::screen#1 ]
[ addpoint::x#6 ]
[ numpoints#19 numpoints#1 ]
[ addpoint::y#6 ]
[ addpoint::c#6 ]
Added variable animate::$0 to zero page equivalence class [ animate::$0 ]
Added variable animate::$1 to zero page equivalence class [ animate::$1 ]
Added variable animate::$2 to zero page equivalence class [ animate::$2 ]
Added variable animate::$4 to zero page equivalence class [ animate::$4 ]
Added variable animate::$5 to zero page equivalence class [ animate::$5 ]
Added variable animate::$6 to zero page equivalence class [ animate::$6 ]
Added variable animate::$8 to zero page equivalence class [ animate::$8 ]
Added variable animate::$9 to zero page equivalence class [ animate::$9 ]
Added variable animate::$10 to zero page equivalence class [ animate::$10 ]
Added variable animate::$12 to zero page equivalence class [ animate::$12 ]
Added variable animate::$13 to zero page equivalence class [ animate::$13 ]
Added variable animate::$14 to zero page equivalence class [ animate::$14 ]
Added variable animate::$16 to zero page equivalence class [ animate::$16 ]
Added variable animate::$17 to zero page equivalence class [ animate::$17 ]
Added variable animate::$18 to zero page equivalence class [ animate::$18 ]
Added variable animate::$20 to zero page equivalence class [ animate::$20 ]
Added variable animate::$21 to zero page equivalence class [ animate::$21 ]
Added variable animate::$22 to zero page equivalence class [ animate::$22 ]
Added variable animate::$24 to zero page equivalence class [ animate::$24 ]
Added variable animate::$25 to zero page equivalence class [ animate::$25 ]
Added variable findcol::x#0 to zero page equivalence class [ findcol::x#0 ]
Added variable findcol::y#0 to zero page equivalence class [ findcol::y#0 ]
Added variable render::col#0 to zero page equivalence class [ render::col#0 ]
Added variable findcol::xp#0 to zero page equivalence class [ findcol::xp#0 ]
Added variable findcol::yp#0 to zero page equivalence class [ findcol::yp#0 ]
Added variable findcol::$10 to zero page equivalence class [ findcol::$10 ]
Added variable findcol::$8 to zero page equivalence class [ findcol::$8 ]
Complete equivalence classes
[ render::y#2 render::y#1 ]
[ render::colline#2 render::colline#1 ]
[ render::x#2 render::x#1 ]
[ findcol::i#12 findcol::i#1 ]
[ findcol::mindiff#10 findcol::mindiff#11 findcol::diff#13 ]
[ findcol::diff#4 findcol::diff#0 findcol::diff#1 ]
[ findcol::diff#6 findcol::diff#3 findcol::diff#2 ]
[ findcol::return#0 findcol::mincol#11 findcol::mincol#2 findcol::mincol#1 ]
[ initscreen::screen#2 initscreen::screen#1 ]
[ addpoint::x#6 ]
[ numpoints#19 numpoints#1 ]
[ addpoint::y#6 ]
[ addpoint::c#6 ]
[ animate::$0 ]
[ animate::$1 ]
[ animate::$2 ]
[ animate::$4 ]
[ animate::$5 ]
[ animate::$6 ]
[ animate::$8 ]
[ animate::$9 ]
[ animate::$10 ]
[ animate::$12 ]
[ animate::$13 ]
[ animate::$14 ]
[ animate::$16 ]
[ animate::$17 ]
[ animate::$18 ]
[ animate::$20 ]
[ animate::$21 ]
[ animate::$22 ]
[ animate::$24 ]
[ animate::$25 ]
[ findcol::x#0 ]
[ findcol::y#0 ]
[ render::col#0 ]
[ findcol::xp#0 ]
[ findcol::yp#0 ]
[ findcol::$10 ]
[ findcol::$8 ]
Allocated zp byte:2 to zp byte:2 [ render::y#2 render::y#1 ]
Allocated zp ptr byte:3 to zp ptr byte:3 [ render::colline#2 render::colline#1 ]
Allocated zp byte:5 to zp byte:5 [ render::x#2 render::x#1 ]
Allocated zp byte:6 to zp byte:6 [ findcol::i#12 findcol::i#1 ]
Allocated zp byte:7 to zp byte:7 [ findcol::mindiff#10 findcol::mindiff#11 findcol::diff#13 ]
Allocated zp byte:8 to zp byte:8 [ findcol::diff#4 findcol::diff#0 findcol::diff#1 ]
Allocated zp byte:9 to zp byte:9 [ findcol::diff#6 findcol::diff#3 findcol::diff#2 ]
Allocated zp byte:10 to zp byte:10 [ findcol::return#0 findcol::mincol#11 findcol::mincol#2 findcol::mincol#1 ]
Allocated zp ptr byte:11 to zp ptr byte:11 [ initscreen::screen#2 initscreen::screen#1 ]
Allocated zp byte:13 to zp byte:13 [ addpoint::x#6 ]
Allocated zp byte:14 to zp byte:14 [ numpoints#19 numpoints#1 ]
Allocated zp byte:15 to zp byte:15 [ addpoint::y#6 ]
Allocated zp byte:16 to zp byte:16 [ addpoint::c#6 ]
Allocated zp byte:17 to zp byte:17 [ animate::$0 ]
Allocated zp byte:18 to zp byte:18 [ animate::$1 ]
Allocated zp byte:19 to zp byte:19 [ animate::$2 ]
Allocated zp byte:20 to zp byte:20 [ animate::$4 ]
Allocated zp byte:21 to zp byte:21 [ animate::$5 ]
Allocated zp byte:22 to zp byte:22 [ animate::$6 ]
Allocated zp byte:23 to zp byte:23 [ animate::$8 ]
Allocated zp byte:24 to zp byte:24 [ animate::$9 ]
Allocated zp byte:25 to zp byte:25 [ animate::$10 ]
Allocated zp byte:26 to zp byte:26 [ animate::$12 ]
Allocated zp byte:27 to zp byte:27 [ animate::$13 ]
Allocated zp byte:28 to zp byte:28 [ animate::$14 ]
Allocated zp byte:29 to zp byte:29 [ animate::$16 ]
Allocated zp byte:30 to zp byte:30 [ animate::$17 ]
Allocated zp byte:31 to zp byte:31 [ animate::$18 ]
Allocated zp byte:32 to zp byte:32 [ animate::$20 ]
Allocated zp byte:33 to zp byte:33 [ animate::$21 ]
Allocated zp byte:34 to zp byte:34 [ animate::$22 ]
Allocated zp byte:35 to zp byte:35 [ animate::$24 ]
Allocated zp byte:36 to zp byte:36 [ animate::$25 ]
Allocated zp byte:37 to zp byte:37 [ findcol::x#0 ]
Allocated zp byte:38 to zp byte:38 [ findcol::y#0 ]
Allocated zp byte:39 to zp byte:39 [ render::col#0 ]
Allocated zp byte:40 to zp byte:40 [ findcol::xp#0 ]
Allocated zp byte:41 to zp byte:41 [ findcol::yp#0 ]
Allocated zp byte:42 to zp byte:42 [ findcol::$10 ]
Allocated zp byte:43 to zp byte:43 [ findcol::$8 ]
INITIAL ASM
//SEG0 @BEGIN
BBEGIN:
//SEG1 [0] call main param-assignment [ ]
  jsr main
  jmp BEND
//SEG2 @END
BEND:
//SEG3 main
main:
//SEG4 [1] call addpoint param-assignment [ ]
//SEG5 [92] phi from main to addpoint
addpoint_from_main:
//SEG6 [92] phi (byte) addpoint::c#6 = (byte) 1 -- zpby1=coby1 
  lda #1
  sta 16
//SEG7 [92] phi (byte) addpoint::y#6 = (byte) 5 -- zpby1=coby1 
  lda #5
  sta 15
//SEG8 [92] phi (byte) numpoints#19 = (byte) 0 -- zpby1=coby1 
  lda #0
  sta 14
//SEG9 [92] phi (byte) addpoint::x#6 = (byte) 5 -- zpby1=coby1 
  lda #5
  sta 13
  jsr addpoint
  jmp main__B3
//SEG10 main::@3
main__B3:
//SEG11 [2] call addpoint param-assignment [ ]
//SEG12 [92] phi from main::@3 to addpoint
addpoint_from_B3:
//SEG13 [92] phi (byte) addpoint::c#6 = (byte) 2 -- zpby1=coby1 
  lda #2
  sta 16
//SEG14 [92] phi (byte) addpoint::y#6 = (byte) 8 -- zpby1=coby1 
  lda #8
  sta 15
//SEG15 [92] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
//SEG16 [92] phi (byte) addpoint::x#6 = (byte) 15 -- zpby1=coby1 
  lda #15
  sta 13
  jsr addpoint
  jmp main__B4
//SEG17 main::@4
main__B4:
//SEG18 [3] call addpoint param-assignment [ ]
//SEG19 [92] phi from main::@4 to addpoint
addpoint_from_B4:
//SEG20 [92] phi (byte) addpoint::c#6 = (byte) 3 -- zpby1=coby1 
  lda #3
  sta 16
//SEG21 [92] phi (byte) addpoint::y#6 = (byte) 14 -- zpby1=coby1 
  lda #14
  sta 15
//SEG22 [92] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
//SEG23 [92] phi (byte) addpoint::x#6 = (byte) 6 -- zpby1=coby1 
  lda #6
  sta 13
  jsr addpoint
  jmp main__B5
//SEG24 main::@5
main__B5:
//SEG25 [4] call addpoint param-assignment [ ]
//SEG26 [92] phi from main::@5 to addpoint
addpoint_from_B5:
//SEG27 [92] phi (byte) addpoint::c#6 = (byte) 4 -- zpby1=coby1 
  lda #4
  sta 16
//SEG28 [92] phi (byte) addpoint::y#6 = (byte) 2 -- zpby1=coby1 
  lda #2
  sta 15
//SEG29 [92] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
//SEG30 [92] phi (byte) addpoint::x#6 = (byte) 34 -- zpby1=coby1 
  lda #34
  sta 13
  jsr addpoint
  jmp main__B6
//SEG31 main::@6
main__B6:
//SEG32 [5] call addpoint param-assignment [ ]
//SEG33 [92] phi from main::@6 to addpoint
addpoint_from_B6:
//SEG34 [92] phi (byte) addpoint::c#6 = (byte) 5 -- zpby1=coby1 
  lda #5
  sta 16
//SEG35 [92] phi (byte) addpoint::y#6 = (byte) 17 -- zpby1=coby1 
  lda #17
  sta 15
//SEG36 [92] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
//SEG37 [92] phi (byte) addpoint::x#6 = (byte) 21 -- zpby1=coby1 
  lda #21
  sta 13
  jsr addpoint
  jmp main__B7
//SEG38 main::@7
main__B7:
//SEG39 [6] call addpoint param-assignment [ ]
//SEG40 [92] phi from main::@7 to addpoint
addpoint_from_B7:
//SEG41 [92] phi (byte) addpoint::c#6 = (byte) 7 -- zpby1=coby1 
  lda #7
  sta 16
//SEG42 [92] phi (byte) addpoint::y#6 = (byte) 22 -- zpby1=coby1 
  lda #22
  sta 15
//SEG43 [92] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
//SEG44 [92] phi (byte) addpoint::x#6 = (byte) 31 -- zpby1=coby1 
  lda #31
  sta 13
  jsr addpoint
  jmp main__B8
//SEG45 main::@8
main__B8:
//SEG46 [7] call initscreen param-assignment [ ]
  jsr initscreen
  jmp main__B1
//SEG47 main::@1
main__B1:
//SEG48 [8] call render param-assignment [ ]
  jsr render
  jmp main__B10
//SEG49 main::@10
main__B10:
//SEG50 [9] call animate param-assignment [ ]
  jsr animate
  jmp main__B11
//SEG51 main::@11
main__B11:
//SEG52 [10] if(true) goto main::@1 [ ] -- true_then_la1 
  jmp main__B1
  jmp main__Breturn
//SEG53 main::@return
main__Breturn:
//SEG54 [11] return  [ ]
  rts
//SEG55 animate
animate:
//SEG56 [12] (byte~) animate::$0 ← * (word) 4096 [ animate::$0 ] -- zpby1=_star_cowo1 
  lda 4096
  sta 17
//SEG57 [13] (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1 [ animate::$1 ] -- zpby1=zpby2_plus_1 
  lda 17
  clc
  adc #1
  sta 18
//SEG58 [14] *((word) 4096) ← (byte~) animate::$1 [ ] -- _star_cowo1=zpby1 
  lda 18
  sta 4096
//SEG59 [15] (byte~) animate::$2 ← * (word) 4096 [ animate::$2 ] -- zpby1=_star_cowo1 
  lda 4096
  sta 19
//SEG60 [16] if((byte~) animate::$2==(byte) 40) goto animate::@1 [ ] -- zpby1_eq_coby1_then_la1 
  lda 19
  cmp #40
  beq animate__B1
  jmp animate__B2
//SEG61 animate::@2
animate__B2:
//SEG62 [17] (byte~) animate::$4 ← * (word) 4352 [ animate::$4 ] -- zpby1=_star_cowo1 
  lda 4352
  sta 20
//SEG63 [18] (byte~) animate::$5 ← (byte~) animate::$4 + (byte) 1 [ animate::$5 ] -- zpby1=zpby2_plus_1 
  lda 20
  clc
  adc #1
  sta 21
//SEG64 [19] *((word) 4352) ← (byte~) animate::$5 [ ] -- _star_cowo1=zpby1 
  lda 21
  sta 4352
//SEG65 [20] (byte~) animate::$6 ← * (word) 4352 [ animate::$6 ] -- zpby1=_star_cowo1 
  lda 4352
  sta 22
//SEG66 [21] if((byte~) animate::$6==(byte) 25) goto animate::@3 [ ] -- zpby1_eq_coby1_then_la1 
  lda 22
  cmp #25
  beq animate__B3
  jmp animate__B4
//SEG67 animate::@4
animate__B4:
//SEG68 [22] (byte~) animate::$8 ← * (word) 4097 [ animate::$8 ] -- zpby1=_star_cowo1 
  lda 4097
  sta 23
//SEG69 [23] (byte~) animate::$9 ← (byte~) animate::$8 - (byte) 1 [ animate::$9 ] -- zpby1=zpby2_minus_1 
  lda 23
  sec
  sbc #1
  sta 24
//SEG70 [24] *((word) 4097) ← (byte~) animate::$9 [ ] -- _star_cowo1=zpby1 
  lda 24
  sta 4097
//SEG71 [25] (byte~) animate::$10 ← * (word) 4097 [ animate::$10 ] -- zpby1=_star_cowo1 
  lda 4097
  sta 25
//SEG72 [26] if((byte~) animate::$10==(byte) 255) goto animate::@5 [ ] -- zpby1_eq_coby1_then_la1 
  lda 25
  cmp #255
  beq animate__B5
  jmp animate__B6
//SEG73 animate::@6
animate__B6:
//SEG74 [27] (byte~) animate::$12 ← * (word) 4354 [ animate::$12 ] -- zpby1=_star_cowo1 
  lda 4354
  sta 26
//SEG75 [28] (byte~) animate::$13 ← (byte~) animate::$12 + (byte) 1 [ animate::$13 ] -- zpby1=zpby2_plus_1 
  lda 26
  clc
  adc #1
  sta 27
//SEG76 [29] *((word) 4354) ← (byte~) animate::$13 [ ] -- _star_cowo1=zpby1 
  lda 27
  sta 4354
//SEG77 [30] (byte~) animate::$14 ← * (word) 4354 [ animate::$14 ] -- zpby1=_star_cowo1 
  lda 4354
  sta 28
//SEG78 [31] if((byte~) animate::$14==(byte) 25) goto animate::@7 [ ] -- zpby1_eq_coby1_then_la1 
  lda 28
  cmp #25
  beq animate__B7
  jmp animate__B8
//SEG79 animate::@8
animate__B8:
//SEG80 [32] (byte~) animate::$16 ← * (word) 4355 [ animate::$16 ] -- zpby1=_star_cowo1 
  lda 4355
  sta 29
//SEG81 [33] (byte~) animate::$17 ← (byte~) animate::$16 - (byte) 1 [ animate::$17 ] -- zpby1=zpby2_minus_1 
  lda 29
  sec
  sbc #1
  sta 30
//SEG82 [34] *((word) 4355) ← (byte~) animate::$17 [ ] -- _star_cowo1=zpby1 
  lda 30
  sta 4355
//SEG83 [35] (byte~) animate::$18 ← * (word) 4355 [ animate::$18 ] -- zpby1=_star_cowo1 
  lda 4355
  sta 31
//SEG84 [36] if((byte~) animate::$18==(byte) 255) goto animate::@9 [ ] -- zpby1_eq_coby1_then_la1 
  lda 31
  cmp #255
  beq animate__B9
  jmp animate__Breturn
//SEG85 animate::@return
animate__Breturn:
//SEG86 [37] return  [ ]
  rts
//SEG87 animate::@9
animate__B9:
//SEG88 [38] *((word) 4355) ← (byte) 25 [ ] -- _star_cowo1=coby2 
  lda #25
  sta 4355
//SEG89 [39] (byte~) animate::$20 ← * (word) 4099 [ animate::$20 ] -- zpby1=_star_cowo1 
  lda 4099
  sta 32
//SEG90 [40] (byte~) animate::$21 ← (byte~) animate::$20 + (byte) 7 [ animate::$21 ] -- zpby1=zpby2_plus_coby1 
  lda 32
  clc
  adc #7
  sta 33
//SEG91 [41] *((word) 4099) ← (byte~) animate::$21 [ ] -- _star_cowo1=zpby1 
  lda 33
  sta 4099
//SEG92 [42] (byte~) animate::$22 ← * (word) 4099 [ animate::$22 ] -- zpby1=_star_cowo1 
  lda 4099
  sta 34
//SEG93 [43] if((byte~) animate::$22>=(byte) 40) goto animate::@11 [ ] -- zpby1_ge_coby1_then_la1 
  lda 34
  cmp #40
  bcs animate__B11
  jmp animate__Breturn
//SEG94 animate::@11
animate__B11:
//SEG95 [44] (byte~) animate::$24 ← * (word) 4099 [ animate::$24 ] -- zpby1=_star_cowo1 
  lda 4099
  sta 35
//SEG96 [45] (byte~) animate::$25 ← (byte~) animate::$24 - (byte) 40 [ animate::$25 ] -- zpby1=zpby2_minus_coby1 
  lda 35
  sec
  sbc #40
  sta 36
//SEG97 [46] *((word) 4099) ← (byte~) animate::$25 [ ] -- _star_cowo1=zpby1 
  lda 36
  sta 4099
  jmp animate__Breturn
//SEG98 animate::@7
animate__B7:
//SEG99 [47] *((word) 4354) ← (byte) 0 [ ] -- _star_cowo1=coby2 
  lda #0
  sta 4354
  jmp animate__B8
//SEG100 animate::@5
animate__B5:
//SEG101 [48] *((word) 4097) ← (byte) 40 [ ] -- _star_cowo1=coby2 
  lda #40
  sta 4097
  jmp animate__B6
//SEG102 animate::@3
animate__B3:
//SEG103 [49] *((word) 4352) ← (byte) 0 [ ] -- _star_cowo1=coby2 
  lda #0
  sta 4352
  jmp animate__B4
//SEG104 animate::@1
animate__B1:
//SEG105 [50] *((word) 4096) ← (byte) 0 [ ] -- _star_cowo1=coby2 
  lda #0
  sta 4096
  jmp animate__B2
//SEG106 render
render:
//SEG107 [51] phi from render to render::@1
render__B1_from_render:
//SEG108 [51] phi (byte*) render::colline#2 = (word) 55296 -- zpptrby1=cowo1 
  lda #<55296
  sta 3
  lda #>55296
  sta 3+1
//SEG109 [51] phi (byte) render::y#2 = (byte) 0 -- zpby1=coby1 
  lda #0
  sta 2
  jmp render__B1
//SEG110 [51] phi from render::@3 to render::@1
render__B1_from_B3:
//SEG111 [51] phi (byte*) render::colline#2 = (byte*) render::colline#1 -- register_copy 
//SEG112 [51] phi (byte) render::y#2 = (byte) render::y#1 -- register_copy 
  jmp render__B1
//SEG113 render::@1
render__B1:
//SEG114 [52] phi from render::@1 to render::@2
render__B2_from_B1:
//SEG115 [52] phi (byte) render::x#2 = (byte) 0 -- zpby1=coby1 
  lda #0
  sta 5
  jmp render__B2
//SEG116 [52] phi from render::@5 to render::@2
render__B2_from_B5:
//SEG117 [52] phi (byte) render::x#2 = (byte) render::x#1 -- register_copy 
  jmp render__B2
//SEG118 render::@2
render__B2:
//SEG119 [53] (byte) findcol::x#0 ← (byte) render::x#2 [ render::x#2 render::y#2 render::colline#2 ] -- zpby1=zpby2 
  lda 5
  sta 37
//SEG120 [54] (byte) findcol::y#0 ← (byte) render::y#2 [ render::x#2 render::y#2 render::colline#2 ] -- zpby1=zpby2 
  lda 2
  sta 38
//SEG121 [55] call findcol param-assignment [ render::x#2 render::y#2 findcol::return#0 render::colline#2 ]
  jsr findcol
  jmp render__B5
//SEG122 render::@5
render__B5:
//SEG123 [56] (byte) render::col#0 ← (byte) findcol::return#0 [ render::x#2 render::y#2 render::colline#2 render::col#0 ] -- zpby1=zpby2 
  lda 10
  sta 39
//SEG124 [57] *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0 [ render::x#2 render::y#2 render::colline#2 ] -- zpptrby1_staridx_zpby1=zpby2 
  lda 39
  ldy 5
  sta (3),y
//SEG125 [58] (byte) render::x#1 ← ++ (byte) render::x#2 [ render::x#1 render::y#2 render::colline#2 ] -- zpby1=_inc_zpby1 
  inc 5
//SEG126 [59] if((byte) render::x#1<(byte) 40) goto render::@2 [ render::x#1 render::y#2 render::colline#2 ] -- zpby1_lt_coby1_then_la1 
  lda 5
  cmp #40
  bcc render__B2_from_B5
  jmp render__B3
//SEG127 render::@3
render__B3:
//SEG128 [60] (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40 [ render::colline#1 render::y#2 ] -- zpptrby1=zpptrby1_plus_coby1 
  lda 3
  clc
  adc #40
  sta 3
  bcc !+
  inc 3+1
!:
//SEG129 [61] (byte) render::y#1 ← ++ (byte) render::y#2 [ render::y#1 render::colline#1 ] -- zpby1=_inc_zpby1 
  inc 2
//SEG130 [62] if((byte) render::y#1<(byte) 25) goto render::@1 [ render::y#1 render::colline#1 ] -- zpby1_lt_coby1_then_la1 
  lda 2
  cmp #25
  bcc render__B1_from_B3
  jmp render__Breturn
//SEG131 render::@return
render__Breturn:
//SEG132 [63] return  [ ]
  rts
//SEG133 findcol
findcol:
//SEG134 [64] phi from findcol to findcol::@1
findcol__B1_from_findcol:
//SEG135 [64] phi (byte) findcol::mincol#11 = (byte) 0 -- zpby1=coby1 
  lda #0
  sta 10
//SEG136 [64] phi (byte) findcol::mindiff#10 = (byte) 255 -- zpby1=coby1 
  lda #255
  sta 7
//SEG137 [64] phi (byte) findcol::i#12 = (byte) 0 -- zpby1=coby1 
  lda #0
  sta 6
  jmp findcol__B1
//SEG138 [64] phi from findcol::@13 to findcol::@1
findcol__B1_from_B13:
//SEG139 [64] phi (byte) findcol::mincol#11 = (byte) findcol::mincol#2 -- register_copy 
//SEG140 [64] phi (byte) findcol::mindiff#10 = (byte) findcol::mindiff#11 -- register_copy 
//SEG141 [64] phi (byte) findcol::i#12 = (byte) findcol::i#1 -- register_copy 
  jmp findcol__B1
//SEG142 findcol::@1
findcol__B1:
//SEG143 [65] (byte) findcol::xp#0 ← (word) 4096 *idx (byte) findcol::i#12 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1=cowo1_staridx_zpby2 
  ldx 6
  lda 4096,x
  sta 40
//SEG144 [66] (byte) findcol::yp#0 ← (word) 4352 *idx (byte) findcol::i#12 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1=cowo1_staridx_zpby2 
  ldx 6
  lda 4352,x
  sta 41
//SEG145 [67] if((byte) findcol::x#0==(byte) findcol::xp#0) goto findcol::@2 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1_eq_zpby2_then_la1 
  lda 37
  cmp 40
  beq findcol__B2
  jmp findcol__B3
//SEG146 findcol::@3
findcol__B3:
//SEG147 [68] if((byte) findcol::x#0<(byte) findcol::xp#0) goto findcol::@6 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1_lt_zpby2_then_la1 
  lda 37
  cmp 40
  bcc findcol__B6
  jmp findcol__B7
//SEG148 findcol::@7
findcol__B7:
//SEG149 [69] (byte) findcol::diff#1 ← (byte) findcol::x#0 - (byte) findcol::xp#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::diff#1 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1=zpby2_minus_zpby3 
  lda 37
  sec
  sbc 40
  sta 8
//SEG150 [70] phi from findcol::@7 to findcol::@8
findcol__B8_from_B7:
//SEG151 [70] phi (byte) findcol::diff#4 = (byte) findcol::diff#1 -- register_copy 
  jmp findcol__B8
//SEG152 findcol::@8
findcol__B8:
//SEG153 [71] if((byte) findcol::y#0<(byte) findcol::yp#0) goto findcol::@9 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::yp#0 findcol::diff#4 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1_lt_zpby2_then_la1 
  lda 38
  cmp 41
  bcc findcol__B9
  jmp findcol__B10
//SEG154 findcol::@10
findcol__B10:
//SEG155 [72] (byte~) findcol::$10 ← (byte) findcol::y#0 - (byte) findcol::yp#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#4 findcol::$10 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1=zpby2_minus_zpby3 
  lda 38
  sec
  sbc 41
  sta 42
//SEG156 [73] (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$10 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#3 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1=zpby2_plus_zpby3 
  lda 8
  clc
  adc 42
  sta 9
//SEG157 [74] phi from findcol::@10 to findcol::@11
findcol__B11_from_B10:
//SEG158 [74] phi (byte) findcol::diff#6 = (byte) findcol::diff#3 -- register_copy 
  jmp findcol__B11
//SEG159 findcol::@11
findcol__B11:
//SEG160 [75] if((byte) findcol::diff#6<(byte) findcol::mindiff#10) goto findcol::@12 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#6 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1_lt_zpby2_then_la1 
  lda 9
  cmp 7
  bcc findcol__B12
//SEG161 [76] phi from findcol::@11 to findcol::@13
findcol__B13_from_B11:
//SEG162 [76] phi (byte) findcol::mindiff#11 = (byte) findcol::mindiff#10 -- register_copy 
//SEG163 [76] phi (byte) findcol::mincol#2 = (byte) findcol::mincol#11 -- register_copy 
  jmp findcol__B13
//SEG164 findcol::@13
findcol__B13:
//SEG165 [77] (byte) findcol::i#1 ← ++ (byte) findcol::i#12 [ render::x#2 render::y#2 render::colline#2 findcol::i#1 findcol::mindiff#11 findcol::mincol#2 findcol::x#0 findcol::y#0 numpoints#1 ] -- zpby1=_inc_zpby1 
  inc 6
//SEG166 [78] if((byte) findcol::i#1<(byte) numpoints#1) goto findcol::@1 [ render::x#2 render::y#2 render::colline#2 findcol::i#1 findcol::mindiff#11 findcol::mincol#2 findcol::x#0 findcol::y#0 numpoints#1 ] -- zpby1_lt_zpby2_then_la1 
  lda 6
  cmp 14
  bcc findcol__B1_from_B13
//SEG167 [79] phi from findcol::@13 to findcol::@return
findcol__Breturn_from_B13:
//SEG168 [79] phi (byte) findcol::return#0 = (byte) findcol::mincol#2 -- register_copy 
  jmp findcol__Breturn
//SEG169 [79] phi from findcol::@2 to findcol::@return
findcol__Breturn_from_B2:
//SEG170 [79] phi (byte) findcol::return#0 = (byte) 0 -- zpby1=coby1 
  lda #0
  sta 10
  jmp findcol__Breturn
//SEG171 findcol::@return
findcol__Breturn:
//SEG172 [80] return  [ render::x#2 render::y#2 findcol::return#0 render::colline#2 ]
  rts
//SEG173 findcol::@12
findcol__B12:
//SEG174 [81] (byte) findcol::mincol#1 ← (word) 4608 *idx (byte) findcol::i#12 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#6 findcol::mincol#1 numpoints#1 ] -- zpby1=cowo1_staridx_zpby2 
  ldx 6
  lda 4608,x
  sta 10
//SEG175 [82] (byte~) findcol::diff#13 ← (byte) findcol::diff#6 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::mincol#1 findcol::diff#13 numpoints#1 ] -- zpby1=zpby2 
  lda 9
  sta 7
//SEG176 [76] phi from findcol::@12 to findcol::@13
findcol__B13_from_B12:
//SEG177 [76] phi (byte) findcol::mindiff#11 = (byte~) findcol::diff#13 -- register_copy 
//SEG178 [76] phi (byte) findcol::mincol#2 = (byte) findcol::mincol#1 -- register_copy 
  jmp findcol__B13
//SEG179 findcol::@9
findcol__B9:
//SEG180 [83] (byte~) findcol::$8 ← (byte) findcol::yp#0 - (byte) findcol::y#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#4 findcol::mindiff#10 findcol::mincol#11 numpoints#1 findcol::$8 ] -- zpby1=zpby2_minus_zpby3 
  lda 41
  sec
  sbc 38
  sta 43
//SEG181 [84] (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$8 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#2 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1=zpby2_plus_zpby3 
  lda 8
  clc
  adc 43
  sta 9
//SEG182 [74] phi from findcol::@9 to findcol::@11
findcol__B11_from_B9:
//SEG183 [74] phi (byte) findcol::diff#6 = (byte) findcol::diff#2 -- register_copy 
  jmp findcol__B11
//SEG184 findcol::@6
findcol__B6:
//SEG185 [85] (byte) findcol::diff#0 ← (byte) findcol::xp#0 - (byte) findcol::x#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::diff#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1=zpby2_minus_zpby3 
  lda 40
  sec
  sbc 37
  sta 8
//SEG186 [70] phi from findcol::@6 to findcol::@8
findcol__B8_from_B6:
//SEG187 [70] phi (byte) findcol::diff#4 = (byte) findcol::diff#0 -- register_copy 
  jmp findcol__B8
//SEG188 findcol::@2
findcol__B2:
//SEG189 [86] if((byte) findcol::y#0==(byte) findcol::yp#0) goto findcol::@return [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1_eq_zpby2_then_la1 
  lda 38
  cmp 41
  beq findcol__Breturn_from_B2
  jmp findcol__B3
//SEG190 initscreen
initscreen:
//SEG191 [87] phi from initscreen to initscreen::@1
initscreen__B1_from_initscreen:
//SEG192 [87] phi (byte*) initscreen::screen#2 = (word) 1024 -- zpptrby1=cowo1 
  lda #<1024
  sta 11
  lda #>1024
  sta 11+1
  jmp initscreen__B1
//SEG193 [87] phi from initscreen::@1 to initscreen::@1
initscreen__B1_from_B1:
//SEG194 [87] phi (byte*) initscreen::screen#2 = (byte*) initscreen::screen#1 -- register_copy 
  jmp initscreen__B1
//SEG195 initscreen::@1
initscreen__B1:
//SEG196 [88] *((byte*) initscreen::screen#2) ← (byte) 230 [ initscreen::screen#2 ] -- _star_zpptrby1=coby1 
  ldy #0
  lda #230
  sta (11),y
//SEG197 [89] (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2 [ initscreen::screen#1 ] -- zpptrby1=_inc_zpptrby1 
  inc 11
  bne !+
  inc 11+1
!:
//SEG198 [90] if((byte*) initscreen::screen#1<(word) 2048) goto initscreen::@1 [ initscreen::screen#1 ] -- zpptrby1_lt_cowo1_then_la1 
  lda 11+1
  cmp #>2048
  bcc initscreen__B1_from_B1
  bne !+
  lda 11
  cmp #<2048
  bcc initscreen__B1_from_B1
!:
  jmp initscreen__Breturn
//SEG199 initscreen::@return
initscreen__Breturn:
//SEG200 [91] return  [ ]
  rts
//SEG201 addpoint
addpoint:
//SEG202 [93] *((word) 4096 + (byte) numpoints#19) ← (byte) addpoint::x#6 [ numpoints#19 addpoint::y#6 addpoint::c#6 ] -- cowo1_staridx_zpby1=zpby2 
  lda 13
  ldx 14
  sta 4096,x
//SEG203 [94] *((word) 4352 + (byte) numpoints#19) ← (byte) addpoint::y#6 [ numpoints#19 addpoint::c#6 ] -- cowo1_staridx_zpby1=zpby2 
  lda 15
  ldx 14
  sta 4352,x
//SEG204 [95] *((word) 4608 + (byte) numpoints#19) ← (byte) addpoint::c#6 [ numpoints#19 ] -- cowo1_staridx_zpby1=zpby2 
  lda 16
  ldx 14
  sta 4608,x
//SEG205 [96] (byte) numpoints#1 ← ++ (byte) numpoints#19 [ ] -- zpby1=_inc_zpby1 
  inc 14
  jmp addpoint__Breturn
//SEG206 addpoint::@return
addpoint__Breturn:
//SEG207 [97] return  [ ]
  rts

Statement [38] *((word) 4355) ← (byte) 25 [ ] always clobbers reg byte a 
Statement [40] (byte~) animate::$21 ← (byte~) animate::$20 + (byte) 7 [ animate::$21 ] always clobbers reg byte a 
Statement [45] (byte~) animate::$25 ← (byte~) animate::$24 - (byte) 40 [ animate::$25 ] always clobbers reg byte a 
Statement [47] *((word) 4354) ← (byte) 0 [ ] always clobbers reg byte a 
Statement [48] *((word) 4097) ← (byte) 40 [ ] always clobbers reg byte a 
Statement [49] *((word) 4352) ← (byte) 0 [ ] always clobbers reg byte a 
Statement [50] *((word) 4096) ← (byte) 0 [ ] always clobbers reg byte a 
Statement [60] (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40 [ render::colline#1 render::y#2 ] always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp byte:2 [ render::y#2 render::y#1 ]
Statement [69] (byte) findcol::diff#1 ← (byte) findcol::x#0 - (byte) findcol::xp#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::diff#1 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp byte:5 [ render::x#2 render::x#1 ]
Removing always clobbered register reg byte a as potential for zp byte:6 [ findcol::i#12 findcol::i#1 ]
Removing always clobbered register reg byte a as potential for zp byte:37 [ findcol::x#0 ]
Removing always clobbered register reg byte a as potential for zp byte:38 [ findcol::y#0 ]
Removing always clobbered register reg byte a as potential for zp byte:41 [ findcol::yp#0 ]
Removing always clobbered register reg byte a as potential for zp byte:7 [ findcol::mindiff#10 findcol::mindiff#11 findcol::diff#13 ]
Removing always clobbered register reg byte a as potential for zp byte:10 [ findcol::return#0 findcol::mincol#11 findcol::mincol#2 findcol::mincol#1 ]
Removing always clobbered register reg byte a as potential for zp byte:14 [ numpoints#19 numpoints#1 ]
Statement [72] (byte~) findcol::$10 ← (byte) findcol::y#0 - (byte) findcol::yp#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#4 findcol::$10 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp byte:8 [ findcol::diff#4 findcol::diff#0 findcol::diff#1 ]
Statement [83] (byte~) findcol::$8 ← (byte) findcol::yp#0 - (byte) findcol::y#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#4 findcol::mindiff#10 findcol::mincol#11 numpoints#1 findcol::$8 ] always clobbers reg byte a 
Statement [85] (byte) findcol::diff#0 ← (byte) findcol::xp#0 - (byte) findcol::x#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::diff#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] always clobbers reg byte a 
Statement [88] *((byte*) initscreen::screen#2) ← (byte) 230 [ initscreen::screen#2 ] always clobbers reg byte a reg byte y 
Statement [90] if((byte*) initscreen::screen#1<(word) 2048) goto initscreen::@1 [ initscreen::screen#1 ] always clobbers reg byte a 
Statement [38] *((word) 4355) ← (byte) 25 [ ] always clobbers reg byte a 
Statement [40] (byte~) animate::$21 ← (byte~) animate::$20 + (byte) 7 [ animate::$21 ] always clobbers reg byte a 
Statement [45] (byte~) animate::$25 ← (byte~) animate::$24 - (byte) 40 [ animate::$25 ] always clobbers reg byte a 
Statement [47] *((word) 4354) ← (byte) 0 [ ] always clobbers reg byte a 
Statement [48] *((word) 4097) ← (byte) 40 [ ] always clobbers reg byte a 
Statement [49] *((word) 4352) ← (byte) 0 [ ] always clobbers reg byte a 
Statement [50] *((word) 4096) ← (byte) 0 [ ] always clobbers reg byte a 
Statement [60] (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40 [ render::colline#1 render::y#2 ] always clobbers reg byte a 
Statement [69] (byte) findcol::diff#1 ← (byte) findcol::x#0 - (byte) findcol::xp#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::diff#1 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] always clobbers reg byte a 
Statement [72] (byte~) findcol::$10 ← (byte) findcol::y#0 - (byte) findcol::yp#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#4 findcol::$10 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] always clobbers reg byte a 
Statement [83] (byte~) findcol::$8 ← (byte) findcol::yp#0 - (byte) findcol::y#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#4 findcol::mindiff#10 findcol::mincol#11 numpoints#1 findcol::$8 ] always clobbers reg byte a 
Statement [85] (byte) findcol::diff#0 ← (byte) findcol::xp#0 - (byte) findcol::x#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::diff#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] always clobbers reg byte a 
Statement [88] *((byte*) initscreen::screen#2) ← (byte) 230 [ initscreen::screen#2 ] always clobbers reg byte a reg byte y 
Statement [90] if((byte*) initscreen::screen#1<(word) 2048) goto initscreen::@1 [ initscreen::screen#1 ] always clobbers reg byte a 
Equivalence Class zp byte:17 [ animate::$0 ] has ALU potential.
Equivalence Class zp byte:20 [ animate::$4 ] has ALU potential.
Equivalence Class zp byte:26 [ animate::$12 ] has ALU potential.
Equivalence Class zp byte:32 [ animate::$20 ] has ALU potential.
REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp byte:2 [ render::y#2 render::y#1 ] : zp byte:2 , reg byte x , reg byte y , 
Potential registers zp ptr byte:3 [ render::colline#2 render::colline#1 ] : zp ptr byte:3 , 
Potential registers zp byte:5 [ render::x#2 render::x#1 ] : zp byte:5 , reg byte x , reg byte y , 
Potential registers zp byte:6 [ findcol::i#12 findcol::i#1 ] : zp byte:6 , reg byte x , reg byte y , 
Potential registers zp byte:7 [ findcol::mindiff#10 findcol::mindiff#11 findcol::diff#13 ] : zp byte:7 , reg byte x , reg byte y , 
Potential registers zp byte:8 [ findcol::diff#4 findcol::diff#0 findcol::diff#1 ] : zp byte:8 , reg byte x , reg byte y , 
Potential registers zp byte:9 [ findcol::diff#6 findcol::diff#3 findcol::diff#2 ] : zp byte:9 , reg byte a , reg byte x , reg byte y , 
Potential registers zp byte:10 [ findcol::return#0 findcol::mincol#11 findcol::mincol#2 findcol::mincol#1 ] : zp byte:10 , reg byte x , reg byte y , 
Potential registers zp ptr byte:11 [ initscreen::screen#2 initscreen::screen#1 ] : zp ptr byte:11 , 
Potential registers zp byte:13 [ addpoint::x#6 ] : zp byte:13 , reg byte a , reg byte x , reg byte y , 
Potential registers zp byte:14 [ numpoints#19 numpoints#1 ] : zp byte:14 , reg byte x , reg byte y , 
Potential registers zp byte:15 [ addpoint::y#6 ] : zp byte:15 , reg byte a , reg byte x , reg byte y , 
Potential registers zp byte:16 [ addpoint::c#6 ] : zp byte:16 , reg byte a , reg byte x , reg byte y , 
Potential registers zp byte:17 [ animate::$0 ] : zp byte:17 , reg byte a , reg byte x , reg byte y , reg byte alu , 
Potential registers zp byte:18 [ animate::$1 ] : zp byte:18 , reg byte a , reg byte x , reg byte y , 
Potential registers zp byte:19 [ animate::$2 ] : zp byte:19 , reg byte a , reg byte x , reg byte y , 
Potential registers zp byte:20 [ animate::$4 ] : zp byte:20 , reg byte a , reg byte x , reg byte y , reg byte alu , 
Potential registers zp byte:21 [ animate::$5 ] : zp byte:21 , reg byte a , reg byte x , reg byte y , 
Potential registers zp byte:22 [ animate::$6 ] : zp byte:22 , reg byte a , reg byte x , reg byte y , 
Potential registers zp byte:23 [ animate::$8 ] : zp byte:23 , reg byte a , reg byte x , reg byte y , 
Potential registers zp byte:24 [ animate::$9 ] : zp byte:24 , reg byte a , reg byte x , reg byte y , 
Potential registers zp byte:25 [ animate::$10 ] : zp byte:25 , reg byte a , reg byte x , reg byte y , 
Potential registers zp byte:26 [ animate::$12 ] : zp byte:26 , reg byte a , reg byte x , reg byte y , reg byte alu , 
Potential registers zp byte:27 [ animate::$13 ] : zp byte:27 , reg byte a , reg byte x , reg byte y , 
Potential registers zp byte:28 [ animate::$14 ] : zp byte:28 , reg byte a , reg byte x , reg byte y , 
Potential registers zp byte:29 [ animate::$16 ] : zp byte:29 , reg byte a , reg byte x , reg byte y , 
Potential registers zp byte:30 [ animate::$17 ] : zp byte:30 , reg byte a , reg byte x , reg byte y , 
Potential registers zp byte:31 [ animate::$18 ] : zp byte:31 , reg byte a , reg byte x , reg byte y , 
Potential registers zp byte:32 [ animate::$20 ] : zp byte:32 , reg byte a , reg byte x , reg byte y , reg byte alu , 
Potential registers zp byte:33 [ animate::$21 ] : zp byte:33 , reg byte a , reg byte x , reg byte y , 
Potential registers zp byte:34 [ animate::$22 ] : zp byte:34 , reg byte a , reg byte x , reg byte y , 
Potential registers zp byte:35 [ animate::$24 ] : zp byte:35 , reg byte a , reg byte x , reg byte y , 
Potential registers zp byte:36 [ animate::$25 ] : zp byte:36 , reg byte a , reg byte x , reg byte y , 
Potential registers zp byte:37 [ findcol::x#0 ] : zp byte:37 , reg byte x , reg byte y , 
Potential registers zp byte:38 [ findcol::y#0 ] : zp byte:38 , reg byte x , reg byte y , 
Potential registers zp byte:39 [ render::col#0 ] : zp byte:39 , reg byte a , reg byte x , reg byte y , 
Potential registers zp byte:40 [ findcol::xp#0 ] : zp byte:40 , reg byte a , reg byte x , reg byte y , 
Potential registers zp byte:41 [ findcol::yp#0 ] : zp byte:41 , reg byte x , reg byte y , 
Potential registers zp byte:42 [ findcol::$10 ] : zp byte:42 , reg byte a , reg byte x , reg byte y , 
Potential registers zp byte:43 [ findcol::$8 ] : zp byte:43 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [findcol] 53,338.67: zp byte:9 [ findcol::diff#6 findcol::diff#3 findcol::diff#2 ] 50,005: zp byte:8 [ findcol::diff#4 findcol::diff#0 findcol::diff#1 ] 31,878.19: zp byte:7 [ findcol::mindiff#10 findcol::mindiff#11 findcol::diff#13 ] 28,253.12: zp byte:10 [ findcol::return#0 findcol::mincol#11 findcol::mincol#2 findcol::mincol#1 ] 20,002: zp byte:42 [ findcol::$10 ] 20,002: zp byte:43 [ findcol::$8 ] 17,633.34: zp byte:6 [ findcol::i#12 findcol::i#1 ] 10,001: zp byte:40 [ findcol::xp#0 ] 6,250.62: zp byte:41 [ findcol::yp#0 ] 1,952.62: zp byte:37 [ findcol::x#0 ] 1,952.62: zp byte:38 [ findcol::y#0 ] 
Uplift Scope [render] 2,002: zp byte:39 [ render::col#0 ] 1,639.57: zp byte:5 [ render::x#2 render::x#1 ] 187.95: zp byte:2 [ render::y#2 render::y#1 ] 104.93: zp ptr byte:3 [ render::colline#2 render::colline#1 ] 
Uplift Scope [] 481.31: zp byte:14 [ numpoints#19 numpoints#1 ] 
Uplift Scope [animate] 4: zp byte:17 [ animate::$0 ] 4: zp byte:18 [ animate::$1 ] 4: zp byte:19 [ animate::$2 ] 4: zp byte:20 [ animate::$4 ] 4: zp byte:21 [ animate::$5 ] 4: zp byte:22 [ animate::$6 ] 4: zp byte:23 [ animate::$8 ] 4: zp byte:24 [ animate::$9 ] 4: zp byte:25 [ animate::$10 ] 4: zp byte:26 [ animate::$12 ] 4: zp byte:27 [ animate::$13 ] 4: zp byte:28 [ animate::$14 ] 4: zp byte:29 [ animate::$16 ] 4: zp byte:30 [ animate::$17 ] 4: zp byte:31 [ animate::$18 ] 4: zp byte:32 [ animate::$20 ] 4: zp byte:33 [ animate::$21 ] 4: zp byte:34 [ animate::$22 ] 4: zp byte:35 [ animate::$24 ] 4: zp byte:36 [ animate::$25 ] 
Uplift Scope [initscreen] 33: zp ptr byte:11 [ initscreen::screen#2 initscreen::screen#1 ] 
Uplift Scope [addpoint] 2: zp byte:13 [ addpoint::x#6 ] 1: zp byte:15 [ addpoint::y#6 ] 0.67: zp byte:16 [ addpoint::c#6 ] 
Uplift Scope [main] 

Uplift attempts [findcol] 10000/559872 (limiting to 10000)
Uplifting [findcol] best 1694527 combination reg byte a [ findcol::diff#6 findcol::diff#3 findcol::diff#2 ] zp byte:8 [ findcol::diff#4 findcol::diff#0 findcol::diff#1 ] zp byte:7 [ findcol::mindiff#10 findcol::mindiff#11 findcol::diff#13 ] reg byte y [ findcol::return#0 findcol::mincol#11 findcol::mincol#2 findcol::mincol#1 ] reg byte a [ findcol::$10 ] reg byte a [ findcol::$8 ] reg byte x [ findcol::i#12 findcol::i#1 ] zp byte:40 [ findcol::xp#0 ] zp byte:41 [ findcol::yp#0 ] zp byte:37 [ findcol::x#0 ] zp byte:38 [ findcol::y#0 ] 
Limited combination testing to 10000 combinations of 559872 possible.
Uplifting [render] best 1690527 combination reg byte a [ render::col#0 ] zp byte:5 [ render::x#2 render::x#1 ] zp byte:2 [ render::y#2 render::y#1 ] zp ptr byte:3 [ render::colline#2 render::colline#1 ] 
Uplifting [] best 1690527 combination zp byte:14 [ numpoints#19 numpoints#1 ] 
Uplifting [initscreen] best 1690527 combination zp ptr byte:11 [ initscreen::screen#2 initscreen::screen#1 ] 
Uplifting [addpoint] best 1690487 combination reg byte a [ addpoint::x#6 ] reg byte y [ addpoint::y#6 ] zp byte:16 [ addpoint::c#6 ] 
Uplifting [main] best 1690487 combination 
Uplifting remains [reg byte a [ animate::$0 ]] best 1690481 combination reg byte a [ animate::$0 ] 
Uplifting remains [reg byte a [ animate::$1 ]] best 1690475 combination reg byte a [ animate::$1 ] 
Uplifting remains [reg byte a [ animate::$2 ]] best 1690469 combination reg byte a [ animate::$2 ] 
Uplifting remains [reg byte a [ animate::$4 ]] best 1690463 combination reg byte a [ animate::$4 ] 
Uplifting remains [reg byte a [ animate::$5 ]] best 1690457 combination reg byte a [ animate::$5 ] 
Uplifting remains [reg byte a [ animate::$6 ]] best 1690451 combination reg byte a [ animate::$6 ] 
Uplifting remains [reg byte x [ animate::$8 ]] best 1690445 combination reg byte x [ animate::$8 ] 
Uplifting remains [reg byte x [ animate::$9 ]] best 1690437 combination reg byte x [ animate::$9 ] 
Uplifting remains [reg byte a [ animate::$10 ]] best 1690431 combination reg byte a [ animate::$10 ] 
Uplifting remains [reg byte a [ animate::$12 ]] best 1690425 combination reg byte a [ animate::$12 ] 
Uplifting remains [reg byte a [ animate::$13 ]] best 1690419 combination reg byte a [ animate::$13 ] 
Uplifting remains [reg byte a [ animate::$14 ]] best 1690413 combination reg byte a [ animate::$14 ] 
Uplifting remains [reg byte x [ animate::$16 ]] best 1690407 combination reg byte x [ animate::$16 ] 
Uplifting remains [reg byte x [ animate::$17 ]] best 1690399 combination reg byte x [ animate::$17 ] 
Uplifting remains [reg byte a [ animate::$18 ]] best 1690393 combination reg byte a [ animate::$18 ] 
Uplifting remains [reg byte a [ animate::$20 ]] best 1690387 combination reg byte a [ animate::$20 ] 
Uplifting remains [reg byte a [ animate::$21 ]] best 1690381 combination reg byte a [ animate::$21 ] 
Uplifting remains [reg byte a [ animate::$22 ]] best 1690375 combination reg byte a [ animate::$22 ] 
Uplifting remains [reg byte a [ animate::$24 ]] best 1690369 combination reg byte a [ animate::$24 ] 
Uplifting remains [reg byte a [ animate::$25 ]] best 1690363 combination reg byte a [ animate::$25 ] 
Coalescing zero page register [ zp byte:2 [ render::y#2 render::y#1 ] ] with [ zp byte:16 [ addpoint::c#6 ] ]
Coalescing zero page register [ zp ptr byte:3 [ render::colline#2 render::colline#1 ] ] with [ zp ptr byte:11 [ initscreen::screen#2 initscreen::screen#1 ] ]
Coalescing zero page register [ zp byte:8 [ findcol::diff#4 findcol::diff#0 findcol::diff#1 ] ] with [ zp byte:40 [ findcol::xp#0 ] ]
Re-allocated ZP register from zp byte:7 to zp byte:6
Re-allocated ZP register from zp byte:8 to zp byte:7
Re-allocated ZP register from zp byte:14 to zp byte:8
Re-allocated ZP register from zp byte:37 to zp byte:9
Re-allocated ZP register from zp byte:38 to zp byte:10
Re-allocated ZP register from zp byte:41 to zp byte:11
Removing instruction jmp BEND
Removing instruction jmp main__B3
Removing instruction jmp main__B4
Removing instruction jmp main__B5
Removing instruction jmp main__B6
Removing instruction jmp main__B7
Removing instruction jmp main__B8
Removing instruction jmp main__B1
Removing instruction jmp main__B10
Removing instruction jmp main__B11
Removing instruction jmp main__Breturn
Removing instruction jmp animate__B2
Removing instruction jmp animate__B4
Removing instruction jmp animate__B6
Removing instruction jmp animate__B8
Removing instruction jmp animate__Breturn
Removing instruction jmp render__B1
Removing instruction jmp render__B2
Removing instruction jmp render__B5
Removing instruction jmp render__B3
Removing instruction jmp render__Breturn
Removing instruction jmp findcol__B1
Removing instruction jmp findcol__B3
Removing instruction jmp findcol__B7
Removing instruction jmp findcol__B8
Removing instruction jmp findcol__B10
Removing instruction jmp findcol__B11
Removing instruction jmp findcol__B13
Removing instruction jmp findcol__Breturn
Removing instruction jmp initscreen__B1
Removing instruction jmp initscreen__Breturn
Removing instruction jmp addpoint__Breturn
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 @BEGIN
BBEGIN:
//SEG1 [0] call main param-assignment [ ]
  jsr main
//SEG2 @END
BEND:
//SEG3 main
main:
//SEG4 [1] call addpoint param-assignment [ ]
//SEG5 [92] phi from main to addpoint
addpoint_from_main:
//SEG6 [92] phi (byte) addpoint::c#6 = (byte) 1 -- zpby1=coby1 
  lda #1
  sta 2
//SEG7 [92] phi (byte) addpoint::y#6 = (byte) 5 -- yby=coby1 
  ldy #5
//SEG8 [92] phi (byte) numpoints#19 = (byte) 0 -- zpby1=coby1 
  lda #0
  sta 8
//SEG9 [92] phi (byte) addpoint::x#6 = (byte) 5 -- aby=coby1 
  lda #5
  jsr addpoint
//SEG10 main::@3
main__B3:
//SEG11 [2] call addpoint param-assignment [ ]
//SEG12 [92] phi from main::@3 to addpoint
addpoint_from_B3:
//SEG13 [92] phi (byte) addpoint::c#6 = (byte) 2 -- zpby1=coby1 
  lda #2
  sta 2
//SEG14 [92] phi (byte) addpoint::y#6 = (byte) 8 -- yby=coby1 
  ldy #8
//SEG15 [92] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
//SEG16 [92] phi (byte) addpoint::x#6 = (byte) 15 -- aby=coby1 
  lda #15
  jsr addpoint
//SEG17 main::@4
main__B4:
//SEG18 [3] call addpoint param-assignment [ ]
//SEG19 [92] phi from main::@4 to addpoint
addpoint_from_B4:
//SEG20 [92] phi (byte) addpoint::c#6 = (byte) 3 -- zpby1=coby1 
  lda #3
  sta 2
//SEG21 [92] phi (byte) addpoint::y#6 = (byte) 14 -- yby=coby1 
  ldy #14
//SEG22 [92] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
//SEG23 [92] phi (byte) addpoint::x#6 = (byte) 6 -- aby=coby1 
  lda #6
  jsr addpoint
//SEG24 main::@5
main__B5:
//SEG25 [4] call addpoint param-assignment [ ]
//SEG26 [92] phi from main::@5 to addpoint
addpoint_from_B5:
//SEG27 [92] phi (byte) addpoint::c#6 = (byte) 4 -- zpby1=coby1 
  lda #4
  sta 2
//SEG28 [92] phi (byte) addpoint::y#6 = (byte) 2 -- yby=coby1 
  ldy #2
//SEG29 [92] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
//SEG30 [92] phi (byte) addpoint::x#6 = (byte) 34 -- aby=coby1 
  lda #34
  jsr addpoint
//SEG31 main::@6
main__B6:
//SEG32 [5] call addpoint param-assignment [ ]
//SEG33 [92] phi from main::@6 to addpoint
addpoint_from_B6:
//SEG34 [92] phi (byte) addpoint::c#6 = (byte) 5 -- zpby1=coby1 
  lda #5
  sta 2
//SEG35 [92] phi (byte) addpoint::y#6 = (byte) 17 -- yby=coby1 
  ldy #17
//SEG36 [92] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
//SEG37 [92] phi (byte) addpoint::x#6 = (byte) 21 -- aby=coby1 
  lda #21
  jsr addpoint
//SEG38 main::@7
main__B7:
//SEG39 [6] call addpoint param-assignment [ ]
//SEG40 [92] phi from main::@7 to addpoint
addpoint_from_B7:
//SEG41 [92] phi (byte) addpoint::c#6 = (byte) 7 -- zpby1=coby1 
  lda #7
  sta 2
//SEG42 [92] phi (byte) addpoint::y#6 = (byte) 22 -- yby=coby1 
  ldy #22
//SEG43 [92] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
//SEG44 [92] phi (byte) addpoint::x#6 = (byte) 31 -- aby=coby1 
  lda #31
  jsr addpoint
//SEG45 main::@8
main__B8:
//SEG46 [7] call initscreen param-assignment [ ]
  jsr initscreen
//SEG47 main::@1
main__B1:
//SEG48 [8] call render param-assignment [ ]
  jsr render
//SEG49 main::@10
main__B10:
//SEG50 [9] call animate param-assignment [ ]
  jsr animate
//SEG51 main::@11
main__B11:
//SEG52 [10] if(true) goto main::@1 [ ] -- true_then_la1 
  jmp main__B1
//SEG53 main::@return
main__Breturn:
//SEG54 [11] return  [ ]
  rts
//SEG55 animate
animate:
//SEG56 [12] (byte~) animate::$0 ← * (word) 4096 [ animate::$0 ] -- aby=_star_cowo1 
  lda 4096
//SEG57 [13] (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1 [ animate::$1 ] -- aby=aby_plus_1 
  clc
  adc #1
//SEG58 [14] *((word) 4096) ← (byte~) animate::$1 [ ] -- _star_cowo1=aby 
  sta 4096
//SEG59 [15] (byte~) animate::$2 ← * (word) 4096 [ animate::$2 ] -- aby=_star_cowo1 
  lda 4096
//SEG60 [16] if((byte~) animate::$2==(byte) 40) goto animate::@1 [ ] -- aby_eq_coby1_then_la1 
  cmp #40
  beq animate__B1
//SEG61 animate::@2
animate__B2:
//SEG62 [17] (byte~) animate::$4 ← * (word) 4352 [ animate::$4 ] -- aby=_star_cowo1 
  lda 4352
//SEG63 [18] (byte~) animate::$5 ← (byte~) animate::$4 + (byte) 1 [ animate::$5 ] -- aby=aby_plus_1 
  clc
  adc #1
//SEG64 [19] *((word) 4352) ← (byte~) animate::$5 [ ] -- _star_cowo1=aby 
  sta 4352
//SEG65 [20] (byte~) animate::$6 ← * (word) 4352 [ animate::$6 ] -- aby=_star_cowo1 
  lda 4352
//SEG66 [21] if((byte~) animate::$6==(byte) 25) goto animate::@3 [ ] -- aby_eq_coby1_then_la1 
  cmp #25
  beq animate__B3
//SEG67 animate::@4
animate__B4:
//SEG68 [22] (byte~) animate::$8 ← * (word) 4097 [ animate::$8 ] -- xby=_star_cowo1 
  ldx 4097
//SEG69 [23] (byte~) animate::$9 ← (byte~) animate::$8 - (byte) 1 [ animate::$9 ] -- xby=xby_minus_1 
  dex
//SEG70 [24] *((word) 4097) ← (byte~) animate::$9 [ ] -- _star_cowo1=xby 
  stx 4097
//SEG71 [25] (byte~) animate::$10 ← * (word) 4097 [ animate::$10 ] -- aby=_star_cowo1 
  lda 4097
//SEG72 [26] if((byte~) animate::$10==(byte) 255) goto animate::@5 [ ] -- aby_eq_coby1_then_la1 
  cmp #255
  beq animate__B5
//SEG73 animate::@6
animate__B6:
//SEG74 [27] (byte~) animate::$12 ← * (word) 4354 [ animate::$12 ] -- aby=_star_cowo1 
  lda 4354
//SEG75 [28] (byte~) animate::$13 ← (byte~) animate::$12 + (byte) 1 [ animate::$13 ] -- aby=aby_plus_1 
  clc
  adc #1
//SEG76 [29] *((word) 4354) ← (byte~) animate::$13 [ ] -- _star_cowo1=aby 
  sta 4354
//SEG77 [30] (byte~) animate::$14 ← * (word) 4354 [ animate::$14 ] -- aby=_star_cowo1 
  lda 4354
//SEG78 [31] if((byte~) animate::$14==(byte) 25) goto animate::@7 [ ] -- aby_eq_coby1_then_la1 
  cmp #25
  beq animate__B7
//SEG79 animate::@8
animate__B8:
//SEG80 [32] (byte~) animate::$16 ← * (word) 4355 [ animate::$16 ] -- xby=_star_cowo1 
  ldx 4355
//SEG81 [33] (byte~) animate::$17 ← (byte~) animate::$16 - (byte) 1 [ animate::$17 ] -- xby=xby_minus_1 
  dex
//SEG82 [34] *((word) 4355) ← (byte~) animate::$17 [ ] -- _star_cowo1=xby 
  stx 4355
//SEG83 [35] (byte~) animate::$18 ← * (word) 4355 [ animate::$18 ] -- aby=_star_cowo1 
  lda 4355
//SEG84 [36] if((byte~) animate::$18==(byte) 255) goto animate::@9 [ ] -- aby_eq_coby1_then_la1 
  cmp #255
  beq animate__B9
//SEG85 animate::@return
animate__Breturn:
//SEG86 [37] return  [ ]
  rts
//SEG87 animate::@9
animate__B9:
//SEG88 [38] *((word) 4355) ← (byte) 25 [ ] -- _star_cowo1=coby2 
  lda #25
  sta 4355
//SEG89 [39] (byte~) animate::$20 ← * (word) 4099 [ animate::$20 ] -- aby=_star_cowo1 
  lda 4099
//SEG90 [40] (byte~) animate::$21 ← (byte~) animate::$20 + (byte) 7 [ animate::$21 ] -- aby=aby_plus_coby1 
  clc
  adc #7
//SEG91 [41] *((word) 4099) ← (byte~) animate::$21 [ ] -- _star_cowo1=aby 
  sta 4099
//SEG92 [42] (byte~) animate::$22 ← * (word) 4099 [ animate::$22 ] -- aby=_star_cowo1 
  lda 4099
//SEG93 [43] if((byte~) animate::$22>=(byte) 40) goto animate::@11 [ ] -- aby_ge_coby1_then_la1 
  cmp #40
  bcs animate__B11
  jmp animate__Breturn
//SEG94 animate::@11
animate__B11:
//SEG95 [44] (byte~) animate::$24 ← * (word) 4099 [ animate::$24 ] -- aby=_star_cowo1 
  lda 4099
//SEG96 [45] (byte~) animate::$25 ← (byte~) animate::$24 - (byte) 40 [ animate::$25 ] -- aby=aby_minus_coby1 
  sec
  sbc #40
//SEG97 [46] *((word) 4099) ← (byte~) animate::$25 [ ] -- _star_cowo1=aby 
  sta 4099
  jmp animate__Breturn
//SEG98 animate::@7
animate__B7:
//SEG99 [47] *((word) 4354) ← (byte) 0 [ ] -- _star_cowo1=coby2 
  lda #0
  sta 4354
  jmp animate__B8
//SEG100 animate::@5
animate__B5:
//SEG101 [48] *((word) 4097) ← (byte) 40 [ ] -- _star_cowo1=coby2 
  lda #40
  sta 4097
  jmp animate__B6
//SEG102 animate::@3
animate__B3:
//SEG103 [49] *((word) 4352) ← (byte) 0 [ ] -- _star_cowo1=coby2 
  lda #0
  sta 4352
  jmp animate__B4
//SEG104 animate::@1
animate__B1:
//SEG105 [50] *((word) 4096) ← (byte) 0 [ ] -- _star_cowo1=coby2 
  lda #0
  sta 4096
  jmp animate__B2
//SEG106 render
render:
//SEG107 [51] phi from render to render::@1
render__B1_from_render:
//SEG108 [51] phi (byte*) render::colline#2 = (word) 55296 -- zpptrby1=cowo1 
  lda #<55296
  sta 3
  lda #>55296
  sta 3+1
//SEG109 [51] phi (byte) render::y#2 = (byte) 0 -- zpby1=coby1 
  lda #0
  sta 2
  jmp render__B1
//SEG110 [51] phi from render::@3 to render::@1
render__B1_from_B3:
//SEG111 [51] phi (byte*) render::colline#2 = (byte*) render::colline#1 -- register_copy 
//SEG112 [51] phi (byte) render::y#2 = (byte) render::y#1 -- register_copy 
//SEG113 render::@1
render__B1:
//SEG114 [52] phi from render::@1 to render::@2
render__B2_from_B1:
//SEG115 [52] phi (byte) render::x#2 = (byte) 0 -- zpby1=coby1 
  lda #0
  sta 5
  jmp render__B2
//SEG116 [52] phi from render::@5 to render::@2
render__B2_from_B5:
//SEG117 [52] phi (byte) render::x#2 = (byte) render::x#1 -- register_copy 
//SEG118 render::@2
render__B2:
//SEG119 [53] (byte) findcol::x#0 ← (byte) render::x#2 [ render::x#2 render::y#2 render::colline#2 ] -- zpby1=zpby2 
  lda 5
  sta 9
//SEG120 [54] (byte) findcol::y#0 ← (byte) render::y#2 [ render::x#2 render::y#2 render::colline#2 ] -- zpby1=zpby2 
  lda 2
  sta 10
//SEG121 [55] call findcol param-assignment [ render::x#2 render::y#2 findcol::return#0 render::colline#2 ]
  jsr findcol
//SEG122 render::@5
render__B5:
//SEG123 [56] (byte) render::col#0 ← (byte) findcol::return#0 [ render::x#2 render::y#2 render::colline#2 render::col#0 ] -- aby=yby 
  tya
//SEG124 [57] *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0 [ render::x#2 render::y#2 render::colline#2 ] -- zpptrby1_staridx_zpby1=aby 
  ldy 5
  sta (3),y
//SEG125 [58] (byte) render::x#1 ← ++ (byte) render::x#2 [ render::x#1 render::y#2 render::colline#2 ] -- zpby1=_inc_zpby1 
  inc 5
//SEG126 [59] if((byte) render::x#1<(byte) 40) goto render::@2 [ render::x#1 render::y#2 render::colline#2 ] -- zpby1_lt_coby1_then_la1 
  lda 5
  cmp #40
  bcc render__B2_from_B5
//SEG127 render::@3
render__B3:
//SEG128 [60] (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40 [ render::colline#1 render::y#2 ] -- zpptrby1=zpptrby1_plus_coby1 
  lda 3
  clc
  adc #40
  sta 3
  bcc !+
  inc 3+1
!:
//SEG129 [61] (byte) render::y#1 ← ++ (byte) render::y#2 [ render::y#1 render::colline#1 ] -- zpby1=_inc_zpby1 
  inc 2
//SEG130 [62] if((byte) render::y#1<(byte) 25) goto render::@1 [ render::y#1 render::colline#1 ] -- zpby1_lt_coby1_then_la1 
  lda 2
  cmp #25
  bcc render__B1_from_B3
//SEG131 render::@return
render__Breturn:
//SEG132 [63] return  [ ]
  rts
//SEG133 findcol
findcol:
//SEG134 [64] phi from findcol to findcol::@1
findcol__B1_from_findcol:
//SEG135 [64] phi (byte) findcol::mincol#11 = (byte) 0 -- yby=coby1 
  ldy #0
//SEG136 [64] phi (byte) findcol::mindiff#10 = (byte) 255 -- zpby1=coby1 
  lda #255
  sta 6
//SEG137 [64] phi (byte) findcol::i#12 = (byte) 0 -- xby=coby1 
  ldx #0
  jmp findcol__B1
//SEG138 [64] phi from findcol::@13 to findcol::@1
findcol__B1_from_B13:
//SEG139 [64] phi (byte) findcol::mincol#11 = (byte) findcol::mincol#2 -- register_copy 
//SEG140 [64] phi (byte) findcol::mindiff#10 = (byte) findcol::mindiff#11 -- register_copy 
//SEG141 [64] phi (byte) findcol::i#12 = (byte) findcol::i#1 -- register_copy 
//SEG142 findcol::@1
findcol__B1:
//SEG143 [65] (byte) findcol::xp#0 ← (word) 4096 *idx (byte) findcol::i#12 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1=cowo1_staridx_xby 
  lda 4096,x
  sta 7
//SEG144 [66] (byte) findcol::yp#0 ← (word) 4352 *idx (byte) findcol::i#12 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1=cowo1_staridx_xby 
  lda 4352,x
  sta 11
//SEG145 [67] if((byte) findcol::x#0==(byte) findcol::xp#0) goto findcol::@2 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1_eq_zpby2_then_la1 
  lda 9
  cmp 7
  beq findcol__B2
//SEG146 findcol::@3
findcol__B3:
//SEG147 [68] if((byte) findcol::x#0<(byte) findcol::xp#0) goto findcol::@6 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1_lt_zpby2_then_la1 
  lda 9
  cmp 7
  bcc findcol__B6
//SEG148 findcol::@7
findcol__B7:
//SEG149 [69] (byte) findcol::diff#1 ← (byte) findcol::x#0 - (byte) findcol::xp#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::diff#1 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1=zpby2_minus_zpby1 
  lda 9
  sec
  sbc 7
  sta 7
//SEG150 [70] phi from findcol::@7 to findcol::@8
findcol__B8_from_B7:
//SEG151 [70] phi (byte) findcol::diff#4 = (byte) findcol::diff#1 -- register_copy 
//SEG152 findcol::@8
findcol__B8:
//SEG153 [71] if((byte) findcol::y#0<(byte) findcol::yp#0) goto findcol::@9 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::yp#0 findcol::diff#4 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1_lt_zpby2_then_la1 
  lda 10
  cmp 11
  bcc findcol__B9
//SEG154 findcol::@10
findcol__B10:
//SEG155 [72] (byte~) findcol::$10 ← (byte) findcol::y#0 - (byte) findcol::yp#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#4 findcol::$10 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- aby=zpby1_minus_zpby2 
  lda 10
  sec
  sbc 11
//SEG156 [73] (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$10 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#3 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- aby=zpby1_plus_aby 
  clc
  adc 7
//SEG157 [74] phi from findcol::@10 to findcol::@11
findcol__B11_from_B10:
//SEG158 [74] phi (byte) findcol::diff#6 = (byte) findcol::diff#3 -- register_copy 
//SEG159 findcol::@11
findcol__B11:
//SEG160 [75] if((byte) findcol::diff#6<(byte) findcol::mindiff#10) goto findcol::@12 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#6 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- aby_lt_zpby1_then_la1 
  cmp 6
  bcc findcol__B12
//SEG161 [76] phi from findcol::@11 to findcol::@13
findcol__B13_from_B11:
//SEG162 [76] phi (byte) findcol::mindiff#11 = (byte) findcol::mindiff#10 -- register_copy 
//SEG163 [76] phi (byte) findcol::mincol#2 = (byte) findcol::mincol#11 -- register_copy 
//SEG164 findcol::@13
findcol__B13:
//SEG165 [77] (byte) findcol::i#1 ← ++ (byte) findcol::i#12 [ render::x#2 render::y#2 render::colline#2 findcol::i#1 findcol::mindiff#11 findcol::mincol#2 findcol::x#0 findcol::y#0 numpoints#1 ] -- xby=_inc_xby 
  inx
//SEG166 [78] if((byte) findcol::i#1<(byte) numpoints#1) goto findcol::@1 [ render::x#2 render::y#2 render::colline#2 findcol::i#1 findcol::mindiff#11 findcol::mincol#2 findcol::x#0 findcol::y#0 numpoints#1 ] -- xby_lt_zpby1_then_la1 
  cpx 8
  bcc findcol__B1_from_B13
//SEG167 [79] phi from findcol::@13 to findcol::@return
findcol__Breturn_from_B13:
//SEG168 [79] phi (byte) findcol::return#0 = (byte) findcol::mincol#2 -- register_copy 
  jmp findcol__Breturn
//SEG169 [79] phi from findcol::@2 to findcol::@return
findcol__Breturn_from_B2:
//SEG170 [79] phi (byte) findcol::return#0 = (byte) 0 -- yby=coby1 
  ldy #0
//SEG171 findcol::@return
findcol__Breturn:
//SEG172 [80] return  [ render::x#2 render::y#2 findcol::return#0 render::colline#2 ]
  rts
//SEG173 findcol::@12
findcol__B12:
//SEG174 [81] (byte) findcol::mincol#1 ← (word) 4608 *idx (byte) findcol::i#12 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#6 findcol::mincol#1 numpoints#1 ] -- yby=cowo1_staridx_xby 
  ldy 4608,x
//SEG175 [82] (byte~) findcol::diff#13 ← (byte) findcol::diff#6 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::mincol#1 findcol::diff#13 numpoints#1 ] -- zpby1=aby 
  sta 6
//SEG176 [76] phi from findcol::@12 to findcol::@13
findcol__B13_from_B12:
//SEG177 [76] phi (byte) findcol::mindiff#11 = (byte~) findcol::diff#13 -- register_copy 
//SEG178 [76] phi (byte) findcol::mincol#2 = (byte) findcol::mincol#1 -- register_copy 
  jmp findcol__B13
//SEG179 findcol::@9
findcol__B9:
//SEG180 [83] (byte~) findcol::$8 ← (byte) findcol::yp#0 - (byte) findcol::y#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#4 findcol::mindiff#10 findcol::mincol#11 numpoints#1 findcol::$8 ] -- aby=zpby1_minus_zpby2 
  lda 11
  sec
  sbc 10
//SEG181 [84] (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$8 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#2 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- aby=zpby1_plus_aby 
  clc
  adc 7
//SEG182 [74] phi from findcol::@9 to findcol::@11
findcol__B11_from_B9:
//SEG183 [74] phi (byte) findcol::diff#6 = (byte) findcol::diff#2 -- register_copy 
  jmp findcol__B11
//SEG184 findcol::@6
findcol__B6:
//SEG185 [85] (byte) findcol::diff#0 ← (byte) findcol::xp#0 - (byte) findcol::x#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::diff#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1=zpby1_minus_zpby2 
  lda 7
  sec
  sbc 9
  sta 7
//SEG186 [70] phi from findcol::@6 to findcol::@8
findcol__B8_from_B6:
//SEG187 [70] phi (byte) findcol::diff#4 = (byte) findcol::diff#0 -- register_copy 
  jmp findcol__B8
//SEG188 findcol::@2
findcol__B2:
//SEG189 [86] if((byte) findcol::y#0==(byte) findcol::yp#0) goto findcol::@return [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1_eq_zpby2_then_la1 
  lda 10
  cmp 11
  beq findcol__Breturn_from_B2
  jmp findcol__B3
//SEG190 initscreen
initscreen:
//SEG191 [87] phi from initscreen to initscreen::@1
initscreen__B1_from_initscreen:
//SEG192 [87] phi (byte*) initscreen::screen#2 = (word) 1024 -- zpptrby1=cowo1 
  lda #<1024
  sta 3
  lda #>1024
  sta 3+1
  jmp initscreen__B1
//SEG193 [87] phi from initscreen::@1 to initscreen::@1
initscreen__B1_from_B1:
//SEG194 [87] phi (byte*) initscreen::screen#2 = (byte*) initscreen::screen#1 -- register_copy 
//SEG195 initscreen::@1
initscreen__B1:
//SEG196 [88] *((byte*) initscreen::screen#2) ← (byte) 230 [ initscreen::screen#2 ] -- _star_zpptrby1=coby1 
  ldy #0
  lda #230
  sta (3),y
//SEG197 [89] (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2 [ initscreen::screen#1 ] -- zpptrby1=_inc_zpptrby1 
  inc 3
  bne !+
  inc 3+1
!:
//SEG198 [90] if((byte*) initscreen::screen#1<(word) 2048) goto initscreen::@1 [ initscreen::screen#1 ] -- zpptrby1_lt_cowo1_then_la1 
  lda 3+1
  cmp #>2048
  bcc initscreen__B1_from_B1
  bne !+
  lda 3
  cmp #<2048
  bcc initscreen__B1_from_B1
!:
//SEG199 initscreen::@return
initscreen__Breturn:
//SEG200 [91] return  [ ]
  rts
//SEG201 addpoint
addpoint:
//SEG202 [93] *((word) 4096 + (byte) numpoints#19) ← (byte) addpoint::x#6 [ numpoints#19 addpoint::y#6 addpoint::c#6 ] -- cowo1_staridx_zpby1=aby 
  ldx 8
  sta 4096,x
//SEG203 [94] *((word) 4352 + (byte) numpoints#19) ← (byte) addpoint::y#6 [ numpoints#19 addpoint::c#6 ] -- cowo1_staridx_zpby1=yby 
  tya
  ldy 8
  sta 4352,y
//SEG204 [95] *((word) 4608 + (byte) numpoints#19) ← (byte) addpoint::c#6 [ numpoints#19 ] -- cowo1_staridx_zpby1=zpby2 
  lda 2
  ldx 8
  sta 4608,x
//SEG205 [96] (byte) numpoints#1 ← ++ (byte) numpoints#19 [ ] -- zpby1=_inc_zpby1 
  inc 8
//SEG206 addpoint::@return
addpoint__Breturn:
//SEG207 [97] return  [ ]
  rts

Removing instruction jmp render__B1
Removing instruction jmp render__B2
Removing instruction jmp findcol__B1
Removing instruction jmp initscreen__B1
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 @BEGIN
BBEGIN:
//SEG1 [0] call main param-assignment [ ]
  jsr main
//SEG2 @END
BEND:
//SEG3 main
main:
//SEG4 [1] call addpoint param-assignment [ ]
//SEG5 [92] phi from main to addpoint
addpoint_from_main:
//SEG6 [92] phi (byte) addpoint::c#6 = (byte) 1 -- zpby1=coby1 
  lda #1
  sta 2
//SEG7 [92] phi (byte) addpoint::y#6 = (byte) 5 -- yby=coby1 
  ldy #5
//SEG8 [92] phi (byte) numpoints#19 = (byte) 0 -- zpby1=coby1 
  lda #0
  sta 8
//SEG9 [92] phi (byte) addpoint::x#6 = (byte) 5 -- aby=coby1 
  lda #5
  jsr addpoint
//SEG10 main::@3
main__B3:
//SEG11 [2] call addpoint param-assignment [ ]
//SEG12 [92] phi from main::@3 to addpoint
addpoint_from_B3:
//SEG13 [92] phi (byte) addpoint::c#6 = (byte) 2 -- zpby1=coby1 
  lda #2
  sta 2
//SEG14 [92] phi (byte) addpoint::y#6 = (byte) 8 -- yby=coby1 
  ldy #8
//SEG15 [92] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
//SEG16 [92] phi (byte) addpoint::x#6 = (byte) 15 -- aby=coby1 
  lda #15
  jsr addpoint
//SEG17 main::@4
main__B4:
//SEG18 [3] call addpoint param-assignment [ ]
//SEG19 [92] phi from main::@4 to addpoint
addpoint_from_B4:
//SEG20 [92] phi (byte) addpoint::c#6 = (byte) 3 -- zpby1=coby1 
  lda #3
  sta 2
//SEG21 [92] phi (byte) addpoint::y#6 = (byte) 14 -- yby=coby1 
  ldy #14
//SEG22 [92] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
//SEG23 [92] phi (byte) addpoint::x#6 = (byte) 6 -- aby=coby1 
  lda #6
  jsr addpoint
//SEG24 main::@5
main__B5:
//SEG25 [4] call addpoint param-assignment [ ]
//SEG26 [92] phi from main::@5 to addpoint
addpoint_from_B5:
//SEG27 [92] phi (byte) addpoint::c#6 = (byte) 4 -- zpby1=coby1 
  lda #4
  sta 2
//SEG28 [92] phi (byte) addpoint::y#6 = (byte) 2 -- yby=coby1 
  ldy #2
//SEG29 [92] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
//SEG30 [92] phi (byte) addpoint::x#6 = (byte) 34 -- aby=coby1 
  lda #34
  jsr addpoint
//SEG31 main::@6
main__B6:
//SEG32 [5] call addpoint param-assignment [ ]
//SEG33 [92] phi from main::@6 to addpoint
addpoint_from_B6:
//SEG34 [92] phi (byte) addpoint::c#6 = (byte) 5 -- zpby1=coby1 
  lda #5
  sta 2
//SEG35 [92] phi (byte) addpoint::y#6 = (byte) 17 -- yby=coby1 
  ldy #17
//SEG36 [92] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
//SEG37 [92] phi (byte) addpoint::x#6 = (byte) 21 -- aby=coby1 
  lda #21
  jsr addpoint
//SEG38 main::@7
main__B7:
//SEG39 [6] call addpoint param-assignment [ ]
//SEG40 [92] phi from main::@7 to addpoint
addpoint_from_B7:
//SEG41 [92] phi (byte) addpoint::c#6 = (byte) 7 -- zpby1=coby1 
  lda #7
  sta 2
//SEG42 [92] phi (byte) addpoint::y#6 = (byte) 22 -- yby=coby1 
  ldy #22
//SEG43 [92] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
//SEG44 [92] phi (byte) addpoint::x#6 = (byte) 31 -- aby=coby1 
  lda #31
  jsr addpoint
//SEG45 main::@8
main__B8:
//SEG46 [7] call initscreen param-assignment [ ]
  jsr initscreen
//SEG47 main::@1
main__B1:
//SEG48 [8] call render param-assignment [ ]
  jsr render
//SEG49 main::@10
main__B10:
//SEG50 [9] call animate param-assignment [ ]
  jsr animate
//SEG51 main::@11
main__B11:
//SEG52 [10] if(true) goto main::@1 [ ] -- true_then_la1 
  jmp main__B1
//SEG53 main::@return
main__Breturn:
//SEG54 [11] return  [ ]
  rts
//SEG55 animate
animate:
//SEG56 [12] (byte~) animate::$0 ← * (word) 4096 [ animate::$0 ] -- aby=_star_cowo1 
  lda 4096
//SEG57 [13] (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1 [ animate::$1 ] -- aby=aby_plus_1 
  clc
  adc #1
//SEG58 [14] *((word) 4096) ← (byte~) animate::$1 [ ] -- _star_cowo1=aby 
  sta 4096
//SEG59 [15] (byte~) animate::$2 ← * (word) 4096 [ animate::$2 ] -- aby=_star_cowo1 
  lda 4096
//SEG60 [16] if((byte~) animate::$2==(byte) 40) goto animate::@1 [ ] -- aby_eq_coby1_then_la1 
  cmp #40
  beq animate__B1
//SEG61 animate::@2
animate__B2:
//SEG62 [17] (byte~) animate::$4 ← * (word) 4352 [ animate::$4 ] -- aby=_star_cowo1 
  lda 4352
//SEG63 [18] (byte~) animate::$5 ← (byte~) animate::$4 + (byte) 1 [ animate::$5 ] -- aby=aby_plus_1 
  clc
  adc #1
//SEG64 [19] *((word) 4352) ← (byte~) animate::$5 [ ] -- _star_cowo1=aby 
  sta 4352
//SEG65 [20] (byte~) animate::$6 ← * (word) 4352 [ animate::$6 ] -- aby=_star_cowo1 
  lda 4352
//SEG66 [21] if((byte~) animate::$6==(byte) 25) goto animate::@3 [ ] -- aby_eq_coby1_then_la1 
  cmp #25
  beq animate__B3
//SEG67 animate::@4
animate__B4:
//SEG68 [22] (byte~) animate::$8 ← * (word) 4097 [ animate::$8 ] -- xby=_star_cowo1 
  ldx 4097
//SEG69 [23] (byte~) animate::$9 ← (byte~) animate::$8 - (byte) 1 [ animate::$9 ] -- xby=xby_minus_1 
  dex
//SEG70 [24] *((word) 4097) ← (byte~) animate::$9 [ ] -- _star_cowo1=xby 
  stx 4097
//SEG71 [25] (byte~) animate::$10 ← * (word) 4097 [ animate::$10 ] -- aby=_star_cowo1 
  lda 4097
//SEG72 [26] if((byte~) animate::$10==(byte) 255) goto animate::@5 [ ] -- aby_eq_coby1_then_la1 
  cmp #255
  beq animate__B5
//SEG73 animate::@6
animate__B6:
//SEG74 [27] (byte~) animate::$12 ← * (word) 4354 [ animate::$12 ] -- aby=_star_cowo1 
  lda 4354
//SEG75 [28] (byte~) animate::$13 ← (byte~) animate::$12 + (byte) 1 [ animate::$13 ] -- aby=aby_plus_1 
  clc
  adc #1
//SEG76 [29] *((word) 4354) ← (byte~) animate::$13 [ ] -- _star_cowo1=aby 
  sta 4354
//SEG77 [30] (byte~) animate::$14 ← * (word) 4354 [ animate::$14 ] -- aby=_star_cowo1 
  lda 4354
//SEG78 [31] if((byte~) animate::$14==(byte) 25) goto animate::@7 [ ] -- aby_eq_coby1_then_la1 
  cmp #25
  beq animate__B7
//SEG79 animate::@8
animate__B8:
//SEG80 [32] (byte~) animate::$16 ← * (word) 4355 [ animate::$16 ] -- xby=_star_cowo1 
  ldx 4355
//SEG81 [33] (byte~) animate::$17 ← (byte~) animate::$16 - (byte) 1 [ animate::$17 ] -- xby=xby_minus_1 
  dex
//SEG82 [34] *((word) 4355) ← (byte~) animate::$17 [ ] -- _star_cowo1=xby 
  stx 4355
//SEG83 [35] (byte~) animate::$18 ← * (word) 4355 [ animate::$18 ] -- aby=_star_cowo1 
  lda 4355
//SEG84 [36] if((byte~) animate::$18==(byte) 255) goto animate::@9 [ ] -- aby_eq_coby1_then_la1 
  cmp #255
  beq animate__B9
//SEG85 animate::@return
animate__Breturn:
//SEG86 [37] return  [ ]
  rts
//SEG87 animate::@9
animate__B9:
//SEG88 [38] *((word) 4355) ← (byte) 25 [ ] -- _star_cowo1=coby2 
  lda #25
  sta 4355
//SEG89 [39] (byte~) animate::$20 ← * (word) 4099 [ animate::$20 ] -- aby=_star_cowo1 
  lda 4099
//SEG90 [40] (byte~) animate::$21 ← (byte~) animate::$20 + (byte) 7 [ animate::$21 ] -- aby=aby_plus_coby1 
  clc
  adc #7
//SEG91 [41] *((word) 4099) ← (byte~) animate::$21 [ ] -- _star_cowo1=aby 
  sta 4099
//SEG92 [42] (byte~) animate::$22 ← * (word) 4099 [ animate::$22 ] -- aby=_star_cowo1 
  lda 4099
//SEG93 [43] if((byte~) animate::$22>=(byte) 40) goto animate::@11 [ ] -- aby_ge_coby1_then_la1 
  cmp #40
  bcs animate__B11
  jmp animate__Breturn
//SEG94 animate::@11
animate__B11:
//SEG95 [44] (byte~) animate::$24 ← * (word) 4099 [ animate::$24 ] -- aby=_star_cowo1 
  lda 4099
//SEG96 [45] (byte~) animate::$25 ← (byte~) animate::$24 - (byte) 40 [ animate::$25 ] -- aby=aby_minus_coby1 
  sec
  sbc #40
//SEG97 [46] *((word) 4099) ← (byte~) animate::$25 [ ] -- _star_cowo1=aby 
  sta 4099
  jmp animate__Breturn
//SEG98 animate::@7
animate__B7:
//SEG99 [47] *((word) 4354) ← (byte) 0 [ ] -- _star_cowo1=coby2 
  lda #0
  sta 4354
  jmp animate__B8
//SEG100 animate::@5
animate__B5:
//SEG101 [48] *((word) 4097) ← (byte) 40 [ ] -- _star_cowo1=coby2 
  lda #40
  sta 4097
  jmp animate__B6
//SEG102 animate::@3
animate__B3:
//SEG103 [49] *((word) 4352) ← (byte) 0 [ ] -- _star_cowo1=coby2 
  lda #0
  sta 4352
  jmp animate__B4
//SEG104 animate::@1
animate__B1:
//SEG105 [50] *((word) 4096) ← (byte) 0 [ ] -- _star_cowo1=coby2 
  lda #0
  sta 4096
  jmp animate__B2
//SEG106 render
render:
//SEG107 [51] phi from render to render::@1
render__B1_from_render:
//SEG108 [51] phi (byte*) render::colline#2 = (word) 55296 -- zpptrby1=cowo1 
  lda #<55296
  sta 3
  lda #>55296
  sta 3+1
//SEG109 [51] phi (byte) render::y#2 = (byte) 0 -- zpby1=coby1 
  lda #0
  sta 2
//SEG110 [51] phi from render::@3 to render::@1
render__B1_from_B3:
//SEG111 [51] phi (byte*) render::colline#2 = (byte*) render::colline#1 -- register_copy 
//SEG112 [51] phi (byte) render::y#2 = (byte) render::y#1 -- register_copy 
//SEG113 render::@1
render__B1:
//SEG114 [52] phi from render::@1 to render::@2
render__B2_from_B1:
//SEG115 [52] phi (byte) render::x#2 = (byte) 0 -- zpby1=coby1 
  lda #0
  sta 5
//SEG116 [52] phi from render::@5 to render::@2
render__B2_from_B5:
//SEG117 [52] phi (byte) render::x#2 = (byte) render::x#1 -- register_copy 
//SEG118 render::@2
render__B2:
//SEG119 [53] (byte) findcol::x#0 ← (byte) render::x#2 [ render::x#2 render::y#2 render::colline#2 ] -- zpby1=zpby2 
  lda 5
  sta 9
//SEG120 [54] (byte) findcol::y#0 ← (byte) render::y#2 [ render::x#2 render::y#2 render::colline#2 ] -- zpby1=zpby2 
  lda 2
  sta 10
//SEG121 [55] call findcol param-assignment [ render::x#2 render::y#2 findcol::return#0 render::colline#2 ]
  jsr findcol
//SEG122 render::@5
render__B5:
//SEG123 [56] (byte) render::col#0 ← (byte) findcol::return#0 [ render::x#2 render::y#2 render::colline#2 render::col#0 ] -- aby=yby 
  tya
//SEG124 [57] *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0 [ render::x#2 render::y#2 render::colline#2 ] -- zpptrby1_staridx_zpby1=aby 
  ldy 5
  sta (3),y
//SEG125 [58] (byte) render::x#1 ← ++ (byte) render::x#2 [ render::x#1 render::y#2 render::colline#2 ] -- zpby1=_inc_zpby1 
  inc 5
//SEG126 [59] if((byte) render::x#1<(byte) 40) goto render::@2 [ render::x#1 render::y#2 render::colline#2 ] -- zpby1_lt_coby1_then_la1 
  lda 5
  cmp #40
  bcc render__B2_from_B5
//SEG127 render::@3
render__B3:
//SEG128 [60] (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40 [ render::colline#1 render::y#2 ] -- zpptrby1=zpptrby1_plus_coby1 
  lda 3
  clc
  adc #40
  sta 3
  bcc !+
  inc 3+1
!:
//SEG129 [61] (byte) render::y#1 ← ++ (byte) render::y#2 [ render::y#1 render::colline#1 ] -- zpby1=_inc_zpby1 
  inc 2
//SEG130 [62] if((byte) render::y#1<(byte) 25) goto render::@1 [ render::y#1 render::colline#1 ] -- zpby1_lt_coby1_then_la1 
  lda 2
  cmp #25
  bcc render__B1_from_B3
//SEG131 render::@return
render__Breturn:
//SEG132 [63] return  [ ]
  rts
//SEG133 findcol
findcol:
//SEG134 [64] phi from findcol to findcol::@1
findcol__B1_from_findcol:
//SEG135 [64] phi (byte) findcol::mincol#11 = (byte) 0 -- yby=coby1 
  ldy #0
//SEG136 [64] phi (byte) findcol::mindiff#10 = (byte) 255 -- zpby1=coby1 
  lda #255
  sta 6
//SEG137 [64] phi (byte) findcol::i#12 = (byte) 0 -- xby=coby1 
  ldx #0
//SEG138 [64] phi from findcol::@13 to findcol::@1
findcol__B1_from_B13:
//SEG139 [64] phi (byte) findcol::mincol#11 = (byte) findcol::mincol#2 -- register_copy 
//SEG140 [64] phi (byte) findcol::mindiff#10 = (byte) findcol::mindiff#11 -- register_copy 
//SEG141 [64] phi (byte) findcol::i#12 = (byte) findcol::i#1 -- register_copy 
//SEG142 findcol::@1
findcol__B1:
//SEG143 [65] (byte) findcol::xp#0 ← (word) 4096 *idx (byte) findcol::i#12 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1=cowo1_staridx_xby 
  lda 4096,x
  sta 7
//SEG144 [66] (byte) findcol::yp#0 ← (word) 4352 *idx (byte) findcol::i#12 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1=cowo1_staridx_xby 
  lda 4352,x
  sta 11
//SEG145 [67] if((byte) findcol::x#0==(byte) findcol::xp#0) goto findcol::@2 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1_eq_zpby2_then_la1 
  lda 9
  cmp 7
  beq findcol__B2
//SEG146 findcol::@3
findcol__B3:
//SEG147 [68] if((byte) findcol::x#0<(byte) findcol::xp#0) goto findcol::@6 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1_lt_zpby2_then_la1 
  lda 9
  cmp 7
  bcc findcol__B6
//SEG148 findcol::@7
findcol__B7:
//SEG149 [69] (byte) findcol::diff#1 ← (byte) findcol::x#0 - (byte) findcol::xp#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::diff#1 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1=zpby2_minus_zpby1 
  lda 9
  sec
  sbc 7
  sta 7
//SEG150 [70] phi from findcol::@7 to findcol::@8
findcol__B8_from_B7:
//SEG151 [70] phi (byte) findcol::diff#4 = (byte) findcol::diff#1 -- register_copy 
//SEG152 findcol::@8
findcol__B8:
//SEG153 [71] if((byte) findcol::y#0<(byte) findcol::yp#0) goto findcol::@9 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::yp#0 findcol::diff#4 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1_lt_zpby2_then_la1 
  lda 10
  cmp 11
  bcc findcol__B9
//SEG154 findcol::@10
findcol__B10:
//SEG155 [72] (byte~) findcol::$10 ← (byte) findcol::y#0 - (byte) findcol::yp#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#4 findcol::$10 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- aby=zpby1_minus_zpby2 
  lda 10
  sec
  sbc 11
//SEG156 [73] (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$10 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#3 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- aby=zpby1_plus_aby 
  clc
  adc 7
//SEG157 [74] phi from findcol::@10 to findcol::@11
findcol__B11_from_B10:
//SEG158 [74] phi (byte) findcol::diff#6 = (byte) findcol::diff#3 -- register_copy 
//SEG159 findcol::@11
findcol__B11:
//SEG160 [75] if((byte) findcol::diff#6<(byte) findcol::mindiff#10) goto findcol::@12 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#6 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- aby_lt_zpby1_then_la1 
  cmp 6
  bcc findcol__B12
//SEG161 [76] phi from findcol::@11 to findcol::@13
findcol__B13_from_B11:
//SEG162 [76] phi (byte) findcol::mindiff#11 = (byte) findcol::mindiff#10 -- register_copy 
//SEG163 [76] phi (byte) findcol::mincol#2 = (byte) findcol::mincol#11 -- register_copy 
//SEG164 findcol::@13
findcol__B13:
//SEG165 [77] (byte) findcol::i#1 ← ++ (byte) findcol::i#12 [ render::x#2 render::y#2 render::colline#2 findcol::i#1 findcol::mindiff#11 findcol::mincol#2 findcol::x#0 findcol::y#0 numpoints#1 ] -- xby=_inc_xby 
  inx
//SEG166 [78] if((byte) findcol::i#1<(byte) numpoints#1) goto findcol::@1 [ render::x#2 render::y#2 render::colline#2 findcol::i#1 findcol::mindiff#11 findcol::mincol#2 findcol::x#0 findcol::y#0 numpoints#1 ] -- xby_lt_zpby1_then_la1 
  cpx 8
  bcc findcol__B1_from_B13
//SEG167 [79] phi from findcol::@13 to findcol::@return
findcol__Breturn_from_B13:
//SEG168 [79] phi (byte) findcol::return#0 = (byte) findcol::mincol#2 -- register_copy 
  jmp findcol__Breturn
//SEG169 [79] phi from findcol::@2 to findcol::@return
findcol__Breturn_from_B2:
//SEG170 [79] phi (byte) findcol::return#0 = (byte) 0 -- yby=coby1 
  ldy #0
//SEG171 findcol::@return
findcol__Breturn:
//SEG172 [80] return  [ render::x#2 render::y#2 findcol::return#0 render::colline#2 ]
  rts
//SEG173 findcol::@12
findcol__B12:
//SEG174 [81] (byte) findcol::mincol#1 ← (word) 4608 *idx (byte) findcol::i#12 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#6 findcol::mincol#1 numpoints#1 ] -- yby=cowo1_staridx_xby 
  ldy 4608,x
//SEG175 [82] (byte~) findcol::diff#13 ← (byte) findcol::diff#6 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::mincol#1 findcol::diff#13 numpoints#1 ] -- zpby1=aby 
  sta 6
//SEG176 [76] phi from findcol::@12 to findcol::@13
findcol__B13_from_B12:
//SEG177 [76] phi (byte) findcol::mindiff#11 = (byte~) findcol::diff#13 -- register_copy 
//SEG178 [76] phi (byte) findcol::mincol#2 = (byte) findcol::mincol#1 -- register_copy 
  jmp findcol__B13
//SEG179 findcol::@9
findcol__B9:
//SEG180 [83] (byte~) findcol::$8 ← (byte) findcol::yp#0 - (byte) findcol::y#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#4 findcol::mindiff#10 findcol::mincol#11 numpoints#1 findcol::$8 ] -- aby=zpby1_minus_zpby2 
  lda 11
  sec
  sbc 10
//SEG181 [84] (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$8 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#2 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- aby=zpby1_plus_aby 
  clc
  adc 7
//SEG182 [74] phi from findcol::@9 to findcol::@11
findcol__B11_from_B9:
//SEG183 [74] phi (byte) findcol::diff#6 = (byte) findcol::diff#2 -- register_copy 
  jmp findcol__B11
//SEG184 findcol::@6
findcol__B6:
//SEG185 [85] (byte) findcol::diff#0 ← (byte) findcol::xp#0 - (byte) findcol::x#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::diff#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1=zpby1_minus_zpby2 
  lda 7
  sec
  sbc 9
  sta 7
//SEG186 [70] phi from findcol::@6 to findcol::@8
findcol__B8_from_B6:
//SEG187 [70] phi (byte) findcol::diff#4 = (byte) findcol::diff#0 -- register_copy 
  jmp findcol__B8
//SEG188 findcol::@2
findcol__B2:
//SEG189 [86] if((byte) findcol::y#0==(byte) findcol::yp#0) goto findcol::@return [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1_eq_zpby2_then_la1 
  lda 10
  cmp 11
  beq findcol__Breturn_from_B2
  jmp findcol__B3
//SEG190 initscreen
initscreen:
//SEG191 [87] phi from initscreen to initscreen::@1
initscreen__B1_from_initscreen:
//SEG192 [87] phi (byte*) initscreen::screen#2 = (word) 1024 -- zpptrby1=cowo1 
  lda #<1024
  sta 3
  lda #>1024
  sta 3+1
//SEG193 [87] phi from initscreen::@1 to initscreen::@1
initscreen__B1_from_B1:
//SEG194 [87] phi (byte*) initscreen::screen#2 = (byte*) initscreen::screen#1 -- register_copy 
//SEG195 initscreen::@1
initscreen__B1:
//SEG196 [88] *((byte*) initscreen::screen#2) ← (byte) 230 [ initscreen::screen#2 ] -- _star_zpptrby1=coby1 
  ldy #0
  lda #230
  sta (3),y
//SEG197 [89] (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2 [ initscreen::screen#1 ] -- zpptrby1=_inc_zpptrby1 
  inc 3
  bne !+
  inc 3+1
!:
//SEG198 [90] if((byte*) initscreen::screen#1<(word) 2048) goto initscreen::@1 [ initscreen::screen#1 ] -- zpptrby1_lt_cowo1_then_la1 
  lda 3+1
  cmp #>2048
  bcc initscreen__B1_from_B1
  bne !+
  lda 3
  cmp #<2048
  bcc initscreen__B1_from_B1
!:
//SEG199 initscreen::@return
initscreen__Breturn:
//SEG200 [91] return  [ ]
  rts
//SEG201 addpoint
addpoint:
//SEG202 [93] *((word) 4096 + (byte) numpoints#19) ← (byte) addpoint::x#6 [ numpoints#19 addpoint::y#6 addpoint::c#6 ] -- cowo1_staridx_zpby1=aby 
  ldx 8
  sta 4096,x
//SEG203 [94] *((word) 4352 + (byte) numpoints#19) ← (byte) addpoint::y#6 [ numpoints#19 addpoint::c#6 ] -- cowo1_staridx_zpby1=yby 
  tya
  ldy 8
  sta 4352,y
//SEG204 [95] *((word) 4608 + (byte) numpoints#19) ← (byte) addpoint::c#6 [ numpoints#19 ] -- cowo1_staridx_zpby1=zpby2 
  lda 2
  ldx 8
  sta 4608,x
//SEG205 [96] (byte) numpoints#1 ← ++ (byte) numpoints#19 [ ] -- zpby1=_inc_zpby1 
  inc 8
//SEG206 addpoint::@return
addpoint__Breturn:
//SEG207 [97] return  [ ]
  rts

FINAL SYMBOL TABLE
(label) @BEGIN
(label) @END
(byte*) COLORS
(byte[256]) COLS
(byte) FILL
(byte*) SCREEN
(byte[256]) XPOS
(byte[256]) YPOS
(void()) addpoint((byte) addpoint::x , (byte) addpoint::y , (byte) addpoint::c)
(label) addpoint::@return
(byte) addpoint::c
(byte) addpoint::c#6 zp byte:2 0.6666666666666666
(byte) addpoint::x
(byte) addpoint::x#6 reg byte a 2.0
(byte) addpoint::y
(byte) addpoint::y#6 reg byte y 1.0
(void()) animate()
(byte~) animate::$0 reg byte a 4.0
(byte~) animate::$1 reg byte a 4.0
(byte~) animate::$10 reg byte a 4.0
(byte~) animate::$12 reg byte a 4.0
(byte~) animate::$13 reg byte a 4.0
(byte~) animate::$14 reg byte a 4.0
(byte~) animate::$16 reg byte x 4.0
(byte~) animate::$17 reg byte x 4.0
(byte~) animate::$18 reg byte a 4.0
(byte~) animate::$2 reg byte a 4.0
(byte~) animate::$20 reg byte a 4.0
(byte~) animate::$21 reg byte a 4.0
(byte~) animate::$22 reg byte a 4.0
(byte~) animate::$24 reg byte a 4.0
(byte~) animate::$25 reg byte a 4.0
(byte~) animate::$4 reg byte a 4.0
(byte~) animate::$5 reg byte a 4.0
(byte~) animate::$6 reg byte a 4.0
(byte~) animate::$8 reg byte x 4.0
(byte~) animate::$9 reg byte x 4.0
(label) animate::@1
(label) animate::@11
(label) animate::@2
(label) animate::@3
(label) animate::@4
(label) animate::@5
(label) animate::@6
(label) animate::@7
(label) animate::@8
(label) animate::@9
(label) animate::@return
(byte()) findcol((byte) findcol::x , (byte) findcol::y)
(byte~) findcol::$10 reg byte a 20002.0
(byte~) findcol::$8 reg byte a 20002.0
(label) findcol::@1
(label) findcol::@10
(label) findcol::@11
(label) findcol::@12
(label) findcol::@13
(label) findcol::@2
(label) findcol::@3
(label) findcol::@6
(label) findcol::@7
(label) findcol::@8
(label) findcol::@9
(label) findcol::@return
(byte) findcol::diff
(byte) findcol::diff#0 zp byte:7 20002.0
(byte) findcol::diff#1 zp byte:7 20002.0
(byte~) findcol::diff#13 zp byte:6 20002.0
(byte) findcol::diff#2 reg byte a 20002.0
(byte) findcol::diff#3 reg byte a 20002.0
(byte) findcol::diff#4 zp byte:7 10001.0
(byte) findcol::diff#6 reg byte a 13334.666666666666
(byte) findcol::i
(byte) findcol::i#1 reg byte x 15001.5
(byte) findcol::i#12 reg byte x 2631.842105263158
(byte) findcol::mincol
(byte) findcol::mincol#1 reg byte y 10001.0
(byte) findcol::mincol#11 reg byte y 1250.125
(byte) findcol::mincol#2 reg byte y 13334.666666666666
(byte) findcol::mindiff
(byte) findcol::mindiff#10 zp byte:6 1875.1875
(byte) findcol::mindiff#11 zp byte:6 10001.0
(byte) findcol::return
(byte) findcol::return#0 reg byte y 3667.333333333333
(byte) findcol::x
(byte) findcol::x#0 zp byte:9 1952.6190476190475
(byte) findcol::xp
(byte) findcol::xp#0 zp byte:7 10001.0
(byte) findcol::y
(byte) findcol::y#0 zp byte:10 1952.6190476190475
(byte) findcol::yp
(byte) findcol::yp#0 zp byte:11 6250.625
(void()) initscreen()
(label) initscreen::@1
(label) initscreen::@return
(byte*) initscreen::screen
(byte*) initscreen::screen#1 zp ptr byte:3 16.5
(byte*) initscreen::screen#2 zp ptr byte:3 16.5
(void()) main()
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@return
(byte) numpoints
(byte) numpoints#1 zp byte:8 476.8095238095237
(byte) numpoints#19 zp byte:8 4.5
(void()) render()
(label) render::@1
(label) render::@2
(label) render::@3
(label) render::@5
(label) render::@return
(byte) render::col
(byte) render::col#0 reg byte a 2002.0
(byte*) render::colline
(byte*) render::colline#1 zp ptr byte:3 67.33333333333333
(byte*) render::colline#2 zp ptr byte:3 37.59375
(byte) render::x
(byte) render::x#1 zp byte:5 1501.5
(byte) render::x#2 zp byte:5 138.06896551724137
(byte) render::y
(byte) render::y#1 zp byte:2 151.5
(byte) render::y#2 zp byte:2 36.45454545454545

zp byte:2 [ render::y#2 render::y#1 addpoint::c#6 ]
zp ptr byte:3 [ render::colline#2 render::colline#1 initscreen::screen#2 initscreen::screen#1 ]
zp byte:5 [ render::x#2 render::x#1 ]
reg byte x [ findcol::i#12 findcol::i#1 ]
zp byte:6 [ findcol::mindiff#10 findcol::mindiff#11 findcol::diff#13 ]
zp byte:7 [ findcol::diff#4 findcol::diff#0 findcol::diff#1 findcol::xp#0 ]
reg byte a [ findcol::diff#6 findcol::diff#3 findcol::diff#2 ]
reg byte y [ findcol::return#0 findcol::mincol#11 findcol::mincol#2 findcol::mincol#1 ]
reg byte a [ addpoint::x#6 ]
zp byte:8 [ numpoints#19 numpoints#1 ]
reg byte y [ addpoint::y#6 ]
reg byte a [ animate::$0 ]
reg byte a [ animate::$1 ]
reg byte a [ animate::$2 ]
reg byte a [ animate::$4 ]
reg byte a [ animate::$5 ]
reg byte a [ animate::$6 ]
reg byte x [ animate::$8 ]
reg byte x [ animate::$9 ]
reg byte a [ animate::$10 ]
reg byte a [ animate::$12 ]
reg byte a [ animate::$13 ]
reg byte a [ animate::$14 ]
reg byte x [ animate::$16 ]
reg byte x [ animate::$17 ]
reg byte a [ animate::$18 ]
reg byte a [ animate::$20 ]
reg byte a [ animate::$21 ]
reg byte a [ animate::$22 ]
reg byte a [ animate::$24 ]
reg byte a [ animate::$25 ]
zp byte:9 [ findcol::x#0 ]
zp byte:10 [ findcol::y#0 ]
reg byte a [ render::col#0 ]
zp byte:11 [ findcol::yp#0 ]
reg byte a [ findcol::$10 ]
reg byte a [ findcol::$8 ]

FINAL CODE
//SEG0 @BEGIN
BBEGIN:
//SEG1 [0] call main param-assignment [ ]
  jsr main
//SEG2 @END
BEND:
//SEG3 main
main:
//SEG4 [1] call addpoint param-assignment [ ]
//SEG5 [92] phi from main to addpoint
addpoint_from_main:
//SEG6 [92] phi (byte) addpoint::c#6 = (byte) 1 -- zpby1=coby1 
  lda #1
  sta 2
//SEG7 [92] phi (byte) addpoint::y#6 = (byte) 5 -- yby=coby1 
  ldy #5
//SEG8 [92] phi (byte) numpoints#19 = (byte) 0 -- zpby1=coby1 
  lda #0
  sta 8
//SEG9 [92] phi (byte) addpoint::x#6 = (byte) 5 -- aby=coby1 
  lda #5
  jsr addpoint
//SEG10 main::@3
main__B3:
//SEG11 [2] call addpoint param-assignment [ ]
//SEG12 [92] phi from main::@3 to addpoint
addpoint_from_B3:
//SEG13 [92] phi (byte) addpoint::c#6 = (byte) 2 -- zpby1=coby1 
  lda #2
  sta 2
//SEG14 [92] phi (byte) addpoint::y#6 = (byte) 8 -- yby=coby1 
  ldy #8
//SEG15 [92] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
//SEG16 [92] phi (byte) addpoint::x#6 = (byte) 15 -- aby=coby1 
  lda #15
  jsr addpoint
//SEG17 main::@4
main__B4:
//SEG18 [3] call addpoint param-assignment [ ]
//SEG19 [92] phi from main::@4 to addpoint
addpoint_from_B4:
//SEG20 [92] phi (byte) addpoint::c#6 = (byte) 3 -- zpby1=coby1 
  lda #3
  sta 2
//SEG21 [92] phi (byte) addpoint::y#6 = (byte) 14 -- yby=coby1 
  ldy #14
//SEG22 [92] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
//SEG23 [92] phi (byte) addpoint::x#6 = (byte) 6 -- aby=coby1 
  lda #6
  jsr addpoint
//SEG24 main::@5
main__B5:
//SEG25 [4] call addpoint param-assignment [ ]
//SEG26 [92] phi from main::@5 to addpoint
addpoint_from_B5:
//SEG27 [92] phi (byte) addpoint::c#6 = (byte) 4 -- zpby1=coby1 
  lda #4
  sta 2
//SEG28 [92] phi (byte) addpoint::y#6 = (byte) 2 -- yby=coby1 
  ldy #2
//SEG29 [92] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
//SEG30 [92] phi (byte) addpoint::x#6 = (byte) 34 -- aby=coby1 
  lda #34
  jsr addpoint
//SEG31 main::@6
main__B6:
//SEG32 [5] call addpoint param-assignment [ ]
//SEG33 [92] phi from main::@6 to addpoint
addpoint_from_B6:
//SEG34 [92] phi (byte) addpoint::c#6 = (byte) 5 -- zpby1=coby1 
  lda #5
  sta 2
//SEG35 [92] phi (byte) addpoint::y#6 = (byte) 17 -- yby=coby1 
  ldy #17
//SEG36 [92] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
//SEG37 [92] phi (byte) addpoint::x#6 = (byte) 21 -- aby=coby1 
  lda #21
  jsr addpoint
//SEG38 main::@7
main__B7:
//SEG39 [6] call addpoint param-assignment [ ]
//SEG40 [92] phi from main::@7 to addpoint
addpoint_from_B7:
//SEG41 [92] phi (byte) addpoint::c#6 = (byte) 7 -- zpby1=coby1 
  lda #7
  sta 2
//SEG42 [92] phi (byte) addpoint::y#6 = (byte) 22 -- yby=coby1 
  ldy #22
//SEG43 [92] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
//SEG44 [92] phi (byte) addpoint::x#6 = (byte) 31 -- aby=coby1 
  lda #31
  jsr addpoint
//SEG45 main::@8
main__B8:
//SEG46 [7] call initscreen param-assignment [ ]
  jsr initscreen
//SEG47 main::@1
main__B1:
//SEG48 [8] call render param-assignment [ ]
  jsr render
//SEG49 main::@10
main__B10:
//SEG50 [9] call animate param-assignment [ ]
  jsr animate
//SEG51 main::@11
main__B11:
//SEG52 [10] if(true) goto main::@1 [ ] -- true_then_la1 
  jmp main__B1
//SEG53 main::@return
main__Breturn:
//SEG54 [11] return  [ ]
  rts
//SEG55 animate
animate:
//SEG56 [12] (byte~) animate::$0 ← * (word) 4096 [ animate::$0 ] -- aby=_star_cowo1 
  lda 4096
//SEG57 [13] (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1 [ animate::$1 ] -- aby=aby_plus_1 
  clc
  adc #1
//SEG58 [14] *((word) 4096) ← (byte~) animate::$1 [ ] -- _star_cowo1=aby 
  sta 4096
//SEG59 [15] (byte~) animate::$2 ← * (word) 4096 [ animate::$2 ] -- aby=_star_cowo1 
  lda 4096
//SEG60 [16] if((byte~) animate::$2==(byte) 40) goto animate::@1 [ ] -- aby_eq_coby1_then_la1 
  cmp #40
  beq animate__B1
//SEG61 animate::@2
animate__B2:
//SEG62 [17] (byte~) animate::$4 ← * (word) 4352 [ animate::$4 ] -- aby=_star_cowo1 
  lda 4352
//SEG63 [18] (byte~) animate::$5 ← (byte~) animate::$4 + (byte) 1 [ animate::$5 ] -- aby=aby_plus_1 
  clc
  adc #1
//SEG64 [19] *((word) 4352) ← (byte~) animate::$5 [ ] -- _star_cowo1=aby 
  sta 4352
//SEG65 [20] (byte~) animate::$6 ← * (word) 4352 [ animate::$6 ] -- aby=_star_cowo1 
  lda 4352
//SEG66 [21] if((byte~) animate::$6==(byte) 25) goto animate::@3 [ ] -- aby_eq_coby1_then_la1 
  cmp #25
  beq animate__B3
//SEG67 animate::@4
animate__B4:
//SEG68 [22] (byte~) animate::$8 ← * (word) 4097 [ animate::$8 ] -- xby=_star_cowo1 
  ldx 4097
//SEG69 [23] (byte~) animate::$9 ← (byte~) animate::$8 - (byte) 1 [ animate::$9 ] -- xby=xby_minus_1 
  dex
//SEG70 [24] *((word) 4097) ← (byte~) animate::$9 [ ] -- _star_cowo1=xby 
  stx 4097
//SEG71 [25] (byte~) animate::$10 ← * (word) 4097 [ animate::$10 ] -- aby=_star_cowo1 
  lda 4097
//SEG72 [26] if((byte~) animate::$10==(byte) 255) goto animate::@5 [ ] -- aby_eq_coby1_then_la1 
  cmp #255
  beq animate__B5
//SEG73 animate::@6
animate__B6:
//SEG74 [27] (byte~) animate::$12 ← * (word) 4354 [ animate::$12 ] -- aby=_star_cowo1 
  lda 4354
//SEG75 [28] (byte~) animate::$13 ← (byte~) animate::$12 + (byte) 1 [ animate::$13 ] -- aby=aby_plus_1 
  clc
  adc #1
//SEG76 [29] *((word) 4354) ← (byte~) animate::$13 [ ] -- _star_cowo1=aby 
  sta 4354
//SEG77 [30] (byte~) animate::$14 ← * (word) 4354 [ animate::$14 ] -- aby=_star_cowo1 
  lda 4354
//SEG78 [31] if((byte~) animate::$14==(byte) 25) goto animate::@7 [ ] -- aby_eq_coby1_then_la1 
  cmp #25
  beq animate__B7
//SEG79 animate::@8
animate__B8:
//SEG80 [32] (byte~) animate::$16 ← * (word) 4355 [ animate::$16 ] -- xby=_star_cowo1 
  ldx 4355
//SEG81 [33] (byte~) animate::$17 ← (byte~) animate::$16 - (byte) 1 [ animate::$17 ] -- xby=xby_minus_1 
  dex
//SEG82 [34] *((word) 4355) ← (byte~) animate::$17 [ ] -- _star_cowo1=xby 
  stx 4355
//SEG83 [35] (byte~) animate::$18 ← * (word) 4355 [ animate::$18 ] -- aby=_star_cowo1 
  lda 4355
//SEG84 [36] if((byte~) animate::$18==(byte) 255) goto animate::@9 [ ] -- aby_eq_coby1_then_la1 
  cmp #255
  beq animate__B9
//SEG85 animate::@return
animate__Breturn:
//SEG86 [37] return  [ ]
  rts
//SEG87 animate::@9
animate__B9:
//SEG88 [38] *((word) 4355) ← (byte) 25 [ ] -- _star_cowo1=coby2 
  lda #25
  sta 4355
//SEG89 [39] (byte~) animate::$20 ← * (word) 4099 [ animate::$20 ] -- aby=_star_cowo1 
  lda 4099
//SEG90 [40] (byte~) animate::$21 ← (byte~) animate::$20 + (byte) 7 [ animate::$21 ] -- aby=aby_plus_coby1 
  clc
  adc #7
//SEG91 [41] *((word) 4099) ← (byte~) animate::$21 [ ] -- _star_cowo1=aby 
  sta 4099
//SEG92 [42] (byte~) animate::$22 ← * (word) 4099 [ animate::$22 ] -- aby=_star_cowo1 
  lda 4099
//SEG93 [43] if((byte~) animate::$22>=(byte) 40) goto animate::@11 [ ] -- aby_ge_coby1_then_la1 
  cmp #40
  bcs animate__B11
  jmp animate__Breturn
//SEG94 animate::@11
animate__B11:
//SEG95 [44] (byte~) animate::$24 ← * (word) 4099 [ animate::$24 ] -- aby=_star_cowo1 
  lda 4099
//SEG96 [45] (byte~) animate::$25 ← (byte~) animate::$24 - (byte) 40 [ animate::$25 ] -- aby=aby_minus_coby1 
  sec
  sbc #40
//SEG97 [46] *((word) 4099) ← (byte~) animate::$25 [ ] -- _star_cowo1=aby 
  sta 4099
  jmp animate__Breturn
//SEG98 animate::@7
animate__B7:
//SEG99 [47] *((word) 4354) ← (byte) 0 [ ] -- _star_cowo1=coby2 
  lda #0
  sta 4354
  jmp animate__B8
//SEG100 animate::@5
animate__B5:
//SEG101 [48] *((word) 4097) ← (byte) 40 [ ] -- _star_cowo1=coby2 
  lda #40
  sta 4097
  jmp animate__B6
//SEG102 animate::@3
animate__B3:
//SEG103 [49] *((word) 4352) ← (byte) 0 [ ] -- _star_cowo1=coby2 
  lda #0
  sta 4352
  jmp animate__B4
//SEG104 animate::@1
animate__B1:
//SEG105 [50] *((word) 4096) ← (byte) 0 [ ] -- _star_cowo1=coby2 
  lda #0
  sta 4096
  jmp animate__B2
//SEG106 render
render:
//SEG107 [51] phi from render to render::@1
render__B1_from_render:
//SEG108 [51] phi (byte*) render::colline#2 = (word) 55296 -- zpptrby1=cowo1 
  lda #<55296
  sta 3
  lda #>55296
  sta 3+1
//SEG109 [51] phi (byte) render::y#2 = (byte) 0 -- zpby1=coby1 
  lda #0
  sta 2
//SEG110 [51] phi from render::@3 to render::@1
render__B1_from_B3:
//SEG111 [51] phi (byte*) render::colline#2 = (byte*) render::colline#1 -- register_copy 
//SEG112 [51] phi (byte) render::y#2 = (byte) render::y#1 -- register_copy 
//SEG113 render::@1
render__B1:
//SEG114 [52] phi from render::@1 to render::@2
render__B2_from_B1:
//SEG115 [52] phi (byte) render::x#2 = (byte) 0 -- zpby1=coby1 
  lda #0
  sta 5
//SEG116 [52] phi from render::@5 to render::@2
render__B2_from_B5:
//SEG117 [52] phi (byte) render::x#2 = (byte) render::x#1 -- register_copy 
//SEG118 render::@2
render__B2:
//SEG119 [53] (byte) findcol::x#0 ← (byte) render::x#2 [ render::x#2 render::y#2 render::colline#2 ] -- zpby1=zpby2 
  lda 5
  sta 9
//SEG120 [54] (byte) findcol::y#0 ← (byte) render::y#2 [ render::x#2 render::y#2 render::colline#2 ] -- zpby1=zpby2 
  lda 2
  sta 10
//SEG121 [55] call findcol param-assignment [ render::x#2 render::y#2 findcol::return#0 render::colline#2 ]
  jsr findcol
//SEG122 render::@5
render__B5:
//SEG123 [56] (byte) render::col#0 ← (byte) findcol::return#0 [ render::x#2 render::y#2 render::colline#2 render::col#0 ] -- aby=yby 
  tya
//SEG124 [57] *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0 [ render::x#2 render::y#2 render::colline#2 ] -- zpptrby1_staridx_zpby1=aby 
  ldy 5
  sta (3),y
//SEG125 [58] (byte) render::x#1 ← ++ (byte) render::x#2 [ render::x#1 render::y#2 render::colline#2 ] -- zpby1=_inc_zpby1 
  inc 5
//SEG126 [59] if((byte) render::x#1<(byte) 40) goto render::@2 [ render::x#1 render::y#2 render::colline#2 ] -- zpby1_lt_coby1_then_la1 
  lda 5
  cmp #40
  bcc render__B2_from_B5
//SEG127 render::@3
render__B3:
//SEG128 [60] (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40 [ render::colline#1 render::y#2 ] -- zpptrby1=zpptrby1_plus_coby1 
  lda 3
  clc
  adc #40
  sta 3
  bcc !+
  inc 3+1
!:
//SEG129 [61] (byte) render::y#1 ← ++ (byte) render::y#2 [ render::y#1 render::colline#1 ] -- zpby1=_inc_zpby1 
  inc 2
//SEG130 [62] if((byte) render::y#1<(byte) 25) goto render::@1 [ render::y#1 render::colline#1 ] -- zpby1_lt_coby1_then_la1 
  lda 2
  cmp #25
  bcc render__B1_from_B3
//SEG131 render::@return
render__Breturn:
//SEG132 [63] return  [ ]
  rts
//SEG133 findcol
findcol:
//SEG134 [64] phi from findcol to findcol::@1
findcol__B1_from_findcol:
//SEG135 [64] phi (byte) findcol::mincol#11 = (byte) 0 -- yby=coby1 
  ldy #0
//SEG136 [64] phi (byte) findcol::mindiff#10 = (byte) 255 -- zpby1=coby1 
  lda #255
  sta 6
//SEG137 [64] phi (byte) findcol::i#12 = (byte) 0 -- xby=coby1 
  ldx #0
//SEG138 [64] phi from findcol::@13 to findcol::@1
findcol__B1_from_B13:
//SEG139 [64] phi (byte) findcol::mincol#11 = (byte) findcol::mincol#2 -- register_copy 
//SEG140 [64] phi (byte) findcol::mindiff#10 = (byte) findcol::mindiff#11 -- register_copy 
//SEG141 [64] phi (byte) findcol::i#12 = (byte) findcol::i#1 -- register_copy 
//SEG142 findcol::@1
findcol__B1:
//SEG143 [65] (byte) findcol::xp#0 ← (word) 4096 *idx (byte) findcol::i#12 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1=cowo1_staridx_xby 
  lda 4096,x
  sta 7
//SEG144 [66] (byte) findcol::yp#0 ← (word) 4352 *idx (byte) findcol::i#12 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1=cowo1_staridx_xby 
  lda 4352,x
  sta 11
//SEG145 [67] if((byte) findcol::x#0==(byte) findcol::xp#0) goto findcol::@2 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1_eq_zpby2_then_la1 
  lda 9
  cmp 7
  beq findcol__B2
//SEG146 findcol::@3
findcol__B3:
//SEG147 [68] if((byte) findcol::x#0<(byte) findcol::xp#0) goto findcol::@6 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1_lt_zpby2_then_la1 
  lda 9
  cmp 7
  bcc findcol__B6
//SEG148 findcol::@7
findcol__B7:
//SEG149 [69] (byte) findcol::diff#1 ← (byte) findcol::x#0 - (byte) findcol::xp#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::diff#1 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1=zpby2_minus_zpby1 
  lda 9
  sec
  sbc 7
  sta 7
//SEG150 [70] phi from findcol::@7 to findcol::@8
findcol__B8_from_B7:
//SEG151 [70] phi (byte) findcol::diff#4 = (byte) findcol::diff#1 -- register_copy 
//SEG152 findcol::@8
findcol__B8:
//SEG153 [71] if((byte) findcol::y#0<(byte) findcol::yp#0) goto findcol::@9 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::yp#0 findcol::diff#4 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1_lt_zpby2_then_la1 
  lda 10
  cmp 11
  bcc findcol__B9
//SEG154 findcol::@10
findcol__B10:
//SEG155 [72] (byte~) findcol::$10 ← (byte) findcol::y#0 - (byte) findcol::yp#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#4 findcol::$10 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- aby=zpby1_minus_zpby2 
  lda 10
  sec
  sbc 11
//SEG156 [73] (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$10 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#3 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- aby=zpby1_plus_aby 
  clc
  adc 7
//SEG157 [74] phi from findcol::@10 to findcol::@11
findcol__B11_from_B10:
//SEG158 [74] phi (byte) findcol::diff#6 = (byte) findcol::diff#3 -- register_copy 
//SEG159 findcol::@11
findcol__B11:
//SEG160 [75] if((byte) findcol::diff#6<(byte) findcol::mindiff#10) goto findcol::@12 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#6 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- aby_lt_zpby1_then_la1 
  cmp 6
  bcc findcol__B12
//SEG161 [76] phi from findcol::@11 to findcol::@13
findcol__B13_from_B11:
//SEG162 [76] phi (byte) findcol::mindiff#11 = (byte) findcol::mindiff#10 -- register_copy 
//SEG163 [76] phi (byte) findcol::mincol#2 = (byte) findcol::mincol#11 -- register_copy 
//SEG164 findcol::@13
findcol__B13:
//SEG165 [77] (byte) findcol::i#1 ← ++ (byte) findcol::i#12 [ render::x#2 render::y#2 render::colline#2 findcol::i#1 findcol::mindiff#11 findcol::mincol#2 findcol::x#0 findcol::y#0 numpoints#1 ] -- xby=_inc_xby 
  inx
//SEG166 [78] if((byte) findcol::i#1<(byte) numpoints#1) goto findcol::@1 [ render::x#2 render::y#2 render::colline#2 findcol::i#1 findcol::mindiff#11 findcol::mincol#2 findcol::x#0 findcol::y#0 numpoints#1 ] -- xby_lt_zpby1_then_la1 
  cpx 8
  bcc findcol__B1_from_B13
//SEG167 [79] phi from findcol::@13 to findcol::@return
findcol__Breturn_from_B13:
//SEG168 [79] phi (byte) findcol::return#0 = (byte) findcol::mincol#2 -- register_copy 
  jmp findcol__Breturn
//SEG169 [79] phi from findcol::@2 to findcol::@return
findcol__Breturn_from_B2:
//SEG170 [79] phi (byte) findcol::return#0 = (byte) 0 -- yby=coby1 
  ldy #0
//SEG171 findcol::@return
findcol__Breturn:
//SEG172 [80] return  [ render::x#2 render::y#2 findcol::return#0 render::colline#2 ]
  rts
//SEG173 findcol::@12
findcol__B12:
//SEG174 [81] (byte) findcol::mincol#1 ← (word) 4608 *idx (byte) findcol::i#12 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#6 findcol::mincol#1 numpoints#1 ] -- yby=cowo1_staridx_xby 
  ldy 4608,x
//SEG175 [82] (byte~) findcol::diff#13 ← (byte) findcol::diff#6 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::mincol#1 findcol::diff#13 numpoints#1 ] -- zpby1=aby 
  sta 6
//SEG176 [76] phi from findcol::@12 to findcol::@13
findcol__B13_from_B12:
//SEG177 [76] phi (byte) findcol::mindiff#11 = (byte~) findcol::diff#13 -- register_copy 
//SEG178 [76] phi (byte) findcol::mincol#2 = (byte) findcol::mincol#1 -- register_copy 
  jmp findcol__B13
//SEG179 findcol::@9
findcol__B9:
//SEG180 [83] (byte~) findcol::$8 ← (byte) findcol::yp#0 - (byte) findcol::y#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#4 findcol::mindiff#10 findcol::mincol#11 numpoints#1 findcol::$8 ] -- aby=zpby1_minus_zpby2 
  lda 11
  sec
  sbc 10
//SEG181 [84] (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$8 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#2 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- aby=zpby1_plus_aby 
  clc
  adc 7
//SEG182 [74] phi from findcol::@9 to findcol::@11
findcol__B11_from_B9:
//SEG183 [74] phi (byte) findcol::diff#6 = (byte) findcol::diff#2 -- register_copy 
  jmp findcol__B11
//SEG184 findcol::@6
findcol__B6:
//SEG185 [85] (byte) findcol::diff#0 ← (byte) findcol::xp#0 - (byte) findcol::x#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::diff#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1=zpby1_minus_zpby2 
  lda 7
  sec
  sbc 9
  sta 7
//SEG186 [70] phi from findcol::@6 to findcol::@8
findcol__B8_from_B6:
//SEG187 [70] phi (byte) findcol::diff#4 = (byte) findcol::diff#0 -- register_copy 
  jmp findcol__B8
//SEG188 findcol::@2
findcol__B2:
//SEG189 [86] if((byte) findcol::y#0==(byte) findcol::yp#0) goto findcol::@return [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1_eq_zpby2_then_la1 
  lda 10
  cmp 11
  beq findcol__Breturn_from_B2
  jmp findcol__B3
//SEG190 initscreen
initscreen:
//SEG191 [87] phi from initscreen to initscreen::@1
initscreen__B1_from_initscreen:
//SEG192 [87] phi (byte*) initscreen::screen#2 = (word) 1024 -- zpptrby1=cowo1 
  lda #<1024
  sta 3
  lda #>1024
  sta 3+1
//SEG193 [87] phi from initscreen::@1 to initscreen::@1
initscreen__B1_from_B1:
//SEG194 [87] phi (byte*) initscreen::screen#2 = (byte*) initscreen::screen#1 -- register_copy 
//SEG195 initscreen::@1
initscreen__B1:
//SEG196 [88] *((byte*) initscreen::screen#2) ← (byte) 230 [ initscreen::screen#2 ] -- _star_zpptrby1=coby1 
  ldy #0
  lda #230
  sta (3),y
//SEG197 [89] (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2 [ initscreen::screen#1 ] -- zpptrby1=_inc_zpptrby1 
  inc 3
  bne !+
  inc 3+1
!:
//SEG198 [90] if((byte*) initscreen::screen#1<(word) 2048) goto initscreen::@1 [ initscreen::screen#1 ] -- zpptrby1_lt_cowo1_then_la1 
  lda 3+1
  cmp #>2048
  bcc initscreen__B1_from_B1
  bne !+
  lda 3
  cmp #<2048
  bcc initscreen__B1_from_B1
!:
//SEG199 initscreen::@return
initscreen__Breturn:
//SEG200 [91] return  [ ]
  rts
//SEG201 addpoint
addpoint:
//SEG202 [93] *((word) 4096 + (byte) numpoints#19) ← (byte) addpoint::x#6 [ numpoints#19 addpoint::y#6 addpoint::c#6 ] -- cowo1_staridx_zpby1=aby 
  ldx 8
  sta 4096,x
//SEG203 [94] *((word) 4352 + (byte) numpoints#19) ← (byte) addpoint::y#6 [ numpoints#19 addpoint::c#6 ] -- cowo1_staridx_zpby1=yby 
  tya
  ldy 8
  sta 4352,y
//SEG204 [95] *((word) 4608 + (byte) numpoints#19) ← (byte) addpoint::c#6 [ numpoints#19 ] -- cowo1_staridx_zpby1=zpby2 
  lda 2
  ldx 8
  sta 4608,x
//SEG205 [96] (byte) numpoints#1 ← ++ (byte) numpoints#19 [ ] -- zpby1=_inc_zpby1 
  inc 8
//SEG206 addpoint::@return
addpoint__Breturn:
//SEG207 [97] return  [ ]
  rts

