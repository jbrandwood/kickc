Fixing constant pointer addition VALS+1
Inlined call call __init 

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  idx#17 = phi( __start::@1/idx#19 )
  print::p#0 = VALS
  call print 
  to:main::@2
main::@2: scope:[main]  from main
  idx#9 = phi( main/idx#5 )
  idx#0 = idx#9
  print::p#1 = VALS+1*SIZEOF_SIGNED_WORD
  call print 
  to:main::@3
main::@3: scope:[main]  from main::@2
  idx#10 = phi( main::@2/idx#5 )
  idx#1 = idx#10
  main::i#0 = 2
  to:main::@1
main::@1: scope:[main]  from main::@3 main::@4
  idx#18 = phi( main::@3/idx#1, main::@4/idx#2 )
  main::i#2 = phi( main::@3/main::i#0, main::@4/main::i#1 )
  main::$5 = main::i#2 * SIZEOF_SIGNED_WORD
  main::$2 = & VALS[main::$5]
  print::p#2 = main::$2
  call print 
  to:main::@4
main::@4: scope:[main]  from main::@1
  main::i#3 = phi( main::@1/main::i#2 )
  idx#11 = phi( main::@1/idx#5 )
  idx#2 = idx#11
  main::i#1 = main::i#3 + rangenext(2,3)
  main::$4 = main::i#1 != rangelast(2,3)
  if(main::$4) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@4
  idx#12 = phi( main::@4/idx#2 )
  idx#3 = idx#12
  return 
  to:@return

void print(signed word* print::p)
print: scope:[print]  from main main::@1 main::@2
  print::p#3 = phi( main/print::p#0, main::@1/print::p#2, main::@2/print::p#1 )
  idx#13 = phi( main/idx#17, main::@1/idx#18, main::@2/idx#0 )
  print::$0 = idx#13 * SIZEOF_SIGNED_WORD
  SCREEN[print::$0] = *print::p#3
  idx#4 = ++ idx#13
  to:print::@return
print::@return: scope:[print]  from print
  idx#14 = phi( print/idx#4 )
  idx#5 = idx#14
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  idx#6 = 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  idx#19 = phi( __start::__init1/idx#6 )
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  idx#15 = phi( __start::@1/idx#3 )
  idx#7 = idx#15
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  idx#16 = phi( __start::@2/idx#7 )
  idx#8 = idx#16
  return 
  to:@return

SYMBOL TABLE SSA
const nomodify signed word* SCREEN = (signed word*)$400
const byte SIZEOF_SIGNED_WORD = 2
const signed word* VALS[]  = { 1, 2, 3, 4 }
void __start()
byte idx
byte idx#0
byte idx#1
byte idx#10
byte idx#11
byte idx#12
byte idx#13
byte idx#14
byte idx#15
byte idx#16
byte idx#17
byte idx#18
byte idx#19
byte idx#2
byte idx#3
byte idx#4
byte idx#5
byte idx#6
byte idx#7
byte idx#8
byte idx#9
void main()
signed word*~ main::$2
bool~ main::$4
byte~ main::$5
byte main::i
byte main::i#0
byte main::i#1
byte main::i#2
byte main::i#3
void print(signed word* print::p)
byte~ print::$0
signed word* print::p
signed word* print::p#0
signed word* print::p#1
signed word* print::p#2
signed word* print::p#3

Adding number conversion cast (unumber) 1*SIZEOF_SIGNED_WORD in print::p#1 = VALS+1*SIZEOF_SIGNED_WORD
Adding number conversion cast (unumber) 1 in print::p#1 = VALS+(unumber)1*SIZEOF_SIGNED_WORD
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (signed word*) 1024
Simplifying constant integer cast (unumber)1*SIZEOF_SIGNED_WORD
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias idx#0 = idx#9 
Alias idx#1 = idx#10 
Alias print::p#2 = main::$2 
Alias main::i#2 = main::i#3 
Alias idx#11 = idx#2 idx#12 idx#3 
Alias idx#14 = idx#4 idx#5 
Alias idx#19 = idx#6 
Alias idx#15 = idx#7 idx#16 idx#8 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values idx#17 idx#19
Identical Phi Values idx#0 idx#14
Identical Phi Values idx#1 idx#14
Identical Phi Values idx#11 idx#14
Identical Phi Values idx#15 idx#11
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values idx#18 idx#14
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition main::$4 [15] if(main::i#1!=rangelast(2,3)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Rewriting array member address-of to pointer addition [10] print::p#2 = VALS + main::$5
Successful SSA optimization PassNArrayElementAddressOfRewriting
Constant print::p#0 = VALS
Constant print::p#1 = VALS+1*SIZEOF_SIGNED_WORD
Constant main::i#0 = 2
Constant idx#19 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [13] main::i#1 = ++ main::i#2 to ++
Resolved ranged comparison value [15] if(main::i#1!=rangelast(2,3)) goto main::@1 to 4
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 4 in [7] if(main::i#1!=4) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 4
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 4
Successful SSA optimization PassNFinalizeNumberTypeConversions
Rewriting multiplication to use shift [3] main::$5 = main::i#2 * SIZEOF_SIGNED_WORD
Rewriting multiplication to use shift [10] print::$0 = idx#13 * SIZEOF_SIGNED_WORD
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings main::i#0
Inlining constant with var siblings print::p#0
Inlining constant with var siblings print::p#1
Inlining constant with var siblings idx#19
Constant inlined main::i#0 = 2
Constant inlined print::p#1 = VALS+1*SIZEOF_SIGNED_WORD
Constant inlined print::p#0 = VALS
Constant inlined idx#19 = 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@5(between main::@4 and main::@1)
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@3
CALL GRAPH
Calls in [main] to print:1 print:3 print:10 

Created 3 initial phi equivalence classes
Coalesced [2] idx#21 = idx#14
Coalesced (already) [8] idx#20 = idx#14
Coalesced [9] print::p#4 = print::p#2
Coalesced [14] main::i#4 = main::i#1
Coalesced down to 3 phi equivalence classes
Culled Empty Block label main::@3
Culled Empty Block label main::@5
Renumbering block main::@4 to main::@3
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  [1] call print 
  to:main::@2
main::@2: scope:[main]  from main
  [2] phi()
  [3] call print 
  to:main::@1
main::@1: scope:[main]  from main::@2 main::@3
  [4] main::i#2 = phi( main::@2/2, main::@3/main::i#1 )
  [5] main::$5 = main::i#2 << 1
  [6] print::p#2 = VALS + main::$5
  [7] call print 
  to:main::@3
main::@3: scope:[main]  from main::@1
  [8] main::i#1 = ++ main::i#2
  [9] if(main::i#1!=4) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  [10] return 
  to:@return

void print(signed word* print::p)
print: scope:[print]  from main main::@1 main::@2
  [11] print::p#3 = phi( main/VALS, main::@1/print::p#2, main::@2/VALS+1*SIZEOF_SIGNED_WORD )
  [11] idx#13 = phi( main/0, main::@1/idx#14, main::@2/idx#14 )
  [12] print::$0 = idx#13 << 1
  [13] SCREEN[print::$0] = *print::p#3
  [14] idx#14 = ++ idx#13
  to:print::@return
print::@return: scope:[print]  from print
  [15] return 
  to:@return


VARIABLE REGISTER WEIGHTS
byte idx
byte idx#13 71.66666666666666
byte idx#14 10.363636363636363
void main()
byte~ main::$5 22.0
byte main::i
byte main::i#1 16.5
byte main::i#2 8.25
void print(signed word* print::p)
byte~ print::$0 202.0
signed word* print::p
signed word* print::p#2 22.0
signed word* print::p#3 56.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ idx#13 idx#14 ]
[ print::p#3 print::p#2 ]
Added variable main::$5 to live range equivalence class [ main::$5 ]
Added variable print::$0 to live range equivalence class [ print::$0 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ idx#13 idx#14 ]
[ print::p#3 print::p#2 ]
[ main::$5 ]
[ print::$0 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[1]:3 [ idx#13 idx#14 ]
Allocated zp[2]:4 [ print::p#3 print::p#2 ]
Allocated zp[1]:6 [ main::$5 ]
Allocated zp[1]:7 [ print::$0 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [5] main::$5 = main::i#2 << 1 [ main::i#2 main::$5 idx#14 ] (  [ main::i#2 main::$5 idx#14 ] { { idx#13 = idx#14 } { print::p#2 = print::p#3 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:3 [ idx#13 idx#14 ]
Statement [6] print::p#2 = VALS + main::$5 [ main::i#2 print::p#2 idx#14 ] (  [ main::i#2 print::p#2 idx#14 ] { { idx#13 = idx#14 } { print::p#2 = print::p#3 } }  ) always clobbers reg byte a 
Statement [12] print::$0 = idx#13 << 1 [ idx#13 print::p#3 print::$0 ] ( print:1 [ idx#13 print::p#3 print::$0 ] { }  print:3 [ idx#13 print::p#3 print::$0 ] { { idx#13 = idx#14 } }  print:7 [ main::i#2 idx#13 print::p#3 print::$0 ] { { idx#13 = idx#14 } { print::p#2 = print::p#3 } }  ) always clobbers reg byte a 
Statement [13] SCREEN[print::$0] = *print::p#3 [ idx#13 ] ( print:1 [ idx#13 ] { }  print:3 [ idx#13 ] { { idx#13 = idx#14 } }  print:7 [ main::i#2 idx#13 ] { { idx#13 = idx#14 } { print::p#2 = print::p#3 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:3 [ idx#13 idx#14 ]
Removing always clobbered register reg byte y as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [5] main::$5 = main::i#2 << 1 [ main::i#2 main::$5 idx#14 ] (  [ main::i#2 main::$5 idx#14 ] { { idx#13 = idx#14 } { print::p#2 = print::p#3 } }  ) always clobbers reg byte a 
Statement [6] print::p#2 = VALS + main::$5 [ main::i#2 print::p#2 idx#14 ] (  [ main::i#2 print::p#2 idx#14 ] { { idx#13 = idx#14 } { print::p#2 = print::p#3 } }  ) always clobbers reg byte a 
Statement [12] print::$0 = idx#13 << 1 [ idx#13 print::p#3 print::$0 ] ( print:1 [ idx#13 print::p#3 print::$0 ] { }  print:3 [ idx#13 print::p#3 print::$0 ] { { idx#13 = idx#14 } }  print:7 [ main::i#2 idx#13 print::p#3 print::$0 ] { { idx#13 = idx#14 } { print::p#2 = print::p#3 } }  ) always clobbers reg byte a 
Statement [13] SCREEN[print::$0] = *print::p#3 [ idx#13 ] ( print:1 [ idx#13 ] { }  print:3 [ idx#13 ] { { idx#13 = idx#14 } }  print:7 [ main::i#2 idx#13 ] { { idx#13 = idx#14 } { print::p#2 = print::p#3 } }  ) always clobbers reg byte a reg byte y 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , 
Potential registers zp[1]:3 [ idx#13 idx#14 ] : zp[1]:3 , reg byte x , 
Potential registers zp[2]:4 [ print::p#3 print::p#2 ] : zp[2]:4 , 
Potential registers zp[1]:6 [ main::$5 ] : zp[1]:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:7 [ print::$0 ] : zp[1]:7 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [print] 202: zp[1]:7 [ print::$0 ] 78: zp[2]:4 [ print::p#3 print::p#2 ] 
Uplift Scope [] 82.03: zp[1]:3 [ idx#13 idx#14 ] 
Uplift Scope [main] 24.75: zp[1]:2 [ main::i#2 main::i#1 ] 22: zp[1]:6 [ main::$5 ] 

Uplifting [print] best 616 combination reg byte a [ print::$0 ] zp[2]:4 [ print::p#3 print::p#2 ] 
Uplifting [] best 616 combination zp[1]:3 [ idx#13 idx#14 ] 
Uplifting [main] best 556 combination zp[1]:2 [ main::i#2 main::i#1 ] reg byte a [ main::$5 ] 
Attempting to uplift remaining variables inzp[1]:3 [ idx#13 idx#14 ]
Uplifting [] best 556 combination zp[1]:3 [ idx#13 idx#14 ] 
Attempting to uplift remaining variables inzp[1]:2 [ main::i#2 main::i#1 ]
Uplifting [main] best 556 combination zp[1]:2 [ main::i#2 main::i#1 ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test address-of an array element
  // Upstart
  // Commodore 64 PRG executable file
.file [name="address-of-3.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const SIZEOF_SIGNED_WORD = 2
  .label SCREEN = $400
  .label idx = 3
.segment Code
  // main
main: {
    .label i = 2
    // [1] call print 
    // [11] phi from main to print [phi:main->print]
  print_from_main:
    // [11] phi print::p#3 = VALS [phi:main->print#0] -- pwsz1=pwsc1 
    lda #<VALS
    sta.z print.p
    lda #>VALS
    sta.z print.p+1
    // [11] phi idx#13 = 0 [phi:main->print#1] -- vbuz1=vbuc1 
    lda #0
    sta.z idx
    jsr print
    // [2] phi from main to main::@2 [phi:main->main::@2]
  __b2_from_main:
    jmp __b2
    // main::@2
  __b2:
    // [3] call print 
    // [11] phi from main::@2 to print [phi:main::@2->print]
  print_from___b2:
    // [11] phi print::p#3 = VALS+1*SIZEOF_SIGNED_WORD [phi:main::@2->print#0] -- pwsz1=pwsc1 
    lda #<VALS+1*SIZEOF_SIGNED_WORD
    sta.z print.p
    lda #>VALS+1*SIZEOF_SIGNED_WORD
    sta.z print.p+1
    // [11] phi idx#13 = idx#14 [phi:main::@2->print#1] -- register_copy 
    jsr print
    // [4] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [4] phi main::i#2 = 2 [phi:main::@2->main::@1#0] -- vbuz1=vbuc1 
    lda #2
    sta.z i
    jmp __b1
    // [4] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  __b1_from___b3:
    // [4] phi main::i#2 = main::i#1 [phi:main::@3->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [5] main::$5 = main::i#2 << 1 -- vbuaa=vbuz1_rol_1 
    lda.z i
    asl
    // [6] print::p#2 = VALS + main::$5 -- pwsz1=pwsc1_plus_vbuaa 
    clc
    adc #<VALS
    sta.z print.p
    lda #>VALS
    adc #0
    sta.z print.p+1
    // [7] call print 
    // [11] phi from main::@1 to print [phi:main::@1->print]
  print_from___b1:
    // [11] phi print::p#3 = print::p#2 [phi:main::@1->print#0] -- register_copy 
    // [11] phi idx#13 = idx#14 [phi:main::@1->print#1] -- register_copy 
    jsr print
    jmp __b3
    // main::@3
  __b3:
    // [8] main::i#1 = ++ main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [9] if(main::i#1!=4) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z i
    bne __b1_from___b3
    jmp __breturn
    // main::@return
  __breturn:
    // [10] return 
    rts
}
  // print
// print(signed word* zp(4) p)
print: {
    .label p = 4
    // [12] print::$0 = idx#13 << 1 -- vbuaa=vbuz1_rol_1 
    lda.z idx
    asl
    // [13] SCREEN[print::$0] = *print::p#3 -- pwsc1_derefidx_vbuaa=_deref_pwsz1 
    tax
    ldy #0
    lda (p),y
    sta SCREEN,x
    iny
    lda (p),y
    sta SCREEN+1,x
    // [14] idx#14 = ++ idx#13 -- vbuz1=_inc_vbuz1 
    inc.z idx
    jmp __breturn
    // print::@return
  __breturn:
    // [15] return 
    rts
}
  // File Data
.segment Data
  VALS: .word 1, 2, 3, 4

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b3 with __b1
Removing instruction __b2_from_main:
Removing instruction print_from___b2:
Removing instruction __b1_from___b3:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction print_from_main:
Removing instruction __b2:
Removing instruction __b1_from___b2:
Removing instruction print_from___b1:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
const nomodify signed word* SCREEN = (signed word*) 1024
const byte SIZEOF_SIGNED_WORD = 2
const signed word* VALS[]  = { 1, 2, 3, 4 }
byte idx
byte idx#13 idx zp[1]:3 71.66666666666666
byte idx#14 idx zp[1]:3 10.363636363636363
void main()
byte~ main::$5 reg byte a 22.0
byte main::i
byte main::i#1 i zp[1]:2 16.5
byte main::i#2 i zp[1]:2 8.25
void print(signed word* print::p)
byte~ print::$0 reg byte a 202.0
signed word* print::p
signed word* print::p#2 p zp[2]:4 22.0
signed word* print::p#3 p zp[2]:4 56.0

zp[1]:2 [ main::i#2 main::i#1 ]
zp[1]:3 [ idx#13 idx#14 ]
zp[2]:4 [ print::p#3 print::p#2 ]
reg byte a [ main::$5 ]
reg byte a [ print::$0 ]


FINAL ASSEMBLER
Score: 457

  // File Comments
// Test address-of an array element
  // Upstart
  // Commodore 64 PRG executable file
.file [name="address-of-3.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const SIZEOF_SIGNED_WORD = 2
  .label SCREEN = $400
  .label idx = 3
.segment Code
  // main
main: {
    .label i = 2
    // print(VALS)
    // [1] call print 
    // [11] phi from main to print [phi:main->print]
    // [11] phi print::p#3 = VALS [phi:main->print#0] -- pwsz1=pwsc1 
    lda #<VALS
    sta.z print.p
    lda #>VALS
    sta.z print.p+1
    // [11] phi idx#13 = 0 [phi:main->print#1] -- vbuz1=vbuc1 
    lda #0
    sta.z idx
    jsr print
    // [2] phi from main to main::@2 [phi:main->main::@2]
    // main::@2
    // print(&VALS[1])
    // [3] call print 
    // [11] phi from main::@2 to print [phi:main::@2->print]
    // [11] phi print::p#3 = VALS+1*SIZEOF_SIGNED_WORD [phi:main::@2->print#0] -- pwsz1=pwsc1 
    lda #<VALS+1*SIZEOF_SIGNED_WORD
    sta.z print.p
    lda #>VALS+1*SIZEOF_SIGNED_WORD
    sta.z print.p+1
    // [11] phi idx#13 = idx#14 [phi:main::@2->print#1] -- register_copy 
    jsr print
    // [4] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [4] phi main::i#2 = 2 [phi:main::@2->main::@1#0] -- vbuz1=vbuc1 
    lda #2
    sta.z i
    // [4] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
    // [4] phi main::i#2 = main::i#1 [phi:main::@3->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // &VALS[i]
    // [5] main::$5 = main::i#2 << 1 -- vbuaa=vbuz1_rol_1 
    lda.z i
    asl
    // print(&VALS[i])
    // [6] print::p#2 = VALS + main::$5 -- pwsz1=pwsc1_plus_vbuaa 
    clc
    adc #<VALS
    sta.z print.p
    lda #>VALS
    adc #0
    sta.z print.p+1
    // [7] call print 
    // [11] phi from main::@1 to print [phi:main::@1->print]
    // [11] phi print::p#3 = print::p#2 [phi:main::@1->print#0] -- register_copy 
    // [11] phi idx#13 = idx#14 [phi:main::@1->print#1] -- register_copy 
    jsr print
    // main::@3
    // for(char i:2..3)
    // [8] main::i#1 = ++ main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [9] if(main::i#1!=4) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z i
    bne __b1
    // main::@return
    // }
    // [10] return 
    rts
}
  // print
// print(signed word* zp(4) p)
print: {
    .label p = 4
    // SCREEN[idx++] = *p
    // [12] print::$0 = idx#13 << 1 -- vbuaa=vbuz1_rol_1 
    lda.z idx
    asl
    // [13] SCREEN[print::$0] = *print::p#3 -- pwsc1_derefidx_vbuaa=_deref_pwsz1 
    tax
    ldy #0
    lda (p),y
    sta SCREEN,x
    iny
    lda (p),y
    sta SCREEN+1,x
    // SCREEN[idx++] = *p;
    // [14] idx#14 = ++ idx#13 -- vbuz1=_inc_vbuz1 
    inc.z idx
    // print::@return
    // }
    // [15] return 
    rts
}
  // File Data
.segment Data
  VALS: .word 1, 2, 3, 4

