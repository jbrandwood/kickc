@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] (byte) printf_cursor_x ← (byte) 0
  [2] (byte) printf_cursor_y ← (byte) 0
  [3] (byte*) printf_cursor_ptr ← (byte*) 1024
  to:@2
@2: scope:[]  from @1
  [4] (dword) count ← (dword) 0
  to:@3
@3: scope:[]  from @2
  [5] phi()
  [6] call main 
  to:@end
@end: scope:[]  from @3
  [7] phi()

(void()) main()
main: scope:[main]  from @3
  [8] phi()
  [9] call printf_cls 
  to:main::@1
main::@1: scope:[main]  from main
  [10] phi()
  [11] call printf_str 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [12] phi()
  [13] call printf_str 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [14] phi()
  [15] call printf_uint 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [16] (byte) tod_init::tod_TENTHS#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO)
  [17] (byte) tod_init::tod_SEC#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_SEC)
  [18] (byte) tod_init::tod_MIN#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_MIN)
  [19] (byte) tod_init::tod_HOURS#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_HOURS)
  [20] call tod_init 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [21] stackpush(byte) ← (byte) 1
  [22] callexecute queen 
  sideeffect stackpullbytes((number) 1)
  [24] call tod_read 
  [25] (byte) tod_read::return_TENTHS#2 ← (byte) tod_read::return_TENTHS#0
  [26] (byte) tod_read::return_SEC#2 ← (byte) tod_read::return_SEC#0
  [27] (byte) tod_read::return_MIN#2 ← (byte) tod_read::return_MIN#0
  [28] (byte) tod_read::return_HOURS#2 ← (byte) tod_read::return_HOURS#0
  to:main::@6
main::@6: scope:[main]  from main::@5
  [29] (byte) tod_str::tod_TENTHS#0 ← (byte) tod_read::return_TENTHS#2
  [30] (byte) tod_str::tod_SEC#0 ← (byte) tod_read::return_SEC#2
  [31] (byte) tod_str::tod_MIN#0 ← (byte) tod_read::return_MIN#2
  [32] (byte) tod_str::tod_HOURS#0 ← (byte) tod_read::return_HOURS#2
  [33] call tod_str 
  to:main::@7
main::@7: scope:[main]  from main::@6
  [34] phi()
  [35] call printf_str 
  to:main::@8
main::@8: scope:[main]  from main::@7
  [36] (dword) printf_ulong::uvalue#0 ← (dword) count
  [37] call printf_ulong 
  to:main::@9
main::@9: scope:[main]  from main::@8
  [38] phi()
  [39] call printf_str 
  to:main::@10
main::@10: scope:[main]  from main::@9
  [40] phi()
  [41] call printf_string 
  to:main::@11
main::@11: scope:[main]  from main::@10
  [42] phi()
  [43] call printf_str 
  to:main::@return
main::@return: scope:[main]  from main::@11
  [44] return 
  to:@return

(void()) printf_str((byte*) printf_str::str)
printf_str: scope:[printf_str]  from main::@1 main::@11 main::@2 main::@7 main::@9 print print::@10 print::@12 print::@4 print::@8 printf_number_buffer::@5 printf_string::@1
  [45] (byte*) printf_str::str#15 ← phi( main::@1/(const byte*) main::str main::@11/(const byte*) main::str4 main::@2/(const byte*) main::str1 main::@7/(const byte*) main::str2 main::@9/(const byte*) main::str3 print/(const byte*) print::str print::@10/(const byte*) print::str4 print::@12/(const byte*) print::str1 print::@4/(const byte*) print::str2 print::@8/(const byte*) print::str3 printf_number_buffer::@5/(byte*) printf_str::str#1 printf_string::@1/(const byte*) tod_buffer )
  to:printf_str::@1
printf_str::@1: scope:[printf_str]  from printf_str printf_str::@4 printf_str::@5
  [46] (byte*) printf_str::str#13 ← phi( printf_str/(byte*) printf_str::str#15 printf_str::@4/(byte*) printf_str::str#0 printf_str::@5/(byte*) printf_str::str#0 )
  to:printf_str::@2
printf_str::@2: scope:[printf_str]  from printf_str::@1
  [47] (byte) printf_str::ch#0 ← *((byte*) printf_str::str#13)
  [48] (byte*) printf_str::str#0 ← ++ (byte*) printf_str::str#13
  [49] if((byte) printf_str::ch#0!=(byte) 0) goto printf_str::@3
  to:printf_str::@return
printf_str::@return: scope:[printf_str]  from printf_str::@2
  [50] return 
  to:@return
printf_str::@3: scope:[printf_str]  from printf_str::@2
  [51] if((byte) printf_str::ch#0==(byte) '
') goto printf_str::@4
  to:printf_str::@5
printf_str::@5: scope:[printf_str]  from printf_str::@3
  [52] (byte) printf_char::ch#1 ← (byte) printf_str::ch#0
  [53] call printf_char 
  to:printf_str::@1
printf_str::@4: scope:[printf_str]  from printf_str::@3
  [54] phi()
  [55] call printf_ln 
  to:printf_str::@1

(void()) printf_ln()
printf_ln: scope:[printf_ln]  from printf_str::@4
  [56] (byte*~) printf_ln::$0 ← (byte*) printf_cursor_ptr - (byte) printf_cursor_x
  [57] (byte*~) printf_ln::$1 ← (byte*~) printf_ln::$0 + (byte) $28
  [58] (byte*) printf_cursor_ptr ← (byte*~) printf_ln::$1
  [59] (byte) printf_cursor_x ← (byte) 0
  [60] (byte) printf_cursor_y ← ++ (byte) printf_cursor_y
  [61] call printf_scroll 
  to:printf_ln::@return
printf_ln::@return: scope:[printf_ln]  from printf_ln
  [62] return 
  to:@return

(void()) printf_scroll()
printf_scroll: scope:[printf_scroll]  from printf_char::@1 printf_ln
  [63] if((byte) printf_cursor_y!=(byte) $19) goto printf_scroll::@return
  to:printf_scroll::@1
printf_scroll::@1: scope:[printf_scroll]  from printf_scroll
  [64] phi()
  [65] call memcpy 
  to:printf_scroll::@2
printf_scroll::@2: scope:[printf_scroll]  from printf_scroll::@1
  [66] phi()
  [67] call memset 
  to:printf_scroll::@3
printf_scroll::@3: scope:[printf_scroll]  from printf_scroll::@2
  [68] (byte*~) printf_scroll::$4 ← (byte*) printf_cursor_ptr - (byte) $28
  [69] (byte*) printf_cursor_ptr ← (byte*~) printf_scroll::$4
  [70] (byte) printf_cursor_y ← -- (byte) printf_cursor_y
  to:printf_scroll::@return
printf_scroll::@return: scope:[printf_scroll]  from printf_scroll printf_scroll::@3
  [71] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from printf_cls printf_scroll::@2
  [72] (byte) memset::c#4 ← phi( printf_cls/(byte) ' ' printf_scroll::@2/(byte) ' ' )
  [72] (void*) memset::str#3 ← phi( printf_cls/(void*) 1024 printf_scroll::@2/(void*)(number) $400+(number) $28*(number) $19-(number) $28 )
  [72] (word) memset::num#2 ← phi( printf_cls/(word)(number) $28*(number) $19 printf_scroll::@2/(byte) $28 )
  [73] if((word) memset::num#2<=(byte) 0) goto memset::@return
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [74] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2
  [75] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [76] (byte*) memset::dst#2 ← phi( memset::@1/(byte*) memset::dst#4 memset::@3/(byte*) memset::dst#1 )
  [77] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset memset::@2
  [78] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [79] *((byte*) memset::dst#2) ← (byte) memset::c#4
  [80] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@2

(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
memcpy: scope:[memcpy]  from printf_scroll::@1
  [81] phi()
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [82] (byte*) memcpy::dst#2 ← phi( memcpy/(byte*)(const void*) memcpy::destination#0 memcpy::@2/(byte*) memcpy::dst#1 )
  [82] (byte*) memcpy::src#2 ← phi( memcpy/(byte*)(const void*) memcpy::source#0 memcpy::@2/(byte*) memcpy::src#1 )
  [83] if((byte*) memcpy::src#2!=(const byte*) memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [84] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [85] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2)
  [86] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2
  [87] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2
  to:memcpy::@1

(void()) printf_char((byte) printf_char::ch)
printf_char: scope:[printf_char]  from printf_number_buffer::@9 printf_padding::@2 printf_str::@5
  [88] (byte) printf_char::ch#3 ← phi( printf_number_buffer::@9/(byte) printf_char::ch#2 printf_padding::@2/(byte) printf_char::ch#0 printf_str::@5/(byte) printf_char::ch#1 )
  [89] *((byte*) printf_cursor_ptr) ← (byte) printf_char::ch#3
  [90] (byte*) printf_cursor_ptr ← ++ (byte*) printf_cursor_ptr
  [91] (byte) printf_cursor_x ← ++ (byte) printf_cursor_x
  [92] if((byte) printf_cursor_x!=(byte) $28) goto printf_char::@return
  to:printf_char::@1
printf_char::@1: scope:[printf_char]  from printf_char
  [93] (byte) printf_cursor_x ← (byte) 0
  [94] (byte) printf_cursor_y ← ++ (byte) printf_cursor_y
  [95] call printf_scroll 
  to:printf_char::@return
printf_char::@return: scope:[printf_char]  from printf_char printf_char::@1
  [96] return 
  to:@return

(void()) printf_string((byte*) printf_string::str , (byte) printf_string::format_min_length , (byte) printf_string::format_justify_left)
printf_string: scope:[printf_string]  from main::@10
  [97] phi()
  to:printf_string::@1
printf_string::@1: scope:[printf_string]  from printf_string
  [98] phi()
  [99] call printf_str 
  to:printf_string::@return
printf_string::@return: scope:[printf_string]  from printf_string::@1
  [100] return 
  to:@return

(void()) printf_ulong((dword) printf_ulong::uvalue , (byte) printf_ulong::format_min_length , (byte) printf_ulong::format_justify_left , (byte) printf_ulong::format_sign_always , (byte) printf_ulong::format_zero_padding , (byte) printf_ulong::format_upper_case , (byte) printf_ulong::format_radix)
printf_ulong: scope:[printf_ulong]  from main::@8 print::@11
  [101] (dword) printf_ulong::uvalue#2 ← phi( main::@8/(dword) printf_ulong::uvalue#0 print::@11/(dword) printf_ulong::uvalue#1 )
  to:printf_ulong::@1
printf_ulong::@1: scope:[printf_ulong]  from printf_ulong
  [102] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0
  [103] (dword) ultoa::value#1 ← (dword) printf_ulong::uvalue#2
  [104] call ultoa 
  to:printf_ulong::@2
printf_ulong::@2: scope:[printf_ulong]  from printf_ulong::@1
  [105] (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer)
  [106] call printf_number_buffer 
  to:printf_ulong::@return
printf_ulong::@return: scope:[printf_ulong]  from printf_ulong::@2
  [107] return 
  to:@return

(void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_uchar::@2 printf_uint::@2 printf_ulong::@2
  [108] (byte) printf_number_buffer::format_upper_case#10 ← phi( printf_uchar::@2/(byte) 0 printf_uint::@2/(const byte) printf_uint::format_upper_case#0 printf_ulong::@2/(byte) 0 )
  [108] (byte) printf_number_buffer::buffer_sign#10 ← phi( printf_uchar::@2/(byte) printf_number_buffer::buffer_sign#2 printf_uint::@2/(byte) printf_number_buffer::buffer_sign#1 printf_ulong::@2/(byte) printf_number_buffer::buffer_sign#0 )
  [108] (byte*) printf_number_buffer::buffer_digits#10 ← phi( printf_uchar::@2/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS printf_uint::@2/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS printf_ulong::@2/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [108] (byte) printf_number_buffer::format_zero_padding#10 ← phi( printf_uchar::@2/(byte) 0 printf_uint::@2/(const byte) printf_uint::format_zero_padding#0 printf_ulong::@2/(byte) 0 )
  [108] (byte) printf_number_buffer::format_justify_left#10 ← phi( printf_uchar::@2/(byte) 0 printf_uint::@2/(const byte) printf_uint::format_justify_left#0 printf_ulong::@2/(byte) 0 )
  [108] (byte) printf_number_buffer::format_min_length#3 ← phi( printf_uchar::@2/(byte) 0 printf_uint::@2/(const byte) printf_uint::format_min_length#0 printf_ulong::@2/(byte) 0 )
  [109] if((byte) 0==(byte) printf_number_buffer::format_min_length#3) goto printf_number_buffer::@1
  to:printf_number_buffer::@6
printf_number_buffer::@6: scope:[printf_number_buffer]  from printf_number_buffer
  [110] (byte*) strlen::str#1 ← (byte*) printf_number_buffer::buffer_digits#10
  [111] call strlen 
  [112] (word) strlen::return#2 ← (word) strlen::len#2
  to:printf_number_buffer::@14
printf_number_buffer::@14: scope:[printf_number_buffer]  from printf_number_buffer::@6
  [113] (word~) printf_number_buffer::$19 ← (word) strlen::return#2
  [114] (signed byte) printf_number_buffer::len#0 ← (signed byte)(word~) printf_number_buffer::$19
  [115] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@13
  to:printf_number_buffer::@7
printf_number_buffer::@7: scope:[printf_number_buffer]  from printf_number_buffer::@14
  [116] (signed byte) printf_number_buffer::len#1 ← ++ (signed byte) printf_number_buffer::len#0
  to:printf_number_buffer::@13
printf_number_buffer::@13: scope:[printf_number_buffer]  from printf_number_buffer::@14 printf_number_buffer::@7
  [117] (signed byte) printf_number_buffer::len#2 ← phi( printf_number_buffer::@14/(signed byte) printf_number_buffer::len#0 printf_number_buffer::@7/(signed byte) printf_number_buffer::len#1 )
  [118] (signed byte) printf_number_buffer::padding#1 ← (signed byte)(byte) printf_number_buffer::format_min_length#3 - (signed byte) printf_number_buffer::len#2
  [119] if((signed byte) printf_number_buffer::padding#1>=(signed byte) 0) goto printf_number_buffer::@21
  to:printf_number_buffer::@1
printf_number_buffer::@21: scope:[printf_number_buffer]  from printf_number_buffer::@13
  [120] phi()
  to:printf_number_buffer::@1
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer printf_number_buffer::@13 printf_number_buffer::@21
  [121] (signed byte) printf_number_buffer::padding#10 ← phi( printf_number_buffer/(signed byte) 0 printf_number_buffer::@21/(signed byte) printf_number_buffer::padding#1 printf_number_buffer::@13/(signed byte) 0 )
  [122] if((byte) 0!=(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@2
  to:printf_number_buffer::@17
printf_number_buffer::@17: scope:[printf_number_buffer]  from printf_number_buffer::@1
  [123] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@2
  to:printf_number_buffer::@16
printf_number_buffer::@16: scope:[printf_number_buffer]  from printf_number_buffer::@17
  [124] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@8
  to:printf_number_buffer::@2
printf_number_buffer::@8: scope:[printf_number_buffer]  from printf_number_buffer::@16
  [125] (byte) printf_padding::length#0 ← (byte)(signed byte) printf_number_buffer::padding#10
  [126] call printf_padding 
  to:printf_number_buffer::@2
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@16 printf_number_buffer::@17 printf_number_buffer::@8
  [127] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@3
  to:printf_number_buffer::@9
printf_number_buffer::@9: scope:[printf_number_buffer]  from printf_number_buffer::@2
  [128] (byte) printf_char::ch#2 ← (byte) printf_number_buffer::buffer_sign#10
  [129] call printf_char 
  to:printf_number_buffer::@3
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@2 printf_number_buffer::@9
  [130] if((byte) 0==(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@4
  to:printf_number_buffer::@18
printf_number_buffer::@18: scope:[printf_number_buffer]  from printf_number_buffer::@3
  [131] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@10
  to:printf_number_buffer::@4
printf_number_buffer::@10: scope:[printf_number_buffer]  from printf_number_buffer::@18
  [132] (byte) printf_padding::length#1 ← (byte)(signed byte) printf_number_buffer::padding#10
  [133] call printf_padding 
  to:printf_number_buffer::@4
printf_number_buffer::@4: scope:[printf_number_buffer]  from printf_number_buffer::@10 printf_number_buffer::@18 printf_number_buffer::@3
  [134] if((byte) 0==(byte) printf_number_buffer::format_upper_case#10) goto printf_number_buffer::@5
  to:printf_number_buffer::@11
printf_number_buffer::@11: scope:[printf_number_buffer]  from printf_number_buffer::@4
  [135] (byte*) strupr::str#0 ← (byte*) printf_number_buffer::buffer_digits#10
  [136] call strupr 
  to:printf_number_buffer::@5
printf_number_buffer::@5: scope:[printf_number_buffer]  from printf_number_buffer::@11 printf_number_buffer::@4
  [137] (byte*) printf_str::str#1 ← (byte*) printf_number_buffer::buffer_digits#10
  [138] call printf_str 
  to:printf_number_buffer::@15
printf_number_buffer::@15: scope:[printf_number_buffer]  from printf_number_buffer::@5
  [139] if((byte) 0==(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@return
  to:printf_number_buffer::@20
printf_number_buffer::@20: scope:[printf_number_buffer]  from printf_number_buffer::@15
  [140] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@return
  to:printf_number_buffer::@19
printf_number_buffer::@19: scope:[printf_number_buffer]  from printf_number_buffer::@20
  [141] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@12
  to:printf_number_buffer::@return
printf_number_buffer::@12: scope:[printf_number_buffer]  from printf_number_buffer::@19
  [142] (byte) printf_padding::length#2 ← (byte)(signed byte) printf_number_buffer::padding#10
  [143] call printf_padding 
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@12 printf_number_buffer::@15 printf_number_buffer::@19 printf_number_buffer::@20
  [144] return 
  to:@return

(void()) printf_padding((byte) printf_padding::pad , (byte) printf_padding::length)
printf_padding: scope:[printf_padding]  from printf_number_buffer::@10 printf_number_buffer::@12 printf_number_buffer::@8
  [145] (byte) printf_padding::pad#7 ← phi( printf_number_buffer::@10/(byte) '0' printf_number_buffer::@12/(byte) ' ' printf_number_buffer::@8/(byte) ' ' )
  [145] (byte) printf_padding::length#6 ← phi( printf_number_buffer::@10/(byte) printf_padding::length#1 printf_number_buffer::@12/(byte) printf_padding::length#2 printf_number_buffer::@8/(byte) printf_padding::length#0 )
  to:printf_padding::@1
printf_padding::@1: scope:[printf_padding]  from printf_padding printf_padding::@3
  [146] (byte) printf_padding::i#2 ← phi( printf_padding/(byte) 0 printf_padding::@3/(byte) printf_padding::i#1 )
  [147] if((byte) printf_padding::i#2<(byte) printf_padding::length#6) goto printf_padding::@2
  to:printf_padding::@return
printf_padding::@return: scope:[printf_padding]  from printf_padding::@1
  [148] return 
  to:@return
printf_padding::@2: scope:[printf_padding]  from printf_padding::@1
  [149] (byte) printf_char::ch#0 ← (byte) printf_padding::pad#7
  [150] call printf_char 
  to:printf_padding::@3
printf_padding::@3: scope:[printf_padding]  from printf_padding::@2
  [151] (byte) printf_padding::i#1 ← ++ (byte) printf_padding::i#2
  to:printf_padding::@1

(byte*()) strupr((byte*) strupr::str)
strupr: scope:[strupr]  from printf_number_buffer::@11
  [152] phi()
  to:strupr::@1
strupr::@1: scope:[strupr]  from strupr strupr::@3
  [153] (byte*) strupr::src#2 ← phi( strupr/(byte*) strupr::str#0 strupr::@3/(byte*) strupr::src#1 )
  [154] if((byte) 0!=*((byte*) strupr::src#2)) goto strupr::@2
  to:strupr::@return
strupr::@return: scope:[strupr]  from strupr::@1
  [155] return 
  to:@return
strupr::@2: scope:[strupr]  from strupr::@1
  [156] (byte) toupper::ch#0 ← *((byte*) strupr::src#2)
  [157] call toupper 
  [158] (byte) toupper::return#3 ← (byte) toupper::return#2
  to:strupr::@3
strupr::@3: scope:[strupr]  from strupr::@2
  [159] (byte~) strupr::$0 ← (byte) toupper::return#3
  [160] *((byte*) strupr::src#2) ← (byte~) strupr::$0
  [161] (byte*) strupr::src#1 ← ++ (byte*) strupr::src#2
  to:strupr::@1

(byte()) toupper((byte) toupper::ch)
toupper: scope:[toupper]  from strupr::@2
  [162] if((byte) toupper::ch#0<(byte) 'a') goto toupper::@return
  to:toupper::@2
toupper::@2: scope:[toupper]  from toupper
  [163] if((byte) toupper::ch#0<=(byte) 'z') goto toupper::@1
  to:toupper::@return
toupper::@1: scope:[toupper]  from toupper::@2
  [164] (byte) toupper::return#0 ← (byte) toupper::ch#0 + (byte) 'A'-(byte) 'a'
  to:toupper::@return
toupper::@return: scope:[toupper]  from toupper toupper::@1 toupper::@2
  [165] (byte) toupper::return#2 ← phi( toupper::@1/(byte) toupper::return#0 toupper/(byte) toupper::ch#0 toupper::@2/(byte) toupper::ch#0 )
  [166] return 
  to:@return

(word()) strlen((byte*) strlen::str)
strlen: scope:[strlen]  from printf_number_buffer::@6
  [167] phi()
  to:strlen::@1
strlen::@1: scope:[strlen]  from strlen strlen::@2
  [168] (word) strlen::len#2 ← phi( strlen/(word) 0 strlen::@2/(word) strlen::len#1 )
  [168] (byte*) strlen::str#3 ← phi( strlen/(byte*) strlen::str#1 strlen::@2/(byte*) strlen::str#0 )
  [169] if((byte) 0!=*((byte*) strlen::str#3)) goto strlen::@2
  to:strlen::@return
strlen::@return: scope:[strlen]  from strlen::@1
  [170] return 
  to:@return
strlen::@2: scope:[strlen]  from strlen::@1
  [171] (word) strlen::len#1 ← ++ (word) strlen::len#2
  [172] (byte*) strlen::str#0 ← ++ (byte*) strlen::str#3
  to:strlen::@1

(void()) ultoa((dword) ultoa::value , (byte*) ultoa::buffer , (byte) ultoa::radix)
ultoa: scope:[ultoa]  from printf_ulong::@1
  [173] phi()
  to:ultoa::@1
ultoa::@1: scope:[ultoa]  from ultoa ultoa::@4
  [174] (byte*) ultoa::buffer#11 ← phi( ultoa::@4/(byte*) ultoa::buffer#14 ultoa/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [174] (byte) ultoa::started#2 ← phi( ultoa::@4/(byte) ultoa::started#4 ultoa/(byte) 0 )
  [174] (dword) ultoa::value#2 ← phi( ultoa::@4/(dword) ultoa::value#6 ultoa/(dword) ultoa::value#1 )
  [174] (byte) ultoa::digit#2 ← phi( ultoa::@4/(byte) ultoa::digit#1 ultoa/(byte) 0 )
  [175] if((byte) ultoa::digit#2<(byte) $a-(byte) 1) goto ultoa::@2
  to:ultoa::@3
ultoa::@3: scope:[ultoa]  from ultoa::@1
  [176] (byte~) ultoa::$11 ← (byte)(dword) ultoa::value#2
  [177] *((byte*) ultoa::buffer#11) ← *((const byte*) DIGITS + (byte~) ultoa::$11)
  [178] (byte*) ultoa::buffer#3 ← ++ (byte*) ultoa::buffer#11
  [179] *((byte*) ultoa::buffer#3) ← (byte) 0
  to:ultoa::@return
ultoa::@return: scope:[ultoa]  from ultoa::@3
  [180] return 
  to:@return
ultoa::@2: scope:[ultoa]  from ultoa::@1
  [181] (byte~) ultoa::$10 ← (byte) ultoa::digit#2 << (byte) 2
  [182] (dword) ultoa::digit_value#0 ← *((const dword*) RADIX_DECIMAL_VALUES_LONG + (byte~) ultoa::$10)
  [183] if((byte) 0!=(byte) ultoa::started#2) goto ultoa::@5
  to:ultoa::@7
ultoa::@7: scope:[ultoa]  from ultoa::@2
  [184] if((dword) ultoa::value#2>=(dword) ultoa::digit_value#0) goto ultoa::@5
  to:ultoa::@4
ultoa::@4: scope:[ultoa]  from ultoa::@6 ultoa::@7
  [185] (byte*) ultoa::buffer#14 ← phi( ultoa::@7/(byte*) ultoa::buffer#11 ultoa::@6/(byte*) ultoa::buffer#4 )
  [185] (byte) ultoa::started#4 ← phi( ultoa::@7/(byte) ultoa::started#2 ultoa::@6/(byte) 1 )
  [185] (dword) ultoa::value#6 ← phi( ultoa::@7/(dword) ultoa::value#2 ultoa::@6/(dword) ultoa::value#0 )
  [186] (byte) ultoa::digit#1 ← ++ (byte) ultoa::digit#2
  to:ultoa::@1
ultoa::@5: scope:[ultoa]  from ultoa::@2 ultoa::@7
  [187] (byte*) ultoa_append::buffer#0 ← (byte*) ultoa::buffer#11
  [188] (dword) ultoa_append::value#0 ← (dword) ultoa::value#2
  [189] (dword) ultoa_append::sub#0 ← (dword) ultoa::digit_value#0
  [190] call ultoa_append 
  [191] (dword) ultoa_append::return#0 ← (dword) ultoa_append::value#2
  to:ultoa::@6
ultoa::@6: scope:[ultoa]  from ultoa::@5
  [192] (dword) ultoa::value#0 ← (dword) ultoa_append::return#0
  [193] (byte*) ultoa::buffer#4 ← ++ (byte*) ultoa::buffer#11
  to:ultoa::@4

(dword()) ultoa_append((byte*) ultoa_append::buffer , (dword) ultoa_append::value , (dword) ultoa_append::sub)
ultoa_append: scope:[ultoa_append]  from ultoa::@5
  [194] phi()
  to:ultoa_append::@1
ultoa_append::@1: scope:[ultoa_append]  from ultoa_append ultoa_append::@2
  [195] (byte) ultoa_append::digit#2 ← phi( ultoa_append/(byte) 0 ultoa_append::@2/(byte) ultoa_append::digit#1 )
  [195] (dword) ultoa_append::value#2 ← phi( ultoa_append/(dword) ultoa_append::value#0 ultoa_append::@2/(dword) ultoa_append::value#1 )
  [196] if((dword) ultoa_append::value#2>=(dword) ultoa_append::sub#0) goto ultoa_append::@2
  to:ultoa_append::@3
ultoa_append::@3: scope:[ultoa_append]  from ultoa_append::@1
  [197] *((byte*) ultoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) ultoa_append::digit#2)
  to:ultoa_append::@return
ultoa_append::@return: scope:[ultoa_append]  from ultoa_append::@3
  [198] return 
  to:@return
ultoa_append::@2: scope:[ultoa_append]  from ultoa_append::@1
  [199] (byte) ultoa_append::digit#1 ← ++ (byte) ultoa_append::digit#2
  [200] (dword) ultoa_append::value#1 ← (dword) ultoa_append::value#2 - (dword) ultoa_append::sub#0
  to:ultoa_append::@1

(byte*()) tod_str((byte) tod_str::tod_TENTHS , (byte) tod_str::tod_SEC , (byte) tod_str::tod_MIN , (byte) tod_str::tod_HOURS)
tod_str: scope:[tod_str]  from main::@6
  [201] (byte~) tod_str::$0 ← (byte) tod_str::tod_HOURS#0 >> (byte) 4
  [202] (byte~) tod_str::$1 ← (byte) '0' + (byte~) tod_str::$0
  [203] *((const byte*) tod_buffer) ← (byte~) tod_str::$1
  [204] (byte~) tod_str::$2 ← (byte) tod_str::tod_HOURS#0 & (byte) $f
  [205] (byte~) tod_str::$3 ← (byte) '0' + (byte~) tod_str::$2
  [206] *((const byte*) tod_buffer+(byte) 1) ← (byte~) tod_str::$3
  [207] (byte~) tod_str::$4 ← (byte) tod_str::tod_MIN#0 >> (byte) 4
  [208] (byte~) tod_str::$5 ← (byte) '0' + (byte~) tod_str::$4
  [209] *((const byte*) tod_buffer+(byte) 3) ← (byte~) tod_str::$5
  [210] (byte~) tod_str::$6 ← (byte) tod_str::tod_MIN#0 & (byte) $f
  [211] (byte~) tod_str::$7 ← (byte) '0' + (byte~) tod_str::$6
  [212] *((const byte*) tod_buffer+(byte) 4) ← (byte~) tod_str::$7
  [213] (byte~) tod_str::$8 ← (byte) tod_str::tod_SEC#0 >> (byte) 4
  [214] (byte~) tod_str::$9 ← (byte) '0' + (byte~) tod_str::$8
  [215] *((const byte*) tod_buffer+(byte) 6) ← (byte~) tod_str::$9
  [216] (byte~) tod_str::$10 ← (byte) tod_str::tod_SEC#0 & (byte) $f
  [217] (byte~) tod_str::$11 ← (byte) '0' + (byte~) tod_str::$10
  [218] *((const byte*) tod_buffer+(byte) 7) ← (byte~) tod_str::$11
  [219] (byte~) tod_str::$12 ← (byte) tod_str::tod_TENTHS#0 >> (byte) 4
  [220] (byte~) tod_str::$13 ← (byte) '0' + (byte~) tod_str::$12
  [221] *((const byte*) tod_buffer+(byte) 9) ← (byte~) tod_str::$13
  [222] (byte~) tod_str::$14 ← (byte) tod_str::tod_TENTHS#0 & (byte) $f
  [223] (byte~) tod_str::$15 ← (byte) '0' + (byte~) tod_str::$14
  [224] *((const byte*) tod_buffer+(byte) $a) ← (byte~) tod_str::$15
  to:tod_str::@return
tod_str::@return: scope:[tod_str]  from tod_str
  [225] return 
  to:@return

(struct TIME_OF_DAY()) tod_read()
tod_read: scope:[tod_read]  from main::@5
  [226] (byte) tod_read::return_HOURS#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS)
  [227] (byte) tod_read::return_MIN#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN)
  [228] (byte) tod_read::return_SEC#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC)
  [229] (byte) tod_read::return_TENTHS#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS)
  to:tod_read::@return
tod_read::@return: scope:[tod_read]  from tod_read
  [230] return 
  to:@return

(void()) tod_init((byte) tod_init::tod_TENTHS , (byte) tod_init::tod_SEC , (byte) tod_init::tod_MIN , (byte) tod_init::tod_HOURS)
tod_init: scope:[tod_init]  from main::@4
  [231] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) | (byte) $80
  [232] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) & (byte) $7f
  [233] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS) ← (byte) tod_init::tod_HOURS#0
  [234] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN) ← (byte) tod_init::tod_MIN#0
  [235] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC) ← (byte) tod_init::tod_SEC#0
  [236] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS) ← (byte) tod_init::tod_TENTHS#0
  to:tod_init::@return
tod_init::@return: scope:[tod_init]  from tod_init
  [237] return 
  to:@return

(void()) printf_uint((word) printf_uint::uvalue , (byte) printf_uint::format_min_length , (byte) printf_uint::format_justify_left , (byte) printf_uint::format_sign_always , (byte) printf_uint::format_zero_padding , (byte) printf_uint::format_upper_case , (byte) printf_uint::format_radix)
printf_uint: scope:[printf_uint]  from main::@3
  [238] phi()
  to:printf_uint::@1
printf_uint::@1: scope:[printf_uint]  from printf_uint
  [239] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0
  [240] call utoa 
  to:printf_uint::@2
printf_uint::@2: scope:[printf_uint]  from printf_uint::@1
  [241] (byte) printf_number_buffer::buffer_sign#1 ← *((byte*)&(struct printf_buffer_number) printf_buffer)
  [242] call printf_number_buffer 
  to:printf_uint::@return
printf_uint::@return: scope:[printf_uint]  from printf_uint::@2
  [243] return 
  to:@return

(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
utoa: scope:[utoa]  from printf_uint::@1
  [244] phi()
  to:utoa::@1
utoa::@1: scope:[utoa]  from utoa utoa::@4
  [245] (byte*) utoa::buffer#11 ← phi( utoa::@4/(byte*) utoa::buffer#14 utoa/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [245] (byte) utoa::started#2 ← phi( utoa::@4/(byte) utoa::started#4 utoa/(byte) 0 )
  [245] (word) utoa::value#2 ← phi( utoa::@4/(word) utoa::value#6 utoa/(const word) printf_uint::uvalue#0 )
  [245] (byte) utoa::digit#2 ← phi( utoa::@4/(byte) utoa::digit#1 utoa/(byte) 0 )
  [246] if((byte) utoa::digit#2<(const byte) utoa::max_digits#1-(byte) 1) goto utoa::@2
  to:utoa::@3
utoa::@3: scope:[utoa]  from utoa::@1
  [247] (byte~) utoa::$11 ← (byte)(word) utoa::value#2
  [248] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11)
  [249] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11
  [250] *((byte*) utoa::buffer#3) ← (byte) 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@3
  [251] return 
  to:@return
utoa::@2: scope:[utoa]  from utoa::@1
  [252] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1
  [253] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10)
  [254] if((byte) 0!=(byte) utoa::started#2) goto utoa::@5
  to:utoa::@7
utoa::@7: scope:[utoa]  from utoa::@2
  [255] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5
  to:utoa::@4
utoa::@4: scope:[utoa]  from utoa::@6 utoa::@7
  [256] (byte*) utoa::buffer#14 ← phi( utoa::@7/(byte*) utoa::buffer#11 utoa::@6/(byte*) utoa::buffer#4 )
  [256] (byte) utoa::started#4 ← phi( utoa::@7/(byte) utoa::started#2 utoa::@6/(byte) 1 )
  [256] (word) utoa::value#6 ← phi( utoa::@7/(word) utoa::value#2 utoa::@6/(word) utoa::value#0 )
  [257] (byte) utoa::digit#1 ← ++ (byte) utoa::digit#2
  to:utoa::@1
utoa::@5: scope:[utoa]  from utoa::@2 utoa::@7
  [258] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11
  [259] (word) utoa_append::value#0 ← (word) utoa::value#2
  [260] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0
  [261] call utoa_append 
  [262] (word) utoa_append::return#0 ← (word) utoa_append::value#2
  to:utoa::@6
utoa::@6: scope:[utoa]  from utoa::@5
  [263] (word) utoa::value#0 ← (word) utoa_append::return#0
  [264] (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#11
  to:utoa::@4

(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
utoa_append: scope:[utoa_append]  from utoa::@5
  [265] phi()
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  [266] (byte) utoa_append::digit#2 ← phi( utoa_append/(byte) 0 utoa_append::@2/(byte) utoa_append::digit#1 )
  [266] (word) utoa_append::value#2 ← phi( utoa_append/(word) utoa_append::value#0 utoa_append::@2/(word) utoa_append::value#1 )
  [267] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  [268] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2)
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  [269] return 
  to:@return
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  [270] (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2
  [271] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0
  to:utoa_append::@1

(void()) printf_cls()
printf_cls: scope:[printf_cls]  from main
  [272] phi()
  [273] call memset 
  to:printf_cls::@1
printf_cls::@1: scope:[printf_cls]  from printf_cls
  [274] (byte*) printf_cursor_ptr ← (byte*) 1024
  [275] (byte) printf_cursor_x ← (byte) 0
  [276] (byte) printf_cursor_y ← (byte) 0
  to:printf_cls::@return
printf_cls::@return: scope:[printf_cls]  from printf_cls::@1
  [277] return 
  to:@return

__stackcall (void()) queen((byte) queen::row)
queen: scope:[queen]  from
  [278] (byte) queen::row#0 ← stackidx(byte,(const byte) queen::OFFSET_STACK_ROW)
  [279] (byte) queen::r ← (byte) queen::row#0
  [280] (byte) queen::column ← (byte) 1
  to:queen::@1
queen::@1: scope:[queen]  from queen queen::@3
  [281] if((byte) queen::column<(byte) 8+(byte) 1) goto queen::@2
  to:queen::@return
queen::@return: scope:[queen]  from queen::@1
  [282] return 
  to:@return
queen::@2: scope:[queen]  from queen::@1
  [283] (byte) legal::row#0 ← (byte) queen::r
  [284] (byte) legal::column#0 ← (byte) queen::column
  [285] call legal 
  [286] (byte) legal::return#0 ← (byte) legal::return#4
  to:queen::@7
queen::@7: scope:[queen]  from queen::@2
  [287] (byte~) queen::$1 ← (byte) legal::return#0
  [288] if((byte) 0==(byte~) queen::$1) goto queen::@3
  to:queen::@5
queen::@5: scope:[queen]  from queen::@7
  [289] *((const byte*) board + (byte) queen::r) ← (byte) queen::column
  [290] if((byte) queen::r==(byte) 8) goto queen::@4
  to:queen::@6
queen::@6: scope:[queen]  from queen::@5
  asm { ldacolumn pha ldar pha  }
  [292] (byte~) queen::$4 ← (byte) queen::r + (byte) 1
  [293] stackpush(byte) ← (byte~) queen::$4
  [294] callexecute queen 
  sideeffect stackpullbytes((number) 1)
  asm { pla star pla stacolumn  }
  to:queen::@3
queen::@3: scope:[queen]  from queen::@4 queen::@6 queen::@7
  [297] (byte) queen::column ← ++ (byte) queen::column
  to:queen::@1
queen::@4: scope:[queen]  from queen::@5
  [298] (dword) count ← ++ (dword) count
  [299] call print 
  to:queen::@3

(void()) print()
print: scope:[print]  from queen::@4
  [300] phi()
  [301] call printf_str 
  to:print::@11
print::@11: scope:[print]  from print
  [302] (dword) printf_ulong::uvalue#1 ← (dword) count
  [303] call printf_ulong 
  to:print::@12
print::@12: scope:[print]  from print::@11
  [304] phi()
  [305] call printf_str 
  to:print::@1
print::@1: scope:[print]  from print::@12 print::@13
  [306] (byte) print::i#2 ← phi( print::@12/(byte) 1 print::@13/(byte) print::i#1 )
  [307] if((byte) print::i#2<(byte) 8+(byte) 1) goto print::@2
  to:print::@3
print::@3: scope:[print]  from print::@1 print::@7
  [308] (byte) print::i1#2 ← phi( print::@1/(byte) 1 print::@7/(byte) print::i1#1 )
  [309] if((byte) print::i1#2<(byte) 8+(byte) 1) goto print::@4
  to:print::@return
print::@return: scope:[print]  from print::@3
  [310] return 
  to:@return
print::@4: scope:[print]  from print::@3
  [311] phi()
  [312] call printf_str 
  to:print::@14
print::@14: scope:[print]  from print::@4
  [313] (byte) printf_uchar::uvalue#1 ← (byte) print::i1#2
  [314] call printf_uchar 
  to:print::@5
print::@5: scope:[print]  from print::@14 print::@9
  [315] (byte) print::j#2 ← phi( print::@9/(byte) print::j#1 print::@14/(byte) 1 )
  [316] if((byte) print::j#2<(byte) 8+(byte) 1) goto print::@6
  to:print::@7
print::@7: scope:[print]  from print::@5
  [317] (byte) print::i1#1 ← ++ (byte) print::i1#2
  to:print::@3
print::@6: scope:[print]  from print::@5
  [318] if(*((const byte*) board + (byte) print::i1#2)==(byte) print::j#2) goto print::@8
  to:print::@10
print::@10: scope:[print]  from print::@6
  [319] phi()
  [320] call printf_str 
  to:print::@9
print::@9: scope:[print]  from print::@10 print::@8
  [321] (byte) print::j#1 ← ++ (byte) print::j#2
  to:print::@5
print::@8: scope:[print]  from print::@6
  [322] phi()
  [323] call printf_str 
  to:print::@9
print::@2: scope:[print]  from print::@1
  [324] (byte) printf_uchar::uvalue#0 ← (byte) print::i#2
  [325] call printf_uchar 
  to:print::@13
print::@13: scope:[print]  from print::@2
  [326] (byte) print::i#1 ← ++ (byte) print::i#2
  to:print::@1

(void()) printf_uchar((byte) printf_uchar::uvalue , (byte) printf_uchar::format_min_length , (byte) printf_uchar::format_justify_left , (byte) printf_uchar::format_sign_always , (byte) printf_uchar::format_zero_padding , (byte) printf_uchar::format_upper_case , (byte) printf_uchar::format_radix)
printf_uchar: scope:[printf_uchar]  from print::@14 print::@2
  [327] (byte) printf_uchar::uvalue#2 ← phi( print::@14/(byte) printf_uchar::uvalue#1 print::@2/(byte) printf_uchar::uvalue#0 )
  to:printf_uchar::@1
printf_uchar::@1: scope:[printf_uchar]  from printf_uchar
  [328] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0
  [329] (byte) uctoa::value#1 ← (byte) printf_uchar::uvalue#2
  [330] call uctoa 
  to:printf_uchar::@2
printf_uchar::@2: scope:[printf_uchar]  from printf_uchar::@1
  [331] (byte) printf_number_buffer::buffer_sign#2 ← *((byte*)&(struct printf_buffer_number) printf_buffer)
  [332] call printf_number_buffer 
  to:printf_uchar::@return
printf_uchar::@return: scope:[printf_uchar]  from printf_uchar::@2
  [333] return 
  to:@return

(void()) uctoa((byte) uctoa::value , (byte*) uctoa::buffer , (byte) uctoa::radix)
uctoa: scope:[uctoa]  from printf_uchar::@1
  [334] phi()
  to:uctoa::@1
uctoa::@1: scope:[uctoa]  from uctoa uctoa::@4
  [335] (byte*) uctoa::buffer#11 ← phi( uctoa::@4/(byte*) uctoa::buffer#14 uctoa/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [335] (byte) uctoa::started#2 ← phi( uctoa::@4/(byte) uctoa::started#4 uctoa/(byte) 0 )
  [335] (byte) uctoa::value#2 ← phi( uctoa::@4/(byte) uctoa::value#6 uctoa/(byte) uctoa::value#1 )
  [335] (byte) uctoa::digit#2 ← phi( uctoa::@4/(byte) uctoa::digit#1 uctoa/(byte) 0 )
  [336] if((byte) uctoa::digit#2<(byte) 2-(byte) 1) goto uctoa::@2
  to:uctoa::@3
uctoa::@3: scope:[uctoa]  from uctoa::@1
  [337] *((byte*) uctoa::buffer#11) ← *((const byte*) DIGITS + (byte) uctoa::value#2)
  [338] (byte*) uctoa::buffer#3 ← ++ (byte*) uctoa::buffer#11
  [339] *((byte*) uctoa::buffer#3) ← (byte) 0
  to:uctoa::@return
uctoa::@return: scope:[uctoa]  from uctoa::@3
  [340] return 
  to:@return
uctoa::@2: scope:[uctoa]  from uctoa::@1
  [341] (byte) uctoa::digit_value#0 ← *((const byte*) RADIX_HEXADECIMAL_VALUES_CHAR + (byte) uctoa::digit#2)
  [342] if((byte) 0!=(byte) uctoa::started#2) goto uctoa::@5
  to:uctoa::@7
uctoa::@7: scope:[uctoa]  from uctoa::@2
  [343] if((byte) uctoa::value#2>=(byte) uctoa::digit_value#0) goto uctoa::@5
  to:uctoa::@4
uctoa::@4: scope:[uctoa]  from uctoa::@6 uctoa::@7
  [344] (byte*) uctoa::buffer#14 ← phi( uctoa::@7/(byte*) uctoa::buffer#11 uctoa::@6/(byte*) uctoa::buffer#4 )
  [344] (byte) uctoa::started#4 ← phi( uctoa::@7/(byte) uctoa::started#2 uctoa::@6/(byte) 1 )
  [344] (byte) uctoa::value#6 ← phi( uctoa::@7/(byte) uctoa::value#2 uctoa::@6/(byte) uctoa::value#0 )
  [345] (byte) uctoa::digit#1 ← ++ (byte) uctoa::digit#2
  to:uctoa::@1
uctoa::@5: scope:[uctoa]  from uctoa::@2 uctoa::@7
  [346] (byte*) uctoa_append::buffer#0 ← (byte*) uctoa::buffer#11
  [347] (byte) uctoa_append::value#0 ← (byte) uctoa::value#2
  [348] (byte) uctoa_append::sub#0 ← (byte) uctoa::digit_value#0
  [349] call uctoa_append 
  [350] (byte) uctoa_append::return#0 ← (byte) uctoa_append::value#2
  to:uctoa::@6
uctoa::@6: scope:[uctoa]  from uctoa::@5
  [351] (byte) uctoa::value#0 ← (byte) uctoa_append::return#0
  [352] (byte*) uctoa::buffer#4 ← ++ (byte*) uctoa::buffer#11
  to:uctoa::@4

(byte()) uctoa_append((byte*) uctoa_append::buffer , (byte) uctoa_append::value , (byte) uctoa_append::sub)
uctoa_append: scope:[uctoa_append]  from uctoa::@5
  [353] phi()
  to:uctoa_append::@1
uctoa_append::@1: scope:[uctoa_append]  from uctoa_append uctoa_append::@2
  [354] (byte) uctoa_append::digit#2 ← phi( uctoa_append/(byte) 0 uctoa_append::@2/(byte) uctoa_append::digit#1 )
  [354] (byte) uctoa_append::value#2 ← phi( uctoa_append/(byte) uctoa_append::value#0 uctoa_append::@2/(byte) uctoa_append::value#1 )
  [355] if((byte) uctoa_append::value#2>=(byte) uctoa_append::sub#0) goto uctoa_append::@2
  to:uctoa_append::@3
uctoa_append::@3: scope:[uctoa_append]  from uctoa_append::@1
  [356] *((byte*) uctoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) uctoa_append::digit#2)
  to:uctoa_append::@return
uctoa_append::@return: scope:[uctoa_append]  from uctoa_append::@3
  [357] return 
  to:@return
uctoa_append::@2: scope:[uctoa_append]  from uctoa_append::@1
  [358] (byte) uctoa_append::digit#1 ← ++ (byte) uctoa_append::digit#2
  [359] (byte) uctoa_append::value#1 ← (byte) uctoa_append::value#2 - (byte) uctoa_append::sub#0
  to:uctoa_append::@1

(byte()) legal((byte) legal::row , (byte) legal::column)
legal: scope:[legal]  from queen::@2
  [360] phi()
  to:legal::@1
legal::@1: scope:[legal]  from legal legal::@3
  [361] (byte) legal::i#2 ← phi( legal/(byte) 1 legal::@3/(byte) legal::i#1 )
  [362] (byte~) legal::$0 ← (byte) legal::row#0 - (byte) 1
  [363] if((byte) legal::i#2<=(byte~) legal::$0) goto legal::@2
  to:legal::@return
legal::@return: scope:[legal]  from legal::@1 legal::@2 legal::@6
  [364] (byte) legal::return#4 ← phi( legal::@1/(byte) 1 legal::@2/(byte) 0 legal::@6/(byte) 0 )
  [365] return 
  to:@return
legal::@2: scope:[legal]  from legal::@1
  [366] if(*((const byte*) board + (byte) legal::i#2)==(byte) legal::column#0) goto legal::@return
  to:legal::@4
legal::@4: scope:[legal]  from legal::@2
  [367] (byte) diff::a#0 ← *((const byte*) board + (byte) legal::i#2)
  [368] (byte) diff::b#0 ← (byte) legal::column#0
  [369] call diff 
  [370] (byte) diff::return#0 ← (byte) diff::return#4
  to:legal::@5
legal::@5: scope:[legal]  from legal::@4
  [371] (byte~) legal::$3 ← (byte) diff::return#0
  [372] (byte) diff::a#1 ← (byte) legal::i#2
  [373] (byte) diff::b#1 ← (byte) legal::row#0
  [374] call diff 
  [375] (byte) diff::return#1 ← (byte) diff::return#4
  to:legal::@6
legal::@6: scope:[legal]  from legal::@5
  [376] (byte~) legal::$4 ← (byte) diff::return#1
  [377] if((byte~) legal::$3!=(byte~) legal::$4) goto legal::@3
  to:legal::@return
legal::@3: scope:[legal]  from legal::@6
  [378] (byte) legal::i#1 ← ++ (byte) legal::i#2
  to:legal::@1

(byte()) diff((byte) diff::a , (byte) diff::b)
diff: scope:[diff]  from legal::@4 legal::@5
  [379] (byte) diff::b#2 ← phi( legal::@4/(byte) diff::b#0 legal::@5/(byte) diff::b#1 )
  [379] (byte) diff::a#2 ← phi( legal::@4/(byte) diff::a#0 legal::@5/(byte) diff::a#1 )
  [380] if((byte) diff::a#2<(byte) diff::b#2) goto diff::@1
  to:diff::@2
diff::@2: scope:[diff]  from diff
  [381] (byte) diff::return#3 ← (byte) diff::a#2 - (byte) diff::b#2
  to:diff::@return
diff::@return: scope:[diff]  from diff::@1 diff::@2
  [382] (byte) diff::return#4 ← phi( diff::@1/(byte) diff::return#2 diff::@2/(byte) diff::return#3 )
  [383] return 
  to:@return
diff::@1: scope:[diff]  from diff
  [384] (byte) diff::return#2 ← (byte) diff::b#2 - (byte) diff::a#2
  to:diff::@return
