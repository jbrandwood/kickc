(label) @1
(label) @2
(label) @begin
(label) @end
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(const byte*) main::str[(byte) 8]  = (byte*) "Lone 1
"
(const byte*) main::str1[(byte) 8]  = (byte*) "Lone 2
"
(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
(label) memcpy::@1
(label) memcpy::@2
(label) memcpy::@return
(void*) memcpy::destination
(const void*) memcpy::destination#0 destination = (void*) 1024
(byte*) memcpy::dst
(byte*) memcpy::dst#1 dst zp[2]:6 1.00000001E8
(byte*) memcpy::dst#2 dst zp[2]:6 1.00000001E8
(word) memcpy::num
(const word) memcpy::num#0 num = (word)(number) $28*(number) $19-(number) $28
(void*) memcpy::return
(void*) memcpy::source
(const void*) memcpy::source#0 source = (void*)(number) $400+(number) $28
(byte*) memcpy::src
(byte*) memcpy::src#1 src zp[2]:4 2.00000002E8
(byte*) memcpy::src#2 src zp[2]:4 1.00000001E8
(byte*) memcpy::src_end
(const byte*) memcpy::src_end#0 src_end = (byte*)(const void*) memcpy::source#0+(const word) memcpy::num#0
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@3
(label) memset::@return
(byte) memset::c
(byte) memset::c#4 reg byte x 1.2500000125E7
(byte*) memset::dst
(byte*) memset::dst#1 dst zp[2]:6 2.00000002E8
(byte*) memset::dst#2 dst zp[2]:6 1.3366666833333334E8
(byte*) memset::dst#4 dst zp[2]:6 2000002.0
(byte*) memset::end
(byte*) memset::end#0 end zp[2]:4 1.6833333666666668E7
(word) memset::num
(word) memset::num#2 num zp[2]:4 1000001.0
(void*) memset::return
(void*) memset::str
(void*) memset::str#3 str zp[2]:6
(const byte*) printf_buffer_number::digits[(number) $b]  = { fill( $b, 0) }
(byte) printf_buffer_number::sign
(void()) printf_char((byte) printf_char::ch)
(label) printf_char::@1
(label) printf_char::@return
(byte) printf_char::ch
(byte) printf_char::ch#0 reg byte a 11002.0
(void()) printf_cls()
(label) printf_cls::@1
(label) printf_cls::@return
(byte*) printf_cursor_ptr loadstore zp[2]:10 6252.749999999998
(byte) printf_cursor_x loadstore zp[1]:8 2003.6333333333334
(byte) printf_cursor_y loadstore zp[1]:9 8295.365853658537
(byte) printf_format_number::justify_left
(byte) printf_format_number::min_length
(byte) printf_format_number::radix
(byte) printf_format_number::sign_always
(byte) printf_format_number::upper_case
(byte) printf_format_number::zero_padding
(byte) printf_format_string::justify_left
(byte) printf_format_string::min_length
(void()) printf_ln()
(byte*~) printf_ln::$0 zp[2]:10 20002.0
(byte*~) printf_ln::$1 zp[2]:10 20002.0
(label) printf_ln::@return
(void()) printf_scroll()
(byte*~) printf_scroll::$4 zp[2]:10 200002.0
(label) printf_scroll::@1
(label) printf_scroll::@2
(label) printf_scroll::@3
(label) printf_scroll::@return
(void()) printf_str((byte*) printf_str::str)
(label) printf_str::@1
(label) printf_str::@2
(label) printf_str::@3
(label) printf_str::@4
(label) printf_str::@5
(label) printf_str::@return
(byte) printf_str::ch
(byte) printf_str::ch#0 reg byte a 1001.0
(byte*) printf_str::str
(byte*) printf_str::str#0 str zp[2]:2 429.0
(byte*) printf_str::str#3 str zp[2]:2 2052.5
(byte*) printf_str::str#5 str zp[2]:2 101.0

zp[2]:2 [ printf_str::str#3 printf_str::str#5 printf_str::str#0 ]
reg byte x [ memset::c#4 ]
zp[2]:4 [ memcpy::src#2 memcpy::src#1 memset::num#2 memset::end#0 ]
zp[2]:6 [ memcpy::dst#2 memcpy::dst#1 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ]
zp[1]:8 [ printf_cursor_x ]
zp[1]:9 [ printf_cursor_y ]
zp[2]:10 [ printf_cursor_ptr printf_scroll::$4 printf_ln::$0 printf_ln::$1 ]
reg byte a [ printf_str::ch#0 ]
reg byte a [ printf_char::ch#0 ]
