@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  asm { sei  }
  [5] *((const nomodify byte*) BORDERCOL) ← (const nomodify byte) BLACK
  [6] *((const nomodify byte*) BGCOL) ← (const nomodify byte) BLACK
  [7] call fillscreen 
  to:main::@4
main::@4: scope:[main]  from main
  [8] phi()
  [9] call fillscreen 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [10] phi()
  [11] call fillscreen 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [12] phi()
  [13] call fillscreen 
  to:main::@7
main::@7: scope:[main]  from main::@6
  [14] phi()
  [15] call sid_rnd_init 
  to:main::@8
main::@8: scope:[main]  from main::@7
  [16] phi()
  [17] call makecharset 
  to:main::@1
main::@1: scope:[main]  from main::@3 main::@8
  [18] phi()
  [19] call fire 
  to:main::toD0181
main::toD0181: scope:[main]  from main::@1
  [20] phi()
  to:main::@2
main::@2: scope:[main]  from main::toD0181
  [21] *((const nomodify byte*) D018) ← (const byte) main::toD0181_return#0
  [22] call fire 
  to:main::toD0182
main::toD0182: scope:[main]  from main::@2
  [23] phi()
  to:main::@3
main::@3: scope:[main]  from main::toD0182
  [24] *((const nomodify byte*) D018) ← (const byte) main::toD0182_return#0
  to:main::@1

(void()) fire((byte*) fire::screenbase)
fire: scope:[fire]  from main::@1 main::@2
  [25] (byte*) fire::screen#0 ← phi( main::@1/(const byte*) SCREEN1 main::@2/(const byte*) SCREEN2 )
  [26] (byte*) fire::screen#11 ← (byte*) fire::screen#0
  to:fire::@1
fire::@1: scope:[fire]  from fire fire::@4
  [27] (byte*) fire::screen#4 ← phi( fire/(byte*) fire::screen#11 fire::@4/(byte*) fire::screen#2 )
  [27] (byte*) fire::buffer#4 ← phi( fire/(const byte*) BUFFER fire::@4/(byte*) fire::buffer#2 )
  [28] if((byte*) fire::buffer#4!=(const byte*) BUFFER+(word)(number) $18*(number) $28) goto fire::@2
  to:fire::@3
fire::@3: scope:[fire]  from fire::@1
  [29] (byte*) fire::screen#1 ← (byte*) fire::screen#0 + (word)(number) $18*(number) $28
  to:fire::@6
fire::@6: scope:[fire]  from fire::@3 fire::@8
  [30] (byte*) fire::screen#10 ← phi( fire::@8/(byte*) fire::screen#3 fire::@3/(byte*) fire::screen#1 )
  [30] (byte*) fire::buffer#10 ← phi( fire::@8/(byte*) fire::buffer#3 fire::@3/(const byte*) BUFFER+(word)(number) $18*(number) $28 )
  [31] if((byte*) fire::buffer#10!=(const byte*) BUFFER+(word)(number) $19*(number) $28) goto fire::@7
  to:fire::@return
fire::@return: scope:[fire]  from fire::@6
  [32] return 
  to:@return
fire::@7: scope:[fire]  from fire::@6
  [33] phi()
  [34] call sid_rnd 
  [35] (byte) sid_rnd::return#2 ← (byte) sid_rnd::return#0
  to:fire::@8
fire::@8: scope:[fire]  from fire::@7
  [36] (byte~) fire::$12 ← (byte) sid_rnd::return#2
  [37] (byte~) fire::$13 ← (byte~) fire::$12 >> (byte) 4
  [38] (byte~) fire::$14 ← (byte) $30 + (byte~) fire::$13
  [39] *((byte*) fire::buffer#10) ← (byte~) fire::$14
  [40] *((byte*) fire::screen#10) ← *((byte*) fire::buffer#10)
  [41] (byte*) fire::screen#3 ← ++ (byte*) fire::screen#10
  [42] (byte*) fire::buffer#3 ← ++ (byte*) fire::buffer#10
  to:fire::@6
fire::@2: scope:[fire]  from fire::@1
  [43] (byte~) fire::$4 ← *((byte*) fire::buffer#4 + (byte)(number) $28-(number) 1) + *((byte*) fire::buffer#4 + (byte)(number) $28-(number) 1)
  [44] (byte~) fire::$5 ← (byte~) fire::$4 + *((byte*) fire::buffer#4 + (byte) $28)
  [45] (byte~) fire::$6 ← (byte~) fire::$5 + *((byte*) fire::buffer#4 + (byte) $29)
  [46] (byte) fire::c#0 ← (byte~) fire::$6 >> (byte) 2
  [47] if((byte) fire::c#0<(byte) 2+(byte) 1) goto fire::@4
  to:fire::@5
fire::@5: scope:[fire]  from fire::@2
  [48] (byte) fire::c#1 ← (byte) fire::c#0 - (byte) 3
  to:fire::@4
fire::@4: scope:[fire]  from fire::@2 fire::@5
  [49] (byte) fire::c#2 ← phi( fire::@2/(byte) fire::c#0 fire::@5/(byte) fire::c#1 )
  [50] *((byte*) fire::buffer#4) ← (byte) fire::c#2
  [51] *((byte*) fire::screen#4) ← *((byte*) fire::buffer#4)
  [52] (byte*) fire::screen#2 ← ++ (byte*) fire::screen#4
  [53] (byte*) fire::buffer#2 ← ++ (byte*) fire::buffer#4
  to:fire::@1

(byte()) sid_rnd()
sid_rnd: scope:[sid_rnd]  from fire::@7
  [54] (byte) sid_rnd::return#0 ← *((const nomodify byte*) SID_VOICE3_OSC)
  to:sid_rnd::@return
sid_rnd::@return: scope:[sid_rnd]  from sid_rnd
  [55] return 
  to:@return

(void()) makecharset((byte*) makecharset::charset)
makecharset: scope:[makecharset]  from main::@8
  [56] phi()
  to:makecharset::@1
makecharset::@1: scope:[makecharset]  from makecharset makecharset::@2
  [57] (byte*) makecharset::font#2 ← phi( makecharset/(const byte*) CHARSET makecharset::@2/(byte*) makecharset::font#1 )
  [58] if((byte*) makecharset::font#2!=(const byte*) CHARSET+(byte)(number) 1*(number) 8) goto makecharset::@2
  to:makecharset::@3
makecharset::@3: scope:[makecharset]  from makecharset::@1 makecharset::@4
  [59] (byte*) makecharset::font1#2 ← phi( makecharset::@1/(const byte*) CHARSET+(word)(number) $40*(number) 8 makecharset::@4/(byte*) makecharset::font1#1 )
  [60] if((byte*) makecharset::font1#2!=(const byte*) CHARSET+(word)(number) $100*(number) 8) goto makecharset::@4
  to:makecharset::@5
makecharset::@5: scope:[makecharset]  from makecharset::@3 makecharset::@7
  [61] (byte) makecharset::c#2 ← phi( makecharset::@7/(byte) makecharset::c#1 makecharset::@3/(byte) 0 )
  [62] if((byte) makecharset::c#2<(byte) $40) goto makecharset::@6
  to:makecharset::@return
makecharset::@return: scope:[makecharset]  from makecharset::@5
  [63] return 
  to:@return
makecharset::@6: scope:[makecharset]  from makecharset::@10 makecharset::@5
  [64] (byte) makecharset::bc#6 ← phi( makecharset::@5/(byte) 0 makecharset::@10/(byte) makecharset::bc#3 )
  [64] (byte) makecharset::i#2 ← phi( makecharset::@5/(byte) 0 makecharset::@10/(byte) makecharset::i#1 )
  [65] if((byte) makecharset::i#2<(byte) 8) goto makecharset::@8
  to:makecharset::@7
makecharset::@7: scope:[makecharset]  from makecharset::@6
  [66] (byte) makecharset::c#1 ← ++ (byte) makecharset::c#2
  to:makecharset::@5
makecharset::@8: scope:[makecharset]  from makecharset::@11 makecharset::@6
  [67] (byte) makecharset::b#2 ← phi( makecharset::@6/(byte) 0 makecharset::@11/(byte) makecharset::b#6 )
  [67] (byte) makecharset::bc#3 ← phi( makecharset::@6/(byte) makecharset::bc#6 makecharset::@11/(byte) makecharset::bc#7 )
  [67] (byte) makecharset::ii#2 ← phi( makecharset::@6/(byte) 0 makecharset::@11/(byte) makecharset::ii#1 )
  [68] if((byte) makecharset::ii#2<(byte) 8) goto makecharset::@9
  to:makecharset::@10
makecharset::@10: scope:[makecharset]  from makecharset::@8
  [69] (word~) makecharset::$15 ← (word)(byte) makecharset::c#2
  [70] (word~) makecharset::$16 ← (word~) makecharset::$15 << (byte) 3
  [71] (word~) makecharset::$17 ← (word~) makecharset::$16 + (byte) makecharset::i#2
  [72] (byte*~) makecharset::$18 ← (const byte*) CHARSET+(byte)(number) 1*(number) 8 + (word~) makecharset::$17
  [73] *((byte*~) makecharset::$18) ← (byte) makecharset::b#2
  [74] (byte) makecharset::i#1 ← ++ (byte) makecharset::i#2
  to:makecharset::@6
makecharset::@9: scope:[makecharset]  from makecharset::@8
  [75] (byte) makecharset::bc#1 ← (byte) makecharset::bc#3 + (byte) makecharset::c#2
  [76] if((byte) makecharset::bc#1<(byte) $3f+(byte) 1) goto makecharset::@11
  to:makecharset::@12
makecharset::@12: scope:[makecharset]  from makecharset::@9
  [77] (byte) makecharset::bc#2 ← (byte) makecharset::bc#1 - (byte) $40
  [78] (byte~) makecharset::$11 ← (byte) makecharset::i#2 & (byte) 1
  [79] (byte~) makecharset::$12 ← (byte) makecharset::ii#2 + (byte~) makecharset::$11
  [80] (byte~) makecharset::$13 ← (byte~) makecharset::$12 & (byte) 7
  [81] (byte) makecharset::b#1 ← (byte) makecharset::b#2 + *((const to_nomodify byte*) makecharset::bittab + (byte~) makecharset::$13)
  to:makecharset::@11
makecharset::@11: scope:[makecharset]  from makecharset::@12 makecharset::@9
  [82] (byte) makecharset::b#6 ← phi( makecharset::@9/(byte) makecharset::b#2 makecharset::@12/(byte) makecharset::b#1 )
  [82] (byte) makecharset::bc#7 ← phi( makecharset::@9/(byte) makecharset::bc#1 makecharset::@12/(byte) makecharset::bc#2 )
  [83] (byte) makecharset::ii#1 ← ++ (byte) makecharset::ii#2
  to:makecharset::@8
makecharset::@4: scope:[makecharset]  from makecharset::@3
  [84] *((byte*) makecharset::font1#2) ← (byte) $ff
  [85] (byte*) makecharset::font1#1 ← ++ (byte*) makecharset::font1#2
  to:makecharset::@3
makecharset::@2: scope:[makecharset]  from makecharset::@1
  [86] *((byte*) makecharset::font#2) ← (byte) 0
  [87] (byte*) makecharset::font#1 ← ++ (byte*) makecharset::font#2
  to:makecharset::@1

(void()) sid_rnd_init()
sid_rnd_init: scope:[sid_rnd_init]  from main::@7
  [88] *((const nomodify word*) SID_VOICE3_FREQ) ← (word) $ffff
  [89] *((const nomodify byte*) SID_VOICE3_CONTROL) ← (const nomodify byte) SID_CONTROL_NOISE
  to:sid_rnd_init::@return
sid_rnd_init::@return: scope:[sid_rnd_init]  from sid_rnd_init
  [90] return 
  to:@return

(void()) fillscreen((byte*) fillscreen::screen , (byte) fillscreen::fill)
fillscreen: scope:[fillscreen]  from main main::@4 main::@5 main::@6
  [91] (byte*) fillscreen::screen#6 ← phi( main/(const byte*) BUFFER main::@5/(const byte*) SCREEN2 main::@6/(const nomodify byte*) COLS main::@4/(const byte*) SCREEN1 )
  [91] (byte) fillscreen::fill#5 ← phi( main/(byte) 0 main::@5/(byte) 0 main::@6/(const nomodify byte) YELLOW main::@4/(byte) 0 )
  to:fillscreen::@1
fillscreen::@1: scope:[fillscreen]  from fillscreen fillscreen::@1
  [92] (word) fillscreen::i#2 ← phi( fillscreen/(word) 0 fillscreen::@1/(word) fillscreen::i#1 )
  [92] (byte*) fillscreen::screen#5 ← phi( fillscreen/(byte*) fillscreen::screen#6 fillscreen::@1/(byte*) fillscreen::screen#4 )
  [93] *((byte*) fillscreen::screen#5) ← (byte) fillscreen::fill#5
  [94] (byte*) fillscreen::screen#4 ← ++ (byte*) fillscreen::screen#5
  [95] (word) fillscreen::i#1 ← ++ (word) fillscreen::i#2
  [96] if((word) fillscreen::i#1!=(word) $3e8) goto fillscreen::@1
  to:fillscreen::@return
fillscreen::@return: scope:[fillscreen]  from fillscreen::@1
  [97] return 
  to:@return
