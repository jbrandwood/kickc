__constant char BINARY = 2
__constant char * const COLORRAM = (char *) 55296
__constant char DECIMAL = $a
__constant char * const DEFAULT_SCREEN = (char *) 1024
__constant char DIGITS[] = "0123456789abcdef"z
__constant char HEXADECIMAL = $10
__constant const char LIGHT_BLUE = $e
__constant char OCTAL = 8
__constant char OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
__constant char RADIX::BINARY = 2
__constant char RADIX::DECIMAL = $a
__constant char RADIX::HEXADECIMAL = $10
__constant char RADIX::OCTAL = 8
__constant char RADIX_BINARY_VALUES_CHAR[] = { $80, $40, $20, $10, 8, 4, 2 }
__constant char RADIX_DECIMAL_VALUES_CHAR[] = { $64, $a }
__constant unsigned int RADIX_HEXADECIMAL_VALUES[] = { $1000, $100, $10 }
__constant char RADIX_HEXADECIMAL_VALUES_CHAR[] = { $10 }
__constant char RADIX_OCTAL_VALUES_CHAR[] = { $40, 8 }
__constant char SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = $c
__constant unsigned int STACK_BASE = $103
void __start()
void clrscr()
char clrscr::c
char clrscr::c#1 // reg byte y 20002.0
char clrscr::c#2 // reg byte y 12501.25
char clrscr::l
char clrscr::l#1 // reg byte x 2002.0
char clrscr::l#2 // reg byte x 333.6666666666667
char *clrscr::line_cols
char *clrscr::line_cols#1 // line_cols zp[2]:9 1001.0
char *clrscr::line_cols#5 // line_cols zp[2]:9 1500.375
char *clrscr::line_text
char *clrscr::line_text#1 // line_text zp[2]:2 667.3333333333334
char *clrscr::line_text#5 // line_text zp[2]:2 1714.7142857142858
void conio_c64_init()
__constant char * const conio_c64_init::BASIC_CURSOR_LINE = (char *) 214
char conio_c64_init::line
char conio_c64_init::line#0 // reg byte x 11.0
char conio_c64_init::line#2 // reg byte x 22.0
__loadstore char conio_cursor_x // zp[1]:29 63.0
__loadstore char conio_cursor_y // zp[1]:28 79.27906976744185
__loadstore char *conio_line_color // zp[2]:30 58.78048780487805
__loadstore char *conio_line_text // zp[2]:32 57.38095238095238
__stackcall void cputc(char c)
__constant char cputc::OFFSET_STACK_C = 0
char cputc::c
char cputc::c#0 // reg byte a 3.0
void cputln()
void cscroll()
void gotoxy(char x , char y)
char *gotoxy::$5 // zp[2]:26 202.0
char *gotoxy::$6 // zp[2]:21 202.0
unsigned int gotoxy::$7 // zp[2]:21 151.5
unsigned int gotoxy::$8 // zp[2]:24 202.0
unsigned int gotoxy::$9 // zp[2]:21 202.0
unsigned int gotoxy::line_offset
unsigned int gotoxy::line_offset#0 // line_offset zp[2]:21 101.0
char gotoxy::x
__constant char gotoxy::x#2 = 0 // x
char gotoxy::y
char gotoxy::y#2 // reg byte x 71.0
char gotoxy::y#4 // reg byte x 67.33333333333333
void main()
void * memcpy(void *destination , void *source , unsigned int num)
void *memcpy::destination
void *memcpy::destination#2 // destination zp[2]:12
char *memcpy::dst
char *memcpy::dst#1 // dst zp[2]:12 100001.0
char *memcpy::dst#2 // dst zp[2]:12 103334.66666666666
char *memcpy::dst#4 // dst zp[2]:12 20002.0
unsigned int memcpy::num
void *memcpy::return
void *memcpy::source
void *memcpy::source#2 // source zp[2]:7
char *memcpy::src
char *memcpy::src#1 // src zp[2]:7 200002.0
char *memcpy::src#2 // src zp[2]:7 102501.25
char *memcpy::src#4 // src zp[2]:7 10001.0
char *memcpy::src_end
char *memcpy::src_end#0 // src_end zp[2]:19 13750.25
void * memset(void *str , char c , unsigned int num)
char memset::c
char memset::c#4 // reg byte x 14285.857142857143
char *memset::dst
char *memset::dst#1 // dst zp[2]:7 200002.0
char *memset::dst#2 // dst zp[2]:7 136668.3333333333
char *memset::dst#4 // dst zp[2]:7 20002.0
char *memset::end
char *memset::end#0 // end zp[2]:12 18333.666666666664
unsigned int memset::num
void *memset::return
void *memset::str
void *memset::str#3 // str zp[2]:7
__loadstore struct printf_buffer_number printf_buffer = {} // mem[12]
void printf_number_buffer(void (*putc)(char) , char buffer_sign , char *buffer_digits , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
unsigned int printf_number_buffer::$19 // zp[2]:4 1001.0
struct printf_buffer_number printf_number_buffer::buffer
char *printf_number_buffer::buffer_digits
char printf_number_buffer::buffer_sign
char printf_number_buffer::buffer_sign#0 // buffer_sign zp[1]:16 202.0
char printf_number_buffer::buffer_sign#1 // buffer_sign zp[1]:16 101.0
char printf_number_buffer::buffer_sign#10 // buffer_sign zp[1]:16 152.61904761904762
struct printf_format_number printf_number_buffer::format
char printf_number_buffer::format_justify_left
char printf_number_buffer::format_justify_left#10 // format_justify_left zp[1]:15 60.666666666666664
char printf_number_buffer::format_min_length
char printf_number_buffer::format_min_length#2 // reg byte x 100.1
char printf_number_buffer::format_radix
char printf_number_buffer::format_sign_always
char printf_number_buffer::format_upper_case
char printf_number_buffer::format_upper_case#10 // format_upper_case zp[1]:18 35.75
char printf_number_buffer::format_zero_padding
char printf_number_buffer::format_zero_padding#1 // format_zero_padding zp[1]:23 202.0
char printf_number_buffer::format_zero_padding#10 // format_zero_padding zp[1]:23 91.29411764705883
signed char printf_number_buffer::len
signed char printf_number_buffer::len#0 // reg byte y 1501.5
signed char printf_number_buffer::len#1 // reg byte y 2002.0
signed char printf_number_buffer::len#2 // reg byte y 3003.0
signed char printf_number_buffer::padding
signed char printf_number_buffer::padding#1 // padding zp[1]:6 1001.0
signed char printf_number_buffer::padding#10 // padding zp[1]:6 166.83333333333334
void (*printf_number_buffer::putc)(char)
void (*printf_number_buffer::putc#10)(char) // putc zp[2]:2 111.22222222222223
void printf_padding(void (*putc)(char) , char pad , char length)
char printf_padding::i
char printf_padding::i#1 // i zp[1]:11 200002.0
char printf_padding::i#2 // i zp[1]:11 100001.0
char printf_padding::length
char printf_padding::length#0 // length zp[1]:14 2002.0
char printf_padding::length#1 // length zp[1]:14 2002.0
char printf_padding::length#2 // length zp[1]:14 2002.0
char printf_padding::length#4 // length zp[1]:14 20600.8
char printf_padding::pad
char printf_padding::pad#5 // pad zp[1]:17 16666.833333333332
void (*printf_padding::putc)(char)
void (*printf_padding::putc#0)(char) // putc zp[2]:2 1001.0
void (*printf_padding::putc#1)(char) // putc zp[2]:2 1001.0
void (*printf_padding::putc#2)(char) // putc zp[2]:2 1001.0
void (*printf_padding::putc#5)(char) // putc zp[2]:2 30030.0
void printf_schar(void (*putc)(char) , signed char value , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
struct printf_format_number printf_schar::format
char printf_schar::format_justify_left
char printf_schar::format_min_length
char printf_schar::format_radix
char printf_schar::format_radix#2 // reg byte y 11.222222222222221
char printf_schar::format_sign_always
char printf_schar::format_sign_always#2 // format_sign_always zp[1]:15 33.666666666666664
char printf_schar::format_upper_case
char printf_schar::format_zero_padding
char printf_schar::format_zero_padding#2 // format_zero_padding zp[1]:23 8.416666666666666
void (*printf_schar::putc)(char)
char printf_schar::uvalue
signed char printf_schar::value
signed char printf_schar::value#0 // reg byte x 101.0
signed char printf_schar::value#3 // reg byte x 80.8
signed char printf_schar::value#5 // reg byte x 303.0
void printf_str(void (*putc)(char) , const char *s)
char printf_str::c
char printf_str::c#1 // reg byte a 100001.0
void (*printf_str::putc)(char)
void (*printf_str::putc#0)(char) // putc zp[2]:2 10010.0
const char *printf_str::s
const char *printf_str::s#0 // s zp[2]:4 100001.0
const char *printf_str::s#2 // s zp[2]:4 150001.5
void printf_uint(void (*putc)(char) , unsigned int uvalue , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
struct printf_format_number printf_uint::format
char printf_uint::format_justify_left
__constant char printf_uint::format_justify_left#0 = 1 // format_justify_left
char printf_uint::format_min_length
__constant char printf_uint::format_min_length#0 = $a // format_min_length
char printf_uint::format_radix
char printf_uint::format_sign_always
char printf_uint::format_upper_case
__constant char printf_uint::format_upper_case#0 = 1 // format_upper_case
char printf_uint::format_zero_padding
__constant char printf_uint::format_zero_padding#0 = 0 // format_zero_padding
void (*printf_uint::putc)(char)
__constant void (*printf_uint::putc#0)(char) = &cputc // putc
unsigned int printf_uint::uvalue
__constant unsigned int printf_uint::uvalue#0 = $d80 // uvalue
unsigned int strlen(char *str)
unsigned int strlen::len
unsigned int strlen::len#1 // len zp[2]:4 100001.0
unsigned int strlen::len#2 // len zp[2]:4 50250.75
unsigned int strlen::return
unsigned int strlen::return#2 // return zp[2]:4 2002.0
char *strlen::str
char *strlen::str#0 // str zp[2]:9 200002.0
char *strlen::str#2 // str zp[2]:9 100001.0
char * strupr(char *str)
char strupr::$0 // reg byte a 200002.0
char *strupr::return
char *strupr::src
char *strupr::src#1 // src zp[2]:4 200002.0
char *strupr::src#2 // src zp[2]:4 71429.28571428571
char *strupr::str
__constant char *strupr::str#0 = (char *)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS // str
char toupper(char ch)
char toupper::ch
char toupper::ch#0 // reg byte a 1700002.0000000002
char toupper::return
char toupper::return#0 // reg byte a 2000002.0
char toupper::return#2 // reg byte a 1033334.6666666667
char toupper::return#3 // reg byte a 200002.0
void uctoa(char value , char *buffer , char radix)
char uctoa::$4 // reg byte a 20002.0
char *uctoa::buffer
char *uctoa::buffer#11 // buffer zp[2]:9 3231.230769230769
char *uctoa::buffer#14 // buffer zp[2]:9 15001.5
char *uctoa::buffer#3 // buffer zp[2]:9 2002.0
char *uctoa::buffer#4 // buffer zp[2]:9 20002.0
char uctoa::digit
char uctoa::digit#1 // digit zp[1]:16 20002.0
char uctoa::digit#2 // digit zp[1]:16 2857.4285714285716
char uctoa::digit_value
char uctoa::digit_value#0 // reg byte y 6000.6
char *uctoa::digit_values
char *uctoa::digit_values#8 // digit_values zp[2]:2 625.0625
char uctoa::max_digits
char uctoa::max_digits#7 // max_digits zp[1]:15 625.0625
char uctoa::radix
char uctoa::radix#0 // reg byte y 1026.25
char uctoa::started
char uctoa::started#2 // started zp[1]:18 5000.5
char uctoa::started#4 // started zp[1]:18 10001.0
char uctoa::value
char uctoa::value#0 // reg byte x 10001.0
char uctoa::value#1 // reg byte x 157.42857142857142
char uctoa::value#2 // reg byte x 6000.857142857143
char uctoa::value#6 // reg byte x 15001.5
char uctoa_append(char *buffer , char value , char sub)
char *uctoa_append::buffer
char *uctoa_append::buffer#0 // buffer zp[2]:9 13750.25
char uctoa_append::digit
char uctoa_append::digit#1 // reg byte y 1.0000001E7
char uctoa_append::digit#2 // reg byte y 1.00500015E7
char uctoa_append::return
char uctoa_append::return#0 // reg byte x 20002.0
char uctoa_append::sub
char uctoa_append::sub#0 // sub zp[1]:6 3335000.5
char uctoa_append::value
char uctoa_append::value#0 // reg byte x 36667.33333333333
char uctoa_append::value#1 // reg byte x 2.0000002E7
char uctoa_append::value#2 // reg byte x 5018334.166666666
void utoa(unsigned int value , char *buffer , char radix)
char utoa::$10 // reg byte a 20002.0
char utoa::$11 // reg byte x 2002.0
char *utoa::buffer
char *utoa::buffer#11 // buffer zp[2]:9 3000.4285714285716
char *utoa::buffer#14 // buffer zp[2]:9 15001.5
char *utoa::buffer#3 // buffer zp[2]:9 2002.0
char *utoa::buffer#4 // buffer zp[2]:9 20002.0
char utoa::digit
char utoa::digit#1 // digit zp[1]:15 20002.0
char utoa::digit#2 // digit zp[1]:15 2857.4285714285716
unsigned int utoa::digit_value
unsigned int utoa::digit_value#0 // digit_value zp[2]:4 6000.6
unsigned int *utoa::digit_values
char utoa::max_digits
__constant char utoa::max_digits#2 = 4 // max_digits
char utoa::radix
char utoa::started
char utoa::started#2 // reg byte x 5000.5
char utoa::started#4 // reg byte x 10001.0
unsigned int utoa::value
unsigned int utoa::value#0 // value zp[2]:2 10001.0
unsigned int utoa::value#2 // value zp[2]:2 5714.857142857143
unsigned int utoa::value#6 // value zp[2]:2 15001.5
unsigned int utoa_append(char *buffer , unsigned int value , unsigned int sub)
char *utoa_append::buffer
char *utoa_append::buffer#0 // buffer zp[2]:9 13750.25
char utoa_append::digit
char utoa_append::digit#1 // reg byte x 1.0000001E7
char utoa_append::digit#2 // reg byte x 1.00500015E7
unsigned int utoa_append::return
unsigned int utoa_append::return#0 // return zp[2]:2 20002.0
unsigned int utoa_append::sub
unsigned int utoa_append::sub#0 // sub zp[2]:4 3335000.5
unsigned int utoa_append::value
unsigned int utoa_append::value#0 // value zp[2]:2 36667.33333333333
unsigned int utoa_append::value#1 // value zp[2]:2 2.0000002E7
unsigned int utoa_append::value#2 // value zp[2]:2 5018334.166666666

reg byte x [ conio_c64_init::line#2 conio_c64_init::line#0 ]
reg byte x [ gotoxy::y#4 gotoxy::y#2 ]
reg byte x [ clrscr::l#2 clrscr::l#1 ]
reg byte y [ clrscr::c#2 clrscr::c#1 ]
reg byte y [ printf_schar::format_radix#2 ]
zp[1]:23 [ printf_schar::format_zero_padding#2 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_zero_padding#1 ]
reg byte x [ printf_schar::value#5 printf_schar::value#0 printf_schar::value#3 ]
reg byte x [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ]
reg byte x [ printf_number_buffer::format_min_length#2 ]
zp[1]:16 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 uctoa::digit#2 uctoa::digit#1 ]
zp[1]:18 [ printf_number_buffer::format_upper_case#10 uctoa::started#2 uctoa::started#4 ]
reg byte y [ printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 ]
zp[1]:15 [ utoa::digit#2 utoa::digit#1 printf_schar::format_sign_always#2 printf_number_buffer::format_justify_left#10 uctoa::max_digits#7 ]
zp[2]:2 [ utoa::value#2 utoa::value#6 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 printf_number_buffer::putc#10 printf_padding::putc#5 printf_padding::putc#1 printf_padding::putc#2 printf_padding::putc#0 printf_str::putc#0 uctoa::digit_values#8 clrscr::line_text#5 clrscr::line_text#1 ]
reg byte x [ utoa::started#2 utoa::started#4 ]
zp[2]:7 [ memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
reg byte x [ memset::c#4 ]
reg byte x [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
reg byte y [ uctoa_append::digit#2 uctoa_append::digit#1 ]
zp[2]:9 [ strlen::str#2 strlen::str#0 utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 uctoa::buffer#3 uctoa_append::buffer#0 clrscr::line_cols#5 clrscr::line_cols#1 ]
zp[1]:14 [ printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ]
zp[1]:17 [ printf_padding::pad#5 ]
zp[1]:11 [ printf_padding::i#2 printf_padding::i#1 ]
reg byte x [ utoa_append::digit#2 utoa_append::digit#1 ]
reg byte a [ toupper::return#2 toupper::return#0 toupper::ch#0 ]
zp[1]:29 [ conio_cursor_x ]
zp[1]:28 [ conio_cursor_y ]
zp[2]:32 [ conio_line_text ]
zp[2]:30 [ conio_line_color ]
reg byte a [ cputc::c#0 ]
zp[2]:21 [ gotoxy::$7 gotoxy::$9 gotoxy::line_offset#0 gotoxy::$6 ]
zp[2]:24 [ gotoxy::$8 ]
zp[2]:26 [ gotoxy::$5 ]
reg byte y [ uctoa::radix#0 ]
reg byte a [ uctoa::$4 ]
reg byte y [ uctoa::digit_value#0 ]
zp[1]:6 [ uctoa_append::sub#0 printf_number_buffer::padding#10 printf_number_buffer::padding#1 ]
reg byte x [ uctoa_append::return#0 ]
reg byte x [ utoa::$11 ]
reg byte a [ utoa::$10 ]
zp[2]:4 [ utoa::digit_value#0 utoa_append::sub#0 strlen::len#2 strlen::len#1 strlen::return#2 printf_number_buffer::$19 printf_str::s#2 printf_str::s#0 strupr::src#2 strupr::src#1 ]
zp[2]:19 [ memcpy::src_end#0 ]
zp[2]:12 [ memset::end#0 memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
reg byte a [ toupper::return#3 ]
reg byte a [ strupr::$0 ]
reg byte a [ printf_str::c#1 ]
mem[12] [ printf_buffer ]
