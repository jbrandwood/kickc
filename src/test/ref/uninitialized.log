Inlined call call _init 

CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start::@1
  *((const nomodify byte*) SCREEN + (number) 0) ← (const byte) b
  (byte~) main::$0 ← < (const word) w
  *((const nomodify byte*) SCREEN + (number) 2) ← (byte~) main::$0
  (byte~) main::$1 ← > (const word) w
  *((const nomodify byte*) SCREEN + (number) 3) ← (byte~) main::$1
  (byte~) main::$2 ← < (const byte*) ptr
  *((const nomodify byte*) SCREEN + (number) 5) ← (byte)(byte~) main::$2
  (byte~) main::$3 ← > (const byte*) ptr
  *((const nomodify byte*) SCREEN + (number) 5) ← (byte)(byte~) main::$3
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  to:_start::_init1
_start::_init1: scope:[_start]  from _start
  to:_start::@1
_start::@1: scope:[_start]  from _start::_init1
  call main 
  to:_start::@2
_start::@2: scope:[_start]  from _start::@1
  to:_start::@return
_start::@return: scope:[_start]  from _start::@2
  return 
  to:@return

SYMBOL TABLE SSA
(const nomodify byte*) SCREEN = (byte*)(number) $400
(void()) _start()
(label) _start::@1
(label) _start::@2
(label) _start::@return
(label) _start::_init1
(const byte) b = (byte) 0
(void()) main()
(byte~) main::$0
(byte~) main::$1
(byte~) main::$2
(byte~) main::$3
(label) main::@return
(const byte*) ptr = (byte*) 0
(const word) w = (word) 0

Adding number conversion cast (unumber) 0 in *((const nomodify byte*) SCREEN + (number) 0) ← (const byte) b
Adding number conversion cast (unumber) 2 in *((const nomodify byte*) SCREEN + (number) 2) ← (byte~) main::$0
Adding number conversion cast (unumber) 3 in *((const nomodify byte*) SCREEN + (number) 3) ← (byte~) main::$1
Adding number conversion cast (unumber) 5 in *((const nomodify byte*) SCREEN + (number) 5) ← (byte)(byte~) main::$2
Adding number conversion cast (unumber) 5 in *((const nomodify byte*) SCREEN + (number) 5) ← (byte)(byte~) main::$3
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast (byte~) main::$2
Simplifying constant integer cast 5
Simplifying constant integer cast (byte~) main::$3
Simplifying constant integer cast 5
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 5
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [1] (byte~) main::$0 ← < (const word) w
Constant right-side identified [3] (byte~) main::$1 ← > (const word) w
Constant right-side identified [5] (byte~) main::$2 ← < (const byte*) ptr
Constant right-side identified [7] (byte~) main::$3 ← > (const byte*) ptr
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::$0 = <w
Constant (const byte) main::$1 = >w
Constant (const byte) main::$2 = <ptr
Constant (const byte) main::$3 = >ptr
Successful SSA optimization Pass2ConstantIdentification
Simplifying constant evaluating to zero <(const word) w in 
Simplifying constant evaluating to zero >(const word) w in 
Simplifying constant evaluating to zero <(const byte*) ptr in 
Simplifying constant evaluating to zero >(const byte*) ptr in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero SCREEN in [0] *((const nomodify byte*) SCREEN + (byte) 0) ← (const byte) b
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const word) w
Eliminating unused constant (const byte*) ptr
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::_init1
Removing unused procedure block _start::@1
Removing unused procedure block _start::@2
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Constant inlined main::$3 = (byte) 0
Constant inlined main::$1 = (byte) 0
Constant inlined main::$2 = (byte) 0
Constant inlined main::$0 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(SCREEN+2)
Consolidated array index constant in *(SCREEN+3)
Consolidated array index constant in *(SCREEN+5)
Consolidated array index constant in *(SCREEN+5)
Successful SSA optimization Pass2ConstantAdditionElimination
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] *((const nomodify byte*) SCREEN) ← (const byte) b
  [1] *((const nomodify byte*) SCREEN+(byte) 2) ← (byte) 0
  [2] *((const nomodify byte*) SCREEN+(byte) 3) ← (byte) 0
  [3] *((const nomodify byte*) SCREEN+(byte) 5) ← (byte) 0
  [4] *((const nomodify byte*) SCREEN+(byte) 5) ← (byte) 0
  to:main::@return
main::@return: scope:[main]  from main
  [5] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Tests uninitialized values of variables.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const b = 0
  .label SCREEN = $400
  // main
main: {
    // [0] *((const nomodify byte*) SCREEN) ← (const byte) b -- _deref_pbuc1=vbuc2 
    lda #b
    sta SCREEN
    // [1] *((const nomodify byte*) SCREEN+(byte) 2) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SCREEN+2
    // [2] *((const nomodify byte*) SCREEN+(byte) 3) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SCREEN+3
    // [3] *((const nomodify byte*) SCREEN+(byte) 5) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SCREEN+5
    // [4] *((const nomodify byte*) SCREEN+(byte) 5) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SCREEN+5
    jmp __breturn
    // main::@return
  __breturn:
    // [5] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *((const nomodify byte*) SCREEN) ← (const byte) b [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *((const nomodify byte*) SCREEN+(byte) 2) ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] *((const nomodify byte*) SCREEN+(byte) 3) ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] *((const nomodify byte*) SCREEN+(byte) 5) ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [4] *((const nomodify byte*) SCREEN+(byte) 5) ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 39 combination 
Uplifting [] best 39 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests uninitialized values of variables.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const b = 0
  .label SCREEN = $400
  // main
main: {
    // [0] *((const nomodify byte*) SCREEN) ← (const byte) b -- _deref_pbuc1=vbuc2 
    lda #b
    sta SCREEN
    // [1] *((const nomodify byte*) SCREEN+(byte) 2) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SCREEN+2
    // [2] *((const nomodify byte*) SCREEN+(byte) 3) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SCREEN+3
    // [3] *((const nomodify byte*) SCREEN+(byte) 5) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SCREEN+5
    // [4] *((const nomodify byte*) SCREEN+(byte) 5) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SCREEN+5
    jmp __breturn
    // main::@return
  __breturn:
    // [5] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(const nomodify byte*) SCREEN = (byte*) 1024
(const byte) b = (byte) 0
(void()) main()
(label) main::@return



FINAL ASSEMBLER
Score: 30

  // File Comments
// Tests uninitialized values of variables.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const b = 0
  .label SCREEN = $400
  // main
main: {
    // SCREEN[0] = b
    // [0] *((const nomodify byte*) SCREEN) ← (const byte) b -- _deref_pbuc1=vbuc2 
    lda #b
    sta SCREEN
    // SCREEN[2] = <w
    // [1] *((const nomodify byte*) SCREEN+(byte) 2) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SCREEN+2
    // SCREEN[3] = >w
    // [2] *((const nomodify byte*) SCREEN+(byte) 3) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    sta SCREEN+3
    // SCREEN[5] = (byte)<ptr
    // [3] *((const nomodify byte*) SCREEN+(byte) 5) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    sta SCREEN+5
    // SCREEN[5] = (byte)>ptr
    // [4] *((const nomodify byte*) SCREEN+(byte) 5) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    sta SCREEN+5
    // main::@return
    // }
    // [5] return 
    rts
}
  // File Data

