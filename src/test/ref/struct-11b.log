Inlined call call __init 

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  idx#17 = phi( __start::@1/idx#19 )
  print_person::person_id#0 = jesper_id
  print_person::person_initials#0 = jesper_initials
  call print_person 
  to:main::@1
main::@1: scope:[main]  from main
  idx#9 = phi( main/idx#5 )
  idx#0 = idx#9
  print_person::person_id#1 = henry_id
  print_person::person_initials#1 = henry_initials
  call print_person 
  to:main::@2
main::@2: scope:[main]  from main::@1
  idx#10 = phi( main::@1/idx#5 )
  idx#1 = idx#10
  to:main::@return
main::@return: scope:[main]  from main::@2
  idx#11 = phi( main::@2/idx#1 )
  idx#2 = idx#11
  return 
  to:@return

void print_person(dword print_person::person_id , byte* print_person::person_initials)
print_person: scope:[print_person]  from main main::@1
  idx#20 = phi( main/idx#17, main::@1/idx#0 )
  print_person::person_initials#4 = phi( main/print_person::person_initials#0, main::@1/print_person::person_initials#1 )
  print_person::i#0 = 0
  to:print_person::@1
print_person::@1: scope:[print_person]  from print_person print_person::@2
  idx#18 = phi( print_person/idx#20, print_person::@2/idx#3 )
  print_person::i#2 = phi( print_person/print_person::i#0, print_person::@2/print_person::i#1 )
  print_person::person_initials#2 = phi( print_person/print_person::person_initials#4, print_person::@2/print_person::person_initials#3 )
  print_person::$0 = 0 != print_person::person_initials#2[print_person::i#2]
  if(print_person::$0) goto print_person::@2
  to:print_person::@3
print_person::@2: scope:[print_person]  from print_person::@1
  idx#12 = phi( print_person::@1/idx#18 )
  print_person::i#3 = phi( print_person::@1/print_person::i#2 )
  print_person::person_initials#3 = phi( print_person::@1/print_person::person_initials#2 )
  SCREEN[idx#12] = print_person::person_initials#3[print_person::i#3]
  idx#3 = ++ idx#12
  print_person::i#1 = ++ print_person::i#3
  to:print_person::@1
print_person::@3: scope:[print_person]  from print_person::@1
  idx#13 = phi( print_person::@1/idx#18 )
  SCREEN[idx#13] = ' '
  idx#4 = ++ idx#13
  to:print_person::@return
print_person::@return: scope:[print_person]  from print_person::@3
  idx#14 = phi( print_person::@3/idx#4 )
  idx#5 = idx#14
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  idx#6 = 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  idx#19 = phi( __start::__init1/idx#6 )
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  idx#15 = phi( __start::@1/idx#2 )
  idx#7 = idx#15
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  idx#16 = phi( __start::@2/idx#7 )
  idx#8 = idx#16
  return 
  to:@return

SYMBOL TABLE SSA
const nomodify byte* SCREEN = (byte*)$400
void __start()
const dword henry_id = $4466d
const byte* henry_initials[$40]  = "hg"
byte idx
byte idx#0
byte idx#1
byte idx#10
byte idx#11
byte idx#12
byte idx#13
byte idx#14
byte idx#15
byte idx#16
byte idx#17
byte idx#18
byte idx#19
byte idx#2
byte idx#20
byte idx#3
byte idx#4
byte idx#5
byte idx#6
byte idx#7
byte idx#8
byte idx#9
const dword jesper_id = $1b244
const byte* jesper_initials[$40]  = "jg"
void main()
void print_person(dword print_person::person_id , byte* print_person::person_initials)
bool~ print_person::$0
byte print_person::i
byte print_person::i#0
byte print_person::i#1
byte print_person::i#2
byte print_person::i#3
dword print_person::person_id
dword print_person::person_id#0
dword print_person::person_id#1
byte* print_person::person_initials
byte* print_person::person_initials#0
byte* print_person::person_initials#1
byte* print_person::person_initials#2
byte* print_person::person_initials#3
byte* print_person::person_initials#4

Adding number conversion cast (unumber) 0 in print_person::$0 = 0 != print_person::person_initials#2[print_person::i#2]
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias idx#0 = idx#9 
Alias idx#1 = idx#10 idx#11 idx#2 
Alias print_person::person_initials#2 = print_person::person_initials#3 
Alias print_person::i#2 = print_person::i#3 
Alias idx#12 = idx#18 idx#13 
Alias idx#14 = idx#4 idx#5 
Alias idx#19 = idx#6 
Alias idx#15 = idx#7 idx#16 idx#8 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values idx#17 idx#19
Identical Phi Values idx#0 idx#14
Identical Phi Values idx#1 idx#14
Identical Phi Values print_person::person_initials#2 print_person::person_initials#4
Identical Phi Values idx#15 idx#1
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition print_person::$0 [14] if(0!=print_person::person_initials#4[print_person::i#2]) goto print_person::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant print_person::person_id#0 = jesper_id
Constant print_person::person_initials#0 = jesper_initials
Constant print_person::person_id#1 = henry_id
Constant print_person::person_initials#1 = henry_initials
Constant print_person::i#0 = 0
Constant idx#19 = 0
Successful SSA optimization Pass2ConstantIdentification
Eliminating unused constant print_person::person_id#0
Eliminating unused constant print_person::person_id#1
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant jesper_id
Eliminating unused constant henry_id
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings print_person::person_initials#0
Inlining constant with var siblings print_person::person_initials#1
Inlining constant with var siblings print_person::i#0
Inlining constant with var siblings idx#19
Constant inlined print_person::person_initials#1 = henry_initials
Constant inlined idx#19 = 0
Constant inlined print_person::person_initials#0 = jesper_initials
Constant inlined print_person::i#0 = 0
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
CALL GRAPH
Calls in [main] to print_person:1 print_person:3 

Created 4 initial phi equivalence classes
Coalesced [2] idx#21 = idx#14
Coalesced [7] idx#22 = idx#20
Coalesced [16] print_person::i#4 = print_person::i#1
Coalesced [17] idx#23 = idx#3
Coalesced down to 3 phi equivalence classes
Culled Empty Block label main::@2
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  [1] call print_person 
  to:main::@1
main::@1: scope:[main]  from main
  [2] phi()
  [3] call print_person 
  to:main::@return
main::@return: scope:[main]  from main::@1
  [4] return 
  to:@return

void print_person(dword print_person::person_id , byte* print_person::person_initials)
print_person: scope:[print_person]  from main main::@1
  [5] idx#20 = phi( main/0, main::@1/idx#14 )
  [5] print_person::person_initials#4 = phi( main/jesper_initials, main::@1/henry_initials )
  to:print_person::@1
print_person::@1: scope:[print_person]  from print_person print_person::@2
  [6] idx#12 = phi( print_person/idx#20, print_person::@2/idx#3 )
  [6] print_person::i#2 = phi( print_person/0, print_person::@2/print_person::i#1 )
  [7] if(0!=print_person::person_initials#4[print_person::i#2]) goto print_person::@2
  to:print_person::@3
print_person::@3: scope:[print_person]  from print_person::@1
  [8] SCREEN[idx#12] = ' '
  [9] idx#14 = ++ idx#12
  to:print_person::@return
print_person::@return: scope:[print_person]  from print_person::@3
  [10] return 
  to:@return
print_person::@2: scope:[print_person]  from print_person::@1
  [11] SCREEN[idx#12] = print_person::person_initials#4[print_person::i#2]
  [12] idx#3 = ++ idx#12
  [13] print_person::i#1 = ++ print_person::i#2
  to:print_person::@1


VARIABLE REGISTER WEIGHTS
byte idx
byte idx#12 84.0
byte idx#14 3.25
byte idx#20 13.0
byte idx#3 101.0
void main()
void print_person(dword print_person::person_id , byte* print_person::person_initials)
byte print_person::i
byte print_person::i#1 202.0
byte print_person::i#2 101.0
dword print_person::person_id
byte* print_person::person_initials
byte* print_person::person_initials#4 33.666666666666664

Initial phi equivalence classes
[ print_person::person_initials#4 ]
[ print_person::i#2 print_person::i#1 ]
[ idx#12 idx#20 idx#14 idx#3 ]
Complete equivalence classes
[ print_person::person_initials#4 ]
[ print_person::i#2 print_person::i#1 ]
[ idx#12 idx#20 idx#14 idx#3 ]
Allocated zp[2]:2 [ print_person::person_initials#4 ]
Allocated zp[1]:4 [ print_person::i#2 print_person::i#1 ]
Allocated zp[1]:5 [ idx#12 idx#20 idx#14 idx#3 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [7] if(0!=print_person::person_initials#4[print_person::i#2]) goto print_person::@2 [ print_person::person_initials#4 print_person::i#2 idx#12 ] ( print_person:1 [ print_person::person_initials#4 print_person::i#2 idx#12 ] { }  print_person:3 [ print_person::person_initials#4 print_person::i#2 idx#12 ] { { idx#14 = idx#20 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:4 [ print_person::i#2 print_person::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:5 [ idx#12 idx#20 idx#14 idx#3 ]
Statement [8] SCREEN[idx#12] = ' ' [ idx#12 ] ( print_person:1 [ idx#12 ] { }  print_person:3 [ idx#12 ] { { idx#14 = idx#20 } }  ) always clobbers reg byte a 
Statement [11] SCREEN[idx#12] = print_person::person_initials#4[print_person::i#2] [ print_person::person_initials#4 print_person::i#2 idx#12 ] ( print_person:1 [ print_person::person_initials#4 print_person::i#2 idx#12 ] { }  print_person:3 [ print_person::person_initials#4 print_person::i#2 idx#12 ] { { idx#14 = idx#20 } }  ) always clobbers reg byte a 
Statement [7] if(0!=print_person::person_initials#4[print_person::i#2]) goto print_person::@2 [ print_person::person_initials#4 print_person::i#2 idx#12 ] ( print_person:1 [ print_person::person_initials#4 print_person::i#2 idx#12 ] { }  print_person:3 [ print_person::person_initials#4 print_person::i#2 idx#12 ] { { idx#14 = idx#20 } }  ) always clobbers reg byte a 
Statement [8] SCREEN[idx#12] = ' ' [ idx#12 ] ( print_person:1 [ idx#12 ] { }  print_person:3 [ idx#12 ] { { idx#14 = idx#20 } }  ) always clobbers reg byte a 
Statement [11] SCREEN[idx#12] = print_person::person_initials#4[print_person::i#2] [ print_person::person_initials#4 print_person::i#2 idx#12 ] ( print_person:1 [ print_person::person_initials#4 print_person::i#2 idx#12 ] { }  print_person:3 [ print_person::person_initials#4 print_person::i#2 idx#12 ] { { idx#14 = idx#20 } }  ) always clobbers reg byte a 
Potential registers zp[2]:2 [ print_person::person_initials#4 ] : zp[2]:2 , 
Potential registers zp[1]:4 [ print_person::i#2 print_person::i#1 ] : zp[1]:4 , reg byte x , reg byte y , 
Potential registers zp[1]:5 [ idx#12 idx#20 idx#14 idx#3 ] : zp[1]:5 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [print_person] 303: zp[1]:4 [ print_person::i#2 print_person::i#1 ] 33.67: zp[2]:2 [ print_person::person_initials#4 ] 
Uplift Scope [] 201.25: zp[1]:5 [ idx#12 idx#20 idx#14 idx#3 ] 
Uplift Scope [main] 

Uplifting [print_person] best 488 combination reg byte y [ print_person::i#2 print_person::i#1 ] zp[2]:2 [ print_person::person_initials#4 ] 
Uplifting [] best 419 combination reg byte x [ idx#12 idx#20 idx#14 idx#3 ] 
Uplifting [main] best 419 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Example of a struct containing an array
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    // [1] call print_person 
    // [5] phi from main to print_person [phi:main->print_person]
  print_person_from_main:
    // [5] phi idx#20 = 0 [phi:main->print_person#0] -- vbuxx=vbuc1 
    ldx #0
    // [5] phi print_person::person_initials#4 = jesper_initials [phi:main->print_person#1] -- pbuz1=pbuc1 
    lda #<jesper_initials
    sta.z print_person.person_initials
    lda #>jesper_initials
    sta.z print_person.person_initials+1
    jsr print_person
    // [2] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [3] call print_person 
    // [5] phi from main::@1 to print_person [phi:main::@1->print_person]
  print_person_from___b1:
    // [5] phi idx#20 = idx#14 [phi:main::@1->print_person#0] -- register_copy 
    // [5] phi print_person::person_initials#4 = henry_initials [phi:main::@1->print_person#1] -- pbuz1=pbuc1 
    lda #<henry_initials
    sta.z print_person.person_initials
    lda #>henry_initials
    sta.z print_person.person_initials+1
    jsr print_person
    jmp __breturn
    // main::@return
  __breturn:
    // [4] return 
    rts
}
  // print_person
// print_person(byte* zp(2) person_initials)
print_person: {
    .label person_initials = 2
    // [6] phi from print_person to print_person::@1 [phi:print_person->print_person::@1]
  __b1_from_print_person:
    // [6] phi idx#12 = idx#20 [phi:print_person->print_person::@1#0] -- register_copy 
    // [6] phi print_person::i#2 = 0 [phi:print_person->print_person::@1#1] -- vbuyy=vbuc1 
    ldy #0
    jmp __b1
    // print_person::@1
  __b1:
    // [7] if(0!=print_person::person_initials#4[print_person::i#2]) goto print_person::@2 -- vbuc1_neq_pbuz1_derefidx_vbuyy_then_la1 
    lda (person_initials),y
    cmp #0
    bne __b2
    jmp __b3
    // print_person::@3
  __b3:
    // [8] SCREEN[idx#12] = ' ' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #' '
    sta SCREEN,x
    // [9] idx#14 = ++ idx#12 -- vbuxx=_inc_vbuxx 
    inx
    jmp __breturn
    // print_person::@return
  __breturn:
    // [10] return 
    rts
    // print_person::@2
  __b2:
    // [11] SCREEN[idx#12] = print_person::person_initials#4[print_person::i#2] -- pbuc1_derefidx_vbuxx=pbuz1_derefidx_vbuyy 
    lda (person_initials),y
    sta SCREEN,x
    // [12] idx#3 = ++ idx#12 -- vbuxx=_inc_vbuxx 
    inx
    // [13] print_person::i#1 = ++ print_person::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [6] phi from print_person::@2 to print_person::@1 [phi:print_person::@2->print_person::@1]
  __b1_from___b2:
    // [6] phi idx#12 = idx#3 [phi:print_person::@2->print_person::@1#0] -- register_copy 
    // [6] phi print_person::i#2 = print_person::i#1 [phi:print_person::@2->print_person::@1#1] -- register_copy 
    jmp __b1
}
  // File Data
  jesper_initials: .text "jg"
  .byte 0
  .fill $3d, 0
  henry_initials: .text "hg"
  .byte 0
  .fill $3d, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from_main:
Removing instruction print_person_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction print_person_from_main:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b1_from_print_person:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
const nomodify byte* SCREEN = (byte*) 1024
const byte* henry_initials[$40]  = "hg"
byte idx
byte idx#12 reg byte x 84.0
byte idx#14 reg byte x 3.25
byte idx#20 reg byte x 13.0
byte idx#3 reg byte x 101.0
const byte* jesper_initials[$40]  = "jg"
void main()
void print_person(dword print_person::person_id , byte* print_person::person_initials)
byte print_person::i
byte print_person::i#1 reg byte y 202.0
byte print_person::i#2 reg byte y 101.0
dword print_person::person_id
byte* print_person::person_initials
byte* print_person::person_initials#4 person_initials zp[2]:2 33.666666666666664

zp[2]:2 [ print_person::person_initials#4 ]
reg byte y [ print_person::i#2 print_person::i#1 ]
reg byte x [ idx#12 idx#20 idx#14 idx#3 ]


FINAL ASSEMBLER
Score: 350

  // File Comments
// Example of a struct containing an array
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    // print_person(jesper_id, jesper_initials)
    // [1] call print_person 
    // [5] phi from main to print_person [phi:main->print_person]
    // [5] phi idx#20 = 0 [phi:main->print_person#0] -- vbuxx=vbuc1 
    ldx #0
    // [5] phi print_person::person_initials#4 = jesper_initials [phi:main->print_person#1] -- pbuz1=pbuc1 
    lda #<jesper_initials
    sta.z print_person.person_initials
    lda #>jesper_initials
    sta.z print_person.person_initials+1
    jsr print_person
    // [2] phi from main to main::@1 [phi:main->main::@1]
    // main::@1
    // print_person(henry_id, henry_initials)
    // [3] call print_person 
    // [5] phi from main::@1 to print_person [phi:main::@1->print_person]
    // [5] phi idx#20 = idx#14 [phi:main::@1->print_person#0] -- register_copy 
    // [5] phi print_person::person_initials#4 = henry_initials [phi:main::@1->print_person#1] -- pbuz1=pbuc1 
    lda #<henry_initials
    sta.z print_person.person_initials
    lda #>henry_initials
    sta.z print_person.person_initials+1
    jsr print_person
    // main::@return
    // }
    // [4] return 
    rts
}
  // print_person
// print_person(byte* zp(2) person_initials)
print_person: {
    .label person_initials = 2
    // [6] phi from print_person to print_person::@1 [phi:print_person->print_person::@1]
    // [6] phi idx#12 = idx#20 [phi:print_person->print_person::@1#0] -- register_copy 
    // [6] phi print_person::i#2 = 0 [phi:print_person->print_person::@1#1] -- vbuyy=vbuc1 
    ldy #0
    // print_person::@1
  __b1:
    // for(byte i=0; person_initials[i]; i++)
    // [7] if(0!=print_person::person_initials#4[print_person::i#2]) goto print_person::@2 -- vbuc1_neq_pbuz1_derefidx_vbuyy_then_la1 
    lda (person_initials),y
    cmp #0
    bne __b2
    // print_person::@3
    // SCREEN[idx++] = ' '
    // [8] SCREEN[idx#12] = ' ' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #' '
    sta SCREEN,x
    // SCREEN[idx++] = ' ';
    // [9] idx#14 = ++ idx#12 -- vbuxx=_inc_vbuxx 
    inx
    // print_person::@return
    // }
    // [10] return 
    rts
    // print_person::@2
  __b2:
    // SCREEN[idx++] = person_initials[i]
    // [11] SCREEN[idx#12] = print_person::person_initials#4[print_person::i#2] -- pbuc1_derefidx_vbuxx=pbuz1_derefidx_vbuyy 
    lda (person_initials),y
    sta SCREEN,x
    // SCREEN[idx++] = person_initials[i];
    // [12] idx#3 = ++ idx#12 -- vbuxx=_inc_vbuxx 
    inx
    // for(byte i=0; person_initials[i]; i++)
    // [13] print_person::i#1 = ++ print_person::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [6] phi from print_person::@2 to print_person::@1 [phi:print_person::@2->print_person::@1]
    // [6] phi idx#12 = idx#3 [phi:print_person::@2->print_person::@1#0] -- register_copy 
    // [6] phi print_person::i#2 = print_person::i#1 [phi:print_person::@2->print_person::@1#1] -- register_copy 
    jmp __b1
}
  // File Data
  jesper_initials: .text "jg"
  .byte 0
  .fill $3d, 0
  henry_initials: .text "hg"
  .byte 0
  .fill $3d, 0

