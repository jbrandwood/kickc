Adding pointer type conversion cast (byte*) main::SCREEN1 in (byte*) main::SCREEN1 ← (number) $400
Culled Empty Block (label) @1
Culled Empty Block (label) @2

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte) val#0 ← (number) 0
  to:@3
main: scope:[main]  from @3
  (byte) val#8 ← phi( @3/(byte) val#14 )
  (byte*) main::SCREEN1#0 ← ((byte*)) (number) $400
  (byte*~) main::$0 ← (byte*) main::SCREEN1#0 + (number) $28
  (byte*) main::SCREEN2#0 ← (byte*~) main::$0
  (byte) main::idx#0 ← (number) 0
  *((byte*) main::SCREEN1#0 + (byte) main::idx#0) ← (byte) val#8
  *((byte*) main::SCREEN2#0 + (byte) main::idx#0) ← (byte) '.'
  (byte) main::idx#1 ← ++ (byte) main::idx#0
  (byte) val#1 ← (number) 1
  *((byte*) main::SCREEN1#0 + (byte) main::idx#1) ← (byte) val#1
  *((byte*) main::SCREEN2#0 + (byte) main::idx#1) ← (byte) '.'
  (byte) main::idx#2 ← ++ (byte) main::idx#1
  (byte*~) main::$1 ← & (byte) val#1
  (byte*) main::ptr#0 ← (byte*~) main::$1
  (byte) val#2 ← (number) 2
  *((byte*) main::SCREEN1#0 + (byte) main::idx#2) ← (byte) val#2
  *((byte*) main::SCREEN2#0 + (byte) main::idx#2) ← *((byte*) main::ptr#0)
  (byte) main::idx#3 ← ++ (byte) main::idx#2
  *((byte*) main::ptr#0) ← (number) 3
  *((byte*) main::SCREEN1#0 + (byte) main::idx#3) ← (byte) val#2
  *((byte*) main::SCREEN2#0 + (byte) main::idx#3) ← *((byte*) main::ptr#0)
  (byte) main::idx#4 ← ++ (byte) main::idx#3
  (byte) setv::v#0 ← (number) 4
  call setv 
  to:main::@1
main::@1: scope:[main]  from main
  (byte*) main::ptr#1 ← phi( main/(byte*) main::ptr#0 )
  (byte) main::idx#7 ← phi( main/(byte) main::idx#4 )
  (byte) val#9 ← phi( main/(byte) val#6 )
  (byte) val#3 ← (byte) val#9
  *((byte*) main::SCREEN1#0 + (byte) main::idx#7) ← (byte) val#3
  *((byte*) main::SCREEN2#0 + (byte) main::idx#7) ← *((byte*) main::ptr#1)
  (byte) main::idx#5 ← ++ (byte) main::idx#7
  (byte*) setp::p#0 ← (byte*) main::ptr#1
  (byte) setp::v#0 ← (number) 5
  call setp 
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte*) main::ptr#2 ← phi( main::@1/(byte*) main::ptr#1 )
  (byte) main::idx#8 ← phi( main::@1/(byte) main::idx#5 )
  (byte) val#10 ← phi( main::@1/(byte) val#3 )
  *((byte*) main::SCREEN1#0 + (byte) main::idx#8) ← (byte) val#10
  *((byte*) main::SCREEN2#0 + (byte) main::idx#8) ← *((byte*) main::ptr#2)
  (byte) main::idx#6 ← ++ (byte) main::idx#8
  to:main::@return
main::@return: scope:[main]  from main::@2
  (byte) val#11 ← phi( main::@2/(byte) val#10 )
  (byte) val#4 ← (byte) val#11
  return 
  to:@return
setv: scope:[setv]  from main
  (byte) setv::v#1 ← phi( main/(byte) setv::v#0 )
  (byte) val#5 ← (byte) setv::v#1
  to:setv::@return
setv::@return: scope:[setv]  from setv
  (byte) val#12 ← phi( setv/(byte) val#5 )
  (byte) val#6 ← (byte) val#12
  return 
  to:@return
setp: scope:[setp]  from main::@1
  (byte*) setp::p#1 ← phi( main::@1/(byte*) setp::p#0 )
  (byte) setp::v#1 ← phi( main::@1/(byte) setp::v#0 )
  *((byte*) setp::p#1) ← (byte) setp::v#1
  to:setp::@return
setp::@return: scope:[setp]  from setp
  return 
  to:@return
@3: scope:[]  from @begin
  (byte) val#14 ← phi( @begin/(byte) val#0 )
  call main 
  to:@4
@4: scope:[]  from @3
  (byte) val#13 ← phi( @3/(byte) val#4 )
  (byte) val#7 ← (byte) val#13
  to:@end
@end: scope:[]  from @4

SYMBOL TABLE SSA
(label) @3
(label) @4
(label) @begin
(label) @end
(void()) main()
(byte*~) main::$0
(byte*~) main::$1
(label) main::@1
(label) main::@2
(label) main::@return
(byte*) main::SCREEN1
(byte*) main::SCREEN1#0
(byte*) main::SCREEN2
(byte*) main::SCREEN2#0
(byte) main::idx
(byte) main::idx#0
(byte) main::idx#1
(byte) main::idx#2
(byte) main::idx#3
(byte) main::idx#4
(byte) main::idx#5
(byte) main::idx#6
(byte) main::idx#7
(byte) main::idx#8
(byte*) main::ptr
(byte*) main::ptr#0
(byte*) main::ptr#1
(byte*) main::ptr#2
(void()) setp((byte*) setp::p , (byte) setp::v)
(label) setp::@return
(byte*) setp::p
(byte*) setp::p#0
(byte*) setp::p#1
(byte) setp::v
(byte) setp::v#0
(byte) setp::v#1
(void()) setv((byte) setv::v)
(label) setv::@return
(byte) setv::v
(byte) setv::v#0
(byte) setv::v#1
(byte) val
(byte) val#0
(byte) val#1
(byte) val#10
(byte) val#11
(byte) val#12
(byte) val#13
(byte) val#14
(byte) val#2
(byte) val#3
(byte) val#4
(byte) val#5
(byte) val#6
(byte) val#7
(byte) val#8
(byte) val#9

Adding number conversion cast (unumber) 0 in (byte) val#0 ← (number) 0
Adding number conversion cast (unumber) $28 in (byte*~) main::$0 ← (byte*) main::SCREEN1#0 + (number) $28
Adding number conversion cast (unumber) 0 in (byte) main::idx#0 ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) val#1 ← (number) 1
Adding number conversion cast (unumber) 2 in (byte) val#2 ← (number) 2
Adding number conversion cast (unumber) 3 in *((byte*) main::ptr#0) ← (number) 3
Adding number conversion cast (unumber) 4 in (byte) setv::v#0 ← (number) 4
Adding number conversion cast (unumber) 5 in (byte) setp::v#0 ← (number) 5
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte) val#0 ← (unumber)(number) 0
Inlining cast (byte*) main::SCREEN1#0 ← (byte*)(number) $400
Inlining cast (byte) main::idx#0 ← (unumber)(number) 0
Inlining cast (byte) val#1 ← (unumber)(number) 1
Inlining cast (byte) val#2 ← (unumber)(number) 2
Inlining cast *((byte*) main::ptr#0) ← (unumber)(number) 3
Inlining cast (byte) setv::v#0 ← (unumber)(number) 4
Inlining cast (byte) setp::v#0 ← (unumber)(number) 5
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast 0
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 4
Simplifying constant integer cast 5
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 5
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias (byte*) main::SCREEN2#0 = (byte*~) main::$0 
Alias (byte*) main::ptr#0 = (byte*~) main::$1 (byte*) main::ptr#1 (byte*) main::ptr#2 
Alias (byte) main::idx#4 = (byte) main::idx#7 
Alias (byte) val#10 = (byte) val#3 (byte) val#9 (byte) val#11 (byte) val#4 
Alias (byte) main::idx#5 = (byte) main::idx#8 
Alias (byte) val#12 = (byte) val#5 (byte) val#6 
Alias (byte) val#0 = (byte) val#14 
Alias (byte) val#13 = (byte) val#7 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) val#8 (byte) val#0
Identical Phi Values (byte) val#10 (byte) val#12
Identical Phi Values (byte) setv::v#1 (byte) setv::v#0
Identical Phi Values (byte) setp::v#1 (byte) setp::v#0
Identical Phi Values (byte*) setp::p#1 (byte*) setp::p#0
Identical Phi Values (byte) val#13 (byte) val#10
Successful SSA optimization Pass2IdenticalPhiElimination
Constant right-side identified [13] (byte*) main::ptr#0 ← & (byte) val#1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) val#0 = 0
Constant (const byte*) main::SCREEN1#0 = (byte*) 1024
Constant (const byte) main::idx#0 = 0
Constant (const byte*) main::ptr#0 = &val#1
Constant (const byte) val#2 = 2
Constant (const byte) setv::v#0 = 4
Constant (const byte) setp::v#0 = 5
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) setp::p#0 = main::ptr#0
Constant (const byte) val#12 = setv::v#0
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero main::SCREEN1#0 in [6] *((const byte*) main::SCREEN1#0 + (const byte) main::idx#0) ← (const byte) val#0
Simplifying expression containing zero main::SCREEN2#0 in [7] *((byte*) main::SCREEN2#0 + (const byte) main::idx#0) ← (byte) '.'
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (byte) main::idx#6 and assignment [22] (byte) main::idx#6 ← ++ (byte) main::idx#5
Successful SSA optimization PassNEliminateUnusedVars
Constant right-side identified [0] (byte*) main::SCREEN2#0 ← (const byte*) main::SCREEN1#0 + (byte) $28
Constant right-side identified [3] (byte) main::idx#1 ← ++ (const byte) main::idx#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) main::SCREEN2#0 = main::SCREEN1#0+$28
Constant (const byte) main::idx#1 = ++main::idx#0
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [5] (byte) main::idx#2 ← ++ (const byte) main::idx#1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#2 = ++main::idx#1
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [7] (byte) main::idx#3 ← ++ (const byte) main::idx#2
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#3 = ++main::idx#2
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [10] (byte) main::idx#4 ← ++ (const byte) main::idx#3
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#4 = ++main::idx#3
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [13] (byte) main::idx#5 ← ++ (const byte) main::idx#4
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#5 = ++main::idx#4
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with different constant siblings (const byte) main::idx#0
Inlining constant with different constant siblings (const byte) main::idx#1
Inlining constant with different constant siblings (const byte) main::idx#2
Inlining constant with different constant siblings (const byte) main::idx#3
Inlining constant with different constant siblings (const byte) main::idx#4
Inlining constant with different constant siblings (const byte) main::idx#5
Inlining constant with var siblings (const byte) val#0
Inlining constant with var siblings (const byte) val#2
Inlining constant with var siblings (const byte) val#12
Constant inlined main::idx#0 = (byte) 0
Constant inlined main::idx#1 = ++(byte) 0
Constant inlined val#0 = (byte) 0
Constant inlined main::idx#2 = ++++(byte) 0
Constant inlined main::idx#3 = ++++++(byte) 0
Constant inlined main::idx#4 = ++++++++(byte) 0
Constant inlined main::idx#5 = ++++++++++(byte) 0
Constant inlined val#12 = (const byte) setv::v#0
Constant inlined setp::p#0 = (const byte*) main::ptr#0
Constant inlined val#2 = (byte) 2
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(main::SCREEN1#0+++0)
Consolidated array index constant in *(main::SCREEN2#0+++0)
Consolidated array index constant in *(main::SCREEN1#0+++++0)
Consolidated array index constant in *(main::SCREEN2#0+++++0)
Consolidated array index constant in *(main::SCREEN1#0+++++++0)
Consolidated array index constant in *(main::SCREEN2#0+++++++0)
Consolidated array index constant in *(main::SCREEN1#0+++++++++0)
Consolidated array index constant in *(main::SCREEN2#0+++++++++0)
Consolidated array index constant in *(main::SCREEN1#0+++++++++++0)
Consolidated array index constant in *(main::SCREEN2#0+++++++++++0)
Successful SSA optimization Pass2ConstantAdditionElimination
Simplifying constant integer increment ++0
Simplifying constant integer increment ++0
Simplifying constant integer increment ++0
Simplifying constant integer increment ++1
Simplifying constant integer increment ++1
Simplifying constant integer increment ++2
Simplifying constant integer increment ++2
Simplifying constant integer increment ++3
Simplifying constant integer increment ++3
Simplifying constant integer increment ++4
Successful SSA optimization Pass2ConstantSimplification
Simplifying constant integer increment ++1
Simplifying constant integer increment ++2
Simplifying constant integer increment ++3
Simplifying constant integer increment ++4
Successful SSA optimization Pass2ConstantSimplification
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @3
Adding NOP phi() at start of @4
Adding NOP phi() at start of @end
Adding NOP phi() at start of setv
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to setv:15 setp:18 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) @4
Renumbering block @3 to @1
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of setv

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] *((const byte*) main::SCREEN1#0) ← (byte) 0
  [5] *((const byte*) main::SCREEN2#0) ← (byte) '.'
  [6] (byte) val#1 ← (byte) 1
  [7] *((const byte*) main::SCREEN1#0+(byte) 1) ← (byte) val#1
  [8] *((const byte*) main::SCREEN2#0+(byte) 1) ← (byte) '.'
  [9] *((const byte*) main::SCREEN1#0+(byte) 2) ← (byte) 2
  [10] *((const byte*) main::SCREEN2#0+(byte) 2) ← *((const byte*) main::ptr#0)
  [11] *((const byte*) main::ptr#0) ← (byte) 3
  [12] *((const byte*) main::SCREEN1#0+(byte) 3) ← (byte) 2
  [13] *((const byte*) main::SCREEN2#0+(byte) 3) ← *((const byte*) main::ptr#0)
  [14] call setv 
  to:main::@1
main::@1: scope:[main]  from main
  [15] *((const byte*) main::SCREEN1#0+(byte) 4) ← (const byte) setv::v#0
  [16] *((const byte*) main::SCREEN2#0+(byte) 4) ← *((const byte*) main::ptr#0)
  [17] call setp 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [18] *((const byte*) main::SCREEN1#0+(byte) 5) ← (const byte) setv::v#0
  [19] *((const byte*) main::SCREEN2#0+(byte) 5) ← *((const byte*) main::ptr#0)
  to:main::@return
main::@return: scope:[main]  from main::@2
  [20] return 
  to:@return
setp: scope:[setp]  from main::@1
  [21] *((const byte*) main::ptr#0) ← (const byte) setp::v#0
  to:setp::@return
setp::@return: scope:[setp]  from setp
  [22] return 
  to:@return
setv: scope:[setv]  from main
  [23] phi()
  to:setv::@return
setv::@return: scope:[setv]  from setv
  [24] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte*) main::SCREEN1
(byte*) main::SCREEN2
(byte) main::idx
(byte*) main::ptr
(void()) setp((byte*) setp::p , (byte) setp::v)
(byte*) setp::p
(byte) setp::v
(void()) setv((byte) setv::v)
(byte) setv::v
(byte) val
(byte) val#1 4.0

Initial phi equivalence classes
Added variable val#1 to zero page equivalence class [ val#1 ]
Complete equivalence classes
[ val#1 ]
Allocated zp ZP_BYTE:2 [ val#1 ]

INITIAL ASM
//SEG0 File Comments
// Test address-of by assigning the affected variable in multiple ways
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label val = 2
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
    .label SCREEN1 = $400
    .label ptr = val
    .label SCREEN2 = SCREEN1+$28
  //SEG10 [4] *((const byte*) main::SCREEN1#0) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SCREEN1
  //SEG11 [5] *((const byte*) main::SCREEN2#0) ← (byte) '.' -- _deref_pbuc1=vbuc2 
    lda #'.'
    sta SCREEN2
  //SEG12 [6] (byte) val#1 ← (byte) 1 -- vbuz1=vbuc1 
    // Here we have not yet used address-of - so val can be versioned freely
    lda #1
    sta val
  //SEG13 [7] *((const byte*) main::SCREEN1#0+(byte) 1) ← (byte) val#1 -- _deref_pbuc1=vbuz1 
    lda val
    sta SCREEN1+1
  //SEG14 [8] *((const byte*) main::SCREEN2#0+(byte) 1) ← (byte) '.' -- _deref_pbuc1=vbuc2 
    lda #'.'
    sta SCREEN2+1
  //SEG15 [9] *((const byte*) main::SCREEN1#0+(byte) 2) ← (byte) 2 -- _deref_pbuc1=vbuc2 
    lda #2
    sta SCREEN1+2
  //SEG16 [10] *((const byte*) main::SCREEN2#0+(byte) 2) ← *((const byte*) main::ptr#0) -- _deref_pbuc1=_deref_pbuc2 
    lda ptr
    sta SCREEN2+2
  //SEG17 [11] *((const byte*) main::ptr#0) ← (byte) 3 -- _deref_pbuc1=vbuc2 
    // Set value through pointer
    lda #3
    sta ptr
  //SEG18 [12] *((const byte*) main::SCREEN1#0+(byte) 3) ← (byte) 2 -- _deref_pbuc1=vbuc2 
    lda #2
    sta SCREEN1+3
  //SEG19 [13] *((const byte*) main::SCREEN2#0+(byte) 3) ← *((const byte*) main::ptr#0) -- _deref_pbuc1=_deref_pbuc2 
    lda ptr
    sta SCREEN2+3
  //SEG20 [14] call setv 
  //SEG21 [23] phi from main to setv [phi:main->setv]
  setv_from_main:
    jsr setv
    jmp b1
  //SEG22 main::@1
  b1:
  //SEG23 [15] *((const byte*) main::SCREEN1#0+(byte) 4) ← (const byte) setv::v#0 -- _deref_pbuc1=vbuc2 
    lda #setv.v
    sta SCREEN1+4
  //SEG24 [16] *((const byte*) main::SCREEN2#0+(byte) 4) ← *((const byte*) main::ptr#0) -- _deref_pbuc1=_deref_pbuc2 
    lda ptr
    sta SCREEN2+4
  //SEG25 [17] call setp 
    jsr setp
    jmp b2
  //SEG26 main::@2
  b2:
  //SEG27 [18] *((const byte*) main::SCREEN1#0+(byte) 5) ← (const byte) setv::v#0 -- _deref_pbuc1=vbuc2 
    lda #setv.v
    sta SCREEN1+5
  //SEG28 [19] *((const byte*) main::SCREEN2#0+(byte) 5) ← *((const byte*) main::ptr#0) -- _deref_pbuc1=_deref_pbuc2 
    lda ptr
    sta SCREEN2+5
    jmp breturn
  //SEG29 main::@return
  breturn:
  //SEG30 [20] return 
    rts
}
//SEG31 setp
setp: {
    .const v = 5
  //SEG32 [21] *((const byte*) main::ptr#0) ← (const byte) setp::v#0 -- _deref_pbuc1=vbuc2 
    lda #v
    sta main.ptr
    jmp breturn
  //SEG33 setp::@return
  breturn:
  //SEG34 [22] return 
    rts
}
//SEG35 setv
setv: {
    .label v = 4
    jmp breturn
  //SEG36 setv::@return
  breturn:
  //SEG37 [24] return 
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] *((const byte*) main::SCREEN1#0) ← (byte) 0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [5] *((const byte*) main::SCREEN2#0) ← (byte) '.' [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [6] (byte) val#1 ← (byte) 1 [ val#1 ] ( main:2 [ val#1 ] ) always clobbers reg byte a 
Statement [7] *((const byte*) main::SCREEN1#0+(byte) 1) ← (byte) val#1 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [8] *((const byte*) main::SCREEN2#0+(byte) 1) ← (byte) '.' [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [9] *((const byte*) main::SCREEN1#0+(byte) 2) ← (byte) 2 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [10] *((const byte*) main::SCREEN2#0+(byte) 2) ← *((const byte*) main::ptr#0) [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [11] *((const byte*) main::ptr#0) ← (byte) 3 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [12] *((const byte*) main::SCREEN1#0+(byte) 3) ← (byte) 2 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [13] *((const byte*) main::SCREEN2#0+(byte) 3) ← *((const byte*) main::ptr#0) [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [15] *((const byte*) main::SCREEN1#0+(byte) 4) ← (const byte) setv::v#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [16] *((const byte*) main::SCREEN2#0+(byte) 4) ← *((const byte*) main::ptr#0) [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [18] *((const byte*) main::SCREEN1#0+(byte) 5) ← (const byte) setv::v#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [19] *((const byte*) main::SCREEN2#0+(byte) 5) ← *((const byte*) main::ptr#0) [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [21] *((const byte*) main::ptr#0) ← (const byte) setp::v#0 [ ] ( main:2::setp:17 [ ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ val#1 ] : zp ZP_BYTE:2 , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 4: zp ZP_BYTE:2 [ val#1 ] 
Uplift Scope [main] 
Uplift Scope [setv] 
Uplift Scope [setp] 

Uplifting [] best 182 combination zp ZP_BYTE:2 [ val#1 ] 
Uplifting [main] best 182 combination 
Uplifting [setv] best 182 combination 
Uplifting [setp] best 182 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ val#1 ]
Uplifting [] best 182 combination zp ZP_BYTE:2 [ val#1 ] 

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 File Comments
// Test address-of by assigning the affected variable in multiple ways
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label val = 2
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
    .label SCREEN1 = $400
    .label ptr = val
    .label SCREEN2 = SCREEN1+$28
  //SEG10 [4] *((const byte*) main::SCREEN1#0) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SCREEN1
  //SEG11 [5] *((const byte*) main::SCREEN2#0) ← (byte) '.' -- _deref_pbuc1=vbuc2 
    lda #'.'
    sta SCREEN2
  //SEG12 [6] (byte) val#1 ← (byte) 1 -- vbuz1=vbuc1 
    // Here we have not yet used address-of - so val can be versioned freely
    lda #1
    sta val
  //SEG13 [7] *((const byte*) main::SCREEN1#0+(byte) 1) ← (byte) val#1 -- _deref_pbuc1=vbuz1 
    lda val
    sta SCREEN1+1
  //SEG14 [8] *((const byte*) main::SCREEN2#0+(byte) 1) ← (byte) '.' -- _deref_pbuc1=vbuc2 
    lda #'.'
    sta SCREEN2+1
  //SEG15 [9] *((const byte*) main::SCREEN1#0+(byte) 2) ← (byte) 2 -- _deref_pbuc1=vbuc2 
    lda #2
    sta SCREEN1+2
  //SEG16 [10] *((const byte*) main::SCREEN2#0+(byte) 2) ← *((const byte*) main::ptr#0) -- _deref_pbuc1=_deref_pbuc2 
    lda ptr
    sta SCREEN2+2
  //SEG17 [11] *((const byte*) main::ptr#0) ← (byte) 3 -- _deref_pbuc1=vbuc2 
    // Set value through pointer
    lda #3
    sta ptr
  //SEG18 [12] *((const byte*) main::SCREEN1#0+(byte) 3) ← (byte) 2 -- _deref_pbuc1=vbuc2 
    lda #2
    sta SCREEN1+3
  //SEG19 [13] *((const byte*) main::SCREEN2#0+(byte) 3) ← *((const byte*) main::ptr#0) -- _deref_pbuc1=_deref_pbuc2 
    lda ptr
    sta SCREEN2+3
  //SEG20 [14] call setv 
  //SEG21 [23] phi from main to setv [phi:main->setv]
  setv_from_main:
    jsr setv
    jmp b1
  //SEG22 main::@1
  b1:
  //SEG23 [15] *((const byte*) main::SCREEN1#0+(byte) 4) ← (const byte) setv::v#0 -- _deref_pbuc1=vbuc2 
    lda #setv.v
    sta SCREEN1+4
  //SEG24 [16] *((const byte*) main::SCREEN2#0+(byte) 4) ← *((const byte*) main::ptr#0) -- _deref_pbuc1=_deref_pbuc2 
    lda ptr
    sta SCREEN2+4
  //SEG25 [17] call setp 
    jsr setp
    jmp b2
  //SEG26 main::@2
  b2:
  //SEG27 [18] *((const byte*) main::SCREEN1#0+(byte) 5) ← (const byte) setv::v#0 -- _deref_pbuc1=vbuc2 
    lda #setv.v
    sta SCREEN1+5
  //SEG28 [19] *((const byte*) main::SCREEN2#0+(byte) 5) ← *((const byte*) main::ptr#0) -- _deref_pbuc1=_deref_pbuc2 
    lda ptr
    sta SCREEN2+5
    jmp breturn
  //SEG29 main::@return
  breturn:
  //SEG30 [20] return 
    rts
}
//SEG31 setp
setp: {
    .const v = 5
  //SEG32 [21] *((const byte*) main::ptr#0) ← (const byte) setp::v#0 -- _deref_pbuc1=vbuc2 
    lda #v
    sta main.ptr
    jmp breturn
  //SEG33 setp::@return
  breturn:
  //SEG34 [22] return 
    rts
}
//SEG35 setv
setv: {
    .label v = 4
    jmp breturn
  //SEG36 setv::@return
  breturn:
  //SEG37 [24] return 
    rts
}

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda val
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction bend_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction setv_from_main:
Removing instruction b1:
Removing instruction b2:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(byte*) main::SCREEN1
(const byte*) main::SCREEN1#0 SCREEN1 = (byte*) 1024
(byte*) main::SCREEN2
(const byte*) main::SCREEN2#0 SCREEN2 = (const byte*) main::SCREEN1#0+(byte) $28
(byte) main::idx
(byte*) main::ptr
(const byte*) main::ptr#0 ptr = &(byte) val#1
(void()) setp((byte*) setp::p , (byte) setp::v)
(label) setp::@return
(byte*) setp::p
(byte) setp::v
(const byte) setp::v#0 v = (byte) 5
(void()) setv((byte) setv::v)
(label) setv::@return
(byte) setv::v
(const byte) setv::v#0 v = (byte) 4
(byte) val
(byte) val#1 val zp ZP_BYTE:2 4.0

zp ZP_BYTE:2 [ val#1 ]


FINAL ASSEMBLER
Score: 125

//SEG0 File Comments
// Test address-of by assigning the affected variable in multiple ways
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label val = 2
//SEG3 @begin
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG5 @1
//SEG6 [2] call main 
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
//SEG8 @end
//SEG9 main
main: {
    .label SCREEN1 = $400
    .label ptr = val
    .label SCREEN2 = SCREEN1+$28
  //SEG10 [4] *((const byte*) main::SCREEN1#0) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SCREEN1
  //SEG11 [5] *((const byte*) main::SCREEN2#0) ← (byte) '.' -- _deref_pbuc1=vbuc2 
    lda #'.'
    sta SCREEN2
  //SEG12 [6] (byte) val#1 ← (byte) 1 -- vbuz1=vbuc1 
    // Here we have not yet used address-of - so val can be versioned freely
    lda #1
    sta val
  //SEG13 [7] *((const byte*) main::SCREEN1#0+(byte) 1) ← (byte) val#1 -- _deref_pbuc1=vbuz1 
    sta SCREEN1+1
  //SEG14 [8] *((const byte*) main::SCREEN2#0+(byte) 1) ← (byte) '.' -- _deref_pbuc1=vbuc2 
    lda #'.'
    sta SCREEN2+1
  //SEG15 [9] *((const byte*) main::SCREEN1#0+(byte) 2) ← (byte) 2 -- _deref_pbuc1=vbuc2 
    lda #2
    sta SCREEN1+2
  //SEG16 [10] *((const byte*) main::SCREEN2#0+(byte) 2) ← *((const byte*) main::ptr#0) -- _deref_pbuc1=_deref_pbuc2 
    lda ptr
    sta SCREEN2+2
  //SEG17 [11] *((const byte*) main::ptr#0) ← (byte) 3 -- _deref_pbuc1=vbuc2 
    // Set value through pointer
    lda #3
    sta ptr
  //SEG18 [12] *((const byte*) main::SCREEN1#0+(byte) 3) ← (byte) 2 -- _deref_pbuc1=vbuc2 
    lda #2
    sta SCREEN1+3
  //SEG19 [13] *((const byte*) main::SCREEN2#0+(byte) 3) ← *((const byte*) main::ptr#0) -- _deref_pbuc1=_deref_pbuc2 
    lda ptr
    sta SCREEN2+3
  //SEG20 [14] call setv 
  //SEG21 [23] phi from main to setv [phi:main->setv]
    jsr setv
  //SEG22 main::@1
  //SEG23 [15] *((const byte*) main::SCREEN1#0+(byte) 4) ← (const byte) setv::v#0 -- _deref_pbuc1=vbuc2 
    lda #setv.v
    sta SCREEN1+4
  //SEG24 [16] *((const byte*) main::SCREEN2#0+(byte) 4) ← *((const byte*) main::ptr#0) -- _deref_pbuc1=_deref_pbuc2 
    lda ptr
    sta SCREEN2+4
  //SEG25 [17] call setp 
    jsr setp
  //SEG26 main::@2
  //SEG27 [18] *((const byte*) main::SCREEN1#0+(byte) 5) ← (const byte) setv::v#0 -- _deref_pbuc1=vbuc2 
    lda #setv.v
    sta SCREEN1+5
  //SEG28 [19] *((const byte*) main::SCREEN2#0+(byte) 5) ← *((const byte*) main::ptr#0) -- _deref_pbuc1=_deref_pbuc2 
    lda ptr
    sta SCREEN2+5
  //SEG29 main::@return
  //SEG30 [20] return 
    rts
}
//SEG31 setp
setp: {
    .const v = 5
  //SEG32 [21] *((const byte*) main::ptr#0) ← (const byte) setp::v#0 -- _deref_pbuc1=vbuc2 
    lda #v
    sta main.ptr
  //SEG33 setp::@return
  //SEG34 [22] return 
    rts
}
//SEG35 setv
setv: {
    .label v = 4
  //SEG36 setv::@return
  //SEG37 [24] return 
    rts
}

