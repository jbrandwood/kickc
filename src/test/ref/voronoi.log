Identified constant variable (byte*) SCREEN
Identified constant variable (byte*) COLORS
Identified constant variable (byte) FILL
Identified constant variable (byte) numpoints

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word/dword/signed dword) $400
  (byte*) COLORS#0 ← ((byte*)) (word/dword/signed dword) $d800
  (byte) FILL#0 ← (byte/word/signed word/dword/signed dword) $e6
  (byte) numpoints#0 ← (byte/signed byte/word/signed word/dword/signed dword) 6
  (byte[]) XPOS#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) $f, (byte/signed byte/word/signed word/dword/signed dword) 6, (byte/signed byte/word/signed word/dword/signed dword) $22, (byte/signed byte/word/signed word/dword/signed dword) $15, (byte/signed byte/word/signed word/dword/signed dword) $1f }
  (byte[]) YPOS#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 8, (byte/signed byte/word/signed word/dword/signed dword) $e, (byte/signed byte/word/signed word/dword/signed dword) 2, (byte/signed byte/word/signed word/dword/signed dword) $11, (byte/signed byte/word/signed word/dword/signed dword) $16 }
  (byte[]) COLS#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 2, (byte/signed byte/word/signed word/dword/signed dword) 3, (byte/signed byte/word/signed word/dword/signed dword) 4, (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7 }
  to:@5
main: scope:[main]  from @5
  call initscreen 
  to:main::@3
main::@3: scope:[main]  from main
  to:main::@1
main::@1: scope:[main]  from main::@3 main::@5
  call render 
  to:main::@4
main::@4: scope:[main]  from main::@1
  call animate 
  to:main::@5
main::@5: scope:[main]  from main::@4
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
animate: scope:[animate]  from main::@4
  (byte/signed word/word/dword/signed dword~) animate::$0 ← *((byte[]) XPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 0) + (byte/signed byte/word/signed word/dword/signed dword) 1
  *((byte[]) XPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 0) ← (byte/signed word/word/dword/signed dword~) animate::$0
  (bool~) animate::$1 ← *((byte[]) XPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 0) == (byte/signed byte/word/signed word/dword/signed dword) $28
  (bool~) animate::$2 ← ! (bool~) animate::$1
  if((bool~) animate::$2) goto animate::@1
  to:animate::@6
animate::@1: scope:[animate]  from animate animate::@6
  (byte/signed word/word/dword/signed dword~) animate::$3 ← *((byte[]) YPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 0) + (byte/signed byte/word/signed word/dword/signed dword) 1
  *((byte[]) YPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 0) ← (byte/signed word/word/dword/signed dword~) animate::$3
  (bool~) animate::$4 ← *((byte[]) YPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 0) == (byte/signed byte/word/signed word/dword/signed dword) $19
  (bool~) animate::$5 ← ! (bool~) animate::$4
  if((bool~) animate::$5) goto animate::@2
  to:animate::@7
animate::@6: scope:[animate]  from animate
  *((byte[]) XPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@7
  (byte/signed word/word/dword/signed dword~) animate::$6 ← *((byte[]) XPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 1) - (byte/signed byte/word/signed word/dword/signed dword) 1
  *((byte[]) XPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte/signed word/word/dword/signed dword~) animate::$6
  (bool~) animate::$7 ← *((byte[]) XPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 1) == (byte/word/signed word/dword/signed dword) $ff
  (bool~) animate::$8 ← ! (bool~) animate::$7
  if((bool~) animate::$8) goto animate::@3
  to:animate::@8
animate::@7: scope:[animate]  from animate::@1
  *((byte[]) YPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@8
  (byte/signed word/word/dword/signed dword~) animate::$9 ← *((byte[]) YPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 2) + (byte/signed byte/word/signed word/dword/signed dword) 1
  *((byte[]) YPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte/signed word/word/dword/signed dword~) animate::$9
  (bool~) animate::$10 ← *((byte[]) YPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 2) == (byte/signed byte/word/signed word/dword/signed dword) $19
  (bool~) animate::$11 ← ! (bool~) animate::$10
  if((bool~) animate::$11) goto animate::@4
  to:animate::@9
animate::@8: scope:[animate]  from animate::@2
  *((byte[]) XPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte/signed byte/word/signed word/dword/signed dword) $28
  to:animate::@3
animate::@4: scope:[animate]  from animate::@3 animate::@9
  (byte/signed word/word/dword/signed dword~) animate::$12 ← *((byte[]) YPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 3) - (byte/signed byte/word/signed word/dword/signed dword) 1
  *((byte[]) YPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte/signed word/word/dword/signed dword~) animate::$12
  (bool~) animate::$13 ← *((byte[]) YPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 3) == (byte/word/signed word/dword/signed dword) $ff
  (bool~) animate::$14 ← ! (bool~) animate::$13
  if((bool~) animate::$14) goto animate::@5
  to:animate::@10
animate::@9: scope:[animate]  from animate::@3
  *((byte[]) YPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:animate::@4
animate::@5: scope:[animate]  from animate::@4
  to:animate::@return
animate::@10: scope:[animate]  from animate::@4
  *((byte[]) YPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte/signed byte/word/signed word/dword/signed dword) $19
  (byte/signed word/word/dword/signed dword~) animate::$15 ← *((byte[]) XPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 3) + (byte/signed byte/word/signed word/dword/signed dword) 7
  *((byte[]) XPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte/signed word/word/dword/signed dword~) animate::$15
  (bool~) animate::$16 ← *((byte[]) XPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 3) >= (byte/signed byte/word/signed word/dword/signed dword) $28
  (bool~) animate::$17 ← ! (bool~) animate::$16
  if((bool~) animate::$17) goto animate::@12
  to:animate::@11
animate::@12: scope:[animate]  from animate::@10
  to:animate::@return
animate::@11: scope:[animate]  from animate::@10
  (byte/signed word/word/dword/signed dword~) animate::$18 ← *((byte[]) XPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 3) - (byte/signed byte/word/signed word/dword/signed dword) $28
  *((byte[]) XPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte/signed word/word/dword/signed dword~) animate::$18
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@5
  return 
  to:@return
initscreen: scope:[initscreen]  from main
  (byte*) initscreen::screen#0 ← (byte*) SCREEN#0
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  (byte*) initscreen::screen#2 ← phi( initscreen/(byte*) initscreen::screen#0 initscreen::@1/(byte*) initscreen::screen#1 )
  *((byte*) initscreen::screen#2) ← (byte) FILL#0
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  (byte*~) initscreen::$0 ← (byte*) SCREEN#0 + (word/signed word/dword/signed dword) $3e8
  (bool~) initscreen::$1 ← (byte*) initscreen::screen#1 < (byte*~) initscreen::$0
  if((bool~) initscreen::$1) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  (byte*) render::colline#0 ← (byte*) COLORS#0
  (byte) render::y#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte*) render::colline#5 ← phi( render/(byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#4 ← phi( render/(byte) render::y#0 render::@3/(byte) render::y#1 )
  (byte) render::x#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte*) render::colline#4 ← phi( render::@1/(byte*) render::colline#5 render::@5/(byte*) render::colline#2 )
  (byte) render::y#2 ← phi( render::@1/(byte) render::y#4 render::@5/(byte) render::y#5 )
  (byte) render::x#2 ← phi( render::@1/(byte) render::x#0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol 
  (byte) findcol::return#0 ← (byte) findcol::return#2
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte) render::y#5 ← phi( render::@2/(byte) render::y#2 )
  (byte) render::x#3 ← phi( render::@2/(byte) render::x#2 )
  (byte*) render::colline#2 ← phi( render::@2/(byte*) render::colline#4 )
  (byte) findcol::return#4 ← phi( render::@2/(byte) findcol::return#0 )
  (byte~) render::$0 ← (byte) findcol::return#4
  (byte) render::col#0 ← (byte~) render::$0
  *((byte*) render::colline#2 + (byte) render::x#3) ← (byte) render::col#0
  (byte) render::x#1 ← (byte) render::x#3 + rangenext(0,$27)
  (bool~) render::$1 ← (byte) render::x#1 != rangelast(0,$27)
  if((bool~) render::$1) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte) render::y#3 ← phi( render::@5/(byte) render::y#5 )
  (byte*) render::colline#3 ← phi( render::@5/(byte*) render::colline#2 )
  (byte*~) render::$2 ← (byte*) render::colline#3 + (byte/signed byte/word/signed word/dword/signed dword) $28
  (byte*) render::colline#1 ← (byte*~) render::$2
  (byte) render::y#1 ← (byte) render::y#3 + rangenext(0,$18)
  (bool~) render::$3 ← (byte) render::y#1 != rangelast(0,$18)
  if((bool~) render::$3) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  (byte) findcol::y#8 ← phi( render::@2/(byte) findcol::y#0 )
  (byte) findcol::x#5 ← phi( render::@2/(byte) findcol::x#0 )
  (byte) findcol::mindiff#0 ← (byte/word/signed word/dword/signed dword) $ff
  (byte) findcol::mincol#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) findcol::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte) findcol::mincol#11 ← phi( findcol/(byte) findcol::mincol#0 findcol::@8/(byte) findcol::mincol#3 )
  (byte) findcol::mindiff#9 ← phi( findcol/(byte) findcol::mindiff#0 findcol::@8/(byte) findcol::mindiff#11 )
  (byte) findcol::y#5 ← phi( findcol/(byte) findcol::y#8 findcol::@8/(byte) findcol::y#9 )
  (byte) findcol::x#1 ← phi( findcol/(byte) findcol::x#5 findcol::@8/(byte) findcol::x#6 )
  (byte) findcol::i#2 ← phi( findcol/(byte) findcol::i#0 findcol::@8/(byte) findcol::i#1 )
  (byte) findcol::xp#0 ← *((byte[]) XPOS#0 + (byte) findcol::i#2)
  (byte) findcol::yp#0 ← *((byte[]) YPOS#0 + (byte) findcol::i#2)
  (bool~) findcol::$0 ← (byte) findcol::x#1 == (byte) findcol::xp#0
  (bool~) findcol::$1 ← ! (bool~) findcol::$0
  if((bool~) findcol::$1) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@3
  (byte) findcol::mincol#10 ← phi( findcol::@1/(byte) findcol::mincol#11 findcol::@3/(byte) findcol::mincol#12 )
  (byte) findcol::i#11 ← phi( findcol::@1/(byte) findcol::i#2 findcol::@3/(byte) findcol::i#12 )
  (byte) findcol::mindiff#8 ← phi( findcol::@1/(byte) findcol::mindiff#9 findcol::@3/(byte) findcol::mindiff#10 )
  (byte) findcol::yp#7 ← phi( findcol::@1/(byte) findcol::yp#0 findcol::@3/(byte) findcol::yp#8 )
  (byte) findcol::y#10 ← phi( findcol::@1/(byte) findcol::y#5 findcol::@3/(byte) findcol::y#11 )
  (byte) findcol::xp#1 ← phi( findcol::@1/(byte) findcol::xp#0 findcol::@3/(byte) findcol::xp#4 )
  (byte) findcol::x#2 ← phi( findcol::@1/(byte) findcol::x#1 findcol::@3/(byte) findcol::x#7 )
  (byte) findcol::diff#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) findcol::$4 ← (byte) findcol::x#2 < (byte) findcol::xp#1
  if((bool~) findcol::$4) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  (byte) findcol::mincol#13 ← phi( findcol::@1/(byte) findcol::mincol#11 )
  (byte) findcol::i#13 ← phi( findcol::@1/(byte) findcol::i#2 )
  (byte) findcol::mindiff#12 ← phi( findcol::@1/(byte) findcol::mindiff#9 )
  (byte) findcol::xp#5 ← phi( findcol::@1/(byte) findcol::xp#0 )
  (byte) findcol::x#8 ← phi( findcol::@1/(byte) findcol::x#1 )
  (byte) findcol::yp#1 ← phi( findcol::@1/(byte) findcol::yp#0 )
  (byte) findcol::y#1 ← phi( findcol::@1/(byte) findcol::y#5 )
  (bool~) findcol::$2 ← (byte) findcol::y#1 == (byte) findcol::yp#1
  (bool~) findcol::$3 ← ! (bool~) findcol::$2
  if((bool~) findcol::$3) goto findcol::@3
  to:findcol::@10
findcol::@3: scope:[findcol]  from findcol::@9
  (byte) findcol::mincol#12 ← phi( findcol::@9/(byte) findcol::mincol#13 )
  (byte) findcol::i#12 ← phi( findcol::@9/(byte) findcol::i#13 )
  (byte) findcol::mindiff#10 ← phi( findcol::@9/(byte) findcol::mindiff#12 )
  (byte) findcol::yp#8 ← phi( findcol::@9/(byte) findcol::yp#1 )
  (byte) findcol::y#11 ← phi( findcol::@9/(byte) findcol::y#1 )
  (byte) findcol::xp#4 ← phi( findcol::@9/(byte) findcol::xp#5 )
  (byte) findcol::x#7 ← phi( findcol::@9/(byte) findcol::x#8 )
  to:findcol::@2
findcol::@10: scope:[findcol]  from findcol::@9
  (byte) findcol::return#1 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@10 findcol::@17
  (byte) findcol::return#5 ← phi( findcol::@10/(byte) findcol::return#1 findcol::@17/(byte) findcol::return#3 )
  (byte) findcol::return#2 ← (byte) findcol::return#5
  return 
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::mincol#9 ← phi( findcol::@2/(byte) findcol::mincol#10 )
  (byte) findcol::i#10 ← phi( findcol::@2/(byte) findcol::i#11 )
  (byte) findcol::mindiff#7 ← phi( findcol::@2/(byte) findcol::mindiff#8 )
  (byte) findcol::yp#6 ← phi( findcol::@2/(byte) findcol::yp#7 )
  (byte) findcol::y#7 ← phi( findcol::@2/(byte) findcol::y#10 )
  (byte) findcol::x#3 ← phi( findcol::@2/(byte) findcol::x#2 )
  (byte) findcol::xp#2 ← phi( findcol::@2/(byte) findcol::xp#1 )
  (byte~) findcol::$6 ← (byte) findcol::xp#2 - (byte) findcol::x#3
  (byte) findcol::diff#1 ← (byte~) findcol::$6
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::mincol#8 ← phi( findcol::@2/(byte) findcol::mincol#10 )
  (byte) findcol::i#9 ← phi( findcol::@2/(byte) findcol::i#11 )
  (byte) findcol::mindiff#6 ← phi( findcol::@2/(byte) findcol::mindiff#8 )
  (byte) findcol::yp#5 ← phi( findcol::@2/(byte) findcol::yp#7 )
  (byte) findcol::y#6 ← phi( findcol::@2/(byte) findcol::y#10 )
  (byte) findcol::xp#3 ← phi( findcol::@2/(byte) findcol::xp#1 )
  (byte) findcol::x#4 ← phi( findcol::@2/(byte) findcol::x#2 )
  (byte~) findcol::$5 ← (byte) findcol::x#4 - (byte) findcol::xp#3
  (byte) findcol::diff#2 ← (byte~) findcol::$5
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::mincol#7 ← phi( findcol::@12/(byte) findcol::mincol#8 findcol::@4/(byte) findcol::mincol#9 )
  (byte) findcol::x#13 ← phi( findcol::@12/(byte) findcol::x#4 findcol::@4/(byte) findcol::x#3 )
  (byte) findcol::i#8 ← phi( findcol::@12/(byte) findcol::i#9 findcol::@4/(byte) findcol::i#10 )
  (byte) findcol::mindiff#5 ← phi( findcol::@12/(byte) findcol::mindiff#6 findcol::@4/(byte) findcol::mindiff#7 )
  (byte) findcol::diff#9 ← phi( findcol::@12/(byte) findcol::diff#2 findcol::@4/(byte) findcol::diff#1 )
  (byte) findcol::yp#2 ← phi( findcol::@12/(byte) findcol::yp#5 findcol::@4/(byte) findcol::yp#6 )
  (byte) findcol::y#2 ← phi( findcol::@12/(byte) findcol::y#6 findcol::@4/(byte) findcol::y#7 )
  (bool~) findcol::$7 ← (byte) findcol::y#2 < (byte) findcol::yp#2
  if((bool~) findcol::$7) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte) findcol::mincol#6 ← phi( findcol::@5/(byte) findcol::mincol#7 )
  (byte) findcol::x#12 ← phi( findcol::@5/(byte) findcol::x#13 )
  (byte) findcol::i#7 ← phi( findcol::@5/(byte) findcol::i#8 )
  (byte) findcol::mindiff#4 ← phi( findcol::@5/(byte) findcol::mindiff#5 )
  (byte) findcol::diff#5 ← phi( findcol::@5/(byte) findcol::diff#9 )
  (byte) findcol::y#3 ← phi( findcol::@5/(byte) findcol::y#2 )
  (byte) findcol::yp#3 ← phi( findcol::@5/(byte) findcol::yp#2 )
  (byte~) findcol::$10 ← (byte) findcol::yp#3 - (byte) findcol::y#3
  (byte~) findcol::$11 ← (byte) findcol::diff#5 + (byte~) findcol::$10
  (byte) findcol::diff#3 ← (byte~) findcol::$11
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte) findcol::mincol#5 ← phi( findcol::@5/(byte) findcol::mincol#7 )
  (byte) findcol::x#11 ← phi( findcol::@5/(byte) findcol::x#13 )
  (byte) findcol::i#6 ← phi( findcol::@5/(byte) findcol::i#8 )
  (byte) findcol::mindiff#3 ← phi( findcol::@5/(byte) findcol::mindiff#5 )
  (byte) findcol::diff#6 ← phi( findcol::@5/(byte) findcol::diff#9 )
  (byte) findcol::yp#4 ← phi( findcol::@5/(byte) findcol::yp#2 )
  (byte) findcol::y#4 ← phi( findcol::@5/(byte) findcol::y#2 )
  (byte~) findcol::$8 ← (byte) findcol::y#4 - (byte) findcol::yp#4
  (byte~) findcol::$9 ← (byte) findcol::diff#6 + (byte~) findcol::$8
  (byte) findcol::diff#4 ← (byte~) findcol::$9
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::y#13 ← phi( findcol::@14/(byte) findcol::y#4 findcol::@6/(byte) findcol::y#3 )
  (byte) findcol::mincol#4 ← phi( findcol::@14/(byte) findcol::mincol#5 findcol::@6/(byte) findcol::mincol#6 )
  (byte) findcol::x#10 ← phi( findcol::@14/(byte) findcol::x#11 findcol::@6/(byte) findcol::x#12 )
  (byte) findcol::i#5 ← phi( findcol::@14/(byte) findcol::i#6 findcol::@6/(byte) findcol::i#7 )
  (byte) findcol::mindiff#2 ← phi( findcol::@14/(byte) findcol::mindiff#3 findcol::@6/(byte) findcol::mindiff#4 )
  (byte) findcol::diff#7 ← phi( findcol::@14/(byte) findcol::diff#4 findcol::@6/(byte) findcol::diff#3 )
  (bool~) findcol::$12 ← (byte) findcol::diff#7 < (byte) findcol::mindiff#2
  (bool~) findcol::$13 ← ! (bool~) findcol::$12
  if((bool~) findcol::$13) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::mindiff#1 findcol::@7/(byte) findcol::mindiff#2 )
  (byte) findcol::y#9 ← phi( findcol::@16/(byte) findcol::y#12 findcol::@7/(byte) findcol::y#13 )
  (byte) findcol::mincol#3 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@7/(byte) findcol::mincol#4 )
  (byte) findcol::x#6 ← phi( findcol::@16/(byte) findcol::x#9 findcol::@7/(byte) findcol::x#10 )
  (byte) findcol::i#3 ← phi( findcol::@16/(byte) findcol::i#4 findcol::@7/(byte) findcol::i#5 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#3
  (bool~) findcol::$14 ← (byte) findcol::i#1 < (byte) numpoints#0
  if((bool~) findcol::$14) goto findcol::@1
  to:findcol::@17
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::y#12 ← phi( findcol::@7/(byte) findcol::y#13 )
  (byte) findcol::x#9 ← phi( findcol::@7/(byte) findcol::x#10 )
  (byte) findcol::i#4 ← phi( findcol::@7/(byte) findcol::i#5 )
  (byte) findcol::diff#8 ← phi( findcol::@7/(byte) findcol::diff#7 )
  (byte) findcol::mindiff#1 ← (byte) findcol::diff#8
  (byte) findcol::mincol#1 ← *((byte[]) COLS#0 + (byte) findcol::i#4)
  to:findcol::@8
findcol::@17: scope:[findcol]  from findcol::@8
  (byte) findcol::mincol#2 ← phi( findcol::@8/(byte) findcol::mincol#3 )
  (byte) findcol::return#3 ← (byte) findcol::mincol#2
  to:findcol::@return
@5: scope:[]  from @begin
  call main 
  to:@6
@6: scope:[]  from @5
  to:@end
@end: scope:[]  from @6

SYMBOL TABLE SSA
(label) @5
(label) @6
(label) @begin
(label) @end
(byte*) COLORS
(byte*) COLORS#0
(byte[]) COLS
(byte[]) COLS#0
(byte) FILL
(byte) FILL#0
(byte*) SCREEN
(byte*) SCREEN#0
(byte[]) XPOS
(byte[]) XPOS#0
(byte[]) YPOS
(byte[]) YPOS#0
(void()) animate()
(byte/signed word/word/dword/signed dword~) animate::$0
(bool~) animate::$1
(bool~) animate::$10
(bool~) animate::$11
(byte/signed word/word/dword/signed dword~) animate::$12
(bool~) animate::$13
(bool~) animate::$14
(byte/signed word/word/dword/signed dword~) animate::$15
(bool~) animate::$16
(bool~) animate::$17
(byte/signed word/word/dword/signed dword~) animate::$18
(bool~) animate::$2
(byte/signed word/word/dword/signed dword~) animate::$3
(bool~) animate::$4
(bool~) animate::$5
(byte/signed word/word/dword/signed dword~) animate::$6
(bool~) animate::$7
(bool~) animate::$8
(byte/signed word/word/dword/signed dword~) animate::$9
(label) animate::@1
(label) animate::@10
(label) animate::@11
(label) animate::@12
(label) animate::@2
(label) animate::@3
(label) animate::@4
(label) animate::@5
(label) animate::@6
(label) animate::@7
(label) animate::@8
(label) animate::@9
(label) animate::@return
(byte()) findcol((byte) findcol::x , (byte) findcol::y)
(bool~) findcol::$0
(bool~) findcol::$1
(byte~) findcol::$10
(byte~) findcol::$11
(bool~) findcol::$12
(bool~) findcol::$13
(bool~) findcol::$14
(bool~) findcol::$2
(bool~) findcol::$3
(bool~) findcol::$4
(byte~) findcol::$5
(byte~) findcol::$6
(bool~) findcol::$7
(byte~) findcol::$8
(byte~) findcol::$9
(label) findcol::@1
(label) findcol::@10
(label) findcol::@12
(label) findcol::@14
(label) findcol::@16
(label) findcol::@17
(label) findcol::@2
(label) findcol::@3
(label) findcol::@4
(label) findcol::@5
(label) findcol::@6
(label) findcol::@7
(label) findcol::@8
(label) findcol::@9
(label) findcol::@return
(byte) findcol::diff
(byte) findcol::diff#0
(byte) findcol::diff#1
(byte) findcol::diff#2
(byte) findcol::diff#3
(byte) findcol::diff#4
(byte) findcol::diff#5
(byte) findcol::diff#6
(byte) findcol::diff#7
(byte) findcol::diff#8
(byte) findcol::diff#9
(byte) findcol::i
(byte) findcol::i#0
(byte) findcol::i#1
(byte) findcol::i#10
(byte) findcol::i#11
(byte) findcol::i#12
(byte) findcol::i#13
(byte) findcol::i#2
(byte) findcol::i#3
(byte) findcol::i#4
(byte) findcol::i#5
(byte) findcol::i#6
(byte) findcol::i#7
(byte) findcol::i#8
(byte) findcol::i#9
(byte) findcol::mincol
(byte) findcol::mincol#0
(byte) findcol::mincol#1
(byte) findcol::mincol#10
(byte) findcol::mincol#11
(byte) findcol::mincol#12
(byte) findcol::mincol#13
(byte) findcol::mincol#2
(byte) findcol::mincol#3
(byte) findcol::mincol#4
(byte) findcol::mincol#5
(byte) findcol::mincol#6
(byte) findcol::mincol#7
(byte) findcol::mincol#8
(byte) findcol::mincol#9
(byte) findcol::mindiff
(byte) findcol::mindiff#0
(byte) findcol::mindiff#1
(byte) findcol::mindiff#10
(byte) findcol::mindiff#11
(byte) findcol::mindiff#12
(byte) findcol::mindiff#2
(byte) findcol::mindiff#3
(byte) findcol::mindiff#4
(byte) findcol::mindiff#5
(byte) findcol::mindiff#6
(byte) findcol::mindiff#7
(byte) findcol::mindiff#8
(byte) findcol::mindiff#9
(byte) findcol::return
(byte) findcol::return#0
(byte) findcol::return#1
(byte) findcol::return#2
(byte) findcol::return#3
(byte) findcol::return#4
(byte) findcol::return#5
(byte) findcol::x
(byte) findcol::x#0
(byte) findcol::x#1
(byte) findcol::x#10
(byte) findcol::x#11
(byte) findcol::x#12
(byte) findcol::x#13
(byte) findcol::x#2
(byte) findcol::x#3
(byte) findcol::x#4
(byte) findcol::x#5
(byte) findcol::x#6
(byte) findcol::x#7
(byte) findcol::x#8
(byte) findcol::x#9
(byte) findcol::xp
(byte) findcol::xp#0
(byte) findcol::xp#1
(byte) findcol::xp#2
(byte) findcol::xp#3
(byte) findcol::xp#4
(byte) findcol::xp#5
(byte) findcol::y
(byte) findcol::y#0
(byte) findcol::y#1
(byte) findcol::y#10
(byte) findcol::y#11
(byte) findcol::y#12
(byte) findcol::y#13
(byte) findcol::y#2
(byte) findcol::y#3
(byte) findcol::y#4
(byte) findcol::y#5
(byte) findcol::y#6
(byte) findcol::y#7
(byte) findcol::y#8
(byte) findcol::y#9
(byte) findcol::yp
(byte) findcol::yp#0
(byte) findcol::yp#1
(byte) findcol::yp#2
(byte) findcol::yp#3
(byte) findcol::yp#4
(byte) findcol::yp#5
(byte) findcol::yp#6
(byte) findcol::yp#7
(byte) findcol::yp#8
(void()) initscreen()
(byte*~) initscreen::$0
(bool~) initscreen::$1
(label) initscreen::@1
(label) initscreen::@return
(byte*) initscreen::screen
(byte*) initscreen::screen#0
(byte*) initscreen::screen#1
(byte*) initscreen::screen#2
(void()) main()
(label) main::@1
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@return
(byte) numpoints
(byte) numpoints#0
(void()) render()
(byte~) render::$0
(bool~) render::$1
(byte*~) render::$2
(bool~) render::$3
(label) render::@1
(label) render::@2
(label) render::@3
(label) render::@5
(label) render::@return
(byte) render::col
(byte) render::col#0
(byte*) render::colline
(byte*) render::colline#0
(byte*) render::colline#1
(byte*) render::colline#2
(byte*) render::colline#3
(byte*) render::colline#4
(byte*) render::colline#5
(byte) render::x
(byte) render::x#0
(byte) render::x#1
(byte) render::x#2
(byte) render::x#3
(byte) render::y
(byte) render::y#0
(byte) render::y#1
(byte) render::y#2
(byte) render::y#3
(byte) render::y#4
(byte) render::y#5

Culled Empty Block (label) main::@3
Culled Empty Block (label) animate::@5
Culled Empty Block (label) animate::@12
Culled Empty Block (label) @6
Successful SSA optimization Pass2CullEmptyBlocks
Inversing boolean not [15] (bool~) animate::$2 ← *((byte[]) XPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 0) != (byte/signed byte/word/signed word/dword/signed dword) $28 from [14] (bool~) animate::$1 ← *((byte[]) XPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 0) == (byte/signed byte/word/signed word/dword/signed dword) $28
Inversing boolean not [20] (bool~) animate::$5 ← *((byte[]) YPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 0) != (byte/signed byte/word/signed word/dword/signed dword) $19 from [19] (bool~) animate::$4 ← *((byte[]) YPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 0) == (byte/signed byte/word/signed word/dword/signed dword) $19
Inversing boolean not [26] (bool~) animate::$8 ← *((byte[]) XPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 1) != (byte/word/signed word/dword/signed dword) $ff from [25] (bool~) animate::$7 ← *((byte[]) XPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 1) == (byte/word/signed word/dword/signed dword) $ff
Inversing boolean not [32] (bool~) animate::$11 ← *((byte[]) YPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 2) != (byte/signed byte/word/signed word/dword/signed dword) $19 from [31] (bool~) animate::$10 ← *((byte[]) YPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 2) == (byte/signed byte/word/signed word/dword/signed dword) $19
Inversing boolean not [38] (bool~) animate::$14 ← *((byte[]) YPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 3) != (byte/word/signed word/dword/signed dword) $ff from [37] (bool~) animate::$13 ← *((byte[]) YPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 3) == (byte/word/signed word/dword/signed dword) $ff
Inversing boolean not [45] (bool~) animate::$17 ← *((byte[]) XPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 3) < (byte/signed byte/word/signed word/dword/signed dword) $28 from [44] (bool~) animate::$16 ← *((byte[]) XPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 3) >= (byte/signed byte/word/signed word/dword/signed dword) $28
Inversing boolean not [89] (bool~) findcol::$1 ← (byte) findcol::x#1 != (byte) findcol::xp#0 from [88] (bool~) findcol::$0 ← (byte) findcol::x#1 == (byte) findcol::xp#0
Inversing boolean not [97] (bool~) findcol::$3 ← (byte) findcol::y#1 != (byte) findcol::yp#1 from [96] (bool~) findcol::$2 ← (byte) findcol::y#1 == (byte) findcol::yp#1
Inversing boolean not [123] (bool~) findcol::$13 ← (byte) findcol::diff#7 >= (byte) findcol::mindiff#2 from [122] (bool~) findcol::$12 ← (byte) findcol::diff#7 < (byte) findcol::mindiff#2
Successful SSA optimization Pass2UnaryNotSimplification
Alias (byte) findcol::return#0 = (byte) findcol::return#4 
Alias (byte*) render::colline#2 = (byte*) render::colline#4 (byte*) render::colline#3 
Alias (byte) render::x#2 = (byte) render::x#3 
Alias (byte) render::y#2 = (byte) render::y#5 (byte) render::y#3 
Alias (byte) render::col#0 = (byte~) render::$0 
Alias (byte*) render::colline#1 = (byte*~) render::$2 
Alias (byte) findcol::y#1 = (byte) findcol::y#5 (byte) findcol::y#11 
Alias (byte) findcol::yp#0 = (byte) findcol::yp#1 (byte) findcol::yp#8 
Alias (byte) findcol::x#1 = (byte) findcol::x#8 (byte) findcol::x#7 
Alias (byte) findcol::xp#0 = (byte) findcol::xp#5 (byte) findcol::xp#4 
Alias (byte) findcol::mindiff#10 = (byte) findcol::mindiff#12 (byte) findcol::mindiff#9 
Alias (byte) findcol::i#12 = (byte) findcol::i#13 (byte) findcol::i#2 
Alias (byte) findcol::mincol#11 = (byte) findcol::mincol#13 (byte) findcol::mincol#12 
Alias (byte) findcol::return#2 = (byte) findcol::return#5 
Alias (byte) findcol::xp#1 = (byte) findcol::xp#2 (byte) findcol::xp#3 
Alias (byte) findcol::x#2 = (byte) findcol::x#3 (byte) findcol::x#4 
Alias (byte) findcol::y#10 = (byte) findcol::y#7 (byte) findcol::y#6 
Alias (byte) findcol::yp#5 = (byte) findcol::yp#6 (byte) findcol::yp#7 
Alias (byte) findcol::mindiff#6 = (byte) findcol::mindiff#7 (byte) findcol::mindiff#8 
Alias (byte) findcol::i#10 = (byte) findcol::i#11 (byte) findcol::i#9 
Alias (byte) findcol::mincol#10 = (byte) findcol::mincol#9 (byte) findcol::mincol#8 
Alias (byte) findcol::diff#1 = (byte~) findcol::$6 
Alias (byte) findcol::diff#2 = (byte~) findcol::$5 
Alias (byte) findcol::yp#2 = (byte) findcol::yp#3 (byte) findcol::yp#4 
Alias (byte) findcol::y#2 = (byte) findcol::y#3 (byte) findcol::y#4 
Alias (byte) findcol::diff#5 = (byte) findcol::diff#9 (byte) findcol::diff#6 
Alias (byte) findcol::mindiff#3 = (byte) findcol::mindiff#4 (byte) findcol::mindiff#5 
Alias (byte) findcol::i#6 = (byte) findcol::i#7 (byte) findcol::i#8 
Alias (byte) findcol::x#11 = (byte) findcol::x#12 (byte) findcol::x#13 
Alias (byte) findcol::mincol#5 = (byte) findcol::mincol#6 (byte) findcol::mincol#7 
Alias (byte) findcol::diff#3 = (byte~) findcol::$11 
Alias (byte) findcol::diff#4 = (byte~) findcol::$9 
Alias (byte) findcol::diff#7 = (byte) findcol::diff#8 (byte) findcol::mindiff#1 
Alias (byte) findcol::i#4 = (byte) findcol::i#5 
Alias (byte) findcol::x#10 = (byte) findcol::x#9 
Alias (byte) findcol::y#12 = (byte) findcol::y#13 
Alias (byte) findcol::mincol#2 = (byte) findcol::mincol#3 (byte) findcol::return#3 
Successful SSA optimization Pass2AliasElimination
Alias (byte) findcol::x#1 = (byte) findcol::x#2 (byte) findcol::x#11 (byte) findcol::x#10 (byte) findcol::x#6 
Alias (byte) findcol::xp#0 = (byte) findcol::xp#1 
Alias (byte) findcol::y#1 = (byte) findcol::y#10 (byte) findcol::y#2 (byte) findcol::y#12 (byte) findcol::y#9 
Alias (byte) findcol::yp#0 = (byte) findcol::yp#5 (byte) findcol::yp#2 
Alias (byte) findcol::mindiff#10 = (byte) findcol::mindiff#6 (byte) findcol::mindiff#3 (byte) findcol::mindiff#2 
Alias (byte) findcol::i#10 = (byte) findcol::i#12 (byte) findcol::i#6 (byte) findcol::i#4 (byte) findcol::i#3 
Alias (byte) findcol::mincol#10 = (byte) findcol::mincol#11 (byte) findcol::mincol#5 (byte) findcol::mincol#4 
Successful SSA optimization Pass2AliasElimination
Self Phi Eliminated (byte) render::y#2
Self Phi Eliminated (byte*) render::colline#2
Self Phi Eliminated (byte) findcol::x#1
Self Phi Eliminated (byte) findcol::y#1
Successful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte) render::y#2 (byte) render::y#4
Redundant Phi (byte*) render::colline#2 (byte*) render::colline#5
Redundant Phi (byte) findcol::x#5 (byte) findcol::x#0
Redundant Phi (byte) findcol::y#8 (byte) findcol::y#0
Redundant Phi (byte) findcol::x#1 (byte) findcol::x#5
Redundant Phi (byte) findcol::y#1 (byte) findcol::y#8
Successful SSA optimization Pass2RedundantPhiElimination
Simple Condition (bool~) animate::$2 [16] if(*((byte[]) XPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 0)!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto animate::@1
Simple Condition (bool~) animate::$5 [21] if(*((byte[]) YPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 0)!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto animate::@2
Simple Condition (bool~) animate::$8 [27] if(*((byte[]) XPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 1)!=(byte/word/signed word/dword/signed dword) $ff) goto animate::@3
Simple Condition (bool~) animate::$11 [33] if(*((byte[]) YPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 2)!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto animate::@4
Simple Condition (bool~) animate::$14 [39] if(*((byte[]) YPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 3)!=(byte/word/signed word/dword/signed dword) $ff) goto animate::@return
Simple Condition (bool~) animate::$17 [46] if(*((byte[]) XPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 3)<(byte/signed byte/word/signed word/dword/signed dword) $28) goto animate::@return
Simple Condition (bool~) initscreen::$1 [56] if((byte*) initscreen::screen#1<(byte*~) initscreen::$0) goto initscreen::@1
Simple Condition (bool~) render::$1 [73] if((byte) render::x#1!=rangelast(0,$27)) goto render::@2
Simple Condition (bool~) render::$3 [79] if((byte) render::y#1!=rangelast(0,$18)) goto render::@1
Simple Condition (bool~) findcol::$1 [90] if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2
Simple Condition (bool~) findcol::$4 [94] if((byte) findcol::x#0<(byte) findcol::xp#0) goto findcol::@4
Simple Condition (bool~) findcol::$3 [98] if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@3
Simple Condition (bool~) findcol::$7 [112] if((byte) findcol::y#0<(byte) findcol::yp#0) goto findcol::@6
Simple Condition (bool~) findcol::$13 [124] if((byte) findcol::diff#7>=(byte) findcol::mindiff#10) goto findcol::@8
Simple Condition (bool~) findcol::$14 [128] if((byte) findcol::i#1<(byte) numpoints#0) goto findcol::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) SCREEN#0 = ((byte*))$400
Constant (const byte*) COLORS#0 = ((byte*))$d800
Constant (const byte) FILL#0 = $e6
Constant (const byte) numpoints#0 = 6
Constant (const byte[]) XPOS#0 = { 5, $f, 6, $22, $15, $1f }
Constant (const byte[]) YPOS#0 = { 5, 8, $e, 2, $11, $16 }
Constant (const byte[]) COLS#0 = { 1, 2, 3, 4, 5, 7 }
Constant (const byte) render::y#0 = 0
Constant (const byte) render::x#0 = 0
Constant (const byte) findcol::mindiff#0 = $ff
Constant (const byte) findcol::mincol#0 = 0
Constant (const byte) findcol::i#0 = 0
Constant (const byte) findcol::diff#0 = 0
Constant (const byte) findcol::return#1 = 0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) initscreen::screen#0 = SCREEN#0
Constant (const byte*) initscreen::$0 = SCREEN#0+$3e8
Constant (const byte*) render::colline#0 = COLORS#0
Successful SSA optimization Pass2ConstantIdentification
Consolidated array index constant in *(XPOS#0+0)
Consolidated array index constant in *(XPOS#0+0)
Consolidated array index constant in *(XPOS#0+0)
Consolidated array index constant in *(YPOS#0+0)
Consolidated array index constant in *(YPOS#0+0)
Consolidated array index constant in *(YPOS#0+0)
Consolidated array index constant in *(XPOS#0+0)
Consolidated array index constant in *(XPOS#0+1)
Consolidated array index constant in *(XPOS#0+1)
Consolidated array index constant in *(XPOS#0+1)
Consolidated array index constant in *(YPOS#0+0)
Consolidated array index constant in *(YPOS#0+2)
Consolidated array index constant in *(YPOS#0+2)
Consolidated array index constant in *(YPOS#0+2)
Consolidated array index constant in *(XPOS#0+1)
Consolidated array index constant in *(YPOS#0+3)
Consolidated array index constant in *(YPOS#0+3)
Consolidated array index constant in *(YPOS#0+3)
Consolidated array index constant in *(YPOS#0+2)
Consolidated array index constant in *(YPOS#0+3)
Consolidated array index constant in *(XPOS#0+3)
Consolidated array index constant in *(XPOS#0+3)
Consolidated array index constant in *(XPOS#0+3)
Consolidated array index constant in *(XPOS#0+3)
Consolidated array index constant in *(XPOS#0+3)
Successful SSA optimization Pass2ConstantAdditionElimination
if() condition always true - replacing block destination [3] if(true) goto main::@1
Successful SSA optimization Pass2ConstantIfs
Successful SSA optimization PassNEliminateUnusedVars
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Resolved ranged next value render::x#1 ← ++ render::x#2 to ++
Resolved ranged comparison value if(render::x#1!=rangelast(0,$27)) goto render::@2 to (byte/signed byte/word/signed word/dword/signed dword) $28
Resolved ranged next value render::y#1 ← ++ render::y#4 to ++
Resolved ranged comparison value if(render::y#1!=rangelast(0,$18)) goto render::@1 to (byte/signed byte/word/signed word/dword/signed dword) $19
Culled Empty Block (label) main::@5
Culled Empty Block (label) findcol::@3
Culled Empty Block (label) findcol::@10
Culled Empty Block (label) findcol::@17
Successful SSA optimization Pass2CullEmptyBlocks
Inlining constant with var siblings (const byte*) initscreen::screen#0
Inlining constant with var siblings (const byte) render::y#0
Inlining constant with var siblings (const byte) render::x#0
Inlining constant with var siblings (const byte*) render::colline#0
Inlining constant with var siblings (const byte) findcol::mindiff#0
Inlining constant with var siblings (const byte) findcol::mincol#0
Inlining constant with var siblings (const byte) findcol::i#0
Inlining constant with var siblings (const byte) findcol::return#1
Constant inlined findcol::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined render::colline#0 = (const byte*) COLORS#0
Constant inlined render::x#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined initscreen::screen#0 = (const byte*) SCREEN#0
Constant inlined findcol::return#1 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined render::y#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined findcol::mincol#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined findcol::mindiff#0 = (byte/word/signed word/dword/signed dword) $ff
Constant inlined initscreen::$0 = (const byte*) SCREEN#0+(word/signed word/dword/signed dword) $3e8
Successful SSA optimization Pass2ConstantInlining
Simplifying constant plus zero XPOS#0+0
Simplifying constant plus zero XPOS#0+0
Simplifying constant plus zero XPOS#0+0
Simplifying constant plus zero YPOS#0+0
Simplifying constant plus zero YPOS#0+0
Simplifying constant plus zero YPOS#0+0
Simplifying constant plus zero XPOS#0+0
Simplifying constant plus zero YPOS#0+0
Added new block during phi lifting render::@6(between render::@3 and render::@1)
Added new block during phi lifting render::@7(between render::@5 and render::@2)
Added new block during phi lifting findcol::@19(between findcol::@8 and findcol::@1)
Added new block during phi lifting findcol::@20(between findcol::@8 and findcol::@return)
Added new block during phi lifting findcol::@21(between findcol::@7 and findcol::@8)
Added new block during phi lifting initscreen::@3(between initscreen::@1 and initscreen::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @5
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of render
Adding NOP phi() at start of findcol
Adding NOP phi() at start of initscreen
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to initscreen:5 render:7 animate:9 
Calls in [render] to findcol:41 

Created 12 initial phi equivalence classes
Coalesced [51] render::y#6 ← render::y#1
Coalesced [52] render::colline#6 ← render::colline#1
Coalesced [53] render::x#4 ← render::x#1
Coalesced [64] findcol::diff#10 ← findcol::diff#2
Coalesced [69] findcol::diff#12 ← findcol::diff#4
Coalesced [73] findcol::mincol#15 ← findcol::mincol#1
Coalesced [74] findcol::mindiff#14 ← findcol::diff#7
Coalesced [78] findcol::return#6 ← findcol::mincol#2
Coalesced [79] findcol::i#14 ← findcol::i#1
Not coalescing [80] findcol::mindiff#13 ← findcol::mindiff#11
Coalesced [81] findcol::mincol#14 ← findcol::mincol#2
Coalesced (already) [82] findcol::mincol#16 ← findcol::mincol#10
Not coalescing [83] findcol::mindiff#15 ← findcol::mindiff#10
Coalesced [86] findcol::diff#13 ← findcol::diff#3
Coalesced [88] findcol::diff#11 ← findcol::diff#1
Coalesced [95] initscreen::screen#3 ← initscreen::screen#1
Coalesced down to 9 phi equivalence classes
Culled Empty Block (label) render::@6
Culled Empty Block (label) render::@7
Culled Empty Block (label) findcol::@20
Culled Empty Block (label) initscreen::@3
Renumbering block @5 to @1
Renumbering block main::@4 to main::@2
Renumbering block animate::@6 to animate::@5
Renumbering block animate::@7 to animate::@6
Renumbering block animate::@8 to animate::@7
Renumbering block animate::@9 to animate::@8
Renumbering block animate::@10 to animate::@9
Renumbering block animate::@11 to animate::@10
Renumbering block render::@5 to render::@4
Renumbering block findcol::@4 to findcol::@3
Renumbering block findcol::@5 to findcol::@4
Renumbering block findcol::@6 to findcol::@5
Renumbering block findcol::@7 to findcol::@6
Renumbering block findcol::@8 to findcol::@7
Renumbering block findcol::@9 to findcol::@8
Renumbering block findcol::@12 to findcol::@9
Renumbering block findcol::@14 to findcol::@10
Renumbering block findcol::@16 to findcol::@11
Renumbering block findcol::@19 to findcol::@12
Renumbering block findcol::@21 to findcol::@13
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of render
Adding NOP phi() at start of findcol
Adding NOP phi() at start of initscreen

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  [5] call initscreen 
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [6] phi()
  [7] call render 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [8] phi()
  [9] call animate 
  to:main::@1
animate: scope:[animate]  from main::@2
  [10] (byte/signed word/word/dword/signed dword~) animate::$0 ← *((const byte[]) XPOS#0) + (byte/signed byte/word/signed word/dword/signed dword) 1
  [11] *((const byte[]) XPOS#0) ← (byte/signed word/word/dword/signed dword~) animate::$0
  [12] if(*((const byte[]) XPOS#0)!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto animate::@1
  to:animate::@5
animate::@5: scope:[animate]  from animate
  [13] *((const byte[]) XPOS#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:animate::@1
animate::@1: scope:[animate]  from animate animate::@5
  [14] (byte/signed word/word/dword/signed dword~) animate::$3 ← *((const byte[]) YPOS#0) + (byte/signed byte/word/signed word/dword/signed dword) 1
  [15] *((const byte[]) YPOS#0) ← (byte/signed word/word/dword/signed dword~) animate::$3
  [16] if(*((const byte[]) YPOS#0)!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto animate::@2
  to:animate::@6
animate::@6: scope:[animate]  from animate::@1
  [17] *((const byte[]) YPOS#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:animate::@2
animate::@2: scope:[animate]  from animate::@1 animate::@6
  [18] (byte/signed word/word/dword/signed dword~) animate::$6 ← *((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 1) - (byte/signed byte/word/signed word/dword/signed dword) 1
  [19] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte/signed word/word/dword/signed dword~) animate::$6
  [20] if(*((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 1)!=(byte/word/signed word/dword/signed dword) $ff) goto animate::@3
  to:animate::@7
animate::@7: scope:[animate]  from animate::@2
  [21] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte/signed byte/word/signed word/dword/signed dword) $28
  to:animate::@3
animate::@3: scope:[animate]  from animate::@2 animate::@7
  [22] (byte/signed word/word/dword/signed dword~) animate::$9 ← *((const byte[]) YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 2) + (byte/signed byte/word/signed word/dword/signed dword) 1
  [23] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte/signed word/word/dword/signed dword~) animate::$9
  [24] if(*((const byte[]) YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 2)!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto animate::@4
  to:animate::@8
animate::@8: scope:[animate]  from animate::@3
  [25] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:animate::@4
animate::@4: scope:[animate]  from animate::@3 animate::@8
  [26] (byte/signed word/word/dword/signed dword~) animate::$12 ← *((const byte[]) YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3) - (byte/signed byte/word/signed word/dword/signed dword) 1
  [27] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte/signed word/word/dword/signed dword~) animate::$12
  [28] if(*((const byte[]) YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3)!=(byte/word/signed word/dword/signed dword) $ff) goto animate::@return
  to:animate::@9
animate::@9: scope:[animate]  from animate::@4
  [29] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte/signed byte/word/signed word/dword/signed dword) $19
  [30] (byte/signed word/word/dword/signed dword~) animate::$15 ← *((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3) + (byte/signed byte/word/signed word/dword/signed dword) 7
  [31] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte/signed word/word/dword/signed dword~) animate::$15
  [32] if(*((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3)<(byte/signed byte/word/signed word/dword/signed dword) $28) goto animate::@return
  to:animate::@10
animate::@10: scope:[animate]  from animate::@9
  [33] (byte/signed word/word/dword/signed dword~) animate::$18 ← *((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3) - (byte/signed byte/word/signed word/dword/signed dword) $28
  [34] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte/signed word/word/dword/signed dword~) animate::$18
  to:animate::@return
animate::@return: scope:[animate]  from animate::@10 animate::@4 animate::@9
  [35] return 
  to:@return
render: scope:[render]  from main::@1
  [36] phi()
  to:render::@1
render::@1: scope:[render]  from render render::@3
  [37] (byte*) render::colline#5 ← phi( render/(const byte*) COLORS#0 render::@3/(byte*) render::colline#1 )
  [37] (byte) render::y#4 ← phi( render/(byte/signed byte/word/signed word/dword/signed dword) 0 render::@3/(byte) render::y#1 )
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@4
  [38] (byte) render::x#2 ← phi( render::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 render::@4/(byte) render::x#1 )
  [39] (byte) findcol::x#0 ← (byte) render::x#2
  [40] (byte) findcol::y#0 ← (byte) render::y#4
  [41] call findcol 
  [42] (byte) findcol::return#0 ← (byte) findcol::return#2
  to:render::@4
render::@4: scope:[render]  from render::@2
  [43] (byte) render::col#0 ← (byte) findcol::return#0
  [44] *((byte*) render::colline#5 + (byte) render::x#2) ← (byte) render::col#0
  [45] (byte) render::x#1 ← ++ (byte) render::x#2
  [46] if((byte) render::x#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@4
  [47] (byte*) render::colline#1 ← (byte*) render::colline#5 + (byte/signed byte/word/signed word/dword/signed dword) $28
  [48] (byte) render::y#1 ← ++ (byte) render::y#4
  [49] if((byte) render::y#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  [50] return 
  to:@return
findcol: scope:[findcol]  from render::@2
  [51] phi()
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@12
  [52] (byte) findcol::mincol#10 ← phi( findcol/(byte/signed byte/word/signed word/dword/signed dword) 0 findcol::@12/(byte) findcol::mincol#2 )
  [52] (byte) findcol::mindiff#10 ← phi( findcol/(byte/word/signed word/dword/signed dword) $ff findcol::@12/(byte~) findcol::mindiff#13 )
  [52] (byte) findcol::i#10 ← phi( findcol/(byte/signed byte/word/signed word/dword/signed dword) 0 findcol::@12/(byte) findcol::i#1 )
  [53] (byte) findcol::xp#0 ← *((const byte[]) XPOS#0 + (byte) findcol::i#10)
  [54] (byte) findcol::yp#0 ← *((const byte[]) YPOS#0 + (byte) findcol::i#10)
  [55] if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2
  to:findcol::@8
findcol::@8: scope:[findcol]  from findcol::@1
  [56] if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@2
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@7 findcol::@8
  [57] (byte) findcol::return#2 ← phi( findcol::@8/(byte/signed byte/word/signed word/dword/signed dword) 0 findcol::@7/(byte) findcol::mincol#2 )
  [58] return 
  to:@return
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@8
  [59] if((byte) findcol::x#0<(byte) findcol::xp#0) goto findcol::@3
  to:findcol::@9
findcol::@9: scope:[findcol]  from findcol::@2
  [60] (byte) findcol::diff#2 ← (byte) findcol::x#0 - (byte) findcol::xp#0
  to:findcol::@4
findcol::@4: scope:[findcol]  from findcol::@3 findcol::@9
  [61] (byte) findcol::diff#5 ← phi( findcol::@9/(byte) findcol::diff#2 findcol::@3/(byte) findcol::diff#1 )
  [62] if((byte) findcol::y#0<(byte) findcol::yp#0) goto findcol::@5
  to:findcol::@10
findcol::@10: scope:[findcol]  from findcol::@4
  [63] (byte~) findcol::$8 ← (byte) findcol::y#0 - (byte) findcol::yp#0
  [64] (byte) findcol::diff#4 ← (byte) findcol::diff#5 + (byte~) findcol::$8
  to:findcol::@6
findcol::@6: scope:[findcol]  from findcol::@10 findcol::@5
  [65] (byte) findcol::diff#7 ← phi( findcol::@10/(byte) findcol::diff#4 findcol::@5/(byte) findcol::diff#3 )
  [66] if((byte) findcol::diff#7>=(byte) findcol::mindiff#10) goto findcol::@13
  to:findcol::@11
findcol::@11: scope:[findcol]  from findcol::@6
  [67] (byte) findcol::mincol#1 ← *((const byte[]) COLS#0 + (byte) findcol::i#10)
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@11 findcol::@13
  [68] (byte) findcol::mindiff#11 ← phi( findcol::@11/(byte) findcol::diff#7 findcol::@13/(byte~) findcol::mindiff#15 )
  [68] (byte) findcol::mincol#2 ← phi( findcol::@11/(byte) findcol::mincol#1 findcol::@13/(byte) findcol::mincol#10 )
  [69] (byte) findcol::i#1 ← ++ (byte) findcol::i#10
  [70] if((byte) findcol::i#1<(const byte) numpoints#0) goto findcol::@12
  to:findcol::@return
findcol::@12: scope:[findcol]  from findcol::@7
  [71] (byte~) findcol::mindiff#13 ← (byte) findcol::mindiff#11
  to:findcol::@1
findcol::@13: scope:[findcol]  from findcol::@6
  [72] (byte~) findcol::mindiff#15 ← (byte) findcol::mindiff#10
  to:findcol::@7
findcol::@5: scope:[findcol]  from findcol::@4
  [73] (byte~) findcol::$10 ← (byte) findcol::yp#0 - (byte) findcol::y#0
  [74] (byte) findcol::diff#3 ← (byte) findcol::diff#5 + (byte~) findcol::$10
  to:findcol::@6
findcol::@3: scope:[findcol]  from findcol::@2
  [75] (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0
  to:findcol::@4
initscreen: scope:[initscreen]  from main
  [76] phi()
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  [77] (byte*) initscreen::screen#2 ← phi( initscreen/(const byte*) SCREEN#0 initscreen::@1/(byte*) initscreen::screen#1 )
  [78] *((byte*) initscreen::screen#2) ← (const byte) FILL#0
  [79] (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  [80] if((byte*) initscreen::screen#1<(const byte*) SCREEN#0+(word/signed word/dword/signed dword) $3e8) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  [81] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte*) COLORS
(byte[]) COLS
(byte) FILL
(byte*) SCREEN
(byte[]) XPOS
(byte[]) YPOS
(void()) animate()
(byte/signed word/word/dword/signed dword~) animate::$0 4.0
(byte/signed word/word/dword/signed dword~) animate::$12 4.0
(byte/signed word/word/dword/signed dword~) animate::$15 4.0
(byte/signed word/word/dword/signed dword~) animate::$18 4.0
(byte/signed word/word/dword/signed dword~) animate::$3 4.0
(byte/signed word/word/dword/signed dword~) animate::$6 4.0
(byte/signed word/word/dword/signed dword~) animate::$9 4.0
(byte()) findcol((byte) findcol::x , (byte) findcol::y)
(byte~) findcol::$10 20002.0
(byte~) findcol::$8 20002.0
(byte) findcol::diff
(byte) findcol::diff#1 20002.0
(byte) findcol::diff#2 20002.0
(byte) findcol::diff#3 20002.0
(byte) findcol::diff#4 20002.0
(byte) findcol::diff#5 10001.0
(byte) findcol::diff#7 13334.666666666666
(byte) findcol::i
(byte) findcol::i#1 10001.0
(byte) findcol::i#10 2631.842105263158
(byte) findcol::mincol
(byte) findcol::mincol#1 20002.0
(byte) findcol::mincol#10 1176.5882352941176
(byte) findcol::mincol#2 10001.0
(byte) findcol::mindiff
(byte) findcol::mindiff#10 1875.1875
(byte) findcol::mindiff#11 10001.0
(byte~) findcol::mindiff#13 20002.0
(byte~) findcol::mindiff#15 20002.0
(byte) findcol::return
(byte) findcol::return#0 2002.0
(byte) findcol::return#2 3667.333333333333
(byte) findcol::x
(byte) findcol::x#0 1640.2
(byte) findcol::xp
(byte) findcol::xp#0 10001.0
(byte) findcol::y
(byte) findcol::y#0 1708.5416666666665
(byte) findcol::yp
(byte) findcol::yp#0 6250.625
(void()) initscreen()
(byte*) initscreen::screen
(byte*) initscreen::screen#1 16.5
(byte*) initscreen::screen#2 16.5
(void()) main()
(byte) numpoints
(void()) render()
(byte) render::col
(byte) render::col#0 2002.0
(byte*) render::colline
(byte*) render::colline#1 67.33333333333333
(byte*) render::colline#5 120.29999999999998
(byte) render::x
(byte) render::x#1 1501.5
(byte) render::x#2 572.0
(byte) render::y
(byte) render::y#1 151.5
(byte) render::y#4 109.36363636363637

Initial phi equivalence classes
[ render::y#4 render::y#1 ]
[ render::colline#5 render::colline#1 ]
[ render::x#2 render::x#1 ]
[ findcol::i#10 findcol::i#1 ]
[ findcol::mindiff#10 findcol::mindiff#13 ]
[ findcol::return#2 findcol::mincol#10 findcol::mincol#2 findcol::mincol#1 ]
[ findcol::diff#5 findcol::diff#2 findcol::diff#1 ]
[ findcol::mindiff#11 findcol::diff#7 findcol::diff#4 findcol::diff#3 findcol::mindiff#15 ]
[ initscreen::screen#2 initscreen::screen#1 ]
Added variable animate::$0 to zero page equivalence class [ animate::$0 ]
Added variable animate::$3 to zero page equivalence class [ animate::$3 ]
Added variable animate::$6 to zero page equivalence class [ animate::$6 ]
Added variable animate::$9 to zero page equivalence class [ animate::$9 ]
Added variable animate::$12 to zero page equivalence class [ animate::$12 ]
Added variable animate::$15 to zero page equivalence class [ animate::$15 ]
Added variable animate::$18 to zero page equivalence class [ animate::$18 ]
Added variable findcol::x#0 to zero page equivalence class [ findcol::x#0 ]
Added variable findcol::y#0 to zero page equivalence class [ findcol::y#0 ]
Added variable findcol::return#0 to zero page equivalence class [ findcol::return#0 ]
Added variable render::col#0 to zero page equivalence class [ render::col#0 ]
Added variable findcol::xp#0 to zero page equivalence class [ findcol::xp#0 ]
Added variable findcol::yp#0 to zero page equivalence class [ findcol::yp#0 ]
Added variable findcol::$8 to zero page equivalence class [ findcol::$8 ]
Added variable findcol::$10 to zero page equivalence class [ findcol::$10 ]
Complete equivalence classes
[ render::y#4 render::y#1 ]
[ render::colline#5 render::colline#1 ]
[ render::x#2 render::x#1 ]
[ findcol::i#10 findcol::i#1 ]
[ findcol::mindiff#10 findcol::mindiff#13 ]
[ findcol::return#2 findcol::mincol#10 findcol::mincol#2 findcol::mincol#1 ]
[ findcol::diff#5 findcol::diff#2 findcol::diff#1 ]
[ findcol::mindiff#11 findcol::diff#7 findcol::diff#4 findcol::diff#3 findcol::mindiff#15 ]
[ initscreen::screen#2 initscreen::screen#1 ]
[ animate::$0 ]
[ animate::$3 ]
[ animate::$6 ]
[ animate::$9 ]
[ animate::$12 ]
[ animate::$15 ]
[ animate::$18 ]
[ findcol::x#0 ]
[ findcol::y#0 ]
[ findcol::return#0 ]
[ render::col#0 ]
[ findcol::xp#0 ]
[ findcol::yp#0 ]
[ findcol::$8 ]
[ findcol::$10 ]
Allocated zp ZP_BYTE:2 [ render::y#4 render::y#1 ]
Allocated zp ZP_WORD:3 [ render::colline#5 render::colline#1 ]
Allocated zp ZP_BYTE:5 [ render::x#2 render::x#1 ]
Allocated zp ZP_BYTE:6 [ findcol::i#10 findcol::i#1 ]
Allocated zp ZP_BYTE:7 [ findcol::mindiff#10 findcol::mindiff#13 ]
Allocated zp ZP_BYTE:8 [ findcol::return#2 findcol::mincol#10 findcol::mincol#2 findcol::mincol#1 ]
Allocated zp ZP_BYTE:9 [ findcol::diff#5 findcol::diff#2 findcol::diff#1 ]
Allocated zp ZP_BYTE:10 [ findcol::mindiff#11 findcol::diff#7 findcol::diff#4 findcol::diff#3 findcol::mindiff#15 ]
Allocated zp ZP_WORD:11 [ initscreen::screen#2 initscreen::screen#1 ]
Allocated zp ZP_BYTE:13 [ animate::$0 ]
Allocated zp ZP_BYTE:14 [ animate::$3 ]
Allocated zp ZP_BYTE:15 [ animate::$6 ]
Allocated zp ZP_BYTE:16 [ animate::$9 ]
Allocated zp ZP_BYTE:17 [ animate::$12 ]
Allocated zp ZP_BYTE:18 [ animate::$15 ]
Allocated zp ZP_BYTE:19 [ animate::$18 ]
Allocated zp ZP_BYTE:20 [ findcol::x#0 ]
Allocated zp ZP_BYTE:21 [ findcol::y#0 ]
Allocated zp ZP_BYTE:22 [ findcol::return#0 ]
Allocated zp ZP_BYTE:23 [ render::col#0 ]
Allocated zp ZP_BYTE:24 [ findcol::xp#0 ]
Allocated zp ZP_BYTE:25 [ findcol::yp#0 ]
Allocated zp ZP_BYTE:26 [ findcol::$8 ]
Allocated zp ZP_BYTE:27 [ findcol::$10 ]

INITIAL ASM
//SEG0 File Comments
// The screen
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label SCREEN = $400
  .label COLORS = $d800
  .const FILL = $e6
  // The total number of voronoi points
  .const numpoints = 6
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
  //SEG11 [5] call initscreen 
  //SEG12 [76] phi from main to initscreen [phi:main->initscreen]
  initscreen_from_main:
    jsr initscreen
  //SEG13 [6] phi from main main::@2 to main::@1 [phi:main/main::@2->main::@1]
  b1_from_main:
  b1_from_b2:
    jmp b1
  //SEG14 main::@1
  b1:
  //SEG15 [7] call render 
  //SEG16 [36] phi from main::@1 to render [phi:main::@1->render]
  render_from_b1:
    jsr render
  //SEG17 [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
  //SEG18 main::@2
  b2:
  //SEG19 [9] call animate 
    jsr animate
    jmp b1_from_b2
}
//SEG20 animate
animate: {
    .label _0 = $d
    .label _3 = $e
    .label _6 = $f
    .label _9 = $10
    .label _12 = $11
    .label _15 = $12
    .label _18 = $13
  //SEG21 [10] (byte/signed word/word/dword/signed dword~) animate::$0 ← *((const byte[]) XPOS#0) + (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=_deref_pbuc1_plus_1 
    ldy XPOS
    iny
    sty _0
  //SEG22 [11] *((const byte[]) XPOS#0) ← (byte/signed word/word/dword/signed dword~) animate::$0 -- _deref_pbuc1=vbuz1 
    lda _0
    sta XPOS
  //SEG23 [12] if(*((const byte[]) XPOS#0)!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto animate::@1 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$28
    cmp XPOS
    bne b1
    jmp b5
  //SEG24 animate::@5
  b5:
  //SEG25 [13] *((const byte[]) XPOS#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta XPOS
    jmp b1
  //SEG26 animate::@1
  b1:
  //SEG27 [14] (byte/signed word/word/dword/signed dword~) animate::$3 ← *((const byte[]) YPOS#0) + (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=_deref_pbuc1_plus_1 
    ldy YPOS
    iny
    sty _3
  //SEG28 [15] *((const byte[]) YPOS#0) ← (byte/signed word/word/dword/signed dword~) animate::$3 -- _deref_pbuc1=vbuz1 
    lda _3
    sta YPOS
  //SEG29 [16] if(*((const byte[]) YPOS#0)!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto animate::@2 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$19
    cmp YPOS
    bne b2
    jmp b6
  //SEG30 animate::@6
  b6:
  //SEG31 [17] *((const byte[]) YPOS#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta YPOS
    jmp b2
  //SEG32 animate::@2
  b2:
  //SEG33 [18] (byte/signed word/word/dword/signed dword~) animate::$6 ← *((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 1) - (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=_deref_pbuc1_minus_1 
    ldx XPOS+1
    dex
    stx _6
  //SEG34 [19] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte/signed word/word/dword/signed dword~) animate::$6 -- _deref_pbuc1=vbuz1 
    lda _6
    sta XPOS+1
  //SEG35 [20] if(*((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 1)!=(byte/word/signed word/dword/signed dword) $ff) goto animate::@3 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp XPOS+1
    bne b3
    jmp b7
  //SEG36 animate::@7
  b7:
  //SEG37 [21] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte/signed byte/word/signed word/dword/signed dword) $28 -- _deref_pbuc1=vbuc2 
    lda #$28
    sta XPOS+1
    jmp b3
  //SEG38 animate::@3
  b3:
  //SEG39 [22] (byte/signed word/word/dword/signed dword~) animate::$9 ← *((const byte[]) YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 2) + (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=_deref_pbuc1_plus_1 
    ldy YPOS+2
    iny
    sty _9
  //SEG40 [23] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte/signed word/word/dword/signed dword~) animate::$9 -- _deref_pbuc1=vbuz1 
    lda _9
    sta YPOS+2
  //SEG41 [24] if(*((const byte[]) YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 2)!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto animate::@4 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$19
    cmp YPOS+2
    bne b4
    jmp b8
  //SEG42 animate::@8
  b8:
  //SEG43 [25] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta YPOS+2
    jmp b4
  //SEG44 animate::@4
  b4:
  //SEG45 [26] (byte/signed word/word/dword/signed dword~) animate::$12 ← *((const byte[]) YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3) - (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=_deref_pbuc1_minus_1 
    ldx YPOS+3
    dex
    stx _12
  //SEG46 [27] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte/signed word/word/dword/signed dword~) animate::$12 -- _deref_pbuc1=vbuz1 
    lda _12
    sta YPOS+3
  //SEG47 [28] if(*((const byte[]) YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3)!=(byte/word/signed word/dword/signed dword) $ff) goto animate::@return -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp YPOS+3
    bne breturn
    jmp b9
  //SEG48 animate::@9
  b9:
  //SEG49 [29] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte/signed byte/word/signed word/dword/signed dword) $19 -- _deref_pbuc1=vbuc2 
    lda #$19
    sta YPOS+3
  //SEG50 [30] (byte/signed word/word/dword/signed dword~) animate::$15 ← *((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3) + (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuz1=_deref_pbuc1_plus_vbuc2 
    lda #7
    clc
    adc XPOS+3
    sta _15
  //SEG51 [31] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte/signed word/word/dword/signed dword~) animate::$15 -- _deref_pbuc1=vbuz1 
    lda _15
    sta XPOS+3
  //SEG52 [32] if(*((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3)<(byte/signed byte/word/signed word/dword/signed dword) $28) goto animate::@return -- _deref_pbuc1_lt_vbuc2_then_la1 
    lda XPOS+3
    cmp #$28
    bcc breturn
    jmp b10
  //SEG53 animate::@10
  b10:
  //SEG54 [33] (byte/signed word/word/dword/signed dword~) animate::$18 ← *((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3) - (byte/signed byte/word/signed word/dword/signed dword) $28 -- vbuz1=_deref_pbuc1_minus_vbuc2 
    lda XPOS+3
    sec
    sbc #$28
    sta _18
  //SEG55 [34] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte/signed word/word/dword/signed dword~) animate::$18 -- _deref_pbuc1=vbuz1 
    lda _18
    sta XPOS+3
    jmp breturn
  //SEG56 animate::@return
  breturn:
  //SEG57 [35] return 
    rts
}
//SEG58 render
render: {
    .label col = $17
    .label x = 5
    .label colline = 3
    .label y = 2
  //SEG59 [37] phi from render to render::@1 [phi:render->render::@1]
  b1_from_render:
  //SEG60 [37] phi (byte*) render::colline#5 = (const byte*) COLORS#0 [phi:render->render::@1#0] -- pbuz1=pbuc1 
    lda #<COLORS
    sta colline
    lda #>COLORS
    sta colline+1
  //SEG61 [37] phi (byte) render::y#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render->render::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta y
    jmp b1
  //SEG62 [37] phi from render::@3 to render::@1 [phi:render::@3->render::@1]
  b1_from_b3:
  //SEG63 [37] phi (byte*) render::colline#5 = (byte*) render::colline#1 [phi:render::@3->render::@1#0] -- register_copy 
  //SEG64 [37] phi (byte) render::y#4 = (byte) render::y#1 [phi:render::@3->render::@1#1] -- register_copy 
    jmp b1
  //SEG65 render::@1
  b1:
  //SEG66 [38] phi from render::@1 to render::@2 [phi:render::@1->render::@2]
  b2_from_b1:
  //SEG67 [38] phi (byte) render::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render::@1->render::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta x
    jmp b2
  //SEG68 [38] phi from render::@4 to render::@2 [phi:render::@4->render::@2]
  b2_from_b4:
  //SEG69 [38] phi (byte) render::x#2 = (byte) render::x#1 [phi:render::@4->render::@2#0] -- register_copy 
    jmp b2
  //SEG70 render::@2
  b2:
  //SEG71 [39] (byte) findcol::x#0 ← (byte) render::x#2 -- vbuz1=vbuz2 
    lda x
    sta findcol.x
  //SEG72 [40] (byte) findcol::y#0 ← (byte) render::y#4 -- vbuz1=vbuz2 
    lda y
    sta findcol.y
  //SEG73 [41] call findcol 
  //SEG74 [51] phi from render::@2 to findcol [phi:render::@2->findcol]
  findcol_from_b2:
    jsr findcol
  //SEG75 [42] (byte) findcol::return#0 ← (byte) findcol::return#2 -- vbuz1=vbuz2 
    lda findcol.return_2
    sta findcol.return
    jmp b4
  //SEG76 render::@4
  b4:
  //SEG77 [43] (byte) render::col#0 ← (byte) findcol::return#0 -- vbuz1=vbuz2 
    lda findcol.return
    sta col
  //SEG78 [44] *((byte*) render::colline#5 + (byte) render::x#2) ← (byte) render::col#0 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda col
    ldy x
    sta (colline),y
  //SEG79 [45] (byte) render::x#1 ← ++ (byte) render::x#2 -- vbuz1=_inc_vbuz1 
    inc x
  //SEG80 [46] if((byte) render::x#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto render::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp x
    bne b2_from_b4
    jmp b3
  //SEG81 render::@3
  b3:
  //SEG82 [47] (byte*) render::colline#1 ← (byte*) render::colline#5 + (byte/signed byte/word/signed word/dword/signed dword) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc colline
    sta colline
    bcc !+
    inc colline+1
  !:
  //SEG83 [48] (byte) render::y#1 ← ++ (byte) render::y#4 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG84 [49] if((byte) render::y#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto render::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp y
    bne b1_from_b3
    jmp breturn
  //SEG85 render::@return
  breturn:
  //SEG86 [50] return 
    rts
}
//SEG87 findcol
// findcol(byte zeropage($14) x, byte zeropage($15) y)
findcol: {
    .label _8 = $1a
    .label _10 = $1b
    .label x = $14
    .label y = $15
    .label return = $16
    .label xp = $18
    .label yp = $19
    .label return_2 = 8
    .label diff = 9
    .label diff_3 = $a
    .label diff_4 = $a
    .label i = 6
    .label mincol = 8
    .label diff_7 = $a
    .label mindiff = 7
    .label mindiff_11 = $a
    .label mindiff_15 = $a
  //SEG88 [52] phi from findcol to findcol::@1 [phi:findcol->findcol::@1]
  b1_from_findcol:
  //SEG89 [52] phi (byte) findcol::mincol#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:findcol->findcol::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta mincol
  //SEG90 [52] phi (byte) findcol::mindiff#10 = (byte/word/signed word/dword/signed dword) $ff [phi:findcol->findcol::@1#1] -- vbuz1=vbuc1 
    lda #$ff
    sta mindiff
  //SEG91 [52] phi (byte) findcol::i#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:findcol->findcol::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG92 findcol::@1
  b1:
  //SEG93 [53] (byte) findcol::xp#0 ← *((const byte[]) XPOS#0 + (byte) findcol::i#10) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy i
    lda XPOS,y
    sta xp
  //SEG94 [54] (byte) findcol::yp#0 ← *((const byte[]) YPOS#0 + (byte) findcol::i#10) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy i
    lda YPOS,y
    sta yp
  //SEG95 [55] if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2 -- vbuz1_neq_vbuz2_then_la1 
    lda x
    cmp xp
    bne b2
    jmp b8
  //SEG96 findcol::@8
  b8:
  //SEG97 [56] if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@2 -- vbuz1_neq_vbuz2_then_la1 
    lda y
    cmp yp
    bne b2
  //SEG98 [57] phi from findcol::@8 to findcol::@return [phi:findcol::@8->findcol::@return]
  breturn_from_b8:
  //SEG99 [57] phi (byte) findcol::return#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:findcol::@8->findcol::@return#0] -- vbuz1=vbuc1 
    lda #0
    sta return_2
    jmp breturn
  //SEG100 findcol::@return
  breturn:
  //SEG101 [58] return 
    rts
  //SEG102 findcol::@2
  b2:
  //SEG103 [59] if((byte) findcol::x#0<(byte) findcol::xp#0) goto findcol::@3 -- vbuz1_lt_vbuz2_then_la1 
    lda x
    cmp xp
    bcc b3
    jmp b9
  //SEG104 findcol::@9
  b9:
  //SEG105 [60] (byte) findcol::diff#2 ← (byte) findcol::x#0 - (byte) findcol::xp#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda x
    sec
    sbc xp
    sta diff
  //SEG106 [61] phi from findcol::@3 findcol::@9 to findcol::@4 [phi:findcol::@3/findcol::@9->findcol::@4]
  b4_from_b3:
  b4_from_b9:
  //SEG107 [61] phi (byte) findcol::diff#5 = (byte) findcol::diff#1 [phi:findcol::@3/findcol::@9->findcol::@4#0] -- register_copy 
    jmp b4
  //SEG108 findcol::@4
  b4:
  //SEG109 [62] if((byte) findcol::y#0<(byte) findcol::yp#0) goto findcol::@5 -- vbuz1_lt_vbuz2_then_la1 
    lda y
    cmp yp
    bcc b5
    jmp b10
  //SEG110 findcol::@10
  b10:
  //SEG111 [63] (byte~) findcol::$8 ← (byte) findcol::y#0 - (byte) findcol::yp#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda y
    sec
    sbc yp
    sta _8
  //SEG112 [64] (byte) findcol::diff#4 ← (byte) findcol::diff#5 + (byte~) findcol::$8 -- vbuz1=vbuz2_plus_vbuz3 
    lda diff
    clc
    adc _8
    sta diff_4
  //SEG113 [65] phi from findcol::@10 findcol::@5 to findcol::@6 [phi:findcol::@10/findcol::@5->findcol::@6]
  b6_from_b10:
  b6_from_b5:
  //SEG114 [65] phi (byte) findcol::diff#7 = (byte) findcol::diff#4 [phi:findcol::@10/findcol::@5->findcol::@6#0] -- register_copy 
    jmp b6
  //SEG115 findcol::@6
  b6:
  //SEG116 [66] if((byte) findcol::diff#7>=(byte) findcol::mindiff#10) goto findcol::@13 -- vbuz1_ge_vbuz2_then_la1 
    lda diff_7
    cmp mindiff
    bcs b13
    jmp b11
  //SEG117 findcol::@11
  b11:
  //SEG118 [67] (byte) findcol::mincol#1 ← *((const byte[]) COLS#0 + (byte) findcol::i#10) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy i
    lda COLS,y
    sta mincol
  //SEG119 [68] phi from findcol::@11 findcol::@13 to findcol::@7 [phi:findcol::@11/findcol::@13->findcol::@7]
  b7_from_b11:
  b7_from_b13:
  //SEG120 [68] phi (byte) findcol::mindiff#11 = (byte) findcol::diff#7 [phi:findcol::@11/findcol::@13->findcol::@7#0] -- register_copy 
  //SEG121 [68] phi (byte) findcol::mincol#2 = (byte) findcol::mincol#1 [phi:findcol::@11/findcol::@13->findcol::@7#1] -- register_copy 
    jmp b7
  //SEG122 findcol::@7
  b7:
  //SEG123 [69] (byte) findcol::i#1 ← ++ (byte) findcol::i#10 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG124 [70] if((byte) findcol::i#1<(const byte) numpoints#0) goto findcol::@12 -- vbuz1_lt_vbuc1_then_la1 
    lda i
    cmp #numpoints
    bcc b12
  //SEG125 [57] phi from findcol::@7 to findcol::@return [phi:findcol::@7->findcol::@return]
  breturn_from_b7:
  //SEG126 [57] phi (byte) findcol::return#2 = (byte) findcol::mincol#2 [phi:findcol::@7->findcol::@return#0] -- register_copy 
    jmp breturn
  //SEG127 findcol::@12
  b12:
  //SEG128 [71] (byte~) findcol::mindiff#13 ← (byte) findcol::mindiff#11 -- vbuz1=vbuz2 
    lda mindiff_11
    sta mindiff
  //SEG129 [52] phi from findcol::@12 to findcol::@1 [phi:findcol::@12->findcol::@1]
  b1_from_b12:
  //SEG130 [52] phi (byte) findcol::mincol#10 = (byte) findcol::mincol#2 [phi:findcol::@12->findcol::@1#0] -- register_copy 
  //SEG131 [52] phi (byte) findcol::mindiff#10 = (byte~) findcol::mindiff#13 [phi:findcol::@12->findcol::@1#1] -- register_copy 
  //SEG132 [52] phi (byte) findcol::i#10 = (byte) findcol::i#1 [phi:findcol::@12->findcol::@1#2] -- register_copy 
    jmp b1
  //SEG133 findcol::@13
  b13:
  //SEG134 [72] (byte~) findcol::mindiff#15 ← (byte) findcol::mindiff#10 -- vbuz1=vbuz2 
    lda mindiff
    sta mindiff_15
    jmp b7_from_b13
  //SEG135 findcol::@5
  b5:
  //SEG136 [73] (byte~) findcol::$10 ← (byte) findcol::yp#0 - (byte) findcol::y#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda yp
    sec
    sbc y
    sta _10
  //SEG137 [74] (byte) findcol::diff#3 ← (byte) findcol::diff#5 + (byte~) findcol::$10 -- vbuz1=vbuz2_plus_vbuz3 
    lda diff
    clc
    adc _10
    sta diff_3
    jmp b6_from_b5
  //SEG138 findcol::@3
  b3:
  //SEG139 [75] (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda xp
    sec
    sbc x
    sta diff
    jmp b4_from_b3
}
//SEG140 initscreen
initscreen: {
    .label screen = $b
  //SEG141 [77] phi from initscreen to initscreen::@1 [phi:initscreen->initscreen::@1]
  b1_from_initscreen:
  //SEG142 [77] phi (byte*) initscreen::screen#2 = (const byte*) SCREEN#0 [phi:initscreen->initscreen::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta screen
    lda #>SCREEN
    sta screen+1
    jmp b1
  //SEG143 [77] phi from initscreen::@1 to initscreen::@1 [phi:initscreen::@1->initscreen::@1]
  b1_from_b1:
  //SEG144 [77] phi (byte*) initscreen::screen#2 = (byte*) initscreen::screen#1 [phi:initscreen::@1->initscreen::@1#0] -- register_copy 
    jmp b1
  //SEG145 initscreen::@1
  b1:
  //SEG146 [78] *((byte*) initscreen::screen#2) ← (const byte) FILL#0 -- _deref_pbuz1=vbuc1 
    lda #FILL
    ldy #0
    sta (screen),y
  //SEG147 [79] (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2 -- pbuz1=_inc_pbuz1 
    inc screen
    bne !+
    inc screen+1
  !:
  //SEG148 [80] if((byte*) initscreen::screen#1<(const byte*) SCREEN#0+(word/signed word/dword/signed dword) $3e8) goto initscreen::@1 -- pbuz1_lt_pbuc1_then_la1 
    lda screen+1
    cmp #>SCREEN+$3e8
    bcc b1_from_b1
    bne !+
    lda screen
    cmp #<SCREEN+$3e8
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG149 initscreen::@return
  breturn:
  //SEG150 [81] return 
    rts
}
  // Points to create the Voronoi from
  XPOS: .byte 5, $f, 6, $22, $15, $1f
  YPOS: .byte 5, 8, $e, 2, $11, $16
  COLS: .byte 1, 2, 3, 4, 5, 7

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [12] if(*((const byte[]) XPOS#0)!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto animate::@1 [ ] ( main:2::animate:9 [ ] ) always clobbers reg byte a 
Statement [13] *((const byte[]) XPOS#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::animate:9 [ ] ) always clobbers reg byte a 
Statement [16] if(*((const byte[]) YPOS#0)!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto animate::@2 [ ] ( main:2::animate:9 [ ] ) always clobbers reg byte a 
Statement [17] *((const byte[]) YPOS#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::animate:9 [ ] ) always clobbers reg byte a 
Statement [20] if(*((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 1)!=(byte/word/signed word/dword/signed dword) $ff) goto animate::@3 [ ] ( main:2::animate:9 [ ] ) always clobbers reg byte a 
Statement [21] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte/signed byte/word/signed word/dword/signed dword) $28 [ ] ( main:2::animate:9 [ ] ) always clobbers reg byte a 
Statement [24] if(*((const byte[]) YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 2)!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto animate::@4 [ ] ( main:2::animate:9 [ ] ) always clobbers reg byte a 
Statement [25] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::animate:9 [ ] ) always clobbers reg byte a 
Statement [28] if(*((const byte[]) YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3)!=(byte/word/signed word/dword/signed dword) $ff) goto animate::@return [ ] ( main:2::animate:9 [ ] ) always clobbers reg byte a 
Statement [29] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte/signed byte/word/signed word/dword/signed dword) $19 [ ] ( main:2::animate:9 [ ] ) always clobbers reg byte a 
Statement [30] (byte/signed word/word/dword/signed dword~) animate::$15 ← *((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3) + (byte/signed byte/word/signed word/dword/signed dword) 7 [ animate::$15 ] ( main:2::animate:9 [ animate::$15 ] ) always clobbers reg byte a 
Statement [32] if(*((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3)<(byte/signed byte/word/signed word/dword/signed dword) $28) goto animate::@return [ ] ( main:2::animate:9 [ ] ) always clobbers reg byte a 
Statement [33] (byte/signed word/word/dword/signed dword~) animate::$18 ← *((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3) - (byte/signed byte/word/signed word/dword/signed dword) $28 [ animate::$18 ] ( main:2::animate:9 [ animate::$18 ] ) always clobbers reg byte a 
Statement [47] (byte*) render::colline#1 ← (byte*) render::colline#5 + (byte/signed byte/word/signed word/dword/signed dword) $28 [ render::y#4 render::colline#1 ] ( main:2::render:7 [ render::y#4 render::colline#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ render::y#4 render::y#1 ]
Statement [60] (byte) findcol::diff#2 ← (byte) findcol::x#0 - (byte) findcol::xp#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#2 ] ( main:2::render:7::findcol:41 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:5 [ render::x#2 render::x#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:20 [ findcol::x#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:21 [ findcol::y#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:6 [ findcol::i#10 findcol::i#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:7 [ findcol::mindiff#10 findcol::mindiff#13 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:8 [ findcol::return#2 findcol::mincol#10 findcol::mincol#2 findcol::mincol#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:25 [ findcol::yp#0 ]
Statement [63] (byte~) findcol::$8 ← (byte) findcol::y#0 - (byte) findcol::yp#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#5 findcol::$8 ] ( main:2::render:7::findcol:41 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#5 findcol::$8 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:9 [ findcol::diff#5 findcol::diff#2 findcol::diff#1 ]
Statement [64] (byte) findcol::diff#4 ← (byte) findcol::diff#5 + (byte~) findcol::$8 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 ] ( main:2::render:7::findcol:41 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 ] ) always clobbers reg byte a 
Statement [73] (byte~) findcol::$10 ← (byte) findcol::yp#0 - (byte) findcol::y#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#5 findcol::$10 ] ( main:2::render:7::findcol:41 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#5 findcol::$10 ] ) always clobbers reg byte a 
Statement [74] (byte) findcol::diff#3 ← (byte) findcol::diff#5 + (byte~) findcol::$10 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#3 ] ( main:2::render:7::findcol:41 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#3 ] ) always clobbers reg byte a 
Statement [75] (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#1 ] ( main:2::render:7::findcol:41 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#1 ] ) always clobbers reg byte a 
Statement [78] *((byte*) initscreen::screen#2) ← (const byte) FILL#0 [ initscreen::screen#2 ] ( main:2::initscreen:5 [ initscreen::screen#2 ] ) always clobbers reg byte a reg byte y 
Statement [80] if((byte*) initscreen::screen#1<(const byte*) SCREEN#0+(word/signed word/dword/signed dword) $3e8) goto initscreen::@1 [ initscreen::screen#1 ] ( main:2::initscreen:5 [ initscreen::screen#1 ] ) always clobbers reg byte a 
Statement [12] if(*((const byte[]) XPOS#0)!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto animate::@1 [ ] ( main:2::animate:9 [ ] ) always clobbers reg byte a 
Statement [13] *((const byte[]) XPOS#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::animate:9 [ ] ) always clobbers reg byte a 
Statement [16] if(*((const byte[]) YPOS#0)!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto animate::@2 [ ] ( main:2::animate:9 [ ] ) always clobbers reg byte a 
Statement [17] *((const byte[]) YPOS#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::animate:9 [ ] ) always clobbers reg byte a 
Statement [20] if(*((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 1)!=(byte/word/signed word/dword/signed dword) $ff) goto animate::@3 [ ] ( main:2::animate:9 [ ] ) always clobbers reg byte a 
Statement [21] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte/signed byte/word/signed word/dword/signed dword) $28 [ ] ( main:2::animate:9 [ ] ) always clobbers reg byte a 
Statement [24] if(*((const byte[]) YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 2)!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto animate::@4 [ ] ( main:2::animate:9 [ ] ) always clobbers reg byte a 
Statement [25] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::animate:9 [ ] ) always clobbers reg byte a 
Statement [28] if(*((const byte[]) YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3)!=(byte/word/signed word/dword/signed dword) $ff) goto animate::@return [ ] ( main:2::animate:9 [ ] ) always clobbers reg byte a 
Statement [29] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte/signed byte/word/signed word/dword/signed dword) $19 [ ] ( main:2::animate:9 [ ] ) always clobbers reg byte a 
Statement [30] (byte/signed word/word/dword/signed dword~) animate::$15 ← *((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3) + (byte/signed byte/word/signed word/dword/signed dword) 7 [ animate::$15 ] ( main:2::animate:9 [ animate::$15 ] ) always clobbers reg byte a 
Statement [32] if(*((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3)<(byte/signed byte/word/signed word/dword/signed dword) $28) goto animate::@return [ ] ( main:2::animate:9 [ ] ) always clobbers reg byte a 
Statement [33] (byte/signed word/word/dword/signed dword~) animate::$18 ← *((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3) - (byte/signed byte/word/signed word/dword/signed dword) $28 [ animate::$18 ] ( main:2::animate:9 [ animate::$18 ] ) always clobbers reg byte a 
Statement [47] (byte*) render::colline#1 ← (byte*) render::colline#5 + (byte/signed byte/word/signed word/dword/signed dword) $28 [ render::y#4 render::colline#1 ] ( main:2::render:7 [ render::y#4 render::colline#1 ] ) always clobbers reg byte a 
Statement [60] (byte) findcol::diff#2 ← (byte) findcol::x#0 - (byte) findcol::xp#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#2 ] ( main:2::render:7::findcol:41 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#2 ] ) always clobbers reg byte a 
Statement [63] (byte~) findcol::$8 ← (byte) findcol::y#0 - (byte) findcol::yp#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#5 findcol::$8 ] ( main:2::render:7::findcol:41 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#5 findcol::$8 ] ) always clobbers reg byte a 
Statement [64] (byte) findcol::diff#4 ← (byte) findcol::diff#5 + (byte~) findcol::$8 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 ] ( main:2::render:7::findcol:41 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#4 ] ) always clobbers reg byte a 
Statement [73] (byte~) findcol::$10 ← (byte) findcol::yp#0 - (byte) findcol::y#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#5 findcol::$10 ] ( main:2::render:7::findcol:41 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#5 findcol::$10 ] ) always clobbers reg byte a 
Statement [74] (byte) findcol::diff#3 ← (byte) findcol::diff#5 + (byte~) findcol::$10 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#3 ] ( main:2::render:7::findcol:41 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::diff#3 ] ) always clobbers reg byte a 
Statement [75] (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#1 ] ( main:2::render:7::findcol:41 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mindiff#10 findcol::mincol#10 findcol::yp#0 findcol::diff#1 ] ) always clobbers reg byte a 
Statement [78] *((byte*) initscreen::screen#2) ← (const byte) FILL#0 [ initscreen::screen#2 ] ( main:2::initscreen:5 [ initscreen::screen#2 ] ) always clobbers reg byte a reg byte y 
Statement [80] if((byte*) initscreen::screen#1<(const byte*) SCREEN#0+(word/signed word/dword/signed dword) $3e8) goto initscreen::@1 [ initscreen::screen#1 ] ( main:2::initscreen:5 [ initscreen::screen#1 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ render::y#4 render::y#1 ] : zp ZP_BYTE:2 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:3 [ render::colline#5 render::colline#1 ] : zp ZP_WORD:3 , 
Potential registers zp ZP_BYTE:5 [ render::x#2 render::x#1 ] : zp ZP_BYTE:5 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:6 [ findcol::i#10 findcol::i#1 ] : zp ZP_BYTE:6 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:7 [ findcol::mindiff#10 findcol::mindiff#13 ] : zp ZP_BYTE:7 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:8 [ findcol::return#2 findcol::mincol#10 findcol::mincol#2 findcol::mincol#1 ] : zp ZP_BYTE:8 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:9 [ findcol::diff#5 findcol::diff#2 findcol::diff#1 ] : zp ZP_BYTE:9 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:10 [ findcol::mindiff#11 findcol::diff#7 findcol::diff#4 findcol::diff#3 findcol::mindiff#15 ] : zp ZP_BYTE:10 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:11 [ initscreen::screen#2 initscreen::screen#1 ] : zp ZP_WORD:11 , 
Potential registers zp ZP_BYTE:13 [ animate::$0 ] : zp ZP_BYTE:13 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:14 [ animate::$3 ] : zp ZP_BYTE:14 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:15 [ animate::$6 ] : zp ZP_BYTE:15 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:16 [ animate::$9 ] : zp ZP_BYTE:16 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:17 [ animate::$12 ] : zp ZP_BYTE:17 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:18 [ animate::$15 ] : zp ZP_BYTE:18 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:19 [ animate::$18 ] : zp ZP_BYTE:19 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:20 [ findcol::x#0 ] : zp ZP_BYTE:20 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:21 [ findcol::y#0 ] : zp ZP_BYTE:21 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:22 [ findcol::return#0 ] : zp ZP_BYTE:22 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:23 [ render::col#0 ] : zp ZP_BYTE:23 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:24 [ findcol::xp#0 ] : zp ZP_BYTE:24 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:25 [ findcol::yp#0 ] : zp ZP_BYTE:25 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:26 [ findcol::$8 ] : zp ZP_BYTE:26 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:27 [ findcol::$10 ] : zp ZP_BYTE:27 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [findcol] 83,341.67: zp ZP_BYTE:10 [ findcol::mindiff#11 findcol::diff#7 findcol::diff#4 findcol::diff#3 findcol::mindiff#15 ] 50,005: zp ZP_BYTE:9 [ findcol::diff#5 findcol::diff#2 findcol::diff#1 ] 34,846.92: zp ZP_BYTE:8 [ findcol::return#2 findcol::mincol#10 findcol::mincol#2 findcol::mincol#1 ] 21,877.19: zp ZP_BYTE:7 [ findcol::mindiff#10 findcol::mindiff#13 ] 20,002: zp ZP_BYTE:26 [ findcol::$8 ] 20,002: zp ZP_BYTE:27 [ findcol::$10 ] 12,632.84: zp ZP_BYTE:6 [ findcol::i#10 findcol::i#1 ] 10,001: zp ZP_BYTE:24 [ findcol::xp#0 ] 6,250.62: zp ZP_BYTE:25 [ findcol::yp#0 ] 2,002: zp ZP_BYTE:22 [ findcol::return#0 ] 1,708.54: zp ZP_BYTE:21 [ findcol::y#0 ] 1,640.2: zp ZP_BYTE:20 [ findcol::x#0 ] 
Uplift Scope [render] 2,073.5: zp ZP_BYTE:5 [ render::x#2 render::x#1 ] 2,002: zp ZP_BYTE:23 [ render::col#0 ] 260.86: zp ZP_BYTE:2 [ render::y#4 render::y#1 ] 187.63: zp ZP_WORD:3 [ render::colline#5 render::colline#1 ] 
Uplift Scope [initscreen] 33: zp ZP_WORD:11 [ initscreen::screen#2 initscreen::screen#1 ] 
Uplift Scope [animate] 4: zp ZP_BYTE:13 [ animate::$0 ] 4: zp ZP_BYTE:14 [ animate::$3 ] 4: zp ZP_BYTE:15 [ animate::$6 ] 4: zp ZP_BYTE:16 [ animate::$9 ] 4: zp ZP_BYTE:17 [ animate::$12 ] 4: zp ZP_BYTE:18 [ animate::$15 ] 4: zp ZP_BYTE:19 [ animate::$18 ] 
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [findcol] best 2076932 combination reg byte x [ findcol::mindiff#11 findcol::diff#7 findcol::diff#4 findcol::diff#3 findcol::mindiff#15 ] reg byte x [ findcol::diff#5 findcol::diff#2 findcol::diff#1 ] zp ZP_BYTE:8 [ findcol::return#2 findcol::mincol#10 findcol::mincol#2 findcol::mincol#1 ] zp ZP_BYTE:7 [ findcol::mindiff#10 findcol::mindiff#13 ] zp ZP_BYTE:26 [ findcol::$8 ] zp ZP_BYTE:27 [ findcol::$10 ] zp ZP_BYTE:6 [ findcol::i#10 findcol::i#1 ] zp ZP_BYTE:24 [ findcol::xp#0 ] zp ZP_BYTE:25 [ findcol::yp#0 ] zp ZP_BYTE:22 [ findcol::return#0 ] zp ZP_BYTE:21 [ findcol::y#0 ] zp ZP_BYTE:20 [ findcol::x#0 ] 
Limited combination testing to 100 combinations of 2239488 possible.
Uplifting [render] best 2070932 combination zp ZP_BYTE:5 [ render::x#2 render::x#1 ] reg byte a [ render::col#0 ] zp ZP_BYTE:2 [ render::y#4 render::y#1 ] zp ZP_WORD:3 [ render::colline#5 render::colline#1 ] 
Uplifting [initscreen] best 2070932 combination zp ZP_WORD:11 [ initscreen::screen#2 initscreen::screen#1 ] 
Uplifting [animate] best 2070912 combination reg byte x [ animate::$0 ] reg byte x [ animate::$3 ] reg byte a [ animate::$6 ] reg byte a [ animate::$9 ] zp ZP_BYTE:17 [ animate::$12 ] zp ZP_BYTE:18 [ animate::$15 ] zp ZP_BYTE:19 [ animate::$18 ] 
Limited combination testing to 100 combinations of 16384 possible.
Uplifting [main] best 2070912 combination 
Uplifting [] best 2070912 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:8 [ findcol::return#2 findcol::mincol#10 findcol::mincol#2 findcol::mincol#1 ]
Uplifting [findcol] best 2070912 combination zp ZP_BYTE:8 [ findcol::return#2 findcol::mincol#10 findcol::mincol#2 findcol::mincol#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:7 [ findcol::mindiff#10 findcol::mindiff#13 ]
Uplifting [findcol] best 2070912 combination zp ZP_BYTE:7 [ findcol::mindiff#10 findcol::mindiff#13 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:26 [ findcol::$8 ]
Uplifting [findcol] best 2050912 combination reg byte a [ findcol::$8 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:27 [ findcol::$10 ]
Uplifting [findcol] best 2030912 combination reg byte a [ findcol::$10 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:6 [ findcol::i#10 findcol::i#1 ]
Uplifting [findcol] best 1850912 combination reg byte y [ findcol::i#10 findcol::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:24 [ findcol::xp#0 ]
Uplifting [findcol] best 1805912 combination reg byte x [ findcol::xp#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:25 [ findcol::yp#0 ]
Uplifting [findcol] best 1805912 combination zp ZP_BYTE:25 [ findcol::yp#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:5 [ render::x#2 render::x#1 ]
Uplifting [render] best 1805912 combination zp ZP_BYTE:5 [ render::x#2 render::x#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:22 [ findcol::return#0 ]
Uplifting [findcol] best 1799912 combination reg byte a [ findcol::return#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:21 [ findcol::y#0 ]
Uplifting [findcol] best 1799912 combination zp ZP_BYTE:21 [ findcol::y#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:20 [ findcol::x#0 ]
Uplifting [findcol] best 1799912 combination zp ZP_BYTE:20 [ findcol::x#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ render::y#4 render::y#1 ]
Uplifting [render] best 1799912 combination zp ZP_BYTE:2 [ render::y#4 render::y#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:17 [ animate::$12 ]
Uplifting [animate] best 1799906 combination reg byte x [ animate::$12 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:18 [ animate::$15 ]
Uplifting [animate] best 1799900 combination reg byte a [ animate::$15 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:19 [ animate::$18 ]
Uplifting [animate] best 1799894 combination reg byte a [ animate::$18 ] 
Coalescing zero page register with common assignment [ zp ZP_BYTE:2 [ render::y#4 render::y#1 ] ] with [ zp ZP_BYTE:21 [ findcol::y#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_BYTE:5 [ render::x#2 render::x#1 ] ] with [ zp ZP_BYTE:20 [ findcol::x#0 ] ] - score: 1
Coalescing zero page register [ zp ZP_WORD:3 [ render::colline#5 render::colline#1 ] ] with [ zp ZP_WORD:11 [ initscreen::screen#2 initscreen::screen#1 ] ]
Allocated (was zp ZP_BYTE:7) zp ZP_BYTE:6 [ findcol::mindiff#10 findcol::mindiff#13 ]
Allocated (was zp ZP_BYTE:8) zp ZP_BYTE:7 [ findcol::return#2 findcol::mincol#10 findcol::mincol#2 findcol::mincol#1 ]
Allocated (was zp ZP_BYTE:25) zp ZP_BYTE:8 [ findcol::yp#0 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 File Comments
// The screen
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label SCREEN = $400
  .label COLORS = $d800
  .const FILL = $e6
  // The total number of voronoi points
  .const numpoints = 6
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
  //SEG11 [5] call initscreen 
  //SEG12 [76] phi from main to initscreen [phi:main->initscreen]
  initscreen_from_main:
    jsr initscreen
  //SEG13 [6] phi from main main::@2 to main::@1 [phi:main/main::@2->main::@1]
  b1_from_main:
  b1_from_b2:
    jmp b1
  //SEG14 main::@1
  b1:
  //SEG15 [7] call render 
  //SEG16 [36] phi from main::@1 to render [phi:main::@1->render]
  render_from_b1:
    jsr render
  //SEG17 [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
  //SEG18 main::@2
  b2:
  //SEG19 [9] call animate 
    jsr animate
    jmp b1_from_b2
}
//SEG20 animate
animate: {
  //SEG21 [10] (byte/signed word/word/dword/signed dword~) animate::$0 ← *((const byte[]) XPOS#0) + (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuxx=_deref_pbuc1_plus_1 
    ldx XPOS
    inx
  //SEG22 [11] *((const byte[]) XPOS#0) ← (byte/signed word/word/dword/signed dword~) animate::$0 -- _deref_pbuc1=vbuxx 
    stx XPOS
  //SEG23 [12] if(*((const byte[]) XPOS#0)!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto animate::@1 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$28
    cmp XPOS
    bne b1
    jmp b5
  //SEG24 animate::@5
  b5:
  //SEG25 [13] *((const byte[]) XPOS#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta XPOS
    jmp b1
  //SEG26 animate::@1
  b1:
  //SEG27 [14] (byte/signed word/word/dword/signed dword~) animate::$3 ← *((const byte[]) YPOS#0) + (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuxx=_deref_pbuc1_plus_1 
    ldx YPOS
    inx
  //SEG28 [15] *((const byte[]) YPOS#0) ← (byte/signed word/word/dword/signed dword~) animate::$3 -- _deref_pbuc1=vbuxx 
    stx YPOS
  //SEG29 [16] if(*((const byte[]) YPOS#0)!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto animate::@2 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$19
    cmp YPOS
    bne b2
    jmp b6
  //SEG30 animate::@6
  b6:
  //SEG31 [17] *((const byte[]) YPOS#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta YPOS
    jmp b2
  //SEG32 animate::@2
  b2:
  //SEG33 [18] (byte/signed word/word/dword/signed dword~) animate::$6 ← *((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 1) - (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=_deref_pbuc1_minus_1 
    lda XPOS+1
    sec
    sbc #1
  //SEG34 [19] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte/signed word/word/dword/signed dword~) animate::$6 -- _deref_pbuc1=vbuaa 
    sta XPOS+1
  //SEG35 [20] if(*((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 1)!=(byte/word/signed word/dword/signed dword) $ff) goto animate::@3 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp XPOS+1
    bne b3
    jmp b7
  //SEG36 animate::@7
  b7:
  //SEG37 [21] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte/signed byte/word/signed word/dword/signed dword) $28 -- _deref_pbuc1=vbuc2 
    lda #$28
    sta XPOS+1
    jmp b3
  //SEG38 animate::@3
  b3:
  //SEG39 [22] (byte/signed word/word/dword/signed dword~) animate::$9 ← *((const byte[]) YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 2) + (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=_deref_pbuc1_plus_1 
    lda YPOS+2
    clc
    adc #1
  //SEG40 [23] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte/signed word/word/dword/signed dword~) animate::$9 -- _deref_pbuc1=vbuaa 
    sta YPOS+2
  //SEG41 [24] if(*((const byte[]) YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 2)!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto animate::@4 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$19
    cmp YPOS+2
    bne b4
    jmp b8
  //SEG42 animate::@8
  b8:
  //SEG43 [25] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta YPOS+2
    jmp b4
  //SEG44 animate::@4
  b4:
  //SEG45 [26] (byte/signed word/word/dword/signed dword~) animate::$12 ← *((const byte[]) YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3) - (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuxx=_deref_pbuc1_minus_1 
    ldx YPOS+3
    dex
  //SEG46 [27] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte/signed word/word/dword/signed dword~) animate::$12 -- _deref_pbuc1=vbuxx 
    stx YPOS+3
  //SEG47 [28] if(*((const byte[]) YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3)!=(byte/word/signed word/dword/signed dword) $ff) goto animate::@return -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp YPOS+3
    bne breturn
    jmp b9
  //SEG48 animate::@9
  b9:
  //SEG49 [29] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte/signed byte/word/signed word/dword/signed dword) $19 -- _deref_pbuc1=vbuc2 
    lda #$19
    sta YPOS+3
  //SEG50 [30] (byte/signed word/word/dword/signed dword~) animate::$15 ← *((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3) + (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuaa=_deref_pbuc1_plus_vbuc2 
    lda #7
    clc
    adc XPOS+3
  //SEG51 [31] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte/signed word/word/dword/signed dword~) animate::$15 -- _deref_pbuc1=vbuaa 
    sta XPOS+3
  //SEG52 [32] if(*((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3)<(byte/signed byte/word/signed word/dword/signed dword) $28) goto animate::@return -- _deref_pbuc1_lt_vbuc2_then_la1 
    lda XPOS+3
    cmp #$28
    bcc breturn
    jmp b10
  //SEG53 animate::@10
  b10:
  //SEG54 [33] (byte/signed word/word/dword/signed dword~) animate::$18 ← *((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3) - (byte/signed byte/word/signed word/dword/signed dword) $28 -- vbuaa=_deref_pbuc1_minus_vbuc2 
    lda XPOS+3
    sec
    sbc #$28
  //SEG55 [34] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte/signed word/word/dword/signed dword~) animate::$18 -- _deref_pbuc1=vbuaa 
    sta XPOS+3
    jmp breturn
  //SEG56 animate::@return
  breturn:
  //SEG57 [35] return 
    rts
}
//SEG58 render
render: {
    .label x = 5
    .label colline = 3
    .label y = 2
  //SEG59 [37] phi from render to render::@1 [phi:render->render::@1]
  b1_from_render:
  //SEG60 [37] phi (byte*) render::colline#5 = (const byte*) COLORS#0 [phi:render->render::@1#0] -- pbuz1=pbuc1 
    lda #<COLORS
    sta colline
    lda #>COLORS
    sta colline+1
  //SEG61 [37] phi (byte) render::y#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render->render::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta y
    jmp b1
  //SEG62 [37] phi from render::@3 to render::@1 [phi:render::@3->render::@1]
  b1_from_b3:
  //SEG63 [37] phi (byte*) render::colline#5 = (byte*) render::colline#1 [phi:render::@3->render::@1#0] -- register_copy 
  //SEG64 [37] phi (byte) render::y#4 = (byte) render::y#1 [phi:render::@3->render::@1#1] -- register_copy 
    jmp b1
  //SEG65 render::@1
  b1:
  //SEG66 [38] phi from render::@1 to render::@2 [phi:render::@1->render::@2]
  b2_from_b1:
  //SEG67 [38] phi (byte) render::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render::@1->render::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta x
    jmp b2
  //SEG68 [38] phi from render::@4 to render::@2 [phi:render::@4->render::@2]
  b2_from_b4:
  //SEG69 [38] phi (byte) render::x#2 = (byte) render::x#1 [phi:render::@4->render::@2#0] -- register_copy 
    jmp b2
  //SEG70 render::@2
  b2:
  //SEG71 [39] (byte) findcol::x#0 ← (byte) render::x#2
  //SEG72 [40] (byte) findcol::y#0 ← (byte) render::y#4
  //SEG73 [41] call findcol 
  //SEG74 [51] phi from render::@2 to findcol [phi:render::@2->findcol]
  findcol_from_b2:
    jsr findcol
  //SEG75 [42] (byte) findcol::return#0 ← (byte) findcol::return#2 -- vbuaa=vbuz1 
    lda findcol.return
    jmp b4
  //SEG76 render::@4
  b4:
  //SEG77 [43] (byte) render::col#0 ← (byte) findcol::return#0
  //SEG78 [44] *((byte*) render::colline#5 + (byte) render::x#2) ← (byte) render::col#0 -- pbuz1_derefidx_vbuz2=vbuaa 
    ldy x
    sta (colline),y
  //SEG79 [45] (byte) render::x#1 ← ++ (byte) render::x#2 -- vbuz1=_inc_vbuz1 
    inc x
  //SEG80 [46] if((byte) render::x#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto render::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp x
    bne b2_from_b4
    jmp b3
  //SEG81 render::@3
  b3:
  //SEG82 [47] (byte*) render::colline#1 ← (byte*) render::colline#5 + (byte/signed byte/word/signed word/dword/signed dword) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc colline
    sta colline
    bcc !+
    inc colline+1
  !:
  //SEG83 [48] (byte) render::y#1 ← ++ (byte) render::y#4 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG84 [49] if((byte) render::y#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto render::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp y
    bne b1_from_b3
    jmp breturn
  //SEG85 render::@return
  breturn:
  //SEG86 [50] return 
    rts
}
//SEG87 findcol
// findcol(byte zeropage(5) x, byte zeropage(2) y)
findcol: {
    .label x = 5
    .label y = 2
    .label yp = 8
    .label return = 7
    .label mincol = 7
    .label mindiff = 6
  //SEG88 [52] phi from findcol to findcol::@1 [phi:findcol->findcol::@1]
  b1_from_findcol:
  //SEG89 [52] phi (byte) findcol::mincol#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:findcol->findcol::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta mincol
  //SEG90 [52] phi (byte) findcol::mindiff#10 = (byte/word/signed word/dword/signed dword) $ff [phi:findcol->findcol::@1#1] -- vbuz1=vbuc1 
    lda #$ff
    sta mindiff
  //SEG91 [52] phi (byte) findcol::i#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:findcol->findcol::@1#2] -- vbuyy=vbuc1 
    ldy #0
    jmp b1
  //SEG92 findcol::@1
  b1:
  //SEG93 [53] (byte) findcol::xp#0 ← *((const byte[]) XPOS#0 + (byte) findcol::i#10) -- vbuxx=pbuc1_derefidx_vbuyy 
    ldx XPOS,y
  //SEG94 [54] (byte) findcol::yp#0 ← *((const byte[]) YPOS#0 + (byte) findcol::i#10) -- vbuz1=pbuc1_derefidx_vbuyy 
    lda YPOS,y
    sta yp
  //SEG95 [55] if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2 -- vbuz1_neq_vbuxx_then_la1 
    cpx x
    bne b2
    jmp b8
  //SEG96 findcol::@8
  b8:
  //SEG97 [56] if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@2 -- vbuz1_neq_vbuz2_then_la1 
    lda y
    cmp yp
    bne b2
  //SEG98 [57] phi from findcol::@8 to findcol::@return [phi:findcol::@8->findcol::@return]
  breturn_from_b8:
  //SEG99 [57] phi (byte) findcol::return#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:findcol::@8->findcol::@return#0] -- vbuz1=vbuc1 
    lda #0
    sta return
    jmp breturn
  //SEG100 findcol::@return
  breturn:
  //SEG101 [58] return 
    rts
  //SEG102 findcol::@2
  b2:
  //SEG103 [59] if((byte) findcol::x#0<(byte) findcol::xp#0) goto findcol::@3 -- vbuz1_lt_vbuxx_then_la1 
    txa
    cmp x
    beq !+
    bcs b3
  !:
    jmp b9
  //SEG104 findcol::@9
  b9:
  //SEG105 [60] (byte) findcol::diff#2 ← (byte) findcol::x#0 - (byte) findcol::xp#0 -- vbuxx=vbuz1_minus_vbuxx 
    txa
    eor #$ff
    sec
    adc x
    tax
  //SEG106 [61] phi from findcol::@3 findcol::@9 to findcol::@4 [phi:findcol::@3/findcol::@9->findcol::@4]
  b4_from_b3:
  b4_from_b9:
  //SEG107 [61] phi (byte) findcol::diff#5 = (byte) findcol::diff#1 [phi:findcol::@3/findcol::@9->findcol::@4#0] -- register_copy 
    jmp b4
  //SEG108 findcol::@4
  b4:
  //SEG109 [62] if((byte) findcol::y#0<(byte) findcol::yp#0) goto findcol::@5 -- vbuz1_lt_vbuz2_then_la1 
    lda y
    cmp yp
    bcc b5
    jmp b10
  //SEG110 findcol::@10
  b10:
  //SEG111 [63] (byte~) findcol::$8 ← (byte) findcol::y#0 - (byte) findcol::yp#0 -- vbuaa=vbuz1_minus_vbuz2 
    lda y
    sec
    sbc yp
  //SEG112 [64] (byte) findcol::diff#4 ← (byte) findcol::diff#5 + (byte~) findcol::$8 -- vbuxx=vbuxx_plus_vbuaa 
    stx $ff
    clc
    adc $ff
    tax
  //SEG113 [65] phi from findcol::@10 findcol::@5 to findcol::@6 [phi:findcol::@10/findcol::@5->findcol::@6]
  b6_from_b10:
  b6_from_b5:
  //SEG114 [65] phi (byte) findcol::diff#7 = (byte) findcol::diff#4 [phi:findcol::@10/findcol::@5->findcol::@6#0] -- register_copy 
    jmp b6
  //SEG115 findcol::@6
  b6:
  //SEG116 [66] if((byte) findcol::diff#7>=(byte) findcol::mindiff#10) goto findcol::@13 -- vbuxx_ge_vbuz1_then_la1 
    cpx mindiff
    bcs b13
    jmp b11
  //SEG117 findcol::@11
  b11:
  //SEG118 [67] (byte) findcol::mincol#1 ← *((const byte[]) COLS#0 + (byte) findcol::i#10) -- vbuz1=pbuc1_derefidx_vbuyy 
    lda COLS,y
    sta mincol
  //SEG119 [68] phi from findcol::@11 findcol::@13 to findcol::@7 [phi:findcol::@11/findcol::@13->findcol::@7]
  b7_from_b11:
  b7_from_b13:
  //SEG120 [68] phi (byte) findcol::mindiff#11 = (byte) findcol::diff#7 [phi:findcol::@11/findcol::@13->findcol::@7#0] -- register_copy 
  //SEG121 [68] phi (byte) findcol::mincol#2 = (byte) findcol::mincol#1 [phi:findcol::@11/findcol::@13->findcol::@7#1] -- register_copy 
    jmp b7
  //SEG122 findcol::@7
  b7:
  //SEG123 [69] (byte) findcol::i#1 ← ++ (byte) findcol::i#10 -- vbuyy=_inc_vbuyy 
    iny
  //SEG124 [70] if((byte) findcol::i#1<(const byte) numpoints#0) goto findcol::@12 -- vbuyy_lt_vbuc1_then_la1 
    cpy #numpoints
    bcc b12
  //SEG125 [57] phi from findcol::@7 to findcol::@return [phi:findcol::@7->findcol::@return]
  breturn_from_b7:
  //SEG126 [57] phi (byte) findcol::return#2 = (byte) findcol::mincol#2 [phi:findcol::@7->findcol::@return#0] -- register_copy 
    jmp breturn
  //SEG127 findcol::@12
  b12:
  //SEG128 [71] (byte~) findcol::mindiff#13 ← (byte) findcol::mindiff#11 -- vbuz1=vbuxx 
    stx mindiff
  //SEG129 [52] phi from findcol::@12 to findcol::@1 [phi:findcol::@12->findcol::@1]
  b1_from_b12:
  //SEG130 [52] phi (byte) findcol::mincol#10 = (byte) findcol::mincol#2 [phi:findcol::@12->findcol::@1#0] -- register_copy 
  //SEG131 [52] phi (byte) findcol::mindiff#10 = (byte~) findcol::mindiff#13 [phi:findcol::@12->findcol::@1#1] -- register_copy 
  //SEG132 [52] phi (byte) findcol::i#10 = (byte) findcol::i#1 [phi:findcol::@12->findcol::@1#2] -- register_copy 
    jmp b1
  //SEG133 findcol::@13
  b13:
  //SEG134 [72] (byte~) findcol::mindiff#15 ← (byte) findcol::mindiff#10 -- vbuxx=vbuz1 
    ldx mindiff
    jmp b7_from_b13
  //SEG135 findcol::@5
  b5:
  //SEG136 [73] (byte~) findcol::$10 ← (byte) findcol::yp#0 - (byte) findcol::y#0 -- vbuaa=vbuz1_minus_vbuz2 
    lda yp
    sec
    sbc y
  //SEG137 [74] (byte) findcol::diff#3 ← (byte) findcol::diff#5 + (byte~) findcol::$10 -- vbuxx=vbuxx_plus_vbuaa 
    stx $ff
    clc
    adc $ff
    tax
    jmp b6_from_b5
  //SEG138 findcol::@3
  b3:
  //SEG139 [75] (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0 -- vbuxx=vbuxx_minus_vbuz1 
    txa
    sec
    sbc x
    tax
    jmp b4_from_b3
}
//SEG140 initscreen
initscreen: {
    .label screen = 3
  //SEG141 [77] phi from initscreen to initscreen::@1 [phi:initscreen->initscreen::@1]
  b1_from_initscreen:
  //SEG142 [77] phi (byte*) initscreen::screen#2 = (const byte*) SCREEN#0 [phi:initscreen->initscreen::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta screen
    lda #>SCREEN
    sta screen+1
    jmp b1
  //SEG143 [77] phi from initscreen::@1 to initscreen::@1 [phi:initscreen::@1->initscreen::@1]
  b1_from_b1:
  //SEG144 [77] phi (byte*) initscreen::screen#2 = (byte*) initscreen::screen#1 [phi:initscreen::@1->initscreen::@1#0] -- register_copy 
    jmp b1
  //SEG145 initscreen::@1
  b1:
  //SEG146 [78] *((byte*) initscreen::screen#2) ← (const byte) FILL#0 -- _deref_pbuz1=vbuc1 
    lda #FILL
    ldy #0
    sta (screen),y
  //SEG147 [79] (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2 -- pbuz1=_inc_pbuz1 
    inc screen
    bne !+
    inc screen+1
  !:
  //SEG148 [80] if((byte*) initscreen::screen#1<(const byte*) SCREEN#0+(word/signed word/dword/signed dword) $3e8) goto initscreen::@1 -- pbuz1_lt_pbuc1_then_la1 
    lda screen+1
    cmp #>SCREEN+$3e8
    bcc b1_from_b1
    bne !+
    lda screen
    cmp #<SCREEN+$3e8
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG149 initscreen::@return
  breturn:
  //SEG150 [81] return 
    rts
}
  // Points to create the Voronoi from
  XPOS: .byte 5, $f, 6, $22, $15, $1f
  YPOS: .byte 5, 8, $e, 2, $11, $16
  COLS: .byte 1, 2, 3, 4, 5, 7

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b5
Removing instruction jmp b1
Removing instruction jmp b6
Removing instruction jmp b2
Removing instruction jmp b7
Removing instruction jmp b3
Removing instruction jmp b8
Removing instruction jmp b4
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b4
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b8
Removing instruction jmp breturn
Removing instruction jmp b9
Removing instruction jmp b4
Removing instruction jmp b10
Removing instruction jmp b6
Removing instruction jmp b11
Removing instruction jmp b7
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda XPOS+3
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b1_from_b2 with b1
Replacing label b2_from_b4 with b2
Replacing label b1_from_b3 with b1
Replacing label b7_from_b13 with b7
Replacing label b6_from_b5 with b6
Replacing label b4_from_b3 with b4
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b1_from_main:
Removing instruction b1_from_b2:
Removing instruction render_from_b1:
Removing instruction b2_from_b1:
Removing instruction b1_from_b3:
Removing instruction b2_from_b1:
Removing instruction b2_from_b4:
Removing instruction findcol_from_b2:
Removing instruction b4_from_b3:
Removing instruction b4_from_b9:
Removing instruction b6_from_b10:
Removing instruction b6_from_b5:
Removing instruction b7_from_b11:
Removing instruction b7_from_b13:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction initscreen_from_main:
Removing instruction b2:
Removing instruction b5:
Removing instruction b6:
Removing instruction b7:
Removing instruction b8:
Removing instruction b9:
Removing instruction b10:
Removing instruction b1_from_render:
Removing instruction b4:
Removing instruction b3:
Removing instruction breturn:
Removing instruction b1_from_findcol:
Removing instruction b8:
Removing instruction breturn_from_b8:
Removing instruction b9:
Removing instruction b10:
Removing instruction b11:
Removing instruction breturn_from_b7:
Removing instruction b1_from_b12:
Removing instruction b1_from_initscreen:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda XPOS+3
Removing instruction lda #$28
Removing instruction lda y
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(byte*) COLORS
(const byte*) COLORS#0 COLORS = ((byte*))(word/dword/signed dword) $d800
(byte[]) COLS
(const byte[]) COLS#0 COLS = { (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 2, (byte/signed byte/word/signed word/dword/signed dword) 3, (byte/signed byte/word/signed word/dword/signed dword) 4, (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7 }
(byte) FILL
(const byte) FILL#0 FILL = (byte/word/signed word/dword/signed dword) $e6
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = ((byte*))(word/signed word/dword/signed dword) $400
(byte[]) XPOS
(const byte[]) XPOS#0 XPOS = { (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) $f, (byte/signed byte/word/signed word/dword/signed dword) 6, (byte/signed byte/word/signed word/dword/signed dword) $22, (byte/signed byte/word/signed word/dword/signed dword) $15, (byte/signed byte/word/signed word/dword/signed dword) $1f }
(byte[]) YPOS
(const byte[]) YPOS#0 YPOS = { (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 8, (byte/signed byte/word/signed word/dword/signed dword) $e, (byte/signed byte/word/signed word/dword/signed dword) 2, (byte/signed byte/word/signed word/dword/signed dword) $11, (byte/signed byte/word/signed word/dword/signed dword) $16 }
(void()) animate()
(byte/signed word/word/dword/signed dword~) animate::$0 reg byte x 4.0
(byte/signed word/word/dword/signed dword~) animate::$12 reg byte x 4.0
(byte/signed word/word/dword/signed dword~) animate::$15 reg byte a 4.0
(byte/signed word/word/dword/signed dword~) animate::$18 reg byte a 4.0
(byte/signed word/word/dword/signed dword~) animate::$3 reg byte x 4.0
(byte/signed word/word/dword/signed dword~) animate::$6 reg byte a 4.0
(byte/signed word/word/dword/signed dword~) animate::$9 reg byte a 4.0
(label) animate::@1
(label) animate::@10
(label) animate::@2
(label) animate::@3
(label) animate::@4
(label) animate::@5
(label) animate::@6
(label) animate::@7
(label) animate::@8
(label) animate::@9
(label) animate::@return
(byte()) findcol((byte) findcol::x , (byte) findcol::y)
(byte~) findcol::$10 reg byte a 20002.0
(byte~) findcol::$8 reg byte a 20002.0
(label) findcol::@1
(label) findcol::@10
(label) findcol::@11
(label) findcol::@12
(label) findcol::@13
(label) findcol::@2
(label) findcol::@3
(label) findcol::@4
(label) findcol::@5
(label) findcol::@6
(label) findcol::@7
(label) findcol::@8
(label) findcol::@9
(label) findcol::@return
(byte) findcol::diff
(byte) findcol::diff#1 reg byte x 20002.0
(byte) findcol::diff#2 reg byte x 20002.0
(byte) findcol::diff#3 reg byte x 20002.0
(byte) findcol::diff#4 reg byte x 20002.0
(byte) findcol::diff#5 reg byte x 10001.0
(byte) findcol::diff#7 reg byte x 13334.666666666666
(byte) findcol::i
(byte) findcol::i#1 reg byte y 10001.0
(byte) findcol::i#10 reg byte y 2631.842105263158
(byte) findcol::mincol
(byte) findcol::mincol#1 mincol zp ZP_BYTE:7 20002.0
(byte) findcol::mincol#10 mincol zp ZP_BYTE:7 1176.5882352941176
(byte) findcol::mincol#2 mincol zp ZP_BYTE:7 10001.0
(byte) findcol::mindiff
(byte) findcol::mindiff#10 mindiff zp ZP_BYTE:6 1875.1875
(byte) findcol::mindiff#11 reg byte x 10001.0
(byte~) findcol::mindiff#13 mindiff zp ZP_BYTE:6 20002.0
(byte~) findcol::mindiff#15 reg byte x 20002.0
(byte) findcol::return
(byte) findcol::return#0 reg byte a 2002.0
(byte) findcol::return#2 return zp ZP_BYTE:7 3667.333333333333
(byte) findcol::x
(byte) findcol::x#0 x zp ZP_BYTE:5 1640.2
(byte) findcol::xp
(byte) findcol::xp#0 reg byte x 10001.0
(byte) findcol::y
(byte) findcol::y#0 y zp ZP_BYTE:2 1708.5416666666665
(byte) findcol::yp
(byte) findcol::yp#0 yp zp ZP_BYTE:8 6250.625
(void()) initscreen()
(label) initscreen::@1
(label) initscreen::@return
(byte*) initscreen::screen
(byte*) initscreen::screen#1 screen zp ZP_WORD:3 16.5
(byte*) initscreen::screen#2 screen zp ZP_WORD:3 16.5
(void()) main()
(label) main::@1
(label) main::@2
(byte) numpoints
(const byte) numpoints#0 numpoints = (byte/signed byte/word/signed word/dword/signed dword) 6
(void()) render()
(label) render::@1
(label) render::@2
(label) render::@3
(label) render::@4
(label) render::@return
(byte) render::col
(byte) render::col#0 reg byte a 2002.0
(byte*) render::colline
(byte*) render::colline#1 colline zp ZP_WORD:3 67.33333333333333
(byte*) render::colline#5 colline zp ZP_WORD:3 120.29999999999998
(byte) render::x
(byte) render::x#1 x zp ZP_BYTE:5 1501.5
(byte) render::x#2 x zp ZP_BYTE:5 572.0
(byte) render::y
(byte) render::y#1 y zp ZP_BYTE:2 151.5
(byte) render::y#4 y zp ZP_BYTE:2 109.36363636363637

zp ZP_BYTE:2 [ render::y#4 render::y#1 findcol::y#0 ]
zp ZP_WORD:3 [ render::colline#5 render::colline#1 initscreen::screen#2 initscreen::screen#1 ]
zp ZP_BYTE:5 [ render::x#2 render::x#1 findcol::x#0 ]
reg byte y [ findcol::i#10 findcol::i#1 ]
zp ZP_BYTE:6 [ findcol::mindiff#10 findcol::mindiff#13 ]
zp ZP_BYTE:7 [ findcol::return#2 findcol::mincol#10 findcol::mincol#2 findcol::mincol#1 ]
reg byte x [ findcol::diff#5 findcol::diff#2 findcol::diff#1 ]
reg byte x [ findcol::mindiff#11 findcol::diff#7 findcol::diff#4 findcol::diff#3 findcol::mindiff#15 ]
reg byte x [ animate::$0 ]
reg byte x [ animate::$3 ]
reg byte a [ animate::$6 ]
reg byte a [ animate::$9 ]
reg byte x [ animate::$12 ]
reg byte a [ animate::$15 ]
reg byte a [ animate::$18 ]
reg byte a [ findcol::return#0 ]
reg byte a [ render::col#0 ]
reg byte x [ findcol::xp#0 ]
zp ZP_BYTE:8 [ findcol::yp#0 ]
reg byte a [ findcol::$8 ]
reg byte a [ findcol::$10 ]


FINAL ASSEMBLER
Score: 1504588

//SEG0 File Comments
// The screen
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label SCREEN = $400
  .label COLORS = $d800
  .const FILL = $e6
  // The total number of voronoi points
  .const numpoints = 6
//SEG3 @begin
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG5 @1
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
//SEG9 @end
//SEG10 main
main: {
  //SEG11 [5] call initscreen 
  //SEG12 [76] phi from main to initscreen [phi:main->initscreen]
    jsr initscreen
  //SEG13 [6] phi from main main::@2 to main::@1 [phi:main/main::@2->main::@1]
  //SEG14 main::@1
  b1:
  //SEG15 [7] call render 
  //SEG16 [36] phi from main::@1 to render [phi:main::@1->render]
    jsr render
  //SEG17 [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  //SEG18 main::@2
  //SEG19 [9] call animate 
    jsr animate
    jmp b1
}
//SEG20 animate
animate: {
  //SEG21 [10] (byte/signed word/word/dword/signed dword~) animate::$0 ← *((const byte[]) XPOS#0) + (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuxx=_deref_pbuc1_plus_1 
    ldx XPOS
    inx
  //SEG22 [11] *((const byte[]) XPOS#0) ← (byte/signed word/word/dword/signed dword~) animate::$0 -- _deref_pbuc1=vbuxx 
    stx XPOS
  //SEG23 [12] if(*((const byte[]) XPOS#0)!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto animate::@1 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$28
    cmp XPOS
    bne b1
  //SEG24 animate::@5
  //SEG25 [13] *((const byte[]) XPOS#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta XPOS
  //SEG26 animate::@1
  b1:
  //SEG27 [14] (byte/signed word/word/dword/signed dword~) animate::$3 ← *((const byte[]) YPOS#0) + (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuxx=_deref_pbuc1_plus_1 
    ldx YPOS
    inx
  //SEG28 [15] *((const byte[]) YPOS#0) ← (byte/signed word/word/dword/signed dword~) animate::$3 -- _deref_pbuc1=vbuxx 
    stx YPOS
  //SEG29 [16] if(*((const byte[]) YPOS#0)!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto animate::@2 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$19
    cmp YPOS
    bne b2
  //SEG30 animate::@6
  //SEG31 [17] *((const byte[]) YPOS#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta YPOS
  //SEG32 animate::@2
  b2:
  //SEG33 [18] (byte/signed word/word/dword/signed dword~) animate::$6 ← *((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 1) - (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=_deref_pbuc1_minus_1 
    lda XPOS+1
    sec
    sbc #1
  //SEG34 [19] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte/signed word/word/dword/signed dword~) animate::$6 -- _deref_pbuc1=vbuaa 
    sta XPOS+1
  //SEG35 [20] if(*((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 1)!=(byte/word/signed word/dword/signed dword) $ff) goto animate::@3 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp XPOS+1
    bne b3
  //SEG36 animate::@7
  //SEG37 [21] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte/signed byte/word/signed word/dword/signed dword) $28 -- _deref_pbuc1=vbuc2 
    lda #$28
    sta XPOS+1
  //SEG38 animate::@3
  b3:
  //SEG39 [22] (byte/signed word/word/dword/signed dword~) animate::$9 ← *((const byte[]) YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 2) + (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=_deref_pbuc1_plus_1 
    lda YPOS+2
    clc
    adc #1
  //SEG40 [23] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte/signed word/word/dword/signed dword~) animate::$9 -- _deref_pbuc1=vbuaa 
    sta YPOS+2
  //SEG41 [24] if(*((const byte[]) YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 2)!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto animate::@4 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$19
    cmp YPOS+2
    bne b4
  //SEG42 animate::@8
  //SEG43 [25] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta YPOS+2
  //SEG44 animate::@4
  b4:
  //SEG45 [26] (byte/signed word/word/dword/signed dword~) animate::$12 ← *((const byte[]) YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3) - (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuxx=_deref_pbuc1_minus_1 
    ldx YPOS+3
    dex
  //SEG46 [27] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte/signed word/word/dword/signed dword~) animate::$12 -- _deref_pbuc1=vbuxx 
    stx YPOS+3
  //SEG47 [28] if(*((const byte[]) YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3)!=(byte/word/signed word/dword/signed dword) $ff) goto animate::@return -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp YPOS+3
    bne breturn
  //SEG48 animate::@9
  //SEG49 [29] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte/signed byte/word/signed word/dword/signed dword) $19 -- _deref_pbuc1=vbuc2 
    lda #$19
    sta YPOS+3
  //SEG50 [30] (byte/signed word/word/dword/signed dword~) animate::$15 ← *((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3) + (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuaa=_deref_pbuc1_plus_vbuc2 
    lda #7
    clc
    adc XPOS+3
  //SEG51 [31] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte/signed word/word/dword/signed dword~) animate::$15 -- _deref_pbuc1=vbuaa 
    sta XPOS+3
  //SEG52 [32] if(*((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3)<(byte/signed byte/word/signed word/dword/signed dword) $28) goto animate::@return -- _deref_pbuc1_lt_vbuc2_then_la1 
    cmp #$28
    bcc breturn
  //SEG53 animate::@10
  //SEG54 [33] (byte/signed word/word/dword/signed dword~) animate::$18 ← *((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3) - (byte/signed byte/word/signed word/dword/signed dword) $28 -- vbuaa=_deref_pbuc1_minus_vbuc2 
    sec
    sbc #$28
  //SEG55 [34] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte/signed word/word/dword/signed dword~) animate::$18 -- _deref_pbuc1=vbuaa 
    sta XPOS+3
  //SEG56 animate::@return
  breturn:
  //SEG57 [35] return 
    rts
}
//SEG58 render
render: {
    .label x = 5
    .label colline = 3
    .label y = 2
  //SEG59 [37] phi from render to render::@1 [phi:render->render::@1]
  //SEG60 [37] phi (byte*) render::colline#5 = (const byte*) COLORS#0 [phi:render->render::@1#0] -- pbuz1=pbuc1 
    lda #<COLORS
    sta colline
    lda #>COLORS
    sta colline+1
  //SEG61 [37] phi (byte) render::y#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render->render::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta y
  //SEG62 [37] phi from render::@3 to render::@1 [phi:render::@3->render::@1]
  //SEG63 [37] phi (byte*) render::colline#5 = (byte*) render::colline#1 [phi:render::@3->render::@1#0] -- register_copy 
  //SEG64 [37] phi (byte) render::y#4 = (byte) render::y#1 [phi:render::@3->render::@1#1] -- register_copy 
  //SEG65 render::@1
  b1:
  //SEG66 [38] phi from render::@1 to render::@2 [phi:render::@1->render::@2]
  //SEG67 [38] phi (byte) render::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render::@1->render::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta x
  //SEG68 [38] phi from render::@4 to render::@2 [phi:render::@4->render::@2]
  //SEG69 [38] phi (byte) render::x#2 = (byte) render::x#1 [phi:render::@4->render::@2#0] -- register_copy 
  //SEG70 render::@2
  b2:
  //SEG71 [39] (byte) findcol::x#0 ← (byte) render::x#2
  //SEG72 [40] (byte) findcol::y#0 ← (byte) render::y#4
  //SEG73 [41] call findcol 
  //SEG74 [51] phi from render::@2 to findcol [phi:render::@2->findcol]
    jsr findcol
  //SEG75 [42] (byte) findcol::return#0 ← (byte) findcol::return#2 -- vbuaa=vbuz1 
    lda findcol.return
  //SEG76 render::@4
  //SEG77 [43] (byte) render::col#0 ← (byte) findcol::return#0
  //SEG78 [44] *((byte*) render::colline#5 + (byte) render::x#2) ← (byte) render::col#0 -- pbuz1_derefidx_vbuz2=vbuaa 
    ldy x
    sta (colline),y
  //SEG79 [45] (byte) render::x#1 ← ++ (byte) render::x#2 -- vbuz1=_inc_vbuz1 
    inc x
  //SEG80 [46] if((byte) render::x#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto render::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp x
    bne b2
  //SEG81 render::@3
  //SEG82 [47] (byte*) render::colline#1 ← (byte*) render::colline#5 + (byte/signed byte/word/signed word/dword/signed dword) $28 -- pbuz1=pbuz1_plus_vbuc1 
    clc
    adc colline
    sta colline
    bcc !+
    inc colline+1
  !:
  //SEG83 [48] (byte) render::y#1 ← ++ (byte) render::y#4 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG84 [49] if((byte) render::y#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto render::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp y
    bne b1
  //SEG85 render::@return
  //SEG86 [50] return 
    rts
}
//SEG87 findcol
// findcol(byte zeropage(5) x, byte zeropage(2) y)
findcol: {
    .label x = 5
    .label y = 2
    .label yp = 8
    .label return = 7
    .label mincol = 7
    .label mindiff = 6
  //SEG88 [52] phi from findcol to findcol::@1 [phi:findcol->findcol::@1]
  //SEG89 [52] phi (byte) findcol::mincol#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:findcol->findcol::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta mincol
  //SEG90 [52] phi (byte) findcol::mindiff#10 = (byte/word/signed word/dword/signed dword) $ff [phi:findcol->findcol::@1#1] -- vbuz1=vbuc1 
    lda #$ff
    sta mindiff
  //SEG91 [52] phi (byte) findcol::i#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:findcol->findcol::@1#2] -- vbuyy=vbuc1 
    ldy #0
  //SEG92 findcol::@1
  b1:
  //SEG93 [53] (byte) findcol::xp#0 ← *((const byte[]) XPOS#0 + (byte) findcol::i#10) -- vbuxx=pbuc1_derefidx_vbuyy 
    ldx XPOS,y
  //SEG94 [54] (byte) findcol::yp#0 ← *((const byte[]) YPOS#0 + (byte) findcol::i#10) -- vbuz1=pbuc1_derefidx_vbuyy 
    lda YPOS,y
    sta yp
  //SEG95 [55] if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2 -- vbuz1_neq_vbuxx_then_la1 
    cpx x
    bne b2
  //SEG96 findcol::@8
  //SEG97 [56] if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@2 -- vbuz1_neq_vbuz2_then_la1 
    lda y
    cmp yp
    bne b2
  //SEG98 [57] phi from findcol::@8 to findcol::@return [phi:findcol::@8->findcol::@return]
  //SEG99 [57] phi (byte) findcol::return#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:findcol::@8->findcol::@return#0] -- vbuz1=vbuc1 
    lda #0
    sta return
  //SEG100 findcol::@return
  breturn:
  //SEG101 [58] return 
    rts
  //SEG102 findcol::@2
  b2:
  //SEG103 [59] if((byte) findcol::x#0<(byte) findcol::xp#0) goto findcol::@3 -- vbuz1_lt_vbuxx_then_la1 
    txa
    cmp x
    beq !+
    bcs b3
  !:
  //SEG104 findcol::@9
  //SEG105 [60] (byte) findcol::diff#2 ← (byte) findcol::x#0 - (byte) findcol::xp#0 -- vbuxx=vbuz1_minus_vbuxx 
    txa
    eor #$ff
    sec
    adc x
    tax
  //SEG106 [61] phi from findcol::@3 findcol::@9 to findcol::@4 [phi:findcol::@3/findcol::@9->findcol::@4]
  //SEG107 [61] phi (byte) findcol::diff#5 = (byte) findcol::diff#1 [phi:findcol::@3/findcol::@9->findcol::@4#0] -- register_copy 
  //SEG108 findcol::@4
  b4:
  //SEG109 [62] if((byte) findcol::y#0<(byte) findcol::yp#0) goto findcol::@5 -- vbuz1_lt_vbuz2_then_la1 
    lda y
    cmp yp
    bcc b5
  //SEG110 findcol::@10
  //SEG111 [63] (byte~) findcol::$8 ← (byte) findcol::y#0 - (byte) findcol::yp#0 -- vbuaa=vbuz1_minus_vbuz2 
    sec
    sbc yp
  //SEG112 [64] (byte) findcol::diff#4 ← (byte) findcol::diff#5 + (byte~) findcol::$8 -- vbuxx=vbuxx_plus_vbuaa 
    stx $ff
    clc
    adc $ff
    tax
  //SEG113 [65] phi from findcol::@10 findcol::@5 to findcol::@6 [phi:findcol::@10/findcol::@5->findcol::@6]
  //SEG114 [65] phi (byte) findcol::diff#7 = (byte) findcol::diff#4 [phi:findcol::@10/findcol::@5->findcol::@6#0] -- register_copy 
  //SEG115 findcol::@6
  b6:
  //SEG116 [66] if((byte) findcol::diff#7>=(byte) findcol::mindiff#10) goto findcol::@13 -- vbuxx_ge_vbuz1_then_la1 
    cpx mindiff
    bcs b13
  //SEG117 findcol::@11
  //SEG118 [67] (byte) findcol::mincol#1 ← *((const byte[]) COLS#0 + (byte) findcol::i#10) -- vbuz1=pbuc1_derefidx_vbuyy 
    lda COLS,y
    sta mincol
  //SEG119 [68] phi from findcol::@11 findcol::@13 to findcol::@7 [phi:findcol::@11/findcol::@13->findcol::@7]
  //SEG120 [68] phi (byte) findcol::mindiff#11 = (byte) findcol::diff#7 [phi:findcol::@11/findcol::@13->findcol::@7#0] -- register_copy 
  //SEG121 [68] phi (byte) findcol::mincol#2 = (byte) findcol::mincol#1 [phi:findcol::@11/findcol::@13->findcol::@7#1] -- register_copy 
  //SEG122 findcol::@7
  b7:
  //SEG123 [69] (byte) findcol::i#1 ← ++ (byte) findcol::i#10 -- vbuyy=_inc_vbuyy 
    iny
  //SEG124 [70] if((byte) findcol::i#1<(const byte) numpoints#0) goto findcol::@12 -- vbuyy_lt_vbuc1_then_la1 
    cpy #numpoints
    bcc b12
  //SEG125 [57] phi from findcol::@7 to findcol::@return [phi:findcol::@7->findcol::@return]
  //SEG126 [57] phi (byte) findcol::return#2 = (byte) findcol::mincol#2 [phi:findcol::@7->findcol::@return#0] -- register_copy 
    jmp breturn
  //SEG127 findcol::@12
  b12:
  //SEG128 [71] (byte~) findcol::mindiff#13 ← (byte) findcol::mindiff#11 -- vbuz1=vbuxx 
    stx mindiff
  //SEG129 [52] phi from findcol::@12 to findcol::@1 [phi:findcol::@12->findcol::@1]
  //SEG130 [52] phi (byte) findcol::mincol#10 = (byte) findcol::mincol#2 [phi:findcol::@12->findcol::@1#0] -- register_copy 
  //SEG131 [52] phi (byte) findcol::mindiff#10 = (byte~) findcol::mindiff#13 [phi:findcol::@12->findcol::@1#1] -- register_copy 
  //SEG132 [52] phi (byte) findcol::i#10 = (byte) findcol::i#1 [phi:findcol::@12->findcol::@1#2] -- register_copy 
    jmp b1
  //SEG133 findcol::@13
  b13:
  //SEG134 [72] (byte~) findcol::mindiff#15 ← (byte) findcol::mindiff#10 -- vbuxx=vbuz1 
    ldx mindiff
    jmp b7
  //SEG135 findcol::@5
  b5:
  //SEG136 [73] (byte~) findcol::$10 ← (byte) findcol::yp#0 - (byte) findcol::y#0 -- vbuaa=vbuz1_minus_vbuz2 
    lda yp
    sec
    sbc y
  //SEG137 [74] (byte) findcol::diff#3 ← (byte) findcol::diff#5 + (byte~) findcol::$10 -- vbuxx=vbuxx_plus_vbuaa 
    stx $ff
    clc
    adc $ff
    tax
    jmp b6
  //SEG138 findcol::@3
  b3:
  //SEG139 [75] (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0 -- vbuxx=vbuxx_minus_vbuz1 
    txa
    sec
    sbc x
    tax
    jmp b4
}
//SEG140 initscreen
initscreen: {
    .label screen = 3
  //SEG141 [77] phi from initscreen to initscreen::@1 [phi:initscreen->initscreen::@1]
  //SEG142 [77] phi (byte*) initscreen::screen#2 = (const byte*) SCREEN#0 [phi:initscreen->initscreen::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta screen
    lda #>SCREEN
    sta screen+1
  //SEG143 [77] phi from initscreen::@1 to initscreen::@1 [phi:initscreen::@1->initscreen::@1]
  //SEG144 [77] phi (byte*) initscreen::screen#2 = (byte*) initscreen::screen#1 [phi:initscreen::@1->initscreen::@1#0] -- register_copy 
  //SEG145 initscreen::@1
  b1:
  //SEG146 [78] *((byte*) initscreen::screen#2) ← (const byte) FILL#0 -- _deref_pbuz1=vbuc1 
    lda #FILL
    ldy #0
    sta (screen),y
  //SEG147 [79] (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2 -- pbuz1=_inc_pbuz1 
    inc screen
    bne !+
    inc screen+1
  !:
  //SEG148 [80] if((byte*) initscreen::screen#1<(const byte*) SCREEN#0+(word/signed word/dword/signed dword) $3e8) goto initscreen::@1 -- pbuz1_lt_pbuc1_then_la1 
    lda screen+1
    cmp #>SCREEN+$3e8
    bcc b1
    bne !+
    lda screen
    cmp #<SCREEN+$3e8
    bcc b1
  !:
  //SEG149 initscreen::@return
  //SEG150 [81] return 
    rts
}
  // Points to create the Voronoi from
  XPOS: .byte 5, $f, 6, $22, $15, $1f
  YPOS: .byte 5, 8, $e, 2, $11, $16
  COLS: .byte 1, 2, 3, 4, 5, 7

