
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
divr16u: scope:[divr16u]  from div16u
  (word) divr16u::divisor#5 ← phi( div16u/(word) divr16u::divisor#0 )
  (word) divr16u::dividend#4 ← phi( div16u/(word) divr16u::dividend#1 )
  (word) divr16u::rem#8 ← phi( div16u/(word) divr16u::rem#3 )
  (word) divr16u::quotient#0 ← (word) 0
  (byte) divr16u::i#0 ← (byte) 0
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  (byte) divr16u::i#5 ← phi( divr16u/(byte) divr16u::i#0 divr16u::@3/(byte) divr16u::i#1 )
  (word) divr16u::divisor#3 ← phi( divr16u/(word) divr16u::divisor#5 divr16u::@3/(word) divr16u::divisor#6 )
  (word) divr16u::quotient#6 ← phi( divr16u/(word) divr16u::quotient#0 divr16u::@3/(word) divr16u::quotient#8 )
  (word) divr16u::dividend#2 ← phi( divr16u/(word) divr16u::dividend#4 divr16u::@3/(word) divr16u::dividend#5 )
  (word) divr16u::rem#4 ← phi( divr16u/(word) divr16u::rem#8 divr16u::@3/(word) divr16u::rem#9 )
  (word~) divr16u::$0 ← (word) divr16u::rem#4 << (number) 1
  (word) divr16u::rem#0 ← (word~) divr16u::$0
  (byte~) divr16u::$1 ← > (word) divr16u::dividend#2
  (number~) divr16u::$2 ← (byte~) divr16u::$1 & (number) $80
  (bool~) divr16u::$3 ← (number~) divr16u::$2 != (number) 0
  (bool~) divr16u::$4 ← ! (bool~) divr16u::$3
  if((bool~) divr16u::$4) goto divr16u::@2
  to:divr16u::@4
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  (byte) divr16u::i#3 ← phi( divr16u::@1/(byte) divr16u::i#5 divr16u::@4/(byte) divr16u::i#6 )
  (word) divr16u::divisor#1 ← phi( divr16u::@1/(word) divr16u::divisor#3 divr16u::@4/(word) divr16u::divisor#4 )
  (word) divr16u::rem#5 ← phi( divr16u::@1/(word) divr16u::rem#0 divr16u::@4/(word) divr16u::rem#1 )
  (word) divr16u::quotient#3 ← phi( divr16u::@1/(word) divr16u::quotient#6 divr16u::@4/(word) divr16u::quotient#7 )
  (word) divr16u::dividend#3 ← phi( divr16u::@1/(word) divr16u::dividend#2 divr16u::@4/(word) divr16u::dividend#6 )
  (word~) divr16u::$6 ← (word) divr16u::dividend#3 << (number) 1
  (word) divr16u::dividend#0 ← (word~) divr16u::$6
  (word~) divr16u::$7 ← (word) divr16u::quotient#3 << (number) 1
  (word) divr16u::quotient#1 ← (word~) divr16u::$7
  (bool~) divr16u::$8 ← (word) divr16u::rem#5 >= (word) divr16u::divisor#1
  (bool~) divr16u::$9 ← ! (bool~) divr16u::$8
  if((bool~) divr16u::$9) goto divr16u::@3
  to:divr16u::@5
divr16u::@4: scope:[divr16u]  from divr16u::@1
  (byte) divr16u::i#6 ← phi( divr16u::@1/(byte) divr16u::i#5 )
  (word) divr16u::divisor#4 ← phi( divr16u::@1/(word) divr16u::divisor#3 )
  (word) divr16u::quotient#7 ← phi( divr16u::@1/(word) divr16u::quotient#6 )
  (word) divr16u::dividend#6 ← phi( divr16u::@1/(word) divr16u::dividend#2 )
  (word) divr16u::rem#6 ← phi( divr16u::@1/(word) divr16u::rem#0 )
  (number~) divr16u::$5 ← (word) divr16u::rem#6 | (number) 1
  (word) divr16u::rem#1 ← (number~) divr16u::$5
  to:divr16u::@2
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  (word) divr16u::divisor#6 ← phi( divr16u::@2/(word) divr16u::divisor#1 divr16u::@5/(word) divr16u::divisor#2 )
  (word) divr16u::quotient#8 ← phi( divr16u::@2/(word) divr16u::quotient#1 divr16u::@5/(word) divr16u::quotient#2 )
  (word) divr16u::dividend#5 ← phi( divr16u::@2/(word) divr16u::dividend#0 divr16u::@5/(word) divr16u::dividend#7 )
  (word) divr16u::rem#9 ← phi( divr16u::@2/(word) divr16u::rem#5 divr16u::@5/(word) divr16u::rem#2 )
  (byte) divr16u::i#2 ← phi( divr16u::@2/(byte) divr16u::i#3 divr16u::@5/(byte) divr16u::i#4 )
  (byte) divr16u::i#1 ← (byte) divr16u::i#2 + rangenext(0,$f)
  (bool~) divr16u::$11 ← (byte) divr16u::i#1 != rangelast(0,$f)
  if((bool~) divr16u::$11) goto divr16u::@1
  to:divr16u::@6
divr16u::@5: scope:[divr16u]  from divr16u::@2
  (word) divr16u::dividend#7 ← phi( divr16u::@2/(word) divr16u::dividend#0 )
  (byte) divr16u::i#4 ← phi( divr16u::@2/(byte) divr16u::i#3 )
  (word) divr16u::divisor#2 ← phi( divr16u::@2/(word) divr16u::divisor#1 )
  (word) divr16u::rem#7 ← phi( divr16u::@2/(word) divr16u::rem#5 )
  (word) divr16u::quotient#4 ← phi( divr16u::@2/(word) divr16u::quotient#1 )
  (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#4
  (word~) divr16u::$10 ← (word) divr16u::rem#7 - (word) divr16u::divisor#2
  (word) divr16u::rem#2 ← (word~) divr16u::$10
  to:divr16u::@3
divr16u::@6: scope:[divr16u]  from divr16u::@3
  (word) divr16u::quotient#5 ← phi( divr16u::@3/(word) divr16u::quotient#8 )
  (word) divr16u::return#0 ← (word) divr16u::quotient#5
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  (word) divr16u::return#3 ← phi( divr16u::@6/(word) divr16u::return#0 )
  (word) divr16u::return#1 ← (word) divr16u::return#3
  return 
  to:@return

(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
div16u: scope:[div16u]  from sin8u_table
  (word) div16u::divisor#1 ← phi( sin8u_table/(word) div16u::divisor#0 )
  (word) div16u::dividend#1 ← phi( sin8u_table/(word) div16u::dividend#0 )
  (word) divr16u::dividend#1 ← (word) div16u::dividend#1
  (word) divr16u::divisor#0 ← (word) div16u::divisor#1
  (word) divr16u::rem#3 ← (number) 0
  call divr16u 
  (word) divr16u::return#2 ← (word) divr16u::return#1
  to:div16u::@1
div16u::@1: scope:[div16u]  from div16u
  (word) divr16u::return#4 ← phi( div16u/(word) divr16u::return#2 )
  (word~) div16u::$0 ← (word) divr16u::return#4
  (word) div16u::return#0 ← (word~) div16u::$0
  to:div16u::@return
div16u::@return: scope:[div16u]  from div16u::@1
  (word) div16u::return#3 ← phi( div16u::@1/(word) div16u::return#0 )
  (word) div16u::return#1 ← (word) div16u::return#3
  return 
  to:@return

(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
mul8u: scope:[mul8u]  from mul8su mulu8_sel
  (byte) mul8u::a#6 ← phi( mul8su/(byte) mul8u::a#1 mulu8_sel/(byte) mul8u::a#2 )
  (byte) mul8u::b#2 ← phi( mul8su/(byte) mul8u::b#0 mulu8_sel/(byte) mul8u::b#1 )
  (word) mul8u::res#0 ← (word) 0
  (word) mul8u::mb#0 ← (word)(byte) mul8u::b#2
  to:mul8u::@1
mul8u::@1: scope:[mul8u]  from mul8u mul8u::@4
  (word) mul8u::mb#5 ← phi( mul8u/(word) mul8u::mb#0 mul8u::@4/(word) mul8u::mb#1 )
  (word) mul8u::res#4 ← phi( mul8u/(word) mul8u::res#0 mul8u::@4/(word) mul8u::res#6 )
  (byte) mul8u::a#3 ← phi( mul8u/(byte) mul8u::a#6 mul8u::@4/(byte) mul8u::a#0 )
  (bool~) mul8u::$0 ← (byte) mul8u::a#3 != (number) 0
  if((bool~) mul8u::$0) goto mul8u::@2
  to:mul8u::@3
mul8u::@2: scope:[mul8u]  from mul8u::@1
  (word) mul8u::res#5 ← phi( mul8u::@1/(word) mul8u::res#4 )
  (word) mul8u::mb#4 ← phi( mul8u::@1/(word) mul8u::mb#5 )
  (byte) mul8u::a#4 ← phi( mul8u::@1/(byte) mul8u::a#3 )
  (number~) mul8u::$1 ← (byte) mul8u::a#4 & (number) 1
  (bool~) mul8u::$2 ← (number~) mul8u::$1 != (number) 0
  (bool~) mul8u::$3 ← ! (bool~) mul8u::$2
  if((bool~) mul8u::$3) goto mul8u::@4
  to:mul8u::@5
mul8u::@3: scope:[mul8u]  from mul8u::@1
  (word) mul8u::res#2 ← phi( mul8u::@1/(word) mul8u::res#4 )
  (word) mul8u::return#0 ← (word) mul8u::res#2
  to:mul8u::@return
mul8u::@4: scope:[mul8u]  from mul8u::@2 mul8u::@5
  (word) mul8u::res#6 ← phi( mul8u::@2/(word) mul8u::res#5 mul8u::@5/(word) mul8u::res#1 )
  (word) mul8u::mb#2 ← phi( mul8u::@2/(word) mul8u::mb#4 mul8u::@5/(word) mul8u::mb#3 )
  (byte) mul8u::a#5 ← phi( mul8u::@2/(byte) mul8u::a#4 mul8u::@5/(byte) mul8u::a#7 )
  (byte~) mul8u::$5 ← (byte) mul8u::a#5 >> (number) 1
  (byte) mul8u::a#0 ← (byte~) mul8u::$5
  (word~) mul8u::$6 ← (word) mul8u::mb#2 << (number) 1
  (word) mul8u::mb#1 ← (word~) mul8u::$6
  to:mul8u::@1
mul8u::@5: scope:[mul8u]  from mul8u::@2
  (byte) mul8u::a#7 ← phi( mul8u::@2/(byte) mul8u::a#4 )
  (word) mul8u::mb#3 ← phi( mul8u::@2/(word) mul8u::mb#4 )
  (word) mul8u::res#3 ← phi( mul8u::@2/(word) mul8u::res#5 )
  (word~) mul8u::$4 ← (word) mul8u::res#3 + (word) mul8u::mb#3
  (word) mul8u::res#1 ← (word~) mul8u::$4
  to:mul8u::@4
mul8u::@return: scope:[mul8u]  from mul8u::@3
  (word) mul8u::return#4 ← phi( mul8u::@3/(word) mul8u::return#0 )
  (word) mul8u::return#1 ← (word) mul8u::return#4
  return 
  to:@return

(signed word()) mul8su((signed byte) mul8su::a , (byte) mul8su::b)
mul8su: scope:[mul8su]  from sin8u_table::@15
  (byte) mul8su::b#1 ← phi( sin8u_table::@15/(byte) mul8su::b#0 )
  (signed byte) mul8su::a#1 ← phi( sin8u_table::@15/(signed byte) mul8su::a#0 )
  (byte) mul8u::a#1 ← (byte)(signed byte) mul8su::a#1
  (byte) mul8u::b#0 ← (byte)(byte) mul8su::b#1
  call mul8u 
  (word) mul8u::return#2 ← (word) mul8u::return#1
  to:mul8su::@3
mul8su::@3: scope:[mul8su]  from mul8su
  (byte) mul8su::b#3 ← phi( mul8su/(byte) mul8su::b#1 )
  (signed byte) mul8su::a#2 ← phi( mul8su/(signed byte) mul8su::a#1 )
  (word) mul8u::return#5 ← phi( mul8su/(word) mul8u::return#2 )
  (word~) mul8su::$0 ← (word) mul8u::return#5
  (word) mul8su::m#0 ← (word~) mul8su::$0
  (bool~) mul8su::$1 ← (signed byte) mul8su::a#2 < (number) 0
  (bool~) mul8su::$2 ← ! (bool~) mul8su::$1
  if((bool~) mul8su::$2) goto mul8su::@1
  to:mul8su::@2
mul8su::@1: scope:[mul8su]  from mul8su::@2 mul8su::@3
  (word) mul8su::m#2 ← phi( mul8su::@2/(word) mul8su::m#1 mul8su::@3/(word) mul8su::m#0 )
  (signed word) mul8su::return#0 ← (signed word)(word) mul8su::m#2
  to:mul8su::@return
mul8su::@2: scope:[mul8su]  from mul8su::@3
  (byte) mul8su::b#2 ← phi( mul8su::@3/(byte) mul8su::b#3 )
  (word) mul8su::m#3 ← phi( mul8su::@3/(word) mul8su::m#0 )
  (byte~) mul8su::$4 ← > (word) mul8su::m#3
  (byte~) mul8su::$7 ← (byte)(byte) mul8su::b#2
  (byte~) mul8su::$5 ← (byte~) mul8su::$4 - (byte~) mul8su::$7
  (byte~) mul8su::$6 ← (byte~) mul8su::$5
  (word) mul8su::m#1 ← (word) mul8su::m#3 hi= (byte~) mul8su::$6
  to:mul8su::@1
mul8su::@return: scope:[mul8su]  from mul8su::@1
  (signed word) mul8su::return#3 ← phi( mul8su::@1/(signed word) mul8su::return#0 )
  (signed word) mul8su::return#1 ← (signed word) mul8su::return#3
  return 
  to:@return

(signed byte()) sin8s((word) sin8s::x)
sin8s: scope:[sin8s]  from sin8u_table::@2
  (word) sin8s::x#3 ← phi( sin8u_table::@2/(word) sin8s::x#2 )
  (byte) sin8s::isUpper#0 ← (byte) 0
  (bool~) sin8s::$0 ← (word) sin8s::x#3 >= (const nomodify word) PI_u4f12
  (bool~) sin8s::$1 ← ! (bool~) sin8s::$0
  if((bool~) sin8s::$1) goto sin8s::@1
  to:sin8s::@5
sin8s::@1: scope:[sin8s]  from sin8s sin8s::@5
  (byte) sin8s::isUpper#10 ← phi( sin8s/(byte) sin8s::isUpper#0 sin8s::@5/(byte) sin8s::isUpper#1 )
  (word) sin8s::x#4 ← phi( sin8s/(word) sin8s::x#3 sin8s::@5/(word) sin8s::x#0 )
  (bool~) sin8s::$2 ← (word) sin8s::x#4 >= (const nomodify word) PI_HALF_u4f12
  (bool~) sin8s::$3 ← ! (bool~) sin8s::$2
  if((bool~) sin8s::$3) goto sin8s::@2
  to:sin8s::@6
sin8s::@5: scope:[sin8s]  from sin8s
  (word) sin8s::x#5 ← phi( sin8s/(word) sin8s::x#3 )
  (word~) sin8s::$18 ← (word) sin8s::x#5 - (const nomodify word) PI_u4f12
  (word) sin8s::x#0 ← (word~) sin8s::$18
  (byte) sin8s::isUpper#1 ← (number) 1
  to:sin8s::@1
sin8s::@2: scope:[sin8s]  from sin8s::@1 sin8s::@6
  (byte) sin8s::isUpper#9 ← phi( sin8s::@1/(byte) sin8s::isUpper#10 sin8s::@6/(byte) sin8s::isUpper#11 )
  (word) sin8s::x#6 ← phi( sin8s::@1/(word) sin8s::x#4 sin8s::@6/(word) sin8s::x#1 )
  (word~) sin8s::$4 ← (word) sin8s::x#6 << (number) 3
  (byte~) sin8s::$5 ← > (word~) sin8s::$4
  (byte) sin8s::x1#0 ← (byte~) sin8s::$5
  (byte) mulu8_sel::v1#0 ← (byte) sin8s::x1#0
  (byte) mulu8_sel::v2#0 ← (byte) sin8s::x1#0
  (byte) mulu8_sel::select#0 ← (number) 0
  call mulu8_sel 
  (byte) mulu8_sel::return#0 ← (byte) mulu8_sel::return#6
  to:sin8s::@9
sin8s::@9: scope:[sin8s]  from sin8s::@2
  (byte) sin8s::isUpper#8 ← phi( sin8s::@2/(byte) sin8s::isUpper#9 )
  (byte) sin8s::x1#1 ← phi( sin8s::@2/(byte) sin8s::x1#0 )
  (byte) mulu8_sel::return#7 ← phi( sin8s::@2/(byte) mulu8_sel::return#0 )
  (byte~) sin8s::$6 ← (byte) mulu8_sel::return#7
  (byte) sin8s::x2#0 ← (byte~) sin8s::$6
  (byte) mulu8_sel::v1#1 ← (byte) sin8s::x2#0
  (byte) mulu8_sel::v2#1 ← (byte) sin8s::x1#1
  (byte) mulu8_sel::select#1 ← (number) 1
  call mulu8_sel 
  (byte) mulu8_sel::return#1 ← (byte) mulu8_sel::return#6
  to:sin8s::@10
sin8s::@10: scope:[sin8s]  from sin8s::@9
  (byte) sin8s::isUpper#7 ← phi( sin8s::@9/(byte) sin8s::isUpper#8 )
  (byte) sin8s::x1#4 ← phi( sin8s::@9/(byte) sin8s::x1#1 )
  (byte) mulu8_sel::return#8 ← phi( sin8s::@9/(byte) mulu8_sel::return#1 )
  (byte~) sin8s::$7 ← (byte) mulu8_sel::return#8
  (byte) sin8s::x3#0 ← (byte~) sin8s::$7
  (byte) mulu8_sel::v1#2 ← (byte) sin8s::x3#0
  (byte) mulu8_sel::v2#2 ← (const nomodify byte) sin8s::DIV_6
  (byte) mulu8_sel::select#2 ← (number) 1
  call mulu8_sel 
  (byte) mulu8_sel::return#2 ← (byte) mulu8_sel::return#6
  to:sin8s::@11
sin8s::@11: scope:[sin8s]  from sin8s::@10
  (byte) sin8s::isUpper#6 ← phi( sin8s::@10/(byte) sin8s::isUpper#7 )
  (byte) sin8s::x3#1 ← phi( sin8s::@10/(byte) sin8s::x3#0 )
  (byte) sin8s::x1#2 ← phi( sin8s::@10/(byte) sin8s::x1#4 )
  (byte) mulu8_sel::return#9 ← phi( sin8s::@10/(byte) mulu8_sel::return#2 )
  (byte~) sin8s::$8 ← (byte) mulu8_sel::return#9
  (byte) sin8s::x3_6#0 ← (byte~) sin8s::$8
  (byte~) sin8s::$9 ← (byte) sin8s::x1#2 - (byte) sin8s::x3_6#0
  (byte) sin8s::usinx#0 ← (byte~) sin8s::$9
  (byte) mulu8_sel::v1#3 ← (byte) sin8s::x3#1
  (byte) mulu8_sel::v2#3 ← (byte) sin8s::x1#2
  (byte) mulu8_sel::select#3 ← (number) 0
  call mulu8_sel 
  (byte) mulu8_sel::return#3 ← (byte) mulu8_sel::return#6
  to:sin8s::@12
sin8s::@12: scope:[sin8s]  from sin8s::@11
  (byte) sin8s::isUpper#5 ← phi( sin8s::@11/(byte) sin8s::isUpper#6 )
  (byte) sin8s::usinx#7 ← phi( sin8s::@11/(byte) sin8s::usinx#0 )
  (byte) sin8s::x1#3 ← phi( sin8s::@11/(byte) sin8s::x1#2 )
  (byte) mulu8_sel::return#10 ← phi( sin8s::@11/(byte) mulu8_sel::return#3 )
  (byte~) sin8s::$10 ← (byte) mulu8_sel::return#10
  (byte) sin8s::x4#0 ← (byte~) sin8s::$10
  (byte) mulu8_sel::v1#4 ← (byte) sin8s::x4#0
  (byte) mulu8_sel::v2#4 ← (byte) sin8s::x1#3
  (byte) mulu8_sel::select#4 ← (number) 0
  call mulu8_sel 
  (byte) mulu8_sel::return#4 ← (byte) mulu8_sel::return#6
  to:sin8s::@13
sin8s::@13: scope:[sin8s]  from sin8s::@12
  (byte) sin8s::isUpper#3 ← phi( sin8s::@12/(byte) sin8s::isUpper#5 )
  (byte) sin8s::usinx#3 ← phi( sin8s::@12/(byte) sin8s::usinx#7 )
  (byte) mulu8_sel::return#11 ← phi( sin8s::@12/(byte) mulu8_sel::return#4 )
  (byte~) sin8s::$11 ← (byte) mulu8_sel::return#11
  (byte) sin8s::x5#0 ← (byte~) sin8s::$11
  (byte~) sin8s::$12 ← (byte) sin8s::x5#0 >> (number) 4
  (byte) sin8s::x5_128#0 ← (byte~) sin8s::$12
  (byte~) sin8s::$13 ← (byte) sin8s::usinx#3 + (byte) sin8s::x5_128#0
  (byte) sin8s::usinx#1 ← (byte~) sin8s::$13
  (bool~) sin8s::$14 ← (byte) sin8s::usinx#1 >= (number) $80
  (bool~) sin8s::$15 ← ! (bool~) sin8s::$14
  if((bool~) sin8s::$15) goto sin8s::@3
  to:sin8s::@7
sin8s::@6: scope:[sin8s]  from sin8s::@1
  (byte) sin8s::isUpper#11 ← phi( sin8s::@1/(byte) sin8s::isUpper#10 )
  (word) sin8s::x#7 ← phi( sin8s::@1/(word) sin8s::x#4 )
  (word~) sin8s::$19 ← (const nomodify word) PI_u4f12 - (word) sin8s::x#7
  (word) sin8s::x#1 ← (word~) sin8s::$19
  to:sin8s::@2
sin8s::@3: scope:[sin8s]  from sin8s::@13 sin8s::@7
  (byte) sin8s::isUpper#2 ← phi( sin8s::@13/(byte) sin8s::isUpper#3 sin8s::@7/(byte) sin8s::isUpper#4 )
  (byte) sin8s::usinx#4 ← phi( sin8s::@13/(byte) sin8s::usinx#1 sin8s::@7/(byte) sin8s::usinx#2 )
  (signed byte) sin8s::sinx#0 ← (signed byte)(byte) sin8s::usinx#4
  (bool~) sin8s::$16 ← (byte) sin8s::isUpper#2 != (number) 0
  (bool~) sin8s::$17 ← ! (bool~) sin8s::$16
  if((bool~) sin8s::$17) goto sin8s::@4
  to:sin8s::@8
sin8s::@7: scope:[sin8s]  from sin8s::@13
  (byte) sin8s::isUpper#4 ← phi( sin8s::@13/(byte) sin8s::isUpper#3 )
  (byte) sin8s::usinx#5 ← phi( sin8s::@13/(byte) sin8s::usinx#1 )
  (byte) sin8s::usinx#2 ← -- (byte) sin8s::usinx#5
  to:sin8s::@3
sin8s::@4: scope:[sin8s]  from sin8s::@3 sin8s::@8
  (signed byte) sin8s::sinx#2 ← phi( sin8s::@3/(signed byte) sin8s::sinx#0 sin8s::@8/(signed byte) sin8s::sinx#1 )
  (signed byte) sin8s::return#0 ← (signed byte) sin8s::sinx#2
  to:sin8s::@return
sin8s::@8: scope:[sin8s]  from sin8s::@3
  (byte) sin8s::usinx#6 ← phi( sin8s::@3/(byte) sin8s::usinx#4 )
  (signed byte~) sin8s::$20 ← - (signed byte)(byte) sin8s::usinx#6
  (signed byte) sin8s::sinx#1 ← (signed byte~) sin8s::$20
  to:sin8s::@4
sin8s::@return: scope:[sin8s]  from sin8s::@4
  (signed byte) sin8s::return#3 ← phi( sin8s::@4/(signed byte) sin8s::return#0 )
  (signed byte) sin8s::return#1 ← (signed byte) sin8s::return#3
  return 
  to:@return

(byte()) mulu8_sel((byte) mulu8_sel::v1 , (byte) mulu8_sel::v2 , (byte) mulu8_sel::select)
mulu8_sel: scope:[mulu8_sel]  from sin8s::@10 sin8s::@11 sin8s::@12 sin8s::@2 sin8s::@9
  (byte) mulu8_sel::select#6 ← phi( sin8s::@10/(byte) mulu8_sel::select#2 sin8s::@11/(byte) mulu8_sel::select#3 sin8s::@12/(byte) mulu8_sel::select#4 sin8s::@2/(byte) mulu8_sel::select#0 sin8s::@9/(byte) mulu8_sel::select#1 )
  (byte) mulu8_sel::v2#5 ← phi( sin8s::@10/(byte) mulu8_sel::v2#2 sin8s::@11/(byte) mulu8_sel::v2#3 sin8s::@12/(byte) mulu8_sel::v2#4 sin8s::@2/(byte) mulu8_sel::v2#0 sin8s::@9/(byte) mulu8_sel::v2#1 )
  (byte) mulu8_sel::v1#5 ← phi( sin8s::@10/(byte) mulu8_sel::v1#2 sin8s::@11/(byte) mulu8_sel::v1#3 sin8s::@12/(byte) mulu8_sel::v1#4 sin8s::@2/(byte) mulu8_sel::v1#0 sin8s::@9/(byte) mulu8_sel::v1#1 )
  (byte) mul8u::a#2 ← (byte) mulu8_sel::v1#5
  (byte) mul8u::b#1 ← (byte) mulu8_sel::v2#5
  call mul8u 
  (word) mul8u::return#3 ← (word) mul8u::return#1
  to:mulu8_sel::@1
mulu8_sel::@1: scope:[mulu8_sel]  from mulu8_sel
  (byte) mulu8_sel::select#5 ← phi( mulu8_sel/(byte) mulu8_sel::select#6 )
  (word) mul8u::return#6 ← phi( mulu8_sel/(word) mul8u::return#3 )
  (word~) mulu8_sel::$0 ← (word) mul8u::return#6
  (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5
  (byte~) mulu8_sel::$2 ← > (word~) mulu8_sel::$1
  (byte) mulu8_sel::return#5 ← (byte~) mulu8_sel::$2
  to:mulu8_sel::@return
mulu8_sel::@return: scope:[mulu8_sel]  from mulu8_sel::@1
  (byte) mulu8_sel::return#12 ← phi( mulu8_sel::@1/(byte) mulu8_sel::return#5 )
  (byte) mulu8_sel::return#6 ← (byte) mulu8_sel::return#12
  return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  (byte) memset::c#4 ← phi( print_cls/(byte) memset::c#0 )
  (void*) memset::str#3 ← phi( print_cls/(void*) memset::str#0 )
  (word) memset::num#1 ← phi( print_cls/(word) memset::num#0 )
  (bool~) memset::$0 ← (word) memset::num#1 > (number) 0
  (bool~) memset::$1 ← ! (bool~) memset::$0
  if((bool~) memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@3
  (void*) memset::str#1 ← phi( memset/(void*) memset::str#3 memset::@3/(void*) memset::str#4 )
  (void*) memset::return#0 ← (void*) memset::str#1
  to:memset::@return
memset::@2: scope:[memset]  from memset
  (byte) memset::c#3 ← phi( memset/(byte) memset::c#4 )
  (word) memset::num#2 ← phi( memset/(word) memset::num#1 )
  (void*) memset::str#2 ← phi( memset/(void*) memset::str#3 )
  (byte*~) memset::$4 ← (byte*)(void*) memset::str#2
  (byte*~) memset::$2 ← (byte*~) memset::$4 + (word) memset::num#2
  (byte*) memset::end#0 ← (byte*~) memset::$2
  (byte*) memset::dst#0 ← ((byte*)) (void*) memset::str#2
  to:memset::@3
memset::@3: scope:[memset]  from memset::@2 memset::@4
  (byte) memset::c#2 ← phi( memset::@2/(byte) memset::c#3 memset::@4/(byte) memset::c#1 )
  (void*) memset::str#4 ← phi( memset::@2/(void*) memset::str#2 memset::@4/(void*) memset::str#5 )
  (byte*) memset::end#1 ← phi( memset::@2/(byte*) memset::end#0 memset::@4/(byte*) memset::end#2 )
  (byte*) memset::dst#2 ← phi( memset::@2/(byte*) memset::dst#0 memset::@4/(byte*) memset::dst#1 )
  (bool~) memset::$3 ← (byte*) memset::dst#2 != (byte*) memset::end#1
  if((bool~) memset::$3) goto memset::@4
  to:memset::@1
memset::@4: scope:[memset]  from memset::@3
  (void*) memset::str#5 ← phi( memset::@3/(void*) memset::str#4 )
  (byte*) memset::end#2 ← phi( memset::@3/(byte*) memset::end#1 )
  (byte*) memset::dst#3 ← phi( memset::@3/(byte*) memset::dst#2 )
  (byte) memset::c#1 ← phi( memset::@3/(byte) memset::c#2 )
  *((byte*) memset::dst#3) ← (byte) memset::c#1
  (byte*) memset::dst#1 ← ++ (byte*) memset::dst#3
  to:memset::@3
memset::@return: scope:[memset]  from memset::@1
  (void*) memset::return#3 ← phi( memset::@1/(void*) memset::return#0 )
  (void*) memset::return#1 ← (void*) memset::return#3
  return 
  to:@return
@1: scope:[]  from @begin
  (byte*) print_screen#0 ← (byte*)(number) $400
  (byte*) print_line_cursor#0 ← (byte*) print_screen#0
  (byte*) print_char_cursor#0 ← (byte*) print_line_cursor#0
  to:@2

(void()) print_str((byte*) print_str::str)
print_str: scope:[print_str]  from sin8u_table::@11 sin8u_table::@16 sin8u_table::@18 sin8u_table::@20 sin8u_table::@22 sin8u_table::@3 sin8u_table::@5 sin8u_table::@7 sin8u_table::@9
  (byte*) print_char_cursor#110 ← phi( sin8u_table::@11/(byte*) print_char_cursor#33 sin8u_table::@16/(byte*) print_char_cursor#107 sin8u_table::@18/(byte*) print_char_cursor#38 sin8u_table::@20/(byte*) print_char_cursor#40 sin8u_table::@22/(byte*) print_char_cursor#42 sin8u_table::@3/(byte*) print_char_cursor#106 sin8u_table::@5/(byte*) print_char_cursor#27 sin8u_table::@7/(byte*) print_char_cursor#29 sin8u_table::@9/(byte*) print_char_cursor#31 )
  (byte*) print_str::str#13 ← phi( sin8u_table::@11/(byte*) print_str::str#5 sin8u_table::@16/(byte*) print_str::str#6 sin8u_table::@18/(byte*) print_str::str#7 sin8u_table::@20/(byte*) print_str::str#8 sin8u_table::@22/(byte*) print_str::str#9 sin8u_table::@3/(byte*) print_str::str#1 sin8u_table::@5/(byte*) print_str::str#2 sin8u_table::@7/(byte*) print_str::str#3 sin8u_table::@9/(byte*) print_str::str#4 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@3
  (byte*) print_char_cursor#95 ← phi( print_str/(byte*) print_char_cursor#110 print_str::@3/(byte*) print_char_cursor#1 )
  (byte*) print_str::str#10 ← phi( print_str/(byte*) print_str::str#13 print_str::@3/(byte*) print_str::str#0 )
  (bool~) print_str::$1 ← (number) 0 != *((byte*) print_str::str#10)
  if((bool~) print_str::$1) goto print_str::@2
  to:print_str::@return
print_str::@2: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#94 ← phi( print_str::@1/(byte*) print_char_cursor#95 )
  (byte*) print_str::str#11 ← phi( print_str::@1/(byte*) print_str::str#10 )
  (byte) print_char::ch#0 ← *((byte*) print_str::str#11)
  call print_char 
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@2
  (byte*) print_str::str#12 ← phi( print_str::@2/(byte*) print_str::str#11 )
  (byte*) print_char_cursor#48 ← phi( print_str::@2/(byte*) print_char_cursor#20 )
  (byte*) print_char_cursor#1 ← (byte*) print_char_cursor#48
  (byte*) print_str::str#0 ← ++ (byte*) print_str::str#12
  to:print_str::@1
print_str::@return: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#49 ← phi( print_str::@1/(byte*) print_char_cursor#95 )
  (byte*) print_char_cursor#2 ← (byte*) print_char_cursor#49
  return 
  to:@return

(void()) print_ln()
print_ln: scope:[print_ln]  from sin8u_table::@13 sin8u_table::@24
  (byte*) print_char_cursor#96 ← phi( sin8u_table::@13/(byte*) print_char_cursor#35 sin8u_table::@24/(byte*) print_char_cursor#44 )
  (byte*) print_line_cursor#23 ← phi( sin8u_table::@13/(byte*) print_line_cursor#25 sin8u_table::@24/(byte*) print_line_cursor#26 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  (byte*) print_char_cursor#50 ← phi( print_ln/(byte*) print_char_cursor#96 print_ln::@1/(byte*) print_char_cursor#50 )
  (byte*) print_line_cursor#12 ← phi( print_ln/(byte*) print_line_cursor#23 print_ln::@1/(byte*) print_line_cursor#1 )
  (byte*~) print_ln::$0 ← (byte*) print_line_cursor#12 + (number) $28
  (byte*) print_line_cursor#1 ← (byte*~) print_ln::$0
  (bool~) print_ln::$1 ← (byte*) print_line_cursor#1 < (byte*) print_char_cursor#50
  if((bool~) print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  (byte*) print_line_cursor#13 ← phi( print_ln::@1/(byte*) print_line_cursor#1 )
  (byte*) print_char_cursor#3 ← (byte*) print_line_cursor#13
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  (byte*) print_char_cursor#51 ← phi( print_ln::@2/(byte*) print_char_cursor#3 )
  (byte*) print_line_cursor#14 ← phi( print_ln::@2/(byte*) print_line_cursor#13 )
  (byte*) print_line_cursor#2 ← (byte*) print_line_cursor#14
  (byte*) print_char_cursor#4 ← (byte*) print_char_cursor#51
  return 
  to:@return

(void()) print_sint((signed word) print_sint::w)
print_sint: scope:[print_sint]  from sin8u_table::@21
  (byte*) print_char_cursor#111 ← phi( sin8u_table::@21/(byte*) print_char_cursor#41 )
  (signed word) print_sint::w#2 ← phi( sin8u_table::@21/(signed word) print_sint::w#1 )
  (bool~) print_sint::$0 ← (signed word) print_sint::w#2 < (number) 0
  if((bool~) print_sint::$0) goto print_sint::@1
  to:print_sint::@3
print_sint::@1: scope:[print_sint]  from print_sint
  (signed word) print_sint::w#5 ← phi( print_sint/(signed word) print_sint::w#2 )
  (byte*) print_char_cursor#97 ← phi( print_sint/(byte*) print_char_cursor#111 )
  (byte) print_char::ch#1 ← (byte) '-'
  call print_char 
  to:print_sint::@4
print_sint::@4: scope:[print_sint]  from print_sint::@1
  (signed word) print_sint::w#3 ← phi( print_sint::@1/(signed word) print_sint::w#5 )
  (byte*) print_char_cursor#52 ← phi( print_sint::@1/(byte*) print_char_cursor#20 )
  (byte*) print_char_cursor#5 ← (byte*) print_char_cursor#52
  (signed word~) print_sint::$4 ← - (signed word) print_sint::w#3
  (signed word) print_sint::w#0 ← (signed word~) print_sint::$4
  to:print_sint::@2
print_sint::@3: scope:[print_sint]  from print_sint
  (signed word) print_sint::w#7 ← phi( print_sint/(signed word) print_sint::w#2 )
  (byte*) print_char_cursor#98 ← phi( print_sint/(byte*) print_char_cursor#111 )
  (byte) print_char::ch#2 ← (byte) ' '
  call print_char 
  to:print_sint::@5
print_sint::@5: scope:[print_sint]  from print_sint::@3
  (signed word) print_sint::w#6 ← phi( print_sint::@3/(signed word) print_sint::w#7 )
  (byte*) print_char_cursor#53 ← phi( print_sint::@3/(byte*) print_char_cursor#20 )
  (byte*) print_char_cursor#6 ← (byte*) print_char_cursor#53
  to:print_sint::@2
print_sint::@2: scope:[print_sint]  from print_sint::@4 print_sint::@5
  (byte*) print_char_cursor#99 ← phi( print_sint::@4/(byte*) print_char_cursor#5 print_sint::@5/(byte*) print_char_cursor#6 )
  (signed word) print_sint::w#4 ← phi( print_sint::@4/(signed word) print_sint::w#0 print_sint::@5/(signed word) print_sint::w#6 )
  (word) print_uint::w#0 ← (word)(signed word) print_sint::w#4
  call print_uint 
  to:print_sint::@6
print_sint::@6: scope:[print_sint]  from print_sint::@2
  (byte*) print_char_cursor#54 ← phi( print_sint::@2/(byte*) print_char_cursor#15 )
  (byte*) print_char_cursor#7 ← (byte*) print_char_cursor#54
  to:print_sint::@return
print_sint::@return: scope:[print_sint]  from print_sint::@6
  (byte*) print_char_cursor#55 ← phi( print_sint::@6/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#8 ← (byte*) print_char_cursor#55
  return 
  to:@return

(void()) print_schar((signed byte) print_schar::b)
print_schar: scope:[print_schar]  from sin8u_table::@19
  (byte*) print_char_cursor#112 ← phi( sin8u_table::@19/(byte*) print_char_cursor#39 )
  (signed byte) print_schar::b#2 ← phi( sin8u_table::@19/(signed byte) print_schar::b#1 )
  (bool~) print_schar::$0 ← (signed byte) print_schar::b#2 < (number) 0
  if((bool~) print_schar::$0) goto print_schar::@1
  to:print_schar::@3
print_schar::@1: scope:[print_schar]  from print_schar
  (signed byte) print_schar::b#5 ← phi( print_schar/(signed byte) print_schar::b#2 )
  (byte*) print_char_cursor#100 ← phi( print_schar/(byte*) print_char_cursor#112 )
  (byte) print_char::ch#3 ← (byte) '-'
  call print_char 
  to:print_schar::@4
print_schar::@4: scope:[print_schar]  from print_schar::@1
  (signed byte) print_schar::b#3 ← phi( print_schar::@1/(signed byte) print_schar::b#5 )
  (byte*) print_char_cursor#56 ← phi( print_schar::@1/(byte*) print_char_cursor#20 )
  (byte*) print_char_cursor#9 ← (byte*) print_char_cursor#56
  (signed byte~) print_schar::$4 ← - (signed byte) print_schar::b#3
  (signed byte) print_schar::b#0 ← (signed byte~) print_schar::$4
  to:print_schar::@2
print_schar::@3: scope:[print_schar]  from print_schar
  (signed byte) print_schar::b#7 ← phi( print_schar/(signed byte) print_schar::b#2 )
  (byte*) print_char_cursor#101 ← phi( print_schar/(byte*) print_char_cursor#112 )
  (byte) print_char::ch#4 ← (byte) ' '
  call print_char 
  to:print_schar::@5
print_schar::@5: scope:[print_schar]  from print_schar::@3
  (signed byte) print_schar::b#6 ← phi( print_schar::@3/(signed byte) print_schar::b#7 )
  (byte*) print_char_cursor#57 ← phi( print_schar::@3/(byte*) print_char_cursor#20 )
  (byte*) print_char_cursor#10 ← (byte*) print_char_cursor#57
  to:print_schar::@2
print_schar::@2: scope:[print_schar]  from print_schar::@4 print_schar::@5
  (byte*) print_char_cursor#102 ← phi( print_schar::@4/(byte*) print_char_cursor#9 print_schar::@5/(byte*) print_char_cursor#10 )
  (signed byte) print_schar::b#4 ← phi( print_schar::@4/(signed byte) print_schar::b#0 print_schar::@5/(signed byte) print_schar::b#6 )
  (byte) print_uchar::b#0 ← (byte)(signed byte) print_schar::b#4
  call print_uchar 
  to:print_schar::@6
print_schar::@6: scope:[print_schar]  from print_schar::@2
  (byte*) print_char_cursor#58 ← phi( print_schar::@2/(byte*) print_char_cursor#18 )
  (byte*) print_char_cursor#11 ← (byte*) print_char_cursor#58
  to:print_schar::@return
print_schar::@return: scope:[print_schar]  from print_schar::@6
  (byte*) print_char_cursor#59 ← phi( print_schar::@6/(byte*) print_char_cursor#11 )
  (byte*) print_char_cursor#12 ← (byte*) print_char_cursor#59
  return 
  to:@return

(void()) print_uint((word) print_uint::w)
print_uint: scope:[print_uint]  from print_sint::@2 sin8u_table::@17 sin8u_table::@4
  (byte*) print_char_cursor#103 ← phi( print_sint::@2/(byte*) print_char_cursor#99 sin8u_table::@17/(byte*) print_char_cursor#37 sin8u_table::@4/(byte*) print_char_cursor#26 )
  (word) print_uint::w#3 ← phi( print_sint::@2/(word) print_uint::w#0 sin8u_table::@17/(word) print_uint::w#2 sin8u_table::@4/(word) print_uint::w#1 )
  (byte~) print_uint::$0 ← > (word) print_uint::w#3
  (byte) print_uchar::b#1 ← (byte~) print_uint::$0
  call print_uchar 
  to:print_uint::@1
print_uint::@1: scope:[print_uint]  from print_uint
  (word) print_uint::w#4 ← phi( print_uint/(word) print_uint::w#3 )
  (byte*) print_char_cursor#60 ← phi( print_uint/(byte*) print_char_cursor#18 )
  (byte*) print_char_cursor#13 ← (byte*) print_char_cursor#60
  (byte~) print_uint::$2 ← < (word) print_uint::w#4
  (byte) print_uchar::b#2 ← (byte~) print_uint::$2
  call print_uchar 
  to:print_uint::@2
print_uint::@2: scope:[print_uint]  from print_uint::@1
  (byte*) print_char_cursor#61 ← phi( print_uint::@1/(byte*) print_char_cursor#18 )
  (byte*) print_char_cursor#14 ← (byte*) print_char_cursor#61
  to:print_uint::@return
print_uint::@return: scope:[print_uint]  from print_uint::@2
  (byte*) print_char_cursor#62 ← phi( print_uint::@2/(byte*) print_char_cursor#14 )
  (byte*) print_char_cursor#15 ← (byte*) print_char_cursor#62
  return 
  to:@return

(void()) print_uchar((byte) print_uchar::b)
print_uchar: scope:[print_uchar]  from print_schar::@2 print_uint print_uint::@1 sin8u_table::@10 sin8u_table::@12 sin8u_table::@23 sin8u_table::@6 sin8u_table::@8
  (byte*) print_char_cursor#104 ← phi( print_schar::@2/(byte*) print_char_cursor#102 print_uint/(byte*) print_char_cursor#103 print_uint::@1/(byte*) print_char_cursor#13 sin8u_table::@10/(byte*) print_char_cursor#32 sin8u_table::@12/(byte*) print_char_cursor#34 sin8u_table::@23/(byte*) print_char_cursor#43 sin8u_table::@6/(byte*) print_char_cursor#28 sin8u_table::@8/(byte*) print_char_cursor#30 )
  (byte) print_uchar::b#8 ← phi( print_schar::@2/(byte) print_uchar::b#0 print_uint/(byte) print_uchar::b#1 print_uint::@1/(byte) print_uchar::b#2 sin8u_table::@10/(byte) print_uchar::b#5 sin8u_table::@12/(byte) print_uchar::b#6 sin8u_table::@23/(byte) print_uchar::b#7 sin8u_table::@6/(byte) print_uchar::b#3 sin8u_table::@8/(byte) print_uchar::b#4 )
  (byte~) print_uchar::$0 ← (byte) print_uchar::b#8 >> (number) 4
  (byte) print_char::ch#5 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0)
  call print_char 
  to:print_uchar::@1
print_uchar::@1: scope:[print_uchar]  from print_uchar
  (byte) print_uchar::b#9 ← phi( print_uchar/(byte) print_uchar::b#8 )
  (byte*) print_char_cursor#63 ← phi( print_uchar/(byte*) print_char_cursor#20 )
  (byte*) print_char_cursor#16 ← (byte*) print_char_cursor#63
  (number~) print_uchar::$2 ← (byte) print_uchar::b#9 & (number) $f
  (byte) print_char::ch#6 ← *((const to_nomodify byte*) print_hextab + (number~) print_uchar::$2)
  call print_char 
  to:print_uchar::@2
print_uchar::@2: scope:[print_uchar]  from print_uchar::@1
  (byte*) print_char_cursor#64 ← phi( print_uchar::@1/(byte*) print_char_cursor#20 )
  (byte*) print_char_cursor#17 ← (byte*) print_char_cursor#64
  to:print_uchar::@return
print_uchar::@return: scope:[print_uchar]  from print_uchar::@2
  (byte*) print_char_cursor#65 ← phi( print_uchar::@2/(byte*) print_char_cursor#17 )
  (byte*) print_char_cursor#18 ← (byte*) print_char_cursor#65
  return 
  to:@return

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from print_schar::@1 print_schar::@3 print_sint::@1 print_sint::@3 print_str::@2 print_uchar print_uchar::@1
  (byte*) print_char_cursor#66 ← phi( print_schar::@1/(byte*) print_char_cursor#100 print_schar::@3/(byte*) print_char_cursor#101 print_sint::@1/(byte*) print_char_cursor#97 print_sint::@3/(byte*) print_char_cursor#98 print_str::@2/(byte*) print_char_cursor#94 print_uchar/(byte*) print_char_cursor#104 print_uchar::@1/(byte*) print_char_cursor#16 )
  (byte) print_char::ch#7 ← phi( print_schar::@1/(byte) print_char::ch#3 print_schar::@3/(byte) print_char::ch#4 print_sint::@1/(byte) print_char::ch#1 print_sint::@3/(byte) print_char::ch#2 print_str::@2/(byte) print_char::ch#0 print_uchar/(byte) print_char::ch#5 print_uchar::@1/(byte) print_char::ch#6 )
  *((byte*) print_char_cursor#66) ← (byte) print_char::ch#7
  (byte*) print_char_cursor#19 ← ++ (byte*) print_char_cursor#66
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  (byte*) print_char_cursor#67 ← phi( print_char/(byte*) print_char_cursor#19 )
  (byte*) print_char_cursor#20 ← (byte*) print_char_cursor#67
  return 
  to:@return

(void()) print_cls()
print_cls: scope:[print_cls]  from main
  (byte*) print_screen#1 ← phi( main/(byte*) print_screen#3 )
  (void*) memset::str#0 ← (void*)(byte*) print_screen#1
  (byte) memset::c#0 ← (byte) ' '
  (word) memset::num#0 ← (number) $3e8
  call memset 
  (void*) memset::return#2 ← (void*) memset::return#1
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls
  (byte*) print_screen#2 ← phi( print_cls/(byte*) print_screen#1 )
  (byte*) print_line_cursor#3 ← (byte*) print_screen#2
  (byte*) print_char_cursor#21 ← (byte*) print_line_cursor#3
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  (byte*) print_char_cursor#68 ← phi( print_cls::@1/(byte*) print_char_cursor#21 )
  (byte*) print_line_cursor#15 ← phi( print_cls::@1/(byte*) print_line_cursor#3 )
  (byte*) print_line_cursor#4 ← (byte*) print_line_cursor#15
  (byte*) print_char_cursor#22 ← (byte*) print_char_cursor#68
  return 
  to:@return

(void()) main()
main: scope:[main]  from @2
  (byte*) print_char_cursor#105 ← phi( @2/(byte*) print_char_cursor#109 )
  (byte*) print_line_cursor#24 ← phi( @2/(byte*) print_line_cursor#28 )
  (byte*) print_screen#3 ← phi( @2/(byte*) print_screen#4 )
  call print_cls 
  to:main::@1
main::@1: scope:[main]  from main
  (byte*) print_char_cursor#69 ← phi( main/(byte*) print_char_cursor#22 )
  (byte*) print_line_cursor#16 ← phi( main/(byte*) print_line_cursor#4 )
  (byte*) print_line_cursor#5 ← (byte*) print_line_cursor#16
  (byte*) print_char_cursor#23 ← (byte*) print_char_cursor#69
  (byte*) sin8u_table::sintab#0 ← (const byte*) main::sintab
  (word) sin8u_table::tabsize#0 ← (const word) main::tabsize
  (byte) sin8u_table::min#0 ← (number) $a
  (byte) sin8u_table::max#0 ← (number) $ff
  call sin8u_table 
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte*) print_line_cursor#17 ← phi( main::@1/(byte*) print_line_cursor#10 )
  (byte*) print_char_cursor#70 ← phi( main::@1/(byte*) print_char_cursor#46 )
  (byte*) print_char_cursor#24 ← (byte*) print_char_cursor#70
  (byte*) print_line_cursor#6 ← (byte*) print_line_cursor#17
  to:main::@return
main::@return: scope:[main]  from main::@2
  (byte*) print_char_cursor#71 ← phi( main::@2/(byte*) print_char_cursor#24 )
  (byte*) print_line_cursor#18 ← phi( main::@2/(byte*) print_line_cursor#6 )
  (byte*) print_line_cursor#7 ← (byte*) print_line_cursor#18
  (byte*) print_char_cursor#25 ← (byte*) print_char_cursor#71
  return 
  to:@return

(void()) sin8u_table((byte*) sin8u_table::sintab , (word) sin8u_table::tabsize , (byte) sin8u_table::min , (byte) sin8u_table::max)
sin8u_table: scope:[sin8u_table]  from main::@1
  (byte*) sin8u_table::sintab#27 ← phi( main::@1/(byte*) sin8u_table::sintab#0 )
  (byte*) print_line_cursor#49 ← phi( main::@1/(byte*) print_line_cursor#5 )
  (byte*) print_char_cursor#113 ← phi( main::@1/(byte*) print_char_cursor#23 )
  (word) sin8u_table::tabsize#1 ← phi( main::@1/(word) sin8u_table::tabsize#0 )
  (byte) sin8u_table::min#1 ← phi( main::@1/(byte) sin8u_table::min#0 )
  (byte) sin8u_table::max#1 ← phi( main::@1/(byte) sin8u_table::max#0 )
  (byte~) sin8u_table::$0 ← (byte) sin8u_table::max#1 - (byte) sin8u_table::min#1
  (byte) sin8u_table::amplitude#0 ← (byte~) sin8u_table::$0
  (word~) sin8u_table::$32 ← (word)(byte) sin8u_table::min#1
  (word~) sin8u_table::$1 ← (word~) sin8u_table::$32 + (byte) sin8u_table::max#1
  (word) sin8u_table::sum#0 ← (word~) sin8u_table::$1
  (number~) sin8u_table::$2 ← (word) sin8u_table::sum#0 / (number) 2
  (number~) sin8u_table::$3 ← (number~) sin8u_table::$2 + (number) 1
  (byte) sin8u_table::mid#0 ← (byte)(number~) sin8u_table::$3
  (word) div16u::dividend#0 ← (const nomodify word) PI2_u4f12
  (word) div16u::divisor#0 ← (word) sin8u_table::tabsize#1
  call div16u 
  (word) div16u::return#2 ← (word) div16u::return#1
  to:sin8u_table::@3
sin8u_table::@3: scope:[sin8u_table]  from sin8u_table
  (byte*) sin8u_table::sintab#26 ← phi( sin8u_table/(byte*) sin8u_table::sintab#27 )
  (word) sin8u_table::tabsize#25 ← phi( sin8u_table/(word) sin8u_table::tabsize#1 )
  (byte*) print_line_cursor#47 ← phi( sin8u_table/(byte*) print_line_cursor#49 )
  (byte) sin8u_table::mid#21 ← phi( sin8u_table/(byte) sin8u_table::mid#0 )
  (byte) sin8u_table::amplitude#19 ← phi( sin8u_table/(byte) sin8u_table::amplitude#0 )
  (byte) sin8u_table::max#7 ← phi( sin8u_table/(byte) sin8u_table::max#1 )
  (byte) sin8u_table::min#5 ← phi( sin8u_table/(byte) sin8u_table::min#1 )
  (byte*) print_char_cursor#106 ← phi( sin8u_table/(byte*) print_char_cursor#113 )
  (word) div16u::return#4 ← phi( sin8u_table/(word) div16u::return#2 )
  (word~) sin8u_table::$4 ← (word) div16u::return#4
  (word) sin8u_table::step#0 ← (word~) sin8u_table::$4
  (byte*) print_str::str#1 ← (const byte*) sin8u_table::str
  call print_str 
  to:sin8u_table::@4
sin8u_table::@4: scope:[sin8u_table]  from sin8u_table::@3
  (byte*) sin8u_table::sintab#25 ← phi( sin8u_table::@3/(byte*) sin8u_table::sintab#26 )
  (word) sin8u_table::tabsize#23 ← phi( sin8u_table::@3/(word) sin8u_table::tabsize#25 )
  (byte*) print_line_cursor#45 ← phi( sin8u_table::@3/(byte*) print_line_cursor#47 )
  (byte) sin8u_table::mid#19 ← phi( sin8u_table::@3/(byte) sin8u_table::mid#21 )
  (byte) sin8u_table::amplitude#16 ← phi( sin8u_table::@3/(byte) sin8u_table::amplitude#19 )
  (byte) sin8u_table::max#6 ← phi( sin8u_table::@3/(byte) sin8u_table::max#7 )
  (byte) sin8u_table::min#4 ← phi( sin8u_table::@3/(byte) sin8u_table::min#5 )
  (word) sin8u_table::step#1 ← phi( sin8u_table::@3/(word) sin8u_table::step#0 )
  (byte*) print_char_cursor#72 ← phi( sin8u_table::@3/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#26 ← (byte*) print_char_cursor#72
  (word) print_uint::w#1 ← (word) sin8u_table::step#1
  call print_uint 
  to:sin8u_table::@5
sin8u_table::@5: scope:[sin8u_table]  from sin8u_table::@4
  (word) sin8u_table::step#24 ← phi( sin8u_table::@4/(word) sin8u_table::step#1 )
  (byte*) sin8u_table::sintab#24 ← phi( sin8u_table::@4/(byte*) sin8u_table::sintab#25 )
  (word) sin8u_table::tabsize#21 ← phi( sin8u_table::@4/(word) sin8u_table::tabsize#23 )
  (byte*) print_line_cursor#43 ← phi( sin8u_table::@4/(byte*) print_line_cursor#45 )
  (byte) sin8u_table::mid#17 ← phi( sin8u_table::@4/(byte) sin8u_table::mid#19 )
  (byte) sin8u_table::amplitude#13 ← phi( sin8u_table::@4/(byte) sin8u_table::amplitude#16 )
  (byte) sin8u_table::max#5 ← phi( sin8u_table::@4/(byte) sin8u_table::max#6 )
  (byte) sin8u_table::min#3 ← phi( sin8u_table::@4/(byte) sin8u_table::min#4 )
  (byte*) print_char_cursor#73 ← phi( sin8u_table::@4/(byte*) print_char_cursor#15 )
  (byte*) print_char_cursor#27 ← (byte*) print_char_cursor#73
  (byte*) print_str::str#2 ← (const byte*) sin8u_table::str1
  call print_str 
  to:sin8u_table::@6
sin8u_table::@6: scope:[sin8u_table]  from sin8u_table::@5
  (word) sin8u_table::step#23 ← phi( sin8u_table::@5/(word) sin8u_table::step#24 )
  (byte*) sin8u_table::sintab#22 ← phi( sin8u_table::@5/(byte*) sin8u_table::sintab#24 )
  (word) sin8u_table::tabsize#19 ← phi( sin8u_table::@5/(word) sin8u_table::tabsize#21 )
  (byte*) print_line_cursor#41 ← phi( sin8u_table::@5/(byte*) print_line_cursor#43 )
  (byte) sin8u_table::mid#15 ← phi( sin8u_table::@5/(byte) sin8u_table::mid#17 )
  (byte) sin8u_table::amplitude#10 ← phi( sin8u_table::@5/(byte) sin8u_table::amplitude#13 )
  (byte) sin8u_table::max#4 ← phi( sin8u_table::@5/(byte) sin8u_table::max#5 )
  (byte) sin8u_table::min#2 ← phi( sin8u_table::@5/(byte) sin8u_table::min#3 )
  (byte*) print_char_cursor#74 ← phi( sin8u_table::@5/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#28 ← (byte*) print_char_cursor#74
  (byte) print_uchar::b#3 ← (byte) sin8u_table::min#2
  call print_uchar 
  to:sin8u_table::@7
sin8u_table::@7: scope:[sin8u_table]  from sin8u_table::@6
  (word) sin8u_table::step#22 ← phi( sin8u_table::@6/(word) sin8u_table::step#23 )
  (byte*) sin8u_table::sintab#20 ← phi( sin8u_table::@6/(byte*) sin8u_table::sintab#22 )
  (word) sin8u_table::tabsize#17 ← phi( sin8u_table::@6/(word) sin8u_table::tabsize#19 )
  (byte*) print_line_cursor#39 ← phi( sin8u_table::@6/(byte*) print_line_cursor#41 )
  (byte) sin8u_table::mid#12 ← phi( sin8u_table::@6/(byte) sin8u_table::mid#15 )
  (byte) sin8u_table::amplitude#7 ← phi( sin8u_table::@6/(byte) sin8u_table::amplitude#10 )
  (byte) sin8u_table::max#3 ← phi( sin8u_table::@6/(byte) sin8u_table::max#4 )
  (byte*) print_char_cursor#75 ← phi( sin8u_table::@6/(byte*) print_char_cursor#18 )
  (byte*) print_char_cursor#29 ← (byte*) print_char_cursor#75
  (byte*) print_str::str#3 ← (const byte*) sin8u_table::str2
  call print_str 
  to:sin8u_table::@8
sin8u_table::@8: scope:[sin8u_table]  from sin8u_table::@7
  (word) sin8u_table::step#21 ← phi( sin8u_table::@7/(word) sin8u_table::step#22 )
  (byte*) sin8u_table::sintab#18 ← phi( sin8u_table::@7/(byte*) sin8u_table::sintab#20 )
  (word) sin8u_table::tabsize#15 ← phi( sin8u_table::@7/(word) sin8u_table::tabsize#17 )
  (byte*) print_line_cursor#37 ← phi( sin8u_table::@7/(byte*) print_line_cursor#39 )
  (byte) sin8u_table::mid#9 ← phi( sin8u_table::@7/(byte) sin8u_table::mid#12 )
  (byte) sin8u_table::amplitude#5 ← phi( sin8u_table::@7/(byte) sin8u_table::amplitude#7 )
  (byte) sin8u_table::max#2 ← phi( sin8u_table::@7/(byte) sin8u_table::max#3 )
  (byte*) print_char_cursor#76 ← phi( sin8u_table::@7/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#30 ← (byte*) print_char_cursor#76
  (byte) print_uchar::b#4 ← (byte) sin8u_table::max#2
  call print_uchar 
  to:sin8u_table::@9
sin8u_table::@9: scope:[sin8u_table]  from sin8u_table::@8
  (word) sin8u_table::step#20 ← phi( sin8u_table::@8/(word) sin8u_table::step#21 )
  (byte*) sin8u_table::sintab#16 ← phi( sin8u_table::@8/(byte*) sin8u_table::sintab#18 )
  (word) sin8u_table::tabsize#13 ← phi( sin8u_table::@8/(word) sin8u_table::tabsize#15 )
  (byte*) print_line_cursor#35 ← phi( sin8u_table::@8/(byte*) print_line_cursor#37 )
  (byte) sin8u_table::mid#7 ← phi( sin8u_table::@8/(byte) sin8u_table::mid#9 )
  (byte) sin8u_table::amplitude#3 ← phi( sin8u_table::@8/(byte) sin8u_table::amplitude#5 )
  (byte*) print_char_cursor#77 ← phi( sin8u_table::@8/(byte*) print_char_cursor#18 )
  (byte*) print_char_cursor#31 ← (byte*) print_char_cursor#77
  (byte*) print_str::str#4 ← (const byte*) sin8u_table::str3
  call print_str 
  to:sin8u_table::@10
sin8u_table::@10: scope:[sin8u_table]  from sin8u_table::@9
  (word) sin8u_table::step#19 ← phi( sin8u_table::@9/(word) sin8u_table::step#20 )
  (byte*) sin8u_table::sintab#14 ← phi( sin8u_table::@9/(byte*) sin8u_table::sintab#16 )
  (word) sin8u_table::tabsize#11 ← phi( sin8u_table::@9/(word) sin8u_table::tabsize#13 )
  (byte*) print_line_cursor#33 ← phi( sin8u_table::@9/(byte*) print_line_cursor#35 )
  (byte) sin8u_table::mid#5 ← phi( sin8u_table::@9/(byte) sin8u_table::mid#7 )
  (byte) sin8u_table::amplitude#1 ← phi( sin8u_table::@9/(byte) sin8u_table::amplitude#3 )
  (byte*) print_char_cursor#78 ← phi( sin8u_table::@9/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#32 ← (byte*) print_char_cursor#78
  (byte) print_uchar::b#5 ← (byte) sin8u_table::amplitude#1
  call print_uchar 
  to:sin8u_table::@11
sin8u_table::@11: scope:[sin8u_table]  from sin8u_table::@10
  (word) sin8u_table::step#18 ← phi( sin8u_table::@10/(word) sin8u_table::step#19 )
  (byte*) sin8u_table::sintab#12 ← phi( sin8u_table::@10/(byte*) sin8u_table::sintab#14 )
  (byte) sin8u_table::amplitude#17 ← phi( sin8u_table::@10/(byte) sin8u_table::amplitude#1 )
  (word) sin8u_table::tabsize#9 ← phi( sin8u_table::@10/(word) sin8u_table::tabsize#11 )
  (byte*) print_line_cursor#31 ← phi( sin8u_table::@10/(byte*) print_line_cursor#33 )
  (byte) sin8u_table::mid#3 ← phi( sin8u_table::@10/(byte) sin8u_table::mid#5 )
  (byte*) print_char_cursor#79 ← phi( sin8u_table::@10/(byte*) print_char_cursor#18 )
  (byte*) print_char_cursor#33 ← (byte*) print_char_cursor#79
  (byte*) print_str::str#5 ← (const byte*) sin8u_table::str4
  call print_str 
  to:sin8u_table::@12
sin8u_table::@12: scope:[sin8u_table]  from sin8u_table::@11
  (word) sin8u_table::step#17 ← phi( sin8u_table::@11/(word) sin8u_table::step#18 )
  (byte*) sin8u_table::sintab#10 ← phi( sin8u_table::@11/(byte*) sin8u_table::sintab#12 )
  (byte) sin8u_table::amplitude#14 ← phi( sin8u_table::@11/(byte) sin8u_table::amplitude#17 )
  (word) sin8u_table::tabsize#7 ← phi( sin8u_table::@11/(word) sin8u_table::tabsize#9 )
  (byte*) print_line_cursor#29 ← phi( sin8u_table::@11/(byte*) print_line_cursor#31 )
  (byte) sin8u_table::mid#1 ← phi( sin8u_table::@11/(byte) sin8u_table::mid#3 )
  (byte*) print_char_cursor#80 ← phi( sin8u_table::@11/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#34 ← (byte*) print_char_cursor#80
  (byte) print_uchar::b#6 ← (byte) sin8u_table::mid#1
  call print_uchar 
  to:sin8u_table::@13
sin8u_table::@13: scope:[sin8u_table]  from sin8u_table::@12
  (word) sin8u_table::step#16 ← phi( sin8u_table::@12/(word) sin8u_table::step#17 )
  (byte*) sin8u_table::sintab#8 ← phi( sin8u_table::@12/(byte*) sin8u_table::sintab#10 )
  (byte) sin8u_table::mid#13 ← phi( sin8u_table::@12/(byte) sin8u_table::mid#1 )
  (byte) sin8u_table::amplitude#11 ← phi( sin8u_table::@12/(byte) sin8u_table::amplitude#14 )
  (word) sin8u_table::tabsize#5 ← phi( sin8u_table::@12/(word) sin8u_table::tabsize#7 )
  (byte*) print_line_cursor#25 ← phi( sin8u_table::@12/(byte*) print_line_cursor#29 )
  (byte*) print_char_cursor#81 ← phi( sin8u_table::@12/(byte*) print_char_cursor#18 )
  (byte*) print_char_cursor#35 ← (byte*) print_char_cursor#81
  call print_ln 
  to:sin8u_table::@14
sin8u_table::@14: scope:[sin8u_table]  from sin8u_table::@13
  (word) sin8u_table::step#15 ← phi( sin8u_table::@13/(word) sin8u_table::step#16 )
  (byte*) sin8u_table::sintab#6 ← phi( sin8u_table::@13/(byte*) sin8u_table::sintab#8 )
  (byte) sin8u_table::mid#10 ← phi( sin8u_table::@13/(byte) sin8u_table::mid#13 )
  (byte) sin8u_table::amplitude#8 ← phi( sin8u_table::@13/(byte) sin8u_table::amplitude#11 )
  (word) sin8u_table::tabsize#3 ← phi( sin8u_table::@13/(word) sin8u_table::tabsize#5 )
  (byte*) print_char_cursor#82 ← phi( sin8u_table::@13/(byte*) print_char_cursor#4 )
  (byte*) print_line_cursor#19 ← phi( sin8u_table::@13/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#8 ← (byte*) print_line_cursor#19
  (byte*) print_char_cursor#36 ← (byte*) print_char_cursor#82
  (word) sin8u_table::x#0 ← (word) 0
  (word) sin8u_table::i#0 ← (word) 0
  to:sin8u_table::@1
sin8u_table::@1: scope:[sin8u_table]  from sin8u_table::@14 sin8u_table::@25
  (word) sin8u_table::step#14 ← phi( sin8u_table::@14/(word) sin8u_table::step#15 sin8u_table::@25/(word) sin8u_table::step#2 )
  (byte*) sin8u_table::sintab#5 ← phi( sin8u_table::@14/(byte*) sin8u_table::sintab#6 sin8u_table::@25/(byte*) sin8u_table::sintab#7 )
  (byte) sin8u_table::mid#8 ← phi( sin8u_table::@14/(byte) sin8u_table::mid#10 sin8u_table::@25/(byte) sin8u_table::mid#11 )
  (byte) sin8u_table::amplitude#6 ← phi( sin8u_table::@14/(byte) sin8u_table::amplitude#8 sin8u_table::@25/(byte) sin8u_table::amplitude#9 )
  (byte*) print_line_cursor#27 ← phi( sin8u_table::@14/(byte*) print_line_cursor#8 sin8u_table::@25/(byte*) print_line_cursor#9 )
  (byte*) print_char_cursor#108 ← phi( sin8u_table::@14/(byte*) print_char_cursor#36 sin8u_table::@25/(byte*) print_char_cursor#45 )
  (word) sin8u_table::x#5 ← phi( sin8u_table::@14/(word) sin8u_table::x#0 sin8u_table::@25/(word) sin8u_table::x#1 )
  (word) sin8u_table::tabsize#2 ← phi( sin8u_table::@14/(word) sin8u_table::tabsize#3 sin8u_table::@25/(word) sin8u_table::tabsize#4 )
  (word) sin8u_table::i#2 ← phi( sin8u_table::@14/(word) sin8u_table::i#0 sin8u_table::@25/(word) sin8u_table::i#1 )
  (bool~) sin8u_table::$16 ← (word) sin8u_table::i#2 < (word) sin8u_table::tabsize#2
  if((bool~) sin8u_table::$16) goto sin8u_table::@2
  to:sin8u_table::@return
sin8u_table::@2: scope:[sin8u_table]  from sin8u_table::@1
  (word) sin8u_table::tabsize#26 ← phi( sin8u_table::@1/(word) sin8u_table::tabsize#2 )
  (word) sin8u_table::i#14 ← phi( sin8u_table::@1/(word) sin8u_table::i#2 )
  (word) sin8u_table::step#13 ← phi( sin8u_table::@1/(word) sin8u_table::step#14 )
  (byte*) print_line_cursor#48 ← phi( sin8u_table::@1/(byte*) print_line_cursor#27 )
  (byte*) print_char_cursor#115 ← phi( sin8u_table::@1/(byte*) print_char_cursor#108 )
  (byte*) sin8u_table::sintab#4 ← phi( sin8u_table::@1/(byte*) sin8u_table::sintab#5 )
  (byte) sin8u_table::mid#6 ← phi( sin8u_table::@1/(byte) sin8u_table::mid#8 )
  (byte) sin8u_table::amplitude#4 ← phi( sin8u_table::@1/(byte) sin8u_table::amplitude#6 )
  (word) sin8u_table::x#2 ← phi( sin8u_table::@1/(word) sin8u_table::x#5 )
  (word) sin8s::x#2 ← (word) sin8u_table::x#2
  call sin8s 
  (signed byte) sin8s::return#2 ← (signed byte) sin8s::return#1
  to:sin8u_table::@15
sin8u_table::@15: scope:[sin8u_table]  from sin8u_table::@2
  (word) sin8u_table::tabsize#24 ← phi( sin8u_table::@2/(word) sin8u_table::tabsize#26 )
  (word) sin8u_table::i#13 ← phi( sin8u_table::@2/(word) sin8u_table::i#14 )
  (word) sin8u_table::step#12 ← phi( sin8u_table::@2/(word) sin8u_table::step#13 )
  (byte*) print_line_cursor#46 ← phi( sin8u_table::@2/(byte*) print_line_cursor#48 )
  (word) sin8u_table::x#8 ← phi( sin8u_table::@2/(word) sin8u_table::x#2 )
  (byte*) print_char_cursor#114 ← phi( sin8u_table::@2/(byte*) print_char_cursor#115 )
  (byte*) sin8u_table::sintab#3 ← phi( sin8u_table::@2/(byte*) sin8u_table::sintab#4 )
  (byte) sin8u_table::mid#4 ← phi( sin8u_table::@2/(byte) sin8u_table::mid#6 )
  (byte) sin8u_table::amplitude#2 ← phi( sin8u_table::@2/(byte) sin8u_table::amplitude#4 )
  (signed byte) sin8s::return#4 ← phi( sin8u_table::@2/(signed byte) sin8s::return#2 )
  (signed byte~) sin8u_table::$17 ← (signed byte) sin8s::return#4
  (signed byte) sin8u_table::sinx#0 ← (signed byte~) sin8u_table::$17
  (number~) sin8u_table::$18 ← (byte) sin8u_table::amplitude#2 + (number) 1
  (signed byte) mul8su::a#0 ← (signed byte) sin8u_table::sinx#0
  (byte) mul8su::b#0 ← (number~) sin8u_table::$18
  call mul8su 
  (signed word) mul8su::return#2 ← (signed word) mul8su::return#1
  to:sin8u_table::@16
sin8u_table::@16: scope:[sin8u_table]  from sin8u_table::@15
  (byte) sin8u_table::amplitude#25 ← phi( sin8u_table::@15/(byte) sin8u_table::amplitude#2 )
  (word) sin8u_table::tabsize#22 ← phi( sin8u_table::@15/(word) sin8u_table::tabsize#24 )
  (word) sin8u_table::i#12 ← phi( sin8u_table::@15/(word) sin8u_table::i#13 )
  (word) sin8u_table::step#11 ← phi( sin8u_table::@15/(word) sin8u_table::step#12 )
  (byte*) print_line_cursor#44 ← phi( sin8u_table::@15/(byte*) print_line_cursor#46 )
  (signed byte) sin8u_table::sinx#4 ← phi( sin8u_table::@15/(signed byte) sin8u_table::sinx#0 )
  (word) sin8u_table::x#6 ← phi( sin8u_table::@15/(word) sin8u_table::x#8 )
  (byte*) print_char_cursor#107 ← phi( sin8u_table::@15/(byte*) print_char_cursor#114 )
  (byte*) sin8u_table::sintab#2 ← phi( sin8u_table::@15/(byte*) sin8u_table::sintab#3 )
  (byte) sin8u_table::mid#2 ← phi( sin8u_table::@15/(byte) sin8u_table::mid#4 )
  (signed word) mul8su::return#4 ← phi( sin8u_table::@15/(signed word) mul8su::return#2 )
  (signed word~) sin8u_table::$19 ← (signed word) mul8su::return#4
  (signed word) sin8u_table::sinx_sc#0 ← (signed word~) sin8u_table::$19
  (byte~) sin8u_table::$20 ← > (signed word) sin8u_table::sinx_sc#0
  (byte~) sin8u_table::$21 ← (byte) sin8u_table::mid#2 + (byte~) sin8u_table::$20
  (byte) sin8u_table::sinx_tr#0 ← (byte~) sin8u_table::$21
  *((byte*) sin8u_table::sintab#2) ← (byte) sin8u_table::sinx_tr#0
  (byte*) sin8u_table::sintab#1 ← ++ (byte*) sin8u_table::sintab#2
  (byte*) print_str::str#6 ← (const byte*) sin8u_table::str5
  call print_str 
  to:sin8u_table::@17
sin8u_table::@17: scope:[sin8u_table]  from sin8u_table::@16
  (byte*) sin8u_table::sintab#23 ← phi( sin8u_table::@16/(byte*) sin8u_table::sintab#1 )
  (byte) sin8u_table::mid#25 ← phi( sin8u_table::@16/(byte) sin8u_table::mid#2 )
  (byte) sin8u_table::amplitude#24 ← phi( sin8u_table::@16/(byte) sin8u_table::amplitude#25 )
  (word) sin8u_table::tabsize#20 ← phi( sin8u_table::@16/(word) sin8u_table::tabsize#22 )
  (word) sin8u_table::i#11 ← phi( sin8u_table::@16/(word) sin8u_table::i#12 )
  (word) sin8u_table::step#10 ← phi( sin8u_table::@16/(word) sin8u_table::step#11 )
  (byte*) print_line_cursor#42 ← phi( sin8u_table::@16/(byte*) print_line_cursor#44 )
  (byte) sin8u_table::sinx_tr#7 ← phi( sin8u_table::@16/(byte) sin8u_table::sinx_tr#0 )
  (signed word) sin8u_table::sinx_sc#5 ← phi( sin8u_table::@16/(signed word) sin8u_table::sinx_sc#0 )
  (signed byte) sin8u_table::sinx#3 ← phi( sin8u_table::@16/(signed byte) sin8u_table::sinx#4 )
  (word) sin8u_table::x#3 ← phi( sin8u_table::@16/(word) sin8u_table::x#6 )
  (byte*) print_char_cursor#83 ← phi( sin8u_table::@16/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#37 ← (byte*) print_char_cursor#83
  (word) print_uint::w#2 ← (word) sin8u_table::x#3
  call print_uint 
  to:sin8u_table::@18
sin8u_table::@18: scope:[sin8u_table]  from sin8u_table::@17
  (byte*) sin8u_table::sintab#21 ← phi( sin8u_table::@17/(byte*) sin8u_table::sintab#23 )
  (byte) sin8u_table::mid#24 ← phi( sin8u_table::@17/(byte) sin8u_table::mid#25 )
  (byte) sin8u_table::amplitude#23 ← phi( sin8u_table::@17/(byte) sin8u_table::amplitude#24 )
  (word) sin8u_table::tabsize#18 ← phi( sin8u_table::@17/(word) sin8u_table::tabsize#20 )
  (word) sin8u_table::i#10 ← phi( sin8u_table::@17/(word) sin8u_table::i#11 )
  (word) sin8u_table::step#9 ← phi( sin8u_table::@17/(word) sin8u_table::step#10 )
  (word) sin8u_table::x#14 ← phi( sin8u_table::@17/(word) sin8u_table::x#3 )
  (byte*) print_line_cursor#40 ← phi( sin8u_table::@17/(byte*) print_line_cursor#42 )
  (byte) sin8u_table::sinx_tr#6 ← phi( sin8u_table::@17/(byte) sin8u_table::sinx_tr#7 )
  (signed word) sin8u_table::sinx_sc#4 ← phi( sin8u_table::@17/(signed word) sin8u_table::sinx_sc#5 )
  (signed byte) sin8u_table::sinx#2 ← phi( sin8u_table::@17/(signed byte) sin8u_table::sinx#3 )
  (byte*) print_char_cursor#84 ← phi( sin8u_table::@17/(byte*) print_char_cursor#15 )
  (byte*) print_char_cursor#38 ← (byte*) print_char_cursor#84
  (byte*) print_str::str#7 ← (const byte*) sin8u_table::str6
  call print_str 
  to:sin8u_table::@19
sin8u_table::@19: scope:[sin8u_table]  from sin8u_table::@18
  (byte*) sin8u_table::sintab#19 ← phi( sin8u_table::@18/(byte*) sin8u_table::sintab#21 )
  (byte) sin8u_table::mid#23 ← phi( sin8u_table::@18/(byte) sin8u_table::mid#24 )
  (byte) sin8u_table::amplitude#22 ← phi( sin8u_table::@18/(byte) sin8u_table::amplitude#23 )
  (word) sin8u_table::tabsize#16 ← phi( sin8u_table::@18/(word) sin8u_table::tabsize#18 )
  (word) sin8u_table::i#9 ← phi( sin8u_table::@18/(word) sin8u_table::i#10 )
  (word) sin8u_table::step#8 ← phi( sin8u_table::@18/(word) sin8u_table::step#9 )
  (word) sin8u_table::x#13 ← phi( sin8u_table::@18/(word) sin8u_table::x#14 )
  (byte*) print_line_cursor#38 ← phi( sin8u_table::@18/(byte*) print_line_cursor#40 )
  (byte) sin8u_table::sinx_tr#5 ← phi( sin8u_table::@18/(byte) sin8u_table::sinx_tr#6 )
  (signed word) sin8u_table::sinx_sc#3 ← phi( sin8u_table::@18/(signed word) sin8u_table::sinx_sc#4 )
  (signed byte) sin8u_table::sinx#1 ← phi( sin8u_table::@18/(signed byte) sin8u_table::sinx#2 )
  (byte*) print_char_cursor#85 ← phi( sin8u_table::@18/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#39 ← (byte*) print_char_cursor#85
  (signed byte) print_schar::b#1 ← (signed byte) sin8u_table::sinx#1
  call print_schar 
  to:sin8u_table::@20
sin8u_table::@20: scope:[sin8u_table]  from sin8u_table::@19
  (byte*) sin8u_table::sintab#17 ← phi( sin8u_table::@19/(byte*) sin8u_table::sintab#19 )
  (byte) sin8u_table::mid#22 ← phi( sin8u_table::@19/(byte) sin8u_table::mid#23 )
  (byte) sin8u_table::amplitude#21 ← phi( sin8u_table::@19/(byte) sin8u_table::amplitude#22 )
  (word) sin8u_table::tabsize#14 ← phi( sin8u_table::@19/(word) sin8u_table::tabsize#16 )
  (word) sin8u_table::i#8 ← phi( sin8u_table::@19/(word) sin8u_table::i#9 )
  (word) sin8u_table::step#7 ← phi( sin8u_table::@19/(word) sin8u_table::step#8 )
  (word) sin8u_table::x#12 ← phi( sin8u_table::@19/(word) sin8u_table::x#13 )
  (byte*) print_line_cursor#36 ← phi( sin8u_table::@19/(byte*) print_line_cursor#38 )
  (byte) sin8u_table::sinx_tr#4 ← phi( sin8u_table::@19/(byte) sin8u_table::sinx_tr#5 )
  (signed word) sin8u_table::sinx_sc#2 ← phi( sin8u_table::@19/(signed word) sin8u_table::sinx_sc#3 )
  (byte*) print_char_cursor#86 ← phi( sin8u_table::@19/(byte*) print_char_cursor#12 )
  (byte*) print_char_cursor#40 ← (byte*) print_char_cursor#86
  (byte*) print_str::str#8 ← (const byte*) sin8u_table::str7
  call print_str 
  to:sin8u_table::@21
sin8u_table::@21: scope:[sin8u_table]  from sin8u_table::@20
  (byte*) sin8u_table::sintab#15 ← phi( sin8u_table::@20/(byte*) sin8u_table::sintab#17 )
  (byte) sin8u_table::mid#20 ← phi( sin8u_table::@20/(byte) sin8u_table::mid#22 )
  (byte) sin8u_table::amplitude#20 ← phi( sin8u_table::@20/(byte) sin8u_table::amplitude#21 )
  (word) sin8u_table::tabsize#12 ← phi( sin8u_table::@20/(word) sin8u_table::tabsize#14 )
  (word) sin8u_table::i#7 ← phi( sin8u_table::@20/(word) sin8u_table::i#8 )
  (word) sin8u_table::step#6 ← phi( sin8u_table::@20/(word) sin8u_table::step#7 )
  (word) sin8u_table::x#11 ← phi( sin8u_table::@20/(word) sin8u_table::x#12 )
  (byte*) print_line_cursor#34 ← phi( sin8u_table::@20/(byte*) print_line_cursor#36 )
  (byte) sin8u_table::sinx_tr#3 ← phi( sin8u_table::@20/(byte) sin8u_table::sinx_tr#4 )
  (signed word) sin8u_table::sinx_sc#1 ← phi( sin8u_table::@20/(signed word) sin8u_table::sinx_sc#2 )
  (byte*) print_char_cursor#87 ← phi( sin8u_table::@20/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#41 ← (byte*) print_char_cursor#87
  (signed word) print_sint::w#1 ← (signed word) sin8u_table::sinx_sc#1
  call print_sint 
  to:sin8u_table::@22
sin8u_table::@22: scope:[sin8u_table]  from sin8u_table::@21
  (byte*) sin8u_table::sintab#13 ← phi( sin8u_table::@21/(byte*) sin8u_table::sintab#15 )
  (byte) sin8u_table::mid#18 ← phi( sin8u_table::@21/(byte) sin8u_table::mid#20 )
  (byte) sin8u_table::amplitude#18 ← phi( sin8u_table::@21/(byte) sin8u_table::amplitude#20 )
  (word) sin8u_table::tabsize#10 ← phi( sin8u_table::@21/(word) sin8u_table::tabsize#12 )
  (word) sin8u_table::i#6 ← phi( sin8u_table::@21/(word) sin8u_table::i#7 )
  (word) sin8u_table::step#5 ← phi( sin8u_table::@21/(word) sin8u_table::step#6 )
  (word) sin8u_table::x#10 ← phi( sin8u_table::@21/(word) sin8u_table::x#11 )
  (byte*) print_line_cursor#32 ← phi( sin8u_table::@21/(byte*) print_line_cursor#34 )
  (byte) sin8u_table::sinx_tr#2 ← phi( sin8u_table::@21/(byte) sin8u_table::sinx_tr#3 )
  (byte*) print_char_cursor#88 ← phi( sin8u_table::@21/(byte*) print_char_cursor#8 )
  (byte*) print_char_cursor#42 ← (byte*) print_char_cursor#88
  (byte*) print_str::str#9 ← (const byte*) sin8u_table::str8
  call print_str 
  to:sin8u_table::@23
sin8u_table::@23: scope:[sin8u_table]  from sin8u_table::@22
  (byte*) sin8u_table::sintab#11 ← phi( sin8u_table::@22/(byte*) sin8u_table::sintab#13 )
  (byte) sin8u_table::mid#16 ← phi( sin8u_table::@22/(byte) sin8u_table::mid#18 )
  (byte) sin8u_table::amplitude#15 ← phi( sin8u_table::@22/(byte) sin8u_table::amplitude#18 )
  (word) sin8u_table::tabsize#8 ← phi( sin8u_table::@22/(word) sin8u_table::tabsize#10 )
  (word) sin8u_table::i#5 ← phi( sin8u_table::@22/(word) sin8u_table::i#6 )
  (word) sin8u_table::step#4 ← phi( sin8u_table::@22/(word) sin8u_table::step#5 )
  (word) sin8u_table::x#9 ← phi( sin8u_table::@22/(word) sin8u_table::x#10 )
  (byte*) print_line_cursor#30 ← phi( sin8u_table::@22/(byte*) print_line_cursor#32 )
  (byte) sin8u_table::sinx_tr#1 ← phi( sin8u_table::@22/(byte) sin8u_table::sinx_tr#2 )
  (byte*) print_char_cursor#89 ← phi( sin8u_table::@22/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#43 ← (byte*) print_char_cursor#89
  (byte) print_uchar::b#7 ← (byte) sin8u_table::sinx_tr#1
  call print_uchar 
  to:sin8u_table::@24
sin8u_table::@24: scope:[sin8u_table]  from sin8u_table::@23
  (byte*) sin8u_table::sintab#9 ← phi( sin8u_table::@23/(byte*) sin8u_table::sintab#11 )
  (byte) sin8u_table::mid#14 ← phi( sin8u_table::@23/(byte) sin8u_table::mid#16 )
  (byte) sin8u_table::amplitude#12 ← phi( sin8u_table::@23/(byte) sin8u_table::amplitude#15 )
  (word) sin8u_table::tabsize#6 ← phi( sin8u_table::@23/(word) sin8u_table::tabsize#8 )
  (word) sin8u_table::i#4 ← phi( sin8u_table::@23/(word) sin8u_table::i#5 )
  (word) sin8u_table::step#3 ← phi( sin8u_table::@23/(word) sin8u_table::step#4 )
  (word) sin8u_table::x#7 ← phi( sin8u_table::@23/(word) sin8u_table::x#9 )
  (byte*) print_line_cursor#26 ← phi( sin8u_table::@23/(byte*) print_line_cursor#30 )
  (byte*) print_char_cursor#90 ← phi( sin8u_table::@23/(byte*) print_char_cursor#18 )
  (byte*) print_char_cursor#44 ← (byte*) print_char_cursor#90
  call print_ln 
  to:sin8u_table::@25
sin8u_table::@25: scope:[sin8u_table]  from sin8u_table::@24
  (byte*) sin8u_table::sintab#7 ← phi( sin8u_table::@24/(byte*) sin8u_table::sintab#9 )
  (byte) sin8u_table::mid#11 ← phi( sin8u_table::@24/(byte) sin8u_table::mid#14 )
  (byte) sin8u_table::amplitude#9 ← phi( sin8u_table::@24/(byte) sin8u_table::amplitude#12 )
  (word) sin8u_table::tabsize#4 ← phi( sin8u_table::@24/(word) sin8u_table::tabsize#6 )
  (word) sin8u_table::i#3 ← phi( sin8u_table::@24/(word) sin8u_table::i#4 )
  (word) sin8u_table::step#2 ← phi( sin8u_table::@24/(word) sin8u_table::step#3 )
  (word) sin8u_table::x#4 ← phi( sin8u_table::@24/(word) sin8u_table::x#7 )
  (byte*) print_char_cursor#91 ← phi( sin8u_table::@24/(byte*) print_char_cursor#4 )
  (byte*) print_line_cursor#20 ← phi( sin8u_table::@24/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#9 ← (byte*) print_line_cursor#20
  (byte*) print_char_cursor#45 ← (byte*) print_char_cursor#91
  (word~) sin8u_table::$31 ← (word) sin8u_table::x#4 + (word) sin8u_table::step#2
  (word) sin8u_table::x#1 ← (word~) sin8u_table::$31
  (word) sin8u_table::i#1 ← ++ (word) sin8u_table::i#3
  to:sin8u_table::@1
sin8u_table::@return: scope:[sin8u_table]  from sin8u_table::@1
  (byte*) print_line_cursor#21 ← phi( sin8u_table::@1/(byte*) print_line_cursor#27 )
  (byte*) print_char_cursor#92 ← phi( sin8u_table::@1/(byte*) print_char_cursor#108 )
  (byte*) print_char_cursor#46 ← (byte*) print_char_cursor#92
  (byte*) print_line_cursor#10 ← (byte*) print_line_cursor#21
  return 
  to:@return
@2: scope:[]  from @1
  (byte*) print_screen#4 ← phi( @1/(byte*) print_screen#0 )
  (byte*) print_char_cursor#109 ← phi( @1/(byte*) print_char_cursor#0 )
  (byte*) print_line_cursor#28 ← phi( @1/(byte*) print_line_cursor#0 )
  call main 
  to:@3
@3: scope:[]  from @2
  (byte*) print_char_cursor#93 ← phi( @2/(byte*) print_char_cursor#25 )
  (byte*) print_line_cursor#22 ← phi( @2/(byte*) print_line_cursor#7 )
  (byte*) print_line_cursor#11 ← (byte*) print_line_cursor#22
  (byte*) print_char_cursor#47 ← (byte*) print_char_cursor#93
  to:@end
@end: scope:[]  from @3

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @3
(label) @begin
(label) @end
(const nomodify word) PI2_u4f12 = (word) $6488
(const nomodify word) PI_HALF_u4f12 = (word) $1922
(const nomodify word) PI_u4f12 = (word) $3244
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
(word~) div16u::$0
(label) div16u::@1
(label) div16u::@return
(word) div16u::dividend
(word) div16u::dividend#0
(word) div16u::dividend#1
(word) div16u::divisor
(word) div16u::divisor#0
(word) div16u::divisor#1
(word) div16u::return
(word) div16u::return#0
(word) div16u::return#1
(word) div16u::return#2
(word) div16u::return#3
(word) div16u::return#4
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(word~) divr16u::$0
(byte~) divr16u::$1
(word~) divr16u::$10
(bool~) divr16u::$11
(number~) divr16u::$2
(bool~) divr16u::$3
(bool~) divr16u::$4
(number~) divr16u::$5
(word~) divr16u::$6
(word~) divr16u::$7
(bool~) divr16u::$8
(bool~) divr16u::$9
(label) divr16u::@1
(label) divr16u::@2
(label) divr16u::@3
(label) divr16u::@4
(label) divr16u::@5
(label) divr16u::@6
(label) divr16u::@return
(word) divr16u::dividend
(word) divr16u::dividend#0
(word) divr16u::dividend#1
(word) divr16u::dividend#2
(word) divr16u::dividend#3
(word) divr16u::dividend#4
(word) divr16u::dividend#5
(word) divr16u::dividend#6
(word) divr16u::dividend#7
(word) divr16u::divisor
(word) divr16u::divisor#0
(word) divr16u::divisor#1
(word) divr16u::divisor#2
(word) divr16u::divisor#3
(word) divr16u::divisor#4
(word) divr16u::divisor#5
(word) divr16u::divisor#6
(byte) divr16u::i
(byte) divr16u::i#0
(byte) divr16u::i#1
(byte) divr16u::i#2
(byte) divr16u::i#3
(byte) divr16u::i#4
(byte) divr16u::i#5
(byte) divr16u::i#6
(word) divr16u::quotient
(word) divr16u::quotient#0
(word) divr16u::quotient#1
(word) divr16u::quotient#2
(word) divr16u::quotient#3
(word) divr16u::quotient#4
(word) divr16u::quotient#5
(word) divr16u::quotient#6
(word) divr16u::quotient#7
(word) divr16u::quotient#8
(word) divr16u::rem
(word) divr16u::rem#0
(word) divr16u::rem#1
(word) divr16u::rem#2
(word) divr16u::rem#3
(word) divr16u::rem#4
(word) divr16u::rem#5
(word) divr16u::rem#6
(word) divr16u::rem#7
(word) divr16u::rem#8
(word) divr16u::rem#9
(word) divr16u::return
(word) divr16u::return#0
(word) divr16u::return#1
(word) divr16u::return#2
(word) divr16u::return#3
(word) divr16u::return#4
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(const byte*) main::sintab[(number) $14]  = { fill( $14, 0) }
(const word) main::tabsize = (word) $14
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(bool~) memset::$0
(bool~) memset::$1
(byte*~) memset::$2
(bool~) memset::$3
(byte*~) memset::$4
(label) memset::@1
(label) memset::@2
(label) memset::@3
(label) memset::@4
(label) memset::@return
(byte) memset::c
(byte) memset::c#0
(byte) memset::c#1
(byte) memset::c#2
(byte) memset::c#3
(byte) memset::c#4
(byte*) memset::dst
(byte*) memset::dst#0
(byte*) memset::dst#1
(byte*) memset::dst#2
(byte*) memset::dst#3
(byte*) memset::end
(byte*) memset::end#0
(byte*) memset::end#1
(byte*) memset::end#2
(word) memset::num
(word) memset::num#0
(word) memset::num#1
(word) memset::num#2
(void*) memset::return
(void*) memset::return#0
(void*) memset::return#1
(void*) memset::return#2
(void*) memset::return#3
(void*) memset::str
(void*) memset::str#0
(void*) memset::str#1
(void*) memset::str#2
(void*) memset::str#3
(void*) memset::str#4
(void*) memset::str#5
(signed word()) mul8su((signed byte) mul8su::a , (byte) mul8su::b)
(word~) mul8su::$0
(bool~) mul8su::$1
(bool~) mul8su::$2
(byte~) mul8su::$4
(byte~) mul8su::$5
(byte~) mul8su::$6
(byte~) mul8su::$7
(label) mul8su::@1
(label) mul8su::@2
(label) mul8su::@3
(label) mul8su::@return
(signed byte) mul8su::a
(signed byte) mul8su::a#0
(signed byte) mul8su::a#1
(signed byte) mul8su::a#2
(byte) mul8su::b
(byte) mul8su::b#0
(byte) mul8su::b#1
(byte) mul8su::b#2
(byte) mul8su::b#3
(word) mul8su::m
(word) mul8su::m#0
(word) mul8su::m#1
(word) mul8su::m#2
(word) mul8su::m#3
(signed word) mul8su::return
(signed word) mul8su::return#0
(signed word) mul8su::return#1
(signed word) mul8su::return#2
(signed word) mul8su::return#3
(signed word) mul8su::return#4
(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
(bool~) mul8u::$0
(number~) mul8u::$1
(bool~) mul8u::$2
(bool~) mul8u::$3
(word~) mul8u::$4
(byte~) mul8u::$5
(word~) mul8u::$6
(label) mul8u::@1
(label) mul8u::@2
(label) mul8u::@3
(label) mul8u::@4
(label) mul8u::@5
(label) mul8u::@return
(byte) mul8u::a
(byte) mul8u::a#0
(byte) mul8u::a#1
(byte) mul8u::a#2
(byte) mul8u::a#3
(byte) mul8u::a#4
(byte) mul8u::a#5
(byte) mul8u::a#6
(byte) mul8u::a#7
(byte) mul8u::b
(byte) mul8u::b#0
(byte) mul8u::b#1
(byte) mul8u::b#2
(word) mul8u::mb
(word) mul8u::mb#0
(word) mul8u::mb#1
(word) mul8u::mb#2
(word) mul8u::mb#3
(word) mul8u::mb#4
(word) mul8u::mb#5
(word) mul8u::res
(word) mul8u::res#0
(word) mul8u::res#1
(word) mul8u::res#2
(word) mul8u::res#3
(word) mul8u::res#4
(word) mul8u::res#5
(word) mul8u::res#6
(word) mul8u::return
(word) mul8u::return#0
(word) mul8u::return#1
(word) mul8u::return#2
(word) mul8u::return#3
(word) mul8u::return#4
(word) mul8u::return#5
(word) mul8u::return#6
(byte()) mulu8_sel((byte) mulu8_sel::v1 , (byte) mulu8_sel::v2 , (byte) mulu8_sel::select)
(word~) mulu8_sel::$0
(word~) mulu8_sel::$1
(byte~) mulu8_sel::$2
(label) mulu8_sel::@1
(label) mulu8_sel::@return
(byte) mulu8_sel::return
(byte) mulu8_sel::return#0
(byte) mulu8_sel::return#1
(byte) mulu8_sel::return#10
(byte) mulu8_sel::return#11
(byte) mulu8_sel::return#12
(byte) mulu8_sel::return#2
(byte) mulu8_sel::return#3
(byte) mulu8_sel::return#4
(byte) mulu8_sel::return#5
(byte) mulu8_sel::return#6
(byte) mulu8_sel::return#7
(byte) mulu8_sel::return#8
(byte) mulu8_sel::return#9
(byte) mulu8_sel::select
(byte) mulu8_sel::select#0
(byte) mulu8_sel::select#1
(byte) mulu8_sel::select#2
(byte) mulu8_sel::select#3
(byte) mulu8_sel::select#4
(byte) mulu8_sel::select#5
(byte) mulu8_sel::select#6
(byte) mulu8_sel::v1
(byte) mulu8_sel::v1#0
(byte) mulu8_sel::v1#1
(byte) mulu8_sel::v1#2
(byte) mulu8_sel::v1#3
(byte) mulu8_sel::v1#4
(byte) mulu8_sel::v1#5
(byte) mulu8_sel::v2
(byte) mulu8_sel::v2#0
(byte) mulu8_sel::v2#1
(byte) mulu8_sel::v2#2
(byte) mulu8_sel::v2#3
(byte) mulu8_sel::v2#4
(byte) mulu8_sel::v2#5
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0
(byte) print_char::ch#1
(byte) print_char::ch#2
(byte) print_char::ch#3
(byte) print_char::ch#4
(byte) print_char::ch#5
(byte) print_char::ch#6
(byte) print_char::ch#7
(byte*) print_char_cursor
(byte*) print_char_cursor#0
(byte*) print_char_cursor#1
(byte*) print_char_cursor#10
(byte*) print_char_cursor#100
(byte*) print_char_cursor#101
(byte*) print_char_cursor#102
(byte*) print_char_cursor#103
(byte*) print_char_cursor#104
(byte*) print_char_cursor#105
(byte*) print_char_cursor#106
(byte*) print_char_cursor#107
(byte*) print_char_cursor#108
(byte*) print_char_cursor#109
(byte*) print_char_cursor#11
(byte*) print_char_cursor#110
(byte*) print_char_cursor#111
(byte*) print_char_cursor#112
(byte*) print_char_cursor#113
(byte*) print_char_cursor#114
(byte*) print_char_cursor#115
(byte*) print_char_cursor#12
(byte*) print_char_cursor#13
(byte*) print_char_cursor#14
(byte*) print_char_cursor#15
(byte*) print_char_cursor#16
(byte*) print_char_cursor#17
(byte*) print_char_cursor#18
(byte*) print_char_cursor#19
(byte*) print_char_cursor#2
(byte*) print_char_cursor#20
(byte*) print_char_cursor#21
(byte*) print_char_cursor#22
(byte*) print_char_cursor#23
(byte*) print_char_cursor#24
(byte*) print_char_cursor#25
(byte*) print_char_cursor#26
(byte*) print_char_cursor#27
(byte*) print_char_cursor#28
(byte*) print_char_cursor#29
(byte*) print_char_cursor#3
(byte*) print_char_cursor#30
(byte*) print_char_cursor#31
(byte*) print_char_cursor#32
(byte*) print_char_cursor#33
(byte*) print_char_cursor#34
(byte*) print_char_cursor#35
(byte*) print_char_cursor#36
(byte*) print_char_cursor#37
(byte*) print_char_cursor#38
(byte*) print_char_cursor#39
(byte*) print_char_cursor#4
(byte*) print_char_cursor#40
(byte*) print_char_cursor#41
(byte*) print_char_cursor#42
(byte*) print_char_cursor#43
(byte*) print_char_cursor#44
(byte*) print_char_cursor#45
(byte*) print_char_cursor#46
(byte*) print_char_cursor#47
(byte*) print_char_cursor#48
(byte*) print_char_cursor#49
(byte*) print_char_cursor#5
(byte*) print_char_cursor#50
(byte*) print_char_cursor#51
(byte*) print_char_cursor#52
(byte*) print_char_cursor#53
(byte*) print_char_cursor#54
(byte*) print_char_cursor#55
(byte*) print_char_cursor#56
(byte*) print_char_cursor#57
(byte*) print_char_cursor#58
(byte*) print_char_cursor#59
(byte*) print_char_cursor#6
(byte*) print_char_cursor#60
(byte*) print_char_cursor#61
(byte*) print_char_cursor#62
(byte*) print_char_cursor#63
(byte*) print_char_cursor#64
(byte*) print_char_cursor#65
(byte*) print_char_cursor#66
(byte*) print_char_cursor#67
(byte*) print_char_cursor#68
(byte*) print_char_cursor#69
(byte*) print_char_cursor#7
(byte*) print_char_cursor#70
(byte*) print_char_cursor#71
(byte*) print_char_cursor#72
(byte*) print_char_cursor#73
(byte*) print_char_cursor#74
(byte*) print_char_cursor#75
(byte*) print_char_cursor#76
(byte*) print_char_cursor#77
(byte*) print_char_cursor#78
(byte*) print_char_cursor#79
(byte*) print_char_cursor#8
(byte*) print_char_cursor#80
(byte*) print_char_cursor#81
(byte*) print_char_cursor#82
(byte*) print_char_cursor#83
(byte*) print_char_cursor#84
(byte*) print_char_cursor#85
(byte*) print_char_cursor#86
(byte*) print_char_cursor#87
(byte*) print_char_cursor#88
(byte*) print_char_cursor#89
(byte*) print_char_cursor#9
(byte*) print_char_cursor#90
(byte*) print_char_cursor#91
(byte*) print_char_cursor#92
(byte*) print_char_cursor#93
(byte*) print_char_cursor#94
(byte*) print_char_cursor#95
(byte*) print_char_cursor#96
(byte*) print_char_cursor#97
(byte*) print_char_cursor#98
(byte*) print_char_cursor#99
(void()) print_cls()
(label) print_cls::@1
(label) print_cls::@return
(const to_nomodify byte*) print_hextab[]  = (byte*) "0123456789abcdef"z
(byte*) print_line_cursor
(byte*) print_line_cursor#0
(byte*) print_line_cursor#1
(byte*) print_line_cursor#10
(byte*) print_line_cursor#11
(byte*) print_line_cursor#12
(byte*) print_line_cursor#13
(byte*) print_line_cursor#14
(byte*) print_line_cursor#15
(byte*) print_line_cursor#16
(byte*) print_line_cursor#17
(byte*) print_line_cursor#18
(byte*) print_line_cursor#19
(byte*) print_line_cursor#2
(byte*) print_line_cursor#20
(byte*) print_line_cursor#21
(byte*) print_line_cursor#22
(byte*) print_line_cursor#23
(byte*) print_line_cursor#24
(byte*) print_line_cursor#25
(byte*) print_line_cursor#26
(byte*) print_line_cursor#27
(byte*) print_line_cursor#28
(byte*) print_line_cursor#29
(byte*) print_line_cursor#3
(byte*) print_line_cursor#30
(byte*) print_line_cursor#31
(byte*) print_line_cursor#32
(byte*) print_line_cursor#33
(byte*) print_line_cursor#34
(byte*) print_line_cursor#35
(byte*) print_line_cursor#36
(byte*) print_line_cursor#37
(byte*) print_line_cursor#38
(byte*) print_line_cursor#39
(byte*) print_line_cursor#4
(byte*) print_line_cursor#40
(byte*) print_line_cursor#41
(byte*) print_line_cursor#42
(byte*) print_line_cursor#43
(byte*) print_line_cursor#44
(byte*) print_line_cursor#45
(byte*) print_line_cursor#46
(byte*) print_line_cursor#47
(byte*) print_line_cursor#48
(byte*) print_line_cursor#49
(byte*) print_line_cursor#5
(byte*) print_line_cursor#6
(byte*) print_line_cursor#7
(byte*) print_line_cursor#8
(byte*) print_line_cursor#9
(void()) print_ln()
(byte*~) print_ln::$0
(bool~) print_ln::$1
(label) print_ln::@1
(label) print_ln::@2
(label) print_ln::@return
(void()) print_schar((signed byte) print_schar::b)
(bool~) print_schar::$0
(signed byte~) print_schar::$4
(label) print_schar::@1
(label) print_schar::@2
(label) print_schar::@3
(label) print_schar::@4
(label) print_schar::@5
(label) print_schar::@6
(label) print_schar::@return
(signed byte) print_schar::b
(signed byte) print_schar::b#0
(signed byte) print_schar::b#1
(signed byte) print_schar::b#2
(signed byte) print_schar::b#3
(signed byte) print_schar::b#4
(signed byte) print_schar::b#5
(signed byte) print_schar::b#6
(signed byte) print_schar::b#7
(byte*) print_screen
(byte*) print_screen#0
(byte*) print_screen#1
(byte*) print_screen#2
(byte*) print_screen#3
(byte*) print_screen#4
(void()) print_sint((signed word) print_sint::w)
(bool~) print_sint::$0
(signed word~) print_sint::$4
(label) print_sint::@1
(label) print_sint::@2
(label) print_sint::@3
(label) print_sint::@4
(label) print_sint::@5
(label) print_sint::@6
(label) print_sint::@return
(signed word) print_sint::w
(signed word) print_sint::w#0
(signed word) print_sint::w#1
(signed word) print_sint::w#2
(signed word) print_sint::w#3
(signed word) print_sint::w#4
(signed word) print_sint::w#5
(signed word) print_sint::w#6
(signed word) print_sint::w#7
(void()) print_str((byte*) print_str::str)
(bool~) print_str::$1
(label) print_str::@1
(label) print_str::@2
(label) print_str::@3
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0
(byte*) print_str::str#1
(byte*) print_str::str#10
(byte*) print_str::str#11
(byte*) print_str::str#12
(byte*) print_str::str#13
(byte*) print_str::str#2
(byte*) print_str::str#3
(byte*) print_str::str#4
(byte*) print_str::str#5
(byte*) print_str::str#6
(byte*) print_str::str#7
(byte*) print_str::str#8
(byte*) print_str::str#9
(void()) print_uchar((byte) print_uchar::b)
(byte~) print_uchar::$0
(number~) print_uchar::$2
(label) print_uchar::@1
(label) print_uchar::@2
(label) print_uchar::@return
(byte) print_uchar::b
(byte) print_uchar::b#0
(byte) print_uchar::b#1
(byte) print_uchar::b#2
(byte) print_uchar::b#3
(byte) print_uchar::b#4
(byte) print_uchar::b#5
(byte) print_uchar::b#6
(byte) print_uchar::b#7
(byte) print_uchar::b#8
(byte) print_uchar::b#9
(void()) print_uint((word) print_uint::w)
(byte~) print_uint::$0
(byte~) print_uint::$2
(label) print_uint::@1
(label) print_uint::@2
(label) print_uint::@return
(word) print_uint::w
(word) print_uint::w#0
(word) print_uint::w#1
(word) print_uint::w#2
(word) print_uint::w#3
(word) print_uint::w#4
(signed byte()) sin8s((word) sin8s::x)
(bool~) sin8s::$0
(bool~) sin8s::$1
(byte~) sin8s::$10
(byte~) sin8s::$11
(byte~) sin8s::$12
(byte~) sin8s::$13
(bool~) sin8s::$14
(bool~) sin8s::$15
(bool~) sin8s::$16
(bool~) sin8s::$17
(word~) sin8s::$18
(word~) sin8s::$19
(bool~) sin8s::$2
(signed byte~) sin8s::$20
(bool~) sin8s::$3
(word~) sin8s::$4
(byte~) sin8s::$5
(byte~) sin8s::$6
(byte~) sin8s::$7
(byte~) sin8s::$8
(byte~) sin8s::$9
(label) sin8s::@1
(label) sin8s::@10
(label) sin8s::@11
(label) sin8s::@12
(label) sin8s::@13
(label) sin8s::@2
(label) sin8s::@3
(label) sin8s::@4
(label) sin8s::@5
(label) sin8s::@6
(label) sin8s::@7
(label) sin8s::@8
(label) sin8s::@9
(label) sin8s::@return
(const nomodify byte) sin8s::DIV_6 = (byte) $2b
(byte) sin8s::isUpper
(byte) sin8s::isUpper#0
(byte) sin8s::isUpper#1
(byte) sin8s::isUpper#10
(byte) sin8s::isUpper#11
(byte) sin8s::isUpper#2
(byte) sin8s::isUpper#3
(byte) sin8s::isUpper#4
(byte) sin8s::isUpper#5
(byte) sin8s::isUpper#6
(byte) sin8s::isUpper#7
(byte) sin8s::isUpper#8
(byte) sin8s::isUpper#9
(signed byte) sin8s::return
(signed byte) sin8s::return#0
(signed byte) sin8s::return#1
(signed byte) sin8s::return#2
(signed byte) sin8s::return#3
(signed byte) sin8s::return#4
(signed byte) sin8s::sinx
(signed byte) sin8s::sinx#0
(signed byte) sin8s::sinx#1
(signed byte) sin8s::sinx#2
(byte) sin8s::usinx
(byte) sin8s::usinx#0
(byte) sin8s::usinx#1
(byte) sin8s::usinx#2
(byte) sin8s::usinx#3
(byte) sin8s::usinx#4
(byte) sin8s::usinx#5
(byte) sin8s::usinx#6
(byte) sin8s::usinx#7
(word) sin8s::x
(word) sin8s::x#0
(word) sin8s::x#1
(word) sin8s::x#2
(word) sin8s::x#3
(word) sin8s::x#4
(word) sin8s::x#5
(word) sin8s::x#6
(word) sin8s::x#7
(byte) sin8s::x1
(byte) sin8s::x1#0
(byte) sin8s::x1#1
(byte) sin8s::x1#2
(byte) sin8s::x1#3
(byte) sin8s::x1#4
(byte) sin8s::x2
(byte) sin8s::x2#0
(byte) sin8s::x3
(byte) sin8s::x3#0
(byte) sin8s::x3#1
(byte) sin8s::x3_6
(byte) sin8s::x3_6#0
(byte) sin8s::x4
(byte) sin8s::x4#0
(byte) sin8s::x5
(byte) sin8s::x5#0
(byte) sin8s::x5_128
(byte) sin8s::x5_128#0
(void()) sin8u_table((byte*) sin8u_table::sintab , (word) sin8u_table::tabsize , (byte) sin8u_table::min , (byte) sin8u_table::max)
(byte~) sin8u_table::$0
(word~) sin8u_table::$1
(bool~) sin8u_table::$16
(signed byte~) sin8u_table::$17
(number~) sin8u_table::$18
(signed word~) sin8u_table::$19
(number~) sin8u_table::$2
(byte~) sin8u_table::$20
(byte~) sin8u_table::$21
(number~) sin8u_table::$3
(word~) sin8u_table::$31
(word~) sin8u_table::$32
(word~) sin8u_table::$4
(label) sin8u_table::@1
(label) sin8u_table::@10
(label) sin8u_table::@11
(label) sin8u_table::@12
(label) sin8u_table::@13
(label) sin8u_table::@14
(label) sin8u_table::@15
(label) sin8u_table::@16
(label) sin8u_table::@17
(label) sin8u_table::@18
(label) sin8u_table::@19
(label) sin8u_table::@2
(label) sin8u_table::@20
(label) sin8u_table::@21
(label) sin8u_table::@22
(label) sin8u_table::@23
(label) sin8u_table::@24
(label) sin8u_table::@25
(label) sin8u_table::@3
(label) sin8u_table::@4
(label) sin8u_table::@5
(label) sin8u_table::@6
(label) sin8u_table::@7
(label) sin8u_table::@8
(label) sin8u_table::@9
(label) sin8u_table::@return
(byte) sin8u_table::amplitude
(byte) sin8u_table::amplitude#0
(byte) sin8u_table::amplitude#1
(byte) sin8u_table::amplitude#10
(byte) sin8u_table::amplitude#11
(byte) sin8u_table::amplitude#12
(byte) sin8u_table::amplitude#13
(byte) sin8u_table::amplitude#14
(byte) sin8u_table::amplitude#15
(byte) sin8u_table::amplitude#16
(byte) sin8u_table::amplitude#17
(byte) sin8u_table::amplitude#18
(byte) sin8u_table::amplitude#19
(byte) sin8u_table::amplitude#2
(byte) sin8u_table::amplitude#20
(byte) sin8u_table::amplitude#21
(byte) sin8u_table::amplitude#22
(byte) sin8u_table::amplitude#23
(byte) sin8u_table::amplitude#24
(byte) sin8u_table::amplitude#25
(byte) sin8u_table::amplitude#3
(byte) sin8u_table::amplitude#4
(byte) sin8u_table::amplitude#5
(byte) sin8u_table::amplitude#6
(byte) sin8u_table::amplitude#7
(byte) sin8u_table::amplitude#8
(byte) sin8u_table::amplitude#9
(word) sin8u_table::i
(word) sin8u_table::i#0
(word) sin8u_table::i#1
(word) sin8u_table::i#10
(word) sin8u_table::i#11
(word) sin8u_table::i#12
(word) sin8u_table::i#13
(word) sin8u_table::i#14
(word) sin8u_table::i#2
(word) sin8u_table::i#3
(word) sin8u_table::i#4
(word) sin8u_table::i#5
(word) sin8u_table::i#6
(word) sin8u_table::i#7
(word) sin8u_table::i#8
(word) sin8u_table::i#9
(byte) sin8u_table::max
(byte) sin8u_table::max#0
(byte) sin8u_table::max#1
(byte) sin8u_table::max#2
(byte) sin8u_table::max#3
(byte) sin8u_table::max#4
(byte) sin8u_table::max#5
(byte) sin8u_table::max#6
(byte) sin8u_table::max#7
(byte) sin8u_table::mid
(byte) sin8u_table::mid#0
(byte) sin8u_table::mid#1
(byte) sin8u_table::mid#10
(byte) sin8u_table::mid#11
(byte) sin8u_table::mid#12
(byte) sin8u_table::mid#13
(byte) sin8u_table::mid#14
(byte) sin8u_table::mid#15
(byte) sin8u_table::mid#16
(byte) sin8u_table::mid#17
(byte) sin8u_table::mid#18
(byte) sin8u_table::mid#19
(byte) sin8u_table::mid#2
(byte) sin8u_table::mid#20
(byte) sin8u_table::mid#21
(byte) sin8u_table::mid#22
(byte) sin8u_table::mid#23
(byte) sin8u_table::mid#24
(byte) sin8u_table::mid#25
(byte) sin8u_table::mid#3
(byte) sin8u_table::mid#4
(byte) sin8u_table::mid#5
(byte) sin8u_table::mid#6
(byte) sin8u_table::mid#7
(byte) sin8u_table::mid#8
(byte) sin8u_table::mid#9
(byte) sin8u_table::min
(byte) sin8u_table::min#0
(byte) sin8u_table::min#1
(byte) sin8u_table::min#2
(byte) sin8u_table::min#3
(byte) sin8u_table::min#4
(byte) sin8u_table::min#5
(byte*) sin8u_table::sintab
(byte*) sin8u_table::sintab#0
(byte*) sin8u_table::sintab#1
(byte*) sin8u_table::sintab#10
(byte*) sin8u_table::sintab#11
(byte*) sin8u_table::sintab#12
(byte*) sin8u_table::sintab#13
(byte*) sin8u_table::sintab#14
(byte*) sin8u_table::sintab#15
(byte*) sin8u_table::sintab#16
(byte*) sin8u_table::sintab#17
(byte*) sin8u_table::sintab#18
(byte*) sin8u_table::sintab#19
(byte*) sin8u_table::sintab#2
(byte*) sin8u_table::sintab#20
(byte*) sin8u_table::sintab#21
(byte*) sin8u_table::sintab#22
(byte*) sin8u_table::sintab#23
(byte*) sin8u_table::sintab#24
(byte*) sin8u_table::sintab#25
(byte*) sin8u_table::sintab#26
(byte*) sin8u_table::sintab#27
(byte*) sin8u_table::sintab#3
(byte*) sin8u_table::sintab#4
(byte*) sin8u_table::sintab#5
(byte*) sin8u_table::sintab#6
(byte*) sin8u_table::sintab#7
(byte*) sin8u_table::sintab#8
(byte*) sin8u_table::sintab#9
(signed byte) sin8u_table::sinx
(signed byte) sin8u_table::sinx#0
(signed byte) sin8u_table::sinx#1
(signed byte) sin8u_table::sinx#2
(signed byte) sin8u_table::sinx#3
(signed byte) sin8u_table::sinx#4
(signed word) sin8u_table::sinx_sc
(signed word) sin8u_table::sinx_sc#0
(signed word) sin8u_table::sinx_sc#1
(signed word) sin8u_table::sinx_sc#2
(signed word) sin8u_table::sinx_sc#3
(signed word) sin8u_table::sinx_sc#4
(signed word) sin8u_table::sinx_sc#5
(byte) sin8u_table::sinx_tr
(byte) sin8u_table::sinx_tr#0
(byte) sin8u_table::sinx_tr#1
(byte) sin8u_table::sinx_tr#2
(byte) sin8u_table::sinx_tr#3
(byte) sin8u_table::sinx_tr#4
(byte) sin8u_table::sinx_tr#5
(byte) sin8u_table::sinx_tr#6
(byte) sin8u_table::sinx_tr#7
(word) sin8u_table::step
(word) sin8u_table::step#0
(word) sin8u_table::step#1
(word) sin8u_table::step#10
(word) sin8u_table::step#11
(word) sin8u_table::step#12
(word) sin8u_table::step#13
(word) sin8u_table::step#14
(word) sin8u_table::step#15
(word) sin8u_table::step#16
(word) sin8u_table::step#17
(word) sin8u_table::step#18
(word) sin8u_table::step#19
(word) sin8u_table::step#2
(word) sin8u_table::step#20
(word) sin8u_table::step#21
(word) sin8u_table::step#22
(word) sin8u_table::step#23
(word) sin8u_table::step#24
(word) sin8u_table::step#3
(word) sin8u_table::step#4
(word) sin8u_table::step#5
(word) sin8u_table::step#6
(word) sin8u_table::step#7
(word) sin8u_table::step#8
(word) sin8u_table::step#9
(const byte*) sin8u_table::str[(byte) 6]  = (byte*) "step:"
(const byte*) sin8u_table::str1[(byte) 6]  = (byte*) " min:"
(const byte*) sin8u_table::str2[(byte) 6]  = (byte*) " max:"
(const byte*) sin8u_table::str3[(byte) 7]  = (byte*) " ampl:"
(const byte*) sin8u_table::str4[(byte) 6]  = (byte*) " mid:"
(const byte*) sin8u_table::str5[(byte) 4]  = (byte*) "x: "
(const byte*) sin8u_table::str6[(byte) 7]  = (byte*) " sin: "
(const byte*) sin8u_table::str7[(byte) $a]  = (byte*) " scaled: "
(const byte*) sin8u_table::str8[(byte) 9]  = (byte*) " trans: "
(word) sin8u_table::sum
(word) sin8u_table::sum#0
(word) sin8u_table::tabsize
(word) sin8u_table::tabsize#0
(word) sin8u_table::tabsize#1
(word) sin8u_table::tabsize#10
(word) sin8u_table::tabsize#11
(word) sin8u_table::tabsize#12
(word) sin8u_table::tabsize#13
(word) sin8u_table::tabsize#14
(word) sin8u_table::tabsize#15
(word) sin8u_table::tabsize#16
(word) sin8u_table::tabsize#17
(word) sin8u_table::tabsize#18
(word) sin8u_table::tabsize#19
(word) sin8u_table::tabsize#2
(word) sin8u_table::tabsize#20
(word) sin8u_table::tabsize#21
(word) sin8u_table::tabsize#22
(word) sin8u_table::tabsize#23
(word) sin8u_table::tabsize#24
(word) sin8u_table::tabsize#25
(word) sin8u_table::tabsize#26
(word) sin8u_table::tabsize#3
(word) sin8u_table::tabsize#4
(word) sin8u_table::tabsize#5
(word) sin8u_table::tabsize#6
(word) sin8u_table::tabsize#7
(word) sin8u_table::tabsize#8
(word) sin8u_table::tabsize#9
(word) sin8u_table::x
(word) sin8u_table::x#0
(word) sin8u_table::x#1
(word) sin8u_table::x#10
(word) sin8u_table::x#11
(word) sin8u_table::x#12
(word) sin8u_table::x#13
(word) sin8u_table::x#14
(word) sin8u_table::x#2
(word) sin8u_table::x#3
(word) sin8u_table::x#4
(word) sin8u_table::x#5
(word) sin8u_table::x#6
(word) sin8u_table::x#7
(word) sin8u_table::x#8
(word) sin8u_table::x#9

Adding number conversion cast (unumber) 1 in (word~) divr16u::$0 ← (word) divr16u::rem#4 << (number) 1
Adding number conversion cast (unumber) $80 in (number~) divr16u::$2 ← (byte~) divr16u::$1 & (number) $80
Adding number conversion cast (unumber) divr16u::$2 in (number~) divr16u::$2 ← (byte~) divr16u::$1 & (unumber)(number) $80
Adding number conversion cast (unumber) 0 in (bool~) divr16u::$3 ← (unumber~) divr16u::$2 != (number) 0
Adding number conversion cast (unumber) 1 in (word~) divr16u::$6 ← (word) divr16u::dividend#3 << (number) 1
Adding number conversion cast (unumber) 1 in (word~) divr16u::$7 ← (word) divr16u::quotient#3 << (number) 1
Adding number conversion cast (unumber) 1 in (number~) divr16u::$5 ← (word) divr16u::rem#6 | (number) 1
Adding number conversion cast (unumber) divr16u::$5 in (number~) divr16u::$5 ← (word) divr16u::rem#6 | (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (word) divr16u::rem#3 ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) mul8u::$0 ← (byte) mul8u::a#3 != (number) 0
Adding number conversion cast (unumber) 1 in (number~) mul8u::$1 ← (byte) mul8u::a#4 & (number) 1
Adding number conversion cast (unumber) mul8u::$1 in (number~) mul8u::$1 ← (byte) mul8u::a#4 & (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (bool~) mul8u::$2 ← (unumber~) mul8u::$1 != (number) 0
Adding number conversion cast (unumber) 1 in (byte~) mul8u::$5 ← (byte) mul8u::a#5 >> (number) 1
Adding number conversion cast (unumber) 1 in (word~) mul8u::$6 ← (word) mul8u::mb#2 << (number) 1
Adding number conversion cast (snumber) 0 in (bool~) mul8su::$1 ← (signed byte) mul8su::a#2 < (number) 0
Adding number conversion cast (unumber) 1 in (byte) sin8s::isUpper#1 ← (number) 1
Adding number conversion cast (unumber) 3 in (word~) sin8s::$4 ← (word) sin8s::x#6 << (number) 3
Adding number conversion cast (unumber) 0 in (byte) mulu8_sel::select#0 ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) mulu8_sel::select#1 ← (number) 1
Adding number conversion cast (unumber) 1 in (byte) mulu8_sel::select#2 ← (number) 1
Adding number conversion cast (unumber) 0 in (byte) mulu8_sel::select#3 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) mulu8_sel::select#4 ← (number) 0
Adding number conversion cast (unumber) 4 in (byte~) sin8s::$12 ← (byte) sin8s::x5#0 >> (number) 4
Adding number conversion cast (unumber) $80 in (bool~) sin8s::$14 ← (byte) sin8s::usinx#1 >= (number) $80
Adding number conversion cast (unumber) 0 in (bool~) sin8s::$16 ← (byte) sin8s::isUpper#2 != (number) 0
Adding number conversion cast (unumber) 0 in (bool~) memset::$0 ← (word) memset::num#1 > (number) 0
Adding number conversion cast (unumber) 0 in (bool~) print_str::$1 ← (number) 0 != *((byte*) print_str::str#10)
Adding number conversion cast (unumber) $28 in (byte*~) print_ln::$0 ← (byte*) print_line_cursor#12 + (number) $28
Adding number conversion cast (snumber) 0 in (bool~) print_sint::$0 ← (signed word) print_sint::w#2 < (number) 0
Adding number conversion cast (snumber) 0 in (bool~) print_schar::$0 ← (signed byte) print_schar::b#2 < (number) 0
Adding number conversion cast (unumber) 4 in (byte~) print_uchar::$0 ← (byte) print_uchar::b#8 >> (number) 4
Adding number conversion cast (unumber) $f in (number~) print_uchar::$2 ← (byte) print_uchar::b#9 & (number) $f
Adding number conversion cast (unumber) print_uchar::$2 in (number~) print_uchar::$2 ← (byte) print_uchar::b#9 & (unumber)(number) $f
Adding number conversion cast (unumber) $3e8 in (word) memset::num#0 ← (number) $3e8
Adding number conversion cast (unumber) $a in (byte) sin8u_table::min#0 ← (number) $a
Adding number conversion cast (unumber) $ff in (byte) sin8u_table::max#0 ← (number) $ff
Adding number conversion cast (unumber) 2 in (number~) sin8u_table::$2 ← (word) sin8u_table::sum#0 / (number) 2
Adding number conversion cast (unumber) sin8u_table::$2 in (number~) sin8u_table::$2 ← (word) sin8u_table::sum#0 / (unumber)(number) 2
Adding number conversion cast (unumber) 1 in (number~) sin8u_table::$3 ← (unumber~) sin8u_table::$2 + (number) 1
Adding number conversion cast (unumber) sin8u_table::$3 in (number~) sin8u_table::$3 ← (unumber~) sin8u_table::$2 + (unumber)(number) 1
Adding number conversion cast (unumber) 1 in (number~) sin8u_table::$18 ← (byte) sin8u_table::amplitude#2 + (number) 1
Adding number conversion cast (unumber) sin8u_table::$18 in (number~) sin8u_table::$18 ← (byte) sin8u_table::amplitude#2 + (unumber)(number) 1
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (word) divr16u::rem#3 ← (unumber)(number) 0
Inlining cast (byte) sin8s::isUpper#1 ← (unumber)(number) 1
Inlining cast (byte) mulu8_sel::select#0 ← (unumber)(number) 0
Inlining cast (byte) mulu8_sel::select#1 ← (unumber)(number) 1
Inlining cast (byte) mulu8_sel::select#2 ← (unumber)(number) 1
Inlining cast (byte) mulu8_sel::select#3 ← (unumber)(number) 0
Inlining cast (byte) mulu8_sel::select#4 ← (unumber)(number) 0
Inlining cast (byte*) memset::dst#0 ← (byte*)(void*) memset::str#2
Inlining cast (word) memset::num#0 ← (unumber)(number) $3e8
Inlining cast (byte) sin8u_table::min#0 ← (unumber)(number) $a
Inlining cast (byte) sin8u_table::max#0 ← (unumber)(number) $ff
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast 1
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast (byte) mul8su::b#1
Simplifying constant integer cast 0
Simplifying constant integer cast (byte) mul8su::b#2
Simplifying constant integer cast 1
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 4
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast $3e8
Simplifying constant integer cast $a
Simplifying constant integer cast $ff
Simplifying constant integer cast 2
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80
Inferred type updated to word in (unumber~) divr16u::$5 ← (word) divr16u::rem#6 | (byte) 1
Inferred type updated to byte in (unumber~) mul8u::$1 ← (byte) mul8u::a#4 & (byte) 1
Inferred type updated to byte in (unumber~) print_uchar::$2 ← (byte) print_uchar::b#9 & (byte) $f
Inferred type updated to word in (unumber~) sin8u_table::$2 ← (word) sin8u_table::sum#0 / (byte) 2
Inferred type updated to word in (unumber~) sin8u_table::$3 ← (word~) sin8u_table::$2 + (byte) 1
Inferred type updated to byte in (unumber~) sin8u_table::$18 ← (byte) sin8u_table::amplitude#2 + (byte) 1
Inversing boolean not [9] (bool~) divr16u::$4 ← (byte~) divr16u::$2 == (byte) 0 from [8] (bool~) divr16u::$3 ← (byte~) divr16u::$2 != (byte) 0
Inversing boolean not [17] (bool~) divr16u::$9 ← (word) divr16u::rem#5 < (word) divr16u::divisor#1 from [16] (bool~) divr16u::$8 ← (word) divr16u::rem#5 >= (word) divr16u::divisor#1
Inversing boolean not [56] (bool~) mul8u::$3 ← (byte~) mul8u::$1 == (byte) 0 from [55] (bool~) mul8u::$2 ← (byte~) mul8u::$1 != (byte) 0
Inversing boolean not [80] (bool~) mul8su::$2 ← (signed byte) mul8su::a#2 >= (signed byte) 0 from [79] (bool~) mul8su::$1 ← (signed byte) mul8su::a#2 < (signed byte) 0
Inversing boolean not [96] (bool~) sin8s::$1 ← (word) sin8s::x#3 < (const nomodify word) PI_u4f12 from [95] (bool~) sin8s::$0 ← (word) sin8s::x#3 >= (const nomodify word) PI_u4f12
Inversing boolean not [100] (bool~) sin8s::$3 ← (word) sin8s::x#4 < (const nomodify word) PI_HALF_u4f12 from [99] (bool~) sin8s::$2 ← (word) sin8s::x#4 >= (const nomodify word) PI_HALF_u4f12
Inversing boolean not [157] (bool~) sin8s::$15 ← (byte) sin8s::usinx#1 < (byte) $80 from [156] (bool~) sin8s::$14 ← (byte) sin8s::usinx#1 >= (byte) $80
Inversing boolean not [165] (bool~) sin8s::$17 ← (byte) sin8s::isUpper#2 == (byte) 0 from [164] (bool~) sin8s::$16 ← (byte) sin8s::isUpper#2 != (byte) 0
Inversing boolean not [192] (bool~) memset::$1 ← (word) memset::num#1 <= (byte) 0 from [191] (bool~) memset::$0 ← (word) memset::num#1 > (byte) 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias divr16u::rem#0 = divr16u::$0 divr16u::rem#6 
Alias divr16u::dividend#0 = divr16u::$6 divr16u::dividend#7 
Alias divr16u::quotient#1 = divr16u::$7 divr16u::quotient#4 
Alias divr16u::dividend#2 = divr16u::dividend#6 
Alias divr16u::quotient#6 = divr16u::quotient#7 
Alias divr16u::divisor#3 = divr16u::divisor#4 
Alias divr16u::i#5 = divr16u::i#6 
Alias divr16u::rem#1 = divr16u::$5 
Alias divr16u::rem#5 = divr16u::rem#7 
Alias divr16u::divisor#1 = divr16u::divisor#2 
Alias divr16u::i#3 = divr16u::i#4 
Alias divr16u::rem#2 = divr16u::$10 
Alias divr16u::return#0 = divr16u::quotient#5 divr16u::quotient#8 divr16u::return#3 divr16u::return#1 
Alias divr16u::return#2 = divr16u::return#4 
Alias div16u::return#0 = div16u::$0 div16u::return#3 div16u::return#1 
Alias mul8u::a#3 = mul8u::a#4 mul8u::a#7 
Alias mul8u::mb#3 = mul8u::mb#4 mul8u::mb#5 
Alias mul8u::res#2 = mul8u::res#5 mul8u::res#4 mul8u::return#0 mul8u::res#3 mul8u::return#4 mul8u::return#1 
Alias mul8u::a#0 = mul8u::$5 
Alias mul8u::mb#1 = mul8u::$6 
Alias mul8u::res#1 = mul8u::$4 
Alias mul8u::return#2 = mul8u::return#5 
Alias mul8su::a#1 = mul8su::a#2 
Alias mul8su::b#1 = mul8su::b#3 mul8su::b#2 mul8su::$7 
Alias mul8su::m#0 = mul8su::$0 mul8su::m#3 
Alias mul8su::$6 = mul8su::$5 
Alias mul8su::return#0 = mul8su::return#3 mul8su::return#1 
Alias sin8s::x#3 = sin8s::x#5 
Alias sin8s::x#0 = sin8s::$18 
Alias sin8s::x1#0 = sin8s::$5 sin8s::x1#1 sin8s::x1#4 sin8s::x1#2 sin8s::x1#3 
Alias mulu8_sel::return#0 = mulu8_sel::return#7 
Alias sin8s::isUpper#3 = sin8s::isUpper#8 sin8s::isUpper#9 sin8s::isUpper#7 sin8s::isUpper#6 sin8s::isUpper#5 sin8s::isUpper#4 
Alias sin8s::x2#0 = sin8s::$6 
Alias mulu8_sel::return#1 = mulu8_sel::return#8 
Alias sin8s::x3#0 = sin8s::$7 sin8s::x3#1 
Alias mulu8_sel::return#2 = mulu8_sel::return#9 
Alias sin8s::x3_6#0 = sin8s::$8 
Alias sin8s::usinx#0 = sin8s::$9 sin8s::usinx#7 sin8s::usinx#3 
Alias mulu8_sel::return#10 = mulu8_sel::return#3 
Alias sin8s::x4#0 = sin8s::$10 
Alias mulu8_sel::return#11 = mulu8_sel::return#4 
Alias sin8s::x5#0 = sin8s::$11 
Alias sin8s::x5_128#0 = sin8s::$12 
Alias sin8s::usinx#1 = sin8s::$13 sin8s::usinx#5 
Alias sin8s::x#4 = sin8s::x#7 
Alias sin8s::isUpper#10 = sin8s::isUpper#11 
Alias sin8s::x#1 = sin8s::$19 
Alias sin8s::return#0 = sin8s::sinx#2 sin8s::return#3 sin8s::return#1 
Alias sin8s::usinx#4 = sin8s::usinx#6 
Alias sin8s::sinx#1 = sin8s::$20 
Alias mul8u::return#3 = mul8u::return#6 
Alias mulu8_sel::select#5 = mulu8_sel::select#6 
Alias mulu8_sel::return#12 = mulu8_sel::return#5 mulu8_sel::$2 mulu8_sel::return#6 
Alias memset::return#0 = memset::str#1 memset::return#3 memset::return#1 
Alias memset::str#2 = memset::str#3 
Alias memset::num#1 = memset::num#2 
Alias memset::c#3 = memset::c#4 
Alias memset::end#0 = memset::$2 
Alias memset::c#1 = memset::c#2 
Alias memset::dst#2 = memset::dst#3 
Alias memset::end#1 = memset::end#2 
Alias memset::str#4 = memset::str#5 
Alias print_line_cursor#0 = print_screen#0 print_char_cursor#0 print_line_cursor#28 print_char_cursor#109 print_screen#4 
Alias print_str::str#10 = print_str::str#11 print_str::str#12 
Alias print_char_cursor#2 = print_char_cursor#94 print_char_cursor#95 print_char_cursor#49 
Alias print_char_cursor#1 = print_char_cursor#48 
Alias print_line_cursor#1 = print_ln::$0 print_line_cursor#13 print_char_cursor#3 print_line_cursor#14 print_char_cursor#51 print_line_cursor#2 print_char_cursor#4 
Alias print_char_cursor#111 = print_char_cursor#97 print_char_cursor#98 
Alias print_sint::w#2 = print_sint::w#5 print_sint::w#3 print_sint::w#7 print_sint::w#6 
Alias print_char_cursor#5 = print_char_cursor#52 
Alias print_sint::w#0 = print_sint::$4 
Alias print_char_cursor#53 = print_char_cursor#6 
Alias print_char_cursor#54 = print_char_cursor#7 print_char_cursor#55 print_char_cursor#8 
Alias print_char_cursor#100 = print_char_cursor#112 print_char_cursor#101 
Alias print_schar::b#2 = print_schar::b#5 print_schar::b#3 print_schar::b#7 print_schar::b#6 
Alias print_char_cursor#56 = print_char_cursor#9 
Alias print_schar::b#0 = print_schar::$4 
Alias print_char_cursor#10 = print_char_cursor#57 
Alias print_char_cursor#11 = print_char_cursor#58 print_char_cursor#59 print_char_cursor#12 
Alias print_uchar::b#1 = print_uint::$0 
Alias print_uint::w#3 = print_uint::w#4 
Alias print_char_cursor#13 = print_char_cursor#60 
Alias print_uchar::b#2 = print_uint::$2 
Alias print_char_cursor#14 = print_char_cursor#61 print_char_cursor#62 print_char_cursor#15 
Alias print_uchar::b#8 = print_uchar::b#9 
Alias print_char_cursor#16 = print_char_cursor#63 
Alias print_char_cursor#17 = print_char_cursor#64 print_char_cursor#65 print_char_cursor#18 
Alias print_char_cursor#19 = print_char_cursor#67 print_char_cursor#20 
Alias print_line_cursor#15 = print_screen#2 print_screen#1 print_line_cursor#3 print_char_cursor#21 print_char_cursor#68 print_line_cursor#4 print_char_cursor#22 
Alias print_line_cursor#16 = print_line_cursor#5 
Alias print_char_cursor#23 = print_char_cursor#69 
Alias print_char_cursor#24 = print_char_cursor#70 print_char_cursor#71 print_char_cursor#25 
Alias print_line_cursor#17 = print_line_cursor#6 print_line_cursor#18 print_line_cursor#7 
Alias sin8u_table::amplitude#0 = sin8u_table::$0 sin8u_table::amplitude#19 sin8u_table::amplitude#16 sin8u_table::amplitude#13 sin8u_table::amplitude#10 sin8u_table::amplitude#7 sin8u_table::amplitude#5 sin8u_table::amplitude#3 sin8u_table::amplitude#1 sin8u_table::amplitude#17 sin8u_table::amplitude#14 sin8u_table::amplitude#11 sin8u_table::amplitude#8 
Alias sin8u_table::sum#0 = sin8u_table::$1 
Alias div16u::return#2 = div16u::return#4 
Alias print_char_cursor#106 = print_char_cursor#113 
Alias sin8u_table::min#1 = sin8u_table::min#5 sin8u_table::min#4 sin8u_table::min#3 sin8u_table::min#2 
Alias sin8u_table::max#1 = sin8u_table::max#7 sin8u_table::max#6 sin8u_table::max#5 sin8u_table::max#4 sin8u_table::max#3 sin8u_table::max#2 
Alias sin8u_table::mid#0 = sin8u_table::mid#21 sin8u_table::mid#19 sin8u_table::mid#17 sin8u_table::mid#15 sin8u_table::mid#12 sin8u_table::mid#9 sin8u_table::mid#7 sin8u_table::mid#5 sin8u_table::mid#3 sin8u_table::mid#1 sin8u_table::mid#13 sin8u_table::mid#10 
Alias print_line_cursor#25 = print_line_cursor#47 print_line_cursor#49 print_line_cursor#45 print_line_cursor#43 print_line_cursor#41 print_line_cursor#39 print_line_cursor#37 print_line_cursor#35 print_line_cursor#33 print_line_cursor#31 print_line_cursor#29 
Alias sin8u_table::tabsize#1 = sin8u_table::tabsize#25 sin8u_table::tabsize#23 sin8u_table::tabsize#21 sin8u_table::tabsize#19 sin8u_table::tabsize#17 sin8u_table::tabsize#15 sin8u_table::tabsize#13 sin8u_table::tabsize#11 sin8u_table::tabsize#9 sin8u_table::tabsize#7 sin8u_table::tabsize#5 sin8u_table::tabsize#3 
Alias sin8u_table::sintab#10 = sin8u_table::sintab#26 sin8u_table::sintab#27 sin8u_table::sintab#25 sin8u_table::sintab#24 sin8u_table::sintab#22 sin8u_table::sintab#20 sin8u_table::sintab#18 sin8u_table::sintab#16 sin8u_table::sintab#14 sin8u_table::sintab#12 sin8u_table::sintab#8 sin8u_table::sintab#6 
Alias sin8u_table::step#0 = sin8u_table::$4 sin8u_table::step#1 sin8u_table::step#24 sin8u_table::step#23 sin8u_table::step#22 sin8u_table::step#21 sin8u_table::step#20 sin8u_table::step#19 sin8u_table::step#18 sin8u_table::step#17 sin8u_table::step#16 sin8u_table::step#15 
Alias print_char_cursor#26 = print_char_cursor#72 
Alias print_char_cursor#27 = print_char_cursor#73 
Alias print_char_cursor#28 = print_char_cursor#74 
Alias print_char_cursor#29 = print_char_cursor#75 
Alias print_char_cursor#30 = print_char_cursor#76 
Alias print_char_cursor#31 = print_char_cursor#77 
Alias print_char_cursor#32 = print_char_cursor#78 
Alias print_char_cursor#33 = print_char_cursor#79 
Alias print_char_cursor#34 = print_char_cursor#80 
Alias print_char_cursor#35 = print_char_cursor#81 
Alias print_line_cursor#19 = print_line_cursor#8 
Alias print_char_cursor#36 = print_char_cursor#82 
Alias sin8u_table::x#10 = sin8u_table::x#2 sin8u_table::x#5 sin8u_table::x#8 sin8u_table::x#6 sin8u_table::x#3 sin8u_table::x#14 sin8u_table::x#13 sin8u_table::x#12 sin8u_table::x#11 sin8u_table::x#9 sin8u_table::x#7 sin8u_table::x#4 
Alias sin8u_table::amplitude#12 = sin8u_table::amplitude#4 sin8u_table::amplitude#6 sin8u_table::amplitude#2 sin8u_table::amplitude#25 sin8u_table::amplitude#24 sin8u_table::amplitude#23 sin8u_table::amplitude#22 sin8u_table::amplitude#21 sin8u_table::amplitude#20 sin8u_table::amplitude#18 sin8u_table::amplitude#15 sin8u_table::amplitude#9 
Alias sin8u_table::mid#11 = sin8u_table::mid#6 sin8u_table::mid#8 sin8u_table::mid#4 sin8u_table::mid#2 sin8u_table::mid#25 sin8u_table::mid#24 sin8u_table::mid#23 sin8u_table::mid#22 sin8u_table::mid#20 sin8u_table::mid#18 sin8u_table::mid#16 sin8u_table::mid#14 
Alias sin8u_table::sintab#2 = sin8u_table::sintab#4 sin8u_table::sintab#5 sin8u_table::sintab#3 
Alias print_char_cursor#107 = print_char_cursor#115 print_char_cursor#108 print_char_cursor#114 print_char_cursor#92 print_char_cursor#46 
Alias print_line_cursor#10 = print_line_cursor#48 print_line_cursor#27 print_line_cursor#46 print_line_cursor#44 print_line_cursor#42 print_line_cursor#40 print_line_cursor#38 print_line_cursor#36 print_line_cursor#34 print_line_cursor#32 print_line_cursor#30 print_line_cursor#26 print_line_cursor#21 
Alias sin8u_table::step#10 = sin8u_table::step#13 sin8u_table::step#14 sin8u_table::step#12 sin8u_table::step#11 sin8u_table::step#9 sin8u_table::step#8 sin8u_table::step#7 sin8u_table::step#6 sin8u_table::step#5 sin8u_table::step#4 sin8u_table::step#3 sin8u_table::step#2 
Alias sin8u_table::i#10 = sin8u_table::i#14 sin8u_table::i#2 sin8u_table::i#13 sin8u_table::i#12 sin8u_table::i#11 sin8u_table::i#9 sin8u_table::i#8 sin8u_table::i#7 sin8u_table::i#6 sin8u_table::i#5 sin8u_table::i#4 sin8u_table::i#3 
Alias sin8u_table::tabsize#10 = sin8u_table::tabsize#26 sin8u_table::tabsize#2 sin8u_table::tabsize#24 sin8u_table::tabsize#22 sin8u_table::tabsize#20 sin8u_table::tabsize#18 sin8u_table::tabsize#16 sin8u_table::tabsize#14 sin8u_table::tabsize#12 sin8u_table::tabsize#8 sin8u_table::tabsize#6 sin8u_table::tabsize#4 
Alias sin8s::return#2 = sin8s::return#4 
Alias sin8u_table::sinx#0 = sin8u_table::$17 sin8u_table::sinx#4 sin8u_table::sinx#3 sin8u_table::sinx#2 sin8u_table::sinx#1 
Alias mul8su::b#0 = sin8u_table::$18 
Alias mul8su::return#2 = mul8su::return#4 
Alias sin8u_table::sinx_sc#0 = sin8u_table::$19 sin8u_table::sinx_sc#5 sin8u_table::sinx_sc#4 sin8u_table::sinx_sc#3 sin8u_table::sinx_sc#2 sin8u_table::sinx_sc#1 
Alias sin8u_table::sinx_tr#0 = sin8u_table::$21 sin8u_table::sinx_tr#7 sin8u_table::sinx_tr#6 sin8u_table::sinx_tr#5 sin8u_table::sinx_tr#4 sin8u_table::sinx_tr#3 sin8u_table::sinx_tr#2 sin8u_table::sinx_tr#1 
Alias sin8u_table::sintab#1 = sin8u_table::sintab#23 sin8u_table::sintab#21 sin8u_table::sintab#19 sin8u_table::sintab#17 sin8u_table::sintab#15 sin8u_table::sintab#13 sin8u_table::sintab#11 sin8u_table::sintab#9 sin8u_table::sintab#7 
Alias print_char_cursor#37 = print_char_cursor#83 
Alias print_char_cursor#38 = print_char_cursor#84 
Alias print_char_cursor#39 = print_char_cursor#85 
Alias print_char_cursor#40 = print_char_cursor#86 
Alias print_char_cursor#41 = print_char_cursor#87 
Alias print_char_cursor#42 = print_char_cursor#88 
Alias print_char_cursor#43 = print_char_cursor#89 
Alias print_char_cursor#44 = print_char_cursor#90 
Alias print_line_cursor#20 = print_line_cursor#9 
Alias print_char_cursor#45 = print_char_cursor#91 
Alias sin8u_table::x#1 = sin8u_table::$31 
Alias print_line_cursor#11 = print_line_cursor#22 
Alias print_char_cursor#47 = print_char_cursor#93 
Successful SSA optimization Pass2AliasElimination
Alias divr16u::dividend#2 = divr16u::dividend#3 
Alias divr16u::quotient#3 = divr16u::quotient#6 
Alias divr16u::divisor#1 = divr16u::divisor#3 divr16u::divisor#6 
Alias divr16u::i#2 = divr16u::i#3 divr16u::i#5 
Alias divr16u::dividend#0 = divr16u::dividend#5 
Alias mul8u::a#3 = mul8u::a#5 
Alias mul8u::mb#2 = mul8u::mb#3 
Alias sin8s::isUpper#10 = sin8s::isUpper#3 sin8s::isUpper#2 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (word) divr16u::rem#8 (word) divr16u::rem#3
Identical Phi Values (word) divr16u::dividend#4 (word) divr16u::dividend#1
Identical Phi Values (word) divr16u::divisor#5 (word) divr16u::divisor#0
Identical Phi Values (word) divr16u::divisor#1 (word) divr16u::divisor#5
Identical Phi Values (word) div16u::dividend#1 (word) div16u::dividend#0
Identical Phi Values (word) div16u::divisor#1 (word) div16u::divisor#0
Identical Phi Values (signed byte) mul8su::a#1 (signed byte) mul8su::a#0
Identical Phi Values (byte) mul8su::b#1 (byte) mul8su::b#0
Identical Phi Values (word) sin8s::x#3 (word) sin8s::x#2
Identical Phi Values (word) memset::num#1 (word) memset::num#0
Identical Phi Values (void*) memset::str#2 (void*) memset::str#0
Identical Phi Values (byte) memset::c#3 (byte) memset::c#0
Identical Phi Values (byte*) memset::end#1 (byte*) memset::end#0
Identical Phi Values (void*) memset::str#4 (void*) memset::str#2
Identical Phi Values (byte) memset::c#1 (byte) memset::c#3
Identical Phi Values (byte*) print_char_cursor#1 (byte*) print_char_cursor#19
Identical Phi Values (byte*) print_char_cursor#50 (byte*) print_char_cursor#96
Identical Phi Values (signed word) print_sint::w#2 (signed word) print_sint::w#1
Identical Phi Values (byte*) print_char_cursor#111 (byte*) print_char_cursor#41
Identical Phi Values (byte*) print_char_cursor#5 (byte*) print_char_cursor#19
Identical Phi Values (byte*) print_char_cursor#53 (byte*) print_char_cursor#19
Identical Phi Values (byte*) print_char_cursor#54 (byte*) print_char_cursor#14
Identical Phi Values (signed byte) print_schar::b#2 (signed byte) print_schar::b#1
Identical Phi Values (byte*) print_char_cursor#100 (byte*) print_char_cursor#39
Identical Phi Values (byte*) print_char_cursor#56 (byte*) print_char_cursor#19
Identical Phi Values (byte*) print_char_cursor#10 (byte*) print_char_cursor#19
Identical Phi Values (byte*) print_char_cursor#11 (byte*) print_char_cursor#17
Identical Phi Values (byte*) print_char_cursor#13 (byte*) print_char_cursor#17
Identical Phi Values (byte*) print_char_cursor#14 (byte*) print_char_cursor#17
Identical Phi Values (byte*) print_char_cursor#16 (byte*) print_char_cursor#19
Identical Phi Values (byte*) print_char_cursor#17 (byte*) print_char_cursor#19
Identical Phi Values (byte*) print_line_cursor#15 (byte*) print_screen#3
Identical Phi Values (byte*) print_screen#3 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_line_cursor#24 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_char_cursor#105 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_line_cursor#16 (byte*) print_line_cursor#15
Identical Phi Values (byte*) print_char_cursor#23 (byte*) print_line_cursor#15
Identical Phi Values (byte*) print_char_cursor#24 (byte*) print_char_cursor#107
Identical Phi Values (byte*) print_line_cursor#17 (byte*) print_line_cursor#10
Identical Phi Values (byte) sin8u_table::max#1 (byte) sin8u_table::max#0
Identical Phi Values (byte) sin8u_table::min#1 (byte) sin8u_table::min#0
Identical Phi Values (word) sin8u_table::tabsize#1 (word) sin8u_table::tabsize#0
Identical Phi Values (byte*) print_char_cursor#106 (byte*) print_char_cursor#23
Identical Phi Values (byte*) print_line_cursor#25 (byte*) print_line_cursor#16
Identical Phi Values (byte*) sin8u_table::sintab#10 (byte*) sin8u_table::sintab#0
Identical Phi Values (byte*) print_char_cursor#26 (byte*) print_char_cursor#2
Identical Phi Values (byte*) print_char_cursor#27 (byte*) print_char_cursor#14
Identical Phi Values (byte*) print_char_cursor#28 (byte*) print_char_cursor#2
Identical Phi Values (byte*) print_char_cursor#29 (byte*) print_char_cursor#17
Identical Phi Values (byte*) print_char_cursor#30 (byte*) print_char_cursor#2
Identical Phi Values (byte*) print_char_cursor#31 (byte*) print_char_cursor#17
Identical Phi Values (byte*) print_char_cursor#32 (byte*) print_char_cursor#2
Identical Phi Values (byte*) print_char_cursor#33 (byte*) print_char_cursor#17
Identical Phi Values (byte*) print_char_cursor#34 (byte*) print_char_cursor#2
Identical Phi Values (byte*) print_char_cursor#35 (byte*) print_char_cursor#17
Identical Phi Values (byte*) print_line_cursor#19 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_char_cursor#36 (byte*) print_line_cursor#1
Identical Phi Values (word) sin8u_table::tabsize#10 (word) sin8u_table::tabsize#1
Identical Phi Values (byte) sin8u_table::amplitude#12 (byte) sin8u_table::amplitude#0
Identical Phi Values (byte) sin8u_table::mid#11 (byte) sin8u_table::mid#0
Identical Phi Values (word) sin8u_table::step#10 (word) sin8u_table::step#0
Identical Phi Values (byte*) print_char_cursor#37 (byte*) print_char_cursor#2
Identical Phi Values (byte*) print_char_cursor#38 (byte*) print_char_cursor#14
Identical Phi Values (byte*) print_char_cursor#39 (byte*) print_char_cursor#2
Identical Phi Values (byte*) print_char_cursor#40 (byte*) print_char_cursor#11
Identical Phi Values (byte*) print_char_cursor#41 (byte*) print_char_cursor#2
Identical Phi Values (byte*) print_char_cursor#42 (byte*) print_char_cursor#54
Identical Phi Values (byte*) print_char_cursor#43 (byte*) print_char_cursor#2
Identical Phi Values (byte*) print_char_cursor#44 (byte*) print_char_cursor#17
Identical Phi Values (byte*) print_line_cursor#20 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_char_cursor#45 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_line_cursor#11 (byte*) print_line_cursor#17
Identical Phi Values (byte*) print_char_cursor#47 (byte*) print_char_cursor#24
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (void*) memset::return#0 (void*) memset::str#0
Identical Phi Values (byte*) print_char_cursor#96 (byte*) print_char_cursor#19
Identical Phi Values (byte*) print_char_cursor#99 (byte*) print_char_cursor#19
Identical Phi Values (byte*) print_char_cursor#102 (byte*) print_char_cursor#19
Identical Phi Values (byte*) print_char_cursor#107 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_line_cursor#10 (byte*) print_line_cursor#1
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) divr16u::$4 [8] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2
Simple Condition (bool~) divr16u::$9 [13] if((word) divr16u::rem#5<(word) divr16u::divisor#0) goto divr16u::@3
Simple Condition (bool~) divr16u::$11 [18] if((byte) divr16u::i#1!=rangelast(0,$f)) goto divr16u::@1
Simple Condition (bool~) mul8u::$0 [35] if((byte) mul8u::a#3!=(byte) 0) goto mul8u::@2
Simple Condition (bool~) mul8u::$3 [38] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@4
Simple Condition (bool~) mul8su::$2 [51] if((signed byte) mul8su::a#0>=(signed byte) 0) goto mul8su::@1
Simple Condition (bool~) sin8s::$1 [61] if((word) sin8s::x#2<(const nomodify word) PI_u4f12) goto sin8s::@1
Simple Condition (bool~) sin8s::$3 [64] if((word) sin8s::x#4<(const nomodify word) PI_HALF_u4f12) goto sin8s::@2
Simple Condition (bool~) sin8s::$15 [104] if((byte) sin8s::usinx#1<(byte) $80) goto sin8s::@3
Simple Condition (bool~) sin8s::$17 [109] if((byte) sin8s::isUpper#10==(byte) 0) goto sin8s::@4
Simple Condition (bool~) memset::$1 [125] if((word) memset::num#0<=(byte) 0) goto memset::@1
Simple Condition (bool~) memset::$3 [132] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@4
Simple Condition (bool~) print_str::$1 [140] if((byte) 0!=*((byte*) print_str::str#10)) goto print_str::@2
Simple Condition (bool~) print_ln::$1 [150] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#19) goto print_ln::@1
Simple Condition (bool~) print_sint::$0 [154] if((signed word) print_sint::w#1<(signed byte) 0) goto print_sint::@1
Simple Condition (bool~) print_schar::$0 [169] if((signed byte) print_schar::b#1<(signed byte) 0) goto print_schar::@1
Simple Condition (bool~) sin8u_table::$16 [269] if((word) sin8u_table::i#10<(word) sin8u_table::tabsize#0) goto sin8u_table::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const word) divr16u::quotient#0 = 0
Constant (const byte) divr16u::i#0 = 0
Constant (const word) divr16u::rem#3 = 0
Constant (const word) mul8u::res#0 = 0
Constant (const byte) sin8s::isUpper#0 = 0
Constant (const byte) sin8s::isUpper#1 = 1
Constant (const byte) mulu8_sel::select#0 = 0
Constant (const byte) mulu8_sel::select#1 = 1
Constant (const byte) mulu8_sel::v2#2 = sin8s::DIV_6
Constant (const byte) mulu8_sel::select#2 = 1
Constant (const byte) mulu8_sel::select#3 = 0
Constant (const byte) mulu8_sel::select#4 = 0
Constant (const byte*) print_line_cursor#0 = (byte*) 1024
Constant (const byte) print_char::ch#1 = '-'
Constant (const byte) print_char::ch#2 = ' '
Constant (const byte) print_char::ch#3 = '-'
Constant (const byte) print_char::ch#4 = ' '
Constant (const byte) memset::c#0 = ' '
Constant (const word) memset::num#0 = $3e8
Constant (const byte*) sin8u_table::sintab#0 = main::sintab
Constant (const word) sin8u_table::tabsize#0 = main::tabsize
Constant (const byte) sin8u_table::min#0 = $a
Constant (const byte) sin8u_table::max#0 = $ff
Constant (const word) div16u::dividend#0 = PI2_u4f12
Constant (const byte*) print_str::str#1 = sin8u_table::str
Constant (const byte*) print_str::str#2 = sin8u_table::str1
Constant (const byte*) print_str::str#3 = sin8u_table::str2
Constant (const byte*) print_str::str#4 = sin8u_table::str3
Constant (const byte*) print_str::str#5 = sin8u_table::str4
Constant (const word) sin8u_table::x#0 = 0
Constant (const word) sin8u_table::i#0 = 0
Constant (const byte*) print_str::str#6 = sin8u_table::str5
Constant (const byte*) print_str::str#7 = sin8u_table::str6
Constant (const byte*) print_str::str#8 = sin8u_table::str7
Constant (const byte*) print_str::str#9 = sin8u_table::str8
Successful SSA optimization Pass2ConstantIdentification
Constant (const word) divr16u::dividend#1 = div16u::dividend#0
Constant (const void*) memset::str#0 = (void*)print_line_cursor#0
Constant (const word) sin8u_table::$32 = (word)sin8u_table::min#0
Constant (const word) div16u::divisor#0 = sin8u_table::tabsize#0
Constant (const byte) print_uchar::b#3 = sin8u_table::min#0
Constant (const byte) print_uchar::b#4 = sin8u_table::max#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const word) divr16u::divisor#0 = div16u::divisor#0
Constant (const byte*) memset::$4 = (byte*)memset::str#0
Constant (const byte*) memset::dst#0 = (byte*)memset::str#0
Constant (const void*) memset::return#2 = memset::str#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [125] if((const word) memset::num#0<=(byte) 0) goto memset::@1
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [16] divr16u::i#1 ← ++ divr16u::i#2 to ++
Resolved ranged comparison value [18] if(divr16u::i#1!=rangelast(0,$f)) goto divr16u::@1 to (number) $10
Eliminating unused constant (const void*) memset::return#2
Successful SSA optimization PassNEliminateUnusedVars
Adding number conversion cast (unumber) $10 in if((byte) divr16u::i#1!=(number) $10) goto divr16u::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $10
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $10
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [95] (byte*) memset::end#0 ← (const byte*) memset::$4 + (const word) memset::num#0
Constant right-side identified [152] (byte) sin8u_table::amplitude#0 ← (const byte) sin8u_table::max#0 - (const byte) sin8u_table::min#0
Constant right-side identified [153] (word) sin8u_table::sum#0 ← (const word) sin8u_table::$32 + (const byte) sin8u_table::max#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) memset::end#0 = memset::$4+memset::num#0
Constant (const byte) sin8u_table::amplitude#0 = sin8u_table::max#0-sin8u_table::min#0
Constant (const word) sin8u_table::sum#0 = sin8u_table::$32+sin8u_table::max#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) print_uchar::b#5 = sin8u_table::amplitude#0
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [151] (word~) sin8u_table::$2 ← (const word) sin8u_table::sum#0 / (byte) 2
Constant right-side identified [176] (byte) mul8su::b#0 ← (const byte) sin8u_table::amplitude#0 + (byte) 1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const word) sin8u_table::$2 = sin8u_table::sum#0/2
Constant (const byte) mul8su::b#0 = sin8u_table::amplitude#0+1
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) mul8u::b#0 = mul8su::b#0
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [150] (word~) sin8u_table::$3 ← (const word) sin8u_table::$2 + (byte) 1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const word) sin8u_table::$3 = sin8u_table::$2+1
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) sin8u_table::mid#0 = (byte)sin8u_table::$3
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) print_uchar::b#6 = sin8u_table::mid#0
Successful SSA optimization Pass2ConstantIdentification
Inlining Noop Cast [37] (signed word) mul8su::return#0 ← (signed word)(word) mul8su::m#2 keeping mul8su::m#2
Inlining Noop Cast [79] (signed byte) sin8s::sinx#0 ← (signed byte)(byte) sin8s::usinx#4 keeping sin8s::usinx#4
Successful SSA optimization Pass2NopCastInlining
Inlining Noop Cast [173] (signed word) mul8su::return#2 ← (signed word)(word) mul8su::m#2 keeping mul8su::m#2
Successful SSA optimization Pass2NopCastInlining
Inlining constant with var siblings (const word) divr16u::quotient#0
Inlining constant with var siblings (const byte) divr16u::i#0
Inlining constant with var siblings (const word) divr16u::rem#3
Inlining constant with var siblings (const word) divr16u::dividend#1
Inlining constant with var siblings (const word) mul8u::res#0
Inlining constant with var siblings (const byte) mul8u::b#0
Inlining constant with var siblings (const byte) sin8s::isUpper#0
Inlining constant with var siblings (const byte) sin8s::isUpper#1
Inlining constant with var siblings (const byte) mulu8_sel::select#0
Inlining constant with var siblings (const byte) mulu8_sel::select#1
Inlining constant with var siblings (const byte) mulu8_sel::v2#2
Inlining constant with var siblings (const byte) mulu8_sel::select#2
Inlining constant with var siblings (const byte) mulu8_sel::select#3
Inlining constant with var siblings (const byte) mulu8_sel::select#4
Inlining constant with var siblings (const byte*) memset::dst#0
Inlining constant with var siblings (const byte*) print_str::str#1
Inlining constant with var siblings (const byte*) print_str::str#2
Inlining constant with var siblings (const byte*) print_str::str#3
Inlining constant with var siblings (const byte*) print_str::str#4
Inlining constant with var siblings (const byte*) print_str::str#5
Inlining constant with var siblings (const byte*) print_str::str#6
Inlining constant with var siblings (const byte*) print_str::str#7
Inlining constant with var siblings (const byte*) print_str::str#8
Inlining constant with var siblings (const byte*) print_str::str#9
Inlining constant with var siblings (const byte) print_uchar::b#3
Inlining constant with var siblings (const byte) print_uchar::b#4
Inlining constant with var siblings (const byte) print_uchar::b#5
Inlining constant with var siblings (const byte) print_uchar::b#6
Inlining constant with var siblings (const byte) print_char::ch#1
Inlining constant with var siblings (const byte) print_char::ch#2
Inlining constant with var siblings (const byte) print_char::ch#3
Inlining constant with var siblings (const byte) print_char::ch#4
Inlining constant with var siblings (const byte*) sin8u_table::sintab#0
Inlining constant with var siblings (const word) sin8u_table::x#0
Inlining constant with var siblings (const word) sin8u_table::i#0
Inlining constant with var siblings (const byte*) print_line_cursor#0
Constant inlined print_uchar::b#6 = (const byte) sin8u_table::mid#0
Constant inlined divr16u::rem#3 = (byte) 0
Constant inlined divr16u::i#0 = (byte) 0
Constant inlined print_uchar::b#3 = (const byte) sin8u_table::min#0
Constant inlined print_uchar::b#4 = (const byte) sin8u_table::max#0
Constant inlined print_uchar::b#5 = (const byte) sin8u_table::amplitude#0
Constant inlined sin8u_table::i#0 = (word) 0
Constant inlined sin8u_table::sintab#0 = (const byte*) main::sintab
Constant inlined sin8s::isUpper#1 = (byte) 1
Constant inlined sin8s::isUpper#0 = (byte) 0
Constant inlined divr16u::quotient#0 = (word) 0
Constant inlined memset::$4 = (byte*)(const void*) memset::str#0
Constant inlined div16u::divisor#0 = (const word) main::tabsize
Constant inlined sin8u_table::$2 = (const word) sin8u_table::sum#0/(byte) 2
Constant inlined sin8u_table::$3 = (const word) sin8u_table::sum#0/(byte) 2+(byte) 1
Constant inlined mulu8_sel::select#0 = (byte) 0
Constant inlined div16u::dividend#0 = (const nomodify word) PI2_u4f12
Constant inlined mulu8_sel::select#2 = (byte) 1
Constant inlined divr16u::divisor#0 = (const word) main::tabsize
Constant inlined mulu8_sel::select#1 = (byte) 1
Constant inlined mulu8_sel::select#4 = (byte) 0
Constant inlined mulu8_sel::select#3 = (byte) 0
Constant inlined sin8u_table::tabsize#0 = (const word) main::tabsize
Constant inlined sin8u_table::$32 = (word)(const byte) sin8u_table::min#0
Constant inlined print_line_cursor#0 = (byte*) 1024
Constant inlined divr16u::dividend#1 = (const nomodify word) PI2_u4f12
Constant inlined print_char::ch#3 = (byte) '-'
Constant inlined print_char::ch#2 = (byte) ' '
Constant inlined mulu8_sel::v2#2 = (const nomodify byte) sin8s::DIV_6
Constant inlined print_str::str#9 = (const byte*) sin8u_table::str8
Constant inlined mul8u::res#0 = (word) 0
Constant inlined print_char::ch#4 = (byte) ' '
Constant inlined mul8u::b#0 = (const byte) mul8su::b#0
Constant inlined print_char::ch#1 = (byte) '-'
Constant inlined print_str::str#4 = (const byte*) sin8u_table::str3
Constant inlined print_str::str#3 = (const byte*) sin8u_table::str2
Constant inlined print_str::str#2 = (const byte*) sin8u_table::str1
Constant inlined memset::dst#0 = (byte*)(const void*) memset::str#0
Constant inlined print_str::str#1 = (const byte*) sin8u_table::str
Constant inlined sin8u_table::x#0 = (word) 0
Constant inlined print_str::str#8 = (const byte*) sin8u_table::str7
Constant inlined print_str::str#7 = (const byte*) sin8u_table::str6
Constant inlined print_str::str#6 = (const byte*) sin8u_table::str5
Constant inlined print_str::str#5 = (const byte*) sin8u_table::str4
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting divr16u::@7(between divr16u::@3 and divr16u::@1)
Added new block during phi lifting divr16u::@8(between divr16u::@1 and divr16u::@2)
Added new block during phi lifting divr16u::@9(between divr16u::@2 and divr16u::@3)
Added new block during phi lifting mul8u::@6(between mul8u::@2 and mul8u::@4)
Added new block during phi lifting mul8su::@4(between mul8su::@3 and mul8su::@1)
Added new block during phi lifting sin8s::@14(between sin8s and sin8s::@1)
Fixing phi predecessor for sin8s::isUpper#10 to new block ( sin8s -> sin8s::@14 ) during phi lifting.
Added new block during phi lifting sin8s::@15(between sin8s::@1 and sin8s::@2)
Added new block during phi lifting sin8s::@16(between sin8s::@13 and sin8s::@3)
Added new block during phi lifting sin8s::@17(between sin8s::@3 and sin8s::@4)
Added new block during phi lifting print_ln::@3(between print_ln::@1 and print_ln::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @3
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of sin8u_table
Adding NOP phi() at start of sin8u_table::@13
Adding NOP phi() at start of sin8u_table::@14
Adding NOP phi() at start of print_ln::@2
Adding NOP phi() at start of print_uchar::@2
Adding NOP phi() at start of print_sint::@6
Adding NOP phi() at start of print_uint::@2
Adding NOP phi() at start of print_schar::@6
Adding NOP phi() at start of mul8u::@3
Adding NOP phi() at start of div16u
Adding NOP phi() at start of divr16u
Adding NOP phi() at start of divr16u::@6
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of print_cls::@1
Adding NOP phi() at start of memset
Adding NOP phi() at start of memset::@2
Adding NOP phi() at start of memset::@1
CALL GRAPH
Calls in [] to main:3 
Calls in [main] to print_cls:7 sin8u_table:9 
Calls in [sin8u_table] to div16u:13 print_str:16 print_uint:20 print_str:22 print_uchar:24 print_str:26 print_uchar:28 print_str:30 print_uchar:32 print_str:34 print_uchar:36 print_ln:38 sin8s:44 mul8su:48 print_str:55 print_uint:59 print_str:61 print_schar:63 print_str:65 print_sint:67 print_str:69 print_uchar:73 print_ln:75 
Calls in [print_uchar] to print_char:94 print_char:99 
Calls in [print_str] to print_char:115 
Calls in [print_sint] to print_char:121 print_uint:127 print_char:131 
Calls in [print_uint] to print_uchar:138 print_uchar:142 
Calls in [print_schar] to print_char:147 print_uchar:153 print_char:157 
Calls in [mul8su] to mul8u:162 
Calls in [sin8s] to mulu8_sel:206 mulu8_sel:213 mulu8_sel:218 mulu8_sel:226 mulu8_sel:233 
Calls in [mulu8_sel] to mul8u:256 
Calls in [div16u] to divr16u:263 
Calls in [print_cls] to memset:296 

Created 40 initial phi equivalence classes
Coalesced [18] print_uint::w#7 ← print_uint::w#1
Coalesced [19] print_char_cursor#128 ← print_char_cursor#2
Coalesced [21] print_char_cursor#121 ← print_char_cursor#19
Coalesced [23] print_char_cursor#135 ← print_char_cursor#2
Coalesced (already) [25] print_char_cursor#122 ← print_char_cursor#19
Coalesced (already) [27] print_char_cursor#136 ← print_char_cursor#2
Coalesced (already) [29] print_char_cursor#123 ← print_char_cursor#19
Coalesced (already) [31] print_char_cursor#132 ← print_char_cursor#2
Coalesced (already) [33] print_char_cursor#116 ← print_char_cursor#19
Coalesced (already) [35] print_char_cursor#133 ← print_char_cursor#2
Not coalescing [54] print_char_cursor#117 ← print_line_cursor#1
Coalesced [57] print_uint::w#6 ← print_uint::w#2
Coalesced (already) [58] print_char_cursor#127 ← print_char_cursor#2
Coalesced (already) [60] print_char_cursor#118 ← print_char_cursor#19
Coalesced (already) [64] print_char_cursor#119 ← print_char_cursor#19
Coalesced (already) [68] print_char_cursor#120 ← print_char_cursor#19
Coalesced [71] print_uchar::b#13 ← print_uchar::b#7
Coalesced (already) [72] print_char_cursor#134 ← print_char_cursor#2
Coalesced [74] print_line_cursor#50 ← print_line_cursor#1
Coalesced [78] sin8u_table::i#15 ← sin8u_table::i#1
Coalesced [79] sin8u_table::x#15 ← sin8u_table::x#1
Coalesced [80] sin8u_table::sintab#28 ← sin8u_table::sintab#1
Coalesced [82] print_line_cursor#51 ← print_line_cursor#23
Coalesced (already) [88] print_line_cursor#52 ← print_line_cursor#1
Coalesced [92] print_char::ch#9 ← print_char::ch#5
Coalesced [93] print_char_cursor#142 ← print_char_cursor#104
Coalesced [97] print_char::ch#10 ← print_char::ch#6
Coalesced [98] print_char_cursor#143 ← print_char_cursor#19
Coalesced [107] print_str::str#14 ← print_str::str#13
Coalesced (already) [108] print_char_cursor#124 ← print_char_cursor#110
Coalesced [113] print_char::ch#8 ← print_char::ch#0
Coalesced (already) [114] print_char_cursor#141 ← print_char_cursor#2
Coalesced [117] print_str::str#15 ← print_str::str#0
Coalesced (already) [118] print_char_cursor#125 ← print_char_cursor#19
Coalesced (already) [120] print_char_cursor#140 ← print_char_cursor#2
Coalesced [122] print_sint::w#9 ← print_sint::w#1
Coalesced [125] print_uint::w#5 ← print_uint::w#0
Coalesced (already) [126] print_char_cursor#126 ← print_char_cursor#19
Coalesced (already) [130] print_char_cursor#139 ← print_char_cursor#2
Coalesced [133] print_sint::w#8 ← print_sint::w#0
Coalesced [136] print_uchar::b#11 ← print_uchar::b#1
Coalesced (already) [137] print_char_cursor#130 ← print_char_cursor#103
Coalesced [140] print_uchar::b#12 ← print_uchar::b#2
Coalesced (already) [141] print_char_cursor#131 ← print_char_cursor#19
Coalesced (already) [146] print_char_cursor#138 ← print_char_cursor#2
Coalesced [148] print_schar::b#9 ← print_schar::b#1
Coalesced [151] print_uchar::b#10 ← print_uchar::b#0
Coalesced (already) [152] print_char_cursor#129 ← print_char_cursor#19
Coalesced (already) [156] print_char_cursor#137 ← print_char_cursor#2
Coalesced [159] print_schar::b#8 ← print_schar::b#0
Coalesced [161] mul8u::a#8 ← mul8u::a#1
Coalesced [169] mul8su::m#4 ← mul8su::m#1
Coalesced [172] mul8su::m#5 ← mul8su::m#0
Coalesced [175] mul8u::a#10 ← mul8u::a#6
Coalesced [176] mul8u::mb#6 ← mul8u::mb#0
Coalesced [184] mul8u::res#9 ← mul8u::res#1
Coalesced [188] mul8u::a#11 ← mul8u::a#0
Coalesced [189] mul8u::res#7 ← mul8u::res#6
Coalesced [190] mul8u::mb#7 ← mul8u::mb#1
Coalesced (already) [191] mul8u::res#8 ← mul8u::res#2
Coalesced [194] sin8s::x#9 ← sin8s::x#0
Coalesced [198] sin8s::x#11 ← sin8s::x#1
Coalesced [204] mulu8_sel::v1#9 ← mulu8_sel::v1#0
Coalesced [205] mulu8_sel::v2#8 ← mulu8_sel::v2#0
Coalesced [211] mulu8_sel::v1#10 ← mulu8_sel::v1#1
Coalesced [212] mulu8_sel::v2#9 ← mulu8_sel::v2#1
Coalesced [217] mulu8_sel::v1#6 ← mulu8_sel::v1#2
Coalesced [224] mulu8_sel::v1#7 ← mulu8_sel::v1#3
Coalesced [225] mulu8_sel::v2#6 ← mulu8_sel::v2#3
Coalesced [231] mulu8_sel::v1#8 ← mulu8_sel::v1#4
Coalesced [232] mulu8_sel::v2#7 ← mulu8_sel::v2#4
Coalesced [240] sin8s::usinx#9 ← sin8s::usinx#2
Coalesced [244] sin8s::return#6 ← sin8s::sinx#1
Coalesced [248] sin8s::usinx#8 ← sin8s::usinx#1
Coalesced [249] sin8s::x#10 ← sin8s::x#4
Coalesced [250] sin8s::x#8 ← sin8s::x#2
Coalesced [254] mul8u::b#3 ← mul8u::b#1
Coalesced [255] mul8u::a#9 ← mul8u::a#2
Coalesced [274] divr16u::rem#12 ← divr16u::rem#1
Coalesced [281] divr16u::rem#14 ← divr16u::rem#2
Coalesced [282] divr16u::return#6 ← divr16u::quotient#2
Coalesced [288] divr16u::rem#10 ← divr16u::rem#9
Coalesced [289] divr16u::dividend#8 ← divr16u::dividend#0
Coalesced [290] divr16u::quotient#9 ← divr16u::return#0
Coalesced [291] divr16u::i#7 ← divr16u::i#1
Coalesced [292] divr16u::rem#13 ← divr16u::rem#5
Coalesced [293] divr16u::return#5 ← divr16u::quotient#1
Coalesced [294] divr16u::rem#11 ← divr16u::rem#0
Coalesced [307] memset::dst#4 ← memset::dst#1
Coalesced down to 28 phi equivalence classes
Culled Empty Block (label) @1
Culled Empty Block (label) @3
Culled Empty Block (label) main::@2
Culled Empty Block (label) sin8u_table::@14
Culled Empty Block (label) print_ln::@2
Culled Empty Block (label) print_ln::@3
Culled Empty Block (label) print_uchar::@2
Culled Empty Block (label) print_sint::@5
Culled Empty Block (label) print_sint::@6
Culled Empty Block (label) print_uint::@2
Culled Empty Block (label) print_schar::@5
Culled Empty Block (label) print_schar::@6
Culled Empty Block (label) mul8su::@4
Culled Empty Block (label) mul8u::@3
Culled Empty Block (label) mul8u::@6
Culled Empty Block (label) sin8s::@16
Culled Empty Block (label) sin8s::@15
Culled Empty Block (label) sin8s::@14
Culled Empty Block (label) divr16u::@6
Culled Empty Block (label) divr16u::@7
Culled Empty Block (label) divr16u::@9
Culled Empty Block (label) divr16u::@8
Culled Empty Block (label) print_cls::@1
Culled Empty Block (label) memset::@2
Culled Empty Block (label) memset::@1
Renumbering block @2 to @1
Renumbering block mul8u::@4 to mul8u::@3
Renumbering block mul8u::@5 to mul8u::@4
Renumbering block sin8s::@17 to sin8s::@14
Renumbering block memset::@3 to memset::@1
Renumbering block memset::@4 to memset::@2
Renumbering block sin8u_table::@15 to sin8u_table::@14
Renumbering block sin8u_table::@16 to sin8u_table::@15
Renumbering block sin8u_table::@17 to sin8u_table::@16
Renumbering block sin8u_table::@18 to sin8u_table::@17
Renumbering block sin8u_table::@19 to sin8u_table::@18
Renumbering block sin8u_table::@20 to sin8u_table::@19
Renumbering block sin8u_table::@21 to sin8u_table::@20
Renumbering block sin8u_table::@22 to sin8u_table::@21
Renumbering block sin8u_table::@23 to sin8u_table::@22
Renumbering block sin8u_table::@24 to sin8u_table::@23
Renumbering block sin8u_table::@25 to sin8u_table::@24
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of sin8u_table
Adding NOP phi() at start of sin8u_table::@5
Adding NOP phi() at start of sin8u_table::@6
Adding NOP phi() at start of sin8u_table::@7
Adding NOP phi() at start of sin8u_table::@8
Adding NOP phi() at start of sin8u_table::@9
Adding NOP phi() at start of sin8u_table::@10
Adding NOP phi() at start of sin8u_table::@11
Adding NOP phi() at start of sin8u_table::@12
Adding NOP phi() at start of sin8u_table::@13
Adding NOP phi() at start of sin8u_table::@17
Adding NOP phi() at start of sin8u_table::@19
Adding NOP phi() at start of sin8u_table::@21
Adding NOP phi() at start of sin8u_table::@23
Adding NOP phi() at start of print_sint::@3
Adding NOP phi() at start of print_sint::@1
Adding NOP phi() at start of print_schar::@3
Adding NOP phi() at start of print_schar::@1
Adding NOP phi() at start of div16u
Adding NOP phi() at start of divr16u
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of memset

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  [5] call print_cls 
  to:main::@1
main::@1: scope:[main]  from main
  [6] phi()
  [7] call sin8u_table 
  to:main::@return
main::@return: scope:[main]  from main::@1
  [8] return 
  to:@return

(void()) sin8u_table((byte*) sin8u_table::sintab , (word) sin8u_table::tabsize , (byte) sin8u_table::min , (byte) sin8u_table::max)
sin8u_table: scope:[sin8u_table]  from main::@1
  [9] phi()
  [10] call div16u 
  [11] (word) div16u::return#2 ← (word) div16u::return#0
  to:sin8u_table::@3
sin8u_table::@3: scope:[sin8u_table]  from sin8u_table
  [12] (word) sin8u_table::step#0 ← (word) div16u::return#2
  [13] call print_str 
  to:sin8u_table::@4
sin8u_table::@4: scope:[sin8u_table]  from sin8u_table::@3
  [14] (word) print_uint::w#1 ← (word) sin8u_table::step#0
  [15] call print_uint 
  to:sin8u_table::@5
sin8u_table::@5: scope:[sin8u_table]  from sin8u_table::@4
  [16] phi()
  [17] call print_str 
  to:sin8u_table::@6
sin8u_table::@6: scope:[sin8u_table]  from sin8u_table::@5
  [18] phi()
  [19] call print_uchar 
  to:sin8u_table::@7
sin8u_table::@7: scope:[sin8u_table]  from sin8u_table::@6
  [20] phi()
  [21] call print_str 
  to:sin8u_table::@8
sin8u_table::@8: scope:[sin8u_table]  from sin8u_table::@7
  [22] phi()
  [23] call print_uchar 
  to:sin8u_table::@9
sin8u_table::@9: scope:[sin8u_table]  from sin8u_table::@8
  [24] phi()
  [25] call print_str 
  to:sin8u_table::@10
sin8u_table::@10: scope:[sin8u_table]  from sin8u_table::@9
  [26] phi()
  [27] call print_uchar 
  to:sin8u_table::@11
sin8u_table::@11: scope:[sin8u_table]  from sin8u_table::@10
  [28] phi()
  [29] call print_str 
  to:sin8u_table::@12
sin8u_table::@12: scope:[sin8u_table]  from sin8u_table::@11
  [30] phi()
  [31] call print_uchar 
  to:sin8u_table::@13
sin8u_table::@13: scope:[sin8u_table]  from sin8u_table::@12
  [32] phi()
  [33] call print_ln 
  to:sin8u_table::@1
sin8u_table::@1: scope:[sin8u_table]  from sin8u_table::@13 sin8u_table::@24
  [34] (byte*) sin8u_table::sintab#2 ← phi( sin8u_table::@13/(const byte*) main::sintab sin8u_table::@24/(byte*) sin8u_table::sintab#1 )
  [34] (word) sin8u_table::x#10 ← phi( sin8u_table::@13/(word) 0 sin8u_table::@24/(word) sin8u_table::x#1 )
  [34] (word) sin8u_table::i#10 ← phi( sin8u_table::@13/(word) 0 sin8u_table::@24/(word) sin8u_table::i#1 )
  [35] if((word) sin8u_table::i#10<(const word) main::tabsize) goto sin8u_table::@2
  to:sin8u_table::@return
sin8u_table::@return: scope:[sin8u_table]  from sin8u_table::@1
  [36] return 
  to:@return
sin8u_table::@2: scope:[sin8u_table]  from sin8u_table::@1
  [37] (word) sin8s::x#2 ← (word) sin8u_table::x#10
  [38] call sin8s 
  [39] (signed byte) sin8s::return#2 ← (signed byte) sin8s::return#0
  to:sin8u_table::@14
sin8u_table::@14: scope:[sin8u_table]  from sin8u_table::@2
  [40] (signed byte) sin8u_table::sinx#0 ← (signed byte) sin8s::return#2
  [41] (signed byte) mul8su::a#0 ← (signed byte) sin8u_table::sinx#0
  [42] call mul8su 
  to:sin8u_table::@15
sin8u_table::@15: scope:[sin8u_table]  from sin8u_table::@14
  [43] (signed word) sin8u_table::sinx_sc#0 ← (signed word)(word) mul8su::m#2
  [44] (byte~) sin8u_table::$20 ← > (signed word) sin8u_table::sinx_sc#0
  [45] (byte) sin8u_table::sinx_tr#0 ← (const byte) sin8u_table::mid#0 + (byte~) sin8u_table::$20
  [46] *((byte*) sin8u_table::sintab#2) ← (byte) sin8u_table::sinx_tr#0
  [47] (byte*) sin8u_table::sintab#1 ← ++ (byte*) sin8u_table::sintab#2
  [48] (byte*) print_char_cursor#117 ← (byte*) print_line_cursor#1
  [49] call print_str 
  to:sin8u_table::@16
sin8u_table::@16: scope:[sin8u_table]  from sin8u_table::@15
  [50] (word) print_uint::w#2 ← (word) sin8u_table::x#10
  [51] call print_uint 
  to:sin8u_table::@17
sin8u_table::@17: scope:[sin8u_table]  from sin8u_table::@16
  [52] phi()
  [53] call print_str 
  to:sin8u_table::@18
sin8u_table::@18: scope:[sin8u_table]  from sin8u_table::@17
  [54] (signed byte) print_schar::b#1 ← (signed byte) sin8u_table::sinx#0
  [55] call print_schar 
  to:sin8u_table::@19
sin8u_table::@19: scope:[sin8u_table]  from sin8u_table::@18
  [56] phi()
  [57] call print_str 
  to:sin8u_table::@20
sin8u_table::@20: scope:[sin8u_table]  from sin8u_table::@19
  [58] (signed word) print_sint::w#1 ← (signed word) sin8u_table::sinx_sc#0
  [59] call print_sint 
  to:sin8u_table::@21
sin8u_table::@21: scope:[sin8u_table]  from sin8u_table::@20
  [60] phi()
  [61] call print_str 
  to:sin8u_table::@22
sin8u_table::@22: scope:[sin8u_table]  from sin8u_table::@21
  [62] (byte) print_uchar::b#7 ← (byte) sin8u_table::sinx_tr#0
  [63] call print_uchar 
  to:sin8u_table::@23
sin8u_table::@23: scope:[sin8u_table]  from sin8u_table::@22
  [64] phi()
  [65] call print_ln 
  to:sin8u_table::@24
sin8u_table::@24: scope:[sin8u_table]  from sin8u_table::@23
  [66] (word) sin8u_table::x#1 ← (word) sin8u_table::x#10 + (word) sin8u_table::step#0
  [67] (word) sin8u_table::i#1 ← ++ (word) sin8u_table::i#10
  to:sin8u_table::@1

(void()) print_ln()
print_ln: scope:[print_ln]  from sin8u_table::@13 sin8u_table::@23
  [68] (byte*) print_line_cursor#23 ← phi( sin8u_table::@13/(byte*) 1024 sin8u_table::@23/(byte*) print_line_cursor#1 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [69] (byte*) print_line_cursor#12 ← phi( print_ln/(byte*) print_line_cursor#23 print_ln::@1/(byte*) print_line_cursor#1 )
  [70] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#12 + (byte) $28
  [71] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#19) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [72] return 
  to:@return

(void()) print_uchar((byte) print_uchar::b)
print_uchar: scope:[print_uchar]  from print_schar::@2 print_uint print_uint::@1 sin8u_table::@10 sin8u_table::@12 sin8u_table::@22 sin8u_table::@6 sin8u_table::@8
  [73] (byte*) print_char_cursor#104 ← phi( print_schar::@2/(byte*) print_char_cursor#19 print_uint/(byte*) print_char_cursor#103 print_uint::@1/(byte*) print_char_cursor#19 sin8u_table::@10/(byte*) print_char_cursor#2 sin8u_table::@12/(byte*) print_char_cursor#2 sin8u_table::@22/(byte*) print_char_cursor#2 sin8u_table::@6/(byte*) print_char_cursor#2 sin8u_table::@8/(byte*) print_char_cursor#2 )
  [73] (byte) print_uchar::b#8 ← phi( print_schar::@2/(byte) print_uchar::b#0 print_uint/(byte) print_uchar::b#1 print_uint::@1/(byte) print_uchar::b#2 sin8u_table::@10/(const byte) sin8u_table::amplitude#0 sin8u_table::@12/(const byte) sin8u_table::mid#0 sin8u_table::@22/(byte) print_uchar::b#7 sin8u_table::@6/(const byte) sin8u_table::min#0 sin8u_table::@8/(const byte) sin8u_table::max#0 )
  [74] (byte~) print_uchar::$0 ← (byte) print_uchar::b#8 >> (byte) 4
  [75] (byte) print_char::ch#5 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0)
  [76] call print_char 
  to:print_uchar::@1
print_uchar::@1: scope:[print_uchar]  from print_uchar
  [77] (byte~) print_uchar::$2 ← (byte) print_uchar::b#8 & (byte) $f
  [78] (byte) print_char::ch#6 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2)
  [79] call print_char 
  to:print_uchar::@return
print_uchar::@return: scope:[print_uchar]  from print_uchar::@1
  [80] return 
  to:@return

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from print_schar::@1 print_schar::@3 print_sint::@1 print_sint::@3 print_str::@2 print_uchar print_uchar::@1
  [81] (byte*) print_char_cursor#66 ← phi( print_schar::@1/(byte*) print_char_cursor#2 print_schar::@3/(byte*) print_char_cursor#2 print_sint::@1/(byte*) print_char_cursor#2 print_sint::@3/(byte*) print_char_cursor#2 print_str::@2/(byte*) print_char_cursor#2 print_uchar/(byte*) print_char_cursor#104 print_uchar::@1/(byte*) print_char_cursor#19 )
  [81] (byte) print_char::ch#7 ← phi( print_schar::@1/(byte) '-' print_schar::@3/(byte) ' ' print_sint::@1/(byte) '-' print_sint::@3/(byte) ' ' print_str::@2/(byte) print_char::ch#0 print_uchar/(byte) print_char::ch#5 print_uchar::@1/(byte) print_char::ch#6 )
  [82] *((byte*) print_char_cursor#66) ← (byte) print_char::ch#7
  [83] (byte*) print_char_cursor#19 ← ++ (byte*) print_char_cursor#66
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [84] return 
  to:@return

(void()) print_str((byte*) print_str::str)
print_str: scope:[print_str]  from sin8u_table::@11 sin8u_table::@15 sin8u_table::@17 sin8u_table::@19 sin8u_table::@21 sin8u_table::@3 sin8u_table::@5 sin8u_table::@7 sin8u_table::@9
  [85] (byte*) print_char_cursor#110 ← phi( sin8u_table::@11/(byte*) print_char_cursor#19 sin8u_table::@15/(byte*) print_char_cursor#117 sin8u_table::@17/(byte*) print_char_cursor#19 sin8u_table::@19/(byte*) print_char_cursor#19 sin8u_table::@21/(byte*) print_char_cursor#19 sin8u_table::@3/(byte*) 1024 sin8u_table::@5/(byte*) print_char_cursor#19 sin8u_table::@7/(byte*) print_char_cursor#19 sin8u_table::@9/(byte*) print_char_cursor#19 )
  [85] (byte*) print_str::str#13 ← phi( sin8u_table::@11/(const byte*) sin8u_table::str4 sin8u_table::@15/(const byte*) sin8u_table::str5 sin8u_table::@17/(const byte*) sin8u_table::str6 sin8u_table::@19/(const byte*) sin8u_table::str7 sin8u_table::@21/(const byte*) sin8u_table::str8 sin8u_table::@3/(const byte*) sin8u_table::str sin8u_table::@5/(const byte*) sin8u_table::str1 sin8u_table::@7/(const byte*) sin8u_table::str2 sin8u_table::@9/(const byte*) sin8u_table::str3 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@3
  [86] (byte*) print_char_cursor#2 ← phi( print_str/(byte*) print_char_cursor#110 print_str::@3/(byte*) print_char_cursor#19 )
  [86] (byte*) print_str::str#10 ← phi( print_str/(byte*) print_str::str#13 print_str::@3/(byte*) print_str::str#0 )
  [87] if((byte) 0!=*((byte*) print_str::str#10)) goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [88] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [89] (byte) print_char::ch#0 ← *((byte*) print_str::str#10)
  [90] call print_char 
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@2
  [91] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#10
  to:print_str::@1

(void()) print_sint((signed word) print_sint::w)
print_sint: scope:[print_sint]  from sin8u_table::@20
  [92] if((signed word) print_sint::w#1<(signed byte) 0) goto print_sint::@1
  to:print_sint::@3
print_sint::@3: scope:[print_sint]  from print_sint
  [93] phi()
  [94] call print_char 
  to:print_sint::@2
print_sint::@2: scope:[print_sint]  from print_sint::@3 print_sint::@4
  [95] (signed word) print_sint::w#4 ← phi( print_sint::@4/(signed word) print_sint::w#0 print_sint::@3/(signed word) print_sint::w#1 )
  [96] (word) print_uint::w#0 ← (word)(signed word) print_sint::w#4
  [97] call print_uint 
  to:print_sint::@return
print_sint::@return: scope:[print_sint]  from print_sint::@2
  [98] return 
  to:@return
print_sint::@1: scope:[print_sint]  from print_sint
  [99] phi()
  [100] call print_char 
  to:print_sint::@4
print_sint::@4: scope:[print_sint]  from print_sint::@1
  [101] (signed word) print_sint::w#0 ← - (signed word) print_sint::w#1
  to:print_sint::@2

(void()) print_uint((word) print_uint::w)
print_uint: scope:[print_uint]  from print_sint::@2 sin8u_table::@16 sin8u_table::@4
  [102] (byte*) print_char_cursor#103 ← phi( print_sint::@2/(byte*) print_char_cursor#19 sin8u_table::@16/(byte*) print_char_cursor#2 sin8u_table::@4/(byte*) print_char_cursor#2 )
  [102] (word) print_uint::w#3 ← phi( print_sint::@2/(word) print_uint::w#0 sin8u_table::@16/(word) print_uint::w#2 sin8u_table::@4/(word) print_uint::w#1 )
  [103] (byte) print_uchar::b#1 ← > (word) print_uint::w#3
  [104] call print_uchar 
  to:print_uint::@1
print_uint::@1: scope:[print_uint]  from print_uint
  [105] (byte) print_uchar::b#2 ← < (word) print_uint::w#3
  [106] call print_uchar 
  to:print_uint::@return
print_uint::@return: scope:[print_uint]  from print_uint::@1
  [107] return 
  to:@return

(void()) print_schar((signed byte) print_schar::b)
print_schar: scope:[print_schar]  from sin8u_table::@18
  [108] if((signed byte) print_schar::b#1<(signed byte) 0) goto print_schar::@1
  to:print_schar::@3
print_schar::@3: scope:[print_schar]  from print_schar
  [109] phi()
  [110] call print_char 
  to:print_schar::@2
print_schar::@2: scope:[print_schar]  from print_schar::@3 print_schar::@4
  [111] (signed byte) print_schar::b#4 ← phi( print_schar::@4/(signed byte) print_schar::b#0 print_schar::@3/(signed byte) print_schar::b#1 )
  [112] (byte) print_uchar::b#0 ← (byte)(signed byte) print_schar::b#4
  [113] call print_uchar 
  to:print_schar::@return
print_schar::@return: scope:[print_schar]  from print_schar::@2
  [114] return 
  to:@return
print_schar::@1: scope:[print_schar]  from print_schar
  [115] phi()
  [116] call print_char 
  to:print_schar::@4
print_schar::@4: scope:[print_schar]  from print_schar::@1
  [117] (signed byte) print_schar::b#0 ← - (signed byte) print_schar::b#1
  to:print_schar::@2

(signed word()) mul8su((signed byte) mul8su::a , (byte) mul8su::b)
mul8su: scope:[mul8su]  from sin8u_table::@14
  [118] (byte) mul8u::a#1 ← (byte)(signed byte) mul8su::a#0
  [119] call mul8u 
  [120] (word) mul8u::return#2 ← (word) mul8u::res#2
  to:mul8su::@3
mul8su::@3: scope:[mul8su]  from mul8su
  [121] (word) mul8su::m#0 ← (word) mul8u::return#2
  [122] if((signed byte) mul8su::a#0>=(signed byte) 0) goto mul8su::@1
  to:mul8su::@2
mul8su::@2: scope:[mul8su]  from mul8su::@3
  [123] (byte~) mul8su::$4 ← > (word) mul8su::m#0
  [124] (byte~) mul8su::$6 ← (byte~) mul8su::$4 - (const byte) mul8su::b#0
  [125] (word) mul8su::m#1 ← (word) mul8su::m#0 hi= (byte~) mul8su::$6
  to:mul8su::@1
mul8su::@1: scope:[mul8su]  from mul8su::@2 mul8su::@3
  [126] (word) mul8su::m#2 ← phi( mul8su::@2/(word) mul8su::m#1 mul8su::@3/(word) mul8su::m#0 )
  to:mul8su::@return
mul8su::@return: scope:[mul8su]  from mul8su::@1
  [127] return 
  to:@return

(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
mul8u: scope:[mul8u]  from mul8su mulu8_sel
  [128] (byte) mul8u::a#6 ← phi( mul8su/(byte) mul8u::a#1 mulu8_sel/(byte) mul8u::a#2 )
  [128] (byte) mul8u::b#2 ← phi( mul8su/(const byte) mul8su::b#0 mulu8_sel/(byte) mul8u::b#1 )
  [129] (word) mul8u::mb#0 ← (word)(byte) mul8u::b#2
  to:mul8u::@1
mul8u::@1: scope:[mul8u]  from mul8u mul8u::@3
  [130] (word) mul8u::mb#2 ← phi( mul8u/(word) mul8u::mb#0 mul8u::@3/(word) mul8u::mb#1 )
  [130] (word) mul8u::res#2 ← phi( mul8u/(word) 0 mul8u::@3/(word) mul8u::res#6 )
  [130] (byte) mul8u::a#3 ← phi( mul8u/(byte) mul8u::a#6 mul8u::@3/(byte) mul8u::a#0 )
  [131] if((byte) mul8u::a#3!=(byte) 0) goto mul8u::@2
  to:mul8u::@return
mul8u::@return: scope:[mul8u]  from mul8u::@1
  [132] return 
  to:@return
mul8u::@2: scope:[mul8u]  from mul8u::@1
  [133] (byte~) mul8u::$1 ← (byte) mul8u::a#3 & (byte) 1
  [134] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@3
  to:mul8u::@4
mul8u::@4: scope:[mul8u]  from mul8u::@2
  [135] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2
  to:mul8u::@3
mul8u::@3: scope:[mul8u]  from mul8u::@2 mul8u::@4
  [136] (word) mul8u::res#6 ← phi( mul8u::@2/(word) mul8u::res#2 mul8u::@4/(word) mul8u::res#1 )
  [137] (byte) mul8u::a#0 ← (byte) mul8u::a#3 >> (byte) 1
  [138] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte) 1
  to:mul8u::@1

(signed byte()) sin8s((word) sin8s::x)
sin8s: scope:[sin8s]  from sin8u_table::@2
  [139] if((word) sin8s::x#2<(const nomodify word) PI_u4f12) goto sin8s::@1
  to:sin8s::@5
sin8s::@5: scope:[sin8s]  from sin8s
  [140] (word) sin8s::x#0 ← (word) sin8s::x#2 - (const nomodify word) PI_u4f12
  to:sin8s::@1
sin8s::@1: scope:[sin8s]  from sin8s sin8s::@5
  [141] (byte) sin8s::isUpper#10 ← phi( sin8s/(byte) 0 sin8s::@5/(byte) 1 )
  [141] (word) sin8s::x#4 ← phi( sin8s/(word) sin8s::x#2 sin8s::@5/(word) sin8s::x#0 )
  [142] if((word) sin8s::x#4<(const nomodify word) PI_HALF_u4f12) goto sin8s::@2
  to:sin8s::@6
sin8s::@6: scope:[sin8s]  from sin8s::@1
  [143] (word) sin8s::x#1 ← (const nomodify word) PI_u4f12 - (word) sin8s::x#4
  to:sin8s::@2
sin8s::@2: scope:[sin8s]  from sin8s::@1 sin8s::@6
  [144] (word) sin8s::x#6 ← phi( sin8s::@1/(word) sin8s::x#4 sin8s::@6/(word) sin8s::x#1 )
  [145] (word~) sin8s::$4 ← (word) sin8s::x#6 << (byte) 3
  [146] (byte) sin8s::x1#0 ← > (word~) sin8s::$4
  [147] (byte) mulu8_sel::v1#0 ← (byte) sin8s::x1#0
  [148] (byte) mulu8_sel::v2#0 ← (byte) sin8s::x1#0
  [149] call mulu8_sel 
  [150] (byte) mulu8_sel::return#0 ← (byte) mulu8_sel::return#12
  to:sin8s::@9
sin8s::@9: scope:[sin8s]  from sin8s::@2
  [151] (byte) sin8s::x2#0 ← (byte) mulu8_sel::return#0
  [152] (byte) mulu8_sel::v1#1 ← (byte) sin8s::x2#0
  [153] (byte) mulu8_sel::v2#1 ← (byte) sin8s::x1#0
  [154] call mulu8_sel 
  [155] (byte) mulu8_sel::return#1 ← (byte) mulu8_sel::return#12
  to:sin8s::@10
sin8s::@10: scope:[sin8s]  from sin8s::@9
  [156] (byte) sin8s::x3#0 ← (byte) mulu8_sel::return#1
  [157] (byte) mulu8_sel::v1#2 ← (byte) sin8s::x3#0
  [158] call mulu8_sel 
  [159] (byte) mulu8_sel::return#2 ← (byte) mulu8_sel::return#12
  to:sin8s::@11
sin8s::@11: scope:[sin8s]  from sin8s::@10
  [160] (byte) sin8s::x3_6#0 ← (byte) mulu8_sel::return#2
  [161] (byte) sin8s::usinx#0 ← (byte) sin8s::x1#0 - (byte) sin8s::x3_6#0
  [162] (byte) mulu8_sel::v1#3 ← (byte) sin8s::x3#0
  [163] (byte) mulu8_sel::v2#3 ← (byte) sin8s::x1#0
  [164] call mulu8_sel 
  [165] (byte) mulu8_sel::return#10 ← (byte) mulu8_sel::return#12
  to:sin8s::@12
sin8s::@12: scope:[sin8s]  from sin8s::@11
  [166] (byte) sin8s::x4#0 ← (byte) mulu8_sel::return#10
  [167] (byte) mulu8_sel::v1#4 ← (byte) sin8s::x4#0
  [168] (byte) mulu8_sel::v2#4 ← (byte) sin8s::x1#0
  [169] call mulu8_sel 
  [170] (byte) mulu8_sel::return#11 ← (byte) mulu8_sel::return#12
  to:sin8s::@13
sin8s::@13: scope:[sin8s]  from sin8s::@12
  [171] (byte) sin8s::x5#0 ← (byte) mulu8_sel::return#11
  [172] (byte) sin8s::x5_128#0 ← (byte) sin8s::x5#0 >> (byte) 4
  [173] (byte) sin8s::usinx#1 ← (byte) sin8s::usinx#0 + (byte) sin8s::x5_128#0
  [174] if((byte) sin8s::usinx#1<(byte) $80) goto sin8s::@3
  to:sin8s::@7
sin8s::@7: scope:[sin8s]  from sin8s::@13
  [175] (byte) sin8s::usinx#2 ← -- (byte) sin8s::usinx#1
  to:sin8s::@3
sin8s::@3: scope:[sin8s]  from sin8s::@13 sin8s::@7
  [176] (byte) sin8s::usinx#4 ← phi( sin8s::@13/(byte) sin8s::usinx#1 sin8s::@7/(byte) sin8s::usinx#2 )
  [177] if((byte) sin8s::isUpper#10==(byte) 0) goto sin8s::@14
  to:sin8s::@8
sin8s::@8: scope:[sin8s]  from sin8s::@3
  [178] (signed byte) sin8s::sinx#1 ← - (signed byte)(byte) sin8s::usinx#4
  to:sin8s::@4
sin8s::@4: scope:[sin8s]  from sin8s::@14 sin8s::@8
  [179] (signed byte) sin8s::return#0 ← phi( sin8s::@14/(signed byte) sin8s::return#5 sin8s::@8/(signed byte) sin8s::sinx#1 )
  to:sin8s::@return
sin8s::@return: scope:[sin8s]  from sin8s::@4
  [180] return 
  to:@return
sin8s::@14: scope:[sin8s]  from sin8s::@3
  [181] (signed byte) sin8s::return#5 ← (signed byte)(byte) sin8s::usinx#4
  to:sin8s::@4

(byte()) mulu8_sel((byte) mulu8_sel::v1 , (byte) mulu8_sel::v2 , (byte) mulu8_sel::select)
mulu8_sel: scope:[mulu8_sel]  from sin8s::@10 sin8s::@11 sin8s::@12 sin8s::@2 sin8s::@9
  [182] (byte) mulu8_sel::select#5 ← phi( sin8s::@10/(byte) 1 sin8s::@11/(byte) 0 sin8s::@12/(byte) 0 sin8s::@2/(byte) 0 sin8s::@9/(byte) 1 )
  [182] (byte) mulu8_sel::v2#5 ← phi( sin8s::@10/(const nomodify byte) sin8s::DIV_6 sin8s::@11/(byte) mulu8_sel::v2#3 sin8s::@12/(byte) mulu8_sel::v2#4 sin8s::@2/(byte) mulu8_sel::v2#0 sin8s::@9/(byte) mulu8_sel::v2#1 )
  [182] (byte) mulu8_sel::v1#5 ← phi( sin8s::@10/(byte) mulu8_sel::v1#2 sin8s::@11/(byte) mulu8_sel::v1#3 sin8s::@12/(byte) mulu8_sel::v1#4 sin8s::@2/(byte) mulu8_sel::v1#0 sin8s::@9/(byte) mulu8_sel::v1#1 )
  [183] (byte) mul8u::a#2 ← (byte) mulu8_sel::v1#5
  [184] (byte) mul8u::b#1 ← (byte) mulu8_sel::v2#5
  [185] call mul8u 
  [186] (word) mul8u::return#3 ← (word) mul8u::res#2
  to:mulu8_sel::@1
mulu8_sel::@1: scope:[mulu8_sel]  from mulu8_sel
  [187] (word~) mulu8_sel::$0 ← (word) mul8u::return#3
  [188] (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5
  [189] (byte) mulu8_sel::return#12 ← > (word~) mulu8_sel::$1
  to:mulu8_sel::@return
mulu8_sel::@return: scope:[mulu8_sel]  from mulu8_sel::@1
  [190] return 
  to:@return

(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
div16u: scope:[div16u]  from sin8u_table
  [191] phi()
  [192] call divr16u 
  [193] (word) divr16u::return#2 ← (word) divr16u::return#0
  to:div16u::@1
div16u::@1: scope:[div16u]  from div16u
  [194] (word) div16u::return#0 ← (word) divr16u::return#2
  to:div16u::@return
div16u::@return: scope:[div16u]  from div16u::@1
  [195] return 
  to:@return

(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
divr16u: scope:[divr16u]  from div16u
  [196] phi()
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  [197] (byte) divr16u::i#2 ← phi( divr16u/(byte) 0 divr16u::@3/(byte) divr16u::i#1 )
  [197] (word) divr16u::quotient#3 ← phi( divr16u/(word) 0 divr16u::@3/(word) divr16u::return#0 )
  [197] (word) divr16u::dividend#2 ← phi( divr16u/(const nomodify word) PI2_u4f12 divr16u::@3/(word) divr16u::dividend#0 )
  [197] (word) divr16u::rem#4 ← phi( divr16u/(byte) 0 divr16u::@3/(word) divr16u::rem#9 )
  [198] (word) divr16u::rem#0 ← (word) divr16u::rem#4 << (byte) 1
  [199] (byte~) divr16u::$1 ← > (word) divr16u::dividend#2
  [200] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80
  [201] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2
  to:divr16u::@4
divr16u::@4: scope:[divr16u]  from divr16u::@1
  [202] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1
  to:divr16u::@2
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  [203] (word) divr16u::rem#5 ← phi( divr16u::@1/(word) divr16u::rem#0 divr16u::@4/(word) divr16u::rem#1 )
  [204] (word) divr16u::dividend#0 ← (word) divr16u::dividend#2 << (byte) 1
  [205] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1
  [206] if((word) divr16u::rem#5<(const word) main::tabsize) goto divr16u::@3
  to:divr16u::@5
divr16u::@5: scope:[divr16u]  from divr16u::@2
  [207] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1
  [208] (word) divr16u::rem#2 ← (word) divr16u::rem#5 - (const word) main::tabsize
  to:divr16u::@3
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  [209] (word) divr16u::return#0 ← phi( divr16u::@2/(word) divr16u::quotient#1 divr16u::@5/(word) divr16u::quotient#2 )
  [209] (word) divr16u::rem#9 ← phi( divr16u::@2/(word) divr16u::rem#5 divr16u::@5/(word) divr16u::rem#2 )
  [210] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2
  [211] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@3
  [212] return 
  to:@return

(void()) print_cls()
print_cls: scope:[print_cls]  from main
  [213] phi()
  [214] call memset 
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls
  [215] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  [216] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [217] (byte*) memset::dst#2 ← phi( memset/(byte*)(const void*) memset::str#0 memset::@2/(byte*) memset::dst#1 )
  [218] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [219] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [220] *((byte*) memset::dst#2) ← (const byte) memset::c#0
  [221] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@1


VARIABLE REGISTER WEIGHTS
(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
(word) div16u::dividend
(word) div16u::divisor
(word) div16u::return
(word) div16u::return#0 367.33333333333337
(word) div16u::return#2 202.0
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(byte~) divr16u::$1 200002.0
(byte~) divr16u::$2 200002.0
(word) divr16u::dividend
(word) divr16u::dividend#0 25000.25
(word) divr16u::dividend#2 42857.57142857143
(word) divr16u::divisor
(byte) divr16u::i
(byte) divr16u::i#1 150001.5
(byte) divr16u::i#2 15384.76923076923
(word) divr16u::quotient
(word) divr16u::quotient#1 150001.5
(word) divr16u::quotient#2 100001.0
(word) divr16u::quotient#3 25000.25
(word) divr16u::rem
(word) divr16u::rem#0 75000.75
(word) divr16u::rem#1 200002.0
(word) divr16u::rem#2 200002.0
(word) divr16u::rem#4 200002.0
(word) divr16u::rem#5 100001.0
(word) divr16u::rem#9 100001.0
(word) divr16u::return
(word) divr16u::return#0 60200.8
(word) divr16u::return#2 2002.0
(void()) main()
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(byte) memset::c
(byte*) memset::dst
(byte*) memset::dst#1 20002.0
(byte*) memset::dst#2 13334.666666666666
(byte*) memset::end
(word) memset::num
(void*) memset::return
(void*) memset::str
(signed word()) mul8su((signed byte) mul8su::a , (byte) mul8su::b)
(byte~) mul8su::$4 20002.0
(byte~) mul8su::$6 20002.0
(signed byte) mul8su::a
(signed byte) mul8su::a#0 2200.4
(byte) mul8su::b
(word) mul8su::m
(word) mul8su::m#0 10001.0
(word) mul8su::m#1 20002.0
(word) mul8su::m#2 6667.333333333333
(signed word) mul8su::return
(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
(byte~) mul8u::$1 2.00000002E8
(byte) mul8u::a
(byte) mul8u::a#0 1.00000001E8
(byte) mul8u::a#1 20002.0
(byte) mul8u::a#2 100001.0
(byte) mul8u::a#3 6.683333416666667E7
(byte) mul8u::a#6 555001.5
(byte) mul8u::b
(byte) mul8u::b#1 200002.0
(byte) mul8u::b#2 100001.0
(word) mul8u::mb
(word) mul8u::mb#0 2000002.0
(word) mul8u::mb#1 2.00000002E8
(word) mul8u::mb#2 4.300000057142857E7
(word) mul8u::res
(word) mul8u::res#1 2.00000002E8
(word) mul8u::res#2 4.287285785714286E7
(word) mul8u::res#6 1.00000001E8
(word) mul8u::return
(word) mul8u::return#2 20002.0
(word) mul8u::return#3 200002.0
(byte()) mulu8_sel((byte) mulu8_sel::v1 , (byte) mulu8_sel::v2 , (byte) mulu8_sel::select)
(word~) mulu8_sel::$0 200002.0
(word~) mulu8_sel::$1 200002.0
(byte) mulu8_sel::return
(byte) mulu8_sel::return#0 20002.0
(byte) mulu8_sel::return#1 20002.0
(byte) mulu8_sel::return#10 20002.0
(byte) mulu8_sel::return#11 20002.0
(byte) mulu8_sel::return#12 21429.428571428572
(byte) mulu8_sel::return#2 20002.0
(byte) mulu8_sel::select
(byte) mulu8_sel::select#5 16666.833333333332
(byte) mulu8_sel::v1
(byte) mulu8_sel::v1#0 10001.0
(byte) mulu8_sel::v1#1 10001.0
(byte) mulu8_sel::v1#2 20002.0
(byte) mulu8_sel::v1#3 10001.0
(byte) mulu8_sel::v1#4 10001.0
(byte) mulu8_sel::v1#5 150006.0
(byte) mulu8_sel::v2
(byte) mulu8_sel::v2#0 20002.0
(byte) mulu8_sel::v2#1 20002.0
(byte) mulu8_sel::v2#3 20002.0
(byte) mulu8_sel::v2#4 20002.0
(byte) mulu8_sel::v2#5 70002.5
(void()) print_char((byte) print_char::ch)
(byte) print_char::ch
(byte) print_char::ch#0 2000002.0
(byte) print_char::ch#5 2000002.0
(byte) print_char::ch#6 2000002.0
(byte) print_char::ch#7 1.3000004E7
(byte*) print_char_cursor
(byte*) print_char_cursor#103 55552.0
(byte*) print_char_cursor#104 403803.00000000006
(byte*) print_char_cursor#110 14409.0
(byte*) print_char_cursor#117 2002.0
(byte*) print_char_cursor#19 267824.77551020414
(byte*) print_char_cursor#2 73304.07142857143
(byte*) print_char_cursor#66 1.15200045E7
(void()) print_cls()
(byte*) print_line_cursor
(byte*) print_line_cursor#1 81135.27027027027
(byte*) print_line_cursor#12 2010003.0
(byte*) print_line_cursor#23 11002.0
(void()) print_ln()
(void()) print_schar((signed byte) print_schar::b)
(signed byte) print_schar::b
(signed byte) print_schar::b#0 20002.0
(signed byte) print_schar::b#1 5167.333333333333
(signed byte) print_schar::b#4 20002.0
(byte*) print_screen
(void()) print_sint((signed word) print_sint::w)
(signed word) print_sint::w
(signed word) print_sint::w#0 20002.0
(signed word) print_sint::w#1 5167.333333333333
(signed word) print_sint::w#4 20002.0
(void()) print_str((byte*) print_str::str)
(byte*) print_str::str
(byte*) print_str::str#0 2000002.0
(byte*) print_str::str#10 1002501.25
(byte*) print_str::str#13 10001.0
(void()) print_uchar((byte) print_uchar::b)
(byte~) print_uchar::$0 2000002.0
(byte~) print_uchar::$2 2000002.0
(byte) print_uchar::b
(byte) print_uchar::b#0 20002.0
(byte) print_uchar::b#1 200002.0
(byte) print_uchar::b#2 200002.0
(byte) print_uchar::b#7 2002.0
(byte) print_uchar::b#8 552751.5
(void()) print_uint((word) print_uint::w)
(word) print_uint::w
(word) print_uint::w#0 20002.0
(word) print_uint::w#1 202.0
(word) print_uint::w#2 2002.0
(word) print_uint::w#3 70368.33333333333
(signed byte()) sin8s((word) sin8s::x)
(word~) sin8s::$4 20002.0
(byte) sin8s::isUpper
(byte) sin8s::isUpper#10 277.80555555555554
(signed byte) sin8s::return
(signed byte) sin8s::return#0 7001.0
(signed byte) sin8s::return#2 2002.0
(signed byte) sin8s::return#5 20002.0
(signed byte) sin8s::sinx
(signed byte) sin8s::sinx#1 20002.0
(byte) sin8s::usinx
(byte) sin8s::usinx#0 1666.8333333333333
(byte) sin8s::usinx#1 20002.0
(byte) sin8s::usinx#2 20002.0
(byte) sin8s::usinx#4 10001.0
(word) sin8s::x
(word) sin8s::x#0 20002.0
(word) sin8s::x#1 20002.0
(word) sin8s::x#2 15502.0
(word) sin8s::x#4 25002.5
(word) sin8s::x#6 30003.0
(byte) sin8s::x1
(byte) sin8s::x1#0 3182.1363636363635
(byte) sin8s::x2
(byte) sin8s::x2#0 20002.0
(byte) sin8s::x3
(byte) sin8s::x3#0 5000.5
(byte) sin8s::x3_6
(byte) sin8s::x3_6#0 20002.0
(byte) sin8s::x4
(byte) sin8s::x4#0 20002.0
(byte) sin8s::x5
(byte) sin8s::x5#0 20002.0
(byte) sin8s::x5_128
(byte) sin8s::x5_128#0 20002.0
(void()) sin8u_table((byte*) sin8u_table::sintab , (word) sin8u_table::tabsize , (byte) sin8u_table::min , (byte) sin8u_table::max)
(byte~) sin8u_table::$20 2002.0
(byte) sin8u_table::amplitude
(word) sin8u_table::i
(word) sin8u_table::i#1 2002.0
(word) sin8u_table::i#10 93.84375
(byte) sin8u_table::max
(byte) sin8u_table::mid
(byte) sin8u_table::min
(byte*) sin8u_table::sintab
(byte*) sin8u_table::sintab#1 95.33333333333333
(byte*) sin8u_table::sintab#2 250.25
(signed byte) sin8u_table::sinx
(signed byte) sin8u_table::sinx#0 214.5
(signed word) sin8u_table::sinx_sc
(signed word) sin8u_table::sinx_sc#0 200.2
(byte) sin8u_table::sinx_tr
(byte) sin8u_table::sinx_tr#0 176.64705882352942
(word) sin8u_table::step
(word) sin8u_table::step#0 21.87272727272727
(word) sin8u_table::sum
(word) sin8u_table::tabsize
(word) sin8u_table::x
(word) sin8u_table::x#1 1001.0
(word) sin8u_table::x#10 129.16129032258064

Initial phi equivalence classes
[ sin8u_table::i#10 sin8u_table::i#1 ]
[ sin8u_table::x#10 sin8u_table::x#1 ]
[ sin8u_table::sintab#2 sin8u_table::sintab#1 ]
[ print_line_cursor#12 print_line_cursor#23 print_line_cursor#1 ]
[ print_uchar::b#8 print_uchar::b#0 print_uchar::b#1 print_uchar::b#2 print_uchar::b#7 ]
[ print_char::ch#7 print_char::ch#0 print_char::ch#5 print_char::ch#6 ]
[ print_char_cursor#110 print_char_cursor#66 print_char_cursor#104 print_char_cursor#19 print_char_cursor#103 print_char_cursor#2 print_char_cursor#117 ]
[ print_str::str#10 print_str::str#13 print_str::str#0 ]
[ print_sint::w#4 print_sint::w#0 print_sint::w#1 ]
[ print_uint::w#3 print_uint::w#0 print_uint::w#2 print_uint::w#1 ]
[ print_schar::b#4 print_schar::b#0 print_schar::b#1 ]
[ mul8su::m#2 mul8su::m#1 mul8su::m#0 ]
[ mul8u::b#2 mul8u::b#1 ]
[ mul8u::a#3 mul8u::a#6 mul8u::a#1 mul8u::a#2 mul8u::a#0 ]
[ mul8u::res#2 mul8u::res#6 mul8u::res#1 ]
[ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]
[ sin8s::isUpper#10 ]
[ sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 ]
[ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ]
[ sin8s::return#0 sin8s::return#5 sin8s::sinx#1 ]
[ mulu8_sel::v1#5 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 mulu8_sel::v1#1 ]
[ mulu8_sel::v2#5 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 mulu8_sel::v2#1 ]
[ mulu8_sel::select#5 ]
[ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
[ divr16u::dividend#2 divr16u::dividend#0 ]
[ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
[ divr16u::i#2 divr16u::i#1 ]
[ memset::dst#2 memset::dst#1 ]
Added variable div16u::return#2 to live range equivalence class [ div16u::return#2 ]
Added variable sin8u_table::step#0 to live range equivalence class [ sin8u_table::step#0 ]
Added variable sin8s::return#2 to live range equivalence class [ sin8s::return#2 ]
Added variable sin8u_table::sinx#0 to live range equivalence class [ sin8u_table::sinx#0 ]
Added variable mul8su::a#0 to live range equivalence class [ mul8su::a#0 ]
Added variable sin8u_table::sinx_sc#0 to live range equivalence class [ sin8u_table::sinx_sc#0 ]
Added variable sin8u_table::$20 to live range equivalence class [ sin8u_table::$20 ]
Added variable sin8u_table::sinx_tr#0 to live range equivalence class [ sin8u_table::sinx_tr#0 ]
Added variable print_uchar::$0 to live range equivalence class [ print_uchar::$0 ]
Added variable print_uchar::$2 to live range equivalence class [ print_uchar::$2 ]
Added variable mul8u::return#2 to live range equivalence class [ mul8u::return#2 ]
Added variable mul8su::$4 to live range equivalence class [ mul8su::$4 ]
Added variable mul8su::$6 to live range equivalence class [ mul8su::$6 ]
Added variable mul8u::$1 to live range equivalence class [ mul8u::$1 ]
Added variable sin8s::$4 to live range equivalence class [ sin8s::$4 ]
Added variable sin8s::x1#0 to live range equivalence class [ sin8s::x1#0 ]
Added variable mulu8_sel::return#0 to live range equivalence class [ mulu8_sel::return#0 ]
Added variable sin8s::x2#0 to live range equivalence class [ sin8s::x2#0 ]
Added variable mulu8_sel::return#1 to live range equivalence class [ mulu8_sel::return#1 ]
Added variable sin8s::x3#0 to live range equivalence class [ sin8s::x3#0 ]
Added variable mulu8_sel::return#2 to live range equivalence class [ mulu8_sel::return#2 ]
Added variable sin8s::x3_6#0 to live range equivalence class [ sin8s::x3_6#0 ]
Added variable sin8s::usinx#0 to live range equivalence class [ sin8s::usinx#0 ]
Added variable mulu8_sel::return#10 to live range equivalence class [ mulu8_sel::return#10 ]
Added variable sin8s::x4#0 to live range equivalence class [ sin8s::x4#0 ]
Added variable mulu8_sel::return#11 to live range equivalence class [ mulu8_sel::return#11 ]
Added variable sin8s::x5#0 to live range equivalence class [ sin8s::x5#0 ]
Added variable sin8s::x5_128#0 to live range equivalence class [ sin8s::x5_128#0 ]
Added variable mul8u::return#3 to live range equivalence class [ mul8u::return#3 ]
Added variable mulu8_sel::$0 to live range equivalence class [ mulu8_sel::$0 ]
Added variable mulu8_sel::$1 to live range equivalence class [ mulu8_sel::$1 ]
Added variable mulu8_sel::return#12 to live range equivalence class [ mulu8_sel::return#12 ]
Added variable divr16u::return#2 to live range equivalence class [ divr16u::return#2 ]
Added variable div16u::return#0 to live range equivalence class [ div16u::return#0 ]
Added variable divr16u::$1 to live range equivalence class [ divr16u::$1 ]
Added variable divr16u::$2 to live range equivalence class [ divr16u::$2 ]
Complete equivalence classes
[ sin8u_table::i#10 sin8u_table::i#1 ]
[ sin8u_table::x#10 sin8u_table::x#1 ]
[ sin8u_table::sintab#2 sin8u_table::sintab#1 ]
[ print_line_cursor#12 print_line_cursor#23 print_line_cursor#1 ]
[ print_uchar::b#8 print_uchar::b#0 print_uchar::b#1 print_uchar::b#2 print_uchar::b#7 ]
[ print_char::ch#7 print_char::ch#0 print_char::ch#5 print_char::ch#6 ]
[ print_char_cursor#110 print_char_cursor#66 print_char_cursor#104 print_char_cursor#19 print_char_cursor#103 print_char_cursor#2 print_char_cursor#117 ]
[ print_str::str#10 print_str::str#13 print_str::str#0 ]
[ print_sint::w#4 print_sint::w#0 print_sint::w#1 ]
[ print_uint::w#3 print_uint::w#0 print_uint::w#2 print_uint::w#1 ]
[ print_schar::b#4 print_schar::b#0 print_schar::b#1 ]
[ mul8su::m#2 mul8su::m#1 mul8su::m#0 ]
[ mul8u::b#2 mul8u::b#1 ]
[ mul8u::a#3 mul8u::a#6 mul8u::a#1 mul8u::a#2 mul8u::a#0 ]
[ mul8u::res#2 mul8u::res#6 mul8u::res#1 ]
[ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]
[ sin8s::isUpper#10 ]
[ sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 ]
[ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ]
[ sin8s::return#0 sin8s::return#5 sin8s::sinx#1 ]
[ mulu8_sel::v1#5 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 mulu8_sel::v1#1 ]
[ mulu8_sel::v2#5 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 mulu8_sel::v2#1 ]
[ mulu8_sel::select#5 ]
[ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
[ divr16u::dividend#2 divr16u::dividend#0 ]
[ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
[ divr16u::i#2 divr16u::i#1 ]
[ memset::dst#2 memset::dst#1 ]
[ div16u::return#2 ]
[ sin8u_table::step#0 ]
[ sin8s::return#2 ]
[ sin8u_table::sinx#0 ]
[ mul8su::a#0 ]
[ sin8u_table::sinx_sc#0 ]
[ sin8u_table::$20 ]
[ sin8u_table::sinx_tr#0 ]
[ print_uchar::$0 ]
[ print_uchar::$2 ]
[ mul8u::return#2 ]
[ mul8su::$4 ]
[ mul8su::$6 ]
[ mul8u::$1 ]
[ sin8s::$4 ]
[ sin8s::x1#0 ]
[ mulu8_sel::return#0 ]
[ sin8s::x2#0 ]
[ mulu8_sel::return#1 ]
[ sin8s::x3#0 ]
[ mulu8_sel::return#2 ]
[ sin8s::x3_6#0 ]
[ sin8s::usinx#0 ]
[ mulu8_sel::return#10 ]
[ sin8s::x4#0 ]
[ mulu8_sel::return#11 ]
[ sin8s::x5#0 ]
[ sin8s::x5_128#0 ]
[ mul8u::return#3 ]
[ mulu8_sel::$0 ]
[ mulu8_sel::$1 ]
[ mulu8_sel::return#12 ]
[ divr16u::return#2 ]
[ div16u::return#0 ]
[ divr16u::$1 ]
[ divr16u::$2 ]
Allocated zp[2]:2 [ sin8u_table::i#10 sin8u_table::i#1 ]
Allocated zp[2]:4 [ sin8u_table::x#10 sin8u_table::x#1 ]
Allocated zp[2]:6 [ sin8u_table::sintab#2 sin8u_table::sintab#1 ]
Allocated zp[2]:8 [ print_line_cursor#12 print_line_cursor#23 print_line_cursor#1 ]
Allocated zp[1]:10 [ print_uchar::b#8 print_uchar::b#0 print_uchar::b#1 print_uchar::b#2 print_uchar::b#7 ]
Allocated zp[1]:11 [ print_char::ch#7 print_char::ch#0 print_char::ch#5 print_char::ch#6 ]
Allocated zp[2]:12 [ print_char_cursor#110 print_char_cursor#66 print_char_cursor#104 print_char_cursor#19 print_char_cursor#103 print_char_cursor#2 print_char_cursor#117 ]
Allocated zp[2]:14 [ print_str::str#10 print_str::str#13 print_str::str#0 ]
Allocated zp[2]:16 [ print_sint::w#4 print_sint::w#0 print_sint::w#1 ]
Allocated zp[2]:18 [ print_uint::w#3 print_uint::w#0 print_uint::w#2 print_uint::w#1 ]
Allocated zp[1]:20 [ print_schar::b#4 print_schar::b#0 print_schar::b#1 ]
Allocated zp[2]:21 [ mul8su::m#2 mul8su::m#1 mul8su::m#0 ]
Allocated zp[1]:23 [ mul8u::b#2 mul8u::b#1 ]
Allocated zp[1]:24 [ mul8u::a#3 mul8u::a#6 mul8u::a#1 mul8u::a#2 mul8u::a#0 ]
Allocated zp[2]:25 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ]
Allocated zp[2]:27 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]
Allocated zp[1]:29 [ sin8s::isUpper#10 ]
Allocated zp[2]:30 [ sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 ]
Allocated zp[1]:32 [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ]
Allocated zp[1]:33 [ sin8s::return#0 sin8s::return#5 sin8s::sinx#1 ]
Allocated zp[1]:34 [ mulu8_sel::v1#5 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 mulu8_sel::v1#1 ]
Allocated zp[1]:35 [ mulu8_sel::v2#5 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 mulu8_sel::v2#1 ]
Allocated zp[1]:36 [ mulu8_sel::select#5 ]
Allocated zp[2]:37 [ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
Allocated zp[2]:39 [ divr16u::dividend#2 divr16u::dividend#0 ]
Allocated zp[2]:41 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
Allocated zp[1]:43 [ divr16u::i#2 divr16u::i#1 ]
Allocated zp[2]:44 [ memset::dst#2 memset::dst#1 ]
Allocated zp[2]:46 [ div16u::return#2 ]
Allocated zp[2]:48 [ sin8u_table::step#0 ]
Allocated zp[1]:50 [ sin8s::return#2 ]
Allocated zp[1]:51 [ sin8u_table::sinx#0 ]
Allocated zp[1]:52 [ mul8su::a#0 ]
Allocated zp[2]:53 [ sin8u_table::sinx_sc#0 ]
Allocated zp[1]:55 [ sin8u_table::$20 ]
Allocated zp[1]:56 [ sin8u_table::sinx_tr#0 ]
Allocated zp[1]:57 [ print_uchar::$0 ]
Allocated zp[1]:58 [ print_uchar::$2 ]
Allocated zp[2]:59 [ mul8u::return#2 ]
Allocated zp[1]:61 [ mul8su::$4 ]
Allocated zp[1]:62 [ mul8su::$6 ]
Allocated zp[1]:63 [ mul8u::$1 ]
Allocated zp[2]:64 [ sin8s::$4 ]
Allocated zp[1]:66 [ sin8s::x1#0 ]
Allocated zp[1]:67 [ mulu8_sel::return#0 ]
Allocated zp[1]:68 [ sin8s::x2#0 ]
Allocated zp[1]:69 [ mulu8_sel::return#1 ]
Allocated zp[1]:70 [ sin8s::x3#0 ]
Allocated zp[1]:71 [ mulu8_sel::return#2 ]
Allocated zp[1]:72 [ sin8s::x3_6#0 ]
Allocated zp[1]:73 [ sin8s::usinx#0 ]
Allocated zp[1]:74 [ mulu8_sel::return#10 ]
Allocated zp[1]:75 [ sin8s::x4#0 ]
Allocated zp[1]:76 [ mulu8_sel::return#11 ]
Allocated zp[1]:77 [ sin8s::x5#0 ]
Allocated zp[1]:78 [ sin8s::x5_128#0 ]
Allocated zp[2]:79 [ mul8u::return#3 ]
Allocated zp[2]:81 [ mulu8_sel::$0 ]
Allocated zp[2]:83 [ mulu8_sel::$1 ]
Allocated zp[1]:85 [ mulu8_sel::return#12 ]
Allocated zp[2]:86 [ divr16u::return#2 ]
Allocated zp[2]:88 [ div16u::return#0 ]
Allocated zp[1]:90 [ divr16u::$1 ]
Allocated zp[1]:91 [ divr16u::$2 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // PI*2 in u[4.12] format
  .const PI2_u4f12 = $6488
  // PI in u[4.12] format
  .const PI_u4f12 = $3244
  // PI/2 in u[4.12] format
  .const PI_HALF_u4f12 = $1922
  .label print_char_cursor = $c
  .label print_line_cursor = 8
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label tabsize = $14
    // [5] call print_cls 
    // [213] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
    // [6] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [7] call sin8u_table 
    // [9] phi from main::@1 to sin8u_table [phi:main::@1->sin8u_table]
  sin8u_table_from___b1:
    jsr sin8u_table
    jmp __breturn
    // main::@return
  __breturn:
    // [8] return 
    rts
    sintab: .fill $14, 0
}
  // sin8u_table
// Generate unsigned byte sinus table in a min-max range
// sintab - the table to generate into
// tabsize - the number of sinus points (the size of the table)
// min - the minimal value
// max - the maximal value
// sin8u_table(byte* zp(6) sintab)
sin8u_table: {
    .const min = $a
    .const max = $ff
    .const sum = min+max
    .const mid = sum/2+1
    .label amplitude = max-min
    .label __20 = $37
    .label step = $30
    .label sinx = $33
    .label sinx_sc = $35
    .label sinx_tr = $38
    .label sintab = 6
    // Iterate over the table
    .label x = 4
    .label i = 2
    // [10] call div16u 
    // [191] phi from sin8u_table to div16u [phi:sin8u_table->div16u]
  div16u_from_sin8u_table:
    jsr div16u
    // [11] (word) div16u::return#2 ← (word) div16u::return#0 -- vwuz1=vwuz2 
    lda.z div16u.return
    sta.z div16u.return_1
    lda.z div16u.return+1
    sta.z div16u.return_1+1
    jmp __b3
    // sin8u_table::@3
  __b3:
    // [12] (word) sin8u_table::step#0 ← (word) div16u::return#2 -- vwuz1=vwuz2 
    lda.z div16u.return_1
    sta.z step
    lda.z div16u.return_1+1
    sta.z step+1
    // [13] call print_str 
  // u[4.12]
    // [85] phi from sin8u_table::@3 to print_str [phi:sin8u_table::@3->print_str]
  print_str_from___b3:
    // [85] phi (byte*) print_char_cursor#110 = (byte*) 1024 [phi:sin8u_table::@3->print_str#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_char_cursor
    lda #>$400
    sta.z print_char_cursor+1
    // [85] phi (byte*) print_str::str#13 = (const byte*) sin8u_table::str [phi:sin8u_table::@3->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    jmp __b4
    // sin8u_table::@4
  __b4:
    // [14] (word) print_uint::w#1 ← (word) sin8u_table::step#0 -- vwuz1=vwuz2 
    lda.z step
    sta.z print_uint.w
    lda.z step+1
    sta.z print_uint.w+1
    // [15] call print_uint 
    // [102] phi from sin8u_table::@4 to print_uint [phi:sin8u_table::@4->print_uint]
  print_uint_from___b4:
    // [102] phi (byte*) print_char_cursor#103 = (byte*) print_char_cursor#2 [phi:sin8u_table::@4->print_uint#0] -- register_copy 
    // [102] phi (word) print_uint::w#3 = (word) print_uint::w#1 [phi:sin8u_table::@4->print_uint#1] -- register_copy 
    jsr print_uint
    // [16] phi from sin8u_table::@4 to sin8u_table::@5 [phi:sin8u_table::@4->sin8u_table::@5]
  __b5_from___b4:
    jmp __b5
    // sin8u_table::@5
  __b5:
    // [17] call print_str 
    // [85] phi from sin8u_table::@5 to print_str [phi:sin8u_table::@5->print_str]
  print_str_from___b5:
    // [85] phi (byte*) print_char_cursor#110 = (byte*) print_char_cursor#19 [phi:sin8u_table::@5->print_str#0] -- register_copy 
    // [85] phi (byte*) print_str::str#13 = (const byte*) sin8u_table::str1 [phi:sin8u_table::@5->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta.z print_str.str
    lda #>str1
    sta.z print_str.str+1
    jsr print_str
    // [18] phi from sin8u_table::@5 to sin8u_table::@6 [phi:sin8u_table::@5->sin8u_table::@6]
  __b6_from___b5:
    jmp __b6
    // sin8u_table::@6
  __b6:
    // [19] call print_uchar 
    // [73] phi from sin8u_table::@6 to print_uchar [phi:sin8u_table::@6->print_uchar]
  print_uchar_from___b6:
    // [73] phi (byte*) print_char_cursor#104 = (byte*) print_char_cursor#2 [phi:sin8u_table::@6->print_uchar#0] -- register_copy 
    // [73] phi (byte) print_uchar::b#8 = (const byte) sin8u_table::min#0 [phi:sin8u_table::@6->print_uchar#1] -- vbuz1=vbuc1 
    lda #min
    sta.z print_uchar.b
    jsr print_uchar
    // [20] phi from sin8u_table::@6 to sin8u_table::@7 [phi:sin8u_table::@6->sin8u_table::@7]
  __b7_from___b6:
    jmp __b7
    // sin8u_table::@7
  __b7:
    // [21] call print_str 
    // [85] phi from sin8u_table::@7 to print_str [phi:sin8u_table::@7->print_str]
  print_str_from___b7:
    // [85] phi (byte*) print_char_cursor#110 = (byte*) print_char_cursor#19 [phi:sin8u_table::@7->print_str#0] -- register_copy 
    // [85] phi (byte*) print_str::str#13 = (const byte*) sin8u_table::str2 [phi:sin8u_table::@7->print_str#1] -- pbuz1=pbuc1 
    lda #<str2
    sta.z print_str.str
    lda #>str2
    sta.z print_str.str+1
    jsr print_str
    // [22] phi from sin8u_table::@7 to sin8u_table::@8 [phi:sin8u_table::@7->sin8u_table::@8]
  __b8_from___b7:
    jmp __b8
    // sin8u_table::@8
  __b8:
    // [23] call print_uchar 
    // [73] phi from sin8u_table::@8 to print_uchar [phi:sin8u_table::@8->print_uchar]
  print_uchar_from___b8:
    // [73] phi (byte*) print_char_cursor#104 = (byte*) print_char_cursor#2 [phi:sin8u_table::@8->print_uchar#0] -- register_copy 
    // [73] phi (byte) print_uchar::b#8 = (const byte) sin8u_table::max#0 [phi:sin8u_table::@8->print_uchar#1] -- vbuz1=vbuc1 
    lda #max
    sta.z print_uchar.b
    jsr print_uchar
    // [24] phi from sin8u_table::@8 to sin8u_table::@9 [phi:sin8u_table::@8->sin8u_table::@9]
  __b9_from___b8:
    jmp __b9
    // sin8u_table::@9
  __b9:
    // [25] call print_str 
    // [85] phi from sin8u_table::@9 to print_str [phi:sin8u_table::@9->print_str]
  print_str_from___b9:
    // [85] phi (byte*) print_char_cursor#110 = (byte*) print_char_cursor#19 [phi:sin8u_table::@9->print_str#0] -- register_copy 
    // [85] phi (byte*) print_str::str#13 = (const byte*) sin8u_table::str3 [phi:sin8u_table::@9->print_str#1] -- pbuz1=pbuc1 
    lda #<str3
    sta.z print_str.str
    lda #>str3
    sta.z print_str.str+1
    jsr print_str
    // [26] phi from sin8u_table::@9 to sin8u_table::@10 [phi:sin8u_table::@9->sin8u_table::@10]
  __b10_from___b9:
    jmp __b10
    // sin8u_table::@10
  __b10:
    // [27] call print_uchar 
    // [73] phi from sin8u_table::@10 to print_uchar [phi:sin8u_table::@10->print_uchar]
  print_uchar_from___b10:
    // [73] phi (byte*) print_char_cursor#104 = (byte*) print_char_cursor#2 [phi:sin8u_table::@10->print_uchar#0] -- register_copy 
    // [73] phi (byte) print_uchar::b#8 = (const byte) sin8u_table::amplitude#0 [phi:sin8u_table::@10->print_uchar#1] -- vbuz1=vbuc1 
    lda #amplitude
    sta.z print_uchar.b
    jsr print_uchar
    // [28] phi from sin8u_table::@10 to sin8u_table::@11 [phi:sin8u_table::@10->sin8u_table::@11]
  __b11_from___b10:
    jmp __b11
    // sin8u_table::@11
  __b11:
    // [29] call print_str 
    // [85] phi from sin8u_table::@11 to print_str [phi:sin8u_table::@11->print_str]
  print_str_from___b11:
    // [85] phi (byte*) print_char_cursor#110 = (byte*) print_char_cursor#19 [phi:sin8u_table::@11->print_str#0] -- register_copy 
    // [85] phi (byte*) print_str::str#13 = (const byte*) sin8u_table::str4 [phi:sin8u_table::@11->print_str#1] -- pbuz1=pbuc1 
    lda #<str4
    sta.z print_str.str
    lda #>str4
    sta.z print_str.str+1
    jsr print_str
    // [30] phi from sin8u_table::@11 to sin8u_table::@12 [phi:sin8u_table::@11->sin8u_table::@12]
  __b12_from___b11:
    jmp __b12
    // sin8u_table::@12
  __b12:
    // [31] call print_uchar 
    // [73] phi from sin8u_table::@12 to print_uchar [phi:sin8u_table::@12->print_uchar]
  print_uchar_from___b12:
    // [73] phi (byte*) print_char_cursor#104 = (byte*) print_char_cursor#2 [phi:sin8u_table::@12->print_uchar#0] -- register_copy 
    // [73] phi (byte) print_uchar::b#8 = (const byte) sin8u_table::mid#0 [phi:sin8u_table::@12->print_uchar#1] -- vbuz1=vbuc1 
    lda #mid
    sta.z print_uchar.b
    jsr print_uchar
    // [32] phi from sin8u_table::@12 to sin8u_table::@13 [phi:sin8u_table::@12->sin8u_table::@13]
  __b13_from___b12:
    jmp __b13
    // sin8u_table::@13
  __b13:
    // [33] call print_ln 
    // [68] phi from sin8u_table::@13 to print_ln [phi:sin8u_table::@13->print_ln]
  print_ln_from___b13:
    // [68] phi (byte*) print_line_cursor#23 = (byte*) 1024 [phi:sin8u_table::@13->print_ln#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_line_cursor
    lda #>$400
    sta.z print_line_cursor+1
    jsr print_ln
    // [34] phi from sin8u_table::@13 to sin8u_table::@1 [phi:sin8u_table::@13->sin8u_table::@1]
  __b1_from___b13:
    // [34] phi (byte*) sin8u_table::sintab#2 = (const byte*) main::sintab [phi:sin8u_table::@13->sin8u_table::@1#0] -- pbuz1=pbuc1 
    lda #<main.sintab
    sta.z sintab
    lda #>main.sintab
    sta.z sintab+1
    // [34] phi (word) sin8u_table::x#10 = (word) 0 [phi:sin8u_table::@13->sin8u_table::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z x
    lda #>0
    sta.z x+1
    // [34] phi (word) sin8u_table::i#10 = (word) 0 [phi:sin8u_table::@13->sin8u_table::@1#2] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    lda #>0
    sta.z i+1
    jmp __b1
  // u[4.12]
    // sin8u_table::@1
  __b1:
    // [35] if((word) sin8u_table::i#10<(const word) main::tabsize) goto sin8u_table::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z i+1
    cmp #>main.tabsize
    bcc __b2
    bne !+
    lda.z i
    cmp #<main.tabsize
    bcc __b2
  !:
    jmp __breturn
    // sin8u_table::@return
  __breturn:
    // [36] return 
    rts
    // sin8u_table::@2
  __b2:
    // [37] (word) sin8s::x#2 ← (word) sin8u_table::x#10 -- vwuz1=vwuz2 
    lda.z x
    sta.z sin8s.x
    lda.z x+1
    sta.z sin8s.x+1
    // [38] call sin8s 
    jsr sin8s
    // [39] (signed byte) sin8s::return#2 ← (signed byte) sin8s::return#0 -- vbsz1=vbsz2 
    lda.z sin8s.return
    sta.z sin8s.return_1
    jmp __b14
    // sin8u_table::@14
  __b14:
    // [40] (signed byte) sin8u_table::sinx#0 ← (signed byte) sin8s::return#2 -- vbsz1=vbsz2 
    lda.z sin8s.return_1
    sta.z sinx
    // [41] (signed byte) mul8su::a#0 ← (signed byte) sin8u_table::sinx#0 -- vbsz1=vbsz2 
    lda.z sinx
    sta.z mul8su.a
    // [42] call mul8su 
    jsr mul8su
    jmp __b15
    // sin8u_table::@15
  __b15:
    // [43] (signed word) sin8u_table::sinx_sc#0 ← (signed word)(word) mul8su::m#2 -- vwsz1=vwsz2 
    lda.z mul8su.m
    sta.z sinx_sc
    lda.z mul8su.m+1
    sta.z sinx_sc+1
    // [44] (byte~) sin8u_table::$20 ← > (signed word) sin8u_table::sinx_sc#0 -- vbuz1=_hi_vwsz2 
    lda.z sinx_sc+1
    sta.z __20
    // [45] (byte) sin8u_table::sinx_tr#0 ← (const byte) sin8u_table::mid#0 + (byte~) sin8u_table::$20 -- vbuz1=vbuc1_plus_vbuz2 
    lax.z __20
    axs #-[mid]
    stx.z sinx_tr
    // [46] *((byte*) sin8u_table::sintab#2) ← (byte) sin8u_table::sinx_tr#0 -- _deref_pbuz1=vbuz2 
    lda.z sinx_tr
    ldy #0
    sta (sintab),y
    // [47] (byte*) sin8u_table::sintab#1 ← ++ (byte*) sin8u_table::sintab#2 -- pbuz1=_inc_pbuz1 
    inc.z sintab
    bne !+
    inc.z sintab+1
  !:
    // [48] (byte*) print_char_cursor#117 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [49] call print_str 
    // [85] phi from sin8u_table::@15 to print_str [phi:sin8u_table::@15->print_str]
  print_str_from___b15:
    // [85] phi (byte*) print_char_cursor#110 = (byte*) print_char_cursor#117 [phi:sin8u_table::@15->print_str#0] -- register_copy 
    // [85] phi (byte*) print_str::str#13 = (const byte*) sin8u_table::str5 [phi:sin8u_table::@15->print_str#1] -- pbuz1=pbuc1 
    lda #<str5
    sta.z print_str.str
    lda #>str5
    sta.z print_str.str+1
    jsr print_str
    jmp __b16
    // sin8u_table::@16
  __b16:
    // [50] (word) print_uint::w#2 ← (word) sin8u_table::x#10 -- vwuz1=vwuz2 
    lda.z x
    sta.z print_uint.w
    lda.z x+1
    sta.z print_uint.w+1
    // [51] call print_uint 
    // [102] phi from sin8u_table::@16 to print_uint [phi:sin8u_table::@16->print_uint]
  print_uint_from___b16:
    // [102] phi (byte*) print_char_cursor#103 = (byte*) print_char_cursor#2 [phi:sin8u_table::@16->print_uint#0] -- register_copy 
    // [102] phi (word) print_uint::w#3 = (word) print_uint::w#2 [phi:sin8u_table::@16->print_uint#1] -- register_copy 
    jsr print_uint
    // [52] phi from sin8u_table::@16 to sin8u_table::@17 [phi:sin8u_table::@16->sin8u_table::@17]
  __b17_from___b16:
    jmp __b17
    // sin8u_table::@17
  __b17:
    // [53] call print_str 
    // [85] phi from sin8u_table::@17 to print_str [phi:sin8u_table::@17->print_str]
  print_str_from___b17:
    // [85] phi (byte*) print_char_cursor#110 = (byte*) print_char_cursor#19 [phi:sin8u_table::@17->print_str#0] -- register_copy 
    // [85] phi (byte*) print_str::str#13 = (const byte*) sin8u_table::str6 [phi:sin8u_table::@17->print_str#1] -- pbuz1=pbuc1 
    lda #<str6
    sta.z print_str.str
    lda #>str6
    sta.z print_str.str+1
    jsr print_str
    jmp __b18
    // sin8u_table::@18
  __b18:
    // [54] (signed byte) print_schar::b#1 ← (signed byte) sin8u_table::sinx#0 -- vbsz1=vbsz2 
    lda.z sinx
    sta.z print_schar.b
    // [55] call print_schar 
    jsr print_schar
    // [56] phi from sin8u_table::@18 to sin8u_table::@19 [phi:sin8u_table::@18->sin8u_table::@19]
  __b19_from___b18:
    jmp __b19
    // sin8u_table::@19
  __b19:
    // [57] call print_str 
    // [85] phi from sin8u_table::@19 to print_str [phi:sin8u_table::@19->print_str]
  print_str_from___b19:
    // [85] phi (byte*) print_char_cursor#110 = (byte*) print_char_cursor#19 [phi:sin8u_table::@19->print_str#0] -- register_copy 
    // [85] phi (byte*) print_str::str#13 = (const byte*) sin8u_table::str7 [phi:sin8u_table::@19->print_str#1] -- pbuz1=pbuc1 
    lda #<str7
    sta.z print_str.str
    lda #>str7
    sta.z print_str.str+1
    jsr print_str
    jmp __b20
    // sin8u_table::@20
  __b20:
    // [58] (signed word) print_sint::w#1 ← (signed word) sin8u_table::sinx_sc#0 -- vwsz1=vwsz2 
    lda.z sinx_sc
    sta.z print_sint.w
    lda.z sinx_sc+1
    sta.z print_sint.w+1
    // [59] call print_sint 
    jsr print_sint
    // [60] phi from sin8u_table::@20 to sin8u_table::@21 [phi:sin8u_table::@20->sin8u_table::@21]
  __b21_from___b20:
    jmp __b21
    // sin8u_table::@21
  __b21:
    // [61] call print_str 
    // [85] phi from sin8u_table::@21 to print_str [phi:sin8u_table::@21->print_str]
  print_str_from___b21:
    // [85] phi (byte*) print_char_cursor#110 = (byte*) print_char_cursor#19 [phi:sin8u_table::@21->print_str#0] -- register_copy 
    // [85] phi (byte*) print_str::str#13 = (const byte*) sin8u_table::str8 [phi:sin8u_table::@21->print_str#1] -- pbuz1=pbuc1 
    lda #<str8
    sta.z print_str.str
    lda #>str8
    sta.z print_str.str+1
    jsr print_str
    jmp __b22
    // sin8u_table::@22
  __b22:
    // [62] (byte) print_uchar::b#7 ← (byte) sin8u_table::sinx_tr#0 -- vbuz1=vbuz2 
    lda.z sinx_tr
    sta.z print_uchar.b
    // [63] call print_uchar 
    // [73] phi from sin8u_table::@22 to print_uchar [phi:sin8u_table::@22->print_uchar]
  print_uchar_from___b22:
    // [73] phi (byte*) print_char_cursor#104 = (byte*) print_char_cursor#2 [phi:sin8u_table::@22->print_uchar#0] -- register_copy 
    // [73] phi (byte) print_uchar::b#8 = (byte) print_uchar::b#7 [phi:sin8u_table::@22->print_uchar#1] -- register_copy 
    jsr print_uchar
    // [64] phi from sin8u_table::@22 to sin8u_table::@23 [phi:sin8u_table::@22->sin8u_table::@23]
  __b23_from___b22:
    jmp __b23
    // sin8u_table::@23
  __b23:
    // [65] call print_ln 
    // [68] phi from sin8u_table::@23 to print_ln [phi:sin8u_table::@23->print_ln]
  print_ln_from___b23:
    // [68] phi (byte*) print_line_cursor#23 = (byte*) print_line_cursor#1 [phi:sin8u_table::@23->print_ln#0] -- register_copy 
    jsr print_ln
    jmp __b24
    // sin8u_table::@24
  __b24:
    // [66] (word) sin8u_table::x#1 ← (word) sin8u_table::x#10 + (word) sin8u_table::step#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z x
    clc
    adc.z step
    sta.z x
    lda.z x+1
    adc.z step+1
    sta.z x+1
    // [67] (word) sin8u_table::i#1 ← ++ (word) sin8u_table::i#10 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [34] phi from sin8u_table::@24 to sin8u_table::@1 [phi:sin8u_table::@24->sin8u_table::@1]
  __b1_from___b24:
    // [34] phi (byte*) sin8u_table::sintab#2 = (byte*) sin8u_table::sintab#1 [phi:sin8u_table::@24->sin8u_table::@1#0] -- register_copy 
    // [34] phi (word) sin8u_table::x#10 = (word) sin8u_table::x#1 [phi:sin8u_table::@24->sin8u_table::@1#1] -- register_copy 
    // [34] phi (word) sin8u_table::i#10 = (word) sin8u_table::i#1 [phi:sin8u_table::@24->sin8u_table::@1#2] -- register_copy 
    jmp __b1
    str: .text "step:"
    .byte 0
    str1: .text " min:"
    .byte 0
    str2: .text " max:"
    .byte 0
    str3: .text " ampl:"
    .byte 0
    str4: .text " mid:"
    .byte 0
    str5: .text "x: "
    .byte 0
    str6: .text " sin: "
    .byte 0
    str7: .text " scaled: "
    .byte 0
    str8: .text " trans: "
    .byte 0
}
  // print_ln
// Print a newline
print_ln: {
    // [69] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  __b1_from_print_ln:
  __b1_from___b1:
    // [69] phi (byte*) print_line_cursor#12 = (byte*) print_line_cursor#23 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp __b1
    // print_ln::@1
  __b1:
    // [70] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#12 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // [71] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#19) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1_from___b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1_from___b1
  !:
    jmp __breturn
    // print_ln::@return
  __breturn:
    // [72] return 
    rts
}
  // print_uchar
// Print a char as HEX
// print_uchar(byte zp($a) b)
print_uchar: {
    .label __0 = $39
    .label __2 = $3a
    .label b = $a
    // [74] (byte~) print_uchar::$0 ← (byte) print_uchar::b#8 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda.z b
    lsr
    lsr
    lsr
    lsr
    sta.z __0
    // [75] (byte) print_char::ch#5 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __0
    lda print_hextab,y
    sta.z print_char.ch
    // [76] call print_char 
  // Table of hexadecimal digits
    // [81] phi from print_uchar to print_char [phi:print_uchar->print_char]
  print_char_from_print_uchar:
    // [81] phi (byte*) print_char_cursor#66 = (byte*) print_char_cursor#104 [phi:print_uchar->print_char#0] -- register_copy 
    // [81] phi (byte) print_char::ch#7 = (byte) print_char::ch#5 [phi:print_uchar->print_char#1] -- register_copy 
    jsr print_char
    jmp __b1
    // print_uchar::@1
  __b1:
    // [77] (byte~) print_uchar::$2 ← (byte) print_uchar::b#8 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and.z b
    sta.z __2
    // [78] (byte) print_char::ch#6 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __2
    lda print_hextab,y
    sta.z print_char.ch
    // [79] call print_char 
    // [81] phi from print_uchar::@1 to print_char [phi:print_uchar::@1->print_char]
  print_char_from___b1:
    // [81] phi (byte*) print_char_cursor#66 = (byte*) print_char_cursor#19 [phi:print_uchar::@1->print_char#0] -- register_copy 
    // [81] phi (byte) print_char::ch#7 = (byte) print_char::ch#6 [phi:print_uchar::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp __breturn
    // print_uchar::@return
  __breturn:
    // [80] return 
    rts
}
  // print_char
// Print a single char
// print_char(byte zp($b) ch)
print_char: {
    .label ch = $b
    // [82] *((byte*) print_char_cursor#66) ← (byte) print_char::ch#7 -- _deref_pbuz1=vbuz2 
    lda.z ch
    ldy #0
    sta (print_char_cursor),y
    // [83] (byte*) print_char_cursor#19 ← ++ (byte*) print_char_cursor#66 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp __breturn
    // print_char::@return
  __breturn:
    // [84] return 
    rts
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zp($e) str)
print_str: {
    .label str = $e
    // [86] phi from print_str print_str::@3 to print_str::@1 [phi:print_str/print_str::@3->print_str::@1]
  __b1_from_print_str:
  __b1_from___b3:
    // [86] phi (byte*) print_char_cursor#2 = (byte*) print_char_cursor#110 [phi:print_str/print_str::@3->print_str::@1#0] -- register_copy 
    // [86] phi (byte*) print_str::str#10 = (byte*) print_str::str#13 [phi:print_str/print_str::@3->print_str::@1#1] -- register_copy 
    jmp __b1
    // print_str::@1
  __b1:
    // [87] if((byte) 0!=*((byte*) print_str::str#10)) goto print_str::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // print_str::@return
  __breturn:
    // [88] return 
    rts
    // print_str::@2
  __b2:
    // [89] (byte) print_char::ch#0 ← *((byte*) print_str::str#10) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    sta.z print_char.ch
    // [90] call print_char 
    // [81] phi from print_str::@2 to print_char [phi:print_str::@2->print_char]
  print_char_from___b2:
    // [81] phi (byte*) print_char_cursor#66 = (byte*) print_char_cursor#2 [phi:print_str::@2->print_char#0] -- register_copy 
    // [81] phi (byte) print_char::ch#7 = (byte) print_char::ch#0 [phi:print_str::@2->print_char#1] -- register_copy 
    jsr print_char
    jmp __b3
    // print_str::@3
  __b3:
    // [91] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#10 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp __b1_from___b3
}
  // print_sint
// Print a signed int as HEX
// print_sint(signed word zp($10) w)
print_sint: {
    .label w = $10
    // [92] if((signed word) print_sint::w#1<(signed byte) 0) goto print_sint::@1 -- vwsz1_lt_0_then_la1 
    lda.z w+1
    bmi __b1_from_print_sint
    // [93] phi from print_sint to print_sint::@3 [phi:print_sint->print_sint::@3]
  __b3_from_print_sint:
    jmp __b3
    // print_sint::@3
  __b3:
    // [94] call print_char 
    // [81] phi from print_sint::@3 to print_char [phi:print_sint::@3->print_char]
  print_char_from___b3:
    // [81] phi (byte*) print_char_cursor#66 = (byte*) print_char_cursor#2 [phi:print_sint::@3->print_char#0] -- register_copy 
    // [81] phi (byte) print_char::ch#7 = (byte) ' ' [phi:print_sint::@3->print_char#1] -- vbuz1=vbuc1 
    lda #' '
    sta.z print_char.ch
    jsr print_char
    // [95] phi from print_sint::@3 print_sint::@4 to print_sint::@2 [phi:print_sint::@3/print_sint::@4->print_sint::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [95] phi (signed word) print_sint::w#4 = (signed word) print_sint::w#1 [phi:print_sint::@3/print_sint::@4->print_sint::@2#0] -- register_copy 
    jmp __b2
    // print_sint::@2
  __b2:
    // [96] (word) print_uint::w#0 ← (word)(signed word) print_sint::w#4 -- vwuz1=vwuz2 
    lda.z w
    sta.z print_uint.w
    lda.z w+1
    sta.z print_uint.w+1
    // [97] call print_uint 
    // [102] phi from print_sint::@2 to print_uint [phi:print_sint::@2->print_uint]
  print_uint_from___b2:
    // [102] phi (byte*) print_char_cursor#103 = (byte*) print_char_cursor#19 [phi:print_sint::@2->print_uint#0] -- register_copy 
    // [102] phi (word) print_uint::w#3 = (word) print_uint::w#0 [phi:print_sint::@2->print_uint#1] -- register_copy 
    jsr print_uint
    jmp __breturn
    // print_sint::@return
  __breturn:
    // [98] return 
    rts
    // [99] phi from print_sint to print_sint::@1 [phi:print_sint->print_sint::@1]
  __b1_from_print_sint:
    jmp __b1
    // print_sint::@1
  __b1:
    // [100] call print_char 
    // [81] phi from print_sint::@1 to print_char [phi:print_sint::@1->print_char]
  print_char_from___b1:
    // [81] phi (byte*) print_char_cursor#66 = (byte*) print_char_cursor#2 [phi:print_sint::@1->print_char#0] -- register_copy 
    // [81] phi (byte) print_char::ch#7 = (byte) '-' [phi:print_sint::@1->print_char#1] -- vbuz1=vbuc1 
    lda #'-'
    sta.z print_char.ch
    jsr print_char
    jmp __b4
    // print_sint::@4
  __b4:
    // [101] (signed word) print_sint::w#0 ← - (signed word) print_sint::w#1 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z w
    sta.z w
    lda #0
    sbc.z w+1
    sta.z w+1
    jmp __b2_from___b4
}
  // print_uint
// Print a unsigned int as HEX
// print_uint(word zp($12) w)
print_uint: {
    .label w = $12
    // [103] (byte) print_uchar::b#1 ← > (word) print_uint::w#3 -- vbuz1=_hi_vwuz2 
    lda.z w+1
    sta.z print_uchar.b
    // [104] call print_uchar 
    // [73] phi from print_uint to print_uchar [phi:print_uint->print_uchar]
  print_uchar_from_print_uint:
    // [73] phi (byte*) print_char_cursor#104 = (byte*) print_char_cursor#103 [phi:print_uint->print_uchar#0] -- register_copy 
    // [73] phi (byte) print_uchar::b#8 = (byte) print_uchar::b#1 [phi:print_uint->print_uchar#1] -- register_copy 
    jsr print_uchar
    jmp __b1
    // print_uint::@1
  __b1:
    // [105] (byte) print_uchar::b#2 ← < (word) print_uint::w#3 -- vbuz1=_lo_vwuz2 
    lda.z w
    sta.z print_uchar.b
    // [106] call print_uchar 
    // [73] phi from print_uint::@1 to print_uchar [phi:print_uint::@1->print_uchar]
  print_uchar_from___b1:
    // [73] phi (byte*) print_char_cursor#104 = (byte*) print_char_cursor#19 [phi:print_uint::@1->print_uchar#0] -- register_copy 
    // [73] phi (byte) print_uchar::b#8 = (byte) print_uchar::b#2 [phi:print_uint::@1->print_uchar#1] -- register_copy 
    jsr print_uchar
    jmp __breturn
    // print_uint::@return
  __breturn:
    // [107] return 
    rts
}
  // print_schar
// Print a signed char as HEX
// print_schar(signed byte zp($14) b)
print_schar: {
    .label b = $14
    // [108] if((signed byte) print_schar::b#1<(signed byte) 0) goto print_schar::@1 -- vbsz1_lt_0_then_la1 
    lda.z b
    bmi __b1_from_print_schar
    // [109] phi from print_schar to print_schar::@3 [phi:print_schar->print_schar::@3]
  __b3_from_print_schar:
    jmp __b3
    // print_schar::@3
  __b3:
    // [110] call print_char 
    // [81] phi from print_schar::@3 to print_char [phi:print_schar::@3->print_char]
  print_char_from___b3:
    // [81] phi (byte*) print_char_cursor#66 = (byte*) print_char_cursor#2 [phi:print_schar::@3->print_char#0] -- register_copy 
    // [81] phi (byte) print_char::ch#7 = (byte) ' ' [phi:print_schar::@3->print_char#1] -- vbuz1=vbuc1 
    lda #' '
    sta.z print_char.ch
    jsr print_char
    // [111] phi from print_schar::@3 print_schar::@4 to print_schar::@2 [phi:print_schar::@3/print_schar::@4->print_schar::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [111] phi (signed byte) print_schar::b#4 = (signed byte) print_schar::b#1 [phi:print_schar::@3/print_schar::@4->print_schar::@2#0] -- register_copy 
    jmp __b2
    // print_schar::@2
  __b2:
    // [112] (byte) print_uchar::b#0 ← (byte)(signed byte) print_schar::b#4 -- vbuz1=vbuz2 
    lda.z b
    sta.z print_uchar.b
    // [113] call print_uchar 
    // [73] phi from print_schar::@2 to print_uchar [phi:print_schar::@2->print_uchar]
  print_uchar_from___b2:
    // [73] phi (byte*) print_char_cursor#104 = (byte*) print_char_cursor#19 [phi:print_schar::@2->print_uchar#0] -- register_copy 
    // [73] phi (byte) print_uchar::b#8 = (byte) print_uchar::b#0 [phi:print_schar::@2->print_uchar#1] -- register_copy 
    jsr print_uchar
    jmp __breturn
    // print_schar::@return
  __breturn:
    // [114] return 
    rts
    // [115] phi from print_schar to print_schar::@1 [phi:print_schar->print_schar::@1]
  __b1_from_print_schar:
    jmp __b1
    // print_schar::@1
  __b1:
    // [116] call print_char 
    // [81] phi from print_schar::@1 to print_char [phi:print_schar::@1->print_char]
  print_char_from___b1:
    // [81] phi (byte*) print_char_cursor#66 = (byte*) print_char_cursor#2 [phi:print_schar::@1->print_char#0] -- register_copy 
    // [81] phi (byte) print_char::ch#7 = (byte) '-' [phi:print_schar::@1->print_char#1] -- vbuz1=vbuc1 
    lda #'-'
    sta.z print_char.ch
    jsr print_char
    jmp __b4
    // print_schar::@4
  __b4:
    // [117] (signed byte) print_schar::b#0 ← - (signed byte) print_schar::b#1 -- vbsz1=_neg_vbsz1 
    lda.z b
    eor #$ff
    clc
    adc #1
    sta.z b
    jmp __b2_from___b4
}
  // mul8su
// Multiply a signed char and an unsigned char (into a signed int)
// Fixes offsets introduced by using unsigned multiplication
// mul8su(signed byte zp($34) a)
mul8su: {
    .const b = sin8u_table.amplitude+1
    .label __4 = $3d
    .label __6 = $3e
    .label m = $15
    .label a = $34
    // [118] (byte) mul8u::a#1 ← (byte)(signed byte) mul8su::a#0 -- vbuz1=vbuz2 
    lda.z a
    sta.z mul8u.a
    // [119] call mul8u 
    // [128] phi from mul8su to mul8u [phi:mul8su->mul8u]
  mul8u_from_mul8su:
    // [128] phi (byte) mul8u::a#6 = (byte) mul8u::a#1 [phi:mul8su->mul8u#0] -- register_copy 
    // [128] phi (byte) mul8u::b#2 = (const byte) mul8su::b#0 [phi:mul8su->mul8u#1] -- vbuz1=vbuc1 
    lda #b
    sta.z mul8u.b
    jsr mul8u
    // [120] (word) mul8u::return#2 ← (word) mul8u::res#2 -- vwuz1=vwuz2 
    lda.z mul8u.res
    sta.z mul8u.return
    lda.z mul8u.res+1
    sta.z mul8u.return+1
    jmp __b3
    // mul8su::@3
  __b3:
    // [121] (word) mul8su::m#0 ← (word) mul8u::return#2 -- vwuz1=vwuz2 
    lda.z mul8u.return
    sta.z m
    lda.z mul8u.return+1
    sta.z m+1
    // [122] if((signed byte) mul8su::a#0>=(signed byte) 0) goto mul8su::@1 -- vbsz1_ge_0_then_la1 
    lda.z a
    cmp #0
    bpl __b1_from___b3
    jmp __b2
    // mul8su::@2
  __b2:
    // [123] (byte~) mul8su::$4 ← > (word) mul8su::m#0 -- vbuz1=_hi_vwuz2 
    lda.z m+1
    sta.z __4
    // [124] (byte~) mul8su::$6 ← (byte~) mul8su::$4 - (const byte) mul8su::b#0 -- vbuz1=vbuz2_minus_vbuc1 
    lax.z __4
    axs #b
    stx.z __6
    // [125] (word) mul8su::m#1 ← (word) mul8su::m#0 hi= (byte~) mul8su::$6 -- vwuz1=vwuz1_sethi_vbuz2 
    lda.z __6
    sta.z m+1
    // [126] phi from mul8su::@2 mul8su::@3 to mul8su::@1 [phi:mul8su::@2/mul8su::@3->mul8su::@1]
  __b1_from___b2:
  __b1_from___b3:
    // [126] phi (word) mul8su::m#2 = (word) mul8su::m#1 [phi:mul8su::@2/mul8su::@3->mul8su::@1#0] -- register_copy 
    jmp __b1
    // mul8su::@1
  __b1:
    jmp __breturn
    // mul8su::@return
  __breturn:
    // [127] return 
    rts
}
  // mul8u
// Perform binary multiplication of two unsigned 8-bit chars into a 16-bit unsigned int
// mul8u(byte zp($18) a, byte zp($17) b)
mul8u: {
    .label __1 = $3f
    .label mb = $1b
    .label a = $18
    .label res = $19
    .label return = $3b
    .label b = $17
    .label return_1 = $4f
    // [129] (word) mul8u::mb#0 ← (word)(byte) mul8u::b#2 -- vwuz1=_word_vbuz2 
    lda.z b
    sta.z mb
    lda #0
    sta.z mb+1
    // [130] phi from mul8u to mul8u::@1 [phi:mul8u->mul8u::@1]
  __b1_from_mul8u:
    // [130] phi (word) mul8u::mb#2 = (word) mul8u::mb#0 [phi:mul8u->mul8u::@1#0] -- register_copy 
    // [130] phi (word) mul8u::res#2 = (word) 0 [phi:mul8u->mul8u::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z res
    lda #>0
    sta.z res+1
    // [130] phi (byte) mul8u::a#3 = (byte) mul8u::a#6 [phi:mul8u->mul8u::@1#2] -- register_copy 
    jmp __b1
    // mul8u::@1
  __b1:
    // [131] if((byte) mul8u::a#3!=(byte) 0) goto mul8u::@2 -- vbuz1_neq_0_then_la1 
    lda.z a
    cmp #0
    bne __b2
    jmp __breturn
    // mul8u::@return
  __breturn:
    // [132] return 
    rts
    // mul8u::@2
  __b2:
    // [133] (byte~) mul8u::$1 ← (byte) mul8u::a#3 & (byte) 1 -- vbuz1=vbuz2_band_vbuc1 
    lda #1
    and.z a
    sta.z __1
    // [134] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@3 -- vbuz1_eq_0_then_la1 
    lda.z __1
    cmp #0
    beq __b3_from___b2
    jmp __b4
    // mul8u::@4
  __b4:
    // [135] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z res
    clc
    adc.z mb
    sta.z res
    lda.z res+1
    adc.z mb+1
    sta.z res+1
    // [136] phi from mul8u::@2 mul8u::@4 to mul8u::@3 [phi:mul8u::@2/mul8u::@4->mul8u::@3]
  __b3_from___b2:
  __b3_from___b4:
    // [136] phi (word) mul8u::res#6 = (word) mul8u::res#2 [phi:mul8u::@2/mul8u::@4->mul8u::@3#0] -- register_copy 
    jmp __b3
    // mul8u::@3
  __b3:
    // [137] (byte) mul8u::a#0 ← (byte) mul8u::a#3 >> (byte) 1 -- vbuz1=vbuz1_ror_1 
    lsr.z a
    // [138] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z mb
    rol.z mb+1
    // [130] phi from mul8u::@3 to mul8u::@1 [phi:mul8u::@3->mul8u::@1]
  __b1_from___b3:
    // [130] phi (word) mul8u::mb#2 = (word) mul8u::mb#1 [phi:mul8u::@3->mul8u::@1#0] -- register_copy 
    // [130] phi (word) mul8u::res#2 = (word) mul8u::res#6 [phi:mul8u::@3->mul8u::@1#1] -- register_copy 
    // [130] phi (byte) mul8u::a#3 = (byte) mul8u::a#0 [phi:mul8u::@3->mul8u::@1#2] -- register_copy 
    jmp __b1
}
  // sin8s
// Calculate signed char sinus sin(x)
// x: unsigned int input u[4.12] in the interval $0000 - PI2_u4f12
// result: signed char sin(x) s[0.7] - using the full range  -$7f - $7f
// sin8s(word zp($1e) x)
sin8s: {
    // u[2.6] x^3
    .const DIV_6 = $2b
    .label __4 = $40
    .label x = $1e
    .label x1 = $42
    .label x2 = $44
    .label x3 = $46
    .label x3_6 = $48
    .label usinx = $49
    .label x4 = $4b
    .label x5 = $4d
    .label x5_128 = $4e
    .label usinx_1 = $20
    .label return = $21
    .label sinx = $21
    .label return_1 = $32
    // Move x1 into the range 0-PI/2 using sinus mirror symmetries
    .label isUpper = $1d
    // [139] if((word) sin8s::x#2<(const nomodify word) PI_u4f12) goto sin8s::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda.z x+1
    cmp #>PI_u4f12
    bcc __b1_from_sin8s
    bne !+
    lda.z x
    cmp #<PI_u4f12
    bcc __b1_from_sin8s
  !:
    jmp __b5
    // sin8s::@5
  __b5:
    // [140] (word) sin8s::x#0 ← (word) sin8s::x#2 - (const nomodify word) PI_u4f12 -- vwuz1=vwuz1_minus_vwuc1 
    lda.z x
    sec
    sbc #<PI_u4f12
    sta.z x
    lda.z x+1
    sbc #>PI_u4f12
    sta.z x+1
    // [141] phi from sin8s::@5 to sin8s::@1 [phi:sin8s::@5->sin8s::@1]
  __b1_from___b5:
    // [141] phi (byte) sin8s::isUpper#10 = (byte) 1 [phi:sin8s::@5->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z isUpper
    // [141] phi (word) sin8s::x#4 = (word) sin8s::x#0 [phi:sin8s::@5->sin8s::@1#1] -- register_copy 
    jmp __b1
    // [141] phi from sin8s to sin8s::@1 [phi:sin8s->sin8s::@1]
  __b1_from_sin8s:
    // [141] phi (byte) sin8s::isUpper#10 = (byte) 0 [phi:sin8s->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z isUpper
    // [141] phi (word) sin8s::x#4 = (word) sin8s::x#2 [phi:sin8s->sin8s::@1#1] -- register_copy 
    jmp __b1
    // sin8s::@1
  __b1:
    // [142] if((word) sin8s::x#4<(const nomodify word) PI_HALF_u4f12) goto sin8s::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z x+1
    cmp #>PI_HALF_u4f12
    bcc __b2_from___b1
    bne !+
    lda.z x
    cmp #<PI_HALF_u4f12
    bcc __b2_from___b1
  !:
    jmp __b6
    // sin8s::@6
  __b6:
    // [143] (word) sin8s::x#1 ← (const nomodify word) PI_u4f12 - (word) sin8s::x#4 -- vwuz1=vwuc1_minus_vwuz1 
    sec
    lda #<PI_u4f12
    sbc.z x
    sta.z x
    lda #>PI_u4f12
    sbc.z x+1
    sta.z x+1
    // [144] phi from sin8s::@1 sin8s::@6 to sin8s::@2 [phi:sin8s::@1/sin8s::@6->sin8s::@2]
  __b2_from___b1:
  __b2_from___b6:
    // [144] phi (word) sin8s::x#6 = (word) sin8s::x#4 [phi:sin8s::@1/sin8s::@6->sin8s::@2#0] -- register_copy 
    jmp __b2
    // sin8s::@2
  __b2:
    // [145] (word~) sin8s::$4 ← (word) sin8s::x#6 << (byte) 3 -- vwuz1=vwuz2_rol_3 
    lda.z x
    asl
    sta.z __4
    lda.z x+1
    rol
    sta.z __4+1
    asl.z __4
    rol.z __4+1
    asl.z __4
    rol.z __4+1
    // [146] (byte) sin8s::x1#0 ← > (word~) sin8s::$4 -- vbuz1=_hi_vwuz2 
    lda.z __4+1
    sta.z x1
    // [147] (byte) mulu8_sel::v1#0 ← (byte) sin8s::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z mulu8_sel.v1
    // [148] (byte) mulu8_sel::v2#0 ← (byte) sin8s::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z mulu8_sel.v2
    // [149] call mulu8_sel 
    // [182] phi from sin8s::@2 to mulu8_sel [phi:sin8s::@2->mulu8_sel]
  mulu8_sel_from___b2:
    // [182] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@2->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [182] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#0 [phi:sin8s::@2->mulu8_sel#1] -- register_copy 
    // [182] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#0 [phi:sin8s::@2->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [150] (byte) mulu8_sel::return#0 ← (byte) mulu8_sel::return#12 -- vbuz1=vbuz2 
    lda.z mulu8_sel.return_5
    sta.z mulu8_sel.return
    jmp __b9
    // sin8s::@9
  __b9:
    // [151] (byte) sin8s::x2#0 ← (byte) mulu8_sel::return#0 -- vbuz1=vbuz2 
    lda.z mulu8_sel.return
    sta.z x2
    // [152] (byte) mulu8_sel::v1#1 ← (byte) sin8s::x2#0 -- vbuz1=vbuz2 
    lda.z x2
    sta.z mulu8_sel.v1
    // [153] (byte) mulu8_sel::v2#1 ← (byte) sin8s::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z mulu8_sel.v2
    // [154] call mulu8_sel 
    // [182] phi from sin8s::@9 to mulu8_sel [phi:sin8s::@9->mulu8_sel]
  mulu8_sel_from___b9:
    // [182] phi (byte) mulu8_sel::select#5 = (byte) 1 [phi:sin8s::@9->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta.z mulu8_sel.select
    // [182] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#1 [phi:sin8s::@9->mulu8_sel#1] -- register_copy 
    // [182] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#1 [phi:sin8s::@9->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [155] (byte) mulu8_sel::return#1 ← (byte) mulu8_sel::return#12 -- vbuz1=vbuz2 
    lda.z mulu8_sel.return_5
    sta.z mulu8_sel.return_1
    jmp __b10
    // sin8s::@10
  __b10:
    // [156] (byte) sin8s::x3#0 ← (byte) mulu8_sel::return#1 -- vbuz1=vbuz2 
    lda.z mulu8_sel.return_1
    sta.z x3
    // [157] (byte) mulu8_sel::v1#2 ← (byte) sin8s::x3#0 -- vbuz1=vbuz2 
    lda.z x3
    sta.z mulu8_sel.v1
    // [158] call mulu8_sel 
    // [182] phi from sin8s::@10 to mulu8_sel [phi:sin8s::@10->mulu8_sel]
  mulu8_sel_from___b10:
    // [182] phi (byte) mulu8_sel::select#5 = (byte) 1 [phi:sin8s::@10->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta.z mulu8_sel.select
    // [182] phi (byte) mulu8_sel::v2#5 = (const nomodify byte) sin8s::DIV_6 [phi:sin8s::@10->mulu8_sel#1] -- vbuz1=vbuc1 
    lda #DIV_6
    sta.z mulu8_sel.v2
    // [182] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#2 [phi:sin8s::@10->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [159] (byte) mulu8_sel::return#2 ← (byte) mulu8_sel::return#12 -- vbuz1=vbuz2 
    lda.z mulu8_sel.return_5
    sta.z mulu8_sel.return_2
    jmp __b11
    // sin8s::@11
  __b11:
    // [160] (byte) sin8s::x3_6#0 ← (byte) mulu8_sel::return#2 -- vbuz1=vbuz2 
    lda.z mulu8_sel.return_2
    sta.z x3_6
    // [161] (byte) sin8s::usinx#0 ← (byte) sin8s::x1#0 - (byte) sin8s::x3_6#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda.z x1
    sec
    sbc.z x3_6
    sta.z usinx
    // [162] (byte) mulu8_sel::v1#3 ← (byte) sin8s::x3#0 -- vbuz1=vbuz2 
    lda.z x3
    sta.z mulu8_sel.v1
    // [163] (byte) mulu8_sel::v2#3 ← (byte) sin8s::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z mulu8_sel.v2
    // [164] call mulu8_sel 
    // [182] phi from sin8s::@11 to mulu8_sel [phi:sin8s::@11->mulu8_sel]
  mulu8_sel_from___b11:
    // [182] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@11->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [182] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#3 [phi:sin8s::@11->mulu8_sel#1] -- register_copy 
    // [182] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#3 [phi:sin8s::@11->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [165] (byte) mulu8_sel::return#10 ← (byte) mulu8_sel::return#12 -- vbuz1=vbuz2 
    lda.z mulu8_sel.return_5
    sta.z mulu8_sel.return_3
    jmp __b12
    // sin8s::@12
  __b12:
    // [166] (byte) sin8s::x4#0 ← (byte) mulu8_sel::return#10 -- vbuz1=vbuz2 
    lda.z mulu8_sel.return_3
    sta.z x4
    // [167] (byte) mulu8_sel::v1#4 ← (byte) sin8s::x4#0 -- vbuz1=vbuz2 
    lda.z x4
    sta.z mulu8_sel.v1
    // [168] (byte) mulu8_sel::v2#4 ← (byte) sin8s::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z mulu8_sel.v2
    // [169] call mulu8_sel 
    // [182] phi from sin8s::@12 to mulu8_sel [phi:sin8s::@12->mulu8_sel]
  mulu8_sel_from___b12:
    // [182] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@12->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [182] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#4 [phi:sin8s::@12->mulu8_sel#1] -- register_copy 
    // [182] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#4 [phi:sin8s::@12->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [170] (byte) mulu8_sel::return#11 ← (byte) mulu8_sel::return#12 -- vbuz1=vbuz2 
    lda.z mulu8_sel.return_5
    sta.z mulu8_sel.return_4
    jmp __b13
    // sin8s::@13
  __b13:
    // [171] (byte) sin8s::x5#0 ← (byte) mulu8_sel::return#11 -- vbuz1=vbuz2 
    lda.z mulu8_sel.return_4
    sta.z x5
    // [172] (byte) sin8s::x5_128#0 ← (byte) sin8s::x5#0 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda.z x5
    lsr
    lsr
    lsr
    lsr
    sta.z x5_128
    // [173] (byte) sin8s::usinx#1 ← (byte) sin8s::usinx#0 + (byte) sin8s::x5_128#0 -- vbuz1=vbuz2_plus_vbuz3 
    lda.z usinx
    clc
    adc.z x5_128
    sta.z usinx_1
    // [174] if((byte) sin8s::usinx#1<(byte) $80) goto sin8s::@3 -- vbuz1_lt_vbuc1_then_la1 
    lda.z usinx_1
    cmp #$80
    bcc __b3_from___b13
    jmp __b7
    // sin8s::@7
  __b7:
    // [175] (byte) sin8s::usinx#2 ← -- (byte) sin8s::usinx#1 -- vbuz1=_dec_vbuz1 
    dec.z usinx_1
    // [176] phi from sin8s::@13 sin8s::@7 to sin8s::@3 [phi:sin8s::@13/sin8s::@7->sin8s::@3]
  __b3_from___b13:
  __b3_from___b7:
    // [176] phi (byte) sin8s::usinx#4 = (byte) sin8s::usinx#1 [phi:sin8s::@13/sin8s::@7->sin8s::@3#0] -- register_copy 
    jmp __b3
    // sin8s::@3
  __b3:
    // [177] if((byte) sin8s::isUpper#10==(byte) 0) goto sin8s::@14 -- vbuz1_eq_0_then_la1 
    lda.z isUpper
    cmp #0
    beq __b14
    jmp __b8
    // sin8s::@8
  __b8:
    // [178] (signed byte) sin8s::sinx#1 ← - (signed byte)(byte) sin8s::usinx#4 -- vbsz1=_neg_vbsz2 
    lda.z usinx_1
    eor #$ff
    clc
    adc #1
    sta.z sinx
    // [179] phi from sin8s::@14 sin8s::@8 to sin8s::@4 [phi:sin8s::@14/sin8s::@8->sin8s::@4]
  __b4_from___b14:
  __b4_from___b8:
    // [179] phi (signed byte) sin8s::return#0 = (signed byte) sin8s::return#5 [phi:sin8s::@14/sin8s::@8->sin8s::@4#0] -- register_copy 
    jmp __b4
    // sin8s::@4
  __b4:
    jmp __breturn
    // sin8s::@return
  __breturn:
    // [180] return 
    rts
    // sin8s::@14
  __b14:
    // [181] (signed byte) sin8s::return#5 ← (signed byte)(byte) sin8s::usinx#4 -- vbsz1=vbsz2 
    lda.z usinx_1
    sta.z return
    jmp __b4_from___b14
}
  // mulu8_sel
// Calculate val*val for two unsigned char values - the result is 8 selected bits of the 16-bit result.
// The select parameter indicates how many of the highest bits of the 16-bit result to skip
// mulu8_sel(byte zp($22) v1, byte zp($23) v2, byte zp($24) select)
mulu8_sel: {
    .label __0 = $51
    .label __1 = $53
    .label v1 = $22
    .label v2 = $23
    .label return = $43
    .label return_1 = $45
    .label return_2 = $47
    .label return_3 = $4a
    .label return_4 = $4c
    .label select = $24
    .label return_5 = $55
    // [183] (byte) mul8u::a#2 ← (byte) mulu8_sel::v1#5 -- vbuz1=vbuz2 
    lda.z v1
    sta.z mul8u.a
    // [184] (byte) mul8u::b#1 ← (byte) mulu8_sel::v2#5 -- vbuz1=vbuz2 
    lda.z v2
    sta.z mul8u.b
    // [185] call mul8u 
    // [128] phi from mulu8_sel to mul8u [phi:mulu8_sel->mul8u]
  mul8u_from_mulu8_sel:
    // [128] phi (byte) mul8u::a#6 = (byte) mul8u::a#2 [phi:mulu8_sel->mul8u#0] -- register_copy 
    // [128] phi (byte) mul8u::b#2 = (byte) mul8u::b#1 [phi:mulu8_sel->mul8u#1] -- register_copy 
    jsr mul8u
    // [186] (word) mul8u::return#3 ← (word) mul8u::res#2 -- vwuz1=vwuz2 
    lda.z mul8u.res
    sta.z mul8u.return_1
    lda.z mul8u.res+1
    sta.z mul8u.return_1+1
    jmp __b1
    // mulu8_sel::@1
  __b1:
    // [187] (word~) mulu8_sel::$0 ← (word) mul8u::return#3 -- vwuz1=vwuz2 
    lda.z mul8u.return_1
    sta.z __0
    lda.z mul8u.return_1+1
    sta.z __0+1
    // [188] (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5 -- vwuz1=vwuz2_rol_vbuz3 
    lda.z __0
    sta.z __1
    lda.z __0+1
    sta.z __1+1
    ldy.z select
    beq !e+
  !:
    asl.z __1
    rol.z __1+1
    dey
    bne !-
  !e:
    // [189] (byte) mulu8_sel::return#12 ← > (word~) mulu8_sel::$1 -- vbuz1=_hi_vwuz2 
    lda.z __1+1
    sta.z return_5
    jmp __breturn
    // mulu8_sel::@return
  __breturn:
    // [190] return 
    rts
}
  // div16u
// Performs division on two 16 bit unsigned ints
// Returns the quotient dividend/divisor.
// The remainder will be set into the global variable rem16u
// Implemented using simple binary division
div16u: {
    .label return = $58
    .label return_1 = $2e
    // [192] call divr16u 
    // [196] phi from div16u to divr16u [phi:div16u->divr16u]
  divr16u_from_div16u:
    jsr divr16u
    // [193] (word) divr16u::return#2 ← (word) divr16u::return#0 -- vwuz1=vwuz2 
    lda.z divr16u.return
    sta.z divr16u.return_1
    lda.z divr16u.return+1
    sta.z divr16u.return_1+1
    jmp __b1
    // div16u::@1
  __b1:
    // [194] (word) div16u::return#0 ← (word) divr16u::return#2 -- vwuz1=vwuz2 
    lda.z divr16u.return_1
    sta.z return
    lda.z divr16u.return_1+1
    sta.z return+1
    jmp __breturn
    // div16u::@return
  __breturn:
    // [195] return 
    rts
}
  // divr16u
// Performs division on two 16 bit unsigned ints and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
// divr16u(word zp($27) dividend, word zp($25) rem)
divr16u: {
    .label __1 = $5a
    .label __2 = $5b
    .label rem = $25
    .label dividend = $27
    .label quotient = $29
    .label i = $2b
    .label return = $29
    .label return_1 = $56
    // [197] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
  __b1_from_divr16u:
    // [197] phi (byte) divr16u::i#2 = (byte) 0 [phi:divr16u->divr16u::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [197] phi (word) divr16u::quotient#3 = (word) 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z quotient
    lda #>0
    sta.z quotient+1
    // [197] phi (word) divr16u::dividend#2 = (const nomodify word) PI2_u4f12 [phi:divr16u->divr16u::@1#2] -- vwuz1=vwuc1 
    lda #<PI2_u4f12
    sta.z dividend
    lda #>PI2_u4f12
    sta.z dividend+1
    // [197] phi (word) divr16u::rem#4 = (byte) 0 [phi:divr16u->divr16u::@1#3] -- vwuz1=vbuc1 
    lda #<0
    sta.z rem
    lda #>0
    sta.z rem+1
    jmp __b1
    // [197] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
  __b1_from___b3:
    // [197] phi (byte) divr16u::i#2 = (byte) divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
    // [197] phi (word) divr16u::quotient#3 = (word) divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
    // [197] phi (word) divr16u::dividend#2 = (word) divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
    // [197] phi (word) divr16u::rem#4 = (word) divr16u::rem#9 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    jmp __b1
    // divr16u::@1
  __b1:
    // [198] (word) divr16u::rem#0 ← (word) divr16u::rem#4 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z rem
    rol.z rem+1
    // [199] (byte~) divr16u::$1 ← > (word) divr16u::dividend#2 -- vbuz1=_hi_vwuz2 
    lda.z dividend+1
    sta.z __1
    // [200] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80 -- vbuz1=vbuz2_band_vbuc1 
    lda #$80
    and.z __1
    sta.z __2
    // [201] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2 -- vbuz1_eq_0_then_la1 
    lda.z __2
    cmp #0
    beq __b2_from___b1
    jmp __b4
    // divr16u::@4
  __b4:
    // [202] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora.z rem
    sta.z rem
    // [203] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
  __b2_from___b1:
  __b2_from___b4:
    // [203] phi (word) divr16u::rem#5 = (word) divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    jmp __b2
    // divr16u::@2
  __b2:
    // [204] (word) divr16u::dividend#0 ← (word) divr16u::dividend#2 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z dividend
    rol.z dividend+1
    // [205] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z quotient
    rol.z quotient+1
    // [206] if((word) divr16u::rem#5<(const word) main::tabsize) goto divr16u::@3 -- vwuz1_lt_vwuc1_then_la1 
    lda.z rem+1
    cmp #>main.tabsize
    bcc __b3_from___b2
    bne !+
    lda.z rem
    cmp #<main.tabsize
    bcc __b3_from___b2
  !:
    jmp __b5
    // divr16u::@5
  __b5:
    // [207] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc.z quotient
    bne !+
    inc.z quotient+1
  !:
    // [208] (word) divr16u::rem#2 ← (word) divr16u::rem#5 - (const word) main::tabsize -- vwuz1=vwuz1_minus_vwuc1 
    lda.z rem
    sec
    sbc #<main.tabsize
    sta.z rem
    lda.z rem+1
    sbc #>main.tabsize
    sta.z rem+1
    // [209] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
  __b3_from___b2:
  __b3_from___b5:
    // [209] phi (word) divr16u::return#0 = (word) divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
    // [209] phi (word) divr16u::rem#9 = (word) divr16u::rem#5 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    jmp __b3
    // divr16u::@3
  __b3:
    // [210] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [211] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$10
    cmp.z i
    bne __b1_from___b3
    jmp __breturn
    // divr16u::@return
  __breturn:
    // [212] return 
    rts
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // [214] call memset 
    // [216] phi from print_cls to memset [phi:print_cls->memset]
  memset_from_print_cls:
    jsr memset
    jmp __breturn
    // print_cls::@return
  __breturn:
    // [215] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = $400
    .label end = str+num
    .label dst = $2c
    // [217] phi from memset to memset::@1 [phi:memset->memset::@1]
  __b1_from_memset:
    // [217] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    jmp __b1
    // memset::@1
  __b1:
    // [218] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    jmp __breturn
    // memset::@return
  __breturn:
    // [219] return 
    rts
    // memset::@2
  __b2:
    // [220] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // [221] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [217] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
  __b1_from___b2:
    // [217] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
  print_hextab: .text "0123456789abcdef"

REGISTER UPLIFT POTENTIAL REGISTERS
Equivalence Class zp[1]:55 [ sin8u_table::$20 ] has ALU potential.
Statement [11] (word) div16u::return#2 ← (word) div16u::return#0 [ div16u::return#2 ] ( main:2::sin8u_table:7 [ div16u::return#2 ] { { div16u::return#0 = div16u::return#2 } }  ) always clobbers reg byte a 
Statement [12] (word) sin8u_table::step#0 ← (word) div16u::return#2 [ sin8u_table::step#0 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 ] { }  ) always clobbers reg byte a 
Statement [14] (word) print_uint::w#1 ← (word) sin8u_table::step#0 [ sin8u_table::step#0 print_uint::w#1 print_char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 print_uint::w#1 print_char_cursor#2 ] { { print_uint::w#1 = print_uint::w#3 sin8u_table::step#0 } { print_char_cursor#103 = print_char_cursor#2 } }  ) always clobbers reg byte a 
Statement [35] if((word) sin8u_table::i#10<(const word) main::tabsize) goto sin8u_table::@2 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 ] { }  ) always clobbers reg byte a 
Statement [37] (word) sin8s::x#2 ← (word) sin8u_table::x#10 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8s::x#2 print_line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8s::x#2 print_line_cursor#1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } }  ) always clobbers reg byte a 
Statement [43] (signed word) sin8u_table::sinx_sc#0 ← (signed word)(word) mul8su::m#2 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 print_line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 print_line_cursor#1 ] { { print_char_cursor#110 = print_char_cursor#117 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:51 [ sin8u_table::sinx#0 ]
Statement [46] *((byte*) sin8u_table::sintab#2) ← (byte) sin8u_table::sinx_tr#0 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 ] { { print_char_cursor#110 = print_char_cursor#117 } }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:51 [ sin8u_table::sinx#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:56 [ sin8u_table::sinx_tr#0 ]
Statement [48] (byte*) print_char_cursor#117 ← (byte*) print_line_cursor#1 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_char_cursor#117 print_line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_char_cursor#117 print_line_cursor#1 ] { { print_char_cursor#110 = print_char_cursor#117 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:56 [ sin8u_table::sinx_tr#0 ]
Statement [50] (word) print_uint::w#2 ← (word) sin8u_table::x#10 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_uint::w#2 print_char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_uint::w#2 print_char_cursor#2 ] { { print_uint::w#2 = print_uint::w#3 sin8u_table::x#10 } { print_char_cursor#103 = print_char_cursor#2 } }  ) always clobbers reg byte a 
Statement [58] (signed word) print_sint::w#1 ← (signed word) sin8u_table::sinx_sc#0 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_sint::w#1 print_char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_sint::w#1 print_char_cursor#2 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } }  ) always clobbers reg byte a 
Statement [66] (word) sin8u_table::x#1 ← (word) sin8u_table::x#10 + (word) sin8u_table::step#0 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#1 sin8u_table::sintab#1 print_line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#1 sin8u_table::sintab#1 print_line_cursor#1 ] { }  ) always clobbers reg byte a 
Statement [70] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#12 + (byte) $28 [ print_line_cursor#1 print_char_cursor#19 ] ( main:2::sin8u_table:7::print_ln:33 [ sin8u_table::step#0 print_line_cursor#1 print_char_cursor#19 ] { }  main:2::sin8u_table:7::print_ln:65 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 print_line_cursor#1 print_char_cursor#19 ] { { print_line_cursor#1 = print_line_cursor#23 } }  ) always clobbers reg byte a 
Statement [71] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#19) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#19 ] ( main:2::sin8u_table:7::print_ln:33 [ sin8u_table::step#0 print_line_cursor#1 print_char_cursor#19 ] { }  main:2::sin8u_table:7::print_ln:65 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 print_line_cursor#1 print_char_cursor#19 ] { { print_line_cursor#1 = print_line_cursor#23 } }  ) always clobbers reg byte a 
Statement [74] (byte~) print_uchar::$0 ← (byte) print_uchar::b#8 >> (byte) 4 [ print_uchar::b#8 print_char_cursor#104 print_uchar::$0 ] ( main:2::sin8u_table:7::print_uchar:19 [ sin8u_table::step#0 print_uchar::b#8 print_char_cursor#104 print_uchar::$0 ] { { print_char_cursor#104 = print_char_cursor#2 print_char_cursor#66 } { print_char::ch#5 = print_char::ch#7 } }  main:2::sin8u_table:7::print_uchar:23 [ sin8u_table::step#0 print_uchar::b#8 print_char_cursor#104 print_uchar::$0 ] { { print_char_cursor#104 = print_char_cursor#2 print_char_cursor#66 } { print_char::ch#5 = print_char::ch#7 } }  main:2::sin8u_table:7::print_uchar:27 [ sin8u_table::step#0 print_uchar::b#8 print_char_cursor#104 print_uchar::$0 ] { { print_char_cursor#104 = print_char_cursor#2 print_char_cursor#66 } { print_char::ch#5 = print_char::ch#7 } }  main:2::sin8u_table:7::print_uchar:31 [ sin8u_table::step#0 print_uchar::b#8 print_char_cursor#104 print_uchar::$0 ] { { print_char_cursor#104 = print_char_cursor#2 print_char_cursor#66 } { print_char::ch#5 = print_char::ch#7 } }  main:2::sin8u_table:7::print_uchar:63 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 print_line_cursor#1 print_uchar::b#8 print_char_cursor#104 print_uchar::$0 ] { { print_uchar::b#7 = print_uchar::b#8 sin8u_table::sinx_tr#0 } { print_char_cursor#104 = print_char_cursor#2 print_char_cursor#66 } { print_char::ch#5 = print_char::ch#7 } }  main:2::sin8u_table:7::print_uint:15::print_uchar:104 [ sin8u_table::step#0 print_uint::w#3 print_uchar::b#8 print_char_cursor#104 print_uchar::$0 ] { { print_uint::w#1 = print_uint::w#3 sin8u_table::step#0 } { print_char_cursor#103 = print_char_cursor#2 print_char_cursor#104 print_char_cursor#66 } { print_uchar::b#1 = print_uchar::b#8 } { print_char::ch#5 = print_char::ch#7 } }  main:2::sin8u_table:7::print_uint:51::print_uchar:104 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_uint::w#3 print_uchar::b#8 print_char_cursor#104 print_uchar::$0 ] { { print_uint::w#2 = print_uint::w#3 sin8u_table::x#10 } { print_char_cursor#103 = print_char_cursor#2 print_char_cursor#104 print_char_cursor#66 } { print_uchar::b#1 = print_uchar::b#8 } { print_char::ch#5 = print_char::ch#7 } }  main:2::sin8u_table:7::print_sint:59::print_uint:97::print_uchar:104 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_uint::w#3 print_uchar::b#8 print_char_cursor#104 print_uchar::$0 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } { print_uint::w#0 = print_uint::w#3 } { print_char_cursor#103 = print_char_cursor#19 print_char_cursor#104 print_char_cursor#66 } { print_uchar::b#1 = print_uchar::b#8 } { print_char::ch#5 = print_char::ch#7 } }  main:2::sin8u_table:7::print_uint:15::print_uchar:106 [ sin8u_table::step#0 print_uchar::b#8 print_char_cursor#104 print_uchar::$0 ] { { print_uint::w#1 = print_uint::w#3 sin8u_table::step#0 } { print_char_cursor#103 = print_char_cursor#2 } { print_uchar::b#2 = print_uchar::b#8 } { print_char_cursor#104 = print_char_cursor#19 print_char_cursor#66 } { print_char::ch#5 = print_char::ch#7 } }  main:2::sin8u_table:7::print_uint:51::print_uchar:106 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_uchar::b#8 print_char_cursor#104 print_uchar::$0 ] { { print_uint::w#2 = print_uint::w#3 sin8u_table::x#10 } { print_char_cursor#103 = print_char_cursor#2 } { print_uchar::b#2 = print_uchar::b#8 } { print_char_cursor#104 = print_char_cursor#19 print_char_cursor#66 } { print_char::ch#5 = print_char::ch#7 } }  main:2::sin8u_table:7::print_sint:59::print_uint:97::print_uchar:106 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_uchar::b#8 print_char_cursor#104 print_uchar::$0 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } { print_uint::w#0 = print_uint::w#3 } { print_char_cursor#103 = print_char_cursor#19 print_char_cursor#104 print_char_cursor#66 } { print_uchar::b#2 = print_uchar::b#8 } { print_char::ch#5 = print_char::ch#7 } }  main:2::sin8u_table:7::print_schar:55::print_uchar:113 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_uchar::b#8 print_char_cursor#104 print_uchar::$0 ] { { print_schar::b#1 = sin8u_table::sinx#0 } { print_uchar::b#0 = print_uchar::b#8 } { print_char_cursor#104 = print_char_cursor#19 print_char_cursor#66 } { print_char::ch#5 = print_char::ch#7 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:10 [ print_uchar::b#8 print_uchar::b#0 print_uchar::b#1 print_uchar::b#2 print_uchar::b#7 ]
Statement [77] (byte~) print_uchar::$2 ← (byte) print_uchar::b#8 & (byte) $f [ print_char_cursor#19 print_uchar::$2 ] ( main:2::sin8u_table:7::print_uchar:19 [ sin8u_table::step#0 print_char_cursor#19 print_uchar::$2 ] { { print_char_cursor#104 = print_char_cursor#2 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#19 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_uchar:23 [ sin8u_table::step#0 print_char_cursor#19 print_uchar::$2 ] { { print_char_cursor#104 = print_char_cursor#2 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#19 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_uchar:27 [ sin8u_table::step#0 print_char_cursor#19 print_uchar::$2 ] { { print_char_cursor#104 = print_char_cursor#2 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#19 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_uchar:31 [ sin8u_table::step#0 print_char_cursor#19 print_uchar::$2 ] { { print_char_cursor#104 = print_char_cursor#2 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#19 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_uchar:63 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 print_line_cursor#1 print_char_cursor#19 print_uchar::$2 ] { { print_uchar::b#7 = print_uchar::b#8 sin8u_table::sinx_tr#0 } { print_char_cursor#104 = print_char_cursor#2 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#19 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_uint:15::print_uchar:104 [ sin8u_table::step#0 print_uint::w#3 print_char_cursor#19 print_uchar::$2 ] { { print_uint::w#1 = print_uint::w#3 sin8u_table::step#0 } { print_char_cursor#103 = print_char_cursor#2 print_char_cursor#104 } { print_uchar::b#1 = print_uchar::b#8 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#19 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_uint:51::print_uchar:104 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_uint::w#3 print_char_cursor#19 print_uchar::$2 ] { { print_uint::w#2 = print_uint::w#3 sin8u_table::x#10 } { print_char_cursor#103 = print_char_cursor#2 print_char_cursor#104 } { print_uchar::b#1 = print_uchar::b#8 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#19 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_sint:59::print_uint:97::print_uchar:104 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_uint::w#3 print_char_cursor#19 print_uchar::$2 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } { print_uint::w#0 = print_uint::w#3 } { print_char_cursor#103 = print_char_cursor#19 print_char_cursor#104 print_char_cursor#66 } { print_uchar::b#1 = print_uchar::b#8 } { print_char::ch#6 = print_char::ch#7 } }  main:2::sin8u_table:7::print_uint:15::print_uchar:106 [ sin8u_table::step#0 print_char_cursor#19 print_uchar::$2 ] { { print_uint::w#1 = print_uint::w#3 sin8u_table::step#0 } { print_char_cursor#103 = print_char_cursor#2 } { print_uchar::b#2 = print_uchar::b#8 } { print_char_cursor#104 = print_char_cursor#19 print_char_cursor#66 } { print_char::ch#6 = print_char::ch#7 } }  main:2::sin8u_table:7::print_uint:51::print_uchar:106 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#19 print_uchar::$2 ] { { print_uint::w#2 = print_uint::w#3 sin8u_table::x#10 } { print_char_cursor#103 = print_char_cursor#2 } { print_uchar::b#2 = print_uchar::b#8 } { print_char_cursor#104 = print_char_cursor#19 print_char_cursor#66 } { print_char::ch#6 = print_char::ch#7 } }  main:2::sin8u_table:7::print_sint:59::print_uint:97::print_uchar:106 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#19 print_uchar::$2 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } { print_uint::w#0 = print_uint::w#3 } { print_char_cursor#103 = print_char_cursor#19 print_char_cursor#104 print_char_cursor#66 } { print_uchar::b#2 = print_uchar::b#8 } { print_char::ch#6 = print_char::ch#7 } }  main:2::sin8u_table:7::print_schar:55::print_uchar:113 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#19 print_uchar::$2 ] { { print_schar::b#1 = sin8u_table::sinx#0 } { print_uchar::b#0 = print_uchar::b#8 } { print_char_cursor#104 = print_char_cursor#19 print_char_cursor#66 } { print_char::ch#6 = print_char::ch#7 } }  ) always clobbers reg byte a 
Statement [82] *((byte*) print_char_cursor#66) ← (byte) print_char::ch#7 [ print_char_cursor#66 ] ( main:2::sin8u_table:7::print_uchar:19::print_char:76 [ sin8u_table::step#0 print_uchar::b#8 print_char_cursor#66 ] { { print_char_cursor#104 = print_char_cursor#2 print_char_cursor#66 } { print_char::ch#5 = print_char::ch#7 } }  main:2::sin8u_table:7::print_uchar:23::print_char:76 [ sin8u_table::step#0 print_uchar::b#8 print_char_cursor#66 ] { { print_char_cursor#104 = print_char_cursor#2 print_char_cursor#66 } { print_char::ch#5 = print_char::ch#7 } }  main:2::sin8u_table:7::print_uchar:27::print_char:76 [ sin8u_table::step#0 print_uchar::b#8 print_char_cursor#66 ] { { print_char_cursor#104 = print_char_cursor#2 print_char_cursor#66 } { print_char::ch#5 = print_char::ch#7 } }  main:2::sin8u_table:7::print_uchar:31::print_char:76 [ sin8u_table::step#0 print_uchar::b#8 print_char_cursor#66 ] { { print_char_cursor#104 = print_char_cursor#2 print_char_cursor#66 } { print_char::ch#5 = print_char::ch#7 } }  main:2::sin8u_table:7::print_uchar:63::print_char:76 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 print_line_cursor#1 print_uchar::b#8 print_char_cursor#66 ] { { print_uchar::b#7 = print_uchar::b#8 sin8u_table::sinx_tr#0 } { print_char_cursor#104 = print_char_cursor#2 print_char_cursor#66 } { print_char::ch#5 = print_char::ch#7 } }  main:2::sin8u_table:7::print_uint:15::print_uchar:104::print_char:76 [ sin8u_table::step#0 print_uint::w#3 print_uchar::b#8 print_char_cursor#66 ] { { print_uint::w#1 = print_uint::w#3 sin8u_table::step#0 } { print_char_cursor#103 = print_char_cursor#2 print_char_cursor#104 print_char_cursor#66 } { print_uchar::b#1 = print_uchar::b#8 } { print_char::ch#5 = print_char::ch#7 } }  main:2::sin8u_table:7::print_uint:51::print_uchar:104::print_char:76 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_uint::w#3 print_uchar::b#8 print_char_cursor#66 ] { { print_uint::w#2 = print_uint::w#3 sin8u_table::x#10 } { print_char_cursor#103 = print_char_cursor#2 print_char_cursor#104 print_char_cursor#66 } { print_uchar::b#1 = print_uchar::b#8 } { print_char::ch#5 = print_char::ch#7 } }  main:2::sin8u_table:7::print_sint:59::print_uint:97::print_uchar:104::print_char:76 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_uint::w#3 print_uchar::b#8 print_char_cursor#66 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } { print_uint::w#0 = print_uint::w#3 } { print_char_cursor#103 = print_char_cursor#19 print_char_cursor#104 print_char_cursor#66 } { print_uchar::b#1 = print_uchar::b#8 } { print_char::ch#5 = print_char::ch#7 } }  main:2::sin8u_table:7::print_uint:15::print_uchar:106::print_char:76 [ sin8u_table::step#0 print_uchar::b#8 print_char_cursor#66 ] { { print_uint::w#1 = print_uint::w#3 sin8u_table::step#0 } { print_char_cursor#103 = print_char_cursor#2 } { print_uchar::b#2 = print_uchar::b#8 } { print_char_cursor#104 = print_char_cursor#19 print_char_cursor#66 } { print_char::ch#5 = print_char::ch#7 } }  main:2::sin8u_table:7::print_uint:51::print_uchar:106::print_char:76 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_uchar::b#8 print_char_cursor#66 ] { { print_uint::w#2 = print_uint::w#3 sin8u_table::x#10 } { print_char_cursor#103 = print_char_cursor#2 } { print_uchar::b#2 = print_uchar::b#8 } { print_char_cursor#104 = print_char_cursor#19 print_char_cursor#66 } { print_char::ch#5 = print_char::ch#7 } }  main:2::sin8u_table:7::print_sint:59::print_uint:97::print_uchar:106::print_char:76 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_uchar::b#8 print_char_cursor#66 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } { print_uint::w#0 = print_uint::w#3 } { print_char_cursor#103 = print_char_cursor#19 print_char_cursor#104 print_char_cursor#66 } { print_uchar::b#2 = print_uchar::b#8 } { print_char::ch#5 = print_char::ch#7 } }  main:2::sin8u_table:7::print_schar:55::print_uchar:113::print_char:76 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_uchar::b#8 print_char_cursor#66 ] { { print_schar::b#1 = sin8u_table::sinx#0 } { print_uchar::b#0 = print_uchar::b#8 } { print_char_cursor#104 = print_char_cursor#19 print_char_cursor#66 } { print_char::ch#5 = print_char::ch#7 } }  main:2::sin8u_table:7::print_uchar:19::print_char:79 [ sin8u_table::step#0 print_char_cursor#66 ] { { print_char_cursor#104 = print_char_cursor#2 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#19 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_uchar:23::print_char:79 [ sin8u_table::step#0 print_char_cursor#66 ] { { print_char_cursor#104 = print_char_cursor#2 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#19 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_uchar:27::print_char:79 [ sin8u_table::step#0 print_char_cursor#66 ] { { print_char_cursor#104 = print_char_cursor#2 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#19 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_uchar:31::print_char:79 [ sin8u_table::step#0 print_char_cursor#66 ] { { print_char_cursor#104 = print_char_cursor#2 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#19 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_uchar:63::print_char:79 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 print_line_cursor#1 print_char_cursor#66 ] { { print_uchar::b#7 = print_uchar::b#8 sin8u_table::sinx_tr#0 } { print_char_cursor#104 = print_char_cursor#2 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#19 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_uint:15::print_uchar:104::print_char:79 [ sin8u_table::step#0 print_uint::w#3 print_char_cursor#66 ] { { print_uint::w#1 = print_uint::w#3 sin8u_table::step#0 } { print_char_cursor#103 = print_char_cursor#2 print_char_cursor#104 } { print_uchar::b#1 = print_uchar::b#8 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#19 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_uint:51::print_uchar:104::print_char:79 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_uint::w#3 print_char_cursor#66 ] { { print_uint::w#2 = print_uint::w#3 sin8u_table::x#10 } { print_char_cursor#103 = print_char_cursor#2 print_char_cursor#104 } { print_uchar::b#1 = print_uchar::b#8 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#19 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_sint:59::print_uint:97::print_uchar:104::print_char:79 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_uint::w#3 print_char_cursor#66 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } { print_uint::w#0 = print_uint::w#3 } { print_char_cursor#103 = print_char_cursor#19 print_char_cursor#104 print_char_cursor#66 } { print_uchar::b#1 = print_uchar::b#8 } { print_char::ch#6 = print_char::ch#7 } }  main:2::sin8u_table:7::print_uint:15::print_uchar:106::print_char:79 [ sin8u_table::step#0 print_char_cursor#66 ] { { print_uint::w#1 = print_uint::w#3 sin8u_table::step#0 } { print_char_cursor#103 = print_char_cursor#2 } { print_uchar::b#2 = print_uchar::b#8 } { print_char_cursor#104 = print_char_cursor#19 print_char_cursor#66 } { print_char::ch#6 = print_char::ch#7 } }  main:2::sin8u_table:7::print_uint:51::print_uchar:106::print_char:79 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#66 ] { { print_uint::w#2 = print_uint::w#3 sin8u_table::x#10 } { print_char_cursor#103 = print_char_cursor#2 } { print_uchar::b#2 = print_uchar::b#8 } { print_char_cursor#104 = print_char_cursor#19 print_char_cursor#66 } { print_char::ch#6 = print_char::ch#7 } }  main:2::sin8u_table:7::print_sint:59::print_uint:97::print_uchar:106::print_char:79 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#66 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } { print_uint::w#0 = print_uint::w#3 } { print_char_cursor#103 = print_char_cursor#19 print_char_cursor#104 print_char_cursor#66 } { print_uchar::b#2 = print_uchar::b#8 } { print_char::ch#6 = print_char::ch#7 } }  main:2::sin8u_table:7::print_schar:55::print_uchar:113::print_char:79 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#66 ] { { print_schar::b#1 = sin8u_table::sinx#0 } { print_uchar::b#0 = print_uchar::b#8 } { print_char_cursor#104 = print_char_cursor#19 print_char_cursor#66 } { print_char::ch#6 = print_char::ch#7 } }  main:2::sin8u_table:7::print_str:13::print_char:90 [ sin8u_table::step#0 print_str::str#10 print_char_cursor#66 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#2 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_str:17::print_char:90 [ sin8u_table::step#0 print_str::str#10 print_char_cursor#66 ] { { print_char_cursor#110 = print_char_cursor#19 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#2 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_str:21::print_char:90 [ sin8u_table::step#0 print_str::str#10 print_char_cursor#66 ] { { print_char_cursor#110 = print_char_cursor#19 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#2 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_str:25::print_char:90 [ sin8u_table::step#0 print_str::str#10 print_char_cursor#66 ] { { print_char_cursor#110 = print_char_cursor#19 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#2 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_str:29::print_char:90 [ sin8u_table::step#0 print_str::str#10 print_char_cursor#66 ] { { print_char_cursor#110 = print_char_cursor#19 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#2 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_str:49::print_char:90 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_str::str#10 print_char_cursor#66 ] { { print_char_cursor#110 = print_char_cursor#117 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#2 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_str:53::print_char:90 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_str::str#10 print_char_cursor#66 ] { { print_char_cursor#110 = print_char_cursor#19 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#2 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_str:57::print_char:90 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_str::str#10 print_char_cursor#66 ] { { print_char_cursor#110 = print_char_cursor#19 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#2 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_str:61::print_char:90 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_str::str#10 print_char_cursor#66 ] { { print_char_cursor#110 = print_char_cursor#19 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#2 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_sint:59::print_char:94 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_sint::w#1 print_char_cursor#66 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } { print_char_cursor#2 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_sint:59::print_char:100 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_sint::w#1 print_char_cursor#66 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } { print_char_cursor#2 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_schar:55::print_char:110 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_schar::b#1 print_char_cursor#66 ] { { print_schar::b#1 = sin8u_table::sinx#0 } { print_char_cursor#2 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_schar:55::print_char:116 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_schar::b#1 print_char_cursor#66 ] { { print_schar::b#1 = sin8u_table::sinx#0 } { print_char_cursor#2 = print_char_cursor#66 } }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:10 [ print_uchar::b#8 print_uchar::b#0 print_uchar::b#1 print_uchar::b#2 print_uchar::b#7 ]
Removing always clobbered register reg byte y as potential for zp[1]:20 [ print_schar::b#4 print_schar::b#0 print_schar::b#1 ]
Statement [87] if((byte) 0!=*((byte*) print_str::str#10)) goto print_str::@2 [ print_char_cursor#2 print_str::str#10 ] ( main:2::sin8u_table:7::print_str:13 [ sin8u_table::step#0 print_char_cursor#2 print_str::str#10 ] { }  main:2::sin8u_table:7::print_str:17 [ sin8u_table::step#0 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#110 = print_char_cursor#19 } }  main:2::sin8u_table:7::print_str:21 [ sin8u_table::step#0 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#110 = print_char_cursor#19 } }  main:2::sin8u_table:7::print_str:25 [ sin8u_table::step#0 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#110 = print_char_cursor#19 } }  main:2::sin8u_table:7::print_str:29 [ sin8u_table::step#0 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#110 = print_char_cursor#19 } }  main:2::sin8u_table:7::print_str:49 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#110 = print_char_cursor#117 } }  main:2::sin8u_table:7::print_str:53 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#110 = print_char_cursor#19 } }  main:2::sin8u_table:7::print_str:57 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#110 = print_char_cursor#19 } }  main:2::sin8u_table:7::print_str:61 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#110 = print_char_cursor#19 } }  ) always clobbers reg byte a reg byte y 
Statement [89] (byte) print_char::ch#0 ← *((byte*) print_str::str#10) [ print_char_cursor#2 print_char::ch#0 print_str::str#10 ] ( main:2::sin8u_table:7::print_str:13 [ sin8u_table::step#0 print_char_cursor#2 print_char::ch#0 print_str::str#10 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#2 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_str:17 [ sin8u_table::step#0 print_char_cursor#2 print_char::ch#0 print_str::str#10 ] { { print_char_cursor#110 = print_char_cursor#19 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#2 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_str:21 [ sin8u_table::step#0 print_char_cursor#2 print_char::ch#0 print_str::str#10 ] { { print_char_cursor#110 = print_char_cursor#19 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#2 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_str:25 [ sin8u_table::step#0 print_char_cursor#2 print_char::ch#0 print_str::str#10 ] { { print_char_cursor#110 = print_char_cursor#19 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#2 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_str:29 [ sin8u_table::step#0 print_char_cursor#2 print_char::ch#0 print_str::str#10 ] { { print_char_cursor#110 = print_char_cursor#19 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#2 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_str:49 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#2 print_char::ch#0 print_str::str#10 ] { { print_char_cursor#110 = print_char_cursor#117 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#2 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_str:53 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#2 print_char::ch#0 print_str::str#10 ] { { print_char_cursor#110 = print_char_cursor#19 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#2 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_str:57 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#2 print_char::ch#0 print_str::str#10 ] { { print_char_cursor#110 = print_char_cursor#19 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#2 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_str:61 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#2 print_char::ch#0 print_str::str#10 ] { { print_char_cursor#110 = print_char_cursor#19 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#2 = print_char_cursor#66 } }  ) always clobbers reg byte a reg byte y 
Statement [92] if((signed word) print_sint::w#1<(signed byte) 0) goto print_sint::@1 [ print_sint::w#1 print_char_cursor#2 ] ( main:2::sin8u_table:7::print_sint:59 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_sint::w#1 print_char_cursor#2 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } }  ) always clobbers reg byte a 
Statement [96] (word) print_uint::w#0 ← (word)(signed word) print_sint::w#4 [ print_char_cursor#19 print_uint::w#0 ] ( main:2::sin8u_table:7::print_sint:59 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#19 print_uint::w#0 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } { print_uint::w#0 = print_uint::w#3 } { print_char_cursor#103 = print_char_cursor#19 } }  ) always clobbers reg byte a 
Statement [101] (signed word) print_sint::w#0 ← - (signed word) print_sint::w#1 [ print_char_cursor#19 print_sint::w#0 ] ( main:2::sin8u_table:7::print_sint:59 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#19 print_sint::w#0 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } }  ) always clobbers reg byte a 
Statement [117] (signed byte) print_schar::b#0 ← - (signed byte) print_schar::b#1 [ print_char_cursor#19 print_schar::b#0 ] ( main:2::sin8u_table:7::print_schar:55 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#19 print_schar::b#0 ] { { print_schar::b#1 = sin8u_table::sinx#0 } }  ) always clobbers reg byte a 
Statement [120] (word) mul8u::return#2 ← (word) mul8u::res#2 [ mul8su::a#0 mul8u::return#2 ] ( main:2::sin8u_table:7::mul8su:42 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 print_line_cursor#1 mul8su::a#0 mul8u::return#2 ] { { mul8su::a#0 = sin8u_table::sinx#0 } { mul8u::a#1 = mul8u::a#6 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:52 [ mul8su::a#0 ]
Statement [121] (word) mul8su::m#0 ← (word) mul8u::return#2 [ mul8su::a#0 mul8su::m#0 ] ( main:2::sin8u_table:7::mul8su:42 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 print_line_cursor#1 mul8su::a#0 mul8su::m#0 ] { { mul8su::a#0 = sin8u_table::sinx#0 } }  ) always clobbers reg byte a 
Statement [129] (word) mul8u::mb#0 ← (word)(byte) mul8u::b#2 [ mul8u::a#6 mul8u::mb#0 ] ( main:2::sin8u_table:7::mul8su:42::mul8u:119 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 print_line_cursor#1 mul8su::a#0 mul8u::a#6 mul8u::mb#0 ] { { mul8su::a#0 = sin8u_table::sinx#0 } { mul8u::a#1 = mul8u::a#6 } { mul8u::return#2 = mul8u::res#2 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:149::mul8u:185 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#6 mul8u::mb#0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#0 = mulu8_sel::return#12 } { mul8u::a#2 = mul8u::a#6 mul8u::b#2 mul8u::b#1 mulu8_sel::v2#5 mulu8_sel::v2#0 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 } { mul8u::return#3 = mul8u::res#2 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:154::mul8u:185 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#6 mul8u::mb#0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#1 = mulu8_sel::return#12 } { mul8u::b#1 = mul8u::b#2 mulu8_sel::v2#5 mulu8_sel::v2#1 sin8s::x1#0 } { mul8u::a#2 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#1 sin8s::x2#0 } { mul8u::return#3 = mul8u::res#2 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:158::mul8u:185 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::a#6 mul8u::mb#0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#12 = mulu8_sel::return#2 } { mul8u::b#1 = mul8u::b#2 mulu8_sel::v2#5 } { mul8u::a#2 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#2 sin8s::x3#0 } { mul8u::return#3 = mul8u::res#2 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:164::mul8u:185 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#6 mul8u::mb#0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#10 = mulu8_sel::return#12 } { mul8u::b#1 = mul8u::b#2 mulu8_sel::v2#5 mulu8_sel::v2#3 sin8s::x1#0 } { mul8u::a#2 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#3 sin8s::x3#0 } { mul8u::return#3 = mul8u::res#2 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:169::mul8u:185 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#6 mul8u::mb#0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#11 = mulu8_sel::return#12 } { mul8u::b#1 = mul8u::b#2 mulu8_sel::v2#5 mulu8_sel::v2#4 sin8s::x1#0 } { mul8u::a#2 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#4 sin8s::x4#0 } { mul8u::return#3 = mul8u::res#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:24 [ mul8u::a#3 mul8u::a#6 mul8u::a#1 mul8u::a#2 mul8u::a#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:29 [ sin8s::isUpper#10 ]
Removing always clobbered register reg byte a as potential for zp[1]:66 [ sin8s::x1#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:36 [ mulu8_sel::select#5 ]
Removing always clobbered register reg byte a as potential for zp[1]:70 [ sin8s::x3#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:73 [ sin8s::usinx#0 ]
Statement [133] (byte~) mul8u::$1 ← (byte) mul8u::a#3 & (byte) 1 [ mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] ( main:2::sin8u_table:7::mul8su:42::mul8u:119 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 print_line_cursor#1 mul8su::a#0 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] { { mul8su::a#0 = sin8u_table::sinx#0 } { mul8u::a#1 = mul8u::a#6 } { mul8u::return#2 = mul8u::res#2 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:149::mul8u:185 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#0 = mulu8_sel::return#12 } { mul8u::a#2 = mul8u::a#6 mul8u::b#2 mul8u::b#1 mulu8_sel::v2#5 mulu8_sel::v2#0 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 } { mul8u::return#3 = mul8u::res#2 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:154::mul8u:185 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#1 = mulu8_sel::return#12 } { mul8u::b#1 = mul8u::b#2 mulu8_sel::v2#5 mulu8_sel::v2#1 sin8s::x1#0 } { mul8u::a#2 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#1 sin8s::x2#0 } { mul8u::return#3 = mul8u::res#2 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:158::mul8u:185 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#12 = mulu8_sel::return#2 } { mul8u::b#1 = mul8u::b#2 mulu8_sel::v2#5 } { mul8u::a#2 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#2 sin8s::x3#0 } { mul8u::return#3 = mul8u::res#2 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:164::mul8u:185 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#10 = mulu8_sel::return#12 } { mul8u::b#1 = mul8u::b#2 mulu8_sel::v2#5 mulu8_sel::v2#3 sin8s::x1#0 } { mul8u::a#2 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#3 sin8s::x3#0 } { mul8u::return#3 = mul8u::res#2 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:169::mul8u:185 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#11 = mulu8_sel::return#12 } { mul8u::b#1 = mul8u::b#2 mulu8_sel::v2#5 mulu8_sel::v2#4 sin8s::x1#0 } { mul8u::a#2 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#4 sin8s::x4#0 } { mul8u::return#3 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [135] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 [ mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] ( main:2::sin8u_table:7::mul8su:42::mul8u:119 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 print_line_cursor#1 mul8su::a#0 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] { { mul8su::a#0 = sin8u_table::sinx#0 } { mul8u::a#1 = mul8u::a#6 } { mul8u::return#2 = mul8u::res#2 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:149::mul8u:185 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#0 = mulu8_sel::return#12 } { mul8u::a#2 = mul8u::a#6 mul8u::b#2 mul8u::b#1 mulu8_sel::v2#5 mulu8_sel::v2#0 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 } { mul8u::return#3 = mul8u::res#2 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:154::mul8u:185 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#1 = mulu8_sel::return#12 } { mul8u::b#1 = mul8u::b#2 mulu8_sel::v2#5 mulu8_sel::v2#1 sin8s::x1#0 } { mul8u::a#2 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#1 sin8s::x2#0 } { mul8u::return#3 = mul8u::res#2 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:158::mul8u:185 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#12 = mulu8_sel::return#2 } { mul8u::b#1 = mul8u::b#2 mulu8_sel::v2#5 } { mul8u::a#2 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#2 sin8s::x3#0 } { mul8u::return#3 = mul8u::res#2 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:164::mul8u:185 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#10 = mulu8_sel::return#12 } { mul8u::b#1 = mul8u::b#2 mulu8_sel::v2#5 mulu8_sel::v2#3 sin8s::x1#0 } { mul8u::a#2 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#3 sin8s::x3#0 } { mul8u::return#3 = mul8u::res#2 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:169::mul8u:185 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#11 = mulu8_sel::return#12 } { mul8u::b#1 = mul8u::b#2 mulu8_sel::v2#5 mulu8_sel::v2#4 sin8s::x1#0 } { mul8u::a#2 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#4 sin8s::x4#0 } { mul8u::return#3 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [139] if((word) sin8s::x#2<(const nomodify word) PI_u4f12) goto sin8s::@1 [ sin8s::x#2 ] ( main:2::sin8u_table:7::sin8s:38 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::x#2 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } }  ) always clobbers reg byte a 
Statement [140] (word) sin8s::x#0 ← (word) sin8s::x#2 - (const nomodify word) PI_u4f12 [ sin8s::x#0 ] ( main:2::sin8u_table:7::sin8s:38 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::x#0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } }  ) always clobbers reg byte a 
Statement [142] if((word) sin8s::x#4<(const nomodify word) PI_HALF_u4f12) goto sin8s::@2 [ sin8s::x#4 sin8s::isUpper#10 ] ( main:2::sin8u_table:7::sin8s:38 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::x#4 sin8s::isUpper#10 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } }  ) always clobbers reg byte a 
Statement [143] (word) sin8s::x#1 ← (const nomodify word) PI_u4f12 - (word) sin8s::x#4 [ sin8s::isUpper#10 sin8s::x#1 ] ( main:2::sin8u_table:7::sin8s:38 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x#1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } }  ) always clobbers reg byte a 
Statement [145] (word~) sin8s::$4 ← (word) sin8s::x#6 << (byte) 3 [ sin8s::isUpper#10 sin8s::$4 ] ( main:2::sin8u_table:7::sin8s:38 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::$4 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } }  ) always clobbers reg byte a 
Statement [161] (byte) sin8s::usinx#0 ← (byte) sin8s::x1#0 - (byte) sin8s::x3_6#0 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::usinx#0 ] ( main:2::sin8u_table:7::sin8s:38 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::usinx#0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } }  ) always clobbers reg byte a 
Statement [172] (byte) sin8s::x5_128#0 ← (byte) sin8s::x5#0 >> (byte) 4 [ sin8s::isUpper#10 sin8s::usinx#0 sin8s::x5_128#0 ] ( main:2::sin8u_table:7::sin8s:38 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 sin8s::x5_128#0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } }  ) always clobbers reg byte a 
Statement [173] (byte) sin8s::usinx#1 ← (byte) sin8s::usinx#0 + (byte) sin8s::x5_128#0 [ sin8s::isUpper#10 sin8s::usinx#1 ] ( main:2::sin8u_table:7::sin8s:38 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::usinx#1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } }  ) always clobbers reg byte a 
Statement [178] (signed byte) sin8s::sinx#1 ← - (signed byte)(byte) sin8s::usinx#4 [ sin8s::sinx#1 ] ( main:2::sin8u_table:7::sin8s:38 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::sinx#1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } }  ) always clobbers reg byte a 
Statement [186] (word) mul8u::return#3 ← (word) mul8u::res#2 [ mulu8_sel::select#5 mul8u::return#3 ] ( main:2::sin8u_table:7::sin8s:38::mulu8_sel:149 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::return#3 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#0 = mulu8_sel::return#12 } { mul8u::a#2 = mul8u::a#6 mul8u::b#2 mul8u::b#1 mulu8_sel::v2#5 mulu8_sel::v2#0 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 } { mul8u::return#3 = mul8u::res#2 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:154 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::return#3 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#1 = mulu8_sel::return#12 } { mul8u::b#1 = mul8u::b#2 mulu8_sel::v2#5 mulu8_sel::v2#1 sin8s::x1#0 } { mul8u::a#2 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#1 sin8s::x2#0 } { mul8u::return#3 = mul8u::res#2 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:158 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::return#3 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#12 = mulu8_sel::return#2 } { mul8u::b#1 = mul8u::b#2 mulu8_sel::v2#5 } { mul8u::a#2 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#2 sin8s::x3#0 } { mul8u::return#3 = mul8u::res#2 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:164 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::return#3 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#10 = mulu8_sel::return#12 } { mul8u::b#1 = mul8u::b#2 mulu8_sel::v2#5 mulu8_sel::v2#3 sin8s::x1#0 } { mul8u::a#2 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#3 sin8s::x3#0 } { mul8u::return#3 = mul8u::res#2 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:169 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::return#3 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#11 = mulu8_sel::return#12 } { mul8u::b#1 = mul8u::b#2 mulu8_sel::v2#5 mulu8_sel::v2#4 sin8s::x1#0 } { mul8u::a#2 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#4 sin8s::x4#0 } { mul8u::return#3 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [187] (word~) mulu8_sel::$0 ← (word) mul8u::return#3 [ mulu8_sel::select#5 mulu8_sel::$0 ] ( main:2::sin8u_table:7::sin8s:38::mulu8_sel:149 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mulu8_sel::$0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:154 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mulu8_sel::$0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::v1#1 = mulu8_sel::v1#5 sin8s::x2#0 } { mulu8_sel::v2#1 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#1 = mulu8_sel::return#12 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:158 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mulu8_sel::$0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::v1#2 = mulu8_sel::v1#5 sin8s::x3#0 } { mulu8_sel::return#12 = mulu8_sel::return#2 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:164 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mulu8_sel::$0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:169 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mulu8_sel::$0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::v1#4 = mulu8_sel::v1#5 sin8s::x4#0 } { mulu8_sel::v2#4 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#11 = mulu8_sel::return#12 } }  ) always clobbers reg byte a 
Statement [188] (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5 [ mulu8_sel::$1 ] ( main:2::sin8u_table:7::sin8s:38::mulu8_sel:149 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::$1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:154 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::$1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::v1#1 = mulu8_sel::v1#5 sin8s::x2#0 } { mulu8_sel::v2#1 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#1 = mulu8_sel::return#12 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:158 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::$1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::v1#2 = mulu8_sel::v1#5 sin8s::x3#0 } { mulu8_sel::return#12 = mulu8_sel::return#2 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:164 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::$1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:169 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::$1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::v1#4 = mulu8_sel::v1#5 sin8s::x4#0 } { mulu8_sel::v2#4 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#11 = mulu8_sel::return#12 } }  ) always clobbers reg byte a 
Statement [193] (word) divr16u::return#2 ← (word) divr16u::return#0 [ divr16u::return#2 ] ( main:2::sin8u_table:7::div16u:10 [ divr16u::return#2 ] { { div16u::return#0 = div16u::return#2 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [194] (word) div16u::return#0 ← (word) divr16u::return#2 [ div16u::return#0 ] ( main:2::sin8u_table:7::div16u:10 [ div16u::return#0 ] { { div16u::return#0 = div16u::return#2 } }  ) always clobbers reg byte a 
Statement [202] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( main:2::sin8u_table:7::div16u:10::divr16u:192 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] { { div16u::return#0 = div16u::return#2 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:43 [ divr16u::i#2 divr16u::i#1 ]
Statement [206] if((word) divr16u::rem#5<(const word) main::tabsize) goto divr16u::@3 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ( main:2::sin8u_table:7::div16u:10::divr16u:192 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] { { div16u::return#0 = div16u::return#2 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [208] (word) divr16u::rem#2 ← (word) divr16u::rem#5 - (const word) main::tabsize [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( main:2::sin8u_table:7::div16u:10::divr16u:192 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] { { div16u::return#0 = div16u::return#2 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [218] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 [ memset::dst#2 ] ( main:2::print_cls:5::memset:214 [ memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [220] *((byte*) memset::dst#2) ← (const byte) memset::c#0 [ memset::dst#2 ] ( main:2::print_cls:5::memset:214 [ memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [11] (word) div16u::return#2 ← (word) div16u::return#0 [ div16u::return#2 ] ( main:2::sin8u_table:7 [ div16u::return#2 ] { { div16u::return#0 = div16u::return#2 } }  ) always clobbers reg byte a 
Statement [12] (word) sin8u_table::step#0 ← (word) div16u::return#2 [ sin8u_table::step#0 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 ] { }  ) always clobbers reg byte a 
Statement [14] (word) print_uint::w#1 ← (word) sin8u_table::step#0 [ sin8u_table::step#0 print_uint::w#1 print_char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 print_uint::w#1 print_char_cursor#2 ] { { print_uint::w#1 = print_uint::w#3 sin8u_table::step#0 } { print_char_cursor#103 = print_char_cursor#2 } }  ) always clobbers reg byte a 
Statement [35] if((word) sin8u_table::i#10<(const word) main::tabsize) goto sin8u_table::@2 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 ] { }  ) always clobbers reg byte a 
Statement [37] (word) sin8s::x#2 ← (word) sin8u_table::x#10 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8s::x#2 print_line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8s::x#2 print_line_cursor#1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } }  ) always clobbers reg byte a 
Statement [43] (signed word) sin8u_table::sinx_sc#0 ← (signed word)(word) mul8su::m#2 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 print_line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 print_line_cursor#1 ] { { print_char_cursor#110 = print_char_cursor#117 } }  ) always clobbers reg byte a 
Statement [46] *((byte*) sin8u_table::sintab#2) ← (byte) sin8u_table::sinx_tr#0 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 ] { { print_char_cursor#110 = print_char_cursor#117 } }  ) always clobbers reg byte a reg byte y 
Statement [48] (byte*) print_char_cursor#117 ← (byte*) print_line_cursor#1 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_char_cursor#117 print_line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_char_cursor#117 print_line_cursor#1 ] { { print_char_cursor#110 = print_char_cursor#117 } }  ) always clobbers reg byte a 
Statement [50] (word) print_uint::w#2 ← (word) sin8u_table::x#10 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_uint::w#2 print_char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_uint::w#2 print_char_cursor#2 ] { { print_uint::w#2 = print_uint::w#3 sin8u_table::x#10 } { print_char_cursor#103 = print_char_cursor#2 } }  ) always clobbers reg byte a 
Statement [58] (signed word) print_sint::w#1 ← (signed word) sin8u_table::sinx_sc#0 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_sint::w#1 print_char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_sint::w#1 print_char_cursor#2 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } }  ) always clobbers reg byte a 
Statement [66] (word) sin8u_table::x#1 ← (word) sin8u_table::x#10 + (word) sin8u_table::step#0 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#1 sin8u_table::sintab#1 print_line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#1 sin8u_table::sintab#1 print_line_cursor#1 ] { }  ) always clobbers reg byte a 
Statement [70] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#12 + (byte) $28 [ print_line_cursor#1 print_char_cursor#19 ] ( main:2::sin8u_table:7::print_ln:33 [ sin8u_table::step#0 print_line_cursor#1 print_char_cursor#19 ] { }  main:2::sin8u_table:7::print_ln:65 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 print_line_cursor#1 print_char_cursor#19 ] { { print_line_cursor#1 = print_line_cursor#23 } }  ) always clobbers reg byte a 
Statement [71] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#19) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#19 ] ( main:2::sin8u_table:7::print_ln:33 [ sin8u_table::step#0 print_line_cursor#1 print_char_cursor#19 ] { }  main:2::sin8u_table:7::print_ln:65 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 print_line_cursor#1 print_char_cursor#19 ] { { print_line_cursor#1 = print_line_cursor#23 } }  ) always clobbers reg byte a 
Statement [74] (byte~) print_uchar::$0 ← (byte) print_uchar::b#8 >> (byte) 4 [ print_uchar::b#8 print_char_cursor#104 print_uchar::$0 ] ( main:2::sin8u_table:7::print_uchar:19 [ sin8u_table::step#0 print_uchar::b#8 print_char_cursor#104 print_uchar::$0 ] { { print_char_cursor#104 = print_char_cursor#2 print_char_cursor#66 } { print_char::ch#5 = print_char::ch#7 } }  main:2::sin8u_table:7::print_uchar:23 [ sin8u_table::step#0 print_uchar::b#8 print_char_cursor#104 print_uchar::$0 ] { { print_char_cursor#104 = print_char_cursor#2 print_char_cursor#66 } { print_char::ch#5 = print_char::ch#7 } }  main:2::sin8u_table:7::print_uchar:27 [ sin8u_table::step#0 print_uchar::b#8 print_char_cursor#104 print_uchar::$0 ] { { print_char_cursor#104 = print_char_cursor#2 print_char_cursor#66 } { print_char::ch#5 = print_char::ch#7 } }  main:2::sin8u_table:7::print_uchar:31 [ sin8u_table::step#0 print_uchar::b#8 print_char_cursor#104 print_uchar::$0 ] { { print_char_cursor#104 = print_char_cursor#2 print_char_cursor#66 } { print_char::ch#5 = print_char::ch#7 } }  main:2::sin8u_table:7::print_uchar:63 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 print_line_cursor#1 print_uchar::b#8 print_char_cursor#104 print_uchar::$0 ] { { print_uchar::b#7 = print_uchar::b#8 sin8u_table::sinx_tr#0 } { print_char_cursor#104 = print_char_cursor#2 print_char_cursor#66 } { print_char::ch#5 = print_char::ch#7 } }  main:2::sin8u_table:7::print_uint:15::print_uchar:104 [ sin8u_table::step#0 print_uint::w#3 print_uchar::b#8 print_char_cursor#104 print_uchar::$0 ] { { print_uint::w#1 = print_uint::w#3 sin8u_table::step#0 } { print_char_cursor#103 = print_char_cursor#2 print_char_cursor#104 print_char_cursor#66 } { print_uchar::b#1 = print_uchar::b#8 } { print_char::ch#5 = print_char::ch#7 } }  main:2::sin8u_table:7::print_uint:51::print_uchar:104 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_uint::w#3 print_uchar::b#8 print_char_cursor#104 print_uchar::$0 ] { { print_uint::w#2 = print_uint::w#3 sin8u_table::x#10 } { print_char_cursor#103 = print_char_cursor#2 print_char_cursor#104 print_char_cursor#66 } { print_uchar::b#1 = print_uchar::b#8 } { print_char::ch#5 = print_char::ch#7 } }  main:2::sin8u_table:7::print_sint:59::print_uint:97::print_uchar:104 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_uint::w#3 print_uchar::b#8 print_char_cursor#104 print_uchar::$0 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } { print_uint::w#0 = print_uint::w#3 } { print_char_cursor#103 = print_char_cursor#19 print_char_cursor#104 print_char_cursor#66 } { print_uchar::b#1 = print_uchar::b#8 } { print_char::ch#5 = print_char::ch#7 } }  main:2::sin8u_table:7::print_uint:15::print_uchar:106 [ sin8u_table::step#0 print_uchar::b#8 print_char_cursor#104 print_uchar::$0 ] { { print_uint::w#1 = print_uint::w#3 sin8u_table::step#0 } { print_char_cursor#103 = print_char_cursor#2 } { print_uchar::b#2 = print_uchar::b#8 } { print_char_cursor#104 = print_char_cursor#19 print_char_cursor#66 } { print_char::ch#5 = print_char::ch#7 } }  main:2::sin8u_table:7::print_uint:51::print_uchar:106 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_uchar::b#8 print_char_cursor#104 print_uchar::$0 ] { { print_uint::w#2 = print_uint::w#3 sin8u_table::x#10 } { print_char_cursor#103 = print_char_cursor#2 } { print_uchar::b#2 = print_uchar::b#8 } { print_char_cursor#104 = print_char_cursor#19 print_char_cursor#66 } { print_char::ch#5 = print_char::ch#7 } }  main:2::sin8u_table:7::print_sint:59::print_uint:97::print_uchar:106 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_uchar::b#8 print_char_cursor#104 print_uchar::$0 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } { print_uint::w#0 = print_uint::w#3 } { print_char_cursor#103 = print_char_cursor#19 print_char_cursor#104 print_char_cursor#66 } { print_uchar::b#2 = print_uchar::b#8 } { print_char::ch#5 = print_char::ch#7 } }  main:2::sin8u_table:7::print_schar:55::print_uchar:113 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_uchar::b#8 print_char_cursor#104 print_uchar::$0 ] { { print_schar::b#1 = sin8u_table::sinx#0 } { print_uchar::b#0 = print_uchar::b#8 } { print_char_cursor#104 = print_char_cursor#19 print_char_cursor#66 } { print_char::ch#5 = print_char::ch#7 } }  ) always clobbers reg byte a 
Statement [77] (byte~) print_uchar::$2 ← (byte) print_uchar::b#8 & (byte) $f [ print_char_cursor#19 print_uchar::$2 ] ( main:2::sin8u_table:7::print_uchar:19 [ sin8u_table::step#0 print_char_cursor#19 print_uchar::$2 ] { { print_char_cursor#104 = print_char_cursor#2 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#19 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_uchar:23 [ sin8u_table::step#0 print_char_cursor#19 print_uchar::$2 ] { { print_char_cursor#104 = print_char_cursor#2 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#19 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_uchar:27 [ sin8u_table::step#0 print_char_cursor#19 print_uchar::$2 ] { { print_char_cursor#104 = print_char_cursor#2 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#19 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_uchar:31 [ sin8u_table::step#0 print_char_cursor#19 print_uchar::$2 ] { { print_char_cursor#104 = print_char_cursor#2 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#19 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_uchar:63 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 print_line_cursor#1 print_char_cursor#19 print_uchar::$2 ] { { print_uchar::b#7 = print_uchar::b#8 sin8u_table::sinx_tr#0 } { print_char_cursor#104 = print_char_cursor#2 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#19 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_uint:15::print_uchar:104 [ sin8u_table::step#0 print_uint::w#3 print_char_cursor#19 print_uchar::$2 ] { { print_uint::w#1 = print_uint::w#3 sin8u_table::step#0 } { print_char_cursor#103 = print_char_cursor#2 print_char_cursor#104 } { print_uchar::b#1 = print_uchar::b#8 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#19 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_uint:51::print_uchar:104 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_uint::w#3 print_char_cursor#19 print_uchar::$2 ] { { print_uint::w#2 = print_uint::w#3 sin8u_table::x#10 } { print_char_cursor#103 = print_char_cursor#2 print_char_cursor#104 } { print_uchar::b#1 = print_uchar::b#8 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#19 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_sint:59::print_uint:97::print_uchar:104 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_uint::w#3 print_char_cursor#19 print_uchar::$2 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } { print_uint::w#0 = print_uint::w#3 } { print_char_cursor#103 = print_char_cursor#19 print_char_cursor#104 print_char_cursor#66 } { print_uchar::b#1 = print_uchar::b#8 } { print_char::ch#6 = print_char::ch#7 } }  main:2::sin8u_table:7::print_uint:15::print_uchar:106 [ sin8u_table::step#0 print_char_cursor#19 print_uchar::$2 ] { { print_uint::w#1 = print_uint::w#3 sin8u_table::step#0 } { print_char_cursor#103 = print_char_cursor#2 } { print_uchar::b#2 = print_uchar::b#8 } { print_char_cursor#104 = print_char_cursor#19 print_char_cursor#66 } { print_char::ch#6 = print_char::ch#7 } }  main:2::sin8u_table:7::print_uint:51::print_uchar:106 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#19 print_uchar::$2 ] { { print_uint::w#2 = print_uint::w#3 sin8u_table::x#10 } { print_char_cursor#103 = print_char_cursor#2 } { print_uchar::b#2 = print_uchar::b#8 } { print_char_cursor#104 = print_char_cursor#19 print_char_cursor#66 } { print_char::ch#6 = print_char::ch#7 } }  main:2::sin8u_table:7::print_sint:59::print_uint:97::print_uchar:106 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#19 print_uchar::$2 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } { print_uint::w#0 = print_uint::w#3 } { print_char_cursor#103 = print_char_cursor#19 print_char_cursor#104 print_char_cursor#66 } { print_uchar::b#2 = print_uchar::b#8 } { print_char::ch#6 = print_char::ch#7 } }  main:2::sin8u_table:7::print_schar:55::print_uchar:113 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#19 print_uchar::$2 ] { { print_schar::b#1 = sin8u_table::sinx#0 } { print_uchar::b#0 = print_uchar::b#8 } { print_char_cursor#104 = print_char_cursor#19 print_char_cursor#66 } { print_char::ch#6 = print_char::ch#7 } }  ) always clobbers reg byte a 
Statement [82] *((byte*) print_char_cursor#66) ← (byte) print_char::ch#7 [ print_char_cursor#66 ] ( main:2::sin8u_table:7::print_uchar:19::print_char:76 [ sin8u_table::step#0 print_uchar::b#8 print_char_cursor#66 ] { { print_char_cursor#104 = print_char_cursor#2 print_char_cursor#66 } { print_char::ch#5 = print_char::ch#7 } }  main:2::sin8u_table:7::print_uchar:23::print_char:76 [ sin8u_table::step#0 print_uchar::b#8 print_char_cursor#66 ] { { print_char_cursor#104 = print_char_cursor#2 print_char_cursor#66 } { print_char::ch#5 = print_char::ch#7 } }  main:2::sin8u_table:7::print_uchar:27::print_char:76 [ sin8u_table::step#0 print_uchar::b#8 print_char_cursor#66 ] { { print_char_cursor#104 = print_char_cursor#2 print_char_cursor#66 } { print_char::ch#5 = print_char::ch#7 } }  main:2::sin8u_table:7::print_uchar:31::print_char:76 [ sin8u_table::step#0 print_uchar::b#8 print_char_cursor#66 ] { { print_char_cursor#104 = print_char_cursor#2 print_char_cursor#66 } { print_char::ch#5 = print_char::ch#7 } }  main:2::sin8u_table:7::print_uchar:63::print_char:76 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 print_line_cursor#1 print_uchar::b#8 print_char_cursor#66 ] { { print_uchar::b#7 = print_uchar::b#8 sin8u_table::sinx_tr#0 } { print_char_cursor#104 = print_char_cursor#2 print_char_cursor#66 } { print_char::ch#5 = print_char::ch#7 } }  main:2::sin8u_table:7::print_uint:15::print_uchar:104::print_char:76 [ sin8u_table::step#0 print_uint::w#3 print_uchar::b#8 print_char_cursor#66 ] { { print_uint::w#1 = print_uint::w#3 sin8u_table::step#0 } { print_char_cursor#103 = print_char_cursor#2 print_char_cursor#104 print_char_cursor#66 } { print_uchar::b#1 = print_uchar::b#8 } { print_char::ch#5 = print_char::ch#7 } }  main:2::sin8u_table:7::print_uint:51::print_uchar:104::print_char:76 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_uint::w#3 print_uchar::b#8 print_char_cursor#66 ] { { print_uint::w#2 = print_uint::w#3 sin8u_table::x#10 } { print_char_cursor#103 = print_char_cursor#2 print_char_cursor#104 print_char_cursor#66 } { print_uchar::b#1 = print_uchar::b#8 } { print_char::ch#5 = print_char::ch#7 } }  main:2::sin8u_table:7::print_sint:59::print_uint:97::print_uchar:104::print_char:76 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_uint::w#3 print_uchar::b#8 print_char_cursor#66 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } { print_uint::w#0 = print_uint::w#3 } { print_char_cursor#103 = print_char_cursor#19 print_char_cursor#104 print_char_cursor#66 } { print_uchar::b#1 = print_uchar::b#8 } { print_char::ch#5 = print_char::ch#7 } }  main:2::sin8u_table:7::print_uint:15::print_uchar:106::print_char:76 [ sin8u_table::step#0 print_uchar::b#8 print_char_cursor#66 ] { { print_uint::w#1 = print_uint::w#3 sin8u_table::step#0 } { print_char_cursor#103 = print_char_cursor#2 } { print_uchar::b#2 = print_uchar::b#8 } { print_char_cursor#104 = print_char_cursor#19 print_char_cursor#66 } { print_char::ch#5 = print_char::ch#7 } }  main:2::sin8u_table:7::print_uint:51::print_uchar:106::print_char:76 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_uchar::b#8 print_char_cursor#66 ] { { print_uint::w#2 = print_uint::w#3 sin8u_table::x#10 } { print_char_cursor#103 = print_char_cursor#2 } { print_uchar::b#2 = print_uchar::b#8 } { print_char_cursor#104 = print_char_cursor#19 print_char_cursor#66 } { print_char::ch#5 = print_char::ch#7 } }  main:2::sin8u_table:7::print_sint:59::print_uint:97::print_uchar:106::print_char:76 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_uchar::b#8 print_char_cursor#66 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } { print_uint::w#0 = print_uint::w#3 } { print_char_cursor#103 = print_char_cursor#19 print_char_cursor#104 print_char_cursor#66 } { print_uchar::b#2 = print_uchar::b#8 } { print_char::ch#5 = print_char::ch#7 } }  main:2::sin8u_table:7::print_schar:55::print_uchar:113::print_char:76 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_uchar::b#8 print_char_cursor#66 ] { { print_schar::b#1 = sin8u_table::sinx#0 } { print_uchar::b#0 = print_uchar::b#8 } { print_char_cursor#104 = print_char_cursor#19 print_char_cursor#66 } { print_char::ch#5 = print_char::ch#7 } }  main:2::sin8u_table:7::print_uchar:19::print_char:79 [ sin8u_table::step#0 print_char_cursor#66 ] { { print_char_cursor#104 = print_char_cursor#2 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#19 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_uchar:23::print_char:79 [ sin8u_table::step#0 print_char_cursor#66 ] { { print_char_cursor#104 = print_char_cursor#2 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#19 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_uchar:27::print_char:79 [ sin8u_table::step#0 print_char_cursor#66 ] { { print_char_cursor#104 = print_char_cursor#2 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#19 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_uchar:31::print_char:79 [ sin8u_table::step#0 print_char_cursor#66 ] { { print_char_cursor#104 = print_char_cursor#2 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#19 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_uchar:63::print_char:79 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 print_line_cursor#1 print_char_cursor#66 ] { { print_uchar::b#7 = print_uchar::b#8 sin8u_table::sinx_tr#0 } { print_char_cursor#104 = print_char_cursor#2 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#19 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_uint:15::print_uchar:104::print_char:79 [ sin8u_table::step#0 print_uint::w#3 print_char_cursor#66 ] { { print_uint::w#1 = print_uint::w#3 sin8u_table::step#0 } { print_char_cursor#103 = print_char_cursor#2 print_char_cursor#104 } { print_uchar::b#1 = print_uchar::b#8 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#19 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_uint:51::print_uchar:104::print_char:79 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_uint::w#3 print_char_cursor#66 ] { { print_uint::w#2 = print_uint::w#3 sin8u_table::x#10 } { print_char_cursor#103 = print_char_cursor#2 print_char_cursor#104 } { print_uchar::b#1 = print_uchar::b#8 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#19 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_sint:59::print_uint:97::print_uchar:104::print_char:79 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_uint::w#3 print_char_cursor#66 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } { print_uint::w#0 = print_uint::w#3 } { print_char_cursor#103 = print_char_cursor#19 print_char_cursor#104 print_char_cursor#66 } { print_uchar::b#1 = print_uchar::b#8 } { print_char::ch#6 = print_char::ch#7 } }  main:2::sin8u_table:7::print_uint:15::print_uchar:106::print_char:79 [ sin8u_table::step#0 print_char_cursor#66 ] { { print_uint::w#1 = print_uint::w#3 sin8u_table::step#0 } { print_char_cursor#103 = print_char_cursor#2 } { print_uchar::b#2 = print_uchar::b#8 } { print_char_cursor#104 = print_char_cursor#19 print_char_cursor#66 } { print_char::ch#6 = print_char::ch#7 } }  main:2::sin8u_table:7::print_uint:51::print_uchar:106::print_char:79 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#66 ] { { print_uint::w#2 = print_uint::w#3 sin8u_table::x#10 } { print_char_cursor#103 = print_char_cursor#2 } { print_uchar::b#2 = print_uchar::b#8 } { print_char_cursor#104 = print_char_cursor#19 print_char_cursor#66 } { print_char::ch#6 = print_char::ch#7 } }  main:2::sin8u_table:7::print_sint:59::print_uint:97::print_uchar:106::print_char:79 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#66 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } { print_uint::w#0 = print_uint::w#3 } { print_char_cursor#103 = print_char_cursor#19 print_char_cursor#104 print_char_cursor#66 } { print_uchar::b#2 = print_uchar::b#8 } { print_char::ch#6 = print_char::ch#7 } }  main:2::sin8u_table:7::print_schar:55::print_uchar:113::print_char:79 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#66 ] { { print_schar::b#1 = sin8u_table::sinx#0 } { print_uchar::b#0 = print_uchar::b#8 } { print_char_cursor#104 = print_char_cursor#19 print_char_cursor#66 } { print_char::ch#6 = print_char::ch#7 } }  main:2::sin8u_table:7::print_str:13::print_char:90 [ sin8u_table::step#0 print_str::str#10 print_char_cursor#66 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#2 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_str:17::print_char:90 [ sin8u_table::step#0 print_str::str#10 print_char_cursor#66 ] { { print_char_cursor#110 = print_char_cursor#19 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#2 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_str:21::print_char:90 [ sin8u_table::step#0 print_str::str#10 print_char_cursor#66 ] { { print_char_cursor#110 = print_char_cursor#19 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#2 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_str:25::print_char:90 [ sin8u_table::step#0 print_str::str#10 print_char_cursor#66 ] { { print_char_cursor#110 = print_char_cursor#19 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#2 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_str:29::print_char:90 [ sin8u_table::step#0 print_str::str#10 print_char_cursor#66 ] { { print_char_cursor#110 = print_char_cursor#19 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#2 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_str:49::print_char:90 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_str::str#10 print_char_cursor#66 ] { { print_char_cursor#110 = print_char_cursor#117 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#2 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_str:53::print_char:90 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_str::str#10 print_char_cursor#66 ] { { print_char_cursor#110 = print_char_cursor#19 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#2 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_str:57::print_char:90 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_str::str#10 print_char_cursor#66 ] { { print_char_cursor#110 = print_char_cursor#19 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#2 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_str:61::print_char:90 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_str::str#10 print_char_cursor#66 ] { { print_char_cursor#110 = print_char_cursor#19 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#2 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_sint:59::print_char:94 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_sint::w#1 print_char_cursor#66 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } { print_char_cursor#2 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_sint:59::print_char:100 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_sint::w#1 print_char_cursor#66 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } { print_char_cursor#2 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_schar:55::print_char:110 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_schar::b#1 print_char_cursor#66 ] { { print_schar::b#1 = sin8u_table::sinx#0 } { print_char_cursor#2 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_schar:55::print_char:116 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_schar::b#1 print_char_cursor#66 ] { { print_schar::b#1 = sin8u_table::sinx#0 } { print_char_cursor#2 = print_char_cursor#66 } }  ) always clobbers reg byte y 
Statement [87] if((byte) 0!=*((byte*) print_str::str#10)) goto print_str::@2 [ print_char_cursor#2 print_str::str#10 ] ( main:2::sin8u_table:7::print_str:13 [ sin8u_table::step#0 print_char_cursor#2 print_str::str#10 ] { }  main:2::sin8u_table:7::print_str:17 [ sin8u_table::step#0 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#110 = print_char_cursor#19 } }  main:2::sin8u_table:7::print_str:21 [ sin8u_table::step#0 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#110 = print_char_cursor#19 } }  main:2::sin8u_table:7::print_str:25 [ sin8u_table::step#0 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#110 = print_char_cursor#19 } }  main:2::sin8u_table:7::print_str:29 [ sin8u_table::step#0 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#110 = print_char_cursor#19 } }  main:2::sin8u_table:7::print_str:49 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#110 = print_char_cursor#117 } }  main:2::sin8u_table:7::print_str:53 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#110 = print_char_cursor#19 } }  main:2::sin8u_table:7::print_str:57 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#110 = print_char_cursor#19 } }  main:2::sin8u_table:7::print_str:61 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] { { print_char_cursor#110 = print_char_cursor#19 } }  ) always clobbers reg byte a reg byte y 
Statement [89] (byte) print_char::ch#0 ← *((byte*) print_str::str#10) [ print_char_cursor#2 print_char::ch#0 print_str::str#10 ] ( main:2::sin8u_table:7::print_str:13 [ sin8u_table::step#0 print_char_cursor#2 print_char::ch#0 print_str::str#10 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#2 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_str:17 [ sin8u_table::step#0 print_char_cursor#2 print_char::ch#0 print_str::str#10 ] { { print_char_cursor#110 = print_char_cursor#19 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#2 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_str:21 [ sin8u_table::step#0 print_char_cursor#2 print_char::ch#0 print_str::str#10 ] { { print_char_cursor#110 = print_char_cursor#19 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#2 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_str:25 [ sin8u_table::step#0 print_char_cursor#2 print_char::ch#0 print_str::str#10 ] { { print_char_cursor#110 = print_char_cursor#19 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#2 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_str:29 [ sin8u_table::step#0 print_char_cursor#2 print_char::ch#0 print_str::str#10 ] { { print_char_cursor#110 = print_char_cursor#19 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#2 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_str:49 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#2 print_char::ch#0 print_str::str#10 ] { { print_char_cursor#110 = print_char_cursor#117 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#2 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_str:53 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#2 print_char::ch#0 print_str::str#10 ] { { print_char_cursor#110 = print_char_cursor#19 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#2 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_str:57 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#2 print_char::ch#0 print_str::str#10 ] { { print_char_cursor#110 = print_char_cursor#19 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#2 = print_char_cursor#66 } }  main:2::sin8u_table:7::print_str:61 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#2 print_char::ch#0 print_str::str#10 ] { { print_char_cursor#110 = print_char_cursor#19 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#2 = print_char_cursor#66 } }  ) always clobbers reg byte a reg byte y 
Statement [92] if((signed word) print_sint::w#1<(signed byte) 0) goto print_sint::@1 [ print_sint::w#1 print_char_cursor#2 ] ( main:2::sin8u_table:7::print_sint:59 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_sint::w#1 print_char_cursor#2 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } }  ) always clobbers reg byte a 
Statement [96] (word) print_uint::w#0 ← (word)(signed word) print_sint::w#4 [ print_char_cursor#19 print_uint::w#0 ] ( main:2::sin8u_table:7::print_sint:59 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#19 print_uint::w#0 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } { print_uint::w#0 = print_uint::w#3 } { print_char_cursor#103 = print_char_cursor#19 } }  ) always clobbers reg byte a 
Statement [101] (signed word) print_sint::w#0 ← - (signed word) print_sint::w#1 [ print_char_cursor#19 print_sint::w#0 ] ( main:2::sin8u_table:7::print_sint:59 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#19 print_sint::w#0 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } }  ) always clobbers reg byte a 
Statement [117] (signed byte) print_schar::b#0 ← - (signed byte) print_schar::b#1 [ print_char_cursor#19 print_schar::b#0 ] ( main:2::sin8u_table:7::print_schar:55 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#19 print_schar::b#0 ] { { print_schar::b#1 = sin8u_table::sinx#0 } }  ) always clobbers reg byte a 
Statement [120] (word) mul8u::return#2 ← (word) mul8u::res#2 [ mul8su::a#0 mul8u::return#2 ] ( main:2::sin8u_table:7::mul8su:42 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 print_line_cursor#1 mul8su::a#0 mul8u::return#2 ] { { mul8su::a#0 = sin8u_table::sinx#0 } { mul8u::a#1 = mul8u::a#6 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [121] (word) mul8su::m#0 ← (word) mul8u::return#2 [ mul8su::a#0 mul8su::m#0 ] ( main:2::sin8u_table:7::mul8su:42 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 print_line_cursor#1 mul8su::a#0 mul8su::m#0 ] { { mul8su::a#0 = sin8u_table::sinx#0 } }  ) always clobbers reg byte a 
Statement [129] (word) mul8u::mb#0 ← (word)(byte) mul8u::b#2 [ mul8u::a#6 mul8u::mb#0 ] ( main:2::sin8u_table:7::mul8su:42::mul8u:119 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 print_line_cursor#1 mul8su::a#0 mul8u::a#6 mul8u::mb#0 ] { { mul8su::a#0 = sin8u_table::sinx#0 } { mul8u::a#1 = mul8u::a#6 } { mul8u::return#2 = mul8u::res#2 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:149::mul8u:185 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#6 mul8u::mb#0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#0 = mulu8_sel::return#12 } { mul8u::a#2 = mul8u::a#6 mul8u::b#2 mul8u::b#1 mulu8_sel::v2#5 mulu8_sel::v2#0 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 } { mul8u::return#3 = mul8u::res#2 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:154::mul8u:185 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#6 mul8u::mb#0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#1 = mulu8_sel::return#12 } { mul8u::b#1 = mul8u::b#2 mulu8_sel::v2#5 mulu8_sel::v2#1 sin8s::x1#0 } { mul8u::a#2 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#1 sin8s::x2#0 } { mul8u::return#3 = mul8u::res#2 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:158::mul8u:185 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::a#6 mul8u::mb#0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#12 = mulu8_sel::return#2 } { mul8u::b#1 = mul8u::b#2 mulu8_sel::v2#5 } { mul8u::a#2 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#2 sin8s::x3#0 } { mul8u::return#3 = mul8u::res#2 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:164::mul8u:185 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#6 mul8u::mb#0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#10 = mulu8_sel::return#12 } { mul8u::b#1 = mul8u::b#2 mulu8_sel::v2#5 mulu8_sel::v2#3 sin8s::x1#0 } { mul8u::a#2 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#3 sin8s::x3#0 } { mul8u::return#3 = mul8u::res#2 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:169::mul8u:185 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#6 mul8u::mb#0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#11 = mulu8_sel::return#12 } { mul8u::b#1 = mul8u::b#2 mulu8_sel::v2#5 mulu8_sel::v2#4 sin8s::x1#0 } { mul8u::a#2 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#4 sin8s::x4#0 } { mul8u::return#3 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [133] (byte~) mul8u::$1 ← (byte) mul8u::a#3 & (byte) 1 [ mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] ( main:2::sin8u_table:7::mul8su:42::mul8u:119 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 print_line_cursor#1 mul8su::a#0 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] { { mul8su::a#0 = sin8u_table::sinx#0 } { mul8u::a#1 = mul8u::a#6 } { mul8u::return#2 = mul8u::res#2 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:149::mul8u:185 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#0 = mulu8_sel::return#12 } { mul8u::a#2 = mul8u::a#6 mul8u::b#2 mul8u::b#1 mulu8_sel::v2#5 mulu8_sel::v2#0 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 } { mul8u::return#3 = mul8u::res#2 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:154::mul8u:185 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#1 = mulu8_sel::return#12 } { mul8u::b#1 = mul8u::b#2 mulu8_sel::v2#5 mulu8_sel::v2#1 sin8s::x1#0 } { mul8u::a#2 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#1 sin8s::x2#0 } { mul8u::return#3 = mul8u::res#2 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:158::mul8u:185 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#12 = mulu8_sel::return#2 } { mul8u::b#1 = mul8u::b#2 mulu8_sel::v2#5 } { mul8u::a#2 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#2 sin8s::x3#0 } { mul8u::return#3 = mul8u::res#2 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:164::mul8u:185 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#10 = mulu8_sel::return#12 } { mul8u::b#1 = mul8u::b#2 mulu8_sel::v2#5 mulu8_sel::v2#3 sin8s::x1#0 } { mul8u::a#2 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#3 sin8s::x3#0 } { mul8u::return#3 = mul8u::res#2 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:169::mul8u:185 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#11 = mulu8_sel::return#12 } { mul8u::b#1 = mul8u::b#2 mulu8_sel::v2#5 mulu8_sel::v2#4 sin8s::x1#0 } { mul8u::a#2 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#4 sin8s::x4#0 } { mul8u::return#3 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [135] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 [ mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] ( main:2::sin8u_table:7::mul8su:42::mul8u:119 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 print_line_cursor#1 mul8su::a#0 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] { { mul8su::a#0 = sin8u_table::sinx#0 } { mul8u::a#1 = mul8u::a#6 } { mul8u::return#2 = mul8u::res#2 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:149::mul8u:185 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#0 = mulu8_sel::return#12 } { mul8u::a#2 = mul8u::a#6 mul8u::b#2 mul8u::b#1 mulu8_sel::v2#5 mulu8_sel::v2#0 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 } { mul8u::return#3 = mul8u::res#2 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:154::mul8u:185 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#1 = mulu8_sel::return#12 } { mul8u::b#1 = mul8u::b#2 mulu8_sel::v2#5 mulu8_sel::v2#1 sin8s::x1#0 } { mul8u::a#2 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#1 sin8s::x2#0 } { mul8u::return#3 = mul8u::res#2 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:158::mul8u:185 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#12 = mulu8_sel::return#2 } { mul8u::b#1 = mul8u::b#2 mulu8_sel::v2#5 } { mul8u::a#2 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#2 sin8s::x3#0 } { mul8u::return#3 = mul8u::res#2 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:164::mul8u:185 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#10 = mulu8_sel::return#12 } { mul8u::b#1 = mul8u::b#2 mulu8_sel::v2#5 mulu8_sel::v2#3 sin8s::x1#0 } { mul8u::a#2 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#3 sin8s::x3#0 } { mul8u::return#3 = mul8u::res#2 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:169::mul8u:185 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#11 = mulu8_sel::return#12 } { mul8u::b#1 = mul8u::b#2 mulu8_sel::v2#5 mulu8_sel::v2#4 sin8s::x1#0 } { mul8u::a#2 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#4 sin8s::x4#0 } { mul8u::return#3 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [139] if((word) sin8s::x#2<(const nomodify word) PI_u4f12) goto sin8s::@1 [ sin8s::x#2 ] ( main:2::sin8u_table:7::sin8s:38 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::x#2 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } }  ) always clobbers reg byte a 
Statement [140] (word) sin8s::x#0 ← (word) sin8s::x#2 - (const nomodify word) PI_u4f12 [ sin8s::x#0 ] ( main:2::sin8u_table:7::sin8s:38 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::x#0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } }  ) always clobbers reg byte a 
Statement [142] if((word) sin8s::x#4<(const nomodify word) PI_HALF_u4f12) goto sin8s::@2 [ sin8s::x#4 sin8s::isUpper#10 ] ( main:2::sin8u_table:7::sin8s:38 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::x#4 sin8s::isUpper#10 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } }  ) always clobbers reg byte a 
Statement [143] (word) sin8s::x#1 ← (const nomodify word) PI_u4f12 - (word) sin8s::x#4 [ sin8s::isUpper#10 sin8s::x#1 ] ( main:2::sin8u_table:7::sin8s:38 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x#1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } }  ) always clobbers reg byte a 
Statement [145] (word~) sin8s::$4 ← (word) sin8s::x#6 << (byte) 3 [ sin8s::isUpper#10 sin8s::$4 ] ( main:2::sin8u_table:7::sin8s:38 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::$4 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } }  ) always clobbers reg byte a 
Statement [161] (byte) sin8s::usinx#0 ← (byte) sin8s::x1#0 - (byte) sin8s::x3_6#0 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::usinx#0 ] ( main:2::sin8u_table:7::sin8s:38 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::usinx#0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } }  ) always clobbers reg byte a 
Statement [172] (byte) sin8s::x5_128#0 ← (byte) sin8s::x5#0 >> (byte) 4 [ sin8s::isUpper#10 sin8s::usinx#0 sin8s::x5_128#0 ] ( main:2::sin8u_table:7::sin8s:38 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 sin8s::x5_128#0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } }  ) always clobbers reg byte a 
Statement [173] (byte) sin8s::usinx#1 ← (byte) sin8s::usinx#0 + (byte) sin8s::x5_128#0 [ sin8s::isUpper#10 sin8s::usinx#1 ] ( main:2::sin8u_table:7::sin8s:38 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::usinx#1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } }  ) always clobbers reg byte a 
Statement [178] (signed byte) sin8s::sinx#1 ← - (signed byte)(byte) sin8s::usinx#4 [ sin8s::sinx#1 ] ( main:2::sin8u_table:7::sin8s:38 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::sinx#1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } }  ) always clobbers reg byte a 
Statement [186] (word) mul8u::return#3 ← (word) mul8u::res#2 [ mulu8_sel::select#5 mul8u::return#3 ] ( main:2::sin8u_table:7::sin8s:38::mulu8_sel:149 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::return#3 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#0 = mulu8_sel::return#12 } { mul8u::a#2 = mul8u::a#6 mul8u::b#2 mul8u::b#1 mulu8_sel::v2#5 mulu8_sel::v2#0 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 } { mul8u::return#3 = mul8u::res#2 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:154 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::return#3 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#1 = mulu8_sel::return#12 } { mul8u::b#1 = mul8u::b#2 mulu8_sel::v2#5 mulu8_sel::v2#1 sin8s::x1#0 } { mul8u::a#2 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#1 sin8s::x2#0 } { mul8u::return#3 = mul8u::res#2 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:158 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::return#3 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#12 = mulu8_sel::return#2 } { mul8u::b#1 = mul8u::b#2 mulu8_sel::v2#5 } { mul8u::a#2 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#2 sin8s::x3#0 } { mul8u::return#3 = mul8u::res#2 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:164 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::return#3 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#10 = mulu8_sel::return#12 } { mul8u::b#1 = mul8u::b#2 mulu8_sel::v2#5 mulu8_sel::v2#3 sin8s::x1#0 } { mul8u::a#2 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#3 sin8s::x3#0 } { mul8u::return#3 = mul8u::res#2 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:169 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::return#3 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#11 = mulu8_sel::return#12 } { mul8u::b#1 = mul8u::b#2 mulu8_sel::v2#5 mulu8_sel::v2#4 sin8s::x1#0 } { mul8u::a#2 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#4 sin8s::x4#0 } { mul8u::return#3 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [187] (word~) mulu8_sel::$0 ← (word) mul8u::return#3 [ mulu8_sel::select#5 mulu8_sel::$0 ] ( main:2::sin8u_table:7::sin8s:38::mulu8_sel:149 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mulu8_sel::$0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:154 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mulu8_sel::$0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::v1#1 = mulu8_sel::v1#5 sin8s::x2#0 } { mulu8_sel::v2#1 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#1 = mulu8_sel::return#12 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:158 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mulu8_sel::$0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::v1#2 = mulu8_sel::v1#5 sin8s::x3#0 } { mulu8_sel::return#12 = mulu8_sel::return#2 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:164 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mulu8_sel::$0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:169 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mulu8_sel::$0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::v1#4 = mulu8_sel::v1#5 sin8s::x4#0 } { mulu8_sel::v2#4 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#11 = mulu8_sel::return#12 } }  ) always clobbers reg byte a 
Statement [188] (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5 [ mulu8_sel::$1 ] ( main:2::sin8u_table:7::sin8s:38::mulu8_sel:149 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::$1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:154 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::$1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::v1#1 = mulu8_sel::v1#5 sin8s::x2#0 } { mulu8_sel::v2#1 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#1 = mulu8_sel::return#12 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:158 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::$1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::v1#2 = mulu8_sel::v1#5 sin8s::x3#0 } { mulu8_sel::return#12 = mulu8_sel::return#2 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:164 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::$1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } }  main:2::sin8u_table:7::sin8s:38::mulu8_sel:169 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::$1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::v1#4 = mulu8_sel::v1#5 sin8s::x4#0 } { mulu8_sel::v2#4 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#11 = mulu8_sel::return#12 } }  ) always clobbers reg byte a 
Statement [193] (word) divr16u::return#2 ← (word) divr16u::return#0 [ divr16u::return#2 ] ( main:2::sin8u_table:7::div16u:10 [ divr16u::return#2 ] { { div16u::return#0 = div16u::return#2 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [194] (word) div16u::return#0 ← (word) divr16u::return#2 [ div16u::return#0 ] ( main:2::sin8u_table:7::div16u:10 [ div16u::return#0 ] { { div16u::return#0 = div16u::return#2 } }  ) always clobbers reg byte a 
Statement [202] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( main:2::sin8u_table:7::div16u:10::divr16u:192 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] { { div16u::return#0 = div16u::return#2 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [206] if((word) divr16u::rem#5<(const word) main::tabsize) goto divr16u::@3 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ( main:2::sin8u_table:7::div16u:10::divr16u:192 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] { { div16u::return#0 = div16u::return#2 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [208] (word) divr16u::rem#2 ← (word) divr16u::rem#5 - (const word) main::tabsize [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( main:2::sin8u_table:7::div16u:10::divr16u:192 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] { { div16u::return#0 = div16u::return#2 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [218] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 [ memset::dst#2 ] ( main:2::print_cls:5::memset:214 [ memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [220] *((byte*) memset::dst#2) ← (const byte) memset::c#0 [ memset::dst#2 ] ( main:2::print_cls:5::memset:214 [ memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Potential registers zp[2]:2 [ sin8u_table::i#10 sin8u_table::i#1 ] : zp[2]:2 , 
Potential registers zp[2]:4 [ sin8u_table::x#10 sin8u_table::x#1 ] : zp[2]:4 , 
Potential registers zp[2]:6 [ sin8u_table::sintab#2 sin8u_table::sintab#1 ] : zp[2]:6 , 
Potential registers zp[2]:8 [ print_line_cursor#12 print_line_cursor#23 print_line_cursor#1 ] : zp[2]:8 , 
Potential registers zp[1]:10 [ print_uchar::b#8 print_uchar::b#0 print_uchar::b#1 print_uchar::b#2 print_uchar::b#7 ] : zp[1]:10 , reg byte x , 
Potential registers zp[1]:11 [ print_char::ch#7 print_char::ch#0 print_char::ch#5 print_char::ch#6 ] : zp[1]:11 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:12 [ print_char_cursor#110 print_char_cursor#66 print_char_cursor#104 print_char_cursor#19 print_char_cursor#103 print_char_cursor#2 print_char_cursor#117 ] : zp[2]:12 , 
Potential registers zp[2]:14 [ print_str::str#10 print_str::str#13 print_str::str#0 ] : zp[2]:14 , 
Potential registers zp[2]:16 [ print_sint::w#4 print_sint::w#0 print_sint::w#1 ] : zp[2]:16 , 
Potential registers zp[2]:18 [ print_uint::w#3 print_uint::w#0 print_uint::w#2 print_uint::w#1 ] : zp[2]:18 , 
Potential registers zp[1]:20 [ print_schar::b#4 print_schar::b#0 print_schar::b#1 ] : zp[1]:20 , reg byte a , reg byte x , 
Potential registers zp[2]:21 [ mul8su::m#2 mul8su::m#1 mul8su::m#0 ] : zp[2]:21 , 
Potential registers zp[1]:23 [ mul8u::b#2 mul8u::b#1 ] : zp[1]:23 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:24 [ mul8u::a#3 mul8u::a#6 mul8u::a#1 mul8u::a#2 mul8u::a#0 ] : zp[1]:24 , reg byte x , reg byte y , 
Potential registers zp[2]:25 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] : zp[2]:25 , 
Potential registers zp[2]:27 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ] : zp[2]:27 , 
Potential registers zp[1]:29 [ sin8s::isUpper#10 ] : zp[1]:29 , reg byte x , reg byte y , 
Potential registers zp[2]:30 [ sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 ] : zp[2]:30 , 
Potential registers zp[1]:32 [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ] : zp[1]:32 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:33 [ sin8s::return#0 sin8s::return#5 sin8s::sinx#1 ] : zp[1]:33 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:34 [ mulu8_sel::v1#5 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 mulu8_sel::v1#1 ] : zp[1]:34 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:35 [ mulu8_sel::v2#5 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 mulu8_sel::v2#1 ] : zp[1]:35 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:36 [ mulu8_sel::select#5 ] : zp[1]:36 , reg byte x , reg byte y , 
Potential registers zp[2]:37 [ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] : zp[2]:37 , 
Potential registers zp[2]:39 [ divr16u::dividend#2 divr16u::dividend#0 ] : zp[2]:39 , 
Potential registers zp[2]:41 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] : zp[2]:41 , 
Potential registers zp[1]:43 [ divr16u::i#2 divr16u::i#1 ] : zp[1]:43 , reg byte x , reg byte y , 
Potential registers zp[2]:44 [ memset::dst#2 memset::dst#1 ] : zp[2]:44 , 
Potential registers zp[2]:46 [ div16u::return#2 ] : zp[2]:46 , 
Potential registers zp[2]:48 [ sin8u_table::step#0 ] : zp[2]:48 , 
Potential registers zp[1]:50 [ sin8s::return#2 ] : zp[1]:50 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:51 [ sin8u_table::sinx#0 ] : zp[1]:51 , reg byte x , 
Potential registers zp[1]:52 [ mul8su::a#0 ] : zp[1]:52 , reg byte x , reg byte y , 
Potential registers zp[2]:53 [ sin8u_table::sinx_sc#0 ] : zp[2]:53 , 
Potential registers zp[1]:55 [ sin8u_table::$20 ] : zp[1]:55 , reg byte a , reg byte x , reg byte y , reg byte alu , 
Potential registers zp[1]:56 [ sin8u_table::sinx_tr#0 ] : zp[1]:56 , reg byte x , 
Potential registers zp[1]:57 [ print_uchar::$0 ] : zp[1]:57 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:58 [ print_uchar::$2 ] : zp[1]:58 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:59 [ mul8u::return#2 ] : zp[2]:59 , 
Potential registers zp[1]:61 [ mul8su::$4 ] : zp[1]:61 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:62 [ mul8su::$6 ] : zp[1]:62 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:63 [ mul8u::$1 ] : zp[1]:63 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:64 [ sin8s::$4 ] : zp[2]:64 , 
Potential registers zp[1]:66 [ sin8s::x1#0 ] : zp[1]:66 , reg byte x , reg byte y , 
Potential registers zp[1]:67 [ mulu8_sel::return#0 ] : zp[1]:67 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:68 [ sin8s::x2#0 ] : zp[1]:68 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:69 [ mulu8_sel::return#1 ] : zp[1]:69 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:70 [ sin8s::x3#0 ] : zp[1]:70 , reg byte x , reg byte y , 
Potential registers zp[1]:71 [ mulu8_sel::return#2 ] : zp[1]:71 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:72 [ sin8s::x3_6#0 ] : zp[1]:72 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:73 [ sin8s::usinx#0 ] : zp[1]:73 , reg byte x , reg byte y , 
Potential registers zp[1]:74 [ mulu8_sel::return#10 ] : zp[1]:74 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:75 [ sin8s::x4#0 ] : zp[1]:75 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:76 [ mulu8_sel::return#11 ] : zp[1]:76 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:77 [ sin8s::x5#0 ] : zp[1]:77 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:78 [ sin8s::x5_128#0 ] : zp[1]:78 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:79 [ mul8u::return#3 ] : zp[2]:79 , 
Potential registers zp[2]:81 [ mulu8_sel::$0 ] : zp[2]:81 , 
Potential registers zp[2]:83 [ mulu8_sel::$1 ] : zp[2]:83 , 
Potential registers zp[1]:85 [ mulu8_sel::return#12 ] : zp[1]:85 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:86 [ divr16u::return#2 ] : zp[2]:86 , 
Potential registers zp[2]:88 [ div16u::return#0 ] : zp[2]:88 , 
Potential registers zp[1]:90 [ divr16u::$1 ] : zp[1]:90 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:91 [ divr16u::$2 ] : zp[1]:91 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [mul8u] 342,872,860.86: zp[2]:25 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] 245,000,004.57: zp[2]:27 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ] 200,000,002: zp[1]:63 [ mul8u::$1 ] 167,508,339.67: zp[1]:24 [ mul8u::a#3 mul8u::a#6 mul8u::a#1 mul8u::a#2 mul8u::a#0 ] 300,003: zp[1]:23 [ mul8u::b#2 mul8u::b#1 ] 200,002: zp[2]:79 [ mul8u::return#3 ] 20,002: zp[2]:59 [ mul8u::return#2 ] 
Uplift Scope [print_char] 19,000,010: zp[1]:11 [ print_char::ch#7 print_char::ch#0 print_char::ch#5 print_char::ch#6 ] 
Uplift Scope [] 12,336,899.35: zp[2]:12 [ print_char_cursor#110 print_char_cursor#66 print_char_cursor#104 print_char_cursor#19 print_char_cursor#103 print_char_cursor#2 print_char_cursor#117 ] 2,102,140.27: zp[2]:8 [ print_line_cursor#12 print_line_cursor#23 print_line_cursor#1 ] 
Uplift Scope [print_uchar] 2,000,002: zp[1]:57 [ print_uchar::$0 ] 2,000,002: zp[1]:58 [ print_uchar::$2 ] 974,759.5: zp[1]:10 [ print_uchar::b#8 print_uchar::b#0 print_uchar::b#1 print_uchar::b#2 print_uchar::b#7 ] 
Uplift Scope [print_str] 3,012,504.25: zp[2]:14 [ print_str::str#10 print_str::str#13 print_str::str#0 ] 
Uplift Scope [divr16u] 875,008.75: zp[2]:37 [ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] 335,203.55: zp[2]:41 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] 200,002: zp[1]:90 [ divr16u::$1 ] 200,002: zp[1]:91 [ divr16u::$2 ] 165,386.27: zp[1]:43 [ divr16u::i#2 divr16u::i#1 ] 67,857.82: zp[2]:39 [ divr16u::dividend#2 divr16u::dividend#0 ] 2,002: zp[2]:86 [ divr16u::return#2 ] 
Uplift Scope [mulu8_sel] 210,012: zp[1]:34 [ mulu8_sel::v1#5 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 mulu8_sel::v1#1 ] 200,002: zp[2]:81 [ mulu8_sel::$0 ] 200,002: zp[2]:83 [ mulu8_sel::$1 ] 150,010.5: zp[1]:35 [ mulu8_sel::v2#5 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 mulu8_sel::v2#1 ] 21,429.43: zp[1]:85 [ mulu8_sel::return#12 ] 20,002: zp[1]:67 [ mulu8_sel::return#0 ] 20,002: zp[1]:69 [ mulu8_sel::return#1 ] 20,002: zp[1]:71 [ mulu8_sel::return#2 ] 20,002: zp[1]:74 [ mulu8_sel::return#10 ] 20,002: zp[1]:76 [ mulu8_sel::return#11 ] 16,666.83: zp[1]:36 [ mulu8_sel::select#5 ] 
Uplift Scope [sin8s] 110,511.5: zp[2]:30 [ sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 ] 50,005: zp[1]:32 [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ] 47,005: zp[1]:33 [ sin8s::return#0 sin8s::return#5 sin8s::sinx#1 ] 20,002: zp[2]:64 [ sin8s::$4 ] 20,002: zp[1]:68 [ sin8s::x2#0 ] 20,002: zp[1]:72 [ sin8s::x3_6#0 ] 20,002: zp[1]:75 [ sin8s::x4#0 ] 20,002: zp[1]:77 [ sin8s::x5#0 ] 20,002: zp[1]:78 [ sin8s::x5_128#0 ] 5,000.5: zp[1]:70 [ sin8s::x3#0 ] 3,182.14: zp[1]:66 [ sin8s::x1#0 ] 2,002: zp[1]:50 [ sin8s::return#2 ] 1,666.83: zp[1]:73 [ sin8s::usinx#0 ] 277.81: zp[1]:29 [ sin8s::isUpper#10 ] 
Uplift Scope [print_uint] 92,574.33: zp[2]:18 [ print_uint::w#3 print_uint::w#0 print_uint::w#2 print_uint::w#1 ] 
Uplift Scope [mul8su] 36,670.33: zp[2]:21 [ mul8su::m#2 mul8su::m#1 mul8su::m#0 ] 20,002: zp[1]:61 [ mul8su::$4 ] 20,002: zp[1]:62 [ mul8su::$6 ] 2,200.4: zp[1]:52 [ mul8su::a#0 ] 
Uplift Scope [print_sint] 45,171.33: zp[2]:16 [ print_sint::w#4 print_sint::w#0 print_sint::w#1 ] 
Uplift Scope [print_schar] 45,171.33: zp[1]:20 [ print_schar::b#4 print_schar::b#0 print_schar::b#1 ] 
Uplift Scope [memset] 33,336.67: zp[2]:44 [ memset::dst#2 memset::dst#1 ] 
Uplift Scope [sin8u_table] 2,095.84: zp[2]:2 [ sin8u_table::i#10 sin8u_table::i#1 ] 2,002: zp[1]:55 [ sin8u_table::$20 ] 1,130.16: zp[2]:4 [ sin8u_table::x#10 sin8u_table::x#1 ] 345.58: zp[2]:6 [ sin8u_table::sintab#2 sin8u_table::sintab#1 ] 214.5: zp[1]:51 [ sin8u_table::sinx#0 ] 200.2: zp[2]:53 [ sin8u_table::sinx_sc#0 ] 176.65: zp[1]:56 [ sin8u_table::sinx_tr#0 ] 21.87: zp[2]:48 [ sin8u_table::step#0 ] 
Uplift Scope [div16u] 367.33: zp[2]:88 [ div16u::return#0 ] 202: zp[2]:46 [ div16u::return#2 ] 
Uplift Scope [RADIX] 
Uplift Scope [print_ln] 
Uplift Scope [print_cls] 
Uplift Scope [main] 

Uplifting [mul8u] best 22423 combination zp[2]:25 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] zp[2]:27 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ] reg byte a [ mul8u::$1 ] reg byte x [ mul8u::a#3 mul8u::a#6 mul8u::a#1 mul8u::a#2 mul8u::a#0 ] reg byte a [ mul8u::b#2 mul8u::b#1 ] zp[2]:79 [ mul8u::return#3 ] zp[2]:59 [ mul8u::return#2 ] 
Uplifting [print_char] best 22102 combination reg byte a [ print_char::ch#7 print_char::ch#0 print_char::ch#5 print_char::ch#6 ] 
Uplifting [] best 22102 combination zp[2]:12 [ print_char_cursor#110 print_char_cursor#66 print_char_cursor#104 print_char_cursor#19 print_char_cursor#103 print_char_cursor#2 print_char_cursor#117 ] zp[2]:8 [ print_line_cursor#12 print_line_cursor#23 print_line_cursor#1 ] 
Uplifting [print_uchar] best 22039 combination reg byte a [ print_uchar::$0 ] reg byte x [ print_uchar::$2 ] reg byte x [ print_uchar::b#8 print_uchar::b#0 print_uchar::b#1 print_uchar::b#2 print_uchar::b#7 ] 
Uplifting [print_str] best 22039 combination zp[2]:14 [ print_str::str#10 print_str::str#13 print_str::str#0 ] 
Uplifting [divr16u] best 21829 combination zp[2]:37 [ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] zp[2]:41 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] reg byte a [ divr16u::$1 ] reg byte a [ divr16u::$2 ] reg byte x [ divr16u::i#2 divr16u::i#1 ] zp[2]:39 [ divr16u::dividend#2 divr16u::dividend#0 ] zp[2]:86 [ divr16u::return#2 ] 
Uplifting [mulu8_sel] best 21771 combination reg byte x [ mulu8_sel::v1#5 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 mulu8_sel::v1#1 ] zp[2]:81 [ mulu8_sel::$0 ] zp[2]:83 [ mulu8_sel::$1 ] reg byte y [ mulu8_sel::v2#5 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 mulu8_sel::v2#1 ] reg byte a [ mulu8_sel::return#12 ] reg byte a [ mulu8_sel::return#0 ] zp[1]:69 [ mulu8_sel::return#1 ] zp[1]:71 [ mulu8_sel::return#2 ] zp[1]:74 [ mulu8_sel::return#10 ] zp[1]:76 [ mulu8_sel::return#11 ] zp[1]:36 [ mulu8_sel::select#5 ] 
Limited combination testing to 100 combinations of 196608 possible.
Uplifting [sin8s] best 21718 combination zp[2]:30 [ sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 ] reg byte x [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ] reg byte a [ sin8s::return#0 sin8s::return#5 sin8s::sinx#1 ] zp[2]:64 [ sin8s::$4 ] reg byte a [ sin8s::x2#0 ] reg byte a [ sin8s::x3_6#0 ] zp[1]:75 [ sin8s::x4#0 ] zp[1]:77 [ sin8s::x5#0 ] zp[1]:78 [ sin8s::x5_128#0 ] zp[1]:70 [ sin8s::x3#0 ] zp[1]:66 [ sin8s::x1#0 ] zp[1]:50 [ sin8s::return#2 ] zp[1]:73 [ sin8s::usinx#0 ] zp[1]:29 [ sin8s::isUpper#10 ] 
Limited combination testing to 100 combinations of 5308416 possible.
Uplifting [print_uint] best 21718 combination zp[2]:18 [ print_uint::w#3 print_uint::w#0 print_uint::w#2 print_uint::w#1 ] 
Uplifting [mul8su] best 21676 combination zp[2]:21 [ mul8su::m#2 mul8su::m#1 mul8su::m#0 ] reg byte a [ mul8su::$4 ] reg byte a [ mul8su::$6 ] reg byte y [ mul8su::a#0 ] 
Uplifting [print_sint] best 21676 combination zp[2]:16 [ print_sint::w#4 print_sint::w#0 print_sint::w#1 ] 
Uplifting [print_schar] best 21640 combination reg byte x [ print_schar::b#4 print_schar::b#0 print_schar::b#1 ] 
Uplifting [memset] best 21640 combination zp[2]:44 [ memset::dst#2 memset::dst#1 ] 
Uplifting [sin8u_table] best 21600 combination zp[2]:2 [ sin8u_table::i#10 sin8u_table::i#1 ] reg byte a [ sin8u_table::$20 ] zp[2]:4 [ sin8u_table::x#10 sin8u_table::x#1 ] zp[2]:6 [ sin8u_table::sintab#2 sin8u_table::sintab#1 ] zp[1]:51 [ sin8u_table::sinx#0 ] zp[2]:53 [ sin8u_table::sinx_sc#0 ] zp[1]:56 [ sin8u_table::sinx_tr#0 ] zp[2]:48 [ sin8u_table::step#0 ] 
Uplifting [div16u] best 21600 combination zp[2]:88 [ div16u::return#0 ] zp[2]:46 [ div16u::return#2 ] 
Uplifting [RADIX] best 21600 combination 
Uplifting [print_ln] best 21600 combination 
Uplifting [print_cls] best 21600 combination 
Uplifting [main] best 21600 combination 
Attempting to uplift remaining variables inzp[1]:69 [ mulu8_sel::return#1 ]
Uplifting [mulu8_sel] best 21594 combination reg byte a [ mulu8_sel::return#1 ] 
Attempting to uplift remaining variables inzp[1]:71 [ mulu8_sel::return#2 ]
Uplifting [mulu8_sel] best 21588 combination reg byte a [ mulu8_sel::return#2 ] 
Attempting to uplift remaining variables inzp[1]:74 [ mulu8_sel::return#10 ]
Uplifting [mulu8_sel] best 21582 combination reg byte a [ mulu8_sel::return#10 ] 
Attempting to uplift remaining variables inzp[1]:75 [ sin8s::x4#0 ]
Uplifting [sin8s] best 21578 combination reg byte a [ sin8s::x4#0 ] 
Attempting to uplift remaining variables inzp[1]:76 [ mulu8_sel::return#11 ]
Uplifting [mulu8_sel] best 21572 combination reg byte a [ mulu8_sel::return#11 ] 
Attempting to uplift remaining variables inzp[1]:77 [ sin8s::x5#0 ]
Uplifting [sin8s] best 21566 combination reg byte a [ sin8s::x5#0 ] 
Attempting to uplift remaining variables inzp[1]:78 [ sin8s::x5_128#0 ]
Uplifting [sin8s] best 21560 combination reg byte a [ sin8s::x5_128#0 ] 
Attempting to uplift remaining variables inzp[1]:36 [ mulu8_sel::select#5 ]
Uplifting [mulu8_sel] best 21560 combination zp[1]:36 [ mulu8_sel::select#5 ] 
Attempting to uplift remaining variables inzp[1]:70 [ sin8s::x3#0 ]
Uplifting [sin8s] best 21560 combination zp[1]:70 [ sin8s::x3#0 ] 
Attempting to uplift remaining variables inzp[1]:66 [ sin8s::x1#0 ]
Uplifting [sin8s] best 21560 combination zp[1]:66 [ sin8s::x1#0 ] 
Attempting to uplift remaining variables inzp[1]:50 [ sin8s::return#2 ]
Uplifting [sin8s] best 21500 combination reg byte a [ sin8s::return#2 ] 
Attempting to uplift remaining variables inzp[1]:73 [ sin8s::usinx#0 ]
Uplifting [sin8s] best 21500 combination zp[1]:73 [ sin8s::usinx#0 ] 
Attempting to uplift remaining variables inzp[1]:29 [ sin8s::isUpper#10 ]
Uplifting [sin8s] best 21500 combination zp[1]:29 [ sin8s::isUpper#10 ] 
Attempting to uplift remaining variables inzp[1]:51 [ sin8u_table::sinx#0 ]
Uplifting [sin8u_table] best 21500 combination zp[1]:51 [ sin8u_table::sinx#0 ] 
Attempting to uplift remaining variables inzp[1]:56 [ sin8u_table::sinx_tr#0 ]
Uplifting [sin8u_table] best 21500 combination zp[1]:56 [ sin8u_table::sinx_tr#0 ] 
Coalescing zero page register [ zp[2]:16 [ print_sint::w#4 print_sint::w#0 print_sint::w#1 ] ] with [ zp[2]:18 [ print_uint::w#3 print_uint::w#0 print_uint::w#2 print_uint::w#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:21 [ mul8su::m#2 mul8su::m#1 mul8su::m#0 ] ] with [ zp[2]:53 [ sin8u_table::sinx_sc#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:21 [ mul8su::m#2 mul8su::m#1 mul8su::m#0 sin8u_table::sinx_sc#0 ] ] with [ zp[2]:59 [ mul8u::return#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:25 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] ] with [ zp[2]:79 [ mul8u::return#3 ] ] - score: 1
Coalescing zero page register [ zp[2]:30 [ sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 ] ] with [ zp[2]:64 [ sin8s::$4 ] ] - score: 1
Coalescing zero page register [ zp[2]:41 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] ] with [ zp[2]:86 [ divr16u::return#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:46 [ div16u::return#2 ] ] with [ zp[2]:48 [ sin8u_table::step#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:46 [ div16u::return#2 sin8u_table::step#0 ] ] with [ zp[2]:88 [ div16u::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:81 [ mulu8_sel::$0 ] ] with [ zp[2]:83 [ mulu8_sel::$1 ] ] - score: 1
Coalescing zero page register [ zp[2]:21 [ mul8su::m#2 mul8su::m#1 mul8su::m#0 sin8u_table::sinx_sc#0 mul8u::return#2 ] ] with [ zp[2]:25 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#3 ] ] - score: 1
Coalescing zero page register [ zp[2]:41 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 ] ] with [ zp[2]:46 [ div16u::return#2 sin8u_table::step#0 div16u::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:21 [ mul8su::m#2 mul8su::m#1 mul8su::m#0 sin8u_table::sinx_sc#0 mul8u::return#2 mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#3 ] ] with [ zp[2]:81 [ mulu8_sel::$0 mulu8_sel::$1 ] ] - score: 1
Coalescing zero page register [ zp[2]:16 [ print_sint::w#4 print_sint::w#0 print_sint::w#1 print_uint::w#3 print_uint::w#0 print_uint::w#2 print_uint::w#1 ] ] with [ zp[2]:14 [ print_str::str#10 print_str::str#13 print_str::str#0 ] ]
Coalescing zero page register [ zp[2]:30 [ sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 sin8s::$4 ] ] with [ zp[2]:27 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ] ]
Coalescing zero page register [ zp[2]:44 [ memset::dst#2 memset::dst#1 ] ] with [ zp[2]:2 [ sin8u_table::i#10 sin8u_table::i#1 ] ]
Coalescing zero page register [ zp[1]:51 [ sin8u_table::sinx#0 ] ] with [ zp[1]:29 [ sin8s::isUpper#10 ] ]
Coalescing zero page register [ zp[1]:56 [ sin8u_table::sinx_tr#0 ] ] with [ zp[1]:36 [ mulu8_sel::select#5 ] ]
Coalescing zero page register [ zp[2]:30 [ sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 sin8s::$4 mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ] ] with [ zp[2]:16 [ print_sint::w#4 print_sint::w#0 print_sint::w#1 print_uint::w#3 print_uint::w#0 print_uint::w#2 print_uint::w#1 print_str::str#10 print_str::str#13 print_str::str#0 ] ]
Coalescing zero page register [ zp[2]:44 [ memset::dst#2 memset::dst#1 sin8u_table::i#10 sin8u_table::i#1 ] ] with [ zp[2]:37 [ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] ]
Coalescing zero page register [ zp[2]:39 [ divr16u::dividend#2 divr16u::dividend#0 ] ] with [ zp[2]:30 [ sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 sin8s::$4 mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 print_sint::w#4 print_sint::w#0 print_sint::w#1 print_uint::w#3 print_uint::w#0 print_uint::w#2 print_uint::w#1 print_str::str#10 print_str::str#13 print_str::str#0 ] ]
Allocated (was zp[2]:4) zp[2]:2 [ sin8u_table::x#10 sin8u_table::x#1 ]
Allocated (was zp[2]:6) zp[2]:4 [ sin8u_table::sintab#2 sin8u_table::sintab#1 ]
Allocated (was zp[2]:8) zp[2]:6 [ print_line_cursor#12 print_line_cursor#23 print_line_cursor#1 ]
Allocated (was zp[2]:12) zp[2]:8 [ print_char_cursor#110 print_char_cursor#66 print_char_cursor#104 print_char_cursor#19 print_char_cursor#103 print_char_cursor#2 print_char_cursor#117 ]
Allocated (was zp[2]:21) zp[2]:10 [ mul8su::m#2 mul8su::m#1 mul8su::m#0 sin8u_table::sinx_sc#0 mul8u::return#2 mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#3 mulu8_sel::$0 mulu8_sel::$1 ]
Allocated (was zp[2]:39) zp[2]:12 [ divr16u::dividend#2 divr16u::dividend#0 sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 sin8s::$4 mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 print_sint::w#4 print_sint::w#0 print_sint::w#1 print_uint::w#3 print_uint::w#0 print_uint::w#2 print_uint::w#1 print_str::str#10 print_str::str#13 print_str::str#0 ]
Allocated (was zp[2]:41) zp[2]:14 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 div16u::return#2 sin8u_table::step#0 div16u::return#0 ]
Allocated (was zp[2]:44) zp[2]:16 [ memset::dst#2 memset::dst#1 sin8u_table::i#10 sin8u_table::i#1 divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
Allocated (was zp[1]:51) zp[1]:18 [ sin8u_table::sinx#0 sin8s::isUpper#10 ]
Allocated (was zp[1]:56) zp[1]:19 [ sin8u_table::sinx_tr#0 mulu8_sel::select#5 ]
Allocated (was zp[1]:66) zp[1]:20 [ sin8s::x1#0 ]
Allocated (was zp[1]:70) zp[1]:21 [ sin8s::x3#0 ]
Allocated (was zp[1]:73) zp[1]:22 [ sin8s::usinx#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // PI*2 in u[4.12] format
  .const PI2_u4f12 = $6488
  // PI in u[4.12] format
  .const PI_u4f12 = $3244
  // PI/2 in u[4.12] format
  .const PI_HALF_u4f12 = $1922
  .label print_char_cursor = 8
  .label print_line_cursor = 6
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label tabsize = $14
    // [5] call print_cls 
    // [213] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
    // [6] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [7] call sin8u_table 
    // [9] phi from main::@1 to sin8u_table [phi:main::@1->sin8u_table]
  sin8u_table_from___b1:
    jsr sin8u_table
    jmp __breturn
    // main::@return
  __breturn:
    // [8] return 
    rts
    sintab: .fill $14, 0
}
  // sin8u_table
// Generate unsigned byte sinus table in a min-max range
// sintab - the table to generate into
// tabsize - the number of sinus points (the size of the table)
// min - the minimal value
// max - the maximal value
// sin8u_table(byte* zp(4) sintab)
sin8u_table: {
    .const min = $a
    .const max = $ff
    .const sum = min+max
    .const mid = sum/2+1
    .label amplitude = max-min
    .label step = $e
    .label sinx = $12
    .label sinx_sc = $a
    .label sinx_tr = $13
    .label sintab = 4
    // Iterate over the table
    .label x = 2
    .label i = $10
    // [10] call div16u 
    // [191] phi from sin8u_table to div16u [phi:sin8u_table->div16u]
  div16u_from_sin8u_table:
    jsr div16u
    // [11] (word) div16u::return#2 ← (word) div16u::return#0
    jmp __b3
    // sin8u_table::@3
  __b3:
    // [12] (word) sin8u_table::step#0 ← (word) div16u::return#2
    // [13] call print_str 
  // u[4.12]
    // [85] phi from sin8u_table::@3 to print_str [phi:sin8u_table::@3->print_str]
  print_str_from___b3:
    // [85] phi (byte*) print_char_cursor#110 = (byte*) 1024 [phi:sin8u_table::@3->print_str#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_char_cursor
    lda #>$400
    sta.z print_char_cursor+1
    // [85] phi (byte*) print_str::str#13 = (const byte*) sin8u_table::str [phi:sin8u_table::@3->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    jmp __b4
    // sin8u_table::@4
  __b4:
    // [14] (word) print_uint::w#1 ← (word) sin8u_table::step#0 -- vwuz1=vwuz2 
    lda.z step
    sta.z print_uint.w
    lda.z step+1
    sta.z print_uint.w+1
    // [15] call print_uint 
    // [102] phi from sin8u_table::@4 to print_uint [phi:sin8u_table::@4->print_uint]
  print_uint_from___b4:
    // [102] phi (byte*) print_char_cursor#103 = (byte*) print_char_cursor#2 [phi:sin8u_table::@4->print_uint#0] -- register_copy 
    // [102] phi (word) print_uint::w#3 = (word) print_uint::w#1 [phi:sin8u_table::@4->print_uint#1] -- register_copy 
    jsr print_uint
    // [16] phi from sin8u_table::@4 to sin8u_table::@5 [phi:sin8u_table::@4->sin8u_table::@5]
  __b5_from___b4:
    jmp __b5
    // sin8u_table::@5
  __b5:
    // [17] call print_str 
    // [85] phi from sin8u_table::@5 to print_str [phi:sin8u_table::@5->print_str]
  print_str_from___b5:
    // [85] phi (byte*) print_char_cursor#110 = (byte*) print_char_cursor#19 [phi:sin8u_table::@5->print_str#0] -- register_copy 
    // [85] phi (byte*) print_str::str#13 = (const byte*) sin8u_table::str1 [phi:sin8u_table::@5->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta.z print_str.str
    lda #>str1
    sta.z print_str.str+1
    jsr print_str
    // [18] phi from sin8u_table::@5 to sin8u_table::@6 [phi:sin8u_table::@5->sin8u_table::@6]
  __b6_from___b5:
    jmp __b6
    // sin8u_table::@6
  __b6:
    // [19] call print_uchar 
    // [73] phi from sin8u_table::@6 to print_uchar [phi:sin8u_table::@6->print_uchar]
  print_uchar_from___b6:
    // [73] phi (byte*) print_char_cursor#104 = (byte*) print_char_cursor#2 [phi:sin8u_table::@6->print_uchar#0] -- register_copy 
    // [73] phi (byte) print_uchar::b#8 = (const byte) sin8u_table::min#0 [phi:sin8u_table::@6->print_uchar#1] -- vbuxx=vbuc1 
    ldx #min
    jsr print_uchar
    // [20] phi from sin8u_table::@6 to sin8u_table::@7 [phi:sin8u_table::@6->sin8u_table::@7]
  __b7_from___b6:
    jmp __b7
    // sin8u_table::@7
  __b7:
    // [21] call print_str 
    // [85] phi from sin8u_table::@7 to print_str [phi:sin8u_table::@7->print_str]
  print_str_from___b7:
    // [85] phi (byte*) print_char_cursor#110 = (byte*) print_char_cursor#19 [phi:sin8u_table::@7->print_str#0] -- register_copy 
    // [85] phi (byte*) print_str::str#13 = (const byte*) sin8u_table::str2 [phi:sin8u_table::@7->print_str#1] -- pbuz1=pbuc1 
    lda #<str2
    sta.z print_str.str
    lda #>str2
    sta.z print_str.str+1
    jsr print_str
    // [22] phi from sin8u_table::@7 to sin8u_table::@8 [phi:sin8u_table::@7->sin8u_table::@8]
  __b8_from___b7:
    jmp __b8
    // sin8u_table::@8
  __b8:
    // [23] call print_uchar 
    // [73] phi from sin8u_table::@8 to print_uchar [phi:sin8u_table::@8->print_uchar]
  print_uchar_from___b8:
    // [73] phi (byte*) print_char_cursor#104 = (byte*) print_char_cursor#2 [phi:sin8u_table::@8->print_uchar#0] -- register_copy 
    // [73] phi (byte) print_uchar::b#8 = (const byte) sin8u_table::max#0 [phi:sin8u_table::@8->print_uchar#1] -- vbuxx=vbuc1 
    ldx #max
    jsr print_uchar
    // [24] phi from sin8u_table::@8 to sin8u_table::@9 [phi:sin8u_table::@8->sin8u_table::@9]
  __b9_from___b8:
    jmp __b9
    // sin8u_table::@9
  __b9:
    // [25] call print_str 
    // [85] phi from sin8u_table::@9 to print_str [phi:sin8u_table::@9->print_str]
  print_str_from___b9:
    // [85] phi (byte*) print_char_cursor#110 = (byte*) print_char_cursor#19 [phi:sin8u_table::@9->print_str#0] -- register_copy 
    // [85] phi (byte*) print_str::str#13 = (const byte*) sin8u_table::str3 [phi:sin8u_table::@9->print_str#1] -- pbuz1=pbuc1 
    lda #<str3
    sta.z print_str.str
    lda #>str3
    sta.z print_str.str+1
    jsr print_str
    // [26] phi from sin8u_table::@9 to sin8u_table::@10 [phi:sin8u_table::@9->sin8u_table::@10]
  __b10_from___b9:
    jmp __b10
    // sin8u_table::@10
  __b10:
    // [27] call print_uchar 
    // [73] phi from sin8u_table::@10 to print_uchar [phi:sin8u_table::@10->print_uchar]
  print_uchar_from___b10:
    // [73] phi (byte*) print_char_cursor#104 = (byte*) print_char_cursor#2 [phi:sin8u_table::@10->print_uchar#0] -- register_copy 
    // [73] phi (byte) print_uchar::b#8 = (const byte) sin8u_table::amplitude#0 [phi:sin8u_table::@10->print_uchar#1] -- vbuxx=vbuc1 
    ldx #amplitude
    jsr print_uchar
    // [28] phi from sin8u_table::@10 to sin8u_table::@11 [phi:sin8u_table::@10->sin8u_table::@11]
  __b11_from___b10:
    jmp __b11
    // sin8u_table::@11
  __b11:
    // [29] call print_str 
    // [85] phi from sin8u_table::@11 to print_str [phi:sin8u_table::@11->print_str]
  print_str_from___b11:
    // [85] phi (byte*) print_char_cursor#110 = (byte*) print_char_cursor#19 [phi:sin8u_table::@11->print_str#0] -- register_copy 
    // [85] phi (byte*) print_str::str#13 = (const byte*) sin8u_table::str4 [phi:sin8u_table::@11->print_str#1] -- pbuz1=pbuc1 
    lda #<str4
    sta.z print_str.str
    lda #>str4
    sta.z print_str.str+1
    jsr print_str
    // [30] phi from sin8u_table::@11 to sin8u_table::@12 [phi:sin8u_table::@11->sin8u_table::@12]
  __b12_from___b11:
    jmp __b12
    // sin8u_table::@12
  __b12:
    // [31] call print_uchar 
    // [73] phi from sin8u_table::@12 to print_uchar [phi:sin8u_table::@12->print_uchar]
  print_uchar_from___b12:
    // [73] phi (byte*) print_char_cursor#104 = (byte*) print_char_cursor#2 [phi:sin8u_table::@12->print_uchar#0] -- register_copy 
    // [73] phi (byte) print_uchar::b#8 = (const byte) sin8u_table::mid#0 [phi:sin8u_table::@12->print_uchar#1] -- vbuxx=vbuc1 
    ldx #mid
    jsr print_uchar
    // [32] phi from sin8u_table::@12 to sin8u_table::@13 [phi:sin8u_table::@12->sin8u_table::@13]
  __b13_from___b12:
    jmp __b13
    // sin8u_table::@13
  __b13:
    // [33] call print_ln 
    // [68] phi from sin8u_table::@13 to print_ln [phi:sin8u_table::@13->print_ln]
  print_ln_from___b13:
    // [68] phi (byte*) print_line_cursor#23 = (byte*) 1024 [phi:sin8u_table::@13->print_ln#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_line_cursor
    lda #>$400
    sta.z print_line_cursor+1
    jsr print_ln
    // [34] phi from sin8u_table::@13 to sin8u_table::@1 [phi:sin8u_table::@13->sin8u_table::@1]
  __b1_from___b13:
    // [34] phi (byte*) sin8u_table::sintab#2 = (const byte*) main::sintab [phi:sin8u_table::@13->sin8u_table::@1#0] -- pbuz1=pbuc1 
    lda #<main.sintab
    sta.z sintab
    lda #>main.sintab
    sta.z sintab+1
    // [34] phi (word) sin8u_table::x#10 = (word) 0 [phi:sin8u_table::@13->sin8u_table::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z x
    lda #>0
    sta.z x+1
    // [34] phi (word) sin8u_table::i#10 = (word) 0 [phi:sin8u_table::@13->sin8u_table::@1#2] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    lda #>0
    sta.z i+1
    jmp __b1
  // u[4.12]
    // sin8u_table::@1
  __b1:
    // [35] if((word) sin8u_table::i#10<(const word) main::tabsize) goto sin8u_table::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z i+1
    cmp #>main.tabsize
    bcc __b2
    bne !+
    lda.z i
    cmp #<main.tabsize
    bcc __b2
  !:
    jmp __breturn
    // sin8u_table::@return
  __breturn:
    // [36] return 
    rts
    // sin8u_table::@2
  __b2:
    // [37] (word) sin8s::x#2 ← (word) sin8u_table::x#10 -- vwuz1=vwuz2 
    lda.z x
    sta.z sin8s.x
    lda.z x+1
    sta.z sin8s.x+1
    // [38] call sin8s 
    jsr sin8s
    // [39] (signed byte) sin8s::return#2 ← (signed byte) sin8s::return#0
    jmp __b14
    // sin8u_table::@14
  __b14:
    // [40] (signed byte) sin8u_table::sinx#0 ← (signed byte) sin8s::return#2 -- vbsz1=vbsaa 
    sta.z sinx
    // [41] (signed byte) mul8su::a#0 ← (signed byte) sin8u_table::sinx#0 -- vbsyy=vbsz1 
    ldy.z sinx
    // [42] call mul8su 
    jsr mul8su
    jmp __b15
    // sin8u_table::@15
  __b15:
    // [43] (signed word) sin8u_table::sinx_sc#0 ← (signed word)(word) mul8su::m#2
    // [44] (byte~) sin8u_table::$20 ← > (signed word) sin8u_table::sinx_sc#0 -- vbuaa=_hi_vwsz1 
    lda.z sinx_sc+1
    // [45] (byte) sin8u_table::sinx_tr#0 ← (const byte) sin8u_table::mid#0 + (byte~) sin8u_table::$20 -- vbuz1=vbuc1_plus_vbuaa 
    clc
    adc #mid
    sta.z sinx_tr
    // [46] *((byte*) sin8u_table::sintab#2) ← (byte) sin8u_table::sinx_tr#0 -- _deref_pbuz1=vbuz2 
    lda.z sinx_tr
    ldy #0
    sta (sintab),y
    // [47] (byte*) sin8u_table::sintab#1 ← ++ (byte*) sin8u_table::sintab#2 -- pbuz1=_inc_pbuz1 
    inc.z sintab
    bne !+
    inc.z sintab+1
  !:
    // [48] (byte*) print_char_cursor#117 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [49] call print_str 
    // [85] phi from sin8u_table::@15 to print_str [phi:sin8u_table::@15->print_str]
  print_str_from___b15:
    // [85] phi (byte*) print_char_cursor#110 = (byte*) print_char_cursor#117 [phi:sin8u_table::@15->print_str#0] -- register_copy 
    // [85] phi (byte*) print_str::str#13 = (const byte*) sin8u_table::str5 [phi:sin8u_table::@15->print_str#1] -- pbuz1=pbuc1 
    lda #<str5
    sta.z print_str.str
    lda #>str5
    sta.z print_str.str+1
    jsr print_str
    jmp __b16
    // sin8u_table::@16
  __b16:
    // [50] (word) print_uint::w#2 ← (word) sin8u_table::x#10 -- vwuz1=vwuz2 
    lda.z x
    sta.z print_uint.w
    lda.z x+1
    sta.z print_uint.w+1
    // [51] call print_uint 
    // [102] phi from sin8u_table::@16 to print_uint [phi:sin8u_table::@16->print_uint]
  print_uint_from___b16:
    // [102] phi (byte*) print_char_cursor#103 = (byte*) print_char_cursor#2 [phi:sin8u_table::@16->print_uint#0] -- register_copy 
    // [102] phi (word) print_uint::w#3 = (word) print_uint::w#2 [phi:sin8u_table::@16->print_uint#1] -- register_copy 
    jsr print_uint
    // [52] phi from sin8u_table::@16 to sin8u_table::@17 [phi:sin8u_table::@16->sin8u_table::@17]
  __b17_from___b16:
    jmp __b17
    // sin8u_table::@17
  __b17:
    // [53] call print_str 
    // [85] phi from sin8u_table::@17 to print_str [phi:sin8u_table::@17->print_str]
  print_str_from___b17:
    // [85] phi (byte*) print_char_cursor#110 = (byte*) print_char_cursor#19 [phi:sin8u_table::@17->print_str#0] -- register_copy 
    // [85] phi (byte*) print_str::str#13 = (const byte*) sin8u_table::str6 [phi:sin8u_table::@17->print_str#1] -- pbuz1=pbuc1 
    lda #<str6
    sta.z print_str.str
    lda #>str6
    sta.z print_str.str+1
    jsr print_str
    jmp __b18
    // sin8u_table::@18
  __b18:
    // [54] (signed byte) print_schar::b#1 ← (signed byte) sin8u_table::sinx#0 -- vbsxx=vbsz1 
    ldx.z sinx
    // [55] call print_schar 
    jsr print_schar
    // [56] phi from sin8u_table::@18 to sin8u_table::@19 [phi:sin8u_table::@18->sin8u_table::@19]
  __b19_from___b18:
    jmp __b19
    // sin8u_table::@19
  __b19:
    // [57] call print_str 
    // [85] phi from sin8u_table::@19 to print_str [phi:sin8u_table::@19->print_str]
  print_str_from___b19:
    // [85] phi (byte*) print_char_cursor#110 = (byte*) print_char_cursor#19 [phi:sin8u_table::@19->print_str#0] -- register_copy 
    // [85] phi (byte*) print_str::str#13 = (const byte*) sin8u_table::str7 [phi:sin8u_table::@19->print_str#1] -- pbuz1=pbuc1 
    lda #<str7
    sta.z print_str.str
    lda #>str7
    sta.z print_str.str+1
    jsr print_str
    jmp __b20
    // sin8u_table::@20
  __b20:
    // [58] (signed word) print_sint::w#1 ← (signed word) sin8u_table::sinx_sc#0 -- vwsz1=vwsz2 
    lda.z sinx_sc
    sta.z print_sint.w
    lda.z sinx_sc+1
    sta.z print_sint.w+1
    // [59] call print_sint 
    jsr print_sint
    // [60] phi from sin8u_table::@20 to sin8u_table::@21 [phi:sin8u_table::@20->sin8u_table::@21]
  __b21_from___b20:
    jmp __b21
    // sin8u_table::@21
  __b21:
    // [61] call print_str 
    // [85] phi from sin8u_table::@21 to print_str [phi:sin8u_table::@21->print_str]
  print_str_from___b21:
    // [85] phi (byte*) print_char_cursor#110 = (byte*) print_char_cursor#19 [phi:sin8u_table::@21->print_str#0] -- register_copy 
    // [85] phi (byte*) print_str::str#13 = (const byte*) sin8u_table::str8 [phi:sin8u_table::@21->print_str#1] -- pbuz1=pbuc1 
    lda #<str8
    sta.z print_str.str
    lda #>str8
    sta.z print_str.str+1
    jsr print_str
    jmp __b22
    // sin8u_table::@22
  __b22:
    // [62] (byte) print_uchar::b#7 ← (byte) sin8u_table::sinx_tr#0 -- vbuxx=vbuz1 
    ldx.z sinx_tr
    // [63] call print_uchar 
    // [73] phi from sin8u_table::@22 to print_uchar [phi:sin8u_table::@22->print_uchar]
  print_uchar_from___b22:
    // [73] phi (byte*) print_char_cursor#104 = (byte*) print_char_cursor#2 [phi:sin8u_table::@22->print_uchar#0] -- register_copy 
    // [73] phi (byte) print_uchar::b#8 = (byte) print_uchar::b#7 [phi:sin8u_table::@22->print_uchar#1] -- register_copy 
    jsr print_uchar
    // [64] phi from sin8u_table::@22 to sin8u_table::@23 [phi:sin8u_table::@22->sin8u_table::@23]
  __b23_from___b22:
    jmp __b23
    // sin8u_table::@23
  __b23:
    // [65] call print_ln 
    // [68] phi from sin8u_table::@23 to print_ln [phi:sin8u_table::@23->print_ln]
  print_ln_from___b23:
    // [68] phi (byte*) print_line_cursor#23 = (byte*) print_line_cursor#1 [phi:sin8u_table::@23->print_ln#0] -- register_copy 
    jsr print_ln
    jmp __b24
    // sin8u_table::@24
  __b24:
    // [66] (word) sin8u_table::x#1 ← (word) sin8u_table::x#10 + (word) sin8u_table::step#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z x
    clc
    adc.z step
    sta.z x
    lda.z x+1
    adc.z step+1
    sta.z x+1
    // [67] (word) sin8u_table::i#1 ← ++ (word) sin8u_table::i#10 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [34] phi from sin8u_table::@24 to sin8u_table::@1 [phi:sin8u_table::@24->sin8u_table::@1]
  __b1_from___b24:
    // [34] phi (byte*) sin8u_table::sintab#2 = (byte*) sin8u_table::sintab#1 [phi:sin8u_table::@24->sin8u_table::@1#0] -- register_copy 
    // [34] phi (word) sin8u_table::x#10 = (word) sin8u_table::x#1 [phi:sin8u_table::@24->sin8u_table::@1#1] -- register_copy 
    // [34] phi (word) sin8u_table::i#10 = (word) sin8u_table::i#1 [phi:sin8u_table::@24->sin8u_table::@1#2] -- register_copy 
    jmp __b1
    str: .text "step:"
    .byte 0
    str1: .text " min:"
    .byte 0
    str2: .text " max:"
    .byte 0
    str3: .text " ampl:"
    .byte 0
    str4: .text " mid:"
    .byte 0
    str5: .text "x: "
    .byte 0
    str6: .text " sin: "
    .byte 0
    str7: .text " scaled: "
    .byte 0
    str8: .text " trans: "
    .byte 0
}
  // print_ln
// Print a newline
print_ln: {
    // [69] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  __b1_from_print_ln:
  __b1_from___b1:
    // [69] phi (byte*) print_line_cursor#12 = (byte*) print_line_cursor#23 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp __b1
    // print_ln::@1
  __b1:
    // [70] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#12 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // [71] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#19) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1_from___b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1_from___b1
  !:
    jmp __breturn
    // print_ln::@return
  __breturn:
    // [72] return 
    rts
}
  // print_uchar
// Print a char as HEX
// print_uchar(byte register(X) b)
print_uchar: {
    // [74] (byte~) print_uchar::$0 ← (byte) print_uchar::b#8 >> (byte) 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // [75] (byte) print_char::ch#5 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [76] call print_char 
  // Table of hexadecimal digits
    // [81] phi from print_uchar to print_char [phi:print_uchar->print_char]
  print_char_from_print_uchar:
    // [81] phi (byte*) print_char_cursor#66 = (byte*) print_char_cursor#104 [phi:print_uchar->print_char#0] -- register_copy 
    // [81] phi (byte) print_char::ch#7 = (byte) print_char::ch#5 [phi:print_uchar->print_char#1] -- register_copy 
    jsr print_char
    jmp __b1
    // print_uchar::@1
  __b1:
    // [77] (byte~) print_uchar::$2 ← (byte) print_uchar::b#8 & (byte) $f -- vbuxx=vbuxx_band_vbuc1 
    lda #$f
    axs #0
    // [78] (byte) print_char::ch#6 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2) -- vbuaa=pbuc1_derefidx_vbuxx 
    lda print_hextab,x
    // [79] call print_char 
    // [81] phi from print_uchar::@1 to print_char [phi:print_uchar::@1->print_char]
  print_char_from___b1:
    // [81] phi (byte*) print_char_cursor#66 = (byte*) print_char_cursor#19 [phi:print_uchar::@1->print_char#0] -- register_copy 
    // [81] phi (byte) print_char::ch#7 = (byte) print_char::ch#6 [phi:print_uchar::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp __breturn
    // print_uchar::@return
  __breturn:
    // [80] return 
    rts
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // [82] *((byte*) print_char_cursor#66) ← (byte) print_char::ch#7 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // [83] (byte*) print_char_cursor#19 ← ++ (byte*) print_char_cursor#66 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp __breturn
    // print_char::@return
  __breturn:
    // [84] return 
    rts
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zp($c) str)
print_str: {
    .label str = $c
    // [86] phi from print_str print_str::@3 to print_str::@1 [phi:print_str/print_str::@3->print_str::@1]
  __b1_from_print_str:
  __b1_from___b3:
    // [86] phi (byte*) print_char_cursor#2 = (byte*) print_char_cursor#110 [phi:print_str/print_str::@3->print_str::@1#0] -- register_copy 
    // [86] phi (byte*) print_str::str#10 = (byte*) print_str::str#13 [phi:print_str/print_str::@3->print_str::@1#1] -- register_copy 
    jmp __b1
    // print_str::@1
  __b1:
    // [87] if((byte) 0!=*((byte*) print_str::str#10)) goto print_str::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // print_str::@return
  __breturn:
    // [88] return 
    rts
    // print_str::@2
  __b2:
    // [89] (byte) print_char::ch#0 ← *((byte*) print_str::str#10) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
    // [90] call print_char 
    // [81] phi from print_str::@2 to print_char [phi:print_str::@2->print_char]
  print_char_from___b2:
    // [81] phi (byte*) print_char_cursor#66 = (byte*) print_char_cursor#2 [phi:print_str::@2->print_char#0] -- register_copy 
    // [81] phi (byte) print_char::ch#7 = (byte) print_char::ch#0 [phi:print_str::@2->print_char#1] -- register_copy 
    jsr print_char
    jmp __b3
    // print_str::@3
  __b3:
    // [91] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#10 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp __b1_from___b3
}
  // print_sint
// Print a signed int as HEX
// print_sint(signed word zp($c) w)
print_sint: {
    .label w = $c
    // [92] if((signed word) print_sint::w#1<(signed byte) 0) goto print_sint::@1 -- vwsz1_lt_0_then_la1 
    lda.z w+1
    bmi __b1_from_print_sint
    // [93] phi from print_sint to print_sint::@3 [phi:print_sint->print_sint::@3]
  __b3_from_print_sint:
    jmp __b3
    // print_sint::@3
  __b3:
    // [94] call print_char 
    // [81] phi from print_sint::@3 to print_char [phi:print_sint::@3->print_char]
  print_char_from___b3:
    // [81] phi (byte*) print_char_cursor#66 = (byte*) print_char_cursor#2 [phi:print_sint::@3->print_char#0] -- register_copy 
    // [81] phi (byte) print_char::ch#7 = (byte) ' ' [phi:print_sint::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // [95] phi from print_sint::@3 print_sint::@4 to print_sint::@2 [phi:print_sint::@3/print_sint::@4->print_sint::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [95] phi (signed word) print_sint::w#4 = (signed word) print_sint::w#1 [phi:print_sint::@3/print_sint::@4->print_sint::@2#0] -- register_copy 
    jmp __b2
    // print_sint::@2
  __b2:
    // [96] (word) print_uint::w#0 ← (word)(signed word) print_sint::w#4
    // [97] call print_uint 
    // [102] phi from print_sint::@2 to print_uint [phi:print_sint::@2->print_uint]
  print_uint_from___b2:
    // [102] phi (byte*) print_char_cursor#103 = (byte*) print_char_cursor#19 [phi:print_sint::@2->print_uint#0] -- register_copy 
    // [102] phi (word) print_uint::w#3 = (word) print_uint::w#0 [phi:print_sint::@2->print_uint#1] -- register_copy 
    jsr print_uint
    jmp __breturn
    // print_sint::@return
  __breturn:
    // [98] return 
    rts
    // [99] phi from print_sint to print_sint::@1 [phi:print_sint->print_sint::@1]
  __b1_from_print_sint:
    jmp __b1
    // print_sint::@1
  __b1:
    // [100] call print_char 
    // [81] phi from print_sint::@1 to print_char [phi:print_sint::@1->print_char]
  print_char_from___b1:
    // [81] phi (byte*) print_char_cursor#66 = (byte*) print_char_cursor#2 [phi:print_sint::@1->print_char#0] -- register_copy 
    // [81] phi (byte) print_char::ch#7 = (byte) '-' [phi:print_sint::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    jmp __b4
    // print_sint::@4
  __b4:
    // [101] (signed word) print_sint::w#0 ← - (signed word) print_sint::w#1 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z w
    sta.z w
    lda #0
    sbc.z w+1
    sta.z w+1
    jmp __b2_from___b4
}
  // print_uint
// Print a unsigned int as HEX
// print_uint(word zp($c) w)
print_uint: {
    .label w = $c
    // [103] (byte) print_uchar::b#1 ← > (word) print_uint::w#3 -- vbuxx=_hi_vwuz1 
    ldx.z w+1
    // [104] call print_uchar 
    // [73] phi from print_uint to print_uchar [phi:print_uint->print_uchar]
  print_uchar_from_print_uint:
    // [73] phi (byte*) print_char_cursor#104 = (byte*) print_char_cursor#103 [phi:print_uint->print_uchar#0] -- register_copy 
    // [73] phi (byte) print_uchar::b#8 = (byte) print_uchar::b#1 [phi:print_uint->print_uchar#1] -- register_copy 
    jsr print_uchar
    jmp __b1
    // print_uint::@1
  __b1:
    // [105] (byte) print_uchar::b#2 ← < (word) print_uint::w#3 -- vbuxx=_lo_vwuz1 
    ldx.z w
    // [106] call print_uchar 
    // [73] phi from print_uint::@1 to print_uchar [phi:print_uint::@1->print_uchar]
  print_uchar_from___b1:
    // [73] phi (byte*) print_char_cursor#104 = (byte*) print_char_cursor#19 [phi:print_uint::@1->print_uchar#0] -- register_copy 
    // [73] phi (byte) print_uchar::b#8 = (byte) print_uchar::b#2 [phi:print_uint::@1->print_uchar#1] -- register_copy 
    jsr print_uchar
    jmp __breturn
    // print_uint::@return
  __breturn:
    // [107] return 
    rts
}
  // print_schar
// Print a signed char as HEX
// print_schar(signed byte register(X) b)
print_schar: {
    // [108] if((signed byte) print_schar::b#1<(signed byte) 0) goto print_schar::@1 -- vbsxx_lt_0_then_la1 
    cpx #0
    bmi __b1_from_print_schar
    // [109] phi from print_schar to print_schar::@3 [phi:print_schar->print_schar::@3]
  __b3_from_print_schar:
    jmp __b3
    // print_schar::@3
  __b3:
    // [110] call print_char 
    // [81] phi from print_schar::@3 to print_char [phi:print_schar::@3->print_char]
  print_char_from___b3:
    // [81] phi (byte*) print_char_cursor#66 = (byte*) print_char_cursor#2 [phi:print_schar::@3->print_char#0] -- register_copy 
    // [81] phi (byte) print_char::ch#7 = (byte) ' ' [phi:print_schar::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // [111] phi from print_schar::@3 print_schar::@4 to print_schar::@2 [phi:print_schar::@3/print_schar::@4->print_schar::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [111] phi (signed byte) print_schar::b#4 = (signed byte) print_schar::b#1 [phi:print_schar::@3/print_schar::@4->print_schar::@2#0] -- register_copy 
    jmp __b2
    // print_schar::@2
  __b2:
    // [112] (byte) print_uchar::b#0 ← (byte)(signed byte) print_schar::b#4
    // [113] call print_uchar 
    // [73] phi from print_schar::@2 to print_uchar [phi:print_schar::@2->print_uchar]
  print_uchar_from___b2:
    // [73] phi (byte*) print_char_cursor#104 = (byte*) print_char_cursor#19 [phi:print_schar::@2->print_uchar#0] -- register_copy 
    // [73] phi (byte) print_uchar::b#8 = (byte) print_uchar::b#0 [phi:print_schar::@2->print_uchar#1] -- register_copy 
    jsr print_uchar
    jmp __breturn
    // print_schar::@return
  __breturn:
    // [114] return 
    rts
    // [115] phi from print_schar to print_schar::@1 [phi:print_schar->print_schar::@1]
  __b1_from_print_schar:
    jmp __b1
    // print_schar::@1
  __b1:
    // [116] call print_char 
    // [81] phi from print_schar::@1 to print_char [phi:print_schar::@1->print_char]
  print_char_from___b1:
    // [81] phi (byte*) print_char_cursor#66 = (byte*) print_char_cursor#2 [phi:print_schar::@1->print_char#0] -- register_copy 
    // [81] phi (byte) print_char::ch#7 = (byte) '-' [phi:print_schar::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    jmp __b4
    // print_schar::@4
  __b4:
    // [117] (signed byte) print_schar::b#0 ← - (signed byte) print_schar::b#1 -- vbsxx=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    tax
    jmp __b2_from___b4
}
  // mul8su
// Multiply a signed char and an unsigned char (into a signed int)
// Fixes offsets introduced by using unsigned multiplication
// mul8su(signed byte register(Y) a)
mul8su: {
    .const b = sin8u_table.amplitude+1
    .label m = $a
    // [118] (byte) mul8u::a#1 ← (byte)(signed byte) mul8su::a#0 -- vbuxx=vbuyy 
    tya
    tax
    // [119] call mul8u 
    // [128] phi from mul8su to mul8u [phi:mul8su->mul8u]
  mul8u_from_mul8su:
    // [128] phi (byte) mul8u::a#6 = (byte) mul8u::a#1 [phi:mul8su->mul8u#0] -- register_copy 
    // [128] phi (byte) mul8u::b#2 = (const byte) mul8su::b#0 [phi:mul8su->mul8u#1] -- vbuaa=vbuc1 
    lda #b
    jsr mul8u
    // [120] (word) mul8u::return#2 ← (word) mul8u::res#2
    jmp __b3
    // mul8su::@3
  __b3:
    // [121] (word) mul8su::m#0 ← (word) mul8u::return#2
    // [122] if((signed byte) mul8su::a#0>=(signed byte) 0) goto mul8su::@1 -- vbsyy_ge_0_then_la1 
    cpy #0
    bpl __b1_from___b3
    jmp __b2
    // mul8su::@2
  __b2:
    // [123] (byte~) mul8su::$4 ← > (word) mul8su::m#0 -- vbuaa=_hi_vwuz1 
    lda.z m+1
    // [124] (byte~) mul8su::$6 ← (byte~) mul8su::$4 - (const byte) mul8su::b#0 -- vbuaa=vbuaa_minus_vbuc1 
    sec
    sbc #b
    // [125] (word) mul8su::m#1 ← (word) mul8su::m#0 hi= (byte~) mul8su::$6 -- vwuz1=vwuz1_sethi_vbuaa 
    sta.z m+1
    // [126] phi from mul8su::@2 mul8su::@3 to mul8su::@1 [phi:mul8su::@2/mul8su::@3->mul8su::@1]
  __b1_from___b2:
  __b1_from___b3:
    // [126] phi (word) mul8su::m#2 = (word) mul8su::m#1 [phi:mul8su::@2/mul8su::@3->mul8su::@1#0] -- register_copy 
    jmp __b1
    // mul8su::@1
  __b1:
    jmp __breturn
    // mul8su::@return
  __breturn:
    // [127] return 
    rts
}
  // mul8u
// Perform binary multiplication of two unsigned 8-bit chars into a 16-bit unsigned int
// mul8u(byte register(X) a, byte register(A) b)
mul8u: {
    .label mb = $c
    .label res = $a
    .label return = $a
    // [129] (word) mul8u::mb#0 ← (word)(byte) mul8u::b#2 -- vwuz1=_word_vbuaa 
    sta.z mb
    lda #0
    sta.z mb+1
    // [130] phi from mul8u to mul8u::@1 [phi:mul8u->mul8u::@1]
  __b1_from_mul8u:
    // [130] phi (word) mul8u::mb#2 = (word) mul8u::mb#0 [phi:mul8u->mul8u::@1#0] -- register_copy 
    // [130] phi (word) mul8u::res#2 = (word) 0 [phi:mul8u->mul8u::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z res
    lda #>0
    sta.z res+1
    // [130] phi (byte) mul8u::a#3 = (byte) mul8u::a#6 [phi:mul8u->mul8u::@1#2] -- register_copy 
    jmp __b1
    // mul8u::@1
  __b1:
    // [131] if((byte) mul8u::a#3!=(byte) 0) goto mul8u::@2 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b2
    jmp __breturn
    // mul8u::@return
  __breturn:
    // [132] return 
    rts
    // mul8u::@2
  __b2:
    // [133] (byte~) mul8u::$1 ← (byte) mul8u::a#3 & (byte) 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
    // [134] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3_from___b2
    jmp __b4
    // mul8u::@4
  __b4:
    // [135] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z res
    clc
    adc.z mb
    sta.z res
    lda.z res+1
    adc.z mb+1
    sta.z res+1
    // [136] phi from mul8u::@2 mul8u::@4 to mul8u::@3 [phi:mul8u::@2/mul8u::@4->mul8u::@3]
  __b3_from___b2:
  __b3_from___b4:
    // [136] phi (word) mul8u::res#6 = (word) mul8u::res#2 [phi:mul8u::@2/mul8u::@4->mul8u::@3#0] -- register_copy 
    jmp __b3
    // mul8u::@3
  __b3:
    // [137] (byte) mul8u::a#0 ← (byte) mul8u::a#3 >> (byte) 1 -- vbuxx=vbuxx_ror_1 
    txa
    lsr
    tax
    // [138] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z mb
    rol.z mb+1
    // [130] phi from mul8u::@3 to mul8u::@1 [phi:mul8u::@3->mul8u::@1]
  __b1_from___b3:
    // [130] phi (word) mul8u::mb#2 = (word) mul8u::mb#1 [phi:mul8u::@3->mul8u::@1#0] -- register_copy 
    // [130] phi (word) mul8u::res#2 = (word) mul8u::res#6 [phi:mul8u::@3->mul8u::@1#1] -- register_copy 
    // [130] phi (byte) mul8u::a#3 = (byte) mul8u::a#0 [phi:mul8u::@3->mul8u::@1#2] -- register_copy 
    jmp __b1
}
  // sin8s
// Calculate signed char sinus sin(x)
// x: unsigned int input u[4.12] in the interval $0000 - PI2_u4f12
// result: signed char sin(x) s[0.7] - using the full range  -$7f - $7f
// sin8s(word zp($c) x)
sin8s: {
    // u[2.6] x^3
    .const DIV_6 = $2b
    .label __4 = $c
    .label x = $c
    .label x1 = $14
    .label x3 = $15
    .label usinx = $16
    // Move x1 into the range 0-PI/2 using sinus mirror symmetries
    .label isUpper = $12
    // [139] if((word) sin8s::x#2<(const nomodify word) PI_u4f12) goto sin8s::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda.z x+1
    cmp #>PI_u4f12
    bcc __b1_from_sin8s
    bne !+
    lda.z x
    cmp #<PI_u4f12
    bcc __b1_from_sin8s
  !:
    jmp __b5
    // sin8s::@5
  __b5:
    // [140] (word) sin8s::x#0 ← (word) sin8s::x#2 - (const nomodify word) PI_u4f12 -- vwuz1=vwuz1_minus_vwuc1 
    lda.z x
    sec
    sbc #<PI_u4f12
    sta.z x
    lda.z x+1
    sbc #>PI_u4f12
    sta.z x+1
    // [141] phi from sin8s::@5 to sin8s::@1 [phi:sin8s::@5->sin8s::@1]
  __b1_from___b5:
    // [141] phi (byte) sin8s::isUpper#10 = (byte) 1 [phi:sin8s::@5->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z isUpper
    // [141] phi (word) sin8s::x#4 = (word) sin8s::x#0 [phi:sin8s::@5->sin8s::@1#1] -- register_copy 
    jmp __b1
    // [141] phi from sin8s to sin8s::@1 [phi:sin8s->sin8s::@1]
  __b1_from_sin8s:
    // [141] phi (byte) sin8s::isUpper#10 = (byte) 0 [phi:sin8s->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z isUpper
    // [141] phi (word) sin8s::x#4 = (word) sin8s::x#2 [phi:sin8s->sin8s::@1#1] -- register_copy 
    jmp __b1
    // sin8s::@1
  __b1:
    // [142] if((word) sin8s::x#4<(const nomodify word) PI_HALF_u4f12) goto sin8s::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z x+1
    cmp #>PI_HALF_u4f12
    bcc __b2_from___b1
    bne !+
    lda.z x
    cmp #<PI_HALF_u4f12
    bcc __b2_from___b1
  !:
    jmp __b6
    // sin8s::@6
  __b6:
    // [143] (word) sin8s::x#1 ← (const nomodify word) PI_u4f12 - (word) sin8s::x#4 -- vwuz1=vwuc1_minus_vwuz1 
    sec
    lda #<PI_u4f12
    sbc.z x
    sta.z x
    lda #>PI_u4f12
    sbc.z x+1
    sta.z x+1
    // [144] phi from sin8s::@1 sin8s::@6 to sin8s::@2 [phi:sin8s::@1/sin8s::@6->sin8s::@2]
  __b2_from___b1:
  __b2_from___b6:
    // [144] phi (word) sin8s::x#6 = (word) sin8s::x#4 [phi:sin8s::@1/sin8s::@6->sin8s::@2#0] -- register_copy 
    jmp __b2
    // sin8s::@2
  __b2:
    // [145] (word~) sin8s::$4 ← (word) sin8s::x#6 << (byte) 3 -- vwuz1=vwuz1_rol_3 
    asl.z __4
    rol.z __4+1
    asl.z __4
    rol.z __4+1
    asl.z __4
    rol.z __4+1
    // [146] (byte) sin8s::x1#0 ← > (word~) sin8s::$4 -- vbuz1=_hi_vwuz2 
    lda.z __4+1
    sta.z x1
    // [147] (byte) mulu8_sel::v1#0 ← (byte) sin8s::x1#0 -- vbuxx=vbuz1 
    ldx.z x1
    // [148] (byte) mulu8_sel::v2#0 ← (byte) sin8s::x1#0 -- vbuyy=vbuz1 
    ldy.z x1
    // [149] call mulu8_sel 
    // [182] phi from sin8s::@2 to mulu8_sel [phi:sin8s::@2->mulu8_sel]
  mulu8_sel_from___b2:
    // [182] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@2->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [182] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#0 [phi:sin8s::@2->mulu8_sel#1] -- register_copy 
    // [182] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#0 [phi:sin8s::@2->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [150] (byte) mulu8_sel::return#0 ← (byte) mulu8_sel::return#12
    jmp __b9
    // sin8s::@9
  __b9:
    // [151] (byte) sin8s::x2#0 ← (byte) mulu8_sel::return#0
    // [152] (byte) mulu8_sel::v1#1 ← (byte) sin8s::x2#0 -- vbuxx=vbuaa 
    tax
    // [153] (byte) mulu8_sel::v2#1 ← (byte) sin8s::x1#0 -- vbuyy=vbuz1 
    ldy.z x1
    // [154] call mulu8_sel 
    // [182] phi from sin8s::@9 to mulu8_sel [phi:sin8s::@9->mulu8_sel]
  mulu8_sel_from___b9:
    // [182] phi (byte) mulu8_sel::select#5 = (byte) 1 [phi:sin8s::@9->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta.z mulu8_sel.select
    // [182] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#1 [phi:sin8s::@9->mulu8_sel#1] -- register_copy 
    // [182] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#1 [phi:sin8s::@9->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [155] (byte) mulu8_sel::return#1 ← (byte) mulu8_sel::return#12
    jmp __b10
    // sin8s::@10
  __b10:
    // [156] (byte) sin8s::x3#0 ← (byte) mulu8_sel::return#1 -- vbuz1=vbuaa 
    sta.z x3
    // [157] (byte) mulu8_sel::v1#2 ← (byte) sin8s::x3#0 -- vbuxx=vbuz1 
    ldx.z x3
    // [158] call mulu8_sel 
    // [182] phi from sin8s::@10 to mulu8_sel [phi:sin8s::@10->mulu8_sel]
  mulu8_sel_from___b10:
    // [182] phi (byte) mulu8_sel::select#5 = (byte) 1 [phi:sin8s::@10->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta.z mulu8_sel.select
    // [182] phi (byte) mulu8_sel::v2#5 = (const nomodify byte) sin8s::DIV_6 [phi:sin8s::@10->mulu8_sel#1] -- vbuyy=vbuc1 
    ldy #DIV_6
    // [182] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#2 [phi:sin8s::@10->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [159] (byte) mulu8_sel::return#2 ← (byte) mulu8_sel::return#12
    jmp __b11
    // sin8s::@11
  __b11:
    // [160] (byte) sin8s::x3_6#0 ← (byte) mulu8_sel::return#2
    // [161] (byte) sin8s::usinx#0 ← (byte) sin8s::x1#0 - (byte) sin8s::x3_6#0 -- vbuz1=vbuz2_minus_vbuaa 
    eor #$ff
    sec
    adc.z x1
    sta.z usinx
    // [162] (byte) mulu8_sel::v1#3 ← (byte) sin8s::x3#0 -- vbuxx=vbuz1 
    ldx.z x3
    // [163] (byte) mulu8_sel::v2#3 ← (byte) sin8s::x1#0 -- vbuyy=vbuz1 
    ldy.z x1
    // [164] call mulu8_sel 
    // [182] phi from sin8s::@11 to mulu8_sel [phi:sin8s::@11->mulu8_sel]
  mulu8_sel_from___b11:
    // [182] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@11->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [182] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#3 [phi:sin8s::@11->mulu8_sel#1] -- register_copy 
    // [182] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#3 [phi:sin8s::@11->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [165] (byte) mulu8_sel::return#10 ← (byte) mulu8_sel::return#12
    jmp __b12
    // sin8s::@12
  __b12:
    // [166] (byte) sin8s::x4#0 ← (byte) mulu8_sel::return#10
    // [167] (byte) mulu8_sel::v1#4 ← (byte) sin8s::x4#0 -- vbuxx=vbuaa 
    tax
    // [168] (byte) mulu8_sel::v2#4 ← (byte) sin8s::x1#0 -- vbuyy=vbuz1 
    ldy.z x1
    // [169] call mulu8_sel 
    // [182] phi from sin8s::@12 to mulu8_sel [phi:sin8s::@12->mulu8_sel]
  mulu8_sel_from___b12:
    // [182] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@12->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [182] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#4 [phi:sin8s::@12->mulu8_sel#1] -- register_copy 
    // [182] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#4 [phi:sin8s::@12->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [170] (byte) mulu8_sel::return#11 ← (byte) mulu8_sel::return#12
    jmp __b13
    // sin8s::@13
  __b13:
    // [171] (byte) sin8s::x5#0 ← (byte) mulu8_sel::return#11
    // [172] (byte) sin8s::x5_128#0 ← (byte) sin8s::x5#0 >> (byte) 4 -- vbuaa=vbuaa_ror_4 
    lsr
    lsr
    lsr
    lsr
    // [173] (byte) sin8s::usinx#1 ← (byte) sin8s::usinx#0 + (byte) sin8s::x5_128#0 -- vbuxx=vbuz1_plus_vbuaa 
    clc
    adc.z usinx
    tax
    // [174] if((byte) sin8s::usinx#1<(byte) $80) goto sin8s::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$80
    bcc __b3_from___b13
    jmp __b7
    // sin8s::@7
  __b7:
    // [175] (byte) sin8s::usinx#2 ← -- (byte) sin8s::usinx#1 -- vbuxx=_dec_vbuxx 
    dex
    // [176] phi from sin8s::@13 sin8s::@7 to sin8s::@3 [phi:sin8s::@13/sin8s::@7->sin8s::@3]
  __b3_from___b13:
  __b3_from___b7:
    // [176] phi (byte) sin8s::usinx#4 = (byte) sin8s::usinx#1 [phi:sin8s::@13/sin8s::@7->sin8s::@3#0] -- register_copy 
    jmp __b3
    // sin8s::@3
  __b3:
    // [177] if((byte) sin8s::isUpper#10==(byte) 0) goto sin8s::@14 -- vbuz1_eq_0_then_la1 
    lda.z isUpper
    cmp #0
    beq __b14
    jmp __b8
    // sin8s::@8
  __b8:
    // [178] (signed byte) sin8s::sinx#1 ← - (signed byte)(byte) sin8s::usinx#4 -- vbsaa=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    // [179] phi from sin8s::@14 sin8s::@8 to sin8s::@4 [phi:sin8s::@14/sin8s::@8->sin8s::@4]
  __b4_from___b14:
  __b4_from___b8:
    // [179] phi (signed byte) sin8s::return#0 = (signed byte) sin8s::return#5 [phi:sin8s::@14/sin8s::@8->sin8s::@4#0] -- register_copy 
    jmp __b4
    // sin8s::@4
  __b4:
    jmp __breturn
    // sin8s::@return
  __breturn:
    // [180] return 
    rts
    // sin8s::@14
  __b14:
    // [181] (signed byte) sin8s::return#5 ← (signed byte)(byte) sin8s::usinx#4 -- vbsaa=vbsxx 
    txa
    jmp __b4_from___b14
}
  // mulu8_sel
// Calculate val*val for two unsigned char values - the result is 8 selected bits of the 16-bit result.
// The select parameter indicates how many of the highest bits of the 16-bit result to skip
// mulu8_sel(byte register(X) v1, byte register(Y) v2, byte zp($13) select)
mulu8_sel: {
    .label __0 = $a
    .label __1 = $a
    .label select = $13
    // [183] (byte) mul8u::a#2 ← (byte) mulu8_sel::v1#5
    // [184] (byte) mul8u::b#1 ← (byte) mulu8_sel::v2#5 -- vbuaa=vbuyy 
    tya
    // [185] call mul8u 
    // [128] phi from mulu8_sel to mul8u [phi:mulu8_sel->mul8u]
  mul8u_from_mulu8_sel:
    // [128] phi (byte) mul8u::a#6 = (byte) mul8u::a#2 [phi:mulu8_sel->mul8u#0] -- register_copy 
    // [128] phi (byte) mul8u::b#2 = (byte) mul8u::b#1 [phi:mulu8_sel->mul8u#1] -- register_copy 
    jsr mul8u
    // [186] (word) mul8u::return#3 ← (word) mul8u::res#2
    jmp __b1
    // mulu8_sel::@1
  __b1:
    // [187] (word~) mulu8_sel::$0 ← (word) mul8u::return#3
    // [188] (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5 -- vwuz1=vwuz1_rol_vbuz2 
    ldy.z select
    beq !e+
  !:
    asl.z __1
    rol.z __1+1
    dey
    bne !-
  !e:
    // [189] (byte) mulu8_sel::return#12 ← > (word~) mulu8_sel::$1 -- vbuaa=_hi_vwuz1 
    lda.z __1+1
    jmp __breturn
    // mulu8_sel::@return
  __breturn:
    // [190] return 
    rts
}
  // div16u
// Performs division on two 16 bit unsigned ints
// Returns the quotient dividend/divisor.
// The remainder will be set into the global variable rem16u
// Implemented using simple binary division
div16u: {
    .label return = $e
    // [192] call divr16u 
    // [196] phi from div16u to divr16u [phi:div16u->divr16u]
  divr16u_from_div16u:
    jsr divr16u
    // [193] (word) divr16u::return#2 ← (word) divr16u::return#0
    jmp __b1
    // div16u::@1
  __b1:
    // [194] (word) div16u::return#0 ← (word) divr16u::return#2
    jmp __breturn
    // div16u::@return
  __breturn:
    // [195] return 
    rts
}
  // divr16u
// Performs division on two 16 bit unsigned ints and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
// divr16u(word zp($c) dividend, word zp($10) rem)
divr16u: {
    .label rem = $10
    .label dividend = $c
    .label quotient = $e
    .label return = $e
    // [197] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
  __b1_from_divr16u:
    // [197] phi (byte) divr16u::i#2 = (byte) 0 [phi:divr16u->divr16u::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [197] phi (word) divr16u::quotient#3 = (word) 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z quotient
    lda #>0
    sta.z quotient+1
    // [197] phi (word) divr16u::dividend#2 = (const nomodify word) PI2_u4f12 [phi:divr16u->divr16u::@1#2] -- vwuz1=vwuc1 
    lda #<PI2_u4f12
    sta.z dividend
    lda #>PI2_u4f12
    sta.z dividend+1
    // [197] phi (word) divr16u::rem#4 = (byte) 0 [phi:divr16u->divr16u::@1#3] -- vwuz1=vbuc1 
    lda #<0
    sta.z rem
    lda #>0
    sta.z rem+1
    jmp __b1
    // [197] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
  __b1_from___b3:
    // [197] phi (byte) divr16u::i#2 = (byte) divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
    // [197] phi (word) divr16u::quotient#3 = (word) divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
    // [197] phi (word) divr16u::dividend#2 = (word) divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
    // [197] phi (word) divr16u::rem#4 = (word) divr16u::rem#9 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    jmp __b1
    // divr16u::@1
  __b1:
    // [198] (word) divr16u::rem#0 ← (word) divr16u::rem#4 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z rem
    rol.z rem+1
    // [199] (byte~) divr16u::$1 ← > (word) divr16u::dividend#2 -- vbuaa=_hi_vwuz1 
    lda.z dividend+1
    // [200] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
    // [201] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b2_from___b1
    jmp __b4
    // divr16u::@4
  __b4:
    // [202] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora.z rem
    sta.z rem
    // [203] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
  __b2_from___b1:
  __b2_from___b4:
    // [203] phi (word) divr16u::rem#5 = (word) divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    jmp __b2
    // divr16u::@2
  __b2:
    // [204] (word) divr16u::dividend#0 ← (word) divr16u::dividend#2 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z dividend
    rol.z dividend+1
    // [205] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z quotient
    rol.z quotient+1
    // [206] if((word) divr16u::rem#5<(const word) main::tabsize) goto divr16u::@3 -- vwuz1_lt_vwuc1_then_la1 
    lda.z rem+1
    cmp #>main.tabsize
    bcc __b3_from___b2
    bne !+
    lda.z rem
    cmp #<main.tabsize
    bcc __b3_from___b2
  !:
    jmp __b5
    // divr16u::@5
  __b5:
    // [207] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc.z quotient
    bne !+
    inc.z quotient+1
  !:
    // [208] (word) divr16u::rem#2 ← (word) divr16u::rem#5 - (const word) main::tabsize -- vwuz1=vwuz1_minus_vwuc1 
    lda.z rem
    sec
    sbc #<main.tabsize
    sta.z rem
    lda.z rem+1
    sbc #>main.tabsize
    sta.z rem+1
    // [209] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
  __b3_from___b2:
  __b3_from___b5:
    // [209] phi (word) divr16u::return#0 = (word) divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
    // [209] phi (word) divr16u::rem#9 = (word) divr16u::rem#5 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    jmp __b3
    // divr16u::@3
  __b3:
    // [210] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [211] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1_from___b3
    jmp __breturn
    // divr16u::@return
  __breturn:
    // [212] return 
    rts
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // [214] call memset 
    // [216] phi from print_cls to memset [phi:print_cls->memset]
  memset_from_print_cls:
    jsr memset
    jmp __breturn
    // print_cls::@return
  __breturn:
    // [215] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = $400
    .label end = str+num
    .label dst = $10
    // [217] phi from memset to memset::@1 [phi:memset->memset::@1]
  __b1_from_memset:
    // [217] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    jmp __b1
    // memset::@1
  __b1:
    // [218] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    jmp __breturn
    // memset::@return
  __breturn:
    // [219] return 
    rts
    // memset::@2
  __b2:
    // [220] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // [221] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [217] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
  __b1_from___b2:
    // [217] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
  print_hextab: .text "0123456789abcdef"

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b14
Removing instruction jmp __b15
Removing instruction jmp __b16
Removing instruction jmp __b17
Removing instruction jmp __b18
Removing instruction jmp __b19
Removing instruction jmp __b20
Removing instruction jmp __b21
Removing instruction jmp __b22
Removing instruction jmp __b23
Removing instruction jmp __b24
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b4
Removing instruction jmp __b3
Removing instruction jmp __b5
Removing instruction jmp __b1
Removing instruction jmp __b6
Removing instruction jmp __b2
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp __b7
Removing instruction jmp __b3
Removing instruction jmp __b8
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b2
Removing instruction jmp __b5
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #>0
Removing instruction lda #<0
Removing instruction lda #>0
Replacing instruction ldy.z sinx with TAY
Removing instruction lda.z sinx_tr
Removing instruction lda #>0
Replacing instruction ldx.z x1 with TAX
Replacing instruction ldy.z x1 with TAY
Replacing instruction ldx.z x3 with TAX
Replacing instruction lda #<0 with TXA
Removing instruction lda #>0
Replacing instruction lda #<0 with TXA
Removing instruction lda #>0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1_from___b1 with __b1
Replacing label __b1_from___b1 with __b1
Replacing label __b1_from___b3 with __b1
Replacing label __b1_from_print_sint with __b1
Replacing label __b2_from___b4 with __b2
Replacing label __b1_from_print_schar with __b1
Replacing label __b2_from___b4 with __b2
Replacing label __b1_from___b3 with __b1
Replacing label __b3_from___b2 with __b3
Replacing label __b2_from___b1 with __b2
Replacing label __b2_from___b1 with __b2
Replacing label __b3_from___b13 with __b3
Replacing label __b4_from___b14 with __b4
Replacing label __b2_from___b1 with __b2
Replacing label __b3_from___b2 with __b3
Replacing label __b3_from___b2 with __b3
Replacing label __b1_from___b3 with __b1
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction main_from___b1:
Removing instruction __bend_from___b1:
Removing instruction __b1_from_main:
Removing instruction sin8u_table_from___b1:
Removing instruction __b5_from___b4:
Removing instruction print_str_from___b5:
Removing instruction __b6_from___b5:
Removing instruction print_uchar_from___b6:
Removing instruction __b7_from___b6:
Removing instruction print_str_from___b7:
Removing instruction __b8_from___b7:
Removing instruction print_uchar_from___b8:
Removing instruction __b9_from___b8:
Removing instruction print_str_from___b9:
Removing instruction __b10_from___b9:
Removing instruction print_uchar_from___b10:
Removing instruction __b11_from___b10:
Removing instruction print_str_from___b11:
Removing instruction __b12_from___b11:
Removing instruction print_uchar_from___b12:
Removing instruction __b13_from___b12:
Removing instruction print_ln_from___b13:
Removing instruction __b17_from___b16:
Removing instruction print_str_from___b17:
Removing instruction __b19_from___b18:
Removing instruction print_str_from___b19:
Removing instruction __b21_from___b20:
Removing instruction print_str_from___b21:
Removing instruction __b23_from___b22:
Removing instruction print_ln_from___b23:
Removing instruction __b1_from_print_ln:
Removing instruction __b1_from___b1:
Removing instruction __b1_from_print_str:
Removing instruction __b1_from___b3:
Removing instruction __b3_from_print_sint:
Removing instruction print_char_from___b3:
Removing instruction __b2_from___b3:
Removing instruction __b2_from___b4:
Removing instruction print_uint_from___b2:
Removing instruction __b1_from_print_sint:
Removing instruction print_char_from___b1:
Removing instruction __b3_from_print_schar:
Removing instruction print_char_from___b3:
Removing instruction __b2_from___b3:
Removing instruction __b2_from___b4:
Removing instruction print_uchar_from___b2:
Removing instruction __b1_from_print_schar:
Removing instruction print_char_from___b1:
Removing instruction __b1_from___b2:
Removing instruction __b1_from___b3:
Removing instruction __breturn:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b4:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b6:
Removing instruction __b3_from___b13:
Removing instruction __b3_from___b7:
Removing instruction __b4_from___b14:
Removing instruction __b4_from___b8:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b4:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b5:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bbegin:
Removing instruction __bend:
Removing instruction print_cls_from_main:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction div16u_from_sin8u_table:
Removing instruction __b3:
Removing instruction print_str_from___b3:
Removing instruction __b4:
Removing instruction print_uint_from___b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction __b8:
Removing instruction __b9:
Removing instruction __b10:
Removing instruction __b11:
Removing instruction __b12:
Removing instruction __b13:
Removing instruction __b1_from___b13:
Removing instruction __breturn:
Removing instruction __b14:
Removing instruction __b15:
Removing instruction print_str_from___b15:
Removing instruction __b16:
Removing instruction print_uint_from___b16:
Removing instruction __b17:
Removing instruction __b18:
Removing instruction __b19:
Removing instruction __b20:
Removing instruction __b21:
Removing instruction __b22:
Removing instruction print_uchar_from___b22:
Removing instruction __b23:
Removing instruction __b24:
Removing instruction __b1_from___b24:
Removing instruction __breturn:
Removing instruction print_char_from_print_uchar:
Removing instruction __b1:
Removing instruction print_char_from___b1:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction print_char_from___b2:
Removing instruction __b3:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction print_uchar_from_print_uint:
Removing instruction __b1:
Removing instruction print_uchar_from___b1:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction mul8u_from_mul8su:
Removing instruction __b3:
Removing instruction __b2:
Removing instruction __b1_from_mul8u:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __b1_from___b3:
Removing instruction __b5:
Removing instruction __b1_from___b5:
Removing instruction __b6:
Removing instruction mulu8_sel_from___b2:
Removing instruction __b9:
Removing instruction mulu8_sel_from___b9:
Removing instruction __b10:
Removing instruction mulu8_sel_from___b10:
Removing instruction __b11:
Removing instruction mulu8_sel_from___b11:
Removing instruction __b12:
Removing instruction mulu8_sel_from___b12:
Removing instruction __b13:
Removing instruction __b7:
Removing instruction __b8:
Removing instruction mul8u_from_mulu8_sel:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction divr16u_from_div16u:
Removing instruction __b1:
Removing instruction __b1_from_divr16u:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __breturn:
Removing instruction memset_from_print_cls:
Removing instruction __breturn:
Removing instruction __b1_from_memset:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Replacing jump to rts with rts in jmp __b4
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label __b1_from_sin8s to __b5
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #<0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __b4:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const nomodify word) PI2_u4f12 = (word) $6488
(const nomodify word) PI_HALF_u4f12 = (word) $1922
(const nomodify word) PI_u4f12 = (word) $3244
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
(label) div16u::@1
(label) div16u::@return
(word) div16u::dividend
(word) div16u::divisor
(word) div16u::return
(word) div16u::return#0 return zp[2]:14 367.33333333333337
(word) div16u::return#2 return zp[2]:14 202.0
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(byte~) divr16u::$1 reg byte a 200002.0
(byte~) divr16u::$2 reg byte a 200002.0
(label) divr16u::@1
(label) divr16u::@2
(label) divr16u::@3
(label) divr16u::@4
(label) divr16u::@5
(label) divr16u::@return
(word) divr16u::dividend
(word) divr16u::dividend#0 dividend zp[2]:12 25000.25
(word) divr16u::dividend#2 dividend zp[2]:12 42857.57142857143
(word) divr16u::divisor
(byte) divr16u::i
(byte) divr16u::i#1 reg byte x 150001.5
(byte) divr16u::i#2 reg byte x 15384.76923076923
(word) divr16u::quotient
(word) divr16u::quotient#1 quotient zp[2]:14 150001.5
(word) divr16u::quotient#2 quotient zp[2]:14 100001.0
(word) divr16u::quotient#3 quotient zp[2]:14 25000.25
(word) divr16u::rem
(word) divr16u::rem#0 rem zp[2]:16 75000.75
(word) divr16u::rem#1 rem zp[2]:16 200002.0
(word) divr16u::rem#2 rem zp[2]:16 200002.0
(word) divr16u::rem#4 rem zp[2]:16 200002.0
(word) divr16u::rem#5 rem zp[2]:16 100001.0
(word) divr16u::rem#9 rem zp[2]:16 100001.0
(word) divr16u::return
(word) divr16u::return#0 return zp[2]:14 60200.8
(word) divr16u::return#2 return zp[2]:14 2002.0
(void()) main()
(label) main::@1
(label) main::@return
(const byte*) main::sintab[(number) $14]  = { fill( $14, 0) }
(const word) main::tabsize = (word) $14
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@return
(byte) memset::c
(const byte) memset::c#0 c = (byte) ' '
(byte*) memset::dst
(byte*) memset::dst#1 dst zp[2]:16 20002.0
(byte*) memset::dst#2 dst zp[2]:16 13334.666666666666
(byte*) memset::end
(const byte*) memset::end#0 end = (byte*)(const void*) memset::str#0+(const word) memset::num#0
(word) memset::num
(const word) memset::num#0 num = (word) $3e8
(void*) memset::return
(void*) memset::str
(const void*) memset::str#0 str = (void*)(byte*) 1024
(signed word()) mul8su((signed byte) mul8su::a , (byte) mul8su::b)
(byte~) mul8su::$4 reg byte a 20002.0
(byte~) mul8su::$6 reg byte a 20002.0
(label) mul8su::@1
(label) mul8su::@2
(label) mul8su::@3
(label) mul8su::@return
(signed byte) mul8su::a
(signed byte) mul8su::a#0 reg byte y 2200.4
(byte) mul8su::b
(const byte) mul8su::b#0 b = (const byte) sin8u_table::amplitude#0+(byte) 1
(word) mul8su::m
(word) mul8su::m#0 m zp[2]:10 10001.0
(word) mul8su::m#1 m zp[2]:10 20002.0
(word) mul8su::m#2 m zp[2]:10 6667.333333333333
(signed word) mul8su::return
(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
(byte~) mul8u::$1 reg byte a 2.00000002E8
(label) mul8u::@1
(label) mul8u::@2
(label) mul8u::@3
(label) mul8u::@4
(label) mul8u::@return
(byte) mul8u::a
(byte) mul8u::a#0 reg byte x 1.00000001E8
(byte) mul8u::a#1 reg byte x 20002.0
(byte) mul8u::a#2 reg byte x 100001.0
(byte) mul8u::a#3 reg byte x 6.683333416666667E7
(byte) mul8u::a#6 reg byte x 555001.5
(byte) mul8u::b
(byte) mul8u::b#1 reg byte a 200002.0
(byte) mul8u::b#2 reg byte a 100001.0
(word) mul8u::mb
(word) mul8u::mb#0 mb zp[2]:12 2000002.0
(word) mul8u::mb#1 mb zp[2]:12 2.00000002E8
(word) mul8u::mb#2 mb zp[2]:12 4.300000057142857E7
(word) mul8u::res
(word) mul8u::res#1 res zp[2]:10 2.00000002E8
(word) mul8u::res#2 res zp[2]:10 4.287285785714286E7
(word) mul8u::res#6 res zp[2]:10 1.00000001E8
(word) mul8u::return
(word) mul8u::return#2 return zp[2]:10 20002.0
(word) mul8u::return#3 return zp[2]:10 200002.0
(byte()) mulu8_sel((byte) mulu8_sel::v1 , (byte) mulu8_sel::v2 , (byte) mulu8_sel::select)
(word~) mulu8_sel::$0 zp[2]:10 200002.0
(word~) mulu8_sel::$1 zp[2]:10 200002.0
(label) mulu8_sel::@1
(label) mulu8_sel::@return
(byte) mulu8_sel::return
(byte) mulu8_sel::return#0 reg byte a 20002.0
(byte) mulu8_sel::return#1 reg byte a 20002.0
(byte) mulu8_sel::return#10 reg byte a 20002.0
(byte) mulu8_sel::return#11 reg byte a 20002.0
(byte) mulu8_sel::return#12 reg byte a 21429.428571428572
(byte) mulu8_sel::return#2 reg byte a 20002.0
(byte) mulu8_sel::select
(byte) mulu8_sel::select#5 select zp[1]:19 16666.833333333332
(byte) mulu8_sel::v1
(byte) mulu8_sel::v1#0 reg byte x 10001.0
(byte) mulu8_sel::v1#1 reg byte x 10001.0
(byte) mulu8_sel::v1#2 reg byte x 20002.0
(byte) mulu8_sel::v1#3 reg byte x 10001.0
(byte) mulu8_sel::v1#4 reg byte x 10001.0
(byte) mulu8_sel::v1#5 reg byte x 150006.0
(byte) mulu8_sel::v2
(byte) mulu8_sel::v2#0 reg byte y 20002.0
(byte) mulu8_sel::v2#1 reg byte y 20002.0
(byte) mulu8_sel::v2#3 reg byte y 20002.0
(byte) mulu8_sel::v2#4 reg byte y 20002.0
(byte) mulu8_sel::v2#5 reg byte y 70002.5
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0 reg byte a 2000002.0
(byte) print_char::ch#5 reg byte a 2000002.0
(byte) print_char::ch#6 reg byte a 2000002.0
(byte) print_char::ch#7 reg byte a 1.3000004E7
(byte*) print_char_cursor
(byte*) print_char_cursor#103 print_char_cursor zp[2]:8 55552.0
(byte*) print_char_cursor#104 print_char_cursor zp[2]:8 403803.00000000006
(byte*) print_char_cursor#110 print_char_cursor zp[2]:8 14409.0
(byte*) print_char_cursor#117 print_char_cursor zp[2]:8 2002.0
(byte*) print_char_cursor#19 print_char_cursor zp[2]:8 267824.77551020414
(byte*) print_char_cursor#2 print_char_cursor zp[2]:8 73304.07142857143
(byte*) print_char_cursor#66 print_char_cursor zp[2]:8 1.15200045E7
(void()) print_cls()
(label) print_cls::@return
(const to_nomodify byte*) print_hextab[]  = (byte*) "0123456789abcdef"z
(byte*) print_line_cursor
(byte*) print_line_cursor#1 print_line_cursor zp[2]:6 81135.27027027027
(byte*) print_line_cursor#12 print_line_cursor zp[2]:6 2010003.0
(byte*) print_line_cursor#23 print_line_cursor zp[2]:6 11002.0
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(void()) print_schar((signed byte) print_schar::b)
(label) print_schar::@1
(label) print_schar::@2
(label) print_schar::@3
(label) print_schar::@4
(label) print_schar::@return
(signed byte) print_schar::b
(signed byte) print_schar::b#0 reg byte x 20002.0
(signed byte) print_schar::b#1 reg byte x 5167.333333333333
(signed byte) print_schar::b#4 reg byte x 20002.0
(byte*) print_screen
(void()) print_sint((signed word) print_sint::w)
(label) print_sint::@1
(label) print_sint::@2
(label) print_sint::@3
(label) print_sint::@4
(label) print_sint::@return
(signed word) print_sint::w
(signed word) print_sint::w#0 w zp[2]:12 20002.0
(signed word) print_sint::w#1 w zp[2]:12 5167.333333333333
(signed word) print_sint::w#4 w zp[2]:12 20002.0
(void()) print_str((byte*) print_str::str)
(label) print_str::@1
(label) print_str::@2
(label) print_str::@3
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0 str zp[2]:12 2000002.0
(byte*) print_str::str#10 str zp[2]:12 1002501.25
(byte*) print_str::str#13 str zp[2]:12 10001.0
(void()) print_uchar((byte) print_uchar::b)
(byte~) print_uchar::$0 reg byte a 2000002.0
(byte~) print_uchar::$2 reg byte x 2000002.0
(label) print_uchar::@1
(label) print_uchar::@return
(byte) print_uchar::b
(byte) print_uchar::b#0 reg byte x 20002.0
(byte) print_uchar::b#1 reg byte x 200002.0
(byte) print_uchar::b#2 reg byte x 200002.0
(byte) print_uchar::b#7 reg byte x 2002.0
(byte) print_uchar::b#8 reg byte x 552751.5
(void()) print_uint((word) print_uint::w)
(label) print_uint::@1
(label) print_uint::@return
(word) print_uint::w
(word) print_uint::w#0 w zp[2]:12 20002.0
(word) print_uint::w#1 w zp[2]:12 202.0
(word) print_uint::w#2 w zp[2]:12 2002.0
(word) print_uint::w#3 w zp[2]:12 70368.33333333333
(signed byte()) sin8s((word) sin8s::x)
(word~) sin8s::$4 zp[2]:12 20002.0
(label) sin8s::@1
(label) sin8s::@10
(label) sin8s::@11
(label) sin8s::@12
(label) sin8s::@13
(label) sin8s::@14
(label) sin8s::@2
(label) sin8s::@3
(label) sin8s::@4
(label) sin8s::@5
(label) sin8s::@6
(label) sin8s::@7
(label) sin8s::@8
(label) sin8s::@9
(label) sin8s::@return
(const nomodify byte) sin8s::DIV_6 = (byte) $2b
(byte) sin8s::isUpper
(byte) sin8s::isUpper#10 isUpper zp[1]:18 277.80555555555554
(signed byte) sin8s::return
(signed byte) sin8s::return#0 reg byte a 7001.0
(signed byte) sin8s::return#2 reg byte a 2002.0
(signed byte) sin8s::return#5 reg byte a 20002.0
(signed byte) sin8s::sinx
(signed byte) sin8s::sinx#1 reg byte a 20002.0
(byte) sin8s::usinx
(byte) sin8s::usinx#0 usinx zp[1]:22 1666.8333333333333
(byte) sin8s::usinx#1 reg byte x 20002.0
(byte) sin8s::usinx#2 reg byte x 20002.0
(byte) sin8s::usinx#4 reg byte x 10001.0
(word) sin8s::x
(word) sin8s::x#0 x zp[2]:12 20002.0
(word) sin8s::x#1 x zp[2]:12 20002.0
(word) sin8s::x#2 x zp[2]:12 15502.0
(word) sin8s::x#4 x zp[2]:12 25002.5
(word) sin8s::x#6 x zp[2]:12 30003.0
(byte) sin8s::x1
(byte) sin8s::x1#0 x1 zp[1]:20 3182.1363636363635
(byte) sin8s::x2
(byte) sin8s::x2#0 reg byte a 20002.0
(byte) sin8s::x3
(byte) sin8s::x3#0 x3 zp[1]:21 5000.5
(byte) sin8s::x3_6
(byte) sin8s::x3_6#0 reg byte a 20002.0
(byte) sin8s::x4
(byte) sin8s::x4#0 reg byte a 20002.0
(byte) sin8s::x5
(byte) sin8s::x5#0 reg byte a 20002.0
(byte) sin8s::x5_128
(byte) sin8s::x5_128#0 reg byte a 20002.0
(void()) sin8u_table((byte*) sin8u_table::sintab , (word) sin8u_table::tabsize , (byte) sin8u_table::min , (byte) sin8u_table::max)
(byte~) sin8u_table::$20 reg byte a 2002.0
(label) sin8u_table::@1
(label) sin8u_table::@10
(label) sin8u_table::@11
(label) sin8u_table::@12
(label) sin8u_table::@13
(label) sin8u_table::@14
(label) sin8u_table::@15
(label) sin8u_table::@16
(label) sin8u_table::@17
(label) sin8u_table::@18
(label) sin8u_table::@19
(label) sin8u_table::@2
(label) sin8u_table::@20
(label) sin8u_table::@21
(label) sin8u_table::@22
(label) sin8u_table::@23
(label) sin8u_table::@24
(label) sin8u_table::@3
(label) sin8u_table::@4
(label) sin8u_table::@5
(label) sin8u_table::@6
(label) sin8u_table::@7
(label) sin8u_table::@8
(label) sin8u_table::@9
(label) sin8u_table::@return
(byte) sin8u_table::amplitude
(const byte) sin8u_table::amplitude#0 amplitude = (const byte) sin8u_table::max#0-(const byte) sin8u_table::min#0
(word) sin8u_table::i
(word) sin8u_table::i#1 i zp[2]:16 2002.0
(word) sin8u_table::i#10 i zp[2]:16 93.84375
(byte) sin8u_table::max
(const byte) sin8u_table::max#0 max = (byte) $ff
(byte) sin8u_table::mid
(const byte) sin8u_table::mid#0 mid = (byte)(const word) sin8u_table::sum#0/(byte) 2+(byte) 1
(byte) sin8u_table::min
(const byte) sin8u_table::min#0 min = (byte) $a
(byte*) sin8u_table::sintab
(byte*) sin8u_table::sintab#1 sintab zp[2]:4 95.33333333333333
(byte*) sin8u_table::sintab#2 sintab zp[2]:4 250.25
(signed byte) sin8u_table::sinx
(signed byte) sin8u_table::sinx#0 sinx zp[1]:18 214.5
(signed word) sin8u_table::sinx_sc
(signed word) sin8u_table::sinx_sc#0 sinx_sc zp[2]:10 200.2
(byte) sin8u_table::sinx_tr
(byte) sin8u_table::sinx_tr#0 sinx_tr zp[1]:19 176.64705882352942
(word) sin8u_table::step
(word) sin8u_table::step#0 step zp[2]:14 21.87272727272727
(const byte*) sin8u_table::str[(byte) 6]  = (byte*) "step:"
(const byte*) sin8u_table::str1[(byte) 6]  = (byte*) " min:"
(const byte*) sin8u_table::str2[(byte) 6]  = (byte*) " max:"
(const byte*) sin8u_table::str3[(byte) 7]  = (byte*) " ampl:"
(const byte*) sin8u_table::str4[(byte) 6]  = (byte*) " mid:"
(const byte*) sin8u_table::str5[(byte) 4]  = (byte*) "x: "
(const byte*) sin8u_table::str6[(byte) 7]  = (byte*) " sin: "
(const byte*) sin8u_table::str7[(byte) $a]  = (byte*) " scaled: "
(const byte*) sin8u_table::str8[(byte) 9]  = (byte*) " trans: "
(word) sin8u_table::sum
(const word) sin8u_table::sum#0 sum = (word)(const byte) sin8u_table::min#0+(const byte) sin8u_table::max#0
(word) sin8u_table::tabsize
(word) sin8u_table::x
(word) sin8u_table::x#1 x zp[2]:2 1001.0
(word) sin8u_table::x#10 x zp[2]:2 129.16129032258064

zp[2]:2 [ sin8u_table::x#10 sin8u_table::x#1 ]
zp[2]:4 [ sin8u_table::sintab#2 sin8u_table::sintab#1 ]
zp[2]:6 [ print_line_cursor#12 print_line_cursor#23 print_line_cursor#1 ]
reg byte x [ print_uchar::b#8 print_uchar::b#0 print_uchar::b#1 print_uchar::b#2 print_uchar::b#7 ]
reg byte a [ print_char::ch#7 print_char::ch#0 print_char::ch#5 print_char::ch#6 ]
zp[2]:8 [ print_char_cursor#110 print_char_cursor#66 print_char_cursor#104 print_char_cursor#19 print_char_cursor#103 print_char_cursor#2 print_char_cursor#117 ]
reg byte x [ print_schar::b#4 print_schar::b#0 print_schar::b#1 ]
zp[2]:10 [ mul8su::m#2 mul8su::m#1 mul8su::m#0 sin8u_table::sinx_sc#0 mul8u::return#2 mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#3 mulu8_sel::$0 mulu8_sel::$1 ]
reg byte a [ mul8u::b#2 mul8u::b#1 ]
reg byte x [ mul8u::a#3 mul8u::a#6 mul8u::a#1 mul8u::a#2 mul8u::a#0 ]
reg byte x [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ]
reg byte a [ sin8s::return#0 sin8s::return#5 sin8s::sinx#1 ]
reg byte x [ mulu8_sel::v1#5 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 mulu8_sel::v1#1 ]
reg byte y [ mulu8_sel::v2#5 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 mulu8_sel::v2#1 ]
zp[2]:12 [ divr16u::dividend#2 divr16u::dividend#0 sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 sin8s::$4 mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 print_sint::w#4 print_sint::w#0 print_sint::w#1 print_uint::w#3 print_uint::w#0 print_uint::w#2 print_uint::w#1 print_str::str#10 print_str::str#13 print_str::str#0 ]
zp[2]:14 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 div16u::return#2 sin8u_table::step#0 div16u::return#0 ]
reg byte x [ divr16u::i#2 divr16u::i#1 ]
zp[2]:16 [ memset::dst#2 memset::dst#1 sin8u_table::i#10 sin8u_table::i#1 divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
reg byte a [ sin8s::return#2 ]
zp[1]:18 [ sin8u_table::sinx#0 sin8s::isUpper#10 ]
reg byte y [ mul8su::a#0 ]
reg byte a [ sin8u_table::$20 ]
zp[1]:19 [ sin8u_table::sinx_tr#0 mulu8_sel::select#5 ]
reg byte a [ print_uchar::$0 ]
reg byte x [ print_uchar::$2 ]
reg byte a [ mul8su::$4 ]
reg byte a [ mul8su::$6 ]
reg byte a [ mul8u::$1 ]
zp[1]:20 [ sin8s::x1#0 ]
reg byte a [ mulu8_sel::return#0 ]
reg byte a [ sin8s::x2#0 ]
reg byte a [ mulu8_sel::return#1 ]
zp[1]:21 [ sin8s::x3#0 ]
reg byte a [ mulu8_sel::return#2 ]
reg byte a [ sin8s::x3_6#0 ]
zp[1]:22 [ sin8s::usinx#0 ]
reg byte a [ mulu8_sel::return#10 ]
reg byte a [ sin8s::x4#0 ]
reg byte a [ mulu8_sel::return#11 ]
reg byte a [ sin8s::x5#0 ]
reg byte a [ sin8s::x5_128#0 ]
reg byte a [ mulu8_sel::return#12 ]
reg byte a [ divr16u::$1 ]
reg byte a [ divr16u::$2 ]


FINAL ASSEMBLER
Score: 17567

  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // PI*2 in u[4.12] format
  .const PI2_u4f12 = $6488
  // PI in u[4.12] format
  .const PI_u4f12 = $3244
  // PI/2 in u[4.12] format
  .const PI_HALF_u4f12 = $1922
  .label print_char_cursor = 8
  .label print_line_cursor = 6
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label tabsize = $14
    // print_cls()
    // [5] call print_cls 
    // [213] phi from main to print_cls [phi:main->print_cls]
    jsr print_cls
    // [6] phi from main to main::@1 [phi:main->main::@1]
    // main::@1
    // sin8u_table(sintab, tabsize, 10, 255)
    // [7] call sin8u_table 
    // [9] phi from main::@1 to sin8u_table [phi:main::@1->sin8u_table]
    jsr sin8u_table
    // main::@return
    // }
    // [8] return 
    rts
    sintab: .fill $14, 0
}
  // sin8u_table
// Generate unsigned byte sinus table in a min-max range
// sintab - the table to generate into
// tabsize - the number of sinus points (the size of the table)
// min - the minimal value
// max - the maximal value
// sin8u_table(byte* zp(4) sintab)
sin8u_table: {
    .const min = $a
    .const max = $ff
    .const sum = min+max
    .const mid = sum/2+1
    .label amplitude = max-min
    .label step = $e
    .label sinx = $12
    .label sinx_sc = $a
    .label sinx_tr = $13
    .label sintab = 4
    // Iterate over the table
    .label x = 2
    .label i = $10
    // div16u(PI2_u4f12, tabsize)
    // [10] call div16u 
    // [191] phi from sin8u_table to div16u [phi:sin8u_table->div16u]
    jsr div16u
    // div16u(PI2_u4f12, tabsize)
    // [11] (word) div16u::return#2 ← (word) div16u::return#0
    // sin8u_table::@3
    // step = div16u(PI2_u4f12, tabsize)
    // [12] (word) sin8u_table::step#0 ← (word) div16u::return#2
    // print_str("step:")
    // [13] call print_str 
  // u[4.12]
    // [85] phi from sin8u_table::@3 to print_str [phi:sin8u_table::@3->print_str]
    // [85] phi (byte*) print_char_cursor#110 = (byte*) 1024 [phi:sin8u_table::@3->print_str#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_char_cursor
    lda #>$400
    sta.z print_char_cursor+1
    // [85] phi (byte*) print_str::str#13 = (const byte*) sin8u_table::str [phi:sin8u_table::@3->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    // sin8u_table::@4
    // print_uint(step)
    // [14] (word) print_uint::w#1 ← (word) sin8u_table::step#0 -- vwuz1=vwuz2 
    lda.z step
    sta.z print_uint.w
    lda.z step+1
    sta.z print_uint.w+1
    // [15] call print_uint 
    // [102] phi from sin8u_table::@4 to print_uint [phi:sin8u_table::@4->print_uint]
    // [102] phi (byte*) print_char_cursor#103 = (byte*) print_char_cursor#2 [phi:sin8u_table::@4->print_uint#0] -- register_copy 
    // [102] phi (word) print_uint::w#3 = (word) print_uint::w#1 [phi:sin8u_table::@4->print_uint#1] -- register_copy 
    jsr print_uint
    // [16] phi from sin8u_table::@4 to sin8u_table::@5 [phi:sin8u_table::@4->sin8u_table::@5]
    // sin8u_table::@5
    // print_str(" min:")
    // [17] call print_str 
    // [85] phi from sin8u_table::@5 to print_str [phi:sin8u_table::@5->print_str]
    // [85] phi (byte*) print_char_cursor#110 = (byte*) print_char_cursor#19 [phi:sin8u_table::@5->print_str#0] -- register_copy 
    // [85] phi (byte*) print_str::str#13 = (const byte*) sin8u_table::str1 [phi:sin8u_table::@5->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta.z print_str.str
    lda #>str1
    sta.z print_str.str+1
    jsr print_str
    // [18] phi from sin8u_table::@5 to sin8u_table::@6 [phi:sin8u_table::@5->sin8u_table::@6]
    // sin8u_table::@6
    // print_uchar(min)
    // [19] call print_uchar 
    // [73] phi from sin8u_table::@6 to print_uchar [phi:sin8u_table::@6->print_uchar]
    // [73] phi (byte*) print_char_cursor#104 = (byte*) print_char_cursor#2 [phi:sin8u_table::@6->print_uchar#0] -- register_copy 
    // [73] phi (byte) print_uchar::b#8 = (const byte) sin8u_table::min#0 [phi:sin8u_table::@6->print_uchar#1] -- vbuxx=vbuc1 
    ldx #min
    jsr print_uchar
    // [20] phi from sin8u_table::@6 to sin8u_table::@7 [phi:sin8u_table::@6->sin8u_table::@7]
    // sin8u_table::@7
    // print_str(" max:")
    // [21] call print_str 
    // [85] phi from sin8u_table::@7 to print_str [phi:sin8u_table::@7->print_str]
    // [85] phi (byte*) print_char_cursor#110 = (byte*) print_char_cursor#19 [phi:sin8u_table::@7->print_str#0] -- register_copy 
    // [85] phi (byte*) print_str::str#13 = (const byte*) sin8u_table::str2 [phi:sin8u_table::@7->print_str#1] -- pbuz1=pbuc1 
    lda #<str2
    sta.z print_str.str
    lda #>str2
    sta.z print_str.str+1
    jsr print_str
    // [22] phi from sin8u_table::@7 to sin8u_table::@8 [phi:sin8u_table::@7->sin8u_table::@8]
    // sin8u_table::@8
    // print_uchar(max)
    // [23] call print_uchar 
    // [73] phi from sin8u_table::@8 to print_uchar [phi:sin8u_table::@8->print_uchar]
    // [73] phi (byte*) print_char_cursor#104 = (byte*) print_char_cursor#2 [phi:sin8u_table::@8->print_uchar#0] -- register_copy 
    // [73] phi (byte) print_uchar::b#8 = (const byte) sin8u_table::max#0 [phi:sin8u_table::@8->print_uchar#1] -- vbuxx=vbuc1 
    ldx #max
    jsr print_uchar
    // [24] phi from sin8u_table::@8 to sin8u_table::@9 [phi:sin8u_table::@8->sin8u_table::@9]
    // sin8u_table::@9
    // print_str(" ampl:")
    // [25] call print_str 
    // [85] phi from sin8u_table::@9 to print_str [phi:sin8u_table::@9->print_str]
    // [85] phi (byte*) print_char_cursor#110 = (byte*) print_char_cursor#19 [phi:sin8u_table::@9->print_str#0] -- register_copy 
    // [85] phi (byte*) print_str::str#13 = (const byte*) sin8u_table::str3 [phi:sin8u_table::@9->print_str#1] -- pbuz1=pbuc1 
    lda #<str3
    sta.z print_str.str
    lda #>str3
    sta.z print_str.str+1
    jsr print_str
    // [26] phi from sin8u_table::@9 to sin8u_table::@10 [phi:sin8u_table::@9->sin8u_table::@10]
    // sin8u_table::@10
    // print_uchar(amplitude)
    // [27] call print_uchar 
    // [73] phi from sin8u_table::@10 to print_uchar [phi:sin8u_table::@10->print_uchar]
    // [73] phi (byte*) print_char_cursor#104 = (byte*) print_char_cursor#2 [phi:sin8u_table::@10->print_uchar#0] -- register_copy 
    // [73] phi (byte) print_uchar::b#8 = (const byte) sin8u_table::amplitude#0 [phi:sin8u_table::@10->print_uchar#1] -- vbuxx=vbuc1 
    ldx #amplitude
    jsr print_uchar
    // [28] phi from sin8u_table::@10 to sin8u_table::@11 [phi:sin8u_table::@10->sin8u_table::@11]
    // sin8u_table::@11
    // print_str(" mid:")
    // [29] call print_str 
    // [85] phi from sin8u_table::@11 to print_str [phi:sin8u_table::@11->print_str]
    // [85] phi (byte*) print_char_cursor#110 = (byte*) print_char_cursor#19 [phi:sin8u_table::@11->print_str#0] -- register_copy 
    // [85] phi (byte*) print_str::str#13 = (const byte*) sin8u_table::str4 [phi:sin8u_table::@11->print_str#1] -- pbuz1=pbuc1 
    lda #<str4
    sta.z print_str.str
    lda #>str4
    sta.z print_str.str+1
    jsr print_str
    // [30] phi from sin8u_table::@11 to sin8u_table::@12 [phi:sin8u_table::@11->sin8u_table::@12]
    // sin8u_table::@12
    // print_uchar(mid)
    // [31] call print_uchar 
    // [73] phi from sin8u_table::@12 to print_uchar [phi:sin8u_table::@12->print_uchar]
    // [73] phi (byte*) print_char_cursor#104 = (byte*) print_char_cursor#2 [phi:sin8u_table::@12->print_uchar#0] -- register_copy 
    // [73] phi (byte) print_uchar::b#8 = (const byte) sin8u_table::mid#0 [phi:sin8u_table::@12->print_uchar#1] -- vbuxx=vbuc1 
    ldx #mid
    jsr print_uchar
    // [32] phi from sin8u_table::@12 to sin8u_table::@13 [phi:sin8u_table::@12->sin8u_table::@13]
    // sin8u_table::@13
    // print_ln()
    // [33] call print_ln 
    // [68] phi from sin8u_table::@13 to print_ln [phi:sin8u_table::@13->print_ln]
    // [68] phi (byte*) print_line_cursor#23 = (byte*) 1024 [phi:sin8u_table::@13->print_ln#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_line_cursor
    lda #>$400
    sta.z print_line_cursor+1
    jsr print_ln
    // [34] phi from sin8u_table::@13 to sin8u_table::@1 [phi:sin8u_table::@13->sin8u_table::@1]
    // [34] phi (byte*) sin8u_table::sintab#2 = (const byte*) main::sintab [phi:sin8u_table::@13->sin8u_table::@1#0] -- pbuz1=pbuc1 
    lda #<main.sintab
    sta.z sintab
    lda #>main.sintab
    sta.z sintab+1
    // [34] phi (word) sin8u_table::x#10 = (word) 0 [phi:sin8u_table::@13->sin8u_table::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z x
    sta.z x+1
    // [34] phi (word) sin8u_table::i#10 = (word) 0 [phi:sin8u_table::@13->sin8u_table::@1#2] -- vwuz1=vwuc1 
    sta.z i
    sta.z i+1
  // u[4.12]
    // sin8u_table::@1
  __b1:
    // for( word i=0; i<tabsize; i++)
    // [35] if((word) sin8u_table::i#10<(const word) main::tabsize) goto sin8u_table::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z i+1
    cmp #>main.tabsize
    bcc __b2
    bne !+
    lda.z i
    cmp #<main.tabsize
    bcc __b2
  !:
    // sin8u_table::@return
    // }
    // [36] return 
    rts
    // sin8u_table::@2
  __b2:
    // sin8s(x)
    // [37] (word) sin8s::x#2 ← (word) sin8u_table::x#10 -- vwuz1=vwuz2 
    lda.z x
    sta.z sin8s.x
    lda.z x+1
    sta.z sin8s.x+1
    // [38] call sin8s 
    jsr sin8s
    // [39] (signed byte) sin8s::return#2 ← (signed byte) sin8s::return#0
    // sin8u_table::@14
    // sinx = sin8s(x)
    // [40] (signed byte) sin8u_table::sinx#0 ← (signed byte) sin8s::return#2 -- vbsz1=vbsaa 
    sta.z sinx
    // mul8su(sinx, amplitude+1)
    // [41] (signed byte) mul8su::a#0 ← (signed byte) sin8u_table::sinx#0 -- vbsyy=vbsz1 
    tay
    // [42] call mul8su 
    jsr mul8su
    // sin8u_table::@15
    // sinx_sc = mul8su(sinx, amplitude+1)
    // [43] (signed word) sin8u_table::sinx_sc#0 ← (signed word)(word) mul8su::m#2
    // >sinx_sc
    // [44] (byte~) sin8u_table::$20 ← > (signed word) sin8u_table::sinx_sc#0 -- vbuaa=_hi_vwsz1 
    lda.z sinx_sc+1
    // sinx_tr = mid+>sinx_sc
    // [45] (byte) sin8u_table::sinx_tr#0 ← (const byte) sin8u_table::mid#0 + (byte~) sin8u_table::$20 -- vbuz1=vbuc1_plus_vbuaa 
    clc
    adc #mid
    sta.z sinx_tr
    // *sintab++ = sinx_tr
    // [46] *((byte*) sin8u_table::sintab#2) ← (byte) sin8u_table::sinx_tr#0 -- _deref_pbuz1=vbuz2 
    ldy #0
    sta (sintab),y
    // *sintab++ = sinx_tr;
    // [47] (byte*) sin8u_table::sintab#1 ← ++ (byte*) sin8u_table::sintab#2 -- pbuz1=_inc_pbuz1 
    inc.z sintab
    bne !+
    inc.z sintab+1
  !:
    // [48] (byte*) print_char_cursor#117 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // print_str("x: ")
    // [49] call print_str 
    // [85] phi from sin8u_table::@15 to print_str [phi:sin8u_table::@15->print_str]
    // [85] phi (byte*) print_char_cursor#110 = (byte*) print_char_cursor#117 [phi:sin8u_table::@15->print_str#0] -- register_copy 
    // [85] phi (byte*) print_str::str#13 = (const byte*) sin8u_table::str5 [phi:sin8u_table::@15->print_str#1] -- pbuz1=pbuc1 
    lda #<str5
    sta.z print_str.str
    lda #>str5
    sta.z print_str.str+1
    jsr print_str
    // sin8u_table::@16
    // print_uint(x)
    // [50] (word) print_uint::w#2 ← (word) sin8u_table::x#10 -- vwuz1=vwuz2 
    lda.z x
    sta.z print_uint.w
    lda.z x+1
    sta.z print_uint.w+1
    // [51] call print_uint 
    // [102] phi from sin8u_table::@16 to print_uint [phi:sin8u_table::@16->print_uint]
    // [102] phi (byte*) print_char_cursor#103 = (byte*) print_char_cursor#2 [phi:sin8u_table::@16->print_uint#0] -- register_copy 
    // [102] phi (word) print_uint::w#3 = (word) print_uint::w#2 [phi:sin8u_table::@16->print_uint#1] -- register_copy 
    jsr print_uint
    // [52] phi from sin8u_table::@16 to sin8u_table::@17 [phi:sin8u_table::@16->sin8u_table::@17]
    // sin8u_table::@17
    // print_str(" sin: ")
    // [53] call print_str 
    // [85] phi from sin8u_table::@17 to print_str [phi:sin8u_table::@17->print_str]
    // [85] phi (byte*) print_char_cursor#110 = (byte*) print_char_cursor#19 [phi:sin8u_table::@17->print_str#0] -- register_copy 
    // [85] phi (byte*) print_str::str#13 = (const byte*) sin8u_table::str6 [phi:sin8u_table::@17->print_str#1] -- pbuz1=pbuc1 
    lda #<str6
    sta.z print_str.str
    lda #>str6
    sta.z print_str.str+1
    jsr print_str
    // sin8u_table::@18
    // print_schar(sinx)
    // [54] (signed byte) print_schar::b#1 ← (signed byte) sin8u_table::sinx#0 -- vbsxx=vbsz1 
    ldx.z sinx
    // [55] call print_schar 
    jsr print_schar
    // [56] phi from sin8u_table::@18 to sin8u_table::@19 [phi:sin8u_table::@18->sin8u_table::@19]
    // sin8u_table::@19
    // print_str(" scaled: ")
    // [57] call print_str 
    // [85] phi from sin8u_table::@19 to print_str [phi:sin8u_table::@19->print_str]
    // [85] phi (byte*) print_char_cursor#110 = (byte*) print_char_cursor#19 [phi:sin8u_table::@19->print_str#0] -- register_copy 
    // [85] phi (byte*) print_str::str#13 = (const byte*) sin8u_table::str7 [phi:sin8u_table::@19->print_str#1] -- pbuz1=pbuc1 
    lda #<str7
    sta.z print_str.str
    lda #>str7
    sta.z print_str.str+1
    jsr print_str
    // sin8u_table::@20
    // print_sint(sinx_sc)
    // [58] (signed word) print_sint::w#1 ← (signed word) sin8u_table::sinx_sc#0 -- vwsz1=vwsz2 
    lda.z sinx_sc
    sta.z print_sint.w
    lda.z sinx_sc+1
    sta.z print_sint.w+1
    // [59] call print_sint 
    jsr print_sint
    // [60] phi from sin8u_table::@20 to sin8u_table::@21 [phi:sin8u_table::@20->sin8u_table::@21]
    // sin8u_table::@21
    // print_str(" trans: ")
    // [61] call print_str 
    // [85] phi from sin8u_table::@21 to print_str [phi:sin8u_table::@21->print_str]
    // [85] phi (byte*) print_char_cursor#110 = (byte*) print_char_cursor#19 [phi:sin8u_table::@21->print_str#0] -- register_copy 
    // [85] phi (byte*) print_str::str#13 = (const byte*) sin8u_table::str8 [phi:sin8u_table::@21->print_str#1] -- pbuz1=pbuc1 
    lda #<str8
    sta.z print_str.str
    lda #>str8
    sta.z print_str.str+1
    jsr print_str
    // sin8u_table::@22
    // print_uchar(sinx_tr)
    // [62] (byte) print_uchar::b#7 ← (byte) sin8u_table::sinx_tr#0 -- vbuxx=vbuz1 
    ldx.z sinx_tr
    // [63] call print_uchar 
    // [73] phi from sin8u_table::@22 to print_uchar [phi:sin8u_table::@22->print_uchar]
    // [73] phi (byte*) print_char_cursor#104 = (byte*) print_char_cursor#2 [phi:sin8u_table::@22->print_uchar#0] -- register_copy 
    // [73] phi (byte) print_uchar::b#8 = (byte) print_uchar::b#7 [phi:sin8u_table::@22->print_uchar#1] -- register_copy 
    jsr print_uchar
    // [64] phi from sin8u_table::@22 to sin8u_table::@23 [phi:sin8u_table::@22->sin8u_table::@23]
    // sin8u_table::@23
    // print_ln()
    // [65] call print_ln 
    // [68] phi from sin8u_table::@23 to print_ln [phi:sin8u_table::@23->print_ln]
    // [68] phi (byte*) print_line_cursor#23 = (byte*) print_line_cursor#1 [phi:sin8u_table::@23->print_ln#0] -- register_copy 
    jsr print_ln
    // sin8u_table::@24
    // x = x + step
    // [66] (word) sin8u_table::x#1 ← (word) sin8u_table::x#10 + (word) sin8u_table::step#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z x
    clc
    adc.z step
    sta.z x
    lda.z x+1
    adc.z step+1
    sta.z x+1
    // for( word i=0; i<tabsize; i++)
    // [67] (word) sin8u_table::i#1 ← ++ (word) sin8u_table::i#10 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [34] phi from sin8u_table::@24 to sin8u_table::@1 [phi:sin8u_table::@24->sin8u_table::@1]
    // [34] phi (byte*) sin8u_table::sintab#2 = (byte*) sin8u_table::sintab#1 [phi:sin8u_table::@24->sin8u_table::@1#0] -- register_copy 
    // [34] phi (word) sin8u_table::x#10 = (word) sin8u_table::x#1 [phi:sin8u_table::@24->sin8u_table::@1#1] -- register_copy 
    // [34] phi (word) sin8u_table::i#10 = (word) sin8u_table::i#1 [phi:sin8u_table::@24->sin8u_table::@1#2] -- register_copy 
    jmp __b1
    str: .text "step:"
    .byte 0
    str1: .text " min:"
    .byte 0
    str2: .text " max:"
    .byte 0
    str3: .text " ampl:"
    .byte 0
    str4: .text " mid:"
    .byte 0
    str5: .text "x: "
    .byte 0
    str6: .text " sin: "
    .byte 0
    str7: .text " scaled: "
    .byte 0
    str8: .text " trans: "
    .byte 0
}
  // print_ln
// Print a newline
print_ln: {
    // [69] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
    // [69] phi (byte*) print_line_cursor#12 = (byte*) print_line_cursor#23 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    // print_ln::@1
  __b1:
    // print_line_cursor + $28
    // [70] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#12 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // while (print_line_cursor<print_char_cursor)
    // [71] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#19) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1
  !:
    // print_ln::@return
    // }
    // [72] return 
    rts
}
  // print_uchar
// Print a char as HEX
// print_uchar(byte register(X) b)
print_uchar: {
    // b>>4
    // [74] (byte~) print_uchar::$0 ← (byte) print_uchar::b#8 >> (byte) 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // print_char(print_hextab[b>>4])
    // [75] (byte) print_char::ch#5 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [76] call print_char 
  // Table of hexadecimal digits
    // [81] phi from print_uchar to print_char [phi:print_uchar->print_char]
    // [81] phi (byte*) print_char_cursor#66 = (byte*) print_char_cursor#104 [phi:print_uchar->print_char#0] -- register_copy 
    // [81] phi (byte) print_char::ch#7 = (byte) print_char::ch#5 [phi:print_uchar->print_char#1] -- register_copy 
    jsr print_char
    // print_uchar::@1
    // b&$f
    // [77] (byte~) print_uchar::$2 ← (byte) print_uchar::b#8 & (byte) $f -- vbuxx=vbuxx_band_vbuc1 
    lda #$f
    axs #0
    // print_char(print_hextab[b&$f])
    // [78] (byte) print_char::ch#6 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2) -- vbuaa=pbuc1_derefidx_vbuxx 
    lda print_hextab,x
    // [79] call print_char 
    // [81] phi from print_uchar::@1 to print_char [phi:print_uchar::@1->print_char]
    // [81] phi (byte*) print_char_cursor#66 = (byte*) print_char_cursor#19 [phi:print_uchar::@1->print_char#0] -- register_copy 
    // [81] phi (byte) print_char::ch#7 = (byte) print_char::ch#6 [phi:print_uchar::@1->print_char#1] -- register_copy 
    jsr print_char
    // print_uchar::@return
    // }
    // [80] return 
    rts
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // *(print_char_cursor++) = ch
    // [82] *((byte*) print_char_cursor#66) ← (byte) print_char::ch#7 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // *(print_char_cursor++) = ch;
    // [83] (byte*) print_char_cursor#19 ← ++ (byte*) print_char_cursor#66 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    // print_char::@return
    // }
    // [84] return 
    rts
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zp($c) str)
print_str: {
    .label str = $c
    // [86] phi from print_str print_str::@3 to print_str::@1 [phi:print_str/print_str::@3->print_str::@1]
    // [86] phi (byte*) print_char_cursor#2 = (byte*) print_char_cursor#110 [phi:print_str/print_str::@3->print_str::@1#0] -- register_copy 
    // [86] phi (byte*) print_str::str#10 = (byte*) print_str::str#13 [phi:print_str/print_str::@3->print_str::@1#1] -- register_copy 
    // print_str::@1
  __b1:
    // while(*str)
    // [87] if((byte) 0!=*((byte*) print_str::str#10)) goto print_str::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    // print_str::@return
    // }
    // [88] return 
    rts
    // print_str::@2
  __b2:
    // print_char(*(str++))
    // [89] (byte) print_char::ch#0 ← *((byte*) print_str::str#10) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
    // [90] call print_char 
    // [81] phi from print_str::@2 to print_char [phi:print_str::@2->print_char]
    // [81] phi (byte*) print_char_cursor#66 = (byte*) print_char_cursor#2 [phi:print_str::@2->print_char#0] -- register_copy 
    // [81] phi (byte) print_char::ch#7 = (byte) print_char::ch#0 [phi:print_str::@2->print_char#1] -- register_copy 
    jsr print_char
    // print_str::@3
    // print_char(*(str++));
    // [91] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#10 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp __b1
}
  // print_sint
// Print a signed int as HEX
// print_sint(signed word zp($c) w)
print_sint: {
    .label w = $c
    // if(w<0)
    // [92] if((signed word) print_sint::w#1<(signed byte) 0) goto print_sint::@1 -- vwsz1_lt_0_then_la1 
    lda.z w+1
    bmi __b1
    // [93] phi from print_sint to print_sint::@3 [phi:print_sint->print_sint::@3]
    // print_sint::@3
    // print_char(' ')
    // [94] call print_char 
    // [81] phi from print_sint::@3 to print_char [phi:print_sint::@3->print_char]
    // [81] phi (byte*) print_char_cursor#66 = (byte*) print_char_cursor#2 [phi:print_sint::@3->print_char#0] -- register_copy 
    // [81] phi (byte) print_char::ch#7 = (byte) ' ' [phi:print_sint::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // [95] phi from print_sint::@3 print_sint::@4 to print_sint::@2 [phi:print_sint::@3/print_sint::@4->print_sint::@2]
    // [95] phi (signed word) print_sint::w#4 = (signed word) print_sint::w#1 [phi:print_sint::@3/print_sint::@4->print_sint::@2#0] -- register_copy 
    // print_sint::@2
  __b2:
    // print_uint((unsigned int)w)
    // [96] (word) print_uint::w#0 ← (word)(signed word) print_sint::w#4
    // [97] call print_uint 
    // [102] phi from print_sint::@2 to print_uint [phi:print_sint::@2->print_uint]
    // [102] phi (byte*) print_char_cursor#103 = (byte*) print_char_cursor#19 [phi:print_sint::@2->print_uint#0] -- register_copy 
    // [102] phi (word) print_uint::w#3 = (word) print_uint::w#0 [phi:print_sint::@2->print_uint#1] -- register_copy 
    jsr print_uint
    // print_sint::@return
    // }
    // [98] return 
    rts
    // [99] phi from print_sint to print_sint::@1 [phi:print_sint->print_sint::@1]
    // print_sint::@1
  __b1:
    // print_char('-')
    // [100] call print_char 
    // [81] phi from print_sint::@1 to print_char [phi:print_sint::@1->print_char]
    // [81] phi (byte*) print_char_cursor#66 = (byte*) print_char_cursor#2 [phi:print_sint::@1->print_char#0] -- register_copy 
    // [81] phi (byte) print_char::ch#7 = (byte) '-' [phi:print_sint::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    // print_sint::@4
    // w = -w
    // [101] (signed word) print_sint::w#0 ← - (signed word) print_sint::w#1 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z w
    sta.z w
    lda #0
    sbc.z w+1
    sta.z w+1
    jmp __b2
}
  // print_uint
// Print a unsigned int as HEX
// print_uint(word zp($c) w)
print_uint: {
    .label w = $c
    // print_uchar(>w)
    // [103] (byte) print_uchar::b#1 ← > (word) print_uint::w#3 -- vbuxx=_hi_vwuz1 
    ldx.z w+1
    // [104] call print_uchar 
    // [73] phi from print_uint to print_uchar [phi:print_uint->print_uchar]
    // [73] phi (byte*) print_char_cursor#104 = (byte*) print_char_cursor#103 [phi:print_uint->print_uchar#0] -- register_copy 
    // [73] phi (byte) print_uchar::b#8 = (byte) print_uchar::b#1 [phi:print_uint->print_uchar#1] -- register_copy 
    jsr print_uchar
    // print_uint::@1
    // print_uchar(<w)
    // [105] (byte) print_uchar::b#2 ← < (word) print_uint::w#3 -- vbuxx=_lo_vwuz1 
    ldx.z w
    // [106] call print_uchar 
    // [73] phi from print_uint::@1 to print_uchar [phi:print_uint::@1->print_uchar]
    // [73] phi (byte*) print_char_cursor#104 = (byte*) print_char_cursor#19 [phi:print_uint::@1->print_uchar#0] -- register_copy 
    // [73] phi (byte) print_uchar::b#8 = (byte) print_uchar::b#2 [phi:print_uint::@1->print_uchar#1] -- register_copy 
    jsr print_uchar
    // print_uint::@return
    // }
    // [107] return 
    rts
}
  // print_schar
// Print a signed char as HEX
// print_schar(signed byte register(X) b)
print_schar: {
    // if(b<0)
    // [108] if((signed byte) print_schar::b#1<(signed byte) 0) goto print_schar::@1 -- vbsxx_lt_0_then_la1 
    cpx #0
    bmi __b1
    // [109] phi from print_schar to print_schar::@3 [phi:print_schar->print_schar::@3]
    // print_schar::@3
    // print_char(' ')
    // [110] call print_char 
    // [81] phi from print_schar::@3 to print_char [phi:print_schar::@3->print_char]
    // [81] phi (byte*) print_char_cursor#66 = (byte*) print_char_cursor#2 [phi:print_schar::@3->print_char#0] -- register_copy 
    // [81] phi (byte) print_char::ch#7 = (byte) ' ' [phi:print_schar::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // [111] phi from print_schar::@3 print_schar::@4 to print_schar::@2 [phi:print_schar::@3/print_schar::@4->print_schar::@2]
    // [111] phi (signed byte) print_schar::b#4 = (signed byte) print_schar::b#1 [phi:print_schar::@3/print_schar::@4->print_schar::@2#0] -- register_copy 
    // print_schar::@2
  __b2:
    // print_uchar((char)b)
    // [112] (byte) print_uchar::b#0 ← (byte)(signed byte) print_schar::b#4
    // [113] call print_uchar 
    // [73] phi from print_schar::@2 to print_uchar [phi:print_schar::@2->print_uchar]
    // [73] phi (byte*) print_char_cursor#104 = (byte*) print_char_cursor#19 [phi:print_schar::@2->print_uchar#0] -- register_copy 
    // [73] phi (byte) print_uchar::b#8 = (byte) print_uchar::b#0 [phi:print_schar::@2->print_uchar#1] -- register_copy 
    jsr print_uchar
    // print_schar::@return
    // }
    // [114] return 
    rts
    // [115] phi from print_schar to print_schar::@1 [phi:print_schar->print_schar::@1]
    // print_schar::@1
  __b1:
    // print_char('-')
    // [116] call print_char 
    // [81] phi from print_schar::@1 to print_char [phi:print_schar::@1->print_char]
    // [81] phi (byte*) print_char_cursor#66 = (byte*) print_char_cursor#2 [phi:print_schar::@1->print_char#0] -- register_copy 
    // [81] phi (byte) print_char::ch#7 = (byte) '-' [phi:print_schar::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    // print_schar::@4
    // b = -b
    // [117] (signed byte) print_schar::b#0 ← - (signed byte) print_schar::b#1 -- vbsxx=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    tax
    jmp __b2
}
  // mul8su
// Multiply a signed char and an unsigned char (into a signed int)
// Fixes offsets introduced by using unsigned multiplication
// mul8su(signed byte register(Y) a)
mul8su: {
    .const b = sin8u_table.amplitude+1
    .label m = $a
    // mul8u((char)a, (char) b)
    // [118] (byte) mul8u::a#1 ← (byte)(signed byte) mul8su::a#0 -- vbuxx=vbuyy 
    tya
    tax
    // [119] call mul8u 
    // [128] phi from mul8su to mul8u [phi:mul8su->mul8u]
    // [128] phi (byte) mul8u::a#6 = (byte) mul8u::a#1 [phi:mul8su->mul8u#0] -- register_copy 
    // [128] phi (byte) mul8u::b#2 = (const byte) mul8su::b#0 [phi:mul8su->mul8u#1] -- vbuaa=vbuc1 
    lda #b
    jsr mul8u
    // mul8u((char)a, (char) b)
    // [120] (word) mul8u::return#2 ← (word) mul8u::res#2
    // mul8su::@3
    // m = mul8u((char)a, (char) b)
    // [121] (word) mul8su::m#0 ← (word) mul8u::return#2
    // if(a<0)
    // [122] if((signed byte) mul8su::a#0>=(signed byte) 0) goto mul8su::@1 -- vbsyy_ge_0_then_la1 
    cpy #0
    bpl __b1
    // mul8su::@2
    // >m
    // [123] (byte~) mul8su::$4 ← > (word) mul8su::m#0 -- vbuaa=_hi_vwuz1 
    lda.z m+1
    // >m = (>m)-(char)b
    // [124] (byte~) mul8su::$6 ← (byte~) mul8su::$4 - (const byte) mul8su::b#0 -- vbuaa=vbuaa_minus_vbuc1 
    sec
    sbc #b
    // [125] (word) mul8su::m#1 ← (word) mul8su::m#0 hi= (byte~) mul8su::$6 -- vwuz1=vwuz1_sethi_vbuaa 
    sta.z m+1
    // [126] phi from mul8su::@2 mul8su::@3 to mul8su::@1 [phi:mul8su::@2/mul8su::@3->mul8su::@1]
    // [126] phi (word) mul8su::m#2 = (word) mul8su::m#1 [phi:mul8su::@2/mul8su::@3->mul8su::@1#0] -- register_copy 
    // mul8su::@1
  __b1:
    // mul8su::@return
    // }
    // [127] return 
    rts
}
  // mul8u
// Perform binary multiplication of two unsigned 8-bit chars into a 16-bit unsigned int
// mul8u(byte register(X) a, byte register(A) b)
mul8u: {
    .label mb = $c
    .label res = $a
    .label return = $a
    // mb = b
    // [129] (word) mul8u::mb#0 ← (word)(byte) mul8u::b#2 -- vwuz1=_word_vbuaa 
    sta.z mb
    lda #0
    sta.z mb+1
    // [130] phi from mul8u to mul8u::@1 [phi:mul8u->mul8u::@1]
    // [130] phi (word) mul8u::mb#2 = (word) mul8u::mb#0 [phi:mul8u->mul8u::@1#0] -- register_copy 
    // [130] phi (word) mul8u::res#2 = (word) 0 [phi:mul8u->mul8u::@1#1] -- vwuz1=vwuc1 
    sta.z res
    sta.z res+1
    // [130] phi (byte) mul8u::a#3 = (byte) mul8u::a#6 [phi:mul8u->mul8u::@1#2] -- register_copy 
    // mul8u::@1
  __b1:
    // while(a!=0)
    // [131] if((byte) mul8u::a#3!=(byte) 0) goto mul8u::@2 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b2
    // mul8u::@return
    // }
    // [132] return 
    rts
    // mul8u::@2
  __b2:
    // a&1
    // [133] (byte~) mul8u::$1 ← (byte) mul8u::a#3 & (byte) 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
    // if( (a&1) != 0)
    // [134] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3
    // mul8u::@4
    // res = res + mb
    // [135] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z res
    clc
    adc.z mb
    sta.z res
    lda.z res+1
    adc.z mb+1
    sta.z res+1
    // [136] phi from mul8u::@2 mul8u::@4 to mul8u::@3 [phi:mul8u::@2/mul8u::@4->mul8u::@3]
    // [136] phi (word) mul8u::res#6 = (word) mul8u::res#2 [phi:mul8u::@2/mul8u::@4->mul8u::@3#0] -- register_copy 
    // mul8u::@3
  __b3:
    // a = a>>1
    // [137] (byte) mul8u::a#0 ← (byte) mul8u::a#3 >> (byte) 1 -- vbuxx=vbuxx_ror_1 
    txa
    lsr
    tax
    // mb = mb<<1
    // [138] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z mb
    rol.z mb+1
    // [130] phi from mul8u::@3 to mul8u::@1 [phi:mul8u::@3->mul8u::@1]
    // [130] phi (word) mul8u::mb#2 = (word) mul8u::mb#1 [phi:mul8u::@3->mul8u::@1#0] -- register_copy 
    // [130] phi (word) mul8u::res#2 = (word) mul8u::res#6 [phi:mul8u::@3->mul8u::@1#1] -- register_copy 
    // [130] phi (byte) mul8u::a#3 = (byte) mul8u::a#0 [phi:mul8u::@3->mul8u::@1#2] -- register_copy 
    jmp __b1
}
  // sin8s
// Calculate signed char sinus sin(x)
// x: unsigned int input u[4.12] in the interval $0000 - PI2_u4f12
// result: signed char sin(x) s[0.7] - using the full range  -$7f - $7f
// sin8s(word zp($c) x)
sin8s: {
    // u[2.6] x^3
    .const DIV_6 = $2b
    .label __4 = $c
    .label x = $c
    .label x1 = $14
    .label x3 = $15
    .label usinx = $16
    // Move x1 into the range 0-PI/2 using sinus mirror symmetries
    .label isUpper = $12
    // if(x >= PI_u4f12 )
    // [139] if((word) sin8s::x#2<(const nomodify word) PI_u4f12) goto sin8s::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda.z x+1
    cmp #>PI_u4f12
    bcc __b5
    bne !+
    lda.z x
    cmp #<PI_u4f12
    bcc __b5
  !:
    // sin8s::@5
    // x = x - PI_u4f12
    // [140] (word) sin8s::x#0 ← (word) sin8s::x#2 - (const nomodify word) PI_u4f12 -- vwuz1=vwuz1_minus_vwuc1 
    lda.z x
    sec
    sbc #<PI_u4f12
    sta.z x
    lda.z x+1
    sbc #>PI_u4f12
    sta.z x+1
    // [141] phi from sin8s::@5 to sin8s::@1 [phi:sin8s::@5->sin8s::@1]
    // [141] phi (byte) sin8s::isUpper#10 = (byte) 1 [phi:sin8s::@5->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z isUpper
    // [141] phi (word) sin8s::x#4 = (word) sin8s::x#0 [phi:sin8s::@5->sin8s::@1#1] -- register_copy 
    jmp __b1
    // [141] phi from sin8s to sin8s::@1 [phi:sin8s->sin8s::@1]
  __b5:
    // [141] phi (byte) sin8s::isUpper#10 = (byte) 0 [phi:sin8s->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z isUpper
    // [141] phi (word) sin8s::x#4 = (word) sin8s::x#2 [phi:sin8s->sin8s::@1#1] -- register_copy 
    // sin8s::@1
  __b1:
    // if(x >= PI_HALF_u4f12 )
    // [142] if((word) sin8s::x#4<(const nomodify word) PI_HALF_u4f12) goto sin8s::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z x+1
    cmp #>PI_HALF_u4f12
    bcc __b2
    bne !+
    lda.z x
    cmp #<PI_HALF_u4f12
    bcc __b2
  !:
    // sin8s::@6
    // x = PI_u4f12 - x
    // [143] (word) sin8s::x#1 ← (const nomodify word) PI_u4f12 - (word) sin8s::x#4 -- vwuz1=vwuc1_minus_vwuz1 
    sec
    lda #<PI_u4f12
    sbc.z x
    sta.z x
    lda #>PI_u4f12
    sbc.z x+1
    sta.z x+1
    // [144] phi from sin8s::@1 sin8s::@6 to sin8s::@2 [phi:sin8s::@1/sin8s::@6->sin8s::@2]
    // [144] phi (word) sin8s::x#6 = (word) sin8s::x#4 [phi:sin8s::@1/sin8s::@6->sin8s::@2#0] -- register_copy 
    // sin8s::@2
  __b2:
    // x<<3
    // [145] (word~) sin8s::$4 ← (word) sin8s::x#6 << (byte) 3 -- vwuz1=vwuz1_rol_3 
    asl.z __4
    rol.z __4+1
    asl.z __4
    rol.z __4+1
    asl.z __4
    rol.z __4+1
    // x1 = >x<<3
    // [146] (byte) sin8s::x1#0 ← > (word~) sin8s::$4 -- vbuz1=_hi_vwuz2 
    lda.z __4+1
    sta.z x1
    // mulu8_sel(x1, x1, 0)
    // [147] (byte) mulu8_sel::v1#0 ← (byte) sin8s::x1#0 -- vbuxx=vbuz1 
    tax
    // [148] (byte) mulu8_sel::v2#0 ← (byte) sin8s::x1#0 -- vbuyy=vbuz1 
    tay
    // [149] call mulu8_sel 
    // [182] phi from sin8s::@2 to mulu8_sel [phi:sin8s::@2->mulu8_sel]
    // [182] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@2->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [182] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#0 [phi:sin8s::@2->mulu8_sel#1] -- register_copy 
    // [182] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#0 [phi:sin8s::@2->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // mulu8_sel(x1, x1, 0)
    // [150] (byte) mulu8_sel::return#0 ← (byte) mulu8_sel::return#12
    // sin8s::@9
    // x2 = mulu8_sel(x1, x1, 0)
    // [151] (byte) sin8s::x2#0 ← (byte) mulu8_sel::return#0
    // mulu8_sel(x2, x1, 1)
    // [152] (byte) mulu8_sel::v1#1 ← (byte) sin8s::x2#0 -- vbuxx=vbuaa 
    tax
    // [153] (byte) mulu8_sel::v2#1 ← (byte) sin8s::x1#0 -- vbuyy=vbuz1 
    ldy.z x1
    // [154] call mulu8_sel 
    // [182] phi from sin8s::@9 to mulu8_sel [phi:sin8s::@9->mulu8_sel]
    // [182] phi (byte) mulu8_sel::select#5 = (byte) 1 [phi:sin8s::@9->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta.z mulu8_sel.select
    // [182] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#1 [phi:sin8s::@9->mulu8_sel#1] -- register_copy 
    // [182] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#1 [phi:sin8s::@9->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // mulu8_sel(x2, x1, 1)
    // [155] (byte) mulu8_sel::return#1 ← (byte) mulu8_sel::return#12
    // sin8s::@10
    // x3 = mulu8_sel(x2, x1, 1)
    // [156] (byte) sin8s::x3#0 ← (byte) mulu8_sel::return#1 -- vbuz1=vbuaa 
    sta.z x3
    // mulu8_sel(x3, DIV_6, 1)
    // [157] (byte) mulu8_sel::v1#2 ← (byte) sin8s::x3#0 -- vbuxx=vbuz1 
    tax
    // [158] call mulu8_sel 
    // [182] phi from sin8s::@10 to mulu8_sel [phi:sin8s::@10->mulu8_sel]
    // [182] phi (byte) mulu8_sel::select#5 = (byte) 1 [phi:sin8s::@10->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta.z mulu8_sel.select
    // [182] phi (byte) mulu8_sel::v2#5 = (const nomodify byte) sin8s::DIV_6 [phi:sin8s::@10->mulu8_sel#1] -- vbuyy=vbuc1 
    ldy #DIV_6
    // [182] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#2 [phi:sin8s::@10->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // mulu8_sel(x3, DIV_6, 1)
    // [159] (byte) mulu8_sel::return#2 ← (byte) mulu8_sel::return#12
    // sin8s::@11
    // x3_6 = mulu8_sel(x3, DIV_6, 1)
    // [160] (byte) sin8s::x3_6#0 ← (byte) mulu8_sel::return#2
    // usinx = x1 - x3_6
    // [161] (byte) sin8s::usinx#0 ← (byte) sin8s::x1#0 - (byte) sin8s::x3_6#0 -- vbuz1=vbuz2_minus_vbuaa 
    eor #$ff
    sec
    adc.z x1
    sta.z usinx
    // mulu8_sel(x3, x1, 0)
    // [162] (byte) mulu8_sel::v1#3 ← (byte) sin8s::x3#0 -- vbuxx=vbuz1 
    ldx.z x3
    // [163] (byte) mulu8_sel::v2#3 ← (byte) sin8s::x1#0 -- vbuyy=vbuz1 
    ldy.z x1
    // [164] call mulu8_sel 
    // [182] phi from sin8s::@11 to mulu8_sel [phi:sin8s::@11->mulu8_sel]
    // [182] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@11->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [182] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#3 [phi:sin8s::@11->mulu8_sel#1] -- register_copy 
    // [182] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#3 [phi:sin8s::@11->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // mulu8_sel(x3, x1, 0)
    // [165] (byte) mulu8_sel::return#10 ← (byte) mulu8_sel::return#12
    // sin8s::@12
    // x4 = mulu8_sel(x3, x1, 0)
    // [166] (byte) sin8s::x4#0 ← (byte) mulu8_sel::return#10
    // mulu8_sel(x4, x1, 0)
    // [167] (byte) mulu8_sel::v1#4 ← (byte) sin8s::x4#0 -- vbuxx=vbuaa 
    tax
    // [168] (byte) mulu8_sel::v2#4 ← (byte) sin8s::x1#0 -- vbuyy=vbuz1 
    ldy.z x1
    // [169] call mulu8_sel 
    // [182] phi from sin8s::@12 to mulu8_sel [phi:sin8s::@12->mulu8_sel]
    // [182] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@12->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [182] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#4 [phi:sin8s::@12->mulu8_sel#1] -- register_copy 
    // [182] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#4 [phi:sin8s::@12->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // mulu8_sel(x4, x1, 0)
    // [170] (byte) mulu8_sel::return#11 ← (byte) mulu8_sel::return#12
    // sin8s::@13
    // x5 = mulu8_sel(x4, x1, 0)
    // [171] (byte) sin8s::x5#0 ← (byte) mulu8_sel::return#11
    // x5_128 = x5>>4
    // [172] (byte) sin8s::x5_128#0 ← (byte) sin8s::x5#0 >> (byte) 4 -- vbuaa=vbuaa_ror_4 
    lsr
    lsr
    lsr
    lsr
    // usinx = usinx + x5_128
    // [173] (byte) sin8s::usinx#1 ← (byte) sin8s::usinx#0 + (byte) sin8s::x5_128#0 -- vbuxx=vbuz1_plus_vbuaa 
    clc
    adc.z usinx
    tax
    // if(usinx>=128)
    // [174] if((byte) sin8s::usinx#1<(byte) $80) goto sin8s::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$80
    bcc __b3
    // sin8s::@7
    // usinx--;
    // [175] (byte) sin8s::usinx#2 ← -- (byte) sin8s::usinx#1 -- vbuxx=_dec_vbuxx 
    dex
    // [176] phi from sin8s::@13 sin8s::@7 to sin8s::@3 [phi:sin8s::@13/sin8s::@7->sin8s::@3]
    // [176] phi (byte) sin8s::usinx#4 = (byte) sin8s::usinx#1 [phi:sin8s::@13/sin8s::@7->sin8s::@3#0] -- register_copy 
    // sin8s::@3
  __b3:
    // if(isUpper!=0)
    // [177] if((byte) sin8s::isUpper#10==(byte) 0) goto sin8s::@14 -- vbuz1_eq_0_then_la1 
    lda.z isUpper
    cmp #0
    beq __b14
    // sin8s::@8
    // sinx = -(signed char)usinx
    // [178] (signed byte) sin8s::sinx#1 ← - (signed byte)(byte) sin8s::usinx#4 -- vbsaa=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    // [179] phi from sin8s::@14 sin8s::@8 to sin8s::@4 [phi:sin8s::@14/sin8s::@8->sin8s::@4]
    // [179] phi (signed byte) sin8s::return#0 = (signed byte) sin8s::return#5 [phi:sin8s::@14/sin8s::@8->sin8s::@4#0] -- register_copy 
    // sin8s::@4
    // sin8s::@return
    // }
    // [180] return 
    rts
    // sin8s::@14
  __b14:
    // [181] (signed byte) sin8s::return#5 ← (signed byte)(byte) sin8s::usinx#4 -- vbsaa=vbsxx 
    txa
    rts
}
  // mulu8_sel
// Calculate val*val for two unsigned char values - the result is 8 selected bits of the 16-bit result.
// The select parameter indicates how many of the highest bits of the 16-bit result to skip
// mulu8_sel(byte register(X) v1, byte register(Y) v2, byte zp($13) select)
mulu8_sel: {
    .label __0 = $a
    .label __1 = $a
    .label select = $13
    // mul8u(v1, v2)
    // [183] (byte) mul8u::a#2 ← (byte) mulu8_sel::v1#5
    // [184] (byte) mul8u::b#1 ← (byte) mulu8_sel::v2#5 -- vbuaa=vbuyy 
    tya
    // [185] call mul8u 
    // [128] phi from mulu8_sel to mul8u [phi:mulu8_sel->mul8u]
    // [128] phi (byte) mul8u::a#6 = (byte) mul8u::a#2 [phi:mulu8_sel->mul8u#0] -- register_copy 
    // [128] phi (byte) mul8u::b#2 = (byte) mul8u::b#1 [phi:mulu8_sel->mul8u#1] -- register_copy 
    jsr mul8u
    // mul8u(v1, v2)
    // [186] (word) mul8u::return#3 ← (word) mul8u::res#2
    // mulu8_sel::@1
    // [187] (word~) mulu8_sel::$0 ← (word) mul8u::return#3
    // mul8u(v1, v2)<<select
    // [188] (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5 -- vwuz1=vwuz1_rol_vbuz2 
    ldy.z select
    beq !e+
  !:
    asl.z __1
    rol.z __1+1
    dey
    bne !-
  !e:
    // >mul8u(v1, v2)<<select
    // [189] (byte) mulu8_sel::return#12 ← > (word~) mulu8_sel::$1 -- vbuaa=_hi_vwuz1 
    lda.z __1+1
    // mulu8_sel::@return
    // }
    // [190] return 
    rts
}
  // div16u
// Performs division on two 16 bit unsigned ints
// Returns the quotient dividend/divisor.
// The remainder will be set into the global variable rem16u
// Implemented using simple binary division
div16u: {
    .label return = $e
    // divr16u(dividend, divisor, 0)
    // [192] call divr16u 
    // [196] phi from div16u to divr16u [phi:div16u->divr16u]
    jsr divr16u
    // divr16u(dividend, divisor, 0)
    // [193] (word) divr16u::return#2 ← (word) divr16u::return#0
    // div16u::@1
    // [194] (word) div16u::return#0 ← (word) divr16u::return#2
    // div16u::@return
    // }
    // [195] return 
    rts
}
  // divr16u
// Performs division on two 16 bit unsigned ints and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
// divr16u(word zp($c) dividend, word zp($10) rem)
divr16u: {
    .label rem = $10
    .label dividend = $c
    .label quotient = $e
    .label return = $e
    // [197] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
    // [197] phi (byte) divr16u::i#2 = (byte) 0 [phi:divr16u->divr16u::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [197] phi (word) divr16u::quotient#3 = (word) 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vwuc1 
    txa
    sta.z quotient
    sta.z quotient+1
    // [197] phi (word) divr16u::dividend#2 = (const nomodify word) PI2_u4f12 [phi:divr16u->divr16u::@1#2] -- vwuz1=vwuc1 
    lda #<PI2_u4f12
    sta.z dividend
    lda #>PI2_u4f12
    sta.z dividend+1
    // [197] phi (word) divr16u::rem#4 = (byte) 0 [phi:divr16u->divr16u::@1#3] -- vwuz1=vbuc1 
    txa
    sta.z rem
    sta.z rem+1
    // [197] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
    // [197] phi (byte) divr16u::i#2 = (byte) divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
    // [197] phi (word) divr16u::quotient#3 = (word) divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
    // [197] phi (word) divr16u::dividend#2 = (word) divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
    // [197] phi (word) divr16u::rem#4 = (word) divr16u::rem#9 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    // divr16u::@1
  __b1:
    // rem = rem << 1
    // [198] (word) divr16u::rem#0 ← (word) divr16u::rem#4 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z rem
    rol.z rem+1
    // >dividend
    // [199] (byte~) divr16u::$1 ← > (word) divr16u::dividend#2 -- vbuaa=_hi_vwuz1 
    lda.z dividend+1
    // >dividend & $80
    // [200] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
    // if( (>dividend & $80) != 0 )
    // [201] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b2
    // divr16u::@4
    // rem = rem | 1
    // [202] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora.z rem
    sta.z rem
    // [203] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
    // [203] phi (word) divr16u::rem#5 = (word) divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    // divr16u::@2
  __b2:
    // dividend = dividend << 1
    // [204] (word) divr16u::dividend#0 ← (word) divr16u::dividend#2 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z dividend
    rol.z dividend+1
    // quotient = quotient << 1
    // [205] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z quotient
    rol.z quotient+1
    // if(rem>=divisor)
    // [206] if((word) divr16u::rem#5<(const word) main::tabsize) goto divr16u::@3 -- vwuz1_lt_vwuc1_then_la1 
    lda.z rem+1
    cmp #>main.tabsize
    bcc __b3
    bne !+
    lda.z rem
    cmp #<main.tabsize
    bcc __b3
  !:
    // divr16u::@5
    // quotient++;
    // [207] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc.z quotient
    bne !+
    inc.z quotient+1
  !:
    // rem = rem - divisor
    // [208] (word) divr16u::rem#2 ← (word) divr16u::rem#5 - (const word) main::tabsize -- vwuz1=vwuz1_minus_vwuc1 
    lda.z rem
    sec
    sbc #<main.tabsize
    sta.z rem
    lda.z rem+1
    sbc #>main.tabsize
    sta.z rem+1
    // [209] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
    // [209] phi (word) divr16u::return#0 = (word) divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
    // [209] phi (word) divr16u::rem#9 = (word) divr16u::rem#5 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    // divr16u::@3
  __b3:
    // for( char i : 0..15)
    // [210] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [211] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1
    // divr16u::@return
    // }
    // [212] return 
    rts
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // memset(print_screen, ' ', 1000)
    // [214] call memset 
    // [216] phi from print_cls to memset [phi:print_cls->memset]
    jsr memset
    // print_cls::@return
    // }
    // [215] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = $400
    .label end = str+num
    .label dst = $10
    // [217] phi from memset to memset::@1 [phi:memset->memset::@1]
    // [217] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    // memset::@1
  __b1:
    // for(char* dst = str; dst!=end; dst++)
    // [218] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    // memset::@return
    // }
    // [219] return 
    rts
    // memset::@2
  __b2:
    // *dst = c
    // [220] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [221] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [217] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
    // [217] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
  print_hextab: .text "0123456789abcdef"

