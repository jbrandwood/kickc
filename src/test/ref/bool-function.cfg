
(void()) main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@3
  [1] (byte) main::i#2 ← phi( main/(byte) 0 main::@3/(byte) main::i#1 )
  [2] (byte~) main::$0 ← (byte) main::i#2 & (byte) 1
  [3] (bool) isSet::b#0 ← (byte~) main::$0 == (byte) 0
  [4] (byte) isSet::i#0 ← (byte) main::i#2
  [5] call isSet 
  [6] (bool) isSet::return#0 ← (bool) isSet::return#1
  to:main::@5
main::@5: scope:[main]  from main::@1
  [7] (bool~) main::$2 ← (bool) isSet::return#0
  [8] if((bool~) main::$2) goto main::@2
  to:main::@4
main::@4: scope:[main]  from main::@5
  [9] *((const byte*) main::screen + (byte) main::i#2) ← (byte) ' '
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@4
  [10] (byte) main::i#1 ← ++ (byte) main::i#2
  [11] if((byte) main::i#1!=(byte) $65) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  [12] return 
  to:@return
main::@2: scope:[main]  from main::@5
  [13] *((const byte*) main::screen + (byte) main::i#2) ← (byte) '*'
  to:main::@3

(bool()) isSet((byte) isSet::i , (bool) isSet::b)
isSet: scope:[isSet]  from main::@1
  [14] (byte~) isSet::$0 ← (byte) isSet::i#0 & (byte) 8
  [15] (bool~) isSet::$1 ← (byte~) isSet::$0 != (byte) 0
  [16] (bool) isSet::return#1 ← (bool) isSet::b#0 || (bool~) isSet::$1
  to:isSet::@return
isSet::@return: scope:[isSet]  from isSet
  [17] return 
  to:@return
