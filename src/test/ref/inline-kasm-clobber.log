
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(void()) main()
main: scope:[main]  from @1
  (byte) main::k#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@5
  (byte) main::k#6 ← phi( main/(byte) main::k#0 main::@5/(byte) main::k#1 )
  (byte) main::l#0 ← (byte) 0
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@4
  (byte) main::k#5 ← phi( main::@1/(byte) main::k#6 main::@4/(byte) main::k#3 )
  (byte) main::l#4 ← phi( main::@1/(byte) main::l#0 main::@4/(byte) main::l#1 )
  (byte) main::m#0 ← (byte) 0
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@3
  (byte) main::k#4 ← phi( main::@2/(byte) main::k#5 main::@3/(byte) main::k#4 )
  (byte) main::l#3 ← phi( main::@2/(byte) main::l#4 main::@3/(byte) main::l#3 )
  (byte) main::m#2 ← phi( main::@2/(byte) main::m#0 main::@3/(byte) main::m#1 )
  kickasm( uses SCREEN) {{ lda #0
                    ldx #0
                    sta SCREEN,x
                 }}
  (byte) main::m#1 ← (byte) main::m#2 + rangenext(0,$a)
  (bool~) main::$0 ← (byte) main::m#1 != rangelast(0,$a)
  if((bool~) main::$0) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte) main::k#3 ← phi( main::@3/(byte) main::k#4 )
  (byte) main::l#2 ← phi( main::@3/(byte) main::l#3 )
  (byte) main::l#1 ← (byte) main::l#2 + rangenext(0,$a)
  (bool~) main::$1 ← (byte) main::l#1 != rangelast(0,$a)
  if((bool~) main::$1) goto main::@2
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte) main::k#2 ← phi( main::@4/(byte) main::k#3 )
  (byte) main::k#1 ← (byte) main::k#2 + rangenext(0,$a)
  (bool~) main::$2 ← (byte) main::k#1 != rangelast(0,$a)
  if((bool~) main::$2) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(const byte*) SCREEN = (byte*)(number) $400
(void()) main()
(bool~) main::$0
(bool~) main::$1
(bool~) main::$2
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@return
(byte) main::k
(byte) main::k#0
(byte) main::k#1
(byte) main::k#2
(byte) main::k#3
(byte) main::k#4
(byte) main::k#5
(byte) main::k#6
(byte) main::l
(byte) main::l#0
(byte) main::l#1
(byte) main::l#2
(byte) main::l#3
(byte) main::l#4
(byte) main::m
(byte) main::m#0
(byte) main::m#1
(byte) main::m#2

Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Alias main::l#2 = main::l#3 
Alias main::k#2 = main::k#3 main::k#4 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) main::l#2 (byte) main::l#4
Identical Phi Values (byte) main::k#2 (byte) main::k#5
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (byte) main::k#5 (byte) main::k#6
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) main::$0 [9] if((byte) main::m#1!=rangelast(0,$a)) goto main::@3
Simple Condition (bool~) main::$1 [12] if((byte) main::l#1!=rangelast(0,$a)) goto main::@2
Simple Condition (bool~) main::$2 [15] if((byte) main::k#1!=rangelast(0,$a)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte) main::k#0 = 0
Constant (const byte) main::l#0 = 0
Constant (const byte) main::m#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [7] main::m#1 ← ++ main::m#2 to ++
Resolved ranged comparison value [9] if(main::m#1!=rangelast(0,$a)) goto main::@3 to (number) $b
Resolved ranged next value [10] main::l#1 ← ++ main::l#4 to ++
Resolved ranged comparison value [12] if(main::l#1!=rangelast(0,$a)) goto main::@2 to (number) $b
Resolved ranged next value [13] main::k#1 ← ++ main::k#6 to ++
Resolved ranged comparison value [15] if(main::k#1!=rangelast(0,$a)) goto main::@1 to (number) $b
Adding number conversion cast (unumber) $b in if((byte) main::m#1!=(number) $b) goto main::@3
Adding number conversion cast (unumber) $b in if((byte) main::l#1!=(number) $b) goto main::@2
Adding number conversion cast (unumber) $b in if((byte) main::k#1!=(number) $b) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $b
Simplifying constant integer cast $b
Simplifying constant integer cast $b
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $b
Finalized unsigned number type (byte) $b
Finalized unsigned number type (byte) $b
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings (const byte) main::k#0
Inlining constant with var siblings (const byte) main::l#0
Inlining constant with var siblings (const byte) main::m#0
Constant inlined main::k#0 = (byte) 0
Constant inlined main::m#0 = (byte) 0
Constant inlined main::l#0 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@6(between main::@5 and main::@1)
Added new block during phi lifting main::@7(between main::@4 and main::@2)
Added new block during phi lifting main::@8(between main::@3 and main::@3)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to main:2 

Created 3 initial phi equivalence classes
Coalesced [17] main::k#7 ← main::k#1
Coalesced [18] main::l#5 ← main::l#1
Coalesced [19] main::m#3 ← main::m#1
Coalesced down to 3 phi equivalence classes
Culled Empty Block (label) @2
Culled Empty Block (label) main::@6
Culled Empty Block (label) main::@7
Culled Empty Block (label) main::@8
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@5
  [5] (byte) main::k#6 ← phi( main/(byte) 0 main::@5/(byte) main::k#1 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@4
  [6] (byte) main::l#4 ← phi( main::@1/(byte) 0 main::@4/(byte) main::l#1 )
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@3
  [7] (byte) main::m#2 ← phi( main::@2/(byte) 0 main::@3/(byte) main::m#1 )
  kickasm( uses SCREEN) {{ lda #0
                    ldx #0
                    sta SCREEN,x
                 }}
  [9] (byte) main::m#1 ← ++ (byte) main::m#2
  [10] if((byte) main::m#1!=(byte) $b) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3
  [11] (byte) main::l#1 ← ++ (byte) main::l#4
  [12] if((byte) main::l#1!=(byte) $b) goto main::@2
  to:main::@5
main::@5: scope:[main]  from main::@4
  [13] (byte) main::k#1 ← ++ (byte) main::k#6
  [14] if((byte) main::k#1!=(byte) $b) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  [15] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte) main::k
(byte) main::k#1 151.5
(byte) main::k#6 25.25
(byte) main::l
(byte) main::l#1 1501.5
(byte) main::l#4 400.4
(byte) main::m
(byte) main::m#1 15001.5
(byte) main::m#2 10001.0

Initial phi equivalence classes
[ main::k#6 main::k#1 ]
[ main::l#4 main::l#1 ]
[ main::m#2 main::m#1 ]
Complete equivalence classes
[ main::k#6 main::k#1 ]
[ main::l#4 main::l#1 ]
[ main::m#2 main::m#1 ]
Allocated zp[1]:2 [ main::k#6 main::k#1 ]
Allocated zp[1]:3 [ main::l#4 main::l#1 ]
Allocated zp[1]:4 [ main::m#2 main::m#1 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Tests that inline kickasm supports the clobbering directive
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label m = 4
    .label l = 3
    .label k = 2
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte) main::k#6 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z k
    jmp __b1
    // [5] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
  __b1_from___b5:
    // [5] phi (byte) main::k#6 = (byte) main::k#1 [phi:main::@5->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [6] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    // [6] phi (byte) main::l#4 = (byte) 0 [phi:main::@1->main::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    jmp __b2
    // [6] phi from main::@4 to main::@2 [phi:main::@4->main::@2]
  __b2_from___b4:
    // [6] phi (byte) main::l#4 = (byte) main::l#1 [phi:main::@4->main::@2#0] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [7] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    // [7] phi (byte) main::m#2 = (byte) 0 [phi:main::@2->main::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta.z m
    jmp __b3
    // [7] phi from main::@3 to main::@3 [phi:main::@3->main::@3]
  __b3_from___b3:
    // [7] phi (byte) main::m#2 = (byte) main::m#1 [phi:main::@3->main::@3#0] -- register_copy 
    jmp __b3
    // main::@3
  __b3:
    // kickasm( uses SCREEN) {{ lda #0                     ldx #0                     sta SCREEN,x                  }}
    lda #0
                    ldx #0
                    sta SCREEN,x
                
    // [9] (byte) main::m#1 ← ++ (byte) main::m#2 -- vbuz1=_inc_vbuz1 
    inc.z m
    // [10] if((byte) main::m#1!=(byte) $b) goto main::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #$b
    cmp.z m
    bne __b3_from___b3
    jmp __b4
    // main::@4
  __b4:
    // [11] (byte) main::l#1 ← ++ (byte) main::l#4 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [12] if((byte) main::l#1!=(byte) $b) goto main::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$b
    cmp.z l
    bne __b2_from___b4
    jmp __b5
    // main::@5
  __b5:
    // [13] (byte) main::k#1 ← ++ (byte) main::k#6 -- vbuz1=_inc_vbuz1 
    inc.z k
    // [14] if((byte) main::k#1!=(byte) $b) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$b
    cmp.z k
    bne __b1_from___b5
    jmp __breturn
    // main::@return
  __breturn:
    // [15] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement kickasm( uses SCREEN) {{ lda #0
                    ldx #0
                    sta SCREEN,x
                 }} always clobbers reg byte a reg byte x 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::k#6 main::k#1 ]
Removing always clobbered register reg byte x as potential for zp[1]:2 [ main::k#6 main::k#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::l#4 main::l#1 ]
Removing always clobbered register reg byte x as potential for zp[1]:3 [ main::l#4 main::l#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:4 [ main::m#2 main::m#1 ]
Removing always clobbered register reg byte x as potential for zp[1]:4 [ main::m#2 main::m#1 ]
Statement kickasm( uses SCREEN) {{ lda #0
                    ldx #0
                    sta SCREEN,x
                 }} always clobbers reg byte a reg byte x 
Potential registers zp[1]:2 [ main::k#6 main::k#1 ] : zp[1]:2 , reg byte y , 
Potential registers zp[1]:3 [ main::l#4 main::l#1 ] : zp[1]:3 , reg byte y , 
Potential registers zp[1]:4 [ main::m#2 main::m#1 ] : zp[1]:4 , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 25,002.5: zp[1]:4 [ main::m#2 main::m#1 ] 1,901.9: zp[1]:3 [ main::l#4 main::l#1 ] 176.75: zp[1]:2 [ main::k#6 main::k#1 ] 
Uplift Scope [] 

Uplifting [main] best 276433 combination reg byte y [ main::m#2 main::m#1 ] zp[1]:3 [ main::l#4 main::l#1 ] zp[1]:2 [ main::k#6 main::k#1 ] 
Uplifting [] best 276433 combination 
Attempting to uplift remaining variables inzp[1]:3 [ main::l#4 main::l#1 ]
Uplifting [main] best 276433 combination zp[1]:3 [ main::l#4 main::l#1 ] 
Attempting to uplift remaining variables inzp[1]:2 [ main::k#6 main::k#1 ]
Uplifting [main] best 276433 combination zp[1]:2 [ main::k#6 main::k#1 ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests that inline kickasm supports the clobbering directive
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label l = 3
    .label k = 2
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte) main::k#6 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z k
    jmp __b1
    // [5] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
  __b1_from___b5:
    // [5] phi (byte) main::k#6 = (byte) main::k#1 [phi:main::@5->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [6] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    // [6] phi (byte) main::l#4 = (byte) 0 [phi:main::@1->main::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    jmp __b2
    // [6] phi from main::@4 to main::@2 [phi:main::@4->main::@2]
  __b2_from___b4:
    // [6] phi (byte) main::l#4 = (byte) main::l#1 [phi:main::@4->main::@2#0] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [7] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    // [7] phi (byte) main::m#2 = (byte) 0 [phi:main::@2->main::@3#0] -- vbuyy=vbuc1 
    ldy #0
    jmp __b3
    // [7] phi from main::@3 to main::@3 [phi:main::@3->main::@3]
  __b3_from___b3:
    // [7] phi (byte) main::m#2 = (byte) main::m#1 [phi:main::@3->main::@3#0] -- register_copy 
    jmp __b3
    // main::@3
  __b3:
    // kickasm( uses SCREEN) {{ lda #0                     ldx #0                     sta SCREEN,x                  }}
    lda #0
                    ldx #0
                    sta SCREEN,x
                
    // [9] (byte) main::m#1 ← ++ (byte) main::m#2 -- vbuyy=_inc_vbuyy 
    iny
    // [10] if((byte) main::m#1!=(byte) $b) goto main::@3 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$b
    bne __b3_from___b3
    jmp __b4
    // main::@4
  __b4:
    // [11] (byte) main::l#1 ← ++ (byte) main::l#4 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [12] if((byte) main::l#1!=(byte) $b) goto main::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$b
    cmp.z l
    bne __b2_from___b4
    jmp __b5
    // main::@5
  __b5:
    // [13] (byte) main::k#1 ← ++ (byte) main::k#6 -- vbuz1=_inc_vbuz1 
    inc.z k
    // [14] if((byte) main::k#1!=(byte) $b) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$b
    cmp.z k
    bne __b1_from___b5
    jmp __breturn
    // main::@return
  __breturn:
    // [15] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b3_from___b3 with __b3
Replacing label __b2_from___b4 with __b2
Replacing label __b1_from___b5 with __b1
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction main_from___b1:
Removing instruction __bend_from___b1:
Removing instruction __b1_from___b5:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b4:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b3:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bbegin:
Removing instruction __bend:
Removing instruction __b1_from_main:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #$b
Succesful ASM optimization Pass5UnnecesaryLoadElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const byte*) SCREEN = (byte*) 1024
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@return
(byte) main::k
(byte) main::k#1 k zp[1]:2 151.5
(byte) main::k#6 k zp[1]:2 25.25
(byte) main::l
(byte) main::l#1 l zp[1]:3 1501.5
(byte) main::l#4 l zp[1]:3 400.4
(byte) main::m
(byte) main::m#1 reg byte y 15001.5
(byte) main::m#2 reg byte y 10001.0

zp[1]:2 [ main::k#6 main::k#1 ]
zp[1]:3 [ main::l#4 main::l#1 ]
reg byte y [ main::m#2 main::m#1 ]


FINAL ASSEMBLER
Score: 266411

  // File Comments
// Tests that inline kickasm supports the clobbering directive
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label l = 3
    .label k = 2
    // [5] phi from main to main::@1 [phi:main->main::@1]
    // [5] phi (byte) main::k#6 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z k
    // [5] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
    // [5] phi (byte) main::k#6 = (byte) main::k#1 [phi:main::@5->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // [6] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // [6] phi (byte) main::l#4 = (byte) 0 [phi:main::@1->main::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    // [6] phi from main::@4 to main::@2 [phi:main::@4->main::@2]
    // [6] phi (byte) main::l#4 = (byte) main::l#1 [phi:main::@4->main::@2#0] -- register_copy 
    // main::@2
  __b2:
    // [7] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
    // [7] phi (byte) main::m#2 = (byte) 0 [phi:main::@2->main::@3#0] -- vbuyy=vbuc1 
    ldy #0
    // [7] phi from main::@3 to main::@3 [phi:main::@3->main::@3]
    // [7] phi (byte) main::m#2 = (byte) main::m#1 [phi:main::@3->main::@3#0] -- register_copy 
    // main::@3
  __b3:
    // kickasm
    // kickasm( uses SCREEN) {{ lda #0                     ldx #0                     sta SCREEN,x                  }}
    lda #0
                    ldx #0
                    sta SCREEN,x
                
    // for(byte m: 0..10)
    // [9] (byte) main::m#1 ← ++ (byte) main::m#2 -- vbuyy=_inc_vbuyy 
    iny
    // [10] if((byte) main::m#1!=(byte) $b) goto main::@3 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$b
    bne __b3
    // main::@4
    // for(byte l: 0..10)
    // [11] (byte) main::l#1 ← ++ (byte) main::l#4 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [12] if((byte) main::l#1!=(byte) $b) goto main::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$b
    cmp.z l
    bne __b2
    // main::@5
    // for(byte k : 0..10)
    // [13] (byte) main::k#1 ← ++ (byte) main::k#6 -- vbuz1=_inc_vbuz1 
    inc.z k
    // [14] if((byte) main::k#1!=(byte) $b) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    cmp.z k
    bne __b1
    // main::@return
    // }
    // [15] return 
    rts
}
  // File Data

