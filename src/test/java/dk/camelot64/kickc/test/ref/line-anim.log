PARSING src/test/java/dk/camelot64/kickc/test/kc/line-anim.kc
// Animated lines drawn on a single color bitmap
import "c64.kc"

byte* BITMAP = $a000;
byte* SCREEN = $8800;

// The number of points
const byte SIZE = 4;
// The delay between pixels
const byte DELAY = 8;

// The coordinates of the lines to animate
word[4] x_start = { 10, 20, 30, 30 };
byte[4] y_start = { 10, 10, 10, 20 };
word[4] x_end =   { 20, 10, 20, 20 };
byte[4] y_end =   { 20, 20, 10, 20 };

// Current x position fixed point [12.4]
word[4] x_cur;
// Current y position fixed point [12.4]
word[4] y_cur;
// X position addition per frame s[3.4]
signed byte[4] x_add;
// Y position addition per frame s[3.4]
signed byte[4] y_add;
// Frame delay (counted down to 0)
byte[4] delay;
// Frame number (counted down to 0)
byte[4] frame;

void main() {
    asm { sei }  // Disable normal interrupt
    // Disable kernal & basic
    *PROCPORT_DDR = PROCPORT_DDR_MEMORY_MASK;
    *PROCPORT = PROCPORT_RAM_IO;
    *D011 = VIC_BMM|VIC_DEN|VIC_RSEL|3;
    vicSelectGfxBank(SCREEN);
    *D018 =  toD018(SCREEN, BITMAP);
    bitmap_init(BITMAP);
    bitmap_clear();
    screen_fill(SCREEN, $10);
    for( byte i=0; i!=8; i+=2) {
        point_init(i);
        bitmap_plot(x_start[i], y_start[i>>1]);
    }
    while(true) {
        (*BORDERCOL)++;
    }
}

// Initialize the points to be animated
void point_init(byte point_idx) {
    x_cur[point_idx] = x_start[point_idx]<<4;
    y_cur[point_idx] = ((word)y_start[point_idx>>1])<<4;
    delay[point_idx>>1] = DELAY;
}

// Fill the screen with a specific char
void screen_fill(byte* screen, byte ch) {
    for( byte y: 0..24) {
        for(byte x:0..39) {
            *screen++ = ch;
        }
    }
}

// Tables for the plotter - initialized by calling bitmap_draw_init();
const byte[256] bitmap_plot_ylo;
const byte[256] bitmap_plot_yhi;
const byte[256] bitmap_plot_bit;

void bitmap_init(byte* bitmap) {
    byte bits = $80;
    for(byte x : 0..255) {
        bitmap_plot_bit[x] = bits;
        bits >>= 1;
        if(bits==0) {
          bits = $80;
        }
    }
    byte* yoffs = bitmap;
    for(byte y : 0..255) {
        bitmap_plot_ylo[y] = y&$7 | <yoffs;
        bitmap_plot_yhi[y] = >yoffs;
        if((y&$7)==7) {
            yoffs = yoffs + 40*8;
        }
    }
}

// Clear all graphics on the bitmap
void bitmap_clear() {
    byte* bitmap = (byte*) { bitmap_plot_yhi[0], bitmap_plot_ylo[0] };
    for( byte y: 0..39 ) {
        for( byte x: 0..199 ) {
            *bitmap++ = 0;
        }
    }
}

// Plot a single dot in the bitmap
void bitmap_plot(word x, byte y) {
    byte* plotter = (byte*) { bitmap_plot_yhi[y], bitmap_plot_ylo[y] };
    plotter += ( x & $fff8 );
    *plotter |= bitmap_plot_bit[<x];
}




Importing c64.kc
PARSING src/test/java/dk/camelot64/kickc/test/kc/c64.kc
// Commodore 64 Registers and Constants

// Processor port data direction register
const byte* PROCPORT_DDR = $00;
// Mask for PROCESSOR_PORT_DDR which allows only memory configuration to be written
const byte PROCPORT_DDR_MEMORY_MASK = %00000111;

// Processor Port Register controlling RAM/ROM configuration and the datasette
const byte* PROCPORT = $01;
// RAM in all three areas $A000, $D000, $E000
const byte PROCPORT_RAM_ALL         = %00110000;
// RAM in $A000, $E000 I/O in $D000
const byte PROCPORT_RAM_IO          = %00110101;
// RAM in $A000, $E000 CHAR ROM in $D000
const byte PROCPORT_RAM_CHARROM     = %00110001;
// RAM in $A000, I/O in $D000, KERNEL in $E000
const byte PROCPORT_KERNEL_IO       = %00110110;
// BASIC in $A000, I/O in $D000, KERNEL in $E000
const byte PROCPORT_BASIC_KERNEL_IO = %00110111;

const byte* CHARGEN = $d000;

const byte* SPRITES_XPOS = $d000;
const byte* SPRITES_YPOS = $d001;
const byte* SPRITES_XMSB = $d010;
const byte* RASTER = $d012;
const byte* SPRITES_ENABLE = $d015;
const byte* SPRITES_EXPAND_Y = $d017;
const byte* SPRITES_PRIORITY = $d01b;
const byte* SPRITES_MC = $d01c;
const byte* SPRITES_EXPAND_X = $d01d;
const byte* BORDERCOL = $d020;
const byte* BGCOL = $d021;
const byte* BGCOL1 = $d021;
const byte* BGCOL2 = $d022;
const byte* BGCOL3 = $d023;
const byte* BGCOL4 = $d024;
const byte* SPRITES_MC1 = $d025;
const byte* SPRITES_MC2 = $d026;
const byte* SPRITES_COLS = $d027;

const byte* VIC_CONTROL = $d011;
const byte* D011 = $d011;
const byte VIC_RST8 = %10000000;
const byte VIC_ECM =  %01000000;
const byte VIC_BMM =  %00100000;
const byte VIC_DEN =  %00010000;
const byte VIC_RSEL = %00001000;

const byte* VIC_CONTROL2 = $d016;
const byte* D016 = $d016;
const byte VIC_MCM =  %00010000;
const byte VIC_CSEL = %00001000;

const byte* D018 = $d018;
const byte* VIC_MEMORY = $d018;

const byte* COLS = $d800;

// CIA#1 Port A: keyboard matrix columns and joystick #2
const byte* CIA1_PORT_A = $dc00;
// CIA#1 Port B: keyboard matrix rows and joystick #1.
const byte* CIA1_PORT_B = $dc01;
// CIA #1 Port A data direction register.
const byte* CIA1_PORT_A_DDR = $dc02;
// CIA #1 Port B data direction register.
const byte* CIA1_PORT_B_DDR = $dc03;

// CIA#2 Port A: Serial bus, RS-232, VIC memory bank
const byte* CIA2_PORT_A = $dd00;
// CIA#2 Port B: RS-232
const byte* CIA2_PORT_B = $dd01;
// CIA #2 Port A data direction register.
const byte* CIA2_PORT_A_DDR = $dd02;
// CIA #2 Port B data direction register.
const byte* CIA2_PORT_B_DDR = $dd03;

const byte BLACK = $0;
const byte WHITE = $1;
const byte RED = $2;
const byte CYAN = $3;
const byte PURPLE = $4;
const byte GREEN = $5;
const byte BLUE = $6;
const byte YELLOW = $7;
const byte ORANGE = $8;
const byte BROWN = $9;
const byte PINK = $a;
const byte DARK_GREY= $b;
const byte GREY = $c;
const byte LIGHT_GREEN = $d;
const byte LIGHT_BLUE = $e;
const byte LIGHT_GREY = $f;

// Get the value to store into D018 to display a specific screen and charset/bitmap
// Optimized for ASM from (byte)((((word)screen&$3fff)/$40)|(((word)charset&$3fff)/$400));
inline byte toD018(byte* screen, byte* gfx) {
    return (>((((word)screen&$3fff)<<2)))|(((>((word)gfx))>>2)&$f);
}

// Get the value to store into DD00 (CIA 2 port A) to choose a specific VIC bank
// Optimized for ASM from %00000011 ^ (byte)((word)gfx/$4000)
inline byte toDd00(byte* gfx) {
    return %00000011 ^ (>((word)gfx))>>6;
}

// Select a specific VIC graphics bank by setting the CIA 2 port A ($dd00) as needed
inline void vicSelectGfxBank(byte* gfx) {
    *CIA2_PORT_A_DDR = %00000011;
    *CIA2_PORT_A = toDd00(gfx);
}

Adding pre/post-modifier *((byte*) BORDERCOL) ← ++ *((byte*) BORDERCOL)
Adding pre/post-modifier (byte*) screen_fill::screen ← ++ (byte*) screen_fill::screen
Adding pre/post-modifier (byte*) bitmap_clear::bitmap ← ++ (byte*) bitmap_clear::bitmap
SYMBOLS
(label) @1
(label) @2
(label) @3
(label) @4
(label) @5
(label) @6
(label) @7
(label) @8
(label) @9
(label) @begin
(label) @end
(byte*) BGCOL
(byte*) BGCOL1
(byte*) BGCOL2
(byte*) BGCOL3
(byte*) BGCOL4
(byte*) BITMAP
(byte) BLACK
(byte) BLUE
(byte*) BORDERCOL
(byte) BROWN
(byte*) CHARGEN
(byte*) CIA1_PORT_A
(byte*) CIA1_PORT_A_DDR
(byte*) CIA1_PORT_B
(byte*) CIA1_PORT_B_DDR
(byte*) CIA2_PORT_A
(byte*) CIA2_PORT_A_DDR
(byte*) CIA2_PORT_B
(byte*) CIA2_PORT_B_DDR
(byte*) COLS
(byte) CYAN
(byte*) D011
(byte*) D016
(byte*) D018
(byte) DARK_GREY
(byte) DELAY
(byte) GREEN
(byte) GREY
(byte) LIGHT_BLUE
(byte) LIGHT_GREEN
(byte) LIGHT_GREY
(byte) ORANGE
(byte) PINK
(byte*) PROCPORT
(byte) PROCPORT_BASIC_KERNEL_IO
(byte*) PROCPORT_DDR
(byte) PROCPORT_DDR_MEMORY_MASK
(byte) PROCPORT_KERNEL_IO
(byte) PROCPORT_RAM_ALL
(byte) PROCPORT_RAM_CHARROM
(byte) PROCPORT_RAM_IO
(byte) PURPLE
(byte*) RASTER
(byte) RED
(byte*) SCREEN
(byte) SIZE
(byte*) SPRITES_COLS
(byte*) SPRITES_ENABLE
(byte*) SPRITES_EXPAND_X
(byte*) SPRITES_EXPAND_Y
(byte*) SPRITES_MC
(byte*) SPRITES_MC1
(byte*) SPRITES_MC2
(byte*) SPRITES_PRIORITY
(byte*) SPRITES_XMSB
(byte*) SPRITES_XPOS
(byte*) SPRITES_YPOS
(byte) VIC_BMM
(byte*) VIC_CONTROL
(byte*) VIC_CONTROL2
(byte) VIC_CSEL
(byte) VIC_DEN
(byte) VIC_ECM
(byte) VIC_MCM
(byte*) VIC_MEMORY
(byte) VIC_RSEL
(byte) VIC_RST8
(byte) WHITE
(byte) YELLOW
(void()) bitmap_clear()
(byte*~) bitmap_clear::$0
(bool~) bitmap_clear::$1
(bool~) bitmap_clear::$2
(label) bitmap_clear::@1
(label) bitmap_clear::@2
(label) bitmap_clear::@3
(label) bitmap_clear::@4
(label) bitmap_clear::@return
(byte*) bitmap_clear::bitmap
(byte) bitmap_clear::x
(byte) bitmap_clear::y
(void()) bitmap_init((byte*) bitmap_init::bitmap)
(bool~) bitmap_init::$0
(bool~) bitmap_init::$1
(word/signed word/dword/signed dword~) bitmap_init::$10
(byte*~) bitmap_init::$11
(bool~) bitmap_init::$12
(bool~) bitmap_init::$2
(byte~) bitmap_init::$3
(byte~) bitmap_init::$4
(byte~) bitmap_init::$5
(byte~) bitmap_init::$6
(byte~) bitmap_init::$7
(bool~) bitmap_init::$8
(bool~) bitmap_init::$9
(label) bitmap_init::@1
(label) bitmap_init::@2
(label) bitmap_init::@3
(label) bitmap_init::@4
(label) bitmap_init::@5
(label) bitmap_init::@6
(label) bitmap_init::@7
(label) bitmap_init::@8
(label) bitmap_init::@return
(byte*) bitmap_init::bitmap
(byte) bitmap_init::bits
(byte) bitmap_init::x
(byte) bitmap_init::y
(byte*) bitmap_init::yoffs
(void()) bitmap_plot((word) bitmap_plot::x , (byte) bitmap_plot::y)
(byte*~) bitmap_plot::$0
(word~) bitmap_plot::$1
(byte~) bitmap_plot::$2
(label) bitmap_plot::@return
(byte*) bitmap_plot::plotter
(word) bitmap_plot::x
(byte) bitmap_plot::y
(byte[256]) bitmap_plot_bit
(byte[256]) bitmap_plot_yhi
(byte[256]) bitmap_plot_ylo
(byte[4]) delay
(byte[4]) frame
(void()) main()
(byte~) main::$0
(byte~) main::$1
(void~) main::$10
(bool~) main::$11
(byte/word/dword~) main::$2
(void~) main::$3
(byte~) main::$4
(void~) main::$5
(void~) main::$6
(void~) main::$7
(void~) main::$8
(byte~) main::$9
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@return
(byte) main::i
(void()) point_init((byte) point_init::point_idx)
(word~) point_init::$0
(byte~) point_init::$1
(word~) point_init::$2
(word~) point_init::$3
(byte~) point_init::$4
(label) point_init::@return
(byte) point_init::point_idx
(void()) screen_fill((byte*) screen_fill::screen , (byte) screen_fill::ch)
(bool~) screen_fill::$0
(bool~) screen_fill::$1
(label) screen_fill::@1
(label) screen_fill::@2
(label) screen_fill::@3
(label) screen_fill::@4
(label) screen_fill::@return
(byte) screen_fill::ch
(byte*) screen_fill::screen
(byte) screen_fill::x
(byte) screen_fill::y
inline (byte()) toD018((byte*) toD018::screen , (byte*) toD018::gfx)
(word~) toD018::$0
(word~) toD018::$1
(word~) toD018::$2
(byte~) toD018::$3
(word~) toD018::$4
(byte~) toD018::$5
(byte~) toD018::$6
(byte~) toD018::$7
(byte~) toD018::$8
(label) toD018::@1
(label) toD018::@return
(byte*) toD018::gfx
(byte) toD018::return
(byte*) toD018::screen
inline (byte()) toDd00((byte*) toDd00::gfx)
(word~) toDd00::$0
(byte~) toDd00::$1
(byte~) toDd00::$2
(byte/word/dword~) toDd00::$3
(label) toDd00::@1
(label) toDd00::@return
(byte*) toDd00::gfx
(byte) toDd00::return
inline (void()) vicSelectGfxBank((byte*) vicSelectGfxBank::gfx)
(byte~) vicSelectGfxBank::$0
(label) vicSelectGfxBank::@return
(byte*) vicSelectGfxBank::gfx
(signed byte[4]) x_add
(word[4]) x_cur
(word[4]) x_end
(word[4]) x_start
(signed byte[4]) y_add
(word[4]) y_cur
(byte[4]) y_end
(byte[4]) y_start

Promoting byte/signed byte/word/signed word/dword/signed dword to byte* in PROCPORT_DDR ← ((byte*)) 0
Promoting byte/signed byte/word/signed word/dword/signed dword to byte* in PROCPORT ← ((byte*)) 1
Promoting word/dword/signed dword to byte* in CHARGEN ← ((byte*)) 53248
Promoting word/dword/signed dword to byte* in SPRITES_XPOS ← ((byte*)) 53248
Promoting word/dword/signed dword to byte* in SPRITES_YPOS ← ((byte*)) 53249
Promoting word/dword/signed dword to byte* in SPRITES_XMSB ← ((byte*)) 53264
Promoting word/dword/signed dword to byte* in RASTER ← ((byte*)) 53266
Promoting word/dword/signed dword to byte* in SPRITES_ENABLE ← ((byte*)) 53269
Promoting word/dword/signed dword to byte* in SPRITES_EXPAND_Y ← ((byte*)) 53271
Promoting word/dword/signed dword to byte* in SPRITES_PRIORITY ← ((byte*)) 53275
Promoting word/dword/signed dword to byte* in SPRITES_MC ← ((byte*)) 53276
Promoting word/dword/signed dword to byte* in SPRITES_EXPAND_X ← ((byte*)) 53277
Promoting word/dword/signed dword to byte* in BORDERCOL ← ((byte*)) 53280
Promoting word/dword/signed dword to byte* in BGCOL ← ((byte*)) 53281
Promoting word/dword/signed dword to byte* in BGCOL1 ← ((byte*)) 53281
Promoting word/dword/signed dword to byte* in BGCOL2 ← ((byte*)) 53282
Promoting word/dword/signed dword to byte* in BGCOL3 ← ((byte*)) 53283
Promoting word/dword/signed dword to byte* in BGCOL4 ← ((byte*)) 53284
Promoting word/dword/signed dword to byte* in SPRITES_MC1 ← ((byte*)) 53285
Promoting word/dword/signed dword to byte* in SPRITES_MC2 ← ((byte*)) 53286
Promoting word/dword/signed dword to byte* in SPRITES_COLS ← ((byte*)) 53287
Promoting word/dword/signed dword to byte* in VIC_CONTROL ← ((byte*)) 53265
Promoting word/dword/signed dword to byte* in D011 ← ((byte*)) 53265
Promoting word/dword/signed dword to byte* in VIC_CONTROL2 ← ((byte*)) 53270
Promoting word/dword/signed dword to byte* in D016 ← ((byte*)) 53270
Promoting word/dword/signed dword to byte* in D018 ← ((byte*)) 53272
Promoting word/dword/signed dword to byte* in VIC_MEMORY ← ((byte*)) 53272
Promoting word/dword/signed dword to byte* in COLS ← ((byte*)) 55296
Promoting word/dword/signed dword to byte* in CIA1_PORT_A ← ((byte*)) 56320
Promoting word/dword/signed dword to byte* in CIA1_PORT_B ← ((byte*)) 56321
Promoting word/dword/signed dword to byte* in CIA1_PORT_A_DDR ← ((byte*)) 56322
Promoting word/dword/signed dword to byte* in CIA1_PORT_B_DDR ← ((byte*)) 56323
Promoting word/dword/signed dword to byte* in CIA2_PORT_A ← ((byte*)) 56576
Promoting word/dword/signed dword to byte* in CIA2_PORT_B ← ((byte*)) 56577
Promoting word/dword/signed dword to byte* in CIA2_PORT_A_DDR ← ((byte*)) 56578
Promoting word/dword/signed dword to byte* in CIA2_PORT_B_DDR ← ((byte*)) 56579
Promoting word/dword/signed dword to byte* in BITMAP ← ((byte*)) 40960
Promoting word/dword/signed dword to byte* in SCREEN ← ((byte*)) 34816
INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) PROCPORT_DDR ← ((byte*)) (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) PROCPORT_DDR_MEMORY_MASK ← (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte*) PROCPORT ← ((byte*)) (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) PROCPORT_RAM_ALL ← (byte/signed byte/word/signed word/dword/signed dword) 48
  (byte) PROCPORT_RAM_IO ← (byte/signed byte/word/signed word/dword/signed dword) 53
  (byte) PROCPORT_RAM_CHARROM ← (byte/signed byte/word/signed word/dword/signed dword) 49
  (byte) PROCPORT_KERNEL_IO ← (byte/signed byte/word/signed word/dword/signed dword) 54
  (byte) PROCPORT_BASIC_KERNEL_IO ← (byte/signed byte/word/signed word/dword/signed dword) 55
  (byte*) CHARGEN ← ((byte*)) (word/dword/signed dword) 53248
  (byte*) SPRITES_XPOS ← ((byte*)) (word/dword/signed dword) 53248
  (byte*) SPRITES_YPOS ← ((byte*)) (word/dword/signed dword) 53249
  (byte*) SPRITES_XMSB ← ((byte*)) (word/dword/signed dword) 53264
  (byte*) RASTER ← ((byte*)) (word/dword/signed dword) 53266
  (byte*) SPRITES_ENABLE ← ((byte*)) (word/dword/signed dword) 53269
  (byte*) SPRITES_EXPAND_Y ← ((byte*)) (word/dword/signed dword) 53271
  (byte*) SPRITES_PRIORITY ← ((byte*)) (word/dword/signed dword) 53275
  (byte*) SPRITES_MC ← ((byte*)) (word/dword/signed dword) 53276
  (byte*) SPRITES_EXPAND_X ← ((byte*)) (word/dword/signed dword) 53277
  (byte*) BORDERCOL ← ((byte*)) (word/dword/signed dword) 53280
  (byte*) BGCOL ← ((byte*)) (word/dword/signed dword) 53281
  (byte*) BGCOL1 ← ((byte*)) (word/dword/signed dword) 53281
  (byte*) BGCOL2 ← ((byte*)) (word/dword/signed dword) 53282
  (byte*) BGCOL3 ← ((byte*)) (word/dword/signed dword) 53283
  (byte*) BGCOL4 ← ((byte*)) (word/dword/signed dword) 53284
  (byte*) SPRITES_MC1 ← ((byte*)) (word/dword/signed dword) 53285
  (byte*) SPRITES_MC2 ← ((byte*)) (word/dword/signed dword) 53286
  (byte*) SPRITES_COLS ← ((byte*)) (word/dword/signed dword) 53287
  (byte*) VIC_CONTROL ← ((byte*)) (word/dword/signed dword) 53265
  (byte*) D011 ← ((byte*)) (word/dword/signed dword) 53265
  (byte) VIC_RST8 ← (byte/word/signed word/dword/signed dword) 128
  (byte) VIC_ECM ← (byte/signed byte/word/signed word/dword/signed dword) 64
  (byte) VIC_BMM ← (byte/signed byte/word/signed word/dword/signed dword) 32
  (byte) VIC_DEN ← (byte/signed byte/word/signed word/dword/signed dword) 16
  (byte) VIC_RSEL ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte*) VIC_CONTROL2 ← ((byte*)) (word/dword/signed dword) 53270
  (byte*) D016 ← ((byte*)) (word/dword/signed dword) 53270
  (byte) VIC_MCM ← (byte/signed byte/word/signed word/dword/signed dword) 16
  (byte) VIC_CSEL ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte*) D018 ← ((byte*)) (word/dword/signed dword) 53272
  (byte*) VIC_MEMORY ← ((byte*)) (word/dword/signed dword) 53272
  (byte*) COLS ← ((byte*)) (word/dword/signed dword) 55296
  (byte*) CIA1_PORT_A ← ((byte*)) (word/dword/signed dword) 56320
  (byte*) CIA1_PORT_B ← ((byte*)) (word/dword/signed dword) 56321
  (byte*) CIA1_PORT_A_DDR ← ((byte*)) (word/dword/signed dword) 56322
  (byte*) CIA1_PORT_B_DDR ← ((byte*)) (word/dword/signed dword) 56323
  (byte*) CIA2_PORT_A ← ((byte*)) (word/dword/signed dword) 56576
  (byte*) CIA2_PORT_B ← ((byte*)) (word/dword/signed dword) 56577
  (byte*) CIA2_PORT_A_DDR ← ((byte*)) (word/dword/signed dword) 56578
  (byte*) CIA2_PORT_B_DDR ← ((byte*)) (word/dword/signed dword) 56579
  (byte) BLACK ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) WHITE ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) RED ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) CYAN ← (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte) PURPLE ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) GREEN ← (byte/signed byte/word/signed word/dword/signed dword) 5
  (byte) BLUE ← (byte/signed byte/word/signed word/dword/signed dword) 6
  (byte) YELLOW ← (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte) ORANGE ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte) BROWN ← (byte/signed byte/word/signed word/dword/signed dword) 9
  (byte) PINK ← (byte/signed byte/word/signed word/dword/signed dword) 10
  (byte) DARK_GREY ← (byte/signed byte/word/signed word/dword/signed dword) 11
  (byte) GREY ← (byte/signed byte/word/signed word/dword/signed dword) 12
  (byte) LIGHT_GREEN ← (byte/signed byte/word/signed word/dword/signed dword) 13
  (byte) LIGHT_BLUE ← (byte/signed byte/word/signed word/dword/signed dword) 14
  (byte) LIGHT_GREY ← (byte/signed byte/word/signed word/dword/signed dword) 15
  to:@1
toD018: scope:[toD018]  from
  (word~) toD018::$0 ← ((word)) (byte*) toD018::screen
  (word~) toD018::$1 ← (word~) toD018::$0 & (word/signed word/dword/signed dword) 16383
  (word~) toD018::$2 ← (word~) toD018::$1 << (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte~) toD018::$3 ← > (word~) toD018::$2
  (word~) toD018::$4 ← ((word)) (byte*) toD018::gfx
  (byte~) toD018::$5 ← > (word~) toD018::$4
  (byte~) toD018::$6 ← (byte~) toD018::$5 >> (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte~) toD018::$7 ← (byte~) toD018::$6 & (byte/signed byte/word/signed word/dword/signed dword) 15
  (byte~) toD018::$8 ← (byte~) toD018::$3 | (byte~) toD018::$7
  (byte) toD018::return ← (byte~) toD018::$8
  to:toD018::@return
toD018::@return: scope:[toD018]  from toD018 toD018::@1
  (byte) toD018::return ← (byte) toD018::return
  return (byte) toD018::return
  to:@return
toD018::@1: scope:[toD018]  from
  to:toD018::@return
@1: scope:[]  from @begin
  to:@2
toDd00: scope:[toDd00]  from
  (word~) toDd00::$0 ← ((word)) (byte*) toDd00::gfx
  (byte~) toDd00::$1 ← > (word~) toDd00::$0
  (byte~) toDd00::$2 ← (byte~) toDd00::$1 >> (byte/signed byte/word/signed word/dword/signed dword) 6
  (byte/word/dword~) toDd00::$3 ← (byte/signed byte/word/signed word/dword/signed dword) 3 ^ (byte~) toDd00::$2
  (byte) toDd00::return ← (byte/word/dword~) toDd00::$3
  to:toDd00::@return
toDd00::@return: scope:[toDd00]  from toDd00 toDd00::@1
  (byte) toDd00::return ← (byte) toDd00::return
  return (byte) toDd00::return
  to:@return
toDd00::@1: scope:[toDd00]  from
  to:toDd00::@return
@2: scope:[]  from @1
  to:@3
vicSelectGfxBank: scope:[vicSelectGfxBank]  from
  *((byte*) CIA2_PORT_A_DDR) ← (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 
  *((byte*) CIA2_PORT_A) ← (byte~) vicSelectGfxBank::$0
  to:vicSelectGfxBank::@return
vicSelectGfxBank::@return: scope:[vicSelectGfxBank]  from vicSelectGfxBank
  return 
  to:@return
@3: scope:[]  from @2
  (byte*) BITMAP ← ((byte*)) (word/dword/signed dword) 40960
  (byte*) SCREEN ← ((byte*)) (word/dword/signed dword) 34816
  (byte) SIZE ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) DELAY ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (word[4]) x_start ← { (byte/signed byte/word/signed word/dword/signed dword) 10, (byte/signed byte/word/signed word/dword/signed dword) 20, (byte/signed byte/word/signed word/dword/signed dword) 30, (byte/signed byte/word/signed word/dword/signed dword) 30 }
  (byte[4]) y_start ← { (byte/signed byte/word/signed word/dword/signed dword) 10, (byte/signed byte/word/signed word/dword/signed dword) 10, (byte/signed byte/word/signed word/dword/signed dword) 10, (byte/signed byte/word/signed word/dword/signed dword) 20 }
  (word[4]) x_end ← { (byte/signed byte/word/signed word/dword/signed dword) 20, (byte/signed byte/word/signed word/dword/signed dword) 10, (byte/signed byte/word/signed word/dword/signed dword) 20, (byte/signed byte/word/signed word/dword/signed dword) 20 }
  (byte[4]) y_end ← { (byte/signed byte/word/signed word/dword/signed dword) 20, (byte/signed byte/word/signed word/dword/signed dword) 20, (byte/signed byte/word/signed word/dword/signed dword) 10, (byte/signed byte/word/signed word/dword/signed dword) 20 }
  (word[4]) x_cur ← { fill( 4, 0) }
  (word[4]) y_cur ← { fill( 4, 0) }
  (signed byte[4]) x_add ← { fill( 4, 0) }
  (signed byte[4]) y_add ← { fill( 4, 0) }
  (byte[4]) delay ← { fill( 4, 0) }
  (byte[4]) frame ← { fill( 4, 0) }
  to:@4
main: scope:[main]  from
  asm { sei  }
  *((byte*) PROCPORT_DDR) ← (byte) PROCPORT_DDR_MEMORY_MASK
  *((byte*) PROCPORT) ← (byte) PROCPORT_RAM_IO
  (byte~) main::$0 ← (byte) VIC_BMM | (byte) VIC_DEN
  (byte~) main::$1 ← (byte~) main::$0 | (byte) VIC_RSEL
  (byte/word/dword~) main::$2 ← (byte~) main::$1 | (byte/signed byte/word/signed word/dword/signed dword) 3
  *((byte*) D011) ← (byte/word/dword~) main::$2
  (void~) main::$3 ← call vicSelectGfxBank (byte*) SCREEN 
  (byte~) main::$4 ← call toD018 (byte*) SCREEN (byte*) BITMAP 
  *((byte*) D018) ← (byte~) main::$4
  (void~) main::$5 ← call bitmap_init (byte*) BITMAP 
  (void~) main::$6 ← call bitmap_clear 
  (void~) main::$7 ← call screen_fill (byte*) SCREEN (byte/signed byte/word/signed word/dword/signed dword) 16 
  (byte) main::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (void~) main::$8 ← call point_init (byte) main::i 
  (byte~) main::$9 ← (byte) main::i >> (byte/signed byte/word/signed word/dword/signed dword) 1
  (void~) main::$10 ← call bitmap_plot *((word[4]) x_start + (byte) main::i) *((byte[4]) y_start + (byte~) main::$9) 
  (byte) main::i ← (byte) main::i + (byte/signed byte/word/signed word/dword/signed dword) 2
  (bool~) main::$11 ← (byte) main::i != (byte/signed byte/word/signed word/dword/signed dword) 8
  if((bool~) main::$11) goto main::@1
  to:main::@5
main::@5: scope:[main]  from main::@1
  to:main::@2
main::@2: scope:[main]  from main::@3 main::@5
  if(true) goto main::@3
  to:main::@6
main::@3: scope:[main]  from main::@2 main::@7
  *((byte*) BORDERCOL) ← ++ *((byte*) BORDERCOL)
  to:main::@2
main::@6: scope:[main]  from main::@2
  to:main::@4
main::@4: scope:[main]  from main::@6 main::@8
  to:main::@return
main::@7: scope:[main]  from
  to:main::@3
main::@8: scope:[main]  from
  to:main::@4
main::@return: scope:[main]  from main::@4
  return 
  to:@return
@4: scope:[]  from @3
  to:@5
point_init: scope:[point_init]  from
  (word~) point_init::$0 ← *((word[4]) x_start + (byte) point_init::point_idx) << (byte/signed byte/word/signed word/dword/signed dword) 4
  *((word[4]) x_cur + (byte) point_init::point_idx) ← (word~) point_init::$0
  (byte~) point_init::$1 ← (byte) point_init::point_idx >> (byte/signed byte/word/signed word/dword/signed dword) 1
  (word~) point_init::$2 ← ((word)) *((byte[4]) y_start + (byte~) point_init::$1)
  (word~) point_init::$3 ← (word~) point_init::$2 << (byte/signed byte/word/signed word/dword/signed dword) 4
  *((word[4]) y_cur + (byte) point_init::point_idx) ← (word~) point_init::$3
  (byte~) point_init::$4 ← (byte) point_init::point_idx >> (byte/signed byte/word/signed word/dword/signed dword) 1
  *((byte[4]) delay + (byte~) point_init::$4) ← (byte) DELAY
  to:point_init::@return
point_init::@return: scope:[point_init]  from point_init
  return 
  to:@return
@5: scope:[]  from @4
  to:@6
screen_fill: scope:[screen_fill]  from
  (byte) screen_fill::y ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:screen_fill::@1
screen_fill::@1: scope:[screen_fill]  from screen_fill screen_fill::@3
  (byte) screen_fill::x ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:screen_fill::@2
screen_fill::@2: scope:[screen_fill]  from screen_fill::@1 screen_fill::@2
  *((byte*) screen_fill::screen) ← (byte) screen_fill::ch
  (byte*) screen_fill::screen ← ++ (byte*) screen_fill::screen
  (byte) screen_fill::x ← ++ (byte) screen_fill::x
  (bool~) screen_fill::$0 ← (byte) screen_fill::x != (byte/signed byte/word/signed word/dword/signed dword) 40
  if((bool~) screen_fill::$0) goto screen_fill::@2
  to:screen_fill::@3
screen_fill::@3: scope:[screen_fill]  from screen_fill::@2
  (byte) screen_fill::y ← ++ (byte) screen_fill::y
  (bool~) screen_fill::$1 ← (byte) screen_fill::y != (byte/signed byte/word/signed word/dword/signed dword) 25
  if((bool~) screen_fill::$1) goto screen_fill::@1
  to:screen_fill::@4
screen_fill::@4: scope:[screen_fill]  from screen_fill::@3
  to:screen_fill::@return
screen_fill::@return: scope:[screen_fill]  from screen_fill::@4
  return 
  to:@return
@6: scope:[]  from @5
  (byte[256]) bitmap_plot_ylo ← { fill( 256, 0) }
  (byte[256]) bitmap_plot_yhi ← { fill( 256, 0) }
  (byte[256]) bitmap_plot_bit ← { fill( 256, 0) }
  to:@7
bitmap_init: scope:[bitmap_init]  from
  (byte) bitmap_init::bits ← (byte/word/signed word/dword/signed dword) 128
  (byte) bitmap_init::x ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:bitmap_init::@1
bitmap_init::@1: scope:[bitmap_init]  from bitmap_init bitmap_init::@2
  *((byte[256]) bitmap_plot_bit + (byte) bitmap_init::x) ← (byte) bitmap_init::bits
  (byte) bitmap_init::bits ← (byte) bitmap_init::bits >> (byte/signed byte/word/signed word/dword/signed dword) 1
  (bool~) bitmap_init::$0 ← (byte) bitmap_init::bits == (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) bitmap_init::$1 ← ! (bool~) bitmap_init::$0
  if((bool~) bitmap_init::$1) goto bitmap_init::@2
  to:bitmap_init::@5
bitmap_init::@2: scope:[bitmap_init]  from bitmap_init::@1 bitmap_init::@5
  (byte) bitmap_init::x ← ++ (byte) bitmap_init::x
  (bool~) bitmap_init::$2 ← (byte) bitmap_init::x != (byte/signed byte/word/signed word/dword/signed dword) 0
  if((bool~) bitmap_init::$2) goto bitmap_init::@1
  to:bitmap_init::@6
bitmap_init::@5: scope:[bitmap_init]  from bitmap_init::@1
  (byte) bitmap_init::bits ← (byte/word/signed word/dword/signed dword) 128
  to:bitmap_init::@2
bitmap_init::@6: scope:[bitmap_init]  from bitmap_init::@2
  (byte*) bitmap_init::yoffs ← (byte*) bitmap_init::bitmap
  (byte) bitmap_init::y ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:bitmap_init::@3
bitmap_init::@3: scope:[bitmap_init]  from bitmap_init::@4 bitmap_init::@6
  (byte~) bitmap_init::$3 ← (byte) bitmap_init::y & (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte~) bitmap_init::$4 ← < (byte*) bitmap_init::yoffs
  (byte~) bitmap_init::$5 ← (byte~) bitmap_init::$3 | (byte~) bitmap_init::$4
  *((byte[256]) bitmap_plot_ylo + (byte) bitmap_init::y) ← (byte~) bitmap_init::$5
  (byte~) bitmap_init::$6 ← > (byte*) bitmap_init::yoffs
  *((byte[256]) bitmap_plot_yhi + (byte) bitmap_init::y) ← (byte~) bitmap_init::$6
  (byte~) bitmap_init::$7 ← (byte) bitmap_init::y & (byte/signed byte/word/signed word/dword/signed dword) 7
  (bool~) bitmap_init::$8 ← (byte~) bitmap_init::$7 == (byte/signed byte/word/signed word/dword/signed dword) 7
  (bool~) bitmap_init::$9 ← ! (bool~) bitmap_init::$8
  if((bool~) bitmap_init::$9) goto bitmap_init::@4
  to:bitmap_init::@7
bitmap_init::@4: scope:[bitmap_init]  from bitmap_init::@3 bitmap_init::@7
  (byte) bitmap_init::y ← ++ (byte) bitmap_init::y
  (bool~) bitmap_init::$12 ← (byte) bitmap_init::y != (byte/signed byte/word/signed word/dword/signed dword) 0
  if((bool~) bitmap_init::$12) goto bitmap_init::@3
  to:bitmap_init::@8
bitmap_init::@7: scope:[bitmap_init]  from bitmap_init::@3
  (word/signed word/dword/signed dword~) bitmap_init::$10 ← (byte/signed byte/word/signed word/dword/signed dword) 40 * (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte*~) bitmap_init::$11 ← (byte*) bitmap_init::yoffs + (word/signed word/dword/signed dword~) bitmap_init::$10
  (byte*) bitmap_init::yoffs ← (byte*~) bitmap_init::$11
  to:bitmap_init::@4
bitmap_init::@8: scope:[bitmap_init]  from bitmap_init::@4
  to:bitmap_init::@return
bitmap_init::@return: scope:[bitmap_init]  from bitmap_init::@8
  return 
  to:@return
@7: scope:[]  from @6
  to:@8
bitmap_clear: scope:[bitmap_clear]  from
  (byte*~) bitmap_clear::$0 ← ((byte*)) { *((byte[256]) bitmap_plot_yhi + (byte/signed byte/word/signed word/dword/signed dword) 0), *((byte[256]) bitmap_plot_ylo + (byte/signed byte/word/signed word/dword/signed dword) 0) }
  (byte*) bitmap_clear::bitmap ← (byte*~) bitmap_clear::$0
  (byte) bitmap_clear::y ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:bitmap_clear::@1
bitmap_clear::@1: scope:[bitmap_clear]  from bitmap_clear bitmap_clear::@3
  (byte) bitmap_clear::x ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:bitmap_clear::@2
bitmap_clear::@2: scope:[bitmap_clear]  from bitmap_clear::@1 bitmap_clear::@2
  *((byte*) bitmap_clear::bitmap) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte*) bitmap_clear::bitmap ← ++ (byte*) bitmap_clear::bitmap
  (byte) bitmap_clear::x ← ++ (byte) bitmap_clear::x
  (bool~) bitmap_clear::$1 ← (byte) bitmap_clear::x != (byte/word/signed word/dword/signed dword) 200
  if((bool~) bitmap_clear::$1) goto bitmap_clear::@2
  to:bitmap_clear::@3
bitmap_clear::@3: scope:[bitmap_clear]  from bitmap_clear::@2
  (byte) bitmap_clear::y ← ++ (byte) bitmap_clear::y
  (bool~) bitmap_clear::$2 ← (byte) bitmap_clear::y != (byte/signed byte/word/signed word/dword/signed dword) 40
  if((bool~) bitmap_clear::$2) goto bitmap_clear::@1
  to:bitmap_clear::@4
bitmap_clear::@4: scope:[bitmap_clear]  from bitmap_clear::@3
  to:bitmap_clear::@return
bitmap_clear::@return: scope:[bitmap_clear]  from bitmap_clear::@4
  return 
  to:@return
@8: scope:[]  from @7
  to:@9
bitmap_plot: scope:[bitmap_plot]  from
  (byte*~) bitmap_plot::$0 ← ((byte*)) { *((byte[256]) bitmap_plot_yhi + (byte) bitmap_plot::y), *((byte[256]) bitmap_plot_ylo + (byte) bitmap_plot::y) }
  (byte*) bitmap_plot::plotter ← (byte*~) bitmap_plot::$0
  (word~) bitmap_plot::$1 ← (word) bitmap_plot::x & (word/dword/signed dword) 65528
  (byte*) bitmap_plot::plotter ← (byte*) bitmap_plot::plotter + (word~) bitmap_plot::$1
  (byte~) bitmap_plot::$2 ← < (word) bitmap_plot::x
  *((byte*) bitmap_plot::plotter) ← *((byte*) bitmap_plot::plotter) | *((byte[256]) bitmap_plot_bit + (byte~) bitmap_plot::$2)
  to:bitmap_plot::@return
bitmap_plot::@return: scope:[bitmap_plot]  from bitmap_plot
  return 
  to:@return
@9: scope:[]  from @8
  call main 
  to:@end
@end: scope:[]  from @9

Inlined call (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 
Inlined call call vicSelectGfxBank (byte*) SCREEN 
Inlined call (byte~) main::$4 ← call toD018 (byte*) SCREEN (byte*) BITMAP 
Removing unused procedure toD018
Removing unused procedure toDd00
Removing unused procedure vicSelectGfxBank
Eliminating unused variable (byte) PROCPORT_RAM_ALL and assignment [3] (byte) PROCPORT_RAM_ALL ← (byte/signed byte/word/signed word/dword/signed dword) 48
Eliminating unused variable (byte) PROCPORT_RAM_CHARROM and assignment [5] (byte) PROCPORT_RAM_CHARROM ← (byte/signed byte/word/signed word/dword/signed dword) 49
Eliminating unused variable (byte) PROCPORT_KERNEL_IO and assignment [6] (byte) PROCPORT_KERNEL_IO ← (byte/signed byte/word/signed word/dword/signed dword) 54
Eliminating unused variable (byte) PROCPORT_BASIC_KERNEL_IO and assignment [7] (byte) PROCPORT_BASIC_KERNEL_IO ← (byte/signed byte/word/signed word/dword/signed dword) 55
Eliminating unused variable (byte*) CHARGEN and assignment [8] (byte*) CHARGEN ← ((byte*)) (word/dword/signed dword) 53248
Eliminating unused variable (byte*) SPRITES_XPOS and assignment [9] (byte*) SPRITES_XPOS ← ((byte*)) (word/dword/signed dword) 53248
Eliminating unused variable (byte*) SPRITES_YPOS and assignment [10] (byte*) SPRITES_YPOS ← ((byte*)) (word/dword/signed dword) 53249
Eliminating unused variable (byte*) SPRITES_XMSB and assignment [11] (byte*) SPRITES_XMSB ← ((byte*)) (word/dword/signed dword) 53264
Eliminating unused variable (byte*) RASTER and assignment [12] (byte*) RASTER ← ((byte*)) (word/dword/signed dword) 53266
Eliminating unused variable (byte*) SPRITES_ENABLE and assignment [13] (byte*) SPRITES_ENABLE ← ((byte*)) (word/dword/signed dword) 53269
Eliminating unused variable (byte*) SPRITES_EXPAND_Y and assignment [14] (byte*) SPRITES_EXPAND_Y ← ((byte*)) (word/dword/signed dword) 53271
Eliminating unused variable (byte*) SPRITES_PRIORITY and assignment [15] (byte*) SPRITES_PRIORITY ← ((byte*)) (word/dword/signed dword) 53275
Eliminating unused variable (byte*) SPRITES_MC and assignment [16] (byte*) SPRITES_MC ← ((byte*)) (word/dword/signed dword) 53276
Eliminating unused variable (byte*) SPRITES_EXPAND_X and assignment [17] (byte*) SPRITES_EXPAND_X ← ((byte*)) (word/dword/signed dword) 53277
Eliminating unused variable (byte*) BGCOL and assignment [19] (byte*) BGCOL ← ((byte*)) (word/dword/signed dword) 53281
Eliminating unused variable (byte*) BGCOL1 and assignment [20] (byte*) BGCOL1 ← ((byte*)) (word/dword/signed dword) 53281
Eliminating unused variable (byte*) BGCOL2 and assignment [21] (byte*) BGCOL2 ← ((byte*)) (word/dword/signed dword) 53282
Eliminating unused variable (byte*) BGCOL3 and assignment [22] (byte*) BGCOL3 ← ((byte*)) (word/dword/signed dword) 53283
Eliminating unused variable (byte*) BGCOL4 and assignment [23] (byte*) BGCOL4 ← ((byte*)) (word/dword/signed dword) 53284
Eliminating unused variable (byte*) SPRITES_MC1 and assignment [24] (byte*) SPRITES_MC1 ← ((byte*)) (word/dword/signed dword) 53285
Eliminating unused variable (byte*) SPRITES_MC2 and assignment [25] (byte*) SPRITES_MC2 ← ((byte*)) (word/dword/signed dword) 53286
Eliminating unused variable (byte*) SPRITES_COLS and assignment [26] (byte*) SPRITES_COLS ← ((byte*)) (word/dword/signed dword) 53287
Eliminating unused variable (byte*) VIC_CONTROL and assignment [27] (byte*) VIC_CONTROL ← ((byte*)) (word/dword/signed dword) 53265
Eliminating unused variable (byte) VIC_RST8 and assignment [29] (byte) VIC_RST8 ← (byte/word/signed word/dword/signed dword) 128
Eliminating unused variable (byte) VIC_ECM and assignment [30] (byte) VIC_ECM ← (byte/signed byte/word/signed word/dword/signed dword) 64
Eliminating unused variable (byte*) VIC_CONTROL2 and assignment [34] (byte*) VIC_CONTROL2 ← ((byte*)) (word/dword/signed dword) 53270
Eliminating unused variable (byte*) D016 and assignment [35] (byte*) D016 ← ((byte*)) (word/dword/signed dword) 53270
Eliminating unused variable (byte) VIC_MCM and assignment [36] (byte) VIC_MCM ← (byte/signed byte/word/signed word/dword/signed dword) 16
Eliminating unused variable (byte) VIC_CSEL and assignment [37] (byte) VIC_CSEL ← (byte/signed byte/word/signed word/dword/signed dword) 8
Eliminating unused variable (byte*) VIC_MEMORY and assignment [39] (byte*) VIC_MEMORY ← ((byte*)) (word/dword/signed dword) 53272
Eliminating unused variable (byte*) COLS and assignment [40] (byte*) COLS ← ((byte*)) (word/dword/signed dword) 55296
Eliminating unused variable (byte*) CIA1_PORT_A and assignment [41] (byte*) CIA1_PORT_A ← ((byte*)) (word/dword/signed dword) 56320
Eliminating unused variable (byte*) CIA1_PORT_B and assignment [42] (byte*) CIA1_PORT_B ← ((byte*)) (word/dword/signed dword) 56321
Eliminating unused variable (byte*) CIA1_PORT_A_DDR and assignment [43] (byte*) CIA1_PORT_A_DDR ← ((byte*)) (word/dword/signed dword) 56322
Eliminating unused variable (byte*) CIA1_PORT_B_DDR and assignment [44] (byte*) CIA1_PORT_B_DDR ← ((byte*)) (word/dword/signed dword) 56323
Eliminating unused variable (byte*) CIA2_PORT_B and assignment [46] (byte*) CIA2_PORT_B ← ((byte*)) (word/dword/signed dword) 56577
Eliminating unused variable (byte*) CIA2_PORT_B_DDR and assignment [48] (byte*) CIA2_PORT_B_DDR ← ((byte*)) (word/dword/signed dword) 56579
Eliminating unused variable (byte) BLACK and assignment [49] (byte) BLACK ← (byte/signed byte/word/signed word/dword/signed dword) 0
Eliminating unused variable (byte) WHITE and assignment [50] (byte) WHITE ← (byte/signed byte/word/signed word/dword/signed dword) 1
Eliminating unused variable (byte) RED and assignment [51] (byte) RED ← (byte/signed byte/word/signed word/dword/signed dword) 2
Eliminating unused variable (byte) CYAN and assignment [52] (byte) CYAN ← (byte/signed byte/word/signed word/dword/signed dword) 3
Eliminating unused variable (byte) PURPLE and assignment [53] (byte) PURPLE ← (byte/signed byte/word/signed word/dword/signed dword) 4
Eliminating unused variable (byte) GREEN and assignment [54] (byte) GREEN ← (byte/signed byte/word/signed word/dword/signed dword) 5
Eliminating unused variable (byte) BLUE and assignment [55] (byte) BLUE ← (byte/signed byte/word/signed word/dword/signed dword) 6
Eliminating unused variable (byte) YELLOW and assignment [56] (byte) YELLOW ← (byte/signed byte/word/signed word/dword/signed dword) 7
Eliminating unused variable (byte) ORANGE and assignment [57] (byte) ORANGE ← (byte/signed byte/word/signed word/dword/signed dword) 8
Eliminating unused variable (byte) BROWN and assignment [58] (byte) BROWN ← (byte/signed byte/word/signed word/dword/signed dword) 9
Eliminating unused variable (byte) PINK and assignment [59] (byte) PINK ← (byte/signed byte/word/signed word/dword/signed dword) 10
Eliminating unused variable (byte) DARK_GREY and assignment [60] (byte) DARK_GREY ← (byte/signed byte/word/signed word/dword/signed dword) 11
Eliminating unused variable (byte) GREY and assignment [61] (byte) GREY ← (byte/signed byte/word/signed word/dword/signed dword) 12
Eliminating unused variable (byte) LIGHT_GREEN and assignment [62] (byte) LIGHT_GREEN ← (byte/signed byte/word/signed word/dword/signed dword) 13
Eliminating unused variable (byte) LIGHT_BLUE and assignment [63] (byte) LIGHT_BLUE ← (byte/signed byte/word/signed word/dword/signed dword) 14
Eliminating unused variable (byte) LIGHT_GREY and assignment [64] (byte) LIGHT_GREY ← (byte/signed byte/word/signed word/dword/signed dword) 15
Eliminating unused variable (byte) SIZE and assignment [67] (byte) SIZE ← (byte/signed byte/word/signed word/dword/signed dword) 4
Eliminating unused variable (word[4]) x_end and assignment [71] (word[4]) x_end ← { (byte/signed byte/word/signed word/dword/signed dword) 20, (byte/signed byte/word/signed word/dword/signed dword) 10, (byte/signed byte/word/signed word/dword/signed dword) 20, (byte/signed byte/word/signed word/dword/signed dword) 20 }
Eliminating unused variable (byte[4]) y_end and assignment [72] (byte[4]) y_end ← { (byte/signed byte/word/signed word/dword/signed dword) 20, (byte/signed byte/word/signed word/dword/signed dword) 20, (byte/signed byte/word/signed word/dword/signed dword) 10, (byte/signed byte/word/signed word/dword/signed dword) 20 }
Eliminating unused variable (signed byte[4]) x_add and assignment [75] (signed byte[4]) x_add ← { fill( 4, 0) }
Eliminating unused variable (signed byte[4]) y_add and assignment [76] (signed byte[4]) y_add ← { fill( 4, 0) }
Eliminating unused variable (byte[4]) frame and assignment [78] (byte[4]) frame ← { fill( 4, 0) }
Eliminating unused variable - keeping the call (void~) main::$5
Eliminating unused variable - keeping the call (void~) main::$6
Eliminating unused variable - keeping the call (void~) main::$7
Eliminating unused variable - keeping the call (void~) main::$8
Eliminating unused variable - keeping the call (void~) main::$10
Removing empty block @1
Removing empty block @2
Removing empty block main::vicSelectGfxBank1_toDd001_@1
Removing empty block main::vicSelectGfxBank1_@return
Removing empty block main::toD0181_@1
Removing empty block main::@5
Removing empty block main::@6
Removing empty block main::@4
Removing empty block main::@7
Removing empty block main::@8
Removing empty block @4
Removing empty block @5
Removing empty block screen_fill::@4
Removing empty block bitmap_init::@8
Removing empty block @7
Removing empty block bitmap_clear::@4
Removing empty block @8
PROCEDURE MODIFY VARIABLE ANALYSIS

Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...

CONTROL FLOW GRAPH SSA WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  (byte*) PROCPORT_DDR#0 ← ((byte*)) (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) PROCPORT_DDR_MEMORY_MASK#0 ← (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte*) PROCPORT#0 ← ((byte*)) (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) PROCPORT_RAM_IO#0 ← (byte/signed byte/word/signed word/dword/signed dword) 53
  (byte*) BORDERCOL#0 ← ((byte*)) (word/dword/signed dword) 53280
  (byte*) D011#0 ← ((byte*)) (word/dword/signed dword) 53265
  (byte) VIC_BMM#0 ← (byte/signed byte/word/signed word/dword/signed dword) 32
  (byte) VIC_DEN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 16
  (byte) VIC_RSEL#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte*) D018#0 ← ((byte*)) (word/dword/signed dword) 53272
  (byte*) CIA2_PORT_A#0 ← ((byte*)) (word/dword/signed dword) 56576
  (byte*) CIA2_PORT_A_DDR#0 ← ((byte*)) (word/dword/signed dword) 56578
  to:@3
@3: scope:[]  from @begin
  (byte*) BITMAP#0 ← ((byte*)) (word/dword/signed dword) 40960
  (byte*) SCREEN#0 ← ((byte*)) (word/dword/signed dword) 34816
  (byte) DELAY#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (word[4]) x_start#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 10, (byte/signed byte/word/signed word/dword/signed dword) 20, (byte/signed byte/word/signed word/dword/signed dword) 30, (byte/signed byte/word/signed word/dword/signed dword) 30 }
  (byte[4]) y_start#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 10, (byte/signed byte/word/signed word/dword/signed dword) 10, (byte/signed byte/word/signed word/dword/signed dword) 10, (byte/signed byte/word/signed word/dword/signed dword) 20 }
  (word[4]) x_cur#0 ← { fill( 4, 0) }
  (word[4]) y_cur#0 ← { fill( 4, 0) }
  (byte[4]) delay#0 ← { fill( 4, 0) }
  to:@6
main: scope:[main]  from @9
  (byte*) BITMAP#9 ← phi( @9/(byte*) BITMAP#10 )
  (byte*) SCREEN#1 ← phi( @9/(byte*) SCREEN#4 )
  asm { sei  }
  *((byte*) PROCPORT_DDR#0) ← (byte) PROCPORT_DDR_MEMORY_MASK#0
  *((byte*) PROCPORT#0) ← (byte) PROCPORT_RAM_IO#0
  (byte~) main::$0 ← (byte) VIC_BMM#0 | (byte) VIC_DEN#0
  (byte~) main::$1 ← (byte~) main::$0 | (byte) VIC_RSEL#0
  (byte/word/dword~) main::$2 ← (byte~) main::$1 | (byte/signed byte/word/signed word/dword/signed dword) 3
  *((byte*) D011#0) ← (byte/word/dword~) main::$2
  (byte*) main::vicSelectGfxBank1_gfx#0 ← (byte*) SCREEN#1
  to:main::vicSelectGfxBank1
main::vicSelectGfxBank1: scope:[main]  from main
  (byte*) BITMAP#8 ← phi( main/(byte*) BITMAP#9 )
  (byte*) SCREEN#12 ← phi( main/(byte*) SCREEN#1 )
  (byte*) main::vicSelectGfxBank1_gfx#1 ← phi( main/(byte*) main::vicSelectGfxBank1_gfx#0 )
  *((byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte*) main::vicSelectGfxBank1_toDd001_gfx#0 ← (byte*) main::vicSelectGfxBank1_gfx#1
  to:main::vicSelectGfxBank1_toDd001
main::vicSelectGfxBank1_toDd001: scope:[main]  from main::vicSelectGfxBank1
  (byte*) BITMAP#7 ← phi( main::vicSelectGfxBank1/(byte*) BITMAP#8 )
  (byte*) SCREEN#10 ← phi( main::vicSelectGfxBank1/(byte*) SCREEN#12 )
  (byte*) main::vicSelectGfxBank1_toDd001_gfx#1 ← phi( main::vicSelectGfxBank1/(byte*) main::vicSelectGfxBank1_toDd001_gfx#0 )
  (word) main::vicSelectGfxBank1_toDd001_$0#0 ← ((word)) (byte*) main::vicSelectGfxBank1_toDd001_gfx#1
  (byte) main::vicSelectGfxBank1_toDd001_$1#0 ← > (word) main::vicSelectGfxBank1_toDd001_$0#0
  (byte) main::vicSelectGfxBank1_toDd001_$2#0 ← (byte) main::vicSelectGfxBank1_toDd001_$1#0 >> (byte/signed byte/word/signed word/dword/signed dword) 6
  (byte/word/dword) main::vicSelectGfxBank1_toDd001_$3#0 ← (byte/signed byte/word/signed word/dword/signed dword) 3 ^ (byte) main::vicSelectGfxBank1_toDd001_$2#0
  (byte) main::vicSelectGfxBank1_toDd001_return#0 ← (byte/word/dword) main::vicSelectGfxBank1_toDd001_$3#0
  to:main::vicSelectGfxBank1_toDd001_@return
main::vicSelectGfxBank1_toDd001_@return: scope:[main]  from main::vicSelectGfxBank1_toDd001
  (byte*) BITMAP#5 ← phi( main::vicSelectGfxBank1_toDd001/(byte*) BITMAP#7 )
  (byte*) SCREEN#7 ← phi( main::vicSelectGfxBank1_toDd001/(byte*) SCREEN#10 )
  (byte) main::vicSelectGfxBank1_toDd001_return#2 ← phi( main::vicSelectGfxBank1_toDd001/(byte) main::vicSelectGfxBank1_toDd001_return#0 )
  (byte) main::vicSelectGfxBank1_toDd001_return#1 ← (byte) main::vicSelectGfxBank1_toDd001_return#2
  to:main::vicSelectGfxBank1_@1
main::vicSelectGfxBank1_@1: scope:[main]  from main::vicSelectGfxBank1_toDd001_@return
  (byte*) BITMAP#3 ← phi( main::vicSelectGfxBank1_toDd001_@return/(byte*) BITMAP#5 )
  (byte*) SCREEN#5 ← phi( main::vicSelectGfxBank1_toDd001_@return/(byte*) SCREEN#7 )
  (byte) main::vicSelectGfxBank1_toDd001_return#3 ← phi( main::vicSelectGfxBank1_toDd001_@return/(byte) main::vicSelectGfxBank1_toDd001_return#1 )
  (byte) main::vicSelectGfxBank1_$0#0 ← (byte) main::vicSelectGfxBank1_toDd001_return#3
  *((byte*) CIA2_PORT_A#0) ← (byte) main::vicSelectGfxBank1_$0#0
  to:main::@9
main::@9: scope:[main]  from main::vicSelectGfxBank1_@1
  (byte*) BITMAP#1 ← phi( main::vicSelectGfxBank1_@1/(byte*) BITMAP#3 )
  (byte*) SCREEN#2 ← phi( main::vicSelectGfxBank1_@1/(byte*) SCREEN#5 )
  (byte*) main::toD0181_screen#0 ← (byte*) SCREEN#2
  (byte*) main::toD0181_gfx#0 ← (byte*) BITMAP#1
  to:main::toD0181
main::toD0181: scope:[main]  from main::@9
  (byte*) SCREEN#13 ← phi( main::@9/(byte*) SCREEN#2 )
  (byte*) BITMAP#6 ← phi( main::@9/(byte*) BITMAP#1 )
  (byte*) main::toD0181_gfx#1 ← phi( main::@9/(byte*) main::toD0181_gfx#0 )
  (byte*) main::toD0181_screen#1 ← phi( main::@9/(byte*) main::toD0181_screen#0 )
  (word) main::toD0181_$0#0 ← ((word)) (byte*) main::toD0181_screen#1
  (word) main::toD0181_$1#0 ← (word) main::toD0181_$0#0 & (word/signed word/dword/signed dword) 16383
  (word) main::toD0181_$2#0 ← (word) main::toD0181_$1#0 << (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) main::toD0181_$3#0 ← > (word) main::toD0181_$2#0
  (word) main::toD0181_$4#0 ← ((word)) (byte*) main::toD0181_gfx#1
  (byte) main::toD0181_$5#0 ← > (word) main::toD0181_$4#0
  (byte) main::toD0181_$6#0 ← (byte) main::toD0181_$5#0 >> (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) main::toD0181_$7#0 ← (byte) main::toD0181_$6#0 & (byte/signed byte/word/signed word/dword/signed dword) 15
  (byte) main::toD0181_$8#0 ← (byte) main::toD0181_$3#0 | (byte) main::toD0181_$7#0
  (byte) main::toD0181_return#0 ← (byte) main::toD0181_$8#0
  to:main::toD0181_@return
main::toD0181_@return: scope:[main]  from main::toD0181
  (byte*) SCREEN#11 ← phi( main::toD0181/(byte*) SCREEN#13 )
  (byte*) BITMAP#4 ← phi( main::toD0181/(byte*) BITMAP#6 )
  (byte) main::toD0181_return#2 ← phi( main::toD0181/(byte) main::toD0181_return#0 )
  (byte) main::toD0181_return#1 ← (byte) main::toD0181_return#2
  to:main::@10
main::@10: scope:[main]  from main::toD0181_@return
  (byte*) SCREEN#8 ← phi( main::toD0181_@return/(byte*) SCREEN#11 )
  (byte*) BITMAP#2 ← phi( main::toD0181_@return/(byte*) BITMAP#4 )
  (byte) main::toD0181_return#3 ← phi( main::toD0181_@return/(byte) main::toD0181_return#1 )
  (byte~) main::$4 ← (byte) main::toD0181_return#3
  *((byte*) D018#0) ← (byte~) main::$4
  (byte*) bitmap_init::bitmap#0 ← (byte*) BITMAP#2
  call bitmap_init 
  to:main::@11
main::@11: scope:[main]  from main::@10
  (byte*) SCREEN#6 ← phi( main::@10/(byte*) SCREEN#8 )
  call bitmap_clear 
  to:main::@12
main::@12: scope:[main]  from main::@11
  (byte*) SCREEN#3 ← phi( main::@11/(byte*) SCREEN#6 )
  (byte*) screen_fill::screen#0 ← (byte*) SCREEN#3
  (byte) screen_fill::ch#0 ← (byte/signed byte/word/signed word/dword/signed dword) 16
  call screen_fill 
  to:main::@13
main::@13: scope:[main]  from main::@12
  (byte) main::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:main::@1
main::@1: scope:[main]  from main::@13 main::@15
  (byte) main::i#2 ← phi( main::@13/(byte) main::i#0 main::@15/(byte) main::i#1 )
  (byte) point_init::point_idx#0 ← (byte) main::i#2
  call point_init 
  to:main::@14
main::@14: scope:[main]  from main::@1
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 )
  (byte~) main::$9 ← (byte) main::i#3 >> (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) bitmap_plot::x#0 ← *((word[4]) x_start#0 + (byte) main::i#3)
  (byte) bitmap_plot::y#0 ← *((byte[4]) y_start#0 + (byte~) main::$9)
  call bitmap_plot 
  to:main::@15
main::@15: scope:[main]  from main::@14
  (byte) main::i#4 ← phi( main::@14/(byte) main::i#3 )
  (byte) main::i#1 ← (byte) main::i#4 + (byte/signed byte/word/signed word/dword/signed dword) 2
  (bool~) main::$11 ← (byte) main::i#1 != (byte/signed byte/word/signed word/dword/signed dword) 8
  if((bool~) main::$11) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@15 main::@3
  if(true) goto main::@3
  to:main::@return
main::@3: scope:[main]  from main::@2
  *((byte*) BORDERCOL#0) ← ++ *((byte*) BORDERCOL#0)
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
point_init: scope:[point_init]  from main::@1
  (byte) point_init::point_idx#1 ← phi( main::@1/(byte) point_init::point_idx#0 )
  (word~) point_init::$0 ← *((word[4]) x_start#0 + (byte) point_init::point_idx#1) << (byte/signed byte/word/signed word/dword/signed dword) 4
  *((word[4]) x_cur#0 + (byte) point_init::point_idx#1) ← (word~) point_init::$0
  (byte~) point_init::$1 ← (byte) point_init::point_idx#1 >> (byte/signed byte/word/signed word/dword/signed dword) 1
  (word~) point_init::$2 ← ((word)) *((byte[4]) y_start#0 + (byte~) point_init::$1)
  (word~) point_init::$3 ← (word~) point_init::$2 << (byte/signed byte/word/signed word/dword/signed dword) 4
  *((word[4]) y_cur#0 + (byte) point_init::point_idx#1) ← (word~) point_init::$3
  (byte~) point_init::$4 ← (byte) point_init::point_idx#1 >> (byte/signed byte/word/signed word/dword/signed dword) 1
  *((byte[4]) delay#0 + (byte~) point_init::$4) ← (byte) DELAY#0
  to:point_init::@return
point_init::@return: scope:[point_init]  from point_init
  return 
  to:@return
screen_fill: scope:[screen_fill]  from main::@12
  (byte*) screen_fill::screen#4 ← phi( main::@12/(byte*) screen_fill::screen#0 )
  (byte) screen_fill::ch#3 ← phi( main::@12/(byte) screen_fill::ch#0 )
  (byte) screen_fill::y#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:screen_fill::@1
screen_fill::@1: scope:[screen_fill]  from screen_fill screen_fill::@3
  (byte) screen_fill::y#4 ← phi( screen_fill/(byte) screen_fill::y#0 screen_fill::@3/(byte) screen_fill::y#1 )
  (byte*) screen_fill::screen#3 ← phi( screen_fill/(byte*) screen_fill::screen#4 screen_fill::@3/(byte*) screen_fill::screen#5 )
  (byte) screen_fill::ch#2 ← phi( screen_fill/(byte) screen_fill::ch#3 screen_fill::@3/(byte) screen_fill::ch#4 )
  (byte) screen_fill::x#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:screen_fill::@2
screen_fill::@2: scope:[screen_fill]  from screen_fill::@1 screen_fill::@2
  (byte) screen_fill::y#3 ← phi( screen_fill::@1/(byte) screen_fill::y#4 screen_fill::@2/(byte) screen_fill::y#3 )
  (byte) screen_fill::x#2 ← phi( screen_fill::@1/(byte) screen_fill::x#0 screen_fill::@2/(byte) screen_fill::x#1 )
  (byte*) screen_fill::screen#2 ← phi( screen_fill::@1/(byte*) screen_fill::screen#3 screen_fill::@2/(byte*) screen_fill::screen#1 )
  (byte) screen_fill::ch#1 ← phi( screen_fill::@1/(byte) screen_fill::ch#2 screen_fill::@2/(byte) screen_fill::ch#1 )
  *((byte*) screen_fill::screen#2) ← (byte) screen_fill::ch#1
  (byte*) screen_fill::screen#1 ← ++ (byte*) screen_fill::screen#2
  (byte) screen_fill::x#1 ← ++ (byte) screen_fill::x#2
  (bool~) screen_fill::$0 ← (byte) screen_fill::x#1 != (byte/signed byte/word/signed word/dword/signed dword) 40
  if((bool~) screen_fill::$0) goto screen_fill::@2
  to:screen_fill::@3
screen_fill::@3: scope:[screen_fill]  from screen_fill::@2
  (byte*) screen_fill::screen#5 ← phi( screen_fill::@2/(byte*) screen_fill::screen#1 )
  (byte) screen_fill::ch#4 ← phi( screen_fill::@2/(byte) screen_fill::ch#1 )
  (byte) screen_fill::y#2 ← phi( screen_fill::@2/(byte) screen_fill::y#3 )
  (byte) screen_fill::y#1 ← ++ (byte) screen_fill::y#2
  (bool~) screen_fill::$1 ← (byte) screen_fill::y#1 != (byte/signed byte/word/signed word/dword/signed dword) 25
  if((bool~) screen_fill::$1) goto screen_fill::@1
  to:screen_fill::@return
screen_fill::@return: scope:[screen_fill]  from screen_fill::@3
  return 
  to:@return
@6: scope:[]  from @3
  (byte*) BITMAP#11 ← phi( @3/(byte*) BITMAP#0 )
  (byte*) SCREEN#9 ← phi( @3/(byte*) SCREEN#0 )
  (byte[256]) bitmap_plot_ylo#0 ← { fill( 256, 0) }
  (byte[256]) bitmap_plot_yhi#0 ← { fill( 256, 0) }
  (byte[256]) bitmap_plot_bit#0 ← { fill( 256, 0) }
  to:@9
bitmap_init: scope:[bitmap_init]  from main::@10
  (byte*) bitmap_init::bitmap#5 ← phi( main::@10/(byte*) bitmap_init::bitmap#0 )
  (byte) bitmap_init::bits#0 ← (byte/word/signed word/dword/signed dword) 128
  (byte) bitmap_init::x#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:bitmap_init::@1
bitmap_init::@1: scope:[bitmap_init]  from bitmap_init bitmap_init::@2
  (byte*) bitmap_init::bitmap#3 ← phi( bitmap_init/(byte*) bitmap_init::bitmap#5 bitmap_init::@2/(byte*) bitmap_init::bitmap#2 )
  (byte) bitmap_init::x#2 ← phi( bitmap_init/(byte) bitmap_init::x#0 bitmap_init::@2/(byte) bitmap_init::x#1 )
  (byte) bitmap_init::bits#3 ← phi( bitmap_init/(byte) bitmap_init::bits#0 bitmap_init::@2/(byte) bitmap_init::bits#4 )
  *((byte[256]) bitmap_plot_bit#0 + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3
  (byte) bitmap_init::bits#1 ← (byte) bitmap_init::bits#3 >> (byte/signed byte/word/signed word/dword/signed dword) 1
  (bool~) bitmap_init::$0 ← (byte) bitmap_init::bits#1 == (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) bitmap_init::$1 ← ! (bool~) bitmap_init::$0
  if((bool~) bitmap_init::$1) goto bitmap_init::@2
  to:bitmap_init::@5
bitmap_init::@2: scope:[bitmap_init]  from bitmap_init::@1 bitmap_init::@5
  (byte*) bitmap_init::bitmap#2 ← phi( bitmap_init::@1/(byte*) bitmap_init::bitmap#3 bitmap_init::@5/(byte*) bitmap_init::bitmap#4 )
  (byte) bitmap_init::bits#4 ← phi( bitmap_init::@1/(byte) bitmap_init::bits#1 bitmap_init::@5/(byte) bitmap_init::bits#2 )
  (byte) bitmap_init::x#3 ← phi( bitmap_init::@1/(byte) bitmap_init::x#2 bitmap_init::@5/(byte) bitmap_init::x#4 )
  (byte) bitmap_init::x#1 ← ++ (byte) bitmap_init::x#3
  (bool~) bitmap_init::$2 ← (byte) bitmap_init::x#1 != (byte/signed byte/word/signed word/dword/signed dword) 0
  if((bool~) bitmap_init::$2) goto bitmap_init::@1
  to:bitmap_init::@6
bitmap_init::@5: scope:[bitmap_init]  from bitmap_init::@1
  (byte*) bitmap_init::bitmap#4 ← phi( bitmap_init::@1/(byte*) bitmap_init::bitmap#3 )
  (byte) bitmap_init::x#4 ← phi( bitmap_init::@1/(byte) bitmap_init::x#2 )
  (byte) bitmap_init::bits#2 ← (byte/word/signed word/dword/signed dword) 128
  to:bitmap_init::@2
bitmap_init::@6: scope:[bitmap_init]  from bitmap_init::@2
  (byte*) bitmap_init::bitmap#1 ← phi( bitmap_init::@2/(byte*) bitmap_init::bitmap#2 )
  (byte*) bitmap_init::yoffs#0 ← (byte*) bitmap_init::bitmap#1
  (byte) bitmap_init::y#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:bitmap_init::@3
bitmap_init::@3: scope:[bitmap_init]  from bitmap_init::@4 bitmap_init::@6
  (byte*) bitmap_init::yoffs#2 ← phi( bitmap_init::@4/(byte*) bitmap_init::yoffs#4 bitmap_init::@6/(byte*) bitmap_init::yoffs#0 )
  (byte) bitmap_init::y#2 ← phi( bitmap_init::@4/(byte) bitmap_init::y#1 bitmap_init::@6/(byte) bitmap_init::y#0 )
  (byte~) bitmap_init::$3 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte~) bitmap_init::$4 ← < (byte*) bitmap_init::yoffs#2
  (byte~) bitmap_init::$5 ← (byte~) bitmap_init::$3 | (byte~) bitmap_init::$4
  *((byte[256]) bitmap_plot_ylo#0 + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$5
  (byte~) bitmap_init::$6 ← > (byte*) bitmap_init::yoffs#2
  *((byte[256]) bitmap_plot_yhi#0 + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$6
  (byte~) bitmap_init::$7 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7
  (bool~) bitmap_init::$8 ← (byte~) bitmap_init::$7 == (byte/signed byte/word/signed word/dword/signed dword) 7
  (bool~) bitmap_init::$9 ← ! (bool~) bitmap_init::$8
  if((bool~) bitmap_init::$9) goto bitmap_init::@4
  to:bitmap_init::@7
bitmap_init::@4: scope:[bitmap_init]  from bitmap_init::@3 bitmap_init::@7
  (byte*) bitmap_init::yoffs#4 ← phi( bitmap_init::@3/(byte*) bitmap_init::yoffs#2 bitmap_init::@7/(byte*) bitmap_init::yoffs#1 )
  (byte) bitmap_init::y#3 ← phi( bitmap_init::@3/(byte) bitmap_init::y#2 bitmap_init::@7/(byte) bitmap_init::y#4 )
  (byte) bitmap_init::y#1 ← ++ (byte) bitmap_init::y#3
  (bool~) bitmap_init::$12 ← (byte) bitmap_init::y#1 != (byte/signed byte/word/signed word/dword/signed dword) 0
  if((bool~) bitmap_init::$12) goto bitmap_init::@3
  to:bitmap_init::@return
bitmap_init::@7: scope:[bitmap_init]  from bitmap_init::@3
  (byte) bitmap_init::y#4 ← phi( bitmap_init::@3/(byte) bitmap_init::y#2 )
  (byte*) bitmap_init::yoffs#3 ← phi( bitmap_init::@3/(byte*) bitmap_init::yoffs#2 )
  (word/signed word/dword/signed dword~) bitmap_init::$10 ← (byte/signed byte/word/signed word/dword/signed dword) 40 * (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte*~) bitmap_init::$11 ← (byte*) bitmap_init::yoffs#3 + (word/signed word/dword/signed dword~) bitmap_init::$10
  (byte*) bitmap_init::yoffs#1 ← (byte*~) bitmap_init::$11
  to:bitmap_init::@4
bitmap_init::@return: scope:[bitmap_init]  from bitmap_init::@4
  return 
  to:@return
bitmap_clear: scope:[bitmap_clear]  from main::@11
  (byte*~) bitmap_clear::$0 ← ((byte*)) { *((byte[256]) bitmap_plot_yhi#0 + (byte/signed byte/word/signed word/dword/signed dword) 0), *((byte[256]) bitmap_plot_ylo#0 + (byte/signed byte/word/signed word/dword/signed dword) 0) }
  (byte*) bitmap_clear::bitmap#0 ← (byte*~) bitmap_clear::$0
  (byte) bitmap_clear::y#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:bitmap_clear::@1
bitmap_clear::@1: scope:[bitmap_clear]  from bitmap_clear bitmap_clear::@3
  (byte) bitmap_clear::y#4 ← phi( bitmap_clear/(byte) bitmap_clear::y#0 bitmap_clear::@3/(byte) bitmap_clear::y#1 )
  (byte*) bitmap_clear::bitmap#3 ← phi( bitmap_clear/(byte*) bitmap_clear::bitmap#0 bitmap_clear::@3/(byte*) bitmap_clear::bitmap#4 )
  (byte) bitmap_clear::x#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:bitmap_clear::@2
bitmap_clear::@2: scope:[bitmap_clear]  from bitmap_clear::@1 bitmap_clear::@2
  (byte) bitmap_clear::y#3 ← phi( bitmap_clear::@1/(byte) bitmap_clear::y#4 bitmap_clear::@2/(byte) bitmap_clear::y#3 )
  (byte) bitmap_clear::x#2 ← phi( bitmap_clear::@1/(byte) bitmap_clear::x#0 bitmap_clear::@2/(byte) bitmap_clear::x#1 )
  (byte*) bitmap_clear::bitmap#2 ← phi( bitmap_clear::@1/(byte*) bitmap_clear::bitmap#3 bitmap_clear::@2/(byte*) bitmap_clear::bitmap#1 )
  *((byte*) bitmap_clear::bitmap#2) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte*) bitmap_clear::bitmap#1 ← ++ (byte*) bitmap_clear::bitmap#2
  (byte) bitmap_clear::x#1 ← ++ (byte) bitmap_clear::x#2
  (bool~) bitmap_clear::$1 ← (byte) bitmap_clear::x#1 != (byte/word/signed word/dword/signed dword) 200
  if((bool~) bitmap_clear::$1) goto bitmap_clear::@2
  to:bitmap_clear::@3
bitmap_clear::@3: scope:[bitmap_clear]  from bitmap_clear::@2
  (byte*) bitmap_clear::bitmap#4 ← phi( bitmap_clear::@2/(byte*) bitmap_clear::bitmap#1 )
  (byte) bitmap_clear::y#2 ← phi( bitmap_clear::@2/(byte) bitmap_clear::y#3 )
  (byte) bitmap_clear::y#1 ← ++ (byte) bitmap_clear::y#2
  (bool~) bitmap_clear::$2 ← (byte) bitmap_clear::y#1 != (byte/signed byte/word/signed word/dword/signed dword) 40
  if((bool~) bitmap_clear::$2) goto bitmap_clear::@1
  to:bitmap_clear::@return
bitmap_clear::@return: scope:[bitmap_clear]  from bitmap_clear::@3
  return 
  to:@return
bitmap_plot: scope:[bitmap_plot]  from main::@14
  (word) bitmap_plot::x#1 ← phi( main::@14/(word) bitmap_plot::x#0 )
  (byte) bitmap_plot::y#1 ← phi( main::@14/(byte) bitmap_plot::y#0 )
  (byte*~) bitmap_plot::$0 ← ((byte*)) { *((byte[256]) bitmap_plot_yhi#0 + (byte) bitmap_plot::y#1), *((byte[256]) bitmap_plot_ylo#0 + (byte) bitmap_plot::y#1) }
  (byte*) bitmap_plot::plotter#0 ← (byte*~) bitmap_plot::$0
  (word~) bitmap_plot::$1 ← (word) bitmap_plot::x#1 & (word/dword/signed dword) 65528
  (byte*) bitmap_plot::plotter#1 ← (byte*) bitmap_plot::plotter#0 + (word~) bitmap_plot::$1
  (byte~) bitmap_plot::$2 ← < (word) bitmap_plot::x#1
  *((byte*) bitmap_plot::plotter#1) ← *((byte*) bitmap_plot::plotter#1) | *((byte[256]) bitmap_plot_bit#0 + (byte~) bitmap_plot::$2)
  to:bitmap_plot::@return
bitmap_plot::@return: scope:[bitmap_plot]  from bitmap_plot
  return 
  to:@return
@9: scope:[]  from @6
  (byte*) BITMAP#10 ← phi( @6/(byte*) BITMAP#11 )
  (byte*) SCREEN#4 ← phi( @6/(byte*) SCREEN#9 )
  call main 
  to:@10
@10: scope:[]  from @9
  to:@end
@end: scope:[]  from @10

SYMBOL TABLE SSA
(label) @10
(label) @3
(label) @6
(label) @9
(label) @begin
(label) @end
(byte*) BITMAP
(byte*) BITMAP#0
(byte*) BITMAP#1
(byte*) BITMAP#10
(byte*) BITMAP#11
(byte*) BITMAP#2
(byte*) BITMAP#3
(byte*) BITMAP#4
(byte*) BITMAP#5
(byte*) BITMAP#6
(byte*) BITMAP#7
(byte*) BITMAP#8
(byte*) BITMAP#9
(byte*) BORDERCOL
(byte*) BORDERCOL#0
(byte*) CIA2_PORT_A
(byte*) CIA2_PORT_A#0
(byte*) CIA2_PORT_A_DDR
(byte*) CIA2_PORT_A_DDR#0
(byte*) D011
(byte*) D011#0
(byte*) D018
(byte*) D018#0
(byte) DELAY
(byte) DELAY#0
(byte*) PROCPORT
(byte*) PROCPORT#0
(byte*) PROCPORT_DDR
(byte*) PROCPORT_DDR#0
(byte) PROCPORT_DDR_MEMORY_MASK
(byte) PROCPORT_DDR_MEMORY_MASK#0
(byte) PROCPORT_RAM_IO
(byte) PROCPORT_RAM_IO#0
(byte*) SCREEN
(byte*) SCREEN#0
(byte*) SCREEN#1
(byte*) SCREEN#10
(byte*) SCREEN#11
(byte*) SCREEN#12
(byte*) SCREEN#13
(byte*) SCREEN#2
(byte*) SCREEN#3
(byte*) SCREEN#4
(byte*) SCREEN#5
(byte*) SCREEN#6
(byte*) SCREEN#7
(byte*) SCREEN#8
(byte*) SCREEN#9
(byte) VIC_BMM
(byte) VIC_BMM#0
(byte) VIC_DEN
(byte) VIC_DEN#0
(byte) VIC_RSEL
(byte) VIC_RSEL#0
(void()) bitmap_clear()
(byte*~) bitmap_clear::$0
(bool~) bitmap_clear::$1
(bool~) bitmap_clear::$2
(label) bitmap_clear::@1
(label) bitmap_clear::@2
(label) bitmap_clear::@3
(label) bitmap_clear::@return
(byte*) bitmap_clear::bitmap
(byte*) bitmap_clear::bitmap#0
(byte*) bitmap_clear::bitmap#1
(byte*) bitmap_clear::bitmap#2
(byte*) bitmap_clear::bitmap#3
(byte*) bitmap_clear::bitmap#4
(byte) bitmap_clear::x
(byte) bitmap_clear::x#0
(byte) bitmap_clear::x#1
(byte) bitmap_clear::x#2
(byte) bitmap_clear::y
(byte) bitmap_clear::y#0
(byte) bitmap_clear::y#1
(byte) bitmap_clear::y#2
(byte) bitmap_clear::y#3
(byte) bitmap_clear::y#4
(void()) bitmap_init((byte*) bitmap_init::bitmap)
(bool~) bitmap_init::$0
(bool~) bitmap_init::$1
(word/signed word/dword/signed dword~) bitmap_init::$10
(byte*~) bitmap_init::$11
(bool~) bitmap_init::$12
(bool~) bitmap_init::$2
(byte~) bitmap_init::$3
(byte~) bitmap_init::$4
(byte~) bitmap_init::$5
(byte~) bitmap_init::$6
(byte~) bitmap_init::$7
(bool~) bitmap_init::$8
(bool~) bitmap_init::$9
(label) bitmap_init::@1
(label) bitmap_init::@2
(label) bitmap_init::@3
(label) bitmap_init::@4
(label) bitmap_init::@5
(label) bitmap_init::@6
(label) bitmap_init::@7
(label) bitmap_init::@return
(byte*) bitmap_init::bitmap
(byte*) bitmap_init::bitmap#0
(byte*) bitmap_init::bitmap#1
(byte*) bitmap_init::bitmap#2
(byte*) bitmap_init::bitmap#3
(byte*) bitmap_init::bitmap#4
(byte*) bitmap_init::bitmap#5
(byte) bitmap_init::bits
(byte) bitmap_init::bits#0
(byte) bitmap_init::bits#1
(byte) bitmap_init::bits#2
(byte) bitmap_init::bits#3
(byte) bitmap_init::bits#4
(byte) bitmap_init::x
(byte) bitmap_init::x#0
(byte) bitmap_init::x#1
(byte) bitmap_init::x#2
(byte) bitmap_init::x#3
(byte) bitmap_init::x#4
(byte) bitmap_init::y
(byte) bitmap_init::y#0
(byte) bitmap_init::y#1
(byte) bitmap_init::y#2
(byte) bitmap_init::y#3
(byte) bitmap_init::y#4
(byte*) bitmap_init::yoffs
(byte*) bitmap_init::yoffs#0
(byte*) bitmap_init::yoffs#1
(byte*) bitmap_init::yoffs#2
(byte*) bitmap_init::yoffs#3
(byte*) bitmap_init::yoffs#4
(void()) bitmap_plot((word) bitmap_plot::x , (byte) bitmap_plot::y)
(byte*~) bitmap_plot::$0
(word~) bitmap_plot::$1
(byte~) bitmap_plot::$2
(label) bitmap_plot::@return
(byte*) bitmap_plot::plotter
(byte*) bitmap_plot::plotter#0
(byte*) bitmap_plot::plotter#1
(word) bitmap_plot::x
(word) bitmap_plot::x#0
(word) bitmap_plot::x#1
(byte) bitmap_plot::y
(byte) bitmap_plot::y#0
(byte) bitmap_plot::y#1
(byte[256]) bitmap_plot_bit
(byte[256]) bitmap_plot_bit#0
(byte[256]) bitmap_plot_yhi
(byte[256]) bitmap_plot_yhi#0
(byte[256]) bitmap_plot_ylo
(byte[256]) bitmap_plot_ylo#0
(byte[4]) delay
(byte[4]) delay#0
(void()) main()
(byte~) main::$0
(byte~) main::$1
(bool~) main::$11
(byte/word/dword~) main::$2
(byte~) main::$4
(byte~) main::$9
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@13
(label) main::@14
(label) main::@15
(label) main::@2
(label) main::@3
(label) main::@9
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3
(byte) main::i#4
(label) main::toD0181
(word~) main::toD0181_$0
(word) main::toD0181_$0#0
(word~) main::toD0181_$1
(word) main::toD0181_$1#0
(word~) main::toD0181_$2
(word) main::toD0181_$2#0
(byte~) main::toD0181_$3
(byte) main::toD0181_$3#0
(word~) main::toD0181_$4
(word) main::toD0181_$4#0
(byte~) main::toD0181_$5
(byte) main::toD0181_$5#0
(byte~) main::toD0181_$6
(byte) main::toD0181_$6#0
(byte~) main::toD0181_$7
(byte) main::toD0181_$7#0
(byte~) main::toD0181_$8
(byte) main::toD0181_$8#0
(label) main::toD0181_@return
(byte*) main::toD0181_gfx
(byte*) main::toD0181_gfx#0
(byte*) main::toD0181_gfx#1
(byte) main::toD0181_return
(byte) main::toD0181_return#0
(byte) main::toD0181_return#1
(byte) main::toD0181_return#2
(byte) main::toD0181_return#3
(byte*) main::toD0181_screen
(byte*) main::toD0181_screen#0
(byte*) main::toD0181_screen#1
(label) main::vicSelectGfxBank1
(byte~) main::vicSelectGfxBank1_$0
(byte) main::vicSelectGfxBank1_$0#0
(label) main::vicSelectGfxBank1_@1
(byte*) main::vicSelectGfxBank1_gfx
(byte*) main::vicSelectGfxBank1_gfx#0
(byte*) main::vicSelectGfxBank1_gfx#1
(label) main::vicSelectGfxBank1_toDd001
(word~) main::vicSelectGfxBank1_toDd001_$0
(word) main::vicSelectGfxBank1_toDd001_$0#0
(byte~) main::vicSelectGfxBank1_toDd001_$1
(byte) main::vicSelectGfxBank1_toDd001_$1#0
(byte~) main::vicSelectGfxBank1_toDd001_$2
(byte) main::vicSelectGfxBank1_toDd001_$2#0
(byte/word/dword~) main::vicSelectGfxBank1_toDd001_$3
(byte/word/dword) main::vicSelectGfxBank1_toDd001_$3#0
(label) main::vicSelectGfxBank1_toDd001_@return
(byte*) main::vicSelectGfxBank1_toDd001_gfx
(byte*) main::vicSelectGfxBank1_toDd001_gfx#0
(byte*) main::vicSelectGfxBank1_toDd001_gfx#1
(byte) main::vicSelectGfxBank1_toDd001_return
(byte) main::vicSelectGfxBank1_toDd001_return#0
(byte) main::vicSelectGfxBank1_toDd001_return#1
(byte) main::vicSelectGfxBank1_toDd001_return#2
(byte) main::vicSelectGfxBank1_toDd001_return#3
(void()) point_init((byte) point_init::point_idx)
(word~) point_init::$0
(byte~) point_init::$1
(word~) point_init::$2
(word~) point_init::$3
(byte~) point_init::$4
(label) point_init::@return
(byte) point_init::point_idx
(byte) point_init::point_idx#0
(byte) point_init::point_idx#1
(void()) screen_fill((byte*) screen_fill::screen , (byte) screen_fill::ch)
(bool~) screen_fill::$0
(bool~) screen_fill::$1
(label) screen_fill::@1
(label) screen_fill::@2
(label) screen_fill::@3
(label) screen_fill::@return
(byte) screen_fill::ch
(byte) screen_fill::ch#0
(byte) screen_fill::ch#1
(byte) screen_fill::ch#2
(byte) screen_fill::ch#3
(byte) screen_fill::ch#4
(byte*) screen_fill::screen
(byte*) screen_fill::screen#0
(byte*) screen_fill::screen#1
(byte*) screen_fill::screen#2
(byte*) screen_fill::screen#3
(byte*) screen_fill::screen#4
(byte*) screen_fill::screen#5
(byte) screen_fill::x
(byte) screen_fill::x#0
(byte) screen_fill::x#1
(byte) screen_fill::x#2
(byte) screen_fill::y
(byte) screen_fill::y#0
(byte) screen_fill::y#1
(byte) screen_fill::y#2
(byte) screen_fill::y#3
(byte) screen_fill::y#4
(word[4]) x_cur
(word[4]) x_cur#0
(word[4]) x_start
(word[4]) x_start#0
(word[4]) y_cur
(word[4]) y_cur#0
(byte[4]) y_start
(byte[4]) y_start#0

OPTIMIZING CONTROL FLOW GRAPH
Culled Empty Block (label) @10
Succesful SSA optimization Pass2CullEmptyBlocks
Inversing boolean not (bool~) bitmap_init::$1 ← (byte) bitmap_init::bits#1 != (byte/signed byte/word/signed word/dword/signed dword) 0 from (bool~) bitmap_init::$0 ← (byte) bitmap_init::bits#1 == (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (bool~) bitmap_init::$9 ← (byte~) bitmap_init::$7 != (byte/signed byte/word/signed word/dword/signed dword) 7 from (bool~) bitmap_init::$8 ← (byte~) bitmap_init::$7 == (byte/signed byte/word/signed word/dword/signed dword) 7
Succesful SSA optimization Pass2UnaryNotSimplification
Not aliassing across scopes: SCREEN#1 SCREEN#4
Not aliassing across scopes: BITMAP#9 BITMAP#10
Not aliassing across scopes: main::vicSelectGfxBank1_gfx#0 SCREEN#1
Not aliassing across scopes: main::toD0181_screen#0 SCREEN#2
Not aliassing across scopes: main::toD0181_gfx#0 BITMAP#1
Not aliassing across scopes: bitmap_init::bitmap#0 BITMAP#2
Not aliassing across scopes: screen_fill::screen#0 SCREEN#3
Not aliassing across scopes: point_init::point_idx#0 main::i#2
Not aliassing across scopes: point_init::point_idx#1 point_init::point_idx#0
Not aliassing across scopes: screen_fill::ch#3 screen_fill::ch#0
Not aliassing across scopes: screen_fill::screen#4 screen_fill::screen#0
Not aliassing across scopes: bitmap_init::bitmap#5 bitmap_init::bitmap#0
Not aliassing across scopes: bitmap_plot::y#1 bitmap_plot::y#0
Not aliassing across scopes: bitmap_plot::x#1 bitmap_plot::x#0
Alias (byte*) main::vicSelectGfxBank1_gfx#0 = (byte*) main::vicSelectGfxBank1_gfx#1 (byte*) main::vicSelectGfxBank1_toDd001_gfx#0 (byte*) main::vicSelectGfxBank1_toDd001_gfx#1 
Alias (byte*) SCREEN#1 = (byte*) SCREEN#12 (byte*) SCREEN#10 (byte*) SCREEN#7 (byte*) SCREEN#5 (byte*) SCREEN#2 (byte*) SCREEN#13 (byte*) SCREEN#11 (byte*) SCREEN#8 (byte*) SCREEN#6 (byte*) SCREEN#3 
Alias (byte*) BITMAP#1 = (byte*) BITMAP#8 (byte*) BITMAP#9 (byte*) BITMAP#7 (byte*) BITMAP#5 (byte*) BITMAP#3 (byte*) BITMAP#6 (byte*) BITMAP#4 (byte*) BITMAP#2 
Alias (byte) main::vicSelectGfxBank1_toDd001_return#0 = (byte/word/dword) main::vicSelectGfxBank1_toDd001_$3#0 (byte) main::vicSelectGfxBank1_toDd001_return#2 (byte) main::vicSelectGfxBank1_toDd001_return#1 (byte) main::vicSelectGfxBank1_toDd001_return#3 (byte) main::vicSelectGfxBank1_$0#0 
Alias (byte*) main::toD0181_screen#0 = (byte*) main::toD0181_screen#1 
Alias (byte*) main::toD0181_gfx#0 = (byte*) main::toD0181_gfx#1 
Alias (byte) main::toD0181_return#0 = (byte) main::toD0181_$8#0 (byte) main::toD0181_return#2 (byte) main::toD0181_return#1 (byte) main::toD0181_return#3 (byte~) main::$4 
Alias (byte) main::i#2 = (byte) main::i#3 (byte) main::i#4 
Alias (byte) screen_fill::y#2 = (byte) screen_fill::y#3 
Alias (byte) screen_fill::ch#1 = (byte) screen_fill::ch#4 
Alias (byte*) screen_fill::screen#1 = (byte*) screen_fill::screen#5 
Alias (byte*) SCREEN#0 = (byte*) SCREEN#9 (byte*) SCREEN#4 
Alias (byte*) BITMAP#0 = (byte*) BITMAP#11 (byte*) BITMAP#10 
Alias (byte) bitmap_init::x#2 = (byte) bitmap_init::x#4 
Alias (byte*) bitmap_init::bitmap#3 = (byte*) bitmap_init::bitmap#4 
Alias (byte*) bitmap_init::bitmap#1 = (byte*) bitmap_init::bitmap#2 (byte*) bitmap_init::yoffs#0 
Alias (byte*) bitmap_init::yoffs#2 = (byte*) bitmap_init::yoffs#3 
Alias (byte) bitmap_init::y#2 = (byte) bitmap_init::y#4 
Alias (byte*) bitmap_init::yoffs#1 = (byte*~) bitmap_init::$11 
Alias (byte*) bitmap_clear::bitmap#0 = (byte*~) bitmap_clear::$0 
Alias (byte) bitmap_clear::y#2 = (byte) bitmap_clear::y#3 
Alias (byte*) bitmap_clear::bitmap#1 = (byte*) bitmap_clear::bitmap#4 
Alias (byte*) bitmap_plot::plotter#0 = (byte*~) bitmap_plot::$0 
Succesful SSA optimization Pass2AliasElimination
Not aliassing across scopes: SCREEN#1 SCREEN#0
Not aliassing across scopes: BITMAP#1 BITMAP#0
Not aliassing across scopes: main::vicSelectGfxBank1_gfx#0 SCREEN#1
Not aliassing across scopes: main::toD0181_screen#0 SCREEN#1
Not aliassing across scopes: main::toD0181_gfx#0 BITMAP#1
Not aliassing across scopes: bitmap_init::bitmap#0 BITMAP#1
Not aliassing across scopes: screen_fill::screen#0 SCREEN#1
Not aliassing across scopes: point_init::point_idx#0 main::i#2
Not aliassing across scopes: point_init::point_idx#1 point_init::point_idx#0
Not aliassing across scopes: screen_fill::ch#3 screen_fill::ch#0
Not aliassing across scopes: screen_fill::screen#4 screen_fill::screen#0
Not aliassing across scopes: bitmap_init::bitmap#5 bitmap_init::bitmap#0
Not aliassing across scopes: bitmap_plot::y#1 bitmap_plot::y#0
Not aliassing across scopes: bitmap_plot::x#1 bitmap_plot::x#0
Alias (byte) bitmap_init::x#2 = (byte) bitmap_init::x#3 
Alias (byte*) bitmap_init::bitmap#1 = (byte*) bitmap_init::bitmap#3 
Alias (byte) bitmap_init::y#2 = (byte) bitmap_init::y#3 
Succesful SSA optimization Pass2AliasElimination
Not aliassing across scopes: SCREEN#1 SCREEN#0
Not aliassing across scopes: BITMAP#1 BITMAP#0
Not aliassing across scopes: main::vicSelectGfxBank1_gfx#0 SCREEN#1
Not aliassing across scopes: main::toD0181_screen#0 SCREEN#1
Not aliassing across scopes: main::toD0181_gfx#0 BITMAP#1
Not aliassing across scopes: bitmap_init::bitmap#0 BITMAP#1
Not aliassing across scopes: screen_fill::screen#0 SCREEN#1
Not aliassing across scopes: point_init::point_idx#0 main::i#2
Not aliassing across scopes: point_init::point_idx#1 point_init::point_idx#0
Not aliassing across scopes: screen_fill::ch#3 screen_fill::ch#0
Not aliassing across scopes: screen_fill::screen#4 screen_fill::screen#0
Not aliassing across scopes: bitmap_init::bitmap#5 bitmap_init::bitmap#0
Not aliassing across scopes: bitmap_plot::y#1 bitmap_plot::y#0
Not aliassing across scopes: bitmap_plot::x#1 bitmap_plot::x#0
Self Phi Eliminated (byte) screen_fill::ch#1
Self Phi Eliminated (byte) screen_fill::y#2
Self Phi Eliminated (byte*) bitmap_init::bitmap#1
Self Phi Eliminated (byte) bitmap_clear::y#2
Succesful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte*) SCREEN#1 (byte*) SCREEN#0
Redundant Phi (byte*) BITMAP#1 (byte*) BITMAP#0
Redundant Phi (byte) point_init::point_idx#1 (byte) point_init::point_idx#0
Redundant Phi (byte) screen_fill::ch#3 (byte) screen_fill::ch#0
Redundant Phi (byte*) screen_fill::screen#4 (byte*) screen_fill::screen#0
Redundant Phi (byte) screen_fill::ch#1 (byte) screen_fill::ch#2
Redundant Phi (byte) screen_fill::y#2 (byte) screen_fill::y#4
Redundant Phi (byte*) bitmap_init::bitmap#5 (byte*) bitmap_init::bitmap#0
Redundant Phi (byte*) bitmap_init::bitmap#1 (byte*) bitmap_init::bitmap#5
Redundant Phi (byte) bitmap_clear::y#2 (byte) bitmap_clear::y#4
Redundant Phi (byte) bitmap_plot::y#1 (byte) bitmap_plot::y#0
Redundant Phi (word) bitmap_plot::x#1 (word) bitmap_plot::x#0
Succesful SSA optimization Pass2RedundantPhiElimination
Simple Condition (bool~) main::$11 if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto main::@1
Simple Condition (bool~) screen_fill::$0 if((byte) screen_fill::x#1!=(byte/signed byte/word/signed word/dword/signed dword) 40) goto screen_fill::@2
Simple Condition (bool~) screen_fill::$1 if((byte) screen_fill::y#1!=(byte/signed byte/word/signed word/dword/signed dword) 25) goto screen_fill::@1
Simple Condition (bool~) bitmap_init::$1 if((byte) bitmap_init::bits#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@2
Simple Condition (bool~) bitmap_init::$2 if((byte) bitmap_init::x#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@1
Simple Condition (bool~) bitmap_init::$9 if((byte~) bitmap_init::$7!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto bitmap_init::@4
Simple Condition (bool~) bitmap_init::$12 if((byte) bitmap_init::y#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@3
Simple Condition (bool~) bitmap_clear::$1 if((byte) bitmap_clear::x#1!=(byte/word/signed word/dword/signed dword) 200) goto bitmap_clear::@2
Simple Condition (bool~) bitmap_clear::$2 if((byte) bitmap_clear::y#1!=(byte/signed byte/word/signed word/dword/signed dword) 40) goto bitmap_clear::@1
Succesful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) PROCPORT_DDR#0 = ((byte*))0
Constant (const byte) PROCPORT_DDR_MEMORY_MASK#0 = 7
Constant (const byte*) PROCPORT#0 = ((byte*))1
Constant (const byte) PROCPORT_RAM_IO#0 = 53
Constant (const byte*) BORDERCOL#0 = ((byte*))53280
Constant (const byte*) D011#0 = ((byte*))53265
Constant (const byte) VIC_BMM#0 = 32
Constant (const byte) VIC_DEN#0 = 16
Constant (const byte) VIC_RSEL#0 = 8
Constant (const byte*) D018#0 = ((byte*))53272
Constant (const byte*) CIA2_PORT_A#0 = ((byte*))56576
Constant (const byte*) CIA2_PORT_A_DDR#0 = ((byte*))56578
Constant (const byte*) BITMAP#0 = ((byte*))40960
Constant (const byte*) SCREEN#0 = ((byte*))34816
Constant (const byte) DELAY#0 = 8
Constant (const word[4]) x_start#0 = { 10, 20, 30, 30 }
Constant (const byte[4]) y_start#0 = { 10, 10, 10, 20 }
Constant (const word[4]) x_cur#0 = { fill( 4, 0) }
Constant (const word[4]) y_cur#0 = { fill( 4, 0) }
Constant (const byte[4]) delay#0 = { fill( 4, 0) }
Constant (const byte) screen_fill::ch#0 = 16
Constant (const byte) main::i#0 = 0
Constant (const byte) screen_fill::y#0 = 0
Constant (const byte) screen_fill::x#0 = 0
Constant (const byte[256]) bitmap_plot_ylo#0 = { fill( 256, 0) }
Constant (const byte[256]) bitmap_plot_yhi#0 = { fill( 256, 0) }
Constant (const byte[256]) bitmap_plot_bit#0 = { fill( 256, 0) }
Constant (const byte) bitmap_init::bits#0 = 128
Constant (const byte) bitmap_init::x#0 = 0
Constant (const byte) bitmap_init::bits#2 = 128
Constant (const byte) bitmap_init::y#0 = 0
Constant (const word/signed word/dword/signed dword) bitmap_init::$10 = 40*8
Constant (const byte) bitmap_clear::y#0 = 0
Constant (const byte) bitmap_clear::x#0 = 0
Succesful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::$0 = VIC_BMM#0|VIC_DEN#0
Constant (const byte*) main::vicSelectGfxBank1_gfx#0 = SCREEN#0
Constant (const byte*) main::toD0181_screen#0 = SCREEN#0
Constant (const byte*) main::toD0181_gfx#0 = BITMAP#0
Constant (const byte*) bitmap_init::bitmap#0 = BITMAP#0
Constant (const byte*) screen_fill::screen#0 = SCREEN#0
Succesful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::$1 = main::$0|VIC_RSEL#0
Constant (const word) main::vicSelectGfxBank1_toDd001_$0#0 = ((word))main::vicSelectGfxBank1_gfx#0
Constant (const word) main::toD0181_$0#0 = ((word))main::toD0181_screen#0
Constant (const word) main::toD0181_$4#0 = ((word))main::toD0181_gfx#0
Succesful SSA optimization Pass2ConstantIdentification
Constant (const byte/word/dword) main::$2 = main::$1|3
Constant (const byte) main::vicSelectGfxBank1_toDd001_$1#0 = >main::vicSelectGfxBank1_toDd001_$0#0
Constant (const word) main::toD0181_$1#0 = main::toD0181_$0#0&16383
Constant (const byte) main::toD0181_$5#0 = >main::toD0181_$4#0
Succesful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::vicSelectGfxBank1_toDd001_$2#0 = main::vicSelectGfxBank1_toDd001_$1#0>>6
Constant (const word) main::toD0181_$2#0 = main::toD0181_$1#0<<2
Constant (const byte) main::toD0181_$6#0 = main::toD0181_$5#0>>2
Succesful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::vicSelectGfxBank1_toDd001_return#0 = 3^main::vicSelectGfxBank1_toDd001_$2#0
Constant (const byte) main::toD0181_$3#0 = >main::toD0181_$2#0
Constant (const byte) main::toD0181_$7#0 = main::toD0181_$6#0&15
Succesful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::toD0181_return#0 = main::toD0181_$3#0|main::toD0181_$7#0
Succesful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination if(true) goto main::@3
Succesful SSA optimization Pass2ConstantIfs
Fixing inline constructor with bitmap_clear::$3 ← *(bitmap_plot_yhi#0 + 0) w= *(bitmap_plot_ylo#0 + 0)
Fixing inline constructor with bitmap_plot::$3 ← *(bitmap_plot_yhi#0 + bitmap_plot::y#0) w= *(bitmap_plot_ylo#0 + bitmap_plot::y#0)
Succesful SSA optimization Pass2FixInlineConstructors
Eliminating Noop Cast (byte*) bitmap_clear::bitmap#0 ← ((byte*)) (word~) bitmap_clear::$3
Eliminating Noop Cast (byte*) bitmap_plot::plotter#0 ← ((byte*)) (word~) bitmap_plot::$3
Succesful SSA optimization Pass2NopCastElimination
Removing unused block main::@return
Succesful SSA optimization Pass2EliminateUnusedBlocks
Culled Empty Block (label) @3
Culled Empty Block (label) main::vicSelectGfxBank1_toDd001_@return
Culled Empty Block (label) main::@9
Culled Empty Block (label) main::toD0181_@return
Culled Empty Block (label) main::@13
Culled Empty Block (label) main::@2
Culled Empty Block (label) @6
Not culling empty block because it shares successor with its predecessor. (label) bitmap_init::@5
Culled Empty Block (label) bitmap_init::@6
Succesful SSA optimization Pass2CullEmptyBlocks
Not culling empty block because it shares successor with its predecessor. (label) bitmap_init::@5
Not aliassing across scopes: point_init::point_idx#0 main::i#2
Self Phi Eliminated (byte) screen_fill::ch#2
Succesful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte) screen_fill::ch#2 (const byte) screen_fill::ch#0
Succesful SSA optimization Pass2RedundantPhiElimination
Consolidated array index constant in *(bitmap_plot_yhi#0+0)
Consolidated array index constant in *(bitmap_plot_ylo#0+0)
Succesful SSA optimization Pass2ConstantAdditionElimination
Not culling empty block because it shares successor with its predecessor. (label) bitmap_init::@5
Not aliassing across scopes: point_init::point_idx#0 main::i#2
OPTIMIZING CONTROL FLOW GRAPH
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) screen_fill::y#0
Inlining constant with var siblings (const byte) screen_fill::y#0
Inlining constant with var siblings (const byte) screen_fill::x#0
Inlining constant with var siblings (const byte) screen_fill::x#0
Inlining constant with var siblings (const byte*) screen_fill::screen#0
Inlining constant with var siblings (const byte*) screen_fill::screen#0
Inlining constant with var siblings (const byte*) screen_fill::screen#0
Inlining constant with var siblings (const byte) bitmap_init::bits#0
Inlining constant with var siblings (const byte) bitmap_init::bits#0
Inlining constant with var siblings (const byte) bitmap_init::bits#0
Inlining constant with var siblings (const byte) bitmap_init::x#0
Inlining constant with var siblings (const byte) bitmap_init::x#0
Inlining constant with var siblings (const byte) bitmap_init::bits#2
Inlining constant with var siblings (const byte) bitmap_init::bits#2
Inlining constant with var siblings (const byte) bitmap_init::bits#2
Inlining constant with var siblings (const byte) bitmap_init::y#0
Inlining constant with var siblings (const byte) bitmap_init::y#0
Inlining constant with var siblings (const byte) bitmap_clear::y#0
Inlining constant with var siblings (const byte) bitmap_clear::y#0
Inlining constant with var siblings (const byte) bitmap_clear::x#0
Inlining constant with var siblings (const byte) bitmap_clear::x#0
Constant inlined main::toD0181_screen#0 = (const byte*) SCREEN#0
Constant inlined main::toD0181_gfx#0 = (const byte*) BITMAP#0
Constant inlined bitmap_init::bits#0 = (byte/word/signed word/dword/signed dword) 128
Constant inlined bitmap_init::bits#2 = (byte/word/signed word/dword/signed dword) 128
Constant inlined main::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined bitmap_init::$10 = (byte/signed byte/word/signed word/dword/signed dword) 40*(byte/signed byte/word/signed word/dword/signed dword) 8
Constant inlined main::vicSelectGfxBank1_toDd001_$2#0 = >((word))(const byte*) SCREEN#0>>(byte/signed byte/word/signed word/dword/signed dword) 6
Constant inlined screen_fill::x#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::vicSelectGfxBank1_toDd001_$1#0 = >((word))(const byte*) SCREEN#0
Constant inlined main::vicSelectGfxBank1_toDd001_$0#0 = ((word))(const byte*) SCREEN#0
Constant inlined bitmap_clear::x#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined bitmap_clear::y#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::toD0181_$0#0 = ((word))(const byte*) SCREEN#0
Constant inlined main::toD0181_$1#0 = ((word))(const byte*) SCREEN#0&(word/signed word/dword/signed dword) 16383
Constant inlined main::toD0181_$6#0 = >((word))(const byte*) BITMAP#0>>(byte/signed byte/word/signed word/dword/signed dword) 2
Constant inlined main::toD0181_$7#0 = >((word))(const byte*) BITMAP#0>>(byte/signed byte/word/signed word/dword/signed dword) 2&(byte/signed byte/word/signed word/dword/signed dword) 15
Constant inlined screen_fill::screen#0 = (const byte*) SCREEN#0
Constant inlined main::$1 = (const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0
Constant inlined main::toD0181_$2#0 = ((word))(const byte*) SCREEN#0&(word/signed word/dword/signed dword) 16383<<(byte/signed byte/word/signed word/dword/signed dword) 2
Constant inlined main::$2 = (const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3
Constant inlined main::toD0181_$3#0 = >((word))(const byte*) SCREEN#0&(word/signed word/dword/signed dword) 16383<<(byte/signed byte/word/signed word/dword/signed dword) 2
Constant inlined main::toD0181_$4#0 = ((word))(const byte*) BITMAP#0
Constant inlined main::$0 = (const byte) VIC_BMM#0|(const byte) VIC_DEN#0
Constant inlined main::toD0181_$5#0 = >((word))(const byte*) BITMAP#0
Constant inlined main::vicSelectGfxBank1_gfx#0 = (const byte*) SCREEN#0
Constant inlined bitmap_init::y#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined screen_fill::y#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined bitmap_init::x#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined bitmap_init::bitmap#0 = (const byte*) BITMAP#0
Succesful SSA optimization Pass2ConstantInlining
Block Sequence Planned @begin @9 @end main main::vicSelectGfxBank1 main::vicSelectGfxBank1_toDd001 main::vicSelectGfxBank1_@1 main::toD0181 main::@10 main::@11 main::@12 main::@1 main::@14 main::@15 main::@3 bitmap_plot bitmap_plot::@return point_init point_init::@return screen_fill screen_fill::@1 screen_fill::@2 screen_fill::@3 screen_fill::@return bitmap_clear bitmap_clear::@1 bitmap_clear::@2 bitmap_clear::@3 bitmap_clear::@return bitmap_init bitmap_init::@1 bitmap_init::@5 bitmap_init::@2 bitmap_init::@3 bitmap_init::@7 bitmap_init::@4 bitmap_init::@return 
Added new block during phi lifting main::@16(between main::@15 and main::@1)
Added new block during phi lifting screen_fill::@5(between screen_fill::@3 and screen_fill::@1)
Added new block during phi lifting screen_fill::@6(between screen_fill::@2 and screen_fill::@2)
Added new block during phi lifting bitmap_clear::@5(between bitmap_clear::@3 and bitmap_clear::@1)
Added new block during phi lifting bitmap_clear::@6(between bitmap_clear::@2 and bitmap_clear::@2)
Added new block during phi lifting bitmap_init::@9(between bitmap_init::@2 and bitmap_init::@1)
Added new block during phi lifting bitmap_init::@10(between bitmap_init::@1 and bitmap_init::@2)
Added new block during phi lifting bitmap_init::@11(between bitmap_init::@4 and bitmap_init::@3)
Added new block during phi lifting bitmap_init::@12(between bitmap_init::@3 and bitmap_init::@4)
Block Sequence Planned @begin @9 @end main main::vicSelectGfxBank1 main::vicSelectGfxBank1_toDd001 main::vicSelectGfxBank1_@1 main::toD0181 main::@10 main::@11 main::@12 main::@1 main::@14 main::@15 main::@3 main::@16 bitmap_plot bitmap_plot::@return point_init point_init::@return screen_fill screen_fill::@1 screen_fill::@2 screen_fill::@3 screen_fill::@return screen_fill::@5 screen_fill::@6 bitmap_clear bitmap_clear::@1 bitmap_clear::@2 bitmap_clear::@3 bitmap_clear::@return bitmap_clear::@5 bitmap_clear::@6 bitmap_init bitmap_init::@1 bitmap_init::@5 bitmap_init::@2 bitmap_init::@3 bitmap_init::@7 bitmap_init::@4 bitmap_init::@return bitmap_init::@11 bitmap_init::@12 bitmap_init::@9 bitmap_init::@10 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @9
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::vicSelectGfxBank1_toDd001
Adding NOP phi() at start of main::toD0181
Adding NOP phi() at start of main::@11
Adding NOP phi() at start of main::@12
Adding NOP phi() at start of screen_fill
Adding NOP phi() at start of bitmap_init
Adding NOP phi() at start of bitmap_init::@5
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to bitmap_init:13 bitmap_clear:15 screen_fill:17 point_init:20 bitmap_plot:24 

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Created 15 initial phi equivalence classes
Coalesced [28] main::i#5 ← main::i#1
Coalesced [46] screen_fill::screen#7 ← screen_fill::screen#3
Coalesced [55] screen_fill::screen#6 ← screen_fill::screen#1
Coalesced [56] screen_fill::y#5 ← screen_fill::y#1
Coalesced (already) [57] screen_fill::screen#8 ← screen_fill::screen#1
Coalesced [58] screen_fill::x#3 ← screen_fill::x#1
Coalesced [62] bitmap_clear::bitmap#7 ← bitmap_clear::bitmap#3
Coalesced [71] bitmap_clear::bitmap#6 ← bitmap_clear::bitmap#1
Coalesced [72] bitmap_clear::y#5 ← bitmap_clear::y#1
Coalesced (already) [73] bitmap_clear::bitmap#8 ← bitmap_clear::bitmap#1
Coalesced [74] bitmap_clear::x#3 ← bitmap_clear::x#1
Coalesced [94] bitmap_init::yoffs#7 ← bitmap_init::yoffs#1
Coalesced [99] bitmap_init::y#5 ← bitmap_init::y#1
Coalesced [100] bitmap_init::yoffs#5 ← bitmap_init::yoffs#4
Coalesced (already) [101] bitmap_init::yoffs#6 ← bitmap_init::yoffs#2
Coalesced [102] bitmap_init::bits#5 ← bitmap_init::bits#4
Coalesced [103] bitmap_init::x#5 ← bitmap_init::x#1
Coalesced [104] bitmap_init::bits#6 ← bitmap_init::bits#1
Coalesced down to 11 phi equivalence classes
Culled Empty Block (label) main::@16
Culled Empty Block (label) screen_fill::@5
Culled Empty Block (label) screen_fill::@6
Culled Empty Block (label) bitmap_clear::@5
Culled Empty Block (label) bitmap_clear::@6
Culled Empty Block (label) bitmap_init::@5
Culled Empty Block (label) bitmap_init::@11
Culled Empty Block (label) bitmap_init::@12
Culled Empty Block (label) bitmap_init::@9
Not culling empty block because it shares successor with its predecessor. (label) bitmap_init::@10
Block Sequence Planned @begin @9 @end main main::vicSelectGfxBank1 main::vicSelectGfxBank1_toDd001 main::vicSelectGfxBank1_@1 main::toD0181 main::@10 main::@11 main::@12 main::@1 main::@14 main::@15 main::@3 bitmap_plot bitmap_plot::@return point_init point_init::@return screen_fill screen_fill::@1 screen_fill::@2 screen_fill::@3 screen_fill::@return bitmap_clear bitmap_clear::@1 bitmap_clear::@2 bitmap_clear::@3 bitmap_clear::@return bitmap_init bitmap_init::@1 bitmap_init::@2 bitmap_init::@3 bitmap_init::@7 bitmap_init::@4 bitmap_init::@return bitmap_init::@10 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @9
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::vicSelectGfxBank1_toDd001
Adding NOP phi() at start of main::toD0181
Adding NOP phi() at start of main::@11
Adding NOP phi() at start of main::@12
Adding NOP phi() at start of screen_fill
Adding NOP phi() at start of bitmap_init
Adding NOP phi() at start of bitmap_init::@10
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi() [ ] ( )
  to:@9
@9: scope:[]  from @begin
  [1] phi() [ ] ( )
  [2] call main  [ ] ( )
  to:@end
@end: scope:[]  from @9
  [3] phi() [ ] ( )
main: scope:[main]  from @9
  asm { sei  }
  [5] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 [ ] ( main:2 [ ] )
  [6] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 [ ] ( main:2 [ ] )
  [7] *((const byte*) D011#0) ← (const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2 [ ] )
  to:main::vicSelectGfxBank1
main::vicSelectGfxBank1: scope:[main]  from main
  [8] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2 [ ] )
  to:main::vicSelectGfxBank1_toDd001
main::vicSelectGfxBank1_toDd001: scope:[main]  from main::vicSelectGfxBank1
  [9] phi() [ ] ( main:2 [ ] )
  to:main::vicSelectGfxBank1_@1
main::vicSelectGfxBank1_@1: scope:[main]  from main::vicSelectGfxBank1_toDd001
  [10] *((const byte*) CIA2_PORT_A#0) ← (const byte) main::vicSelectGfxBank1_toDd001_return#0 [ ] ( main:2 [ ] )
  to:main::toD0181
main::toD0181: scope:[main]  from main::vicSelectGfxBank1_@1
  [11] phi() [ ] ( main:2 [ ] )
  to:main::@10
main::@10: scope:[main]  from main::toD0181
  [12] *((const byte*) D018#0) ← (const byte) main::toD0181_return#0 [ ] ( main:2 [ ] )
  [13] call bitmap_init  [ ] ( main:2 [ ] )
  to:main::@11
main::@11: scope:[main]  from main::@10
  [14] phi() [ ] ( main:2 [ ] )
  [15] call bitmap_clear  [ ] ( main:2 [ ] )
  to:main::@12
main::@12: scope:[main]  from main::@11
  [16] phi() [ ] ( main:2 [ ] )
  [17] call screen_fill  [ ] ( main:2 [ ] )
  to:main::@1
main::@1: scope:[main]  from main::@12 main::@15
  [18] (byte) main::i#2 ← phi( main::@12/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@15/(byte) main::i#1 ) [ main::i#2 ] ( main:2 [ main::i#2 ] )
  [19] (byte) point_init::point_idx#0 ← (byte) main::i#2 [ main::i#2 point_init::point_idx#0 ] ( main:2 [ main::i#2 point_init::point_idx#0 ] )
  [20] call point_init  [ main::i#2 ] ( main:2 [ main::i#2 ] )
  to:main::@14
main::@14: scope:[main]  from main::@1
  [21] (byte~) main::$9 ← (byte) main::i#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ main::i#2 main::$9 ] ( main:2 [ main::i#2 main::$9 ] )
  [22] (word) bitmap_plot::x#0 ← *((const word[4]) x_start#0 + (byte) main::i#2) [ main::i#2 main::$9 bitmap_plot::x#0 ] ( main:2 [ main::i#2 main::$9 bitmap_plot::x#0 ] )
  [23] (byte) bitmap_plot::y#0 ← *((const byte[4]) y_start#0 + (byte~) main::$9) [ main::i#2 bitmap_plot::x#0 bitmap_plot::y#0 ] ( main:2 [ main::i#2 bitmap_plot::x#0 bitmap_plot::y#0 ] )
  [24] call bitmap_plot  [ main::i#2 ] ( main:2 [ main::i#2 ] )
  to:main::@15
main::@15: scope:[main]  from main::@14
  [25] (byte) main::i#1 ← (byte) main::i#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ main::i#1 ] ( main:2 [ main::i#1 ] )
  [26] if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto main::@1 [ main::i#1 ] ( main:2 [ main::i#1 ] )
  to:main::@3
main::@3: scope:[main]  from main::@15 main::@3
  [27] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) [ ] ( main:2 [ ] )
  to:main::@3
bitmap_plot: scope:[bitmap_plot]  from main::@14
  [28] (word~) bitmap_plot::$3 ← *((const byte[256]) bitmap_plot_yhi#0 + (byte) bitmap_plot::y#0) w= *((const byte[256]) bitmap_plot_ylo#0 + (byte) bitmap_plot::y#0) [ bitmap_plot::x#0 bitmap_plot::$3 ] ( main:2::bitmap_plot:24 [ main::i#2 bitmap_plot::x#0 bitmap_plot::$3 ] )
  [29] (word~) bitmap_plot::$1 ← (word) bitmap_plot::x#0 & (word/dword/signed dword) 65528 [ bitmap_plot::x#0 bitmap_plot::$3 bitmap_plot::$1 ] ( main:2::bitmap_plot:24 [ main::i#2 bitmap_plot::x#0 bitmap_plot::$3 bitmap_plot::$1 ] )
  [30] (byte*) bitmap_plot::plotter#1 ← (byte*)(word~) bitmap_plot::$3 + (word~) bitmap_plot::$1 [ bitmap_plot::x#0 bitmap_plot::plotter#1 ] ( main:2::bitmap_plot:24 [ main::i#2 bitmap_plot::x#0 bitmap_plot::plotter#1 ] )
  [31] (byte~) bitmap_plot::$2 ← < (word) bitmap_plot::x#0 [ bitmap_plot::plotter#1 bitmap_plot::$2 ] ( main:2::bitmap_plot:24 [ main::i#2 bitmap_plot::plotter#1 bitmap_plot::$2 ] )
  [32] *((byte*) bitmap_plot::plotter#1) ← *((byte*) bitmap_plot::plotter#1) | *((const byte[256]) bitmap_plot_bit#0 + (byte~) bitmap_plot::$2) [ ] ( main:2::bitmap_plot:24 [ main::i#2 ] )
  to:bitmap_plot::@return
bitmap_plot::@return: scope:[bitmap_plot]  from bitmap_plot
  [33] return  [ ] ( main:2::bitmap_plot:24 [ main::i#2 ] )
  to:@return
point_init: scope:[point_init]  from main::@1
  [34] (word~) point_init::$0 ← *((const word[4]) x_start#0 + (byte) point_init::point_idx#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 [ point_init::point_idx#0 point_init::$0 ] ( main:2::point_init:20 [ main::i#2 point_init::point_idx#0 point_init::$0 ] )
  [35] *((const word[4]) x_cur#0 + (byte) point_init::point_idx#0) ← (word~) point_init::$0 [ point_init::point_idx#0 ] ( main:2::point_init:20 [ main::i#2 point_init::point_idx#0 ] )
  [36] (byte~) point_init::$1 ← (byte) point_init::point_idx#0 >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ point_init::point_idx#0 point_init::$1 ] ( main:2::point_init:20 [ main::i#2 point_init::point_idx#0 point_init::$1 ] )
  [37] (word~) point_init::$2 ← ((word)) *((const byte[4]) y_start#0 + (byte~) point_init::$1) [ point_init::point_idx#0 point_init::$2 ] ( main:2::point_init:20 [ main::i#2 point_init::point_idx#0 point_init::$2 ] )
  [38] (word~) point_init::$3 ← (word~) point_init::$2 << (byte/signed byte/word/signed word/dword/signed dword) 4 [ point_init::point_idx#0 point_init::$3 ] ( main:2::point_init:20 [ main::i#2 point_init::point_idx#0 point_init::$3 ] )
  [39] *((const word[4]) y_cur#0 + (byte) point_init::point_idx#0) ← (word~) point_init::$3 [ point_init::point_idx#0 ] ( main:2::point_init:20 [ main::i#2 point_init::point_idx#0 ] )
  [40] (byte~) point_init::$4 ← (byte) point_init::point_idx#0 >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ point_init::$4 ] ( main:2::point_init:20 [ main::i#2 point_init::$4 ] )
  [41] *((const byte[4]) delay#0 + (byte~) point_init::$4) ← (const byte) DELAY#0 [ ] ( main:2::point_init:20 [ main::i#2 ] )
  to:point_init::@return
point_init::@return: scope:[point_init]  from point_init
  [42] return  [ ] ( main:2::point_init:20 [ main::i#2 ] )
  to:@return
screen_fill: scope:[screen_fill]  from main::@12
  [43] phi() [ ] ( main:2::screen_fill:17 [ ] )
  to:screen_fill::@1
screen_fill::@1: scope:[screen_fill]  from screen_fill screen_fill::@3
  [44] (byte) screen_fill::y#4 ← phi( screen_fill/(byte/signed byte/word/signed word/dword/signed dword) 0 screen_fill::@3/(byte) screen_fill::y#1 ) [ screen_fill::screen#3 screen_fill::y#4 ] ( main:2::screen_fill:17 [ screen_fill::screen#3 screen_fill::y#4 ] )
  [44] (byte*) screen_fill::screen#3 ← phi( screen_fill/(const byte*) SCREEN#0 screen_fill::@3/(byte*) screen_fill::screen#1 ) [ screen_fill::screen#3 screen_fill::y#4 ] ( main:2::screen_fill:17 [ screen_fill::screen#3 screen_fill::y#4 ] )
  to:screen_fill::@2
screen_fill::@2: scope:[screen_fill]  from screen_fill::@1 screen_fill::@2
  [45] (byte) screen_fill::x#2 ← phi( screen_fill::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 screen_fill::@2/(byte) screen_fill::x#1 ) [ screen_fill::y#4 screen_fill::screen#2 screen_fill::x#2 ] ( main:2::screen_fill:17 [ screen_fill::y#4 screen_fill::screen#2 screen_fill::x#2 ] )
  [45] (byte*) screen_fill::screen#2 ← phi( screen_fill::@1/(byte*) screen_fill::screen#3 screen_fill::@2/(byte*) screen_fill::screen#1 ) [ screen_fill::y#4 screen_fill::screen#2 screen_fill::x#2 ] ( main:2::screen_fill:17 [ screen_fill::y#4 screen_fill::screen#2 screen_fill::x#2 ] )
  [46] *((byte*) screen_fill::screen#2) ← (const byte) screen_fill::ch#0 [ screen_fill::y#4 screen_fill::screen#2 screen_fill::x#2 ] ( main:2::screen_fill:17 [ screen_fill::y#4 screen_fill::screen#2 screen_fill::x#2 ] )
  [47] (byte*) screen_fill::screen#1 ← ++ (byte*) screen_fill::screen#2 [ screen_fill::y#4 screen_fill::screen#1 screen_fill::x#2 ] ( main:2::screen_fill:17 [ screen_fill::y#4 screen_fill::screen#1 screen_fill::x#2 ] )
  [48] (byte) screen_fill::x#1 ← ++ (byte) screen_fill::x#2 [ screen_fill::y#4 screen_fill::screen#1 screen_fill::x#1 ] ( main:2::screen_fill:17 [ screen_fill::y#4 screen_fill::screen#1 screen_fill::x#1 ] )
  [49] if((byte) screen_fill::x#1!=(byte/signed byte/word/signed word/dword/signed dword) 40) goto screen_fill::@2 [ screen_fill::y#4 screen_fill::screen#1 screen_fill::x#1 ] ( main:2::screen_fill:17 [ screen_fill::y#4 screen_fill::screen#1 screen_fill::x#1 ] )
  to:screen_fill::@3
screen_fill::@3: scope:[screen_fill]  from screen_fill::@2
  [50] (byte) screen_fill::y#1 ← ++ (byte) screen_fill::y#4 [ screen_fill::screen#1 screen_fill::y#1 ] ( main:2::screen_fill:17 [ screen_fill::screen#1 screen_fill::y#1 ] )
  [51] if((byte) screen_fill::y#1!=(byte/signed byte/word/signed word/dword/signed dword) 25) goto screen_fill::@1 [ screen_fill::screen#1 screen_fill::y#1 ] ( main:2::screen_fill:17 [ screen_fill::screen#1 screen_fill::y#1 ] )
  to:screen_fill::@return
screen_fill::@return: scope:[screen_fill]  from screen_fill::@3
  [52] return  [ ] ( main:2::screen_fill:17 [ ] )
  to:@return
bitmap_clear: scope:[bitmap_clear]  from main::@11
  [53] (word~) bitmap_clear::$3 ← *((const byte[256]) bitmap_plot_yhi#0+(byte/signed byte/word/signed word/dword/signed dword) 0) w= *((const byte[256]) bitmap_plot_ylo#0+(byte/signed byte/word/signed word/dword/signed dword) 0) [ bitmap_clear::$3 ] ( main:2::bitmap_clear:15 [ bitmap_clear::$3 ] )
  [54] (byte*~) bitmap_clear::bitmap#5 ← (byte*)(word~) bitmap_clear::$3 [ bitmap_clear::bitmap#5 ] ( main:2::bitmap_clear:15 [ bitmap_clear::bitmap#5 ] )
  to:bitmap_clear::@1
bitmap_clear::@1: scope:[bitmap_clear]  from bitmap_clear bitmap_clear::@3
  [55] (byte) bitmap_clear::y#4 ← phi( bitmap_clear/(byte/signed byte/word/signed word/dword/signed dword) 0 bitmap_clear::@3/(byte) bitmap_clear::y#1 ) [ bitmap_clear::bitmap#3 bitmap_clear::y#4 ] ( main:2::bitmap_clear:15 [ bitmap_clear::bitmap#3 bitmap_clear::y#4 ] )
  [55] (byte*) bitmap_clear::bitmap#3 ← phi( bitmap_clear/(byte*~) bitmap_clear::bitmap#5 bitmap_clear::@3/(byte*) bitmap_clear::bitmap#1 ) [ bitmap_clear::bitmap#3 bitmap_clear::y#4 ] ( main:2::bitmap_clear:15 [ bitmap_clear::bitmap#3 bitmap_clear::y#4 ] )
  to:bitmap_clear::@2
bitmap_clear::@2: scope:[bitmap_clear]  from bitmap_clear::@1 bitmap_clear::@2
  [56] (byte) bitmap_clear::x#2 ← phi( bitmap_clear::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 bitmap_clear::@2/(byte) bitmap_clear::x#1 ) [ bitmap_clear::y#4 bitmap_clear::bitmap#2 bitmap_clear::x#2 ] ( main:2::bitmap_clear:15 [ bitmap_clear::y#4 bitmap_clear::bitmap#2 bitmap_clear::x#2 ] )
  [56] (byte*) bitmap_clear::bitmap#2 ← phi( bitmap_clear::@1/(byte*) bitmap_clear::bitmap#3 bitmap_clear::@2/(byte*) bitmap_clear::bitmap#1 ) [ bitmap_clear::y#4 bitmap_clear::bitmap#2 bitmap_clear::x#2 ] ( main:2::bitmap_clear:15 [ bitmap_clear::y#4 bitmap_clear::bitmap#2 bitmap_clear::x#2 ] )
  [57] *((byte*) bitmap_clear::bitmap#2) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ bitmap_clear::y#4 bitmap_clear::bitmap#2 bitmap_clear::x#2 ] ( main:2::bitmap_clear:15 [ bitmap_clear::y#4 bitmap_clear::bitmap#2 bitmap_clear::x#2 ] )
  [58] (byte*) bitmap_clear::bitmap#1 ← ++ (byte*) bitmap_clear::bitmap#2 [ bitmap_clear::y#4 bitmap_clear::bitmap#1 bitmap_clear::x#2 ] ( main:2::bitmap_clear:15 [ bitmap_clear::y#4 bitmap_clear::bitmap#1 bitmap_clear::x#2 ] )
  [59] (byte) bitmap_clear::x#1 ← ++ (byte) bitmap_clear::x#2 [ bitmap_clear::y#4 bitmap_clear::bitmap#1 bitmap_clear::x#1 ] ( main:2::bitmap_clear:15 [ bitmap_clear::y#4 bitmap_clear::bitmap#1 bitmap_clear::x#1 ] )
  [60] if((byte) bitmap_clear::x#1!=(byte/word/signed word/dword/signed dword) 200) goto bitmap_clear::@2 [ bitmap_clear::y#4 bitmap_clear::bitmap#1 bitmap_clear::x#1 ] ( main:2::bitmap_clear:15 [ bitmap_clear::y#4 bitmap_clear::bitmap#1 bitmap_clear::x#1 ] )
  to:bitmap_clear::@3
bitmap_clear::@3: scope:[bitmap_clear]  from bitmap_clear::@2
  [61] (byte) bitmap_clear::y#1 ← ++ (byte) bitmap_clear::y#4 [ bitmap_clear::bitmap#1 bitmap_clear::y#1 ] ( main:2::bitmap_clear:15 [ bitmap_clear::bitmap#1 bitmap_clear::y#1 ] )
  [62] if((byte) bitmap_clear::y#1!=(byte/signed byte/word/signed word/dword/signed dword) 40) goto bitmap_clear::@1 [ bitmap_clear::bitmap#1 bitmap_clear::y#1 ] ( main:2::bitmap_clear:15 [ bitmap_clear::bitmap#1 bitmap_clear::y#1 ] )
  to:bitmap_clear::@return
bitmap_clear::@return: scope:[bitmap_clear]  from bitmap_clear::@3
  [63] return  [ ] ( main:2::bitmap_clear:15 [ ] )
  to:@return
bitmap_init: scope:[bitmap_init]  from main::@10
  [64] phi() [ ] ( main:2::bitmap_init:13 [ ] )
  to:bitmap_init::@1
bitmap_init::@1: scope:[bitmap_init]  from bitmap_init bitmap_init::@2
  [65] (byte) bitmap_init::x#2 ← phi( bitmap_init/(byte/signed byte/word/signed word/dword/signed dword) 0 bitmap_init::@2/(byte) bitmap_init::x#1 ) [ bitmap_init::bits#3 bitmap_init::x#2 ] ( main:2::bitmap_init:13 [ bitmap_init::bits#3 bitmap_init::x#2 ] )
  [65] (byte) bitmap_init::bits#3 ← phi( bitmap_init/(byte/word/signed word/dword/signed dword) 128 bitmap_init::@2/(byte) bitmap_init::bits#4 ) [ bitmap_init::bits#3 bitmap_init::x#2 ] ( main:2::bitmap_init:13 [ bitmap_init::bits#3 bitmap_init::x#2 ] )
  [66] *((const byte[256]) bitmap_plot_bit#0 + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3 [ bitmap_init::bits#3 bitmap_init::x#2 ] ( main:2::bitmap_init:13 [ bitmap_init::bits#3 bitmap_init::x#2 ] )
  [67] (byte) bitmap_init::bits#1 ← (byte) bitmap_init::bits#3 >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ bitmap_init::x#2 bitmap_init::bits#1 ] ( main:2::bitmap_init:13 [ bitmap_init::x#2 bitmap_init::bits#1 ] )
  [68] if((byte) bitmap_init::bits#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@10 [ bitmap_init::x#2 bitmap_init::bits#1 ] ( main:2::bitmap_init:13 [ bitmap_init::x#2 bitmap_init::bits#1 ] )
  to:bitmap_init::@2
bitmap_init::@2: scope:[bitmap_init]  from bitmap_init::@1 bitmap_init::@10
  [69] (byte) bitmap_init::bits#4 ← phi( bitmap_init::@10/(byte) bitmap_init::bits#1 bitmap_init::@1/(byte/word/signed word/dword/signed dword) 128 ) [ bitmap_init::x#2 bitmap_init::bits#4 ] ( main:2::bitmap_init:13 [ bitmap_init::x#2 bitmap_init::bits#4 ] )
  [70] (byte) bitmap_init::x#1 ← ++ (byte) bitmap_init::x#2 [ bitmap_init::bits#4 bitmap_init::x#1 ] ( main:2::bitmap_init:13 [ bitmap_init::bits#4 bitmap_init::x#1 ] )
  [71] if((byte) bitmap_init::x#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@1 [ bitmap_init::bits#4 bitmap_init::x#1 ] ( main:2::bitmap_init:13 [ bitmap_init::bits#4 bitmap_init::x#1 ] )
  to:bitmap_init::@3
bitmap_init::@3: scope:[bitmap_init]  from bitmap_init::@2 bitmap_init::@4
  [72] (byte*) bitmap_init::yoffs#2 ← phi( bitmap_init::@4/(byte*) bitmap_init::yoffs#4 bitmap_init::@2/(const byte*) BITMAP#0 ) [ bitmap_init::y#2 bitmap_init::yoffs#2 ] ( main:2::bitmap_init:13 [ bitmap_init::y#2 bitmap_init::yoffs#2 ] )
  [72] (byte) bitmap_init::y#2 ← phi( bitmap_init::@4/(byte) bitmap_init::y#1 bitmap_init::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 ) [ bitmap_init::y#2 bitmap_init::yoffs#2 ] ( main:2::bitmap_init:13 [ bitmap_init::y#2 bitmap_init::yoffs#2 ] )
  [73] (byte~) bitmap_init::$3 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$3 ] ( main:2::bitmap_init:13 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$3 ] )
  [74] (byte~) bitmap_init::$4 ← < (byte*) bitmap_init::yoffs#2 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$3 bitmap_init::$4 ] ( main:2::bitmap_init:13 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$3 bitmap_init::$4 ] )
  [75] (byte~) bitmap_init::$5 ← (byte~) bitmap_init::$3 | (byte~) bitmap_init::$4 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$5 ] ( main:2::bitmap_init:13 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$5 ] )
  [76] *((const byte[256]) bitmap_plot_ylo#0 + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$5 [ bitmap_init::y#2 bitmap_init::yoffs#2 ] ( main:2::bitmap_init:13 [ bitmap_init::y#2 bitmap_init::yoffs#2 ] )
  [77] (byte~) bitmap_init::$6 ← > (byte*) bitmap_init::yoffs#2 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$6 ] ( main:2::bitmap_init:13 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$6 ] )
  [78] *((const byte[256]) bitmap_plot_yhi#0 + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$6 [ bitmap_init::y#2 bitmap_init::yoffs#2 ] ( main:2::bitmap_init:13 [ bitmap_init::y#2 bitmap_init::yoffs#2 ] )
  [79] (byte~) bitmap_init::$7 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$7 ] ( main:2::bitmap_init:13 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$7 ] )
  [80] if((byte~) bitmap_init::$7!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto bitmap_init::@4 [ bitmap_init::y#2 bitmap_init::yoffs#2 ] ( main:2::bitmap_init:13 [ bitmap_init::y#2 bitmap_init::yoffs#2 ] )
  to:bitmap_init::@7
bitmap_init::@7: scope:[bitmap_init]  from bitmap_init::@3
  [81] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (byte/signed byte/word/signed word/dword/signed dword) 40*(byte/signed byte/word/signed word/dword/signed dword) 8 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] ( main:2::bitmap_init:13 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] )
  to:bitmap_init::@4
bitmap_init::@4: scope:[bitmap_init]  from bitmap_init::@3 bitmap_init::@7
  [82] (byte*) bitmap_init::yoffs#4 ← phi( bitmap_init::@3/(byte*) bitmap_init::yoffs#2 bitmap_init::@7/(byte*) bitmap_init::yoffs#1 ) [ bitmap_init::y#2 bitmap_init::yoffs#4 ] ( main:2::bitmap_init:13 [ bitmap_init::y#2 bitmap_init::yoffs#4 ] )
  [83] (byte) bitmap_init::y#1 ← ++ (byte) bitmap_init::y#2 [ bitmap_init::y#1 bitmap_init::yoffs#4 ] ( main:2::bitmap_init:13 [ bitmap_init::y#1 bitmap_init::yoffs#4 ] )
  [84] if((byte) bitmap_init::y#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@3 [ bitmap_init::y#1 bitmap_init::yoffs#4 ] ( main:2::bitmap_init:13 [ bitmap_init::y#1 bitmap_init::yoffs#4 ] )
  to:bitmap_init::@return
bitmap_init::@return: scope:[bitmap_init]  from bitmap_init::@4
  [85] return  [ ] ( main:2::bitmap_init:13 [ ] )
  to:@return
bitmap_init::@10: scope:[bitmap_init]  from bitmap_init::@1
  [86] phi() [ bitmap_init::x#2 bitmap_init::bits#1 ] ( main:2::bitmap_init:13 [ bitmap_init::x#2 bitmap_init::bits#1 ] )
  to:bitmap_init::@2

DOMINATORS
@begin dominated by  @begin 
@9 dominated by  @begin @9 
@end dominated by  @end @begin @9 
main dominated by  main @begin @9 
main::vicSelectGfxBank1 dominated by  main::vicSelectGfxBank1 main @begin @9 
main::vicSelectGfxBank1_toDd001 dominated by  main::vicSelectGfxBank1 main @begin main::vicSelectGfxBank1_toDd001 @9 
main::vicSelectGfxBank1_@1 dominated by  main::vicSelectGfxBank1 main @begin main::vicSelectGfxBank1_toDd001 @9 main::vicSelectGfxBank1_@1 
main::toD0181 dominated by  main::toD0181 main::vicSelectGfxBank1 main @begin main::vicSelectGfxBank1_toDd001 @9 main::vicSelectGfxBank1_@1 
main::@10 dominated by  main::toD0181 main::vicSelectGfxBank1 main @begin main::@10 main::vicSelectGfxBank1_toDd001 @9 main::vicSelectGfxBank1_@1 
main::@11 dominated by  main::toD0181 main::vicSelectGfxBank1 main main::@11 @begin main::@10 main::vicSelectGfxBank1_toDd001 @9 main::vicSelectGfxBank1_@1 
main::@12 dominated by  main::toD0181 main::vicSelectGfxBank1 main main::@11 @begin main::@10 main::@12 main::vicSelectGfxBank1_toDd001 @9 main::vicSelectGfxBank1_@1 
main::@1 dominated by  main::toD0181 main::vicSelectGfxBank1 main main::@1 main::@11 @begin main::@10 main::@12 main::vicSelectGfxBank1_toDd001 @9 main::vicSelectGfxBank1_@1 
main::@14 dominated by  main::toD0181 main::vicSelectGfxBank1 main main::@1 main::@11 @begin main::@10 main::@12 main::@14 main::vicSelectGfxBank1_toDd001 @9 main::vicSelectGfxBank1_@1 
main::@15 dominated by  main::toD0181 main::vicSelectGfxBank1 main main::@1 main::@11 @begin main::@10 main::@12 main::@15 main::@14 main::vicSelectGfxBank1_toDd001 @9 main::vicSelectGfxBank1_@1 
main::@3 dominated by  main::toD0181 main::vicSelectGfxBank1 main main::@1 main::@3 main::@11 @begin main::@10 main::@12 main::@15 main::@14 main::vicSelectGfxBank1_toDd001 @9 main::vicSelectGfxBank1_@1 
bitmap_plot dominated by  main::toD0181 main::vicSelectGfxBank1 main main::@1 main::@11 @begin main::@10 bitmap_plot main::@12 main::@14 main::vicSelectGfxBank1_toDd001 @9 main::vicSelectGfxBank1_@1 
bitmap_plot::@return dominated by  main::toD0181 main::vicSelectGfxBank1 main main::@1 main::@11 @begin main::@10 bitmap_plot main::@12 main::@14 bitmap_plot::@return main::vicSelectGfxBank1_toDd001 @9 main::vicSelectGfxBank1_@1 
point_init dominated by  main::toD0181 main::vicSelectGfxBank1 main main::@1 main::@11 @begin main::@10 point_init main::@12 main::vicSelectGfxBank1_toDd001 @9 main::vicSelectGfxBank1_@1 
point_init::@return dominated by  main::toD0181 main::vicSelectGfxBank1 main main::@1 point_init::@return main::@11 @begin main::@10 point_init main::@12 main::vicSelectGfxBank1_toDd001 @9 main::vicSelectGfxBank1_@1 
screen_fill dominated by  main::toD0181 main::vicSelectGfxBank1 main screen_fill main::@11 @begin main::@10 main::@12 main::vicSelectGfxBank1_toDd001 @9 main::vicSelectGfxBank1_@1 
screen_fill::@1 dominated by  main::toD0181 main::vicSelectGfxBank1 main screen_fill::@1 screen_fill main::@11 @begin main::@10 main::@12 main::vicSelectGfxBank1_toDd001 @9 main::vicSelectGfxBank1_@1 
screen_fill::@2 dominated by  main::toD0181 main::vicSelectGfxBank1 main screen_fill::@1 screen_fill::@2 screen_fill main::@11 @begin main::@10 main::@12 main::vicSelectGfxBank1_toDd001 @9 main::vicSelectGfxBank1_@1 
screen_fill::@3 dominated by  main::toD0181 main::vicSelectGfxBank1 main screen_fill::@1 screen_fill::@3 screen_fill::@2 screen_fill main::@11 @begin main::@10 main::@12 main::vicSelectGfxBank1_toDd001 @9 main::vicSelectGfxBank1_@1 
screen_fill::@return dominated by  main::toD0181 main::vicSelectGfxBank1 main screen_fill::@1 screen_fill::@3 screen_fill::@2 screen_fill main::@11 @begin main::@10 screen_fill::@return main::@12 main::vicSelectGfxBank1_toDd001 @9 main::vicSelectGfxBank1_@1 
bitmap_clear dominated by  main::toD0181 main::vicSelectGfxBank1 main main::@11 @begin main::@10 main::vicSelectGfxBank1_toDd001 @9 bitmap_clear main::vicSelectGfxBank1_@1 
bitmap_clear::@1 dominated by  main::toD0181 main::vicSelectGfxBank1 main bitmap_clear::@1 main::@11 @begin main::@10 main::vicSelectGfxBank1_toDd001 @9 bitmap_clear main::vicSelectGfxBank1_@1 
bitmap_clear::@2 dominated by  main::toD0181 main::vicSelectGfxBank1 main bitmap_clear::@1 bitmap_clear::@2 main::@11 @begin main::@10 main::vicSelectGfxBank1_toDd001 @9 bitmap_clear main::vicSelectGfxBank1_@1 
bitmap_clear::@3 dominated by  bitmap_clear::@3 main::toD0181 main::vicSelectGfxBank1 main bitmap_clear::@1 bitmap_clear::@2 main::@11 @begin main::@10 main::vicSelectGfxBank1_toDd001 @9 bitmap_clear main::vicSelectGfxBank1_@1 
bitmap_clear::@return dominated by  bitmap_clear::@3 main::toD0181 main::vicSelectGfxBank1 main bitmap_clear::@1 bitmap_clear::@2 main::@11 @begin main::@10 bitmap_clear::@return main::vicSelectGfxBank1_toDd001 @9 bitmap_clear main::vicSelectGfxBank1_@1 
bitmap_init dominated by  main::toD0181 main::vicSelectGfxBank1 main @begin main::@10 bitmap_init main::vicSelectGfxBank1_toDd001 @9 main::vicSelectGfxBank1_@1 
bitmap_init::@1 dominated by  main::toD0181 main::vicSelectGfxBank1 main bitmap_init::@1 @begin main::@10 bitmap_init main::vicSelectGfxBank1_toDd001 @9 main::vicSelectGfxBank1_@1 
bitmap_init::@2 dominated by  main::toD0181 bitmap_init::@2 main::vicSelectGfxBank1 main bitmap_init::@1 @begin main::@10 bitmap_init main::vicSelectGfxBank1_toDd001 @9 main::vicSelectGfxBank1_@1 
bitmap_init::@3 dominated by  main::toD0181 bitmap_init::@2 main::vicSelectGfxBank1 bitmap_init::@3 main bitmap_init::@1 @begin main::@10 bitmap_init main::vicSelectGfxBank1_toDd001 @9 main::vicSelectGfxBank1_@1 
bitmap_init::@7 dominated by  main::toD0181 bitmap_init::@2 main::vicSelectGfxBank1 bitmap_init::@3 main bitmap_init::@1 bitmap_init::@7 @begin main::@10 bitmap_init main::vicSelectGfxBank1_toDd001 @9 main::vicSelectGfxBank1_@1 
bitmap_init::@4 dominated by  main::toD0181 bitmap_init::@2 main::vicSelectGfxBank1 bitmap_init::@3 main bitmap_init::@1 bitmap_init::@4 @begin main::@10 bitmap_init main::vicSelectGfxBank1_toDd001 @9 main::vicSelectGfxBank1_@1 
bitmap_init::@return dominated by  main::toD0181 bitmap_init::@2 main::vicSelectGfxBank1 bitmap_init::@3 main bitmap_init::@1 bitmap_init::@4 bitmap_init::@return @begin main::@10 bitmap_init main::vicSelectGfxBank1_toDd001 @9 main::vicSelectGfxBank1_@1 
bitmap_init::@10 dominated by  bitmap_init::@10 main::toD0181 main::vicSelectGfxBank1 main bitmap_init::@1 @begin main::@10 bitmap_init main::vicSelectGfxBank1_toDd001 @9 main::vicSelectGfxBank1_@1 

NATURAL LOOPS
Found back edge: Loop head: main::@1 tails: main::@15 blocks: null
Found back edge: Loop head: main::@3 tails: main::@3 blocks: null
Found back edge: Loop head: screen_fill::@2 tails: screen_fill::@2 blocks: null
Found back edge: Loop head: screen_fill::@1 tails: screen_fill::@3 blocks: null
Found back edge: Loop head: bitmap_clear::@2 tails: bitmap_clear::@2 blocks: null
Found back edge: Loop head: bitmap_clear::@1 tails: bitmap_clear::@3 blocks: null
Found back edge: Loop head: bitmap_init::@1 tails: bitmap_init::@2 blocks: null
Found back edge: Loop head: bitmap_init::@3 tails: bitmap_init::@4 blocks: null
Populated: Loop head: main::@1 tails: main::@15 blocks: main::@15 main::@14 main::@1 
Populated: Loop head: main::@3 tails: main::@3 blocks: main::@3 
Populated: Loop head: screen_fill::@2 tails: screen_fill::@2 blocks: screen_fill::@2 
Populated: Loop head: screen_fill::@1 tails: screen_fill::@3 blocks: screen_fill::@3 screen_fill::@2 screen_fill::@1 
Populated: Loop head: bitmap_clear::@2 tails: bitmap_clear::@2 blocks: bitmap_clear::@2 
Populated: Loop head: bitmap_clear::@1 tails: bitmap_clear::@3 blocks: bitmap_clear::@3 bitmap_clear::@2 bitmap_clear::@1 
Populated: Loop head: bitmap_init::@1 tails: bitmap_init::@2 blocks: bitmap_init::@2 bitmap_init::@1 bitmap_init::@10 
Populated: Loop head: bitmap_init::@3 tails: bitmap_init::@4 blocks: bitmap_init::@4 bitmap_init::@3 bitmap_init::@7 
Loop head: main::@1 tails: main::@15 blocks: main::@15 main::@14 main::@1 
Loop head: main::@3 tails: main::@3 blocks: main::@3 
Loop head: screen_fill::@2 tails: screen_fill::@2 blocks: screen_fill::@2 
Loop head: screen_fill::@1 tails: screen_fill::@3 blocks: screen_fill::@3 screen_fill::@2 screen_fill::@1 
Loop head: bitmap_clear::@2 tails: bitmap_clear::@2 blocks: bitmap_clear::@2 
Loop head: bitmap_clear::@1 tails: bitmap_clear::@3 blocks: bitmap_clear::@3 bitmap_clear::@2 bitmap_clear::@1 
Loop head: bitmap_init::@1 tails: bitmap_init::@2 blocks: bitmap_init::@2 bitmap_init::@1 bitmap_init::@10 
Loop head: bitmap_init::@3 tails: bitmap_init::@4 blocks: bitmap_init::@4 bitmap_init::@3 bitmap_init::@7 

NATURAL LOOPS WITH DEPTH
Found 0 loops in scope []
Found 2 loops in scope [main]
  Loop head: main::@1 tails: main::@15 blocks: main::@15 main::@14 main::@1 
  Loop head: main::@3 tails: main::@3 blocks: main::@3 
Found 2 loops in scope [bitmap_init]
  Loop head: bitmap_init::@1 tails: bitmap_init::@2 blocks: bitmap_init::@2 bitmap_init::@1 bitmap_init::@10 
  Loop head: bitmap_init::@3 tails: bitmap_init::@4 blocks: bitmap_init::@4 bitmap_init::@3 bitmap_init::@7 
Found 2 loops in scope [bitmap_clear]
  Loop head: bitmap_clear::@2 tails: bitmap_clear::@2 blocks: bitmap_clear::@2 
  Loop head: bitmap_clear::@1 tails: bitmap_clear::@3 blocks: bitmap_clear::@3 bitmap_clear::@2 bitmap_clear::@1 
Found 2 loops in scope [screen_fill]
  Loop head: screen_fill::@2 tails: screen_fill::@2 blocks: screen_fill::@2 
  Loop head: screen_fill::@1 tails: screen_fill::@3 blocks: screen_fill::@3 screen_fill::@2 screen_fill::@1 
Found 0 loops in scope [point_init]
Found 0 loops in scope [bitmap_plot]
Loop head: main::@1 tails: main::@15 blocks: main::@15 main::@14 main::@1  depth: 1
Loop head: main::@3 tails: main::@3 blocks: main::@3  depth: 1
Loop head: screen_fill::@2 tails: screen_fill::@2 blocks: screen_fill::@2  depth: 2
Loop head: screen_fill::@1 tails: screen_fill::@3 blocks: screen_fill::@3 screen_fill::@2 screen_fill::@1  depth: 1
Loop head: bitmap_clear::@2 tails: bitmap_clear::@2 blocks: bitmap_clear::@2  depth: 2
Loop head: bitmap_clear::@1 tails: bitmap_clear::@3 blocks: bitmap_clear::@3 bitmap_clear::@2 bitmap_clear::@1  depth: 1
Loop head: bitmap_init::@1 tails: bitmap_init::@2 blocks: bitmap_init::@2 bitmap_init::@1 bitmap_init::@10  depth: 1
Loop head: bitmap_init::@3 tails: bitmap_init::@4 blocks: bitmap_init::@4 bitmap_init::@3 bitmap_init::@7  depth: 1


VARIABLE REGISTER WEIGHTS
(byte*) BITMAP
(byte*) BORDERCOL
(byte*) CIA2_PORT_A
(byte*) CIA2_PORT_A_DDR
(byte*) D011
(byte*) D018
(byte) DELAY
(byte*) PROCPORT
(byte*) PROCPORT_DDR
(byte) PROCPORT_DDR_MEMORY_MASK
(byte) PROCPORT_RAM_IO
(byte*) SCREEN
(byte) VIC_BMM
(byte) VIC_DEN
(byte) VIC_RSEL
(void()) bitmap_clear()
(word~) bitmap_clear::$3 2.0
(byte*) bitmap_clear::bitmap
(byte*) bitmap_clear::bitmap#1 42.599999999999994
(byte*) bitmap_clear::bitmap#2 157.0
(byte*) bitmap_clear::bitmap#3 24.0
(byte*~) bitmap_clear::bitmap#5 4.0
(byte) bitmap_clear::x
(byte) bitmap_clear::x#1 151.5
(byte) bitmap_clear::x#2 67.33333333333333
(byte) bitmap_clear::y
(byte) bitmap_clear::y#1 16.5
(byte) bitmap_clear::y#4 3.6666666666666665
(void()) bitmap_init((byte*) bitmap_init::bitmap)
(byte~) bitmap_init::$3 11.0
(byte~) bitmap_init::$4 22.0
(byte~) bitmap_init::$5 22.0
(byte~) bitmap_init::$6 22.0
(byte~) bitmap_init::$7 22.0
(byte*) bitmap_init::bitmap
(byte) bitmap_init::bits
(byte) bitmap_init::bits#1 11.0
(byte) bitmap_init::bits#3 16.5
(byte) bitmap_init::bits#4 7.333333333333333
(byte) bitmap_init::x
(byte) bitmap_init::x#1 16.5
(byte) bitmap_init::x#2 5.5
(byte) bitmap_init::y
(byte) bitmap_init::y#1 16.5
(byte) bitmap_init::y#2 6.0
(byte*) bitmap_init::yoffs
(byte*) bitmap_init::yoffs#1 22.0
(byte*) bitmap_init::yoffs#2 6.111111111111112
(byte*) bitmap_init::yoffs#4 11.0
(void()) bitmap_plot((word) bitmap_plot::x , (byte) bitmap_plot::y)
(word~) bitmap_plot::$1 4.0
(byte~) bitmap_plot::$2 4.0
(word~) bitmap_plot::$3 1.0
(byte*) bitmap_plot::plotter
(byte*) bitmap_plot::plotter#1 3.0
(word) bitmap_plot::x
(word) bitmap_plot::x#0 3.0
(byte) bitmap_plot::y
(byte) bitmap_plot::y#0 15.0
(byte[256]) bitmap_plot_bit
(byte[256]) bitmap_plot_yhi
(byte[256]) bitmap_plot_ylo
(byte[4]) delay
(void()) main()
(byte~) main::$9 11.0
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 7.857142857142857
(word~) main::toD0181_$0
(word~) main::toD0181_$1
(word~) main::toD0181_$2
(byte~) main::toD0181_$3
(word~) main::toD0181_$4
(byte~) main::toD0181_$5
(byte~) main::toD0181_$6
(byte~) main::toD0181_$7
(byte~) main::toD0181_$8
(byte*) main::toD0181_gfx
(byte) main::toD0181_return
(byte*) main::toD0181_screen
(byte~) main::vicSelectGfxBank1_$0
(byte*) main::vicSelectGfxBank1_gfx
(word~) main::vicSelectGfxBank1_toDd001_$0
(byte~) main::vicSelectGfxBank1_toDd001_$1
(byte~) main::vicSelectGfxBank1_toDd001_$2
(byte/word/dword~) main::vicSelectGfxBank1_toDd001_$3
(byte*) main::vicSelectGfxBank1_toDd001_gfx
(byte) main::vicSelectGfxBank1_toDd001_return
(void()) point_init((byte) point_init::point_idx)
(word~) point_init::$0 4.0
(byte~) point_init::$1 4.0
(word~) point_init::$2 4.0
(word~) point_init::$3 4.0
(byte~) point_init::$4 4.0
(byte) point_init::point_idx
(byte) point_init::point_idx#0 2.9999999999999996
(void()) screen_fill((byte*) screen_fill::screen , (byte) screen_fill::ch)
(byte) screen_fill::ch
(byte*) screen_fill::screen
(byte*) screen_fill::screen#1 42.599999999999994
(byte*) screen_fill::screen#2 157.0
(byte*) screen_fill::screen#3 22.0
(byte) screen_fill::x
(byte) screen_fill::x#1 151.5
(byte) screen_fill::x#2 67.33333333333333
(byte) screen_fill::y
(byte) screen_fill::y#1 16.5
(byte) screen_fill::y#4 3.6666666666666665
(word[4]) x_cur
(word[4]) x_start
(word[4]) y_cur
(byte[4]) y_start

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ screen_fill::y#4 screen_fill::y#1 ]
[ screen_fill::screen#2 screen_fill::screen#3 screen_fill::screen#1 ]
[ screen_fill::x#2 screen_fill::x#1 ]
[ bitmap_clear::y#4 bitmap_clear::y#1 ]
[ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ]
[ bitmap_clear::x#2 bitmap_clear::x#1 ]
[ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
[ bitmap_init::x#2 bitmap_init::x#1 ]
[ bitmap_init::y#2 bitmap_init::y#1 ]
[ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
Added variable point_init::point_idx#0 to zero page equivalence class [ point_init::point_idx#0 ]
Added variable main::$9 to zero page equivalence class [ main::$9 ]
Added variable bitmap_plot::x#0 to zero page equivalence class [ bitmap_plot::x#0 ]
Added variable bitmap_plot::y#0 to zero page equivalence class [ bitmap_plot::y#0 ]
Added variable bitmap_plot::$3 to zero page equivalence class [ bitmap_plot::$3 ]
Added variable bitmap_plot::$1 to zero page equivalence class [ bitmap_plot::$1 ]
Added variable bitmap_plot::plotter#1 to zero page equivalence class [ bitmap_plot::plotter#1 ]
Added variable bitmap_plot::$2 to zero page equivalence class [ bitmap_plot::$2 ]
Added variable point_init::$0 to zero page equivalence class [ point_init::$0 ]
Added variable point_init::$1 to zero page equivalence class [ point_init::$1 ]
Added variable point_init::$2 to zero page equivalence class [ point_init::$2 ]
Added variable point_init::$3 to zero page equivalence class [ point_init::$3 ]
Added variable point_init::$4 to zero page equivalence class [ point_init::$4 ]
Added variable bitmap_clear::$3 to zero page equivalence class [ bitmap_clear::$3 ]
Added variable bitmap_init::$3 to zero page equivalence class [ bitmap_init::$3 ]
Added variable bitmap_init::$4 to zero page equivalence class [ bitmap_init::$4 ]
Added variable bitmap_init::$5 to zero page equivalence class [ bitmap_init::$5 ]
Added variable bitmap_init::$6 to zero page equivalence class [ bitmap_init::$6 ]
Added variable bitmap_init::$7 to zero page equivalence class [ bitmap_init::$7 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ screen_fill::y#4 screen_fill::y#1 ]
[ screen_fill::screen#2 screen_fill::screen#3 screen_fill::screen#1 ]
[ screen_fill::x#2 screen_fill::x#1 ]
[ bitmap_clear::y#4 bitmap_clear::y#1 ]
[ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ]
[ bitmap_clear::x#2 bitmap_clear::x#1 ]
[ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
[ bitmap_init::x#2 bitmap_init::x#1 ]
[ bitmap_init::y#2 bitmap_init::y#1 ]
[ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
[ point_init::point_idx#0 ]
[ main::$9 ]
[ bitmap_plot::x#0 ]
[ bitmap_plot::y#0 ]
[ bitmap_plot::$3 ]
[ bitmap_plot::$1 ]
[ bitmap_plot::plotter#1 ]
[ bitmap_plot::$2 ]
[ point_init::$0 ]
[ point_init::$1 ]
[ point_init::$2 ]
[ point_init::$3 ]
[ point_init::$4 ]
[ bitmap_clear::$3 ]
[ bitmap_init::$3 ]
[ bitmap_init::$4 ]
[ bitmap_init::$5 ]
[ bitmap_init::$6 ]
[ bitmap_init::$7 ]
Allocated zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Allocated zp ZP_BYTE:3 [ screen_fill::y#4 screen_fill::y#1 ]
Allocated zp ZP_WORD:4 [ screen_fill::screen#2 screen_fill::screen#3 screen_fill::screen#1 ]
Allocated zp ZP_BYTE:6 [ screen_fill::x#2 screen_fill::x#1 ]
Allocated zp ZP_BYTE:7 [ bitmap_clear::y#4 bitmap_clear::y#1 ]
Allocated zp ZP_WORD:8 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ]
Allocated zp ZP_BYTE:10 [ bitmap_clear::x#2 bitmap_clear::x#1 ]
Allocated zp ZP_BYTE:11 [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
Allocated zp ZP_BYTE:12 [ bitmap_init::x#2 bitmap_init::x#1 ]
Allocated zp ZP_BYTE:13 [ bitmap_init::y#2 bitmap_init::y#1 ]
Allocated zp ZP_WORD:14 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
Allocated zp ZP_BYTE:16 [ point_init::point_idx#0 ]
Allocated zp ZP_BYTE:17 [ main::$9 ]
Allocated zp ZP_WORD:18 [ bitmap_plot::x#0 ]
Allocated zp ZP_BYTE:20 [ bitmap_plot::y#0 ]
Allocated zp ZP_WORD:21 [ bitmap_plot::$3 ]
Allocated zp ZP_WORD:23 [ bitmap_plot::$1 ]
Allocated zp ZP_WORD:25 [ bitmap_plot::plotter#1 ]
Allocated zp ZP_BYTE:27 [ bitmap_plot::$2 ]
Allocated zp ZP_WORD:28 [ point_init::$0 ]
Allocated zp ZP_BYTE:30 [ point_init::$1 ]
Allocated zp ZP_WORD:31 [ point_init::$2 ]
Allocated zp ZP_WORD:33 [ point_init::$3 ]
Allocated zp ZP_BYTE:35 [ point_init::$4 ]
Allocated zp ZP_WORD:36 [ bitmap_clear::$3 ]
Allocated zp ZP_BYTE:38 [ bitmap_init::$3 ]
Allocated zp ZP_BYTE:39 [ bitmap_init::$4 ]
Allocated zp ZP_BYTE:40 [ bitmap_init::$5 ]
Allocated zp ZP_BYTE:41 [ bitmap_init::$6 ]
Allocated zp ZP_BYTE:42 [ bitmap_init::$7 ]

INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label PROCPORT_DDR = 0
  .const PROCPORT_DDR_MEMORY_MASK = 7
  .label PROCPORT = 1
  .const PROCPORT_RAM_IO = $35
  .label BORDERCOL = $d020
  .label D011 = $d011
  .const VIC_BMM = $20
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  .label D018 = $d018
  .label CIA2_PORT_A = $dd00
  .label CIA2_PORT_A_DDR = $dd02
  .label BITMAP = $a000
  .label SCREEN = $8800
  .const DELAY = 8
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @9 [phi:@begin->@9]
b9_from_bbegin:
  jmp b9
//SEG4 @9
b9:
//SEG5 [2] call main  [ ] ( )
  jsr main
//SEG6 [3] phi from @9 to @end [phi:@9->@end]
bend_from_b9:
  jmp bend
//SEG7 @end
bend:
//SEG8 main
main: {
    .const vicSelectGfxBank1_toDd001_return = 3^(>SCREEN)>>6
    .const toD0181_return = (>(SCREEN&$3fff)<<2)|(>BITMAP)>>2&$f
    .label _9 = $11
    .label i = 2
  //SEG9 asm { sei  }
    sei
  //SEG10 [5] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
  //SEG11 [6] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
  //SEG12 [7] *((const byte*) D011#0) ← (const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #VIC_BMM|VIC_DEN|VIC_RSEL|3
    sta D011
    jmp vicSelectGfxBank1
  //SEG13 main::vicSelectGfxBank1
  vicSelectGfxBank1:
  //SEG14 [8] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #3
    sta CIA2_PORT_A_DDR
  //SEG15 [9] phi from main::vicSelectGfxBank1 to main::vicSelectGfxBank1_toDd001 [phi:main::vicSelectGfxBank1->main::vicSelectGfxBank1_toDd001]
  vicSelectGfxBank1_toDd001_from_vicSelectGfxBank1:
    jmp vicSelectGfxBank1_toDd001
  //SEG16 main::vicSelectGfxBank1_toDd001
  vicSelectGfxBank1_toDd001:
    jmp vicSelectGfxBank1_b1
  //SEG17 main::vicSelectGfxBank1_@1
  vicSelectGfxBank1_b1:
  //SEG18 [10] *((const byte*) CIA2_PORT_A#0) ← (const byte) main::vicSelectGfxBank1_toDd001_return#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #vicSelectGfxBank1_toDd001_return
    sta CIA2_PORT_A
  //SEG19 [11] phi from main::vicSelectGfxBank1_@1 to main::toD0181 [phi:main::vicSelectGfxBank1_@1->main::toD0181]
  toD0181_from_vicSelectGfxBank1_b1:
    jmp toD0181
  //SEG20 main::toD0181
  toD0181:
    jmp b10
  //SEG21 main::@10
  b10:
  //SEG22 [12] *((const byte*) D018#0) ← (const byte) main::toD0181_return#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #toD0181_return
    sta D018
  //SEG23 [13] call bitmap_init  [ ] ( main:2 [ ] )
  //SEG24 [64] phi from main::@10 to bitmap_init [phi:main::@10->bitmap_init]
  bitmap_init_from_b10:
    jsr bitmap_init
  //SEG25 [14] phi from main::@10 to main::@11 [phi:main::@10->main::@11]
  b11_from_b10:
    jmp b11
  //SEG26 main::@11
  b11:
  //SEG27 [15] call bitmap_clear  [ ] ( main:2 [ ] )
    jsr bitmap_clear
  //SEG28 [16] phi from main::@11 to main::@12 [phi:main::@11->main::@12]
  b12_from_b11:
    jmp b12
  //SEG29 main::@12
  b12:
  //SEG30 [17] call screen_fill  [ ] ( main:2 [ ] )
  //SEG31 [43] phi from main::@12 to screen_fill [phi:main::@12->screen_fill]
  screen_fill_from_b12:
    jsr screen_fill
  //SEG32 [18] phi from main::@12 to main::@1 [phi:main::@12->main::@1]
  b1_from_b12:
  //SEG33 [18] phi (byte) main::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@12->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG34 [18] phi from main::@15 to main::@1 [phi:main::@15->main::@1]
  b1_from_b15:
  //SEG35 [18] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@15->main::@1#0] -- register_copy 
    jmp b1
  //SEG36 main::@1
  b1:
  //SEG37 [19] (byte) point_init::point_idx#0 ← (byte) main::i#2 [ main::i#2 point_init::point_idx#0 ] ( main:2 [ main::i#2 point_init::point_idx#0 ] ) -- vbuz1=vbuz2 
    lda i
    sta point_init.point_idx
  //SEG38 [20] call point_init  [ main::i#2 ] ( main:2 [ main::i#2 ] )
    jsr point_init
    jmp b14
  //SEG39 main::@14
  b14:
  //SEG40 [21] (byte~) main::$9 ← (byte) main::i#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ main::i#2 main::$9 ] ( main:2 [ main::i#2 main::$9 ] ) -- vbuz1=vbuz2_ror_1 
    lda i
    lsr
    sta _9
  //SEG41 [22] (word) bitmap_plot::x#0 ← *((const word[4]) x_start#0 + (byte) main::i#2) [ main::i#2 main::$9 bitmap_plot::x#0 ] ( main:2 [ main::i#2 main::$9 bitmap_plot::x#0 ] ) -- vwuz1=pwuc1_derefidx_vbuz2 
    ldy i
    lda x_start,y
    sta bitmap_plot.x
    lda x_start+1,y
    sta bitmap_plot.x+1
  //SEG42 [23] (byte) bitmap_plot::y#0 ← *((const byte[4]) y_start#0 + (byte~) main::$9) [ main::i#2 bitmap_plot::x#0 bitmap_plot::y#0 ] ( main:2 [ main::i#2 bitmap_plot::x#0 bitmap_plot::y#0 ] ) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy _9
    lda y_start,y
    sta bitmap_plot.y
  //SEG43 [24] call bitmap_plot  [ main::i#2 ] ( main:2 [ main::i#2 ] )
    jsr bitmap_plot
    jmp b15
  //SEG44 main::@15
  b15:
  //SEG45 [25] (byte) main::i#1 ← (byte) main::i#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ main::i#1 ] ( main:2 [ main::i#1 ] ) -- vbuz1=vbuz1_plus_2 
    lda i
    clc
    adc #2
    sta i
  //SEG46 [26] if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto main::@1 [ main::i#1 ] ( main:2 [ main::i#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #8
    bne b1_from_b15
    jmp b3
  //SEG47 main::@3
  b3:
  //SEG48 [27] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) [ ] ( main:2 [ ] ) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
    jmp b3
}
//SEG49 bitmap_plot
bitmap_plot: {
    .label _1 = $17
    .label _2 = $1b
    .label x = $12
    .label y = $14
    .label plotter = $19
    .label _3 = $15
  //SEG50 [28] (word~) bitmap_plot::$3 ← *((const byte[256]) bitmap_plot_yhi#0 + (byte) bitmap_plot::y#0) w= *((const byte[256]) bitmap_plot_ylo#0 + (byte) bitmap_plot::y#0) [ bitmap_plot::x#0 bitmap_plot::$3 ] ( main:2::bitmap_plot:24 [ main::i#2 bitmap_plot::x#0 bitmap_plot::$3 ] ) -- vwuz1=pbuc1_derefidx_vbuz2_word_pbuc2_derefidx_vbuz2 
    ldy y
    lda bitmap_plot_yhi,y
    sta _3+1
    lda bitmap_plot_ylo,y
    sta _3
  //SEG51 [29] (word~) bitmap_plot::$1 ← (word) bitmap_plot::x#0 & (word/dword/signed dword) 65528 [ bitmap_plot::x#0 bitmap_plot::$3 bitmap_plot::$1 ] ( main:2::bitmap_plot:24 [ main::i#2 bitmap_plot::x#0 bitmap_plot::$3 bitmap_plot::$1 ] ) -- vwuz1=vwuz2_band_vwuc1 
    lda x
    and #<$fff8
    sta _1
    lda x+1
    and #>$fff8
    sta _1+1
  //SEG52 [30] (byte*) bitmap_plot::plotter#1 ← (byte*)(word~) bitmap_plot::$3 + (word~) bitmap_plot::$1 [ bitmap_plot::x#0 bitmap_plot::plotter#1 ] ( main:2::bitmap_plot:24 [ main::i#2 bitmap_plot::x#0 bitmap_plot::plotter#1 ] ) -- pbuz1=pbuz2_plus_vwuz3 
    lda plotter
    clc
    adc _3
    sta _1
    lda plotter+1
    adc _3+1
    sta _1+1
  //SEG53 [31] (byte~) bitmap_plot::$2 ← < (word) bitmap_plot::x#0 [ bitmap_plot::plotter#1 bitmap_plot::$2 ] ( main:2::bitmap_plot:24 [ main::i#2 bitmap_plot::plotter#1 bitmap_plot::$2 ] ) -- vbuz1=_lo_vwuz2 
    lda x
    sta _2
  //SEG54 [32] *((byte*) bitmap_plot::plotter#1) ← *((byte*) bitmap_plot::plotter#1) | *((const byte[256]) bitmap_plot_bit#0 + (byte~) bitmap_plot::$2) [ ] ( main:2::bitmap_plot:24 [ main::i#2 ] ) -- _deref_pbuz1=_deref_pbuz1_bor_pbuc1_derefidx_vbuz2 
    ldy #0
    lda (plotter),y
    ldy _2
    ora bitmap_plot_bit,y
    ldy #0
    sta (plotter),y
    jmp breturn
  //SEG55 bitmap_plot::@return
  breturn:
  //SEG56 [33] return  [ ] ( main:2::bitmap_plot:24 [ main::i#2 ] )
    rts
}
//SEG57 point_init
point_init: {
    .label _0 = $1c
    .label _1 = $1e
    .label _2 = $1f
    .label _3 = $21
    .label _4 = $23
    .label point_idx = $10
  //SEG58 [34] (word~) point_init::$0 ← *((const word[4]) x_start#0 + (byte) point_init::point_idx#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 [ point_init::point_idx#0 point_init::$0 ] ( main:2::point_init:20 [ main::i#2 point_init::point_idx#0 point_init::$0 ] ) -- vwuz1=pwuc1_derefidx_vbuz2_rol_4 
    ldy point_idx
    lda x_start,y
    sta _0
    lda x_start+1,y
    sta _0+1
    asl _0
    rol _0+1
    asl _0
    rol _0+1
    asl _0
    rol _0+1
    asl _0
    rol _0+1
  //SEG59 [35] *((const word[4]) x_cur#0 + (byte) point_init::point_idx#0) ← (word~) point_init::$0 [ point_init::point_idx#0 ] ( main:2::point_init:20 [ main::i#2 point_init::point_idx#0 ] ) -- pwuc1_derefidx_vbuz1=vwuz2 
    ldy point_idx
    lda _0
    sta x_cur,y
    lda _0+1
    sta x_cur+1,y
  //SEG60 [36] (byte~) point_init::$1 ← (byte) point_init::point_idx#0 >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ point_init::point_idx#0 point_init::$1 ] ( main:2::point_init:20 [ main::i#2 point_init::point_idx#0 point_init::$1 ] ) -- vbuz1=vbuz2_ror_1 
    lda point_idx
    lsr
    sta _1
  //SEG61 [37] (word~) point_init::$2 ← ((word)) *((const byte[4]) y_start#0 + (byte~) point_init::$1) [ point_init::point_idx#0 point_init::$2 ] ( main:2::point_init:20 [ main::i#2 point_init::point_idx#0 point_init::$2 ] ) -- vwuz1=_word_pbuc1_derefidx_vbuz2 
    ldy _1
    lda y_start,y
    sta _2
    lda #0
    sta _2+1
  //SEG62 [38] (word~) point_init::$3 ← (word~) point_init::$2 << (byte/signed byte/word/signed word/dword/signed dword) 4 [ point_init::point_idx#0 point_init::$3 ] ( main:2::point_init:20 [ main::i#2 point_init::point_idx#0 point_init::$3 ] ) -- vwuz1=vwuz2_rol_4 
    lda _2
    asl
    sta _3
    lda _2+1
    rol
    sta _3+1
    asl _3
    rol _3+1
    asl _3
    rol _3+1
    asl _3
    rol _3+1
  //SEG63 [39] *((const word[4]) y_cur#0 + (byte) point_init::point_idx#0) ← (word~) point_init::$3 [ point_init::point_idx#0 ] ( main:2::point_init:20 [ main::i#2 point_init::point_idx#0 ] ) -- pwuc1_derefidx_vbuz1=vwuz2 
    ldy point_idx
    lda _3
    sta y_cur,y
    lda _3+1
    sta y_cur+1,y
  //SEG64 [40] (byte~) point_init::$4 ← (byte) point_init::point_idx#0 >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ point_init::$4 ] ( main:2::point_init:20 [ main::i#2 point_init::$4 ] ) -- vbuz1=vbuz2_ror_1 
    lda point_idx
    lsr
    sta _4
  //SEG65 [41] *((const byte[4]) delay#0 + (byte~) point_init::$4) ← (const byte) DELAY#0 [ ] ( main:2::point_init:20 [ main::i#2 ] ) -- pbuc1_derefidx_vbuz1=vbuc2 
    ldy _4
    lda #DELAY
    sta delay,y
    jmp breturn
  //SEG66 point_init::@return
  breturn:
  //SEG67 [42] return  [ ] ( main:2::point_init:20 [ main::i#2 ] )
    rts
}
//SEG68 screen_fill
screen_fill: {
    .const ch = $10
    .label screen = 4
    .label x = 6
    .label y = 3
  //SEG69 [44] phi from screen_fill to screen_fill::@1 [phi:screen_fill->screen_fill::@1]
  b1_from_screen_fill:
  //SEG70 [44] phi (byte) screen_fill::y#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:screen_fill->screen_fill::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta y
  //SEG71 [44] phi (byte*) screen_fill::screen#3 = (const byte*) SCREEN#0 [phi:screen_fill->screen_fill::@1#1] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta screen
    lda #>SCREEN
    sta screen+1
    jmp b1
  //SEG72 [44] phi from screen_fill::@3 to screen_fill::@1 [phi:screen_fill::@3->screen_fill::@1]
  b1_from_b3:
  //SEG73 [44] phi (byte) screen_fill::y#4 = (byte) screen_fill::y#1 [phi:screen_fill::@3->screen_fill::@1#0] -- register_copy 
  //SEG74 [44] phi (byte*) screen_fill::screen#3 = (byte*) screen_fill::screen#1 [phi:screen_fill::@3->screen_fill::@1#1] -- register_copy 
    jmp b1
  //SEG75 screen_fill::@1
  b1:
  //SEG76 [45] phi from screen_fill::@1 to screen_fill::@2 [phi:screen_fill::@1->screen_fill::@2]
  b2_from_b1:
  //SEG77 [45] phi (byte) screen_fill::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:screen_fill::@1->screen_fill::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta x
  //SEG78 [45] phi (byte*) screen_fill::screen#2 = (byte*) screen_fill::screen#3 [phi:screen_fill::@1->screen_fill::@2#1] -- register_copy 
    jmp b2
  //SEG79 [45] phi from screen_fill::@2 to screen_fill::@2 [phi:screen_fill::@2->screen_fill::@2]
  b2_from_b2:
  //SEG80 [45] phi (byte) screen_fill::x#2 = (byte) screen_fill::x#1 [phi:screen_fill::@2->screen_fill::@2#0] -- register_copy 
  //SEG81 [45] phi (byte*) screen_fill::screen#2 = (byte*) screen_fill::screen#1 [phi:screen_fill::@2->screen_fill::@2#1] -- register_copy 
    jmp b2
  //SEG82 screen_fill::@2
  b2:
  //SEG83 [46] *((byte*) screen_fill::screen#2) ← (const byte) screen_fill::ch#0 [ screen_fill::y#4 screen_fill::screen#2 screen_fill::x#2 ] ( main:2::screen_fill:17 [ screen_fill::y#4 screen_fill::screen#2 screen_fill::x#2 ] ) -- _deref_pbuz1=vbuc1 
    lda #ch
    ldy #0
    sta (screen),y
  //SEG84 [47] (byte*) screen_fill::screen#1 ← ++ (byte*) screen_fill::screen#2 [ screen_fill::y#4 screen_fill::screen#1 screen_fill::x#2 ] ( main:2::screen_fill:17 [ screen_fill::y#4 screen_fill::screen#1 screen_fill::x#2 ] ) -- pbuz1=_inc_pbuz1 
    inc screen
    bne !+
    inc screen+1
  !:
  //SEG85 [48] (byte) screen_fill::x#1 ← ++ (byte) screen_fill::x#2 [ screen_fill::y#4 screen_fill::screen#1 screen_fill::x#1 ] ( main:2::screen_fill:17 [ screen_fill::y#4 screen_fill::screen#1 screen_fill::x#1 ] ) -- vbuz1=_inc_vbuz1 
    inc x
  //SEG86 [49] if((byte) screen_fill::x#1!=(byte/signed byte/word/signed word/dword/signed dword) 40) goto screen_fill::@2 [ screen_fill::y#4 screen_fill::screen#1 screen_fill::x#1 ] ( main:2::screen_fill:17 [ screen_fill::y#4 screen_fill::screen#1 screen_fill::x#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda x
    cmp #$28
    bne b2_from_b2
    jmp b3
  //SEG87 screen_fill::@3
  b3:
  //SEG88 [50] (byte) screen_fill::y#1 ← ++ (byte) screen_fill::y#4 [ screen_fill::screen#1 screen_fill::y#1 ] ( main:2::screen_fill:17 [ screen_fill::screen#1 screen_fill::y#1 ] ) -- vbuz1=_inc_vbuz1 
    inc y
  //SEG89 [51] if((byte) screen_fill::y#1!=(byte/signed byte/word/signed word/dword/signed dword) 25) goto screen_fill::@1 [ screen_fill::screen#1 screen_fill::y#1 ] ( main:2::screen_fill:17 [ screen_fill::screen#1 screen_fill::y#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda y
    cmp #$19
    bne b1_from_b3
    jmp breturn
  //SEG90 screen_fill::@return
  breturn:
  //SEG91 [52] return  [ ] ( main:2::screen_fill:17 [ ] )
    rts
}
//SEG92 bitmap_clear
bitmap_clear: {
    .label bitmap = 8
    .label x = $a
    .label y = 7
    .label _3 = $24
  //SEG93 [53] (word~) bitmap_clear::$3 ← *((const byte[256]) bitmap_plot_yhi#0+(byte/signed byte/word/signed word/dword/signed dword) 0) w= *((const byte[256]) bitmap_plot_ylo#0+(byte/signed byte/word/signed word/dword/signed dword) 0) [ bitmap_clear::$3 ] ( main:2::bitmap_clear:15 [ bitmap_clear::$3 ] ) -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda bitmap_plot_ylo+0
    sta _3
    lda bitmap_plot_yhi+0
    sta _3+1
  //SEG94 [54] (byte*~) bitmap_clear::bitmap#5 ← (byte*)(word~) bitmap_clear::$3 [ bitmap_clear::bitmap#5 ] ( main:2::bitmap_clear:15 [ bitmap_clear::bitmap#5 ] ) -- pbuz1=pbuz2 
    lda _3
    sta bitmap
    lda _3+1
    sta bitmap+1
  //SEG95 [55] phi from bitmap_clear to bitmap_clear::@1 [phi:bitmap_clear->bitmap_clear::@1]
  b1_from_bitmap_clear:
  //SEG96 [55] phi (byte) bitmap_clear::y#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_clear->bitmap_clear::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta y
  //SEG97 [55] phi (byte*) bitmap_clear::bitmap#3 = (byte*~) bitmap_clear::bitmap#5 [phi:bitmap_clear->bitmap_clear::@1#1] -- register_copy 
    jmp b1
  //SEG98 [55] phi from bitmap_clear::@3 to bitmap_clear::@1 [phi:bitmap_clear::@3->bitmap_clear::@1]
  b1_from_b3:
  //SEG99 [55] phi (byte) bitmap_clear::y#4 = (byte) bitmap_clear::y#1 [phi:bitmap_clear::@3->bitmap_clear::@1#0] -- register_copy 
  //SEG100 [55] phi (byte*) bitmap_clear::bitmap#3 = (byte*) bitmap_clear::bitmap#1 [phi:bitmap_clear::@3->bitmap_clear::@1#1] -- register_copy 
    jmp b1
  //SEG101 bitmap_clear::@1
  b1:
  //SEG102 [56] phi from bitmap_clear::@1 to bitmap_clear::@2 [phi:bitmap_clear::@1->bitmap_clear::@2]
  b2_from_b1:
  //SEG103 [56] phi (byte) bitmap_clear::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_clear::@1->bitmap_clear::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta x
  //SEG104 [56] phi (byte*) bitmap_clear::bitmap#2 = (byte*) bitmap_clear::bitmap#3 [phi:bitmap_clear::@1->bitmap_clear::@2#1] -- register_copy 
    jmp b2
  //SEG105 [56] phi from bitmap_clear::@2 to bitmap_clear::@2 [phi:bitmap_clear::@2->bitmap_clear::@2]
  b2_from_b2:
  //SEG106 [56] phi (byte) bitmap_clear::x#2 = (byte) bitmap_clear::x#1 [phi:bitmap_clear::@2->bitmap_clear::@2#0] -- register_copy 
  //SEG107 [56] phi (byte*) bitmap_clear::bitmap#2 = (byte*) bitmap_clear::bitmap#1 [phi:bitmap_clear::@2->bitmap_clear::@2#1] -- register_copy 
    jmp b2
  //SEG108 bitmap_clear::@2
  b2:
  //SEG109 [57] *((byte*) bitmap_clear::bitmap#2) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ bitmap_clear::y#4 bitmap_clear::bitmap#2 bitmap_clear::x#2 ] ( main:2::bitmap_clear:15 [ bitmap_clear::y#4 bitmap_clear::bitmap#2 bitmap_clear::x#2 ] ) -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (bitmap),y
  //SEG110 [58] (byte*) bitmap_clear::bitmap#1 ← ++ (byte*) bitmap_clear::bitmap#2 [ bitmap_clear::y#4 bitmap_clear::bitmap#1 bitmap_clear::x#2 ] ( main:2::bitmap_clear:15 [ bitmap_clear::y#4 bitmap_clear::bitmap#1 bitmap_clear::x#2 ] ) -- pbuz1=_inc_pbuz1 
    inc bitmap
    bne !+
    inc bitmap+1
  !:
  //SEG111 [59] (byte) bitmap_clear::x#1 ← ++ (byte) bitmap_clear::x#2 [ bitmap_clear::y#4 bitmap_clear::bitmap#1 bitmap_clear::x#1 ] ( main:2::bitmap_clear:15 [ bitmap_clear::y#4 bitmap_clear::bitmap#1 bitmap_clear::x#1 ] ) -- vbuz1=_inc_vbuz1 
    inc x
  //SEG112 [60] if((byte) bitmap_clear::x#1!=(byte/word/signed word/dword/signed dword) 200) goto bitmap_clear::@2 [ bitmap_clear::y#4 bitmap_clear::bitmap#1 bitmap_clear::x#1 ] ( main:2::bitmap_clear:15 [ bitmap_clear::y#4 bitmap_clear::bitmap#1 bitmap_clear::x#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda x
    cmp #$c8
    bne b2_from_b2
    jmp b3
  //SEG113 bitmap_clear::@3
  b3:
  //SEG114 [61] (byte) bitmap_clear::y#1 ← ++ (byte) bitmap_clear::y#4 [ bitmap_clear::bitmap#1 bitmap_clear::y#1 ] ( main:2::bitmap_clear:15 [ bitmap_clear::bitmap#1 bitmap_clear::y#1 ] ) -- vbuz1=_inc_vbuz1 
    inc y
  //SEG115 [62] if((byte) bitmap_clear::y#1!=(byte/signed byte/word/signed word/dword/signed dword) 40) goto bitmap_clear::@1 [ bitmap_clear::bitmap#1 bitmap_clear::y#1 ] ( main:2::bitmap_clear:15 [ bitmap_clear::bitmap#1 bitmap_clear::y#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda y
    cmp #$28
    bne b1_from_b3
    jmp breturn
  //SEG116 bitmap_clear::@return
  breturn:
  //SEG117 [63] return  [ ] ( main:2::bitmap_clear:15 [ ] )
    rts
}
//SEG118 bitmap_init
bitmap_init: {
    .label _3 = $26
    .label _4 = $27
    .label _5 = $28
    .label _6 = $29
    .label _7 = $2a
    .label bits = $b
    .label x = $c
    .label y = $d
    .label yoffs = $e
  //SEG119 [65] phi from bitmap_init to bitmap_init::@1 [phi:bitmap_init->bitmap_init::@1]
  b1_from_bitmap_init:
  //SEG120 [65] phi (byte) bitmap_init::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_init->bitmap_init::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta x
  //SEG121 [65] phi (byte) bitmap_init::bits#3 = (byte/word/signed word/dword/signed dword) 128 [phi:bitmap_init->bitmap_init::@1#1] -- vbuz1=vbuc1 
    lda #$80
    sta bits
    jmp b1
  //SEG122 [65] phi from bitmap_init::@2 to bitmap_init::@1 [phi:bitmap_init::@2->bitmap_init::@1]
  b1_from_b2:
  //SEG123 [65] phi (byte) bitmap_init::x#2 = (byte) bitmap_init::x#1 [phi:bitmap_init::@2->bitmap_init::@1#0] -- register_copy 
  //SEG124 [65] phi (byte) bitmap_init::bits#3 = (byte) bitmap_init::bits#4 [phi:bitmap_init::@2->bitmap_init::@1#1] -- register_copy 
    jmp b1
  //SEG125 bitmap_init::@1
  b1:
  //SEG126 [66] *((const byte[256]) bitmap_plot_bit#0 + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3 [ bitmap_init::bits#3 bitmap_init::x#2 ] ( main:2::bitmap_init:13 [ bitmap_init::bits#3 bitmap_init::x#2 ] ) -- pbuc1_derefidx_vbuz1=vbuz2 
    lda bits
    ldy x
    sta bitmap_plot_bit,y
  //SEG127 [67] (byte) bitmap_init::bits#1 ← (byte) bitmap_init::bits#3 >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ bitmap_init::x#2 bitmap_init::bits#1 ] ( main:2::bitmap_init:13 [ bitmap_init::x#2 bitmap_init::bits#1 ] ) -- vbuz1=vbuz1_ror_1 
    lsr bits
  //SEG128 [68] if((byte) bitmap_init::bits#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@10 [ bitmap_init::x#2 bitmap_init::bits#1 ] ( main:2::bitmap_init:13 [ bitmap_init::x#2 bitmap_init::bits#1 ] ) -- vbuz1_neq_0_then_la1 
    lda bits
    bne b10_from_b1
  //SEG129 [69] phi from bitmap_init::@1 to bitmap_init::@2 [phi:bitmap_init::@1->bitmap_init::@2]
  b2_from_b1:
  //SEG130 [69] phi (byte) bitmap_init::bits#4 = (byte/word/signed word/dword/signed dword) 128 [phi:bitmap_init::@1->bitmap_init::@2#0] -- vbuz1=vbuc1 
    lda #$80
    sta bits
    jmp b2
  //SEG131 bitmap_init::@2
  b2:
  //SEG132 [70] (byte) bitmap_init::x#1 ← ++ (byte) bitmap_init::x#2 [ bitmap_init::bits#4 bitmap_init::x#1 ] ( main:2::bitmap_init:13 [ bitmap_init::bits#4 bitmap_init::x#1 ] ) -- vbuz1=_inc_vbuz1 
    inc x
  //SEG133 [71] if((byte) bitmap_init::x#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@1 [ bitmap_init::bits#4 bitmap_init::x#1 ] ( main:2::bitmap_init:13 [ bitmap_init::bits#4 bitmap_init::x#1 ] ) -- vbuz1_neq_0_then_la1 
    lda x
    bne b1_from_b2
  //SEG134 [72] phi from bitmap_init::@2 to bitmap_init::@3 [phi:bitmap_init::@2->bitmap_init::@3]
  b3_from_b2:
  //SEG135 [72] phi (byte*) bitmap_init::yoffs#2 = (const byte*) BITMAP#0 [phi:bitmap_init::@2->bitmap_init::@3#0] -- pbuz1=pbuc1 
    lda #<BITMAP
    sta yoffs
    lda #>BITMAP
    sta yoffs+1
  //SEG136 [72] phi (byte) bitmap_init::y#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_init::@2->bitmap_init::@3#1] -- vbuz1=vbuc1 
    lda #0
    sta y
    jmp b3
  //SEG137 [72] phi from bitmap_init::@4 to bitmap_init::@3 [phi:bitmap_init::@4->bitmap_init::@3]
  b3_from_b4:
  //SEG138 [72] phi (byte*) bitmap_init::yoffs#2 = (byte*) bitmap_init::yoffs#4 [phi:bitmap_init::@4->bitmap_init::@3#0] -- register_copy 
  //SEG139 [72] phi (byte) bitmap_init::y#2 = (byte) bitmap_init::y#1 [phi:bitmap_init::@4->bitmap_init::@3#1] -- register_copy 
    jmp b3
  //SEG140 bitmap_init::@3
  b3:
  //SEG141 [73] (byte~) bitmap_init::$3 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$3 ] ( main:2::bitmap_init:13 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$3 ] ) -- vbuz1=vbuz2_band_vbuc1 
    lda #7
    and y
    sta _3
  //SEG142 [74] (byte~) bitmap_init::$4 ← < (byte*) bitmap_init::yoffs#2 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$3 bitmap_init::$4 ] ( main:2::bitmap_init:13 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$3 bitmap_init::$4 ] ) -- vbuz1=_lo_pbuz2 
    lda yoffs
    sta _4
  //SEG143 [75] (byte~) bitmap_init::$5 ← (byte~) bitmap_init::$3 | (byte~) bitmap_init::$4 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$5 ] ( main:2::bitmap_init:13 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$5 ] ) -- vbuz1=vbuz2_bor_vbuz3 
    lda _3
    ora _4
    sta _5
  //SEG144 [76] *((const byte[256]) bitmap_plot_ylo#0 + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$5 [ bitmap_init::y#2 bitmap_init::yoffs#2 ] ( main:2::bitmap_init:13 [ bitmap_init::y#2 bitmap_init::yoffs#2 ] ) -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _5
    ldy y
    sta bitmap_plot_ylo,y
  //SEG145 [77] (byte~) bitmap_init::$6 ← > (byte*) bitmap_init::yoffs#2 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$6 ] ( main:2::bitmap_init:13 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$6 ] ) -- vbuz1=_hi_pbuz2 
    lda yoffs+1
    sta _6
  //SEG146 [78] *((const byte[256]) bitmap_plot_yhi#0 + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$6 [ bitmap_init::y#2 bitmap_init::yoffs#2 ] ( main:2::bitmap_init:13 [ bitmap_init::y#2 bitmap_init::yoffs#2 ] ) -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _6
    ldy y
    sta bitmap_plot_yhi,y
  //SEG147 [79] (byte~) bitmap_init::$7 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$7 ] ( main:2::bitmap_init:13 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$7 ] ) -- vbuz1=vbuz2_band_vbuc1 
    lda #7
    and y
    sta _7
  //SEG148 [80] if((byte~) bitmap_init::$7!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto bitmap_init::@4 [ bitmap_init::y#2 bitmap_init::yoffs#2 ] ( main:2::bitmap_init:13 [ bitmap_init::y#2 bitmap_init::yoffs#2 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda _7
    cmp #7
    bne b4_from_b3
    jmp b7
  //SEG149 bitmap_init::@7
  b7:
  //SEG150 [81] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (byte/signed byte/word/signed word/dword/signed dword) 40*(byte/signed byte/word/signed word/dword/signed dword) 8 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] ( main:2::bitmap_init:13 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] ) -- pbuz1=pbuz1_plus_vwuc1 
    clc
    lda yoffs
    adc #<$28*8
    sta yoffs
    lda yoffs+1
    adc #>$28*8
    sta yoffs+1
  //SEG151 [82] phi from bitmap_init::@3 bitmap_init::@7 to bitmap_init::@4 [phi:bitmap_init::@3/bitmap_init::@7->bitmap_init::@4]
  b4_from_b3:
  b4_from_b7:
  //SEG152 [82] phi (byte*) bitmap_init::yoffs#4 = (byte*) bitmap_init::yoffs#2 [phi:bitmap_init::@3/bitmap_init::@7->bitmap_init::@4#0] -- register_copy 
    jmp b4
  //SEG153 bitmap_init::@4
  b4:
  //SEG154 [83] (byte) bitmap_init::y#1 ← ++ (byte) bitmap_init::y#2 [ bitmap_init::y#1 bitmap_init::yoffs#4 ] ( main:2::bitmap_init:13 [ bitmap_init::y#1 bitmap_init::yoffs#4 ] ) -- vbuz1=_inc_vbuz1 
    inc y
  //SEG155 [84] if((byte) bitmap_init::y#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@3 [ bitmap_init::y#1 bitmap_init::yoffs#4 ] ( main:2::bitmap_init:13 [ bitmap_init::y#1 bitmap_init::yoffs#4 ] ) -- vbuz1_neq_0_then_la1 
    lda y
    bne b3_from_b4
    jmp breturn
  //SEG156 bitmap_init::@return
  breturn:
  //SEG157 [85] return  [ ] ( main:2::bitmap_init:13 [ ] )
    rts
  //SEG158 [86] phi from bitmap_init::@1 to bitmap_init::@10 [phi:bitmap_init::@1->bitmap_init::@10]
  b10_from_b1:
    jmp b10
  //SEG159 bitmap_init::@10
  b10:
  //SEG160 [69] phi from bitmap_init::@10 to bitmap_init::@2 [phi:bitmap_init::@10->bitmap_init::@2]
  b2_from_b10:
  //SEG161 [69] phi (byte) bitmap_init::bits#4 = (byte) bitmap_init::bits#1 [phi:bitmap_init::@10->bitmap_init::@2#0] -- register_copy 
    jmp b2
}
  x_start: .word $a, $14, $1e, $1e
  y_start: .byte $a, $a, $a, $14
  x_cur: .fill 8, 0
  y_cur: .fill 8, 0
  delay: .fill 4, 0
  bitmap_plot_ylo: .fill $100, 0
  bitmap_plot_yhi: .fill $100, 0
  bitmap_plot_bit: .fill $100, 0

REGISTER UPLIFT POTENTIAL REGISTERS
Equivalence Class zp ZP_BYTE:39 [ bitmap_init::$4 ] has ALU potential.
Statement [5] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [6] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [7] *((const byte*) D011#0) ← (const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [8] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [10] *((const byte*) CIA2_PORT_A#0) ← (const byte) main::vicSelectGfxBank1_toDd001_return#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [12] *((const byte*) D018#0) ← (const byte) main::toD0181_return#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [22] (word) bitmap_plot::x#0 ← *((const word[4]) x_start#0 + (byte) main::i#2) [ main::i#2 main::$9 bitmap_plot::x#0 ] ( main:2 [ main::i#2 main::$9 bitmap_plot::x#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:17 [ main::$9 ]
Statement [28] (word~) bitmap_plot::$3 ← *((const byte[256]) bitmap_plot_yhi#0 + (byte) bitmap_plot::y#0) w= *((const byte[256]) bitmap_plot_ylo#0 + (byte) bitmap_plot::y#0) [ bitmap_plot::x#0 bitmap_plot::$3 ] ( main:2::bitmap_plot:24 [ main::i#2 bitmap_plot::x#0 bitmap_plot::$3 ] ) always clobbers reg byte a 
Statement [29] (word~) bitmap_plot::$1 ← (word) bitmap_plot::x#0 & (word/dword/signed dword) 65528 [ bitmap_plot::x#0 bitmap_plot::$3 bitmap_plot::$1 ] ( main:2::bitmap_plot:24 [ main::i#2 bitmap_plot::x#0 bitmap_plot::$3 bitmap_plot::$1 ] ) always clobbers reg byte a 
Statement [30] (byte*) bitmap_plot::plotter#1 ← (byte*)(word~) bitmap_plot::$3 + (word~) bitmap_plot::$1 [ bitmap_plot::x#0 bitmap_plot::plotter#1 ] ( main:2::bitmap_plot:24 [ main::i#2 bitmap_plot::x#0 bitmap_plot::plotter#1 ] ) always clobbers reg byte a 
Statement [31] (byte~) bitmap_plot::$2 ← < (word) bitmap_plot::x#0 [ bitmap_plot::plotter#1 bitmap_plot::$2 ] ( main:2::bitmap_plot:24 [ main::i#2 bitmap_plot::plotter#1 bitmap_plot::$2 ] ) always clobbers reg byte a 
Statement [32] *((byte*) bitmap_plot::plotter#1) ← *((byte*) bitmap_plot::plotter#1) | *((const byte[256]) bitmap_plot_bit#0 + (byte~) bitmap_plot::$2) [ ] ( main:2::bitmap_plot:24 [ main::i#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Statement [34] (word~) point_init::$0 ← *((const word[4]) x_start#0 + (byte) point_init::point_idx#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 [ point_init::point_idx#0 point_init::$0 ] ( main:2::point_init:20 [ main::i#2 point_init::point_idx#0 point_init::$0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:16 [ point_init::point_idx#0 ]
Statement [35] *((const word[4]) x_cur#0 + (byte) point_init::point_idx#0) ← (word~) point_init::$0 [ point_init::point_idx#0 ] ( main:2::point_init:20 [ main::i#2 point_init::point_idx#0 ] ) always clobbers reg byte a 
Statement [36] (byte~) point_init::$1 ← (byte) point_init::point_idx#0 >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ point_init::point_idx#0 point_init::$1 ] ( main:2::point_init:20 [ main::i#2 point_init::point_idx#0 point_init::$1 ] ) always clobbers reg byte a 
Statement [37] (word~) point_init::$2 ← ((word)) *((const byte[4]) y_start#0 + (byte~) point_init::$1) [ point_init::point_idx#0 point_init::$2 ] ( main:2::point_init:20 [ main::i#2 point_init::point_idx#0 point_init::$2 ] ) always clobbers reg byte a 
Statement [38] (word~) point_init::$3 ← (word~) point_init::$2 << (byte/signed byte/word/signed word/dword/signed dword) 4 [ point_init::point_idx#0 point_init::$3 ] ( main:2::point_init:20 [ main::i#2 point_init::point_idx#0 point_init::$3 ] ) always clobbers reg byte a 
Statement [39] *((const word[4]) y_cur#0 + (byte) point_init::point_idx#0) ← (word~) point_init::$3 [ point_init::point_idx#0 ] ( main:2::point_init:20 [ main::i#2 point_init::point_idx#0 ] ) always clobbers reg byte a 
Statement [40] (byte~) point_init::$4 ← (byte) point_init::point_idx#0 >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ point_init::$4 ] ( main:2::point_init:20 [ main::i#2 point_init::$4 ] ) always clobbers reg byte a 
Statement [41] *((const byte[4]) delay#0 + (byte~) point_init::$4) ← (const byte) DELAY#0 [ ] ( main:2::point_init:20 [ main::i#2 ] ) always clobbers reg byte a 
Statement [46] *((byte*) screen_fill::screen#2) ← (const byte) screen_fill::ch#0 [ screen_fill::y#4 screen_fill::screen#2 screen_fill::x#2 ] ( main:2::screen_fill:17 [ screen_fill::y#4 screen_fill::screen#2 screen_fill::x#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:3 [ screen_fill::y#4 screen_fill::y#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:3 [ screen_fill::y#4 screen_fill::y#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:6 [ screen_fill::x#2 screen_fill::x#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:6 [ screen_fill::x#2 screen_fill::x#1 ]
Statement [53] (word~) bitmap_clear::$3 ← *((const byte[256]) bitmap_plot_yhi#0+(byte/signed byte/word/signed word/dword/signed dword) 0) w= *((const byte[256]) bitmap_plot_ylo#0+(byte/signed byte/word/signed word/dword/signed dword) 0) [ bitmap_clear::$3 ] ( main:2::bitmap_clear:15 [ bitmap_clear::$3 ] ) always clobbers reg byte a 
Statement [54] (byte*~) bitmap_clear::bitmap#5 ← (byte*)(word~) bitmap_clear::$3 [ bitmap_clear::bitmap#5 ] ( main:2::bitmap_clear:15 [ bitmap_clear::bitmap#5 ] ) always clobbers reg byte a 
Statement [57] *((byte*) bitmap_clear::bitmap#2) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ bitmap_clear::y#4 bitmap_clear::bitmap#2 bitmap_clear::x#2 ] ( main:2::bitmap_clear:15 [ bitmap_clear::y#4 bitmap_clear::bitmap#2 bitmap_clear::x#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:7 [ bitmap_clear::y#4 bitmap_clear::y#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:7 [ bitmap_clear::y#4 bitmap_clear::y#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:10 [ bitmap_clear::x#2 bitmap_clear::x#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:10 [ bitmap_clear::x#2 bitmap_clear::x#1 ]
Statement [73] (byte~) bitmap_init::$3 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$3 ] ( main:2::bitmap_init:13 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$3 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:13 [ bitmap_init::y#2 bitmap_init::y#1 ]
Statement [79] (byte~) bitmap_init::$7 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$7 ] ( main:2::bitmap_init:13 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$7 ] ) always clobbers reg byte a 
Statement [81] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (byte/signed byte/word/signed word/dword/signed dword) 40*(byte/signed byte/word/signed word/dword/signed dword) 8 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] ( main:2::bitmap_init:13 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] ) always clobbers reg byte a 
Statement [5] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [6] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [7] *((const byte*) D011#0) ← (const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [8] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [10] *((const byte*) CIA2_PORT_A#0) ← (const byte) main::vicSelectGfxBank1_toDd001_return#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [12] *((const byte*) D018#0) ← (const byte) main::toD0181_return#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [21] (byte~) main::$9 ← (byte) main::i#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ main::i#2 main::$9 ] ( main:2 [ main::i#2 main::$9 ] ) always clobbers reg byte a 
Statement [22] (word) bitmap_plot::x#0 ← *((const word[4]) x_start#0 + (byte) main::i#2) [ main::i#2 main::$9 bitmap_plot::x#0 ] ( main:2 [ main::i#2 main::$9 bitmap_plot::x#0 ] ) always clobbers reg byte a 
Statement [28] (word~) bitmap_plot::$3 ← *((const byte[256]) bitmap_plot_yhi#0 + (byte) bitmap_plot::y#0) w= *((const byte[256]) bitmap_plot_ylo#0 + (byte) bitmap_plot::y#0) [ bitmap_plot::x#0 bitmap_plot::$3 ] ( main:2::bitmap_plot:24 [ main::i#2 bitmap_plot::x#0 bitmap_plot::$3 ] ) always clobbers reg byte a 
Statement [29] (word~) bitmap_plot::$1 ← (word) bitmap_plot::x#0 & (word/dword/signed dword) 65528 [ bitmap_plot::x#0 bitmap_plot::$3 bitmap_plot::$1 ] ( main:2::bitmap_plot:24 [ main::i#2 bitmap_plot::x#0 bitmap_plot::$3 bitmap_plot::$1 ] ) always clobbers reg byte a 
Statement [30] (byte*) bitmap_plot::plotter#1 ← (byte*)(word~) bitmap_plot::$3 + (word~) bitmap_plot::$1 [ bitmap_plot::x#0 bitmap_plot::plotter#1 ] ( main:2::bitmap_plot:24 [ main::i#2 bitmap_plot::x#0 bitmap_plot::plotter#1 ] ) always clobbers reg byte a 
Statement [31] (byte~) bitmap_plot::$2 ← < (word) bitmap_plot::x#0 [ bitmap_plot::plotter#1 bitmap_plot::$2 ] ( main:2::bitmap_plot:24 [ main::i#2 bitmap_plot::plotter#1 bitmap_plot::$2 ] ) always clobbers reg byte a 
Statement [32] *((byte*) bitmap_plot::plotter#1) ← *((byte*) bitmap_plot::plotter#1) | *((const byte[256]) bitmap_plot_bit#0 + (byte~) bitmap_plot::$2) [ ] ( main:2::bitmap_plot:24 [ main::i#2 ] ) always clobbers reg byte a reg byte y 
Statement [34] (word~) point_init::$0 ← *((const word[4]) x_start#0 + (byte) point_init::point_idx#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 [ point_init::point_idx#0 point_init::$0 ] ( main:2::point_init:20 [ main::i#2 point_init::point_idx#0 point_init::$0 ] ) always clobbers reg byte a 
Statement [35] *((const word[4]) x_cur#0 + (byte) point_init::point_idx#0) ← (word~) point_init::$0 [ point_init::point_idx#0 ] ( main:2::point_init:20 [ main::i#2 point_init::point_idx#0 ] ) always clobbers reg byte a 
Statement [36] (byte~) point_init::$1 ← (byte) point_init::point_idx#0 >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ point_init::point_idx#0 point_init::$1 ] ( main:2::point_init:20 [ main::i#2 point_init::point_idx#0 point_init::$1 ] ) always clobbers reg byte a 
Statement [37] (word~) point_init::$2 ← ((word)) *((const byte[4]) y_start#0 + (byte~) point_init::$1) [ point_init::point_idx#0 point_init::$2 ] ( main:2::point_init:20 [ main::i#2 point_init::point_idx#0 point_init::$2 ] ) always clobbers reg byte a 
Statement [38] (word~) point_init::$3 ← (word~) point_init::$2 << (byte/signed byte/word/signed word/dword/signed dword) 4 [ point_init::point_idx#0 point_init::$3 ] ( main:2::point_init:20 [ main::i#2 point_init::point_idx#0 point_init::$3 ] ) always clobbers reg byte a 
Statement [39] *((const word[4]) y_cur#0 + (byte) point_init::point_idx#0) ← (word~) point_init::$3 [ point_init::point_idx#0 ] ( main:2::point_init:20 [ main::i#2 point_init::point_idx#0 ] ) always clobbers reg byte a 
Statement [40] (byte~) point_init::$4 ← (byte) point_init::point_idx#0 >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ point_init::$4 ] ( main:2::point_init:20 [ main::i#2 point_init::$4 ] ) always clobbers reg byte a 
Statement [41] *((const byte[4]) delay#0 + (byte~) point_init::$4) ← (const byte) DELAY#0 [ ] ( main:2::point_init:20 [ main::i#2 ] ) always clobbers reg byte a 
Statement [46] *((byte*) screen_fill::screen#2) ← (const byte) screen_fill::ch#0 [ screen_fill::y#4 screen_fill::screen#2 screen_fill::x#2 ] ( main:2::screen_fill:17 [ screen_fill::y#4 screen_fill::screen#2 screen_fill::x#2 ] ) always clobbers reg byte a reg byte y 
Statement [53] (word~) bitmap_clear::$3 ← *((const byte[256]) bitmap_plot_yhi#0+(byte/signed byte/word/signed word/dword/signed dword) 0) w= *((const byte[256]) bitmap_plot_ylo#0+(byte/signed byte/word/signed word/dword/signed dword) 0) [ bitmap_clear::$3 ] ( main:2::bitmap_clear:15 [ bitmap_clear::$3 ] ) always clobbers reg byte a 
Statement [54] (byte*~) bitmap_clear::bitmap#5 ← (byte*)(word~) bitmap_clear::$3 [ bitmap_clear::bitmap#5 ] ( main:2::bitmap_clear:15 [ bitmap_clear::bitmap#5 ] ) always clobbers reg byte a 
Statement [57] *((byte*) bitmap_clear::bitmap#2) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ bitmap_clear::y#4 bitmap_clear::bitmap#2 bitmap_clear::x#2 ] ( main:2::bitmap_clear:15 [ bitmap_clear::y#4 bitmap_clear::bitmap#2 bitmap_clear::x#2 ] ) always clobbers reg byte a reg byte y 
Statement [73] (byte~) bitmap_init::$3 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$3 ] ( main:2::bitmap_init:13 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$3 ] ) always clobbers reg byte a 
Statement [79] (byte~) bitmap_init::$7 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$7 ] ( main:2::bitmap_init:13 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$7 ] ) always clobbers reg byte a 
Statement [81] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (byte/signed byte/word/signed word/dword/signed dword) 40*(byte/signed byte/word/signed word/dword/signed dword) 8 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] ( main:2::bitmap_init:13 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ main::i#2 main::i#1 ] : zp ZP_BYTE:2 , reg byte x , 
Potential registers zp ZP_BYTE:3 [ screen_fill::y#4 screen_fill::y#1 ] : zp ZP_BYTE:3 , reg byte x , 
Potential registers zp ZP_WORD:4 [ screen_fill::screen#2 screen_fill::screen#3 screen_fill::screen#1 ] : zp ZP_WORD:4 , 
Potential registers zp ZP_BYTE:6 [ screen_fill::x#2 screen_fill::x#1 ] : zp ZP_BYTE:6 , reg byte x , 
Potential registers zp ZP_BYTE:7 [ bitmap_clear::y#4 bitmap_clear::y#1 ] : zp ZP_BYTE:7 , reg byte x , 
Potential registers zp ZP_WORD:8 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ] : zp ZP_WORD:8 , 
Potential registers zp ZP_BYTE:10 [ bitmap_clear::x#2 bitmap_clear::x#1 ] : zp ZP_BYTE:10 , reg byte x , 
Potential registers zp ZP_BYTE:11 [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ] : zp ZP_BYTE:11 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:12 [ bitmap_init::x#2 bitmap_init::x#1 ] : zp ZP_BYTE:12 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:13 [ bitmap_init::y#2 bitmap_init::y#1 ] : zp ZP_BYTE:13 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:14 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] : zp ZP_WORD:14 , 
Potential registers zp ZP_BYTE:16 [ point_init::point_idx#0 ] : zp ZP_BYTE:16 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:17 [ main::$9 ] : zp ZP_BYTE:17 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:18 [ bitmap_plot::x#0 ] : zp ZP_WORD:18 , 
Potential registers zp ZP_BYTE:20 [ bitmap_plot::y#0 ] : zp ZP_BYTE:20 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:21 [ bitmap_plot::$3 ] : zp ZP_WORD:21 , 
Potential registers zp ZP_WORD:23 [ bitmap_plot::$1 ] : zp ZP_WORD:23 , 
Potential registers zp ZP_WORD:25 [ bitmap_plot::plotter#1 ] : zp ZP_WORD:25 , 
Potential registers zp ZP_BYTE:27 [ bitmap_plot::$2 ] : zp ZP_BYTE:27 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:28 [ point_init::$0 ] : zp ZP_WORD:28 , 
Potential registers zp ZP_BYTE:30 [ point_init::$1 ] : zp ZP_BYTE:30 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:31 [ point_init::$2 ] : zp ZP_WORD:31 , 
Potential registers zp ZP_WORD:33 [ point_init::$3 ] : zp ZP_WORD:33 , 
Potential registers zp ZP_BYTE:35 [ point_init::$4 ] : zp ZP_BYTE:35 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:36 [ bitmap_clear::$3 ] : zp ZP_WORD:36 , 
Potential registers zp ZP_BYTE:38 [ bitmap_init::$3 ] : zp ZP_BYTE:38 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:39 [ bitmap_init::$4 ] : zp ZP_BYTE:39 , reg byte a , reg byte x , reg byte y , reg byte alu , 
Potential registers zp ZP_BYTE:40 [ bitmap_init::$5 ] : zp ZP_BYTE:40 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:41 [ bitmap_init::$6 ] : zp ZP_BYTE:41 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:42 [ bitmap_init::$7 ] : zp ZP_BYTE:42 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [bitmap_clear] 227.6: zp ZP_WORD:8 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ] 218.83: zp ZP_BYTE:10 [ bitmap_clear::x#2 bitmap_clear::x#1 ] 20.17: zp ZP_BYTE:7 [ bitmap_clear::y#4 bitmap_clear::y#1 ] 2: zp ZP_WORD:36 [ bitmap_clear::$3 ] 
Uplift Scope [screen_fill] 221.6: zp ZP_WORD:4 [ screen_fill::screen#2 screen_fill::screen#3 screen_fill::screen#1 ] 218.83: zp ZP_BYTE:6 [ screen_fill::x#2 screen_fill::x#1 ] 20.17: zp ZP_BYTE:3 [ screen_fill::y#4 screen_fill::y#1 ] 
Uplift Scope [bitmap_init] 39.11: zp ZP_WORD:14 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] 34.83: zp ZP_BYTE:11 [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ] 22.5: zp ZP_BYTE:13 [ bitmap_init::y#2 bitmap_init::y#1 ] 22: zp ZP_BYTE:12 [ bitmap_init::x#2 bitmap_init::x#1 ] 22: zp ZP_BYTE:39 [ bitmap_init::$4 ] 22: zp ZP_BYTE:40 [ bitmap_init::$5 ] 22: zp ZP_BYTE:41 [ bitmap_init::$6 ] 22: zp ZP_BYTE:42 [ bitmap_init::$7 ] 11: zp ZP_BYTE:38 [ bitmap_init::$3 ] 
Uplift Scope [main] 24.36: zp ZP_BYTE:2 [ main::i#2 main::i#1 ] 11: zp ZP_BYTE:17 [ main::$9 ] 
Uplift Scope [bitmap_plot] 15: zp ZP_BYTE:20 [ bitmap_plot::y#0 ] 4: zp ZP_WORD:23 [ bitmap_plot::$1 ] 4: zp ZP_BYTE:27 [ bitmap_plot::$2 ] 3: zp ZP_WORD:18 [ bitmap_plot::x#0 ] 3: zp ZP_WORD:25 [ bitmap_plot::plotter#1 ] 1: zp ZP_WORD:21 [ bitmap_plot::$3 ] 
Uplift Scope [point_init] 4: zp ZP_WORD:28 [ point_init::$0 ] 4: zp ZP_BYTE:30 [ point_init::$1 ] 4: zp ZP_WORD:31 [ point_init::$2 ] 4: zp ZP_WORD:33 [ point_init::$3 ] 4: zp ZP_BYTE:35 [ point_init::$4 ] 3: zp ZP_BYTE:16 [ point_init::point_idx#0 ] 
Uplift Scope [] 

Uplifting [bitmap_clear] best 12881 combination zp ZP_WORD:8 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ] reg byte x [ bitmap_clear::x#2 bitmap_clear::x#1 ] zp ZP_BYTE:7 [ bitmap_clear::y#4 bitmap_clear::y#1 ] zp ZP_WORD:36 [ bitmap_clear::$3 ] 
Uplifting [screen_fill] best 11981 combination zp ZP_WORD:4 [ screen_fill::screen#2 screen_fill::screen#3 screen_fill::screen#1 ] reg byte x [ screen_fill::x#2 screen_fill::x#1 ] zp ZP_BYTE:3 [ screen_fill::y#4 screen_fill::y#1 ] 
Uplifting [bitmap_init] best 11541 combination zp ZP_WORD:14 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] reg byte a [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ] reg byte x [ bitmap_init::y#2 bitmap_init::y#1 ] reg byte x [ bitmap_init::x#2 bitmap_init::x#1 ] reg byte a [ bitmap_init::$4 ] zp ZP_BYTE:40 [ bitmap_init::$5 ] zp ZP_BYTE:41 [ bitmap_init::$6 ] zp ZP_BYTE:42 [ bitmap_init::$7 ] zp ZP_BYTE:38 [ bitmap_init::$3 ] 
Limited combination testing to 100 combinations of 61440 possible.
Uplifting [main] best 11311 combination reg byte x [ main::i#2 main::i#1 ] reg byte y [ main::$9 ] 
Uplifting [bitmap_plot] best 11276 combination reg byte a [ bitmap_plot::y#0 ] zp ZP_WORD:23 [ bitmap_plot::$1 ] reg byte a [ bitmap_plot::$2 ] zp ZP_WORD:18 [ bitmap_plot::x#0 ] zp ZP_WORD:25 [ bitmap_plot::plotter#1 ] zp ZP_WORD:21 [ bitmap_plot::$3 ] 
Uplifting [point_init] best 11227 combination zp ZP_WORD:28 [ point_init::$0 ] reg byte a [ point_init::$1 ] zp ZP_WORD:31 [ point_init::$2 ] zp ZP_WORD:33 [ point_init::$3 ] reg byte a [ point_init::$4 ] reg byte x [ point_init::point_idx#0 ] 
Uplifting [] best 11227 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:40 [ bitmap_init::$5 ]
Uplifting [bitmap_init] best 11167 combination reg byte a [ bitmap_init::$5 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:41 [ bitmap_init::$6 ]
Uplifting [bitmap_init] best 11107 combination reg byte a [ bitmap_init::$6 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:42 [ bitmap_init::$7 ]
Uplifting [bitmap_init] best 11047 combination reg byte a [ bitmap_init::$7 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:3 [ screen_fill::y#4 screen_fill::y#1 ]
Uplifting [screen_fill] best 11047 combination zp ZP_BYTE:3 [ screen_fill::y#4 screen_fill::y#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:7 [ bitmap_clear::y#4 bitmap_clear::y#1 ]
Uplifting [bitmap_clear] best 11047 combination zp ZP_BYTE:7 [ bitmap_clear::y#4 bitmap_clear::y#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:38 [ bitmap_init::$3 ]
Uplifting [bitmap_init] best 11047 combination zp ZP_BYTE:38 [ bitmap_init::$3 ] 
Coalescing zero page register with common assignment [ zp ZP_WORD:8 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ] ] with [ zp ZP_WORD:36 [ bitmap_clear::$3 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:21 [ bitmap_plot::$3 ] ] with [ zp ZP_WORD:25 [ bitmap_plot::plotter#1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:31 [ point_init::$2 ] ] with [ zp ZP_WORD:33 [ point_init::$3 ] ] - score: 1
Coalescing zero page register [ zp ZP_BYTE:3 [ screen_fill::y#4 screen_fill::y#1 ] ] with [ zp ZP_BYTE:7 [ bitmap_clear::y#4 bitmap_clear::y#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:3 [ screen_fill::y#4 screen_fill::y#1 bitmap_clear::y#4 bitmap_clear::y#1 ] ] with [ zp ZP_BYTE:38 [ bitmap_init::$3 ] ]
Coalescing zero page register [ zp ZP_WORD:4 [ screen_fill::screen#2 screen_fill::screen#3 screen_fill::screen#1 ] ] with [ zp ZP_WORD:8 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::$3 ] ]
Coalescing zero page register [ zp ZP_WORD:4 [ screen_fill::screen#2 screen_fill::screen#3 screen_fill::screen#1 bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::$3 ] ] with [ zp ZP_WORD:14 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] ]
Coalescing zero page register [ zp ZP_WORD:4 [ screen_fill::screen#2 screen_fill::screen#3 screen_fill::screen#1 bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::$3 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] ] with [ zp ZP_WORD:18 [ bitmap_plot::x#0 ] ]
Coalescing zero page register [ zp ZP_WORD:4 [ screen_fill::screen#2 screen_fill::screen#3 screen_fill::screen#1 bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::$3 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 bitmap_plot::x#0 ] ] with [ zp ZP_WORD:28 [ point_init::$0 ] ]
Coalescing zero page register [ zp ZP_WORD:4 [ screen_fill::screen#2 screen_fill::screen#3 screen_fill::screen#1 bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::$3 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 bitmap_plot::x#0 point_init::$0 ] ] with [ zp ZP_WORD:31 [ point_init::$2 point_init::$3 ] ]
Allocated (was zp ZP_BYTE:3) zp ZP_BYTE:2 [ screen_fill::y#4 screen_fill::y#1 bitmap_clear::y#4 bitmap_clear::y#1 bitmap_init::$3 ]
Allocated (was zp ZP_WORD:4) zp ZP_WORD:3 [ screen_fill::screen#2 screen_fill::screen#3 screen_fill::screen#1 bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::$3 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 bitmap_plot::x#0 point_init::$0 point_init::$2 point_init::$3 ]
Allocated (was zp ZP_WORD:21) zp ZP_WORD:5 [ bitmap_plot::$3 bitmap_plot::plotter#1 ]
Allocated (was zp ZP_WORD:23) zp ZP_WORD:7 [ bitmap_plot::$1 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label PROCPORT_DDR = 0
  .const PROCPORT_DDR_MEMORY_MASK = 7
  .label PROCPORT = 1
  .const PROCPORT_RAM_IO = $35
  .label BORDERCOL = $d020
  .label D011 = $d011
  .const VIC_BMM = $20
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  .label D018 = $d018
  .label CIA2_PORT_A = $dd00
  .label CIA2_PORT_A_DDR = $dd02
  .label BITMAP = $a000
  .label SCREEN = $8800
  .const DELAY = 8
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @9 [phi:@begin->@9]
b9_from_bbegin:
  jmp b9
//SEG4 @9
b9:
//SEG5 [2] call main  [ ] ( )
  jsr main
//SEG6 [3] phi from @9 to @end [phi:@9->@end]
bend_from_b9:
  jmp bend
//SEG7 @end
bend:
//SEG8 main
main: {
    .const vicSelectGfxBank1_toDd001_return = 3^(>SCREEN)>>6
    .const toD0181_return = (>(SCREEN&$3fff)<<2)|(>BITMAP)>>2&$f
  //SEG9 asm { sei  }
    sei
  //SEG10 [5] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
  //SEG11 [6] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
  //SEG12 [7] *((const byte*) D011#0) ← (const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #VIC_BMM|VIC_DEN|VIC_RSEL|3
    sta D011
    jmp vicSelectGfxBank1
  //SEG13 main::vicSelectGfxBank1
  vicSelectGfxBank1:
  //SEG14 [8] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #3
    sta CIA2_PORT_A_DDR
  //SEG15 [9] phi from main::vicSelectGfxBank1 to main::vicSelectGfxBank1_toDd001 [phi:main::vicSelectGfxBank1->main::vicSelectGfxBank1_toDd001]
  vicSelectGfxBank1_toDd001_from_vicSelectGfxBank1:
    jmp vicSelectGfxBank1_toDd001
  //SEG16 main::vicSelectGfxBank1_toDd001
  vicSelectGfxBank1_toDd001:
    jmp vicSelectGfxBank1_b1
  //SEG17 main::vicSelectGfxBank1_@1
  vicSelectGfxBank1_b1:
  //SEG18 [10] *((const byte*) CIA2_PORT_A#0) ← (const byte) main::vicSelectGfxBank1_toDd001_return#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #vicSelectGfxBank1_toDd001_return
    sta CIA2_PORT_A
  //SEG19 [11] phi from main::vicSelectGfxBank1_@1 to main::toD0181 [phi:main::vicSelectGfxBank1_@1->main::toD0181]
  toD0181_from_vicSelectGfxBank1_b1:
    jmp toD0181
  //SEG20 main::toD0181
  toD0181:
    jmp b10
  //SEG21 main::@10
  b10:
  //SEG22 [12] *((const byte*) D018#0) ← (const byte) main::toD0181_return#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #toD0181_return
    sta D018
  //SEG23 [13] call bitmap_init  [ ] ( main:2 [ ] )
  //SEG24 [64] phi from main::@10 to bitmap_init [phi:main::@10->bitmap_init]
  bitmap_init_from_b10:
    jsr bitmap_init
  //SEG25 [14] phi from main::@10 to main::@11 [phi:main::@10->main::@11]
  b11_from_b10:
    jmp b11
  //SEG26 main::@11
  b11:
  //SEG27 [15] call bitmap_clear  [ ] ( main:2 [ ] )
    jsr bitmap_clear
  //SEG28 [16] phi from main::@11 to main::@12 [phi:main::@11->main::@12]
  b12_from_b11:
    jmp b12
  //SEG29 main::@12
  b12:
  //SEG30 [17] call screen_fill  [ ] ( main:2 [ ] )
  //SEG31 [43] phi from main::@12 to screen_fill [phi:main::@12->screen_fill]
  screen_fill_from_b12:
    jsr screen_fill
  //SEG32 [18] phi from main::@12 to main::@1 [phi:main::@12->main::@1]
  b1_from_b12:
  //SEG33 [18] phi (byte) main::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@12->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  //SEG34 [18] phi from main::@15 to main::@1 [phi:main::@15->main::@1]
  b1_from_b15:
  //SEG35 [18] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@15->main::@1#0] -- register_copy 
    jmp b1
  //SEG36 main::@1
  b1:
  //SEG37 [19] (byte) point_init::point_idx#0 ← (byte) main::i#2 [ main::i#2 point_init::point_idx#0 ] ( main:2 [ main::i#2 point_init::point_idx#0 ] )
    // (byte) point_init::point_idx#0 = (byte) main::i#2  // register copy reg byte x
  //SEG38 [20] call point_init  [ main::i#2 ] ( main:2 [ main::i#2 ] )
    jsr point_init
    jmp b14
  //SEG39 main::@14
  b14:
  //SEG40 [21] (byte~) main::$9 ← (byte) main::i#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ main::i#2 main::$9 ] ( main:2 [ main::i#2 main::$9 ] ) -- vbuyy=vbuxx_ror_1 
    txa
    lsr
    tay
  //SEG41 [22] (word) bitmap_plot::x#0 ← *((const word[4]) x_start#0 + (byte) main::i#2) [ main::i#2 main::$9 bitmap_plot::x#0 ] ( main:2 [ main::i#2 main::$9 bitmap_plot::x#0 ] ) -- vwuz1=pwuc1_derefidx_vbuxx 
    lda x_start,x
    sta bitmap_plot.x
    lda x_start+1,x
    sta bitmap_plot.x+1
  //SEG42 [23] (byte) bitmap_plot::y#0 ← *((const byte[4]) y_start#0 + (byte~) main::$9) [ main::i#2 bitmap_plot::x#0 bitmap_plot::y#0 ] ( main:2 [ main::i#2 bitmap_plot::x#0 bitmap_plot::y#0 ] ) -- vbuaa=pbuc1_derefidx_vbuyy 
    lda y_start,y
  //SEG43 [24] call bitmap_plot  [ main::i#2 ] ( main:2 [ main::i#2 ] )
    jsr bitmap_plot
    jmp b15
  //SEG44 main::@15
  b15:
  //SEG45 [25] (byte) main::i#1 ← (byte) main::i#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ main::i#1 ] ( main:2 [ main::i#1 ] ) -- vbuxx=vbuxx_plus_2 
    inx
    inx
  //SEG46 [26] if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto main::@1 [ main::i#1 ] ( main:2 [ main::i#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne b1_from_b15
    jmp b3
  //SEG47 main::@3
  b3:
  //SEG48 [27] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) [ ] ( main:2 [ ] ) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
    jmp b3
}
//SEG49 bitmap_plot
bitmap_plot: {
    .label _1 = 7
    .label x = 3
    .label plotter = 5
    .label _3 = 5
  //SEG50 [28] (word~) bitmap_plot::$3 ← *((const byte[256]) bitmap_plot_yhi#0 + (byte) bitmap_plot::y#0) w= *((const byte[256]) bitmap_plot_ylo#0 + (byte) bitmap_plot::y#0) [ bitmap_plot::x#0 bitmap_plot::$3 ] ( main:2::bitmap_plot:24 [ main::i#2 bitmap_plot::x#0 bitmap_plot::$3 ] ) -- vwuz1=pbuc1_derefidx_vbuaa_word_pbuc2_derefidx_vbuaa 
    tay
    lda bitmap_plot_yhi,y
    sta _3+1
    lda bitmap_plot_ylo,y
    sta _3
  //SEG51 [29] (word~) bitmap_plot::$1 ← (word) bitmap_plot::x#0 & (word/dword/signed dword) 65528 [ bitmap_plot::x#0 bitmap_plot::$3 bitmap_plot::$1 ] ( main:2::bitmap_plot:24 [ main::i#2 bitmap_plot::x#0 bitmap_plot::$3 bitmap_plot::$1 ] ) -- vwuz1=vwuz2_band_vwuc1 
    lda x
    and #<$fff8
    sta _1
    lda x+1
    and #>$fff8
    sta _1+1
  //SEG52 [30] (byte*) bitmap_plot::plotter#1 ← (byte*)(word~) bitmap_plot::$3 + (word~) bitmap_plot::$1 [ bitmap_plot::x#0 bitmap_plot::plotter#1 ] ( main:2::bitmap_plot:24 [ main::i#2 bitmap_plot::x#0 bitmap_plot::plotter#1 ] ) -- pbuz1=pbuz1_plus_vwuz2 
    lda plotter
    clc
    adc _1
    sta plotter
    lda plotter+1
    adc _1+1
    sta plotter+1
  //SEG53 [31] (byte~) bitmap_plot::$2 ← < (word) bitmap_plot::x#0 [ bitmap_plot::plotter#1 bitmap_plot::$2 ] ( main:2::bitmap_plot:24 [ main::i#2 bitmap_plot::plotter#1 bitmap_plot::$2 ] ) -- vbuaa=_lo_vwuz1 
    lda x
  //SEG54 [32] *((byte*) bitmap_plot::plotter#1) ← *((byte*) bitmap_plot::plotter#1) | *((const byte[256]) bitmap_plot_bit#0 + (byte~) bitmap_plot::$2) [ ] ( main:2::bitmap_plot:24 [ main::i#2 ] ) -- _deref_pbuz1=_deref_pbuz1_bor_pbuc1_derefidx_vbuaa 
    tay
    lda bitmap_plot_bit,y
    ldy #0
    ora (plotter),y
    ldy #0
    sta (plotter),y
    jmp breturn
  //SEG55 bitmap_plot::@return
  breturn:
  //SEG56 [33] return  [ ] ( main:2::bitmap_plot:24 [ main::i#2 ] )
    rts
}
//SEG57 point_init
point_init: {
    .label _0 = 3
    .label _2 = 3
    .label _3 = 3
  //SEG58 [34] (word~) point_init::$0 ← *((const word[4]) x_start#0 + (byte) point_init::point_idx#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 [ point_init::point_idx#0 point_init::$0 ] ( main:2::point_init:20 [ main::i#2 point_init::point_idx#0 point_init::$0 ] ) -- vwuz1=pwuc1_derefidx_vbuxx_rol_4 
    lda x_start,x
    sta _0
    lda x_start+1,x
    sta _0+1
    asl _0
    rol _0+1
    asl _0
    rol _0+1
    asl _0
    rol _0+1
    asl _0
    rol _0+1
  //SEG59 [35] *((const word[4]) x_cur#0 + (byte) point_init::point_idx#0) ← (word~) point_init::$0 [ point_init::point_idx#0 ] ( main:2::point_init:20 [ main::i#2 point_init::point_idx#0 ] ) -- pwuc1_derefidx_vbuxx=vwuz1 
    lda _0
    sta x_cur,x
    lda _0+1
    sta x_cur+1,x
  //SEG60 [36] (byte~) point_init::$1 ← (byte) point_init::point_idx#0 >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ point_init::point_idx#0 point_init::$1 ] ( main:2::point_init:20 [ main::i#2 point_init::point_idx#0 point_init::$1 ] ) -- vbuaa=vbuxx_ror_1 
    txa
    lsr
  //SEG61 [37] (word~) point_init::$2 ← ((word)) *((const byte[4]) y_start#0 + (byte~) point_init::$1) [ point_init::point_idx#0 point_init::$2 ] ( main:2::point_init:20 [ main::i#2 point_init::point_idx#0 point_init::$2 ] ) -- vwuz1=_word_pbuc1_derefidx_vbuaa 
    tay
    lda y_start,y
    sta _2
    lda #0
    sta _2+1
  //SEG62 [38] (word~) point_init::$3 ← (word~) point_init::$2 << (byte/signed byte/word/signed word/dword/signed dword) 4 [ point_init::point_idx#0 point_init::$3 ] ( main:2::point_init:20 [ main::i#2 point_init::point_idx#0 point_init::$3 ] ) -- vwuz1=vwuz1_rol_4 
    asl _3
    rol _3+1
    asl _3
    rol _3+1
    asl _3
    rol _3+1
    asl _3
    rol _3+1
  //SEG63 [39] *((const word[4]) y_cur#0 + (byte) point_init::point_idx#0) ← (word~) point_init::$3 [ point_init::point_idx#0 ] ( main:2::point_init:20 [ main::i#2 point_init::point_idx#0 ] ) -- pwuc1_derefidx_vbuxx=vwuz1 
    lda _3
    sta y_cur,x
    lda _3+1
    sta y_cur+1,x
  //SEG64 [40] (byte~) point_init::$4 ← (byte) point_init::point_idx#0 >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ point_init::$4 ] ( main:2::point_init:20 [ main::i#2 point_init::$4 ] ) -- vbuaa=vbuxx_ror_1 
    txa
    lsr
  //SEG65 [41] *((const byte[4]) delay#0 + (byte~) point_init::$4) ← (const byte) DELAY#0 [ ] ( main:2::point_init:20 [ main::i#2 ] ) -- pbuc1_derefidx_vbuaa=vbuc2 
    tay
    lda #DELAY
    sta delay,y
    jmp breturn
  //SEG66 point_init::@return
  breturn:
  //SEG67 [42] return  [ ] ( main:2::point_init:20 [ main::i#2 ] )
    rts
}
//SEG68 screen_fill
screen_fill: {
    .const ch = $10
    .label screen = 3
    .label y = 2
  //SEG69 [44] phi from screen_fill to screen_fill::@1 [phi:screen_fill->screen_fill::@1]
  b1_from_screen_fill:
  //SEG70 [44] phi (byte) screen_fill::y#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:screen_fill->screen_fill::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta y
  //SEG71 [44] phi (byte*) screen_fill::screen#3 = (const byte*) SCREEN#0 [phi:screen_fill->screen_fill::@1#1] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta screen
    lda #>SCREEN
    sta screen+1
    jmp b1
  //SEG72 [44] phi from screen_fill::@3 to screen_fill::@1 [phi:screen_fill::@3->screen_fill::@1]
  b1_from_b3:
  //SEG73 [44] phi (byte) screen_fill::y#4 = (byte) screen_fill::y#1 [phi:screen_fill::@3->screen_fill::@1#0] -- register_copy 
  //SEG74 [44] phi (byte*) screen_fill::screen#3 = (byte*) screen_fill::screen#1 [phi:screen_fill::@3->screen_fill::@1#1] -- register_copy 
    jmp b1
  //SEG75 screen_fill::@1
  b1:
  //SEG76 [45] phi from screen_fill::@1 to screen_fill::@2 [phi:screen_fill::@1->screen_fill::@2]
  b2_from_b1:
  //SEG77 [45] phi (byte) screen_fill::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:screen_fill::@1->screen_fill::@2#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG78 [45] phi (byte*) screen_fill::screen#2 = (byte*) screen_fill::screen#3 [phi:screen_fill::@1->screen_fill::@2#1] -- register_copy 
    jmp b2
  //SEG79 [45] phi from screen_fill::@2 to screen_fill::@2 [phi:screen_fill::@2->screen_fill::@2]
  b2_from_b2:
  //SEG80 [45] phi (byte) screen_fill::x#2 = (byte) screen_fill::x#1 [phi:screen_fill::@2->screen_fill::@2#0] -- register_copy 
  //SEG81 [45] phi (byte*) screen_fill::screen#2 = (byte*) screen_fill::screen#1 [phi:screen_fill::@2->screen_fill::@2#1] -- register_copy 
    jmp b2
  //SEG82 screen_fill::@2
  b2:
  //SEG83 [46] *((byte*) screen_fill::screen#2) ← (const byte) screen_fill::ch#0 [ screen_fill::y#4 screen_fill::screen#2 screen_fill::x#2 ] ( main:2::screen_fill:17 [ screen_fill::y#4 screen_fill::screen#2 screen_fill::x#2 ] ) -- _deref_pbuz1=vbuc1 
    lda #ch
    ldy #0
    sta (screen),y
  //SEG84 [47] (byte*) screen_fill::screen#1 ← ++ (byte*) screen_fill::screen#2 [ screen_fill::y#4 screen_fill::screen#1 screen_fill::x#2 ] ( main:2::screen_fill:17 [ screen_fill::y#4 screen_fill::screen#1 screen_fill::x#2 ] ) -- pbuz1=_inc_pbuz1 
    inc screen
    bne !+
    inc screen+1
  !:
  //SEG85 [48] (byte) screen_fill::x#1 ← ++ (byte) screen_fill::x#2 [ screen_fill::y#4 screen_fill::screen#1 screen_fill::x#1 ] ( main:2::screen_fill:17 [ screen_fill::y#4 screen_fill::screen#1 screen_fill::x#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG86 [49] if((byte) screen_fill::x#1!=(byte/signed byte/word/signed word/dword/signed dword) 40) goto screen_fill::@2 [ screen_fill::y#4 screen_fill::screen#1 screen_fill::x#1 ] ( main:2::screen_fill:17 [ screen_fill::y#4 screen_fill::screen#1 screen_fill::x#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b2_from_b2
    jmp b3
  //SEG87 screen_fill::@3
  b3:
  //SEG88 [50] (byte) screen_fill::y#1 ← ++ (byte) screen_fill::y#4 [ screen_fill::screen#1 screen_fill::y#1 ] ( main:2::screen_fill:17 [ screen_fill::screen#1 screen_fill::y#1 ] ) -- vbuz1=_inc_vbuz1 
    inc y
  //SEG89 [51] if((byte) screen_fill::y#1!=(byte/signed byte/word/signed word/dword/signed dword) 25) goto screen_fill::@1 [ screen_fill::screen#1 screen_fill::y#1 ] ( main:2::screen_fill:17 [ screen_fill::screen#1 screen_fill::y#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda y
    cmp #$19
    bne b1_from_b3
    jmp breturn
  //SEG90 screen_fill::@return
  breturn:
  //SEG91 [52] return  [ ] ( main:2::screen_fill:17 [ ] )
    rts
}
//SEG92 bitmap_clear
bitmap_clear: {
    .label bitmap = 3
    .label y = 2
    .label _3 = 3
  //SEG93 [53] (word~) bitmap_clear::$3 ← *((const byte[256]) bitmap_plot_yhi#0+(byte/signed byte/word/signed word/dword/signed dword) 0) w= *((const byte[256]) bitmap_plot_ylo#0+(byte/signed byte/word/signed word/dword/signed dword) 0) [ bitmap_clear::$3 ] ( main:2::bitmap_clear:15 [ bitmap_clear::$3 ] ) -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda bitmap_plot_ylo+0
    sta _3
    lda bitmap_plot_yhi+0
    sta _3+1
  //SEG94 [54] (byte*~) bitmap_clear::bitmap#5 ← (byte*)(word~) bitmap_clear::$3 [ bitmap_clear::bitmap#5 ] ( main:2::bitmap_clear:15 [ bitmap_clear::bitmap#5 ] )
    // (byte*~) bitmap_clear::bitmap#5 = (byte*)(word~) bitmap_clear::$3  // register copy zp ZP_WORD:3
  //SEG95 [55] phi from bitmap_clear to bitmap_clear::@1 [phi:bitmap_clear->bitmap_clear::@1]
  b1_from_bitmap_clear:
  //SEG96 [55] phi (byte) bitmap_clear::y#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_clear->bitmap_clear::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta y
  //SEG97 [55] phi (byte*) bitmap_clear::bitmap#3 = (byte*~) bitmap_clear::bitmap#5 [phi:bitmap_clear->bitmap_clear::@1#1] -- register_copy 
    jmp b1
  //SEG98 [55] phi from bitmap_clear::@3 to bitmap_clear::@1 [phi:bitmap_clear::@3->bitmap_clear::@1]
  b1_from_b3:
  //SEG99 [55] phi (byte) bitmap_clear::y#4 = (byte) bitmap_clear::y#1 [phi:bitmap_clear::@3->bitmap_clear::@1#0] -- register_copy 
  //SEG100 [55] phi (byte*) bitmap_clear::bitmap#3 = (byte*) bitmap_clear::bitmap#1 [phi:bitmap_clear::@3->bitmap_clear::@1#1] -- register_copy 
    jmp b1
  //SEG101 bitmap_clear::@1
  b1:
  //SEG102 [56] phi from bitmap_clear::@1 to bitmap_clear::@2 [phi:bitmap_clear::@1->bitmap_clear::@2]
  b2_from_b1:
  //SEG103 [56] phi (byte) bitmap_clear::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_clear::@1->bitmap_clear::@2#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG104 [56] phi (byte*) bitmap_clear::bitmap#2 = (byte*) bitmap_clear::bitmap#3 [phi:bitmap_clear::@1->bitmap_clear::@2#1] -- register_copy 
    jmp b2
  //SEG105 [56] phi from bitmap_clear::@2 to bitmap_clear::@2 [phi:bitmap_clear::@2->bitmap_clear::@2]
  b2_from_b2:
  //SEG106 [56] phi (byte) bitmap_clear::x#2 = (byte) bitmap_clear::x#1 [phi:bitmap_clear::@2->bitmap_clear::@2#0] -- register_copy 
  //SEG107 [56] phi (byte*) bitmap_clear::bitmap#2 = (byte*) bitmap_clear::bitmap#1 [phi:bitmap_clear::@2->bitmap_clear::@2#1] -- register_copy 
    jmp b2
  //SEG108 bitmap_clear::@2
  b2:
  //SEG109 [57] *((byte*) bitmap_clear::bitmap#2) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ bitmap_clear::y#4 bitmap_clear::bitmap#2 bitmap_clear::x#2 ] ( main:2::bitmap_clear:15 [ bitmap_clear::y#4 bitmap_clear::bitmap#2 bitmap_clear::x#2 ] ) -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (bitmap),y
  //SEG110 [58] (byte*) bitmap_clear::bitmap#1 ← ++ (byte*) bitmap_clear::bitmap#2 [ bitmap_clear::y#4 bitmap_clear::bitmap#1 bitmap_clear::x#2 ] ( main:2::bitmap_clear:15 [ bitmap_clear::y#4 bitmap_clear::bitmap#1 bitmap_clear::x#2 ] ) -- pbuz1=_inc_pbuz1 
    inc bitmap
    bne !+
    inc bitmap+1
  !:
  //SEG111 [59] (byte) bitmap_clear::x#1 ← ++ (byte) bitmap_clear::x#2 [ bitmap_clear::y#4 bitmap_clear::bitmap#1 bitmap_clear::x#1 ] ( main:2::bitmap_clear:15 [ bitmap_clear::y#4 bitmap_clear::bitmap#1 bitmap_clear::x#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG112 [60] if((byte) bitmap_clear::x#1!=(byte/word/signed word/dword/signed dword) 200) goto bitmap_clear::@2 [ bitmap_clear::y#4 bitmap_clear::bitmap#1 bitmap_clear::x#1 ] ( main:2::bitmap_clear:15 [ bitmap_clear::y#4 bitmap_clear::bitmap#1 bitmap_clear::x#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #$c8
    bne b2_from_b2
    jmp b3
  //SEG113 bitmap_clear::@3
  b3:
  //SEG114 [61] (byte) bitmap_clear::y#1 ← ++ (byte) bitmap_clear::y#4 [ bitmap_clear::bitmap#1 bitmap_clear::y#1 ] ( main:2::bitmap_clear:15 [ bitmap_clear::bitmap#1 bitmap_clear::y#1 ] ) -- vbuz1=_inc_vbuz1 
    inc y
  //SEG115 [62] if((byte) bitmap_clear::y#1!=(byte/signed byte/word/signed word/dword/signed dword) 40) goto bitmap_clear::@1 [ bitmap_clear::bitmap#1 bitmap_clear::y#1 ] ( main:2::bitmap_clear:15 [ bitmap_clear::bitmap#1 bitmap_clear::y#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda y
    cmp #$28
    bne b1_from_b3
    jmp breturn
  //SEG116 bitmap_clear::@return
  breturn:
  //SEG117 [63] return  [ ] ( main:2::bitmap_clear:15 [ ] )
    rts
}
//SEG118 bitmap_init
bitmap_init: {
    .label _3 = 2
    .label yoffs = 3
  //SEG119 [65] phi from bitmap_init to bitmap_init::@1 [phi:bitmap_init->bitmap_init::@1]
  b1_from_bitmap_init:
  //SEG120 [65] phi (byte) bitmap_init::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_init->bitmap_init::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG121 [65] phi (byte) bitmap_init::bits#3 = (byte/word/signed word/dword/signed dword) 128 [phi:bitmap_init->bitmap_init::@1#1] -- vbuaa=vbuc1 
    lda #$80
    jmp b1
  //SEG122 [65] phi from bitmap_init::@2 to bitmap_init::@1 [phi:bitmap_init::@2->bitmap_init::@1]
  b1_from_b2:
  //SEG123 [65] phi (byte) bitmap_init::x#2 = (byte) bitmap_init::x#1 [phi:bitmap_init::@2->bitmap_init::@1#0] -- register_copy 
  //SEG124 [65] phi (byte) bitmap_init::bits#3 = (byte) bitmap_init::bits#4 [phi:bitmap_init::@2->bitmap_init::@1#1] -- register_copy 
    jmp b1
  //SEG125 bitmap_init::@1
  b1:
  //SEG126 [66] *((const byte[256]) bitmap_plot_bit#0 + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3 [ bitmap_init::bits#3 bitmap_init::x#2 ] ( main:2::bitmap_init:13 [ bitmap_init::bits#3 bitmap_init::x#2 ] ) -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_bit,x
  //SEG127 [67] (byte) bitmap_init::bits#1 ← (byte) bitmap_init::bits#3 >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ bitmap_init::x#2 bitmap_init::bits#1 ] ( main:2::bitmap_init:13 [ bitmap_init::x#2 bitmap_init::bits#1 ] ) -- vbuaa=vbuaa_ror_1 
    lsr
  //SEG128 [68] if((byte) bitmap_init::bits#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@10 [ bitmap_init::x#2 bitmap_init::bits#1 ] ( main:2::bitmap_init:13 [ bitmap_init::x#2 bitmap_init::bits#1 ] ) -- vbuaa_neq_0_then_la1 
    cmp #0
    bne b10_from_b1
  //SEG129 [69] phi from bitmap_init::@1 to bitmap_init::@2 [phi:bitmap_init::@1->bitmap_init::@2]
  b2_from_b1:
  //SEG130 [69] phi (byte) bitmap_init::bits#4 = (byte/word/signed word/dword/signed dword) 128 [phi:bitmap_init::@1->bitmap_init::@2#0] -- vbuaa=vbuc1 
    lda #$80
    jmp b2
  //SEG131 bitmap_init::@2
  b2:
  //SEG132 [70] (byte) bitmap_init::x#1 ← ++ (byte) bitmap_init::x#2 [ bitmap_init::bits#4 bitmap_init::x#1 ] ( main:2::bitmap_init:13 [ bitmap_init::bits#4 bitmap_init::x#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG133 [71] if((byte) bitmap_init::x#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@1 [ bitmap_init::bits#4 bitmap_init::x#1 ] ( main:2::bitmap_init:13 [ bitmap_init::bits#4 bitmap_init::x#1 ] ) -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b1_from_b2
  //SEG134 [72] phi from bitmap_init::@2 to bitmap_init::@3 [phi:bitmap_init::@2->bitmap_init::@3]
  b3_from_b2:
  //SEG135 [72] phi (byte*) bitmap_init::yoffs#2 = (const byte*) BITMAP#0 [phi:bitmap_init::@2->bitmap_init::@3#0] -- pbuz1=pbuc1 
    lda #<BITMAP
    sta yoffs
    lda #>BITMAP
    sta yoffs+1
  //SEG136 [72] phi (byte) bitmap_init::y#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_init::@2->bitmap_init::@3#1] -- vbuxx=vbuc1 
    ldx #0
    jmp b3
  //SEG137 [72] phi from bitmap_init::@4 to bitmap_init::@3 [phi:bitmap_init::@4->bitmap_init::@3]
  b3_from_b4:
  //SEG138 [72] phi (byte*) bitmap_init::yoffs#2 = (byte*) bitmap_init::yoffs#4 [phi:bitmap_init::@4->bitmap_init::@3#0] -- register_copy 
  //SEG139 [72] phi (byte) bitmap_init::y#2 = (byte) bitmap_init::y#1 [phi:bitmap_init::@4->bitmap_init::@3#1] -- register_copy 
    jmp b3
  //SEG140 bitmap_init::@3
  b3:
  //SEG141 [73] (byte~) bitmap_init::$3 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$3 ] ( main:2::bitmap_init:13 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$3 ] ) -- vbuz1=vbuxx_band_vbuc1 
    txa
    and #7
    sta _3
  //SEG142 [74] (byte~) bitmap_init::$4 ← < (byte*) bitmap_init::yoffs#2 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$3 bitmap_init::$4 ] ( main:2::bitmap_init:13 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$3 bitmap_init::$4 ] ) -- vbuaa=_lo_pbuz1 
    lda yoffs
  //SEG143 [75] (byte~) bitmap_init::$5 ← (byte~) bitmap_init::$3 | (byte~) bitmap_init::$4 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$5 ] ( main:2::bitmap_init:13 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$5 ] ) -- vbuaa=vbuz1_bor_vbuaa 
    ora _3
  //SEG144 [76] *((const byte[256]) bitmap_plot_ylo#0 + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$5 [ bitmap_init::y#2 bitmap_init::yoffs#2 ] ( main:2::bitmap_init:13 [ bitmap_init::y#2 bitmap_init::yoffs#2 ] ) -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_ylo,x
  //SEG145 [77] (byte~) bitmap_init::$6 ← > (byte*) bitmap_init::yoffs#2 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$6 ] ( main:2::bitmap_init:13 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$6 ] ) -- vbuaa=_hi_pbuz1 
    lda yoffs+1
  //SEG146 [78] *((const byte[256]) bitmap_plot_yhi#0 + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$6 [ bitmap_init::y#2 bitmap_init::yoffs#2 ] ( main:2::bitmap_init:13 [ bitmap_init::y#2 bitmap_init::yoffs#2 ] ) -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_yhi,x
  //SEG147 [79] (byte~) bitmap_init::$7 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$7 ] ( main:2::bitmap_init:13 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$7 ] ) -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #7
  //SEG148 [80] if((byte~) bitmap_init::$7!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto bitmap_init::@4 [ bitmap_init::y#2 bitmap_init::yoffs#2 ] ( main:2::bitmap_init:13 [ bitmap_init::y#2 bitmap_init::yoffs#2 ] ) -- vbuaa_neq_vbuc1_then_la1 
    cmp #7
    bne b4_from_b3
    jmp b7
  //SEG149 bitmap_init::@7
  b7:
  //SEG150 [81] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (byte/signed byte/word/signed word/dword/signed dword) 40*(byte/signed byte/word/signed word/dword/signed dword) 8 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] ( main:2::bitmap_init:13 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] ) -- pbuz1=pbuz1_plus_vwuc1 
    clc
    lda yoffs
    adc #<$28*8
    sta yoffs
    lda yoffs+1
    adc #>$28*8
    sta yoffs+1
  //SEG151 [82] phi from bitmap_init::@3 bitmap_init::@7 to bitmap_init::@4 [phi:bitmap_init::@3/bitmap_init::@7->bitmap_init::@4]
  b4_from_b3:
  b4_from_b7:
  //SEG152 [82] phi (byte*) bitmap_init::yoffs#4 = (byte*) bitmap_init::yoffs#2 [phi:bitmap_init::@3/bitmap_init::@7->bitmap_init::@4#0] -- register_copy 
    jmp b4
  //SEG153 bitmap_init::@4
  b4:
  //SEG154 [83] (byte) bitmap_init::y#1 ← ++ (byte) bitmap_init::y#2 [ bitmap_init::y#1 bitmap_init::yoffs#4 ] ( main:2::bitmap_init:13 [ bitmap_init::y#1 bitmap_init::yoffs#4 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG155 [84] if((byte) bitmap_init::y#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@3 [ bitmap_init::y#1 bitmap_init::yoffs#4 ] ( main:2::bitmap_init:13 [ bitmap_init::y#1 bitmap_init::yoffs#4 ] ) -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b3_from_b4
    jmp breturn
  //SEG156 bitmap_init::@return
  breturn:
  //SEG157 [85] return  [ ] ( main:2::bitmap_init:13 [ ] )
    rts
  //SEG158 [86] phi from bitmap_init::@1 to bitmap_init::@10 [phi:bitmap_init::@1->bitmap_init::@10]
  b10_from_b1:
    jmp b10
  //SEG159 bitmap_init::@10
  b10:
  //SEG160 [69] phi from bitmap_init::@10 to bitmap_init::@2 [phi:bitmap_init::@10->bitmap_init::@2]
  b2_from_b10:
  //SEG161 [69] phi (byte) bitmap_init::bits#4 = (byte) bitmap_init::bits#1 [phi:bitmap_init::@10->bitmap_init::@2#0] -- register_copy 
    jmp b2
}
  x_start: .word $a, $14, $1e, $1e
  y_start: .byte $a, $a, $a, $14
  x_cur: .fill 8, 0
  y_cur: .fill 8, 0
  delay: .fill 4, 0
  bitmap_plot_ylo: .fill $100, 0
  bitmap_plot_yhi: .fill $100, 0
  bitmap_plot_bit: .fill $100, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b9
Removing instruction jmp bend
Removing instruction jmp vicSelectGfxBank1
Removing instruction jmp vicSelectGfxBank1_toDd001
Removing instruction jmp vicSelectGfxBank1_b1
Removing instruction jmp toD0181
Removing instruction jmp b10
Removing instruction jmp b11
Removing instruction jmp b12
Removing instruction jmp b1
Removing instruction jmp b14
Removing instruction jmp b15
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b7
Removing instruction jmp b4
Removing instruction jmp breturn
Removing instruction jmp b10
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction ldy #0
Replacing instruction ldy #0 with TAY
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b1_from_b15 with b1
Replacing label b2_from_b2 with b2
Replacing label b1_from_b3 with b1
Replacing label b2_from_b2 with b2
Replacing label b1_from_b3 with b1
Replacing label b10_from_b1 with b10
Replacing label b1_from_b2 with b1
Replacing label b4_from_b3 with b4
Replacing label b3_from_b4 with b3
Removing instruction bbegin:
Removing instruction b9_from_bbegin:
Removing instruction bend_from_b9:
Removing instruction vicSelectGfxBank1_toDd001_from_vicSelectGfxBank1:
Removing instruction vicSelectGfxBank1_toDd001:
Removing instruction toD0181_from_vicSelectGfxBank1_b1:
Removing instruction toD0181:
Removing instruction b11_from_b10:
Removing instruction b12_from_b11:
Removing instruction screen_fill_from_b12:
Removing instruction b1_from_b15:
Removing instruction b1_from_b3:
Removing instruction b2_from_b1:
Removing instruction b2_from_b2:
Removing instruction b1_from_b3:
Removing instruction b2_from_b1:
Removing instruction b2_from_b2:
Removing instruction b1_from_b2:
Removing instruction b3_from_b4:
Removing instruction b4_from_b3:
Removing instruction b4_from_b7:
Removing instruction b10_from_b1:
Removing instruction b2_from_b10:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction b9:
Removing instruction bend:
Removing instruction vicSelectGfxBank1:
Removing instruction vicSelectGfxBank1_b1:
Removing instruction b10:
Removing instruction bitmap_init_from_b10:
Removing instruction b11:
Removing instruction b12:
Removing instruction b1_from_b12:
Removing instruction b14:
Removing instruction b15:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction b1_from_screen_fill:
Removing instruction b3:
Removing instruction breturn:
Removing instruction b1_from_bitmap_clear:
Removing instruction b3:
Removing instruction breturn:
Removing instruction b1_from_bitmap_init:
Removing instruction b2_from_b1:
Removing instruction b3_from_b2:
Removing instruction b7:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Skipping double jump to b2 in bne b10
Succesful ASM optimization Pass5DoubleJumpElimination
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b1
Removing instruction jmp b3
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction b10:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing unreachable instruction jmp b2
Succesful ASM optimization Pass5UnreachableCodeElimination

FINAL SYMBOL TABLE
(label) @9
(label) @begin
(label) @end
(byte*) BITMAP
(const byte*) BITMAP#0 BITMAP = ((byte*))(word/dword/signed dword) 40960
(byte*) BORDERCOL
(const byte*) BORDERCOL#0 BORDERCOL = ((byte*))(word/dword/signed dword) 53280
(byte*) CIA2_PORT_A
(const byte*) CIA2_PORT_A#0 CIA2_PORT_A = ((byte*))(word/dword/signed dword) 56576
(byte*) CIA2_PORT_A_DDR
(const byte*) CIA2_PORT_A_DDR#0 CIA2_PORT_A_DDR = ((byte*))(word/dword/signed dword) 56578
(byte*) D011
(const byte*) D011#0 D011 = ((byte*))(word/dword/signed dword) 53265
(byte*) D018
(const byte*) D018#0 D018 = ((byte*))(word/dword/signed dword) 53272
(byte) DELAY
(const byte) DELAY#0 DELAY = (byte/signed byte/word/signed word/dword/signed dword) 8
(byte*) PROCPORT
(const byte*) PROCPORT#0 PROCPORT = ((byte*))(byte/signed byte/word/signed word/dword/signed dword) 1
(byte*) PROCPORT_DDR
(const byte*) PROCPORT_DDR#0 PROCPORT_DDR = ((byte*))(byte/signed byte/word/signed word/dword/signed dword) 0
(byte) PROCPORT_DDR_MEMORY_MASK
(const byte) PROCPORT_DDR_MEMORY_MASK#0 PROCPORT_DDR_MEMORY_MASK = (byte/signed byte/word/signed word/dword/signed dword) 7
(byte) PROCPORT_RAM_IO
(const byte) PROCPORT_RAM_IO#0 PROCPORT_RAM_IO = (byte/signed byte/word/signed word/dword/signed dword) 53
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = ((byte*))(word/dword/signed dword) 34816
(byte) VIC_BMM
(const byte) VIC_BMM#0 VIC_BMM = (byte/signed byte/word/signed word/dword/signed dword) 32
(byte) VIC_DEN
(const byte) VIC_DEN#0 VIC_DEN = (byte/signed byte/word/signed word/dword/signed dword) 16
(byte) VIC_RSEL
(const byte) VIC_RSEL#0 VIC_RSEL = (byte/signed byte/word/signed word/dword/signed dword) 8
(void()) bitmap_clear()
(word~) bitmap_clear::$3 $3 zp ZP_WORD:3 2.0
(label) bitmap_clear::@1
(label) bitmap_clear::@2
(label) bitmap_clear::@3
(label) bitmap_clear::@return
(byte*) bitmap_clear::bitmap
(byte*) bitmap_clear::bitmap#1 bitmap zp ZP_WORD:3 42.599999999999994
(byte*) bitmap_clear::bitmap#2 bitmap zp ZP_WORD:3 157.0
(byte*) bitmap_clear::bitmap#3 bitmap zp ZP_WORD:3 24.0
(byte*~) bitmap_clear::bitmap#5 bitmap zp ZP_WORD:3 4.0
(byte) bitmap_clear::x
(byte) bitmap_clear::x#1 reg byte x 151.5
(byte) bitmap_clear::x#2 reg byte x 67.33333333333333
(byte) bitmap_clear::y
(byte) bitmap_clear::y#1 y zp ZP_BYTE:2 16.5
(byte) bitmap_clear::y#4 y zp ZP_BYTE:2 3.6666666666666665
(void()) bitmap_init((byte*) bitmap_init::bitmap)
(byte~) bitmap_init::$3 $3 zp ZP_BYTE:2 11.0
(byte~) bitmap_init::$4 reg byte a 22.0
(byte~) bitmap_init::$5 reg byte a 22.0
(byte~) bitmap_init::$6 reg byte a 22.0
(byte~) bitmap_init::$7 reg byte a 22.0
(label) bitmap_init::@1
(label) bitmap_init::@10
(label) bitmap_init::@2
(label) bitmap_init::@3
(label) bitmap_init::@4
(label) bitmap_init::@7
(label) bitmap_init::@return
(byte*) bitmap_init::bitmap
(byte) bitmap_init::bits
(byte) bitmap_init::bits#1 reg byte a 11.0
(byte) bitmap_init::bits#3 reg byte a 16.5
(byte) bitmap_init::bits#4 reg byte a 7.333333333333333
(byte) bitmap_init::x
(byte) bitmap_init::x#1 reg byte x 16.5
(byte) bitmap_init::x#2 reg byte x 5.5
(byte) bitmap_init::y
(byte) bitmap_init::y#1 reg byte x 16.5
(byte) bitmap_init::y#2 reg byte x 6.0
(byte*) bitmap_init::yoffs
(byte*) bitmap_init::yoffs#1 yoffs zp ZP_WORD:3 22.0
(byte*) bitmap_init::yoffs#2 yoffs zp ZP_WORD:3 6.111111111111112
(byte*) bitmap_init::yoffs#4 yoffs zp ZP_WORD:3 11.0
(void()) bitmap_plot((word) bitmap_plot::x , (byte) bitmap_plot::y)
(word~) bitmap_plot::$1 $1 zp ZP_WORD:7 4.0
(byte~) bitmap_plot::$2 reg byte a 4.0
(word~) bitmap_plot::$3 $3 zp ZP_WORD:5 1.0
(label) bitmap_plot::@return
(byte*) bitmap_plot::plotter
(byte*) bitmap_plot::plotter#1 plotter zp ZP_WORD:5 3.0
(word) bitmap_plot::x
(word) bitmap_plot::x#0 x zp ZP_WORD:3 3.0
(byte) bitmap_plot::y
(byte) bitmap_plot::y#0 reg byte a 15.0
(byte[256]) bitmap_plot_bit
(const byte[256]) bitmap_plot_bit#0 bitmap_plot_bit = { fill( 256, 0) }
(byte[256]) bitmap_plot_yhi
(const byte[256]) bitmap_plot_yhi#0 bitmap_plot_yhi = { fill( 256, 0) }
(byte[256]) bitmap_plot_ylo
(const byte[256]) bitmap_plot_ylo#0 bitmap_plot_ylo = { fill( 256, 0) }
(byte[4]) delay
(const byte[4]) delay#0 delay = { fill( 4, 0) }
(void()) main()
(byte~) main::$9 reg byte y 11.0
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@14
(label) main::@15
(label) main::@3
(byte) main::i
(byte) main::i#1 reg byte x 16.5
(byte) main::i#2 reg byte x 7.857142857142857
(label) main::toD0181
(word~) main::toD0181_$0
(word~) main::toD0181_$1
(word~) main::toD0181_$2
(byte~) main::toD0181_$3
(word~) main::toD0181_$4
(byte~) main::toD0181_$5
(byte~) main::toD0181_$6
(byte~) main::toD0181_$7
(byte~) main::toD0181_$8
(byte*) main::toD0181_gfx
(byte) main::toD0181_return
(const byte) main::toD0181_return#0 toD0181_return = >((word))(const byte*) SCREEN#0&(word/signed word/dword/signed dword) 16383<<(byte/signed byte/word/signed word/dword/signed dword) 2|>((word))(const byte*) BITMAP#0>>(byte/signed byte/word/signed word/dword/signed dword) 2&(byte/signed byte/word/signed word/dword/signed dword) 15
(byte*) main::toD0181_screen
(label) main::vicSelectGfxBank1
(byte~) main::vicSelectGfxBank1_$0
(label) main::vicSelectGfxBank1_@1
(byte*) main::vicSelectGfxBank1_gfx
(label) main::vicSelectGfxBank1_toDd001
(word~) main::vicSelectGfxBank1_toDd001_$0
(byte~) main::vicSelectGfxBank1_toDd001_$1
(byte~) main::vicSelectGfxBank1_toDd001_$2
(byte/word/dword~) main::vicSelectGfxBank1_toDd001_$3
(byte*) main::vicSelectGfxBank1_toDd001_gfx
(byte) main::vicSelectGfxBank1_toDd001_return
(const byte) main::vicSelectGfxBank1_toDd001_return#0 vicSelectGfxBank1_toDd001_return = (byte/signed byte/word/signed word/dword/signed dword) 3^>((word))(const byte*) SCREEN#0>>(byte/signed byte/word/signed word/dword/signed dword) 6
(void()) point_init((byte) point_init::point_idx)
(word~) point_init::$0 $0 zp ZP_WORD:3 4.0
(byte~) point_init::$1 reg byte a 4.0
(word~) point_init::$2 $2 zp ZP_WORD:3 4.0
(word~) point_init::$3 $3 zp ZP_WORD:3 4.0
(byte~) point_init::$4 reg byte a 4.0
(label) point_init::@return
(byte) point_init::point_idx
(byte) point_init::point_idx#0 reg byte x 2.9999999999999996
(void()) screen_fill((byte*) screen_fill::screen , (byte) screen_fill::ch)
(label) screen_fill::@1
(label) screen_fill::@2
(label) screen_fill::@3
(label) screen_fill::@return
(byte) screen_fill::ch
(const byte) screen_fill::ch#0 ch = (byte/signed byte/word/signed word/dword/signed dword) 16
(byte*) screen_fill::screen
(byte*) screen_fill::screen#1 screen zp ZP_WORD:3 42.599999999999994
(byte*) screen_fill::screen#2 screen zp ZP_WORD:3 157.0
(byte*) screen_fill::screen#3 screen zp ZP_WORD:3 22.0
(byte) screen_fill::x
(byte) screen_fill::x#1 reg byte x 151.5
(byte) screen_fill::x#2 reg byte x 67.33333333333333
(byte) screen_fill::y
(byte) screen_fill::y#1 y zp ZP_BYTE:2 16.5
(byte) screen_fill::y#4 y zp ZP_BYTE:2 3.6666666666666665
(word[4]) x_cur
(const word[4]) x_cur#0 x_cur = { fill( 4, 0) }
(word[4]) x_start
(const word[4]) x_start#0 x_start = { (byte/signed byte/word/signed word/dword/signed dword) 10, (byte/signed byte/word/signed word/dword/signed dword) 20, (byte/signed byte/word/signed word/dword/signed dword) 30, (byte/signed byte/word/signed word/dword/signed dword) 30 }
(word[4]) y_cur
(const word[4]) y_cur#0 y_cur = { fill( 4, 0) }
(byte[4]) y_start
(const byte[4]) y_start#0 y_start = { (byte/signed byte/word/signed word/dword/signed dword) 10, (byte/signed byte/word/signed word/dword/signed dword) 10, (byte/signed byte/word/signed word/dword/signed dword) 10, (byte/signed byte/word/signed word/dword/signed dword) 20 }

reg byte x [ main::i#2 main::i#1 ]
zp ZP_BYTE:2 [ screen_fill::y#4 screen_fill::y#1 bitmap_clear::y#4 bitmap_clear::y#1 bitmap_init::$3 ]
zp ZP_WORD:3 [ screen_fill::screen#2 screen_fill::screen#3 screen_fill::screen#1 bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::$3 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 bitmap_plot::x#0 point_init::$0 point_init::$2 point_init::$3 ]
reg byte x [ screen_fill::x#2 screen_fill::x#1 ]
reg byte x [ bitmap_clear::x#2 bitmap_clear::x#1 ]
reg byte a [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
reg byte x [ bitmap_init::x#2 bitmap_init::x#1 ]
reg byte x [ bitmap_init::y#2 bitmap_init::y#1 ]
reg byte x [ point_init::point_idx#0 ]
reg byte y [ main::$9 ]
reg byte a [ bitmap_plot::y#0 ]
zp ZP_WORD:5 [ bitmap_plot::$3 bitmap_plot::plotter#1 ]
zp ZP_WORD:7 [ bitmap_plot::$1 ]
reg byte a [ bitmap_plot::$2 ]
reg byte a [ point_init::$1 ]
reg byte a [ point_init::$4 ]
reg byte a [ bitmap_init::$4 ]
reg byte a [ bitmap_init::$5 ]
reg byte a [ bitmap_init::$6 ]
reg byte a [ bitmap_init::$7 ]


FINAL ASSEMBLER
Score: 8510

//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label PROCPORT_DDR = 0
  .const PROCPORT_DDR_MEMORY_MASK = 7
  .label PROCPORT = 1
  .const PROCPORT_RAM_IO = $35
  .label BORDERCOL = $d020
  .label D011 = $d011
  .const VIC_BMM = $20
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  .label D018 = $d018
  .label CIA2_PORT_A = $dd00
  .label CIA2_PORT_A_DDR = $dd02
  .label BITMAP = $a000
  .label SCREEN = $8800
  .const DELAY = 8
//SEG2 @begin
//SEG3 [1] phi from @begin to @9 [phi:@begin->@9]
//SEG4 @9
//SEG5 [2] call main  [ ] ( )
  jsr main
//SEG6 [3] phi from @9 to @end [phi:@9->@end]
//SEG7 @end
//SEG8 main
main: {
    .const vicSelectGfxBank1_toDd001_return = 3^(>SCREEN)>>6
    .const toD0181_return = (>(SCREEN&$3fff)<<2)|(>BITMAP)>>2&$f
  //SEG9 asm { sei  }
    sei
  //SEG10 [5] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
  //SEG11 [6] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
  //SEG12 [7] *((const byte*) D011#0) ← (const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #VIC_BMM|VIC_DEN|VIC_RSEL|3
    sta D011
  //SEG13 main::vicSelectGfxBank1
  //SEG14 [8] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #3
    sta CIA2_PORT_A_DDR
  //SEG15 [9] phi from main::vicSelectGfxBank1 to main::vicSelectGfxBank1_toDd001 [phi:main::vicSelectGfxBank1->main::vicSelectGfxBank1_toDd001]
  //SEG16 main::vicSelectGfxBank1_toDd001
  //SEG17 main::vicSelectGfxBank1_@1
  //SEG18 [10] *((const byte*) CIA2_PORT_A#0) ← (const byte) main::vicSelectGfxBank1_toDd001_return#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #vicSelectGfxBank1_toDd001_return
    sta CIA2_PORT_A
  //SEG19 [11] phi from main::vicSelectGfxBank1_@1 to main::toD0181 [phi:main::vicSelectGfxBank1_@1->main::toD0181]
  //SEG20 main::toD0181
  //SEG21 main::@10
  //SEG22 [12] *((const byte*) D018#0) ← (const byte) main::toD0181_return#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #toD0181_return
    sta D018
  //SEG23 [13] call bitmap_init  [ ] ( main:2 [ ] )
  //SEG24 [64] phi from main::@10 to bitmap_init [phi:main::@10->bitmap_init]
    jsr bitmap_init
  //SEG25 [14] phi from main::@10 to main::@11 [phi:main::@10->main::@11]
  //SEG26 main::@11
  //SEG27 [15] call bitmap_clear  [ ] ( main:2 [ ] )
    jsr bitmap_clear
  //SEG28 [16] phi from main::@11 to main::@12 [phi:main::@11->main::@12]
  //SEG29 main::@12
  //SEG30 [17] call screen_fill  [ ] ( main:2 [ ] )
  //SEG31 [43] phi from main::@12 to screen_fill [phi:main::@12->screen_fill]
    jsr screen_fill
  //SEG32 [18] phi from main::@12 to main::@1 [phi:main::@12->main::@1]
  //SEG33 [18] phi (byte) main::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@12->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG34 [18] phi from main::@15 to main::@1 [phi:main::@15->main::@1]
  //SEG35 [18] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@15->main::@1#0] -- register_copy 
  //SEG36 main::@1
  b1:
  //SEG37 [19] (byte) point_init::point_idx#0 ← (byte) main::i#2 [ main::i#2 point_init::point_idx#0 ] ( main:2 [ main::i#2 point_init::point_idx#0 ] )
    // (byte) point_init::point_idx#0 = (byte) main::i#2  // register copy reg byte x
  //SEG38 [20] call point_init  [ main::i#2 ] ( main:2 [ main::i#2 ] )
    jsr point_init
  //SEG39 main::@14
  //SEG40 [21] (byte~) main::$9 ← (byte) main::i#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ main::i#2 main::$9 ] ( main:2 [ main::i#2 main::$9 ] ) -- vbuyy=vbuxx_ror_1 
    txa
    lsr
    tay
  //SEG41 [22] (word) bitmap_plot::x#0 ← *((const word[4]) x_start#0 + (byte) main::i#2) [ main::i#2 main::$9 bitmap_plot::x#0 ] ( main:2 [ main::i#2 main::$9 bitmap_plot::x#0 ] ) -- vwuz1=pwuc1_derefidx_vbuxx 
    lda x_start,x
    sta bitmap_plot.x
    lda x_start+1,x
    sta bitmap_plot.x+1
  //SEG42 [23] (byte) bitmap_plot::y#0 ← *((const byte[4]) y_start#0 + (byte~) main::$9) [ main::i#2 bitmap_plot::x#0 bitmap_plot::y#0 ] ( main:2 [ main::i#2 bitmap_plot::x#0 bitmap_plot::y#0 ] ) -- vbuaa=pbuc1_derefidx_vbuyy 
    lda y_start,y
  //SEG43 [24] call bitmap_plot  [ main::i#2 ] ( main:2 [ main::i#2 ] )
    jsr bitmap_plot
  //SEG44 main::@15
  //SEG45 [25] (byte) main::i#1 ← (byte) main::i#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ main::i#1 ] ( main:2 [ main::i#1 ] ) -- vbuxx=vbuxx_plus_2 
    inx
    inx
  //SEG46 [26] if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto main::@1 [ main::i#1 ] ( main:2 [ main::i#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne b1
  //SEG47 main::@3
  b3:
  //SEG48 [27] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) [ ] ( main:2 [ ] ) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
    jmp b3
}
//SEG49 bitmap_plot
bitmap_plot: {
    .label _1 = 7
    .label x = 3
    .label plotter = 5
    .label _3 = 5
  //SEG50 [28] (word~) bitmap_plot::$3 ← *((const byte[256]) bitmap_plot_yhi#0 + (byte) bitmap_plot::y#0) w= *((const byte[256]) bitmap_plot_ylo#0 + (byte) bitmap_plot::y#0) [ bitmap_plot::x#0 bitmap_plot::$3 ] ( main:2::bitmap_plot:24 [ main::i#2 bitmap_plot::x#0 bitmap_plot::$3 ] ) -- vwuz1=pbuc1_derefidx_vbuaa_word_pbuc2_derefidx_vbuaa 
    tay
    lda bitmap_plot_yhi,y
    sta _3+1
    lda bitmap_plot_ylo,y
    sta _3
  //SEG51 [29] (word~) bitmap_plot::$1 ← (word) bitmap_plot::x#0 & (word/dword/signed dword) 65528 [ bitmap_plot::x#0 bitmap_plot::$3 bitmap_plot::$1 ] ( main:2::bitmap_plot:24 [ main::i#2 bitmap_plot::x#0 bitmap_plot::$3 bitmap_plot::$1 ] ) -- vwuz1=vwuz2_band_vwuc1 
    lda x
    and #<$fff8
    sta _1
    lda x+1
    and #>$fff8
    sta _1+1
  //SEG52 [30] (byte*) bitmap_plot::plotter#1 ← (byte*)(word~) bitmap_plot::$3 + (word~) bitmap_plot::$1 [ bitmap_plot::x#0 bitmap_plot::plotter#1 ] ( main:2::bitmap_plot:24 [ main::i#2 bitmap_plot::x#0 bitmap_plot::plotter#1 ] ) -- pbuz1=pbuz1_plus_vwuz2 
    lda plotter
    clc
    adc _1
    sta plotter
    lda plotter+1
    adc _1+1
    sta plotter+1
  //SEG53 [31] (byte~) bitmap_plot::$2 ← < (word) bitmap_plot::x#0 [ bitmap_plot::plotter#1 bitmap_plot::$2 ] ( main:2::bitmap_plot:24 [ main::i#2 bitmap_plot::plotter#1 bitmap_plot::$2 ] ) -- vbuaa=_lo_vwuz1 
    lda x
  //SEG54 [32] *((byte*) bitmap_plot::plotter#1) ← *((byte*) bitmap_plot::plotter#1) | *((const byte[256]) bitmap_plot_bit#0 + (byte~) bitmap_plot::$2) [ ] ( main:2::bitmap_plot:24 [ main::i#2 ] ) -- _deref_pbuz1=_deref_pbuz1_bor_pbuc1_derefidx_vbuaa 
    tay
    lda bitmap_plot_bit,y
    ldy #0
    ora (plotter),y
    sta (plotter),y
  //SEG55 bitmap_plot::@return
  //SEG56 [33] return  [ ] ( main:2::bitmap_plot:24 [ main::i#2 ] )
    rts
}
//SEG57 point_init
point_init: {
    .label _0 = 3
    .label _2 = 3
    .label _3 = 3
  //SEG58 [34] (word~) point_init::$0 ← *((const word[4]) x_start#0 + (byte) point_init::point_idx#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 [ point_init::point_idx#0 point_init::$0 ] ( main:2::point_init:20 [ main::i#2 point_init::point_idx#0 point_init::$0 ] ) -- vwuz1=pwuc1_derefidx_vbuxx_rol_4 
    lda x_start,x
    sta _0
    lda x_start+1,x
    sta _0+1
    asl _0
    rol _0+1
    asl _0
    rol _0+1
    asl _0
    rol _0+1
    asl _0
    rol _0+1
  //SEG59 [35] *((const word[4]) x_cur#0 + (byte) point_init::point_idx#0) ← (word~) point_init::$0 [ point_init::point_idx#0 ] ( main:2::point_init:20 [ main::i#2 point_init::point_idx#0 ] ) -- pwuc1_derefidx_vbuxx=vwuz1 
    lda _0
    sta x_cur,x
    lda _0+1
    sta x_cur+1,x
  //SEG60 [36] (byte~) point_init::$1 ← (byte) point_init::point_idx#0 >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ point_init::point_idx#0 point_init::$1 ] ( main:2::point_init:20 [ main::i#2 point_init::point_idx#0 point_init::$1 ] ) -- vbuaa=vbuxx_ror_1 
    txa
    lsr
  //SEG61 [37] (word~) point_init::$2 ← ((word)) *((const byte[4]) y_start#0 + (byte~) point_init::$1) [ point_init::point_idx#0 point_init::$2 ] ( main:2::point_init:20 [ main::i#2 point_init::point_idx#0 point_init::$2 ] ) -- vwuz1=_word_pbuc1_derefidx_vbuaa 
    tay
    lda y_start,y
    sta _2
    lda #0
    sta _2+1
  //SEG62 [38] (word~) point_init::$3 ← (word~) point_init::$2 << (byte/signed byte/word/signed word/dword/signed dword) 4 [ point_init::point_idx#0 point_init::$3 ] ( main:2::point_init:20 [ main::i#2 point_init::point_idx#0 point_init::$3 ] ) -- vwuz1=vwuz1_rol_4 
    asl _3
    rol _3+1
    asl _3
    rol _3+1
    asl _3
    rol _3+1
    asl _3
    rol _3+1
  //SEG63 [39] *((const word[4]) y_cur#0 + (byte) point_init::point_idx#0) ← (word~) point_init::$3 [ point_init::point_idx#0 ] ( main:2::point_init:20 [ main::i#2 point_init::point_idx#0 ] ) -- pwuc1_derefidx_vbuxx=vwuz1 
    lda _3
    sta y_cur,x
    lda _3+1
    sta y_cur+1,x
  //SEG64 [40] (byte~) point_init::$4 ← (byte) point_init::point_idx#0 >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ point_init::$4 ] ( main:2::point_init:20 [ main::i#2 point_init::$4 ] ) -- vbuaa=vbuxx_ror_1 
    txa
    lsr
  //SEG65 [41] *((const byte[4]) delay#0 + (byte~) point_init::$4) ← (const byte) DELAY#0 [ ] ( main:2::point_init:20 [ main::i#2 ] ) -- pbuc1_derefidx_vbuaa=vbuc2 
    tay
    lda #DELAY
    sta delay,y
  //SEG66 point_init::@return
  //SEG67 [42] return  [ ] ( main:2::point_init:20 [ main::i#2 ] )
    rts
}
//SEG68 screen_fill
screen_fill: {
    .const ch = $10
    .label screen = 3
    .label y = 2
  //SEG69 [44] phi from screen_fill to screen_fill::@1 [phi:screen_fill->screen_fill::@1]
  //SEG70 [44] phi (byte) screen_fill::y#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:screen_fill->screen_fill::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta y
  //SEG71 [44] phi (byte*) screen_fill::screen#3 = (const byte*) SCREEN#0 [phi:screen_fill->screen_fill::@1#1] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta screen
    lda #>SCREEN
    sta screen+1
  //SEG72 [44] phi from screen_fill::@3 to screen_fill::@1 [phi:screen_fill::@3->screen_fill::@1]
  //SEG73 [44] phi (byte) screen_fill::y#4 = (byte) screen_fill::y#1 [phi:screen_fill::@3->screen_fill::@1#0] -- register_copy 
  //SEG74 [44] phi (byte*) screen_fill::screen#3 = (byte*) screen_fill::screen#1 [phi:screen_fill::@3->screen_fill::@1#1] -- register_copy 
  //SEG75 screen_fill::@1
  b1:
  //SEG76 [45] phi from screen_fill::@1 to screen_fill::@2 [phi:screen_fill::@1->screen_fill::@2]
  //SEG77 [45] phi (byte) screen_fill::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:screen_fill::@1->screen_fill::@2#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG78 [45] phi (byte*) screen_fill::screen#2 = (byte*) screen_fill::screen#3 [phi:screen_fill::@1->screen_fill::@2#1] -- register_copy 
  //SEG79 [45] phi from screen_fill::@2 to screen_fill::@2 [phi:screen_fill::@2->screen_fill::@2]
  //SEG80 [45] phi (byte) screen_fill::x#2 = (byte) screen_fill::x#1 [phi:screen_fill::@2->screen_fill::@2#0] -- register_copy 
  //SEG81 [45] phi (byte*) screen_fill::screen#2 = (byte*) screen_fill::screen#1 [phi:screen_fill::@2->screen_fill::@2#1] -- register_copy 
  //SEG82 screen_fill::@2
  b2:
  //SEG83 [46] *((byte*) screen_fill::screen#2) ← (const byte) screen_fill::ch#0 [ screen_fill::y#4 screen_fill::screen#2 screen_fill::x#2 ] ( main:2::screen_fill:17 [ screen_fill::y#4 screen_fill::screen#2 screen_fill::x#2 ] ) -- _deref_pbuz1=vbuc1 
    lda #ch
    ldy #0
    sta (screen),y
  //SEG84 [47] (byte*) screen_fill::screen#1 ← ++ (byte*) screen_fill::screen#2 [ screen_fill::y#4 screen_fill::screen#1 screen_fill::x#2 ] ( main:2::screen_fill:17 [ screen_fill::y#4 screen_fill::screen#1 screen_fill::x#2 ] ) -- pbuz1=_inc_pbuz1 
    inc screen
    bne !+
    inc screen+1
  !:
  //SEG85 [48] (byte) screen_fill::x#1 ← ++ (byte) screen_fill::x#2 [ screen_fill::y#4 screen_fill::screen#1 screen_fill::x#1 ] ( main:2::screen_fill:17 [ screen_fill::y#4 screen_fill::screen#1 screen_fill::x#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG86 [49] if((byte) screen_fill::x#1!=(byte/signed byte/word/signed word/dword/signed dword) 40) goto screen_fill::@2 [ screen_fill::y#4 screen_fill::screen#1 screen_fill::x#1 ] ( main:2::screen_fill:17 [ screen_fill::y#4 screen_fill::screen#1 screen_fill::x#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b2
  //SEG87 screen_fill::@3
  //SEG88 [50] (byte) screen_fill::y#1 ← ++ (byte) screen_fill::y#4 [ screen_fill::screen#1 screen_fill::y#1 ] ( main:2::screen_fill:17 [ screen_fill::screen#1 screen_fill::y#1 ] ) -- vbuz1=_inc_vbuz1 
    inc y
  //SEG89 [51] if((byte) screen_fill::y#1!=(byte/signed byte/word/signed word/dword/signed dword) 25) goto screen_fill::@1 [ screen_fill::screen#1 screen_fill::y#1 ] ( main:2::screen_fill:17 [ screen_fill::screen#1 screen_fill::y#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda y
    cmp #$19
    bne b1
  //SEG90 screen_fill::@return
  //SEG91 [52] return  [ ] ( main:2::screen_fill:17 [ ] )
    rts
}
//SEG92 bitmap_clear
bitmap_clear: {
    .label bitmap = 3
    .label y = 2
    .label _3 = 3
  //SEG93 [53] (word~) bitmap_clear::$3 ← *((const byte[256]) bitmap_plot_yhi#0+(byte/signed byte/word/signed word/dword/signed dword) 0) w= *((const byte[256]) bitmap_plot_ylo#0+(byte/signed byte/word/signed word/dword/signed dword) 0) [ bitmap_clear::$3 ] ( main:2::bitmap_clear:15 [ bitmap_clear::$3 ] ) -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda bitmap_plot_ylo+0
    sta _3
    lda bitmap_plot_yhi+0
    sta _3+1
  //SEG94 [54] (byte*~) bitmap_clear::bitmap#5 ← (byte*)(word~) bitmap_clear::$3 [ bitmap_clear::bitmap#5 ] ( main:2::bitmap_clear:15 [ bitmap_clear::bitmap#5 ] )
    // (byte*~) bitmap_clear::bitmap#5 = (byte*)(word~) bitmap_clear::$3  // register copy zp ZP_WORD:3
  //SEG95 [55] phi from bitmap_clear to bitmap_clear::@1 [phi:bitmap_clear->bitmap_clear::@1]
  //SEG96 [55] phi (byte) bitmap_clear::y#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_clear->bitmap_clear::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta y
  //SEG97 [55] phi (byte*) bitmap_clear::bitmap#3 = (byte*~) bitmap_clear::bitmap#5 [phi:bitmap_clear->bitmap_clear::@1#1] -- register_copy 
  //SEG98 [55] phi from bitmap_clear::@3 to bitmap_clear::@1 [phi:bitmap_clear::@3->bitmap_clear::@1]
  //SEG99 [55] phi (byte) bitmap_clear::y#4 = (byte) bitmap_clear::y#1 [phi:bitmap_clear::@3->bitmap_clear::@1#0] -- register_copy 
  //SEG100 [55] phi (byte*) bitmap_clear::bitmap#3 = (byte*) bitmap_clear::bitmap#1 [phi:bitmap_clear::@3->bitmap_clear::@1#1] -- register_copy 
  //SEG101 bitmap_clear::@1
  b1:
  //SEG102 [56] phi from bitmap_clear::@1 to bitmap_clear::@2 [phi:bitmap_clear::@1->bitmap_clear::@2]
  //SEG103 [56] phi (byte) bitmap_clear::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_clear::@1->bitmap_clear::@2#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG104 [56] phi (byte*) bitmap_clear::bitmap#2 = (byte*) bitmap_clear::bitmap#3 [phi:bitmap_clear::@1->bitmap_clear::@2#1] -- register_copy 
  //SEG105 [56] phi from bitmap_clear::@2 to bitmap_clear::@2 [phi:bitmap_clear::@2->bitmap_clear::@2]
  //SEG106 [56] phi (byte) bitmap_clear::x#2 = (byte) bitmap_clear::x#1 [phi:bitmap_clear::@2->bitmap_clear::@2#0] -- register_copy 
  //SEG107 [56] phi (byte*) bitmap_clear::bitmap#2 = (byte*) bitmap_clear::bitmap#1 [phi:bitmap_clear::@2->bitmap_clear::@2#1] -- register_copy 
  //SEG108 bitmap_clear::@2
  b2:
  //SEG109 [57] *((byte*) bitmap_clear::bitmap#2) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ bitmap_clear::y#4 bitmap_clear::bitmap#2 bitmap_clear::x#2 ] ( main:2::bitmap_clear:15 [ bitmap_clear::y#4 bitmap_clear::bitmap#2 bitmap_clear::x#2 ] ) -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (bitmap),y
  //SEG110 [58] (byte*) bitmap_clear::bitmap#1 ← ++ (byte*) bitmap_clear::bitmap#2 [ bitmap_clear::y#4 bitmap_clear::bitmap#1 bitmap_clear::x#2 ] ( main:2::bitmap_clear:15 [ bitmap_clear::y#4 bitmap_clear::bitmap#1 bitmap_clear::x#2 ] ) -- pbuz1=_inc_pbuz1 
    inc bitmap
    bne !+
    inc bitmap+1
  !:
  //SEG111 [59] (byte) bitmap_clear::x#1 ← ++ (byte) bitmap_clear::x#2 [ bitmap_clear::y#4 bitmap_clear::bitmap#1 bitmap_clear::x#1 ] ( main:2::bitmap_clear:15 [ bitmap_clear::y#4 bitmap_clear::bitmap#1 bitmap_clear::x#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG112 [60] if((byte) bitmap_clear::x#1!=(byte/word/signed word/dword/signed dword) 200) goto bitmap_clear::@2 [ bitmap_clear::y#4 bitmap_clear::bitmap#1 bitmap_clear::x#1 ] ( main:2::bitmap_clear:15 [ bitmap_clear::y#4 bitmap_clear::bitmap#1 bitmap_clear::x#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #$c8
    bne b2
  //SEG113 bitmap_clear::@3
  //SEG114 [61] (byte) bitmap_clear::y#1 ← ++ (byte) bitmap_clear::y#4 [ bitmap_clear::bitmap#1 bitmap_clear::y#1 ] ( main:2::bitmap_clear:15 [ bitmap_clear::bitmap#1 bitmap_clear::y#1 ] ) -- vbuz1=_inc_vbuz1 
    inc y
  //SEG115 [62] if((byte) bitmap_clear::y#1!=(byte/signed byte/word/signed word/dword/signed dword) 40) goto bitmap_clear::@1 [ bitmap_clear::bitmap#1 bitmap_clear::y#1 ] ( main:2::bitmap_clear:15 [ bitmap_clear::bitmap#1 bitmap_clear::y#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda y
    cmp #$28
    bne b1
  //SEG116 bitmap_clear::@return
  //SEG117 [63] return  [ ] ( main:2::bitmap_clear:15 [ ] )
    rts
}
//SEG118 bitmap_init
bitmap_init: {
    .label _3 = 2
    .label yoffs = 3
  //SEG119 [65] phi from bitmap_init to bitmap_init::@1 [phi:bitmap_init->bitmap_init::@1]
  //SEG120 [65] phi (byte) bitmap_init::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_init->bitmap_init::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG121 [65] phi (byte) bitmap_init::bits#3 = (byte/word/signed word/dword/signed dword) 128 [phi:bitmap_init->bitmap_init::@1#1] -- vbuaa=vbuc1 
    lda #$80
  //SEG122 [65] phi from bitmap_init::@2 to bitmap_init::@1 [phi:bitmap_init::@2->bitmap_init::@1]
  //SEG123 [65] phi (byte) bitmap_init::x#2 = (byte) bitmap_init::x#1 [phi:bitmap_init::@2->bitmap_init::@1#0] -- register_copy 
  //SEG124 [65] phi (byte) bitmap_init::bits#3 = (byte) bitmap_init::bits#4 [phi:bitmap_init::@2->bitmap_init::@1#1] -- register_copy 
  //SEG125 bitmap_init::@1
  b1:
  //SEG126 [66] *((const byte[256]) bitmap_plot_bit#0 + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3 [ bitmap_init::bits#3 bitmap_init::x#2 ] ( main:2::bitmap_init:13 [ bitmap_init::bits#3 bitmap_init::x#2 ] ) -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_bit,x
  //SEG127 [67] (byte) bitmap_init::bits#1 ← (byte) bitmap_init::bits#3 >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ bitmap_init::x#2 bitmap_init::bits#1 ] ( main:2::bitmap_init:13 [ bitmap_init::x#2 bitmap_init::bits#1 ] ) -- vbuaa=vbuaa_ror_1 
    lsr
  //SEG128 [68] if((byte) bitmap_init::bits#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@10 [ bitmap_init::x#2 bitmap_init::bits#1 ] ( main:2::bitmap_init:13 [ bitmap_init::x#2 bitmap_init::bits#1 ] ) -- vbuaa_neq_0_then_la1 
    cmp #0
    bne b2
  //SEG129 [69] phi from bitmap_init::@1 to bitmap_init::@2 [phi:bitmap_init::@1->bitmap_init::@2]
  //SEG130 [69] phi (byte) bitmap_init::bits#4 = (byte/word/signed word/dword/signed dword) 128 [phi:bitmap_init::@1->bitmap_init::@2#0] -- vbuaa=vbuc1 
    lda #$80
  //SEG131 bitmap_init::@2
  b2:
  //SEG132 [70] (byte) bitmap_init::x#1 ← ++ (byte) bitmap_init::x#2 [ bitmap_init::bits#4 bitmap_init::x#1 ] ( main:2::bitmap_init:13 [ bitmap_init::bits#4 bitmap_init::x#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG133 [71] if((byte) bitmap_init::x#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@1 [ bitmap_init::bits#4 bitmap_init::x#1 ] ( main:2::bitmap_init:13 [ bitmap_init::bits#4 bitmap_init::x#1 ] ) -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b1
  //SEG134 [72] phi from bitmap_init::@2 to bitmap_init::@3 [phi:bitmap_init::@2->bitmap_init::@3]
  //SEG135 [72] phi (byte*) bitmap_init::yoffs#2 = (const byte*) BITMAP#0 [phi:bitmap_init::@2->bitmap_init::@3#0] -- pbuz1=pbuc1 
    lda #<BITMAP
    sta yoffs
    lda #>BITMAP
    sta yoffs+1
  //SEG136 [72] phi (byte) bitmap_init::y#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_init::@2->bitmap_init::@3#1] -- vbuxx=vbuc1 
    ldx #0
  //SEG137 [72] phi from bitmap_init::@4 to bitmap_init::@3 [phi:bitmap_init::@4->bitmap_init::@3]
  //SEG138 [72] phi (byte*) bitmap_init::yoffs#2 = (byte*) bitmap_init::yoffs#4 [phi:bitmap_init::@4->bitmap_init::@3#0] -- register_copy 
  //SEG139 [72] phi (byte) bitmap_init::y#2 = (byte) bitmap_init::y#1 [phi:bitmap_init::@4->bitmap_init::@3#1] -- register_copy 
  //SEG140 bitmap_init::@3
  b3:
  //SEG141 [73] (byte~) bitmap_init::$3 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$3 ] ( main:2::bitmap_init:13 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$3 ] ) -- vbuz1=vbuxx_band_vbuc1 
    txa
    and #7
    sta _3
  //SEG142 [74] (byte~) bitmap_init::$4 ← < (byte*) bitmap_init::yoffs#2 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$3 bitmap_init::$4 ] ( main:2::bitmap_init:13 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$3 bitmap_init::$4 ] ) -- vbuaa=_lo_pbuz1 
    lda yoffs
  //SEG143 [75] (byte~) bitmap_init::$5 ← (byte~) bitmap_init::$3 | (byte~) bitmap_init::$4 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$5 ] ( main:2::bitmap_init:13 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$5 ] ) -- vbuaa=vbuz1_bor_vbuaa 
    ora _3
  //SEG144 [76] *((const byte[256]) bitmap_plot_ylo#0 + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$5 [ bitmap_init::y#2 bitmap_init::yoffs#2 ] ( main:2::bitmap_init:13 [ bitmap_init::y#2 bitmap_init::yoffs#2 ] ) -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_ylo,x
  //SEG145 [77] (byte~) bitmap_init::$6 ← > (byte*) bitmap_init::yoffs#2 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$6 ] ( main:2::bitmap_init:13 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$6 ] ) -- vbuaa=_hi_pbuz1 
    lda yoffs+1
  //SEG146 [78] *((const byte[256]) bitmap_plot_yhi#0 + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$6 [ bitmap_init::y#2 bitmap_init::yoffs#2 ] ( main:2::bitmap_init:13 [ bitmap_init::y#2 bitmap_init::yoffs#2 ] ) -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_yhi,x
  //SEG147 [79] (byte~) bitmap_init::$7 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$7 ] ( main:2::bitmap_init:13 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$7 ] ) -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #7
  //SEG148 [80] if((byte~) bitmap_init::$7!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto bitmap_init::@4 [ bitmap_init::y#2 bitmap_init::yoffs#2 ] ( main:2::bitmap_init:13 [ bitmap_init::y#2 bitmap_init::yoffs#2 ] ) -- vbuaa_neq_vbuc1_then_la1 
    cmp #7
    bne b4
  //SEG149 bitmap_init::@7
  //SEG150 [81] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (byte/signed byte/word/signed word/dword/signed dword) 40*(byte/signed byte/word/signed word/dword/signed dword) 8 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] ( main:2::bitmap_init:13 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] ) -- pbuz1=pbuz1_plus_vwuc1 
    clc
    lda yoffs
    adc #<$28*8
    sta yoffs
    lda yoffs+1
    adc #>$28*8
    sta yoffs+1
  //SEG151 [82] phi from bitmap_init::@3 bitmap_init::@7 to bitmap_init::@4 [phi:bitmap_init::@3/bitmap_init::@7->bitmap_init::@4]
  //SEG152 [82] phi (byte*) bitmap_init::yoffs#4 = (byte*) bitmap_init::yoffs#2 [phi:bitmap_init::@3/bitmap_init::@7->bitmap_init::@4#0] -- register_copy 
  //SEG153 bitmap_init::@4
  b4:
  //SEG154 [83] (byte) bitmap_init::y#1 ← ++ (byte) bitmap_init::y#2 [ bitmap_init::y#1 bitmap_init::yoffs#4 ] ( main:2::bitmap_init:13 [ bitmap_init::y#1 bitmap_init::yoffs#4 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG155 [84] if((byte) bitmap_init::y#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@3 [ bitmap_init::y#1 bitmap_init::yoffs#4 ] ( main:2::bitmap_init:13 [ bitmap_init::y#1 bitmap_init::yoffs#4 ] ) -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b3
  //SEG156 bitmap_init::@return
  //SEG157 [85] return  [ ] ( main:2::bitmap_init:13 [ ] )
    rts
  //SEG158 [86] phi from bitmap_init::@1 to bitmap_init::@10 [phi:bitmap_init::@1->bitmap_init::@10]
  //SEG159 bitmap_init::@10
  //SEG160 [69] phi from bitmap_init::@10 to bitmap_init::@2 [phi:bitmap_init::@10->bitmap_init::@2]
  //SEG161 [69] phi (byte) bitmap_init::bits#4 = (byte) bitmap_init::bits#1 [phi:bitmap_init::@10->bitmap_init::@2#0] -- register_copy 
}
  x_start: .word $a, $14, $1e, $1e
  y_start: .byte $a, $a, $a, $14
  x_cur: .fill 8, 0
  y_cur: .fill 8, 0
  delay: .fill 4, 0
  bitmap_plot_ylo: .fill $100, 0
  bitmap_plot_yhi: .fill $100, 0
  bitmap_plot_bit: .fill $100, 0

