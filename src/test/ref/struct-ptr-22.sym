constant byte RADIX::BINARY = 2
constant byte RADIX::DECIMAL = $a
constant byte RADIX::HEXADECIMAL = $10
constant byte RADIX::OCTAL = 8
struct fileentry* file
constant struct fileentry* files[$a]  = { fill( $a, 0) }
signed word main()
byte*~ main::$13 zp[2]:6 4.0
signed word main::return
constant byte* main::str[7]  = "$0000="
constant byte* main::str1[7]  = "$4004="
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
constant byte memset::c#0 c = ' '
byte* memset::dst
byte* memset::dst#1 dst zp[2]:2 2002.0
byte* memset::dst#2 dst zp[2]:2 1334.6666666666667
byte* memset::end
constant byte* memset::end#0 end = (byte*)memset::str#0+memset::num#0
word memset::num
constant word memset::num#0 num = $3e8
void* memset::return
void* memset::str
constant void* memset::str#0 str = (void*)print_screen#0
void print_char(byte print_char::ch)
byte print_char::ch
byte print_char::ch#0 reg byte a 202.0
byte print_char::ch#1 reg byte a 22.0
byte print_char::ch#2 reg byte a 22.0
byte print_char::ch#3 reg byte a 1124.0
byte* print_char_cursor
byte* print_char_cursor#1 print_char_cursor zp[2]:4 20.363636363636363
byte* print_char_cursor#29 print_char_cursor zp[2]:4 1062.5
byte* print_char_cursor#30 print_char_cursor zp[2]:4 71.41176470588235
byte* print_char_cursor#48 print_char_cursor zp[2]:4 13.0
byte* print_char_cursor#49 print_char_cursor zp[2]:4 4.0
void print_cls()
constant const byte* print_hextab[]  = "0123456789abcdef"z
byte* print_line_cursor
byte* print_line_cursor#0 print_line_cursor zp[2]:6 34.11111111111111
byte* print_line_cursor#11 print_line_cursor zp[2]:6 213.0
byte* print_line_cursor#21 print_line_cursor zp[2]:6 13.0
void print_ln()
byte* print_screen
constant byte* print_screen#0 print_screen = (byte*) 1024
void print_str(byte* print_str::str)
byte* print_str::str
byte* print_str::str#0 str zp[2]:2 202.0
byte* print_str::str#3 str zp[2]:2 103.75
byte* print_str::str#6 str zp[2]:2 11.0
void print_uchar(byte print_uchar::b)
byte~ print_uchar::$0 reg byte a 22.0
byte~ print_uchar::$2 reg byte x 22.0
byte print_uchar::b
byte print_uchar::b#0 reg byte x 4.0
byte print_uchar::b#1 reg byte x 4.0
byte print_uchar::b#2 reg byte x 6.5

reg byte x [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
zp[2]:2 [ memset::dst#2 memset::dst#1 print_str::str#3 print_str::str#6 print_str::str#0 ]
reg byte a [ print_char::ch#3 print_char::ch#0 print_char::ch#1 print_char::ch#2 ]
zp[2]:4 [ print_char_cursor#29 print_char_cursor#1 print_char_cursor#48 print_char_cursor#49 print_char_cursor#30 ]
zp[2]:6 [ main::$13 print_line_cursor#11 print_line_cursor#21 print_line_cursor#0 ]
reg byte a [ print_uchar::$0 ]
reg byte x [ print_uchar::$2 ]
