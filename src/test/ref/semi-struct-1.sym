constant const byte NUM_POINTS = 4
constant byte RADIX::BINARY = 2
constant byte RADIX::DECIMAL = $a
constant byte RADIX::HEXADECIMAL = $10
constant byte RADIX::OCTAL = 8
constant const byte SIZEOF_POINT = 2
void init_points()
byte~ init_points::getPoint1_$0 reg byte y 101.0
byte init_points::getPoint1_idx
byte* init_points::getPoint1_return
byte* init_points::getPoint1_return#0 getPoint1_return zp[2]:7 40.4
byte init_points::i
byte init_points::i#1 reg byte x 151.5
byte init_points::i#10 reg byte x 33.666666666666664
byte* init_points::point
byte* init_points::pointXpos1_point
byte* init_points::pointXpos1_return
byte* init_points::pointYpos1_point
byte* init_points::pointYpos1_return
byte init_points::pos
byte init_points::pos#1 reg byte a 101.0
byte init_points::pos#10 pos zp[1]:2 60.599999999999994
byte init_points::pos#2 pos zp[1]:2 67.33333333333333
void main()
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
constant byte memset::c#0 c = ' '
byte* memset::dst
byte* memset::dst#1 dst zp[2]:3 20002.0
byte* memset::dst#2 dst zp[2]:3 13334.666666666666
byte* memset::end
constant byte* memset::end#0 end = (byte*)memset::str#0+memset::num#0
word memset::num
constant word memset::num#0 num = $3e8
void* memset::return
void* memset::str
constant void* memset::str#0 str = (void*)print_screen#0
constant byte* points[NUM_POINTS*SIZEOF_POINT]  = { fill( NUM_POINTS*SIZEOF_POINT, 0) }
void print_char(byte print_char::ch)
byte print_char::ch
byte print_char::ch#0 reg byte a 200002.0
byte print_char::ch#1 reg byte a 2002.0
byte print_char::ch#2 reg byte a 2002.0
byte print_char::ch#3 reg byte a 1102004.0
byte* print_char_cursor
byte* print_char_cursor#29 print_char_cursor zp[2]:5 1051002.5
byte* print_char_cursor#30 print_char_cursor zp[2]:5 48044.2
byte* print_char_cursor#45 print_char_cursor zp[2]:5 401.0
byte* print_char_cursor#48 print_char_cursor zp[2]:5 40.4
byte* print_char_cursor#66 print_char_cursor zp[2]:5 202.0
void print_cls()
constant const byte* print_hextab[]  = "0123456789abcdef"z
byte* print_line_cursor
byte* print_line_cursor#0 print_line_cursor zp[2]:7 42886.42857142857
byte* print_line_cursor#12 print_line_cursor zp[2]:7 201003.0
byte* print_line_cursor#26 print_line_cursor zp[2]:7 84.76923076923077
void print_ln()
void print_points()
byte~ print_points::getPoint1_$0 reg byte y 101.0
byte print_points::getPoint1_idx
byte* print_points::getPoint1_return
byte print_points::i
byte print_points::i#1 i zp[1]:2 101.0
byte print_points::i#10 i zp[1]:2 23.307692307692307
byte* print_points::point
byte* print_points::point#0 point zp[2]:9 28.857142857142858
byte* print_points::pointXpos1_point
byte* print_points::pointXpos1_return
byte* print_points::pointYpos1_point
byte* print_points::pointYpos1_return
constant byte* print_points::str[2]  = " "
byte* print_screen
constant byte* print_screen#0 print_screen = (byte*) 1024
void print_str(byte* print_str::str)
byte* print_str::str
byte* print_str::str#0 str zp[2]:3 200002.0
byte* print_str::str#2 str zp[2]:3 100001.0
void print_uchar(byte print_uchar::b)
byte~ print_uchar::$0 reg byte a 2002.0
byte~ print_uchar::$2 reg byte x 2002.0
byte print_uchar::b
byte print_uchar::b#0 reg byte x 202.0
byte print_uchar::b#1 reg byte x 202.0
byte print_uchar::b#2 reg byte x 551.0

reg byte x [ init_points::i#10 init_points::i#1 ]
zp[1]:2 [ print_points::i#10 print_points::i#1 init_points::pos#10 init_points::pos#2 ]
reg byte x [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
zp[2]:3 [ memset::dst#2 memset::dst#1 print_str::str#2 print_str::str#0 ]
reg byte a [ print_char::ch#3 print_char::ch#0 print_char::ch#1 print_char::ch#2 ]
zp[2]:5 [ print_char_cursor#29 print_char_cursor#45 print_char_cursor#48 print_char_cursor#66 print_char_cursor#30 ]
reg byte y [ init_points::getPoint1_$0 ]
zp[2]:7 [ init_points::getPoint1_return#0 print_line_cursor#12 print_line_cursor#26 print_line_cursor#0 ]
reg byte a [ init_points::pos#1 ]
reg byte y [ print_points::getPoint1_$0 ]
zp[2]:9 [ print_points::point#0 ]
reg byte a [ print_uchar::$0 ]
reg byte x [ print_uchar::$2 ]
