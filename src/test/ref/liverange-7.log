Inlined call call __init 

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  idx#20 = phi( __start::@1/idx#19 )
  main::c#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  idx#17 = phi( main/idx#20, main::@2/idx#0 )
  main::c#2 = phi( main/main::c#0, main::@2/main::c#1 )
  out2::c#0 = main::c#2
  call out2 
  to:main::@2
main::@2: scope:[main]  from main::@1
  main::c#3 = phi( main::@1/main::c#2 )
  idx#9 = phi( main::@1/idx#3 )
  idx#0 = idx#9
  main::c#1 = main::c#3 + rangenext(0,$27)
  main::$1 = main::c#1 != rangelast(0,$27)
  if(main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  idx#10 = phi( main::@2/idx#0 )
  idx#1 = idx#10
  return 
  to:@return

void out2(byte out2::c)
out2: scope:[out2]  from main::@1
  idx#18 = phi( main::@1/idx#17 )
  out2::c#1 = phi( main::@1/out2::c#0 )
  out::c#0 = out2::c#1
  call out 
  to:out2::@1
out2::@1: scope:[out2]  from out2
  idx#11 = phi( out2/idx#5 )
  idx#2 = idx#11
  to:out2::@return
out2::@return: scope:[out2]  from out2::@1
  idx#12 = phi( out2::@1/idx#2 )
  idx#3 = idx#12
  return 
  to:@return

void out(byte out::c)
out: scope:[out]  from out2
  out::c#1 = phi( out2/out::c#0 )
  idx#13 = phi( out2/idx#18 )
  idx#4 = ++ idx#13
  SCREEN[idx#4] = out::c#1
  to:out::@return
out::@return: scope:[out]  from out
  idx#14 = phi( out/idx#4 )
  idx#5 = idx#14
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  idx#6 = 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  idx#19 = phi( __start::__init1/idx#6 )
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  idx#15 = phi( __start::@1/idx#1 )
  idx#7 = idx#15
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  idx#16 = phi( __start::@2/idx#7 )
  idx#8 = idx#16
  return 
  to:@return

SYMBOL TABLE SSA
const nomodify byte* SCREEN = (byte*)$400
void __start()
byte idx
byte idx#0
byte idx#1
byte idx#10
byte idx#11
byte idx#12
byte idx#13
byte idx#14
byte idx#15
byte idx#16
byte idx#17
byte idx#18
byte idx#19
byte idx#2
byte idx#20
byte idx#3
byte idx#4
byte idx#5
byte idx#6
byte idx#7
byte idx#8
byte idx#9
void main()
bool~ main::$1
byte main::c
byte main::c#0
byte main::c#1
byte main::c#2
byte main::c#3
void out(byte out::c)
byte out::c
byte out::c#0
byte out::c#1
void out2(byte out2::c)
byte out2::c
byte out2::c#0
byte out2::c#1

Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Alias main::c#2 = main::c#3 
Alias idx#0 = idx#9 idx#10 idx#1 
Alias idx#11 = idx#2 idx#12 idx#3 
Alias idx#14 = idx#4 idx#5 
Alias idx#19 = idx#6 
Alias idx#15 = idx#7 idx#16 idx#8 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values idx#20 idx#19
Identical Phi Values idx#0 idx#11
Identical Phi Values out2::c#1 out2::c#0
Identical Phi Values idx#18 idx#17
Identical Phi Values idx#11 idx#14
Identical Phi Values idx#13 idx#18
Identical Phi Values out::c#1 out::c#0
Identical Phi Values idx#15 idx#0
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition main::$1 [8] if(main::c#1!=rangelast(0,$27)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::c#0 = 0
Constant idx#19 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [6] main::c#1 = ++ main::c#2 to ++
Resolved ranged comparison value [8] if(main::c#1!=rangelast(0,$27)) goto main::@1 to $28
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) $28 in [4] if(main::c#1!=$28) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $28
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $28
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings main::c#0
Inlining constant with var siblings idx#19
Constant inlined main::c#0 = 0
Constant inlined idx#19 = 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@3(between main::@2 and main::@1)
Adding NOP phi() at start of main
Adding NOP phi() at start of out2::@1
CALL GRAPH
Calls in [main] to out2:3 
Calls in [out2] to out:10 

Created 2 initial phi equivalence classes
Coalesced [7] main::c#4 = main::c#1
Coalesced [8] idx#21 = idx#14
Coalesced down to 2 phi equivalence classes
Culled Empty Block label main::@3
Culled Empty Block label out2::@1
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [1] idx#17 = phi( main/0, main::@2/idx#14 )
  [1] main::c#2 = phi( main/0, main::@2/main::c#1 )
  [2] out2::c#0 = main::c#2
  [3] call out2 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [4] main::c#1 = ++ main::c#2
  [5] if(main::c#1!=$28) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  [6] return 
  to:@return

void out2(byte out2::c)
out2: scope:[out2]  from main::@1
  [7] out::c#0 = out2::c#0
  [8] call out 
  to:out2::@return
out2::@return: scope:[out2]  from out2
  [9] return 
  to:@return

void out(byte out::c)
out: scope:[out]  from out2
  [10] idx#14 = ++ idx#17
  [11] SCREEN[idx#14] = out::c#0
  to:out::@return
out::@return: scope:[out]  from out
  [12] return 
  to:@return


VARIABLE REGISTER WEIGHTS
byte idx
byte idx#14 251.625
byte idx#17 337.33333333333337
void main()
byte main::c
byte main::c#1 16.5
byte main::c#2 11.0
void out(byte out::c)
byte out::c
byte out::c#0 551.0
void out2(byte out2::c)
byte out2::c
byte out2::c#0 112.0

Initial phi equivalence classes
[ main::c#2 main::c#1 ]
[ idx#17 idx#14 ]
Added variable out2::c#0 to live range equivalence class [ out2::c#0 ]
Added variable out::c#0 to live range equivalence class [ out::c#0 ]
Complete equivalence classes
[ main::c#2 main::c#1 ]
[ idx#17 idx#14 ]
[ out2::c#0 ]
[ out::c#0 ]
Allocated zp[1]:2 [ main::c#2 main::c#1 ]
Allocated zp[1]:3 [ idx#17 idx#14 ]
Allocated zp[1]:4 [ out2::c#0 ]
Allocated zp[1]:5 [ out::c#0 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp[1]:2 [ main::c#2 main::c#1 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ idx#17 idx#14 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ out2::c#0 ] : zp[1]:4 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:5 [ out::c#0 ] : zp[1]:5 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 588.96: zp[1]:3 [ idx#17 idx#14 ] 
Uplift Scope [out] 551: zp[1]:5 [ out::c#0 ] 
Uplift Scope [out2] 112: zp[1]:4 [ out2::c#0 ] 
Uplift Scope [main] 27.5: zp[1]:2 [ main::c#2 main::c#1 ] 

Uplifting [] best 481 combination reg byte x [ idx#17 idx#14 ] 
Uplifting [out] best 475 combination reg byte a [ out::c#0 ] 
Uplifting [out2] best 442 combination reg byte a [ out2::c#0 ] 
Uplifting [main] best 342 combination reg byte a [ main::c#2 main::c#1 ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test effective live range and register allocation
// Here main::c, out2::c and out::c can all have the same allocation - and the global idx can be allocated to a hardware register.
  // Upstart
  // Commodore 64 PRG executable file
.file [name="liverange-7.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label SCREEN = $400
.segment Code
  // main
main: {
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi idx#17 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi main::c#2 = 0 [phi:main->main::@1#1] -- vbuaa=vbuc1 
    lda #0
    jmp __b1
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [1] phi idx#17 = idx#14 [phi:main::@2->main::@1#0] -- register_copy 
    // [1] phi main::c#2 = main::c#1 [phi:main::@2->main::@1#1] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] out2::c#0 = main::c#2
    // [3] call out2 
    jsr out2
    jmp __b2
    // main::@2
  __b2:
    // [4] main::c#1 = ++ main::c#2 -- vbuaa=_inc_vbuaa 
    clc
    adc #1
    // [5] if(main::c#1!=$28) goto main::@1 -- vbuaa_neq_vbuc1_then_la1 
    cmp #$28
    bne __b1_from___b2
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
}
  // out2
// out2(byte register(A) c)
out2: {
    // [7] out::c#0 = out2::c#0
    // [8] call out 
    jsr out
    jmp __breturn
    // out2::@return
  __breturn:
    // [9] return 
    rts
}
  // out
// out(byte register(A) c)
out: {
    // [10] idx#14 = ++ idx#17 -- vbuxx=_inc_vbuxx 
    inx
    // [11] SCREEN[idx#14] = out::c#0 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN,x
    jmp __breturn
    // out::@return
  __breturn:
    // [12] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction lda #0 with TXA
Replacing label __b1_from___b2 with __b1
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
const nomodify byte* SCREEN = (byte*) 1024
byte idx
byte idx#14 reg byte x 251.625
byte idx#17 reg byte x 337.33333333333337
void main()
byte main::c
byte main::c#1 reg byte a 16.5
byte main::c#2 reg byte a 11.0
void out(byte out::c)
byte out::c
byte out::c#0 reg byte a 551.0
void out2(byte out2::c)
byte out2::c
byte out2::c#0 reg byte a 112.0

reg byte a [ main::c#2 main::c#1 ]
reg byte x [ idx#17 idx#14 ]
reg byte a [ out2::c#0 ]
reg byte a [ out::c#0 ]


FINAL ASSEMBLER
Score: 216

  // File Comments
// Test effective live range and register allocation
// Here main::c, out2::c and out::c can all have the same allocation - and the global idx can be allocated to a hardware register.
  // Upstart
  // Commodore 64 PRG executable file
.file [name="liverange-7.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label SCREEN = $400
.segment Code
  // main
main: {
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi idx#17 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi main::c#2 = 0 [phi:main->main::@1#1] -- vbuaa=vbuc1 
    txa
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [1] phi idx#17 = idx#14 [phi:main::@2->main::@1#0] -- register_copy 
    // [1] phi main::c#2 = main::c#1 [phi:main::@2->main::@1#1] -- register_copy 
    // main::@1
  __b1:
    // out2(c)
    // [2] out2::c#0 = main::c#2
    // [3] call out2 
    jsr out2
    // main::@2
    // for(char c: 0..39 )
    // [4] main::c#1 = ++ main::c#2 -- vbuaa=_inc_vbuaa 
    clc
    adc #1
    // [5] if(main::c#1!=$28) goto main::@1 -- vbuaa_neq_vbuc1_then_la1 
    cmp #$28
    bne __b1
    // main::@return
    // }
    // [6] return 
    rts
}
  // out2
// out2(byte register(A) c)
out2: {
    // out(c)
    // [7] out::c#0 = out2::c#0
    // [8] call out 
    jsr out
    // out2::@return
    // }
    // [9] return 
    rts
}
  // out
// out(byte register(A) c)
out: {
    // idx++;
    // [10] idx#14 = ++ idx#17 -- vbuxx=_inc_vbuxx 
    inx
    // SCREEN[idx] = c
    // [11] SCREEN[idx#14] = out::c#0 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN,x
    // out::@return
    // }
    // [12] return 
    rts
}
  // File Data

