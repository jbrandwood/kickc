Fixing struct type size struct printf_buffer_number to 12
Fixing struct type size struct printf_buffer_number to 12
Fixing struct type SIZE_OF struct printf_buffer_number to 12
Fixing struct type SIZE_OF struct printf_buffer_number to 12
Added struct type cast to parameter value list call printf_uint (number) 8 (struct printf_format_number){ (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (const byte) DECIMAL } 
Added struct type cast to parameter value list call printf_ulong (dword) count (struct printf_format_number){ (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (const byte) DECIMAL } 
Added struct type cast to parameter value list call printf_string (byte*~) main::$6 (struct printf_format_string){ (byte) 0, (byte) 0 } 
Added struct type cast to parameter value list call printf_ulong (dword) count (struct printf_format_number){ (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (const byte) DECIMAL } 
Added struct type cast to parameter value list call printf_uchar (byte) print::i (struct printf_format_number){ (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (const byte) HEXADECIMAL } 
Added struct type cast to parameter value list call printf_uchar (byte) print::i1 (struct printf_format_number){ (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (const byte) HEXADECIMAL } 
Inlined call (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 
Inlined call call __init 
Eliminating unused variable with no statement (void~) main::$1
Eliminating unused variable with no statement (void~) main::$2
Eliminating unused variable with no statement (struct TIME_OF_DAY~) main::$5
Eliminating unused variable with no statement (void~) main::$7
Eliminating unused variable with no statement (void~) print::$1
Eliminating unused variable with no statement (void~) print::$3
Eliminating unused variable with no statement (void~) print::$5
Eliminating unused variable with no statement (void~) print::$8
Eliminating unused variable with no statement (void~) print::$9
Converting PHI-variable modified inside __stackcall procedure queen() to load/store (dword) count
Calling convention STACK_CALL adding prepare/execute/finalize for call queen (number) 1 
Calling convention STACK_CALL adding prepare/execute/finalize for call queen (number~) queen::$4 
Calling convention STACK_CALL replacing param((byte) queen::row) with stackidx(byte,(const byte) queen::OFFSET_STACK_ROW)
Calling convention STACK_CALL adding stack push stackpush(byte) ← 1
Calling convention STACK_CALL adding stack push stackpush(byte) ← queen::$4
Unwinding list assignment { (byte~) main::$5_TENTHS, (byte~) main::$5_SEC, (byte~) main::$5_MIN, (byte~) main::$5_HOURS } ← { (byte) tod_read::return_TENTHS, (byte) tod_read::return_SEC, (byte) tod_read::return_MIN, (byte) tod_read::return_HOURS }
Unwinding list assignment { (byte) tod_read::return_TENTHS#2, (byte) tod_read::return_SEC#2, (byte) tod_read::return_MIN#2, (byte) tod_read::return_HOURS#2 } ← { (byte) tod_read::return_TENTHS#1, (byte) tod_read::return_SEC#1, (byte) tod_read::return_MIN#1, (byte) tod_read::return_HOURS#1 }

CONTROL FLOW GRAPH SSA

(byte()) toupper((byte) toupper::ch)
toupper: scope:[toupper]  from strupr::@2
  (byte) toupper::ch#1 ← phi( strupr::@2/(byte) toupper::ch#0 )
  (bool~) toupper::$0 ← (byte) toupper::ch#1 >= (byte) 'a'
  (bool~) toupper::$1 ← (byte) toupper::ch#1 <= (byte) 'z'
  (bool~) toupper::$2 ← (bool~) toupper::$0 && (bool~) toupper::$1
  if((bool~) toupper::$2) goto toupper::@1
  to:toupper::@2
toupper::@1: scope:[toupper]  from toupper
  (byte) toupper::ch#2 ← phi( toupper/(byte) toupper::ch#1 )
  (byte~) toupper::$3 ← (byte) toupper::ch#2 + (byte) 'A'-(byte) 'a'
  (byte) toupper::return#0 ← (byte~) toupper::$3
  to:toupper::@return
toupper::@2: scope:[toupper]  from toupper
  (byte) toupper::ch#3 ← phi( toupper/(byte) toupper::ch#1 )
  (byte) toupper::return#1 ← (byte) toupper::ch#3
  to:toupper::@return
toupper::@return: scope:[toupper]  from toupper::@1 toupper::@2
  (byte) toupper::return#4 ← phi( toupper::@1/(byte) toupper::return#0 toupper::@2/(byte) toupper::return#1 )
  (byte) toupper::return#2 ← (byte) toupper::return#4
  return 
  to:@return

(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@3 cscroll::@4
  (word) memcpy::num#2 ← phi( cscroll::@3/(word) memcpy::num#0 cscroll::@4/(word) memcpy::num#1 )
  (void*) memcpy::destination#2 ← phi( cscroll::@3/(void*) memcpy::destination#0 cscroll::@4/(void*) memcpy::destination#1 )
  (void*) memcpy::source#2 ← phi( cscroll::@3/(void*) memcpy::source#0 cscroll::@4/(void*) memcpy::source#1 )
  (byte*) memcpy::src#0 ← ((byte*)) (void*) memcpy::source#2
  (byte*) memcpy::dst#0 ← ((byte*)) (void*) memcpy::destination#2
  (byte*~) memcpy::$2 ← (byte*)(void*) memcpy::source#2
  (byte*~) memcpy::$0 ← (byte*~) memcpy::$2 + (word) memcpy::num#2
  (byte*) memcpy::src_end#0 ← (byte*~) memcpy::$0
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  (void*) memcpy::destination#4 ← phi( memcpy/(void*) memcpy::destination#2 memcpy::@2/(void*) memcpy::destination#5 )
  (byte*) memcpy::dst#3 ← phi( memcpy/(byte*) memcpy::dst#0 memcpy::@2/(byte*) memcpy::dst#1 )
  (byte*) memcpy::src_end#1 ← phi( memcpy/(byte*) memcpy::src_end#0 memcpy::@2/(byte*) memcpy::src_end#2 )
  (byte*) memcpy::src#2 ← phi( memcpy/(byte*) memcpy::src#0 memcpy::@2/(byte*) memcpy::src#1 )
  (bool~) memcpy::$1 ← (byte*) memcpy::src#2 != (byte*) memcpy::src_end#1
  if((bool~) memcpy::$1) goto memcpy::@2
  to:memcpy::@3
memcpy::@2: scope:[memcpy]  from memcpy::@1
  (void*) memcpy::destination#5 ← phi( memcpy::@1/(void*) memcpy::destination#4 )
  (byte*) memcpy::src_end#2 ← phi( memcpy::@1/(byte*) memcpy::src_end#1 )
  (byte*) memcpy::dst#2 ← phi( memcpy::@1/(byte*) memcpy::dst#3 )
  (byte*) memcpy::src#3 ← phi( memcpy::@1/(byte*) memcpy::src#2 )
  *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#3)
  (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2
  (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#3
  to:memcpy::@1
memcpy::@3: scope:[memcpy]  from memcpy::@1
  (void*) memcpy::destination#3 ← phi( memcpy::@1/(void*) memcpy::destination#4 )
  (void*) memcpy::return#0 ← (void*) memcpy::destination#3
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@3
  (void*) memcpy::return#4 ← phi( memcpy::@3/(void*) memcpy::return#0 )
  (void*) memcpy::return#1 ← (void*) memcpy::return#4
  return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from cscroll::@5 cscroll::@6
  (byte) memset::c#5 ← phi( cscroll::@5/(byte) memset::c#0 cscroll::@6/(byte) memset::c#1 )
  (void*) memset::str#4 ← phi( cscroll::@5/(void*) memset::str#0 cscroll::@6/(void*) memset::str#1 )
  (word) memset::num#2 ← phi( cscroll::@5/(word) memset::num#0 cscroll::@6/(word) memset::num#1 )
  (bool~) memset::$0 ← (word) memset::num#2 > (number) 0
  (bool~) memset::$1 ← ! (bool~) memset::$0
  if((bool~) memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@3
  (void*) memset::str#2 ← phi( memset/(void*) memset::str#4 memset::@3/(void*) memset::str#5 )
  (void*) memset::return#0 ← (void*) memset::str#2
  to:memset::@return
memset::@2: scope:[memset]  from memset
  (byte) memset::c#4 ← phi( memset/(byte) memset::c#5 )
  (word) memset::num#3 ← phi( memset/(word) memset::num#2 )
  (void*) memset::str#3 ← phi( memset/(void*) memset::str#4 )
  (byte*~) memset::$4 ← (byte*)(void*) memset::str#3
  (byte*~) memset::$2 ← (byte*~) memset::$4 + (word) memset::num#3
  (byte*) memset::end#0 ← (byte*~) memset::$2
  (byte*) memset::dst#0 ← ((byte*)) (void*) memset::str#3
  to:memset::@3
memset::@3: scope:[memset]  from memset::@2 memset::@4
  (byte) memset::c#3 ← phi( memset::@2/(byte) memset::c#4 memset::@4/(byte) memset::c#2 )
  (void*) memset::str#5 ← phi( memset::@2/(void*) memset::str#3 memset::@4/(void*) memset::str#6 )
  (byte*) memset::end#1 ← phi( memset::@2/(byte*) memset::end#0 memset::@4/(byte*) memset::end#2 )
  (byte*) memset::dst#2 ← phi( memset::@2/(byte*) memset::dst#0 memset::@4/(byte*) memset::dst#1 )
  (bool~) memset::$3 ← (byte*) memset::dst#2 != (byte*) memset::end#1
  if((bool~) memset::$3) goto memset::@4
  to:memset::@1
memset::@4: scope:[memset]  from memset::@3
  (void*) memset::str#6 ← phi( memset::@3/(void*) memset::str#5 )
  (byte*) memset::end#2 ← phi( memset::@3/(byte*) memset::end#1 )
  (byte*) memset::dst#3 ← phi( memset::@3/(byte*) memset::dst#2 )
  (byte) memset::c#2 ← phi( memset::@3/(byte) memset::c#3 )
  *((byte*) memset::dst#3) ← (byte) memset::c#2
  (byte*) memset::dst#1 ← ++ (byte*) memset::dst#3
  to:memset::@3
memset::@return: scope:[memset]  from memset::@1
  (void*) memset::return#4 ← phi( memset::@1/(void*) memset::return#0 )
  (void*) memset::return#1 ← (void*) memset::return#4
  return 
  to:@return

(byte*()) strupr((byte*) strupr::str)
strupr: scope:[strupr]  from printf_number_buffer::@11
  (byte*) strupr::str#1 ← phi( printf_number_buffer::@11/(byte*) strupr::str#0 )
  (byte*) strupr::src#0 ← (byte*) strupr::str#1
  to:strupr::@1
strupr::@1: scope:[strupr]  from strupr strupr::@4
  (byte*) strupr::str#3 ← phi( strupr/(byte*) strupr::str#1 strupr::@4/(byte*) strupr::str#4 )
  (byte*) strupr::src#2 ← phi( strupr/(byte*) strupr::src#0 strupr::@4/(byte*) strupr::src#1 )
  (bool~) strupr::$1 ← (number) 0 != *((byte*) strupr::src#2)
  if((bool~) strupr::$1) goto strupr::@2
  to:strupr::@3
strupr::@2: scope:[strupr]  from strupr::@1
  (byte*) strupr::str#5 ← phi( strupr::@1/(byte*) strupr::str#3 )
  (byte*) strupr::src#3 ← phi( strupr::@1/(byte*) strupr::src#2 )
  (byte) toupper::ch#0 ← *((byte*) strupr::src#3)
  call toupper 
  (byte) toupper::return#3 ← (byte) toupper::return#2
  to:strupr::@4
strupr::@4: scope:[strupr]  from strupr::@2
  (byte*) strupr::str#4 ← phi( strupr::@2/(byte*) strupr::str#5 )
  (byte*) strupr::src#4 ← phi( strupr::@2/(byte*) strupr::src#3 )
  (byte) toupper::return#5 ← phi( strupr::@2/(byte) toupper::return#3 )
  (byte~) strupr::$0 ← (byte) toupper::return#5
  *((byte*) strupr::src#4) ← (byte~) strupr::$0
  (byte*) strupr::src#1 ← ++ (byte*) strupr::src#4
  to:strupr::@1
strupr::@3: scope:[strupr]  from strupr::@1
  (byte*) strupr::str#2 ← phi( strupr::@1/(byte*) strupr::str#3 )
  (byte*) strupr::return#0 ← (byte*) strupr::str#2
  to:strupr::@return
strupr::@return: scope:[strupr]  from strupr::@3
  (byte*) strupr::return#3 ← phi( strupr::@3/(byte*) strupr::return#0 )
  (byte*) strupr::return#1 ← (byte*) strupr::return#3
  return 
  to:@return

(word()) strlen((byte*) strlen::str)
strlen: scope:[strlen]  from printf_number_buffer::@6 printf_string::@3
  (byte*) strlen::str#5 ← phi( printf_number_buffer::@6/(byte*) strlen::str#1 printf_string::@3/(byte*) strlen::str#2 )
  (word) strlen::len#0 ← (word) 0
  to:strlen::@1
strlen::@1: scope:[strlen]  from strlen strlen::@2
  (word) strlen::len#4 ← phi( strlen/(word) strlen::len#0 strlen::@2/(word) strlen::len#1 )
  (byte*) strlen::str#3 ← phi( strlen/(byte*) strlen::str#5 strlen::@2/(byte*) strlen::str#0 )
  (bool~) strlen::$0 ← (number) 0 != *((byte*) strlen::str#3)
  if((bool~) strlen::$0) goto strlen::@2
  to:strlen::@3
strlen::@2: scope:[strlen]  from strlen::@1
  (byte*) strlen::str#4 ← phi( strlen::@1/(byte*) strlen::str#3 )
  (word) strlen::len#2 ← phi( strlen::@1/(word) strlen::len#4 )
  (word) strlen::len#1 ← ++ (word) strlen::len#2
  (byte*) strlen::str#0 ← ++ (byte*) strlen::str#4
  to:strlen::@1
strlen::@3: scope:[strlen]  from strlen::@1
  (word) strlen::len#3 ← phi( strlen::@1/(word) strlen::len#4 )
  (word) strlen::return#0 ← (word) strlen::len#3
  to:strlen::@return
strlen::@return: scope:[strlen]  from strlen::@3
  (word) strlen::return#4 ← phi( strlen::@3/(word) strlen::return#0 )
  (word) strlen::return#1 ← (word) strlen::return#4
  return 
  to:@return

(void()) uctoa((byte) uctoa::value , (byte*) uctoa::buffer , (byte) uctoa::radix)
uctoa: scope:[uctoa]  from printf_uchar::@3
  (byte*) uctoa::buffer#21 ← phi( printf_uchar::@3/(byte*) uctoa::buffer#5 )
  (byte) uctoa::value#12 ← phi( printf_uchar::@3/(byte) uctoa::value#1 )
  (byte) uctoa::radix#1 ← phi( printf_uchar::@3/(byte) uctoa::radix#0 )
  (byte) uctoa::max_digits#0 ← (byte) 0
  (byte*) uctoa::digit_values#0 ← (byte*) 0
  (bool~) uctoa::$0 ← (byte) uctoa::radix#1 == (const byte) DECIMAL
  if((bool~) uctoa::$0) goto uctoa::@1
  to:uctoa::@6
uctoa::@1: scope:[uctoa]  from uctoa
  (byte*) uctoa::buffer#17 ← phi( uctoa/(byte*) uctoa::buffer#21 )
  (byte) uctoa::value#8 ← phi( uctoa/(byte) uctoa::value#12 )
  (byte) uctoa::max_digits#1 ← (number) 3
  (byte*) uctoa::digit_values#1 ← (const byte*) RADIX_DECIMAL_VALUES_CHAR
  to:uctoa::@5
uctoa::@6: scope:[uctoa]  from uctoa
  (byte) uctoa::value#13 ← phi( uctoa/(byte) uctoa::value#12 )
  (byte*) uctoa::buffer#16 ← phi( uctoa/(byte*) uctoa::buffer#21 )
  (byte) uctoa::radix#2 ← phi( uctoa/(byte) uctoa::radix#1 )
  (bool~) uctoa::$1 ← (byte) uctoa::radix#2 == (const byte) HEXADECIMAL
  if((bool~) uctoa::$1) goto uctoa::@2
  to:uctoa::@7
uctoa::@2: scope:[uctoa]  from uctoa::@6
  (byte*) uctoa::buffer#18 ← phi( uctoa::@6/(byte*) uctoa::buffer#16 )
  (byte) uctoa::value#9 ← phi( uctoa::@6/(byte) uctoa::value#13 )
  (byte) uctoa::max_digits#2 ← (number) 2
  (byte*) uctoa::digit_values#2 ← (const byte*) RADIX_HEXADECIMAL_VALUES_CHAR
  to:uctoa::@5
uctoa::@7: scope:[uctoa]  from uctoa::@6
  (byte) uctoa::value#14 ← phi( uctoa::@6/(byte) uctoa::value#13 )
  (byte*) uctoa::buffer#13 ← phi( uctoa::@6/(byte*) uctoa::buffer#16 )
  (byte) uctoa::radix#3 ← phi( uctoa::@6/(byte) uctoa::radix#2 )
  (bool~) uctoa::$2 ← (byte) uctoa::radix#3 == (const byte) OCTAL
  if((bool~) uctoa::$2) goto uctoa::@3
  to:uctoa::@8
uctoa::@3: scope:[uctoa]  from uctoa::@7
  (byte*) uctoa::buffer#19 ← phi( uctoa::@7/(byte*) uctoa::buffer#13 )
  (byte) uctoa::value#10 ← phi( uctoa::@7/(byte) uctoa::value#14 )
  (byte) uctoa::max_digits#3 ← (number) 3
  (byte*) uctoa::digit_values#3 ← (const byte*) RADIX_OCTAL_VALUES_CHAR
  to:uctoa::@5
uctoa::@8: scope:[uctoa]  from uctoa::@7
  (byte) uctoa::value#15 ← phi( uctoa::@7/(byte) uctoa::value#14 )
  (byte*) uctoa::buffer#10 ← phi( uctoa::@7/(byte*) uctoa::buffer#13 )
  (byte) uctoa::radix#4 ← phi( uctoa::@7/(byte) uctoa::radix#3 )
  (bool~) uctoa::$3 ← (byte) uctoa::radix#4 == (const byte) BINARY
  if((bool~) uctoa::$3) goto uctoa::@4
  to:uctoa::@9
uctoa::@4: scope:[uctoa]  from uctoa::@8
  (byte*) uctoa::buffer#20 ← phi( uctoa::@8/(byte*) uctoa::buffer#10 )
  (byte) uctoa::value#11 ← phi( uctoa::@8/(byte) uctoa::value#15 )
  (byte) uctoa::max_digits#4 ← (number) 8
  (byte*) uctoa::digit_values#4 ← (const byte*) RADIX_BINARY_VALUES_CHAR
  to:uctoa::@5
uctoa::@9: scope:[uctoa]  from uctoa::@8
  (byte*) uctoa::buffer#6 ← phi( uctoa::@8/(byte*) uctoa::buffer#10 )
  *((byte*) uctoa::buffer#6) ← (byte) 'e'
  (byte*) uctoa::buffer#0 ← ++ (byte*) uctoa::buffer#6
  *((byte*) uctoa::buffer#0) ← (byte) 'r'
  (byte*) uctoa::buffer#1 ← ++ (byte*) uctoa::buffer#0
  *((byte*) uctoa::buffer#1) ← (byte) 'r'
  (byte*) uctoa::buffer#2 ← ++ (byte*) uctoa::buffer#1
  *((byte*) uctoa::buffer#2) ← (number) 0
  to:uctoa::@return
uctoa::@return: scope:[uctoa]  from uctoa::@12 uctoa::@9
  return 
  to:@return
uctoa::@5: scope:[uctoa]  from uctoa::@1 uctoa::@2 uctoa::@3 uctoa::@4
  (byte*) uctoa::buffer#15 ← phi( uctoa::@1/(byte*) uctoa::buffer#17 uctoa::@2/(byte*) uctoa::buffer#18 uctoa::@3/(byte*) uctoa::buffer#19 uctoa::@4/(byte*) uctoa::buffer#20 )
  (byte) uctoa::value#7 ← phi( uctoa::@1/(byte) uctoa::value#8 uctoa::@2/(byte) uctoa::value#9 uctoa::@3/(byte) uctoa::value#10 uctoa::@4/(byte) uctoa::value#11 )
  (byte*) uctoa::digit_values#8 ← phi( uctoa::@1/(byte*) uctoa::digit_values#1 uctoa::@2/(byte*) uctoa::digit_values#2 uctoa::@3/(byte*) uctoa::digit_values#3 uctoa::@4/(byte*) uctoa::digit_values#4 )
  (byte) uctoa::max_digits#7 ← phi( uctoa::@1/(byte) uctoa::max_digits#1 uctoa::@2/(byte) uctoa::max_digits#2 uctoa::@3/(byte) uctoa::max_digits#3 uctoa::@4/(byte) uctoa::max_digits#4 )
  (byte) uctoa::started#0 ← (byte) 0
  (byte) uctoa::digit#0 ← (byte) 0
  to:uctoa::@10
uctoa::@10: scope:[uctoa]  from uctoa::@13 uctoa::@5
  (byte*) uctoa::buffer#11 ← phi( uctoa::@13/(byte*) uctoa::buffer#14 uctoa::@5/(byte*) uctoa::buffer#15 )
  (byte) uctoa::started#3 ← phi( uctoa::@13/(byte) uctoa::started#4 uctoa::@5/(byte) uctoa::started#0 )
  (byte) uctoa::value#5 ← phi( uctoa::@13/(byte) uctoa::value#6 uctoa::@5/(byte) uctoa::value#7 )
  (byte*) uctoa::digit_values#6 ← phi( uctoa::@13/(byte*) uctoa::digit_values#7 uctoa::@5/(byte*) uctoa::digit_values#8 )
  (byte) uctoa::digit#2 ← phi( uctoa::@13/(byte) uctoa::digit#1 uctoa::@5/(byte) uctoa::digit#0 )
  (byte) uctoa::max_digits#5 ← phi( uctoa::@13/(byte) uctoa::max_digits#6 uctoa::@5/(byte) uctoa::max_digits#7 )
  (number~) uctoa::$4 ← (byte) uctoa::max_digits#5 - (number) 1
  (bool~) uctoa::$5 ← (byte) uctoa::digit#2 < (number~) uctoa::$4
  if((bool~) uctoa::$5) goto uctoa::@11
  to:uctoa::@12
uctoa::@11: scope:[uctoa]  from uctoa::@10
  (byte) uctoa::max_digits#8 ← phi( uctoa::@10/(byte) uctoa::max_digits#5 )
  (byte*) uctoa::buffer#12 ← phi( uctoa::@10/(byte*) uctoa::buffer#11 )
  (byte) uctoa::started#2 ← phi( uctoa::@10/(byte) uctoa::started#3 )
  (byte) uctoa::value#2 ← phi( uctoa::@10/(byte) uctoa::value#5 )
  (byte) uctoa::digit#3 ← phi( uctoa::@10/(byte) uctoa::digit#2 )
  (byte*) uctoa::digit_values#5 ← phi( uctoa::@10/(byte*) uctoa::digit_values#6 )
  (byte) uctoa::digit_value#0 ← *((byte*) uctoa::digit_values#5 + (byte) uctoa::digit#3)
  (bool~) uctoa::$6 ← (byte) uctoa::value#2 >= (byte) uctoa::digit_value#0
  (bool~) uctoa::$7 ← (byte) uctoa::started#2 || (bool~) uctoa::$6
  (bool~) uctoa::$8 ← ! (bool~) uctoa::$7
  if((bool~) uctoa::$8) goto uctoa::@13
  to:uctoa::@14
uctoa::@12: scope:[uctoa]  from uctoa::@10
  (byte*) uctoa::buffer#7 ← phi( uctoa::@10/(byte*) uctoa::buffer#11 )
  (byte) uctoa::value#3 ← phi( uctoa::@10/(byte) uctoa::value#5 )
  (byte~) uctoa::$10 ← (byte)(byte) uctoa::value#3
  *((byte*) uctoa::buffer#7) ← *((const byte*) DIGITS + (byte~) uctoa::$10)
  (byte*) uctoa::buffer#3 ← ++ (byte*) uctoa::buffer#7
  *((byte*) uctoa::buffer#3) ← (number) 0
  to:uctoa::@return
uctoa::@13: scope:[uctoa]  from uctoa::@11 uctoa::@15
  (byte*) uctoa::buffer#14 ← phi( uctoa::@11/(byte*) uctoa::buffer#12 uctoa::@15/(byte*) uctoa::buffer#4 )
  (byte) uctoa::started#4 ← phi( uctoa::@11/(byte) uctoa::started#2 uctoa::@15/(byte) uctoa::started#1 )
  (byte) uctoa::value#6 ← phi( uctoa::@11/(byte) uctoa::value#2 uctoa::@15/(byte) uctoa::value#0 )
  (byte*) uctoa::digit_values#7 ← phi( uctoa::@11/(byte*) uctoa::digit_values#5 uctoa::@15/(byte*) uctoa::digit_values#9 )
  (byte) uctoa::max_digits#6 ← phi( uctoa::@11/(byte) uctoa::max_digits#8 uctoa::@15/(byte) uctoa::max_digits#9 )
  (byte) uctoa::digit#4 ← phi( uctoa::@11/(byte) uctoa::digit#3 uctoa::@15/(byte) uctoa::digit#5 )
  (byte) uctoa::digit#1 ← ++ (byte) uctoa::digit#4
  to:uctoa::@10
uctoa::@14: scope:[uctoa]  from uctoa::@11
  (byte*) uctoa::digit_values#10 ← phi( uctoa::@11/(byte*) uctoa::digit_values#5 )
  (byte) uctoa::max_digits#10 ← phi( uctoa::@11/(byte) uctoa::max_digits#8 )
  (byte) uctoa::digit#6 ← phi( uctoa::@11/(byte) uctoa::digit#3 )
  (byte) uctoa::digit_value#1 ← phi( uctoa::@11/(byte) uctoa::digit_value#0 )
  (byte) uctoa::value#4 ← phi( uctoa::@11/(byte) uctoa::value#2 )
  (byte*) uctoa::buffer#8 ← phi( uctoa::@11/(byte*) uctoa::buffer#12 )
  (byte*) uctoa_append::buffer#0 ← (byte*) uctoa::buffer#8
  (byte) uctoa_append::value#0 ← (byte) uctoa::value#4
  (byte) uctoa_append::sub#0 ← (byte) uctoa::digit_value#1
  call uctoa_append 
  (byte) uctoa_append::return#0 ← (byte) uctoa_append::return#2
  to:uctoa::@15
uctoa::@15: scope:[uctoa]  from uctoa::@14
  (byte*) uctoa::digit_values#9 ← phi( uctoa::@14/(byte*) uctoa::digit_values#10 )
  (byte) uctoa::max_digits#9 ← phi( uctoa::@14/(byte) uctoa::max_digits#10 )
  (byte) uctoa::digit#5 ← phi( uctoa::@14/(byte) uctoa::digit#6 )
  (byte*) uctoa::buffer#9 ← phi( uctoa::@14/(byte*) uctoa::buffer#8 )
  (byte) uctoa_append::return#3 ← phi( uctoa::@14/(byte) uctoa_append::return#0 )
  (byte~) uctoa::$9 ← (byte) uctoa_append::return#3
  (byte) uctoa::value#0 ← (byte~) uctoa::$9
  (byte*) uctoa::buffer#4 ← ++ (byte*) uctoa::buffer#9
  (byte) uctoa::started#1 ← (number) 1
  to:uctoa::@13

(byte()) uctoa_append((byte*) uctoa_append::buffer , (byte) uctoa_append::value , (byte) uctoa_append::sub)
uctoa_append: scope:[uctoa_append]  from uctoa::@14
  (byte*) uctoa_append::buffer#3 ← phi( uctoa::@14/(byte*) uctoa_append::buffer#0 )
  (byte) uctoa_append::sub#3 ← phi( uctoa::@14/(byte) uctoa_append::sub#0 )
  (byte) uctoa_append::value#5 ← phi( uctoa::@14/(byte) uctoa_append::value#0 )
  (byte) uctoa_append::digit#0 ← (byte) 0
  to:uctoa_append::@1
uctoa_append::@1: scope:[uctoa_append]  from uctoa_append uctoa_append::@2
  (byte*) uctoa_append::buffer#2 ← phi( uctoa_append/(byte*) uctoa_append::buffer#3 uctoa_append::@2/(byte*) uctoa_append::buffer#4 )
  (byte) uctoa_append::digit#4 ← phi( uctoa_append/(byte) uctoa_append::digit#0 uctoa_append::@2/(byte) uctoa_append::digit#1 )
  (byte) uctoa_append::sub#1 ← phi( uctoa_append/(byte) uctoa_append::sub#3 uctoa_append::@2/(byte) uctoa_append::sub#2 )
  (byte) uctoa_append::value#2 ← phi( uctoa_append/(byte) uctoa_append::value#5 uctoa_append::@2/(byte) uctoa_append::value#1 )
  (bool~) uctoa_append::$0 ← (byte) uctoa_append::value#2 >= (byte) uctoa_append::sub#1
  if((bool~) uctoa_append::$0) goto uctoa_append::@2
  to:uctoa_append::@3
uctoa_append::@2: scope:[uctoa_append]  from uctoa_append::@1
  (byte*) uctoa_append::buffer#4 ← phi( uctoa_append::@1/(byte*) uctoa_append::buffer#2 )
  (byte) uctoa_append::sub#2 ← phi( uctoa_append::@1/(byte) uctoa_append::sub#1 )
  (byte) uctoa_append::value#3 ← phi( uctoa_append::@1/(byte) uctoa_append::value#2 )
  (byte) uctoa_append::digit#2 ← phi( uctoa_append::@1/(byte) uctoa_append::digit#4 )
  (byte) uctoa_append::digit#1 ← ++ (byte) uctoa_append::digit#2
  (byte) uctoa_append::value#1 ← (byte) uctoa_append::value#3 - (byte) uctoa_append::sub#2
  to:uctoa_append::@1
uctoa_append::@3: scope:[uctoa_append]  from uctoa_append::@1
  (byte) uctoa_append::value#4 ← phi( uctoa_append::@1/(byte) uctoa_append::value#2 )
  (byte*) uctoa_append::buffer#1 ← phi( uctoa_append::@1/(byte*) uctoa_append::buffer#2 )
  (byte) uctoa_append::digit#3 ← phi( uctoa_append::@1/(byte) uctoa_append::digit#4 )
  *((byte*) uctoa_append::buffer#1) ← *((const byte*) DIGITS + (byte) uctoa_append::digit#3)
  (byte) uctoa_append::return#1 ← (byte) uctoa_append::value#4
  to:uctoa_append::@return
uctoa_append::@return: scope:[uctoa_append]  from uctoa_append::@3
  (byte) uctoa_append::return#4 ← phi( uctoa_append::@3/(byte) uctoa_append::return#1 )
  (byte) uctoa_append::return#2 ← (byte) uctoa_append::return#4
  return 
  to:@return

(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
utoa: scope:[utoa]  from printf_uint::@3
  (byte*) utoa::buffer#21 ← phi( printf_uint::@3/(byte*) utoa::buffer#5 )
  (word) utoa::value#12 ← phi( printf_uint::@3/(word) utoa::value#1 )
  (byte) utoa::radix#1 ← phi( printf_uint::@3/(byte) utoa::radix#0 )
  (byte) utoa::max_digits#0 ← (byte) 0
  (word*) utoa::digit_values#0 ← (word*) 0
  (bool~) utoa::$0 ← (byte) utoa::radix#1 == (const byte) DECIMAL
  if((bool~) utoa::$0) goto utoa::@1
  to:utoa::@6
utoa::@1: scope:[utoa]  from utoa
  (byte*) utoa::buffer#17 ← phi( utoa/(byte*) utoa::buffer#21 )
  (word) utoa::value#8 ← phi( utoa/(word) utoa::value#12 )
  (byte) utoa::max_digits#1 ← (number) 5
  (word*) utoa::digit_values#1 ← (const word*) RADIX_DECIMAL_VALUES
  to:utoa::@5
utoa::@6: scope:[utoa]  from utoa
  (word) utoa::value#13 ← phi( utoa/(word) utoa::value#12 )
  (byte*) utoa::buffer#16 ← phi( utoa/(byte*) utoa::buffer#21 )
  (byte) utoa::radix#2 ← phi( utoa/(byte) utoa::radix#1 )
  (bool~) utoa::$1 ← (byte) utoa::radix#2 == (const byte) HEXADECIMAL
  if((bool~) utoa::$1) goto utoa::@2
  to:utoa::@7
utoa::@2: scope:[utoa]  from utoa::@6
  (byte*) utoa::buffer#18 ← phi( utoa::@6/(byte*) utoa::buffer#16 )
  (word) utoa::value#9 ← phi( utoa::@6/(word) utoa::value#13 )
  (byte) utoa::max_digits#2 ← (number) 4
  (word*) utoa::digit_values#2 ← (const word*) RADIX_HEXADECIMAL_VALUES
  to:utoa::@5
utoa::@7: scope:[utoa]  from utoa::@6
  (word) utoa::value#14 ← phi( utoa::@6/(word) utoa::value#13 )
  (byte*) utoa::buffer#13 ← phi( utoa::@6/(byte*) utoa::buffer#16 )
  (byte) utoa::radix#3 ← phi( utoa::@6/(byte) utoa::radix#2 )
  (bool~) utoa::$2 ← (byte) utoa::radix#3 == (const byte) OCTAL
  if((bool~) utoa::$2) goto utoa::@3
  to:utoa::@8
utoa::@3: scope:[utoa]  from utoa::@7
  (byte*) utoa::buffer#19 ← phi( utoa::@7/(byte*) utoa::buffer#13 )
  (word) utoa::value#10 ← phi( utoa::@7/(word) utoa::value#14 )
  (byte) utoa::max_digits#3 ← (number) 6
  (word*) utoa::digit_values#3 ← (const word*) RADIX_OCTAL_VALUES
  to:utoa::@5
utoa::@8: scope:[utoa]  from utoa::@7
  (word) utoa::value#15 ← phi( utoa::@7/(word) utoa::value#14 )
  (byte*) utoa::buffer#10 ← phi( utoa::@7/(byte*) utoa::buffer#13 )
  (byte) utoa::radix#4 ← phi( utoa::@7/(byte) utoa::radix#3 )
  (bool~) utoa::$3 ← (byte) utoa::radix#4 == (const byte) BINARY
  if((bool~) utoa::$3) goto utoa::@4
  to:utoa::@9
utoa::@4: scope:[utoa]  from utoa::@8
  (byte*) utoa::buffer#20 ← phi( utoa::@8/(byte*) utoa::buffer#10 )
  (word) utoa::value#11 ← phi( utoa::@8/(word) utoa::value#15 )
  (byte) utoa::max_digits#4 ← (number) $10
  (word*) utoa::digit_values#4 ← (const word*) RADIX_BINARY_VALUES
  to:utoa::@5
utoa::@9: scope:[utoa]  from utoa::@8
  (byte*) utoa::buffer#6 ← phi( utoa::@8/(byte*) utoa::buffer#10 )
  *((byte*) utoa::buffer#6) ← (byte) 'e'
  (byte*) utoa::buffer#0 ← ++ (byte*) utoa::buffer#6
  *((byte*) utoa::buffer#0) ← (byte) 'r'
  (byte*) utoa::buffer#1 ← ++ (byte*) utoa::buffer#0
  *((byte*) utoa::buffer#1) ← (byte) 'r'
  (byte*) utoa::buffer#2 ← ++ (byte*) utoa::buffer#1
  *((byte*) utoa::buffer#2) ← (number) 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@12 utoa::@9
  return 
  to:@return
utoa::@5: scope:[utoa]  from utoa::@1 utoa::@2 utoa::@3 utoa::@4
  (byte*) utoa::buffer#15 ← phi( utoa::@1/(byte*) utoa::buffer#17 utoa::@2/(byte*) utoa::buffer#18 utoa::@3/(byte*) utoa::buffer#19 utoa::@4/(byte*) utoa::buffer#20 )
  (word) utoa::value#7 ← phi( utoa::@1/(word) utoa::value#8 utoa::@2/(word) utoa::value#9 utoa::@3/(word) utoa::value#10 utoa::@4/(word) utoa::value#11 )
  (word*) utoa::digit_values#8 ← phi( utoa::@1/(word*) utoa::digit_values#1 utoa::@2/(word*) utoa::digit_values#2 utoa::@3/(word*) utoa::digit_values#3 utoa::@4/(word*) utoa::digit_values#4 )
  (byte) utoa::max_digits#7 ← phi( utoa::@1/(byte) utoa::max_digits#1 utoa::@2/(byte) utoa::max_digits#2 utoa::@3/(byte) utoa::max_digits#3 utoa::@4/(byte) utoa::max_digits#4 )
  (byte) utoa::started#0 ← (byte) 0
  (byte) utoa::digit#0 ← (byte) 0
  to:utoa::@10
utoa::@10: scope:[utoa]  from utoa::@13 utoa::@5
  (byte*) utoa::buffer#11 ← phi( utoa::@13/(byte*) utoa::buffer#14 utoa::@5/(byte*) utoa::buffer#15 )
  (byte) utoa::started#3 ← phi( utoa::@13/(byte) utoa::started#4 utoa::@5/(byte) utoa::started#0 )
  (word) utoa::value#5 ← phi( utoa::@13/(word) utoa::value#6 utoa::@5/(word) utoa::value#7 )
  (word*) utoa::digit_values#6 ← phi( utoa::@13/(word*) utoa::digit_values#7 utoa::@5/(word*) utoa::digit_values#8 )
  (byte) utoa::digit#2 ← phi( utoa::@13/(byte) utoa::digit#1 utoa::@5/(byte) utoa::digit#0 )
  (byte) utoa::max_digits#5 ← phi( utoa::@13/(byte) utoa::max_digits#6 utoa::@5/(byte) utoa::max_digits#7 )
  (number~) utoa::$4 ← (byte) utoa::max_digits#5 - (number) 1
  (bool~) utoa::$5 ← (byte) utoa::digit#2 < (number~) utoa::$4
  if((bool~) utoa::$5) goto utoa::@11
  to:utoa::@12
utoa::@11: scope:[utoa]  from utoa::@10
  (byte) utoa::max_digits#8 ← phi( utoa::@10/(byte) utoa::max_digits#5 )
  (byte*) utoa::buffer#12 ← phi( utoa::@10/(byte*) utoa::buffer#11 )
  (byte) utoa::started#2 ← phi( utoa::@10/(byte) utoa::started#3 )
  (word) utoa::value#2 ← phi( utoa::@10/(word) utoa::value#5 )
  (word*) utoa::digit_values#5 ← phi( utoa::@10/(word*) utoa::digit_values#6 )
  (byte) utoa::digit#3 ← phi( utoa::@10/(byte) utoa::digit#2 )
  (byte~) utoa::$10 ← (byte) utoa::digit#3 * (const byte) SIZEOF_WORD
  (word) utoa::digit_value#0 ← *((word*) utoa::digit_values#5 + (byte~) utoa::$10)
  (bool~) utoa::$6 ← (word) utoa::value#2 >= (word) utoa::digit_value#0
  (bool~) utoa::$7 ← (byte) utoa::started#2 || (bool~) utoa::$6
  (bool~) utoa::$8 ← ! (bool~) utoa::$7
  if((bool~) utoa::$8) goto utoa::@13
  to:utoa::@14
utoa::@12: scope:[utoa]  from utoa::@10
  (byte*) utoa::buffer#7 ← phi( utoa::@10/(byte*) utoa::buffer#11 )
  (word) utoa::value#3 ← phi( utoa::@10/(word) utoa::value#5 )
  (byte~) utoa::$11 ← (byte)(word) utoa::value#3
  *((byte*) utoa::buffer#7) ← *((const byte*) DIGITS + (byte~) utoa::$11)
  (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#7
  *((byte*) utoa::buffer#3) ← (number) 0
  to:utoa::@return
utoa::@13: scope:[utoa]  from utoa::@11 utoa::@15
  (byte*) utoa::buffer#14 ← phi( utoa::@11/(byte*) utoa::buffer#12 utoa::@15/(byte*) utoa::buffer#4 )
  (byte) utoa::started#4 ← phi( utoa::@11/(byte) utoa::started#2 utoa::@15/(byte) utoa::started#1 )
  (word) utoa::value#6 ← phi( utoa::@11/(word) utoa::value#2 utoa::@15/(word) utoa::value#0 )
  (word*) utoa::digit_values#7 ← phi( utoa::@11/(word*) utoa::digit_values#5 utoa::@15/(word*) utoa::digit_values#9 )
  (byte) utoa::max_digits#6 ← phi( utoa::@11/(byte) utoa::max_digits#8 utoa::@15/(byte) utoa::max_digits#9 )
  (byte) utoa::digit#4 ← phi( utoa::@11/(byte) utoa::digit#3 utoa::@15/(byte) utoa::digit#5 )
  (byte) utoa::digit#1 ← ++ (byte) utoa::digit#4
  to:utoa::@10
utoa::@14: scope:[utoa]  from utoa::@11
  (word*) utoa::digit_values#10 ← phi( utoa::@11/(word*) utoa::digit_values#5 )
  (byte) utoa::max_digits#10 ← phi( utoa::@11/(byte) utoa::max_digits#8 )
  (byte) utoa::digit#6 ← phi( utoa::@11/(byte) utoa::digit#3 )
  (word) utoa::digit_value#1 ← phi( utoa::@11/(word) utoa::digit_value#0 )
  (word) utoa::value#4 ← phi( utoa::@11/(word) utoa::value#2 )
  (byte*) utoa::buffer#8 ← phi( utoa::@11/(byte*) utoa::buffer#12 )
  (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#8
  (word) utoa_append::value#0 ← (word) utoa::value#4
  (word) utoa_append::sub#0 ← (word) utoa::digit_value#1
  call utoa_append 
  (word) utoa_append::return#0 ← (word) utoa_append::return#2
  to:utoa::@15
utoa::@15: scope:[utoa]  from utoa::@14
  (word*) utoa::digit_values#9 ← phi( utoa::@14/(word*) utoa::digit_values#10 )
  (byte) utoa::max_digits#9 ← phi( utoa::@14/(byte) utoa::max_digits#10 )
  (byte) utoa::digit#5 ← phi( utoa::@14/(byte) utoa::digit#6 )
  (byte*) utoa::buffer#9 ← phi( utoa::@14/(byte*) utoa::buffer#8 )
  (word) utoa_append::return#3 ← phi( utoa::@14/(word) utoa_append::return#0 )
  (word~) utoa::$9 ← (word) utoa_append::return#3
  (word) utoa::value#0 ← (word~) utoa::$9
  (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#9
  (byte) utoa::started#1 ← (number) 1
  to:utoa::@13

(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
utoa_append: scope:[utoa_append]  from utoa::@14
  (byte*) utoa_append::buffer#3 ← phi( utoa::@14/(byte*) utoa_append::buffer#0 )
  (word) utoa_append::sub#3 ← phi( utoa::@14/(word) utoa_append::sub#0 )
  (word) utoa_append::value#5 ← phi( utoa::@14/(word) utoa_append::value#0 )
  (byte) utoa_append::digit#0 ← (byte) 0
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  (byte*) utoa_append::buffer#2 ← phi( utoa_append/(byte*) utoa_append::buffer#3 utoa_append::@2/(byte*) utoa_append::buffer#4 )
  (byte) utoa_append::digit#4 ← phi( utoa_append/(byte) utoa_append::digit#0 utoa_append::@2/(byte) utoa_append::digit#1 )
  (word) utoa_append::sub#1 ← phi( utoa_append/(word) utoa_append::sub#3 utoa_append::@2/(word) utoa_append::sub#2 )
  (word) utoa_append::value#2 ← phi( utoa_append/(word) utoa_append::value#5 utoa_append::@2/(word) utoa_append::value#1 )
  (bool~) utoa_append::$0 ← (word) utoa_append::value#2 >= (word) utoa_append::sub#1
  if((bool~) utoa_append::$0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  (byte*) utoa_append::buffer#4 ← phi( utoa_append::@1/(byte*) utoa_append::buffer#2 )
  (word) utoa_append::sub#2 ← phi( utoa_append::@1/(word) utoa_append::sub#1 )
  (word) utoa_append::value#3 ← phi( utoa_append::@1/(word) utoa_append::value#2 )
  (byte) utoa_append::digit#2 ← phi( utoa_append::@1/(byte) utoa_append::digit#4 )
  (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2
  (word) utoa_append::value#1 ← (word) utoa_append::value#3 - (word) utoa_append::sub#2
  to:utoa_append::@1
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  (word) utoa_append::value#4 ← phi( utoa_append::@1/(word) utoa_append::value#2 )
  (byte*) utoa_append::buffer#1 ← phi( utoa_append::@1/(byte*) utoa_append::buffer#2 )
  (byte) utoa_append::digit#3 ← phi( utoa_append::@1/(byte) utoa_append::digit#4 )
  *((byte*) utoa_append::buffer#1) ← *((const byte*) DIGITS + (byte) utoa_append::digit#3)
  (word) utoa_append::return#1 ← (word) utoa_append::value#4
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  (word) utoa_append::return#4 ← phi( utoa_append::@3/(word) utoa_append::return#1 )
  (word) utoa_append::return#2 ← (word) utoa_append::return#4
  return 
  to:@return

(void()) ultoa((dword) ultoa::value , (byte*) ultoa::buffer , (byte) ultoa::radix)
ultoa: scope:[ultoa]  from printf_ulong::@3
  (byte*) ultoa::buffer#21 ← phi( printf_ulong::@3/(byte*) ultoa::buffer#5 )
  (dword) ultoa::value#12 ← phi( printf_ulong::@3/(dword) ultoa::value#1 )
  (byte) ultoa::radix#1 ← phi( printf_ulong::@3/(byte) ultoa::radix#0 )
  (byte) ultoa::max_digits#0 ← (byte) 0
  (dword*) ultoa::digit_values#0 ← (dword*) 0
  (bool~) ultoa::$0 ← (byte) ultoa::radix#1 == (const byte) DECIMAL
  if((bool~) ultoa::$0) goto ultoa::@1
  to:ultoa::@6
ultoa::@1: scope:[ultoa]  from ultoa
  (byte*) ultoa::buffer#17 ← phi( ultoa/(byte*) ultoa::buffer#21 )
  (dword) ultoa::value#8 ← phi( ultoa/(dword) ultoa::value#12 )
  (byte) ultoa::max_digits#1 ← (number) $a
  (dword*) ultoa::digit_values#1 ← (const dword*) RADIX_DECIMAL_VALUES_LONG
  to:ultoa::@5
ultoa::@6: scope:[ultoa]  from ultoa
  (dword) ultoa::value#13 ← phi( ultoa/(dword) ultoa::value#12 )
  (byte*) ultoa::buffer#16 ← phi( ultoa/(byte*) ultoa::buffer#21 )
  (byte) ultoa::radix#2 ← phi( ultoa/(byte) ultoa::radix#1 )
  (bool~) ultoa::$1 ← (byte) ultoa::radix#2 == (const byte) HEXADECIMAL
  if((bool~) ultoa::$1) goto ultoa::@2
  to:ultoa::@7
ultoa::@2: scope:[ultoa]  from ultoa::@6
  (byte*) ultoa::buffer#18 ← phi( ultoa::@6/(byte*) ultoa::buffer#16 )
  (dword) ultoa::value#9 ← phi( ultoa::@6/(dword) ultoa::value#13 )
  (byte) ultoa::max_digits#2 ← (number) 8
  (dword*) ultoa::digit_values#2 ← (const dword*) RADIX_HEXADECIMAL_VALUES_LONG
  to:ultoa::@5
ultoa::@7: scope:[ultoa]  from ultoa::@6
  (dword) ultoa::value#14 ← phi( ultoa::@6/(dword) ultoa::value#13 )
  (byte*) ultoa::buffer#13 ← phi( ultoa::@6/(byte*) ultoa::buffer#16 )
  (byte) ultoa::radix#3 ← phi( ultoa::@6/(byte) ultoa::radix#2 )
  (bool~) ultoa::$2 ← (byte) ultoa::radix#3 == (const byte) OCTAL
  if((bool~) ultoa::$2) goto ultoa::@3
  to:ultoa::@8
ultoa::@3: scope:[ultoa]  from ultoa::@7
  (byte*) ultoa::buffer#19 ← phi( ultoa::@7/(byte*) ultoa::buffer#13 )
  (dword) ultoa::value#10 ← phi( ultoa::@7/(dword) ultoa::value#14 )
  (byte) ultoa::max_digits#3 ← (number) $b
  (dword*) ultoa::digit_values#3 ← (const dword*) RADIX_OCTAL_VALUES_LONG
  to:ultoa::@5
ultoa::@8: scope:[ultoa]  from ultoa::@7
  (dword) ultoa::value#15 ← phi( ultoa::@7/(dword) ultoa::value#14 )
  (byte*) ultoa::buffer#10 ← phi( ultoa::@7/(byte*) ultoa::buffer#13 )
  (byte) ultoa::radix#4 ← phi( ultoa::@7/(byte) ultoa::radix#3 )
  (bool~) ultoa::$3 ← (byte) ultoa::radix#4 == (const byte) BINARY
  if((bool~) ultoa::$3) goto ultoa::@4
  to:ultoa::@9
ultoa::@4: scope:[ultoa]  from ultoa::@8
  (byte*) ultoa::buffer#20 ← phi( ultoa::@8/(byte*) ultoa::buffer#10 )
  (dword) ultoa::value#11 ← phi( ultoa::@8/(dword) ultoa::value#15 )
  (byte) ultoa::max_digits#4 ← (number) $20
  (dword*) ultoa::digit_values#4 ← (const dword*) RADIX_BINARY_VALUES_LONG
  to:ultoa::@5
ultoa::@9: scope:[ultoa]  from ultoa::@8
  (byte*) ultoa::buffer#6 ← phi( ultoa::@8/(byte*) ultoa::buffer#10 )
  *((byte*) ultoa::buffer#6) ← (byte) 'e'
  (byte*) ultoa::buffer#0 ← ++ (byte*) ultoa::buffer#6
  *((byte*) ultoa::buffer#0) ← (byte) 'r'
  (byte*) ultoa::buffer#1 ← ++ (byte*) ultoa::buffer#0
  *((byte*) ultoa::buffer#1) ← (byte) 'r'
  (byte*) ultoa::buffer#2 ← ++ (byte*) ultoa::buffer#1
  *((byte*) ultoa::buffer#2) ← (number) 0
  to:ultoa::@return
ultoa::@return: scope:[ultoa]  from ultoa::@12 ultoa::@9
  return 
  to:@return
ultoa::@5: scope:[ultoa]  from ultoa::@1 ultoa::@2 ultoa::@3 ultoa::@4
  (byte*) ultoa::buffer#15 ← phi( ultoa::@1/(byte*) ultoa::buffer#17 ultoa::@2/(byte*) ultoa::buffer#18 ultoa::@3/(byte*) ultoa::buffer#19 ultoa::@4/(byte*) ultoa::buffer#20 )
  (dword) ultoa::value#7 ← phi( ultoa::@1/(dword) ultoa::value#8 ultoa::@2/(dword) ultoa::value#9 ultoa::@3/(dword) ultoa::value#10 ultoa::@4/(dword) ultoa::value#11 )
  (dword*) ultoa::digit_values#8 ← phi( ultoa::@1/(dword*) ultoa::digit_values#1 ultoa::@2/(dword*) ultoa::digit_values#2 ultoa::@3/(dword*) ultoa::digit_values#3 ultoa::@4/(dword*) ultoa::digit_values#4 )
  (byte) ultoa::max_digits#7 ← phi( ultoa::@1/(byte) ultoa::max_digits#1 ultoa::@2/(byte) ultoa::max_digits#2 ultoa::@3/(byte) ultoa::max_digits#3 ultoa::@4/(byte) ultoa::max_digits#4 )
  (byte) ultoa::started#0 ← (byte) 0
  (byte) ultoa::digit#0 ← (byte) 0
  to:ultoa::@10
ultoa::@10: scope:[ultoa]  from ultoa::@13 ultoa::@5
  (byte*) ultoa::buffer#11 ← phi( ultoa::@13/(byte*) ultoa::buffer#14 ultoa::@5/(byte*) ultoa::buffer#15 )
  (byte) ultoa::started#3 ← phi( ultoa::@13/(byte) ultoa::started#4 ultoa::@5/(byte) ultoa::started#0 )
  (dword) ultoa::value#5 ← phi( ultoa::@13/(dword) ultoa::value#6 ultoa::@5/(dword) ultoa::value#7 )
  (dword*) ultoa::digit_values#6 ← phi( ultoa::@13/(dword*) ultoa::digit_values#7 ultoa::@5/(dword*) ultoa::digit_values#8 )
  (byte) ultoa::digit#2 ← phi( ultoa::@13/(byte) ultoa::digit#1 ultoa::@5/(byte) ultoa::digit#0 )
  (byte) ultoa::max_digits#5 ← phi( ultoa::@13/(byte) ultoa::max_digits#6 ultoa::@5/(byte) ultoa::max_digits#7 )
  (number~) ultoa::$4 ← (byte) ultoa::max_digits#5 - (number) 1
  (bool~) ultoa::$5 ← (byte) ultoa::digit#2 < (number~) ultoa::$4
  if((bool~) ultoa::$5) goto ultoa::@11
  to:ultoa::@12
ultoa::@11: scope:[ultoa]  from ultoa::@10
  (byte) ultoa::max_digits#8 ← phi( ultoa::@10/(byte) ultoa::max_digits#5 )
  (byte*) ultoa::buffer#12 ← phi( ultoa::@10/(byte*) ultoa::buffer#11 )
  (byte) ultoa::started#2 ← phi( ultoa::@10/(byte) ultoa::started#3 )
  (dword) ultoa::value#2 ← phi( ultoa::@10/(dword) ultoa::value#5 )
  (dword*) ultoa::digit_values#5 ← phi( ultoa::@10/(dword*) ultoa::digit_values#6 )
  (byte) ultoa::digit#3 ← phi( ultoa::@10/(byte) ultoa::digit#2 )
  (byte~) ultoa::$10 ← (byte) ultoa::digit#3 * (const byte) SIZEOF_DWORD
  (dword) ultoa::digit_value#0 ← *((dword*) ultoa::digit_values#5 + (byte~) ultoa::$10)
  (bool~) ultoa::$6 ← (dword) ultoa::value#2 >= (dword) ultoa::digit_value#0
  (bool~) ultoa::$7 ← (byte) ultoa::started#2 || (bool~) ultoa::$6
  (bool~) ultoa::$8 ← ! (bool~) ultoa::$7
  if((bool~) ultoa::$8) goto ultoa::@13
  to:ultoa::@14
ultoa::@12: scope:[ultoa]  from ultoa::@10
  (byte*) ultoa::buffer#7 ← phi( ultoa::@10/(byte*) ultoa::buffer#11 )
  (dword) ultoa::value#3 ← phi( ultoa::@10/(dword) ultoa::value#5 )
  (byte~) ultoa::$11 ← (byte)(dword) ultoa::value#3
  *((byte*) ultoa::buffer#7) ← *((const byte*) DIGITS + (byte~) ultoa::$11)
  (byte*) ultoa::buffer#3 ← ++ (byte*) ultoa::buffer#7
  *((byte*) ultoa::buffer#3) ← (number) 0
  to:ultoa::@return
ultoa::@13: scope:[ultoa]  from ultoa::@11 ultoa::@15
  (byte*) ultoa::buffer#14 ← phi( ultoa::@11/(byte*) ultoa::buffer#12 ultoa::@15/(byte*) ultoa::buffer#4 )
  (byte) ultoa::started#4 ← phi( ultoa::@11/(byte) ultoa::started#2 ultoa::@15/(byte) ultoa::started#1 )
  (dword) ultoa::value#6 ← phi( ultoa::@11/(dword) ultoa::value#2 ultoa::@15/(dword) ultoa::value#0 )
  (dword*) ultoa::digit_values#7 ← phi( ultoa::@11/(dword*) ultoa::digit_values#5 ultoa::@15/(dword*) ultoa::digit_values#9 )
  (byte) ultoa::max_digits#6 ← phi( ultoa::@11/(byte) ultoa::max_digits#8 ultoa::@15/(byte) ultoa::max_digits#9 )
  (byte) ultoa::digit#4 ← phi( ultoa::@11/(byte) ultoa::digit#3 ultoa::@15/(byte) ultoa::digit#5 )
  (byte) ultoa::digit#1 ← ++ (byte) ultoa::digit#4
  to:ultoa::@10
ultoa::@14: scope:[ultoa]  from ultoa::@11
  (dword*) ultoa::digit_values#10 ← phi( ultoa::@11/(dword*) ultoa::digit_values#5 )
  (byte) ultoa::max_digits#10 ← phi( ultoa::@11/(byte) ultoa::max_digits#8 )
  (byte) ultoa::digit#6 ← phi( ultoa::@11/(byte) ultoa::digit#3 )
  (dword) ultoa::digit_value#1 ← phi( ultoa::@11/(dword) ultoa::digit_value#0 )
  (dword) ultoa::value#4 ← phi( ultoa::@11/(dword) ultoa::value#2 )
  (byte*) ultoa::buffer#8 ← phi( ultoa::@11/(byte*) ultoa::buffer#12 )
  (byte*) ultoa_append::buffer#0 ← (byte*) ultoa::buffer#8
  (dword) ultoa_append::value#0 ← (dword) ultoa::value#4
  (dword) ultoa_append::sub#0 ← (dword) ultoa::digit_value#1
  call ultoa_append 
  (dword) ultoa_append::return#0 ← (dword) ultoa_append::return#2
  to:ultoa::@15
ultoa::@15: scope:[ultoa]  from ultoa::@14
  (dword*) ultoa::digit_values#9 ← phi( ultoa::@14/(dword*) ultoa::digit_values#10 )
  (byte) ultoa::max_digits#9 ← phi( ultoa::@14/(byte) ultoa::max_digits#10 )
  (byte) ultoa::digit#5 ← phi( ultoa::@14/(byte) ultoa::digit#6 )
  (byte*) ultoa::buffer#9 ← phi( ultoa::@14/(byte*) ultoa::buffer#8 )
  (dword) ultoa_append::return#3 ← phi( ultoa::@14/(dword) ultoa_append::return#0 )
  (dword~) ultoa::$9 ← (dword) ultoa_append::return#3
  (dword) ultoa::value#0 ← (dword~) ultoa::$9
  (byte*) ultoa::buffer#4 ← ++ (byte*) ultoa::buffer#9
  (byte) ultoa::started#1 ← (number) 1
  to:ultoa::@13

(dword()) ultoa_append((byte*) ultoa_append::buffer , (dword) ultoa_append::value , (dword) ultoa_append::sub)
ultoa_append: scope:[ultoa_append]  from ultoa::@14
  (byte*) ultoa_append::buffer#3 ← phi( ultoa::@14/(byte*) ultoa_append::buffer#0 )
  (dword) ultoa_append::sub#3 ← phi( ultoa::@14/(dword) ultoa_append::sub#0 )
  (dword) ultoa_append::value#5 ← phi( ultoa::@14/(dword) ultoa_append::value#0 )
  (byte) ultoa_append::digit#0 ← (byte) 0
  to:ultoa_append::@1
ultoa_append::@1: scope:[ultoa_append]  from ultoa_append ultoa_append::@2
  (byte*) ultoa_append::buffer#2 ← phi( ultoa_append/(byte*) ultoa_append::buffer#3 ultoa_append::@2/(byte*) ultoa_append::buffer#4 )
  (byte) ultoa_append::digit#4 ← phi( ultoa_append/(byte) ultoa_append::digit#0 ultoa_append::@2/(byte) ultoa_append::digit#1 )
  (dword) ultoa_append::sub#1 ← phi( ultoa_append/(dword) ultoa_append::sub#3 ultoa_append::@2/(dword) ultoa_append::sub#2 )
  (dword) ultoa_append::value#2 ← phi( ultoa_append/(dword) ultoa_append::value#5 ultoa_append::@2/(dword) ultoa_append::value#1 )
  (bool~) ultoa_append::$0 ← (dword) ultoa_append::value#2 >= (dword) ultoa_append::sub#1
  if((bool~) ultoa_append::$0) goto ultoa_append::@2
  to:ultoa_append::@3
ultoa_append::@2: scope:[ultoa_append]  from ultoa_append::@1
  (byte*) ultoa_append::buffer#4 ← phi( ultoa_append::@1/(byte*) ultoa_append::buffer#2 )
  (dword) ultoa_append::sub#2 ← phi( ultoa_append::@1/(dword) ultoa_append::sub#1 )
  (dword) ultoa_append::value#3 ← phi( ultoa_append::@1/(dword) ultoa_append::value#2 )
  (byte) ultoa_append::digit#2 ← phi( ultoa_append::@1/(byte) ultoa_append::digit#4 )
  (byte) ultoa_append::digit#1 ← ++ (byte) ultoa_append::digit#2
  (dword) ultoa_append::value#1 ← (dword) ultoa_append::value#3 - (dword) ultoa_append::sub#2
  to:ultoa_append::@1
ultoa_append::@3: scope:[ultoa_append]  from ultoa_append::@1
  (dword) ultoa_append::value#4 ← phi( ultoa_append::@1/(dword) ultoa_append::value#2 )
  (byte*) ultoa_append::buffer#1 ← phi( ultoa_append::@1/(byte*) ultoa_append::buffer#2 )
  (byte) ultoa_append::digit#3 ← phi( ultoa_append::@1/(byte) ultoa_append::digit#4 )
  *((byte*) ultoa_append::buffer#1) ← *((const byte*) DIGITS + (byte) ultoa_append::digit#3)
  (dword) ultoa_append::return#1 ← (dword) ultoa_append::value#4
  to:ultoa_append::@return
ultoa_append::@return: scope:[ultoa_append]  from ultoa_append::@3
  (dword) ultoa_append::return#4 ← phi( ultoa_append::@3/(dword) ultoa_append::return#1 )
  (dword) ultoa_append::return#2 ← (dword) ultoa_append::return#4
  return 
  to:@return

(void()) clrscr()
clrscr: scope:[clrscr]  from main
  (byte*) clrscr::line_text#0 ← (const nomodify byte*) CONIO_SCREEN_TEXT
  (byte*) clrscr::line_cols#0 ← (const nomodify byte*) CONIO_SCREEN_COLORS
  (byte) clrscr::l#0 ← (byte) 0
  to:clrscr::@1
clrscr::@1: scope:[clrscr]  from clrscr clrscr::@6
  (byte*) clrscr::line_cols#6 ← phi( clrscr/(byte*) clrscr::line_cols#0 clrscr::@6/(byte*) clrscr::line_cols#1 )
  (byte*) clrscr::line_text#6 ← phi( clrscr/(byte*) clrscr::line_text#0 clrscr::@6/(byte*) clrscr::line_text#1 )
  (byte) clrscr::l#2 ← phi( clrscr/(byte) clrscr::l#0 clrscr::@6/(byte) clrscr::l#1 )
  (bool~) clrscr::$0 ← (byte) clrscr::l#2 < (number) $19
  if((bool~) clrscr::$0) goto clrscr::@2
  to:clrscr::@3
clrscr::@2: scope:[clrscr]  from clrscr::@1
  (byte) clrscr::l#5 ← phi( clrscr::@1/(byte) clrscr::l#2 )
  (byte*) clrscr::line_cols#5 ← phi( clrscr::@1/(byte*) clrscr::line_cols#6 )
  (byte*) clrscr::line_text#5 ← phi( clrscr::@1/(byte*) clrscr::line_text#6 )
  (byte) clrscr::c#0 ← (byte) 0
  to:clrscr::@4
clrscr::@3: scope:[clrscr]  from clrscr::@1
  (byte) conio_cursor_x ← (number) 0
  (byte) conio_cursor_y ← (number) 0
  (byte*) conio_line_text ← (const nomodify byte*) CONIO_SCREEN_TEXT
  (byte*) conio_line_color ← (const nomodify byte*) CONIO_SCREEN_COLORS
  to:clrscr::@return
clrscr::@4: scope:[clrscr]  from clrscr::@2 clrscr::@5
  (byte) clrscr::l#4 ← phi( clrscr::@2/(byte) clrscr::l#5 clrscr::@5/(byte) clrscr::l#6 )
  (byte*) clrscr::line_cols#4 ← phi( clrscr::@2/(byte*) clrscr::line_cols#5 clrscr::@5/(byte*) clrscr::line_cols#2 )
  (byte*) clrscr::line_text#4 ← phi( clrscr::@2/(byte*) clrscr::line_text#5 clrscr::@5/(byte*) clrscr::line_text#2 )
  (byte) clrscr::c#2 ← phi( clrscr::@2/(byte) clrscr::c#0 clrscr::@5/(byte) clrscr::c#1 )
  (bool~) clrscr::$1 ← (byte) clrscr::c#2 < (number) $28
  if((bool~) clrscr::$1) goto clrscr::@5
  to:clrscr::@6
clrscr::@5: scope:[clrscr]  from clrscr::@4
  (byte) clrscr::l#6 ← phi( clrscr::@4/(byte) clrscr::l#4 )
  (byte*) clrscr::line_cols#2 ← phi( clrscr::@4/(byte*) clrscr::line_cols#4 )
  (byte) clrscr::c#3 ← phi( clrscr::@4/(byte) clrscr::c#2 )
  (byte*) clrscr::line_text#2 ← phi( clrscr::@4/(byte*) clrscr::line_text#4 )
  *((byte*) clrscr::line_text#2 + (byte) clrscr::c#3) ← (byte) ' '
  *((byte*) clrscr::line_cols#2 + (byte) clrscr::c#3) ← (byte) conio_textcolor
  (byte) clrscr::c#1 ← ++ (byte) clrscr::c#3
  to:clrscr::@4
clrscr::@6: scope:[clrscr]  from clrscr::@4
  (byte) clrscr::l#3 ← phi( clrscr::@4/(byte) clrscr::l#4 )
  (byte*) clrscr::line_cols#3 ← phi( clrscr::@4/(byte*) clrscr::line_cols#4 )
  (byte*) clrscr::line_text#3 ← phi( clrscr::@4/(byte*) clrscr::line_text#4 )
  (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#3 + (number) $28
  (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#3 + (number) $28
  (byte) clrscr::l#1 ← ++ (byte) clrscr::l#3
  to:clrscr::@1
clrscr::@return: scope:[clrscr]  from clrscr::@3
  return 
  to:@return

(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
gotoxy: scope:[gotoxy]  from cscroll::@2 print
  (byte) gotoxy::x#5 ← phi( cscroll::@2/(byte) gotoxy::x#1 print/(byte) gotoxy::x#2 )
  (byte) gotoxy::y#3 ← phi( cscroll::@2/(byte) gotoxy::y#1 print/(byte) gotoxy::y#2 )
  (bool~) gotoxy::$0 ← (byte) gotoxy::y#3 > (number) $19
  (bool~) gotoxy::$1 ← ! (bool~) gotoxy::$0
  if((bool~) gotoxy::$1) goto gotoxy::@1
  to:gotoxy::@3
gotoxy::@1: scope:[gotoxy]  from gotoxy gotoxy::@3
  (byte) gotoxy::y#5 ← phi( gotoxy/(byte) gotoxy::y#3 gotoxy::@3/(byte) gotoxy::y#0 )
  (byte) gotoxy::x#3 ← phi( gotoxy/(byte) gotoxy::x#5 gotoxy::@3/(byte) gotoxy::x#6 )
  (bool~) gotoxy::$2 ← (byte) gotoxy::x#3 >= (number) $28
  (bool~) gotoxy::$3 ← ! (bool~) gotoxy::$2
  if((bool~) gotoxy::$3) goto gotoxy::@2
  to:gotoxy::@4
gotoxy::@3: scope:[gotoxy]  from gotoxy
  (byte) gotoxy::x#6 ← phi( gotoxy/(byte) gotoxy::x#5 )
  (byte) gotoxy::y#0 ← (number) 0
  to:gotoxy::@1
gotoxy::@2: scope:[gotoxy]  from gotoxy::@1 gotoxy::@4
  (byte) gotoxy::y#4 ← phi( gotoxy::@1/(byte) gotoxy::y#5 gotoxy::@4/(byte) gotoxy::y#6 )
  (byte) gotoxy::x#4 ← phi( gotoxy::@1/(byte) gotoxy::x#3 gotoxy::@4/(byte) gotoxy::x#0 )
  (byte) conio_cursor_x ← (byte) gotoxy::x#4
  (byte) conio_cursor_y ← (byte) gotoxy::y#4
  (word~) gotoxy::$7 ← (word)(byte) gotoxy::y#4
  (number~) gotoxy::$4 ← (word~) gotoxy::$7 * (number) $28
  (word) gotoxy::line_offset#0 ← (number~) gotoxy::$4
  (byte*~) gotoxy::$5 ← (const nomodify byte*) CONIO_SCREEN_TEXT + (word) gotoxy::line_offset#0
  (byte*) conio_line_text ← (byte*~) gotoxy::$5
  (byte*~) gotoxy::$6 ← (const nomodify byte*) CONIO_SCREEN_COLORS + (word) gotoxy::line_offset#0
  (byte*) conio_line_color ← (byte*~) gotoxy::$6
  to:gotoxy::@return
gotoxy::@4: scope:[gotoxy]  from gotoxy::@1
  (byte) gotoxy::y#6 ← phi( gotoxy::@1/(byte) gotoxy::y#5 )
  (byte) gotoxy::x#0 ← (number) 0
  to:gotoxy::@2
gotoxy::@return: scope:[gotoxy]  from gotoxy::@2
  return 
  to:@return

(void()) cputc((byte) cputc::c)
cputc: scope:[cputc]  from cputs::@2 printf_number_buffer::@9 printf_padding::@2
  (byte) cputc::c#3 ← phi( cputs::@2/(byte) cputc::c#0 printf_number_buffer::@9/(byte) cputc::c#2 printf_padding::@2/(byte) cputc::c#1 )
  (bool~) cputc::$0 ← (byte) cputc::c#3 == (byte) '
'
  if((bool~) cputc::$0) goto cputc::@1
  to:cputc::@2
cputc::@1: scope:[cputc]  from cputc
  call cputln 
  to:cputc::@4
cputc::@4: scope:[cputc]  from cputc::@1
  to:cputc::@return
cputc::@2: scope:[cputc]  from cputc
  (byte) cputc::c#4 ← phi( cputc/(byte) cputc::c#3 )
  *((byte*) conio_line_text + (byte) conio_cursor_x) ← (byte) cputc::c#4
  *((byte*) conio_line_color + (byte) conio_cursor_x) ← (byte) conio_textcolor
  (byte) conio_cursor_x ← ++ (byte) conio_cursor_x
  (bool~) cputc::$1 ← (byte) conio_cursor_x == (number) $28
  (bool~) cputc::$2 ← ! (bool~) cputc::$1
  if((bool~) cputc::$2) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  call cputln 
  to:cputc::@5
cputc::@5: scope:[cputc]  from cputc::@3
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@2 cputc::@4 cputc::@5
  return 
  to:@return

(void()) cputln()
cputln: scope:[cputln]  from cputc::@1 cputc::@3
  (byte*) conio_line_text ← (byte*) conio_line_text + (number) $28
  (byte*) conio_line_color ← (byte*) conio_line_color + (number) $28
  (byte) conio_cursor_x ← (number) 0
  (byte) conio_cursor_y ← ++ (byte) conio_cursor_y
  call cscroll 
  to:cputln::@1
cputln::@1: scope:[cputln]  from cputln
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln::@1
  return 
  to:@return

(void()) cscroll()
cscroll: scope:[cscroll]  from cputln
  (bool~) cscroll::$0 ← (byte) conio_cursor_y == (number) $19
  (bool~) cscroll::$1 ← ! (bool~) cscroll::$0
  if((bool~) cscroll::$1) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  (bool~) cscroll::$7 ← (number) 0 != (byte) conio_scroll_enable
  if((bool~) cscroll::$7) goto cscroll::@3
  to:cscroll::@2
cscroll::@3: scope:[cscroll]  from cscroll::@1
  (void*) memcpy::destination#0 ← (void*)(const nomodify byte*) CONIO_SCREEN_TEXT
  (void*) memcpy::source#0 ← (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(number) $28
  (word) memcpy::num#0 ← (number) $19*(number) $28-(number) $28
  call memcpy 
  (void*) memcpy::return#2 ← (void*) memcpy::return#1
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  (void*) memcpy::destination#1 ← (void*)(const nomodify byte*) CONIO_SCREEN_COLORS
  (void*) memcpy::source#1 ← (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(number) $28
  (word) memcpy::num#1 ← (number) $19*(number) $28-(number) $28
  call memcpy 
  (void*) memcpy::return#3 ← (void*) memcpy::return#1
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  (void*) memset::str#0 ← (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(number) $19*(number) $28-(number) $28
  (byte) memset::c#0 ← (byte) ' '
  (word) memset::num#0 ← (number) $28
  call memset 
  (void*) memset::return#2 ← (void*) memset::return#1
  to:cscroll::@6
cscroll::@6: scope:[cscroll]  from cscroll::@5
  (void*) memset::str#1 ← (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(number) $19*(number) $28-(number) $28
  (byte) memset::c#1 ← (byte) conio_textcolor
  (word) memset::num#1 ← (number) $28
  call memset 
  (void*) memset::return#3 ← (void*) memset::return#1
  to:cscroll::@7
cscroll::@7: scope:[cscroll]  from cscroll::@6
  (byte*) conio_line_text ← (byte*) conio_line_text - (number) $28
  (byte*) conio_line_color ← (byte*) conio_line_color - (number) $28
  (byte) conio_cursor_y ← -- (byte) conio_cursor_y
  to:cscroll::@return
cscroll::@2: scope:[cscroll]  from cscroll::@1
  (byte) gotoxy::x#1 ← (number) 0
  (byte) gotoxy::y#1 ← (number) 0
  call gotoxy 
  to:cscroll::@8
cscroll::@8: scope:[cscroll]  from cscroll::@2
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@7 cscroll::@8
  return 
  to:@return

(void()) cputs((to_nomodify byte*) cputs::s)
cputs: scope:[cputs]  from main::@1 main::@11 main::@2 main::@7 main::@9 print::@11 print::@12 print::@14 print::@5 print::@9 printf_number_buffer::@5 printf_string::@2
  (to_nomodify byte*) cputs::s#14 ← phi( main::@1/(to_nomodify byte*) cputs::s#3 main::@11/(to_nomodify byte*) cputs::s#7 main::@2/(to_nomodify byte*) cputs::s#4 main::@7/(to_nomodify byte*) cputs::s#5 main::@9/(to_nomodify byte*) cputs::s#6 print::@11/(to_nomodify byte*) cputs::s#12 print::@12/(to_nomodify byte*) cputs::s#8 print::@14/(to_nomodify byte*) cputs::s#9 print::@5/(to_nomodify byte*) cputs::s#10 print::@9/(to_nomodify byte*) cputs::s#11 printf_number_buffer::@5/(to_nomodify byte*) cputs::s#1 printf_string::@2/(to_nomodify byte*) cputs::s#2 )
  (byte) cputs::c#0 ← (byte) 0
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@3
  (to_nomodify byte*) cputs::s#13 ← phi( cputs/(to_nomodify byte*) cputs::s#14 cputs::@3/(to_nomodify byte*) cputs::s#15 )
  (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#13)
  (byte~) cputs::$0 ← (byte) cputs::c#1
  (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#13
  (bool~) cputs::$2 ← (number) 0 != (byte~) cputs::$0
  if((bool~) cputs::$2) goto cputs::@2
  to:cputs::@return
cputs::@2: scope:[cputs]  from cputs::@1
  (to_nomodify byte*) cputs::s#16 ← phi( cputs::@1/(to_nomodify byte*) cputs::s#0 )
  (byte) cputs::c#2 ← phi( cputs::@1/(byte) cputs::c#1 )
  (byte) cputc::c#0 ← (byte) cputs::c#2
  call cputc 
  to:cputs::@3
cputs::@3: scope:[cputs]  from cputs::@2
  (to_nomodify byte*) cputs::s#15 ← phi( cputs::@2/(to_nomodify byte*) cputs::s#16 )
  to:cputs::@1
cputs::@return: scope:[cputs]  from cputs::@1
  return 
  to:@return

(void()) printf_padding((byte) printf_padding::pad , (byte) printf_padding::length)
printf_padding: scope:[printf_padding]  from printf_number_buffer::@10 printf_number_buffer::@12 printf_number_buffer::@8 printf_string::@5 printf_string::@6
  (byte) printf_padding::pad#7 ← phi( printf_number_buffer::@10/(byte) printf_padding::pad#1 printf_number_buffer::@12/(byte) printf_padding::pad#2 printf_number_buffer::@8/(byte) printf_padding::pad#0 printf_string::@5/(byte) printf_padding::pad#3 printf_string::@6/(byte) printf_padding::pad#4 )
  (byte) printf_padding::length#6 ← phi( printf_number_buffer::@10/(byte) printf_padding::length#1 printf_number_buffer::@12/(byte) printf_padding::length#2 printf_number_buffer::@8/(byte) printf_padding::length#0 printf_string::@5/(byte) printf_padding::length#3 printf_string::@6/(byte) printf_padding::length#4 )
  (byte) printf_padding::i#0 ← (byte) 0
  to:printf_padding::@1
printf_padding::@1: scope:[printf_padding]  from printf_padding printf_padding::@3
  (byte) printf_padding::pad#6 ← phi( printf_padding/(byte) printf_padding::pad#7 printf_padding::@3/(byte) printf_padding::pad#8 )
  (byte) printf_padding::length#5 ← phi( printf_padding/(byte) printf_padding::length#6 printf_padding::@3/(byte) printf_padding::length#7 )
  (byte) printf_padding::i#2 ← phi( printf_padding/(byte) printf_padding::i#0 printf_padding::@3/(byte) printf_padding::i#1 )
  (bool~) printf_padding::$0 ← (byte) printf_padding::i#2 < (byte) printf_padding::length#5
  if((bool~) printf_padding::$0) goto printf_padding::@2
  to:printf_padding::@return
printf_padding::@2: scope:[printf_padding]  from printf_padding::@1
  (byte) printf_padding::length#8 ← phi( printf_padding::@1/(byte) printf_padding::length#5 )
  (byte) printf_padding::i#4 ← phi( printf_padding::@1/(byte) printf_padding::i#2 )
  (byte) printf_padding::pad#5 ← phi( printf_padding::@1/(byte) printf_padding::pad#6 )
  (byte) cputc::c#1 ← (byte) printf_padding::pad#5
  call cputc 
  to:printf_padding::@3
printf_padding::@3: scope:[printf_padding]  from printf_padding::@2
  (byte) printf_padding::pad#8 ← phi( printf_padding::@2/(byte) printf_padding::pad#5 )
  (byte) printf_padding::length#7 ← phi( printf_padding::@2/(byte) printf_padding::length#8 )
  (byte) printf_padding::i#3 ← phi( printf_padding::@2/(byte) printf_padding::i#4 )
  (byte) printf_padding::i#1 ← ++ (byte) printf_padding::i#3
  to:printf_padding::@1
printf_padding::@return: scope:[printf_padding]  from printf_padding::@1
  return 
  to:@return

(void()) printf_ulong((dword) printf_ulong::uvalue , (byte) printf_ulong::format_min_length , (byte) printf_ulong::format_justify_left , (byte) printf_ulong::format_sign_always , (byte) printf_ulong::format_zero_padding , (byte) printf_ulong::format_upper_case , (byte) printf_ulong::format_radix)
printf_ulong: scope:[printf_ulong]  from main::@8 print::@13
  (byte) printf_ulong::format_upper_case#6 ← phi( main::@8/(byte) printf_ulong::format_upper_case#0 print::@13/(byte) printf_ulong::format_upper_case#1 )
  (byte) printf_ulong::format_zero_padding#6 ← phi( main::@8/(byte) printf_ulong::format_zero_padding#0 print::@13/(byte) printf_ulong::format_zero_padding#1 )
  (byte) printf_ulong::format_justify_left#6 ← phi( main::@8/(byte) printf_ulong::format_justify_left#0 print::@13/(byte) printf_ulong::format_justify_left#1 )
  (byte) printf_ulong::format_min_length#6 ← phi( main::@8/(byte) printf_ulong::format_min_length#0 print::@13/(byte) printf_ulong::format_min_length#1 )
  (byte) printf_ulong::format_radix#6 ← phi( main::@8/(byte) printf_ulong::format_radix#0 print::@13/(byte) printf_ulong::format_radix#1 )
  (dword) printf_ulong::uvalue#5 ← phi( main::@8/(dword) printf_ulong::uvalue#0 print::@13/(dword) printf_ulong::uvalue#1 )
  (byte) printf_ulong::format_sign_always#2 ← phi( main::@8/(byte) printf_ulong::format_sign_always#0 print::@13/(byte) printf_ulong::format_sign_always#1 )
  (bool~) printf_ulong::$5 ← (number) 0 != (byte) printf_ulong::format_sign_always#2
  if((bool~) printf_ulong::$5) goto printf_ulong::@1
  to:printf_ulong::@2
printf_ulong::@1: scope:[printf_ulong]  from printf_ulong
  (byte) printf_ulong::format_upper_case#4 ← phi( printf_ulong/(byte) printf_ulong::format_upper_case#6 )
  (byte) printf_ulong::format_zero_padding#4 ← phi( printf_ulong/(byte) printf_ulong::format_zero_padding#6 )
  (byte) printf_ulong::format_sign_always#5 ← phi( printf_ulong/(byte) printf_ulong::format_sign_always#2 )
  (byte) printf_ulong::format_justify_left#4 ← phi( printf_ulong/(byte) printf_ulong::format_justify_left#6 )
  (byte) printf_ulong::format_min_length#4 ← phi( printf_ulong/(byte) printf_ulong::format_min_length#6 )
  (byte) printf_ulong::format_radix#4 ← phi( printf_ulong/(byte) printf_ulong::format_radix#6 )
  (dword) printf_ulong::uvalue#3 ← phi( printf_ulong/(dword) printf_ulong::uvalue#5 )
  (byte~) printf_ulong::$1 ← (byte) '+'
  to:printf_ulong::@3
printf_ulong::@2: scope:[printf_ulong]  from printf_ulong
  (byte) printf_ulong::format_upper_case#5 ← phi( printf_ulong/(byte) printf_ulong::format_upper_case#6 )
  (byte) printf_ulong::format_zero_padding#5 ← phi( printf_ulong/(byte) printf_ulong::format_zero_padding#6 )
  (byte) printf_ulong::format_sign_always#6 ← phi( printf_ulong/(byte) printf_ulong::format_sign_always#2 )
  (byte) printf_ulong::format_justify_left#5 ← phi( printf_ulong/(byte) printf_ulong::format_justify_left#6 )
  (byte) printf_ulong::format_min_length#5 ← phi( printf_ulong/(byte) printf_ulong::format_min_length#6 )
  (byte) printf_ulong::format_radix#5 ← phi( printf_ulong/(byte) printf_ulong::format_radix#6 )
  (dword) printf_ulong::uvalue#4 ← phi( printf_ulong/(dword) printf_ulong::uvalue#5 )
  (number~) printf_ulong::$0 ← (number) 0
  to:printf_ulong::@3
printf_ulong::@3: scope:[printf_ulong]  from printf_ulong::@1 printf_ulong::@2
  (byte) printf_ulong::format_upper_case#3 ← phi( printf_ulong::@1/(byte) printf_ulong::format_upper_case#4 printf_ulong::@2/(byte) printf_ulong::format_upper_case#5 )
  (byte) printf_ulong::format_zero_padding#3 ← phi( printf_ulong::@1/(byte) printf_ulong::format_zero_padding#4 printf_ulong::@2/(byte) printf_ulong::format_zero_padding#5 )
  (byte) printf_ulong::format_sign_always#4 ← phi( printf_ulong::@1/(byte) printf_ulong::format_sign_always#5 printf_ulong::@2/(byte) printf_ulong::format_sign_always#6 )
  (byte) printf_ulong::format_justify_left#3 ← phi( printf_ulong::@1/(byte) printf_ulong::format_justify_left#4 printf_ulong::@2/(byte) printf_ulong::format_justify_left#5 )
  (byte) printf_ulong::format_min_length#3 ← phi( printf_ulong::@1/(byte) printf_ulong::format_min_length#4 printf_ulong::@2/(byte) printf_ulong::format_min_length#5 )
  (byte) printf_ulong::format_radix#2 ← phi( printf_ulong::@1/(byte) printf_ulong::format_radix#4 printf_ulong::@2/(byte) printf_ulong::format_radix#5 )
  (dword) printf_ulong::uvalue#2 ← phi( printf_ulong::@1/(dword) printf_ulong::uvalue#3 printf_ulong::@2/(dword) printf_ulong::uvalue#4 )
  (number~) printf_ulong::$2 ← phi( printf_ulong::@1/(byte~) printf_ulong::$1 printf_ulong::@2/(number~) printf_ulong::$0 )
  *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) ← (number~) printf_ulong::$2
  (dword) ultoa::value#1 ← (dword) printf_ulong::uvalue#2
  (byte*) ultoa::buffer#5 ← (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
  (byte) ultoa::radix#0 ← (byte) printf_ulong::format_radix#2
  call ultoa 
  to:printf_ulong::@4
printf_ulong::@4: scope:[printf_ulong]  from printf_ulong::@3
  (byte) printf_ulong::format_radix#3 ← phi( printf_ulong::@3/(byte) printf_ulong::format_radix#2 )
  (byte) printf_ulong::format_upper_case#2 ← phi( printf_ulong::@3/(byte) printf_ulong::format_upper_case#3 )
  (byte) printf_ulong::format_zero_padding#2 ← phi( printf_ulong::@3/(byte) printf_ulong::format_zero_padding#3 )
  (byte) printf_ulong::format_sign_always#3 ← phi( printf_ulong::@3/(byte) printf_ulong::format_sign_always#4 )
  (byte) printf_ulong::format_justify_left#2 ← phi( printf_ulong::@3/(byte) printf_ulong::format_justify_left#3 )
  (byte) printf_ulong::format_min_length#2 ← phi( printf_ulong::@3/(byte) printf_ulong::format_min_length#3 )
  (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
  (byte*) printf_number_buffer::buffer_digits#0 ← (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
  (byte) printf_number_buffer::format_min_length#0 ← (byte) printf_ulong::format_min_length#2
  (byte) printf_number_buffer::format_justify_left#0 ← (byte) printf_ulong::format_justify_left#2
  (byte) printf_number_buffer::format_sign_always#0 ← (byte) printf_ulong::format_sign_always#3
  (byte) printf_number_buffer::format_zero_padding#0 ← (byte) printf_ulong::format_zero_padding#2
  (byte) printf_number_buffer::format_upper_case#0 ← (byte) printf_ulong::format_upper_case#2
  (byte) printf_number_buffer::format_radix#0 ← (byte) printf_ulong::format_radix#3
  call printf_number_buffer 
  to:printf_ulong::@5
printf_ulong::@5: scope:[printf_ulong]  from printf_ulong::@4
  to:printf_ulong::@return
printf_ulong::@return: scope:[printf_ulong]  from printf_ulong::@5
  return 
  to:@return

(void()) printf_uint((word) printf_uint::uvalue , (byte) printf_uint::format_min_length , (byte) printf_uint::format_justify_left , (byte) printf_uint::format_sign_always , (byte) printf_uint::format_zero_padding , (byte) printf_uint::format_upper_case , (byte) printf_uint::format_radix)
printf_uint: scope:[printf_uint]  from main::@3
  (byte) printf_uint::format_upper_case#5 ← phi( main::@3/(byte) printf_uint::format_upper_case#0 )
  (byte) printf_uint::format_zero_padding#5 ← phi( main::@3/(byte) printf_uint::format_zero_padding#0 )
  (byte) printf_uint::format_justify_left#5 ← phi( main::@3/(byte) printf_uint::format_justify_left#0 )
  (byte) printf_uint::format_min_length#5 ← phi( main::@3/(byte) printf_uint::format_min_length#0 )
  (byte) printf_uint::format_radix#5 ← phi( main::@3/(byte) printf_uint::format_radix#0 )
  (word) printf_uint::uvalue#4 ← phi( main::@3/(word) printf_uint::uvalue#0 )
  (byte) printf_uint::format_sign_always#1 ← phi( main::@3/(byte) printf_uint::format_sign_always#0 )
  (bool~) printf_uint::$5 ← (number) 0 != (byte) printf_uint::format_sign_always#1
  if((bool~) printf_uint::$5) goto printf_uint::@1
  to:printf_uint::@2
printf_uint::@1: scope:[printf_uint]  from printf_uint
  (byte) printf_uint::format_upper_case#3 ← phi( printf_uint/(byte) printf_uint::format_upper_case#5 )
  (byte) printf_uint::format_zero_padding#3 ← phi( printf_uint/(byte) printf_uint::format_zero_padding#5 )
  (byte) printf_uint::format_sign_always#4 ← phi( printf_uint/(byte) printf_uint::format_sign_always#1 )
  (byte) printf_uint::format_justify_left#3 ← phi( printf_uint/(byte) printf_uint::format_justify_left#5 )
  (byte) printf_uint::format_min_length#3 ← phi( printf_uint/(byte) printf_uint::format_min_length#5 )
  (byte) printf_uint::format_radix#3 ← phi( printf_uint/(byte) printf_uint::format_radix#5 )
  (word) printf_uint::uvalue#2 ← phi( printf_uint/(word) printf_uint::uvalue#4 )
  (byte~) printf_uint::$1 ← (byte) '+'
  to:printf_uint::@3
printf_uint::@2: scope:[printf_uint]  from printf_uint
  (byte) printf_uint::format_upper_case#4 ← phi( printf_uint/(byte) printf_uint::format_upper_case#5 )
  (byte) printf_uint::format_zero_padding#4 ← phi( printf_uint/(byte) printf_uint::format_zero_padding#5 )
  (byte) printf_uint::format_sign_always#5 ← phi( printf_uint/(byte) printf_uint::format_sign_always#1 )
  (byte) printf_uint::format_justify_left#4 ← phi( printf_uint/(byte) printf_uint::format_justify_left#5 )
  (byte) printf_uint::format_min_length#4 ← phi( printf_uint/(byte) printf_uint::format_min_length#5 )
  (byte) printf_uint::format_radix#4 ← phi( printf_uint/(byte) printf_uint::format_radix#5 )
  (word) printf_uint::uvalue#3 ← phi( printf_uint/(word) printf_uint::uvalue#4 )
  (number~) printf_uint::$0 ← (number) 0
  to:printf_uint::@3
printf_uint::@3: scope:[printf_uint]  from printf_uint::@1 printf_uint::@2
  (byte) printf_uint::format_upper_case#2 ← phi( printf_uint::@1/(byte) printf_uint::format_upper_case#3 printf_uint::@2/(byte) printf_uint::format_upper_case#4 )
  (byte) printf_uint::format_zero_padding#2 ← phi( printf_uint::@1/(byte) printf_uint::format_zero_padding#3 printf_uint::@2/(byte) printf_uint::format_zero_padding#4 )
  (byte) printf_uint::format_sign_always#3 ← phi( printf_uint::@1/(byte) printf_uint::format_sign_always#4 printf_uint::@2/(byte) printf_uint::format_sign_always#5 )
  (byte) printf_uint::format_justify_left#2 ← phi( printf_uint::@1/(byte) printf_uint::format_justify_left#3 printf_uint::@2/(byte) printf_uint::format_justify_left#4 )
  (byte) printf_uint::format_min_length#2 ← phi( printf_uint::@1/(byte) printf_uint::format_min_length#3 printf_uint::@2/(byte) printf_uint::format_min_length#4 )
  (byte) printf_uint::format_radix#1 ← phi( printf_uint::@1/(byte) printf_uint::format_radix#3 printf_uint::@2/(byte) printf_uint::format_radix#4 )
  (word) printf_uint::uvalue#1 ← phi( printf_uint::@1/(word) printf_uint::uvalue#2 printf_uint::@2/(word) printf_uint::uvalue#3 )
  (number~) printf_uint::$2 ← phi( printf_uint::@1/(byte~) printf_uint::$1 printf_uint::@2/(number~) printf_uint::$0 )
  *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) ← (number~) printf_uint::$2
  (word) utoa::value#1 ← (word) printf_uint::uvalue#1
  (byte*) utoa::buffer#5 ← (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
  (byte) utoa::radix#0 ← (byte) printf_uint::format_radix#1
  call utoa 
  to:printf_uint::@4
printf_uint::@4: scope:[printf_uint]  from printf_uint::@3
  (byte) printf_uint::format_radix#2 ← phi( printf_uint::@3/(byte) printf_uint::format_radix#1 )
  (byte) printf_uint::format_upper_case#1 ← phi( printf_uint::@3/(byte) printf_uint::format_upper_case#2 )
  (byte) printf_uint::format_zero_padding#1 ← phi( printf_uint::@3/(byte) printf_uint::format_zero_padding#2 )
  (byte) printf_uint::format_sign_always#2 ← phi( printf_uint::@3/(byte) printf_uint::format_sign_always#3 )
  (byte) printf_uint::format_justify_left#1 ← phi( printf_uint::@3/(byte) printf_uint::format_justify_left#2 )
  (byte) printf_uint::format_min_length#1 ← phi( printf_uint::@3/(byte) printf_uint::format_min_length#2 )
  (byte) printf_number_buffer::buffer_sign#1 ← *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
  (byte*) printf_number_buffer::buffer_digits#1 ← (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
  (byte) printf_number_buffer::format_min_length#1 ← (byte) printf_uint::format_min_length#1
  (byte) printf_number_buffer::format_justify_left#1 ← (byte) printf_uint::format_justify_left#1
  (byte) printf_number_buffer::format_sign_always#1 ← (byte) printf_uint::format_sign_always#2
  (byte) printf_number_buffer::format_zero_padding#1 ← (byte) printf_uint::format_zero_padding#1
  (byte) printf_number_buffer::format_upper_case#1 ← (byte) printf_uint::format_upper_case#1
  (byte) printf_number_buffer::format_radix#1 ← (byte) printf_uint::format_radix#2
  call printf_number_buffer 
  to:printf_uint::@5
printf_uint::@5: scope:[printf_uint]  from printf_uint::@4
  to:printf_uint::@return
printf_uint::@return: scope:[printf_uint]  from printf_uint::@5
  return 
  to:@return

(void()) printf_uchar((byte) printf_uchar::uvalue , (byte) printf_uchar::format_min_length , (byte) printf_uchar::format_justify_left , (byte) printf_uchar::format_sign_always , (byte) printf_uchar::format_zero_padding , (byte) printf_uchar::format_upper_case , (byte) printf_uchar::format_radix)
printf_uchar: scope:[printf_uchar]  from print::@17 print::@2
  (byte) printf_uchar::format_upper_case#6 ← phi( print::@17/(byte) printf_uchar::format_upper_case#1 print::@2/(byte) printf_uchar::format_upper_case#0 )
  (byte) printf_uchar::format_zero_padding#6 ← phi( print::@17/(byte) printf_uchar::format_zero_padding#1 print::@2/(byte) printf_uchar::format_zero_padding#0 )
  (byte) printf_uchar::format_justify_left#6 ← phi( print::@17/(byte) printf_uchar::format_justify_left#1 print::@2/(byte) printf_uchar::format_justify_left#0 )
  (byte) printf_uchar::format_min_length#6 ← phi( print::@17/(byte) printf_uchar::format_min_length#1 print::@2/(byte) printf_uchar::format_min_length#0 )
  (byte) printf_uchar::format_radix#6 ← phi( print::@17/(byte) printf_uchar::format_radix#1 print::@2/(byte) printf_uchar::format_radix#0 )
  (byte) printf_uchar::uvalue#5 ← phi( print::@17/(byte) printf_uchar::uvalue#1 print::@2/(byte) printf_uchar::uvalue#0 )
  (byte) printf_uchar::format_sign_always#2 ← phi( print::@17/(byte) printf_uchar::format_sign_always#1 print::@2/(byte) printf_uchar::format_sign_always#0 )
  (bool~) printf_uchar::$5 ← (number) 0 != (byte) printf_uchar::format_sign_always#2
  if((bool~) printf_uchar::$5) goto printf_uchar::@1
  to:printf_uchar::@2
printf_uchar::@1: scope:[printf_uchar]  from printf_uchar
  (byte) printf_uchar::format_upper_case#4 ← phi( printf_uchar/(byte) printf_uchar::format_upper_case#6 )
  (byte) printf_uchar::format_zero_padding#4 ← phi( printf_uchar/(byte) printf_uchar::format_zero_padding#6 )
  (byte) printf_uchar::format_sign_always#5 ← phi( printf_uchar/(byte) printf_uchar::format_sign_always#2 )
  (byte) printf_uchar::format_justify_left#4 ← phi( printf_uchar/(byte) printf_uchar::format_justify_left#6 )
  (byte) printf_uchar::format_min_length#4 ← phi( printf_uchar/(byte) printf_uchar::format_min_length#6 )
  (byte) printf_uchar::format_radix#4 ← phi( printf_uchar/(byte) printf_uchar::format_radix#6 )
  (byte) printf_uchar::uvalue#3 ← phi( printf_uchar/(byte) printf_uchar::uvalue#5 )
  (byte~) printf_uchar::$1 ← (byte) '+'
  to:printf_uchar::@3
printf_uchar::@2: scope:[printf_uchar]  from printf_uchar
  (byte) printf_uchar::format_upper_case#5 ← phi( printf_uchar/(byte) printf_uchar::format_upper_case#6 )
  (byte) printf_uchar::format_zero_padding#5 ← phi( printf_uchar/(byte) printf_uchar::format_zero_padding#6 )
  (byte) printf_uchar::format_sign_always#6 ← phi( printf_uchar/(byte) printf_uchar::format_sign_always#2 )
  (byte) printf_uchar::format_justify_left#5 ← phi( printf_uchar/(byte) printf_uchar::format_justify_left#6 )
  (byte) printf_uchar::format_min_length#5 ← phi( printf_uchar/(byte) printf_uchar::format_min_length#6 )
  (byte) printf_uchar::format_radix#5 ← phi( printf_uchar/(byte) printf_uchar::format_radix#6 )
  (byte) printf_uchar::uvalue#4 ← phi( printf_uchar/(byte) printf_uchar::uvalue#5 )
  (number~) printf_uchar::$0 ← (number) 0
  to:printf_uchar::@3
printf_uchar::@3: scope:[printf_uchar]  from printf_uchar::@1 printf_uchar::@2
  (byte) printf_uchar::format_upper_case#3 ← phi( printf_uchar::@1/(byte) printf_uchar::format_upper_case#4 printf_uchar::@2/(byte) printf_uchar::format_upper_case#5 )
  (byte) printf_uchar::format_zero_padding#3 ← phi( printf_uchar::@1/(byte) printf_uchar::format_zero_padding#4 printf_uchar::@2/(byte) printf_uchar::format_zero_padding#5 )
  (byte) printf_uchar::format_sign_always#4 ← phi( printf_uchar::@1/(byte) printf_uchar::format_sign_always#5 printf_uchar::@2/(byte) printf_uchar::format_sign_always#6 )
  (byte) printf_uchar::format_justify_left#3 ← phi( printf_uchar::@1/(byte) printf_uchar::format_justify_left#4 printf_uchar::@2/(byte) printf_uchar::format_justify_left#5 )
  (byte) printf_uchar::format_min_length#3 ← phi( printf_uchar::@1/(byte) printf_uchar::format_min_length#4 printf_uchar::@2/(byte) printf_uchar::format_min_length#5 )
  (byte) printf_uchar::format_radix#2 ← phi( printf_uchar::@1/(byte) printf_uchar::format_radix#4 printf_uchar::@2/(byte) printf_uchar::format_radix#5 )
  (byte) printf_uchar::uvalue#2 ← phi( printf_uchar::@1/(byte) printf_uchar::uvalue#3 printf_uchar::@2/(byte) printf_uchar::uvalue#4 )
  (number~) printf_uchar::$2 ← phi( printf_uchar::@1/(byte~) printf_uchar::$1 printf_uchar::@2/(number~) printf_uchar::$0 )
  *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) ← (number~) printf_uchar::$2
  (byte) uctoa::value#1 ← (byte) printf_uchar::uvalue#2
  (byte*) uctoa::buffer#5 ← (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
  (byte) uctoa::radix#0 ← (byte) printf_uchar::format_radix#2
  call uctoa 
  to:printf_uchar::@4
printf_uchar::@4: scope:[printf_uchar]  from printf_uchar::@3
  (byte) printf_uchar::format_radix#3 ← phi( printf_uchar::@3/(byte) printf_uchar::format_radix#2 )
  (byte) printf_uchar::format_upper_case#2 ← phi( printf_uchar::@3/(byte) printf_uchar::format_upper_case#3 )
  (byte) printf_uchar::format_zero_padding#2 ← phi( printf_uchar::@3/(byte) printf_uchar::format_zero_padding#3 )
  (byte) printf_uchar::format_sign_always#3 ← phi( printf_uchar::@3/(byte) printf_uchar::format_sign_always#4 )
  (byte) printf_uchar::format_justify_left#2 ← phi( printf_uchar::@3/(byte) printf_uchar::format_justify_left#3 )
  (byte) printf_uchar::format_min_length#2 ← phi( printf_uchar::@3/(byte) printf_uchar::format_min_length#3 )
  (byte) printf_number_buffer::buffer_sign#2 ← *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
  (byte*) printf_number_buffer::buffer_digits#2 ← (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
  (byte) printf_number_buffer::format_min_length#2 ← (byte) printf_uchar::format_min_length#2
  (byte) printf_number_buffer::format_justify_left#2 ← (byte) printf_uchar::format_justify_left#2
  (byte) printf_number_buffer::format_sign_always#2 ← (byte) printf_uchar::format_sign_always#3
  (byte) printf_number_buffer::format_zero_padding#2 ← (byte) printf_uchar::format_zero_padding#2
  (byte) printf_number_buffer::format_upper_case#2 ← (byte) printf_uchar::format_upper_case#2
  (byte) printf_number_buffer::format_radix#2 ← (byte) printf_uchar::format_radix#3
  call printf_number_buffer 
  to:printf_uchar::@5
printf_uchar::@5: scope:[printf_uchar]  from printf_uchar::@4
  to:printf_uchar::@return
printf_uchar::@return: scope:[printf_uchar]  from printf_uchar::@5
  return 
  to:@return

(void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_uchar::@4 printf_uint::@4 printf_ulong::@4
  (byte) printf_number_buffer::format_upper_case#12 ← phi( printf_uchar::@4/(byte) printf_number_buffer::format_upper_case#2 printf_uint::@4/(byte) printf_number_buffer::format_upper_case#1 printf_ulong::@4/(byte) printf_number_buffer::format_upper_case#0 )
  (byte) printf_number_buffer::buffer_sign#9 ← phi( printf_uchar::@4/(byte) printf_number_buffer::buffer_sign#2 printf_uint::@4/(byte) printf_number_buffer::buffer_sign#1 printf_ulong::@4/(byte) printf_number_buffer::buffer_sign#0 )
  (byte*) printf_number_buffer::buffer_digits#6 ← phi( printf_uchar::@4/(byte*) printf_number_buffer::buffer_digits#2 printf_uint::@4/(byte*) printf_number_buffer::buffer_digits#1 printf_ulong::@4/(byte*) printf_number_buffer::buffer_digits#0 )
  (byte) printf_number_buffer::format_zero_padding#6 ← phi( printf_uchar::@4/(byte) printf_number_buffer::format_zero_padding#2 printf_uint::@4/(byte) printf_number_buffer::format_zero_padding#1 printf_ulong::@4/(byte) printf_number_buffer::format_zero_padding#0 )
  (byte) printf_number_buffer::format_justify_left#5 ← phi( printf_uchar::@4/(byte) printf_number_buffer::format_justify_left#2 printf_uint::@4/(byte) printf_number_buffer::format_justify_left#1 printf_ulong::@4/(byte) printf_number_buffer::format_justify_left#0 )
  (byte) printf_number_buffer::format_min_length#3 ← phi( printf_uchar::@4/(byte) printf_number_buffer::format_min_length#2 printf_uint::@4/(byte) printf_number_buffer::format_min_length#1 printf_ulong::@4/(byte) printf_number_buffer::format_min_length#0 )
  (signed byte) printf_number_buffer::padding#0 ← (signed byte) 0
  (bool~) printf_number_buffer::$26 ← (number) 0 != (byte) printf_number_buffer::format_min_length#3
  (bool~) printf_number_buffer::$0 ← ! (bool~) printf_number_buffer::$26
  if((bool~) printf_number_buffer::$0) goto printf_number_buffer::@1
  to:printf_number_buffer::@6
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer printf_number_buffer::@13 printf_number_buffer::@14
  (byte*) printf_number_buffer::buffer_digits#14 ← phi( printf_number_buffer/(byte*) printf_number_buffer::buffer_digits#6 printf_number_buffer::@13/(byte*) printf_number_buffer::buffer_digits#17 printf_number_buffer::@14/(byte*) printf_number_buffer::buffer_digits#18 )
  (byte) printf_number_buffer::format_upper_case#9 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_upper_case#12 printf_number_buffer::@13/(byte) printf_number_buffer::format_upper_case#13 printf_number_buffer::@14/(byte) printf_number_buffer::format_upper_case#14 )
  (byte) printf_number_buffer::buffer_sign#7 ← phi( printf_number_buffer/(byte) printf_number_buffer::buffer_sign#9 printf_number_buffer::@13/(byte) printf_number_buffer::buffer_sign#10 printf_number_buffer::@14/(byte) printf_number_buffer::buffer_sign#11 )
  (signed byte) printf_number_buffer::padding#3 ← phi( printf_number_buffer/(signed byte) printf_number_buffer::padding#0 printf_number_buffer::@13/(signed byte) printf_number_buffer::padding#1 printf_number_buffer::@14/(signed byte) printf_number_buffer::padding#2 )
  (byte) printf_number_buffer::format_zero_padding#3 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_zero_padding#6 printf_number_buffer::@13/(byte) printf_number_buffer::format_zero_padding#7 printf_number_buffer::@14/(byte) printf_number_buffer::format_zero_padding#8 )
  (byte) printf_number_buffer::format_justify_left#3 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_justify_left#5 printf_number_buffer::@13/(byte) printf_number_buffer::format_justify_left#6 printf_number_buffer::@14/(byte) printf_number_buffer::format_justify_left#7 )
  (bool~) printf_number_buffer::$27 ← (number) 0 != (byte) printf_number_buffer::format_justify_left#3
  (bool~) printf_number_buffer::$1 ← ! (bool~) printf_number_buffer::$27
  (bool~) printf_number_buffer::$28 ← (number) 0 != (byte) printf_number_buffer::format_zero_padding#3
  (bool~) printf_number_buffer::$2 ← ! (bool~) printf_number_buffer::$28
  (bool~) printf_number_buffer::$3 ← (bool~) printf_number_buffer::$1 && (bool~) printf_number_buffer::$2
  (bool~) printf_number_buffer::$4 ← (bool~) printf_number_buffer::$3 && (signed byte) printf_number_buffer::padding#3
  (bool~) printf_number_buffer::$5 ← ! (bool~) printf_number_buffer::$4
  if((bool~) printf_number_buffer::$5) goto printf_number_buffer::@2
  to:printf_number_buffer::@8
printf_number_buffer::@6: scope:[printf_number_buffer]  from printf_number_buffer
  (byte) printf_number_buffer::format_upper_case#18 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_upper_case#12 )
  (byte) printf_number_buffer::format_zero_padding#18 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_zero_padding#6 )
  (byte) printf_number_buffer::format_justify_left#13 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_justify_left#5 )
  (byte) printf_number_buffer::format_min_length#7 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_min_length#3 )
  (byte) printf_number_buffer::buffer_sign#6 ← phi( printf_number_buffer/(byte) printf_number_buffer::buffer_sign#9 )
  (byte*) printf_number_buffer::buffer_digits#3 ← phi( printf_number_buffer/(byte*) printf_number_buffer::buffer_digits#6 )
  (byte*) strlen::str#1 ← (byte*) printf_number_buffer::buffer_digits#3
  call strlen 
  (word) strlen::return#2 ← (word) strlen::return#1
  to:printf_number_buffer::@15
printf_number_buffer::@15: scope:[printf_number_buffer]  from printf_number_buffer::@6
  (byte*) printf_number_buffer::buffer_digits#20 ← phi( printf_number_buffer::@6/(byte*) printf_number_buffer::buffer_digits#3 )
  (byte) printf_number_buffer::format_upper_case#16 ← phi( printf_number_buffer::@6/(byte) printf_number_buffer::format_upper_case#18 )
  (byte) printf_number_buffer::format_zero_padding#12 ← phi( printf_number_buffer::@6/(byte) printf_number_buffer::format_zero_padding#18 )
  (byte) printf_number_buffer::format_justify_left#9 ← phi( printf_number_buffer::@6/(byte) printf_number_buffer::format_justify_left#13 )
  (byte) printf_number_buffer::format_min_length#5 ← phi( printf_number_buffer::@6/(byte) printf_number_buffer::format_min_length#7 )
  (byte) printf_number_buffer::buffer_sign#3 ← phi( printf_number_buffer::@6/(byte) printf_number_buffer::buffer_sign#6 )
  (word) strlen::return#5 ← phi( printf_number_buffer::@6/(word) strlen::return#2 )
  (word~) printf_number_buffer::$19 ← (word) strlen::return#5
  (signed byte) printf_number_buffer::len#0 ← (signed byte)(word~) printf_number_buffer::$19
  (bool~) printf_number_buffer::$29 ← (number) 0 != (byte) printf_number_buffer::buffer_sign#3
  (bool~) printf_number_buffer::$20 ← ! (bool~) printf_number_buffer::$29
  if((bool~) printf_number_buffer::$20) goto printf_number_buffer::@13
  to:printf_number_buffer::@7
printf_number_buffer::@13: scope:[printf_number_buffer]  from printf_number_buffer::@15 printf_number_buffer::@7
  (byte*) printf_number_buffer::buffer_digits#17 ← phi( printf_number_buffer::@15/(byte*) printf_number_buffer::buffer_digits#20 printf_number_buffer::@7/(byte*) printf_number_buffer::buffer_digits#21 )
  (byte) printf_number_buffer::format_upper_case#13 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_upper_case#16 printf_number_buffer::@7/(byte) printf_number_buffer::format_upper_case#17 )
  (byte) printf_number_buffer::buffer_sign#10 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::buffer_sign#3 printf_number_buffer::@7/(byte) printf_number_buffer::buffer_sign#13 )
  (byte) printf_number_buffer::format_zero_padding#7 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_zero_padding#12 printf_number_buffer::@7/(byte) printf_number_buffer::format_zero_padding#13 )
  (byte) printf_number_buffer::format_justify_left#6 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_justify_left#9 printf_number_buffer::@7/(byte) printf_number_buffer::format_justify_left#10 )
  (signed byte) printf_number_buffer::len#2 ← phi( printf_number_buffer::@15/(signed byte) printf_number_buffer::len#0 printf_number_buffer::@7/(signed byte) printf_number_buffer::len#1 )
  (byte) printf_number_buffer::format_min_length#4 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_min_length#5 printf_number_buffer::@7/(byte) printf_number_buffer::format_min_length#6 )
  (signed byte~) printf_number_buffer::$25 ← (signed byte)(byte) printf_number_buffer::format_min_length#4
  (signed byte~) printf_number_buffer::$21 ← (signed byte~) printf_number_buffer::$25 - (signed byte) printf_number_buffer::len#2
  (signed byte) printf_number_buffer::padding#1 ← (signed byte~) printf_number_buffer::$21
  (bool~) printf_number_buffer::$22 ← (signed byte) printf_number_buffer::padding#1 < (number) 0
  (bool~) printf_number_buffer::$23 ← ! (bool~) printf_number_buffer::$22
  if((bool~) printf_number_buffer::$23) goto printf_number_buffer::@1
  to:printf_number_buffer::@14
printf_number_buffer::@7: scope:[printf_number_buffer]  from printf_number_buffer::@15
  (byte*) printf_number_buffer::buffer_digits#21 ← phi( printf_number_buffer::@15/(byte*) printf_number_buffer::buffer_digits#20 )
  (byte) printf_number_buffer::format_upper_case#17 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_upper_case#16 )
  (byte) printf_number_buffer::buffer_sign#13 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::buffer_sign#3 )
  (byte) printf_number_buffer::format_zero_padding#13 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_zero_padding#12 )
  (byte) printf_number_buffer::format_justify_left#10 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_justify_left#9 )
  (byte) printf_number_buffer::format_min_length#6 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_min_length#5 )
  (signed byte) printf_number_buffer::len#3 ← phi( printf_number_buffer::@15/(signed byte) printf_number_buffer::len#0 )
  (signed byte) printf_number_buffer::len#1 ← ++ (signed byte) printf_number_buffer::len#3
  to:printf_number_buffer::@13
printf_number_buffer::@14: scope:[printf_number_buffer]  from printf_number_buffer::@13
  (byte*) printf_number_buffer::buffer_digits#18 ← phi( printf_number_buffer::@13/(byte*) printf_number_buffer::buffer_digits#17 )
  (byte) printf_number_buffer::format_upper_case#14 ← phi( printf_number_buffer::@13/(byte) printf_number_buffer::format_upper_case#13 )
  (byte) printf_number_buffer::buffer_sign#11 ← phi( printf_number_buffer::@13/(byte) printf_number_buffer::buffer_sign#10 )
  (byte) printf_number_buffer::format_zero_padding#8 ← phi( printf_number_buffer::@13/(byte) printf_number_buffer::format_zero_padding#7 )
  (byte) printf_number_buffer::format_justify_left#7 ← phi( printf_number_buffer::@13/(byte) printf_number_buffer::format_justify_left#6 )
  (signed byte) printf_number_buffer::padding#2 ← (number) 0
  to:printf_number_buffer::@1
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@16
  (byte) printf_number_buffer::format_justify_left#18 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::format_justify_left#3 printf_number_buffer::@16/(byte) printf_number_buffer::format_justify_left#20 )
  (byte*) printf_number_buffer::buffer_digits#12 ← phi( printf_number_buffer::@1/(byte*) printf_number_buffer::buffer_digits#14 printf_number_buffer::@16/(byte*) printf_number_buffer::buffer_digits#15 )
  (byte) printf_number_buffer::format_upper_case#7 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::format_upper_case#9 printf_number_buffer::@16/(byte) printf_number_buffer::format_upper_case#10 )
  (signed byte) printf_number_buffer::padding#10 ← phi( printf_number_buffer::@1/(signed byte) printf_number_buffer::padding#3 printf_number_buffer::@16/(signed byte) printf_number_buffer::padding#12 )
  (byte) printf_number_buffer::format_zero_padding#10 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::format_zero_padding#3 printf_number_buffer::@16/(byte) printf_number_buffer::format_zero_padding#14 )
  (byte) printf_number_buffer::buffer_sign#4 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::buffer_sign#7 printf_number_buffer::@16/(byte) printf_number_buffer::buffer_sign#8 )
  (bool~) printf_number_buffer::$30 ← (number) 0 != (byte) printf_number_buffer::buffer_sign#4
  (bool~) printf_number_buffer::$7 ← ! (bool~) printf_number_buffer::$30
  if((bool~) printf_number_buffer::$7) goto printf_number_buffer::@3
  to:printf_number_buffer::@9
printf_number_buffer::@8: scope:[printf_number_buffer]  from printf_number_buffer::@1
  (byte) printf_number_buffer::format_justify_left#22 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::format_justify_left#3 )
  (byte*) printf_number_buffer::buffer_digits#19 ← phi( printf_number_buffer::@1/(byte*) printf_number_buffer::buffer_digits#14 )
  (byte) printf_number_buffer::format_upper_case#15 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::format_upper_case#9 )
  (byte) printf_number_buffer::format_zero_padding#19 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::format_zero_padding#3 )
  (byte) printf_number_buffer::buffer_sign#12 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::buffer_sign#7 )
  (signed byte) printf_number_buffer::padding#4 ← phi( printf_number_buffer::@1/(signed byte) printf_number_buffer::padding#3 )
  (byte) printf_padding::pad#0 ← (byte) ' '
  (byte) printf_padding::length#0 ← (byte)(signed byte) printf_number_buffer::padding#4
  call printf_padding 
  to:printf_number_buffer::@16
printf_number_buffer::@16: scope:[printf_number_buffer]  from printf_number_buffer::@8
  (byte) printf_number_buffer::format_justify_left#20 ← phi( printf_number_buffer::@8/(byte) printf_number_buffer::format_justify_left#22 )
  (byte*) printf_number_buffer::buffer_digits#15 ← phi( printf_number_buffer::@8/(byte*) printf_number_buffer::buffer_digits#19 )
  (byte) printf_number_buffer::format_upper_case#10 ← phi( printf_number_buffer::@8/(byte) printf_number_buffer::format_upper_case#15 )
  (signed byte) printf_number_buffer::padding#12 ← phi( printf_number_buffer::@8/(signed byte) printf_number_buffer::padding#4 )
  (byte) printf_number_buffer::format_zero_padding#14 ← phi( printf_number_buffer::@8/(byte) printf_number_buffer::format_zero_padding#19 )
  (byte) printf_number_buffer::buffer_sign#8 ← phi( printf_number_buffer::@8/(byte) printf_number_buffer::buffer_sign#12 )
  to:printf_number_buffer::@2
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@17 printf_number_buffer::@2
  (byte) printf_number_buffer::format_justify_left#15 ← phi( printf_number_buffer::@17/(byte) printf_number_buffer::format_justify_left#17 printf_number_buffer::@2/(byte) printf_number_buffer::format_justify_left#18 )
  (byte*) printf_number_buffer::buffer_digits#10 ← phi( printf_number_buffer::@17/(byte*) printf_number_buffer::buffer_digits#11 printf_number_buffer::@2/(byte*) printf_number_buffer::buffer_digits#12 )
  (byte) printf_number_buffer::format_upper_case#5 ← phi( printf_number_buffer::@17/(byte) printf_number_buffer::format_upper_case#6 printf_number_buffer::@2/(byte) printf_number_buffer::format_upper_case#7 )
  (signed byte) printf_number_buffer::padding#5 ← phi( printf_number_buffer::@17/(signed byte) printf_number_buffer::padding#9 printf_number_buffer::@2/(signed byte) printf_number_buffer::padding#10 )
  (byte) printf_number_buffer::format_zero_padding#4 ← phi( printf_number_buffer::@17/(byte) printf_number_buffer::format_zero_padding#9 printf_number_buffer::@2/(byte) printf_number_buffer::format_zero_padding#10 )
  (bool~) printf_number_buffer::$9 ← (byte) printf_number_buffer::format_zero_padding#4 && (signed byte) printf_number_buffer::padding#5
  (bool~) printf_number_buffer::$10 ← ! (bool~) printf_number_buffer::$9
  if((bool~) printf_number_buffer::$10) goto printf_number_buffer::@4
  to:printf_number_buffer::@10
printf_number_buffer::@9: scope:[printf_number_buffer]  from printf_number_buffer::@2
  (byte) printf_number_buffer::format_justify_left#21 ← phi( printf_number_buffer::@2/(byte) printf_number_buffer::format_justify_left#18 )
  (byte*) printf_number_buffer::buffer_digits#16 ← phi( printf_number_buffer::@2/(byte*) printf_number_buffer::buffer_digits#12 )
  (byte) printf_number_buffer::format_upper_case#11 ← phi( printf_number_buffer::@2/(byte) printf_number_buffer::format_upper_case#7 )
  (signed byte) printf_number_buffer::padding#13 ← phi( printf_number_buffer::@2/(signed byte) printf_number_buffer::padding#10 )
  (byte) printf_number_buffer::format_zero_padding#15 ← phi( printf_number_buffer::@2/(byte) printf_number_buffer::format_zero_padding#10 )
  (byte) printf_number_buffer::buffer_sign#5 ← phi( printf_number_buffer::@2/(byte) printf_number_buffer::buffer_sign#4 )
  (byte) cputc::c#2 ← (byte) printf_number_buffer::buffer_sign#5
  call cputc 
  to:printf_number_buffer::@17
printf_number_buffer::@17: scope:[printf_number_buffer]  from printf_number_buffer::@9
  (byte) printf_number_buffer::format_justify_left#17 ← phi( printf_number_buffer::@9/(byte) printf_number_buffer::format_justify_left#21 )
  (byte*) printf_number_buffer::buffer_digits#11 ← phi( printf_number_buffer::@9/(byte*) printf_number_buffer::buffer_digits#16 )
  (byte) printf_number_buffer::format_upper_case#6 ← phi( printf_number_buffer::@9/(byte) printf_number_buffer::format_upper_case#11 )
  (signed byte) printf_number_buffer::padding#9 ← phi( printf_number_buffer::@9/(signed byte) printf_number_buffer::padding#13 )
  (byte) printf_number_buffer::format_zero_padding#9 ← phi( printf_number_buffer::@9/(byte) printf_number_buffer::format_zero_padding#15 )
  to:printf_number_buffer::@3
printf_number_buffer::@4: scope:[printf_number_buffer]  from printf_number_buffer::@18 printf_number_buffer::@3
  (signed byte) printf_number_buffer::padding#15 ← phi( printf_number_buffer::@18/(signed byte) printf_number_buffer::padding#16 printf_number_buffer::@3/(signed byte) printf_number_buffer::padding#5 )
  (byte) printf_number_buffer::format_justify_left#12 ← phi( printf_number_buffer::@18/(byte) printf_number_buffer::format_justify_left#14 printf_number_buffer::@3/(byte) printf_number_buffer::format_justify_left#15 )
  (byte) printf_number_buffer::format_zero_padding#17 ← phi( printf_number_buffer::@18/(byte) printf_number_buffer::format_zero_padding#20 printf_number_buffer::@3/(byte) printf_number_buffer::format_zero_padding#4 )
  (byte*) printf_number_buffer::buffer_digits#8 ← phi( printf_number_buffer::@18/(byte*) printf_number_buffer::buffer_digits#9 printf_number_buffer::@3/(byte*) printf_number_buffer::buffer_digits#10 )
  (byte) printf_number_buffer::format_upper_case#3 ← phi( printf_number_buffer::@18/(byte) printf_number_buffer::format_upper_case#4 printf_number_buffer::@3/(byte) printf_number_buffer::format_upper_case#5 )
  (bool~) printf_number_buffer::$31 ← (number) 0 != (byte) printf_number_buffer::format_upper_case#3
  (bool~) printf_number_buffer::$12 ← ! (bool~) printf_number_buffer::$31
  if((bool~) printf_number_buffer::$12) goto printf_number_buffer::@5
  to:printf_number_buffer::@11
printf_number_buffer::@10: scope:[printf_number_buffer]  from printf_number_buffer::@3
  (byte) printf_number_buffer::format_justify_left#19 ← phi( printf_number_buffer::@3/(byte) printf_number_buffer::format_justify_left#15 )
  (byte) printf_number_buffer::format_zero_padding#22 ← phi( printf_number_buffer::@3/(byte) printf_number_buffer::format_zero_padding#4 )
  (byte*) printf_number_buffer::buffer_digits#13 ← phi( printf_number_buffer::@3/(byte*) printf_number_buffer::buffer_digits#10 )
  (byte) printf_number_buffer::format_upper_case#8 ← phi( printf_number_buffer::@3/(byte) printf_number_buffer::format_upper_case#5 )
  (signed byte) printf_number_buffer::padding#6 ← phi( printf_number_buffer::@3/(signed byte) printf_number_buffer::padding#5 )
  (byte) printf_padding::pad#1 ← (byte) '0'
  (byte) printf_padding::length#1 ← (byte)(signed byte) printf_number_buffer::padding#6
  call printf_padding 
  to:printf_number_buffer::@18
printf_number_buffer::@18: scope:[printf_number_buffer]  from printf_number_buffer::@10
  (signed byte) printf_number_buffer::padding#16 ← phi( printf_number_buffer::@10/(signed byte) printf_number_buffer::padding#6 )
  (byte) printf_number_buffer::format_justify_left#14 ← phi( printf_number_buffer::@10/(byte) printf_number_buffer::format_justify_left#19 )
  (byte) printf_number_buffer::format_zero_padding#20 ← phi( printf_number_buffer::@10/(byte) printf_number_buffer::format_zero_padding#22 )
  (byte*) printf_number_buffer::buffer_digits#9 ← phi( printf_number_buffer::@10/(byte*) printf_number_buffer::buffer_digits#13 )
  (byte) printf_number_buffer::format_upper_case#4 ← phi( printf_number_buffer::@10/(byte) printf_number_buffer::format_upper_case#8 )
  to:printf_number_buffer::@4
printf_number_buffer::@5: scope:[printf_number_buffer]  from printf_number_buffer::@20 printf_number_buffer::@4
  (signed byte) printf_number_buffer::padding#11 ← phi( printf_number_buffer::@20/(signed byte) printf_number_buffer::padding#14 printf_number_buffer::@4/(signed byte) printf_number_buffer::padding#15 )
  (byte) printf_number_buffer::format_justify_left#8 ← phi( printf_number_buffer::@20/(byte) printf_number_buffer::format_justify_left#11 printf_number_buffer::@4/(byte) printf_number_buffer::format_justify_left#12 )
  (byte) printf_number_buffer::format_zero_padding#11 ← phi( printf_number_buffer::@20/(byte) printf_number_buffer::format_zero_padding#16 printf_number_buffer::@4/(byte) printf_number_buffer::format_zero_padding#17 )
  (byte*) printf_number_buffer::buffer_digits#4 ← phi( printf_number_buffer::@20/(byte*) printf_number_buffer::buffer_digits#7 printf_number_buffer::@4/(byte*) printf_number_buffer::buffer_digits#8 )
  (to_nomodify byte*) cputs::s#1 ← (byte*) printf_number_buffer::buffer_digits#4
  call cputs 
  to:printf_number_buffer::@19
printf_number_buffer::@19: scope:[printf_number_buffer]  from printf_number_buffer::@5
  (signed byte) printf_number_buffer::padding#7 ← phi( printf_number_buffer::@5/(signed byte) printf_number_buffer::padding#11 )
  (byte) printf_number_buffer::format_justify_left#4 ← phi( printf_number_buffer::@5/(byte) printf_number_buffer::format_justify_left#8 )
  (byte) printf_number_buffer::format_zero_padding#5 ← phi( printf_number_buffer::@5/(byte) printf_number_buffer::format_zero_padding#11 )
  (bool~) printf_number_buffer::$32 ← (number) 0 != (byte) printf_number_buffer::format_zero_padding#5
  (bool~) printf_number_buffer::$14 ← ! (bool~) printf_number_buffer::$32
  (bool~) printf_number_buffer::$15 ← (byte) printf_number_buffer::format_justify_left#4 && (bool~) printf_number_buffer::$14
  (bool~) printf_number_buffer::$16 ← (bool~) printf_number_buffer::$15 && (signed byte) printf_number_buffer::padding#7
  (bool~) printf_number_buffer::$17 ← ! (bool~) printf_number_buffer::$16
  if((bool~) printf_number_buffer::$17) goto printf_number_buffer::@return
  to:printf_number_buffer::@12
printf_number_buffer::@11: scope:[printf_number_buffer]  from printf_number_buffer::@4
  (signed byte) printf_number_buffer::padding#17 ← phi( printf_number_buffer::@4/(signed byte) printf_number_buffer::padding#15 )
  (byte) printf_number_buffer::format_justify_left#16 ← phi( printf_number_buffer::@4/(byte) printf_number_buffer::format_justify_left#12 )
  (byte) printf_number_buffer::format_zero_padding#21 ← phi( printf_number_buffer::@4/(byte) printf_number_buffer::format_zero_padding#17 )
  (byte*) printf_number_buffer::buffer_digits#5 ← phi( printf_number_buffer::@4/(byte*) printf_number_buffer::buffer_digits#8 )
  (byte*) strupr::str#0 ← (byte*) printf_number_buffer::buffer_digits#5
  call strupr 
  (byte*) strupr::return#2 ← (byte*) strupr::return#1
  to:printf_number_buffer::@20
printf_number_buffer::@20: scope:[printf_number_buffer]  from printf_number_buffer::@11
  (signed byte) printf_number_buffer::padding#14 ← phi( printf_number_buffer::@11/(signed byte) printf_number_buffer::padding#17 )
  (byte) printf_number_buffer::format_justify_left#11 ← phi( printf_number_buffer::@11/(byte) printf_number_buffer::format_justify_left#16 )
  (byte) printf_number_buffer::format_zero_padding#16 ← phi( printf_number_buffer::@11/(byte) printf_number_buffer::format_zero_padding#21 )
  (byte*) printf_number_buffer::buffer_digits#7 ← phi( printf_number_buffer::@11/(byte*) printf_number_buffer::buffer_digits#5 )
  to:printf_number_buffer::@5
printf_number_buffer::@12: scope:[printf_number_buffer]  from printf_number_buffer::@19
  (signed byte) printf_number_buffer::padding#8 ← phi( printf_number_buffer::@19/(signed byte) printf_number_buffer::padding#7 )
  (byte) printf_padding::pad#2 ← (byte) ' '
  (byte) printf_padding::length#2 ← (byte)(signed byte) printf_number_buffer::padding#8
  call printf_padding 
  to:printf_number_buffer::@21
printf_number_buffer::@21: scope:[printf_number_buffer]  from printf_number_buffer::@12
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@19 printf_number_buffer::@21
  return 
  to:@return

(void()) printf_string((byte*) printf_string::str , (byte) printf_string::format_min_length , (byte) printf_string::format_justify_left)
printf_string: scope:[printf_string]  from main::@10
  (byte*) printf_string::str#3 ← phi( main::@10/(byte*) printf_string::str#0 )
  (byte) printf_string::format_justify_left#3 ← phi( main::@10/(byte) printf_string::format_justify_left#0 )
  (byte) printf_string::format_min_length#1 ← phi( main::@10/(byte) printf_string::format_min_length#0 )
  (signed byte) printf_string::padding#0 ← (signed byte) 0
  (bool~) printf_string::$14 ← (number) 0 != (byte) printf_string::format_min_length#1
  (bool~) printf_string::$0 ← ! (bool~) printf_string::$14
  if((bool~) printf_string::$0) goto printf_string::@1
  to:printf_string::@3
printf_string::@1: scope:[printf_string]  from printf_string printf_string::@4 printf_string::@7
  (byte*) printf_string::str#4 ← phi( printf_string/(byte*) printf_string::str#3 printf_string::@4/(byte*) printf_string::str#6 printf_string::@7/(byte*) printf_string::str#7 )
  (signed byte) printf_string::padding#3 ← phi( printf_string/(signed byte) printf_string::padding#0 printf_string::@4/(signed byte) printf_string::padding#2 printf_string::@7/(signed byte) printf_string::padding#1 )
  (byte) printf_string::format_justify_left#1 ← phi( printf_string/(byte) printf_string::format_justify_left#3 printf_string::@4/(byte) printf_string::format_justify_left#4 printf_string::@7/(byte) printf_string::format_justify_left#5 )
  (bool~) printf_string::$15 ← (number) 0 != (byte) printf_string::format_justify_left#1
  (bool~) printf_string::$1 ← ! (bool~) printf_string::$15
  (bool~) printf_string::$2 ← (bool~) printf_string::$1 && (signed byte) printf_string::padding#3
  (bool~) printf_string::$3 ← ! (bool~) printf_string::$2
  if((bool~) printf_string::$3) goto printf_string::@2
  to:printf_string::@5
printf_string::@3: scope:[printf_string]  from printf_string
  (byte) printf_string::format_justify_left#7 ← phi( printf_string/(byte) printf_string::format_justify_left#3 )
  (byte) printf_string::format_min_length#3 ← phi( printf_string/(byte) printf_string::format_min_length#1 )
  (byte*) printf_string::str#1 ← phi( printf_string/(byte*) printf_string::str#3 )
  (byte*) strlen::str#2 ← (byte*) printf_string::str#1
  call strlen 
  (word) strlen::return#3 ← (word) strlen::return#1
  to:printf_string::@7
printf_string::@7: scope:[printf_string]  from printf_string::@3
  (byte*) printf_string::str#7 ← phi( printf_string::@3/(byte*) printf_string::str#1 )
  (byte) printf_string::format_justify_left#5 ← phi( printf_string::@3/(byte) printf_string::format_justify_left#7 )
  (byte) printf_string::format_min_length#2 ← phi( printf_string::@3/(byte) printf_string::format_min_length#3 )
  (word) strlen::return#6 ← phi( printf_string::@3/(word) strlen::return#3 )
  (word~) printf_string::$9 ← (word) strlen::return#6
  (signed byte) printf_string::len#0 ← (signed byte)(word~) printf_string::$9
  (signed byte~) printf_string::$13 ← (signed byte)(byte) printf_string::format_min_length#2
  (signed byte~) printf_string::$10 ← (signed byte~) printf_string::$13 - (signed byte) printf_string::len#0
  (signed byte) printf_string::padding#1 ← (signed byte~) printf_string::$10
  (bool~) printf_string::$11 ← (signed byte) printf_string::padding#1 < (number) 0
  (bool~) printf_string::$12 ← ! (bool~) printf_string::$11
  if((bool~) printf_string::$12) goto printf_string::@1
  to:printf_string::@4
printf_string::@4: scope:[printf_string]  from printf_string::@7
  (byte*) printf_string::str#6 ← phi( printf_string::@7/(byte*) printf_string::str#7 )
  (byte) printf_string::format_justify_left#4 ← phi( printf_string::@7/(byte) printf_string::format_justify_left#5 )
  (signed byte) printf_string::padding#2 ← (number) 0
  to:printf_string::@1
printf_string::@2: scope:[printf_string]  from printf_string::@1 printf_string::@9
  (signed byte) printf_string::padding#7 ← phi( printf_string::@1/(signed byte) printf_string::padding#3 printf_string::@9/(signed byte) printf_string::padding#8 )
  (byte) printf_string::format_justify_left#6 ← phi( printf_string::@1/(byte) printf_string::format_justify_left#1 printf_string::@9/(byte) printf_string::format_justify_left#8 )
  (byte*) printf_string::str#2 ← phi( printf_string::@1/(byte*) printf_string::str#4 printf_string::@9/(byte*) printf_string::str#5 )
  (to_nomodify byte*) cputs::s#2 ← (byte*) printf_string::str#2
  call cputs 
  to:printf_string::@8
printf_string::@8: scope:[printf_string]  from printf_string::@2
  (signed byte) printf_string::padding#4 ← phi( printf_string::@2/(signed byte) printf_string::padding#7 )
  (byte) printf_string::format_justify_left#2 ← phi( printf_string::@2/(byte) printf_string::format_justify_left#6 )
  (bool~) printf_string::$6 ← (byte) printf_string::format_justify_left#2 && (signed byte) printf_string::padding#4
  (bool~) printf_string::$7 ← ! (bool~) printf_string::$6
  if((bool~) printf_string::$7) goto printf_string::@return
  to:printf_string::@6
printf_string::@5: scope:[printf_string]  from printf_string::@1
  (byte) printf_string::format_justify_left#9 ← phi( printf_string::@1/(byte) printf_string::format_justify_left#1 )
  (byte*) printf_string::str#8 ← phi( printf_string::@1/(byte*) printf_string::str#4 )
  (signed byte) printf_string::padding#5 ← phi( printf_string::@1/(signed byte) printf_string::padding#3 )
  (byte) printf_padding::pad#3 ← (byte) ' '
  (byte) printf_padding::length#3 ← (byte)(signed byte) printf_string::padding#5
  call printf_padding 
  to:printf_string::@9
printf_string::@9: scope:[printf_string]  from printf_string::@5
  (signed byte) printf_string::padding#8 ← phi( printf_string::@5/(signed byte) printf_string::padding#5 )
  (byte) printf_string::format_justify_left#8 ← phi( printf_string::@5/(byte) printf_string::format_justify_left#9 )
  (byte*) printf_string::str#5 ← phi( printf_string::@5/(byte*) printf_string::str#8 )
  to:printf_string::@2
printf_string::@6: scope:[printf_string]  from printf_string::@8
  (signed byte) printf_string::padding#6 ← phi( printf_string::@8/(signed byte) printf_string::padding#4 )
  (byte) printf_padding::pad#4 ← (byte) ' '
  (byte) printf_padding::length#4 ← (byte)(signed byte) printf_string::padding#6
  call printf_padding 
  to:printf_string::@10
printf_string::@10: scope:[printf_string]  from printf_string::@6
  to:printf_string::@return
printf_string::@return: scope:[printf_string]  from printf_string::@10 printf_string::@8
  return 
  to:@return

(void()) tod_init((byte) tod_init::tod_TENTHS , (byte) tod_init::tod_SEC , (byte) tod_init::tod_MIN , (byte) tod_init::tod_HOURS)
tod_init: scope:[tod_init]  from main::@4
  (byte) tod_init::tod_TENTHS#1 ← phi( main::@4/(byte) tod_init::tod_TENTHS#0 )
  (byte) tod_init::tod_SEC#1 ← phi( main::@4/(byte) tod_init::tod_SEC#0 )
  (byte) tod_init::tod_MIN#1 ← phi( main::@4/(byte) tod_init::tod_MIN#0 )
  (byte) tod_init::tod_HOURS#1 ← phi( main::@4/(byte) tod_init::tod_HOURS#0 )
  *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) | (number) $80
  *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) & (number) $7f
  *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS) ← (byte) tod_init::tod_HOURS#1
  *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN) ← (byte) tod_init::tod_MIN#1
  *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC) ← (byte) tod_init::tod_SEC#1
  *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS) ← (byte) tod_init::tod_TENTHS#1
  to:tod_init::@return
tod_init::@return: scope:[tod_init]  from tod_init
  return 
  to:@return

(struct TIME_OF_DAY()) tod_read()
tod_read: scope:[tod_read]  from main::@5
  (byte) tod_read::hours#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS)
  (byte) tod_read::mins#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN)
  (byte) tod_read::secs#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC)
  (byte) tod_read::tenths#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS)
  (byte) tod_read::tod_TENTHS#0 ← (byte) tod_read::tenths#0
  (byte) tod_read::tod_SEC#0 ← (byte) tod_read::secs#0
  (byte) tod_read::tod_MIN#0 ← (byte) tod_read::mins#0
  (byte) tod_read::tod_HOURS#0 ← (byte) tod_read::hours#0
  (byte) tod_read::return_TENTHS#0 ← (byte) tod_read::tod_TENTHS#0
  (byte) tod_read::return_SEC#0 ← (byte) tod_read::tod_SEC#0
  (byte) tod_read::return_MIN#0 ← (byte) tod_read::tod_MIN#0
  (byte) tod_read::return_HOURS#0 ← (byte) tod_read::tod_HOURS#0
  (struct TIME_OF_DAY) tod_read::return#0 ← struct-unwound {(byte) tod_read::return_TENTHS#0, (byte) tod_read::return_SEC#0, (byte) tod_read::return_MIN#0, (byte) tod_read::return_HOURS#0}
  to:tod_read::@return
tod_read::@return: scope:[tod_read]  from tod_read
  (byte) tod_read::return_HOURS#3 ← phi( tod_read/(byte) tod_read::return_HOURS#0 )
  (byte) tod_read::return_MIN#3 ← phi( tod_read/(byte) tod_read::return_MIN#0 )
  (byte) tod_read::return_SEC#3 ← phi( tod_read/(byte) tod_read::return_SEC#0 )
  (byte) tod_read::return_TENTHS#3 ← phi( tod_read/(byte) tod_read::return_TENTHS#0 )
  (byte) tod_read::return_TENTHS#1 ← (byte) tod_read::return_TENTHS#3
  (byte) tod_read::return_SEC#1 ← (byte) tod_read::return_SEC#3
  (byte) tod_read::return_MIN#1 ← (byte) tod_read::return_MIN#3
  (byte) tod_read::return_HOURS#1 ← (byte) tod_read::return_HOURS#3
  (struct TIME_OF_DAY) tod_read::return#1 ← struct-unwound {(byte) tod_read::return_TENTHS#1, (byte) tod_read::return_SEC#1, (byte) tod_read::return_MIN#1, (byte) tod_read::return_HOURS#1}
  return 
  to:@return

(byte*()) tod_str((byte) tod_str::tod_TENTHS , (byte) tod_str::tod_SEC , (byte) tod_str::tod_MIN , (byte) tod_str::tod_HOURS)
tod_str: scope:[tod_str]  from main::@6
  (byte) tod_str::tod_TENTHS#1 ← phi( main::@6/(byte) tod_str::tod_TENTHS#0 )
  (byte) tod_str::tod_SEC#1 ← phi( main::@6/(byte) tod_str::tod_SEC#0 )
  (byte) tod_str::tod_MIN#1 ← phi( main::@6/(byte) tod_str::tod_MIN#0 )
  (byte) tod_str::tod_HOURS#1 ← phi( main::@6/(byte) tod_str::tod_HOURS#0 )
  (byte~) tod_str::$0 ← (byte) tod_str::tod_HOURS#1 >> (number) 4
  (byte~) tod_str::$1 ← (byte) '0' + (byte~) tod_str::$0
  *((const byte*) tod_buffer + (number) 0) ← (byte~) tod_str::$1
  (number~) tod_str::$2 ← (byte) tod_str::tod_HOURS#1 & (number) $f
  (number~) tod_str::$3 ← (byte) '0' + (number~) tod_str::$2
  *((const byte*) tod_buffer + (number) 1) ← (number~) tod_str::$3
  (byte~) tod_str::$4 ← (byte) tod_str::tod_MIN#1 >> (number) 4
  (byte~) tod_str::$5 ← (byte) '0' + (byte~) tod_str::$4
  *((const byte*) tod_buffer + (number) 3) ← (byte~) tod_str::$5
  (number~) tod_str::$6 ← (byte) tod_str::tod_MIN#1 & (number) $f
  (number~) tod_str::$7 ← (byte) '0' + (number~) tod_str::$6
  *((const byte*) tod_buffer + (number) 4) ← (number~) tod_str::$7
  (byte~) tod_str::$8 ← (byte) tod_str::tod_SEC#1 >> (number) 4
  (byte~) tod_str::$9 ← (byte) '0' + (byte~) tod_str::$8
  *((const byte*) tod_buffer + (number) 6) ← (byte~) tod_str::$9
  (number~) tod_str::$10 ← (byte) tod_str::tod_SEC#1 & (number) $f
  (number~) tod_str::$11 ← (byte) '0' + (number~) tod_str::$10
  *((const byte*) tod_buffer + (number) 7) ← (number~) tod_str::$11
  (byte~) tod_str::$12 ← (byte) tod_str::tod_TENTHS#1 >> (number) 4
  (byte~) tod_str::$13 ← (byte) '0' + (byte~) tod_str::$12
  *((const byte*) tod_buffer + (number) 9) ← (byte~) tod_str::$13
  (number~) tod_str::$14 ← (byte) tod_str::tod_TENTHS#1 & (number) $f
  (number~) tod_str::$15 ← (byte) '0' + (number~) tod_str::$14
  *((const byte*) tod_buffer + (number) $a) ← (number~) tod_str::$15
  (byte*) tod_str::return#0 ← (const byte*) tod_buffer
  to:tod_str::@return
tod_str::@return: scope:[tod_str]  from tod_str
  (byte*) tod_str::return#3 ← phi( tod_str/(byte*) tod_str::return#0 )
  (byte*) tod_str::return#1 ← (byte*) tod_str::return#3
  return 
  to:@return

(void()) main()
main: scope:[main]  from __start::@1
  call clrscr 
  to:main::@1
main::@1: scope:[main]  from main
  (to_nomodify byte*) cputs::s#3 ← (const byte*) main::s
  call cputs 
  to:main::@2
main::@2: scope:[main]  from main::@1
  (to_nomodify byte*) cputs::s#4 ← (const byte*) main::s1
  call cputs 
  to:main::@3
main::@3: scope:[main]  from main::@2
  (word) printf_uint::uvalue#0 ← (number) 8
  (byte) printf_uint::format_min_length#0 ← (byte) 0
  (byte) printf_uint::format_justify_left#0 ← (byte) 0
  (byte) printf_uint::format_sign_always#0 ← (byte) 0
  (byte) printf_uint::format_zero_padding#0 ← (byte) 0
  (byte) printf_uint::format_upper_case#0 ← (byte) 0
  (byte) printf_uint::format_radix#0 ← (const byte) DECIMAL
  call printf_uint 
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte) tod_init::tod_TENTHS#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_TENTHS)
  (byte) tod_init::tod_SEC#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_SEC)
  (byte) tod_init::tod_MIN#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_MIN)
  (byte) tod_init::tod_HOURS#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_HOURS)
  call tod_init 
  to:main::@5
main::@5: scope:[main]  from main::@4
  stackpush(byte) ← (number) 1
  callexecute queen 
  sideeffect stackpullbytes((number) 1)
  call tod_read 
  (byte) tod_read::return_TENTHS#2 ← (byte) tod_read::return_TENTHS#1
  (byte) tod_read::return_SEC#2 ← (byte) tod_read::return_SEC#1
  (byte) tod_read::return_MIN#2 ← (byte) tod_read::return_MIN#1
  (byte) tod_read::return_HOURS#2 ← (byte) tod_read::return_HOURS#1
  to:main::@6
main::@6: scope:[main]  from main::@5
  (byte) tod_read::return_HOURS#4 ← phi( main::@5/(byte) tod_read::return_HOURS#2 )
  (byte) tod_read::return_MIN#4 ← phi( main::@5/(byte) tod_read::return_MIN#2 )
  (byte) tod_read::return_SEC#4 ← phi( main::@5/(byte) tod_read::return_SEC#2 )
  (byte) tod_read::return_TENTHS#4 ← phi( main::@5/(byte) tod_read::return_TENTHS#2 )
  (byte~) main::$5_TENTHS ← (byte) tod_read::return_TENTHS#4
  (byte~) main::$5_SEC ← (byte) tod_read::return_SEC#4
  (byte~) main::$5_MIN ← (byte) tod_read::return_MIN#4
  (byte~) main::$5_HOURS ← (byte) tod_read::return_HOURS#4
  (byte) tod_str::tod_TENTHS#0 ← (byte~) main::$5_TENTHS
  (byte) tod_str::tod_SEC#0 ← (byte~) main::$5_SEC
  (byte) tod_str::tod_MIN#0 ← (byte~) main::$5_MIN
  (byte) tod_str::tod_HOURS#0 ← (byte~) main::$5_HOURS
  call tod_str 
  (byte*) tod_str::return#2 ← (byte*) tod_str::return#1
  to:main::@7
main::@7: scope:[main]  from main::@6
  (byte*) tod_str::return#4 ← phi( main::@6/(byte*) tod_str::return#2 )
  (byte*~) main::$6 ← (byte*) tod_str::return#4
  (to_nomodify byte*) cputs::s#5 ← (const byte*) main::s2
  call cputs 
  to:main::@8
main::@8: scope:[main]  from main::@7
  (dword) printf_ulong::uvalue#0 ← (dword) count
  (byte) printf_ulong::format_min_length#0 ← (byte) 0
  (byte) printf_ulong::format_justify_left#0 ← (byte) 0
  (byte) printf_ulong::format_sign_always#0 ← (byte) 0
  (byte) printf_ulong::format_zero_padding#0 ← (byte) 0
  (byte) printf_ulong::format_upper_case#0 ← (byte) 0
  (byte) printf_ulong::format_radix#0 ← (const byte) DECIMAL
  call printf_ulong 
  to:main::@9
main::@9: scope:[main]  from main::@8
  (to_nomodify byte*) cputs::s#6 ← (const byte*) main::s3
  call cputs 
  to:main::@10
main::@10: scope:[main]  from main::@9
  (byte*) printf_string::str#0 ← (byte*~) main::$6
  (byte) printf_string::format_min_length#0 ← (byte) 0
  (byte) printf_string::format_justify_left#0 ← (byte) 0
  call printf_string 
  to:main::@11
main::@11: scope:[main]  from main::@10
  (to_nomodify byte*) cputs::s#7 ← (const byte*) main::s4
  call cputs 
  to:main::@12
main::@12: scope:[main]  from main::@11
  to:main::@return
main::@return: scope:[main]  from main::@12
  return 
  to:@return

__stackcall (void()) queen((byte) queen::row)
queen: scope:[queen]  from
  (byte) queen::row#0 ← stackidx(byte,(const byte) queen::OFFSET_STACK_ROW)
  (byte) queen::r ← (byte) queen::row#0
  (byte) queen::column ← (byte) 1
  to:queen::@1
queen::@1: scope:[queen]  from queen queen::@3
  (bool~) queen::$0 ← (byte) queen::column <= (number) 8
  if((bool~) queen::$0) goto queen::@2
  to:queen::@return
queen::@2: scope:[queen]  from queen::@1
  (byte) legal::row#0 ← (byte) queen::r
  (byte) legal::column#0 ← (byte) queen::column
  call legal 
  (byte) legal::return#0 ← (byte) legal::return#4
  to:queen::@7
queen::@7: scope:[queen]  from queen::@2
  (byte) legal::return#5 ← phi( queen::@2/(byte) legal::return#0 )
  (byte~) queen::$1 ← (byte) legal::return#5
  (bool~) queen::$7 ← (number) 0 != (byte~) queen::$1
  (bool~) queen::$2 ← ! (bool~) queen::$7
  if((bool~) queen::$2) goto queen::@3
  to:queen::@5
queen::@3: scope:[queen]  from queen::@6 queen::@7 queen::@8
  (byte) queen::column ← ++ (byte) queen::column
  to:queen::@1
queen::@5: scope:[queen]  from queen::@7
  *((const byte*) board + (byte) queen::r) ← (byte) queen::column
  (bool~) queen::$3 ← (byte) queen::r == (number) 8
  if((bool~) queen::$3) goto queen::@4
  to:queen::@6
queen::@4: scope:[queen]  from queen::@5
  (dword) count ← ++ (dword) count
  call print 
  to:queen::@8
queen::@8: scope:[queen]  from queen::@4
  to:queen::@3
queen::@6: scope:[queen]  from queen::@5
  asm { ldacolumn pha ldar pha  }
  (number~) queen::$4 ← (byte) queen::r + (number) 1
  stackpush(byte) ← (number~) queen::$4
  callexecute queen 
  sideeffect stackpullbytes((number) 1)
  asm { pla star pla stacolumn  }
  to:queen::@3
queen::@return: scope:[queen]  from queen::@1
  return 
  to:@return

(byte()) legal((byte) legal::row , (byte) legal::column)
legal: scope:[legal]  from queen::@2
  (byte) legal::column#4 ← phi( queen::@2/(byte) legal::column#0 )
  (byte) legal::row#3 ← phi( queen::@2/(byte) legal::row#0 )
  (byte) legal::i#0 ← (byte) 1
  to:legal::@1
legal::@1: scope:[legal]  from legal legal::@5
  (byte) legal::column#3 ← phi( legal/(byte) legal::column#4 legal::@5/(byte) legal::column#5 )
  (byte) legal::i#2 ← phi( legal/(byte) legal::i#0 legal::@5/(byte) legal::i#1 )
  (byte) legal::row#1 ← phi( legal/(byte) legal::row#3 legal::@5/(byte) legal::row#4 )
  (number~) legal::$0 ← (byte) legal::row#1 - (number) 1
  (bool~) legal::$1 ← (byte) legal::i#2 <= (number~) legal::$0
  if((bool~) legal::$1) goto legal::@2
  to:legal::@3
legal::@2: scope:[legal]  from legal::@1
  (byte) legal::row#6 ← phi( legal::@1/(byte) legal::row#1 )
  (byte) legal::column#1 ← phi( legal::@1/(byte) legal::column#3 )
  (byte) legal::i#3 ← phi( legal::@1/(byte) legal::i#2 )
  (bool~) legal::$2 ← *((const byte*) board + (byte) legal::i#3) == (byte) legal::column#1
  if((bool~) legal::$2) goto legal::@4
  to:legal::@6
legal::@3: scope:[legal]  from legal::@1
  (byte) legal::return#1 ← (number) 1
  to:legal::@return
legal::@4: scope:[legal]  from legal::@2
  (byte) legal::return#2 ← (number) 0
  to:legal::@return
legal::@6: scope:[legal]  from legal::@2
  (byte) legal::row#5 ← phi( legal::@2/(byte) legal::row#6 )
  (byte) legal::column#2 ← phi( legal::@2/(byte) legal::column#1 )
  (byte) legal::i#4 ← phi( legal::@2/(byte) legal::i#3 )
  (byte) diff::a#0 ← *((const byte*) board + (byte) legal::i#4)
  (byte) diff::b#0 ← (byte) legal::column#2
  call diff 
  (byte) diff::return#0 ← (byte) diff::return#4
  to:legal::@8
legal::@8: scope:[legal]  from legal::@6
  (byte) legal::column#7 ← phi( legal::@6/(byte) legal::column#2 )
  (byte) legal::row#2 ← phi( legal::@6/(byte) legal::row#5 )
  (byte) legal::i#5 ← phi( legal::@6/(byte) legal::i#4 )
  (byte) diff::return#5 ← phi( legal::@6/(byte) diff::return#0 )
  (byte~) legal::$3 ← (byte) diff::return#5
  (byte) diff::a#1 ← (byte) legal::i#5
  (byte) diff::b#1 ← (byte) legal::row#2
  call diff 
  (byte) diff::return#1 ← (byte) diff::return#4
  to:legal::@9
legal::@9: scope:[legal]  from legal::@8
  (byte) legal::column#6 ← phi( legal::@8/(byte) legal::column#7 )
  (byte) legal::row#7 ← phi( legal::@8/(byte) legal::row#2 )
  (byte) legal::i#7 ← phi( legal::@8/(byte) legal::i#5 )
  (byte) diff::return#6 ← phi( legal::@8/(byte) diff::return#1 )
  (byte~) legal::$4 ← (byte) diff::return#6
  (bool~) legal::$5 ← (byte~) legal::$3 == (byte~) legal::$4
  (bool~) legal::$6 ← ! (bool~) legal::$5
  if((bool~) legal::$6) goto legal::@5
  to:legal::@7
legal::@7: scope:[legal]  from legal::@9
  (byte) legal::return#3 ← (number) 0
  to:legal::@return
legal::@return: scope:[legal]  from legal::@3 legal::@4 legal::@7
  (byte) legal::return#6 ← phi( legal::@3/(byte) legal::return#1 legal::@4/(byte) legal::return#2 legal::@7/(byte) legal::return#3 )
  (byte) legal::return#4 ← (byte) legal::return#6
  return 
  to:@return
legal::@5: scope:[legal]  from legal::@9
  (byte) legal::column#5 ← phi( legal::@9/(byte) legal::column#6 )
  (byte) legal::row#4 ← phi( legal::@9/(byte) legal::row#7 )
  (byte) legal::i#6 ← phi( legal::@9/(byte) legal::i#7 )
  (byte) legal::i#1 ← ++ (byte) legal::i#6
  to:legal::@1

(byte()) diff((byte) diff::a , (byte) diff::b)
diff: scope:[diff]  from legal::@6 legal::@8
  (byte) diff::b#2 ← phi( legal::@6/(byte) diff::b#0 legal::@8/(byte) diff::b#1 )
  (byte) diff::a#2 ← phi( legal::@6/(byte) diff::a#0 legal::@8/(byte) diff::a#1 )
  (bool~) diff::$0 ← (byte) diff::a#2 < (byte) diff::b#2
  if((bool~) diff::$0) goto diff::@1
  to:diff::@2
diff::@1: scope:[diff]  from diff
  (byte) diff::a#3 ← phi( diff/(byte) diff::a#2 )
  (byte) diff::b#3 ← phi( diff/(byte) diff::b#2 )
  (byte~) diff::$2 ← (byte) diff::b#3 - (byte) diff::a#3
  (byte) diff::return#2 ← (byte~) diff::$2
  to:diff::@return
diff::@2: scope:[diff]  from diff
  (byte) diff::b#4 ← phi( diff/(byte) diff::b#2 )
  (byte) diff::a#4 ← phi( diff/(byte) diff::a#2 )
  (byte~) diff::$1 ← (byte) diff::a#4 - (byte) diff::b#4
  (byte) diff::return#3 ← (byte~) diff::$1
  to:diff::@return
diff::@return: scope:[diff]  from diff::@1 diff::@2
  (byte) diff::return#7 ← phi( diff::@1/(byte) diff::return#2 diff::@2/(byte) diff::return#3 )
  (byte) diff::return#4 ← (byte) diff::return#7
  return 
  to:@return

(void()) print()
print: scope:[print]  from queen::@4
  (byte) gotoxy::x#2 ← (number) 0
  (byte) gotoxy::y#2 ← (number) 5
  call gotoxy 
  to:print::@12
print::@12: scope:[print]  from print
  (to_nomodify byte*) cputs::s#8 ← (const byte*) print::s
  call cputs 
  to:print::@13
print::@13: scope:[print]  from print::@12
  (dword) printf_ulong::uvalue#1 ← (dword) count
  (byte) printf_ulong::format_min_length#1 ← (byte) 0
  (byte) printf_ulong::format_justify_left#1 ← (byte) 0
  (byte) printf_ulong::format_sign_always#1 ← (byte) 0
  (byte) printf_ulong::format_zero_padding#1 ← (byte) 0
  (byte) printf_ulong::format_upper_case#1 ← (byte) 0
  (byte) printf_ulong::format_radix#1 ← (const byte) DECIMAL
  call printf_ulong 
  to:print::@14
print::@14: scope:[print]  from print::@13
  (to_nomodify byte*) cputs::s#9 ← (const byte*) print::s1
  call cputs 
  to:print::@15
print::@15: scope:[print]  from print::@14
  (byte) print::i#0 ← (byte) 1
  to:print::@1
print::@1: scope:[print]  from print::@15 print::@16
  (byte) print::i#2 ← phi( print::@15/(byte) print::i#0 print::@16/(byte) print::i#1 )
  (bool~) print::$2 ← (byte) print::i#2 <= (number) 8
  if((bool~) print::$2) goto print::@2
  to:print::@3
print::@2: scope:[print]  from print::@1
  (byte) print::i#3 ← phi( print::@1/(byte) print::i#2 )
  (byte) printf_uchar::uvalue#0 ← (byte) print::i#3
  (byte) printf_uchar::format_min_length#0 ← (byte) 0
  (byte) printf_uchar::format_justify_left#0 ← (byte) 0
  (byte) printf_uchar::format_sign_always#0 ← (byte) 0
  (byte) printf_uchar::format_zero_padding#0 ← (byte) 0
  (byte) printf_uchar::format_upper_case#0 ← (byte) 0
  (byte) printf_uchar::format_radix#0 ← (const byte) HEXADECIMAL
  call printf_uchar 
  to:print::@16
print::@16: scope:[print]  from print::@2
  (byte) print::i#4 ← phi( print::@2/(byte) print::i#3 )
  (byte) print::i#1 ← ++ (byte) print::i#4
  to:print::@1
print::@3: scope:[print]  from print::@1
  (byte) print::i1#0 ← (byte) 1
  to:print::@4
print::@4: scope:[print]  from print::@3 print::@8
  (byte) print::i1#2 ← phi( print::@3/(byte) print::i1#0 print::@8/(byte) print::i1#1 )
  (bool~) print::$4 ← (byte) print::i1#2 <= (number) 8
  if((bool~) print::$4) goto print::@5
  to:print::@return
print::@5: scope:[print]  from print::@4
  (byte) print::i1#6 ← phi( print::@4/(byte) print::i1#2 )
  (to_nomodify byte*) cputs::s#10 ← (const byte*) print::s2
  call cputs 
  to:print::@17
print::@17: scope:[print]  from print::@5
  (byte) print::i1#3 ← phi( print::@5/(byte) print::i1#6 )
  (byte) printf_uchar::uvalue#1 ← (byte) print::i1#3
  (byte) printf_uchar::format_min_length#1 ← (byte) 0
  (byte) printf_uchar::format_justify_left#1 ← (byte) 0
  (byte) printf_uchar::format_sign_always#1 ← (byte) 0
  (byte) printf_uchar::format_zero_padding#1 ← (byte) 0
  (byte) printf_uchar::format_upper_case#1 ← (byte) 0
  (byte) printf_uchar::format_radix#1 ← (const byte) HEXADECIMAL
  call printf_uchar 
  to:print::@18
print::@18: scope:[print]  from print::@17
  (byte) print::i1#9 ← phi( print::@17/(byte) print::i1#3 )
  (byte) print::j#0 ← (byte) 1
  to:print::@6
print::@6: scope:[print]  from print::@10 print::@18
  (byte) print::i1#7 ← phi( print::@10/(byte) print::i1#8 print::@18/(byte) print::i1#9 )
  (byte) print::j#2 ← phi( print::@10/(byte) print::j#1 print::@18/(byte) print::j#0 )
  (bool~) print::$6 ← (byte) print::j#2 <= (number) 8
  if((bool~) print::$6) goto print::@7
  to:print::@8
print::@7: scope:[print]  from print::@6
  (byte) print::j#3 ← phi( print::@6/(byte) print::j#2 )
  (byte) print::i1#4 ← phi( print::@6/(byte) print::i1#7 )
  (bool~) print::$7 ← *((const byte*) board + (byte) print::i1#4) == (byte) print::j#3
  if((bool~) print::$7) goto print::@9
  to:print::@11
print::@8: scope:[print]  from print::@6
  (byte) print::i1#5 ← phi( print::@6/(byte) print::i1#7 )
  (byte) print::i1#1 ← ++ (byte) print::i1#5
  to:print::@4
print::@9: scope:[print]  from print::@7
  (byte) print::i1#12 ← phi( print::@7/(byte) print::i1#4 )
  (byte) print::j#7 ← phi( print::@7/(byte) print::j#3 )
  (to_nomodify byte*) cputs::s#11 ← (const byte*) print::s3
  call cputs 
  to:print::@19
print::@19: scope:[print]  from print::@9
  (byte) print::i1#10 ← phi( print::@9/(byte) print::i1#12 )
  (byte) print::j#5 ← phi( print::@9/(byte) print::j#7 )
  to:print::@10
print::@11: scope:[print]  from print::@7
  (byte) print::i1#13 ← phi( print::@7/(byte) print::i1#4 )
  (byte) print::j#8 ← phi( print::@7/(byte) print::j#3 )
  (to_nomodify byte*) cputs::s#12 ← (const byte*) print::s4
  call cputs 
  to:print::@20
print::@20: scope:[print]  from print::@11
  (byte) print::i1#11 ← phi( print::@11/(byte) print::i1#13 )
  (byte) print::j#6 ← phi( print::@11/(byte) print::j#8 )
  to:print::@10
print::@10: scope:[print]  from print::@19 print::@20
  (byte) print::i1#8 ← phi( print::@19/(byte) print::i1#10 print::@20/(byte) print::i1#11 )
  (byte) print::j#4 ← phi( print::@19/(byte) print::j#5 print::@20/(byte) print::j#6 )
  (byte) print::j#1 ← ++ (byte) print::j#4
  to:print::@6
print::@return: scope:[print]  from print::@4
  return 
  to:@return

(void()) __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  (byte) conio_cursor_x ← (byte) 0
  (byte) conio_cursor_y ← (byte) 0
  (byte*) conio_line_text ← (const nomodify byte*) CONIO_SCREEN_TEXT
  (byte*) conio_line_color ← (const nomodify byte*) CONIO_SCREEN_COLORS
  (byte) conio_textcolor ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT
  (byte) conio_scroll_enable ← (byte) 1
  (dword) count ← (dword) 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
(const byte) BINARY = (number) 2
(const nomodify struct MOS6526_CIA*) CIA1 = (struct MOS6526_CIA*)(number) $dc00
(const nomodify byte*) COLORRAM = (byte*)(number) $d800
(const nomodify byte*) CONIO_SCREEN_COLORS = (const nomodify byte*) COLORRAM
(const nomodify byte*) CONIO_SCREEN_TEXT = (const nomodify byte*) DEFAULT_SCREEN
(const nomodify byte) CONIO_TEXTCOLOR_DEFAULT = (const nomodify byte) LIGHT_BLUE
(const byte) DECIMAL = (number) $a
(const nomodify byte*) DEFAULT_SCREEN = (byte*)(number) $400
(const byte*) DIGITS[]  = (byte*) "0123456789abcdef"z
(const byte) HEXADECIMAL = (number) $10
(const nomodify byte) LIGHT_BLUE = (byte) $e
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6569_VICII::BG_COLOR
(byte) MOS6569_VICII::BG_COLOR1
(byte) MOS6569_VICII::BG_COLOR2
(byte) MOS6569_VICII::BG_COLOR3
(byte) MOS6569_VICII::BORDER_COLOR
(byte) MOS6569_VICII::CONTROL1
(byte) MOS6569_VICII::CONTROL2
(byte) MOS6569_VICII::IRQ_ENABLE
(byte) MOS6569_VICII::IRQ_STATUS
(byte) MOS6569_VICII::LIGHTPEN_X
(byte) MOS6569_VICII::LIGHTPEN_Y
(byte) MOS6569_VICII::MEMORY
(byte) MOS6569_VICII::RASTER
(byte) MOS6569_VICII::SPRITE0_COLOR
(byte) MOS6569_VICII::SPRITE0_X
(byte) MOS6569_VICII::SPRITE0_Y
(byte) MOS6569_VICII::SPRITE1_COLOR
(byte) MOS6569_VICII::SPRITE1_X
(byte) MOS6569_VICII::SPRITE1_Y
(byte) MOS6569_VICII::SPRITE2_COLOR
(byte) MOS6569_VICII::SPRITE2_X
(byte) MOS6569_VICII::SPRITE2_Y
(byte) MOS6569_VICII::SPRITE3_COLOR
(byte) MOS6569_VICII::SPRITE3_X
(byte) MOS6569_VICII::SPRITE3_Y
(byte) MOS6569_VICII::SPRITE4_COLOR
(byte) MOS6569_VICII::SPRITE4_X
(byte) MOS6569_VICII::SPRITE4_Y
(byte) MOS6569_VICII::SPRITE5_COLOR
(byte) MOS6569_VICII::SPRITE5_X
(byte) MOS6569_VICII::SPRITE5_Y
(byte) MOS6569_VICII::SPRITE6_COLOR
(byte) MOS6569_VICII::SPRITE6_X
(byte) MOS6569_VICII::SPRITE6_Y
(byte) MOS6569_VICII::SPRITE7_COLOR
(byte) MOS6569_VICII::SPRITE7_X
(byte) MOS6569_VICII::SPRITE7_Y
(byte) MOS6569_VICII::SPRITES_BG_COLLISION
(byte) MOS6569_VICII::SPRITES_COLLISION
(byte) MOS6569_VICII::SPRITES_ENABLE
(byte) MOS6569_VICII::SPRITES_EXPAND_X
(byte) MOS6569_VICII::SPRITES_EXPAND_Y
(byte) MOS6569_VICII::SPRITES_MC
(byte) MOS6569_VICII::SPRITES_MCOLOR1
(byte) MOS6569_VICII::SPRITES_MCOLOR2
(byte) MOS6569_VICII::SPRITES_PRIORITY
(byte) MOS6569_VICII::SPRITES_XMSB
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(const byte) OCTAL = (number) 8
(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL = (byte) $e
(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL = (byte) $f
(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS = (byte) 8
(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS = (byte) $b
(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN = (byte) $a
(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC = (byte) 9
(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = (byte) 1
(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN = (byte) 0
(const byte) OFFSET_STRUCT_TIME_OF_DAY_HOURS = (byte) 3
(const byte) OFFSET_STRUCT_TIME_OF_DAY_MIN = (byte) 2
(const byte) OFFSET_STRUCT_TIME_OF_DAY_SEC = (byte) 1
(const byte) OFFSET_STRUCT_TIME_OF_DAY_TENTHS = (byte) 0
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(const word*) RADIX_BINARY_VALUES[]  = { (word) $8000, (word) $4000, (word) $2000, (word) $1000, (word) $800, (word) $400, (word) $200, (word) $100, (word) $80, (word) $40, (word) $20, (word) $10, (word) 8, (word) 4, (word) 2 }
(const byte*) RADIX_BINARY_VALUES_CHAR[]  = { (byte) $80, (byte) $40, (byte) $20, (byte) $10, (byte) 8, (byte) 4, (byte) 2 }
(const dword*) RADIX_BINARY_VALUES_LONG[]  = { (dword) $80000000, (dword) $40000000, (dword) $20000000, (dword) $10000000, (dword) $8000000, (dword) $4000000, (dword) $2000000, (dword) $1000000, (dword) $800000, (dword) $400000, (dword) $200000, (dword) $100000, (dword) $80000, (dword) $40000, (dword) $20000, (dword) $10000, (dword) $8000, (dword) $4000, (dword) $2000, (dword) $1000, (dword) $800, (dword) $400, (dword) $200, (dword) $100, (dword) $80, (dword) $40, (dword) $20, (dword) $10, (dword) 8, (dword) 4, (dword) 2 }
(const word*) RADIX_DECIMAL_VALUES[]  = { (word) $2710, (word) $3e8, (word) $64, (word) $a }
(const byte*) RADIX_DECIMAL_VALUES_CHAR[]  = { (byte) $64, (byte) $a }
(const dword*) RADIX_DECIMAL_VALUES_LONG[]  = { (dword) $3b9aca00, (dword) $5f5e100, (dword) $989680, (dword) $f4240, (dword) $186a0, (dword) $2710, (dword) $3e8, (dword) $64, (dword) $a }
(const word*) RADIX_HEXADECIMAL_VALUES[]  = { (word) $1000, (word) $100, (word) $10 }
(const byte*) RADIX_HEXADECIMAL_VALUES_CHAR[]  = { (byte) $10 }
(const dword*) RADIX_HEXADECIMAL_VALUES_LONG[]  = { (dword) $10000000, (dword) $1000000, (dword) $100000, (dword) $10000, (dword) $1000, (dword) $100, (dword) $10 }
(const word*) RADIX_OCTAL_VALUES[]  = { (word) $8000, (word) $1000, (word) $200, (word) $40, (word) 8 }
(const byte*) RADIX_OCTAL_VALUES_CHAR[]  = { (byte) $40, (byte) 8 }
(const dword*) RADIX_OCTAL_VALUES_LONG[]  = { (dword) $40000000, (dword) $8000000, (dword) $1000000, (dword) $200000, (dword) $40000, (dword) $8000, (dword) $1000, (dword) $200, (dword) $40, (dword) 8 }
(const byte) SIZEOF_DWORD = (byte) 4
(const byte) SIZEOF_WORD = (byte) 2
(const word) STACK_BASE = (word) $103
(byte) TIME_OF_DAY::HOURS
(byte) TIME_OF_DAY::MIN
(byte) TIME_OF_DAY::SEC
(byte) TIME_OF_DAY::TENTHS
(struct TIME_OF_DAY) TOD_ZERO loadstore = { TENTHS: (byte) 0, SEC: (byte) 0, MIN: (byte) 0, HOURS: (byte) 0 }
(void()) __start()
(label) __start::@1
(label) __start::@2
(label) __start::@return
(label) __start::__init1
(const byte*) board[(number) $14]  = { fill( $14, 0) }
(void()) clrscr()
(bool~) clrscr::$0
(bool~) clrscr::$1
(label) clrscr::@1
(label) clrscr::@2
(label) clrscr::@3
(label) clrscr::@4
(label) clrscr::@5
(label) clrscr::@6
(label) clrscr::@return
(byte) clrscr::c
(byte) clrscr::c#0
(byte) clrscr::c#1
(byte) clrscr::c#2
(byte) clrscr::c#3
(byte) clrscr::l
(byte) clrscr::l#0
(byte) clrscr::l#1
(byte) clrscr::l#2
(byte) clrscr::l#3
(byte) clrscr::l#4
(byte) clrscr::l#5
(byte) clrscr::l#6
(byte*) clrscr::line_cols
(byte*) clrscr::line_cols#0
(byte*) clrscr::line_cols#1
(byte*) clrscr::line_cols#2
(byte*) clrscr::line_cols#3
(byte*) clrscr::line_cols#4
(byte*) clrscr::line_cols#5
(byte*) clrscr::line_cols#6
(byte*) clrscr::line_text
(byte*) clrscr::line_text#0
(byte*) clrscr::line_text#1
(byte*) clrscr::line_text#2
(byte*) clrscr::line_text#3
(byte*) clrscr::line_text#4
(byte*) clrscr::line_text#5
(byte*) clrscr::line_text#6
(byte) conio_cursor_x loadstore
(byte) conio_cursor_y loadstore
(byte*) conio_line_color loadstore
(byte*) conio_line_text loadstore
(byte) conio_scroll_enable loadstore
(byte) conio_textcolor loadstore
(dword) count loadstore
(void()) cputc((byte) cputc::c)
(bool~) cputc::$0
(bool~) cputc::$1
(bool~) cputc::$2
(label) cputc::@1
(label) cputc::@2
(label) cputc::@3
(label) cputc::@4
(label) cputc::@5
(label) cputc::@return
(byte) cputc::c
(byte) cputc::c#0
(byte) cputc::c#1
(byte) cputc::c#2
(byte) cputc::c#3
(byte) cputc::c#4
(void()) cputln()
(label) cputln::@1
(label) cputln::@return
(void()) cputs((to_nomodify byte*) cputs::s)
(byte~) cputs::$0
(bool~) cputs::$2
(label) cputs::@1
(label) cputs::@2
(label) cputs::@3
(label) cputs::@return
(byte) cputs::c
(byte) cputs::c#0
(byte) cputs::c#1
(byte) cputs::c#2
(to_nomodify byte*) cputs::s
(to_nomodify byte*) cputs::s#0
(to_nomodify byte*) cputs::s#1
(to_nomodify byte*) cputs::s#10
(to_nomodify byte*) cputs::s#11
(to_nomodify byte*) cputs::s#12
(to_nomodify byte*) cputs::s#13
(to_nomodify byte*) cputs::s#14
(to_nomodify byte*) cputs::s#15
(to_nomodify byte*) cputs::s#16
(to_nomodify byte*) cputs::s#2
(to_nomodify byte*) cputs::s#3
(to_nomodify byte*) cputs::s#4
(to_nomodify byte*) cputs::s#5
(to_nomodify byte*) cputs::s#6
(to_nomodify byte*) cputs::s#7
(to_nomodify byte*) cputs::s#8
(to_nomodify byte*) cputs::s#9
(void()) cscroll()
(bool~) cscroll::$0
(bool~) cscroll::$1
(bool~) cscroll::$7
(label) cscroll::@1
(label) cscroll::@2
(label) cscroll::@3
(label) cscroll::@4
(label) cscroll::@5
(label) cscroll::@6
(label) cscroll::@7
(label) cscroll::@8
(label) cscroll::@return
(byte()) diff((byte) diff::a , (byte) diff::b)
(bool~) diff::$0
(byte~) diff::$1
(byte~) diff::$2
(label) diff::@1
(label) diff::@2
(label) diff::@return
(byte) diff::a
(byte) diff::a#0
(byte) diff::a#1
(byte) diff::a#2
(byte) diff::a#3
(byte) diff::a#4
(byte) diff::b
(byte) diff::b#0
(byte) diff::b#1
(byte) diff::b#2
(byte) diff::b#3
(byte) diff::b#4
(byte) diff::return
(byte) diff::return#0
(byte) diff::return#1
(byte) diff::return#2
(byte) diff::return#3
(byte) diff::return#4
(byte) diff::return#5
(byte) diff::return#6
(byte) diff::return#7
(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
(bool~) gotoxy::$0
(bool~) gotoxy::$1
(bool~) gotoxy::$2
(bool~) gotoxy::$3
(number~) gotoxy::$4
(byte*~) gotoxy::$5
(byte*~) gotoxy::$6
(word~) gotoxy::$7
(label) gotoxy::@1
(label) gotoxy::@2
(label) gotoxy::@3
(label) gotoxy::@4
(label) gotoxy::@return
(word) gotoxy::line_offset
(word) gotoxy::line_offset#0
(byte) gotoxy::x
(byte) gotoxy::x#0
(byte) gotoxy::x#1
(byte) gotoxy::x#2
(byte) gotoxy::x#3
(byte) gotoxy::x#4
(byte) gotoxy::x#5
(byte) gotoxy::x#6
(byte) gotoxy::y
(byte) gotoxy::y#0
(byte) gotoxy::y#1
(byte) gotoxy::y#2
(byte) gotoxy::y#3
(byte) gotoxy::y#4
(byte) gotoxy::y#5
(byte) gotoxy::y#6
(byte()) legal((byte) legal::row , (byte) legal::column)
(number~) legal::$0
(bool~) legal::$1
(bool~) legal::$2
(byte~) legal::$3
(byte~) legal::$4
(bool~) legal::$5
(bool~) legal::$6
(label) legal::@1
(label) legal::@2
(label) legal::@3
(label) legal::@4
(label) legal::@5
(label) legal::@6
(label) legal::@7
(label) legal::@8
(label) legal::@9
(label) legal::@return
(byte) legal::column
(byte) legal::column#0
(byte) legal::column#1
(byte) legal::column#2
(byte) legal::column#3
(byte) legal::column#4
(byte) legal::column#5
(byte) legal::column#6
(byte) legal::column#7
(byte) legal::i
(byte) legal::i#0
(byte) legal::i#1
(byte) legal::i#2
(byte) legal::i#3
(byte) legal::i#4
(byte) legal::i#5
(byte) legal::i#6
(byte) legal::i#7
(byte) legal::return
(byte) legal::return#0
(byte) legal::return#1
(byte) legal::return#2
(byte) legal::return#3
(byte) legal::return#4
(byte) legal::return#5
(byte) legal::return#6
(byte) legal::row
(byte) legal::row#0
(byte) legal::row#1
(byte) legal::row#2
(byte) legal::row#3
(byte) legal::row#4
(byte) legal::row#5
(byte) legal::row#6
(byte) legal::row#7
(void()) main()
(byte~) main::$5_HOURS
(byte~) main::$5_MIN
(byte~) main::$5_SEC
(byte~) main::$5_TENTHS
(byte*~) main::$6
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(const byte*) main::s[(byte) $29]  = (byte*) " - n queens problem using backtracking -"
(const byte*) main::s1[(byte) $13]  = (byte*) "
number of queens:"
(const byte*) main::s2[(byte) $e]  = (byte*) "

solutions: "
(const byte*) main::s3[(byte) 8]  = (byte*) " time: "
(const byte*) main::s4[(byte) 3]  = (byte*) ".
"
(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
(byte*~) memcpy::$0
(bool~) memcpy::$1
(byte*~) memcpy::$2
(label) memcpy::@1
(label) memcpy::@2
(label) memcpy::@3
(label) memcpy::@return
(void*) memcpy::destination
(void*) memcpy::destination#0
(void*) memcpy::destination#1
(void*) memcpy::destination#2
(void*) memcpy::destination#3
(void*) memcpy::destination#4
(void*) memcpy::destination#5
(byte*) memcpy::dst
(byte*) memcpy::dst#0
(byte*) memcpy::dst#1
(byte*) memcpy::dst#2
(byte*) memcpy::dst#3
(word) memcpy::num
(word) memcpy::num#0
(word) memcpy::num#1
(word) memcpy::num#2
(void*) memcpy::return
(void*) memcpy::return#0
(void*) memcpy::return#1
(void*) memcpy::return#2
(void*) memcpy::return#3
(void*) memcpy::return#4
(void*) memcpy::source
(void*) memcpy::source#0
(void*) memcpy::source#1
(void*) memcpy::source#2
(byte*) memcpy::src
(byte*) memcpy::src#0
(byte*) memcpy::src#1
(byte*) memcpy::src#2
(byte*) memcpy::src#3
(byte*) memcpy::src_end
(byte*) memcpy::src_end#0
(byte*) memcpy::src_end#1
(byte*) memcpy::src_end#2
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(bool~) memset::$0
(bool~) memset::$1
(byte*~) memset::$2
(bool~) memset::$3
(byte*~) memset::$4
(label) memset::@1
(label) memset::@2
(label) memset::@3
(label) memset::@4
(label) memset::@return
(byte) memset::c
(byte) memset::c#0
(byte) memset::c#1
(byte) memset::c#2
(byte) memset::c#3
(byte) memset::c#4
(byte) memset::c#5
(byte*) memset::dst
(byte*) memset::dst#0
(byte*) memset::dst#1
(byte*) memset::dst#2
(byte*) memset::dst#3
(byte*) memset::end
(byte*) memset::end#0
(byte*) memset::end#1
(byte*) memset::end#2
(word) memset::num
(word) memset::num#0
(word) memset::num#1
(word) memset::num#2
(word) memset::num#3
(void*) memset::return
(void*) memset::return#0
(void*) memset::return#1
(void*) memset::return#2
(void*) memset::return#3
(void*) memset::return#4
(void*) memset::str
(void*) memset::str#0
(void*) memset::str#1
(void*) memset::str#2
(void*) memset::str#3
(void*) memset::str#4
(void*) memset::str#5
(void*) memset::str#6
(void()) print()
(bool~) print::$2
(bool~) print::$4
(bool~) print::$6
(bool~) print::$7
(label) print::@1
(label) print::@10
(label) print::@11
(label) print::@12
(label) print::@13
(label) print::@14
(label) print::@15
(label) print::@16
(label) print::@17
(label) print::@18
(label) print::@19
(label) print::@2
(label) print::@20
(label) print::@3
(label) print::@4
(label) print::@5
(label) print::@6
(label) print::@7
(label) print::@8
(label) print::@9
(label) print::@return
(byte) print::i
(byte) print::i#0
(byte) print::i#1
(byte) print::i#2
(byte) print::i#3
(byte) print::i#4
(byte) print::i1
(byte) print::i1#0
(byte) print::i1#1
(byte) print::i1#10
(byte) print::i1#11
(byte) print::i1#12
(byte) print::i1#13
(byte) print::i1#2
(byte) print::i1#3
(byte) print::i1#4
(byte) print::i1#5
(byte) print::i1#6
(byte) print::i1#7
(byte) print::i1#8
(byte) print::i1#9
(byte) print::j
(byte) print::j#0
(byte) print::j#1
(byte) print::j#2
(byte) print::j#3
(byte) print::j#4
(byte) print::j#5
(byte) print::j#6
(byte) print::j#7
(byte) print::j#8
(const byte*) print::s[(byte) 3]  = (byte*) "
#"
(const byte*) print::s1[(byte) 4]  = (byte*) ":
 "
(const byte*) print::s2[(byte) 2]  = (byte*) "
"
(const byte*) print::s3[(byte) 2]  = (byte*) "Q"
(const byte*) print::s4[(byte) 2]  = (byte*) "-"
(struct printf_buffer_number) printf_buffer loadstore = {}
(const byte*) printf_buffer_number::digits[(number) $b]  = { fill( $b, 0) }
(byte) printf_buffer_number::sign
(byte) printf_format_number::justify_left
(byte) printf_format_number::min_length
(byte) printf_format_number::radix
(byte) printf_format_number::sign_always
(byte) printf_format_number::upper_case
(byte) printf_format_number::zero_padding
(byte) printf_format_string::justify_left
(byte) printf_format_string::min_length
(void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
(bool~) printf_number_buffer::$0
(bool~) printf_number_buffer::$1
(bool~) printf_number_buffer::$10
(bool~) printf_number_buffer::$12
(bool~) printf_number_buffer::$14
(bool~) printf_number_buffer::$15
(bool~) printf_number_buffer::$16
(bool~) printf_number_buffer::$17
(word~) printf_number_buffer::$19
(bool~) printf_number_buffer::$2
(bool~) printf_number_buffer::$20
(signed byte~) printf_number_buffer::$21
(bool~) printf_number_buffer::$22
(bool~) printf_number_buffer::$23
(signed byte~) printf_number_buffer::$25
(bool~) printf_number_buffer::$26
(bool~) printf_number_buffer::$27
(bool~) printf_number_buffer::$28
(bool~) printf_number_buffer::$29
(bool~) printf_number_buffer::$3
(bool~) printf_number_buffer::$30
(bool~) printf_number_buffer::$31
(bool~) printf_number_buffer::$32
(bool~) printf_number_buffer::$4
(bool~) printf_number_buffer::$5
(bool~) printf_number_buffer::$7
(bool~) printf_number_buffer::$9
(label) printf_number_buffer::@1
(label) printf_number_buffer::@10
(label) printf_number_buffer::@11
(label) printf_number_buffer::@12
(label) printf_number_buffer::@13
(label) printf_number_buffer::@14
(label) printf_number_buffer::@15
(label) printf_number_buffer::@16
(label) printf_number_buffer::@17
(label) printf_number_buffer::@18
(label) printf_number_buffer::@19
(label) printf_number_buffer::@2
(label) printf_number_buffer::@20
(label) printf_number_buffer::@21
(label) printf_number_buffer::@3
(label) printf_number_buffer::@4
(label) printf_number_buffer::@5
(label) printf_number_buffer::@6
(label) printf_number_buffer::@7
(label) printf_number_buffer::@8
(label) printf_number_buffer::@9
(label) printf_number_buffer::@return
(struct printf_buffer_number) printf_number_buffer::buffer
(byte*) printf_number_buffer::buffer_digits
(byte*) printf_number_buffer::buffer_digits#0
(byte*) printf_number_buffer::buffer_digits#1
(byte*) printf_number_buffer::buffer_digits#10
(byte*) printf_number_buffer::buffer_digits#11
(byte*) printf_number_buffer::buffer_digits#12
(byte*) printf_number_buffer::buffer_digits#13
(byte*) printf_number_buffer::buffer_digits#14
(byte*) printf_number_buffer::buffer_digits#15
(byte*) printf_number_buffer::buffer_digits#16
(byte*) printf_number_buffer::buffer_digits#17
(byte*) printf_number_buffer::buffer_digits#18
(byte*) printf_number_buffer::buffer_digits#19
(byte*) printf_number_buffer::buffer_digits#2
(byte*) printf_number_buffer::buffer_digits#20
(byte*) printf_number_buffer::buffer_digits#21
(byte*) printf_number_buffer::buffer_digits#3
(byte*) printf_number_buffer::buffer_digits#4
(byte*) printf_number_buffer::buffer_digits#5
(byte*) printf_number_buffer::buffer_digits#6
(byte*) printf_number_buffer::buffer_digits#7
(byte*) printf_number_buffer::buffer_digits#8
(byte*) printf_number_buffer::buffer_digits#9
(byte) printf_number_buffer::buffer_sign
(byte) printf_number_buffer::buffer_sign#0
(byte) printf_number_buffer::buffer_sign#1
(byte) printf_number_buffer::buffer_sign#10
(byte) printf_number_buffer::buffer_sign#11
(byte) printf_number_buffer::buffer_sign#12
(byte) printf_number_buffer::buffer_sign#13
(byte) printf_number_buffer::buffer_sign#2
(byte) printf_number_buffer::buffer_sign#3
(byte) printf_number_buffer::buffer_sign#4
(byte) printf_number_buffer::buffer_sign#5
(byte) printf_number_buffer::buffer_sign#6
(byte) printf_number_buffer::buffer_sign#7
(byte) printf_number_buffer::buffer_sign#8
(byte) printf_number_buffer::buffer_sign#9
(struct printf_format_number) printf_number_buffer::format
(byte) printf_number_buffer::format_justify_left
(byte) printf_number_buffer::format_justify_left#0
(byte) printf_number_buffer::format_justify_left#1
(byte) printf_number_buffer::format_justify_left#10
(byte) printf_number_buffer::format_justify_left#11
(byte) printf_number_buffer::format_justify_left#12
(byte) printf_number_buffer::format_justify_left#13
(byte) printf_number_buffer::format_justify_left#14
(byte) printf_number_buffer::format_justify_left#15
(byte) printf_number_buffer::format_justify_left#16
(byte) printf_number_buffer::format_justify_left#17
(byte) printf_number_buffer::format_justify_left#18
(byte) printf_number_buffer::format_justify_left#19
(byte) printf_number_buffer::format_justify_left#2
(byte) printf_number_buffer::format_justify_left#20
(byte) printf_number_buffer::format_justify_left#21
(byte) printf_number_buffer::format_justify_left#22
(byte) printf_number_buffer::format_justify_left#3
(byte) printf_number_buffer::format_justify_left#4
(byte) printf_number_buffer::format_justify_left#5
(byte) printf_number_buffer::format_justify_left#6
(byte) printf_number_buffer::format_justify_left#7
(byte) printf_number_buffer::format_justify_left#8
(byte) printf_number_buffer::format_justify_left#9
(byte) printf_number_buffer::format_min_length
(byte) printf_number_buffer::format_min_length#0
(byte) printf_number_buffer::format_min_length#1
(byte) printf_number_buffer::format_min_length#2
(byte) printf_number_buffer::format_min_length#3
(byte) printf_number_buffer::format_min_length#4
(byte) printf_number_buffer::format_min_length#5
(byte) printf_number_buffer::format_min_length#6
(byte) printf_number_buffer::format_min_length#7
(byte) printf_number_buffer::format_radix
(byte) printf_number_buffer::format_radix#0
(byte) printf_number_buffer::format_radix#1
(byte) printf_number_buffer::format_radix#2
(byte) printf_number_buffer::format_sign_always
(byte) printf_number_buffer::format_sign_always#0
(byte) printf_number_buffer::format_sign_always#1
(byte) printf_number_buffer::format_sign_always#2
(byte) printf_number_buffer::format_upper_case
(byte) printf_number_buffer::format_upper_case#0
(byte) printf_number_buffer::format_upper_case#1
(byte) printf_number_buffer::format_upper_case#10
(byte) printf_number_buffer::format_upper_case#11
(byte) printf_number_buffer::format_upper_case#12
(byte) printf_number_buffer::format_upper_case#13
(byte) printf_number_buffer::format_upper_case#14
(byte) printf_number_buffer::format_upper_case#15
(byte) printf_number_buffer::format_upper_case#16
(byte) printf_number_buffer::format_upper_case#17
(byte) printf_number_buffer::format_upper_case#18
(byte) printf_number_buffer::format_upper_case#2
(byte) printf_number_buffer::format_upper_case#3
(byte) printf_number_buffer::format_upper_case#4
(byte) printf_number_buffer::format_upper_case#5
(byte) printf_number_buffer::format_upper_case#6
(byte) printf_number_buffer::format_upper_case#7
(byte) printf_number_buffer::format_upper_case#8
(byte) printf_number_buffer::format_upper_case#9
(byte) printf_number_buffer::format_zero_padding
(byte) printf_number_buffer::format_zero_padding#0
(byte) printf_number_buffer::format_zero_padding#1
(byte) printf_number_buffer::format_zero_padding#10
(byte) printf_number_buffer::format_zero_padding#11
(byte) printf_number_buffer::format_zero_padding#12
(byte) printf_number_buffer::format_zero_padding#13
(byte) printf_number_buffer::format_zero_padding#14
(byte) printf_number_buffer::format_zero_padding#15
(byte) printf_number_buffer::format_zero_padding#16
(byte) printf_number_buffer::format_zero_padding#17
(byte) printf_number_buffer::format_zero_padding#18
(byte) printf_number_buffer::format_zero_padding#19
(byte) printf_number_buffer::format_zero_padding#2
(byte) printf_number_buffer::format_zero_padding#20
(byte) printf_number_buffer::format_zero_padding#21
(byte) printf_number_buffer::format_zero_padding#22
(byte) printf_number_buffer::format_zero_padding#3
(byte) printf_number_buffer::format_zero_padding#4
(byte) printf_number_buffer::format_zero_padding#5
(byte) printf_number_buffer::format_zero_padding#6
(byte) printf_number_buffer::format_zero_padding#7
(byte) printf_number_buffer::format_zero_padding#8
(byte) printf_number_buffer::format_zero_padding#9
(signed byte) printf_number_buffer::len
(signed byte) printf_number_buffer::len#0
(signed byte) printf_number_buffer::len#1
(signed byte) printf_number_buffer::len#2
(signed byte) printf_number_buffer::len#3
(signed byte) printf_number_buffer::padding
(signed byte) printf_number_buffer::padding#0
(signed byte) printf_number_buffer::padding#1
(signed byte) printf_number_buffer::padding#10
(signed byte) printf_number_buffer::padding#11
(signed byte) printf_number_buffer::padding#12
(signed byte) printf_number_buffer::padding#13
(signed byte) printf_number_buffer::padding#14
(signed byte) printf_number_buffer::padding#15
(signed byte) printf_number_buffer::padding#16
(signed byte) printf_number_buffer::padding#17
(signed byte) printf_number_buffer::padding#2
(signed byte) printf_number_buffer::padding#3
(signed byte) printf_number_buffer::padding#4
(signed byte) printf_number_buffer::padding#5
(signed byte) printf_number_buffer::padding#6
(signed byte) printf_number_buffer::padding#7
(signed byte) printf_number_buffer::padding#8
(signed byte) printf_number_buffer::padding#9
(void()) printf_padding((byte) printf_padding::pad , (byte) printf_padding::length)
(bool~) printf_padding::$0
(label) printf_padding::@1
(label) printf_padding::@2
(label) printf_padding::@3
(label) printf_padding::@return
(byte) printf_padding::i
(byte) printf_padding::i#0
(byte) printf_padding::i#1
(byte) printf_padding::i#2
(byte) printf_padding::i#3
(byte) printf_padding::i#4
(byte) printf_padding::length
(byte) printf_padding::length#0
(byte) printf_padding::length#1
(byte) printf_padding::length#2
(byte) printf_padding::length#3
(byte) printf_padding::length#4
(byte) printf_padding::length#5
(byte) printf_padding::length#6
(byte) printf_padding::length#7
(byte) printf_padding::length#8
(byte) printf_padding::pad
(byte) printf_padding::pad#0
(byte) printf_padding::pad#1
(byte) printf_padding::pad#2
(byte) printf_padding::pad#3
(byte) printf_padding::pad#4
(byte) printf_padding::pad#5
(byte) printf_padding::pad#6
(byte) printf_padding::pad#7
(byte) printf_padding::pad#8
(void()) printf_string((byte*) printf_string::str , (byte) printf_string::format_min_length , (byte) printf_string::format_justify_left)
(bool~) printf_string::$0
(bool~) printf_string::$1
(signed byte~) printf_string::$10
(bool~) printf_string::$11
(bool~) printf_string::$12
(signed byte~) printf_string::$13
(bool~) printf_string::$14
(bool~) printf_string::$15
(bool~) printf_string::$2
(bool~) printf_string::$3
(bool~) printf_string::$6
(bool~) printf_string::$7
(word~) printf_string::$9
(label) printf_string::@1
(label) printf_string::@10
(label) printf_string::@2
(label) printf_string::@3
(label) printf_string::@4
(label) printf_string::@5
(label) printf_string::@6
(label) printf_string::@7
(label) printf_string::@8
(label) printf_string::@9
(label) printf_string::@return
(struct printf_format_string) printf_string::format
(byte) printf_string::format_justify_left
(byte) printf_string::format_justify_left#0
(byte) printf_string::format_justify_left#1
(byte) printf_string::format_justify_left#2
(byte) printf_string::format_justify_left#3
(byte) printf_string::format_justify_left#4
(byte) printf_string::format_justify_left#5
(byte) printf_string::format_justify_left#6
(byte) printf_string::format_justify_left#7
(byte) printf_string::format_justify_left#8
(byte) printf_string::format_justify_left#9
(byte) printf_string::format_min_length
(byte) printf_string::format_min_length#0
(byte) printf_string::format_min_length#1
(byte) printf_string::format_min_length#2
(byte) printf_string::format_min_length#3
(signed byte) printf_string::len
(signed byte) printf_string::len#0
(signed byte) printf_string::padding
(signed byte) printf_string::padding#0
(signed byte) printf_string::padding#1
(signed byte) printf_string::padding#2
(signed byte) printf_string::padding#3
(signed byte) printf_string::padding#4
(signed byte) printf_string::padding#5
(signed byte) printf_string::padding#6
(signed byte) printf_string::padding#7
(signed byte) printf_string::padding#8
(byte*) printf_string::str
(byte*) printf_string::str#0
(byte*) printf_string::str#1
(byte*) printf_string::str#2
(byte*) printf_string::str#3
(byte*) printf_string::str#4
(byte*) printf_string::str#5
(byte*) printf_string::str#6
(byte*) printf_string::str#7
(byte*) printf_string::str#8
(void()) printf_uchar((byte) printf_uchar::uvalue , (byte) printf_uchar::format_min_length , (byte) printf_uchar::format_justify_left , (byte) printf_uchar::format_sign_always , (byte) printf_uchar::format_zero_padding , (byte) printf_uchar::format_upper_case , (byte) printf_uchar::format_radix)
(number~) printf_uchar::$0
(byte~) printf_uchar::$1
(number~) printf_uchar::$2
(bool~) printf_uchar::$5
(label) printf_uchar::@1
(label) printf_uchar::@2
(label) printf_uchar::@3
(label) printf_uchar::@4
(label) printf_uchar::@5
(label) printf_uchar::@return
(struct printf_format_number) printf_uchar::format
(byte) printf_uchar::format_justify_left
(byte) printf_uchar::format_justify_left#0
(byte) printf_uchar::format_justify_left#1
(byte) printf_uchar::format_justify_left#2
(byte) printf_uchar::format_justify_left#3
(byte) printf_uchar::format_justify_left#4
(byte) printf_uchar::format_justify_left#5
(byte) printf_uchar::format_justify_left#6
(byte) printf_uchar::format_min_length
(byte) printf_uchar::format_min_length#0
(byte) printf_uchar::format_min_length#1
(byte) printf_uchar::format_min_length#2
(byte) printf_uchar::format_min_length#3
(byte) printf_uchar::format_min_length#4
(byte) printf_uchar::format_min_length#5
(byte) printf_uchar::format_min_length#6
(byte) printf_uchar::format_radix
(byte) printf_uchar::format_radix#0
(byte) printf_uchar::format_radix#1
(byte) printf_uchar::format_radix#2
(byte) printf_uchar::format_radix#3
(byte) printf_uchar::format_radix#4
(byte) printf_uchar::format_radix#5
(byte) printf_uchar::format_radix#6
(byte) printf_uchar::format_sign_always
(byte) printf_uchar::format_sign_always#0
(byte) printf_uchar::format_sign_always#1
(byte) printf_uchar::format_sign_always#2
(byte) printf_uchar::format_sign_always#3
(byte) printf_uchar::format_sign_always#4
(byte) printf_uchar::format_sign_always#5
(byte) printf_uchar::format_sign_always#6
(byte) printf_uchar::format_upper_case
(byte) printf_uchar::format_upper_case#0
(byte) printf_uchar::format_upper_case#1
(byte) printf_uchar::format_upper_case#2
(byte) printf_uchar::format_upper_case#3
(byte) printf_uchar::format_upper_case#4
(byte) printf_uchar::format_upper_case#5
(byte) printf_uchar::format_upper_case#6
(byte) printf_uchar::format_zero_padding
(byte) printf_uchar::format_zero_padding#0
(byte) printf_uchar::format_zero_padding#1
(byte) printf_uchar::format_zero_padding#2
(byte) printf_uchar::format_zero_padding#3
(byte) printf_uchar::format_zero_padding#4
(byte) printf_uchar::format_zero_padding#5
(byte) printf_uchar::format_zero_padding#6
(byte) printf_uchar::uvalue
(byte) printf_uchar::uvalue#0
(byte) printf_uchar::uvalue#1
(byte) printf_uchar::uvalue#2
(byte) printf_uchar::uvalue#3
(byte) printf_uchar::uvalue#4
(byte) printf_uchar::uvalue#5
(void()) printf_uint((word) printf_uint::uvalue , (byte) printf_uint::format_min_length , (byte) printf_uint::format_justify_left , (byte) printf_uint::format_sign_always , (byte) printf_uint::format_zero_padding , (byte) printf_uint::format_upper_case , (byte) printf_uint::format_radix)
(number~) printf_uint::$0
(byte~) printf_uint::$1
(number~) printf_uint::$2
(bool~) printf_uint::$5
(label) printf_uint::@1
(label) printf_uint::@2
(label) printf_uint::@3
(label) printf_uint::@4
(label) printf_uint::@5
(label) printf_uint::@return
(struct printf_format_number) printf_uint::format
(byte) printf_uint::format_justify_left
(byte) printf_uint::format_justify_left#0
(byte) printf_uint::format_justify_left#1
(byte) printf_uint::format_justify_left#2
(byte) printf_uint::format_justify_left#3
(byte) printf_uint::format_justify_left#4
(byte) printf_uint::format_justify_left#5
(byte) printf_uint::format_min_length
(byte) printf_uint::format_min_length#0
(byte) printf_uint::format_min_length#1
(byte) printf_uint::format_min_length#2
(byte) printf_uint::format_min_length#3
(byte) printf_uint::format_min_length#4
(byte) printf_uint::format_min_length#5
(byte) printf_uint::format_radix
(byte) printf_uint::format_radix#0
(byte) printf_uint::format_radix#1
(byte) printf_uint::format_radix#2
(byte) printf_uint::format_radix#3
(byte) printf_uint::format_radix#4
(byte) printf_uint::format_radix#5
(byte) printf_uint::format_sign_always
(byte) printf_uint::format_sign_always#0
(byte) printf_uint::format_sign_always#1
(byte) printf_uint::format_sign_always#2
(byte) printf_uint::format_sign_always#3
(byte) printf_uint::format_sign_always#4
(byte) printf_uint::format_sign_always#5
(byte) printf_uint::format_upper_case
(byte) printf_uint::format_upper_case#0
(byte) printf_uint::format_upper_case#1
(byte) printf_uint::format_upper_case#2
(byte) printf_uint::format_upper_case#3
(byte) printf_uint::format_upper_case#4
(byte) printf_uint::format_upper_case#5
(byte) printf_uint::format_zero_padding
(byte) printf_uint::format_zero_padding#0
(byte) printf_uint::format_zero_padding#1
(byte) printf_uint::format_zero_padding#2
(byte) printf_uint::format_zero_padding#3
(byte) printf_uint::format_zero_padding#4
(byte) printf_uint::format_zero_padding#5
(word) printf_uint::uvalue
(word) printf_uint::uvalue#0
(word) printf_uint::uvalue#1
(word) printf_uint::uvalue#2
(word) printf_uint::uvalue#3
(word) printf_uint::uvalue#4
(void()) printf_ulong((dword) printf_ulong::uvalue , (byte) printf_ulong::format_min_length , (byte) printf_ulong::format_justify_left , (byte) printf_ulong::format_sign_always , (byte) printf_ulong::format_zero_padding , (byte) printf_ulong::format_upper_case , (byte) printf_ulong::format_radix)
(number~) printf_ulong::$0
(byte~) printf_ulong::$1
(number~) printf_ulong::$2
(bool~) printf_ulong::$5
(label) printf_ulong::@1
(label) printf_ulong::@2
(label) printf_ulong::@3
(label) printf_ulong::@4
(label) printf_ulong::@5
(label) printf_ulong::@return
(struct printf_format_number) printf_ulong::format
(byte) printf_ulong::format_justify_left
(byte) printf_ulong::format_justify_left#0
(byte) printf_ulong::format_justify_left#1
(byte) printf_ulong::format_justify_left#2
(byte) printf_ulong::format_justify_left#3
(byte) printf_ulong::format_justify_left#4
(byte) printf_ulong::format_justify_left#5
(byte) printf_ulong::format_justify_left#6
(byte) printf_ulong::format_min_length
(byte) printf_ulong::format_min_length#0
(byte) printf_ulong::format_min_length#1
(byte) printf_ulong::format_min_length#2
(byte) printf_ulong::format_min_length#3
(byte) printf_ulong::format_min_length#4
(byte) printf_ulong::format_min_length#5
(byte) printf_ulong::format_min_length#6
(byte) printf_ulong::format_radix
(byte) printf_ulong::format_radix#0
(byte) printf_ulong::format_radix#1
(byte) printf_ulong::format_radix#2
(byte) printf_ulong::format_radix#3
(byte) printf_ulong::format_radix#4
(byte) printf_ulong::format_radix#5
(byte) printf_ulong::format_radix#6
(byte) printf_ulong::format_sign_always
(byte) printf_ulong::format_sign_always#0
(byte) printf_ulong::format_sign_always#1
(byte) printf_ulong::format_sign_always#2
(byte) printf_ulong::format_sign_always#3
(byte) printf_ulong::format_sign_always#4
(byte) printf_ulong::format_sign_always#5
(byte) printf_ulong::format_sign_always#6
(byte) printf_ulong::format_upper_case
(byte) printf_ulong::format_upper_case#0
(byte) printf_ulong::format_upper_case#1
(byte) printf_ulong::format_upper_case#2
(byte) printf_ulong::format_upper_case#3
(byte) printf_ulong::format_upper_case#4
(byte) printf_ulong::format_upper_case#5
(byte) printf_ulong::format_upper_case#6
(byte) printf_ulong::format_zero_padding
(byte) printf_ulong::format_zero_padding#0
(byte) printf_ulong::format_zero_padding#1
(byte) printf_ulong::format_zero_padding#2
(byte) printf_ulong::format_zero_padding#3
(byte) printf_ulong::format_zero_padding#4
(byte) printf_ulong::format_zero_padding#5
(byte) printf_ulong::format_zero_padding#6
(dword) printf_ulong::uvalue
(dword) printf_ulong::uvalue#0
(dword) printf_ulong::uvalue#1
(dword) printf_ulong::uvalue#2
(dword) printf_ulong::uvalue#3
(dword) printf_ulong::uvalue#4
(dword) printf_ulong::uvalue#5
__stackcall (void()) queen((byte) queen::row)
(bool~) queen::$0
(byte~) queen::$1
(bool~) queen::$2
(bool~) queen::$3
(number~) queen::$4
(bool~) queen::$7
(label) queen::@1
(label) queen::@2
(label) queen::@3
(label) queen::@4
(label) queen::@5
(label) queen::@6
(label) queen::@7
(label) queen::@8
(label) queen::@return
(const byte) queen::OFFSET_STACK_ROW = (byte) 0
(byte) queen::column loadstore
(byte) queen::r loadstore
(byte) queen::row
(byte) queen::row#0
(word()) strlen((byte*) strlen::str)
(bool~) strlen::$0
(label) strlen::@1
(label) strlen::@2
(label) strlen::@3
(label) strlen::@return
(word) strlen::len
(word) strlen::len#0
(word) strlen::len#1
(word) strlen::len#2
(word) strlen::len#3
(word) strlen::len#4
(word) strlen::return
(word) strlen::return#0
(word) strlen::return#1
(word) strlen::return#2
(word) strlen::return#3
(word) strlen::return#4
(word) strlen::return#5
(word) strlen::return#6
(byte*) strlen::str
(byte*) strlen::str#0
(byte*) strlen::str#1
(byte*) strlen::str#2
(byte*) strlen::str#3
(byte*) strlen::str#4
(byte*) strlen::str#5
(byte*()) strupr((byte*) strupr::str)
(byte~) strupr::$0
(bool~) strupr::$1
(label) strupr::@1
(label) strupr::@2
(label) strupr::@3
(label) strupr::@4
(label) strupr::@return
(byte*) strupr::return
(byte*) strupr::return#0
(byte*) strupr::return#1
(byte*) strupr::return#2
(byte*) strupr::return#3
(byte*) strupr::src
(byte*) strupr::src#0
(byte*) strupr::src#1
(byte*) strupr::src#2
(byte*) strupr::src#3
(byte*) strupr::src#4
(byte*) strupr::str
(byte*) strupr::str#0
(byte*) strupr::str#1
(byte*) strupr::str#2
(byte*) strupr::str#3
(byte*) strupr::str#4
(byte*) strupr::str#5
(const byte*) tod_buffer[]  = (byte*) "00:00:00:00"
(void()) tod_init((byte) tod_init::tod_TENTHS , (byte) tod_init::tod_SEC , (byte) tod_init::tod_MIN , (byte) tod_init::tod_HOURS)
(label) tod_init::@return
(struct TIME_OF_DAY) tod_init::tod
(byte) tod_init::tod_HOURS
(byte) tod_init::tod_HOURS#0
(byte) tod_init::tod_HOURS#1
(byte) tod_init::tod_MIN
(byte) tod_init::tod_MIN#0
(byte) tod_init::tod_MIN#1
(byte) tod_init::tod_SEC
(byte) tod_init::tod_SEC#0
(byte) tod_init::tod_SEC#1
(byte) tod_init::tod_TENTHS
(byte) tod_init::tod_TENTHS#0
(byte) tod_init::tod_TENTHS#1
(struct TIME_OF_DAY()) tod_read()
(label) tod_read::@return
(byte) tod_read::hours
(byte) tod_read::hours#0
(byte) tod_read::mins
(byte) tod_read::mins#0
(struct TIME_OF_DAY) tod_read::return
(struct TIME_OF_DAY) tod_read::return#0
(struct TIME_OF_DAY) tod_read::return#1
(byte) tod_read::return_HOURS
(byte) tod_read::return_HOURS#0
(byte) tod_read::return_HOURS#1
(byte) tod_read::return_HOURS#2
(byte) tod_read::return_HOURS#3
(byte) tod_read::return_HOURS#4
(byte) tod_read::return_MIN
(byte) tod_read::return_MIN#0
(byte) tod_read::return_MIN#1
(byte) tod_read::return_MIN#2
(byte) tod_read::return_MIN#3
(byte) tod_read::return_MIN#4
(byte) tod_read::return_SEC
(byte) tod_read::return_SEC#0
(byte) tod_read::return_SEC#1
(byte) tod_read::return_SEC#2
(byte) tod_read::return_SEC#3
(byte) tod_read::return_SEC#4
(byte) tod_read::return_TENTHS
(byte) tod_read::return_TENTHS#0
(byte) tod_read::return_TENTHS#1
(byte) tod_read::return_TENTHS#2
(byte) tod_read::return_TENTHS#3
(byte) tod_read::return_TENTHS#4
(byte) tod_read::secs
(byte) tod_read::secs#0
(byte) tod_read::tenths
(byte) tod_read::tenths#0
(byte) tod_read::tod_HOURS
(byte) tod_read::tod_HOURS#0
(byte) tod_read::tod_MIN
(byte) tod_read::tod_MIN#0
(byte) tod_read::tod_SEC
(byte) tod_read::tod_SEC#0
(byte) tod_read::tod_TENTHS
(byte) tod_read::tod_TENTHS#0
(byte*()) tod_str((byte) tod_str::tod_TENTHS , (byte) tod_str::tod_SEC , (byte) tod_str::tod_MIN , (byte) tod_str::tod_HOURS)
(byte~) tod_str::$0
(byte~) tod_str::$1
(number~) tod_str::$10
(number~) tod_str::$11
(byte~) tod_str::$12
(byte~) tod_str::$13
(number~) tod_str::$14
(number~) tod_str::$15
(number~) tod_str::$2
(number~) tod_str::$3
(byte~) tod_str::$4
(byte~) tod_str::$5
(number~) tod_str::$6
(number~) tod_str::$7
(byte~) tod_str::$8
(byte~) tod_str::$9
(label) tod_str::@return
(byte*) tod_str::return
(byte*) tod_str::return#0
(byte*) tod_str::return#1
(byte*) tod_str::return#2
(byte*) tod_str::return#3
(byte*) tod_str::return#4
(struct TIME_OF_DAY) tod_str::tod
(byte) tod_str::tod_HOURS
(byte) tod_str::tod_HOURS#0
(byte) tod_str::tod_HOURS#1
(byte) tod_str::tod_MIN
(byte) tod_str::tod_MIN#0
(byte) tod_str::tod_MIN#1
(byte) tod_str::tod_SEC
(byte) tod_str::tod_SEC#0
(byte) tod_str::tod_SEC#1
(byte) tod_str::tod_TENTHS
(byte) tod_str::tod_TENTHS#0
(byte) tod_str::tod_TENTHS#1
(byte()) toupper((byte) toupper::ch)
(bool~) toupper::$0
(bool~) toupper::$1
(bool~) toupper::$2
(byte~) toupper::$3
(label) toupper::@1
(label) toupper::@2
(label) toupper::@return
(byte) toupper::ch
(byte) toupper::ch#0
(byte) toupper::ch#1
(byte) toupper::ch#2
(byte) toupper::ch#3
(byte) toupper::return
(byte) toupper::return#0
(byte) toupper::return#1
(byte) toupper::return#2
(byte) toupper::return#3
(byte) toupper::return#4
(byte) toupper::return#5
(void()) uctoa((byte) uctoa::value , (byte*) uctoa::buffer , (byte) uctoa::radix)
(bool~) uctoa::$0
(bool~) uctoa::$1
(byte~) uctoa::$10
(bool~) uctoa::$2
(bool~) uctoa::$3
(number~) uctoa::$4
(bool~) uctoa::$5
(bool~) uctoa::$6
(bool~) uctoa::$7
(bool~) uctoa::$8
(byte~) uctoa::$9
(label) uctoa::@1
(label) uctoa::@10
(label) uctoa::@11
(label) uctoa::@12
(label) uctoa::@13
(label) uctoa::@14
(label) uctoa::@15
(label) uctoa::@2
(label) uctoa::@3
(label) uctoa::@4
(label) uctoa::@5
(label) uctoa::@6
(label) uctoa::@7
(label) uctoa::@8
(label) uctoa::@9
(label) uctoa::@return
(byte*) uctoa::buffer
(byte*) uctoa::buffer#0
(byte*) uctoa::buffer#1
(byte*) uctoa::buffer#10
(byte*) uctoa::buffer#11
(byte*) uctoa::buffer#12
(byte*) uctoa::buffer#13
(byte*) uctoa::buffer#14
(byte*) uctoa::buffer#15
(byte*) uctoa::buffer#16
(byte*) uctoa::buffer#17
(byte*) uctoa::buffer#18
(byte*) uctoa::buffer#19
(byte*) uctoa::buffer#2
(byte*) uctoa::buffer#20
(byte*) uctoa::buffer#21
(byte*) uctoa::buffer#3
(byte*) uctoa::buffer#4
(byte*) uctoa::buffer#5
(byte*) uctoa::buffer#6
(byte*) uctoa::buffer#7
(byte*) uctoa::buffer#8
(byte*) uctoa::buffer#9
(byte) uctoa::digit
(byte) uctoa::digit#0
(byte) uctoa::digit#1
(byte) uctoa::digit#2
(byte) uctoa::digit#3
(byte) uctoa::digit#4
(byte) uctoa::digit#5
(byte) uctoa::digit#6
(byte) uctoa::digit_value
(byte) uctoa::digit_value#0
(byte) uctoa::digit_value#1
(byte*) uctoa::digit_values
(byte*) uctoa::digit_values#0
(byte*) uctoa::digit_values#1
(byte*) uctoa::digit_values#10
(byte*) uctoa::digit_values#2
(byte*) uctoa::digit_values#3
(byte*) uctoa::digit_values#4
(byte*) uctoa::digit_values#5
(byte*) uctoa::digit_values#6
(byte*) uctoa::digit_values#7
(byte*) uctoa::digit_values#8
(byte*) uctoa::digit_values#9
(byte) uctoa::max_digits
(byte) uctoa::max_digits#0
(byte) uctoa::max_digits#1
(byte) uctoa::max_digits#10
(byte) uctoa::max_digits#2
(byte) uctoa::max_digits#3
(byte) uctoa::max_digits#4
(byte) uctoa::max_digits#5
(byte) uctoa::max_digits#6
(byte) uctoa::max_digits#7
(byte) uctoa::max_digits#8
(byte) uctoa::max_digits#9
(byte) uctoa::radix
(byte) uctoa::radix#0
(byte) uctoa::radix#1
(byte) uctoa::radix#2
(byte) uctoa::radix#3
(byte) uctoa::radix#4
(byte) uctoa::started
(byte) uctoa::started#0
(byte) uctoa::started#1
(byte) uctoa::started#2
(byte) uctoa::started#3
(byte) uctoa::started#4
(byte) uctoa::value
(byte) uctoa::value#0
(byte) uctoa::value#1
(byte) uctoa::value#10
(byte) uctoa::value#11
(byte) uctoa::value#12
(byte) uctoa::value#13
(byte) uctoa::value#14
(byte) uctoa::value#15
(byte) uctoa::value#2
(byte) uctoa::value#3
(byte) uctoa::value#4
(byte) uctoa::value#5
(byte) uctoa::value#6
(byte) uctoa::value#7
(byte) uctoa::value#8
(byte) uctoa::value#9
(byte()) uctoa_append((byte*) uctoa_append::buffer , (byte) uctoa_append::value , (byte) uctoa_append::sub)
(bool~) uctoa_append::$0
(label) uctoa_append::@1
(label) uctoa_append::@2
(label) uctoa_append::@3
(label) uctoa_append::@return
(byte*) uctoa_append::buffer
(byte*) uctoa_append::buffer#0
(byte*) uctoa_append::buffer#1
(byte*) uctoa_append::buffer#2
(byte*) uctoa_append::buffer#3
(byte*) uctoa_append::buffer#4
(byte) uctoa_append::digit
(byte) uctoa_append::digit#0
(byte) uctoa_append::digit#1
(byte) uctoa_append::digit#2
(byte) uctoa_append::digit#3
(byte) uctoa_append::digit#4
(byte) uctoa_append::return
(byte) uctoa_append::return#0
(byte) uctoa_append::return#1
(byte) uctoa_append::return#2
(byte) uctoa_append::return#3
(byte) uctoa_append::return#4
(byte) uctoa_append::sub
(byte) uctoa_append::sub#0
(byte) uctoa_append::sub#1
(byte) uctoa_append::sub#2
(byte) uctoa_append::sub#3
(byte) uctoa_append::value
(byte) uctoa_append::value#0
(byte) uctoa_append::value#1
(byte) uctoa_append::value#2
(byte) uctoa_append::value#3
(byte) uctoa_append::value#4
(byte) uctoa_append::value#5
(void()) ultoa((dword) ultoa::value , (byte*) ultoa::buffer , (byte) ultoa::radix)
(bool~) ultoa::$0
(bool~) ultoa::$1
(byte~) ultoa::$10
(byte~) ultoa::$11
(bool~) ultoa::$2
(bool~) ultoa::$3
(number~) ultoa::$4
(bool~) ultoa::$5
(bool~) ultoa::$6
(bool~) ultoa::$7
(bool~) ultoa::$8
(dword~) ultoa::$9
(label) ultoa::@1
(label) ultoa::@10
(label) ultoa::@11
(label) ultoa::@12
(label) ultoa::@13
(label) ultoa::@14
(label) ultoa::@15
(label) ultoa::@2
(label) ultoa::@3
(label) ultoa::@4
(label) ultoa::@5
(label) ultoa::@6
(label) ultoa::@7
(label) ultoa::@8
(label) ultoa::@9
(label) ultoa::@return
(byte*) ultoa::buffer
(byte*) ultoa::buffer#0
(byte*) ultoa::buffer#1
(byte*) ultoa::buffer#10
(byte*) ultoa::buffer#11
(byte*) ultoa::buffer#12
(byte*) ultoa::buffer#13
(byte*) ultoa::buffer#14
(byte*) ultoa::buffer#15
(byte*) ultoa::buffer#16
(byte*) ultoa::buffer#17
(byte*) ultoa::buffer#18
(byte*) ultoa::buffer#19
(byte*) ultoa::buffer#2
(byte*) ultoa::buffer#20
(byte*) ultoa::buffer#21
(byte*) ultoa::buffer#3
(byte*) ultoa::buffer#4
(byte*) ultoa::buffer#5
(byte*) ultoa::buffer#6
(byte*) ultoa::buffer#7
(byte*) ultoa::buffer#8
(byte*) ultoa::buffer#9
(byte) ultoa::digit
(byte) ultoa::digit#0
(byte) ultoa::digit#1
(byte) ultoa::digit#2
(byte) ultoa::digit#3
(byte) ultoa::digit#4
(byte) ultoa::digit#5
(byte) ultoa::digit#6
(dword) ultoa::digit_value
(dword) ultoa::digit_value#0
(dword) ultoa::digit_value#1
(dword*) ultoa::digit_values
(dword*) ultoa::digit_values#0
(dword*) ultoa::digit_values#1
(dword*) ultoa::digit_values#10
(dword*) ultoa::digit_values#2
(dword*) ultoa::digit_values#3
(dword*) ultoa::digit_values#4
(dword*) ultoa::digit_values#5
(dword*) ultoa::digit_values#6
(dword*) ultoa::digit_values#7
(dword*) ultoa::digit_values#8
(dword*) ultoa::digit_values#9
(byte) ultoa::max_digits
(byte) ultoa::max_digits#0
(byte) ultoa::max_digits#1
(byte) ultoa::max_digits#10
(byte) ultoa::max_digits#2
(byte) ultoa::max_digits#3
(byte) ultoa::max_digits#4
(byte) ultoa::max_digits#5
(byte) ultoa::max_digits#6
(byte) ultoa::max_digits#7
(byte) ultoa::max_digits#8
(byte) ultoa::max_digits#9
(byte) ultoa::radix
(byte) ultoa::radix#0
(byte) ultoa::radix#1
(byte) ultoa::radix#2
(byte) ultoa::radix#3
(byte) ultoa::radix#4
(byte) ultoa::started
(byte) ultoa::started#0
(byte) ultoa::started#1
(byte) ultoa::started#2
(byte) ultoa::started#3
(byte) ultoa::started#4
(dword) ultoa::value
(dword) ultoa::value#0
(dword) ultoa::value#1
(dword) ultoa::value#10
(dword) ultoa::value#11
(dword) ultoa::value#12
(dword) ultoa::value#13
(dword) ultoa::value#14
(dword) ultoa::value#15
(dword) ultoa::value#2
(dword) ultoa::value#3
(dword) ultoa::value#4
(dword) ultoa::value#5
(dword) ultoa::value#6
(dword) ultoa::value#7
(dword) ultoa::value#8
(dword) ultoa::value#9
(dword()) ultoa_append((byte*) ultoa_append::buffer , (dword) ultoa_append::value , (dword) ultoa_append::sub)
(bool~) ultoa_append::$0
(label) ultoa_append::@1
(label) ultoa_append::@2
(label) ultoa_append::@3
(label) ultoa_append::@return
(byte*) ultoa_append::buffer
(byte*) ultoa_append::buffer#0
(byte*) ultoa_append::buffer#1
(byte*) ultoa_append::buffer#2
(byte*) ultoa_append::buffer#3
(byte*) ultoa_append::buffer#4
(byte) ultoa_append::digit
(byte) ultoa_append::digit#0
(byte) ultoa_append::digit#1
(byte) ultoa_append::digit#2
(byte) ultoa_append::digit#3
(byte) ultoa_append::digit#4
(dword) ultoa_append::return
(dword) ultoa_append::return#0
(dword) ultoa_append::return#1
(dword) ultoa_append::return#2
(dword) ultoa_append::return#3
(dword) ultoa_append::return#4
(dword) ultoa_append::sub
(dword) ultoa_append::sub#0
(dword) ultoa_append::sub#1
(dword) ultoa_append::sub#2
(dword) ultoa_append::sub#3
(dword) ultoa_append::value
(dword) ultoa_append::value#0
(dword) ultoa_append::value#1
(dword) ultoa_append::value#2
(dword) ultoa_append::value#3
(dword) ultoa_append::value#4
(dword) ultoa_append::value#5
(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
(bool~) utoa::$0
(bool~) utoa::$1
(byte~) utoa::$10
(byte~) utoa::$11
(bool~) utoa::$2
(bool~) utoa::$3
(number~) utoa::$4
(bool~) utoa::$5
(bool~) utoa::$6
(bool~) utoa::$7
(bool~) utoa::$8
(word~) utoa::$9
(label) utoa::@1
(label) utoa::@10
(label) utoa::@11
(label) utoa::@12
(label) utoa::@13
(label) utoa::@14
(label) utoa::@15
(label) utoa::@2
(label) utoa::@3
(label) utoa::@4
(label) utoa::@5
(label) utoa::@6
(label) utoa::@7
(label) utoa::@8
(label) utoa::@9
(label) utoa::@return
(byte*) utoa::buffer
(byte*) utoa::buffer#0
(byte*) utoa::buffer#1
(byte*) utoa::buffer#10
(byte*) utoa::buffer#11
(byte*) utoa::buffer#12
(byte*) utoa::buffer#13
(byte*) utoa::buffer#14
(byte*) utoa::buffer#15
(byte*) utoa::buffer#16
(byte*) utoa::buffer#17
(byte*) utoa::buffer#18
(byte*) utoa::buffer#19
(byte*) utoa::buffer#2
(byte*) utoa::buffer#20
(byte*) utoa::buffer#21
(byte*) utoa::buffer#3
(byte*) utoa::buffer#4
(byte*) utoa::buffer#5
(byte*) utoa::buffer#6
(byte*) utoa::buffer#7
(byte*) utoa::buffer#8
(byte*) utoa::buffer#9
(byte) utoa::digit
(byte) utoa::digit#0
(byte) utoa::digit#1
(byte) utoa::digit#2
(byte) utoa::digit#3
(byte) utoa::digit#4
(byte) utoa::digit#5
(byte) utoa::digit#6
(word) utoa::digit_value
(word) utoa::digit_value#0
(word) utoa::digit_value#1
(word*) utoa::digit_values
(word*) utoa::digit_values#0
(word*) utoa::digit_values#1
(word*) utoa::digit_values#10
(word*) utoa::digit_values#2
(word*) utoa::digit_values#3
(word*) utoa::digit_values#4
(word*) utoa::digit_values#5
(word*) utoa::digit_values#6
(word*) utoa::digit_values#7
(word*) utoa::digit_values#8
(word*) utoa::digit_values#9
(byte) utoa::max_digits
(byte) utoa::max_digits#0
(byte) utoa::max_digits#1
(byte) utoa::max_digits#10
(byte) utoa::max_digits#2
(byte) utoa::max_digits#3
(byte) utoa::max_digits#4
(byte) utoa::max_digits#5
(byte) utoa::max_digits#6
(byte) utoa::max_digits#7
(byte) utoa::max_digits#8
(byte) utoa::max_digits#9
(byte) utoa::radix
(byte) utoa::radix#0
(byte) utoa::radix#1
(byte) utoa::radix#2
(byte) utoa::radix#3
(byte) utoa::radix#4
(byte) utoa::started
(byte) utoa::started#0
(byte) utoa::started#1
(byte) utoa::started#2
(byte) utoa::started#3
(byte) utoa::started#4
(word) utoa::value
(word) utoa::value#0
(word) utoa::value#1
(word) utoa::value#10
(word) utoa::value#11
(word) utoa::value#12
(word) utoa::value#13
(word) utoa::value#14
(word) utoa::value#15
(word) utoa::value#2
(word) utoa::value#3
(word) utoa::value#4
(word) utoa::value#5
(word) utoa::value#6
(word) utoa::value#7
(word) utoa::value#8
(word) utoa::value#9
(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
(bool~) utoa_append::$0
(label) utoa_append::@1
(label) utoa_append::@2
(label) utoa_append::@3
(label) utoa_append::@return
(byte*) utoa_append::buffer
(byte*) utoa_append::buffer#0
(byte*) utoa_append::buffer#1
(byte*) utoa_append::buffer#2
(byte*) utoa_append::buffer#3
(byte*) utoa_append::buffer#4
(byte) utoa_append::digit
(byte) utoa_append::digit#0
(byte) utoa_append::digit#1
(byte) utoa_append::digit#2
(byte) utoa_append::digit#3
(byte) utoa_append::digit#4
(word) utoa_append::return
(word) utoa_append::return#0
(word) utoa_append::return#1
(word) utoa_append::return#2
(word) utoa_append::return#3
(word) utoa_append::return#4
(word) utoa_append::sub
(word) utoa_append::sub#0
(word) utoa_append::sub#1
(word) utoa_append::sub#2
(word) utoa_append::sub#3
(word) utoa_append::value
(word) utoa_append::value#0
(word) utoa_append::value#1
(word) utoa_append::value#2
(word) utoa_append::value#3
(word) utoa_append::value#4
(word) utoa_append::value#5

Adding number conversion cast (unumber) 0 in (bool~) memset::$0 ← (word) memset::num#2 > (number) 0
Adding number conversion cast (unumber) 0 in (bool~) strupr::$1 ← (number) 0 != *((byte*) strupr::src#2)
Adding number conversion cast (unumber) 0 in (bool~) strlen::$0 ← (number) 0 != *((byte*) strlen::str#3)
Adding number conversion cast (unumber) 3 in (byte) uctoa::max_digits#1 ← (number) 3
Adding number conversion cast (unumber) 2 in (byte) uctoa::max_digits#2 ← (number) 2
Adding number conversion cast (unumber) 3 in (byte) uctoa::max_digits#3 ← (number) 3
Adding number conversion cast (unumber) 8 in (byte) uctoa::max_digits#4 ← (number) 8
Adding number conversion cast (unumber) 0 in *((byte*) uctoa::buffer#2) ← (number) 0
Adding number conversion cast (unumber) 1 in (number~) uctoa::$4 ← (byte) uctoa::max_digits#5 - (number) 1
Adding number conversion cast (unumber) uctoa::$4 in (number~) uctoa::$4 ← (byte) uctoa::max_digits#5 - (unumber)(number) 1
Adding number conversion cast (unumber) 0 in *((byte*) uctoa::buffer#3) ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) uctoa::started#1 ← (number) 1
Adding number conversion cast (unumber) 5 in (byte) utoa::max_digits#1 ← (number) 5
Adding number conversion cast (unumber) 4 in (byte) utoa::max_digits#2 ← (number) 4
Adding number conversion cast (unumber) 6 in (byte) utoa::max_digits#3 ← (number) 6
Adding number conversion cast (unumber) $10 in (byte) utoa::max_digits#4 ← (number) $10
Adding number conversion cast (unumber) 0 in *((byte*) utoa::buffer#2) ← (number) 0
Adding number conversion cast (unumber) 1 in (number~) utoa::$4 ← (byte) utoa::max_digits#5 - (number) 1
Adding number conversion cast (unumber) utoa::$4 in (number~) utoa::$4 ← (byte) utoa::max_digits#5 - (unumber)(number) 1
Adding number conversion cast (unumber) 0 in *((byte*) utoa::buffer#3) ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) utoa::started#1 ← (number) 1
Adding number conversion cast (unumber) $a in (byte) ultoa::max_digits#1 ← (number) $a
Adding number conversion cast (unumber) 8 in (byte) ultoa::max_digits#2 ← (number) 8
Adding number conversion cast (unumber) $b in (byte) ultoa::max_digits#3 ← (number) $b
Adding number conversion cast (unumber) $20 in (byte) ultoa::max_digits#4 ← (number) $20
Adding number conversion cast (unumber) 0 in *((byte*) ultoa::buffer#2) ← (number) 0
Adding number conversion cast (unumber) 1 in (number~) ultoa::$4 ← (byte) ultoa::max_digits#5 - (number) 1
Adding number conversion cast (unumber) ultoa::$4 in (number~) ultoa::$4 ← (byte) ultoa::max_digits#5 - (unumber)(number) 1
Adding number conversion cast (unumber) 0 in *((byte*) ultoa::buffer#3) ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) ultoa::started#1 ← (number) 1
Adding number conversion cast (unumber) $19 in (bool~) clrscr::$0 ← (byte) clrscr::l#2 < (number) $19
Adding number conversion cast (unumber) 0 in (byte) conio_cursor_x ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) conio_cursor_y ← (number) 0
Adding number conversion cast (unumber) $28 in (bool~) clrscr::$1 ← (byte) clrscr::c#2 < (number) $28
Adding number conversion cast (unumber) $28 in (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#3 + (number) $28
Adding number conversion cast (unumber) $28 in (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#3 + (number) $28
Adding number conversion cast (unumber) $19 in (bool~) gotoxy::$0 ← (byte) gotoxy::y#3 > (number) $19
Adding number conversion cast (unumber) $28 in (bool~) gotoxy::$2 ← (byte) gotoxy::x#3 >= (number) $28
Adding number conversion cast (unumber) 0 in (byte) gotoxy::y#0 ← (number) 0
Adding number conversion cast (unumber) $28 in (number~) gotoxy::$4 ← (word~) gotoxy::$7 * (number) $28
Adding number conversion cast (unumber) gotoxy::$4 in (number~) gotoxy::$4 ← (word~) gotoxy::$7 * (unumber)(number) $28
Adding number conversion cast (unumber) 0 in (byte) gotoxy::x#0 ← (number) 0
Adding number conversion cast (unumber) $28 in (bool~) cputc::$1 ← (byte) conio_cursor_x == (number) $28
Adding number conversion cast (unumber) $28 in (byte*) conio_line_text ← (byte*) conio_line_text + (number) $28
Adding number conversion cast (unumber) $28 in (byte*) conio_line_color ← (byte*) conio_line_color + (number) $28
Adding number conversion cast (unumber) 0 in (byte) conio_cursor_x ← (number) 0
Adding number conversion cast (unumber) $19 in (bool~) cscroll::$0 ← (byte) conio_cursor_y == (number) $19
Adding number conversion cast (unumber) 0 in (bool~) cscroll::$7 ← (number) 0 != (byte) conio_scroll_enable
Adding number conversion cast (unumber) $28 in (void*) memcpy::source#0 ← (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(number) $28
Adding number conversion cast (unumber) $19*$28-$28 in (word) memcpy::num#0 ← (number) $19*(number) $28-(number) $28
Adding number conversion cast (unumber) $28 in (void*) memcpy::source#1 ← (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(number) $28
Adding number conversion cast (unumber) $19*$28-$28 in (word) memcpy::num#1 ← (number) $19*(number) $28-(number) $28
Adding number conversion cast (unumber) $28 in (void*) memset::str#0 ← (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(number) $19*(number) $28-(number) $28
Adding number conversion cast (unumber) $19*$28 in (void*) memset::str#0 ← (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(number) $19*(number) $28-(unumber)(number) $28
Adding number conversion cast (unumber) $28 in (word) memset::num#0 ← (number) $28
Adding number conversion cast (unumber) $28 in (void*) memset::str#1 ← (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(number) $19*(number) $28-(number) $28
Adding number conversion cast (unumber) $19*$28 in (void*) memset::str#1 ← (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(number) $19*(number) $28-(unumber)(number) $28
Adding number conversion cast (unumber) $28 in (word) memset::num#1 ← (number) $28
Adding number conversion cast (unumber) $28 in (byte*) conio_line_text ← (byte*) conio_line_text - (number) $28
Adding number conversion cast (unumber) $28 in (byte*) conio_line_color ← (byte*) conio_line_color - (number) $28
Adding number conversion cast (unumber) 0 in (byte) gotoxy::x#1 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) gotoxy::y#1 ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) cputs::$2 ← (number) 0 != (byte~) cputs::$0
Adding number conversion cast (unumber) 0 in (bool~) printf_ulong::$5 ← (number) 0 != (byte) printf_ulong::format_sign_always#2
Adding number conversion cast (unumber) printf_ulong::$2 in (byte) printf_ulong::format_upper_case#3 ← phi( printf_ulong::@1/(byte) printf_ulong::format_upper_case#4 printf_ulong::@2/(byte) printf_ulong::format_upper_case#5 )
  (byte) printf_ulong::format_zero_padding#3 ← phi( printf_ulong::@1/(byte) printf_ulong::format_zero_padding#4 printf_ulong::@2/(byte) printf_ulong::format_zero_padding#5 )
  (byte) printf_ulong::format_sign_always#4 ← phi( printf_ulong::@1/(byte) printf_ulong::format_sign_always#5 printf_ulong::@2/(byte) printf_ulong::format_sign_always#6 )
  (byte) printf_ulong::format_justify_left#3 ← phi( printf_ulong::@1/(byte) printf_ulong::format_justify_left#4 printf_ulong::@2/(byte) printf_ulong::format_justify_left#5 )
  (byte) printf_ulong::format_min_length#3 ← phi( printf_ulong::@1/(byte) printf_ulong::format_min_length#4 printf_ulong::@2/(byte) printf_ulong::format_min_length#5 )
  (byte) printf_ulong::format_radix#2 ← phi( printf_ulong::@1/(byte) printf_ulong::format_radix#4 printf_ulong::@2/(byte) printf_ulong::format_radix#5 )
  (dword) printf_ulong::uvalue#2 ← phi( printf_ulong::@1/(dword) printf_ulong::uvalue#3 printf_ulong::@2/(dword) printf_ulong::uvalue#4 )
  (number~) printf_ulong::$2 ← phi( printf_ulong::@1/(byte~) printf_ulong::$1 printf_ulong::@2/(number~) printf_ulong::$0 )
Adding number conversion cast (unumber) printf_ulong::$0 in (byte) printf_ulong::format_upper_case#3 ← phi( printf_ulong::@1/(byte) printf_ulong::format_upper_case#4 printf_ulong::@2/(byte) printf_ulong::format_upper_case#5 )
  (byte) printf_ulong::format_zero_padding#3 ← phi( printf_ulong::@1/(byte) printf_ulong::format_zero_padding#4 printf_ulong::@2/(byte) printf_ulong::format_zero_padding#5 )
  (byte) printf_ulong::format_sign_always#4 ← phi( printf_ulong::@1/(byte) printf_ulong::format_sign_always#5 printf_ulong::@2/(byte) printf_ulong::format_sign_always#6 )
  (byte) printf_ulong::format_justify_left#3 ← phi( printf_ulong::@1/(byte) printf_ulong::format_justify_left#4 printf_ulong::@2/(byte) printf_ulong::format_justify_left#5 )
  (byte) printf_ulong::format_min_length#3 ← phi( printf_ulong::@1/(byte) printf_ulong::format_min_length#4 printf_ulong::@2/(byte) printf_ulong::format_min_length#5 )
  (byte) printf_ulong::format_radix#2 ← phi( printf_ulong::@1/(byte) printf_ulong::format_radix#4 printf_ulong::@2/(byte) printf_ulong::format_radix#5 )
  (dword) printf_ulong::uvalue#2 ← phi( printf_ulong::@1/(dword) printf_ulong::uvalue#3 printf_ulong::@2/(dword) printf_ulong::uvalue#4 )
  (unumber~) printf_ulong::$2 ← phi( printf_ulong::@1/(byte~) printf_ulong::$1 printf_ulong::@2/(number~) printf_ulong::$0 )
Adding number conversion cast (unumber) 0 in (bool~) printf_uint::$5 ← (number) 0 != (byte) printf_uint::format_sign_always#1
Adding number conversion cast (unumber) printf_uint::$2 in (byte) printf_uint::format_upper_case#2 ← phi( printf_uint::@1/(byte) printf_uint::format_upper_case#3 printf_uint::@2/(byte) printf_uint::format_upper_case#4 )
  (byte) printf_uint::format_zero_padding#2 ← phi( printf_uint::@1/(byte) printf_uint::format_zero_padding#3 printf_uint::@2/(byte) printf_uint::format_zero_padding#4 )
  (byte) printf_uint::format_sign_always#3 ← phi( printf_uint::@1/(byte) printf_uint::format_sign_always#4 printf_uint::@2/(byte) printf_uint::format_sign_always#5 )
  (byte) printf_uint::format_justify_left#2 ← phi( printf_uint::@1/(byte) printf_uint::format_justify_left#3 printf_uint::@2/(byte) printf_uint::format_justify_left#4 )
  (byte) printf_uint::format_min_length#2 ← phi( printf_uint::@1/(byte) printf_uint::format_min_length#3 printf_uint::@2/(byte) printf_uint::format_min_length#4 )
  (byte) printf_uint::format_radix#1 ← phi( printf_uint::@1/(byte) printf_uint::format_radix#3 printf_uint::@2/(byte) printf_uint::format_radix#4 )
  (word) printf_uint::uvalue#1 ← phi( printf_uint::@1/(word) printf_uint::uvalue#2 printf_uint::@2/(word) printf_uint::uvalue#3 )
  (number~) printf_uint::$2 ← phi( printf_uint::@1/(byte~) printf_uint::$1 printf_uint::@2/(number~) printf_uint::$0 )
Adding number conversion cast (unumber) printf_uint::$0 in (byte) printf_uint::format_upper_case#2 ← phi( printf_uint::@1/(byte) printf_uint::format_upper_case#3 printf_uint::@2/(byte) printf_uint::format_upper_case#4 )
  (byte) printf_uint::format_zero_padding#2 ← phi( printf_uint::@1/(byte) printf_uint::format_zero_padding#3 printf_uint::@2/(byte) printf_uint::format_zero_padding#4 )
  (byte) printf_uint::format_sign_always#3 ← phi( printf_uint::@1/(byte) printf_uint::format_sign_always#4 printf_uint::@2/(byte) printf_uint::format_sign_always#5 )
  (byte) printf_uint::format_justify_left#2 ← phi( printf_uint::@1/(byte) printf_uint::format_justify_left#3 printf_uint::@2/(byte) printf_uint::format_justify_left#4 )
  (byte) printf_uint::format_min_length#2 ← phi( printf_uint::@1/(byte) printf_uint::format_min_length#3 printf_uint::@2/(byte) printf_uint::format_min_length#4 )
  (byte) printf_uint::format_radix#1 ← phi( printf_uint::@1/(byte) printf_uint::format_radix#3 printf_uint::@2/(byte) printf_uint::format_radix#4 )
  (word) printf_uint::uvalue#1 ← phi( printf_uint::@1/(word) printf_uint::uvalue#2 printf_uint::@2/(word) printf_uint::uvalue#3 )
  (unumber~) printf_uint::$2 ← phi( printf_uint::@1/(byte~) printf_uint::$1 printf_uint::@2/(number~) printf_uint::$0 )
Adding number conversion cast (unumber) 0 in (bool~) printf_uchar::$5 ← (number) 0 != (byte) printf_uchar::format_sign_always#2
Adding number conversion cast (unumber) printf_uchar::$2 in (byte) printf_uchar::format_upper_case#3 ← phi( printf_uchar::@1/(byte) printf_uchar::format_upper_case#4 printf_uchar::@2/(byte) printf_uchar::format_upper_case#5 )
  (byte) printf_uchar::format_zero_padding#3 ← phi( printf_uchar::@1/(byte) printf_uchar::format_zero_padding#4 printf_uchar::@2/(byte) printf_uchar::format_zero_padding#5 )
  (byte) printf_uchar::format_sign_always#4 ← phi( printf_uchar::@1/(byte) printf_uchar::format_sign_always#5 printf_uchar::@2/(byte) printf_uchar::format_sign_always#6 )
  (byte) printf_uchar::format_justify_left#3 ← phi( printf_uchar::@1/(byte) printf_uchar::format_justify_left#4 printf_uchar::@2/(byte) printf_uchar::format_justify_left#5 )
  (byte) printf_uchar::format_min_length#3 ← phi( printf_uchar::@1/(byte) printf_uchar::format_min_length#4 printf_uchar::@2/(byte) printf_uchar::format_min_length#5 )
  (byte) printf_uchar::format_radix#2 ← phi( printf_uchar::@1/(byte) printf_uchar::format_radix#4 printf_uchar::@2/(byte) printf_uchar::format_radix#5 )
  (byte) printf_uchar::uvalue#2 ← phi( printf_uchar::@1/(byte) printf_uchar::uvalue#3 printf_uchar::@2/(byte) printf_uchar::uvalue#4 )
  (number~) printf_uchar::$2 ← phi( printf_uchar::@1/(byte~) printf_uchar::$1 printf_uchar::@2/(number~) printf_uchar::$0 )
Adding number conversion cast (unumber) printf_uchar::$0 in (byte) printf_uchar::format_upper_case#3 ← phi( printf_uchar::@1/(byte) printf_uchar::format_upper_case#4 printf_uchar::@2/(byte) printf_uchar::format_upper_case#5 )
  (byte) printf_uchar::format_zero_padding#3 ← phi( printf_uchar::@1/(byte) printf_uchar::format_zero_padding#4 printf_uchar::@2/(byte) printf_uchar::format_zero_padding#5 )
  (byte) printf_uchar::format_sign_always#4 ← phi( printf_uchar::@1/(byte) printf_uchar::format_sign_always#5 printf_uchar::@2/(byte) printf_uchar::format_sign_always#6 )
  (byte) printf_uchar::format_justify_left#3 ← phi( printf_uchar::@1/(byte) printf_uchar::format_justify_left#4 printf_uchar::@2/(byte) printf_uchar::format_justify_left#5 )
  (byte) printf_uchar::format_min_length#3 ← phi( printf_uchar::@1/(byte) printf_uchar::format_min_length#4 printf_uchar::@2/(byte) printf_uchar::format_min_length#5 )
  (byte) printf_uchar::format_radix#2 ← phi( printf_uchar::@1/(byte) printf_uchar::format_radix#4 printf_uchar::@2/(byte) printf_uchar::format_radix#5 )
  (byte) printf_uchar::uvalue#2 ← phi( printf_uchar::@1/(byte) printf_uchar::uvalue#3 printf_uchar::@2/(byte) printf_uchar::uvalue#4 )
  (unumber~) printf_uchar::$2 ← phi( printf_uchar::@1/(byte~) printf_uchar::$1 printf_uchar::@2/(number~) printf_uchar::$0 )
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$26 ← (number) 0 != (byte) printf_number_buffer::format_min_length#3
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$27 ← (number) 0 != (byte) printf_number_buffer::format_justify_left#3
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$28 ← (number) 0 != (byte) printf_number_buffer::format_zero_padding#3
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$29 ← (number) 0 != (byte) printf_number_buffer::buffer_sign#3
Adding number conversion cast (snumber) 0 in (bool~) printf_number_buffer::$22 ← (signed byte) printf_number_buffer::padding#1 < (number) 0
Adding number conversion cast (snumber) 0 in (signed byte) printf_number_buffer::padding#2 ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$30 ← (number) 0 != (byte) printf_number_buffer::buffer_sign#4
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$31 ← (number) 0 != (byte) printf_number_buffer::format_upper_case#3
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$32 ← (number) 0 != (byte) printf_number_buffer::format_zero_padding#5
Adding number conversion cast (unumber) 0 in (bool~) printf_string::$14 ← (number) 0 != (byte) printf_string::format_min_length#1
Adding number conversion cast (unumber) 0 in (bool~) printf_string::$15 ← (number) 0 != (byte) printf_string::format_justify_left#1
Adding number conversion cast (snumber) 0 in (bool~) printf_string::$11 ← (signed byte) printf_string::padding#1 < (number) 0
Adding number conversion cast (snumber) 0 in (signed byte) printf_string::padding#2 ← (number) 0
Adding number conversion cast (unumber) $80 in *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) | (number) $80
Adding number conversion cast (unumber) $7f in *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) & (number) $7f
Adding number conversion cast (unumber) 4 in (byte~) tod_str::$0 ← (byte) tod_str::tod_HOURS#1 >> (number) 4
Adding number conversion cast (unumber) 0 in *((const byte*) tod_buffer + (number) 0) ← (byte~) tod_str::$1
Adding number conversion cast (unumber) $f in (number~) tod_str::$2 ← (byte) tod_str::tod_HOURS#1 & (number) $f
Adding number conversion cast (unumber) tod_str::$2 in (number~) tod_str::$2 ← (byte) tod_str::tod_HOURS#1 & (unumber)(number) $f
Adding number conversion cast (unumber) tod_str::$3 in (number~) tod_str::$3 ← (byte) '0' + (unumber~) tod_str::$2
Adding number conversion cast (unumber) 1 in *((const byte*) tod_buffer + (number) 1) ← (unumber~) tod_str::$3
Adding number conversion cast (unumber) 4 in (byte~) tod_str::$4 ← (byte) tod_str::tod_MIN#1 >> (number) 4
Adding number conversion cast (unumber) 3 in *((const byte*) tod_buffer + (number) 3) ← (byte~) tod_str::$5
Adding number conversion cast (unumber) $f in (number~) tod_str::$6 ← (byte) tod_str::tod_MIN#1 & (number) $f
Adding number conversion cast (unumber) tod_str::$6 in (number~) tod_str::$6 ← (byte) tod_str::tod_MIN#1 & (unumber)(number) $f
Adding number conversion cast (unumber) tod_str::$7 in (number~) tod_str::$7 ← (byte) '0' + (unumber~) tod_str::$6
Adding number conversion cast (unumber) 4 in *((const byte*) tod_buffer + (number) 4) ← (unumber~) tod_str::$7
Adding number conversion cast (unumber) 4 in (byte~) tod_str::$8 ← (byte) tod_str::tod_SEC#1 >> (number) 4
Adding number conversion cast (unumber) 6 in *((const byte*) tod_buffer + (number) 6) ← (byte~) tod_str::$9
Adding number conversion cast (unumber) $f in (number~) tod_str::$10 ← (byte) tod_str::tod_SEC#1 & (number) $f
Adding number conversion cast (unumber) tod_str::$10 in (number~) tod_str::$10 ← (byte) tod_str::tod_SEC#1 & (unumber)(number) $f
Adding number conversion cast (unumber) tod_str::$11 in (number~) tod_str::$11 ← (byte) '0' + (unumber~) tod_str::$10
Adding number conversion cast (unumber) 7 in *((const byte*) tod_buffer + (number) 7) ← (unumber~) tod_str::$11
Adding number conversion cast (unumber) 4 in (byte~) tod_str::$12 ← (byte) tod_str::tod_TENTHS#1 >> (number) 4
Adding number conversion cast (unumber) 9 in *((const byte*) tod_buffer + (number) 9) ← (byte~) tod_str::$13
Adding number conversion cast (unumber) $f in (number~) tod_str::$14 ← (byte) tod_str::tod_TENTHS#1 & (number) $f
Adding number conversion cast (unumber) tod_str::$14 in (number~) tod_str::$14 ← (byte) tod_str::tod_TENTHS#1 & (unumber)(number) $f
Adding number conversion cast (unumber) tod_str::$15 in (number~) tod_str::$15 ← (byte) '0' + (unumber~) tod_str::$14
Adding number conversion cast (unumber) $a in *((const byte*) tod_buffer + (number) $a) ← (unumber~) tod_str::$15
Adding number conversion cast (unumber) 8 in (word) printf_uint::uvalue#0 ← (number) 8
Adding number conversion cast (unumber) 1 in stackpush(byte) ← (number) 1
Adding number conversion cast (unumber) 8 in (bool~) queen::$0 ← (byte) queen::column <= (number) 8
Adding number conversion cast (unumber) 0 in (bool~) queen::$7 ← (number) 0 != (byte~) queen::$1
Adding number conversion cast (unumber) 8 in (bool~) queen::$3 ← (byte) queen::r == (number) 8
Adding number conversion cast (unumber) 1 in (number~) queen::$4 ← (byte) queen::r + (number) 1
Adding number conversion cast (unumber) queen::$4 in (number~) queen::$4 ← (byte) queen::r + (unumber)(number) 1
Adding number conversion cast (unumber) 1 in (number~) legal::$0 ← (byte) legal::row#1 - (number) 1
Adding number conversion cast (unumber) legal::$0 in (number~) legal::$0 ← (byte) legal::row#1 - (unumber)(number) 1
Adding number conversion cast (unumber) 1 in (byte) legal::return#1 ← (number) 1
Adding number conversion cast (unumber) 0 in (byte) legal::return#2 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) legal::return#3 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) gotoxy::x#2 ← (number) 0
Adding number conversion cast (unumber) 5 in (byte) gotoxy::y#2 ← (number) 5
Adding number conversion cast (unumber) 8 in (bool~) print::$2 ← (byte) print::i#2 <= (number) 8
Adding number conversion cast (unumber) 8 in (bool~) print::$4 ← (byte) print::i1#2 <= (number) 8
Adding number conversion cast (unumber) 8 in (bool~) print::$6 ← (byte) print::j#2 <= (number) 8
Successful SSA optimization PassNAddNumberTypeConversions
Adding number conversion cast (unumber) 0 in (unumber~) printf_ulong::$0 ← (number) 0
Adding number conversion cast (unumber) 0 in (unumber~) printf_uint::$0 ← (number) 0
Adding number conversion cast (unumber) 0 in (unumber~) printf_uchar::$0 ← (number) 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) memcpy::src#0 ← (byte*)(void*) memcpy::source#2
Inlining cast (byte*) memcpy::dst#0 ← (byte*)(void*) memcpy::destination#2
Inlining cast (byte*) memset::dst#0 ← (byte*)(void*) memset::str#3
Inlining cast (byte) uctoa::max_digits#1 ← (unumber)(number) 3
Inlining cast (byte) uctoa::max_digits#2 ← (unumber)(number) 2
Inlining cast (byte) uctoa::max_digits#3 ← (unumber)(number) 3
Inlining cast (byte) uctoa::max_digits#4 ← (unumber)(number) 8
Inlining cast *((byte*) uctoa::buffer#2) ← (unumber)(number) 0
Inlining cast *((byte*) uctoa::buffer#3) ← (unumber)(number) 0
Inlining cast (byte) uctoa::started#1 ← (unumber)(number) 1
Inlining cast (byte) utoa::max_digits#1 ← (unumber)(number) 5
Inlining cast (byte) utoa::max_digits#2 ← (unumber)(number) 4
Inlining cast (byte) utoa::max_digits#3 ← (unumber)(number) 6
Inlining cast (byte) utoa::max_digits#4 ← (unumber)(number) $10
Inlining cast *((byte*) utoa::buffer#2) ← (unumber)(number) 0
Inlining cast *((byte*) utoa::buffer#3) ← (unumber)(number) 0
Inlining cast (byte) utoa::started#1 ← (unumber)(number) 1
Inlining cast (byte) ultoa::max_digits#1 ← (unumber)(number) $a
Inlining cast (byte) ultoa::max_digits#2 ← (unumber)(number) 8
Inlining cast (byte) ultoa::max_digits#3 ← (unumber)(number) $b
Inlining cast (byte) ultoa::max_digits#4 ← (unumber)(number) $20
Inlining cast *((byte*) ultoa::buffer#2) ← (unumber)(number) 0
Inlining cast *((byte*) ultoa::buffer#3) ← (unumber)(number) 0
Inlining cast (byte) ultoa::started#1 ← (unumber)(number) 1
Inlining cast (byte) conio_cursor_x ← (unumber)(number) 0
Inlining cast (byte) conio_cursor_y ← (unumber)(number) 0
Inlining cast (byte) gotoxy::y#0 ← (unumber)(number) 0
Inlining cast (byte) gotoxy::x#0 ← (unumber)(number) 0
Inlining cast (byte) conio_cursor_x ← (unumber)(number) 0
Inlining cast (word) memcpy::num#0 ← (unumber)(number) $19*(number) $28-(number) $28
Inlining cast (word) memcpy::num#1 ← (unumber)(number) $19*(number) $28-(number) $28
Inlining cast (word) memset::num#0 ← (unumber)(number) $28
Inlining cast (word) memset::num#1 ← (unumber)(number) $28
Inlining cast (byte) gotoxy::x#1 ← (unumber)(number) 0
Inlining cast (byte) gotoxy::y#1 ← (unumber)(number) 0
Inlining cast (unumber~) printf_ulong::$0 ← (unumber)(number) 0
Inlining cast (unumber~) printf_uint::$0 ← (unumber)(number) 0
Inlining cast (unumber~) printf_uchar::$0 ← (unumber)(number) 0
Inlining cast (signed byte) printf_number_buffer::padding#2 ← (snumber)(number) 0
Inlining cast (signed byte) printf_string::padding#2 ← (snumber)(number) 0
Inlining cast (word) printf_uint::uvalue#0 ← (unumber)(number) 8
Inlining cast stackpush(byte) ← (unumber)(number) 1
Inlining cast (byte) legal::return#1 ← (unumber)(number) 1
Inlining cast (byte) legal::return#2 ← (unumber)(number) 0
Inlining cast (byte) legal::return#3 ← (unumber)(number) 0
Inlining cast (byte) gotoxy::x#2 ← (unumber)(number) 0
Inlining cast (byte) gotoxy::y#2 ← (unumber)(number) 5
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 55296
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (struct MOS6526_CIA*) 56320
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 3
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 8
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast (byte) uctoa::value#3
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 5
Simplifying constant integer cast 4
Simplifying constant integer cast 6
Simplifying constant integer cast $10
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast $a
Simplifying constant integer cast 8
Simplifying constant integer cast $b
Simplifying constant integer cast $20
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast $19
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $19
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $19
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $80
Simplifying constant integer cast $7f
Simplifying constant integer cast 4
Simplifying constant integer cast 0
Simplifying constant integer cast $f
Simplifying constant integer cast 1
Simplifying constant integer cast 4
Simplifying constant integer cast 3
Simplifying constant integer cast $f
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast 6
Simplifying constant integer cast $f
Simplifying constant integer cast 7
Simplifying constant integer cast 4
Simplifying constant integer cast 9
Simplifying constant integer cast $f
Simplifying constant integer cast $a
Simplifying constant integer cast 8
Simplifying constant integer cast 1
Simplifying constant integer cast 8
Simplifying constant integer cast 0
Simplifying constant integer cast 8
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 5
Simplifying constant integer cast 8
Simplifying constant integer cast 8
Simplifying constant integer cast 8
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) $b
Finalized unsigned number type (byte) $20
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) $7f
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 9
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 8
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) uctoa::$4 ← (byte) uctoa::max_digits#5 - (byte) 1
Inferred type updated to byte in (unumber~) utoa::$4 ← (byte) utoa::max_digits#5 - (byte) 1
Inferred type updated to byte in (unumber~) ultoa::$4 ← (byte) ultoa::max_digits#5 - (byte) 1
Inferred type updated to word in (unumber~) gotoxy::$4 ← (word~) gotoxy::$7 * (byte) $28
Inferred type updated to byte in (unumber~) printf_ulong::$0 ← (byte) 0
Inferred type updated to byte for (unumber~) printf_ulong::$2
Inferred type updated to byte in (unumber~) printf_uint::$0 ← (byte) 0
Inferred type updated to byte for (unumber~) printf_uint::$2
Inferred type updated to byte in (unumber~) printf_uchar::$0 ← (byte) 0
Inferred type updated to byte for (unumber~) printf_uchar::$2
Inferred type updated to byte in (unumber~) tod_str::$2 ← (byte) tod_str::tod_HOURS#1 & (byte) $f
Inferred type updated to byte in (unumber~) tod_str::$3 ← (byte) '0' + (byte~) tod_str::$2
Inferred type updated to byte in (unumber~) tod_str::$6 ← (byte) tod_str::tod_MIN#1 & (byte) $f
Inferred type updated to byte in (unumber~) tod_str::$7 ← (byte) '0' + (byte~) tod_str::$6
Inferred type updated to byte in (unumber~) tod_str::$10 ← (byte) tod_str::tod_SEC#1 & (byte) $f
Inferred type updated to byte in (unumber~) tod_str::$11 ← (byte) '0' + (byte~) tod_str::$10
Inferred type updated to byte in (unumber~) tod_str::$14 ← (byte) tod_str::tod_TENTHS#1 & (byte) $f
Inferred type updated to byte in (unumber~) tod_str::$15 ← (byte) '0' + (byte~) tod_str::$14
Inferred type updated to byte in (unumber~) queen::$4 ← (byte) queen::r + (byte) 1
Inferred type updated to byte in (unumber~) legal::$0 ← (byte) legal::row#1 - (byte) 1
Inversing boolean not [33] (bool~) memset::$1 ← (word) memset::num#2 <= (byte) 0 from [32] (bool~) memset::$0 ← (word) memset::num#2 > (byte) 0
Inversing boolean not [350] (bool~) gotoxy::$1 ← (byte) gotoxy::y#3 <= (byte) $19 from [349] (bool~) gotoxy::$0 ← (byte) gotoxy::y#3 > (byte) $19
Inversing boolean not [354] (bool~) gotoxy::$3 ← (byte) gotoxy::x#3 < (byte) $28 from [353] (bool~) gotoxy::$2 ← (byte) gotoxy::x#3 >= (byte) $28
Inversing boolean not [380] (bool~) cputc::$2 ← (byte) conio_cursor_x != (byte) $28 from [379] (bool~) cputc::$1 ← (byte) conio_cursor_x == (byte) $28
Inversing boolean not [391] (bool~) cscroll::$1 ← (byte) conio_cursor_y != (byte) $19 from [390] (bool~) cscroll::$0 ← (byte) conio_cursor_y == (byte) $19
Inversing boolean not [521] (bool~) printf_number_buffer::$0 ← (byte) 0 == (byte) printf_number_buffer::format_min_length#3 from [520] (bool~) printf_number_buffer::$26 ← (byte) 0 != (byte) printf_number_buffer::format_min_length#3
Inversing boolean not [525] (bool~) printf_number_buffer::$1 ← (byte) 0 == (byte) printf_number_buffer::format_justify_left#3 from [524] (bool~) printf_number_buffer::$27 ← (byte) 0 != (byte) printf_number_buffer::format_justify_left#3
Inversing boolean not [527] (bool~) printf_number_buffer::$2 ← (byte) 0 == (byte) printf_number_buffer::format_zero_padding#3 from [526] (bool~) printf_number_buffer::$28 ← (byte) 0 != (byte) printf_number_buffer::format_zero_padding#3
Inversing boolean not [540] (bool~) printf_number_buffer::$20 ← (byte) 0 == (byte) printf_number_buffer::buffer_sign#3 from [539] (bool~) printf_number_buffer::$29 ← (byte) 0 != (byte) printf_number_buffer::buffer_sign#3
Inversing boolean not [547] (bool~) printf_number_buffer::$23 ← (signed byte) printf_number_buffer::padding#1 >= (signed byte) 0 from [546] (bool~) printf_number_buffer::$22 ← (signed byte) printf_number_buffer::padding#1 < (signed byte) 0
Inversing boolean not [555] (bool~) printf_number_buffer::$7 ← (byte) 0 == (byte) printf_number_buffer::buffer_sign#4 from [554] (bool~) printf_number_buffer::$30 ← (byte) 0 != (byte) printf_number_buffer::buffer_sign#4
Inversing boolean not [572] (bool~) printf_number_buffer::$12 ← (byte) 0 == (byte) printf_number_buffer::format_upper_case#3 from [571] (bool~) printf_number_buffer::$31 ← (byte) 0 != (byte) printf_number_buffer::format_upper_case#3
Inversing boolean not [584] (bool~) printf_number_buffer::$14 ← (byte) 0 == (byte) printf_number_buffer::format_zero_padding#5 from [583] (bool~) printf_number_buffer::$32 ← (byte) 0 != (byte) printf_number_buffer::format_zero_padding#5
Inversing boolean not [602] (bool~) printf_string::$0 ← (byte) 0 == (byte) printf_string::format_min_length#1 from [601] (bool~) printf_string::$14 ← (byte) 0 != (byte) printf_string::format_min_length#1
Inversing boolean not [606] (bool~) printf_string::$1 ← (byte) 0 == (byte) printf_string::format_justify_left#1 from [605] (bool~) printf_string::$15 ← (byte) 0 != (byte) printf_string::format_justify_left#1
Inversing boolean not [621] (bool~) printf_string::$12 ← (signed byte) printf_string::padding#1 >= (signed byte) 0 from [620] (bool~) printf_string::$11 ← (signed byte) printf_string::padding#1 < (signed byte) 0
Inversing boolean not [769] (bool~) queen::$2 ← (byte) 0 == (byte~) queen::$1 from [768] (bool~) queen::$7 ← (byte) 0 != (byte~) queen::$1
Inversing boolean not [809] (bool~) legal::$6 ← (byte~) legal::$3 != (byte~) legal::$4 from [808] (bool~) legal::$5 ← (byte~) legal::$3 == (byte~) legal::$4
Successful SSA optimization Pass2UnaryNotSimplification
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Alias candidate removed (volatile)queen::row#0 = queen::r 
Alias toupper::ch#1 = toupper::ch#2 toupper::ch#3 toupper::return#1 
Alias toupper::return#0 = toupper::$3 
Alias toupper::return#2 = toupper::return#4 
Alias memcpy::src_end#0 = memcpy::$0 
Alias memcpy::src#2 = memcpy::src#3 
Alias memcpy::dst#2 = memcpy::dst#3 
Alias memcpy::src_end#1 = memcpy::src_end#2 
Alias memcpy::destination#3 = memcpy::destination#5 memcpy::destination#4 memcpy::return#0 memcpy::return#4 memcpy::return#1 
Alias memset::return#0 = memset::str#2 memset::return#4 memset::return#1 
Alias memset::str#3 = memset::str#4 
Alias memset::num#2 = memset::num#3 
Alias memset::c#4 = memset::c#5 
Alias memset::end#0 = memset::$2 
Alias memset::c#2 = memset::c#3 
Alias memset::dst#2 = memset::dst#3 
Alias memset::end#1 = memset::end#2 
Alias memset::str#5 = memset::str#6 
Alias strupr::src#0 = strupr::str#1 
Alias strupr::src#2 = strupr::src#3 strupr::src#4 
Alias strupr::str#2 = strupr::str#5 strupr::str#3 strupr::str#4 strupr::return#0 strupr::return#3 strupr::return#1 
Alias toupper::return#3 = toupper::return#5 
Alias strlen::len#2 = strlen::len#4 strlen::len#3 strlen::return#0 strlen::return#4 strlen::return#1 
Alias strlen::str#3 = strlen::str#4 
Alias uctoa::value#10 = uctoa::value#8 uctoa::value#12 uctoa::value#13 uctoa::value#9 uctoa::value#14 uctoa::value#15 uctoa::value#11 
Alias uctoa::buffer#10 = uctoa::buffer#17 uctoa::buffer#21 uctoa::buffer#16 uctoa::buffer#18 uctoa::buffer#13 uctoa::buffer#19 uctoa::buffer#20 uctoa::buffer#6 
Alias uctoa::radix#1 = uctoa::radix#2 uctoa::radix#3 uctoa::radix#4 
Alias uctoa::digit_values#10 = uctoa::digit_values#5 uctoa::digit_values#6 uctoa::digit_values#9 
Alias uctoa::digit#2 = uctoa::digit#3 uctoa::digit#6 uctoa::digit#5 
Alias uctoa::value#2 = uctoa::value#5 uctoa::value#3 uctoa::$10 uctoa::value#4 
Alias uctoa::started#2 = uctoa::started#3 
Alias uctoa::buffer#11 = uctoa::buffer#12 uctoa::buffer#7 uctoa::buffer#8 uctoa::buffer#9 
Alias uctoa::max_digits#10 = uctoa::max_digits#8 uctoa::max_digits#5 uctoa::max_digits#9 
Alias uctoa::digit_value#0 = uctoa::digit_value#1 
Alias uctoa_append::return#0 = uctoa_append::return#3 
Alias uctoa::value#0 = uctoa::$9 
Alias uctoa_append::digit#2 = uctoa_append::digit#4 uctoa_append::digit#3 
Alias uctoa_append::value#2 = uctoa_append::value#3 uctoa_append::value#4 uctoa_append::return#1 uctoa_append::return#4 uctoa_append::return#2 
Alias uctoa_append::sub#1 = uctoa_append::sub#2 
Alias uctoa_append::buffer#1 = uctoa_append::buffer#4 uctoa_append::buffer#2 
Alias utoa::value#10 = utoa::value#8 utoa::value#12 utoa::value#13 utoa::value#9 utoa::value#14 utoa::value#15 utoa::value#11 
Alias utoa::buffer#10 = utoa::buffer#17 utoa::buffer#21 utoa::buffer#16 utoa::buffer#18 utoa::buffer#13 utoa::buffer#19 utoa::buffer#20 utoa::buffer#6 
Alias utoa::radix#1 = utoa::radix#2 utoa::radix#3 utoa::radix#4 
Alias utoa::digit#2 = utoa::digit#3 utoa::digit#6 utoa::digit#5 
Alias utoa::digit_values#10 = utoa::digit_values#5 utoa::digit_values#6 utoa::digit_values#9 
Alias utoa::value#2 = utoa::value#5 utoa::value#3 utoa::value#4 
Alias utoa::started#2 = utoa::started#3 
Alias utoa::buffer#11 = utoa::buffer#12 utoa::buffer#7 utoa::buffer#8 utoa::buffer#9 
Alias utoa::max_digits#10 = utoa::max_digits#8 utoa::max_digits#5 utoa::max_digits#9 
Alias utoa::digit_value#0 = utoa::digit_value#1 
Alias utoa_append::return#0 = utoa_append::return#3 
Alias utoa::value#0 = utoa::$9 
Alias utoa_append::digit#2 = utoa_append::digit#4 utoa_append::digit#3 
Alias utoa_append::value#2 = utoa_append::value#3 utoa_append::value#4 utoa_append::return#1 utoa_append::return#4 utoa_append::return#2 
Alias utoa_append::sub#1 = utoa_append::sub#2 
Alias utoa_append::buffer#1 = utoa_append::buffer#4 utoa_append::buffer#2 
Alias ultoa::value#10 = ultoa::value#8 ultoa::value#12 ultoa::value#13 ultoa::value#9 ultoa::value#14 ultoa::value#15 ultoa::value#11 
Alias ultoa::buffer#10 = ultoa::buffer#17 ultoa::buffer#21 ultoa::buffer#16 ultoa::buffer#18 ultoa::buffer#13 ultoa::buffer#19 ultoa::buffer#20 ultoa::buffer#6 
Alias ultoa::radix#1 = ultoa::radix#2 ultoa::radix#3 ultoa::radix#4 
Alias ultoa::digit#2 = ultoa::digit#3 ultoa::digit#6 ultoa::digit#5 
Alias ultoa::digit_values#10 = ultoa::digit_values#5 ultoa::digit_values#6 ultoa::digit_values#9 
Alias ultoa::value#2 = ultoa::value#5 ultoa::value#3 ultoa::value#4 
Alias ultoa::started#2 = ultoa::started#3 
Alias ultoa::buffer#11 = ultoa::buffer#12 ultoa::buffer#7 ultoa::buffer#8 ultoa::buffer#9 
Alias ultoa::max_digits#10 = ultoa::max_digits#8 ultoa::max_digits#5 ultoa::max_digits#9 
Alias ultoa::digit_value#0 = ultoa::digit_value#1 
Alias ultoa_append::return#0 = ultoa_append::return#3 
Alias ultoa::value#0 = ultoa::$9 
Alias ultoa_append::digit#2 = ultoa_append::digit#4 ultoa_append::digit#3 
Alias ultoa_append::value#2 = ultoa_append::value#3 ultoa_append::value#4 ultoa_append::return#1 ultoa_append::return#4 ultoa_append::return#2 
Alias ultoa_append::sub#1 = ultoa_append::sub#2 
Alias ultoa_append::buffer#1 = ultoa_append::buffer#4 ultoa_append::buffer#2 
Alias clrscr::line_text#5 = clrscr::line_text#6 
Alias clrscr::line_cols#5 = clrscr::line_cols#6 
Alias clrscr::l#2 = clrscr::l#5 
Alias clrscr::line_text#2 = clrscr::line_text#4 clrscr::line_text#3 
Alias clrscr::c#2 = clrscr::c#3 
Alias clrscr::line_cols#2 = clrscr::line_cols#4 clrscr::line_cols#3 
Alias clrscr::l#3 = clrscr::l#6 clrscr::l#4 
Alias gotoxy::x#5 = gotoxy::x#6 
Alias gotoxy::line_offset#0 = gotoxy::$4 
Alias gotoxy::y#5 = gotoxy::y#6 
Alias cputc::c#3 = cputc::c#4 
Alias cputs::c#1 = cputs::$0 cputs::c#2 
Alias cputs::s#0 = cputs::s#16 cputs::s#15 
Alias printf_padding::pad#5 = printf_padding::pad#6 printf_padding::pad#8 
Alias printf_padding::i#2 = printf_padding::i#4 printf_padding::i#3 
Alias printf_padding::length#5 = printf_padding::length#8 printf_padding::length#7 
Alias printf_ulong::uvalue#3 = printf_ulong::uvalue#5 printf_ulong::uvalue#4 
Alias printf_ulong::format_radix#4 = printf_ulong::format_radix#6 printf_ulong::format_radix#5 
Alias printf_ulong::format_min_length#4 = printf_ulong::format_min_length#6 printf_ulong::format_min_length#5 
Alias printf_ulong::format_justify_left#4 = printf_ulong::format_justify_left#6 printf_ulong::format_justify_left#5 
Alias printf_ulong::format_sign_always#2 = printf_ulong::format_sign_always#5 printf_ulong::format_sign_always#6 
Alias printf_ulong::format_zero_padding#4 = printf_ulong::format_zero_padding#6 printf_ulong::format_zero_padding#5 
Alias printf_ulong::format_upper_case#4 = printf_ulong::format_upper_case#6 printf_ulong::format_upper_case#5 
Alias printf_ulong::format_min_length#2 = printf_ulong::format_min_length#3 
Alias printf_ulong::format_justify_left#2 = printf_ulong::format_justify_left#3 
Alias printf_ulong::format_sign_always#3 = printf_ulong::format_sign_always#4 
Alias printf_ulong::format_zero_padding#2 = printf_ulong::format_zero_padding#3 
Alias printf_ulong::format_upper_case#2 = printf_ulong::format_upper_case#3 
Alias printf_ulong::format_radix#2 = printf_ulong::format_radix#3 
Alias printf_uint::uvalue#2 = printf_uint::uvalue#4 printf_uint::uvalue#3 
Alias printf_uint::format_radix#3 = printf_uint::format_radix#5 printf_uint::format_radix#4 
Alias printf_uint::format_min_length#3 = printf_uint::format_min_length#5 printf_uint::format_min_length#4 
Alias printf_uint::format_justify_left#3 = printf_uint::format_justify_left#5 printf_uint::format_justify_left#4 
Alias printf_uint::format_sign_always#1 = printf_uint::format_sign_always#4 printf_uint::format_sign_always#5 
Alias printf_uint::format_zero_padding#3 = printf_uint::format_zero_padding#5 printf_uint::format_zero_padding#4 
Alias printf_uint::format_upper_case#3 = printf_uint::format_upper_case#5 printf_uint::format_upper_case#4 
Alias printf_uint::format_min_length#1 = printf_uint::format_min_length#2 
Alias printf_uint::format_justify_left#1 = printf_uint::format_justify_left#2 
Alias printf_uint::format_sign_always#2 = printf_uint::format_sign_always#3 
Alias printf_uint::format_zero_padding#1 = printf_uint::format_zero_padding#2 
Alias printf_uint::format_upper_case#1 = printf_uint::format_upper_case#2 
Alias printf_uint::format_radix#1 = printf_uint::format_radix#2 
Alias printf_uchar::uvalue#3 = printf_uchar::uvalue#5 printf_uchar::uvalue#4 
Alias printf_uchar::format_radix#4 = printf_uchar::format_radix#6 printf_uchar::format_radix#5 
Alias printf_uchar::format_min_length#4 = printf_uchar::format_min_length#6 printf_uchar::format_min_length#5 
Alias printf_uchar::format_justify_left#4 = printf_uchar::format_justify_left#6 printf_uchar::format_justify_left#5 
Alias printf_uchar::format_sign_always#2 = printf_uchar::format_sign_always#5 printf_uchar::format_sign_always#6 
Alias printf_uchar::format_zero_padding#4 = printf_uchar::format_zero_padding#6 printf_uchar::format_zero_padding#5 
Alias printf_uchar::format_upper_case#4 = printf_uchar::format_upper_case#6 printf_uchar::format_upper_case#5 
Alias printf_uchar::format_min_length#2 = printf_uchar::format_min_length#3 
Alias printf_uchar::format_justify_left#2 = printf_uchar::format_justify_left#3 
Alias printf_uchar::format_sign_always#3 = printf_uchar::format_sign_always#4 
Alias printf_uchar::format_zero_padding#2 = printf_uchar::format_zero_padding#3 
Alias printf_uchar::format_upper_case#2 = printf_uchar::format_upper_case#3 
Alias printf_uchar::format_radix#2 = printf_uchar::format_radix#3 
Alias printf_number_buffer::buffer_digits#20 = printf_number_buffer::buffer_digits#3 printf_number_buffer::buffer_digits#6 printf_number_buffer::buffer_digits#21 
Alias printf_number_buffer::buffer_sign#13 = printf_number_buffer::buffer_sign#6 printf_number_buffer::buffer_sign#9 printf_number_buffer::buffer_sign#3 
Alias printf_number_buffer::format_min_length#3 = printf_number_buffer::format_min_length#7 printf_number_buffer::format_min_length#5 printf_number_buffer::format_min_length#6 
Alias printf_number_buffer::format_justify_left#10 = printf_number_buffer::format_justify_left#13 printf_number_buffer::format_justify_left#5 printf_number_buffer::format_justify_left#9 
Alias printf_number_buffer::format_zero_padding#12 = printf_number_buffer::format_zero_padding#18 printf_number_buffer::format_zero_padding#6 printf_number_buffer::format_zero_padding#13 
Alias printf_number_buffer::format_upper_case#12 = printf_number_buffer::format_upper_case#18 printf_number_buffer::format_upper_case#16 printf_number_buffer::format_upper_case#17 
Alias strlen::return#2 = strlen::return#5 
Alias printf_number_buffer::padding#1 = printf_number_buffer::$21 
Alias printf_number_buffer::len#0 = printf_number_buffer::len#3 
Alias printf_number_buffer::format_justify_left#6 = printf_number_buffer::format_justify_left#7 
Alias printf_number_buffer::format_zero_padding#7 = printf_number_buffer::format_zero_padding#8 
Alias printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#11 
Alias printf_number_buffer::format_upper_case#13 = printf_number_buffer::format_upper_case#14 
Alias printf_number_buffer::buffer_digits#17 = printf_number_buffer::buffer_digits#18 
Alias printf_number_buffer::padding#12 = printf_number_buffer::padding#4 printf_number_buffer::padding#3 
Alias printf_number_buffer::buffer_sign#12 = printf_number_buffer::buffer_sign#7 printf_number_buffer::buffer_sign#8 
Alias printf_number_buffer::format_zero_padding#14 = printf_number_buffer::format_zero_padding#19 printf_number_buffer::format_zero_padding#3 
Alias printf_number_buffer::format_upper_case#10 = printf_number_buffer::format_upper_case#15 printf_number_buffer::format_upper_case#9 
Alias printf_number_buffer::buffer_digits#14 = printf_number_buffer::buffer_digits#19 printf_number_buffer::buffer_digits#15 
Alias printf_number_buffer::format_justify_left#20 = printf_number_buffer::format_justify_left#22 printf_number_buffer::format_justify_left#3 
Alias printf_number_buffer::buffer_sign#4 = printf_number_buffer::buffer_sign#5 
Alias printf_number_buffer::format_zero_padding#10 = printf_number_buffer::format_zero_padding#15 printf_number_buffer::format_zero_padding#9 
Alias printf_number_buffer::padding#10 = printf_number_buffer::padding#13 printf_number_buffer::padding#9 
Alias printf_number_buffer::format_upper_case#11 = printf_number_buffer::format_upper_case#7 printf_number_buffer::format_upper_case#6 
Alias printf_number_buffer::buffer_digits#11 = printf_number_buffer::buffer_digits#16 printf_number_buffer::buffer_digits#12 
Alias printf_number_buffer::format_justify_left#17 = printf_number_buffer::format_justify_left#21 printf_number_buffer::format_justify_left#18 
Alias printf_number_buffer::padding#16 = printf_number_buffer::padding#6 printf_number_buffer::padding#5 
Alias printf_number_buffer::format_upper_case#4 = printf_number_buffer::format_upper_case#8 printf_number_buffer::format_upper_case#5 
Alias printf_number_buffer::buffer_digits#10 = printf_number_buffer::buffer_digits#13 printf_number_buffer::buffer_digits#9 
Alias printf_number_buffer::format_zero_padding#20 = printf_number_buffer::format_zero_padding#22 printf_number_buffer::format_zero_padding#4 
Alias printf_number_buffer::format_justify_left#14 = printf_number_buffer::format_justify_left#19 printf_number_buffer::format_justify_left#15 
Alias printf_number_buffer::format_zero_padding#11 = printf_number_buffer::format_zero_padding#5 
Alias printf_number_buffer::format_justify_left#4 = printf_number_buffer::format_justify_left#8 
Alias printf_number_buffer::padding#11 = printf_number_buffer::padding#7 printf_number_buffer::padding#8 
Alias printf_number_buffer::buffer_digits#5 = printf_number_buffer::buffer_digits#8 printf_number_buffer::buffer_digits#7 
Alias printf_number_buffer::format_zero_padding#16 = printf_number_buffer::format_zero_padding#21 printf_number_buffer::format_zero_padding#17 
Alias printf_number_buffer::format_justify_left#11 = printf_number_buffer::format_justify_left#16 printf_number_buffer::format_justify_left#12 
Alias printf_number_buffer::padding#14 = printf_number_buffer::padding#17 printf_number_buffer::padding#15 
Alias printf_string::str#1 = printf_string::str#3 printf_string::str#7 printf_string::str#6 
Alias printf_string::format_min_length#1 = printf_string::format_min_length#3 printf_string::format_min_length#2 
Alias printf_string::format_justify_left#3 = printf_string::format_justify_left#7 printf_string::format_justify_left#5 printf_string::format_justify_left#4 
Alias strlen::return#3 = strlen::return#6 
Alias printf_string::padding#1 = printf_string::$10 
Alias printf_string::format_justify_left#2 = printf_string::format_justify_left#6 
Alias printf_string::padding#4 = printf_string::padding#7 printf_string::padding#6 
Alias printf_string::padding#3 = printf_string::padding#5 printf_string::padding#8 
Alias printf_string::str#4 = printf_string::str#8 printf_string::str#5 
Alias printf_string::format_justify_left#1 = printf_string::format_justify_left#9 printf_string::format_justify_left#8 
Alias tod_read::return_TENTHS#0 = tod_read::tod_TENTHS#0 tod_read::tenths#0 tod_read::return_TENTHS#3 tod_read::return_TENTHS#1 
Alias tod_read::return_SEC#0 = tod_read::tod_SEC#0 tod_read::secs#0 tod_read::return_SEC#3 tod_read::return_SEC#1 
Alias tod_read::return_MIN#0 = tod_read::tod_MIN#0 tod_read::mins#0 tod_read::return_MIN#3 tod_read::return_MIN#1 
Alias tod_read::return_HOURS#0 = tod_read::tod_HOURS#0 tod_read::hours#0 tod_read::return_HOURS#3 tod_read::return_HOURS#1 
Alias tod_str::return#0 = tod_str::return#3 tod_str::return#1 
Alias tod_read::return_TENTHS#2 = tod_read::return_TENTHS#4 
Alias tod_read::return_SEC#2 = tod_read::return_SEC#4 
Alias tod_read::return_MIN#2 = tod_read::return_MIN#4 
Alias tod_read::return_HOURS#2 = tod_read::return_HOURS#4 
Alias tod_str::tod_TENTHS#0 = main::$5_TENTHS 
Alias tod_str::tod_SEC#0 = main::$5_SEC 
Alias tod_str::tod_MIN#0 = main::$5_MIN 
Alias tod_str::tod_HOURS#0 = main::$5_HOURS 
Alias tod_str::return#2 = tod_str::return#4 
Alias printf_string::str#0 = main::$6 
Alias legal::return#0 = legal::return#5 
Alias legal::i#2 = legal::i#3 legal::i#4 legal::i#5 legal::i#7 legal::i#6 
Alias legal::column#1 = legal::column#3 legal::column#2 legal::column#7 legal::column#6 legal::column#5 
Alias legal::row#1 = legal::row#6 legal::row#5 legal::row#2 legal::row#7 legal::row#4 
Alias diff::return#0 = diff::return#5 
Alias diff::return#1 = diff::return#6 
Alias legal::return#4 = legal::return#6 
Alias diff::b#2 = diff::b#3 diff::b#4 
Alias diff::a#2 = diff::a#3 diff::a#4 
Alias diff::return#2 = diff::$2 
Alias diff::return#3 = diff::$1 
Alias diff::return#4 = diff::return#7 
Alias print::i#2 = print::i#3 print::i#4 
Alias print::i1#2 = print::i1#6 print::i1#3 print::i1#9 
Alias print::i1#10 = print::i1#4 print::i1#7 print::i1#5 print::i1#12 print::i1#13 print::i1#11 
Alias print::j#2 = print::j#3 print::j#7 print::j#5 print::j#8 print::j#6 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Alias candidate removed (volatile)queen::row#0 = queen::r 
Alias uctoa::value#10 = uctoa::value#7 
Alias uctoa::buffer#10 = uctoa::buffer#15 
Alias uctoa::digit#2 = uctoa::digit#4 
Alias uctoa::max_digits#10 = uctoa::max_digits#6 
Alias uctoa::digit_values#10 = uctoa::digit_values#7 
Alias utoa::value#10 = utoa::value#7 
Alias utoa::buffer#10 = utoa::buffer#15 
Alias utoa::digit#2 = utoa::digit#4 
Alias utoa::max_digits#10 = utoa::max_digits#6 
Alias utoa::digit_values#10 = utoa::digit_values#7 
Alias ultoa::value#10 = ultoa::value#7 
Alias ultoa::buffer#10 = ultoa::buffer#15 
Alias ultoa::digit#2 = ultoa::digit#4 
Alias ultoa::max_digits#10 = ultoa::max_digits#6 
Alias ultoa::digit_values#10 = ultoa::digit_values#7 
Alias gotoxy::x#3 = gotoxy::x#5 
Alias gotoxy::y#4 = gotoxy::y#5 
Alias printf_ulong::uvalue#2 = printf_ulong::uvalue#3 
Alias printf_ulong::format_radix#2 = printf_ulong::format_radix#4 
Alias printf_ulong::format_min_length#2 = printf_ulong::format_min_length#4 
Alias printf_ulong::format_justify_left#2 = printf_ulong::format_justify_left#4 
Alias printf_ulong::format_sign_always#2 = printf_ulong::format_sign_always#3 
Alias printf_ulong::format_zero_padding#2 = printf_ulong::format_zero_padding#4 
Alias printf_ulong::format_upper_case#2 = printf_ulong::format_upper_case#4 
Alias printf_uint::uvalue#1 = printf_uint::uvalue#2 
Alias printf_uint::format_radix#1 = printf_uint::format_radix#3 
Alias printf_uint::format_min_length#1 = printf_uint::format_min_length#3 
Alias printf_uint::format_justify_left#1 = printf_uint::format_justify_left#3 
Alias printf_uint::format_sign_always#1 = printf_uint::format_sign_always#2 
Alias printf_uint::format_zero_padding#1 = printf_uint::format_zero_padding#3 
Alias printf_uint::format_upper_case#1 = printf_uint::format_upper_case#3 
Alias printf_uchar::uvalue#2 = printf_uchar::uvalue#3 
Alias printf_uchar::format_radix#2 = printf_uchar::format_radix#4 
Alias printf_uchar::format_min_length#2 = printf_uchar::format_min_length#4 
Alias printf_uchar::format_justify_left#2 = printf_uchar::format_justify_left#4 
Alias printf_uchar::format_sign_always#2 = printf_uchar::format_sign_always#3 
Alias printf_uchar::format_zero_padding#2 = printf_uchar::format_zero_padding#4 
Alias printf_uchar::format_upper_case#2 = printf_uchar::format_upper_case#4 
Alias printf_number_buffer::format_min_length#3 = printf_number_buffer::format_min_length#4 
Alias printf_number_buffer::format_justify_left#10 = printf_number_buffer::format_justify_left#6 
Alias printf_number_buffer::format_zero_padding#12 = printf_number_buffer::format_zero_padding#7 
Alias printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#13 
Alias printf_number_buffer::format_upper_case#12 = printf_number_buffer::format_upper_case#13 
Alias printf_number_buffer::buffer_digits#17 = printf_number_buffer::buffer_digits#20 
Alias printf_number_buffer::buffer_sign#12 = printf_number_buffer::buffer_sign#4 
Alias printf_number_buffer::format_zero_padding#10 = printf_number_buffer::format_zero_padding#14 printf_number_buffer::format_zero_padding#20 printf_number_buffer::format_zero_padding#16 printf_number_buffer::format_zero_padding#11 
Alias printf_number_buffer::padding#10 = printf_number_buffer::padding#12 printf_number_buffer::padding#16 printf_number_buffer::padding#14 printf_number_buffer::padding#11 
Alias printf_number_buffer::format_upper_case#10 = printf_number_buffer::format_upper_case#11 printf_number_buffer::format_upper_case#4 printf_number_buffer::format_upper_case#3 
Alias printf_number_buffer::buffer_digits#10 = printf_number_buffer::buffer_digits#11 printf_number_buffer::buffer_digits#14 printf_number_buffer::buffer_digits#5 printf_number_buffer::buffer_digits#4 
Alias printf_number_buffer::format_justify_left#11 = printf_number_buffer::format_justify_left#17 printf_number_buffer::format_justify_left#20 printf_number_buffer::format_justify_left#14 printf_number_buffer::format_justify_left#4 
Alias printf_string::format_justify_left#1 = printf_string::format_justify_left#3 printf_string::format_justify_left#2 
Alias printf_string::str#1 = printf_string::str#4 printf_string::str#2 
Alias printf_string::padding#3 = printf_string::padding#4 
Alias print::j#2 = print::j#4 
Alias print::i1#10 = print::i1#8 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Alias candidate removed (volatile)queen::row#0 = queen::r 
Alias printf_number_buffer::format_justify_left#10 = printf_number_buffer::format_justify_left#11 
Alias printf_number_buffer::format_zero_padding#10 = printf_number_buffer::format_zero_padding#12 
Alias printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#12 
Alias printf_number_buffer::format_upper_case#10 = printf_number_buffer::format_upper_case#12 
Alias printf_number_buffer::buffer_digits#10 = printf_number_buffer::buffer_digits#17 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Alias candidate removed (volatile)queen::row#0 = queen::r 
Identical Phi Values (byte) toupper::ch#1 (byte) toupper::ch#0
Identical Phi Values (byte*) memcpy::src_end#1 (byte*) memcpy::src_end#0
Identical Phi Values (void*) memcpy::destination#3 (void*) memcpy::destination#2
Identical Phi Values (byte*) memset::end#1 (byte*) memset::end#0
Identical Phi Values (void*) memset::str#5 (void*) memset::str#3
Identical Phi Values (byte) memset::c#2 (byte) memset::c#4
Identical Phi Values (byte*) strupr::src#0 (byte*) strupr::str#0
Identical Phi Values (byte*) strupr::str#2 (byte*) strupr::src#0
Identical Phi Values (byte) uctoa::radix#1 (byte) uctoa::radix#0
Identical Phi Values (byte) uctoa::value#10 (byte) uctoa::value#1
Identical Phi Values (byte*) uctoa::buffer#10 (byte*) uctoa::buffer#5
Identical Phi Values (byte) uctoa::max_digits#10 (byte) uctoa::max_digits#7
Identical Phi Values (byte*) uctoa::digit_values#10 (byte*) uctoa::digit_values#8
Identical Phi Values (byte) uctoa_append::value#5 (byte) uctoa_append::value#0
Identical Phi Values (byte) uctoa_append::sub#3 (byte) uctoa_append::sub#0
Identical Phi Values (byte*) uctoa_append::buffer#3 (byte*) uctoa_append::buffer#0
Identical Phi Values (byte) uctoa_append::sub#1 (byte) uctoa_append::sub#3
Identical Phi Values (byte*) uctoa_append::buffer#1 (byte*) uctoa_append::buffer#3
Identical Phi Values (byte) utoa::radix#1 (byte) utoa::radix#0
Identical Phi Values (word) utoa::value#10 (word) utoa::value#1
Identical Phi Values (byte*) utoa::buffer#10 (byte*) utoa::buffer#5
Identical Phi Values (byte) utoa::max_digits#10 (byte) utoa::max_digits#7
Identical Phi Values (word*) utoa::digit_values#10 (word*) utoa::digit_values#8
Identical Phi Values (word) utoa_append::value#5 (word) utoa_append::value#0
Identical Phi Values (word) utoa_append::sub#3 (word) utoa_append::sub#0
Identical Phi Values (byte*) utoa_append::buffer#3 (byte*) utoa_append::buffer#0
Identical Phi Values (word) utoa_append::sub#1 (word) utoa_append::sub#3
Identical Phi Values (byte*) utoa_append::buffer#1 (byte*) utoa_append::buffer#3
Identical Phi Values (byte) ultoa::radix#1 (byte) ultoa::radix#0
Identical Phi Values (dword) ultoa::value#10 (dword) ultoa::value#1
Identical Phi Values (byte*) ultoa::buffer#10 (byte*) ultoa::buffer#5
Identical Phi Values (byte) ultoa::max_digits#10 (byte) ultoa::max_digits#7
Identical Phi Values (dword*) ultoa::digit_values#10 (dword*) ultoa::digit_values#8
Identical Phi Values (dword) ultoa_append::value#5 (dword) ultoa_append::value#0
Identical Phi Values (dword) ultoa_append::sub#3 (dword) ultoa_append::sub#0
Identical Phi Values (byte*) ultoa_append::buffer#3 (byte*) ultoa_append::buffer#0
Identical Phi Values (dword) ultoa_append::sub#1 (dword) ultoa_append::sub#3
Identical Phi Values (byte*) ultoa_append::buffer#1 (byte*) ultoa_append::buffer#3
Identical Phi Values (byte*) clrscr::line_text#2 (byte*) clrscr::line_text#5
Identical Phi Values (byte*) clrscr::line_cols#2 (byte*) clrscr::line_cols#5
Identical Phi Values (byte) clrscr::l#3 (byte) clrscr::l#2
Identical Phi Values (byte) printf_padding::length#5 (byte) printf_padding::length#6
Identical Phi Values (byte) printf_padding::pad#5 (byte) printf_padding::pad#7
Identical Phi Values (byte) printf_uint::format_sign_always#1 (byte) printf_uint::format_sign_always#0
Identical Phi Values (word) printf_uint::uvalue#1 (word) printf_uint::uvalue#0
Identical Phi Values (byte) printf_uint::format_radix#1 (byte) printf_uint::format_radix#0
Identical Phi Values (byte) printf_uint::format_min_length#1 (byte) printf_uint::format_min_length#0
Identical Phi Values (byte) printf_uint::format_justify_left#1 (byte) printf_uint::format_justify_left#0
Identical Phi Values (byte) printf_uint::format_zero_padding#1 (byte) printf_uint::format_zero_padding#0
Identical Phi Values (byte) printf_uint::format_upper_case#1 (byte) printf_uint::format_upper_case#0
Identical Phi Values (byte) printf_string::format_min_length#1 (byte) printf_string::format_min_length#0
Identical Phi Values (byte) printf_string::format_justify_left#1 (byte) printf_string::format_justify_left#0
Identical Phi Values (byte*) printf_string::str#1 (byte*) printf_string::str#0
Identical Phi Values (byte) tod_init::tod_HOURS#1 (byte) tod_init::tod_HOURS#0
Identical Phi Values (byte) tod_init::tod_MIN#1 (byte) tod_init::tod_MIN#0
Identical Phi Values (byte) tod_init::tod_SEC#1 (byte) tod_init::tod_SEC#0
Identical Phi Values (byte) tod_init::tod_TENTHS#1 (byte) tod_init::tod_TENTHS#0
Identical Phi Values (byte) tod_str::tod_HOURS#1 (byte) tod_str::tod_HOURS#0
Identical Phi Values (byte) tod_str::tod_MIN#1 (byte) tod_str::tod_MIN#0
Identical Phi Values (byte) tod_str::tod_SEC#1 (byte) tod_str::tod_SEC#0
Identical Phi Values (byte) tod_str::tod_TENTHS#1 (byte) tod_str::tod_TENTHS#0
Identical Phi Values (byte) legal::row#3 (byte) legal::row#0
Identical Phi Values (byte) legal::column#4 (byte) legal::column#0
Identical Phi Values (byte) legal::row#1 (byte) legal::row#3
Identical Phi Values (byte) legal::column#1 (byte) legal::column#4
Identical Phi Values (byte) print::i1#10 (byte) print::i1#2
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (void*) memset::return#0 (void*) memset::str#3
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) memcpy::$1 [15] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2
Simple Condition (bool~) memset::$1 [22] if((word) memset::num#2<=(byte) 0) goto memset::@1
Simple Condition (bool~) memset::$3 [29] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@4
Simple Condition (bool~) strupr::$1 [36] if((byte) 0!=*((byte*) strupr::src#2)) goto strupr::@2
Simple Condition (bool~) strlen::$0 [48] if((byte) 0!=*((byte*) strlen::str#3)) goto strlen::@2
Simple Condition (bool~) uctoa::$0 [56] if((byte) uctoa::radix#0==(const byte) DECIMAL) goto uctoa::@1
Simple Condition (bool~) uctoa::$1 [60] if((byte) uctoa::radix#0==(const byte) HEXADECIMAL) goto uctoa::@2
Simple Condition (bool~) uctoa::$2 [64] if((byte) uctoa::radix#0==(const byte) OCTAL) goto uctoa::@3
Simple Condition (bool~) uctoa::$3 [68] if((byte) uctoa::radix#0==(const byte) BINARY) goto uctoa::@4
Simple Condition (bool~) uctoa::$5 [85] if((byte) uctoa::digit#2<(byte~) uctoa::$4) goto uctoa::@11
Simple Condition (bool~) uctoa_append::$0 [108] if((byte) uctoa_append::value#2>=(byte) uctoa_append::sub#0) goto uctoa_append::@2
Simple Condition (bool~) utoa::$0 [117] if((byte) utoa::radix#0==(const byte) DECIMAL) goto utoa::@1
Simple Condition (bool~) utoa::$1 [121] if((byte) utoa::radix#0==(const byte) HEXADECIMAL) goto utoa::@2
Simple Condition (bool~) utoa::$2 [125] if((byte) utoa::radix#0==(const byte) OCTAL) goto utoa::@3
Simple Condition (bool~) utoa::$3 [129] if((byte) utoa::radix#0==(const byte) BINARY) goto utoa::@4
Simple Condition (bool~) utoa::$5 [146] if((byte) utoa::digit#2<(byte~) utoa::$4) goto utoa::@11
Simple Condition (bool~) utoa_append::$0 [171] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2
Simple Condition (bool~) ultoa::$0 [180] if((byte) ultoa::radix#0==(const byte) DECIMAL) goto ultoa::@1
Simple Condition (bool~) ultoa::$1 [184] if((byte) ultoa::radix#0==(const byte) HEXADECIMAL) goto ultoa::@2
Simple Condition (bool~) ultoa::$2 [188] if((byte) ultoa::radix#0==(const byte) OCTAL) goto ultoa::@3
Simple Condition (bool~) ultoa::$3 [192] if((byte) ultoa::radix#0==(const byte) BINARY) goto ultoa::@4
Simple Condition (bool~) ultoa::$5 [209] if((byte) ultoa::digit#2<(byte~) ultoa::$4) goto ultoa::@11
Simple Condition (bool~) ultoa_append::$0 [234] if((dword) ultoa_append::value#2>=(dword) ultoa_append::sub#0) goto ultoa_append::@2
Simple Condition (bool~) clrscr::$0 [244] if((byte) clrscr::l#2<(byte) $19) goto clrscr::@2
Simple Condition (bool~) clrscr::$1 [252] if((byte) clrscr::c#2<(byte) $28) goto clrscr::@5
Simple Condition (bool~) gotoxy::$1 [262] if((byte) gotoxy::y#3<=(byte) $19) goto gotoxy::@1
Simple Condition (bool~) gotoxy::$3 [265] if((byte) gotoxy::x#3<(byte) $28) goto gotoxy::@2
Simple Condition (bool~) cputc::$0 [280] if((byte) cputc::c#3==(byte) '
') goto cputc::@1
Simple Condition (bool~) cputc::$2 [286] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return
Simple Condition (bool~) cscroll::$1 [296] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return
Simple Condition (bool~) cscroll::$7 [298] if((byte) 0!=(byte) conio_scroll_enable) goto cscroll::@3
Simple Condition (bool~) cputs::$2 [332] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2
Simple Condition (bool~) printf_padding::$0 [340] if((byte) printf_padding::i#2<(byte) printf_padding::length#6) goto printf_padding::@2
Simple Condition (bool~) printf_ulong::$5 [347] if((byte) 0!=(byte) printf_ulong::format_sign_always#2) goto printf_ulong::@1
Simple Condition (bool~) printf_uint::$5 [368] if((byte) 0!=(byte) printf_uint::format_sign_always#0) goto printf_uint::@1
Simple Condition (bool~) printf_uchar::$5 [389] if((byte) 0!=(byte) printf_uchar::format_sign_always#2) goto printf_uchar::@1
Simple Condition (bool~) printf_number_buffer::$0 [411] if((byte) 0==(byte) printf_number_buffer::format_min_length#3) goto printf_number_buffer::@1
Simple Condition (bool~) printf_number_buffer::$20 [425] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@13
Simple Condition (bool~) printf_number_buffer::$23 [430] if((signed byte) printf_number_buffer::padding#1>=(signed byte) 0) goto printf_number_buffer::@1
Simple Condition (bool~) printf_number_buffer::$7 [434] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@3
Simple Condition (bool~) printf_number_buffer::$12 [444] if((byte) 0==(byte) printf_number_buffer::format_upper_case#10) goto printf_number_buffer::@5
Simple Condition (bool~) printf_string::$0 [465] if((byte) 0==(byte) printf_string::format_min_length#0) goto printf_string::@1
Simple Condition (bool~) printf_string::$12 [479] if((signed byte) printf_string::padding#1>=(signed byte) 0) goto printf_string::@1
Simple Condition (bool~) queen::$0 [590] if((byte) queen::column<=(byte) 8) goto queen::@2
Simple Condition (bool~) queen::$2 [597] if((byte) 0==(byte~) queen::$1) goto queen::@3
Simple Condition (bool~) queen::$3 [601] if((byte) queen::r==(byte) 8) goto queen::@4
Simple Condition (bool~) legal::$1 [616] if((byte) legal::i#2<=(byte~) legal::$0) goto legal::@2
Simple Condition (bool~) legal::$2 [618] if(*((const byte*) board + (byte) legal::i#2)==(byte) legal::column#0) goto legal::@4
Simple Condition (bool~) legal::$6 [632] if((byte~) legal::$3!=(byte~) legal::$4) goto legal::@5
Simple Condition (bool~) diff::$0 [639] if((byte) diff::a#2<(byte) diff::b#2) goto diff::@1
Simple Condition (bool~) print::$2 [662] if((byte) print::i#2<=(byte) 8) goto print::@2
Simple Condition (bool~) print::$4 [675] if((byte) print::i1#2<=(byte) 8) goto print::@5
Simple Condition (bool~) print::$6 [689] if((byte) print::j#2<=(byte) 8) goto print::@7
Simple Condition (bool~) print::$7 [691] if(*((const byte*) board + (byte) print::i1#2)==(byte) print::j#2) goto print::@9
Successful SSA optimization Pass2ConditionalJumpSimplification
Rewriting && if()-condition to two if()s [3] (bool~) toupper::$2 ← (bool~) toupper::$0 && (bool~) toupper::$1
Rewriting ! if()-condition to reversed if() [89] (bool~) uctoa::$8 ← ! (bool~) uctoa::$7
Rewriting || if()-condition to two if()s [88] (bool~) uctoa::$7 ← (byte) uctoa::started#2 || (bool~) uctoa::$6
Rewriting ! if()-condition to reversed if() [151] (bool~) utoa::$8 ← ! (bool~) utoa::$7
Rewriting || if()-condition to two if()s [150] (bool~) utoa::$7 ← (byte) utoa::started#2 || (bool~) utoa::$6
Rewriting ! if()-condition to reversed if() [214] (bool~) ultoa::$8 ← ! (bool~) ultoa::$7
Rewriting || if()-condition to two if()s [213] (bool~) ultoa::$7 ← (byte) ultoa::started#2 || (bool~) ultoa::$6
Rewriting ! if()-condition to reversed if() [417] (bool~) printf_number_buffer::$5 ← ! (bool~) printf_number_buffer::$4
Rewriting && if()-condition to two if()s [416] (bool~) printf_number_buffer::$4 ← (bool~) printf_number_buffer::$3 && (signed byte) printf_number_buffer::padding#10
Rewriting && if()-condition to two if()s [415] (bool~) printf_number_buffer::$3 ← (bool~) printf_number_buffer::$1 && (bool~) printf_number_buffer::$2
Rewriting ! if()-condition to reversed if() [439] (bool~) printf_number_buffer::$10 ← ! (bool~) printf_number_buffer::$9
Rewriting && if()-condition to two if()s [438] (bool~) printf_number_buffer::$9 ← (byte) printf_number_buffer::format_zero_padding#10 && (signed byte) printf_number_buffer::padding#10
Rewriting ! if()-condition to reversed if() [453] (bool~) printf_number_buffer::$17 ← ! (bool~) printf_number_buffer::$16
Rewriting && if()-condition to two if()s [452] (bool~) printf_number_buffer::$16 ← (bool~) printf_number_buffer::$15 && (signed byte) printf_number_buffer::padding#10
Rewriting && if()-condition to two if()s [451] (bool~) printf_number_buffer::$15 ← (byte) printf_number_buffer::format_justify_left#10 && (bool~) printf_number_buffer::$14
Rewriting ! if()-condition to reversed if() [469] (bool~) printf_string::$3 ← ! (bool~) printf_string::$2
Rewriting && if()-condition to two if()s [468] (bool~) printf_string::$2 ← (bool~) printf_string::$1 && (signed byte) printf_string::padding#3
Rewriting ! if()-condition to reversed if() [484] (bool~) printf_string::$7 ← ! (bool~) printf_string::$6
Rewriting && if()-condition to two if()s [483] (bool~) printf_string::$6 ← (byte) printf_string::format_justify_left#0 && (signed byte) printf_string::padding#3
Successful SSA optimization Pass2ConditionalAndOrRewriting
Warning! Adding boolean cast to non-boolean condition (byte) uctoa::started#2
Warning! Adding boolean cast to non-boolean condition (byte) utoa::started#2
Warning! Adding boolean cast to non-boolean condition (byte) ultoa::started#2
Warning! Adding boolean cast to non-boolean condition (byte) printf_number_buffer::format_zero_padding#10
Warning! Adding boolean cast to non-boolean condition (byte) printf_number_buffer::format_justify_left#10
Warning! Adding boolean cast to non-boolean condition (byte) printf_string::format_justify_left#0
Warning! Adding boolean cast to non-boolean condition (signed byte) printf_number_buffer::padding#10
Warning! Adding boolean cast to non-boolean condition (signed byte) printf_number_buffer::padding#10
Warning! Adding boolean cast to non-boolean condition (signed byte) printf_number_buffer::padding#10
Warning! Adding boolean cast to non-boolean condition (signed byte) printf_string::padding#3
Warning! Adding boolean cast to non-boolean condition (signed byte) printf_string::padding#3
Constant right-side identified [301] (word) memcpy::num#0 ← (unumber)(number) $19*(number) $28-(number) $28
Constant right-side identified [306] (word) memcpy::num#1 ← (unumber)(number) $19*(number) $28-(number) $28
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const word) strlen::len#0 = 0
Constant (const byte) uctoa::max_digits#0 = 0
Constant (const byte*) uctoa::digit_values#0 = (byte*) 0
Constant (const byte) uctoa::max_digits#1 = 3
Constant (const byte*) uctoa::digit_values#1 = RADIX_DECIMAL_VALUES_CHAR
Constant (const byte) uctoa::max_digits#2 = 2
Constant (const byte*) uctoa::digit_values#2 = RADIX_HEXADECIMAL_VALUES_CHAR
Constant (const byte) uctoa::max_digits#3 = 3
Constant (const byte*) uctoa::digit_values#3 = RADIX_OCTAL_VALUES_CHAR
Constant (const byte) uctoa::max_digits#4 = 8
Constant (const byte*) uctoa::digit_values#4 = RADIX_BINARY_VALUES_CHAR
Constant (const byte) uctoa::started#0 = 0
Constant (const byte) uctoa::digit#0 = 0
Constant (const byte) uctoa::started#1 = 1
Constant (const byte) uctoa_append::digit#0 = 0
Constant (const byte) utoa::max_digits#0 = 0
Constant (const word*) utoa::digit_values#0 = (word*) 0
Constant (const byte) utoa::max_digits#1 = 5
Constant (const word*) utoa::digit_values#1 = RADIX_DECIMAL_VALUES
Constant (const byte) utoa::max_digits#2 = 4
Constant (const word*) utoa::digit_values#2 = RADIX_HEXADECIMAL_VALUES
Constant (const byte) utoa::max_digits#3 = 6
Constant (const word*) utoa::digit_values#3 = RADIX_OCTAL_VALUES
Constant (const byte) utoa::max_digits#4 = $10
Constant (const word*) utoa::digit_values#4 = RADIX_BINARY_VALUES
Constant (const byte) utoa::started#0 = 0
Constant (const byte) utoa::digit#0 = 0
Constant (const byte) utoa::started#1 = 1
Constant (const byte) utoa_append::digit#0 = 0
Constant (const byte) ultoa::max_digits#0 = 0
Constant (const dword*) ultoa::digit_values#0 = (dword*) 0
Constant (const byte) ultoa::max_digits#1 = $a
Constant (const dword*) ultoa::digit_values#1 = RADIX_DECIMAL_VALUES_LONG
Constant (const byte) ultoa::max_digits#2 = 8
Constant (const dword*) ultoa::digit_values#2 = RADIX_HEXADECIMAL_VALUES_LONG
Constant (const byte) ultoa::max_digits#3 = $b
Constant (const dword*) ultoa::digit_values#3 = RADIX_OCTAL_VALUES_LONG
Constant (const byte) ultoa::max_digits#4 = $20
Constant (const dword*) ultoa::digit_values#4 = RADIX_BINARY_VALUES_LONG
Constant (const byte) ultoa::started#0 = 0
Constant (const byte) ultoa::digit#0 = 0
Constant (const byte) ultoa::started#1 = 1
Constant (const byte) ultoa_append::digit#0 = 0
Constant (const byte*) clrscr::line_text#0 = CONIO_SCREEN_TEXT
Constant (const byte*) clrscr::line_cols#0 = CONIO_SCREEN_COLORS
Constant (const byte) clrscr::l#0 = 0
Constant (const byte) clrscr::c#0 = 0
Constant (const byte) gotoxy::y#0 = 0
Constant (const byte) gotoxy::x#0 = 0
Constant (const void*) memcpy::destination#0 = (void*)CONIO_SCREEN_TEXT
Constant (const void*) memcpy::source#0 = (void*)CONIO_SCREEN_TEXT+$28
Constant (const word) memcpy::num#0 = (unumber)$19*$28-$28
Constant (const void*) memcpy::destination#1 = (void*)CONIO_SCREEN_COLORS
Constant (const void*) memcpy::source#1 = (void*)CONIO_SCREEN_COLORS+$28
Constant (const word) memcpy::num#1 = (unumber)$19*$28-$28
Constant (const void*) memset::str#0 = (void*)CONIO_SCREEN_TEXT+(word)$19*$28-$28
Constant (const byte) memset::c#0 = ' '
Constant (const word) memset::num#0 = $28
Constant (const void*) memset::str#1 = (void*)CONIO_SCREEN_COLORS+(word)$19*$28-$28
Constant (const word) memset::num#1 = $28
Constant (const byte) gotoxy::x#1 = 0
Constant (const byte) gotoxy::y#1 = 0
Constant (const byte) cputs::c#0 = 0
Constant (const byte) printf_padding::i#0 = 0
Constant (const byte) printf_ulong::$1 = '+'
Constant (const byte) printf_ulong::$0 = 0
Constant (const byte*) ultoa::buffer#5 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant (const byte*) printf_number_buffer::buffer_digits#0 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant (const byte) printf_uint::$1 = '+'
Constant (const byte) printf_uint::$0 = 0
Constant (const byte*) utoa::buffer#5 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant (const byte*) printf_number_buffer::buffer_digits#1 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant (const byte) printf_uchar::$1 = '+'
Constant (const byte) printf_uchar::$0 = 0
Constant (const byte*) uctoa::buffer#5 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant (const byte*) printf_number_buffer::buffer_digits#2 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant (const signed byte) printf_number_buffer::padding#0 = 0
Constant (const signed byte) printf_number_buffer::padding#2 = 0
Constant (const byte) printf_padding::pad#0 = ' '
Constant (const byte) printf_padding::pad#1 = '0'
Constant (const byte) printf_padding::pad#2 = ' '
Constant (const signed byte) printf_string::padding#0 = 0
Constant (const signed byte) printf_string::padding#2 = 0
Constant (const byte) printf_padding::pad#3 = ' '
Constant (const byte) printf_padding::pad#4 = ' '
Constant (const byte*) tod_str::return#0 = tod_buffer
Constant (const to_nomodify byte*) cputs::s#3 = main::s
Constant (const to_nomodify byte*) cputs::s#4 = main::s1
Constant (const word) printf_uint::uvalue#0 = 8
Constant (const byte) printf_uint::format_min_length#0 = 0
Constant (const byte) printf_uint::format_justify_left#0 = 0
Constant (const byte) printf_uint::format_sign_always#0 = 0
Constant (const byte) printf_uint::format_zero_padding#0 = 0
Constant (const byte) printf_uint::format_upper_case#0 = 0
Constant (const byte) printf_uint::format_radix#0 = DECIMAL
Constant (const to_nomodify byte*) cputs::s#5 = main::s2
Constant (const byte) printf_ulong::format_min_length#0 = 0
Constant (const byte) printf_ulong::format_justify_left#0 = 0
Constant (const byte) printf_ulong::format_sign_always#0 = 0
Constant (const byte) printf_ulong::format_zero_padding#0 = 0
Constant (const byte) printf_ulong::format_upper_case#0 = 0
Constant (const byte) printf_ulong::format_radix#0 = DECIMAL
Constant (const to_nomodify byte*) cputs::s#6 = main::s3
Constant (const byte) printf_string::format_min_length#0 = 0
Constant (const byte) printf_string::format_justify_left#0 = 0
Constant (const to_nomodify byte*) cputs::s#7 = main::s4
Constant (const byte) legal::i#0 = 1
Constant (const byte) legal::return#1 = 1
Constant (const byte) legal::return#2 = 0
Constant (const byte) legal::return#3 = 0
Constant (const byte) gotoxy::x#2 = 0
Constant (const byte) gotoxy::y#2 = 5
Constant (const to_nomodify byte*) cputs::s#8 = print::s
Constant (const byte) printf_ulong::format_min_length#1 = 0
Constant (const byte) printf_ulong::format_justify_left#1 = 0
Constant (const byte) printf_ulong::format_sign_always#1 = 0
Constant (const byte) printf_ulong::format_zero_padding#1 = 0
Constant (const byte) printf_ulong::format_upper_case#1 = 0
Constant (const byte) printf_ulong::format_radix#1 = DECIMAL
Constant (const to_nomodify byte*) cputs::s#9 = print::s1
Constant (const byte) print::i#0 = 1
Constant (const byte) printf_uchar::format_min_length#0 = 0
Constant (const byte) printf_uchar::format_justify_left#0 = 0
Constant (const byte) printf_uchar::format_sign_always#0 = 0
Constant (const byte) printf_uchar::format_zero_padding#0 = 0
Constant (const byte) printf_uchar::format_upper_case#0 = 0
Constant (const byte) printf_uchar::format_radix#0 = HEXADECIMAL
Constant (const byte) print::i1#0 = 1
Constant (const to_nomodify byte*) cputs::s#10 = print::s2
Constant (const byte) printf_uchar::format_min_length#1 = 0
Constant (const byte) printf_uchar::format_justify_left#1 = 0
Constant (const byte) printf_uchar::format_sign_always#1 = 0
Constant (const byte) printf_uchar::format_zero_padding#1 = 0
Constant (const byte) printf_uchar::format_upper_case#1 = 0
Constant (const byte) printf_uchar::format_radix#1 = HEXADECIMAL
Constant (const byte) print::j#0 = 1
Constant (const to_nomodify byte*) cputs::s#11 = print::s3
Constant (const to_nomodify byte*) cputs::s#12 = print::s4
Constant (const byte) conio_textcolor = CONIO_TEXTCOLOR_DEFAULT
Constant (const byte) conio_scroll_enable = 1
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) memset::c#1 = conio_textcolor
Constant (const word) utoa::value#1 = printf_uint::uvalue#0
Constant (const byte) utoa::radix#0 = printf_uint::format_radix#0
Constant (const byte) printf_number_buffer::format_min_length#1 = printf_uint::format_min_length#0
Constant (const byte) printf_number_buffer::format_justify_left#1 = printf_uint::format_justify_left#0
Constant (const byte) printf_number_buffer::format_sign_always#1 = printf_uint::format_sign_always#0
Constant (const byte) printf_number_buffer::format_zero_padding#1 = printf_uint::format_zero_padding#0
Constant (const byte) printf_number_buffer::format_upper_case#1 = printf_uint::format_upper_case#0
Constant (const byte) printf_number_buffer::format_radix#1 = printf_uint::format_radix#0
Constant (const signed byte) printf_string::$13 = (signed byte)printf_string::format_min_length#0
Constant (const byte*) tod_str::return#2 = tod_str::return#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) printf_string::str#0 = tod_str::return#2
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) strlen::str#2 = printf_string::str#0
Constant (const to_nomodify byte*) cputs::s#2 = printf_string::str#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [117] if((const byte) utoa::radix#0==(const byte) DECIMAL) goto utoa::@1
if() condition always false - eliminating [121] if((const byte) utoa::radix#0==(const byte) HEXADECIMAL) goto utoa::@2
if() condition always false - eliminating [125] if((const byte) utoa::radix#0==(const byte) OCTAL) goto utoa::@3
if() condition always false - eliminating [129] if((const byte) utoa::radix#0==(const byte) BINARY) goto utoa::@4
if() condition always true - replacing block destination [298] if((byte) 0!=(const byte) conio_scroll_enable) goto cscroll::@3
if() condition always false - eliminating [368] if((byte) 0!=(const byte) printf_uint::format_sign_always#0) goto printf_uint::@1
if() condition always true - replacing block destination [465] if((byte) 0==(const byte) printf_string::format_min_length#0) goto printf_string::@1
Successful SSA optimization Pass2ConstantIfs
Rewriting conditional comparison [262] if((byte) gotoxy::y#3<=(byte) $19) goto gotoxy::@1
Rewriting conditional comparison [590] if((byte) queen::column<=(byte) 8) goto queen::@2
Rewriting conditional comparison [662] if((byte) print::i#2<=(byte) 8) goto print::@2
Rewriting conditional comparison [675] if((byte) print::i1#2<=(byte) 8) goto print::@5
Rewriting conditional comparison [689] if((byte) print::j#2<=(byte) 8) goto print::@7
Simplifying constant evaluating to zero (signed byte)(const byte) printf_string::format_min_length#0 in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero (byte*)&printf_buffer in [351] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) ← (byte~) printf_ulong::$2
Simplifying expression containing zero (byte*)&printf_buffer in [356] (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Simplifying expression containing zero (byte*)&printf_buffer in [372] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) ← (byte~) printf_uint::$2
Simplifying expression containing zero (byte*)&printf_buffer in [377] (byte) printf_number_buffer::buffer_sign#1 ← *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Simplifying expression containing zero (byte*)&printf_buffer in [393] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) ← (byte~) printf_uchar::$2
Simplifying expression containing zero (byte*)&printf_buffer in [398] (byte) printf_number_buffer::buffer_sign#2 ← *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Simplifying expression containing zero printf_string::len#0 in [477] (signed byte) printf_string::padding#1 ← (const signed byte) printf_string::$13 - (signed byte) printf_string::len#0
Simplifying expression containing zero tod_buffer in [511] *((const byte*) tod_buffer + (byte) 0) ← (byte~) tod_str::$1
Simplifying expression containing zero (byte*)&TOD_ZERO in [548] (byte) tod_init::tod_TENTHS#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_TENTHS)
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (void*) memcpy::return#2 and assignment [202] (void*) memcpy::return#2 ← (void*) memcpy::destination#2
Eliminating unused variable (void*) memcpy::return#3 and assignment [204] (void*) memcpy::return#3 ← (void*) memcpy::destination#2
Eliminating unused variable (void*) memset::return#2 and assignment [206] (void*) memset::return#2 ← (void*) memset::str#3
Eliminating unused variable (void*) memset::return#3 and assignment [208] (void*) memset::return#3 ← (void*) memset::str#3
Eliminating unused variable (byte) printf_number_buffer::format_sign_always#0 and assignment [239] (byte) printf_number_buffer::format_sign_always#0 ← (byte) printf_ulong::format_sign_always#2
Eliminating unused variable (byte) printf_number_buffer::format_radix#0 and assignment [242] (byte) printf_number_buffer::format_radix#0 ← (byte) printf_ulong::format_radix#2
Eliminating unused variable (byte) printf_number_buffer::format_sign_always#2 and assignment [261] (byte) printf_number_buffer::format_sign_always#2 ← (byte) printf_uchar::format_sign_always#2
Eliminating unused variable (byte) printf_number_buffer::format_radix#2 and assignment [264] (byte) printf_number_buffer::format_radix#2 ← (byte) printf_uchar::format_radix#2
Eliminating unused variable (byte*) strupr::return#2 and assignment [301] (byte*) strupr::return#2 ← (byte*) strupr::str#0
Eliminating unused variable (struct TIME_OF_DAY) tod_read::return#0 and assignment [333] (struct TIME_OF_DAY) tod_read::return#0 ← struct-unwound {(byte) tod_read::return_TENTHS#0, (byte) tod_read::return_SEC#0, (byte) tod_read::return_MIN#0, (byte) tod_read::return_HOURS#0}
Eliminating unused variable (struct TIME_OF_DAY) tod_read::return#1 and assignment [334] (struct TIME_OF_DAY) tod_read::return#1 ← struct-unwound {(byte) tod_read::return_TENTHS#0, (byte) tod_read::return_SEC#0, (byte) tod_read::return_MIN#0, (byte) tod_read::return_HOURS#0}
Eliminating unused constant (const byte) uctoa::max_digits#0
Eliminating unused constant (const byte*) uctoa::digit_values#0
Eliminating unused constant (const byte) utoa::max_digits#0
Eliminating unused constant (const word*) utoa::digit_values#0
Eliminating unused constant (const byte) utoa::radix#0
Eliminating unused constant (const byte) ultoa::max_digits#0
Eliminating unused constant (const dword*) ultoa::digit_values#0
Eliminating unused constant (const byte) cputs::c#0
Eliminating unused constant (const byte) printf_number_buffer::format_sign_always#1
Eliminating unused constant (const byte) printf_number_buffer::format_radix#1
Eliminating unused constant (const byte) printf_string::format_min_length#0
Eliminating unused constant (const signed byte) printf_string::$13
Eliminating unused constant (const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN
Eliminating unused constant (const byte) OFFSET_STRUCT_TIME_OF_DAY_TENTHS
Eliminating unused constant (const byte) conio_scroll_enable
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant (const byte) printf_uint::format_sign_always#0
Eliminating unused constant (const byte) printf_uint::format_radix#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating variable (byte*) utoa::buffer#0 from unused block utoa::@9
Eliminating variable (byte*) utoa::buffer#1 from unused block utoa::@9
Eliminating variable (byte*) utoa::buffer#2 from unused block utoa::@9
Eliminating variable (word) strlen::return#3 from unused block printf_string::@3
Eliminating variable (word~) printf_string::$9 from unused block printf_string::@7
Eliminating variable (signed byte) printf_string::len#0 from unused block printf_string::@7
Eliminating variable (signed byte) printf_string::padding#1 from unused block printf_string::@7
Removing unused block utoa::@6
Removing PHI-reference to removed block (utoa::@2) in block utoa::@5
Removing PHI-reference to removed block (utoa::@2) in block utoa::@5
Removing unused block utoa::@2
Removing unused block utoa::@7
Removing PHI-reference to removed block (utoa::@3) in block utoa::@5
Removing PHI-reference to removed block (utoa::@3) in block utoa::@5
Removing unused block utoa::@3
Removing unused block utoa::@8
Removing PHI-reference to removed block (utoa::@4) in block utoa::@5
Removing PHI-reference to removed block (utoa::@4) in block utoa::@5
Removing unused block utoa::@4
Removing unused block utoa::@9
Removing PHI-reference to removed block (cscroll::@2) in block gotoxy
Removing PHI-reference to removed block (cscroll::@2) in block gotoxy
Removing unused block cscroll::@2
Removing unused block cscroll::@8
Removing PHI-reference to removed block (printf_uint::@1) in block printf_uint::@3
Removing unused block printf_uint::@1
Removing PHI-reference to removed block (printf_string::@3) in block strlen
Removing unused block printf_string::@3
Removing PHI-reference to removed block (printf_string::@7) in block printf_string::@1
Removing unused block printf_string::@7
Removing PHI-reference to removed block (printf_string::@4) in block printf_string::@1
Removing unused block printf_string::@4
Successful SSA optimization Pass2EliminateUnusedBlocks
Adding number conversion cast (unumber) 0 in (bool~) uctoa::$11 ← (number) 0 != (byte) uctoa::started#2
Adding number conversion cast (unumber) 0 in (bool~) utoa::$12 ← (number) 0 != (byte) utoa::started#2
Adding number conversion cast (unumber) 0 in (bool~) ultoa::$12 ← (number) 0 != (byte) ultoa::started#2
Adding number conversion cast (unumber) $19+1 in if((byte) gotoxy::y#3<(byte) $19+(number) 1) goto gotoxy::@1
Adding number conversion cast (unumber) 1 in if((byte) gotoxy::y#3<(unumber)(byte) $19+(number) 1) goto gotoxy::@1
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$33 ← (number) 0 != (byte) printf_number_buffer::format_zero_padding#10
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$34 ← (number) 0 != (byte) printf_number_buffer::format_justify_left#10
Adding number conversion cast (unumber) 0 in (bool~) printf_string::$16 ← (number) 0 != (const byte) printf_string::format_justify_left#0
Adding number conversion cast (unumber) 8+1 in if((byte) queen::column<(byte) 8+(number) 1) goto queen::@2
Adding number conversion cast (unumber) 1 in if((byte) queen::column<(unumber)(byte) 8+(number) 1) goto queen::@2
Adding number conversion cast (unumber) 8+1 in if((byte) print::i#2<(byte) 8+(number) 1) goto print::@2
Adding number conversion cast (unumber) 1 in if((byte) print::i#2<(unumber)(byte) 8+(number) 1) goto print::@2
Adding number conversion cast (unumber) 8+1 in if((byte) print::i1#2<(byte) 8+(number) 1) goto print::@5
Adding number conversion cast (unumber) 1 in if((byte) print::i1#2<(unumber)(byte) 8+(number) 1) goto print::@5
Adding number conversion cast (unumber) 8+1 in if((byte) print::j#2<(byte) 8+(number) 1) goto print::@7
Adding number conversion cast (unumber) 1 in if((byte) print::j#2<(unumber)(byte) 8+(number) 1) goto print::@7
Adding number conversion cast (snumber) 0 in (bool~) printf_number_buffer::$35 ← (number) 0 != (signed byte) printf_number_buffer::padding#10
Adding number conversion cast (snumber) 0 in (bool~) printf_number_buffer::$36 ← (number) 0 != (signed byte) printf_number_buffer::padding#10
Adding number conversion cast (snumber) 0 in (bool~) printf_number_buffer::$37 ← (number) 0 != (signed byte) printf_number_buffer::padding#10
Adding number conversion cast (snumber) 0 in (bool~) printf_string::$17 ← (number) 0 != (signed byte) printf_string::padding#3
Adding number conversion cast (snumber) 0 in (bool~) printf_string::$18 ← (number) 0 != (signed byte) printf_string::padding#3
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast (byte) $19+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast (byte) 8+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast (byte) 8+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast (byte) 8+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast (byte) 8+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Alias candidate removed (volatile)queen::row#0 = queen::r 
Identical Phi Values (byte*) strlen::str#5 (byte*) strlen::str#1
Identical Phi Values (byte) utoa::max_digits#7 (const byte) utoa::max_digits#1
Identical Phi Values (word*) utoa::digit_values#8 (const word*) utoa::digit_values#1
Identical Phi Values (byte) gotoxy::y#3 (const byte) gotoxy::y#2
Identical Phi Values (byte) gotoxy::x#3 (const byte) gotoxy::x#2
Identical Phi Values (byte~) printf_uint::$2 (const byte) printf_uint::$0
Identical Phi Values (signed byte) printf_string::padding#3 (const signed byte) printf_string::padding#0
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) toupper::$0 [2] if((byte) toupper::ch#0>=(byte) 'a') goto toupper::@3
Simple Condition (bool~) uctoa::$11 [61] if((byte) 0!=(byte) uctoa::started#2) goto uctoa::@14
Simple Condition (bool~) utoa::$12 [89] if((byte) 0!=(byte) utoa::started#2) goto utoa::@14
Simple Condition (bool~) ultoa::$12 [129] if((byte) 0!=(byte) ultoa::started#2) goto ultoa::@14
Simple Condition (bool~) printf_number_buffer::$1 [256] if((byte) 0==(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@23
Simple Condition (bool~) printf_number_buffer::$33 [272] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@24
Simple Condition (bool~) printf_number_buffer::$34 [282] if((byte) 0!=(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@26
Simple Condition (bool~) printf_string::$1 [290] if((byte) 0==(const byte) printf_string::format_justify_left#0) goto printf_string::@11
Simple Condition (bool~) printf_string::$16 [293] if((byte) 0!=(const byte) printf_string::format_justify_left#0) goto printf_string::@12
Simple Condition (bool~) toupper::$1 [441] if((byte) toupper::ch#0<=(byte) 'z') goto toupper::@1
Simple Condition (bool~) uctoa::$6 [442] if((byte) uctoa::value#2>=(byte) uctoa::digit_value#0) goto uctoa::@14
Simple Condition (bool~) utoa::$6 [443] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@14
Simple Condition (bool~) ultoa::$6 [444] if((dword) ultoa::value#2>=(dword) ultoa::digit_value#0) goto ultoa::@14
Simple Condition (bool~) printf_number_buffer::$35 [446] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@8
Simple Condition (bool~) printf_number_buffer::$2 [447] if((byte) 0==(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@22
Simple Condition (bool~) printf_number_buffer::$36 [449] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@10
Simple Condition (bool~) printf_number_buffer::$37 [451] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@12
Simple Condition (bool~) printf_number_buffer::$14 [452] if((byte) 0==(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@25
Simple Condition (bool~) printf_string::$17 [454] if((signed byte) 0!=(const signed byte) printf_string::padding#0) goto printf_string::@5
Simple Condition (bool~) printf_string::$18 [456] if((signed byte) 0!=(const signed byte) printf_string::padding#0) goto printf_string::@6
Successful SSA optimization Pass2ConditionalJumpSimplification
Negating conditional jump and destination [2] if((byte) toupper::ch#0<(byte) 'a') goto toupper::@2
Negating conditional jump and destination [256] if((byte) 0!=(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@2
Negating conditional jump and destination [272] if((byte) 0==(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@4
Negating conditional jump and destination [282] if((byte) 0==(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@return
Negating conditional jump and destination [290] if((byte) 0!=(const byte) printf_string::format_justify_left#0) goto printf_string::@2
Negating conditional jump and destination [293] if((byte) 0==(const byte) printf_string::format_justify_left#0) goto printf_string::@return
Negating conditional jump and destination [447] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@2
Negating conditional jump and destination [452] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@return
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [47] (byte*) uctoa::buffer#0 ← ++ (const byte*) uctoa::buffer#5
Constant right-side identified [83] (byte~) utoa::$4 ← (const byte) utoa::max_digits#1 - (byte) 1
Constant right-side identified [114] (byte*) ultoa::buffer#0 ← ++ (const byte*) ultoa::buffer#5
Constant right-side identified [294] (byte) printf_padding::length#3 ← (byte)(const signed byte) printf_string::padding#0
Constant right-side identified [296] (byte) printf_padding::length#4 ← (byte)(const signed byte) printf_string::padding#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) uctoa::buffer#0 = ++uctoa::buffer#5
Constant (const byte) utoa::$4 = utoa::max_digits#1-1
Constant (const byte*) ultoa::buffer#0 = ++ultoa::buffer#5
Constant (const byte) printf_padding::length#3 = (byte)printf_string::padding#0
Constant (const byte) printf_padding::length#4 = (byte)printf_string::padding#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [165] if((const byte) gotoxy::y#2<(byte) $19+(byte) 1) goto gotoxy::@1
if() condition always true - replacing block destination [167] if((const byte) gotoxy::x#2<(byte) $28) goto gotoxy::@2
if() condition always false - eliminating [290] if((byte) 0!=(const byte) printf_string::format_justify_left#0) goto printf_string::@2
if() condition always true - replacing block destination [293] if((byte) 0==(const byte) printf_string::format_justify_left#0) goto printf_string::@return
if() condition always false - eliminating [454] if((signed byte) 0!=(const signed byte) printf_string::padding#0) goto printf_string::@5
if() condition always false - eliminating [456] if((signed byte) 0!=(const signed byte) printf_string::padding#0) goto printf_string::@6
Successful SSA optimization Pass2ConstantIfs
Simplifying constant evaluating to zero (byte)(const signed byte) printf_string::padding#0 in 
Simplifying constant evaluating to zero (byte)(const signed byte) printf_string::padding#0 in 
Successful SSA optimization PassNSimplifyConstantZero
Eliminating unused constant (const byte*) strlen::str#2
Eliminating unused constant (const byte) utoa::max_digits#2
Eliminating unused constant (const word*) utoa::digit_values#2
Eliminating unused constant (const byte) utoa::max_digits#3
Eliminating unused constant (const word*) utoa::digit_values#3
Eliminating unused constant (const byte) utoa::max_digits#4
Eliminating unused constant (const word*) utoa::digit_values#4
Eliminating unused constant (const byte) gotoxy::x#1
Eliminating unused constant (const byte) gotoxy::y#1
Eliminating unused constant (const byte) printf_uint::$1
Eliminating unused constant (const signed byte) printf_string::padding#0
Eliminating unused constant (const signed byte) printf_string::padding#2
Eliminating unused constant (const byte) printf_string::format_justify_left#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant (const word*) RADIX_BINARY_VALUES
Eliminating unused constant (const word*) RADIX_OCTAL_VALUES
Eliminating unused constant (const word*) RADIX_HEXADECIMAL_VALUES
Successful SSA optimization PassNEliminateUnusedVars
Removing PHI-reference to removed block (gotoxy::@3) in block gotoxy::@1
Removing unused block gotoxy::@3
Removing PHI-reference to removed block (gotoxy::@4) in block gotoxy::@2
Removing unused block gotoxy::@4
Removing PHI-reference to removed block (printf_string::@5) in block printf_padding
Removing PHI-reference to removed block (printf_string::@5) in block printf_padding
Removing unused block printf_string::@5
Removing unused block printf_string::@9
Removing PHI-reference to removed block (printf_string::@6) in block printf_padding
Removing PHI-reference to removed block (printf_string::@6) in block printf_padding
Removing unused block printf_string::@6
Removing unused block printf_string::@10
Removing unused block printf_string::@12
Successful SSA optimization Pass2EliminateUnusedBlocks
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Alias candidate removed (volatile)queen::row#0 = queen::r 
Identical Phi Values (byte) gotoxy::y#4 (const byte) gotoxy::y#2
Identical Phi Values (byte) gotoxy::x#4 (const byte) gotoxy::x#2
Successful SSA optimization Pass2IdenticalPhiElimination
Constant right-side identified [45] (byte*) uctoa::buffer#1 ← ++ (const byte*) uctoa::buffer#0
Constant right-side identified [105] (byte*) ultoa::buffer#1 ← ++ (const byte*) ultoa::buffer#0
Constant right-side identified [155] (word~) gotoxy::$7 ← (word)(const byte) gotoxy::y#2
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) uctoa::buffer#1 = ++uctoa::buffer#0
Constant (const byte*) ultoa::buffer#1 = ++ultoa::buffer#0
Constant (const word) gotoxy::$7 = (word)gotoxy::y#2
Successful SSA optimization Pass2ConstantIdentification
Eliminating unused constant (const byte) gotoxy::y#0
Eliminating unused constant (const byte) gotoxy::x#0
Eliminating unused constant (const byte) printf_padding::pad#3
Eliminating unused constant (const byte) printf_padding::pad#4
Eliminating unused constant (const byte) printf_padding::length#3
Eliminating unused constant (const byte) printf_padding::length#4
Successful SSA optimization PassNEliminateUnusedVars
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Alias candidate removed (volatile)queen::row#0 = queen::r 
Constant right-side identified [46] (byte*) uctoa::buffer#2 ← ++ (const byte*) uctoa::buffer#1
Constant right-side identified [105] (byte*) ultoa::buffer#2 ← ++ (const byte*) ultoa::buffer#1
Constant right-side identified [151] (word) gotoxy::line_offset#0 ← (const word) gotoxy::$7 * (byte) $28
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) uctoa::buffer#2 = ++uctoa::buffer#1
Constant (const byte*) ultoa::buffer#2 = ++ultoa::buffer#1
Constant (const word) gotoxy::line_offset#0 = gotoxy::$7*$28
Successful SSA optimization Pass2ConstantIdentification
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Alias candidate removed (volatile)queen::row#0 = queen::r 
Constant right-side identified [149] (byte*~) gotoxy::$5 ← (const nomodify byte*) CONIO_SCREEN_TEXT + (const word) gotoxy::line_offset#0
Constant right-side identified [151] (byte*~) gotoxy::$6 ← (const nomodify byte*) CONIO_SCREEN_COLORS + (const word) gotoxy::line_offset#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) gotoxy::$5 = CONIO_SCREEN_TEXT+gotoxy::line_offset#0
Constant (const byte*) gotoxy::$6 = CONIO_SCREEN_COLORS+gotoxy::line_offset#0
Successful SSA optimization Pass2ConstantIdentification
Alias candidate removed (volatile)queen::row#0 = queen::r 
Inlining Noop Cast [5] (byte*) memcpy::src#0 ← (byte*)(void*) memcpy::source#2 keeping memcpy::source#2
Inlining Noop Cast [6] (byte*) memcpy::dst#0 ← (byte*)(void*) memcpy::destination#2 keeping memcpy::destination#2
Inlining Noop Cast [7] (byte*~) memcpy::$2 ← (byte*)(void*) memcpy::source#2 keeping memcpy::source#2
Inlining Noop Cast [17] (byte*~) memset::$4 ← (byte*)(void*) memset::str#3 keeping memset::str#3
Inlining Noop Cast [19] (byte*) memset::dst#0 ← (byte*)(void*) memset::str#3 keeping memset::str#3
Inlining Noop Cast [235] (signed byte~) printf_number_buffer::$25 ← (signed byte)(byte) printf_number_buffer::format_min_length#3 keeping printf_number_buffer::format_min_length#3
Successful SSA optimization Pass2NopCastInlining
Rewriting multiplication to use shift [75] (byte~) utoa::$10 ← (byte) utoa::digit#2 * (const byte) SIZEOF_WORD
Rewriting multiplication to use shift [110] (byte~) ultoa::$10 ← (byte) ultoa::digit#2 * (const byte) SIZEOF_DWORD
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const void*) memcpy::destination#0
Inlining constant with var siblings (const void*) memcpy::source#0
Inlining constant with var siblings (const word) memcpy::num#0
Inlining constant with var siblings (const void*) memcpy::destination#1
Inlining constant with var siblings (const void*) memcpy::source#1
Inlining constant with var siblings (const word) memcpy::num#1
Inlining constant with var siblings (const void*) memset::str#0
Inlining constant with var siblings (const byte) memset::c#0
Inlining constant with var siblings (const word) memset::num#0
Inlining constant with var siblings (const void*) memset::str#1
Inlining constant with var siblings (const word) memset::num#1
Inlining constant with var siblings (const byte) memset::c#1
Inlining constant with var siblings (const word) strlen::len#0
Inlining constant with var siblings (const byte) uctoa::max_digits#1
Inlining constant with var siblings (const byte*) uctoa::digit_values#1
Inlining constant with var siblings (const byte) uctoa::max_digits#2
Inlining constant with var siblings (const byte*) uctoa::digit_values#2
Inlining constant with var siblings (const byte) uctoa::max_digits#3
Inlining constant with var siblings (const byte*) uctoa::digit_values#3
Inlining constant with var siblings (const byte) uctoa::max_digits#4
Inlining constant with var siblings (const byte*) uctoa::digit_values#4
Inlining constant with var siblings (const byte) uctoa::started#0
Inlining constant with var siblings (const byte) uctoa::digit#0
Inlining constant with var siblings (const byte) uctoa::started#1
Inlining constant with var siblings (const byte*) uctoa::buffer#5
Inlining constant with var siblings (const byte*) uctoa::buffer#0
Inlining constant with var siblings (const byte*) uctoa::buffer#1
Inlining constant with var siblings (const byte*) uctoa::buffer#2
Inlining constant with var siblings (const byte) uctoa_append::digit#0
Inlining constant with var siblings (const byte) utoa::started#0
Inlining constant with var siblings (const byte) utoa::digit#0
Inlining constant with var siblings (const byte) utoa::started#1
Inlining constant with var siblings (const byte*) utoa::buffer#5
Inlining constant with var siblings (const word) utoa::value#1
Inlining constant with var siblings (const byte) utoa_append::digit#0
Inlining constant with var siblings (const byte) ultoa::max_digits#1
Inlining constant with var siblings (const dword*) ultoa::digit_values#1
Inlining constant with var siblings (const byte) ultoa::max_digits#2
Inlining constant with var siblings (const dword*) ultoa::digit_values#2
Inlining constant with var siblings (const byte) ultoa::max_digits#3
Inlining constant with var siblings (const dword*) ultoa::digit_values#3
Inlining constant with var siblings (const byte) ultoa::max_digits#4
Inlining constant with var siblings (const dword*) ultoa::digit_values#4
Inlining constant with var siblings (const byte) ultoa::started#0
Inlining constant with var siblings (const byte) ultoa::digit#0
Inlining constant with var siblings (const byte) ultoa::started#1
Inlining constant with var siblings (const byte*) ultoa::buffer#5
Inlining constant with var siblings (const byte*) ultoa::buffer#0
Inlining constant with var siblings (const byte*) ultoa::buffer#1
Inlining constant with var siblings (const byte*) ultoa::buffer#2
Inlining constant with var siblings (const byte) ultoa_append::digit#0
Inlining constant with var siblings (const byte*) clrscr::line_text#0
Inlining constant with var siblings (const byte*) clrscr::line_cols#0
Inlining constant with var siblings (const byte) clrscr::l#0
Inlining constant with var siblings (const byte) clrscr::c#0
Inlining constant with var siblings (const to_nomodify byte*) cputs::s#3
Inlining constant with var siblings (const to_nomodify byte*) cputs::s#4
Inlining constant with var siblings (const to_nomodify byte*) cputs::s#5
Inlining constant with var siblings (const to_nomodify byte*) cputs::s#6
Inlining constant with var siblings (const to_nomodify byte*) cputs::s#7
Inlining constant with var siblings (const to_nomodify byte*) cputs::s#8
Inlining constant with var siblings (const to_nomodify byte*) cputs::s#9
Inlining constant with var siblings (const to_nomodify byte*) cputs::s#10
Inlining constant with var siblings (const to_nomodify byte*) cputs::s#11
Inlining constant with var siblings (const to_nomodify byte*) cputs::s#12
Inlining constant with var siblings (const to_nomodify byte*) cputs::s#2
Inlining constant with var siblings (const byte) printf_padding::i#0
Inlining constant with var siblings (const byte) printf_padding::pad#0
Inlining constant with var siblings (const byte) printf_padding::pad#1
Inlining constant with var siblings (const byte) printf_padding::pad#2
Inlining constant with var siblings (const byte) printf_ulong::format_min_length#0
Inlining constant with var siblings (const byte) printf_ulong::format_justify_left#0
Inlining constant with var siblings (const byte) printf_ulong::format_sign_always#0
Inlining constant with var siblings (const byte) printf_ulong::format_zero_padding#0
Inlining constant with var siblings (const byte) printf_ulong::format_upper_case#0
Inlining constant with var siblings (const byte) printf_ulong::format_radix#0
Inlining constant with var siblings (const byte) printf_ulong::format_min_length#1
Inlining constant with var siblings (const byte) printf_ulong::format_justify_left#1
Inlining constant with var siblings (const byte) printf_ulong::format_sign_always#1
Inlining constant with var siblings (const byte) printf_ulong::format_zero_padding#1
Inlining constant with var siblings (const byte) printf_ulong::format_upper_case#1
Inlining constant with var siblings (const byte) printf_ulong::format_radix#1
Inlining constant with var siblings (const byte) printf_uchar::format_min_length#0
Inlining constant with var siblings (const byte) printf_uchar::format_justify_left#0
Inlining constant with var siblings (const byte) printf_uchar::format_sign_always#0
Inlining constant with var siblings (const byte) printf_uchar::format_zero_padding#0
Inlining constant with var siblings (const byte) printf_uchar::format_upper_case#0
Inlining constant with var siblings (const byte) printf_uchar::format_radix#0
Inlining constant with var siblings (const byte) printf_uchar::format_min_length#1
Inlining constant with var siblings (const byte) printf_uchar::format_justify_left#1
Inlining constant with var siblings (const byte) printf_uchar::format_sign_always#1
Inlining constant with var siblings (const byte) printf_uchar::format_zero_padding#1
Inlining constant with var siblings (const byte) printf_uchar::format_upper_case#1
Inlining constant with var siblings (const byte) printf_uchar::format_radix#1
Inlining constant with var siblings (const byte*) printf_number_buffer::buffer_digits#0
Inlining constant with var siblings (const byte*) printf_number_buffer::buffer_digits#1
Inlining constant with var siblings (const byte*) printf_number_buffer::buffer_digits#2
Inlining constant with var siblings (const signed byte) printf_number_buffer::padding#0
Inlining constant with var siblings (const signed byte) printf_number_buffer::padding#2
Inlining constant with var siblings (const byte) printf_number_buffer::format_min_length#1
Inlining constant with var siblings (const byte) printf_number_buffer::format_justify_left#1
Inlining constant with var siblings (const byte) printf_number_buffer::format_zero_padding#1
Inlining constant with var siblings (const byte) printf_number_buffer::format_upper_case#1
Inlining constant with var siblings (const byte) legal::i#0
Inlining constant with var siblings (const byte) legal::return#1
Inlining constant with var siblings (const byte) legal::return#2
Inlining constant with var siblings (const byte) legal::return#3
Inlining constant with var siblings (const byte) print::i#0
Inlining constant with var siblings (const byte) print::i1#0
Inlining constant with var siblings (const byte) print::j#0
Constant inlined cputs::s#5 = (const byte*) main::s2
Constant inlined utoa::digit_values#1 = (const word*) RADIX_DECIMAL_VALUES
Constant inlined cputs::s#6 = (const byte*) main::s3
Constant inlined cputs::s#3 = (const byte*) main::s
Constant inlined printf_number_buffer::buffer_digits#0 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined cputs::s#4 = (const byte*) main::s1
Constant inlined printf_number_buffer::buffer_digits#1 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined printf_number_buffer::buffer_digits#2 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined cputs::s#2 = (const byte*) tod_buffer
Constant inlined printf_number_buffer::format_justify_left#1 = (const byte) printf_uint::format_justify_left#0
Constant inlined conio_textcolor = (const nomodify byte) LIGHT_BLUE
Constant inlined clrscr::l#0 = (byte) 0
Constant inlined strlen::len#0 = (word) 0
Constant inlined printf_ulong::format_upper_case#0 = (byte) 0
Constant inlined CONIO_SCREEN_TEXT = (const nomodify byte*) DEFAULT_SCREEN
Constant inlined utoa::$4 = (const byte) utoa::max_digits#1-(byte) 1
Constant inlined tod_str::return#2 = (const byte*) tod_buffer
Constant inlined printf_ulong::format_min_length#1 = (byte) 0
Constant inlined printf_ulong::format_upper_case#1 = (byte) 0
Constant inlined tod_str::return#0 = (const byte*) tod_buffer
Constant inlined printf_ulong::format_min_length#0 = (byte) 0
Constant inlined uctoa::digit#0 = (byte) 0
Constant inlined clrscr::line_text#0 = (const nomodify byte*) DEFAULT_SCREEN
Constant inlined memcpy::source#0 = (void*)(const nomodify byte*) DEFAULT_SCREEN+(byte) $28
Constant inlined ultoa::buffer#2 = ++++++(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined ultoa::buffer#0 = ++(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined ultoa::buffer#1 = ++++(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined printf_uchar::format_sign_always#1 = (byte) 0
Constant inlined legal::return#2 = (byte) 0
Constant inlined ultoa::digit#0 = (byte) 0
Constant inlined legal::return#3 = (byte) 0
Constant inlined printf_uchar::format_sign_always#0 = (byte) 0
Constant inlined memset::c#0 = (byte) ' '
Constant inlined printf_uchar::format_min_length#1 = (byte) 0
Constant inlined legal::return#1 = (byte) 1
Constant inlined memset::c#1 = (const nomodify byte) LIGHT_BLUE
Constant inlined cputs::s#9 = (const byte*) print::s1
Constant inlined printf_uchar::format_min_length#0 = (byte) 0
Constant inlined printf_uchar::format_upper_case#1 = (byte) 0
Constant inlined cputs::s#7 = (const byte*) main::s4
Constant inlined cputs::s#8 = (const byte*) print::s
Constant inlined printf_uchar::format_upper_case#0 = (byte) 0
Constant inlined utoa_append::digit#0 = (byte) 0
Constant inlined uctoa::digit_values#2 = (const byte*) RADIX_HEXADECIMAL_VALUES_CHAR
Constant inlined uctoa::digit_values#1 = (const byte*) RADIX_DECIMAL_VALUES_CHAR
Constant inlined uctoa::digit_values#4 = (const byte*) RADIX_BINARY_VALUES_CHAR
Constant inlined printf_ulong::format_radix#0 = (const byte) DECIMAL
Constant inlined uctoa::digit_values#3 = (const byte*) RADIX_OCTAL_VALUES_CHAR
Constant inlined printf_ulong::format_radix#1 = (const byte) DECIMAL
Constant inlined printf_uchar::$0 = (byte) 0
Constant inlined printf_uchar::$1 = (byte) '+'
Constant inlined memcpy::destination#0 = (void*)(const nomodify byte*) DEFAULT_SCREEN
Constant inlined memcpy::destination#1 = (void*)(const nomodify byte*) COLORRAM
Constant inlined uctoa::max_digits#1 = (byte) 3
Constant inlined legal::i#0 = (byte) 1
Constant inlined utoa::digit#0 = (byte) 0
Constant inlined ultoa::max_digits#3 = (byte) $b
Constant inlined ultoa::max_digits#4 = (byte) $20
Constant inlined uctoa::max_digits#3 = (byte) 3
Constant inlined printf_number_buffer::format_min_length#1 = (const byte) printf_uint::format_min_length#0
Constant inlined uctoa::max_digits#2 = (byte) 2
Constant inlined CONIO_TEXTCOLOR_DEFAULT = (const nomodify byte) LIGHT_BLUE
Constant inlined uctoa::max_digits#4 = (byte) 8
Constant inlined uctoa::buffer#1 = ++++(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined uctoa::buffer#2 = ++++++(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined printf_padding::pad#0 = (byte) ' '
Constant inlined printf_padding::i#0 = (byte) 0
Constant inlined printf_padding::pad#1 = (byte) '0'
Constant inlined printf_uchar::format_zero_padding#1 = (byte) 0
Constant inlined uctoa::buffer#0 = ++(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined printf_padding::pad#2 = (byte) ' '
Constant inlined printf_uchar::format_zero_padding#0 = (byte) 0
Constant inlined printf_ulong::$1 = (byte) '+'
Constant inlined printf_ulong::$0 = (byte) 0
Constant inlined ultoa::max_digits#1 = (byte) $a
Constant inlined utoa::started#1 = (byte) 1
Constant inlined ultoa::max_digits#2 = (byte) 8
Constant inlined utoa::started#0 = (byte) 0
Constant inlined uctoa::buffer#5 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined ultoa::digit_values#2 = (const dword*) RADIX_HEXADECIMAL_VALUES_LONG
Constant inlined ultoa::digit_values#3 = (const dword*) RADIX_OCTAL_VALUES_LONG
Constant inlined ultoa_append::digit#0 = (byte) 0
Constant inlined ultoa::digit_values#1 = (const dword*) RADIX_DECIMAL_VALUES_LONG
Constant inlined ultoa::digit_values#4 = (const dword*) RADIX_BINARY_VALUES_LONG
Constant inlined utoa::value#1 = (const word) printf_uint::uvalue#0
Constant inlined uctoa_append::digit#0 = (byte) 0
Constant inlined printf_uchar::format_justify_left#0 = (byte) 0
Constant inlined printf_uchar::format_justify_left#1 = (byte) 0
Constant inlined memset::num#1 = (byte) $28
Constant inlined memset::num#0 = (byte) $28
Constant inlined printf_ulong::format_justify_left#1 = (byte) 0
Constant inlined printf_ulong::format_justify_left#0 = (byte) 0
Constant inlined printf_number_buffer::padding#2 = (signed byte) 0
Constant inlined print::j#0 = (byte) 1
Constant inlined ultoa::started#1 = (byte) 1
Constant inlined printf_ulong::format_zero_padding#0 = (byte) 0
Constant inlined printf_ulong::format_zero_padding#1 = (byte) 0
Constant inlined utoa::buffer#5 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined printf_number_buffer::padding#0 = (signed byte) 0
Constant inlined print::i1#0 = (byte) 1
Constant inlined uctoa::started#0 = (byte) 0
Constant inlined uctoa::started#1 = (byte) 1
Constant inlined memcpy::source#1 = (void*)(const nomodify byte*) COLORRAM+(byte) $28
Constant inlined ultoa::buffer#5 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined printf_number_buffer::format_upper_case#1 = (const byte) printf_uint::format_upper_case#0
Constant inlined printf_string::str#0 = (const byte*) tod_buffer
Constant inlined ultoa::started#0 = (byte) 0
Constant inlined printf_ulong::format_sign_always#1 = (byte) 0
Constant inlined printf_ulong::format_sign_always#0 = (byte) 0
Constant inlined memset::str#1 = (void*)(const nomodify byte*) COLORRAM+(word)(number) $19*(number) $28-(byte) $28
Constant inlined printf_number_buffer::format_zero_padding#1 = (const byte) printf_uint::format_zero_padding#0
Constant inlined memset::str#0 = (void*)(const nomodify byte*) DEFAULT_SCREEN+(word)(number) $19*(number) $28-(byte) $28
Constant inlined CONIO_SCREEN_COLORS = (const nomodify byte*) COLORRAM
Constant inlined printf_uint::$0 = (byte) 0
Constant inlined gotoxy::$6 = (const nomodify byte*) COLORRAM+(const word) gotoxy::line_offset#0
Constant inlined gotoxy::$7 = (word)(const byte) gotoxy::y#2
Constant inlined print::i#0 = (byte) 1
Constant inlined gotoxy::$5 = (const nomodify byte*) DEFAULT_SCREEN+(const word) gotoxy::line_offset#0
Constant inlined memcpy::num#1 = (word)(number) $19*(number) $28-(number) $28
Constant inlined memcpy::num#0 = (word)(number) $19*(number) $28-(number) $28
Constant inlined printf_uchar::format_radix#1 = (const byte) HEXADECIMAL
Constant inlined cputs::s#12 = (const byte*) print::s4
Constant inlined printf_uchar::format_radix#0 = (const byte) HEXADECIMAL
Constant inlined cputs::s#11 = (const byte*) print::s3
Constant inlined cputs::s#10 = (const byte*) print::s2
Constant inlined clrscr::c#0 = (byte) 0
Constant inlined clrscr::line_cols#0 = (const nomodify byte*) COLORRAM
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(tod_buffer+1)
Consolidated array index constant in *(tod_buffer+3)
Consolidated array index constant in *(tod_buffer+4)
Consolidated array index constant in *(tod_buffer+6)
Consolidated array index constant in *(tod_buffer+7)
Consolidated array index constant in *(tod_buffer+9)
Consolidated array index constant in *(tod_buffer+$a)
Successful SSA optimization Pass2ConstantAdditionElimination
Simplifying constant integer increment ++(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Simplifying constant integer increment ++(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Simplifying constant integer increment ++(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+1
Simplifying constant integer increment ++(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Simplifying constant integer increment ++(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Simplifying constant integer increment ++(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+1
Successful SSA optimization Pass2ConstantSimplification
Simplifying constant integer increment ++(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+1
Simplifying constant integer increment ++(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+2
Simplifying constant integer increment ++(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+1
Simplifying constant integer increment ++(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+2
Successful SSA optimization Pass2ConstantSimplification
Adding number conversion cast (unumber) 1 in [44] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(number) 1) ← (byte) 'r'
Adding number conversion cast (unumber) 2 in [45] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(number) 2) ← (byte) 'r'
Adding number conversion cast (unumber) 3 in [46] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(number) 3) ← (byte) 0
Adding number conversion cast (unumber) 1 in [102] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(number) 1) ← (byte) 'r'
Adding number conversion cast (unumber) 2 in [103] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(number) 2) ← (byte) 'r'
Adding number conversion cast (unumber) 3 in [104] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(number) 3) ← (byte) 0
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias candidate removed (volatile)queen::row#0 = queen::r 
Identical Phi Values (word) memcpy::num#2 (word)(number) $19*(number) $28-(number) $28
Identical Phi Values (word) memset::num#2 (byte) $28
Identical Phi Values (byte) printf_ulong::format_sign_always#2 (byte) 0
Identical Phi Values (byte) printf_ulong::format_radix#2 (const byte) DECIMAL
Identical Phi Values (byte) printf_ulong::format_min_length#2 (byte) 0
Identical Phi Values (byte) printf_ulong::format_justify_left#2 (byte) 0
Identical Phi Values (byte) printf_ulong::format_zero_padding#2 (byte) 0
Identical Phi Values (byte) printf_ulong::format_upper_case#2 (byte) 0
Identical Phi Values (byte) printf_uchar::format_sign_always#2 (byte) 0
Identical Phi Values (byte) printf_uchar::format_radix#2 (const byte) HEXADECIMAL
Identical Phi Values (byte) printf_uchar::format_min_length#2 (byte) 0
Identical Phi Values (byte) printf_uchar::format_justify_left#2 (byte) 0
Identical Phi Values (byte) printf_uchar::format_zero_padding#2 (byte) 0
Identical Phi Values (byte) printf_uchar::format_upper_case#2 (byte) 0
Identical Phi Values (byte*) printf_number_buffer::buffer_digits#10 (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Successful SSA optimization Pass2IdenticalPhiElimination
Constant (const byte) ultoa::radix#0 = DECIMAL
Constant (const byte) printf_number_buffer::format_min_length#0 = 0
Constant (const byte) printf_number_buffer::format_justify_left#0 = 0
Constant (const byte) printf_number_buffer::format_zero_padding#0 = 0
Constant (const byte) printf_number_buffer::format_upper_case#0 = 0
Constant (const byte) uctoa::radix#0 = HEXADECIMAL
Constant (const byte) printf_number_buffer::format_min_length#2 = 0
Constant (const byte) printf_number_buffer::format_justify_left#2 = 0
Constant (const byte) printf_number_buffer::format_zero_padding#2 = 0
Constant (const byte) printf_number_buffer::format_upper_case#2 = 0
Constant (const byte*) strlen::str#1 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant (const to_nomodify byte*) cputs::s#1 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant (const byte*) strupr::str#0 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [13] if((byte) $28<=(byte) 0) goto memset::@1
if() condition always false - eliminating [34] if((const byte) uctoa::radix#0==(const byte) DECIMAL) goto uctoa::@1
if() condition always true - replacing block destination [35] if((const byte) uctoa::radix#0==(const byte) HEXADECIMAL) goto uctoa::@2
if() condition always false - eliminating [36] if((const byte) uctoa::radix#0==(const byte) OCTAL) goto uctoa::@3
if() condition always false - eliminating [37] if((const byte) uctoa::radix#0==(const byte) BINARY) goto uctoa::@4
if() condition always true - replacing block destination [92] if((const byte) ultoa::radix#0==(const byte) DECIMAL) goto ultoa::@1
if() condition always false - eliminating [93] if((const byte) ultoa::radix#0==(const byte) HEXADECIMAL) goto ultoa::@2
if() condition always false - eliminating [94] if((const byte) ultoa::radix#0==(const byte) OCTAL) goto ultoa::@3
if() condition always false - eliminating [95] if((const byte) ultoa::radix#0==(const byte) BINARY) goto ultoa::@4
if() condition always false - eliminating [187] if((byte) 0!=(byte) 0) goto printf_ulong::@1
if() condition always false - eliminating [206] if((byte) 0!=(byte) 0) goto printf_uchar::@1
Successful SSA optimization Pass2ConstantIfs
Eliminating unused constant (const byte) BINARY
Eliminating unused constant (const byte) OCTAL
Eliminating unused constant (const byte) uctoa::radix#0
Eliminating unused constant (const byte) ultoa::radix#0
Eliminating unused constant (const byte) SIZEOF_WORD
Eliminating unused constant (const byte) SIZEOF_DWORD
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant (const byte) DECIMAL
Eliminating unused constant (const byte) HEXADECIMAL
Successful SSA optimization PassNEliminateUnusedVars
Removing PHI-reference to removed block (uctoa::@1) in block uctoa::@5
Removing PHI-reference to removed block (uctoa::@1) in block uctoa::@5
Removing unused block uctoa::@1
Removing unused block uctoa::@7
Removing PHI-reference to removed block (uctoa::@3) in block uctoa::@5
Removing PHI-reference to removed block (uctoa::@3) in block uctoa::@5
Removing unused block uctoa::@3
Removing unused block uctoa::@8
Removing PHI-reference to removed block (uctoa::@4) in block uctoa::@5
Removing PHI-reference to removed block (uctoa::@4) in block uctoa::@5
Removing unused block uctoa::@4
Removing unused block uctoa::@9
Removing unused block ultoa::@6
Removing PHI-reference to removed block (ultoa::@2) in block ultoa::@5
Removing PHI-reference to removed block (ultoa::@2) in block ultoa::@5
Removing unused block ultoa::@2
Removing unused block ultoa::@7
Removing PHI-reference to removed block (ultoa::@3) in block ultoa::@5
Removing PHI-reference to removed block (ultoa::@3) in block ultoa::@5
Removing unused block ultoa::@3
Removing unused block ultoa::@8
Removing PHI-reference to removed block (ultoa::@4) in block ultoa::@5
Removing PHI-reference to removed block (ultoa::@4) in block ultoa::@5
Removing unused block ultoa::@4
Removing unused block ultoa::@9
Removing PHI-reference to removed block (printf_ulong::@1) in block printf_ulong::@3
Removing unused block printf_ulong::@1
Removing PHI-reference to removed block (printf_uchar::@1) in block printf_uchar::@3
Removing unused block printf_uchar::@1
Successful SSA optimization Pass2EliminateUnusedBlocks
Inlining constant with var siblings (const byte*) strlen::str#1
Inlining constant with var siblings (const to_nomodify byte*) cputs::s#1
Inlining constant with var siblings (const byte) printf_number_buffer::format_min_length#0
Inlining constant with var siblings (const byte) printf_number_buffer::format_justify_left#0
Inlining constant with var siblings (const byte) printf_number_buffer::format_zero_padding#0
Inlining constant with var siblings (const byte) printf_number_buffer::format_upper_case#0
Inlining constant with var siblings (const byte) printf_number_buffer::format_min_length#2
Inlining constant with var siblings (const byte) printf_number_buffer::format_justify_left#2
Inlining constant with var siblings (const byte) printf_number_buffer::format_zero_padding#2
Inlining constant with var siblings (const byte) printf_number_buffer::format_upper_case#2
Constant inlined printf_number_buffer::format_justify_left#0 = (byte) 0
Constant inlined printf_number_buffer::format_zero_padding#2 = (byte) 0
Constant inlined printf_number_buffer::format_upper_case#2 = (byte) 0
Constant inlined cputs::s#1 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined printf_number_buffer::format_justify_left#2 = (byte) 0
Constant inlined printf_number_buffer::format_upper_case#0 = (byte) 0
Constant inlined strlen::str#1 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined printf_number_buffer::format_min_length#0 = (byte) 0
Constant inlined printf_number_buffer::format_zero_padding#0 = (byte) 0
Constant inlined printf_number_buffer::format_min_length#2 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Alias candidate removed (volatile)queen::row#0 = queen::r 
Identical Phi Values (byte) uctoa::max_digits#7 (byte) 2
Identical Phi Values (byte*) uctoa::digit_values#8 (const byte*) RADIX_HEXADECIMAL_VALUES_CHAR
Identical Phi Values (byte) ultoa::max_digits#7 (byte) $a
Identical Phi Values (dword*) ultoa::digit_values#8 (const dword*) RADIX_DECIMAL_VALUES_LONG
Identical Phi Values (byte~) printf_ulong::$2 (byte) 0
Identical Phi Values (byte~) printf_uchar::$2 (byte) 0
Successful SSA optimization Pass2IdenticalPhiElimination
Constant right-side identified [36] (byte~) uctoa::$4 ← (byte) 2 - (byte) 1
Constant right-side identified [86] (byte~) ultoa::$4 ← (byte) $a - (byte) 1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) uctoa::$4 = 2-1
Constant (const byte) ultoa::$4 = $a-1
Successful SSA optimization Pass2ConstantIdentification
Eliminating unused constant (const byte*) RADIX_BINARY_VALUES_CHAR
Eliminating unused constant (const byte*) RADIX_OCTAL_VALUES_CHAR
Eliminating unused constant (const byte*) RADIX_DECIMAL_VALUES_CHAR
Eliminating unused constant (const dword*) RADIX_BINARY_VALUES_LONG
Eliminating unused constant (const dword*) RADIX_OCTAL_VALUES_LONG
Eliminating unused constant (const dword*) RADIX_HEXADECIMAL_VALUES_LONG
Successful SSA optimization PassNEliminateUnusedVars
Constant inlined uctoa::$4 = (byte) 2-(byte) 1
Constant inlined ultoa::$4 = (byte) $a-(byte) 1
Successful SSA optimization Pass2ConstantInlining
Alias candidate removed (volatile)queen::row#0 = queen::r 
Alias candidate removed (volatile)queen::row#0 = queen::r 
Added new block during phi lifting uctoa::@17(between uctoa::@16 and uctoa::@13)
Added new block during phi lifting utoa::@17(between utoa::@16 and utoa::@13)
Added new block during phi lifting ultoa::@17(between ultoa::@16 and ultoa::@13)
Added new block during phi lifting printf_number_buffer::@27(between printf_number_buffer::@13 and printf_number_buffer::@1)
Added new block during phi lifting printf_number_buffer::@28(between printf_number_buffer::@15 and printf_number_buffer::@13)
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of __start::@2
Adding NOP phi() at start of queen::@8
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of main::@10
Adding NOP phi() at start of main::@11
Adding NOP phi() at start of main::@12
Adding NOP phi() at start of legal
Adding NOP phi() at start of legal::@3
Adding NOP phi() at start of legal::@7
Adding NOP phi() at start of legal::@4
Adding NOP phi() at start of print
Adding NOP phi() at start of print::@12
Adding NOP phi() at start of print::@14
Adding NOP phi() at start of print::@15
Adding NOP phi() at start of print::@3
Adding NOP phi() at start of print::@5
Adding NOP phi() at start of print::@18
Adding NOP phi() at start of print::@11
Adding NOP phi() at start of print::@20
Adding NOP phi() at start of print::@9
Adding NOP phi() at start of print::@19
Adding NOP phi() at start of clrscr
Adding NOP phi() at start of clrscr::@2
Adding NOP phi() at start of printf_uint
Adding NOP phi() at start of printf_uint::@2
Adding NOP phi() at start of printf_uint::@5
Adding NOP phi() at start of printf_ulong::@2
Adding NOP phi() at start of printf_ulong::@5
Adding NOP phi() at start of printf_string
Adding NOP phi() at start of printf_string::@1
Adding NOP phi() at start of printf_string::@11
Adding NOP phi() at start of printf_string::@2
Adding NOP phi() at start of printf_string::@8
Adding NOP phi() at start of gotoxy
Adding NOP phi() at start of gotoxy::@1
Adding NOP phi() at start of printf_uchar::@2
Adding NOP phi() at start of printf_uchar::@5
Adding NOP phi() at start of cputc::@3
Adding NOP phi() at start of cputc::@5
Adding NOP phi() at start of cputc::@1
Adding NOP phi() at start of cputc::@4
Adding NOP phi() at start of utoa
Adding NOP phi() at start of utoa::@1
Adding NOP phi() at start of utoa::@5
Adding NOP phi() at start of printf_number_buffer::@6
Adding NOP phi() at start of printf_number_buffer::@14
Adding NOP phi() at start of printf_number_buffer::@17
Adding NOP phi() at start of printf_number_buffer::@11
Adding NOP phi() at start of printf_number_buffer::@20
Adding NOP phi() at start of printf_number_buffer::@5
Adding NOP phi() at start of printf_number_buffer::@21
Adding NOP phi() at start of printf_number_buffer::@18
Adding NOP phi() at start of printf_number_buffer::@16
Adding NOP phi() at start of ultoa
Adding NOP phi() at start of ultoa::@1
Adding NOP phi() at start of uctoa
Adding NOP phi() at start of uctoa::@6
Adding NOP phi() at start of uctoa::@2
Adding NOP phi() at start of cputln::@1
Adding NOP phi() at start of strlen
Adding NOP phi() at start of strlen::@3
Adding NOP phi() at start of strupr
Adding NOP phi() at start of strupr::@3
Adding NOP phi() at start of cscroll::@1
Adding NOP phi() at start of cscroll::@3
Adding NOP phi() at start of cscroll::@4
Adding NOP phi() at start of cscroll::@5
Adding NOP phi() at start of cscroll::@6
Adding NOP phi() at start of memcpy::@3
Adding NOP phi() at start of memset::@1
CALL GRAPH
Calls in [__start] to main:7 
Calls in [queen] to legal:17 queen:26 print:31 
Calls in [main] to clrscr:34 cputs:36 cputs:38 printf_uint:40 tod_init:45 queen:47 tod_read:49 tod_str:58 cputs:60 printf_ulong:63 cputs:65 printf_string:67 cputs:69 
Calls in [legal] to diff:84 diff:91 
Calls in [print] to gotoxy:100 cputs:102 printf_ulong:105 cputs:107 cputs:116 printf_uchar:119 cputs:127 cputs:132 printf_uchar:136 
Calls in [cputs] to cputc:169 
Calls in [printf_uint] to utoa:174 printf_number_buffer:177 
Calls in [printf_ulong] to ultoa:221 printf_number_buffer:224 
Calls in [printf_string] to cputs:231 
Calls in [printf_uchar] to uctoa:253 printf_number_buffer:256 
Calls in [cputc] to cputln:266 cputln:270 
Calls in [utoa] to utoa_append:298 
Calls in [printf_number_buffer] to strlen:307 cputc:325 strupr:331 cputs:334 printf_padding:341 printf_padding:345 printf_padding:349 
Calls in [ultoa] to ultoa_append:379 
Calls in [uctoa] to uctoa_append:410 
Calls in [cputln] to cscroll:420 
Calls in [strupr] to toupper:447 
Calls in [printf_padding] to cputc:459 
Calls in [cscroll] to memcpy:483 memcpy:485 memset:487 memset:489 

Created 65 initial phi equivalence classes
Coalesced [62] printf_ulong::uvalue#6 ← printf_ulong::uvalue#0
Coalesced [82] diff::a#5 ← diff::a#0
Coalesced [83] diff::b#5 ← diff::b#0
Coalesced [89] diff::a#6 ← diff::a#1
Coalesced [90] diff::b#6 ← diff::b#1
Coalesced [97] legal::i#8 ← legal::i#1
Coalesced [104] printf_ulong::uvalue#7 ← printf_ulong::uvalue#1
Coalesced [118] printf_uchar::uvalue#6 ← printf_uchar::uvalue#1
Coalesced [124] print::i1#14 ← print::i1#1
Coalesced [130] print::j#9 ← print::j#1
Coalesced [135] printf_uchar::uvalue#7 ← printf_uchar::uvalue#0
Coalesced [138] print::i#5 ← print::i#1
Coalesced [153] clrscr::l#7 ← clrscr::l#1
Coalesced [154] clrscr::line_text#7 ← clrscr::line_text#1
Coalesced [155] clrscr::line_cols#7 ← clrscr::line_cols#1
Coalesced [159] clrscr::c#4 ← clrscr::c#1
Coalesced [161] cputs::s#17 ← cputs::s#14
Coalesced [168] cputc::c#5 ← cputc::c#0
Coalesced [170] cputs::s#18 ← cputs::s#0
Coalesced [176] printf_number_buffer::buffer_sign#15 ← printf_number_buffer::buffer_sign#1
Coalesced [223] printf_number_buffer::buffer_sign#16 ← printf_number_buffer::buffer_sign#0
Coalesced [237] diff::return#9 ← diff::return#3
Coalesced [241] diff::return#8 ← diff::return#2
Coalesced [255] printf_number_buffer::buffer_sign#14 ← printf_number_buffer::buffer_sign#2
Coalesced [286] utoa::value#17 ← utoa::value#2
Coalesced [287] utoa::started#6 ← utoa::started#2
Coalesced [288] utoa::buffer#23 ← utoa::buffer#11
Coalesced [291] utoa::digit#7 ← utoa::digit#1
Coalesced (already) [292] utoa::value#16 ← utoa::value#6
Coalesced (already) [293] utoa::started#5 ← utoa::started#4
Coalesced (already) [294] utoa::buffer#22 ← utoa::buffer#14
Coalesced [302] utoa::value#18 ← utoa::value#0
Coalesced [303] utoa::buffer#24 ← utoa::buffer#4
Coalesced [313] printf_number_buffer::len#5 ← printf_number_buffer::len#1
Coalesced [324] cputc::c#6 ← cputc::c#2
Coalesced [340] printf_padding::length#10 ← printf_padding::length#2
Coalesced [344] printf_padding::length#9 ← printf_padding::length#1
Coalesced [348] printf_padding::length#11 ← printf_padding::length#0
Coalesced [351] printf_number_buffer::padding#18 ← printf_number_buffer::padding#1
Coalesced [352] printf_number_buffer::len#4 ← printf_number_buffer::len#0
Coalesced [355] ultoa::value#17 ← ultoa::value#1
Coalesced [367] ultoa::value#18 ← ultoa::value#2
Coalesced [368] ultoa::started#6 ← ultoa::started#2
Coalesced [369] ultoa::buffer#23 ← ultoa::buffer#11
Coalesced [372] ultoa::digit#7 ← ultoa::digit#1
Coalesced (already) [373] ultoa::value#16 ← ultoa::value#6
Coalesced (already) [374] ultoa::started#5 ← ultoa::started#4
Coalesced (already) [375] ultoa::buffer#22 ← ultoa::buffer#14
Coalesced [383] ultoa::value#19 ← ultoa::value#0
Coalesced [384] ultoa::buffer#24 ← ultoa::buffer#4
Coalesced [388] uctoa::value#17 ← uctoa::value#1
Coalesced [398] uctoa::value#18 ← uctoa::value#2
Coalesced [399] uctoa::started#6 ← uctoa::started#2
Coalesced [400] uctoa::buffer#23 ← uctoa::buffer#11
Coalesced [403] uctoa::digit#7 ← uctoa::digit#1
Coalesced (already) [404] uctoa::value#16 ← uctoa::value#6
Coalesced (already) [405] uctoa::started#5 ← uctoa::started#4
Coalesced (already) [406] uctoa::buffer#22 ← uctoa::buffer#14
Coalesced [414] uctoa::value#19 ← uctoa::value#0
Coalesced [415] uctoa::buffer#24 ← uctoa::buffer#4
Coalesced [423] utoa_append::value#6 ← utoa_append::value#0
Coalesced [430] utoa_append::value#7 ← utoa_append::value#1
Coalesced [431] utoa_append::digit#5 ← utoa_append::digit#1
Coalesced [439] strlen::str#6 ← strlen::str#0
Coalesced [440] strlen::len#5 ← strlen::len#1
Coalesced [452] strupr::src#5 ← strupr::src#1
Coalesced [458] cputc::c#7 ← cputc::c#1
Coalesced [461] printf_padding::i#5 ← printf_padding::i#1
Coalesced [462] ultoa_append::value#6 ← ultoa_append::value#0
Coalesced [469] ultoa_append::value#7 ← ultoa_append::value#1
Coalesced [470] ultoa_append::digit#5 ← ultoa_append::digit#1
Coalesced [471] uctoa_append::value#6 ← uctoa_append::value#0
Coalesced [478] uctoa_append::value#7 ← uctoa_append::value#1
Coalesced [479] uctoa_append::digit#5 ← uctoa_append::digit#1
Coalesced [496] toupper::return#7 ← toupper::ch#0
Coalesced [500] toupper::return#6 ← toupper::return#0
Coalesced [512] memcpy::src#5 ← memcpy::src#1
Coalesced [513] memcpy::dst#5 ← memcpy::dst#1
Coalesced [523] memset::dst#5 ← memset::dst#1
Coalesced down to 55 phi equivalence classes
Culled Empty Block (label) __start::@2
Culled Empty Block (label) queen::@8
Culled Empty Block (label) main::@12
Culled Empty Block (label) legal::@3
Culled Empty Block (label) legal::@7
Culled Empty Block (label) legal::@4
Culled Empty Block (label) print::@15
Culled Empty Block (label) print::@3
Culled Empty Block (label) print::@18
Culled Empty Block (label) print::@20
Culled Empty Block (label) print::@19
Culled Empty Block (label) clrscr::@2
Culled Empty Block (label) cputs::@3
Culled Empty Block (label) printf_uint::@2
Culled Empty Block (label) printf_uint::@5
Culled Empty Block (label) printf_ulong::@2
Culled Empty Block (label) printf_ulong::@5
Culled Empty Block (label) printf_string::@1
Culled Empty Block (label) printf_string::@11
Culled Empty Block (label) printf_string::@8
Culled Empty Block (label) gotoxy::@1
Culled Empty Block (label) printf_uchar::@2
Culled Empty Block (label) printf_uchar::@5
Culled Empty Block (label) cputc::@5
Culled Empty Block (label) cputc::@4
Culled Empty Block (label) utoa::@1
Culled Empty Block (label) utoa::@5
Culled Empty Block (label) utoa::@17
Culled Empty Block (label) printf_number_buffer::@14
Culled Empty Block (label) printf_number_buffer::@17
Culled Empty Block (label) printf_number_buffer::@20
Culled Empty Block (label) printf_number_buffer::@21
Culled Empty Block (label) printf_number_buffer::@18
Culled Empty Block (label) printf_number_buffer::@16
Culled Empty Block (label) printf_number_buffer::@28
Culled Empty Block (label) ultoa::@1
Culled Empty Block (label) ultoa::@5
Culled Empty Block (label) ultoa::@17
Culled Empty Block (label) uctoa::@6
Culled Empty Block (label) uctoa::@2
Culled Empty Block (label) uctoa::@5
Culled Empty Block (label) uctoa::@17
Culled Empty Block (label) cputln::@1
Culled Empty Block (label) strlen::@3
Culled Empty Block (label) strupr::@3
Culled Empty Block (label) cscroll::@1
Culled Empty Block (label) toupper::@2
Culled Empty Block (label) memcpy::@3
Culled Empty Block (label) memset::@1
Renumbering block toupper::@3 to toupper::@2
Renumbering block memset::@2 to memset::@1
Renumbering block memset::@3 to memset::@2
Renumbering block memset::@4 to memset::@3
Renumbering block strupr::@4 to strupr::@3
Renumbering block uctoa::@10 to uctoa::@1
Renumbering block uctoa::@11 to uctoa::@2
Renumbering block uctoa::@12 to uctoa::@3
Renumbering block uctoa::@13 to uctoa::@4
Renumbering block uctoa::@14 to uctoa::@5
Renumbering block uctoa::@15 to uctoa::@6
Renumbering block uctoa::@16 to uctoa::@7
Renumbering block utoa::@10 to utoa::@1
Renumbering block utoa::@11 to utoa::@2
Renumbering block utoa::@12 to utoa::@3
Renumbering block utoa::@13 to utoa::@4
Renumbering block utoa::@14 to utoa::@5
Renumbering block utoa::@15 to utoa::@6
Renumbering block utoa::@16 to utoa::@7
Renumbering block ultoa::@10 to ultoa::@1
Renumbering block ultoa::@11 to ultoa::@2
Renumbering block ultoa::@12 to ultoa::@3
Renumbering block ultoa::@13 to ultoa::@4
Renumbering block ultoa::@14 to ultoa::@5
Renumbering block ultoa::@15 to ultoa::@6
Renumbering block ultoa::@16 to ultoa::@7
Renumbering block clrscr::@3 to clrscr::@2
Renumbering block clrscr::@4 to clrscr::@3
Renumbering block clrscr::@5 to clrscr::@4
Renumbering block clrscr::@6 to clrscr::@5
Renumbering block gotoxy::@2 to gotoxy::@1
Renumbering block cscroll::@3 to cscroll::@1
Renumbering block cscroll::@4 to cscroll::@2
Renumbering block cscroll::@5 to cscroll::@3
Renumbering block cscroll::@6 to cscroll::@4
Renumbering block cscroll::@7 to cscroll::@5
Renumbering block printf_ulong::@3 to printf_ulong::@1
Renumbering block printf_ulong::@4 to printf_ulong::@2
Renumbering block printf_uint::@3 to printf_uint::@1
Renumbering block printf_uint::@4 to printf_uint::@2
Renumbering block printf_uchar::@3 to printf_uchar::@1
Renumbering block printf_uchar::@4 to printf_uchar::@2
Renumbering block printf_number_buffer::@15 to printf_number_buffer::@14
Renumbering block printf_number_buffer::@19 to printf_number_buffer::@15
Renumbering block printf_number_buffer::@22 to printf_number_buffer::@16
Renumbering block printf_number_buffer::@23 to printf_number_buffer::@17
Renumbering block printf_number_buffer::@24 to printf_number_buffer::@18
Renumbering block printf_number_buffer::@25 to printf_number_buffer::@19
Renumbering block printf_number_buffer::@26 to printf_number_buffer::@20
Renumbering block printf_number_buffer::@27 to printf_number_buffer::@21
Renumbering block printf_string::@2 to printf_string::@1
Renumbering block legal::@5 to legal::@3
Renumbering block legal::@6 to legal::@4
Renumbering block legal::@8 to legal::@5
Renumbering block legal::@9 to legal::@6
Renumbering block print::@4 to print::@3
Renumbering block print::@5 to print::@4
Renumbering block print::@6 to print::@5
Renumbering block print::@7 to print::@6
Renumbering block print::@8 to print::@7
Renumbering block print::@9 to print::@8
Renumbering block print::@10 to print::@9
Renumbering block print::@11 to print::@10
Renumbering block print::@12 to print::@11
Renumbering block print::@13 to print::@12
Renumbering block print::@14 to print::@13
Renumbering block print::@16 to print::@14
Renumbering block print::@17 to print::@15
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of main::@10
Adding NOP phi() at start of main::@11
Adding NOP phi() at start of legal
Adding NOP phi() at start of print
Adding NOP phi() at start of print::@11
Adding NOP phi() at start of print::@13
Adding NOP phi() at start of print::@4
Adding NOP phi() at start of print::@10
Adding NOP phi() at start of print::@8
Adding NOP phi() at start of clrscr
Adding NOP phi() at start of printf_uint
Adding NOP phi() at start of printf_string
Adding NOP phi() at start of printf_string::@1
Adding NOP phi() at start of gotoxy
Adding NOP phi() at start of cputc::@3
Adding NOP phi() at start of cputc::@1
Adding NOP phi() at start of utoa
Adding NOP phi() at start of printf_number_buffer::@6
Adding NOP phi() at start of printf_number_buffer::@21
Adding NOP phi() at start of printf_number_buffer::@11
Adding NOP phi() at start of printf_number_buffer::@5
Adding NOP phi() at start of ultoa
Adding NOP phi() at start of uctoa
Adding NOP phi() at start of utoa_append
Adding NOP phi() at start of strlen
Adding NOP phi() at start of strupr
Adding NOP phi() at start of ultoa_append
Adding NOP phi() at start of uctoa_append
Adding NOP phi() at start of cscroll::@1
Adding NOP phi() at start of cscroll::@2
Adding NOP phi() at start of cscroll::@3
Adding NOP phi() at start of cscroll::@4

FINAL CONTROL FLOW GRAPH

(void()) __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] (byte) conio_cursor_x ← (byte) 0
  [2] (byte) conio_cursor_y ← (byte) 0
  [3] (byte*) conio_line_text ← (const nomodify byte*) DEFAULT_SCREEN
  [4] (byte*) conio_line_color ← (const nomodify byte*) COLORRAM
  [5] (dword) count ← (dword) 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [6] phi()
  [7] call main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [8] return 
  to:@return

__stackcall (void()) queen((byte) queen::row)
queen: scope:[queen]  from
  [9] (byte) queen::row#0 ← stackidx(byte,(const byte) queen::OFFSET_STACK_ROW)
  [10] (byte) queen::r ← (byte) queen::row#0
  [11] (byte) queen::column ← (byte) 1
  to:queen::@1
queen::@1: scope:[queen]  from queen queen::@3
  [12] if((byte) queen::column<(byte) 8+(byte) 1) goto queen::@2
  to:queen::@return
queen::@return: scope:[queen]  from queen::@1
  [13] return 
  to:@return
queen::@2: scope:[queen]  from queen::@1
  [14] (byte) legal::row#0 ← (byte) queen::r
  [15] (byte) legal::column#0 ← (byte) queen::column
  [16] call legal 
  [17] (byte) legal::return#0 ← (byte) legal::return#4
  to:queen::@7
queen::@7: scope:[queen]  from queen::@2
  [18] (byte~) queen::$1 ← (byte) legal::return#0
  [19] if((byte) 0==(byte~) queen::$1) goto queen::@3
  to:queen::@5
queen::@5: scope:[queen]  from queen::@7
  [20] *((const byte*) board + (byte) queen::r) ← (byte) queen::column
  [21] if((byte) queen::r==(byte) 8) goto queen::@4
  to:queen::@6
queen::@6: scope:[queen]  from queen::@5
  asm { ldacolumn pha ldar pha  }
  [23] (byte~) queen::$4 ← (byte) queen::r + (byte) 1
  [24] stackpush(byte) ← (byte~) queen::$4
  [25] callexecute queen 
  sideeffect stackpullbytes((number) 1)
  asm { pla star pla stacolumn  }
  to:queen::@3
queen::@3: scope:[queen]  from queen::@4 queen::@6 queen::@7
  [28] (byte) queen::column ← ++ (byte) queen::column
  to:queen::@1
queen::@4: scope:[queen]  from queen::@5
  [29] (dword) count ← ++ (dword) count
  [30] call print 
  to:queen::@3

(void()) main()
main: scope:[main]  from __start::@1
  [31] phi()
  [32] call clrscr 
  to:main::@1
main::@1: scope:[main]  from main
  [33] phi()
  [34] call cputs 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [35] phi()
  [36] call cputs 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [37] phi()
  [38] call printf_uint 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [39] (byte) tod_init::tod_TENTHS#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO)
  [40] (byte) tod_init::tod_SEC#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_SEC)
  [41] (byte) tod_init::tod_MIN#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_MIN)
  [42] (byte) tod_init::tod_HOURS#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_HOURS)
  [43] call tod_init 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [44] stackpush(byte) ← (byte) 1
  [45] callexecute queen 
  sideeffect stackpullbytes((number) 1)
  [47] call tod_read 
  [48] (byte) tod_read::return_TENTHS#2 ← (byte) tod_read::return_TENTHS#0
  [49] (byte) tod_read::return_SEC#2 ← (byte) tod_read::return_SEC#0
  [50] (byte) tod_read::return_MIN#2 ← (byte) tod_read::return_MIN#0
  [51] (byte) tod_read::return_HOURS#2 ← (byte) tod_read::return_HOURS#0
  to:main::@6
main::@6: scope:[main]  from main::@5
  [52] (byte) tod_str::tod_TENTHS#0 ← (byte) tod_read::return_TENTHS#2
  [53] (byte) tod_str::tod_SEC#0 ← (byte) tod_read::return_SEC#2
  [54] (byte) tod_str::tod_MIN#0 ← (byte) tod_read::return_MIN#2
  [55] (byte) tod_str::tod_HOURS#0 ← (byte) tod_read::return_HOURS#2
  [56] call tod_str 
  to:main::@7
main::@7: scope:[main]  from main::@6
  [57] phi()
  [58] call cputs 
  to:main::@8
main::@8: scope:[main]  from main::@7
  [59] (dword) printf_ulong::uvalue#0 ← (dword) count
  [60] call printf_ulong 
  to:main::@9
main::@9: scope:[main]  from main::@8
  [61] phi()
  [62] call cputs 
  to:main::@10
main::@10: scope:[main]  from main::@9
  [63] phi()
  [64] call printf_string 
  to:main::@11
main::@11: scope:[main]  from main::@10
  [65] phi()
  [66] call cputs 
  to:main::@return
main::@return: scope:[main]  from main::@11
  [67] return 
  to:@return

(byte()) legal((byte) legal::row , (byte) legal::column)
legal: scope:[legal]  from queen::@2
  [68] phi()
  to:legal::@1
legal::@1: scope:[legal]  from legal legal::@3
  [69] (byte) legal::i#2 ← phi( legal/(byte) 1 legal::@3/(byte) legal::i#1 )
  [70] (byte~) legal::$0 ← (byte) legal::row#0 - (byte) 1
  [71] if((byte) legal::i#2<=(byte~) legal::$0) goto legal::@2
  to:legal::@return
legal::@return: scope:[legal]  from legal::@1 legal::@2 legal::@6
  [72] (byte) legal::return#4 ← phi( legal::@1/(byte) 1 legal::@2/(byte) 0 legal::@6/(byte) 0 )
  [73] return 
  to:@return
legal::@2: scope:[legal]  from legal::@1
  [74] if(*((const byte*) board + (byte) legal::i#2)==(byte) legal::column#0) goto legal::@return
  to:legal::@4
legal::@4: scope:[legal]  from legal::@2
  [75] (byte) diff::a#0 ← *((const byte*) board + (byte) legal::i#2)
  [76] (byte) diff::b#0 ← (byte) legal::column#0
  [77] call diff 
  [78] (byte) diff::return#0 ← (byte) diff::return#4
  to:legal::@5
legal::@5: scope:[legal]  from legal::@4
  [79] (byte~) legal::$3 ← (byte) diff::return#0
  [80] (byte) diff::a#1 ← (byte) legal::i#2
  [81] (byte) diff::b#1 ← (byte) legal::row#0
  [82] call diff 
  [83] (byte) diff::return#1 ← (byte) diff::return#4
  to:legal::@6
legal::@6: scope:[legal]  from legal::@5
  [84] (byte~) legal::$4 ← (byte) diff::return#1
  [85] if((byte~) legal::$3!=(byte~) legal::$4) goto legal::@3
  to:legal::@return
legal::@3: scope:[legal]  from legal::@6
  [86] (byte) legal::i#1 ← ++ (byte) legal::i#2
  to:legal::@1

(void()) print()
print: scope:[print]  from queen::@4
  [87] phi()
  [88] call gotoxy 
  to:print::@11
print::@11: scope:[print]  from print
  [89] phi()
  [90] call cputs 
  to:print::@12
print::@12: scope:[print]  from print::@11
  [91] (dword) printf_ulong::uvalue#1 ← (dword) count
  [92] call printf_ulong 
  to:print::@13
print::@13: scope:[print]  from print::@12
  [93] phi()
  [94] call cputs 
  to:print::@1
print::@1: scope:[print]  from print::@13 print::@14
  [95] (byte) print::i#2 ← phi( print::@13/(byte) 1 print::@14/(byte) print::i#1 )
  [96] if((byte) print::i#2<(byte) 8+(byte) 1) goto print::@2
  to:print::@3
print::@3: scope:[print]  from print::@1 print::@7
  [97] (byte) print::i1#2 ← phi( print::@1/(byte) 1 print::@7/(byte) print::i1#1 )
  [98] if((byte) print::i1#2<(byte) 8+(byte) 1) goto print::@4
  to:print::@return
print::@return: scope:[print]  from print::@3
  [99] return 
  to:@return
print::@4: scope:[print]  from print::@3
  [100] phi()
  [101] call cputs 
  to:print::@15
print::@15: scope:[print]  from print::@4
  [102] (byte) printf_uchar::uvalue#1 ← (byte) print::i1#2
  [103] call printf_uchar 
  to:print::@5
print::@5: scope:[print]  from print::@15 print::@9
  [104] (byte) print::j#2 ← phi( print::@9/(byte) print::j#1 print::@15/(byte) 1 )
  [105] if((byte) print::j#2<(byte) 8+(byte) 1) goto print::@6
  to:print::@7
print::@7: scope:[print]  from print::@5
  [106] (byte) print::i1#1 ← ++ (byte) print::i1#2
  to:print::@3
print::@6: scope:[print]  from print::@5
  [107] if(*((const byte*) board + (byte) print::i1#2)==(byte) print::j#2) goto print::@8
  to:print::@10
print::@10: scope:[print]  from print::@6
  [108] phi()
  [109] call cputs 
  to:print::@9
print::@9: scope:[print]  from print::@10 print::@8
  [110] (byte) print::j#1 ← ++ (byte) print::j#2
  to:print::@5
print::@8: scope:[print]  from print::@6
  [111] phi()
  [112] call cputs 
  to:print::@9
print::@2: scope:[print]  from print::@1
  [113] (byte) printf_uchar::uvalue#0 ← (byte) print::i#2
  [114] call printf_uchar 
  to:print::@14
print::@14: scope:[print]  from print::@2
  [115] (byte) print::i#1 ← ++ (byte) print::i#2
  to:print::@1

(void()) clrscr()
clrscr: scope:[clrscr]  from main
  [116] phi()
  to:clrscr::@1
clrscr::@1: scope:[clrscr]  from clrscr clrscr::@5
  [117] (byte*) clrscr::line_cols#5 ← phi( clrscr/(const nomodify byte*) COLORRAM clrscr::@5/(byte*) clrscr::line_cols#1 )
  [117] (byte*) clrscr::line_text#5 ← phi( clrscr/(const nomodify byte*) DEFAULT_SCREEN clrscr::@5/(byte*) clrscr::line_text#1 )
  [117] (byte) clrscr::l#2 ← phi( clrscr/(byte) 0 clrscr::@5/(byte) clrscr::l#1 )
  [118] if((byte) clrscr::l#2<(byte) $19) goto clrscr::@3
  to:clrscr::@2
clrscr::@2: scope:[clrscr]  from clrscr::@1
  [119] (byte) conio_cursor_x ← (byte) 0
  [120] (byte) conio_cursor_y ← (byte) 0
  [121] (byte*) conio_line_text ← (const nomodify byte*) DEFAULT_SCREEN
  [122] (byte*) conio_line_color ← (const nomodify byte*) COLORRAM
  to:clrscr::@return
clrscr::@return: scope:[clrscr]  from clrscr::@2
  [123] return 
  to:@return
clrscr::@3: scope:[clrscr]  from clrscr::@1 clrscr::@4
  [124] (byte) clrscr::c#2 ← phi( clrscr::@1/(byte) 0 clrscr::@4/(byte) clrscr::c#1 )
  [125] if((byte) clrscr::c#2<(byte) $28) goto clrscr::@4
  to:clrscr::@5
clrscr::@5: scope:[clrscr]  from clrscr::@3
  [126] (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#5 + (byte) $28
  [127] (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#5 + (byte) $28
  [128] (byte) clrscr::l#1 ← ++ (byte) clrscr::l#2
  to:clrscr::@1
clrscr::@4: scope:[clrscr]  from clrscr::@3
  [129] *((byte*) clrscr::line_text#5 + (byte) clrscr::c#2) ← (byte) ' '
  [130] *((byte*) clrscr::line_cols#5 + (byte) clrscr::c#2) ← (const nomodify byte) LIGHT_BLUE
  [131] (byte) clrscr::c#1 ← ++ (byte) clrscr::c#2
  to:clrscr::@3

(void()) cputs((to_nomodify byte*) cputs::s)
cputs: scope:[cputs]  from main::@1 main::@11 main::@2 main::@7 main::@9 print::@10 print::@11 print::@13 print::@4 print::@8 printf_number_buffer::@5 printf_string::@1
  [132] (to_nomodify byte*) cputs::s#14 ← phi( main::@1/(const byte*) main::s main::@11/(const byte*) main::s4 main::@2/(const byte*) main::s1 main::@7/(const byte*) main::s2 main::@9/(const byte*) main::s3 print::@10/(const byte*) print::s4 print::@11/(const byte*) print::s print::@13/(const byte*) print::s1 print::@4/(const byte*) print::s2 print::@8/(const byte*) print::s3 printf_number_buffer::@5/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS printf_string::@1/(const byte*) tod_buffer )
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@2
  [133] (to_nomodify byte*) cputs::s#13 ← phi( cputs/(to_nomodify byte*) cputs::s#14 cputs::@2/(to_nomodify byte*) cputs::s#0 )
  [134] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#13)
  [135] (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#13
  [136] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2
  to:cputs::@return
cputs::@return: scope:[cputs]  from cputs::@1
  [137] return 
  to:@return
cputs::@2: scope:[cputs]  from cputs::@1
  [138] (byte) cputc::c#0 ← (byte) cputs::c#1
  [139] call cputc 
  to:cputs::@1

(void()) printf_uint((word) printf_uint::uvalue , (byte) printf_uint::format_min_length , (byte) printf_uint::format_justify_left , (byte) printf_uint::format_sign_always , (byte) printf_uint::format_zero_padding , (byte) printf_uint::format_upper_case , (byte) printf_uint::format_radix)
printf_uint: scope:[printf_uint]  from main::@3
  [140] phi()
  to:printf_uint::@1
printf_uint::@1: scope:[printf_uint]  from printf_uint
  [141] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0
  [142] call utoa 
  to:printf_uint::@2
printf_uint::@2: scope:[printf_uint]  from printf_uint::@1
  [143] (byte) printf_number_buffer::buffer_sign#1 ← *((byte*)&(struct printf_buffer_number) printf_buffer)
  [144] call printf_number_buffer 
  to:printf_uint::@return
printf_uint::@return: scope:[printf_uint]  from printf_uint::@2
  [145] return 
  to:@return

(void()) tod_init((byte) tod_init::tod_TENTHS , (byte) tod_init::tod_SEC , (byte) tod_init::tod_MIN , (byte) tod_init::tod_HOURS)
tod_init: scope:[tod_init]  from main::@4
  [146] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) | (byte) $80
  [147] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) & (byte) $7f
  [148] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS) ← (byte) tod_init::tod_HOURS#0
  [149] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN) ← (byte) tod_init::tod_MIN#0
  [150] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC) ← (byte) tod_init::tod_SEC#0
  [151] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS) ← (byte) tod_init::tod_TENTHS#0
  to:tod_init::@return
tod_init::@return: scope:[tod_init]  from tod_init
  [152] return 
  to:@return

(struct TIME_OF_DAY()) tod_read()
tod_read: scope:[tod_read]  from main::@5
  [153] (byte) tod_read::return_HOURS#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS)
  [154] (byte) tod_read::return_MIN#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN)
  [155] (byte) tod_read::return_SEC#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC)
  [156] (byte) tod_read::return_TENTHS#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS)
  to:tod_read::@return
tod_read::@return: scope:[tod_read]  from tod_read
  [157] return 
  to:@return

(byte*()) tod_str((byte) tod_str::tod_TENTHS , (byte) tod_str::tod_SEC , (byte) tod_str::tod_MIN , (byte) tod_str::tod_HOURS)
tod_str: scope:[tod_str]  from main::@6
  [158] (byte~) tod_str::$0 ← (byte) tod_str::tod_HOURS#0 >> (byte) 4
  [159] (byte~) tod_str::$1 ← (byte) '0' + (byte~) tod_str::$0
  [160] *((const byte*) tod_buffer) ← (byte~) tod_str::$1
  [161] (byte~) tod_str::$2 ← (byte) tod_str::tod_HOURS#0 & (byte) $f
  [162] (byte~) tod_str::$3 ← (byte) '0' + (byte~) tod_str::$2
  [163] *((const byte*) tod_buffer+(byte) 1) ← (byte~) tod_str::$3
  [164] (byte~) tod_str::$4 ← (byte) tod_str::tod_MIN#0 >> (byte) 4
  [165] (byte~) tod_str::$5 ← (byte) '0' + (byte~) tod_str::$4
  [166] *((const byte*) tod_buffer+(byte) 3) ← (byte~) tod_str::$5
  [167] (byte~) tod_str::$6 ← (byte) tod_str::tod_MIN#0 & (byte) $f
  [168] (byte~) tod_str::$7 ← (byte) '0' + (byte~) tod_str::$6
  [169] *((const byte*) tod_buffer+(byte) 4) ← (byte~) tod_str::$7
  [170] (byte~) tod_str::$8 ← (byte) tod_str::tod_SEC#0 >> (byte) 4
  [171] (byte~) tod_str::$9 ← (byte) '0' + (byte~) tod_str::$8
  [172] *((const byte*) tod_buffer+(byte) 6) ← (byte~) tod_str::$9
  [173] (byte~) tod_str::$10 ← (byte) tod_str::tod_SEC#0 & (byte) $f
  [174] (byte~) tod_str::$11 ← (byte) '0' + (byte~) tod_str::$10
  [175] *((const byte*) tod_buffer+(byte) 7) ← (byte~) tod_str::$11
  [176] (byte~) tod_str::$12 ← (byte) tod_str::tod_TENTHS#0 >> (byte) 4
  [177] (byte~) tod_str::$13 ← (byte) '0' + (byte~) tod_str::$12
  [178] *((const byte*) tod_buffer+(byte) 9) ← (byte~) tod_str::$13
  [179] (byte~) tod_str::$14 ← (byte) tod_str::tod_TENTHS#0 & (byte) $f
  [180] (byte~) tod_str::$15 ← (byte) '0' + (byte~) tod_str::$14
  [181] *((const byte*) tod_buffer+(byte) $a) ← (byte~) tod_str::$15
  to:tod_str::@return
tod_str::@return: scope:[tod_str]  from tod_str
  [182] return 
  to:@return

(void()) printf_ulong((dword) printf_ulong::uvalue , (byte) printf_ulong::format_min_length , (byte) printf_ulong::format_justify_left , (byte) printf_ulong::format_sign_always , (byte) printf_ulong::format_zero_padding , (byte) printf_ulong::format_upper_case , (byte) printf_ulong::format_radix)
printf_ulong: scope:[printf_ulong]  from main::@8 print::@12
  [183] (dword) printf_ulong::uvalue#2 ← phi( main::@8/(dword) printf_ulong::uvalue#0 print::@12/(dword) printf_ulong::uvalue#1 )
  to:printf_ulong::@1
printf_ulong::@1: scope:[printf_ulong]  from printf_ulong
  [184] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0
  [185] (dword) ultoa::value#1 ← (dword) printf_ulong::uvalue#2
  [186] call ultoa 
  to:printf_ulong::@2
printf_ulong::@2: scope:[printf_ulong]  from printf_ulong::@1
  [187] (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer)
  [188] call printf_number_buffer 
  to:printf_ulong::@return
printf_ulong::@return: scope:[printf_ulong]  from printf_ulong::@2
  [189] return 
  to:@return

(void()) printf_string((byte*) printf_string::str , (byte) printf_string::format_min_length , (byte) printf_string::format_justify_left)
printf_string: scope:[printf_string]  from main::@10
  [190] phi()
  to:printf_string::@1
printf_string::@1: scope:[printf_string]  from printf_string
  [191] phi()
  [192] call cputs 
  to:printf_string::@return
printf_string::@return: scope:[printf_string]  from printf_string::@1
  [193] return 
  to:@return

(byte()) diff((byte) diff::a , (byte) diff::b)
diff: scope:[diff]  from legal::@4 legal::@5
  [194] (byte) diff::b#2 ← phi( legal::@4/(byte) diff::b#0 legal::@5/(byte) diff::b#1 )
  [194] (byte) diff::a#2 ← phi( legal::@4/(byte) diff::a#0 legal::@5/(byte) diff::a#1 )
  [195] if((byte) diff::a#2<(byte) diff::b#2) goto diff::@1
  to:diff::@2
diff::@2: scope:[diff]  from diff
  [196] (byte) diff::return#3 ← (byte) diff::a#2 - (byte) diff::b#2
  to:diff::@return
diff::@return: scope:[diff]  from diff::@1 diff::@2
  [197] (byte) diff::return#4 ← phi( diff::@1/(byte) diff::return#2 diff::@2/(byte) diff::return#3 )
  [198] return 
  to:@return
diff::@1: scope:[diff]  from diff
  [199] (byte) diff::return#2 ← (byte) diff::b#2 - (byte) diff::a#2
  to:diff::@return

(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
gotoxy: scope:[gotoxy]  from print
  [200] phi()
  to:gotoxy::@1
gotoxy::@1: scope:[gotoxy]  from gotoxy
  [201] (byte) conio_cursor_x ← (const byte) gotoxy::x#2
  [202] (byte) conio_cursor_y ← (const byte) gotoxy::y#2
  [203] (byte*) conio_line_text ← (const nomodify byte*) DEFAULT_SCREEN+(const word) gotoxy::line_offset#0
  [204] (byte*) conio_line_color ← (const nomodify byte*) COLORRAM+(const word) gotoxy::line_offset#0
  to:gotoxy::@return
gotoxy::@return: scope:[gotoxy]  from gotoxy::@1
  [205] return 
  to:@return

(void()) printf_uchar((byte) printf_uchar::uvalue , (byte) printf_uchar::format_min_length , (byte) printf_uchar::format_justify_left , (byte) printf_uchar::format_sign_always , (byte) printf_uchar::format_zero_padding , (byte) printf_uchar::format_upper_case , (byte) printf_uchar::format_radix)
printf_uchar: scope:[printf_uchar]  from print::@15 print::@2
  [206] (byte) printf_uchar::uvalue#2 ← phi( print::@15/(byte) printf_uchar::uvalue#1 print::@2/(byte) printf_uchar::uvalue#0 )
  to:printf_uchar::@1
printf_uchar::@1: scope:[printf_uchar]  from printf_uchar
  [207] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0
  [208] (byte) uctoa::value#1 ← (byte) printf_uchar::uvalue#2
  [209] call uctoa 
  to:printf_uchar::@2
printf_uchar::@2: scope:[printf_uchar]  from printf_uchar::@1
  [210] (byte) printf_number_buffer::buffer_sign#2 ← *((byte*)&(struct printf_buffer_number) printf_buffer)
  [211] call printf_number_buffer 
  to:printf_uchar::@return
printf_uchar::@return: scope:[printf_uchar]  from printf_uchar::@2
  [212] return 
  to:@return

(void()) cputc((byte) cputc::c)
cputc: scope:[cputc]  from cputs::@2 printf_number_buffer::@9 printf_padding::@2
  [213] (byte) cputc::c#3 ← phi( cputs::@2/(byte) cputc::c#0 printf_number_buffer::@9/(byte) cputc::c#2 printf_padding::@2/(byte) cputc::c#1 )
  [214] if((byte) cputc::c#3==(byte) '
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [215] *((byte*) conio_line_text + (byte) conio_cursor_x) ← (byte) cputc::c#3
  [216] *((byte*) conio_line_color + (byte) conio_cursor_x) ← (const nomodify byte) LIGHT_BLUE
  [217] (byte) conio_cursor_x ← ++ (byte) conio_cursor_x
  [218] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  [219] phi()
  [220] call cputln 
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@3
  [221] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [222] phi()
  [223] call cputln 
  to:cputc::@return

(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
utoa: scope:[utoa]  from printf_uint::@1
  [224] phi()
  to:utoa::@1
utoa::@1: scope:[utoa]  from utoa utoa::@4
  [225] (byte*) utoa::buffer#11 ← phi( utoa::@4/(byte*) utoa::buffer#14 utoa/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [225] (byte) utoa::started#2 ← phi( utoa::@4/(byte) utoa::started#4 utoa/(byte) 0 )
  [225] (word) utoa::value#2 ← phi( utoa::@4/(word) utoa::value#6 utoa/(const word) printf_uint::uvalue#0 )
  [225] (byte) utoa::digit#2 ← phi( utoa::@4/(byte) utoa::digit#1 utoa/(byte) 0 )
  [226] if((byte) utoa::digit#2<(const byte) utoa::max_digits#1-(byte) 1) goto utoa::@2
  to:utoa::@3
utoa::@3: scope:[utoa]  from utoa::@1
  [227] (byte~) utoa::$11 ← (byte)(word) utoa::value#2
  [228] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11)
  [229] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11
  [230] *((byte*) utoa::buffer#3) ← (byte) 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@3
  [231] return 
  to:@return
utoa::@2: scope:[utoa]  from utoa::@1
  [232] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1
  [233] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10)
  [234] if((byte) 0!=(byte) utoa::started#2) goto utoa::@5
  to:utoa::@7
utoa::@7: scope:[utoa]  from utoa::@2
  [235] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5
  to:utoa::@4
utoa::@4: scope:[utoa]  from utoa::@6 utoa::@7
  [236] (byte*) utoa::buffer#14 ← phi( utoa::@7/(byte*) utoa::buffer#11 utoa::@6/(byte*) utoa::buffer#4 )
  [236] (byte) utoa::started#4 ← phi( utoa::@7/(byte) utoa::started#2 utoa::@6/(byte) 1 )
  [236] (word) utoa::value#6 ← phi( utoa::@7/(word) utoa::value#2 utoa::@6/(word) utoa::value#0 )
  [237] (byte) utoa::digit#1 ← ++ (byte) utoa::digit#2
  to:utoa::@1
utoa::@5: scope:[utoa]  from utoa::@2 utoa::@7
  [238] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11
  [239] (word) utoa_append::value#0 ← (word) utoa::value#2
  [240] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0
  [241] call utoa_append 
  [242] (word) utoa_append::return#0 ← (word) utoa_append::value#2
  to:utoa::@6
utoa::@6: scope:[utoa]  from utoa::@5
  [243] (word) utoa::value#0 ← (word) utoa_append::return#0
  [244] (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#11
  to:utoa::@4

(void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_uchar::@2 printf_uint::@2 printf_ulong::@2
  [245] (byte) printf_number_buffer::format_upper_case#10 ← phi( printf_uchar::@2/(byte) 0 printf_uint::@2/(const byte) printf_uint::format_upper_case#0 printf_ulong::@2/(byte) 0 )
  [245] (byte) printf_number_buffer::buffer_sign#10 ← phi( printf_uchar::@2/(byte) printf_number_buffer::buffer_sign#2 printf_uint::@2/(byte) printf_number_buffer::buffer_sign#1 printf_ulong::@2/(byte) printf_number_buffer::buffer_sign#0 )
  [245] (byte) printf_number_buffer::format_zero_padding#10 ← phi( printf_uchar::@2/(byte) 0 printf_uint::@2/(const byte) printf_uint::format_zero_padding#0 printf_ulong::@2/(byte) 0 )
  [245] (byte) printf_number_buffer::format_justify_left#10 ← phi( printf_uchar::@2/(byte) 0 printf_uint::@2/(const byte) printf_uint::format_justify_left#0 printf_ulong::@2/(byte) 0 )
  [245] (byte) printf_number_buffer::format_min_length#3 ← phi( printf_uchar::@2/(byte) 0 printf_uint::@2/(const byte) printf_uint::format_min_length#0 printf_ulong::@2/(byte) 0 )
  [246] if((byte) 0==(byte) printf_number_buffer::format_min_length#3) goto printf_number_buffer::@1
  to:printf_number_buffer::@6
printf_number_buffer::@6: scope:[printf_number_buffer]  from printf_number_buffer
  [247] phi()
  [248] call strlen 
  [249] (word) strlen::return#2 ← (word) strlen::len#2
  to:printf_number_buffer::@14
printf_number_buffer::@14: scope:[printf_number_buffer]  from printf_number_buffer::@6
  [250] (word~) printf_number_buffer::$19 ← (word) strlen::return#2
  [251] (signed byte) printf_number_buffer::len#0 ← (signed byte)(word~) printf_number_buffer::$19
  [252] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@13
  to:printf_number_buffer::@7
printf_number_buffer::@7: scope:[printf_number_buffer]  from printf_number_buffer::@14
  [253] (signed byte) printf_number_buffer::len#1 ← ++ (signed byte) printf_number_buffer::len#0
  to:printf_number_buffer::@13
printf_number_buffer::@13: scope:[printf_number_buffer]  from printf_number_buffer::@14 printf_number_buffer::@7
  [254] (signed byte) printf_number_buffer::len#2 ← phi( printf_number_buffer::@14/(signed byte) printf_number_buffer::len#0 printf_number_buffer::@7/(signed byte) printf_number_buffer::len#1 )
  [255] (signed byte) printf_number_buffer::padding#1 ← (signed byte)(byte) printf_number_buffer::format_min_length#3 - (signed byte) printf_number_buffer::len#2
  [256] if((signed byte) printf_number_buffer::padding#1>=(signed byte) 0) goto printf_number_buffer::@21
  to:printf_number_buffer::@1
printf_number_buffer::@21: scope:[printf_number_buffer]  from printf_number_buffer::@13
  [257] phi()
  to:printf_number_buffer::@1
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer printf_number_buffer::@13 printf_number_buffer::@21
  [258] (signed byte) printf_number_buffer::padding#10 ← phi( printf_number_buffer/(signed byte) 0 printf_number_buffer::@21/(signed byte) printf_number_buffer::padding#1 printf_number_buffer::@13/(signed byte) 0 )
  [259] if((byte) 0!=(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@2
  to:printf_number_buffer::@17
printf_number_buffer::@17: scope:[printf_number_buffer]  from printf_number_buffer::@1
  [260] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@2
  to:printf_number_buffer::@16
printf_number_buffer::@16: scope:[printf_number_buffer]  from printf_number_buffer::@17
  [261] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@8
  to:printf_number_buffer::@2
printf_number_buffer::@8: scope:[printf_number_buffer]  from printf_number_buffer::@16
  [262] (byte) printf_padding::length#0 ← (byte)(signed byte) printf_number_buffer::padding#10
  [263] call printf_padding 
  to:printf_number_buffer::@2
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@16 printf_number_buffer::@17 printf_number_buffer::@8
  [264] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@3
  to:printf_number_buffer::@9
printf_number_buffer::@9: scope:[printf_number_buffer]  from printf_number_buffer::@2
  [265] (byte) cputc::c#2 ← (byte) printf_number_buffer::buffer_sign#10
  [266] call cputc 
  to:printf_number_buffer::@3
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@2 printf_number_buffer::@9
  [267] if((byte) 0==(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@4
  to:printf_number_buffer::@18
printf_number_buffer::@18: scope:[printf_number_buffer]  from printf_number_buffer::@3
  [268] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@10
  to:printf_number_buffer::@4
printf_number_buffer::@10: scope:[printf_number_buffer]  from printf_number_buffer::@18
  [269] (byte) printf_padding::length#1 ← (byte)(signed byte) printf_number_buffer::padding#10
  [270] call printf_padding 
  to:printf_number_buffer::@4
printf_number_buffer::@4: scope:[printf_number_buffer]  from printf_number_buffer::@10 printf_number_buffer::@18 printf_number_buffer::@3
  [271] if((byte) 0==(byte) printf_number_buffer::format_upper_case#10) goto printf_number_buffer::@5
  to:printf_number_buffer::@11
printf_number_buffer::@11: scope:[printf_number_buffer]  from printf_number_buffer::@4
  [272] phi()
  [273] call strupr 
  to:printf_number_buffer::@5
printf_number_buffer::@5: scope:[printf_number_buffer]  from printf_number_buffer::@11 printf_number_buffer::@4
  [274] phi()
  [275] call cputs 
  to:printf_number_buffer::@15
printf_number_buffer::@15: scope:[printf_number_buffer]  from printf_number_buffer::@5
  [276] if((byte) 0==(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@return
  to:printf_number_buffer::@20
printf_number_buffer::@20: scope:[printf_number_buffer]  from printf_number_buffer::@15
  [277] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@return
  to:printf_number_buffer::@19
printf_number_buffer::@19: scope:[printf_number_buffer]  from printf_number_buffer::@20
  [278] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@12
  to:printf_number_buffer::@return
printf_number_buffer::@12: scope:[printf_number_buffer]  from printf_number_buffer::@19
  [279] (byte) printf_padding::length#2 ← (byte)(signed byte) printf_number_buffer::padding#10
  [280] call printf_padding 
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@12 printf_number_buffer::@15 printf_number_buffer::@19 printf_number_buffer::@20
  [281] return 
  to:@return

(void()) ultoa((dword) ultoa::value , (byte*) ultoa::buffer , (byte) ultoa::radix)
ultoa: scope:[ultoa]  from printf_ulong::@1
  [282] phi()
  to:ultoa::@1
ultoa::@1: scope:[ultoa]  from ultoa ultoa::@4
  [283] (byte*) ultoa::buffer#11 ← phi( ultoa::@4/(byte*) ultoa::buffer#14 ultoa/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [283] (byte) ultoa::started#2 ← phi( ultoa::@4/(byte) ultoa::started#4 ultoa/(byte) 0 )
  [283] (dword) ultoa::value#2 ← phi( ultoa::@4/(dword) ultoa::value#6 ultoa/(dword) ultoa::value#1 )
  [283] (byte) ultoa::digit#2 ← phi( ultoa::@4/(byte) ultoa::digit#1 ultoa/(byte) 0 )
  [284] if((byte) ultoa::digit#2<(byte) $a-(byte) 1) goto ultoa::@2
  to:ultoa::@3
ultoa::@3: scope:[ultoa]  from ultoa::@1
  [285] (byte~) ultoa::$11 ← (byte)(dword) ultoa::value#2
  [286] *((byte*) ultoa::buffer#11) ← *((const byte*) DIGITS + (byte~) ultoa::$11)
  [287] (byte*) ultoa::buffer#3 ← ++ (byte*) ultoa::buffer#11
  [288] *((byte*) ultoa::buffer#3) ← (byte) 0
  to:ultoa::@return
ultoa::@return: scope:[ultoa]  from ultoa::@3
  [289] return 
  to:@return
ultoa::@2: scope:[ultoa]  from ultoa::@1
  [290] (byte~) ultoa::$10 ← (byte) ultoa::digit#2 << (byte) 2
  [291] (dword) ultoa::digit_value#0 ← *((const dword*) RADIX_DECIMAL_VALUES_LONG + (byte~) ultoa::$10)
  [292] if((byte) 0!=(byte) ultoa::started#2) goto ultoa::@5
  to:ultoa::@7
ultoa::@7: scope:[ultoa]  from ultoa::@2
  [293] if((dword) ultoa::value#2>=(dword) ultoa::digit_value#0) goto ultoa::@5
  to:ultoa::@4
ultoa::@4: scope:[ultoa]  from ultoa::@6 ultoa::@7
  [294] (byte*) ultoa::buffer#14 ← phi( ultoa::@7/(byte*) ultoa::buffer#11 ultoa::@6/(byte*) ultoa::buffer#4 )
  [294] (byte) ultoa::started#4 ← phi( ultoa::@7/(byte) ultoa::started#2 ultoa::@6/(byte) 1 )
  [294] (dword) ultoa::value#6 ← phi( ultoa::@7/(dword) ultoa::value#2 ultoa::@6/(dword) ultoa::value#0 )
  [295] (byte) ultoa::digit#1 ← ++ (byte) ultoa::digit#2
  to:ultoa::@1
ultoa::@5: scope:[ultoa]  from ultoa::@2 ultoa::@7
  [296] (byte*) ultoa_append::buffer#0 ← (byte*) ultoa::buffer#11
  [297] (dword) ultoa_append::value#0 ← (dword) ultoa::value#2
  [298] (dword) ultoa_append::sub#0 ← (dword) ultoa::digit_value#0
  [299] call ultoa_append 
  [300] (dword) ultoa_append::return#0 ← (dword) ultoa_append::value#2
  to:ultoa::@6
ultoa::@6: scope:[ultoa]  from ultoa::@5
  [301] (dword) ultoa::value#0 ← (dword) ultoa_append::return#0
  [302] (byte*) ultoa::buffer#4 ← ++ (byte*) ultoa::buffer#11
  to:ultoa::@4

(void()) uctoa((byte) uctoa::value , (byte*) uctoa::buffer , (byte) uctoa::radix)
uctoa: scope:[uctoa]  from printf_uchar::@1
  [303] phi()
  to:uctoa::@1
uctoa::@1: scope:[uctoa]  from uctoa uctoa::@4
  [304] (byte*) uctoa::buffer#11 ← phi( uctoa::@4/(byte*) uctoa::buffer#14 uctoa/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [304] (byte) uctoa::started#2 ← phi( uctoa::@4/(byte) uctoa::started#4 uctoa/(byte) 0 )
  [304] (byte) uctoa::value#2 ← phi( uctoa::@4/(byte) uctoa::value#6 uctoa/(byte) uctoa::value#1 )
  [304] (byte) uctoa::digit#2 ← phi( uctoa::@4/(byte) uctoa::digit#1 uctoa/(byte) 0 )
  [305] if((byte) uctoa::digit#2<(byte) 2-(byte) 1) goto uctoa::@2
  to:uctoa::@3
uctoa::@3: scope:[uctoa]  from uctoa::@1
  [306] *((byte*) uctoa::buffer#11) ← *((const byte*) DIGITS + (byte) uctoa::value#2)
  [307] (byte*) uctoa::buffer#3 ← ++ (byte*) uctoa::buffer#11
  [308] *((byte*) uctoa::buffer#3) ← (byte) 0
  to:uctoa::@return
uctoa::@return: scope:[uctoa]  from uctoa::@3
  [309] return 
  to:@return
uctoa::@2: scope:[uctoa]  from uctoa::@1
  [310] (byte) uctoa::digit_value#0 ← *((const byte*) RADIX_HEXADECIMAL_VALUES_CHAR + (byte) uctoa::digit#2)
  [311] if((byte) 0!=(byte) uctoa::started#2) goto uctoa::@5
  to:uctoa::@7
uctoa::@7: scope:[uctoa]  from uctoa::@2
  [312] if((byte) uctoa::value#2>=(byte) uctoa::digit_value#0) goto uctoa::@5
  to:uctoa::@4
uctoa::@4: scope:[uctoa]  from uctoa::@6 uctoa::@7
  [313] (byte*) uctoa::buffer#14 ← phi( uctoa::@7/(byte*) uctoa::buffer#11 uctoa::@6/(byte*) uctoa::buffer#4 )
  [313] (byte) uctoa::started#4 ← phi( uctoa::@7/(byte) uctoa::started#2 uctoa::@6/(byte) 1 )
  [313] (byte) uctoa::value#6 ← phi( uctoa::@7/(byte) uctoa::value#2 uctoa::@6/(byte) uctoa::value#0 )
  [314] (byte) uctoa::digit#1 ← ++ (byte) uctoa::digit#2
  to:uctoa::@1
uctoa::@5: scope:[uctoa]  from uctoa::@2 uctoa::@7
  [315] (byte*) uctoa_append::buffer#0 ← (byte*) uctoa::buffer#11
  [316] (byte) uctoa_append::value#0 ← (byte) uctoa::value#2
  [317] (byte) uctoa_append::sub#0 ← (byte) uctoa::digit_value#0
  [318] call uctoa_append 
  [319] (byte) uctoa_append::return#0 ← (byte) uctoa_append::value#2
  to:uctoa::@6
uctoa::@6: scope:[uctoa]  from uctoa::@5
  [320] (byte) uctoa::value#0 ← (byte) uctoa_append::return#0
  [321] (byte*) uctoa::buffer#4 ← ++ (byte*) uctoa::buffer#11
  to:uctoa::@4

(void()) cputln()
cputln: scope:[cputln]  from cputc::@1 cputc::@3
  [322] (byte*) conio_line_text ← (byte*) conio_line_text + (byte) $28
  [323] (byte*) conio_line_color ← (byte*) conio_line_color + (byte) $28
  [324] (byte) conio_cursor_x ← (byte) 0
  [325] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y
  [326] call cscroll 
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [327] return 
  to:@return

(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
utoa_append: scope:[utoa_append]  from utoa::@5
  [328] phi()
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  [329] (byte) utoa_append::digit#2 ← phi( utoa_append/(byte) 0 utoa_append::@2/(byte) utoa_append::digit#1 )
  [329] (word) utoa_append::value#2 ← phi( utoa_append/(word) utoa_append::value#0 utoa_append::@2/(word) utoa_append::value#1 )
  [330] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  [331] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2)
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  [332] return 
  to:@return
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  [333] (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2
  [334] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0
  to:utoa_append::@1

(word()) strlen((byte*) strlen::str)
strlen: scope:[strlen]  from printf_number_buffer::@6
  [335] phi()
  to:strlen::@1
strlen::@1: scope:[strlen]  from strlen strlen::@2
  [336] (word) strlen::len#2 ← phi( strlen/(word) 0 strlen::@2/(word) strlen::len#1 )
  [336] (byte*) strlen::str#3 ← phi( strlen/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS strlen::@2/(byte*) strlen::str#0 )
  [337] if((byte) 0!=*((byte*) strlen::str#3)) goto strlen::@2
  to:strlen::@return
strlen::@return: scope:[strlen]  from strlen::@1
  [338] return 
  to:@return
strlen::@2: scope:[strlen]  from strlen::@1
  [339] (word) strlen::len#1 ← ++ (word) strlen::len#2
  [340] (byte*) strlen::str#0 ← ++ (byte*) strlen::str#3
  to:strlen::@1

(void()) printf_padding((byte) printf_padding::pad , (byte) printf_padding::length)
printf_padding: scope:[printf_padding]  from printf_number_buffer::@10 printf_number_buffer::@12 printf_number_buffer::@8
  [341] (byte) printf_padding::pad#7 ← phi( printf_number_buffer::@10/(byte) '0' printf_number_buffer::@12/(byte) ' ' printf_number_buffer::@8/(byte) ' ' )
  [341] (byte) printf_padding::length#6 ← phi( printf_number_buffer::@10/(byte) printf_padding::length#1 printf_number_buffer::@12/(byte) printf_padding::length#2 printf_number_buffer::@8/(byte) printf_padding::length#0 )
  to:printf_padding::@1
printf_padding::@1: scope:[printf_padding]  from printf_padding printf_padding::@3
  [342] (byte) printf_padding::i#2 ← phi( printf_padding/(byte) 0 printf_padding::@3/(byte) printf_padding::i#1 )
  [343] if((byte) printf_padding::i#2<(byte) printf_padding::length#6) goto printf_padding::@2
  to:printf_padding::@return
printf_padding::@return: scope:[printf_padding]  from printf_padding::@1
  [344] return 
  to:@return
printf_padding::@2: scope:[printf_padding]  from printf_padding::@1
  [345] (byte) cputc::c#1 ← (byte) printf_padding::pad#7
  [346] call cputc 
  to:printf_padding::@3
printf_padding::@3: scope:[printf_padding]  from printf_padding::@2
  [347] (byte) printf_padding::i#1 ← ++ (byte) printf_padding::i#2
  to:printf_padding::@1

(byte*()) strupr((byte*) strupr::str)
strupr: scope:[strupr]  from printf_number_buffer::@11
  [348] phi()
  to:strupr::@1
strupr::@1: scope:[strupr]  from strupr strupr::@3
  [349] (byte*) strupr::src#2 ← phi( strupr/(const byte*) strupr::str#0 strupr::@3/(byte*) strupr::src#1 )
  [350] if((byte) 0!=*((byte*) strupr::src#2)) goto strupr::@2
  to:strupr::@return
strupr::@return: scope:[strupr]  from strupr::@1
  [351] return 
  to:@return
strupr::@2: scope:[strupr]  from strupr::@1
  [352] (byte) toupper::ch#0 ← *((byte*) strupr::src#2)
  [353] call toupper 
  [354] (byte) toupper::return#3 ← (byte) toupper::return#2
  to:strupr::@3
strupr::@3: scope:[strupr]  from strupr::@2
  [355] (byte~) strupr::$0 ← (byte) toupper::return#3
  [356] *((byte*) strupr::src#2) ← (byte~) strupr::$0
  [357] (byte*) strupr::src#1 ← ++ (byte*) strupr::src#2
  to:strupr::@1

(dword()) ultoa_append((byte*) ultoa_append::buffer , (dword) ultoa_append::value , (dword) ultoa_append::sub)
ultoa_append: scope:[ultoa_append]  from ultoa::@5
  [358] phi()
  to:ultoa_append::@1
ultoa_append::@1: scope:[ultoa_append]  from ultoa_append ultoa_append::@2
  [359] (byte) ultoa_append::digit#2 ← phi( ultoa_append/(byte) 0 ultoa_append::@2/(byte) ultoa_append::digit#1 )
  [359] (dword) ultoa_append::value#2 ← phi( ultoa_append/(dword) ultoa_append::value#0 ultoa_append::@2/(dword) ultoa_append::value#1 )
  [360] if((dword) ultoa_append::value#2>=(dword) ultoa_append::sub#0) goto ultoa_append::@2
  to:ultoa_append::@3
ultoa_append::@3: scope:[ultoa_append]  from ultoa_append::@1
  [361] *((byte*) ultoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) ultoa_append::digit#2)
  to:ultoa_append::@return
ultoa_append::@return: scope:[ultoa_append]  from ultoa_append::@3
  [362] return 
  to:@return
ultoa_append::@2: scope:[ultoa_append]  from ultoa_append::@1
  [363] (byte) ultoa_append::digit#1 ← ++ (byte) ultoa_append::digit#2
  [364] (dword) ultoa_append::value#1 ← (dword) ultoa_append::value#2 - (dword) ultoa_append::sub#0
  to:ultoa_append::@1

(byte()) uctoa_append((byte*) uctoa_append::buffer , (byte) uctoa_append::value , (byte) uctoa_append::sub)
uctoa_append: scope:[uctoa_append]  from uctoa::@5
  [365] phi()
  to:uctoa_append::@1
uctoa_append::@1: scope:[uctoa_append]  from uctoa_append uctoa_append::@2
  [366] (byte) uctoa_append::digit#2 ← phi( uctoa_append/(byte) 0 uctoa_append::@2/(byte) uctoa_append::digit#1 )
  [366] (byte) uctoa_append::value#2 ← phi( uctoa_append/(byte) uctoa_append::value#0 uctoa_append::@2/(byte) uctoa_append::value#1 )
  [367] if((byte) uctoa_append::value#2>=(byte) uctoa_append::sub#0) goto uctoa_append::@2
  to:uctoa_append::@3
uctoa_append::@3: scope:[uctoa_append]  from uctoa_append::@1
  [368] *((byte*) uctoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) uctoa_append::digit#2)
  to:uctoa_append::@return
uctoa_append::@return: scope:[uctoa_append]  from uctoa_append::@3
  [369] return 
  to:@return
uctoa_append::@2: scope:[uctoa_append]  from uctoa_append::@1
  [370] (byte) uctoa_append::digit#1 ← ++ (byte) uctoa_append::digit#2
  [371] (byte) uctoa_append::value#1 ← (byte) uctoa_append::value#2 - (byte) uctoa_append::sub#0
  to:uctoa_append::@1

(void()) cscroll()
cscroll: scope:[cscroll]  from cputln
  [372] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  [373] phi()
  [374] call memcpy 
  to:cscroll::@2
cscroll::@2: scope:[cscroll]  from cscroll::@1
  [375] phi()
  [376] call memcpy 
  to:cscroll::@3
cscroll::@3: scope:[cscroll]  from cscroll::@2
  [377] phi()
  [378] call memset 
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  [379] phi()
  [380] call memset 
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  [381] (byte*) conio_line_text ← (byte*) conio_line_text - (byte) $28
  [382] (byte*) conio_line_color ← (byte*) conio_line_color - (byte) $28
  [383] (byte) conio_cursor_y ← -- (byte) conio_cursor_y
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@5
  [384] return 
  to:@return

(byte()) toupper((byte) toupper::ch)
toupper: scope:[toupper]  from strupr::@2
  [385] if((byte) toupper::ch#0<(byte) 'a') goto toupper::@return
  to:toupper::@2
toupper::@2: scope:[toupper]  from toupper
  [386] if((byte) toupper::ch#0<=(byte) 'z') goto toupper::@1
  to:toupper::@return
toupper::@1: scope:[toupper]  from toupper::@2
  [387] (byte) toupper::return#0 ← (byte) toupper::ch#0 + (byte) 'A'-(byte) 'a'
  to:toupper::@return
toupper::@return: scope:[toupper]  from toupper toupper::@1 toupper::@2
  [388] (byte) toupper::return#2 ← phi( toupper::@1/(byte) toupper::return#0 toupper/(byte) toupper::ch#0 toupper::@2/(byte) toupper::ch#0 )
  [389] return 
  to:@return

(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@1 cscroll::@2
  [390] (void*) memcpy::destination#2 ← phi( cscroll::@1/(void*)(const nomodify byte*) DEFAULT_SCREEN cscroll::@2/(void*)(const nomodify byte*) COLORRAM )
  [390] (void*) memcpy::source#2 ← phi( cscroll::@1/(void*)(const nomodify byte*) DEFAULT_SCREEN+(byte) $28 cscroll::@2/(void*)(const nomodify byte*) COLORRAM+(byte) $28 )
  [391] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28
  [392] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2
  [393] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [394] (byte*) memcpy::dst#2 ← phi( memcpy/(byte*) memcpy::dst#4 memcpy::@2/(byte*) memcpy::dst#1 )
  [394] (byte*) memcpy::src#2 ← phi( memcpy/(byte*) memcpy::src#4 memcpy::@2/(byte*) memcpy::src#1 )
  [395] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [396] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [397] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2)
  [398] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2
  [399] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2
  to:memcpy::@1

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from cscroll::@3 cscroll::@4
  [400] (byte) memset::c#4 ← phi( cscroll::@3/(byte) ' ' cscroll::@4/(const nomodify byte) LIGHT_BLUE )
  [400] (void*) memset::str#3 ← phi( cscroll::@3/(void*)(const nomodify byte*) DEFAULT_SCREEN+(word)(number) $19*(number) $28-(byte) $28 cscroll::@4/(void*)(const nomodify byte*) COLORRAM+(word)(number) $19*(number) $28-(byte) $28 )
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [401] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (byte) $28
  [402] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [403] (byte*) memset::dst#2 ← phi( memset::@1/(byte*) memset::dst#4 memset::@3/(byte*) memset::dst#1 )
  [404] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [405] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [406] *((byte*) memset::dst#2) ← (byte) memset::c#4
  [407] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@2

null depth in calling loop Loop head: queen::@1 tails: queen::@3 blocks: queen::@3 queen::@4 queen::@6 queen::@7 queen::@5 queen::@2 queen::@1  in scope queen
null depth in calling loop Loop head: printf_padding::@1 tails: printf_padding::@3 blocks: printf_padding::@3 printf_padding::@2 printf_padding::@1  in scope cputc
null depth in calling loop Loop head: printf_padding::@1 tails: printf_padding::@3 blocks: printf_padding::@3 printf_padding::@2 printf_padding::@1  in scope cputc
null depth in calling loop Loop head: printf_padding::@1 tails: printf_padding::@3 blocks: printf_padding::@3 printf_padding::@2 printf_padding::@1  in scope cputc

VARIABLE REGISTER WEIGHTS
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6569_VICII::BG_COLOR
(byte) MOS6569_VICII::BG_COLOR1
(byte) MOS6569_VICII::BG_COLOR2
(byte) MOS6569_VICII::BG_COLOR3
(byte) MOS6569_VICII::BORDER_COLOR
(byte) MOS6569_VICII::CONTROL1
(byte) MOS6569_VICII::CONTROL2
(byte) MOS6569_VICII::IRQ_ENABLE
(byte) MOS6569_VICII::IRQ_STATUS
(byte) MOS6569_VICII::LIGHTPEN_X
(byte) MOS6569_VICII::LIGHTPEN_Y
(byte) MOS6569_VICII::MEMORY
(byte) MOS6569_VICII::RASTER
(byte) MOS6569_VICII::SPRITE0_COLOR
(byte) MOS6569_VICII::SPRITE0_X
(byte) MOS6569_VICII::SPRITE0_Y
(byte) MOS6569_VICII::SPRITE1_COLOR
(byte) MOS6569_VICII::SPRITE1_X
(byte) MOS6569_VICII::SPRITE1_Y
(byte) MOS6569_VICII::SPRITE2_COLOR
(byte) MOS6569_VICII::SPRITE2_X
(byte) MOS6569_VICII::SPRITE2_Y
(byte) MOS6569_VICII::SPRITE3_COLOR
(byte) MOS6569_VICII::SPRITE3_X
(byte) MOS6569_VICII::SPRITE3_Y
(byte) MOS6569_VICII::SPRITE4_COLOR
(byte) MOS6569_VICII::SPRITE4_X
(byte) MOS6569_VICII::SPRITE4_Y
(byte) MOS6569_VICII::SPRITE5_COLOR
(byte) MOS6569_VICII::SPRITE5_X
(byte) MOS6569_VICII::SPRITE5_Y
(byte) MOS6569_VICII::SPRITE6_COLOR
(byte) MOS6569_VICII::SPRITE6_X
(byte) MOS6569_VICII::SPRITE6_Y
(byte) MOS6569_VICII::SPRITE7_COLOR
(byte) MOS6569_VICII::SPRITE7_X
(byte) MOS6569_VICII::SPRITE7_Y
(byte) MOS6569_VICII::SPRITES_BG_COLLISION
(byte) MOS6569_VICII::SPRITES_COLLISION
(byte) MOS6569_VICII::SPRITES_ENABLE
(byte) MOS6569_VICII::SPRITES_EXPAND_X
(byte) MOS6569_VICII::SPRITES_EXPAND_Y
(byte) MOS6569_VICII::SPRITES_MC
(byte) MOS6569_VICII::SPRITES_MCOLOR1
(byte) MOS6569_VICII::SPRITES_MCOLOR2
(byte) MOS6569_VICII::SPRITES_PRIORITY
(byte) MOS6569_VICII::SPRITES_XMSB
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(byte) TIME_OF_DAY::HOURS
(byte) TIME_OF_DAY::MIN
(byte) TIME_OF_DAY::SEC
(byte) TIME_OF_DAY::TENTHS
(struct TIME_OF_DAY) TOD_ZERO loadstore = { TENTHS: (byte) 0, SEC: (byte) 0, MIN: (byte) 0, HOURS: (byte) 0 }
(void()) __start()
(void()) clrscr()
(byte) clrscr::c
(byte) clrscr::c#1 20002.0
(byte) clrscr::c#2 12501.25
(byte) clrscr::l
(byte) clrscr::l#1 2002.0
(byte) clrscr::l#2 333.6666666666667
(byte*) clrscr::line_cols
(byte*) clrscr::line_cols#1 1001.0
(byte*) clrscr::line_cols#5 1500.375
(byte*) clrscr::line_text
(byte*) clrscr::line_text#1 667.3333333333334
(byte*) clrscr::line_text#5 1714.7142857142858
(byte) conio_cursor_x loadstore 8.241758241758241E27
(byte) conio_cursor_y loadstore 1.6243654822335025E29
(byte*) conio_line_color loadstore 1.1450777202072537E29
(byte*) conio_line_text loadstore 1.1333333333333334E29
(dword) count loadstore 2.4691358025012344E10
(void()) cputc((byte) cputc::c)
(byte) cputc::c
(byte) cputc::c#0 2.0E28
(byte) cputc::c#1 2.0E27
(byte) cputc::c#2 2.00000000000002E14
(byte) cputc::c#3 1.0550000000000004E29
(void()) cputln()
(void()) cputs((to_nomodify byte*) cputs::s)
(byte) cputs::c
(byte) cputs::c#1 1.0E28
(to_nomodify byte*) cputs::s
(to_nomodify byte*) cputs::s#0 5.0E27
(to_nomodify byte*) cputs::s#13 1.5000000000000497E28
(to_nomodify byte*) cputs::s#14 1.000000000000001E15
(void()) cscroll()
(byte()) diff((byte) diff::a , (byte) diff::b)
(byte) diff::a
(byte) diff::a#0 1.000000000001E12
(byte) diff::a#1 1.000000000001E12
(byte) diff::a#2 1.60000000000025E13
(byte) diff::b
(byte) diff::b#0 2.000000000002E12
(byte) diff::b#1 2.000000000002E12
(byte) diff::b#2 1.60000000000025E13
(byte) diff::return
(byte) diff::return#0 2.000000000002E12
(byte) diff::return#1 2.000000000002E12
(byte) diff::return#2 2.0000000000002E13
(byte) diff::return#3 2.0000000000002E13
(byte) diff::return#4 5.500000000001E12
(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
(word) gotoxy::line_offset
(byte) gotoxy::x
(byte) gotoxy::y
(byte()) legal((byte) legal::row , (byte) legal::column)
(byte~) legal::$0 2.000000000002E12
(byte~) legal::$3 3.333333333336667E11
(byte~) legal::$4 2.000000000002E12
(byte) legal::column
(byte) legal::column#0 1.6666666666683334E11
(byte) legal::i
(byte) legal::i#1 2.000000000002E12
(byte) legal::i#2 4.0000000000039996E11
(byte) legal::return
(byte) legal::return#0 2.000000000002E12
(byte) legal::return#4 3.333333333336667E11
(byte) legal::row
(byte) legal::row#0 1.5789473684226315E11
(void()) main()
(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
(void*) memcpy::destination
(void*) memcpy::destination#2
(byte*) memcpy::dst
(byte*) memcpy::dst#1 1.0E46
(byte*) memcpy::dst#2 1.0000000000000033E46
(byte*) memcpy::dst#4 2.0E32
(word) memcpy::num
(void*) memcpy::return
(void*) memcpy::source
(void*) memcpy::source#2
(byte*) memcpy::src
(byte*) memcpy::src#1 2.0E46
(byte*) memcpy::src#2 1.0000000000000025E46
(byte*) memcpy::src#4 1.0E32
(byte*) memcpy::src_end
(byte*) memcpy::src_end#0 1.2500000000000125E45
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(byte) memset::c
(byte) memset::c#4 1.4285714285714287E45
(byte*) memset::dst
(byte*) memset::dst#1 2.0E46
(byte*) memset::dst#2 1.3333333333333366E46
(byte*) memset::dst#4 2.0E32
(byte*) memset::end
(byte*) memset::end#0 1.6666666666666835E45
(word) memset::num
(void*) memset::return
(void*) memset::str
(void*) memset::str#3
(void()) print()
(byte) print::i
(byte) print::i#1 2.000000000002E12
(byte) print::i#2 1.000000000001E12
(byte) print::i1
(byte) print::i1#1 2.000000000002E12
(byte) print::i1#2 1.0000000000003572E12
(byte) print::j
(byte) print::j#1 2.0000000000002E13
(byte) print::j#2 5.714285714286286E12
(struct printf_buffer_number) printf_buffer loadstore = {}
(byte) printf_buffer_number::sign
(byte) printf_format_number::justify_left
(byte) printf_format_number::min_length
(byte) printf_format_number::radix
(byte) printf_format_number::sign_always
(byte) printf_format_number::upper_case
(byte) printf_format_number::zero_padding
(byte) printf_format_string::justify_left
(byte) printf_format_string::min_length
(void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
(word~) printf_number_buffer::$19 1.00000000000001E14
(struct printf_buffer_number) printf_number_buffer::buffer
(byte*) printf_number_buffer::buffer_digits
(byte) printf_number_buffer::buffer_sign
(byte) printf_number_buffer::buffer_sign#0 202.0
(byte) printf_number_buffer::buffer_sign#1 202.0
(byte) printf_number_buffer::buffer_sign#10 1.55000000000103E13
(byte) printf_number_buffer::buffer_sign#2 2.0000000000002E13
(struct printf_format_number) printf_number_buffer::format
(byte) printf_number_buffer::format_justify_left
(byte) printf_number_buffer::format_justify_left#10 6.451612903225871E12
(byte) printf_number_buffer::format_min_length
(byte) printf_number_buffer::format_min_length#3 1.00000000000001E13
(byte) printf_number_buffer::format_radix
(byte) printf_number_buffer::format_sign_always
(byte) printf_number_buffer::format_upper_case
(byte) printf_number_buffer::format_upper_case#10 3.846153846153885E12
(byte) printf_number_buffer::format_zero_padding
(byte) printf_number_buffer::format_zero_padding#10 9.375000000000094E12
(signed byte) printf_number_buffer::len
(signed byte) printf_number_buffer::len#0 1.500000000000015E14
(signed byte) printf_number_buffer::len#1 2.00000000000002E14
(signed byte) printf_number_buffer::len#2 3.00000000000003E14
(signed byte) printf_number_buffer::padding
(signed byte) printf_number_buffer::padding#1 1.00000000000001E14
(signed byte) printf_number_buffer::padding#10 1.904761904761924E13
(void()) printf_padding((byte) printf_padding::pad , (byte) printf_padding::length)
(byte) printf_padding::i
(byte) printf_padding::i#1 2.0E27
(byte) printf_padding::i#2 7.500000000000001E26
(byte) printf_padding::length
(byte) printf_padding::length#0 2.00000000000002E14
(byte) printf_padding::length#1 2.00000000000002E14
(byte) printf_padding::length#2 2.00000000000002E14
(byte) printf_padding::length#6 1.6666666666671665E26
(byte) printf_padding::pad
(byte) printf_padding::pad#7 1.6666666666666666E26
(void()) printf_string((byte*) printf_string::str , (byte) printf_string::format_min_length , (byte) printf_string::format_justify_left)
(struct printf_format_string) printf_string::format
(byte) printf_string::format_justify_left
(byte) printf_string::format_min_length
(signed byte) printf_string::len
(signed byte) printf_string::padding
(byte*) printf_string::str
(void()) printf_uchar((byte) printf_uchar::uvalue , (byte) printf_uchar::format_min_length , (byte) printf_uchar::format_justify_left , (byte) printf_uchar::format_sign_always , (byte) printf_uchar::format_zero_padding , (byte) printf_uchar::format_upper_case , (byte) printf_uchar::format_radix)
(struct printf_format_number) printf_uchar::format
(byte) printf_uchar::format_justify_left
(byte) printf_uchar::format_min_length
(byte) printf_uchar::format_radix
(byte) printf_uchar::format_sign_always
(byte) printf_uchar::format_upper_case
(byte) printf_uchar::format_zero_padding
(byte) printf_uchar::uvalue
(byte) printf_uchar::uvalue#0 2.000000000002E12
(byte) printf_uchar::uvalue#1 2.000000000002E12
(byte) printf_uchar::uvalue#2 6.0000000000015E12
(void()) printf_uint((word) printf_uint::uvalue , (byte) printf_uint::format_min_length , (byte) printf_uint::format_justify_left , (byte) printf_uint::format_sign_always , (byte) printf_uint::format_zero_padding , (byte) printf_uint::format_upper_case , (byte) printf_uint::format_radix)
(struct printf_format_number) printf_uint::format
(byte) printf_uint::format_justify_left
(byte) printf_uint::format_min_length
(byte) printf_uint::format_radix
(byte) printf_uint::format_sign_always
(byte) printf_uint::format_upper_case
(byte) printf_uint::format_zero_padding
(word) printf_uint::uvalue
(void()) printf_ulong((dword) printf_ulong::uvalue , (byte) printf_ulong::format_min_length , (byte) printf_ulong::format_justify_left , (byte) printf_ulong::format_sign_always , (byte) printf_ulong::format_zero_padding , (byte) printf_ulong::format_upper_case , (byte) printf_ulong::format_radix)
(struct printf_format_number) printf_ulong::format
(byte) printf_ulong::format_justify_left
(byte) printf_ulong::format_min_length
(byte) printf_ulong::format_radix
(byte) printf_ulong::format_sign_always
(byte) printf_ulong::format_upper_case
(byte) printf_ulong::format_zero_padding
(dword) printf_ulong::uvalue
(dword) printf_ulong::uvalue#0 22.0
(dword) printf_ulong::uvalue#1 22.0
(dword) printf_ulong::uvalue#2 61.5
__stackcall (void()) queen((byte) queen::row)
(byte~) queen::$1 2.000000000002E12
(byte~) queen::$4 2.000000000002E12
(byte) queen::column loadstore 2.9411764706505884E11
(byte) queen::r loadstore 2.10526315795E11
(byte) queen::row
(byte) queen::row#0 202.0
(word()) strlen((byte*) strlen::str)
(word) strlen::len
(word) strlen::len#1 1.0E27
(word) strlen::len#2 5.00000000000025E26
(word) strlen::return
(word) strlen::return#2 2.00000000000002E14
(byte*) strlen::str
(byte*) strlen::str#0 2.0E27
(byte*) strlen::str#3 1.0E27
(byte*()) strupr((byte*) strupr::str)
(byte~) strupr::$0 2.0E27
(byte*) strupr::return
(byte*) strupr::src
(byte*) strupr::src#1 2.0E27
(byte*) strupr::src#2 7.142857142857143E26
(byte*) strupr::str
(void()) tod_init((byte) tod_init::tod_TENTHS , (byte) tod_init::tod_SEC , (byte) tod_init::tod_MIN , (byte) tod_init::tod_HOURS)
(struct TIME_OF_DAY) tod_init::tod
(byte) tod_init::tod_HOURS
(byte) tod_init::tod_HOURS#0 37.33333333333333
(byte) tod_init::tod_MIN
(byte) tod_init::tod_MIN#0 22.4
(byte) tod_init::tod_SEC
(byte) tod_init::tod_SEC#0 16.0
(byte) tod_init::tod_TENTHS
(byte) tod_init::tod_TENTHS#0 12.444444444444443
(struct TIME_OF_DAY()) tod_read()
(byte) tod_read::hours
(byte) tod_read::mins
(struct TIME_OF_DAY) tod_read::return
(byte) tod_read::return_HOURS
(byte) tod_read::return_HOURS#0 12.444444444444443
(byte) tod_read::return_HOURS#2 5.5
(byte) tod_read::return_MIN
(byte) tod_read::return_MIN#0 16.0
(byte) tod_read::return_MIN#2 5.5
(byte) tod_read::return_SEC
(byte) tod_read::return_SEC#0 22.4
(byte) tod_read::return_SEC#2 5.5
(byte) tod_read::return_TENTHS
(byte) tod_read::return_TENTHS#0 37.33333333333333
(byte) tod_read::return_TENTHS#2 5.5
(byte) tod_read::secs
(byte) tod_read::tenths
(byte) tod_read::tod_HOURS
(byte) tod_read::tod_MIN
(byte) tod_read::tod_SEC
(byte) tod_read::tod_TENTHS
(byte*()) tod_str((byte) tod_str::tod_TENTHS , (byte) tod_str::tod_SEC , (byte) tod_str::tod_MIN , (byte) tod_str::tod_HOURS)
(byte~) tod_str::$0 202.0
(byte~) tod_str::$1 202.0
(byte~) tod_str::$10 202.0
(byte~) tod_str::$11 202.0
(byte~) tod_str::$12 202.0
(byte~) tod_str::$13 202.0
(byte~) tod_str::$14 202.0
(byte~) tod_str::$15 202.0
(byte~) tod_str::$2 202.0
(byte~) tod_str::$3 202.0
(byte~) tod_str::$4 202.0
(byte~) tod_str::$5 202.0
(byte~) tod_str::$6 202.0
(byte~) tod_str::$7 202.0
(byte~) tod_str::$8 202.0
(byte~) tod_str::$9 202.0
(byte*) tod_str::return
(struct TIME_OF_DAY) tod_str::tod
(byte) tod_str::tod_HOURS
(byte) tod_str::tod_HOURS#0 53.25
(byte) tod_str::tod_MIN
(byte) tod_str::tod_MIN#0 19.363636363636363
(byte) tod_str::tod_SEC
(byte) tod_str::tod_SEC#0 11.833333333333332
(byte) tod_str::tod_TENTHS
(byte) tod_str::tod_TENTHS#0 8.52
(byte()) toupper((byte) toupper::ch)
(byte) toupper::ch
(byte) toupper::ch#0 1.6999999999999998E28
(byte) toupper::return
(byte) toupper::return#0 2.0E28
(byte) toupper::return#2 1.0333333333333333E28
(byte) toupper::return#3 2.0E27
(void()) uctoa((byte) uctoa::value , (byte*) uctoa::buffer , (byte) uctoa::radix)
(byte*) uctoa::buffer
(byte*) uctoa::buffer#11 3.3333333333350004E25
(byte*) uctoa::buffer#14 1.5000000000000002E26
(byte*) uctoa::buffer#3 2.00000000000002E14
(byte*) uctoa::buffer#4 2.0E26
(byte) uctoa::digit
(byte) uctoa::digit#1 2.0E26
(byte) uctoa::digit#2 3.076923076923077E25
(byte) uctoa::digit_value
(byte) uctoa::digit_value#0 6.000000000000001E25
(byte*) uctoa::digit_values
(byte) uctoa::max_digits
(byte) uctoa::radix
(byte) uctoa::started
(byte) uctoa::started#2 6.000000000000001E25
(byte) uctoa::started#4 1.0E26
(byte) uctoa::value
(byte) uctoa::value#0 1.0E26
(byte) uctoa::value#1 5.5000000000001E13
(byte) uctoa::value#2 6.666666666670001E25
(byte) uctoa::value#6 1.5000000000000002E26
(byte()) uctoa_append((byte*) uctoa_append::buffer , (byte) uctoa_append::value , (byte) uctoa_append::sub)
(byte*) uctoa_append::buffer
(byte*) uctoa_append::buffer#0 1.3750000000000001E26
(byte) uctoa_append::digit
(byte) uctoa_append::digit#1 1.0E40
(byte) uctoa_append::digit#2 1.00000000000005E40
(byte) uctoa_append::return
(byte) uctoa_append::return#0 2.0E26
(byte) uctoa_append::sub
(byte) uctoa_append::sub#0 3.33333333333335E39
(byte) uctoa_append::value
(byte) uctoa_append::value#0 3.666666666666667E26
(byte) uctoa_append::value#1 2.0E40
(byte) uctoa_append::value#2 5.0000000000001833E39
(void()) ultoa((dword) ultoa::value , (byte*) ultoa::buffer , (byte) ultoa::radix)
(byte~) ultoa::$10 2.00000000000002E14
(byte~) ultoa::$11 2002.0
(byte*) ultoa::buffer
(byte*) ultoa::buffer#11 2.8571428571571855E13
(byte*) ultoa::buffer#14 1.500000000000015E14
(byte*) ultoa::buffer#3 2002.0
(byte*) ultoa::buffer#4 2.00000000000002E14
(byte) ultoa::digit
(byte) ultoa::digit#1 2.00000000000002E14
(byte) ultoa::digit#2 2.8571428571428855E13
(dword) ultoa::digit_value
(dword) ultoa::digit_value#0 6.000000000000059E13
(dword*) ultoa::digit_values
(byte) ultoa::max_digits
(byte) ultoa::radix
(byte) ultoa::started
(byte) ultoa::started#2 5.00000000000005E13
(byte) ultoa::started#4 1.00000000000001E14
(dword) ultoa::value
(dword) ultoa::value#0 1.00000000000001E14
(dword) ultoa::value#1 551.0
(dword) ultoa::value#2 5.714285714300071E13
(dword) ultoa::value#6 1.500000000000015E14
(dword()) ultoa_append((byte*) ultoa_append::buffer , (dword) ultoa_append::value , (dword) ultoa_append::sub)
(byte*) ultoa_append::buffer
(byte*) ultoa_append::buffer#0 1.3750000000000025E14
(byte) ultoa_append::digit
(byte) ultoa_append::digit#1 1.0E27
(byte) ultoa_append::digit#2 1.0000000000005E27
(dword) ultoa_append::return
(dword) ultoa_append::return#0 2.00000000000002E14
(dword) ultoa_append::sub
(dword) ultoa_append::sub#0 3.3333333333335E26
(dword) ultoa_append::value
(dword) ultoa_append::value#0 3.666666666666674E14
(dword) ultoa_append::value#1 2.0E27
(dword) ultoa_append::value#2 5.0000000000018335E26
(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
(byte~) utoa::$10 20002.0
(byte~) utoa::$11 2002.0
(byte*) utoa::buffer
(byte*) utoa::buffer#11 3000.4285714285716
(byte*) utoa::buffer#14 15001.5
(byte*) utoa::buffer#3 2002.0
(byte*) utoa::buffer#4 20002.0
(byte) utoa::digit
(byte) utoa::digit#1 20002.0
(byte) utoa::digit#2 2857.4285714285716
(word) utoa::digit_value
(word) utoa::digit_value#0 6000.6
(word*) utoa::digit_values
(byte) utoa::max_digits
(byte) utoa::radix
(byte) utoa::started
(byte) utoa::started#2 5000.5
(byte) utoa::started#4 10001.0
(word) utoa::value
(word) utoa::value#0 10001.0
(word) utoa::value#2 5714.857142857143
(word) utoa::value#6 15001.5
(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
(byte*) utoa_append::buffer
(byte*) utoa_append::buffer#0 13750.25
(byte) utoa_append::digit
(byte) utoa_append::digit#1 1.0000001E7
(byte) utoa_append::digit#2 1.00500015E7
(word) utoa_append::return
(word) utoa_append::return#0 20002.0
(word) utoa_append::sub
(word) utoa_append::sub#0 3335000.5
(word) utoa_append::value
(word) utoa_append::value#0 36667.33333333333
(word) utoa_append::value#1 2.0000002E7
(word) utoa_append::value#2 5018334.166666666

Initial phi equivalence classes
[ legal::i#2 legal::i#1 ]
[ legal::return#4 ]
[ print::i#2 print::i#1 ]
[ print::i1#2 print::i1#1 ]
[ print::j#2 print::j#1 ]
[ clrscr::l#2 clrscr::l#1 ]
[ clrscr::line_text#5 clrscr::line_text#1 ]
[ clrscr::line_cols#5 clrscr::line_cols#1 ]
[ clrscr::c#2 clrscr::c#1 ]
[ cputs::s#13 cputs::s#14 cputs::s#0 ]
[ printf_ulong::uvalue#2 printf_ulong::uvalue#0 printf_ulong::uvalue#1 ]
[ diff::a#2 diff::a#0 diff::a#1 ]
[ diff::b#2 diff::b#0 diff::b#1 ]
[ diff::return#4 diff::return#2 diff::return#3 ]
[ printf_uchar::uvalue#2 printf_uchar::uvalue#1 printf_uchar::uvalue#0 ]
[ cputc::c#3 cputc::c#0 cputc::c#2 cputc::c#1 ]
[ utoa::digit#2 utoa::digit#1 ]
[ utoa::value#2 utoa::value#6 utoa::value#0 ]
[ utoa::started#2 utoa::started#4 ]
[ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ]
[ printf_number_buffer::format_min_length#3 ]
[ printf_number_buffer::format_justify_left#10 ]
[ printf_number_buffer::format_zero_padding#10 ]
[ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
[ printf_number_buffer::format_upper_case#10 ]
[ printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 ]
[ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ]
[ ultoa::digit#2 ultoa::digit#1 ]
[ ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ]
[ ultoa::started#2 ultoa::started#4 ]
[ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ]
[ uctoa::digit#2 uctoa::digit#1 ]
[ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ]
[ uctoa::started#2 uctoa::started#4 ]
[ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 ]
[ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ]
[ utoa_append::digit#2 utoa_append::digit#1 ]
[ strlen::str#3 strlen::str#0 ]
[ strlen::len#2 strlen::len#1 ]
[ printf_padding::length#6 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ]
[ printf_padding::pad#7 ]
[ printf_padding::i#2 printf_padding::i#1 ]
[ strupr::src#2 strupr::src#1 ]
[ ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ]
[ ultoa_append::digit#2 ultoa_append::digit#1 ]
[ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
[ uctoa_append::digit#2 uctoa_append::digit#1 ]
[ toupper::return#2 toupper::return#0 toupper::ch#0 ]
[ memcpy::source#2 ]
[ memcpy::destination#2 ]
[ memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
[ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
[ memset::str#3 ]
[ memset::c#4 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
Added variable conio_cursor_x to live range equivalence class [ conio_cursor_x ]
Added variable conio_cursor_y to live range equivalence class [ conio_cursor_y ]
Added variable conio_line_text to live range equivalence class [ conio_line_text ]
Added variable conio_line_color to live range equivalence class [ conio_line_color ]
Added variable count to live range equivalence class [ count ]
Added variable queen::row#0 to live range equivalence class [ queen::row#0 ]
Added variable queen::r to live range equivalence class [ queen::r ]
Added variable queen::column to live range equivalence class [ queen::column ]
Added variable legal::row#0 to live range equivalence class [ legal::row#0 ]
Added variable legal::column#0 to live range equivalence class [ legal::column#0 ]
Added variable legal::return#0 to live range equivalence class [ legal::return#0 ]
Added variable queen::$1 to live range equivalence class [ queen::$1 ]
Added variable queen::$4 to live range equivalence class [ queen::$4 ]
Added variable tod_init::tod_TENTHS#0 to live range equivalence class [ tod_init::tod_TENTHS#0 ]
Added variable tod_init::tod_SEC#0 to live range equivalence class [ tod_init::tod_SEC#0 ]
Added variable tod_init::tod_MIN#0 to live range equivalence class [ tod_init::tod_MIN#0 ]
Added variable tod_init::tod_HOURS#0 to live range equivalence class [ tod_init::tod_HOURS#0 ]
Added variable tod_read::return_TENTHS#2 to live range equivalence class [ tod_read::return_TENTHS#2 ]
Added variable tod_read::return_SEC#2 to live range equivalence class [ tod_read::return_SEC#2 ]
Added variable tod_read::return_MIN#2 to live range equivalence class [ tod_read::return_MIN#2 ]
Added variable tod_read::return_HOURS#2 to live range equivalence class [ tod_read::return_HOURS#2 ]
Added variable tod_str::tod_TENTHS#0 to live range equivalence class [ tod_str::tod_TENTHS#0 ]
Added variable tod_str::tod_SEC#0 to live range equivalence class [ tod_str::tod_SEC#0 ]
Added variable tod_str::tod_MIN#0 to live range equivalence class [ tod_str::tod_MIN#0 ]
Added variable tod_str::tod_HOURS#0 to live range equivalence class [ tod_str::tod_HOURS#0 ]
Added variable legal::$0 to live range equivalence class [ legal::$0 ]
Added variable diff::return#0 to live range equivalence class [ diff::return#0 ]
Added variable legal::$3 to live range equivalence class [ legal::$3 ]
Added variable diff::return#1 to live range equivalence class [ diff::return#1 ]
Added variable legal::$4 to live range equivalence class [ legal::$4 ]
Added variable cputs::c#1 to live range equivalence class [ cputs::c#1 ]
Added variable tod_read::return_HOURS#0 to live range equivalence class [ tod_read::return_HOURS#0 ]
Added variable tod_read::return_MIN#0 to live range equivalence class [ tod_read::return_MIN#0 ]
Added variable tod_read::return_SEC#0 to live range equivalence class [ tod_read::return_SEC#0 ]
Added variable tod_read::return_TENTHS#0 to live range equivalence class [ tod_read::return_TENTHS#0 ]
Added variable tod_str::$0 to live range equivalence class [ tod_str::$0 ]
Added variable tod_str::$1 to live range equivalence class [ tod_str::$1 ]
Added variable tod_str::$2 to live range equivalence class [ tod_str::$2 ]
Added variable tod_str::$3 to live range equivalence class [ tod_str::$3 ]
Added variable tod_str::$4 to live range equivalence class [ tod_str::$4 ]
Added variable tod_str::$5 to live range equivalence class [ tod_str::$5 ]
Added variable tod_str::$6 to live range equivalence class [ tod_str::$6 ]
Added variable tod_str::$7 to live range equivalence class [ tod_str::$7 ]
Added variable tod_str::$8 to live range equivalence class [ tod_str::$8 ]
Added variable tod_str::$9 to live range equivalence class [ tod_str::$9 ]
Added variable tod_str::$10 to live range equivalence class [ tod_str::$10 ]
Added variable tod_str::$11 to live range equivalence class [ tod_str::$11 ]
Added variable tod_str::$12 to live range equivalence class [ tod_str::$12 ]
Added variable tod_str::$13 to live range equivalence class [ tod_str::$13 ]
Added variable tod_str::$14 to live range equivalence class [ tod_str::$14 ]
Added variable tod_str::$15 to live range equivalence class [ tod_str::$15 ]
Added variable utoa::$11 to live range equivalence class [ utoa::$11 ]
Added variable utoa::buffer#3 to live range equivalence class [ utoa::buffer#3 ]
Added variable utoa::$10 to live range equivalence class [ utoa::$10 ]
Added variable utoa::digit_value#0 to live range equivalence class [ utoa::digit_value#0 ]
Added variable utoa_append::buffer#0 to live range equivalence class [ utoa_append::buffer#0 ]
Added variable utoa_append::sub#0 to live range equivalence class [ utoa_append::sub#0 ]
Added variable utoa_append::return#0 to live range equivalence class [ utoa_append::return#0 ]
Added variable strlen::return#2 to live range equivalence class [ strlen::return#2 ]
Added variable printf_number_buffer::$19 to live range equivalence class [ printf_number_buffer::$19 ]
Added variable ultoa::$11 to live range equivalence class [ ultoa::$11 ]
Added variable ultoa::buffer#3 to live range equivalence class [ ultoa::buffer#3 ]
Added variable ultoa::$10 to live range equivalence class [ ultoa::$10 ]
Added variable ultoa::digit_value#0 to live range equivalence class [ ultoa::digit_value#0 ]
Added variable ultoa_append::buffer#0 to live range equivalence class [ ultoa_append::buffer#0 ]
Added variable ultoa_append::sub#0 to live range equivalence class [ ultoa_append::sub#0 ]
Added variable ultoa_append::return#0 to live range equivalence class [ ultoa_append::return#0 ]
Added variable uctoa::buffer#3 to live range equivalence class [ uctoa::buffer#3 ]
Added variable uctoa::digit_value#0 to live range equivalence class [ uctoa::digit_value#0 ]
Added variable uctoa_append::buffer#0 to live range equivalence class [ uctoa_append::buffer#0 ]
Added variable uctoa_append::sub#0 to live range equivalence class [ uctoa_append::sub#0 ]
Added variable uctoa_append::return#0 to live range equivalence class [ uctoa_append::return#0 ]
Added variable toupper::return#3 to live range equivalence class [ toupper::return#3 ]
Added variable strupr::$0 to live range equivalence class [ strupr::$0 ]
Added variable memcpy::src_end#0 to live range equivalence class [ memcpy::src_end#0 ]
Added variable memset::end#0 to live range equivalence class [ memset::end#0 ]
Added variable printf_buffer to live range equivalence class [ printf_buffer ]
Added variable TOD_ZERO to live range equivalence class [ TOD_ZERO ]
Complete equivalence classes
[ legal::i#2 legal::i#1 ]
[ legal::return#4 ]
[ print::i#2 print::i#1 ]
[ print::i1#2 print::i1#1 ]
[ print::j#2 print::j#1 ]
[ clrscr::l#2 clrscr::l#1 ]
[ clrscr::line_text#5 clrscr::line_text#1 ]
[ clrscr::line_cols#5 clrscr::line_cols#1 ]
[ clrscr::c#2 clrscr::c#1 ]
[ cputs::s#13 cputs::s#14 cputs::s#0 ]
[ printf_ulong::uvalue#2 printf_ulong::uvalue#0 printf_ulong::uvalue#1 ]
[ diff::a#2 diff::a#0 diff::a#1 ]
[ diff::b#2 diff::b#0 diff::b#1 ]
[ diff::return#4 diff::return#2 diff::return#3 ]
[ printf_uchar::uvalue#2 printf_uchar::uvalue#1 printf_uchar::uvalue#0 ]
[ cputc::c#3 cputc::c#0 cputc::c#2 cputc::c#1 ]
[ utoa::digit#2 utoa::digit#1 ]
[ utoa::value#2 utoa::value#6 utoa::value#0 ]
[ utoa::started#2 utoa::started#4 ]
[ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ]
[ printf_number_buffer::format_min_length#3 ]
[ printf_number_buffer::format_justify_left#10 ]
[ printf_number_buffer::format_zero_padding#10 ]
[ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
[ printf_number_buffer::format_upper_case#10 ]
[ printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 ]
[ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ]
[ ultoa::digit#2 ultoa::digit#1 ]
[ ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ]
[ ultoa::started#2 ultoa::started#4 ]
[ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ]
[ uctoa::digit#2 uctoa::digit#1 ]
[ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ]
[ uctoa::started#2 uctoa::started#4 ]
[ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 ]
[ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ]
[ utoa_append::digit#2 utoa_append::digit#1 ]
[ strlen::str#3 strlen::str#0 ]
[ strlen::len#2 strlen::len#1 ]
[ printf_padding::length#6 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ]
[ printf_padding::pad#7 ]
[ printf_padding::i#2 printf_padding::i#1 ]
[ strupr::src#2 strupr::src#1 ]
[ ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ]
[ ultoa_append::digit#2 ultoa_append::digit#1 ]
[ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
[ uctoa_append::digit#2 uctoa_append::digit#1 ]
[ toupper::return#2 toupper::return#0 toupper::ch#0 ]
[ memcpy::source#2 ]
[ memcpy::destination#2 ]
[ memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
[ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
[ memset::str#3 ]
[ memset::c#4 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
[ conio_cursor_x ]
[ conio_cursor_y ]
[ conio_line_text ]
[ conio_line_color ]
[ count ]
[ queen::row#0 ]
[ queen::r ]
[ queen::column ]
[ legal::row#0 ]
[ legal::column#0 ]
[ legal::return#0 ]
[ queen::$1 ]
[ queen::$4 ]
[ tod_init::tod_TENTHS#0 ]
[ tod_init::tod_SEC#0 ]
[ tod_init::tod_MIN#0 ]
[ tod_init::tod_HOURS#0 ]
[ tod_read::return_TENTHS#2 ]
[ tod_read::return_SEC#2 ]
[ tod_read::return_MIN#2 ]
[ tod_read::return_HOURS#2 ]
[ tod_str::tod_TENTHS#0 ]
[ tod_str::tod_SEC#0 ]
[ tod_str::tod_MIN#0 ]
[ tod_str::tod_HOURS#0 ]
[ legal::$0 ]
[ diff::return#0 ]
[ legal::$3 ]
[ diff::return#1 ]
[ legal::$4 ]
[ cputs::c#1 ]
[ tod_read::return_HOURS#0 ]
[ tod_read::return_MIN#0 ]
[ tod_read::return_SEC#0 ]
[ tod_read::return_TENTHS#0 ]
[ tod_str::$0 ]
[ tod_str::$1 ]
[ tod_str::$2 ]
[ tod_str::$3 ]
[ tod_str::$4 ]
[ tod_str::$5 ]
[ tod_str::$6 ]
[ tod_str::$7 ]
[ tod_str::$8 ]
[ tod_str::$9 ]
[ tod_str::$10 ]
[ tod_str::$11 ]
[ tod_str::$12 ]
[ tod_str::$13 ]
[ tod_str::$14 ]
[ tod_str::$15 ]
[ utoa::$11 ]
[ utoa::buffer#3 ]
[ utoa::$10 ]
[ utoa::digit_value#0 ]
[ utoa_append::buffer#0 ]
[ utoa_append::sub#0 ]
[ utoa_append::return#0 ]
[ strlen::return#2 ]
[ printf_number_buffer::$19 ]
[ ultoa::$11 ]
[ ultoa::buffer#3 ]
[ ultoa::$10 ]
[ ultoa::digit_value#0 ]
[ ultoa_append::buffer#0 ]
[ ultoa_append::sub#0 ]
[ ultoa_append::return#0 ]
[ uctoa::buffer#3 ]
[ uctoa::digit_value#0 ]
[ uctoa_append::buffer#0 ]
[ uctoa_append::sub#0 ]
[ uctoa_append::return#0 ]
[ toupper::return#3 ]
[ strupr::$0 ]
[ memcpy::src_end#0 ]
[ memset::end#0 ]
[ printf_buffer ]
[ TOD_ZERO ]
Allocated zp[1]:2 [ legal::i#2 legal::i#1 ]
Allocated zp[1]:3 [ legal::return#4 ]
Allocated zp[1]:4 [ print::i#2 print::i#1 ]
Allocated zp[1]:5 [ print::i1#2 print::i1#1 ]
Allocated zp[1]:6 [ print::j#2 print::j#1 ]
Allocated zp[1]:7 [ clrscr::l#2 clrscr::l#1 ]
Allocated zp[2]:8 [ clrscr::line_text#5 clrscr::line_text#1 ]
Allocated zp[2]:10 [ clrscr::line_cols#5 clrscr::line_cols#1 ]
Allocated zp[1]:12 [ clrscr::c#2 clrscr::c#1 ]
Allocated zp[2]:13 [ cputs::s#13 cputs::s#14 cputs::s#0 ]
Allocated zp[4]:15 [ printf_ulong::uvalue#2 printf_ulong::uvalue#0 printf_ulong::uvalue#1 ]
Allocated zp[1]:19 [ diff::a#2 diff::a#0 diff::a#1 ]
Allocated zp[1]:20 [ diff::b#2 diff::b#0 diff::b#1 ]
Allocated zp[1]:21 [ diff::return#4 diff::return#2 diff::return#3 ]
Allocated zp[1]:22 [ printf_uchar::uvalue#2 printf_uchar::uvalue#1 printf_uchar::uvalue#0 ]
Allocated zp[1]:23 [ cputc::c#3 cputc::c#0 cputc::c#2 cputc::c#1 ]
Allocated zp[1]:24 [ utoa::digit#2 utoa::digit#1 ]
Allocated zp[2]:25 [ utoa::value#2 utoa::value#6 utoa::value#0 ]
Allocated zp[1]:27 [ utoa::started#2 utoa::started#4 ]
Allocated zp[2]:28 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ]
Allocated zp[1]:30 [ printf_number_buffer::format_min_length#3 ]
Allocated zp[1]:31 [ printf_number_buffer::format_justify_left#10 ]
Allocated zp[1]:32 [ printf_number_buffer::format_zero_padding#10 ]
Allocated zp[1]:33 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
Allocated zp[1]:34 [ printf_number_buffer::format_upper_case#10 ]
Allocated zp[1]:35 [ printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 ]
Allocated zp[1]:36 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ]
Allocated zp[1]:37 [ ultoa::digit#2 ultoa::digit#1 ]
Allocated zp[4]:38 [ ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ]
Allocated zp[1]:42 [ ultoa::started#2 ultoa::started#4 ]
Allocated zp[2]:43 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ]
Allocated zp[1]:45 [ uctoa::digit#2 uctoa::digit#1 ]
Allocated zp[1]:46 [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ]
Allocated zp[1]:47 [ uctoa::started#2 uctoa::started#4 ]
Allocated zp[2]:48 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 ]
Allocated zp[2]:50 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ]
Allocated zp[1]:52 [ utoa_append::digit#2 utoa_append::digit#1 ]
Allocated zp[2]:53 [ strlen::str#3 strlen::str#0 ]
Allocated zp[2]:55 [ strlen::len#2 strlen::len#1 ]
Allocated zp[1]:57 [ printf_padding::length#6 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ]
Allocated zp[1]:58 [ printf_padding::pad#7 ]
Allocated zp[1]:59 [ printf_padding::i#2 printf_padding::i#1 ]
Allocated zp[2]:60 [ strupr::src#2 strupr::src#1 ]
Allocated zp[4]:62 [ ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ]
Allocated zp[1]:66 [ ultoa_append::digit#2 ultoa_append::digit#1 ]
Allocated zp[1]:67 [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
Allocated zp[1]:68 [ uctoa_append::digit#2 uctoa_append::digit#1 ]
Allocated zp[1]:69 [ toupper::return#2 toupper::return#0 toupper::ch#0 ]
Allocated zp[2]:70 [ memcpy::source#2 ]
Allocated zp[2]:72 [ memcpy::destination#2 ]
Allocated zp[2]:74 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
Allocated zp[2]:76 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
Allocated zp[2]:78 [ memset::str#3 ]
Allocated zp[1]:80 [ memset::c#4 ]
Allocated zp[2]:81 [ memset::dst#2 memset::dst#4 memset::dst#1 ]
Allocated zp[1]:83 [ conio_cursor_x ]
Allocated zp[1]:84 [ conio_cursor_y ]
Allocated zp[2]:85 [ conio_line_text ]
Allocated zp[2]:87 [ conio_line_color ]
Allocated zp[4]:89 [ count ]
Allocated zp[1]:93 [ queen::row#0 ]
Allocated zp[1]:94 [ queen::r ]
Allocated zp[1]:95 [ queen::column ]
Allocated zp[1]:96 [ legal::row#0 ]
Allocated zp[1]:97 [ legal::column#0 ]
Allocated zp[1]:98 [ legal::return#0 ]
Allocated zp[1]:99 [ queen::$1 ]
Allocated zp[1]:100 [ queen::$4 ]
Allocated zp[1]:101 [ tod_init::tod_TENTHS#0 ]
Allocated zp[1]:102 [ tod_init::tod_SEC#0 ]
Allocated zp[1]:103 [ tod_init::tod_MIN#0 ]
Allocated zp[1]:104 [ tod_init::tod_HOURS#0 ]
Allocated zp[1]:105 [ tod_read::return_TENTHS#2 ]
Allocated zp[1]:106 [ tod_read::return_SEC#2 ]
Allocated zp[1]:107 [ tod_read::return_MIN#2 ]
Allocated zp[1]:108 [ tod_read::return_HOURS#2 ]
Allocated zp[1]:109 [ tod_str::tod_TENTHS#0 ]
Allocated zp[1]:110 [ tod_str::tod_SEC#0 ]
Allocated zp[1]:111 [ tod_str::tod_MIN#0 ]
Allocated zp[1]:112 [ tod_str::tod_HOURS#0 ]
Allocated zp[1]:113 [ legal::$0 ]
Allocated zp[1]:114 [ diff::return#0 ]
Allocated zp[1]:115 [ legal::$3 ]
Allocated zp[1]:116 [ diff::return#1 ]
Allocated zp[1]:117 [ legal::$4 ]
Allocated zp[1]:118 [ cputs::c#1 ]
Allocated zp[1]:119 [ tod_read::return_HOURS#0 ]
Allocated zp[1]:120 [ tod_read::return_MIN#0 ]
Allocated zp[1]:121 [ tod_read::return_SEC#0 ]
Allocated zp[1]:122 [ tod_read::return_TENTHS#0 ]
Allocated zp[1]:123 [ tod_str::$0 ]
Allocated zp[1]:124 [ tod_str::$1 ]
Allocated zp[1]:125 [ tod_str::$2 ]
Allocated zp[1]:126 [ tod_str::$3 ]
Allocated zp[1]:127 [ tod_str::$4 ]
Allocated zp[1]:128 [ tod_str::$5 ]
Allocated zp[1]:129 [ tod_str::$6 ]
Allocated zp[1]:130 [ tod_str::$7 ]
Allocated zp[1]:131 [ tod_str::$8 ]
Allocated zp[1]:132 [ tod_str::$9 ]
Allocated zp[1]:133 [ tod_str::$10 ]
Allocated zp[1]:134 [ tod_str::$11 ]
Allocated zp[1]:135 [ tod_str::$12 ]
Allocated zp[1]:136 [ tod_str::$13 ]
Allocated zp[1]:137 [ tod_str::$14 ]
Allocated zp[1]:138 [ tod_str::$15 ]
Allocated zp[1]:139 [ utoa::$11 ]
Allocated zp[2]:140 [ utoa::buffer#3 ]
Allocated zp[1]:142 [ utoa::$10 ]
Allocated zp[2]:143 [ utoa::digit_value#0 ]
Allocated zp[2]:145 [ utoa_append::buffer#0 ]
Allocated zp[2]:147 [ utoa_append::sub#0 ]
Allocated zp[2]:149 [ utoa_append::return#0 ]
Allocated zp[2]:151 [ strlen::return#2 ]
Allocated zp[2]:153 [ printf_number_buffer::$19 ]
Allocated zp[1]:155 [ ultoa::$11 ]
Allocated zp[2]:156 [ ultoa::buffer#3 ]
Allocated zp[1]:158 [ ultoa::$10 ]
Allocated zp[4]:159 [ ultoa::digit_value#0 ]
Allocated zp[2]:163 [ ultoa_append::buffer#0 ]
Allocated zp[4]:165 [ ultoa_append::sub#0 ]
Allocated zp[4]:169 [ ultoa_append::return#0 ]
Allocated zp[2]:173 [ uctoa::buffer#3 ]
Allocated zp[1]:175 [ uctoa::digit_value#0 ]
Allocated zp[2]:176 [ uctoa_append::buffer#0 ]
Allocated zp[1]:178 [ uctoa_append::sub#0 ]
Allocated zp[1]:179 [ uctoa_append::return#0 ]
Allocated zp[1]:180 [ toupper::return#3 ]
Allocated zp[1]:181 [ strupr::$0 ]
Allocated zp[2]:182 [ memcpy::src_end#0 ]
Allocated zp[2]:184 [ memset::end#0 ]
Allocated mem[12] [ printf_buffer ]
Allocated mem[4] [ TOD_ZERO ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// N Queens Problem in C Using Backtracking
//
// N Queens Problem is a famous puzzle in which n-queens are to be placed on a nxn chess board such that no two queens are in the same row, column or diagonal.  
//
// This is a recursive solution
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__start)
.pc = $80d "Program"
  // Global Constants & labels
  .const LIGHT_BLUE = $e
  .const OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
  .const OFFSET_STRUCT_TIME_OF_DAY_SEC = 1
  .const OFFSET_STRUCT_TIME_OF_DAY_MIN = 2
  .const OFFSET_STRUCT_TIME_OF_DAY_HOURS = 3
  .const OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL = $e
  .const OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL = $f
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS = $b
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_MIN = $a
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_SEC = 9
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_10THS = 8
  .const STACK_BASE = $103
  // Color Ram
  .label COLORRAM = $d800
  // Default address of screen character matrix
  .label DEFAULT_SCREEN = $400
  // The CIA#1: keyboard matrix, joystick #1/#2
  .label CIA1 = $dc00
  // The number of bytes on the screen
  // The current cursor x-position
  .label conio_cursor_x = $53
  // The current cursor y-position
  .label conio_cursor_y = $54
  // The current text cursor line start
  .label conio_line_text = $55
  // The current color cursor line start
  .label conio_line_color = $57
  // The number of found solutions
  .label count = $59
  // __start
__start: {
    jmp __init1
    // __start::__init1
  __init1:
    // [1] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [2] (byte) conio_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_y
    // [3] (byte*) conio_line_text ← (const nomodify byte*) DEFAULT_SCREEN -- pbuz1=pbuc1 
    lda #<DEFAULT_SCREEN
    sta.z conio_line_text
    lda #>DEFAULT_SCREEN
    sta.z conio_line_text+1
    // [4] (byte*) conio_line_color ← (const nomodify byte*) COLORRAM -- pbuz1=pbuc1 
    lda #<COLORRAM
    sta.z conio_line_color
    lda #>COLORRAM
    sta.z conio_line_color+1
    // [5] (dword) count ← (dword) 0 -- vduz1=vduc1 
    lda #<0
    sta.z count
    lda #>0
    sta.z count+1
    lda #<0>>$10
    sta.z count+2
    lda #>0>>$10
    sta.z count+3
    // [6] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
  __b1_from___init1:
    jmp __b1
    // __start::@1
  __b1:
    // [7] call main 
    // [31] phi from __start::@1 to main [phi:__start::@1->main]
  main_from___b1:
    jsr main
    jmp __breturn
    // __start::@return
  __breturn:
    // [8] return 
    rts
}
  // queen
// Generates all valid placements of queens on a NxN board recursively
// Works by generating all legal placements af a queen for a specific row taking into consideration the queens already placed on the rows below 
// and then recursively generating all legal placements on the rows above.  
// queen(byte zp($5d) row)
queen: {
    .const OFFSET_STACK_ROW = 0
    .label r = $5e
    .label column = $5f
    .label __1 = $63
    .label __4 = $64
    .label row = $5d
    // [9] (byte) queen::row#0 ← stackidx(byte,(const byte) queen::OFFSET_STACK_ROW) -- vbuz1=_stackidxbyte_vbuc1 
    tsx
    lda STACK_BASE+OFFSET_STACK_ROW,x
    sta.z row
    // [10] (byte) queen::r ← (byte) queen::row#0 -- vbuz1=vbuz2 
    lda.z row
    sta.z r
    // [11] (byte) queen::column ← (byte) 1 -- vbuz1=vbuc1 
    lda #1
    sta.z column
    jmp __b1
    // queen::@1
  __b1:
    // [12] if((byte) queen::column<(byte) 8+(byte) 1) goto queen::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z column
    cmp #8+1
    bcc __b2
    jmp __breturn
    // queen::@return
  __breturn:
    // [13] return 
    rts
    // queen::@2
  __b2:
    // [14] (byte) legal::row#0 ← (byte) queen::r -- vbuz1=vbuz2 
    lda.z r
    sta.z legal.row
    // [15] (byte) legal::column#0 ← (byte) queen::column -- vbuz1=vbuz2 
    lda.z column
    sta.z legal.column
    // [16] call legal 
    // [68] phi from queen::@2 to legal [phi:queen::@2->legal]
  legal_from___b2:
    jsr legal
    // [17] (byte) legal::return#0 ← (byte) legal::return#4 -- vbuz1=vbuz2 
    lda.z legal.return_1
    sta.z legal.return
    jmp __b7
    // queen::@7
  __b7:
    // [18] (byte~) queen::$1 ← (byte) legal::return#0 -- vbuz1=vbuz2 
    lda.z legal.return
    sta.z __1
    // [19] if((byte) 0==(byte~) queen::$1) goto queen::@3 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z __1
    beq __b3
    jmp __b5
    // queen::@5
  __b5:
    // [20] *((const byte*) board + (byte) queen::r) ← (byte) queen::column -- pbuc1_derefidx_vbuz1=vbuz2 
    //no conflicts so place queen
    lda.z column
    ldy.z r
    sta board,y
    // [21] if((byte) queen::r==(byte) 8) goto queen::@4 -- vbuz1_eq_vbuc1_then_la1 
    lda #8
    cmp.z r
    beq __b4
    jmp __b6
    // queen::@6
  __b6:
    // asm { ldacolumn pha ldar pha  }
    // Perform recussive placement on rows above
    // Push the local vars on the stack (waiting for proper recursion support)
    lda column
    pha
    lda r
    pha
    // [23] (byte~) queen::$4 ← (byte) queen::r + (byte) 1 -- vbuz1=vbuz2_plus_1 
    ldy.z r
    iny
    sty.z __4
    // [24] stackpush(byte) ← (byte~) queen::$4 -- _stackpushbyte_=vbuz1 
    // Do recursion        
    lda.z __4
    pha
    // [25] callexecute queen  -- jsr 
    jsr queen
    // sideeffect stackpullbytes((number) 1) -- _stackpullbyte_1 
    pla
    // asm { pla star pla stacolumn  }
    // Pop the local vars on the stack (waiting for proper recursion support)
    pla
    sta r
    pla
    sta column
    jmp __b3
    // queen::@3
  __b3:
    // [28] (byte) queen::column ← ++ (byte) queen::column -- vbuz1=_inc_vbuz1 
    inc.z column
    jmp __b1
    // queen::@4
  __b4:
    // [29] (dword) count ← ++ (dword) count -- vduz1=_inc_vduz1 
    inc.z count
    bne !+
    inc.z count+1
    bne !+
    inc.z count+2
    bne !+
    inc.z count+3
  !:
    // [30] call print 
    // [87] phi from queen::@4 to print [phi:queen::@4->print]
  print_from___b4:
    jsr print
    jmp __b3
}
  // main
main: {
    // [32] call clrscr 
    // [116] phi from main to clrscr [phi:main->clrscr]
  clrscr_from_main:
    jsr clrscr
    // [33] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [34] call cputs 
    // [132] phi from main::@1 to cputs [phi:main::@1->cputs]
  cputs_from___b1:
    // [132] phi (to_nomodify byte*) cputs::s#14 = (const byte*) main::s [phi:main::@1->cputs#0] -- pbuz1=pbuc1 
    lda #<s
    sta.z cputs.s
    lda #>s
    sta.z cputs.s+1
    jsr cputs
    // [35] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [36] call cputs 
    // [132] phi from main::@2 to cputs [phi:main::@2->cputs]
  cputs_from___b2:
    // [132] phi (to_nomodify byte*) cputs::s#14 = (const byte*) main::s1 [phi:main::@2->cputs#0] -- pbuz1=pbuc1 
    lda #<s1
    sta.z cputs.s
    lda #>s1
    sta.z cputs.s+1
    jsr cputs
    // [37] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    jmp __b3
    // main::@3
  __b3:
    // [38] call printf_uint 
    // [140] phi from main::@3 to printf_uint [phi:main::@3->printf_uint]
  printf_uint_from___b3:
    jsr printf_uint
    jmp __b4
    // main::@4
  __b4:
    // [39] (byte) tod_init::tod_TENTHS#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO) -- vbuz1=_deref_pbuc1 
    lda TOD_ZERO
    sta.z tod_init.tod_TENTHS
    // [40] (byte) tod_init::tod_SEC#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_SEC) -- vbuz1=_deref_pbuc1 
    lda TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_SEC
    sta.z tod_init.tod_SEC
    // [41] (byte) tod_init::tod_MIN#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_MIN) -- vbuz1=_deref_pbuc1 
    lda TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_MIN
    sta.z tod_init.tod_MIN
    // [42] (byte) tod_init::tod_HOURS#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_HOURS) -- vbuz1=_deref_pbuc1 
    lda TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_HOURS
    sta.z tod_init.tod_HOURS
    // [43] call tod_init 
    jsr tod_init
    jmp __b5
    // main::@5
  __b5:
    // [44] stackpush(byte) ← (byte) 1 -- _stackpushbyte_=vbuc1 
    lda #1
    pha
    // [45] callexecute queen  -- jsr 
    jsr queen
    // sideeffect stackpullbytes((number) 1) -- _stackpullbyte_1 
    pla
    // [47] call tod_read 
    jsr tod_read
    // [48] (byte) tod_read::return_TENTHS#2 ← (byte) tod_read::return_TENTHS#0 -- vbuz1=vbuz2 
    lda.z tod_read.return_TENTHS
    sta.z tod_read.return_TENTHS_1
    // [49] (byte) tod_read::return_SEC#2 ← (byte) tod_read::return_SEC#0 -- vbuz1=vbuz2 
    lda.z tod_read.return_SEC
    sta.z tod_read.return_SEC_1
    // [50] (byte) tod_read::return_MIN#2 ← (byte) tod_read::return_MIN#0 -- vbuz1=vbuz2 
    lda.z tod_read.return_MIN
    sta.z tod_read.return_MIN_1
    // [51] (byte) tod_read::return_HOURS#2 ← (byte) tod_read::return_HOURS#0 -- vbuz1=vbuz2 
    lda.z tod_read.return_HOURS
    sta.z tod_read.return_HOURS_1
    jmp __b6
    // main::@6
  __b6:
    // [52] (byte) tod_str::tod_TENTHS#0 ← (byte) tod_read::return_TENTHS#2 -- vbuz1=vbuz2 
    lda.z tod_read.return_TENTHS_1
    sta.z tod_str.tod_TENTHS
    // [53] (byte) tod_str::tod_SEC#0 ← (byte) tod_read::return_SEC#2 -- vbuz1=vbuz2 
    lda.z tod_read.return_SEC_1
    sta.z tod_str.tod_SEC
    // [54] (byte) tod_str::tod_MIN#0 ← (byte) tod_read::return_MIN#2 -- vbuz1=vbuz2 
    lda.z tod_read.return_MIN_1
    sta.z tod_str.tod_MIN
    // [55] (byte) tod_str::tod_HOURS#0 ← (byte) tod_read::return_HOURS#2 -- vbuz1=vbuz2 
    lda.z tod_read.return_HOURS_1
    sta.z tod_str.tod_HOURS
    // [56] call tod_str 
    jsr tod_str
    // [57] phi from main::@6 to main::@7 [phi:main::@6->main::@7]
  __b7_from___b6:
    jmp __b7
    // main::@7
  __b7:
    // [58] call cputs 
    // [132] phi from main::@7 to cputs [phi:main::@7->cputs]
  cputs_from___b7:
    // [132] phi (to_nomodify byte*) cputs::s#14 = (const byte*) main::s2 [phi:main::@7->cputs#0] -- pbuz1=pbuc1 
    lda #<s2
    sta.z cputs.s
    lda #>s2
    sta.z cputs.s+1
    jsr cputs
    jmp __b8
    // main::@8
  __b8:
    // [59] (dword) printf_ulong::uvalue#0 ← (dword) count -- vduz1=vduz2 
    lda.z count
    sta.z printf_ulong.uvalue
    lda.z count+1
    sta.z printf_ulong.uvalue+1
    lda.z count+2
    sta.z printf_ulong.uvalue+2
    lda.z count+3
    sta.z printf_ulong.uvalue+3
    // [60] call printf_ulong 
    // [183] phi from main::@8 to printf_ulong [phi:main::@8->printf_ulong]
  printf_ulong_from___b8:
    // [183] phi (dword) printf_ulong::uvalue#2 = (dword) printf_ulong::uvalue#0 [phi:main::@8->printf_ulong#0] -- register_copy 
    jsr printf_ulong
    // [61] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
  __b9_from___b8:
    jmp __b9
    // main::@9
  __b9:
    // [62] call cputs 
    // [132] phi from main::@9 to cputs [phi:main::@9->cputs]
  cputs_from___b9:
    // [132] phi (to_nomodify byte*) cputs::s#14 = (const byte*) main::s3 [phi:main::@9->cputs#0] -- pbuz1=pbuc1 
    lda #<s3
    sta.z cputs.s
    lda #>s3
    sta.z cputs.s+1
    jsr cputs
    // [63] phi from main::@9 to main::@10 [phi:main::@9->main::@10]
  __b10_from___b9:
    jmp __b10
    // main::@10
  __b10:
    // [64] call printf_string 
    // [190] phi from main::@10 to printf_string [phi:main::@10->printf_string]
  printf_string_from___b10:
    jsr printf_string
    // [65] phi from main::@10 to main::@11 [phi:main::@10->main::@11]
  __b11_from___b10:
    jmp __b11
    // main::@11
  __b11:
    // [66] call cputs 
    // [132] phi from main::@11 to cputs [phi:main::@11->cputs]
  cputs_from___b11:
    // [132] phi (to_nomodify byte*) cputs::s#14 = (const byte*) main::s4 [phi:main::@11->cputs#0] -- pbuz1=pbuc1 
    lda #<s4
    sta.z cputs.s
    lda #>s4
    sta.z cputs.s+1
    jsr cputs
    jmp __breturn
    // main::@return
  __breturn:
    // [67] return 
    rts
    s: .text " - n queens problem using backtracking -"
    .byte 0
    s1: .text @"\nnumber of queens:"
    .byte 0
    s2: .text @"\n\nsolutions: "
    .byte 0
    s3: .text " time: "
    .byte 0
    s4: .text @".\n"
    .byte 0
}
  // legal
// Checks is a placement of the queen on the board is legal.
// Checks the passed (row, column) against all queens placed on the board on lower rows.
// If no conflict for desired position returns 1 otherwise returns 0
// legal(byte zp($60) row, byte zp($61) column)
legal: {
    .label __0 = $71
    .label __3 = $73
    .label __4 = $75
    .label row = $60
    .label column = $61
    // Placement is legal
    // The same column is a conflict.
    // The same diagonal is a conflict.
    .label return = $62
    // Placement is legal
    // The same column is a conflict.
    // The same diagonal is a conflict.
    .label return_1 = 3
    .label i = 2
    // [69] phi from legal to legal::@1 [phi:legal->legal::@1]
  __b1_from_legal:
    // [69] phi (byte) legal::i#2 = (byte) 1 [phi:legal->legal::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z i
    jmp __b1
    // legal::@1
  __b1:
    // [70] (byte~) legal::$0 ← (byte) legal::row#0 - (byte) 1 -- vbuz1=vbuz2_minus_1 
    ldx.z row
    dex
    stx.z __0
    // [71] if((byte) legal::i#2<=(byte~) legal::$0) goto legal::@2 -- vbuz1_le_vbuz2_then_la1 
    lda.z __0
    cmp.z i
    bcs __b2
    // [72] phi from legal::@1 to legal::@return [phi:legal::@1->legal::@return]
  __breturn_from___b1:
    // [72] phi (byte) legal::return#4 = (byte) 1 [phi:legal::@1->legal::@return#0] -- vbuz1=vbuc1 
    lda #1
    sta.z return_1
    jmp __breturn
    // [72] phi from legal::@2 legal::@6 to legal::@return [phi:legal::@2/legal::@6->legal::@return]
  __breturn_from___b2:
  __breturn_from___b6:
    // [72] phi (byte) legal::return#4 = (byte) 0 [phi:legal::@2/legal::@6->legal::@return#0] -- vbuz1=vbuc1 
    lda #0
    sta.z return_1
    jmp __breturn
    // legal::@return
  __breturn:
    // [73] return 
    rts
    // legal::@2
  __b2:
    // [74] if(*((const byte*) board + (byte) legal::i#2)==(byte) legal::column#0) goto legal::@return -- pbuc1_derefidx_vbuz1_eq_vbuz2_then_la1 
    ldy.z i
    lda board,y
    cmp.z column
    beq __breturn_from___b2
    jmp __b4
    // legal::@4
  __b4:
    // [75] (byte) diff::a#0 ← *((const byte*) board + (byte) legal::i#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z i
    lda board,y
    sta.z diff.a
    // [76] (byte) diff::b#0 ← (byte) legal::column#0 -- vbuz1=vbuz2 
    lda.z column
    sta.z diff.b
    // [77] call diff 
    // [194] phi from legal::@4 to diff [phi:legal::@4->diff]
  diff_from___b4:
    // [194] phi (byte) diff::b#2 = (byte) diff::b#0 [phi:legal::@4->diff#0] -- register_copy 
    // [194] phi (byte) diff::a#2 = (byte) diff::a#0 [phi:legal::@4->diff#1] -- register_copy 
    jsr diff
    // [78] (byte) diff::return#0 ← (byte) diff::return#4 -- vbuz1=vbuz2 
    lda.z diff.return_2
    sta.z diff.return
    jmp __b5
    // legal::@5
  __b5:
    // [79] (byte~) legal::$3 ← (byte) diff::return#0 -- vbuz1=vbuz2 
    lda.z diff.return
    sta.z __3
    // [80] (byte) diff::a#1 ← (byte) legal::i#2 -- vbuz1=vbuz2 
    lda.z i
    sta.z diff.a
    // [81] (byte) diff::b#1 ← (byte) legal::row#0 -- vbuz1=vbuz2 
    lda.z row
    sta.z diff.b
    // [82] call diff 
    // [194] phi from legal::@5 to diff [phi:legal::@5->diff]
  diff_from___b5:
    // [194] phi (byte) diff::b#2 = (byte) diff::b#1 [phi:legal::@5->diff#0] -- register_copy 
    // [194] phi (byte) diff::a#2 = (byte) diff::a#1 [phi:legal::@5->diff#1] -- register_copy 
    jsr diff
    // [83] (byte) diff::return#1 ← (byte) diff::return#4 -- vbuz1=vbuz2 
    lda.z diff.return_2
    sta.z diff.return_1
    jmp __b6
    // legal::@6
  __b6:
    // [84] (byte~) legal::$4 ← (byte) diff::return#1 -- vbuz1=vbuz2 
    lda.z diff.return_1
    sta.z __4
    // [85] if((byte~) legal::$3!=(byte~) legal::$4) goto legal::@3 -- vbuz1_neq_vbuz2_then_la1 
    lda.z __3
    cmp.z __4
    bne __b3
    jmp __breturn_from___b6
    // legal::@3
  __b3:
    // [86] (byte) legal::i#1 ← ++ (byte) legal::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [69] phi from legal::@3 to legal::@1 [phi:legal::@3->legal::@1]
  __b1_from___b3:
    // [69] phi (byte) legal::i#2 = (byte) legal::i#1 [phi:legal::@3->legal::@1#0] -- register_copy 
    jmp __b1
}
  // print
// Print the board with a legal placement. Also increments the solution count.
print: {
    .label i = 4
    .label i1 = 5
    .label j = 6
    // [88] call gotoxy 
    // [200] phi from print to gotoxy [phi:print->gotoxy]
  gotoxy_from_print:
    jsr gotoxy
    // [89] phi from print to print::@11 [phi:print->print::@11]
  __b11_from_print:
    jmp __b11
    // print::@11
  __b11:
    // [90] call cputs 
    // [132] phi from print::@11 to cputs [phi:print::@11->cputs]
  cputs_from___b11:
    // [132] phi (to_nomodify byte*) cputs::s#14 = (const byte*) print::s [phi:print::@11->cputs#0] -- pbuz1=pbuc1 
    lda #<s
    sta.z cputs.s
    lda #>s
    sta.z cputs.s+1
    jsr cputs
    jmp __b12
    // print::@12
  __b12:
    // [91] (dword) printf_ulong::uvalue#1 ← (dword) count -- vduz1=vduz2 
    lda.z count
    sta.z printf_ulong.uvalue
    lda.z count+1
    sta.z printf_ulong.uvalue+1
    lda.z count+2
    sta.z printf_ulong.uvalue+2
    lda.z count+3
    sta.z printf_ulong.uvalue+3
    // [92] call printf_ulong 
    // [183] phi from print::@12 to printf_ulong [phi:print::@12->printf_ulong]
  printf_ulong_from___b12:
    // [183] phi (dword) printf_ulong::uvalue#2 = (dword) printf_ulong::uvalue#1 [phi:print::@12->printf_ulong#0] -- register_copy 
    jsr printf_ulong
    // [93] phi from print::@12 to print::@13 [phi:print::@12->print::@13]
  __b13_from___b12:
    jmp __b13
    // print::@13
  __b13:
    // [94] call cputs 
    // [132] phi from print::@13 to cputs [phi:print::@13->cputs]
  cputs_from___b13:
    // [132] phi (to_nomodify byte*) cputs::s#14 = (const byte*) print::s1 [phi:print::@13->cputs#0] -- pbuz1=pbuc1 
    lda #<s1
    sta.z cputs.s
    lda #>s1
    sta.z cputs.s+1
    jsr cputs
    // [95] phi from print::@13 to print::@1 [phi:print::@13->print::@1]
  __b1_from___b13:
    // [95] phi (byte) print::i#2 = (byte) 1 [phi:print::@13->print::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z i
    jmp __b1
    // print::@1
  __b1:
    // [96] if((byte) print::i#2<(byte) 8+(byte) 1) goto print::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #8+1
    bcc __b2
    // [97] phi from print::@1 to print::@3 [phi:print::@1->print::@3]
  __b3_from___b1:
    // [97] phi (byte) print::i1#2 = (byte) 1 [phi:print::@1->print::@3#0] -- vbuz1=vbuc1 
    lda #1
    sta.z i1
    jmp __b3
    // print::@3
  __b3:
    // [98] if((byte) print::i1#2<(byte) 8+(byte) 1) goto print::@4 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i1
    cmp #8+1
    bcc __b4_from___b3
    jmp __breturn
    // print::@return
  __breturn:
    // [99] return 
    rts
    // [100] phi from print::@3 to print::@4 [phi:print::@3->print::@4]
  __b4_from___b3:
    jmp __b4
    // print::@4
  __b4:
    // [101] call cputs 
    // [132] phi from print::@4 to cputs [phi:print::@4->cputs]
  cputs_from___b4:
    // [132] phi (to_nomodify byte*) cputs::s#14 = (const byte*) print::s2 [phi:print::@4->cputs#0] -- pbuz1=pbuc1 
    lda #<s2
    sta.z cputs.s
    lda #>s2
    sta.z cputs.s+1
    jsr cputs
    jmp __b15
    // print::@15
  __b15:
    // [102] (byte) printf_uchar::uvalue#1 ← (byte) print::i1#2 -- vbuz1=vbuz2 
    lda.z i1
    sta.z printf_uchar.uvalue
    // [103] call printf_uchar 
    // [206] phi from print::@15 to printf_uchar [phi:print::@15->printf_uchar]
  printf_uchar_from___b15:
    // [206] phi (byte) printf_uchar::uvalue#2 = (byte) printf_uchar::uvalue#1 [phi:print::@15->printf_uchar#0] -- register_copy 
    jsr printf_uchar
    // [104] phi from print::@15 to print::@5 [phi:print::@15->print::@5]
  __b5_from___b15:
    // [104] phi (byte) print::j#2 = (byte) 1 [phi:print::@15->print::@5#0] -- vbuz1=vbuc1 
    lda #1
    sta.z j
    jmp __b5
    // print::@5
  __b5:
    // [105] if((byte) print::j#2<(byte) 8+(byte) 1) goto print::@6 -- vbuz1_lt_vbuc1_then_la1 
    lda.z j
    cmp #8+1
    bcc __b6
    jmp __b7
    // print::@7
  __b7:
    // [106] (byte) print::i1#1 ← ++ (byte) print::i1#2 -- vbuz1=_inc_vbuz1 
    inc.z i1
    // [97] phi from print::@7 to print::@3 [phi:print::@7->print::@3]
  __b3_from___b7:
    // [97] phi (byte) print::i1#2 = (byte) print::i1#1 [phi:print::@7->print::@3#0] -- register_copy 
    jmp __b3
    // print::@6
  __b6:
    // [107] if(*((const byte*) board + (byte) print::i1#2)==(byte) print::j#2) goto print::@8 -- pbuc1_derefidx_vbuz1_eq_vbuz2_then_la1 
    ldy.z i1
    lda board,y
    cmp.z j
    beq __b8_from___b6
    // [108] phi from print::@6 to print::@10 [phi:print::@6->print::@10]
  __b10_from___b6:
    jmp __b10
    // print::@10
  __b10:
    // [109] call cputs 
    // [132] phi from print::@10 to cputs [phi:print::@10->cputs]
  cputs_from___b10:
    // [132] phi (to_nomodify byte*) cputs::s#14 = (const byte*) print::s4 [phi:print::@10->cputs#0] -- pbuz1=pbuc1 
    lda #<s4
    sta.z cputs.s
    lda #>s4
    sta.z cputs.s+1
    jsr cputs
    jmp __b9
    // print::@9
  __b9:
    // [110] (byte) print::j#1 ← ++ (byte) print::j#2 -- vbuz1=_inc_vbuz1 
    inc.z j
    // [104] phi from print::@9 to print::@5 [phi:print::@9->print::@5]
  __b5_from___b9:
    // [104] phi (byte) print::j#2 = (byte) print::j#1 [phi:print::@9->print::@5#0] -- register_copy 
    jmp __b5
    // [111] phi from print::@6 to print::@8 [phi:print::@6->print::@8]
  __b8_from___b6:
    jmp __b8
    // print::@8
  __b8:
    // [112] call cputs 
    // [132] phi from print::@8 to cputs [phi:print::@8->cputs]
  cputs_from___b8:
    // [132] phi (to_nomodify byte*) cputs::s#14 = (const byte*) print::s3 [phi:print::@8->cputs#0] -- pbuz1=pbuc1 
    lda #<s3
    sta.z cputs.s
    lda #>s3
    sta.z cputs.s+1
    jsr cputs
    jmp __b9
    // print::@2
  __b2:
    // [113] (byte) printf_uchar::uvalue#0 ← (byte) print::i#2 -- vbuz1=vbuz2 
    lda.z i
    sta.z printf_uchar.uvalue
    // [114] call printf_uchar 
    // [206] phi from print::@2 to printf_uchar [phi:print::@2->printf_uchar]
  printf_uchar_from___b2:
    // [206] phi (byte) printf_uchar::uvalue#2 = (byte) printf_uchar::uvalue#0 [phi:print::@2->printf_uchar#0] -- register_copy 
    jsr printf_uchar
    jmp __b14
    // print::@14
  __b14:
    // [115] (byte) print::i#1 ← ++ (byte) print::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [95] phi from print::@14 to print::@1 [phi:print::@14->print::@1]
  __b1_from___b14:
    // [95] phi (byte) print::i#2 = (byte) print::i#1 [phi:print::@14->print::@1#0] -- register_copy 
    jmp __b1
    s: .text @"\n#"
    .byte 0
    s1: .text @":\n "
    .byte 0
    s2: .text @"\n"
    .byte 0
    s3: .text "Q"
    .byte 0
    s4: .text "-"
    .byte 0
}
  // clrscr
// clears the screen and moves the cursor to the upper left-hand corner of the screen.
clrscr: {
    .label c = $c
    .label line_text = 8
    .label line_cols = $a
    .label l = 7
    // [117] phi from clrscr to clrscr::@1 [phi:clrscr->clrscr::@1]
  __b1_from_clrscr:
    // [117] phi (byte*) clrscr::line_cols#5 = (const nomodify byte*) COLORRAM [phi:clrscr->clrscr::@1#0] -- pbuz1=pbuc1 
    lda #<COLORRAM
    sta.z line_cols
    lda #>COLORRAM
    sta.z line_cols+1
    // [117] phi (byte*) clrscr::line_text#5 = (const nomodify byte*) DEFAULT_SCREEN [phi:clrscr->clrscr::@1#1] -- pbuz1=pbuc1 
    lda #<DEFAULT_SCREEN
    sta.z line_text
    lda #>DEFAULT_SCREEN
    sta.z line_text+1
    // [117] phi (byte) clrscr::l#2 = (byte) 0 [phi:clrscr->clrscr::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    jmp __b1
    // clrscr::@1
  __b1:
    // [118] if((byte) clrscr::l#2<(byte) $19) goto clrscr::@3 -- vbuz1_lt_vbuc1_then_la1 
    lda.z l
    cmp #$19
    bcc __b3_from___b1
    jmp __b2
    // clrscr::@2
  __b2:
    // [119] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [120] (byte) conio_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_y
    // [121] (byte*) conio_line_text ← (const nomodify byte*) DEFAULT_SCREEN -- pbuz1=pbuc1 
    lda #<DEFAULT_SCREEN
    sta.z conio_line_text
    lda #>DEFAULT_SCREEN
    sta.z conio_line_text+1
    // [122] (byte*) conio_line_color ← (const nomodify byte*) COLORRAM -- pbuz1=pbuc1 
    lda #<COLORRAM
    sta.z conio_line_color
    lda #>COLORRAM
    sta.z conio_line_color+1
    jmp __breturn
    // clrscr::@return
  __breturn:
    // [123] return 
    rts
    // [124] phi from clrscr::@1 to clrscr::@3 [phi:clrscr::@1->clrscr::@3]
  __b3_from___b1:
    // [124] phi (byte) clrscr::c#2 = (byte) 0 [phi:clrscr::@1->clrscr::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    jmp __b3
    // clrscr::@3
  __b3:
    // [125] if((byte) clrscr::c#2<(byte) $28) goto clrscr::@4 -- vbuz1_lt_vbuc1_then_la1 
    lda.z c
    cmp #$28
    bcc __b4
    jmp __b5
    // clrscr::@5
  __b5:
    // [126] (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#5 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line_text
    sta.z line_text
    bcc !+
    inc.z line_text+1
  !:
    // [127] (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#5 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line_cols
    sta.z line_cols
    bcc !+
    inc.z line_cols+1
  !:
    // [128] (byte) clrscr::l#1 ← ++ (byte) clrscr::l#2 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [117] phi from clrscr::@5 to clrscr::@1 [phi:clrscr::@5->clrscr::@1]
  __b1_from___b5:
    // [117] phi (byte*) clrscr::line_cols#5 = (byte*) clrscr::line_cols#1 [phi:clrscr::@5->clrscr::@1#0] -- register_copy 
    // [117] phi (byte*) clrscr::line_text#5 = (byte*) clrscr::line_text#1 [phi:clrscr::@5->clrscr::@1#1] -- register_copy 
    // [117] phi (byte) clrscr::l#2 = (byte) clrscr::l#1 [phi:clrscr::@5->clrscr::@1#2] -- register_copy 
    jmp __b1
    // clrscr::@4
  __b4:
    // [129] *((byte*) clrscr::line_text#5 + (byte) clrscr::c#2) ← (byte) ' ' -- pbuz1_derefidx_vbuz2=vbuc1 
    lda #' '
    ldy.z c
    sta (line_text),y
    // [130] *((byte*) clrscr::line_cols#5 + (byte) clrscr::c#2) ← (const nomodify byte) LIGHT_BLUE -- pbuz1_derefidx_vbuz2=vbuc1 
    lda #LIGHT_BLUE
    ldy.z c
    sta (line_cols),y
    // [131] (byte) clrscr::c#1 ← ++ (byte) clrscr::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [124] phi from clrscr::@4 to clrscr::@3 [phi:clrscr::@4->clrscr::@3]
  __b3_from___b4:
    // [124] phi (byte) clrscr::c#2 = (byte) clrscr::c#1 [phi:clrscr::@4->clrscr::@3#0] -- register_copy 
    jmp __b3
}
  // cputs
// Output a NUL-terminated string at the current cursor position
// cputs(byte* zp($d) s)
cputs: {
    .label c = $76
    .label s = $d
    // [133] phi from cputs cputs::@2 to cputs::@1 [phi:cputs/cputs::@2->cputs::@1]
  __b1_from_cputs:
  __b1_from___b2:
    // [133] phi (to_nomodify byte*) cputs::s#13 = (to_nomodify byte*) cputs::s#14 [phi:cputs/cputs::@2->cputs::@1#0] -- register_copy 
    jmp __b1
    // cputs::@1
  __b1:
    // [134] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#13) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (s),y
    sta.z c
    // [135] (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#13 -- pbuz1=_inc_pbuz1 
    inc.z s
    bne !+
    inc.z s+1
  !:
    // [136] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z c
    bne __b2
    jmp __breturn
    // cputs::@return
  __breturn:
    // [137] return 
    rts
    // cputs::@2
  __b2:
    // [138] (byte) cputc::c#0 ← (byte) cputs::c#1 -- vbuz1=vbuz2 
    lda.z c
    sta.z cputc.c
    // [139] call cputc 
    // [213] phi from cputs::@2 to cputc [phi:cputs::@2->cputc]
  cputc_from___b2:
    // [213] phi (byte) cputc::c#3 = (byte) cputc::c#0 [phi:cputs::@2->cputc#0] -- register_copy 
    jsr cputc
    jmp __b1_from___b2
}
  // printf_uint
// Print an unsigned int using a specific format
printf_uint: {
    .const format_min_length = 0
    .const format_justify_left = 0
    .const format_zero_padding = 0
    .const format_upper_case = 0
    .label uvalue = 8
    jmp __b1
    // printf_uint::@1
  __b1:
    // [141] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // [142] call utoa 
  // Format number into buffer
    // [224] phi from printf_uint::@1 to utoa [phi:printf_uint::@1->utoa]
  utoa_from___b1:
    jsr utoa
    jmp __b2
    // printf_uint::@2
  __b2:
    // [143] (byte) printf_number_buffer::buffer_sign#1 ← *((byte*)&(struct printf_buffer_number) printf_buffer) -- vbuz1=_deref_pbuc1 
    lda printf_buffer
    sta.z printf_number_buffer.buffer_sign
    // [144] call printf_number_buffer 
  // Print using format
    // [245] phi from printf_uint::@2 to printf_number_buffer [phi:printf_uint::@2->printf_number_buffer]
  printf_number_buffer_from___b2:
    // [245] phi (byte) printf_number_buffer::format_upper_case#10 = (const byte) printf_uint::format_upper_case#0 [phi:printf_uint::@2->printf_number_buffer#0] -- vbuz1=vbuc1 
    lda #format_upper_case
    sta.z printf_number_buffer.format_upper_case
    // [245] phi (byte) printf_number_buffer::buffer_sign#10 = (byte) printf_number_buffer::buffer_sign#1 [phi:printf_uint::@2->printf_number_buffer#1] -- register_copy 
    // [245] phi (byte) printf_number_buffer::format_zero_padding#10 = (const byte) printf_uint::format_zero_padding#0 [phi:printf_uint::@2->printf_number_buffer#2] -- vbuz1=vbuc1 
    lda #format_zero_padding
    sta.z printf_number_buffer.format_zero_padding
    // [245] phi (byte) printf_number_buffer::format_justify_left#10 = (const byte) printf_uint::format_justify_left#0 [phi:printf_uint::@2->printf_number_buffer#3] -- vbuz1=vbuc1 
    lda #format_justify_left
    sta.z printf_number_buffer.format_justify_left
    // [245] phi (byte) printf_number_buffer::format_min_length#3 = (const byte) printf_uint::format_min_length#0 [phi:printf_uint::@2->printf_number_buffer#4] -- vbuz1=vbuc1 
    lda #format_min_length
    sta.z printf_number_buffer.format_min_length
    jsr printf_number_buffer
    jmp __breturn
    // printf_uint::@return
  __breturn:
    // [145] return 
    rts
}
  // tod_init
// Initialize time-of-day clock
// This uses the MOS6526 CIA#1
// tod_init(byte zp($65) tod_TENTHS, byte zp($66) tod_SEC, byte zp($67) tod_MIN, byte zp($68) tod_HOURS)
tod_init: {
    .label tod_TENTHS = $65
    .label tod_SEC = $66
    .label tod_MIN = $67
    .label tod_HOURS = $68
    // [146] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) | (byte) $80 -- _deref_pbuc1=_deref_pbuc1_bor_vbuc2 
    // Set 50hz (this assumes PAL!) (bit7=1)
    lda #$80
    ora CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL
    // [147] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) & (byte) $7f -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    // Writing TOD clock (bit7=0)
    lda #$7f
    and CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL
    // [148] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS) ← (byte) tod_init::tod_HOURS#0 -- _deref_pbuc1=vbuz1 
    // Reset TOD clock
    // Writing sequence is important. TOD stops when hours is written and starts when 10ths is written.
    lda.z tod_HOURS
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS
    // [149] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN) ← (byte) tod_init::tod_MIN#0 -- _deref_pbuc1=vbuz1 
    lda.z tod_MIN
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_MIN
    // [150] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC) ← (byte) tod_init::tod_SEC#0 -- _deref_pbuc1=vbuz1 
    lda.z tod_SEC
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_SEC
    // [151] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS) ← (byte) tod_init::tod_TENTHS#0 -- _deref_pbuc1=vbuz1 
    lda.z tod_TENTHS
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_10THS
    jmp __breturn
    // tod_init::@return
  __breturn:
    // [152] return 
    rts
}
  // tod_read
// Read time of day
tod_read: {
    .label return_TENTHS = $7a
    .label return_SEC = $79
    .label return_MIN = $78
    .label return_HOURS = $77
    .label return_TENTHS_1 = $69
    .label return_SEC_1 = $6a
    .label return_MIN_1 = $6b
    .label return_HOURS_1 = $6c
    // [153] (byte) tod_read::return_HOURS#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS) -- vbuz1=_deref_pbuc1 
    // Reading sequence is important. TOD latches on reading hours until 10ths is read.
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS
    sta.z return_HOURS
    // [154] (byte) tod_read::return_MIN#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN) -- vbuz1=_deref_pbuc1 
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_MIN
    sta.z return_MIN
    // [155] (byte) tod_read::return_SEC#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC) -- vbuz1=_deref_pbuc1 
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_SEC
    sta.z return_SEC
    // [156] (byte) tod_read::return_TENTHS#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS) -- vbuz1=_deref_pbuc1 
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_10THS
    sta.z return_TENTHS
    jmp __breturn
    // tod_read::@return
  __breturn:
    // [157] return 
    rts
}
  // tod_str
// Convert time of day to a human-readable string "hh:mm:ss:10"
// tod_str(byte zp($6d) tod_TENTHS, byte zp($6e) tod_SEC, byte zp($6f) tod_MIN, byte zp($70) tod_HOURS)
tod_str: {
    .label __0 = $7b
    .label __1 = $7c
    .label __2 = $7d
    .label __3 = $7e
    .label __4 = $7f
    .label __5 = $80
    .label __6 = $81
    .label __7 = $82
    .label __8 = $83
    .label __9 = $84
    .label __10 = $85
    .label __11 = $86
    .label __12 = $87
    .label __13 = $88
    .label __14 = $89
    .label __15 = $8a
    .label tod_TENTHS = $6d
    .label tod_SEC = $6e
    .label tod_MIN = $6f
    .label tod_HOURS = $70
    // [158] (byte~) tod_str::$0 ← (byte) tod_str::tod_HOURS#0 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda.z tod_HOURS
    lsr
    lsr
    lsr
    lsr
    sta.z __0
    // [159] (byte~) tod_str::$1 ← (byte) '0' + (byte~) tod_str::$0 -- vbuz1=vbuc1_plus_vbuz2 
    lax.z __0
    axs #-['0']
    stx.z __1
    // [160] *((const byte*) tod_buffer) ← (byte~) tod_str::$1 -- _deref_pbuc1=vbuz1 
    lda.z __1
    sta tod_buffer
    // [161] (byte~) tod_str::$2 ← (byte) tod_str::tod_HOURS#0 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and.z tod_HOURS
    sta.z __2
    // [162] (byte~) tod_str::$3 ← (byte) '0' + (byte~) tod_str::$2 -- vbuz1=vbuc1_plus_vbuz2 
    lax.z __2
    axs #-['0']
    stx.z __3
    // [163] *((const byte*) tod_buffer+(byte) 1) ← (byte~) tod_str::$3 -- _deref_pbuc1=vbuz1 
    lda.z __3
    sta tod_buffer+1
    // [164] (byte~) tod_str::$4 ← (byte) tod_str::tod_MIN#0 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda.z tod_MIN
    lsr
    lsr
    lsr
    lsr
    sta.z __4
    // [165] (byte~) tod_str::$5 ← (byte) '0' + (byte~) tod_str::$4 -- vbuz1=vbuc1_plus_vbuz2 
    lax.z __4
    axs #-['0']
    stx.z __5
    // [166] *((const byte*) tod_buffer+(byte) 3) ← (byte~) tod_str::$5 -- _deref_pbuc1=vbuz1 
    lda.z __5
    sta tod_buffer+3
    // [167] (byte~) tod_str::$6 ← (byte) tod_str::tod_MIN#0 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and.z tod_MIN
    sta.z __6
    // [168] (byte~) tod_str::$7 ← (byte) '0' + (byte~) tod_str::$6 -- vbuz1=vbuc1_plus_vbuz2 
    lax.z __6
    axs #-['0']
    stx.z __7
    // [169] *((const byte*) tod_buffer+(byte) 4) ← (byte~) tod_str::$7 -- _deref_pbuc1=vbuz1 
    lda.z __7
    sta tod_buffer+4
    // [170] (byte~) tod_str::$8 ← (byte) tod_str::tod_SEC#0 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda.z tod_SEC
    lsr
    lsr
    lsr
    lsr
    sta.z __8
    // [171] (byte~) tod_str::$9 ← (byte) '0' + (byte~) tod_str::$8 -- vbuz1=vbuc1_plus_vbuz2 
    lax.z __8
    axs #-['0']
    stx.z __9
    // [172] *((const byte*) tod_buffer+(byte) 6) ← (byte~) tod_str::$9 -- _deref_pbuc1=vbuz1 
    lda.z __9
    sta tod_buffer+6
    // [173] (byte~) tod_str::$10 ← (byte) tod_str::tod_SEC#0 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and.z tod_SEC
    sta.z __10
    // [174] (byte~) tod_str::$11 ← (byte) '0' + (byte~) tod_str::$10 -- vbuz1=vbuc1_plus_vbuz2 
    lax.z __10
    axs #-['0']
    stx.z __11
    // [175] *((const byte*) tod_buffer+(byte) 7) ← (byte~) tod_str::$11 -- _deref_pbuc1=vbuz1 
    lda.z __11
    sta tod_buffer+7
    // [176] (byte~) tod_str::$12 ← (byte) tod_str::tod_TENTHS#0 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda.z tod_TENTHS
    lsr
    lsr
    lsr
    lsr
    sta.z __12
    // [177] (byte~) tod_str::$13 ← (byte) '0' + (byte~) tod_str::$12 -- vbuz1=vbuc1_plus_vbuz2 
    lax.z __12
    axs #-['0']
    stx.z __13
    // [178] *((const byte*) tod_buffer+(byte) 9) ← (byte~) tod_str::$13 -- _deref_pbuc1=vbuz1 
    lda.z __13
    sta tod_buffer+9
    // [179] (byte~) tod_str::$14 ← (byte) tod_str::tod_TENTHS#0 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and.z tod_TENTHS
    sta.z __14
    // [180] (byte~) tod_str::$15 ← (byte) '0' + (byte~) tod_str::$14 -- vbuz1=vbuc1_plus_vbuz2 
    lax.z __14
    axs #-['0']
    stx.z __15
    // [181] *((const byte*) tod_buffer+(byte) $a) ← (byte~) tod_str::$15 -- _deref_pbuc1=vbuz1 
    lda.z __15
    sta tod_buffer+$a
    jmp __breturn
    // tod_str::@return
  __breturn:
    // [182] return 
    rts
}
  // printf_ulong
// Print an unsigned int using a specific format
// printf_ulong(dword zp($f) uvalue)
printf_ulong: {
    .label uvalue = $f
    jmp __b1
    // printf_ulong::@1
  __b1:
    // [184] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // [185] (dword) ultoa::value#1 ← (dword) printf_ulong::uvalue#2 -- vduz1=vduz2 
    lda.z uvalue
    sta.z ultoa.value
    lda.z uvalue+1
    sta.z ultoa.value+1
    lda.z uvalue+2
    sta.z ultoa.value+2
    lda.z uvalue+3
    sta.z ultoa.value+3
    // [186] call ultoa 
  // Format number into buffer
    // [282] phi from printf_ulong::@1 to ultoa [phi:printf_ulong::@1->ultoa]
  ultoa_from___b1:
    jsr ultoa
    jmp __b2
    // printf_ulong::@2
  __b2:
    // [187] (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer) -- vbuz1=_deref_pbuc1 
    lda printf_buffer
    sta.z printf_number_buffer.buffer_sign
    // [188] call printf_number_buffer 
  // Print using format
    // [245] phi from printf_ulong::@2 to printf_number_buffer [phi:printf_ulong::@2->printf_number_buffer]
  printf_number_buffer_from___b2:
    // [245] phi (byte) printf_number_buffer::format_upper_case#10 = (byte) 0 [phi:printf_ulong::@2->printf_number_buffer#0] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_number_buffer.format_upper_case
    // [245] phi (byte) printf_number_buffer::buffer_sign#10 = (byte) printf_number_buffer::buffer_sign#0 [phi:printf_ulong::@2->printf_number_buffer#1] -- register_copy 
    // [245] phi (byte) printf_number_buffer::format_zero_padding#10 = (byte) 0 [phi:printf_ulong::@2->printf_number_buffer#2] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_number_buffer.format_zero_padding
    // [245] phi (byte) printf_number_buffer::format_justify_left#10 = (byte) 0 [phi:printf_ulong::@2->printf_number_buffer#3] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_number_buffer.format_justify_left
    // [245] phi (byte) printf_number_buffer::format_min_length#3 = (byte) 0 [phi:printf_ulong::@2->printf_number_buffer#4] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_number_buffer.format_min_length
    jsr printf_number_buffer
    jmp __breturn
    // printf_ulong::@return
  __breturn:
    // [189] return 
    rts
}
  // printf_string
// Print a string value using a specific format
// Handles justification and min length 
printf_string: {
    // [191] phi from printf_string to printf_string::@1 [phi:printf_string->printf_string::@1]
  __b1_from_printf_string:
    jmp __b1
    // printf_string::@1
  __b1:
    // [192] call cputs 
    // [132] phi from printf_string::@1 to cputs [phi:printf_string::@1->cputs]
  cputs_from___b1:
    // [132] phi (to_nomodify byte*) cputs::s#14 = (const byte*) tod_buffer [phi:printf_string::@1->cputs#0] -- pbuz1=pbuc1 
    lda #<tod_buffer
    sta.z cputs.s
    lda #>tod_buffer
    sta.z cputs.s+1
    jsr cputs
    jmp __breturn
    // printf_string::@return
  __breturn:
    // [193] return 
    rts
}
  // diff
// Find the absolute difference between two unsigned chars
// diff(byte zp($13) a, byte zp($14) b)
diff: {
    .label a = $13
    .label b = $14
    .label return = $72
    .label return_1 = $74
    .label return_2 = $15
    // [195] if((byte) diff::a#2<(byte) diff::b#2) goto diff::@1 -- vbuz1_lt_vbuz2_then_la1 
    lda.z a
    cmp.z b
    bcc __b1
    jmp __b2
    // diff::@2
  __b2:
    // [196] (byte) diff::return#3 ← (byte) diff::a#2 - (byte) diff::b#2 -- vbuz1=vbuz2_minus_vbuz3 
    lda.z a
    sec
    sbc.z b
    sta.z return_2
    // [197] phi from diff::@1 diff::@2 to diff::@return [phi:diff::@1/diff::@2->diff::@return]
  __breturn_from___b1:
  __breturn_from___b2:
    // [197] phi (byte) diff::return#4 = (byte) diff::return#2 [phi:diff::@1/diff::@2->diff::@return#0] -- register_copy 
    jmp __breturn
    // diff::@return
  __breturn:
    // [198] return 
    rts
    // diff::@1
  __b1:
    // [199] (byte) diff::return#2 ← (byte) diff::b#2 - (byte) diff::a#2 -- vbuz1=vbuz2_minus_vbuz3 
    lda.z b
    sec
    sbc.z a
    sta.z return_2
    jmp __breturn_from___b1
}
  // gotoxy
// Set the cursor to the specified position
gotoxy: {
    .const x = 0
    .const y = 5
    .const line_offset = y*$28
    jmp __b1
    // gotoxy::@1
  __b1:
    // [201] (byte) conio_cursor_x ← (const byte) gotoxy::x#2 -- vbuz1=vbuc1 
    lda #x
    sta.z conio_cursor_x
    // [202] (byte) conio_cursor_y ← (const byte) gotoxy::y#2 -- vbuz1=vbuc1 
    lda #y
    sta.z conio_cursor_y
    // [203] (byte*) conio_line_text ← (const nomodify byte*) DEFAULT_SCREEN+(const word) gotoxy::line_offset#0 -- pbuz1=pbuc1 
    lda #<DEFAULT_SCREEN+line_offset
    sta.z conio_line_text
    lda #>DEFAULT_SCREEN+line_offset
    sta.z conio_line_text+1
    // [204] (byte*) conio_line_color ← (const nomodify byte*) COLORRAM+(const word) gotoxy::line_offset#0 -- pbuz1=pbuc1 
    lda #<COLORRAM+line_offset
    sta.z conio_line_color
    lda #>COLORRAM+line_offset
    sta.z conio_line_color+1
    jmp __breturn
    // gotoxy::@return
  __breturn:
    // [205] return 
    rts
}
  // printf_uchar
// Print an unsigned char using a specific format
// printf_uchar(byte zp($16) uvalue)
printf_uchar: {
    .label uvalue = $16
    jmp __b1
    // printf_uchar::@1
  __b1:
    // [207] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // [208] (byte) uctoa::value#1 ← (byte) printf_uchar::uvalue#2 -- vbuz1=vbuz2 
    lda.z uvalue
    sta.z uctoa.value
    // [209] call uctoa 
  // Format number into buffer
    // [303] phi from printf_uchar::@1 to uctoa [phi:printf_uchar::@1->uctoa]
  uctoa_from___b1:
    jsr uctoa
    jmp __b2
    // printf_uchar::@2
  __b2:
    // [210] (byte) printf_number_buffer::buffer_sign#2 ← *((byte*)&(struct printf_buffer_number) printf_buffer) -- vbuz1=_deref_pbuc1 
    lda printf_buffer
    sta.z printf_number_buffer.buffer_sign
    // [211] call printf_number_buffer 
  // Print using format
    // [245] phi from printf_uchar::@2 to printf_number_buffer [phi:printf_uchar::@2->printf_number_buffer]
  printf_number_buffer_from___b2:
    // [245] phi (byte) printf_number_buffer::format_upper_case#10 = (byte) 0 [phi:printf_uchar::@2->printf_number_buffer#0] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_number_buffer.format_upper_case
    // [245] phi (byte) printf_number_buffer::buffer_sign#10 = (byte) printf_number_buffer::buffer_sign#2 [phi:printf_uchar::@2->printf_number_buffer#1] -- register_copy 
    // [245] phi (byte) printf_number_buffer::format_zero_padding#10 = (byte) 0 [phi:printf_uchar::@2->printf_number_buffer#2] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_number_buffer.format_zero_padding
    // [245] phi (byte) printf_number_buffer::format_justify_left#10 = (byte) 0 [phi:printf_uchar::@2->printf_number_buffer#3] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_number_buffer.format_justify_left
    // [245] phi (byte) printf_number_buffer::format_min_length#3 = (byte) 0 [phi:printf_uchar::@2->printf_number_buffer#4] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_number_buffer.format_min_length
    jsr printf_number_buffer
    jmp __breturn
    // printf_uchar::@return
  __breturn:
    // [212] return 
    rts
}
  // cputc
// Output one character at the current cursor position
// Moves the cursor forward. Scrolls the entire screen if needed
// cputc(byte zp($17) c)
cputc: {
    .label c = $17
    // [214] if((byte) cputc::c#3==(byte) ' ') goto cputc::@1 -- vbuz1_eq_vbuc1_then_la1 
    lda #'\n'
    cmp.z c
    beq __b1_from_cputc
    jmp __b2
    // cputc::@2
  __b2:
    // [215] *((byte*) conio_line_text + (byte) conio_cursor_x) ← (byte) cputc::c#3 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda.z c
    ldy.z conio_cursor_x
    sta (conio_line_text),y
    // [216] *((byte*) conio_line_color + (byte) conio_cursor_x) ← (const nomodify byte) LIGHT_BLUE -- pbuz1_derefidx_vbuz2=vbuc1 
    lda #LIGHT_BLUE
    ldy.z conio_cursor_x
    sta (conio_line_color),y
    // [217] (byte) conio_cursor_x ← ++ (byte) conio_cursor_x -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_x
    // [218] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z conio_cursor_x
    bne __breturn
    // [219] phi from cputc::@2 to cputc::@3 [phi:cputc::@2->cputc::@3]
  __b3_from___b2:
    jmp __b3
    // cputc::@3
  __b3:
    // [220] call cputln 
    jsr cputln
    jmp __breturn
    // cputc::@return
  __breturn:
    // [221] return 
    rts
    // [222] phi from cputc to cputc::@1 [phi:cputc->cputc::@1]
  __b1_from_cputc:
    jmp __b1
    // cputc::@1
  __b1:
    // [223] call cputln 
    jsr cputln
    jmp __breturn
}
  // utoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// utoa(word zp($19) value, byte* zp($8c) buffer)
utoa: {
    .const max_digits = 5
    .label __10 = $8e
    .label __11 = $8b
    .label digit_value = $8f
    .label buffer = $8c
    .label digit = $18
    .label value = $19
    .label buffer_1 = $1c
    .label started = $1b
    // [225] phi from utoa to utoa::@1 [phi:utoa->utoa::@1]
  __b1_from_utoa:
    // [225] phi (byte*) utoa::buffer#11 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:utoa->utoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer_1
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer_1+1
    // [225] phi (byte) utoa::started#2 = (byte) 0 [phi:utoa->utoa::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z started
    // [225] phi (word) utoa::value#2 = (const word) printf_uint::uvalue#0 [phi:utoa->utoa::@1#2] -- vwuz1=vwuc1 
    lda #<printf_uint.uvalue
    sta.z value
    lda #>printf_uint.uvalue
    sta.z value+1
    // [225] phi (byte) utoa::digit#2 = (byte) 0 [phi:utoa->utoa::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    jmp __b1
    // utoa::@1
  __b1:
    // [226] if((byte) utoa::digit#2<(const byte) utoa::max_digits#1-(byte) 1) goto utoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #max_digits-1
    bcc __b2
    jmp __b3
    // utoa::@3
  __b3:
    // [227] (byte~) utoa::$11 ← (byte)(word) utoa::value#2 -- vbuz1=_byte_vwuz2 
    lda.z value
    sta.z __11
    // [228] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __11
    lda DIGITS,y
    ldy #0
    sta (buffer_1),y
    // [229] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11 -- pbuz1=_inc_pbuz2 
    lda.z buffer_1
    clc
    adc #1
    sta.z buffer
    lda.z buffer_1+1
    adc #0
    sta.z buffer+1
    // [230] *((byte*) utoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (buffer),y
    jmp __breturn
    // utoa::@return
  __breturn:
    // [231] return 
    rts
    // utoa::@2
  __b2:
    // [232] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z digit
    asl
    sta.z __10
    // [233] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10) -- vwuz1=pwuc1_derefidx_vbuz2 
    ldy.z __10
    lda RADIX_DECIMAL_VALUES,y
    sta.z digit_value
    lda RADIX_DECIMAL_VALUES+1,y
    sta.z digit_value+1
    // [234] if((byte) 0!=(byte) utoa::started#2) goto utoa::@5 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z started
    bne __b5
    jmp __b7
    // utoa::@7
  __b7:
    // [235] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5 -- vwuz1_ge_vwuz2_then_la1 
    lda.z digit_value+1
    cmp.z value+1
    bne !+
    lda.z digit_value
    cmp.z value
    beq __b5
  !:
    bcc __b5
    // [236] phi from utoa::@7 to utoa::@4 [phi:utoa::@7->utoa::@4]
  __b4_from___b7:
    // [236] phi (byte*) utoa::buffer#14 = (byte*) utoa::buffer#11 [phi:utoa::@7->utoa::@4#0] -- register_copy 
    // [236] phi (byte) utoa::started#4 = (byte) utoa::started#2 [phi:utoa::@7->utoa::@4#1] -- register_copy 
    // [236] phi (word) utoa::value#6 = (word) utoa::value#2 [phi:utoa::@7->utoa::@4#2] -- register_copy 
    jmp __b4
    // utoa::@4
  __b4:
    // [237] (byte) utoa::digit#1 ← ++ (byte) utoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [225] phi from utoa::@4 to utoa::@1 [phi:utoa::@4->utoa::@1]
  __b1_from___b4:
    // [225] phi (byte*) utoa::buffer#11 = (byte*) utoa::buffer#14 [phi:utoa::@4->utoa::@1#0] -- register_copy 
    // [225] phi (byte) utoa::started#2 = (byte) utoa::started#4 [phi:utoa::@4->utoa::@1#1] -- register_copy 
    // [225] phi (word) utoa::value#2 = (word) utoa::value#6 [phi:utoa::@4->utoa::@1#2] -- register_copy 
    // [225] phi (byte) utoa::digit#2 = (byte) utoa::digit#1 [phi:utoa::@4->utoa::@1#3] -- register_copy 
    jmp __b1
    // utoa::@5
  __b5:
    // [238] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11 -- pbuz1=pbuz2 
    lda.z buffer_1
    sta.z utoa_append.buffer
    lda.z buffer_1+1
    sta.z utoa_append.buffer+1
    // [239] (word) utoa_append::value#0 ← (word) utoa::value#2 -- vwuz1=vwuz2 
    lda.z value
    sta.z utoa_append.value
    lda.z value+1
    sta.z utoa_append.value+1
    // [240] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0 -- vwuz1=vwuz2 
    lda.z digit_value
    sta.z utoa_append.sub
    lda.z digit_value+1
    sta.z utoa_append.sub+1
    // [241] call utoa_append 
    // [328] phi from utoa::@5 to utoa_append [phi:utoa::@5->utoa_append]
  utoa_append_from___b5:
    jsr utoa_append
    // [242] (word) utoa_append::return#0 ← (word) utoa_append::value#2 -- vwuz1=vwuz2 
    lda.z utoa_append.value
    sta.z utoa_append.return
    lda.z utoa_append.value+1
    sta.z utoa_append.return+1
    jmp __b6
    // utoa::@6
  __b6:
    // [243] (word) utoa::value#0 ← (word) utoa_append::return#0 -- vwuz1=vwuz2 
    lda.z utoa_append.return
    sta.z value
    lda.z utoa_append.return+1
    sta.z value+1
    // [244] (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer_1
    bne !+
    inc.z buffer_1+1
  !:
    // [236] phi from utoa::@6 to utoa::@4 [phi:utoa::@6->utoa::@4]
  __b4_from___b6:
    // [236] phi (byte*) utoa::buffer#14 = (byte*) utoa::buffer#4 [phi:utoa::@6->utoa::@4#0] -- register_copy 
    // [236] phi (byte) utoa::started#4 = (byte) 1 [phi:utoa::@6->utoa::@4#1] -- vbuz1=vbuc1 
    lda #1
    sta.z started
    // [236] phi (word) utoa::value#6 = (word) utoa::value#0 [phi:utoa::@6->utoa::@4#2] -- register_copy 
    jmp __b4
}
  // printf_number_buffer
// Print the contents of the number buffer using a specific format.
// This handles minimum length, zero-filling, and left/right justification from the format
// printf_number_buffer(byte zp($21) buffer_sign, byte zp($1e) format_min_length, byte zp($1f) format_justify_left, byte zp($20) format_zero_padding, byte zp($22) format_upper_case)
printf_number_buffer: {
    .label __19 = $99
    .label buffer_sign = $21
    .label len = $23
    .label padding = $24
    .label format_min_length = $1e
    .label format_zero_padding = $20
    .label format_justify_left = $1f
    .label format_upper_case = $22
    // [246] if((byte) 0==(byte) printf_number_buffer::format_min_length#3) goto printf_number_buffer::@1 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_min_length
    beq __b1_from_printf_number_buffer
    // [247] phi from printf_number_buffer to printf_number_buffer::@6 [phi:printf_number_buffer->printf_number_buffer::@6]
  __b6_from_printf_number_buffer:
    jmp __b6
    // printf_number_buffer::@6
  __b6:
    // [248] call strlen 
    // [335] phi from printf_number_buffer::@6 to strlen [phi:printf_number_buffer::@6->strlen]
  strlen_from___b6:
    jsr strlen
    // [249] (word) strlen::return#2 ← (word) strlen::len#2 -- vwuz1=vwuz2 
    lda.z strlen.len
    sta.z strlen.return
    lda.z strlen.len+1
    sta.z strlen.return+1
    jmp __b14
    // printf_number_buffer::@14
  __b14:
    // [250] (word~) printf_number_buffer::$19 ← (word) strlen::return#2 -- vwuz1=vwuz2 
    lda.z strlen.return
    sta.z __19
    lda.z strlen.return+1
    sta.z __19+1
    // [251] (signed byte) printf_number_buffer::len#0 ← (signed byte)(word~) printf_number_buffer::$19 -- vbsz1=_sbyte_vwuz2 
    // There is a minimum length - work out the padding
    lda.z __19
    sta.z len
    // [252] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@13 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z buffer_sign
    beq __b13_from___b14
    jmp __b7
    // printf_number_buffer::@7
  __b7:
    // [253] (signed byte) printf_number_buffer::len#1 ← ++ (signed byte) printf_number_buffer::len#0 -- vbsz1=_inc_vbsz1 
    inc.z len
    // [254] phi from printf_number_buffer::@14 printf_number_buffer::@7 to printf_number_buffer::@13 [phi:printf_number_buffer::@14/printf_number_buffer::@7->printf_number_buffer::@13]
  __b13_from___b14:
  __b13_from___b7:
    // [254] phi (signed byte) printf_number_buffer::len#2 = (signed byte) printf_number_buffer::len#0 [phi:printf_number_buffer::@14/printf_number_buffer::@7->printf_number_buffer::@13#0] -- register_copy 
    jmp __b13
    // printf_number_buffer::@13
  __b13:
    // [255] (signed byte) printf_number_buffer::padding#1 ← (signed byte)(byte) printf_number_buffer::format_min_length#3 - (signed byte) printf_number_buffer::len#2 -- vbsz1=vbsz2_minus_vbsz3 
    lda.z format_min_length
    sec
    sbc.z len
    sta.z padding
    // [256] if((signed byte) printf_number_buffer::padding#1>=(signed byte) 0) goto printf_number_buffer::@21 -- vbsz1_ge_0_then_la1 
    lda.z padding
    cmp #0
    bpl __b21_from___b13
    // [258] phi from printf_number_buffer printf_number_buffer::@13 to printf_number_buffer::@1 [phi:printf_number_buffer/printf_number_buffer::@13->printf_number_buffer::@1]
  __b1_from_printf_number_buffer:
  __b1_from___b13:
    // [258] phi (signed byte) printf_number_buffer::padding#10 = (signed byte) 0 [phi:printf_number_buffer/printf_number_buffer::@13->printf_number_buffer::@1#0] -- vbsz1=vbsc1 
    lda #0
    sta.z padding
    jmp __b1
    // [257] phi from printf_number_buffer::@13 to printf_number_buffer::@21 [phi:printf_number_buffer::@13->printf_number_buffer::@21]
  __b21_from___b13:
    jmp __b21
    // printf_number_buffer::@21
  __b21:
    // [258] phi from printf_number_buffer::@21 to printf_number_buffer::@1 [phi:printf_number_buffer::@21->printf_number_buffer::@1]
  __b1_from___b21:
    // [258] phi (signed byte) printf_number_buffer::padding#10 = (signed byte) printf_number_buffer::padding#1 [phi:printf_number_buffer::@21->printf_number_buffer::@1#0] -- register_copy 
    jmp __b1
    // printf_number_buffer::@1
  __b1:
    // [259] if((byte) 0!=(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@2 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z format_justify_left
    bne __b2
    jmp __b17
    // printf_number_buffer::@17
  __b17:
    // [260] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@2 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z format_zero_padding
    bne __b2
    jmp __b16
    // printf_number_buffer::@16
  __b16:
    // [261] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@8 -- vbsc1_neq_vbsz1_then_la1 
    lda #0
    cmp.z padding
    bne __b8
    jmp __b2
    // printf_number_buffer::@8
  __b8:
    // [262] (byte) printf_padding::length#0 ← (byte)(signed byte) printf_number_buffer::padding#10 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [263] call printf_padding 
    // [341] phi from printf_number_buffer::@8 to printf_padding [phi:printf_number_buffer::@8->printf_padding]
  printf_padding_from___b8:
    // [341] phi (byte) printf_padding::pad#7 = (byte) ' ' [phi:printf_number_buffer::@8->printf_padding#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z printf_padding.pad
    // [341] phi (byte) printf_padding::length#6 = (byte) printf_padding::length#0 [phi:printf_number_buffer::@8->printf_padding#1] -- register_copy 
    jsr printf_padding
    jmp __b2
    // printf_number_buffer::@2
  __b2:
    // [264] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@3 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z buffer_sign
    beq __b3
    jmp __b9
    // printf_number_buffer::@9
  __b9:
    // [265] (byte) cputc::c#2 ← (byte) printf_number_buffer::buffer_sign#10 -- vbuz1=vbuz2 
    lda.z buffer_sign
    sta.z cputc.c
    // [266] call cputc 
    // [213] phi from printf_number_buffer::@9 to cputc [phi:printf_number_buffer::@9->cputc]
  cputc_from___b9:
    // [213] phi (byte) cputc::c#3 = (byte) cputc::c#2 [phi:printf_number_buffer::@9->cputc#0] -- register_copy 
    jsr cputc
    jmp __b3
    // printf_number_buffer::@3
  __b3:
    // [267] if((byte) 0==(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@4 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_zero_padding
    beq __b4
    jmp __b18
    // printf_number_buffer::@18
  __b18:
    // [268] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@10 -- vbsc1_neq_vbsz1_then_la1 
    lda #0
    cmp.z padding
    bne __b10
    jmp __b4
    // printf_number_buffer::@10
  __b10:
    // [269] (byte) printf_padding::length#1 ← (byte)(signed byte) printf_number_buffer::padding#10 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [270] call printf_padding 
    // [341] phi from printf_number_buffer::@10 to printf_padding [phi:printf_number_buffer::@10->printf_padding]
  printf_padding_from___b10:
    // [341] phi (byte) printf_padding::pad#7 = (byte) '0' [phi:printf_number_buffer::@10->printf_padding#0] -- vbuz1=vbuc1 
    lda #'0'
    sta.z printf_padding.pad
    // [341] phi (byte) printf_padding::length#6 = (byte) printf_padding::length#1 [phi:printf_number_buffer::@10->printf_padding#1] -- register_copy 
    jsr printf_padding
    jmp __b4
    // printf_number_buffer::@4
  __b4:
    // [271] if((byte) 0==(byte) printf_number_buffer::format_upper_case#10) goto printf_number_buffer::@5 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_upper_case
    beq __b5_from___b4
    // [272] phi from printf_number_buffer::@4 to printf_number_buffer::@11 [phi:printf_number_buffer::@4->printf_number_buffer::@11]
  __b11_from___b4:
    jmp __b11
    // printf_number_buffer::@11
  __b11:
    // [273] call strupr 
    // [348] phi from printf_number_buffer::@11 to strupr [phi:printf_number_buffer::@11->strupr]
  strupr_from___b11:
    jsr strupr
    // [274] phi from printf_number_buffer::@11 printf_number_buffer::@4 to printf_number_buffer::@5 [phi:printf_number_buffer::@11/printf_number_buffer::@4->printf_number_buffer::@5]
  __b5_from___b11:
  __b5_from___b4:
    jmp __b5
    // printf_number_buffer::@5
  __b5:
    // [275] call cputs 
    // [132] phi from printf_number_buffer::@5 to cputs [phi:printf_number_buffer::@5->cputs]
  cputs_from___b5:
    // [132] phi (to_nomodify byte*) cputs::s#14 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:printf_number_buffer::@5->cputs#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z cputs.s
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z cputs.s+1
    jsr cputs
    jmp __b15
    // printf_number_buffer::@15
  __b15:
    // [276] if((byte) 0==(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@return -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_justify_left
    beq __breturn
    jmp __b20
    // printf_number_buffer::@20
  __b20:
    // [277] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@return -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z format_zero_padding
    bne __breturn
    jmp __b19
    // printf_number_buffer::@19
  __b19:
    // [278] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@12 -- vbsc1_neq_vbsz1_then_la1 
    lda #0
    cmp.z padding
    bne __b12
    jmp __breturn
    // printf_number_buffer::@12
  __b12:
    // [279] (byte) printf_padding::length#2 ← (byte)(signed byte) printf_number_buffer::padding#10 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [280] call printf_padding 
    // [341] phi from printf_number_buffer::@12 to printf_padding [phi:printf_number_buffer::@12->printf_padding]
  printf_padding_from___b12:
    // [341] phi (byte) printf_padding::pad#7 = (byte) ' ' [phi:printf_number_buffer::@12->printf_padding#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z printf_padding.pad
    // [341] phi (byte) printf_padding::length#6 = (byte) printf_padding::length#2 [phi:printf_number_buffer::@12->printf_padding#1] -- register_copy 
    jsr printf_padding
    jmp __breturn
    // printf_number_buffer::@return
  __breturn:
    // [281] return 
    rts
}
  // ultoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// ultoa(dword zp($26) value, byte* zp($9c) buffer)
ultoa: {
    .label __10 = $9e
    .label __11 = $9b
    .label digit_value = $9f
    .label buffer = $9c
    .label digit = $25
    .label value = $26
    .label buffer_1 = $2b
    .label started = $2a
    // [283] phi from ultoa to ultoa::@1 [phi:ultoa->ultoa::@1]
  __b1_from_ultoa:
    // [283] phi (byte*) ultoa::buffer#11 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:ultoa->ultoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer_1
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer_1+1
    // [283] phi (byte) ultoa::started#2 = (byte) 0 [phi:ultoa->ultoa::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z started
    // [283] phi (dword) ultoa::value#2 = (dword) ultoa::value#1 [phi:ultoa->ultoa::@1#2] -- register_copy 
    // [283] phi (byte) ultoa::digit#2 = (byte) 0 [phi:ultoa->ultoa::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    jmp __b1
    // ultoa::@1
  __b1:
    // [284] if((byte) ultoa::digit#2<(byte) $a-(byte) 1) goto ultoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #$a-1
    bcc __b2
    jmp __b3
    // ultoa::@3
  __b3:
    // [285] (byte~) ultoa::$11 ← (byte)(dword) ultoa::value#2 -- vbuz1=_byte_vduz2 
    lda.z value
    sta.z __11
    // [286] *((byte*) ultoa::buffer#11) ← *((const byte*) DIGITS + (byte~) ultoa::$11) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __11
    lda DIGITS,y
    ldy #0
    sta (buffer_1),y
    // [287] (byte*) ultoa::buffer#3 ← ++ (byte*) ultoa::buffer#11 -- pbuz1=_inc_pbuz2 
    lda.z buffer_1
    clc
    adc #1
    sta.z buffer
    lda.z buffer_1+1
    adc #0
    sta.z buffer+1
    // [288] *((byte*) ultoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (buffer),y
    jmp __breturn
    // ultoa::@return
  __breturn:
    // [289] return 
    rts
    // ultoa::@2
  __b2:
    // [290] (byte~) ultoa::$10 ← (byte) ultoa::digit#2 << (byte) 2 -- vbuz1=vbuz2_rol_2 
    lda.z digit
    asl
    asl
    sta.z __10
    // [291] (dword) ultoa::digit_value#0 ← *((const dword*) RADIX_DECIMAL_VALUES_LONG + (byte~) ultoa::$10) -- vduz1=pduc1_derefidx_vbuz2 
    ldy.z __10
    lda RADIX_DECIMAL_VALUES_LONG,y
    sta.z digit_value
    lda RADIX_DECIMAL_VALUES_LONG+1,y
    sta.z digit_value+1
    lda RADIX_DECIMAL_VALUES_LONG+2,y
    sta.z digit_value+2
    lda RADIX_DECIMAL_VALUES_LONG+3,y
    sta.z digit_value+3
    // [292] if((byte) 0!=(byte) ultoa::started#2) goto ultoa::@5 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z started
    bne __b5
    jmp __b7
    // ultoa::@7
  __b7:
    // [293] if((dword) ultoa::value#2>=(dword) ultoa::digit_value#0) goto ultoa::@5 -- vduz1_ge_vduz2_then_la1 
    lda.z value+3
    cmp.z digit_value+3
    bcc !+
    bne __b5
    lda.z value+2
    cmp.z digit_value+2
    bcc !+
    bne __b5
    lda.z value+1
    cmp.z digit_value+1
    bcc !+
    bne __b5
    lda.z value
    cmp.z digit_value
    bcs __b5
  !:
    // [294] phi from ultoa::@7 to ultoa::@4 [phi:ultoa::@7->ultoa::@4]
  __b4_from___b7:
    // [294] phi (byte*) ultoa::buffer#14 = (byte*) ultoa::buffer#11 [phi:ultoa::@7->ultoa::@4#0] -- register_copy 
    // [294] phi (byte) ultoa::started#4 = (byte) ultoa::started#2 [phi:ultoa::@7->ultoa::@4#1] -- register_copy 
    // [294] phi (dword) ultoa::value#6 = (dword) ultoa::value#2 [phi:ultoa::@7->ultoa::@4#2] -- register_copy 
    jmp __b4
    // ultoa::@4
  __b4:
    // [295] (byte) ultoa::digit#1 ← ++ (byte) ultoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [283] phi from ultoa::@4 to ultoa::@1 [phi:ultoa::@4->ultoa::@1]
  __b1_from___b4:
    // [283] phi (byte*) ultoa::buffer#11 = (byte*) ultoa::buffer#14 [phi:ultoa::@4->ultoa::@1#0] -- register_copy 
    // [283] phi (byte) ultoa::started#2 = (byte) ultoa::started#4 [phi:ultoa::@4->ultoa::@1#1] -- register_copy 
    // [283] phi (dword) ultoa::value#2 = (dword) ultoa::value#6 [phi:ultoa::@4->ultoa::@1#2] -- register_copy 
    // [283] phi (byte) ultoa::digit#2 = (byte) ultoa::digit#1 [phi:ultoa::@4->ultoa::@1#3] -- register_copy 
    jmp __b1
    // ultoa::@5
  __b5:
    // [296] (byte*) ultoa_append::buffer#0 ← (byte*) ultoa::buffer#11 -- pbuz1=pbuz2 
    lda.z buffer_1
    sta.z ultoa_append.buffer
    lda.z buffer_1+1
    sta.z ultoa_append.buffer+1
    // [297] (dword) ultoa_append::value#0 ← (dword) ultoa::value#2 -- vduz1=vduz2 
    lda.z value
    sta.z ultoa_append.value
    lda.z value+1
    sta.z ultoa_append.value+1
    lda.z value+2
    sta.z ultoa_append.value+2
    lda.z value+3
    sta.z ultoa_append.value+3
    // [298] (dword) ultoa_append::sub#0 ← (dword) ultoa::digit_value#0 -- vduz1=vduz2 
    lda.z digit_value
    sta.z ultoa_append.sub
    lda.z digit_value+1
    sta.z ultoa_append.sub+1
    lda.z digit_value+2
    sta.z ultoa_append.sub+2
    lda.z digit_value+3
    sta.z ultoa_append.sub+3
    // [299] call ultoa_append 
    // [358] phi from ultoa::@5 to ultoa_append [phi:ultoa::@5->ultoa_append]
  ultoa_append_from___b5:
    jsr ultoa_append
    // [300] (dword) ultoa_append::return#0 ← (dword) ultoa_append::value#2 -- vduz1=vduz2 
    lda.z ultoa_append.value
    sta.z ultoa_append.return
    lda.z ultoa_append.value+1
    sta.z ultoa_append.return+1
    lda.z ultoa_append.value+2
    sta.z ultoa_append.return+2
    lda.z ultoa_append.value+3
    sta.z ultoa_append.return+3
    jmp __b6
    // ultoa::@6
  __b6:
    // [301] (dword) ultoa::value#0 ← (dword) ultoa_append::return#0 -- vduz1=vduz2 
    lda.z ultoa_append.return
    sta.z value
    lda.z ultoa_append.return+1
    sta.z value+1
    lda.z ultoa_append.return+2
    sta.z value+2
    lda.z ultoa_append.return+3
    sta.z value+3
    // [302] (byte*) ultoa::buffer#4 ← ++ (byte*) ultoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer_1
    bne !+
    inc.z buffer_1+1
  !:
    // [294] phi from ultoa::@6 to ultoa::@4 [phi:ultoa::@6->ultoa::@4]
  __b4_from___b6:
    // [294] phi (byte*) ultoa::buffer#14 = (byte*) ultoa::buffer#4 [phi:ultoa::@6->ultoa::@4#0] -- register_copy 
    // [294] phi (byte) ultoa::started#4 = (byte) 1 [phi:ultoa::@6->ultoa::@4#1] -- vbuz1=vbuc1 
    lda #1
    sta.z started
    // [294] phi (dword) ultoa::value#6 = (dword) ultoa::value#0 [phi:ultoa::@6->ultoa::@4#2] -- register_copy 
    jmp __b4
}
  // uctoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// uctoa(byte zp($2e) value, byte* zp($ad) buffer)
uctoa: {
    .label digit_value = $af
    .label buffer = $ad
    .label digit = $2d
    .label value = $2e
    .label buffer_1 = $30
    .label started = $2f
    // [304] phi from uctoa to uctoa::@1 [phi:uctoa->uctoa::@1]
  __b1_from_uctoa:
    // [304] phi (byte*) uctoa::buffer#11 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:uctoa->uctoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer_1
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer_1+1
    // [304] phi (byte) uctoa::started#2 = (byte) 0 [phi:uctoa->uctoa::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z started
    // [304] phi (byte) uctoa::value#2 = (byte) uctoa::value#1 [phi:uctoa->uctoa::@1#2] -- register_copy 
    // [304] phi (byte) uctoa::digit#2 = (byte) 0 [phi:uctoa->uctoa::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    jmp __b1
    // uctoa::@1
  __b1:
    // [305] if((byte) uctoa::digit#2<(byte) 2-(byte) 1) goto uctoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #2-1
    bcc __b2
    jmp __b3
    // uctoa::@3
  __b3:
    // [306] *((byte*) uctoa::buffer#11) ← *((const byte*) DIGITS + (byte) uctoa::value#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z value
    lda DIGITS,y
    ldy #0
    sta (buffer_1),y
    // [307] (byte*) uctoa::buffer#3 ← ++ (byte*) uctoa::buffer#11 -- pbuz1=_inc_pbuz2 
    lda.z buffer_1
    clc
    adc #1
    sta.z buffer
    lda.z buffer_1+1
    adc #0
    sta.z buffer+1
    // [308] *((byte*) uctoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (buffer),y
    jmp __breturn
    // uctoa::@return
  __breturn:
    // [309] return 
    rts
    // uctoa::@2
  __b2:
    // [310] (byte) uctoa::digit_value#0 ← *((const byte*) RADIX_HEXADECIMAL_VALUES_CHAR + (byte) uctoa::digit#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z digit
    lda RADIX_HEXADECIMAL_VALUES_CHAR,y
    sta.z digit_value
    // [311] if((byte) 0!=(byte) uctoa::started#2) goto uctoa::@5 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z started
    bne __b5
    jmp __b7
    // uctoa::@7
  __b7:
    // [312] if((byte) uctoa::value#2>=(byte) uctoa::digit_value#0) goto uctoa::@5 -- vbuz1_ge_vbuz2_then_la1 
    lda.z value
    cmp.z digit_value
    bcs __b5
    // [313] phi from uctoa::@7 to uctoa::@4 [phi:uctoa::@7->uctoa::@4]
  __b4_from___b7:
    // [313] phi (byte*) uctoa::buffer#14 = (byte*) uctoa::buffer#11 [phi:uctoa::@7->uctoa::@4#0] -- register_copy 
    // [313] phi (byte) uctoa::started#4 = (byte) uctoa::started#2 [phi:uctoa::@7->uctoa::@4#1] -- register_copy 
    // [313] phi (byte) uctoa::value#6 = (byte) uctoa::value#2 [phi:uctoa::@7->uctoa::@4#2] -- register_copy 
    jmp __b4
    // uctoa::@4
  __b4:
    // [314] (byte) uctoa::digit#1 ← ++ (byte) uctoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [304] phi from uctoa::@4 to uctoa::@1 [phi:uctoa::@4->uctoa::@1]
  __b1_from___b4:
    // [304] phi (byte*) uctoa::buffer#11 = (byte*) uctoa::buffer#14 [phi:uctoa::@4->uctoa::@1#0] -- register_copy 
    // [304] phi (byte) uctoa::started#2 = (byte) uctoa::started#4 [phi:uctoa::@4->uctoa::@1#1] -- register_copy 
    // [304] phi (byte) uctoa::value#2 = (byte) uctoa::value#6 [phi:uctoa::@4->uctoa::@1#2] -- register_copy 
    // [304] phi (byte) uctoa::digit#2 = (byte) uctoa::digit#1 [phi:uctoa::@4->uctoa::@1#3] -- register_copy 
    jmp __b1
    // uctoa::@5
  __b5:
    // [315] (byte*) uctoa_append::buffer#0 ← (byte*) uctoa::buffer#11 -- pbuz1=pbuz2 
    lda.z buffer_1
    sta.z uctoa_append.buffer
    lda.z buffer_1+1
    sta.z uctoa_append.buffer+1
    // [316] (byte) uctoa_append::value#0 ← (byte) uctoa::value#2 -- vbuz1=vbuz2 
    lda.z value
    sta.z uctoa_append.value
    // [317] (byte) uctoa_append::sub#0 ← (byte) uctoa::digit_value#0 -- vbuz1=vbuz2 
    lda.z digit_value
    sta.z uctoa_append.sub
    // [318] call uctoa_append 
    // [365] phi from uctoa::@5 to uctoa_append [phi:uctoa::@5->uctoa_append]
  uctoa_append_from___b5:
    jsr uctoa_append
    // [319] (byte) uctoa_append::return#0 ← (byte) uctoa_append::value#2 -- vbuz1=vbuz2 
    lda.z uctoa_append.value
    sta.z uctoa_append.return
    jmp __b6
    // uctoa::@6
  __b6:
    // [320] (byte) uctoa::value#0 ← (byte) uctoa_append::return#0 -- vbuz1=vbuz2 
    lda.z uctoa_append.return
    sta.z value
    // [321] (byte*) uctoa::buffer#4 ← ++ (byte*) uctoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer_1
    bne !+
    inc.z buffer_1+1
  !:
    // [313] phi from uctoa::@6 to uctoa::@4 [phi:uctoa::@6->uctoa::@4]
  __b4_from___b6:
    // [313] phi (byte*) uctoa::buffer#14 = (byte*) uctoa::buffer#4 [phi:uctoa::@6->uctoa::@4#0] -- register_copy 
    // [313] phi (byte) uctoa::started#4 = (byte) 1 [phi:uctoa::@6->uctoa::@4#1] -- vbuz1=vbuc1 
    lda #1
    sta.z started
    // [313] phi (byte) uctoa::value#6 = (byte) uctoa::value#0 [phi:uctoa::@6->uctoa::@4#2] -- register_copy 
    jmp __b4
}
  // cputln
// Print a newline
cputln: {
    // [322] (byte*) conio_line_text ← (byte*) conio_line_text + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z conio_line_text
    sta.z conio_line_text
    bcc !+
    inc.z conio_line_text+1
  !:
    // [323] (byte*) conio_line_color ← (byte*) conio_line_color + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z conio_line_color
    sta.z conio_line_color
    bcc !+
    inc.z conio_line_color+1
  !:
    // [324] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [325] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // [326] call cscroll 
    jsr cscroll
    jmp __breturn
    // cputln::@return
  __breturn:
    // [327] return 
    rts
}
  // utoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// utoa_append(byte* zp($91) buffer, word zp($32) value, word zp($93) sub)
utoa_append: {
    .label buffer = $91
    .label value = $32
    .label sub = $93
    .label return = $95
    .label digit = $34
    // [329] phi from utoa_append to utoa_append::@1 [phi:utoa_append->utoa_append::@1]
  __b1_from_utoa_append:
    // [329] phi (byte) utoa_append::digit#2 = (byte) 0 [phi:utoa_append->utoa_append::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    // [329] phi (word) utoa_append::value#2 = (word) utoa_append::value#0 [phi:utoa_append->utoa_append::@1#1] -- register_copy 
    jmp __b1
    // utoa_append::@1
  __b1:
    // [330] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2 -- vwuz1_ge_vwuz2_then_la1 
    lda.z sub+1
    cmp.z value+1
    bne !+
    lda.z sub
    cmp.z value
    beq __b2
  !:
    bcc __b2
    jmp __b3
    // utoa_append::@3
  __b3:
    // [331] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z digit
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    jmp __breturn
    // utoa_append::@return
  __breturn:
    // [332] return 
    rts
    // utoa_append::@2
  __b2:
    // [333] (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [334] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    lda.z value+1
    sbc.z sub+1
    sta.z value+1
    // [329] phi from utoa_append::@2 to utoa_append::@1 [phi:utoa_append::@2->utoa_append::@1]
  __b1_from___b2:
    // [329] phi (byte) utoa_append::digit#2 = (byte) utoa_append::digit#1 [phi:utoa_append::@2->utoa_append::@1#0] -- register_copy 
    // [329] phi (word) utoa_append::value#2 = (word) utoa_append::value#1 [phi:utoa_append::@2->utoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // strlen
// Computes the length of the string str up to but not including the terminating null character.
// strlen(byte* zp($35) str)
strlen: {
    .label len = $37
    .label str = $35
    .label return = $97
    // [336] phi from strlen to strlen::@1 [phi:strlen->strlen::@1]
  __b1_from_strlen:
    // [336] phi (word) strlen::len#2 = (word) 0 [phi:strlen->strlen::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z len
    lda #>0
    sta.z len+1
    // [336] phi (byte*) strlen::str#3 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:strlen->strlen::@1#1] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z str
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z str+1
    jmp __b1
    // strlen::@1
  __b1:
    // [337] if((byte) 0!=*((byte*) strlen::str#3)) goto strlen::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // strlen::@return
  __breturn:
    // [338] return 
    rts
    // strlen::@2
  __b2:
    // [339] (word) strlen::len#1 ← ++ (word) strlen::len#2 -- vwuz1=_inc_vwuz1 
    inc.z len
    bne !+
    inc.z len+1
  !:
    // [340] (byte*) strlen::str#0 ← ++ (byte*) strlen::str#3 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [336] phi from strlen::@2 to strlen::@1 [phi:strlen::@2->strlen::@1]
  __b1_from___b2:
    // [336] phi (word) strlen::len#2 = (word) strlen::len#1 [phi:strlen::@2->strlen::@1#0] -- register_copy 
    // [336] phi (byte*) strlen::str#3 = (byte*) strlen::str#0 [phi:strlen::@2->strlen::@1#1] -- register_copy 
    jmp __b1
}
  // printf_padding
// Print a padding char a number of times
// printf_padding(byte zp($3a) pad, byte zp($39) length)
printf_padding: {
    .label i = $3b
    .label length = $39
    .label pad = $3a
    // [342] phi from printf_padding to printf_padding::@1 [phi:printf_padding->printf_padding::@1]
  __b1_from_printf_padding:
    // [342] phi (byte) printf_padding::i#2 = (byte) 0 [phi:printf_padding->printf_padding::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // printf_padding::@1
  __b1:
    // [343] if((byte) printf_padding::i#2<(byte) printf_padding::length#6) goto printf_padding::@2 -- vbuz1_lt_vbuz2_then_la1 
    lda.z i
    cmp.z length
    bcc __b2
    jmp __breturn
    // printf_padding::@return
  __breturn:
    // [344] return 
    rts
    // printf_padding::@2
  __b2:
    // [345] (byte) cputc::c#1 ← (byte) printf_padding::pad#7 -- vbuz1=vbuz2 
    lda.z pad
    sta.z cputc.c
    // [346] call cputc 
    // [213] phi from printf_padding::@2 to cputc [phi:printf_padding::@2->cputc]
  cputc_from___b2:
    // [213] phi (byte) cputc::c#3 = (byte) cputc::c#1 [phi:printf_padding::@2->cputc#0] -- register_copy 
    jsr cputc
    jmp __b3
    // printf_padding::@3
  __b3:
    // [347] (byte) printf_padding::i#1 ← ++ (byte) printf_padding::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [342] phi from printf_padding::@3 to printf_padding::@1 [phi:printf_padding::@3->printf_padding::@1]
  __b1_from___b3:
    // [342] phi (byte) printf_padding::i#2 = (byte) printf_padding::i#1 [phi:printf_padding::@3->printf_padding::@1#0] -- register_copy 
    jmp __b1
}
  // strupr
// Converts a string to uppercase.
strupr: {
    .label str = printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    .label __0 = $b5
    .label src = $3c
    // [349] phi from strupr to strupr::@1 [phi:strupr->strupr::@1]
  __b1_from_strupr:
    // [349] phi (byte*) strupr::src#2 = (const byte*) strupr::str#0 [phi:strupr->strupr::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z src
    lda #>str
    sta.z src+1
    jmp __b1
    // strupr::@1
  __b1:
    // [350] if((byte) 0!=*((byte*) strupr::src#2)) goto strupr::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (src),y
    cmp #0
    bne __b2
    jmp __breturn
    // strupr::@return
  __breturn:
    // [351] return 
    rts
    // strupr::@2
  __b2:
    // [352] (byte) toupper::ch#0 ← *((byte*) strupr::src#2) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    sta.z toupper.ch
    // [353] call toupper 
    jsr toupper
    // [354] (byte) toupper::return#3 ← (byte) toupper::return#2 -- vbuz1=vbuz2 
    lda.z toupper.return
    sta.z toupper.return_1
    jmp __b3
    // strupr::@3
  __b3:
    // [355] (byte~) strupr::$0 ← (byte) toupper::return#3 -- vbuz1=vbuz2 
    lda.z toupper.return_1
    sta.z __0
    // [356] *((byte*) strupr::src#2) ← (byte~) strupr::$0 -- _deref_pbuz1=vbuz2 
    lda.z __0
    ldy #0
    sta (src),y
    // [357] (byte*) strupr::src#1 ← ++ (byte*) strupr::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    // [349] phi from strupr::@3 to strupr::@1 [phi:strupr::@3->strupr::@1]
  __b1_from___b3:
    // [349] phi (byte*) strupr::src#2 = (byte*) strupr::src#1 [phi:strupr::@3->strupr::@1#0] -- register_copy 
    jmp __b1
}
  // ultoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// ultoa_append(byte* zp($a3) buffer, dword zp($3e) value, dword zp($a5) sub)
ultoa_append: {
    .label buffer = $a3
    .label value = $3e
    .label sub = $a5
    .label return = $a9
    .label digit = $42
    // [359] phi from ultoa_append to ultoa_append::@1 [phi:ultoa_append->ultoa_append::@1]
  __b1_from_ultoa_append:
    // [359] phi (byte) ultoa_append::digit#2 = (byte) 0 [phi:ultoa_append->ultoa_append::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    // [359] phi (dword) ultoa_append::value#2 = (dword) ultoa_append::value#0 [phi:ultoa_append->ultoa_append::@1#1] -- register_copy 
    jmp __b1
    // ultoa_append::@1
  __b1:
    // [360] if((dword) ultoa_append::value#2>=(dword) ultoa_append::sub#0) goto ultoa_append::@2 -- vduz1_ge_vduz2_then_la1 
    lda.z value+3
    cmp.z sub+3
    bcc !+
    bne __b2
    lda.z value+2
    cmp.z sub+2
    bcc !+
    bne __b2
    lda.z value+1
    cmp.z sub+1
    bcc !+
    bne __b2
    lda.z value
    cmp.z sub
    bcs __b2
  !:
    jmp __b3
    // ultoa_append::@3
  __b3:
    // [361] *((byte*) ultoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) ultoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z digit
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    jmp __breturn
    // ultoa_append::@return
  __breturn:
    // [362] return 
    rts
    // ultoa_append::@2
  __b2:
    // [363] (byte) ultoa_append::digit#1 ← ++ (byte) ultoa_append::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [364] (dword) ultoa_append::value#1 ← (dword) ultoa_append::value#2 - (dword) ultoa_append::sub#0 -- vduz1=vduz1_minus_vduz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    lda.z value+1
    sbc.z sub+1
    sta.z value+1
    lda.z value+2
    sbc.z sub+2
    sta.z value+2
    lda.z value+3
    sbc.z sub+3
    sta.z value+3
    // [359] phi from ultoa_append::@2 to ultoa_append::@1 [phi:ultoa_append::@2->ultoa_append::@1]
  __b1_from___b2:
    // [359] phi (byte) ultoa_append::digit#2 = (byte) ultoa_append::digit#1 [phi:ultoa_append::@2->ultoa_append::@1#0] -- register_copy 
    // [359] phi (dword) ultoa_append::value#2 = (dword) ultoa_append::value#1 [phi:ultoa_append::@2->ultoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // uctoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// uctoa_append(byte* zp($b0) buffer, byte zp($43) value, byte zp($b2) sub)
uctoa_append: {
    .label buffer = $b0
    .label value = $43
    .label sub = $b2
    .label return = $b3
    .label digit = $44
    // [366] phi from uctoa_append to uctoa_append::@1 [phi:uctoa_append->uctoa_append::@1]
  __b1_from_uctoa_append:
    // [366] phi (byte) uctoa_append::digit#2 = (byte) 0 [phi:uctoa_append->uctoa_append::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    // [366] phi (byte) uctoa_append::value#2 = (byte) uctoa_append::value#0 [phi:uctoa_append->uctoa_append::@1#1] -- register_copy 
    jmp __b1
    // uctoa_append::@1
  __b1:
    // [367] if((byte) uctoa_append::value#2>=(byte) uctoa_append::sub#0) goto uctoa_append::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z value
    cmp.z sub
    bcs __b2
    jmp __b3
    // uctoa_append::@3
  __b3:
    // [368] *((byte*) uctoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) uctoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z digit
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    jmp __breturn
    // uctoa_append::@return
  __breturn:
    // [369] return 
    rts
    // uctoa_append::@2
  __b2:
    // [370] (byte) uctoa_append::digit#1 ← ++ (byte) uctoa_append::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [371] (byte) uctoa_append::value#1 ← (byte) uctoa_append::value#2 - (byte) uctoa_append::sub#0 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    // [366] phi from uctoa_append::@2 to uctoa_append::@1 [phi:uctoa_append::@2->uctoa_append::@1]
  __b1_from___b2:
    // [366] phi (byte) uctoa_append::digit#2 = (byte) uctoa_append::digit#1 [phi:uctoa_append::@2->uctoa_append::@1#0] -- register_copy 
    // [366] phi (byte) uctoa_append::value#2 = (byte) uctoa_append::value#1 [phi:uctoa_append::@2->uctoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // cscroll
// Scroll the entire screen if the cursor is beyond the last line
cscroll: {
    // [372] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z conio_cursor_y
    bne __breturn
    // [373] phi from cscroll to cscroll::@1 [phi:cscroll->cscroll::@1]
  __b1_from_cscroll:
    jmp __b1
    // cscroll::@1
  __b1:
    // [374] call memcpy 
    // [390] phi from cscroll::@1 to memcpy [phi:cscroll::@1->memcpy]
  memcpy_from___b1:
    // [390] phi (void*) memcpy::destination#2 = (void*)(const nomodify byte*) DEFAULT_SCREEN [phi:cscroll::@1->memcpy#0] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN
    sta.z memcpy.destination
    lda #>DEFAULT_SCREEN
    sta.z memcpy.destination+1
    // [390] phi (void*) memcpy::source#2 = (void*)(const nomodify byte*) DEFAULT_SCREEN+(byte) $28 [phi:cscroll::@1->memcpy#1] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN+$28
    sta.z memcpy.source
    lda #>DEFAULT_SCREEN+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [375] phi from cscroll::@1 to cscroll::@2 [phi:cscroll::@1->cscroll::@2]
  __b2_from___b1:
    jmp __b2
    // cscroll::@2
  __b2:
    // [376] call memcpy 
    // [390] phi from cscroll::@2 to memcpy [phi:cscroll::@2->memcpy]
  memcpy_from___b2:
    // [390] phi (void*) memcpy::destination#2 = (void*)(const nomodify byte*) COLORRAM [phi:cscroll::@2->memcpy#0] -- pvoz1=pvoc1 
    lda #<COLORRAM
    sta.z memcpy.destination
    lda #>COLORRAM
    sta.z memcpy.destination+1
    // [390] phi (void*) memcpy::source#2 = (void*)(const nomodify byte*) COLORRAM+(byte) $28 [phi:cscroll::@2->memcpy#1] -- pvoz1=pvoc1 
    lda #<COLORRAM+$28
    sta.z memcpy.source
    lda #>COLORRAM+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [377] phi from cscroll::@2 to cscroll::@3 [phi:cscroll::@2->cscroll::@3]
  __b3_from___b2:
    jmp __b3
    // cscroll::@3
  __b3:
    // [378] call memset 
    // [400] phi from cscroll::@3 to memset [phi:cscroll::@3->memset]
  memset_from___b3:
    // [400] phi (byte) memset::c#4 = (byte) ' ' [phi:cscroll::@3->memset#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z memset.c
    // [400] phi (void*) memset::str#3 = (void*)(const nomodify byte*) DEFAULT_SCREEN+(word)(number) $19*(number) $28-(byte) $28 [phi:cscroll::@3->memset#1] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN+$19*$28-$28
    sta.z memset.str
    lda #>DEFAULT_SCREEN+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    // [379] phi from cscroll::@3 to cscroll::@4 [phi:cscroll::@3->cscroll::@4]
  __b4_from___b3:
    jmp __b4
    // cscroll::@4
  __b4:
    // [380] call memset 
    // [400] phi from cscroll::@4 to memset [phi:cscroll::@4->memset]
  memset_from___b4:
    // [400] phi (byte) memset::c#4 = (const nomodify byte) LIGHT_BLUE [phi:cscroll::@4->memset#0] -- vbuz1=vbuc1 
    lda #LIGHT_BLUE
    sta.z memset.c
    // [400] phi (void*) memset::str#3 = (void*)(const nomodify byte*) COLORRAM+(word)(number) $19*(number) $28-(byte) $28 [phi:cscroll::@4->memset#1] -- pvoz1=pvoc1 
    lda #<COLORRAM+$19*$28-$28
    sta.z memset.str
    lda #>COLORRAM+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    jmp __b5
    // cscroll::@5
  __b5:
    // [381] (byte*) conio_line_text ← (byte*) conio_line_text - (byte) $28 -- pbuz1=pbuz1_minus_vbuc1 
    sec
    lda.z conio_line_text
    sbc #$28
    sta.z conio_line_text
    lda.z conio_line_text+1
    sbc #0
    sta.z conio_line_text+1
    // [382] (byte*) conio_line_color ← (byte*) conio_line_color - (byte) $28 -- pbuz1=pbuz1_minus_vbuc1 
    sec
    lda.z conio_line_color
    sbc #$28
    sta.z conio_line_color
    lda.z conio_line_color+1
    sbc #0
    sta.z conio_line_color+1
    // [383] (byte) conio_cursor_y ← -- (byte) conio_cursor_y -- vbuz1=_dec_vbuz1 
    dec.z conio_cursor_y
    jmp __breturn
    // cscroll::@return
  __breturn:
    // [384] return 
    rts
}
  // toupper
// Convert lowercase alphabet to uppercase
// Returns uppercase equivalent to c, if such value exists, else c remains unchanged
// toupper(byte zp($45) ch)
toupper: {
    .label return = $45
    .label ch = $45
    .label return_1 = $b4
    // [385] if((byte) toupper::ch#0<(byte) 'a') goto toupper::@return -- vbuz1_lt_vbuc1_then_la1 
    lda.z ch
    cmp #'a'
    bcc __breturn_from_toupper
    jmp __b2
    // toupper::@2
  __b2:
    // [386] if((byte) toupper::ch#0<=(byte) 'z') goto toupper::@1 -- vbuz1_le_vbuc1_then_la1 
    lda #'z'
    cmp.z ch
    bcs __b1
    // [388] phi from toupper toupper::@1 toupper::@2 to toupper::@return [phi:toupper/toupper::@1/toupper::@2->toupper::@return]
  __breturn_from_toupper:
  __breturn_from___b1:
  __breturn_from___b2:
    // [388] phi (byte) toupper::return#2 = (byte) toupper::ch#0 [phi:toupper/toupper::@1/toupper::@2->toupper::@return#0] -- register_copy 
    jmp __breturn
    // toupper::@1
  __b1:
    // [387] (byte) toupper::return#0 ← (byte) toupper::ch#0 + (byte) 'A'-(byte) 'a' -- vbuz1=vbuz1_plus_vbuc1 
    lax.z return
    axs #-['A'-'a']
    stx.z return
    jmp __breturn_from___b1
    // toupper::@return
  __breturn:
    // [389] return 
    rts
}
  // memcpy
// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
// memcpy(void* zp($48) destination, void* zp($46) source)
memcpy: {
    .label src_end = $b6
    .label dst = $4c
    .label src = $4a
    .label source = $46
    .label destination = $48
    // [391] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z source
    clc
    adc #<$19*$28-$28
    sta.z src_end
    lda.z source+1
    adc #>$19*$28-$28
    sta.z src_end+1
    // [392] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2 -- pbuz1=pbuz2 
    lda.z source
    sta.z src
    lda.z source+1
    sta.z src+1
    // [393] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2 -- pbuz1=pbuz2 
    lda.z destination
    sta.z dst
    lda.z destination+1
    sta.z dst+1
    // [394] phi from memcpy memcpy::@2 to memcpy::@1 [phi:memcpy/memcpy::@2->memcpy::@1]
  __b1_from_memcpy:
  __b1_from___b2:
    // [394] phi (byte*) memcpy::dst#2 = (byte*) memcpy::dst#4 [phi:memcpy/memcpy::@2->memcpy::@1#0] -- register_copy 
    // [394] phi (byte*) memcpy::src#2 = (byte*) memcpy::src#4 [phi:memcpy/memcpy::@2->memcpy::@1#1] -- register_copy 
    jmp __b1
    // memcpy::@1
  __b1:
    // [395] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2 -- pbuz1_neq_pbuz2_then_la1 
    lda.z src+1
    cmp.z src_end+1
    bne __b2
    lda.z src
    cmp.z src_end
    bne __b2
    jmp __breturn
    // memcpy::@return
  __breturn:
    // [396] return 
    rts
    // memcpy::@2
  __b2:
    // [397] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    ldy #0
    sta (dst),y
    // [398] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [399] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    jmp __b1_from___b2
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp($4e) str, byte zp($50) c)
memset: {
    .label end = $b8
    .label dst = $51
    .label str = $4e
    .label c = $50
    jmp __b1
    // memset::@1
  __b1:
    // [401] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (byte) $28 -- pbuz1=pbuz2_plus_vbuc1 
    lda #$28
    clc
    adc.z str
    sta.z end
    lda #0
    adc.z str+1
    sta.z end+1
    // [402] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3 -- pbuz1=pbuz2 
    lda.z str
    sta.z dst
    lda.z str+1
    sta.z dst+1
    // [403] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [403] phi (byte*) memset::dst#2 = (byte*) memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    jmp __b2
    // memset::@2
  __b2:
    // [404] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    jmp __breturn
    // memset::@return
  __breturn:
    // [405] return 
    rts
    // memset::@3
  __b3:
    // [406] *((byte*) memset::dst#2) ← (byte) memset::c#4 -- _deref_pbuz1=vbuz2 
    lda.z c
    ldy #0
    sta (dst),y
    // [407] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2_from___b3
}
  // File Data
  // The digits used for numbers
  DIGITS: .text "0123456789abcdef"
  // Values of hexadecimal digits
  RADIX_HEXADECIMAL_VALUES_CHAR: .byte $10
  // Values of decimal digits
  RADIX_DECIMAL_VALUES: .word $2710, $3e8, $64, $a
  // Values of decimal digits
  RADIX_DECIMAL_VALUES_LONG: .dword $3b9aca00, $5f5e100, $989680, $f4240, $186a0, $2710, $3e8, $64, $a
  // The buffer used by tod_str()
  tod_buffer: .text "00:00:00:00"
  .byte 0
  // The board. board[i] holds the column position of the queen on row i. 
  board: .fill $14, 0
  // Buffer used for stringified number being printed
  printf_buffer: .fill SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER, 0
  // Time of Day 00:00:00:00
  TOD_ZERO: .byte 0, 0, 0, 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] (byte) conio_cursor_x ← (byte) 0 [ TOD_ZERO printf_buffer ] (  [ TOD_ZERO printf_buffer ] { }  ) always clobbers reg byte a 
Statement [2] (byte) conio_cursor_y ← (byte) 0 [ TOD_ZERO printf_buffer ] (  [ TOD_ZERO printf_buffer ] { }  ) always clobbers reg byte a 
Statement [3] (byte*) conio_line_text ← (const nomodify byte*) DEFAULT_SCREEN [ TOD_ZERO printf_buffer ] (  [ TOD_ZERO printf_buffer ] { }  ) always clobbers reg byte a 
Statement [4] (byte*) conio_line_color ← (const nomodify byte*) COLORRAM [ TOD_ZERO printf_buffer ] (  [ TOD_ZERO printf_buffer ] { }  ) always clobbers reg byte a 
Statement [5] (dword) count ← (dword) 0 [ count TOD_ZERO printf_buffer ] (  [ count TOD_ZERO printf_buffer ] { }  ) always clobbers reg byte a 
Statement [9] (byte) queen::row#0 ← stackidx(byte,(const byte) queen::OFFSET_STACK_ROW) [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count queen::row#0 printf_buffer ] ( main:7::queen:45 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count queen::row#0 printf_buffer ] { }  ) always clobbers reg byte a reg byte x 
Statement [11] (byte) queen::column ← (byte) 1 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count queen::r queen::column printf_buffer ] ( main:7::queen:45 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count queen::r queen::column printf_buffer ] { }  ) always clobbers reg byte a 
Statement [12] if((byte) queen::column<(byte) 8+(byte) 1) goto queen::@2 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count queen::r queen::column printf_buffer ] ( main:7::queen:45 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count queen::r queen::column printf_buffer ] { }  ) always clobbers reg byte a 
Statement [20] *((const byte*) board + (byte) queen::r) ← (byte) queen::column [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count queen::r queen::column printf_buffer ] ( main:7::queen:45 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count queen::r queen::column printf_buffer ] { }  ) always clobbers reg byte a reg byte y 
Statement [21] if((byte) queen::r==(byte) 8) goto queen::@4 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count queen::r queen::column printf_buffer ] ( main:7::queen:45 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count queen::r queen::column printf_buffer ] { }  ) always clobbers reg byte a 
Statement asm { ldacolumn pha ldar pha  } always clobbers reg byte a 
Statement sideeffect stackpullbytes((number) 1) always clobbers reg byte a 
Statement asm { pla star pla stacolumn  } always clobbers reg byte a 
Statement [44] stackpush(byte) ← (byte) 1 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count printf_buffer ] ( main:7 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count printf_buffer ] { { tod_read::return_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_read::return_SEC#0 = tod_read::return_SEC#2 } { tod_read::return_MIN#0 = tod_read::return_MIN#2 } { tod_read::return_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement sideeffect stackpullbytes((number) 1) always clobbers reg byte a 
Statement [59] (dword) printf_ulong::uvalue#0 ← (dword) count [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_ulong::uvalue#0 printf_buffer ] ( main:7 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_ulong::uvalue#0 printf_buffer ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } }  ) always clobbers reg byte a 
Statement [74] if(*((const byte*) board + (byte) legal::i#2)==(byte) legal::column#0) goto legal::@return [ legal::row#0 legal::column#0 legal::i#2 ] ( main:7::queen:45::legal:16 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count queen::r queen::column printf_buffer legal::row#0 legal::column#0 legal::i#2 ] { { legal::row#0 = queen::r } { legal::column#0 = queen::column } { legal::return#0 = legal::return#4 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:96 [ legal::row#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:97 [ legal::column#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:2 [ legal::i#2 legal::i#1 ]
Statement [91] (dword) printf_ulong::uvalue#1 ← (dword) count [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count printf_ulong::uvalue#1 printf_buffer ] ( main:7::queen:45::print:30 [ queen::r queen::column conio_cursor_x conio_cursor_y conio_line_text conio_line_color count printf_ulong::uvalue#1 printf_buffer ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } }  ) always clobbers reg byte a 
Statement [107] if(*((const byte*) board + (byte) print::i1#2)==(byte) print::j#2) goto print::@8 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count print::i1#2 print::j#2 printf_buffer ] ( main:7::queen:45::print:30 [ queen::r queen::column conio_cursor_x conio_cursor_y conio_line_text conio_line_color count print::i1#2 print::j#2 printf_buffer ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:5 [ print::i1#2 print::i1#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:6 [ print::j#2 print::j#1 ]
Statement [119] (byte) conio_cursor_x ← (byte) 0 [ conio_cursor_x ] ( main:7::clrscr:32 [ count TOD_ZERO printf_buffer conio_cursor_x ] { }  ) always clobbers reg byte a 
Statement [120] (byte) conio_cursor_y ← (byte) 0 [ conio_cursor_x conio_cursor_y ] ( main:7::clrscr:32 [ count TOD_ZERO printf_buffer conio_cursor_x conio_cursor_y ] { }  ) always clobbers reg byte a 
Statement [121] (byte*) conio_line_text ← (const nomodify byte*) DEFAULT_SCREEN [ conio_cursor_x conio_cursor_y conio_line_text ] ( main:7::clrscr:32 [ count TOD_ZERO printf_buffer conio_cursor_x conio_cursor_y conio_line_text ] { }  ) always clobbers reg byte a 
Statement [122] (byte*) conio_line_color ← (const nomodify byte*) COLORRAM [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:7::clrscr:32 [ count TOD_ZERO printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { }  ) always clobbers reg byte a 
Statement [126] (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#5 + (byte) $28 [ clrscr::l#2 clrscr::line_cols#5 clrscr::line_text#1 ] ( main:7::clrscr:32 [ count TOD_ZERO printf_buffer clrscr::l#2 clrscr::line_cols#5 clrscr::line_text#1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:7 [ clrscr::l#2 clrscr::l#1 ]
Statement [127] (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#5 + (byte) $28 [ clrscr::l#2 clrscr::line_text#1 clrscr::line_cols#1 ] ( main:7::clrscr:32 [ count TOD_ZERO printf_buffer clrscr::l#2 clrscr::line_text#1 clrscr::line_cols#1 ] { }  ) always clobbers reg byte a 
Statement [129] *((byte*) clrscr::line_text#5 + (byte) clrscr::c#2) ← (byte) ' ' [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] ( main:7::clrscr:32 [ count TOD_ZERO printf_buffer clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:12 [ clrscr::c#2 clrscr::c#1 ]
Statement [130] *((byte*) clrscr::line_cols#5 + (byte) clrscr::c#2) ← (const nomodify byte) LIGHT_BLUE [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] ( main:7::clrscr:32 [ count TOD_ZERO printf_buffer clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] { }  ) always clobbers reg byte a 
Statement [134] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#13) [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#13 cputs::c#1 printf_buffer ] ( main:7::cputs:34 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#13 cputs::c#1 printf_buffer ] { }  main:7::cputs:36 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#13 cputs::c#1 printf_buffer ] { }  main:7::cputs:58 [ count conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#13 cputs::c#1 printf_buffer ] { }  main:7::cputs:62 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#13 cputs::c#1 printf_buffer ] { }  main:7::cputs:66 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#13 cputs::c#1 printf_buffer ] { }  main:7::queen:45::print:30::cputs:90 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#13 cputs::c#1 printf_buffer ] { }  main:7::queen:45::print:30::cputs:94 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#13 cputs::c#1 printf_buffer ] { }  main:7::queen:45::print:30::cputs:101 [ queen::r queen::column count print::i1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#13 cputs::c#1 printf_buffer ] { }  main:7::queen:45::print:30::cputs:109 [ queen::r queen::column count print::i1#2 print::j#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#13 cputs::c#1 printf_buffer ] { }  main:7::queen:45::print:30::cputs:112 [ queen::r queen::column count print::i1#2 print::j#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#13 cputs::c#1 printf_buffer ] { }  main:7::printf_string:64::cputs:192 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#13 cputs::c#1 printf_buffer ] { }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#13 cputs::c#1 printf_buffer ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#13 cputs::c#1 printf_buffer ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#13 cputs::c#1 printf_buffer ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#13 cputs::c#1 printf_buffer ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#13 cputs::c#1 printf_buffer ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:5 [ print::i1#2 print::i1#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:6 [ print::j#2 print::j#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:31 [ printf_number_buffer::format_justify_left#10 ]
Removing always clobbered register reg byte y as potential for zp[1]:31 [ printf_number_buffer::format_justify_left#10 ]
Removing always clobbered register reg byte a as potential for zp[1]:32 [ printf_number_buffer::format_zero_padding#10 ]
Removing always clobbered register reg byte y as potential for zp[1]:32 [ printf_number_buffer::format_zero_padding#10 ]
Removing always clobbered register reg byte a as potential for zp[1]:36 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:36 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:4 [ print::i#2 print::i#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:4 [ print::i#2 print::i#1 ]
Statement [141] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ] ( main:7::printf_uint:38 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ] { }  ) always clobbers reg byte a 
Statement [146] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) | (byte) $80 [ tod_init::tod_TENTHS#0 tod_init::tod_SEC#0 tod_init::tod_MIN#0 tod_init::tod_HOURS#0 ] ( main:7::tod_init:43 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count printf_buffer tod_init::tod_TENTHS#0 tod_init::tod_SEC#0 tod_init::tod_MIN#0 tod_init::tod_HOURS#0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:101 [ tod_init::tod_TENTHS#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:102 [ tod_init::tod_SEC#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:103 [ tod_init::tod_MIN#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:104 [ tod_init::tod_HOURS#0 ]
Statement [147] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) & (byte) $7f [ tod_init::tod_TENTHS#0 tod_init::tod_SEC#0 tod_init::tod_MIN#0 tod_init::tod_HOURS#0 ] ( main:7::tod_init:43 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count printf_buffer tod_init::tod_TENTHS#0 tod_init::tod_SEC#0 tod_init::tod_MIN#0 tod_init::tod_HOURS#0 ] { }  ) always clobbers reg byte a 
Statement [158] (byte~) tod_str::$0 ← (byte) tod_str::tod_HOURS#0 >> (byte) 4 [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::tod_HOURS#0 tod_str::$0 ] ( main:7::tod_str:56 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count printf_buffer tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::tod_HOURS#0 tod_str::$0 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:109 [ tod_str::tod_TENTHS#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:110 [ tod_str::tod_SEC#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:111 [ tod_str::tod_MIN#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:112 [ tod_str::tod_HOURS#0 ]
Statement [161] (byte~) tod_str::$2 ← (byte) tod_str::tod_HOURS#0 & (byte) $f [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::$2 ] ( main:7::tod_str:56 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count printf_buffer tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::$2 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [164] (byte~) tod_str::$4 ← (byte) tod_str::tod_MIN#0 >> (byte) 4 [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::$4 ] ( main:7::tod_str:56 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count printf_buffer tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::$4 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [167] (byte~) tod_str::$6 ← (byte) tod_str::tod_MIN#0 & (byte) $f [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::$6 ] ( main:7::tod_str:56 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count printf_buffer tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::$6 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [170] (byte~) tod_str::$8 ← (byte) tod_str::tod_SEC#0 >> (byte) 4 [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::$8 ] ( main:7::tod_str:56 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count printf_buffer tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::$8 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [173] (byte~) tod_str::$10 ← (byte) tod_str::tod_SEC#0 & (byte) $f [ tod_str::tod_TENTHS#0 tod_str::$10 ] ( main:7::tod_str:56 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count printf_buffer tod_str::tod_TENTHS#0 tod_str::$10 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [176] (byte~) tod_str::$12 ← (byte) tod_str::tod_TENTHS#0 >> (byte) 4 [ tod_str::tod_TENTHS#0 tod_str::$12 ] ( main:7::tod_str:56 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count printf_buffer tod_str::tod_TENTHS#0 tod_str::$12 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [179] (byte~) tod_str::$14 ← (byte) tod_str::tod_TENTHS#0 & (byte) $f [ tod_str::$14 ] ( main:7::tod_str:56 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count printf_buffer tod_str::$14 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [184] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_ulong::uvalue#2 ] ( main:7::printf_ulong:60 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_ulong::uvalue#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count ultoa::value#1 } }  main:7::queen:45::print:30::printf_ulong:92 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_ulong::uvalue#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [185] (dword) ultoa::value#1 ← (dword) printf_ulong::uvalue#2 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::value#1 ] ( main:7::printf_ulong:60 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::value#1 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count ultoa::value#1 } }  main:7::queen:45::print:30::printf_ulong:92 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::value#1 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [196] (byte) diff::return#3 ← (byte) diff::a#2 - (byte) diff::b#2 [ diff::return#3 ] ( main:7::queen:45::legal:16::diff:77 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count queen::r queen::column printf_buffer legal::row#0 legal::column#0 legal::i#2 diff::return#3 ] { { legal::row#0 = queen::r } { legal::return#0 = legal::return#4 } { diff::a#0 = diff::a#2 } { diff::b#0 = diff::b#2 legal::column#0 queen::column } { diff::return#0 = diff::return#4 } }  main:7::queen:45::legal:16::diff:82 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count queen::r queen::column printf_buffer legal::row#0 legal::column#0 legal::i#2 legal::$3 diff::return#3 ] { { legal::column#0 = queen::column } { legal::return#0 = legal::return#4 } { diff::a#1 = diff::a#2 legal::i#2 } { diff::b#1 = diff::b#2 legal::row#0 queen::r } { diff::return#1 = diff::return#4 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:115 [ legal::$3 ]
Statement [199] (byte) diff::return#2 ← (byte) diff::b#2 - (byte) diff::a#2 [ diff::return#2 ] ( main:7::queen:45::legal:16::diff:77 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count queen::r queen::column printf_buffer legal::row#0 legal::column#0 legal::i#2 diff::return#2 ] { { legal::row#0 = queen::r } { legal::return#0 = legal::return#4 } { diff::a#0 = diff::a#2 } { diff::b#0 = diff::b#2 legal::column#0 queen::column } { diff::return#0 = diff::return#4 } }  main:7::queen:45::legal:16::diff:82 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count queen::r queen::column printf_buffer legal::row#0 legal::column#0 legal::i#2 legal::$3 diff::return#2 ] { { legal::column#0 = queen::column } { legal::return#0 = legal::return#4 } { diff::a#1 = diff::a#2 legal::i#2 } { diff::b#1 = diff::b#2 legal::row#0 queen::r } { diff::return#1 = diff::return#4 } }  ) always clobbers reg byte a 
Statement [201] (byte) conio_cursor_x ← (const byte) gotoxy::x#2 [ conio_cursor_x ] ( main:7::queen:45::print:30::gotoxy:88 [ queen::r queen::column count printf_buffer conio_cursor_x ] { }  ) always clobbers reg byte a 
Statement [202] (byte) conio_cursor_y ← (const byte) gotoxy::y#2 [ conio_cursor_x conio_cursor_y ] ( main:7::queen:45::print:30::gotoxy:88 [ queen::r queen::column count printf_buffer conio_cursor_x conio_cursor_y ] { }  ) always clobbers reg byte a 
Statement [203] (byte*) conio_line_text ← (const nomodify byte*) DEFAULT_SCREEN+(const word) gotoxy::line_offset#0 [ conio_cursor_x conio_cursor_y conio_line_text ] ( main:7::queen:45::print:30::gotoxy:88 [ queen::r queen::column count printf_buffer conio_cursor_x conio_cursor_y conio_line_text ] { }  ) always clobbers reg byte a 
Statement [204] (byte*) conio_line_color ← (const nomodify byte*) COLORRAM+(const word) gotoxy::line_offset#0 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:7::queen:45::print:30::gotoxy:88 [ queen::r queen::column count printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { }  ) always clobbers reg byte a 
Statement [207] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_uchar::uvalue#2 ] ( main:7::queen:45::print:30::printf_uchar:103 [ queen::r queen::column count print::i1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_uchar::uvalue#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 uctoa::value#1 } }  main:7::queen:45::print:30::printf_uchar:114 [ queen::r queen::column count print::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_uchar::uvalue#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 uctoa::value#1 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:22 [ printf_uchar::uvalue#2 printf_uchar::uvalue#1 printf_uchar::uvalue#0 ]
Statement [215] *((byte*) conio_line_text + (byte) conio_cursor_x) ← (byte) cputc::c#3 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:7::cputs:34::cputc:139 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:34 [ printf_number_buffer::format_upper_case#10 ]
Removing always clobbered register reg byte y as potential for zp[1]:33 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:57 [ printf_padding::length#6 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:58 [ printf_padding::pad#7 ]
Removing always clobbered register reg byte y as potential for zp[1]:59 [ printf_padding::i#2 printf_padding::i#1 ]
Statement [216] *((byte*) conio_line_color + (byte) conio_cursor_x) ← (const nomodify byte) LIGHT_BLUE [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:7::cputs:34::cputc:139 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:34 [ printf_number_buffer::format_upper_case#10 ]
Removing always clobbered register reg byte a as potential for zp[1]:33 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:57 [ printf_padding::length#6 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:58 [ printf_padding::pad#7 ]
Removing always clobbered register reg byte a as potential for zp[1]:59 [ printf_padding::i#2 printf_padding::i#1 ]
Statement [218] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:7::cputs:34::cputc:139 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [227] (byte~) utoa::$11 ← (byte)(word) utoa::value#2 [ printf_buffer utoa::buffer#11 utoa::$11 ] ( main:7::printf_uint:38::utoa:142 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::buffer#11 utoa::$11 ] { }  ) always clobbers reg byte a 
Statement [228] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11) [ printf_buffer utoa::buffer#11 ] ( main:7::printf_uint:38::utoa:142 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::buffer#11 ] { }  ) always clobbers reg byte a reg byte y 
Statement [229] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11 [ printf_buffer utoa::buffer#3 ] ( main:7::printf_uint:38::utoa:142 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::buffer#3 ] { }  ) always clobbers reg byte a 
Statement [230] *((byte*) utoa::buffer#3) ← (byte) 0 [ printf_buffer ] ( main:7::printf_uint:38::utoa:142 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ] { }  ) always clobbers reg byte a reg byte y 
Statement [232] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] ( main:7::printf_uint:38::utoa:142 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:24 [ utoa::digit#2 utoa::digit#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:27 [ utoa::started#2 utoa::started#4 ]
Statement [233] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10) [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( main:7::printf_uint:38::utoa:142 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { }  ) always clobbers reg byte a 
Statement [235] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( main:7::printf_uint:38::utoa:142 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { }  ) always clobbers reg byte a 
Statement [238] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] ( main:7::printf_uint:38::utoa:142 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [239] (word) utoa_append::value#0 ← (word) utoa::value#2 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] ( main:7::printf_uint:38::utoa:142 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [240] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] ( main:7::printf_uint:38::utoa:142 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [242] (word) utoa_append::return#0 ← (word) utoa_append::value#2 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] ( main:7::printf_uint:38::utoa:142 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [243] (word) utoa::value#0 ← (word) utoa_append::return#0 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::value#0 ] ( main:7::printf_uint:38::utoa:142 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa::value#0 ] { }  ) always clobbers reg byte a 
Statement [249] (word) strlen::return#2 ← (word) strlen::len#2 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] ( main:7::printf_uint:38::printf_number_buffer:144 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strlen::return#2 = strlen::len#2 } }  main:7::printf_ulong:60::printf_number_buffer:188 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strlen::return#2 = strlen::len#2 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strlen::return#2 = strlen::len#2 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211 [ queen::r queen::column count print::i1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { strlen::return#2 = strlen::len#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211 [ queen::r queen::column count print::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { strlen::return#2 = strlen::len#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:30 [ printf_number_buffer::format_min_length#3 ]
Statement [250] (word~) printf_number_buffer::$19 ← (word) strlen::return#2 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] ( main:7::printf_uint:38::printf_number_buffer:144 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  main:7::printf_ulong:60::printf_number_buffer:188 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211 [ queen::r queen::column count print::i1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211 [ queen::r queen::column count print::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  ) always clobbers reg byte a 
Statement [251] (signed byte) printf_number_buffer::len#0 ← (signed byte)(word~) printf_number_buffer::$19 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::len#0 ] ( main:7::printf_uint:38::printf_number_buffer:144 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::len#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  main:7::printf_ulong:60::printf_number_buffer:188 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::len#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::len#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211 [ queen::r queen::column count print::i1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::len#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211 [ queen::r queen::column count print::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::len#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  ) always clobbers reg byte a 
Statement [255] (signed byte) printf_number_buffer::padding#1 ← (signed byte)(byte) printf_number_buffer::format_min_length#3 - (signed byte) printf_number_buffer::len#2 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] ( main:7::printf_uint:38::printf_number_buffer:144 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  main:7::printf_ulong:60::printf_number_buffer:188 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211 [ queen::r queen::column count print::i1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211 [ queen::r queen::column count print::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  ) always clobbers reg byte a 
Statement [285] (byte~) ultoa::$11 ← (byte)(dword) ultoa::value#2 [ printf_buffer ultoa::buffer#11 ultoa::$11 ] ( main:7::printf_ulong:60::ultoa:186 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::buffer#11 ultoa::$11 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count ultoa::value#1 } }  main:7::queen:45::print:30::printf_ulong:92::ultoa:186 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::buffer#11 ultoa::$11 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [286] *((byte*) ultoa::buffer#11) ← *((const byte*) DIGITS + (byte~) ultoa::$11) [ printf_buffer ultoa::buffer#11 ] ( main:7::printf_ulong:60::ultoa:186 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::buffer#11 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count ultoa::value#1 } }  main:7::queen:45::print:30::printf_ulong:92::ultoa:186 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::buffer#11 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count ultoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [287] (byte*) ultoa::buffer#3 ← ++ (byte*) ultoa::buffer#11 [ printf_buffer ultoa::buffer#3 ] ( main:7::printf_ulong:60::ultoa:186 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::buffer#3 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count ultoa::value#1 } }  main:7::queen:45::print:30::printf_ulong:92::ultoa:186 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::buffer#3 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [288] *((byte*) ultoa::buffer#3) ← (byte) 0 [ printf_buffer ] ( main:7::printf_ulong:60::ultoa:186 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count ultoa::value#1 } }  main:7::queen:45::print:30::printf_ulong:92::ultoa:186 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count ultoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [290] (byte~) ultoa::$10 ← (byte) ultoa::digit#2 << (byte) 2 [ printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::$10 ] ( main:7::printf_ulong:60::ultoa:186 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::$10 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count ultoa::value#1 } }  main:7::queen:45::print:30::printf_ulong:92::ultoa:186 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::$10 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count ultoa::value#1 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:37 [ ultoa::digit#2 ultoa::digit#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:42 [ ultoa::started#2 ultoa::started#4 ]
Statement [291] (dword) ultoa::digit_value#0 ← *((const dword*) RADIX_DECIMAL_VALUES_LONG + (byte~) ultoa::$10) [ printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] ( main:7::printf_ulong:60::ultoa:186 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count ultoa::value#1 } }  main:7::queen:45::print:30::printf_ulong:92::ultoa:186 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [293] if((dword) ultoa::value#2>=(dword) ultoa::digit_value#0) goto ultoa::@5 [ printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] ( main:7::printf_ulong:60::ultoa:186 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count ultoa::value#1 } }  main:7::queen:45::print:30::printf_ulong:92::ultoa:186 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [296] (byte*) ultoa_append::buffer#0 ← (byte*) ultoa::buffer#11 [ printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ] ( main:7::printf_ulong:60::ultoa:186 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  main:7::queen:45::print:30::printf_ulong:92::ultoa:186 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [297] (dword) ultoa_append::value#0 ← (dword) ultoa::value#2 [ printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ultoa_append::value#0 ] ( main:7::printf_ulong:60::ultoa:186 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ultoa_append::value#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  main:7::queen:45::print:30::printf_ulong:92::ultoa:186 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ultoa_append::value#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [298] (dword) ultoa_append::sub#0 ← (dword) ultoa::digit_value#0 [ printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::value#0 ultoa_append::sub#0 ] ( main:7::printf_ulong:60::ultoa:186 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::value#0 ultoa_append::sub#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  main:7::queen:45::print:30::printf_ulong:92::ultoa:186 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::value#0 ultoa_append::sub#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [300] (dword) ultoa_append::return#0 ← (dword) ultoa_append::value#2 [ printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::return#0 ] ( main:7::printf_ulong:60::ultoa:186 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::return#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  main:7::queen:45::print:30::printf_ulong:92::ultoa:186 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::return#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [301] (dword) ultoa::value#0 ← (dword) ultoa_append::return#0 [ printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa::value#0 ] ( main:7::printf_ulong:60::ultoa:186 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa::value#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count ultoa::value#1 } }  main:7::queen:45::print:30::printf_ulong:92::ultoa:186 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa::value#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [306] *((byte*) uctoa::buffer#11) ← *((const byte*) DIGITS + (byte) uctoa::value#2) [ printf_buffer uctoa::buffer#11 ] ( main:7::queen:45::print:30::printf_uchar:103::uctoa:209 [ queen::r queen::column count print::i1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer uctoa::buffer#11 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 uctoa::value#1 } }  main:7::queen:45::print:30::printf_uchar:114::uctoa:209 [ queen::r queen::column count print::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer uctoa::buffer#11 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 uctoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [307] (byte*) uctoa::buffer#3 ← ++ (byte*) uctoa::buffer#11 [ printf_buffer uctoa::buffer#3 ] ( main:7::queen:45::print:30::printf_uchar:103::uctoa:209 [ queen::r queen::column count print::i1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer uctoa::buffer#3 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 uctoa::value#1 } }  main:7::queen:45::print:30::printf_uchar:114::uctoa:209 [ queen::r queen::column count print::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer uctoa::buffer#3 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 uctoa::value#1 } }  ) always clobbers reg byte a 
Statement [308] *((byte*) uctoa::buffer#3) ← (byte) 0 [ printf_buffer ] ( main:7::queen:45::print:30::printf_uchar:103::uctoa:209 [ queen::r queen::column count print::i1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 uctoa::value#1 } }  main:7::queen:45::print:30::printf_uchar:114::uctoa:209 [ queen::r queen::column count print::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 uctoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [315] (byte*) uctoa_append::buffer#0 ← (byte*) uctoa::buffer#11 [ printf_buffer uctoa::digit#2 uctoa::value#2 uctoa::buffer#11 uctoa::digit_value#0 uctoa_append::buffer#0 ] ( main:7::queen:45::print:30::printf_uchar:103::uctoa:209 [ queen::r queen::column count print::i1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer uctoa::digit#2 uctoa::value#2 uctoa::buffer#11 uctoa::digit_value#0 uctoa_append::buffer#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  main:7::queen:45::print:30::printf_uchar:114::uctoa:209 [ queen::r queen::column count print::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer uctoa::digit#2 uctoa::value#2 uctoa::buffer#11 uctoa::digit_value#0 uctoa_append::buffer#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:45 [ uctoa::digit#2 uctoa::digit#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:46 [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:175 [ uctoa::digit_value#0 ]
Statement [322] (byte*) conio_line_text ← (byte*) conio_line_text + (byte) $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:7::cputs:34::cputc:139::cputln:220 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:220 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:220 [ count cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:220 [ cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:220 [ cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:220 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:220 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:220 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:220 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:220 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:220 [ cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:220 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:220 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:220 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:220 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:220 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:220 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:220 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:220 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:220 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:220 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:220 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:220 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:220 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:223 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:223 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:223 [ count cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:223 [ cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:223 [ cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:223 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:223 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:223 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:223 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:223 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:223 [ cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:223 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:223 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:223 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:223 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:223 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:223 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:223 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:223 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:223 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:223 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:223 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:223 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:223 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [323] (byte*) conio_line_color ← (byte*) conio_line_color + (byte) $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:7::cputs:34::cputc:139::cputln:220 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:220 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:220 [ count cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:220 [ cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:220 [ cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:220 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:220 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:220 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:220 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:220 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:220 [ cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:220 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:220 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:220 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:220 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:220 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:220 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:220 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:220 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:220 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:220 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:220 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:220 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:220 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:223 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:223 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:223 [ count cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:223 [ cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:223 [ cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:223 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:223 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:223 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:223 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:223 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:223 [ cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:223 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:223 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:223 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:223 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:223 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:223 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:223 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:223 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:223 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:223 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:223 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:223 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:223 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [324] (byte) conio_cursor_x ← (byte) 0 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:7::cputs:34::cputc:139::cputln:220 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:220 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:220 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:220 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:220 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:220 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:220 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:220 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:220 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:220 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:220 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:220 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:220 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:220 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:220 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:220 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:220 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:220 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:220 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:220 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:220 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:220 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:220 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:220 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:223 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:223 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:223 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:223 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:223 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:223 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:223 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:223 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:223 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:223 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:223 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:223 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:223 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:223 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:223 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:223 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:223 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:223 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:223 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:223 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:223 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:223 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:223 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:223 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [330] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] ( main:7::printf_uint:38::utoa:142::utoa_append:241 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:52 [ utoa_append::digit#2 utoa_append::digit#1 ]
Statement [331] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2) [ utoa_append::value#2 ] ( main:7::printf_uint:38::utoa:142::utoa_append:241 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::value#2 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:24 [ utoa::digit#2 utoa::digit#1 ]
Statement [334] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] ( main:7::printf_uint:38::utoa:142::utoa_append:241 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [337] if((byte) 0!=*((byte*) strlen::str#3)) goto strlen::@2 [ printf_buffer strlen::len#2 strlen::str#3 ] ( main:7::printf_uint:38::printf_number_buffer:144::strlen:248 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_buffer strlen::len#2 strlen::str#3 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strlen::return#2 = strlen::len#2 } }  main:7::printf_ulong:60::printf_number_buffer:188::strlen:248 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_buffer strlen::len#2 strlen::str#3 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strlen::return#2 = strlen::len#2 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::strlen:248 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_buffer strlen::len#2 strlen::str#3 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strlen::return#2 = strlen::len#2 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::strlen:248 [ queen::r queen::column count print::i1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_buffer strlen::len#2 strlen::str#3 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { strlen::return#2 = strlen::len#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::strlen:248 [ queen::r queen::column count print::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_buffer strlen::len#2 strlen::str#3 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { strlen::return#2 = strlen::len#2 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:30 [ printf_number_buffer::format_min_length#3 ]
Statement [350] if((byte) 0!=*((byte*) strupr::src#2)) goto strupr::@2 [ strupr::src#2 ] ( main:7::printf_uint:38::printf_number_buffer:144::strupr:273 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  main:7::printf_ulong:60::printf_number_buffer:188::strupr:273 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::strupr:273 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::strupr:273 [ queen::r queen::column count print::i1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::strupr:273 [ queen::r queen::column count print::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  ) always clobbers reg byte a reg byte y 
Statement [352] (byte) toupper::ch#0 ← *((byte*) strupr::src#2) [ strupr::src#2 toupper::ch#0 ] ( main:7::printf_uint:38::printf_number_buffer:144::strupr:273 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::ch#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { toupper::return#2 = toupper::return#3 } }  main:7::printf_ulong:60::printf_number_buffer:188::strupr:273 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::ch#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { toupper::return#2 = toupper::return#3 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::strupr:273 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::ch#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { toupper::return#2 = toupper::return#3 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::strupr:273 [ queen::r queen::column count print::i1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::ch#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { toupper::return#2 = toupper::return#3 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::strupr:273 [ queen::r queen::column count print::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::ch#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { toupper::return#2 = toupper::return#3 } }  ) always clobbers reg byte a reg byte y 
Statement [356] *((byte*) strupr::src#2) ← (byte~) strupr::$0 [ strupr::src#2 ] ( main:7::printf_uint:38::printf_number_buffer:144::strupr:273 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  main:7::printf_ulong:60::printf_number_buffer:188::strupr:273 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::strupr:273 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::strupr:273 [ queen::r queen::column count print::i1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::strupr:273 [ queen::r queen::column count print::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  ) always clobbers reg byte y 
Statement [360] if((dword) ultoa_append::value#2>=(dword) ultoa_append::sub#0) goto ultoa_append::@2 [ ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#2 ultoa_append::digit#2 ] ( main:7::printf_ulong:60::ultoa:186::ultoa_append:299 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#2 ultoa_append::digit#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  main:7::queen:45::print:30::printf_ulong:92::ultoa:186::ultoa_append:299 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#2 ultoa_append::digit#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:66 [ ultoa_append::digit#2 ultoa_append::digit#1 ]
Statement [361] *((byte*) ultoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) ultoa_append::digit#2) [ ultoa_append::value#2 ] ( main:7::printf_ulong:60::ultoa:186::ultoa_append:299 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::value#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  main:7::queen:45::print:30::printf_ulong:92::ultoa:186::ultoa_append:299 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::value#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:37 [ ultoa::digit#2 ultoa::digit#1 ]
Statement [364] (dword) ultoa_append::value#1 ← (dword) ultoa_append::value#2 - (dword) ultoa_append::sub#0 [ ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#1 ultoa_append::digit#1 ] ( main:7::printf_ulong:60::ultoa:186::ultoa_append:299 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#1 ultoa_append::digit#1 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  main:7::queen:45::print:30::printf_ulong:92::ultoa:186::ultoa_append:299 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#1 ultoa_append::digit#1 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [368] *((byte*) uctoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) uctoa_append::digit#2) [ uctoa_append::value#2 ] ( main:7::queen:45::print:30::printf_uchar:103::uctoa:209::uctoa_append:318 [ queen::r queen::column count print::i1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer uctoa::digit#2 uctoa::buffer#11 uctoa_append::value#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  main:7::queen:45::print:30::printf_uchar:114::uctoa:209::uctoa_append:318 [ queen::r queen::column count print::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer uctoa::digit#2 uctoa::buffer#11 uctoa_append::value#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:45 [ uctoa::digit#2 uctoa::digit#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:67 [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:67 [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
Statement [371] (byte) uctoa_append::value#1 ← (byte) uctoa_append::value#2 - (byte) uctoa_append::sub#0 [ uctoa_append::buffer#0 uctoa_append::sub#0 uctoa_append::value#1 uctoa_append::digit#1 ] ( main:7::queen:45::print:30::printf_uchar:103::uctoa:209::uctoa_append:318 [ queen::r queen::column count print::i1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer uctoa::digit#2 uctoa::buffer#11 uctoa_append::buffer#0 uctoa_append::sub#0 uctoa_append::value#1 uctoa_append::digit#1 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  main:7::queen:45::print:30::printf_uchar:114::uctoa:209::uctoa_append:318 [ queen::r queen::column count print::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer uctoa::digit#2 uctoa::buffer#11 uctoa_append::buffer#0 uctoa_append::sub#0 uctoa_append::value#1 uctoa_append::digit#1 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:178 [ uctoa_append::sub#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:68 [ uctoa_append::digit#2 uctoa_append::digit#1 ]
Statement [372] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return [ conio_cursor_y conio_line_text conio_line_color ] ( main:7::cputs:34::cputc:139::cputln:220::cscroll:326 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:220::cscroll:326 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:220::cscroll:326 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:220::cscroll:326 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:220::cscroll:326 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:220::cscroll:326 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:220::cscroll:326 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:220::cscroll:326 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:220::cscroll:326 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:220::cscroll:326 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:220::cscroll:326 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:220::cscroll:326 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:220::cscroll:326 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:220::cscroll:326 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:220::cscroll:326 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:220::cscroll:326 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:223::cscroll:326 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:223::cscroll:326 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:223::cscroll:326 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:223::cscroll:326 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:223::cscroll:326 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:223::cscroll:326 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:223::cscroll:326 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:223::cscroll:326 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:223::cscroll:326 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:223::cscroll:326 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:223::cscroll:326 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:223::cscroll:326 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:223::cscroll:326 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:223::cscroll:326 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:223::cscroll:326 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:223::cscroll:326 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [381] (byte*) conio_line_text ← (byte*) conio_line_text - (byte) $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:7::cputs:34::cputc:139::cputln:220::cscroll:326 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:220::cscroll:326 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:220::cscroll:326 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:220::cscroll:326 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:220::cscroll:326 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:220::cscroll:326 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:220::cscroll:326 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:220::cscroll:326 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:220::cscroll:326 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:220::cscroll:326 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:220::cscroll:326 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:220::cscroll:326 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:220::cscroll:326 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:220::cscroll:326 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:220::cscroll:326 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:220::cscroll:326 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:223::cscroll:326 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:223::cscroll:326 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:223::cscroll:326 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:223::cscroll:326 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:223::cscroll:326 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:223::cscroll:326 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:223::cscroll:326 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:223::cscroll:326 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:223::cscroll:326 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:223::cscroll:326 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:223::cscroll:326 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:223::cscroll:326 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:223::cscroll:326 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:223::cscroll:326 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:223::cscroll:326 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:223::cscroll:326 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [382] (byte*) conio_line_color ← (byte*) conio_line_color - (byte) $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:7::cputs:34::cputc:139::cputln:220::cscroll:326 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:220::cscroll:326 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:220::cscroll:326 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:220::cscroll:326 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:220::cscroll:326 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:220::cscroll:326 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:220::cscroll:326 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:220::cscroll:326 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:220::cscroll:326 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:220::cscroll:326 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:220::cscroll:326 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:220::cscroll:326 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:220::cscroll:326 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:220::cscroll:326 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:220::cscroll:326 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:220::cscroll:326 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:223::cscroll:326 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:223::cscroll:326 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:223::cscroll:326 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:223::cscroll:326 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:223::cscroll:326 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:223::cscroll:326 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:223::cscroll:326 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:223::cscroll:326 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:223::cscroll:326 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:223::cscroll:326 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:223::cscroll:326 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:223::cscroll:326 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:223::cscroll:326 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:223::cscroll:326 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:223::cscroll:326 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:223::cscroll:326 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [387] (byte) toupper::return#0 ← (byte) toupper::ch#0 + (byte) 'A'-(byte) 'a' [ toupper::return#0 ] ( main:7::printf_uint:38::printf_number_buffer:144::strupr:273::toupper:353 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::return#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { toupper::return#2 = toupper::return#3 } }  main:7::printf_ulong:60::printf_number_buffer:188::strupr:273::toupper:353 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::return#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { toupper::return#2 = toupper::return#3 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::strupr:273::toupper:353 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::return#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { toupper::return#2 = toupper::return#3 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::strupr:273::toupper:353 [ queen::r queen::column count print::i1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::return#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { toupper::return#2 = toupper::return#3 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::strupr:273::toupper:353 [ queen::r queen::column count print::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::return#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { toupper::return#2 = toupper::return#3 } }  ) always clobbers reg byte a 
Statement [391] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28 [ memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] ( main:7::cputs:34::cputc:139::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:220::cscroll:326::memcpy:374 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:220::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:220::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:220::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:374 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:374 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:223::cscroll:326::memcpy:374 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:223::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:223::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:223::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:374 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:374 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:220::cscroll:326::memcpy:376 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:220::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:220::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:220::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:376 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:376 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:223::cscroll:326::memcpy:376 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:223::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:223::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:223::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:376 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:376 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [392] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2 [ memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] ( main:7::cputs:34::cputc:139::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:220::cscroll:326::memcpy:374 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:220::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:220::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:220::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:374 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:374 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:223::cscroll:326::memcpy:374 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:223::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:223::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:223::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:374 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:374 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:220::cscroll:326::memcpy:376 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:220::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:220::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:220::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:376 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:376 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:223::cscroll:326::memcpy:376 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:223::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:223::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:223::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:376 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:376 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [393] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2 [ memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] ( main:7::cputs:34::cputc:139::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:220::cscroll:326::memcpy:374 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:220::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:220::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:220::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:374 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:374 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:223::cscroll:326::memcpy:374 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:223::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:223::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:223::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:374 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:374 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:220::cscroll:326::memcpy:376 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:220::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:220::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:220::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:376 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:376 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:223::cscroll:326::memcpy:376 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:223::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:223::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:223::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:376 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:376 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [395] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2 [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( main:7::cputs:34::cputc:139::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:220::cscroll:326::memcpy:374 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:220::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:220::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:220::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:374 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:374 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:223::cscroll:326::memcpy:374 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:223::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:223::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:223::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:374 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:374 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:220::cscroll:326::memcpy:376 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:220::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:220::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:220::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:376 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:376 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:223::cscroll:326::memcpy:376 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:223::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:223::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:223::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:376 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:376 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [397] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( main:7::cputs:34::cputc:139::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:220::cscroll:326::memcpy:374 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:220::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:220::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:220::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:374 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:374 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:223::cscroll:326::memcpy:374 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:223::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:223::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:223::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:374 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:374 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:220::cscroll:326::memcpy:376 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:220::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:220::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:220::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:376 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:376 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:223::cscroll:326::memcpy:376 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:223::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:223::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:223::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:376 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:376 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a reg byte y 
Statement [401] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (byte) $28 [ memset::str#3 memset::c#4 memset::end#0 ] ( main:7::cputs:34::cputc:139::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:220::cscroll:326::memset:378 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:220::cscroll:326::memset:378 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:220::cscroll:326::memset:378 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:220::cscroll:326::memset:378 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memset:378 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memset:378 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:378 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:378 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:378 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:223::cscroll:326::memset:378 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:223::cscroll:326::memset:378 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:223::cscroll:326::memset:378 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:223::cscroll:326::memset:378 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memset:378 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memset:378 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:378 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:378 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:378 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:220::cscroll:326::memset:380 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:220::cscroll:326::memset:380 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:220::cscroll:326::memset:380 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:220::cscroll:326::memset:380 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memset:380 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memset:380 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:380 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:380 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:380 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:223::cscroll:326::memset:380 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:223::cscroll:326::memset:380 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:223::cscroll:326::memset:380 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:223::cscroll:326::memset:380 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memset:380 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memset:380 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:380 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:380 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:380 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:80 [ memset::c#4 ]
Statement [402] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3 [ memset::c#4 memset::end#0 memset::dst#4 ] ( main:7::cputs:34::cputc:139::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:220::cscroll:326::memset:378 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:220::cscroll:326::memset:378 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:220::cscroll:326::memset:378 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:220::cscroll:326::memset:378 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memset:378 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memset:378 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:378 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:378 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:378 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:223::cscroll:326::memset:378 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:223::cscroll:326::memset:378 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:223::cscroll:326::memset:378 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:223::cscroll:326::memset:378 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memset:378 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memset:378 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:378 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:378 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:378 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:220::cscroll:326::memset:380 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:220::cscroll:326::memset:380 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:220::cscroll:326::memset:380 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:220::cscroll:326::memset:380 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memset:380 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memset:380 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:380 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:380 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:380 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:223::cscroll:326::memset:380 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:223::cscroll:326::memset:380 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:223::cscroll:326::memset:380 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:223::cscroll:326::memset:380 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memset:380 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memset:380 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:380 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:380 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:380 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [404] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:7::cputs:34::cputc:139::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:220::cscroll:326::memset:378 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:220::cscroll:326::memset:378 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:220::cscroll:326::memset:378 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:220::cscroll:326::memset:378 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memset:378 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memset:378 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:378 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:378 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:378 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:223::cscroll:326::memset:378 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:223::cscroll:326::memset:378 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:223::cscroll:326::memset:378 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:223::cscroll:326::memset:378 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memset:378 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memset:378 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:378 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:378 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:378 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:220::cscroll:326::memset:380 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:220::cscroll:326::memset:380 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:220::cscroll:326::memset:380 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:220::cscroll:326::memset:380 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memset:380 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memset:380 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:380 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:380 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:380 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:223::cscroll:326::memset:380 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:223::cscroll:326::memset:380 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:223::cscroll:326::memset:380 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:223::cscroll:326::memset:380 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memset:380 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memset:380 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:380 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:380 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:380 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [406] *((byte*) memset::dst#2) ← (byte) memset::c#4 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:7::cputs:34::cputc:139::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:220::cscroll:326::memset:378 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:220::cscroll:326::memset:378 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:220::cscroll:326::memset:378 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:220::cscroll:326::memset:378 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memset:378 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memset:378 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:378 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:378 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:378 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:223::cscroll:326::memset:378 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:223::cscroll:326::memset:378 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:223::cscroll:326::memset:378 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:223::cscroll:326::memset:378 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memset:378 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memset:378 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:378 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:378 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:378 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:220::cscroll:326::memset:380 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:220::cscroll:326::memset:380 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:220::cscroll:326::memset:380 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:220::cscroll:326::memset:380 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memset:380 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memset:380 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:380 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:380 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:380 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:223::cscroll:326::memset:380 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:223::cscroll:326::memset:380 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:223::cscroll:326::memset:380 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:223::cscroll:326::memset:380 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memset:380 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memset:380 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:380 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:380 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:380 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:80 [ memset::c#4 ]
Statement [1] (byte) conio_cursor_x ← (byte) 0 [ TOD_ZERO printf_buffer ] (  [ TOD_ZERO printf_buffer ] { }  ) always clobbers reg byte a 
Statement [2] (byte) conio_cursor_y ← (byte) 0 [ TOD_ZERO printf_buffer ] (  [ TOD_ZERO printf_buffer ] { }  ) always clobbers reg byte a 
Statement [3] (byte*) conio_line_text ← (const nomodify byte*) DEFAULT_SCREEN [ TOD_ZERO printf_buffer ] (  [ TOD_ZERO printf_buffer ] { }  ) always clobbers reg byte a 
Statement [4] (byte*) conio_line_color ← (const nomodify byte*) COLORRAM [ TOD_ZERO printf_buffer ] (  [ TOD_ZERO printf_buffer ] { }  ) always clobbers reg byte a 
Statement [5] (dword) count ← (dword) 0 [ count TOD_ZERO printf_buffer ] (  [ count TOD_ZERO printf_buffer ] { }  ) always clobbers reg byte a 
Statement [9] (byte) queen::row#0 ← stackidx(byte,(const byte) queen::OFFSET_STACK_ROW) [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count queen::row#0 printf_buffer ] ( main:7::queen:45 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count queen::row#0 printf_buffer ] { }  ) always clobbers reg byte a reg byte x 
Statement [11] (byte) queen::column ← (byte) 1 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count queen::r queen::column printf_buffer ] ( main:7::queen:45 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count queen::r queen::column printf_buffer ] { }  ) always clobbers reg byte a 
Statement [12] if((byte) queen::column<(byte) 8+(byte) 1) goto queen::@2 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count queen::r queen::column printf_buffer ] ( main:7::queen:45 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count queen::r queen::column printf_buffer ] { }  ) always clobbers reg byte a 
Statement [20] *((const byte*) board + (byte) queen::r) ← (byte) queen::column [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count queen::r queen::column printf_buffer ] ( main:7::queen:45 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count queen::r queen::column printf_buffer ] { }  ) always clobbers reg byte a reg byte y 
Statement [21] if((byte) queen::r==(byte) 8) goto queen::@4 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count queen::r queen::column printf_buffer ] ( main:7::queen:45 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count queen::r queen::column printf_buffer ] { }  ) always clobbers reg byte a 
Statement asm { ldacolumn pha ldar pha  } always clobbers reg byte a 
Statement sideeffect stackpullbytes((number) 1) always clobbers reg byte a 
Statement asm { pla star pla stacolumn  } always clobbers reg byte a 
Statement [44] stackpush(byte) ← (byte) 1 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count printf_buffer ] ( main:7 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count printf_buffer ] { { tod_read::return_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_read::return_SEC#0 = tod_read::return_SEC#2 } { tod_read::return_MIN#0 = tod_read::return_MIN#2 } { tod_read::return_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement sideeffect stackpullbytes((number) 1) always clobbers reg byte a 
Statement [59] (dword) printf_ulong::uvalue#0 ← (dword) count [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_ulong::uvalue#0 printf_buffer ] ( main:7 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_ulong::uvalue#0 printf_buffer ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } }  ) always clobbers reg byte a 
Statement [74] if(*((const byte*) board + (byte) legal::i#2)==(byte) legal::column#0) goto legal::@return [ legal::row#0 legal::column#0 legal::i#2 ] ( main:7::queen:45::legal:16 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count queen::r queen::column printf_buffer legal::row#0 legal::column#0 legal::i#2 ] { { legal::row#0 = queen::r } { legal::column#0 = queen::column } { legal::return#0 = legal::return#4 } }  ) always clobbers reg byte a 
Statement [91] (dword) printf_ulong::uvalue#1 ← (dword) count [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count printf_ulong::uvalue#1 printf_buffer ] ( main:7::queen:45::print:30 [ queen::r queen::column conio_cursor_x conio_cursor_y conio_line_text conio_line_color count printf_ulong::uvalue#1 printf_buffer ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } }  ) always clobbers reg byte a 
Statement [107] if(*((const byte*) board + (byte) print::i1#2)==(byte) print::j#2) goto print::@8 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count print::i1#2 print::j#2 printf_buffer ] ( main:7::queen:45::print:30 [ queen::r queen::column conio_cursor_x conio_cursor_y conio_line_text conio_line_color count print::i1#2 print::j#2 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [119] (byte) conio_cursor_x ← (byte) 0 [ conio_cursor_x ] ( main:7::clrscr:32 [ count TOD_ZERO printf_buffer conio_cursor_x ] { }  ) always clobbers reg byte a 
Statement [120] (byte) conio_cursor_y ← (byte) 0 [ conio_cursor_x conio_cursor_y ] ( main:7::clrscr:32 [ count TOD_ZERO printf_buffer conio_cursor_x conio_cursor_y ] { }  ) always clobbers reg byte a 
Statement [121] (byte*) conio_line_text ← (const nomodify byte*) DEFAULT_SCREEN [ conio_cursor_x conio_cursor_y conio_line_text ] ( main:7::clrscr:32 [ count TOD_ZERO printf_buffer conio_cursor_x conio_cursor_y conio_line_text ] { }  ) always clobbers reg byte a 
Statement [122] (byte*) conio_line_color ← (const nomodify byte*) COLORRAM [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:7::clrscr:32 [ count TOD_ZERO printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { }  ) always clobbers reg byte a 
Statement [126] (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#5 + (byte) $28 [ clrscr::l#2 clrscr::line_cols#5 clrscr::line_text#1 ] ( main:7::clrscr:32 [ count TOD_ZERO printf_buffer clrscr::l#2 clrscr::line_cols#5 clrscr::line_text#1 ] { }  ) always clobbers reg byte a 
Statement [127] (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#5 + (byte) $28 [ clrscr::l#2 clrscr::line_text#1 clrscr::line_cols#1 ] ( main:7::clrscr:32 [ count TOD_ZERO printf_buffer clrscr::l#2 clrscr::line_text#1 clrscr::line_cols#1 ] { }  ) always clobbers reg byte a 
Statement [129] *((byte*) clrscr::line_text#5 + (byte) clrscr::c#2) ← (byte) ' ' [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] ( main:7::clrscr:32 [ count TOD_ZERO printf_buffer clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] { }  ) always clobbers reg byte a 
Statement [130] *((byte*) clrscr::line_cols#5 + (byte) clrscr::c#2) ← (const nomodify byte) LIGHT_BLUE [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] ( main:7::clrscr:32 [ count TOD_ZERO printf_buffer clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] { }  ) always clobbers reg byte a 
Statement [134] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#13) [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#13 cputs::c#1 printf_buffer ] ( main:7::cputs:34 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#13 cputs::c#1 printf_buffer ] { }  main:7::cputs:36 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#13 cputs::c#1 printf_buffer ] { }  main:7::cputs:58 [ count conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#13 cputs::c#1 printf_buffer ] { }  main:7::cputs:62 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#13 cputs::c#1 printf_buffer ] { }  main:7::cputs:66 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#13 cputs::c#1 printf_buffer ] { }  main:7::queen:45::print:30::cputs:90 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#13 cputs::c#1 printf_buffer ] { }  main:7::queen:45::print:30::cputs:94 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#13 cputs::c#1 printf_buffer ] { }  main:7::queen:45::print:30::cputs:101 [ queen::r queen::column count print::i1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#13 cputs::c#1 printf_buffer ] { }  main:7::queen:45::print:30::cputs:109 [ queen::r queen::column count print::i1#2 print::j#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#13 cputs::c#1 printf_buffer ] { }  main:7::queen:45::print:30::cputs:112 [ queen::r queen::column count print::i1#2 print::j#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#13 cputs::c#1 printf_buffer ] { }  main:7::printf_string:64::cputs:192 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#13 cputs::c#1 printf_buffer ] { }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#13 cputs::c#1 printf_buffer ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#13 cputs::c#1 printf_buffer ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#13 cputs::c#1 printf_buffer ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#13 cputs::c#1 printf_buffer ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#13 cputs::c#1 printf_buffer ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  ) always clobbers reg byte a reg byte y 
Statement [141] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ] ( main:7::printf_uint:38 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ] { }  ) always clobbers reg byte a 
Statement [146] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) | (byte) $80 [ tod_init::tod_TENTHS#0 tod_init::tod_SEC#0 tod_init::tod_MIN#0 tod_init::tod_HOURS#0 ] ( main:7::tod_init:43 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count printf_buffer tod_init::tod_TENTHS#0 tod_init::tod_SEC#0 tod_init::tod_MIN#0 tod_init::tod_HOURS#0 ] { }  ) always clobbers reg byte a 
Statement [147] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) & (byte) $7f [ tod_init::tod_TENTHS#0 tod_init::tod_SEC#0 tod_init::tod_MIN#0 tod_init::tod_HOURS#0 ] ( main:7::tod_init:43 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count printf_buffer tod_init::tod_TENTHS#0 tod_init::tod_SEC#0 tod_init::tod_MIN#0 tod_init::tod_HOURS#0 ] { }  ) always clobbers reg byte a 
Statement [158] (byte~) tod_str::$0 ← (byte) tod_str::tod_HOURS#0 >> (byte) 4 [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::tod_HOURS#0 tod_str::$0 ] ( main:7::tod_str:56 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count printf_buffer tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::tod_HOURS#0 tod_str::$0 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [161] (byte~) tod_str::$2 ← (byte) tod_str::tod_HOURS#0 & (byte) $f [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::$2 ] ( main:7::tod_str:56 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count printf_buffer tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::$2 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [164] (byte~) tod_str::$4 ← (byte) tod_str::tod_MIN#0 >> (byte) 4 [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::$4 ] ( main:7::tod_str:56 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count printf_buffer tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::$4 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [167] (byte~) tod_str::$6 ← (byte) tod_str::tod_MIN#0 & (byte) $f [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::$6 ] ( main:7::tod_str:56 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count printf_buffer tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::$6 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [170] (byte~) tod_str::$8 ← (byte) tod_str::tod_SEC#0 >> (byte) 4 [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::$8 ] ( main:7::tod_str:56 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count printf_buffer tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::$8 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [173] (byte~) tod_str::$10 ← (byte) tod_str::tod_SEC#0 & (byte) $f [ tod_str::tod_TENTHS#0 tod_str::$10 ] ( main:7::tod_str:56 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count printf_buffer tod_str::tod_TENTHS#0 tod_str::$10 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [176] (byte~) tod_str::$12 ← (byte) tod_str::tod_TENTHS#0 >> (byte) 4 [ tod_str::tod_TENTHS#0 tod_str::$12 ] ( main:7::tod_str:56 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count printf_buffer tod_str::tod_TENTHS#0 tod_str::$12 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [179] (byte~) tod_str::$14 ← (byte) tod_str::tod_TENTHS#0 & (byte) $f [ tod_str::$14 ] ( main:7::tod_str:56 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count printf_buffer tod_str::$14 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [184] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_ulong::uvalue#2 ] ( main:7::printf_ulong:60 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_ulong::uvalue#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count ultoa::value#1 } }  main:7::queen:45::print:30::printf_ulong:92 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_ulong::uvalue#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [185] (dword) ultoa::value#1 ← (dword) printf_ulong::uvalue#2 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::value#1 ] ( main:7::printf_ulong:60 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::value#1 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count ultoa::value#1 } }  main:7::queen:45::print:30::printf_ulong:92 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::value#1 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [196] (byte) diff::return#3 ← (byte) diff::a#2 - (byte) diff::b#2 [ diff::return#3 ] ( main:7::queen:45::legal:16::diff:77 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count queen::r queen::column printf_buffer legal::row#0 legal::column#0 legal::i#2 diff::return#3 ] { { legal::row#0 = queen::r } { legal::return#0 = legal::return#4 } { diff::a#0 = diff::a#2 } { diff::b#0 = diff::b#2 legal::column#0 queen::column } { diff::return#0 = diff::return#4 } }  main:7::queen:45::legal:16::diff:82 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count queen::r queen::column printf_buffer legal::row#0 legal::column#0 legal::i#2 legal::$3 diff::return#3 ] { { legal::column#0 = queen::column } { legal::return#0 = legal::return#4 } { diff::a#1 = diff::a#2 legal::i#2 } { diff::b#1 = diff::b#2 legal::row#0 queen::r } { diff::return#1 = diff::return#4 } }  ) always clobbers reg byte a 
Statement [199] (byte) diff::return#2 ← (byte) diff::b#2 - (byte) diff::a#2 [ diff::return#2 ] ( main:7::queen:45::legal:16::diff:77 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count queen::r queen::column printf_buffer legal::row#0 legal::column#0 legal::i#2 diff::return#2 ] { { legal::row#0 = queen::r } { legal::return#0 = legal::return#4 } { diff::a#0 = diff::a#2 } { diff::b#0 = diff::b#2 legal::column#0 queen::column } { diff::return#0 = diff::return#4 } }  main:7::queen:45::legal:16::diff:82 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color count queen::r queen::column printf_buffer legal::row#0 legal::column#0 legal::i#2 legal::$3 diff::return#2 ] { { legal::column#0 = queen::column } { legal::return#0 = legal::return#4 } { diff::a#1 = diff::a#2 legal::i#2 } { diff::b#1 = diff::b#2 legal::row#0 queen::r } { diff::return#1 = diff::return#4 } }  ) always clobbers reg byte a 
Statement [201] (byte) conio_cursor_x ← (const byte) gotoxy::x#2 [ conio_cursor_x ] ( main:7::queen:45::print:30::gotoxy:88 [ queen::r queen::column count printf_buffer conio_cursor_x ] { }  ) always clobbers reg byte a 
Statement [202] (byte) conio_cursor_y ← (const byte) gotoxy::y#2 [ conio_cursor_x conio_cursor_y ] ( main:7::queen:45::print:30::gotoxy:88 [ queen::r queen::column count printf_buffer conio_cursor_x conio_cursor_y ] { }  ) always clobbers reg byte a 
Statement [203] (byte*) conio_line_text ← (const nomodify byte*) DEFAULT_SCREEN+(const word) gotoxy::line_offset#0 [ conio_cursor_x conio_cursor_y conio_line_text ] ( main:7::queen:45::print:30::gotoxy:88 [ queen::r queen::column count printf_buffer conio_cursor_x conio_cursor_y conio_line_text ] { }  ) always clobbers reg byte a 
Statement [204] (byte*) conio_line_color ← (const nomodify byte*) COLORRAM+(const word) gotoxy::line_offset#0 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:7::queen:45::print:30::gotoxy:88 [ queen::r queen::column count printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { }  ) always clobbers reg byte a 
Statement [207] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_uchar::uvalue#2 ] ( main:7::queen:45::print:30::printf_uchar:103 [ queen::r queen::column count print::i1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_uchar::uvalue#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 uctoa::value#1 } }  main:7::queen:45::print:30::printf_uchar:114 [ queen::r queen::column count print::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_uchar::uvalue#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 uctoa::value#1 } }  ) always clobbers reg byte a 
Statement [215] *((byte*) conio_line_text + (byte) conio_cursor_x) ← (byte) cputc::c#3 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:7::cputs:34::cputc:139 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte y 
Statement [216] *((byte*) conio_line_color + (byte) conio_cursor_x) ← (const nomodify byte) LIGHT_BLUE [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:7::cputs:34::cputc:139 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a reg byte y 
Statement [218] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:7::cputs:34::cputc:139 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [227] (byte~) utoa::$11 ← (byte)(word) utoa::value#2 [ printf_buffer utoa::buffer#11 utoa::$11 ] ( main:7::printf_uint:38::utoa:142 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::buffer#11 utoa::$11 ] { }  ) always clobbers reg byte a 
Statement [228] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11) [ printf_buffer utoa::buffer#11 ] ( main:7::printf_uint:38::utoa:142 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::buffer#11 ] { }  ) always clobbers reg byte a reg byte y 
Statement [229] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11 [ printf_buffer utoa::buffer#3 ] ( main:7::printf_uint:38::utoa:142 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::buffer#3 ] { }  ) always clobbers reg byte a 
Statement [230] *((byte*) utoa::buffer#3) ← (byte) 0 [ printf_buffer ] ( main:7::printf_uint:38::utoa:142 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ] { }  ) always clobbers reg byte a reg byte y 
Statement [232] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] ( main:7::printf_uint:38::utoa:142 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] { }  ) always clobbers reg byte a 
Statement [233] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10) [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( main:7::printf_uint:38::utoa:142 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { }  ) always clobbers reg byte a 
Statement [235] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( main:7::printf_uint:38::utoa:142 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { }  ) always clobbers reg byte a 
Statement [238] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] ( main:7::printf_uint:38::utoa:142 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [239] (word) utoa_append::value#0 ← (word) utoa::value#2 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] ( main:7::printf_uint:38::utoa:142 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [240] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] ( main:7::printf_uint:38::utoa:142 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [242] (word) utoa_append::return#0 ← (word) utoa_append::value#2 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] ( main:7::printf_uint:38::utoa:142 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [243] (word) utoa::value#0 ← (word) utoa_append::return#0 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::value#0 ] ( main:7::printf_uint:38::utoa:142 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa::value#0 ] { }  ) always clobbers reg byte a 
Statement [249] (word) strlen::return#2 ← (word) strlen::len#2 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] ( main:7::printf_uint:38::printf_number_buffer:144 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strlen::return#2 = strlen::len#2 } }  main:7::printf_ulong:60::printf_number_buffer:188 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strlen::return#2 = strlen::len#2 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strlen::return#2 = strlen::len#2 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211 [ queen::r queen::column count print::i1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { strlen::return#2 = strlen::len#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211 [ queen::r queen::column count print::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { strlen::return#2 = strlen::len#2 } }  ) always clobbers reg byte a 
Statement [250] (word~) printf_number_buffer::$19 ← (word) strlen::return#2 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] ( main:7::printf_uint:38::printf_number_buffer:144 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  main:7::printf_ulong:60::printf_number_buffer:188 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211 [ queen::r queen::column count print::i1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211 [ queen::r queen::column count print::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  ) always clobbers reg byte a 
Statement [251] (signed byte) printf_number_buffer::len#0 ← (signed byte)(word~) printf_number_buffer::$19 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::len#0 ] ( main:7::printf_uint:38::printf_number_buffer:144 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::len#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  main:7::printf_ulong:60::printf_number_buffer:188 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::len#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::len#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211 [ queen::r queen::column count print::i1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::len#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211 [ queen::r queen::column count print::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::len#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  ) always clobbers reg byte a 
Statement [255] (signed byte) printf_number_buffer::padding#1 ← (signed byte)(byte) printf_number_buffer::format_min_length#3 - (signed byte) printf_number_buffer::len#2 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] ( main:7::printf_uint:38::printf_number_buffer:144 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  main:7::printf_ulong:60::printf_number_buffer:188 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211 [ queen::r queen::column count print::i1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211 [ queen::r queen::column count print::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  ) always clobbers reg byte a 
Statement [285] (byte~) ultoa::$11 ← (byte)(dword) ultoa::value#2 [ printf_buffer ultoa::buffer#11 ultoa::$11 ] ( main:7::printf_ulong:60::ultoa:186 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::buffer#11 ultoa::$11 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count ultoa::value#1 } }  main:7::queen:45::print:30::printf_ulong:92::ultoa:186 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::buffer#11 ultoa::$11 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [286] *((byte*) ultoa::buffer#11) ← *((const byte*) DIGITS + (byte~) ultoa::$11) [ printf_buffer ultoa::buffer#11 ] ( main:7::printf_ulong:60::ultoa:186 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::buffer#11 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count ultoa::value#1 } }  main:7::queen:45::print:30::printf_ulong:92::ultoa:186 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::buffer#11 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count ultoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [287] (byte*) ultoa::buffer#3 ← ++ (byte*) ultoa::buffer#11 [ printf_buffer ultoa::buffer#3 ] ( main:7::printf_ulong:60::ultoa:186 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::buffer#3 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count ultoa::value#1 } }  main:7::queen:45::print:30::printf_ulong:92::ultoa:186 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::buffer#3 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [288] *((byte*) ultoa::buffer#3) ← (byte) 0 [ printf_buffer ] ( main:7::printf_ulong:60::ultoa:186 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count ultoa::value#1 } }  main:7::queen:45::print:30::printf_ulong:92::ultoa:186 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count ultoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [290] (byte~) ultoa::$10 ← (byte) ultoa::digit#2 << (byte) 2 [ printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::$10 ] ( main:7::printf_ulong:60::ultoa:186 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::$10 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count ultoa::value#1 } }  main:7::queen:45::print:30::printf_ulong:92::ultoa:186 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::$10 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [291] (dword) ultoa::digit_value#0 ← *((const dword*) RADIX_DECIMAL_VALUES_LONG + (byte~) ultoa::$10) [ printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] ( main:7::printf_ulong:60::ultoa:186 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count ultoa::value#1 } }  main:7::queen:45::print:30::printf_ulong:92::ultoa:186 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [293] if((dword) ultoa::value#2>=(dword) ultoa::digit_value#0) goto ultoa::@5 [ printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] ( main:7::printf_ulong:60::ultoa:186 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count ultoa::value#1 } }  main:7::queen:45::print:30::printf_ulong:92::ultoa:186 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [296] (byte*) ultoa_append::buffer#0 ← (byte*) ultoa::buffer#11 [ printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ] ( main:7::printf_ulong:60::ultoa:186 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  main:7::queen:45::print:30::printf_ulong:92::ultoa:186 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [297] (dword) ultoa_append::value#0 ← (dword) ultoa::value#2 [ printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ultoa_append::value#0 ] ( main:7::printf_ulong:60::ultoa:186 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ultoa_append::value#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  main:7::queen:45::print:30::printf_ulong:92::ultoa:186 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ultoa_append::value#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [298] (dword) ultoa_append::sub#0 ← (dword) ultoa::digit_value#0 [ printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::value#0 ultoa_append::sub#0 ] ( main:7::printf_ulong:60::ultoa:186 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::value#0 ultoa_append::sub#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  main:7::queen:45::print:30::printf_ulong:92::ultoa:186 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::value#0 ultoa_append::sub#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [300] (dword) ultoa_append::return#0 ← (dword) ultoa_append::value#2 [ printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::return#0 ] ( main:7::printf_ulong:60::ultoa:186 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::return#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  main:7::queen:45::print:30::printf_ulong:92::ultoa:186 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::return#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [301] (dword) ultoa::value#0 ← (dword) ultoa_append::return#0 [ printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa::value#0 ] ( main:7::printf_ulong:60::ultoa:186 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa::value#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count ultoa::value#1 } }  main:7::queen:45::print:30::printf_ulong:92::ultoa:186 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa::value#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [306] *((byte*) uctoa::buffer#11) ← *((const byte*) DIGITS + (byte) uctoa::value#2) [ printf_buffer uctoa::buffer#11 ] ( main:7::queen:45::print:30::printf_uchar:103::uctoa:209 [ queen::r queen::column count print::i1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer uctoa::buffer#11 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 uctoa::value#1 } }  main:7::queen:45::print:30::printf_uchar:114::uctoa:209 [ queen::r queen::column count print::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer uctoa::buffer#11 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 uctoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [307] (byte*) uctoa::buffer#3 ← ++ (byte*) uctoa::buffer#11 [ printf_buffer uctoa::buffer#3 ] ( main:7::queen:45::print:30::printf_uchar:103::uctoa:209 [ queen::r queen::column count print::i1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer uctoa::buffer#3 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 uctoa::value#1 } }  main:7::queen:45::print:30::printf_uchar:114::uctoa:209 [ queen::r queen::column count print::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer uctoa::buffer#3 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 uctoa::value#1 } }  ) always clobbers reg byte a 
Statement [308] *((byte*) uctoa::buffer#3) ← (byte) 0 [ printf_buffer ] ( main:7::queen:45::print:30::printf_uchar:103::uctoa:209 [ queen::r queen::column count print::i1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 uctoa::value#1 } }  main:7::queen:45::print:30::printf_uchar:114::uctoa:209 [ queen::r queen::column count print::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 uctoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [315] (byte*) uctoa_append::buffer#0 ← (byte*) uctoa::buffer#11 [ printf_buffer uctoa::digit#2 uctoa::value#2 uctoa::buffer#11 uctoa::digit_value#0 uctoa_append::buffer#0 ] ( main:7::queen:45::print:30::printf_uchar:103::uctoa:209 [ queen::r queen::column count print::i1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer uctoa::digit#2 uctoa::value#2 uctoa::buffer#11 uctoa::digit_value#0 uctoa_append::buffer#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  main:7::queen:45::print:30::printf_uchar:114::uctoa:209 [ queen::r queen::column count print::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer uctoa::digit#2 uctoa::value#2 uctoa::buffer#11 uctoa::digit_value#0 uctoa_append::buffer#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [322] (byte*) conio_line_text ← (byte*) conio_line_text + (byte) $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:7::cputs:34::cputc:139::cputln:220 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:220 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:220 [ count cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:220 [ cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:220 [ cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:220 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:220 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:220 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:220 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:220 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:220 [ cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:220 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:220 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:220 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:220 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:220 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:220 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:220 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:220 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:220 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:220 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:220 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:220 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:220 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:223 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:223 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:223 [ count cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:223 [ cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:223 [ cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:223 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:223 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:223 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:223 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:223 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:223 [ cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:223 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:223 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:223 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:223 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:223 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:223 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:223 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:223 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:223 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:223 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:223 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:223 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:223 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [323] (byte*) conio_line_color ← (byte*) conio_line_color + (byte) $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:7::cputs:34::cputc:139::cputln:220 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:220 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:220 [ count cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:220 [ cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:220 [ cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:220 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:220 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:220 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:220 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:220 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:220 [ cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:220 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:220 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:220 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:220 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:220 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:220 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:220 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:220 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:220 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:220 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:220 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:220 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:220 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:223 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:223 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:223 [ count cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:223 [ cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:223 [ cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:223 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:223 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:223 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:223 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:223 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:223 [ cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:223 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:223 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:223 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:223 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:223 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:223 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:223 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:223 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:223 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:223 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:223 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:223 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:223 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [324] (byte) conio_cursor_x ← (byte) 0 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:7::cputs:34::cputc:139::cputln:220 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:220 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:220 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:220 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:220 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:220 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:220 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:220 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:220 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:220 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:220 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:220 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:220 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:220 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:220 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:220 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:220 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:220 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:220 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:220 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:220 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:220 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:220 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:220 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:223 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:223 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:223 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:223 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:223 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:223 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:223 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:223 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:223 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:223 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:223 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:223 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:223 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:223 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:223 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:223 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:223 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:223 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:223 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:223 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:223 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:223 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:223 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:223 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [330] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] ( main:7::printf_uint:38::utoa:142::utoa_append:241 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [331] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2) [ utoa_append::value#2 ] ( main:7::printf_uint:38::utoa:142::utoa_append:241 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::value#2 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Statement [334] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] ( main:7::printf_uint:38::utoa:142::utoa_append:241 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [337] if((byte) 0!=*((byte*) strlen::str#3)) goto strlen::@2 [ printf_buffer strlen::len#2 strlen::str#3 ] ( main:7::printf_uint:38::printf_number_buffer:144::strlen:248 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_buffer strlen::len#2 strlen::str#3 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strlen::return#2 = strlen::len#2 } }  main:7::printf_ulong:60::printf_number_buffer:188::strlen:248 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_buffer strlen::len#2 strlen::str#3 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strlen::return#2 = strlen::len#2 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::strlen:248 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_buffer strlen::len#2 strlen::str#3 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strlen::return#2 = strlen::len#2 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::strlen:248 [ queen::r queen::column count print::i1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_buffer strlen::len#2 strlen::str#3 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { strlen::return#2 = strlen::len#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::strlen:248 [ queen::r queen::column count print::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_buffer strlen::len#2 strlen::str#3 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { strlen::return#2 = strlen::len#2 } }  ) always clobbers reg byte a reg byte y 
Statement [350] if((byte) 0!=*((byte*) strupr::src#2)) goto strupr::@2 [ strupr::src#2 ] ( main:7::printf_uint:38::printf_number_buffer:144::strupr:273 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  main:7::printf_ulong:60::printf_number_buffer:188::strupr:273 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::strupr:273 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::strupr:273 [ queen::r queen::column count print::i1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::strupr:273 [ queen::r queen::column count print::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  ) always clobbers reg byte a reg byte y 
Statement [352] (byte) toupper::ch#0 ← *((byte*) strupr::src#2) [ strupr::src#2 toupper::ch#0 ] ( main:7::printf_uint:38::printf_number_buffer:144::strupr:273 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::ch#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { toupper::return#2 = toupper::return#3 } }  main:7::printf_ulong:60::printf_number_buffer:188::strupr:273 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::ch#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { toupper::return#2 = toupper::return#3 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::strupr:273 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::ch#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { toupper::return#2 = toupper::return#3 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::strupr:273 [ queen::r queen::column count print::i1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::ch#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { toupper::return#2 = toupper::return#3 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::strupr:273 [ queen::r queen::column count print::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::ch#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { toupper::return#2 = toupper::return#3 } }  ) always clobbers reg byte a reg byte y 
Statement [356] *((byte*) strupr::src#2) ← (byte~) strupr::$0 [ strupr::src#2 ] ( main:7::printf_uint:38::printf_number_buffer:144::strupr:273 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  main:7::printf_ulong:60::printf_number_buffer:188::strupr:273 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::strupr:273 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::strupr:273 [ queen::r queen::column count print::i1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::strupr:273 [ queen::r queen::column count print::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  ) always clobbers reg byte y 
Statement [360] if((dword) ultoa_append::value#2>=(dword) ultoa_append::sub#0) goto ultoa_append::@2 [ ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#2 ultoa_append::digit#2 ] ( main:7::printf_ulong:60::ultoa:186::ultoa_append:299 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#2 ultoa_append::digit#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  main:7::queen:45::print:30::printf_ulong:92::ultoa:186::ultoa_append:299 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#2 ultoa_append::digit#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [361] *((byte*) ultoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) ultoa_append::digit#2) [ ultoa_append::value#2 ] ( main:7::printf_ulong:60::ultoa:186::ultoa_append:299 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::value#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  main:7::queen:45::print:30::printf_ulong:92::ultoa:186::ultoa_append:299 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::value#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Statement [364] (dword) ultoa_append::value#1 ← (dword) ultoa_append::value#2 - (dword) ultoa_append::sub#0 [ ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#1 ultoa_append::digit#1 ] ( main:7::printf_ulong:60::ultoa:186::ultoa_append:299 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#1 ultoa_append::digit#1 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  main:7::queen:45::print:30::printf_ulong:92::ultoa:186::ultoa_append:299 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#1 ultoa_append::digit#1 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [368] *((byte*) uctoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) uctoa_append::digit#2) [ uctoa_append::value#2 ] ( main:7::queen:45::print:30::printf_uchar:103::uctoa:209::uctoa_append:318 [ queen::r queen::column count print::i1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer uctoa::digit#2 uctoa::buffer#11 uctoa_append::value#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  main:7::queen:45::print:30::printf_uchar:114::uctoa:209::uctoa_append:318 [ queen::r queen::column count print::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer uctoa::digit#2 uctoa::buffer#11 uctoa_append::value#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Statement [371] (byte) uctoa_append::value#1 ← (byte) uctoa_append::value#2 - (byte) uctoa_append::sub#0 [ uctoa_append::buffer#0 uctoa_append::sub#0 uctoa_append::value#1 uctoa_append::digit#1 ] ( main:7::queen:45::print:30::printf_uchar:103::uctoa:209::uctoa_append:318 [ queen::r queen::column count print::i1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer uctoa::digit#2 uctoa::buffer#11 uctoa_append::buffer#0 uctoa_append::sub#0 uctoa_append::value#1 uctoa_append::digit#1 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  main:7::queen:45::print:30::printf_uchar:114::uctoa:209::uctoa_append:318 [ queen::r queen::column count print::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer uctoa::digit#2 uctoa::buffer#11 uctoa_append::buffer#0 uctoa_append::sub#0 uctoa_append::value#1 uctoa_append::digit#1 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [372] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return [ conio_cursor_y conio_line_text conio_line_color ] ( main:7::cputs:34::cputc:139::cputln:220::cscroll:326 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:220::cscroll:326 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:220::cscroll:326 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:220::cscroll:326 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:220::cscroll:326 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:220::cscroll:326 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:220::cscroll:326 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:220::cscroll:326 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:220::cscroll:326 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:220::cscroll:326 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:220::cscroll:326 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:220::cscroll:326 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:220::cscroll:326 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:220::cscroll:326 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:220::cscroll:326 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:220::cscroll:326 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:223::cscroll:326 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:223::cscroll:326 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:223::cscroll:326 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:223::cscroll:326 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:223::cscroll:326 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:223::cscroll:326 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:223::cscroll:326 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:223::cscroll:326 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:223::cscroll:326 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:223::cscroll:326 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:223::cscroll:326 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:223::cscroll:326 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:223::cscroll:326 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:223::cscroll:326 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:223::cscroll:326 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:223::cscroll:326 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [381] (byte*) conio_line_text ← (byte*) conio_line_text - (byte) $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:7::cputs:34::cputc:139::cputln:220::cscroll:326 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:220::cscroll:326 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:220::cscroll:326 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:220::cscroll:326 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:220::cscroll:326 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:220::cscroll:326 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:220::cscroll:326 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:220::cscroll:326 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:220::cscroll:326 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:220::cscroll:326 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:220::cscroll:326 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:220::cscroll:326 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:220::cscroll:326 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:220::cscroll:326 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:220::cscroll:326 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:220::cscroll:326 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:223::cscroll:326 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:223::cscroll:326 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:223::cscroll:326 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:223::cscroll:326 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:223::cscroll:326 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:223::cscroll:326 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:223::cscroll:326 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:223::cscroll:326 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:223::cscroll:326 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:223::cscroll:326 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:223::cscroll:326 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:223::cscroll:326 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:223::cscroll:326 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:223::cscroll:326 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:223::cscroll:326 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:223::cscroll:326 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [382] (byte*) conio_line_color ← (byte*) conio_line_color - (byte) $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:7::cputs:34::cputc:139::cputln:220::cscroll:326 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:220::cscroll:326 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:220::cscroll:326 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:220::cscroll:326 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:220::cscroll:326 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:220::cscroll:326 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:220::cscroll:326 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:220::cscroll:326 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:220::cscroll:326 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:220::cscroll:326 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:220::cscroll:326 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:220::cscroll:326 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:220::cscroll:326 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:220::cscroll:326 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:220::cscroll:326 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:220::cscroll:326 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:223::cscroll:326 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:223::cscroll:326 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:223::cscroll:326 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:223::cscroll:326 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:223::cscroll:326 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:223::cscroll:326 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:223::cscroll:326 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:223::cscroll:326 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:223::cscroll:326 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:223::cscroll:326 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:223::cscroll:326 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:223::cscroll:326 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:223::cscroll:326 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:223::cscroll:326 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:223::cscroll:326 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:223::cscroll:326 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [387] (byte) toupper::return#0 ← (byte) toupper::ch#0 + (byte) 'A'-(byte) 'a' [ toupper::return#0 ] ( main:7::printf_uint:38::printf_number_buffer:144::strupr:273::toupper:353 [ count TOD_ZERO conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::return#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { toupper::return#2 = toupper::return#3 } }  main:7::printf_ulong:60::printf_number_buffer:188::strupr:273::toupper:353 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::return#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { toupper::return#2 = toupper::return#3 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::strupr:273::toupper:353 [ queen::r queen::column count conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::return#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { toupper::return#2 = toupper::return#3 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::strupr:273::toupper:353 [ queen::r queen::column count print::i1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::return#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { toupper::return#2 = toupper::return#3 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::strupr:273::toupper:353 [ queen::r queen::column count print::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::return#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { toupper::return#2 = toupper::return#3 } }  ) always clobbers reg byte a 
Statement [391] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28 [ memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] ( main:7::cputs:34::cputc:139::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:220::cscroll:326::memcpy:374 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:220::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:220::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:220::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:374 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:374 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:223::cscroll:326::memcpy:374 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:223::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:223::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:223::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:374 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:374 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:220::cscroll:326::memcpy:376 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:220::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:220::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:220::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:376 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:376 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:223::cscroll:326::memcpy:376 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:223::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:223::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:223::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:376 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:376 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [392] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2 [ memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] ( main:7::cputs:34::cputc:139::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:220::cscroll:326::memcpy:374 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:220::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:220::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:220::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:374 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:374 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:223::cscroll:326::memcpy:374 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:223::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:223::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:223::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:374 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:374 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:220::cscroll:326::memcpy:376 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:220::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:220::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:220::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:376 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:376 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:223::cscroll:326::memcpy:376 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:223::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:223::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:223::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:376 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:376 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [393] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2 [ memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] ( main:7::cputs:34::cputc:139::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:220::cscroll:326::memcpy:374 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:220::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:220::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:220::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:374 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:374 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:223::cscroll:326::memcpy:374 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:223::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:223::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:223::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:374 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:374 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:220::cscroll:326::memcpy:376 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:220::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:220::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:220::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:376 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:376 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:223::cscroll:326::memcpy:376 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:223::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:223::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:223::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:376 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:376 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [395] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2 [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( main:7::cputs:34::cputc:139::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:220::cscroll:326::memcpy:374 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:220::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:220::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:220::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:374 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:374 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:223::cscroll:326::memcpy:374 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:223::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:223::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:223::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:374 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:374 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:220::cscroll:326::memcpy:376 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:220::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:220::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:220::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:376 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:376 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:223::cscroll:326::memcpy:376 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:223::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:223::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:223::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:376 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:376 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [397] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( main:7::cputs:34::cputc:139::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:220::cscroll:326::memcpy:374 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:220::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:220::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:220::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:374 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:374 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:223::cscroll:326::memcpy:374 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:223::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:223::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:223::cscroll:326::memcpy:374 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:374 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:374 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:374 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:374 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:374 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:220::cscroll:326::memcpy:376 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:220::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:220::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:220::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:376 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:376 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:223::cscroll:326::memcpy:376 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:223::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:223::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:223::cscroll:326::memcpy:376 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:376 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:376 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:376 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:376 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memcpy:376 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a reg byte y 
Statement [401] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (byte) $28 [ memset::str#3 memset::c#4 memset::end#0 ] ( main:7::cputs:34::cputc:139::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:220::cscroll:326::memset:378 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:220::cscroll:326::memset:378 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:220::cscroll:326::memset:378 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:220::cscroll:326::memset:378 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memset:378 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memset:378 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:378 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:378 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:378 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:223::cscroll:326::memset:378 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:223::cscroll:326::memset:378 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:223::cscroll:326::memset:378 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:223::cscroll:326::memset:378 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memset:378 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memset:378 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:378 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:378 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:378 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:220::cscroll:326::memset:380 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:220::cscroll:326::memset:380 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:220::cscroll:326::memset:380 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:220::cscroll:326::memset:380 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memset:380 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memset:380 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:380 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:380 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:380 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:223::cscroll:326::memset:380 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:223::cscroll:326::memset:380 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:223::cscroll:326::memset:380 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:223::cscroll:326::memset:380 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memset:380 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memset:380 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:380 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:380 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:380 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [402] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3 [ memset::c#4 memset::end#0 memset::dst#4 ] ( main:7::cputs:34::cputc:139::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:220::cscroll:326::memset:378 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:220::cscroll:326::memset:378 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:220::cscroll:326::memset:378 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:220::cscroll:326::memset:378 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memset:378 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memset:378 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:378 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:378 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:378 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:223::cscroll:326::memset:378 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:223::cscroll:326::memset:378 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:223::cscroll:326::memset:378 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:223::cscroll:326::memset:378 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memset:378 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memset:378 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:378 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:378 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:378 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:220::cscroll:326::memset:380 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:220::cscroll:326::memset:380 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:220::cscroll:326::memset:380 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:220::cscroll:326::memset:380 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memset:380 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memset:380 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:380 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:380 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:380 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:223::cscroll:326::memset:380 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:223::cscroll:326::memset:380 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:223::cscroll:326::memset:380 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:223::cscroll:326::memset:380 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memset:380 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memset:380 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:380 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:380 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:380 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [404] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:7::cputs:34::cputc:139::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:220::cscroll:326::memset:378 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:220::cscroll:326::memset:378 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:220::cscroll:326::memset:378 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:220::cscroll:326::memset:378 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memset:378 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memset:378 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:378 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:378 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:378 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:223::cscroll:326::memset:378 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:223::cscroll:326::memset:378 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:223::cscroll:326::memset:378 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:223::cscroll:326::memset:378 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memset:378 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memset:378 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:378 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:378 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:378 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:220::cscroll:326::memset:380 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:220::cscroll:326::memset:380 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:220::cscroll:326::memset:380 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:220::cscroll:326::memset:380 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memset:380 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memset:380 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:380 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:380 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:380 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:223::cscroll:326::memset:380 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:223::cscroll:326::memset:380 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:223::cscroll:326::memset:380 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:223::cscroll:326::memset:380 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memset:380 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memset:380 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:380 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:380 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:380 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [406] *((byte*) memset::dst#2) ← (byte) memset::c#4 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:7::cputs:34::cputc:139::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:220::cscroll:326::memset:378 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:220::cscroll:326::memset:378 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:220::cscroll:326::memset:378 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:220::cscroll:326::memset:378 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memset:378 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memset:378 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:378 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:378 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:378 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:223::cscroll:326::memset:378 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:223::cscroll:326::memset:378 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:223::cscroll:326::memset:378 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:223::cscroll:326::memset:378 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memset:378 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memset:378 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:378 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:378 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:378 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:378 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:378 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:220::cscroll:326::memset:380 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:220::cscroll:326::memset:380 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:220::cscroll:326::memset:380 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:220::cscroll:326::memset:380 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memset:380 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memset:380 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:380 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:380 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:380 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:220::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::cputs:34::cputc:139::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:36::cputc:139::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:58::cputc:139::cputln:223::cscroll:326::memset:380 [ count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:62::cputc:139::cputln:223::cscroll:326::memset:380 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::cputs:66::cputc:139::cputln:223::cscroll:326::memset:380 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:90::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:94::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:101::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:109::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::cputs:112::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_string:64::cputs:192::cputc:139::cputln:223::cscroll:326::memset:380 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputs:275::cputc:139::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memset:380 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputs:275::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputs:275::cputc:139::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uint:38::printf_number_buffer:144::cputc:266::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:7::printf_ulong:60::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memset:380 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::cputc:266::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::cputc:266::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:380 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:263::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:380 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:270::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_uint:38::printf_number_buffer:144::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:380 [ count TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::printf_ulong:60::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:380 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_ulong:92::printf_number_buffer:188::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:103::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:7::queen:45::print:30::printf_uchar:114::printf_number_buffer:211::printf_padding:280::cputc:346::cputln:223::cscroll:326::memset:380 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a reg byte y 
Potential registers zp[1]:2 [ legal::i#2 legal::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ legal::return#4 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ print::i#2 print::i#1 ] : zp[1]:4 , reg byte x , 
Potential registers zp[1]:5 [ print::i1#2 print::i1#1 ] : zp[1]:5 , reg byte x , 
Potential registers zp[1]:6 [ print::j#2 print::j#1 ] : zp[1]:6 , reg byte x , 
Potential registers zp[1]:7 [ clrscr::l#2 clrscr::l#1 ] : zp[1]:7 , reg byte x , reg byte y , 
Potential registers zp[2]:8 [ clrscr::line_text#5 clrscr::line_text#1 ] : zp[2]:8 , 
Potential registers zp[2]:10 [ clrscr::line_cols#5 clrscr::line_cols#1 ] : zp[2]:10 , 
Potential registers zp[1]:12 [ clrscr::c#2 clrscr::c#1 ] : zp[1]:12 , reg byte x , reg byte y , 
Potential registers zp[2]:13 [ cputs::s#13 cputs::s#14 cputs::s#0 ] : zp[2]:13 , 
Potential registers zp[4]:15 [ printf_ulong::uvalue#2 printf_ulong::uvalue#0 printf_ulong::uvalue#1 ] : zp[4]:15 , 
Potential registers zp[1]:19 [ diff::a#2 diff::a#0 diff::a#1 ] : zp[1]:19 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:20 [ diff::b#2 diff::b#0 diff::b#1 ] : zp[1]:20 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:21 [ diff::return#4 diff::return#2 diff::return#3 ] : zp[1]:21 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:22 [ printf_uchar::uvalue#2 printf_uchar::uvalue#1 printf_uchar::uvalue#0 ] : zp[1]:22 , reg byte x , reg byte y , 
Potential registers zp[1]:23 [ cputc::c#3 cputc::c#0 cputc::c#2 cputc::c#1 ] : zp[1]:23 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:24 [ utoa::digit#2 utoa::digit#1 ] : zp[1]:24 , reg byte x , 
Potential registers zp[2]:25 [ utoa::value#2 utoa::value#6 utoa::value#0 ] : zp[2]:25 , 
Potential registers zp[1]:27 [ utoa::started#2 utoa::started#4 ] : zp[1]:27 , reg byte x , reg byte y , 
Potential registers zp[2]:28 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ] : zp[2]:28 , 
Potential registers zp[1]:30 [ printf_number_buffer::format_min_length#3 ] : zp[1]:30 , reg byte x , 
Potential registers zp[1]:31 [ printf_number_buffer::format_justify_left#10 ] : zp[1]:31 , reg byte x , 
Potential registers zp[1]:32 [ printf_number_buffer::format_zero_padding#10 ] : zp[1]:32 , reg byte x , 
Potential registers zp[1]:33 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ] : zp[1]:33 , reg byte x , 
Potential registers zp[1]:34 [ printf_number_buffer::format_upper_case#10 ] : zp[1]:34 , reg byte x , 
Potential registers zp[1]:35 [ printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 ] : zp[1]:35 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:36 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ] : zp[1]:36 , reg byte x , 
Potential registers zp[1]:37 [ ultoa::digit#2 ultoa::digit#1 ] : zp[1]:37 , reg byte x , 
Potential registers zp[4]:38 [ ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ] : zp[4]:38 , 
Potential registers zp[1]:42 [ ultoa::started#2 ultoa::started#4 ] : zp[1]:42 , reg byte x , reg byte y , 
Potential registers zp[2]:43 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ] : zp[2]:43 , 
Potential registers zp[1]:45 [ uctoa::digit#2 uctoa::digit#1 ] : zp[1]:45 , reg byte x , 
Potential registers zp[1]:46 [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ] : zp[1]:46 , reg byte x , reg byte y , 
Potential registers zp[1]:47 [ uctoa::started#2 uctoa::started#4 ] : zp[1]:47 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:48 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 ] : zp[2]:48 , 
Potential registers zp[2]:50 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] : zp[2]:50 , 
Potential registers zp[1]:52 [ utoa_append::digit#2 utoa_append::digit#1 ] : zp[1]:52 , reg byte x , reg byte y , 
Potential registers zp[2]:53 [ strlen::str#3 strlen::str#0 ] : zp[2]:53 , 
Potential registers zp[2]:55 [ strlen::len#2 strlen::len#1 ] : zp[2]:55 , 
Potential registers zp[1]:57 [ printf_padding::length#6 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ] : zp[1]:57 , reg byte x , 
Potential registers zp[1]:58 [ printf_padding::pad#7 ] : zp[1]:58 , reg byte x , 
Potential registers zp[1]:59 [ printf_padding::i#2 printf_padding::i#1 ] : zp[1]:59 , reg byte x , 
Potential registers zp[2]:60 [ strupr::src#2 strupr::src#1 ] : zp[2]:60 , 
Potential registers zp[4]:62 [ ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ] : zp[4]:62 , 
Potential registers zp[1]:66 [ ultoa_append::digit#2 ultoa_append::digit#1 ] : zp[1]:66 , reg byte x , reg byte y , 
Potential registers zp[1]:67 [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ] : zp[1]:67 , reg byte x , 
Potential registers zp[1]:68 [ uctoa_append::digit#2 uctoa_append::digit#1 ] : zp[1]:68 , reg byte x , reg byte y , 
Potential registers zp[1]:69 [ toupper::return#2 toupper::return#0 toupper::ch#0 ] : zp[1]:69 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:70 [ memcpy::source#2 ] : zp[2]:70 , 
Potential registers zp[2]:72 [ memcpy::destination#2 ] : zp[2]:72 , 
Potential registers zp[2]:74 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] : zp[2]:74 , 
Potential registers zp[2]:76 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] : zp[2]:76 , 
Potential registers zp[2]:78 [ memset::str#3 ] : zp[2]:78 , 
Potential registers zp[1]:80 [ memset::c#4 ] : zp[1]:80 , reg byte x , 
Potential registers zp[2]:81 [ memset::dst#2 memset::dst#4 memset::dst#1 ] : zp[2]:81 , 
Potential registers zp[1]:83 [ conio_cursor_x ] : zp[1]:83 , 
Potential registers zp[1]:84 [ conio_cursor_y ] : zp[1]:84 , 
Potential registers zp[2]:85 [ conio_line_text ] : zp[2]:85 , 
Potential registers zp[2]:87 [ conio_line_color ] : zp[2]:87 , 
Potential registers zp[4]:89 [ count ] : zp[4]:89 , 
Potential registers zp[1]:93 [ queen::row#0 ] : zp[1]:93 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:94 [ queen::r ] : zp[1]:94 , 
Potential registers zp[1]:95 [ queen::column ] : zp[1]:95 , 
Potential registers zp[1]:96 [ legal::row#0 ] : zp[1]:96 , reg byte x , reg byte y , 
Potential registers zp[1]:97 [ legal::column#0 ] : zp[1]:97 , reg byte x , reg byte y , 
Potential registers zp[1]:98 [ legal::return#0 ] : zp[1]:98 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:99 [ queen::$1 ] : zp[1]:99 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:100 [ queen::$4 ] : zp[1]:100 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:101 [ tod_init::tod_TENTHS#0 ] : zp[1]:101 , reg byte x , reg byte y , 
Potential registers zp[1]:102 [ tod_init::tod_SEC#0 ] : zp[1]:102 , reg byte x , reg byte y , 
Potential registers zp[1]:103 [ tod_init::tod_MIN#0 ] : zp[1]:103 , reg byte x , reg byte y , 
Potential registers zp[1]:104 [ tod_init::tod_HOURS#0 ] : zp[1]:104 , reg byte x , reg byte y , 
Potential registers zp[1]:105 [ tod_read::return_TENTHS#2 ] : zp[1]:105 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:106 [ tod_read::return_SEC#2 ] : zp[1]:106 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:107 [ tod_read::return_MIN#2 ] : zp[1]:107 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:108 [ tod_read::return_HOURS#2 ] : zp[1]:108 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:109 [ tod_str::tod_TENTHS#0 ] : zp[1]:109 , reg byte x , reg byte y , 
Potential registers zp[1]:110 [ tod_str::tod_SEC#0 ] : zp[1]:110 , reg byte x , reg byte y , 
Potential registers zp[1]:111 [ tod_str::tod_MIN#0 ] : zp[1]:111 , reg byte x , reg byte y , 
Potential registers zp[1]:112 [ tod_str::tod_HOURS#0 ] : zp[1]:112 , reg byte x , reg byte y , 
Potential registers zp[1]:113 [ legal::$0 ] : zp[1]:113 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:114 [ diff::return#0 ] : zp[1]:114 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:115 [ legal::$3 ] : zp[1]:115 , reg byte x , reg byte y , 
Potential registers zp[1]:116 [ diff::return#1 ] : zp[1]:116 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:117 [ legal::$4 ] : zp[1]:117 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:118 [ cputs::c#1 ] : zp[1]:118 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:119 [ tod_read::return_HOURS#0 ] : zp[1]:119 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:120 [ tod_read::return_MIN#0 ] : zp[1]:120 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:121 [ tod_read::return_SEC#0 ] : zp[1]:121 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:122 [ tod_read::return_TENTHS#0 ] : zp[1]:122 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:123 [ tod_str::$0 ] : zp[1]:123 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:124 [ tod_str::$1 ] : zp[1]:124 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:125 [ tod_str::$2 ] : zp[1]:125 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:126 [ tod_str::$3 ] : zp[1]:126 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:127 [ tod_str::$4 ] : zp[1]:127 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:128 [ tod_str::$5 ] : zp[1]:128 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:129 [ tod_str::$6 ] : zp[1]:129 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:130 [ tod_str::$7 ] : zp[1]:130 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:131 [ tod_str::$8 ] : zp[1]:131 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:132 [ tod_str::$9 ] : zp[1]:132 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:133 [ tod_str::$10 ] : zp[1]:133 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:134 [ tod_str::$11 ] : zp[1]:134 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:135 [ tod_str::$12 ] : zp[1]:135 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:136 [ tod_str::$13 ] : zp[1]:136 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:137 [ tod_str::$14 ] : zp[1]:137 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:138 [ tod_str::$15 ] : zp[1]:138 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:139 [ utoa::$11 ] : zp[1]:139 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:140 [ utoa::buffer#3 ] : zp[2]:140 , 
Potential registers zp[1]:142 [ utoa::$10 ] : zp[1]:142 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:143 [ utoa::digit_value#0 ] : zp[2]:143 , 
Potential registers zp[2]:145 [ utoa_append::buffer#0 ] : zp[2]:145 , 
Potential registers zp[2]:147 [ utoa_append::sub#0 ] : zp[2]:147 , 
Potential registers zp[2]:149 [ utoa_append::return#0 ] : zp[2]:149 , 
Potential registers zp[2]:151 [ strlen::return#2 ] : zp[2]:151 , 
Potential registers zp[2]:153 [ printf_number_buffer::$19 ] : zp[2]:153 , 
Potential registers zp[1]:155 [ ultoa::$11 ] : zp[1]:155 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:156 [ ultoa::buffer#3 ] : zp[2]:156 , 
Potential registers zp[1]:158 [ ultoa::$10 ] : zp[1]:158 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[4]:159 [ ultoa::digit_value#0 ] : zp[4]:159 , 
Potential registers zp[2]:163 [ ultoa_append::buffer#0 ] : zp[2]:163 , 
Potential registers zp[4]:165 [ ultoa_append::sub#0 ] : zp[4]:165 , 
Potential registers zp[4]:169 [ ultoa_append::return#0 ] : zp[4]:169 , 
Potential registers zp[2]:173 [ uctoa::buffer#3 ] : zp[2]:173 , 
Potential registers zp[1]:175 [ uctoa::digit_value#0 ] : zp[1]:175 , reg byte x , reg byte y , 
Potential registers zp[2]:176 [ uctoa_append::buffer#0 ] : zp[2]:176 , 
Potential registers zp[1]:178 [ uctoa_append::sub#0 ] : zp[1]:178 , reg byte x , reg byte y , 
Potential registers zp[1]:179 [ uctoa_append::return#0 ] : zp[1]:179 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:180 [ toupper::return#3 ] : zp[1]:180 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:181 [ strupr::$0 ] : zp[1]:181 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:182 [ memcpy::src_end#0 ] : zp[2]:182 , 
Potential registers zp[2]:184 [ memset::end#0 ] : zp[2]:184 , 
Potential registers mem[12] [ printf_buffer ] : mem[12] , 
Potential registers mem[4] [ TOD_ZERO ] : mem[4] , 

REGISTER UPLIFT SCOPES
Uplift Scope [memcpy] 30,000,000,000,000,124,000,000,000,000,000,000,000,000,000,000: zp[2]:74 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] 20,000,000,000,000,233,000,000,000,000,000,000,000,000,000,000: zp[2]:76 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] 1,250,000,000,000,012,500,000,000,000,000,000,000,000,000,000: zp[2]:182 [ memcpy::src_end#0 ] 0: zp[2]:70 [ memcpy::source#2 ] 0: zp[2]:72 [ memcpy::destination#2 ] 
Uplift Scope [memset] 33,333,333,333,333,566,000,000,000,000,000,000,000,000,000,000: zp[2]:81 [ memset::dst#2 memset::dst#4 memset::dst#1 ] 1,666,666,666,666,683,500,000,000,000,000,000,000,000,000,000: zp[2]:184 [ memset::end#0 ] 1,428,571,428,571,428,700,000,000,000,000,000,000,000,000,000: zp[1]:80 [ memset::c#4 ] 0: zp[2]:78 [ memset::str#3 ] 
Uplift Scope [uctoa_append] 25,000,000,000,000,550,000,000,000,000,000,000,000,000: zp[1]:67 [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ] 20,000,000,000,000,500,000,000,000,000,000,000,000,000: zp[1]:68 [ uctoa_append::digit#2 uctoa_append::digit#1 ] 3,333,333,333,333,350,000,000,000,000,000,000,000,000: zp[1]:178 [ uctoa_append::sub#0 ] 200,000,000,000,000,000,000,000,000: zp[1]:179 [ uctoa_append::return#0 ] 137,500,000,000,000,010,000,000,000: zp[2]:176 [ uctoa_append::buffer#0 ] 
Uplift Scope [] 162,436,548,223,350,250,000,000,000,000: zp[1]:84 [ conio_cursor_y ] 114,507,772,020,725,370,000,000,000,000: zp[2]:87 [ conio_line_color ] 113,333,333,333,333,340,000,000,000,000: zp[2]:85 [ conio_line_text ] 8,241,758,241,758,241,000,000,000,000: zp[1]:83 [ conio_cursor_x ] 24,691,358,025.01: zp[4]:89 [ count ] 0: mem[12] [ printf_buffer ] 0: mem[4] [ TOD_ZERO ] 
Uplift Scope [cputc] 127,500,000,000,000,230,000,000,000,000: zp[1]:23 [ cputc::c#3 cputc::c#0 cputc::c#2 cputc::c#1 ] 
Uplift Scope [toupper] 47,333,333,333,333,330,000,000,000,000: zp[1]:69 [ toupper::return#2 toupper::return#0 toupper::ch#0 ] 2,000,000,000,000,000,000,000,000,000: zp[1]:180 [ toupper::return#3 ] 
Uplift Scope [cputs] 20,000,000,000,001,500,000,000,000,000: zp[2]:13 [ cputs::s#13 cputs::s#14 cputs::s#0 ] 10,000,000,000,000,000,000,000,000,000: zp[1]:118 [ cputs::c#1 ] 
Uplift Scope [ultoa_append] 2,500,000,000,000,550,000,000,000,000: zp[4]:62 [ ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ] 2,000,000,000,000,500,000,000,000,000: zp[1]:66 [ ultoa_append::digit#2 ultoa_append::digit#1 ] 333,333,333,333,350,000,000,000,000: zp[4]:165 [ ultoa_append::sub#0 ] 200,000,000,000,002: zp[4]:169 [ ultoa_append::return#0 ] 137,500,000,000,000.25: zp[2]:163 [ ultoa_append::buffer#0 ] 
Uplift Scope [strupr] 2,714,285,714,285,714,000,000,000,000: zp[2]:60 [ strupr::src#2 strupr::src#1 ] 2,000,000,000,000,000,000,000,000,000: zp[1]:181 [ strupr::$0 ] 
Uplift Scope [strlen] 3,000,000,000,000,000,300,000,000,000: zp[2]:53 [ strlen::str#3 strlen::str#0 ] 1,500,000,000,000,025,000,000,000,000: zp[2]:55 [ strlen::len#2 strlen::len#1 ] 200,000,000,000,002: zp[2]:151 [ strlen::return#2 ] 
Uplift Scope [printf_padding] 2,750,000,000,000,000,400,000,000,000: zp[1]:59 [ printf_padding::i#2 printf_padding::i#1 ] 166,666,666,667,316,670,000,000,000: zp[1]:57 [ printf_padding::length#6 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ] 166,666,666,666,666,660,000,000,000: zp[1]:58 [ printf_padding::pad#7 ] 
Uplift Scope [uctoa] 383,333,333,333,350,040,000,000,000: zp[2]:48 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 ] 316,666,666,666,755,000,000,000,000: zp[1]:46 [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ] 230,769,230,769,230,770,000,000,000: zp[1]:45 [ uctoa::digit#2 uctoa::digit#1 ] 160,000,000,000,000,000,000,000,000: zp[1]:47 [ uctoa::started#2 uctoa::started#4 ] 60,000,000,000,000,010,000,000,000: zp[1]:175 [ uctoa::digit_value#0 ] 200,000,000,000,002: zp[2]:173 [ uctoa::buffer#3 ] 
Uplift Scope [ultoa] 378,571,428,571,575.4: zp[2]:43 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ] 307,142,857,143,554.25: zp[4]:38 [ ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ] 228,571,428,571,430.84: zp[1]:37 [ ultoa::digit#2 ultoa::digit#1 ] 200,000,000,000,002: zp[1]:158 [ ultoa::$10 ] 150,000,000,000,001.5: zp[1]:42 [ ultoa::started#2 ultoa::started#4 ] 60,000,000,000,000.59: zp[4]:159 [ ultoa::digit_value#0 ] 2,002: zp[1]:155 [ ultoa::$11 ] 2,002: zp[2]:156 [ ultoa::buffer#3 ] 
Uplift Scope [printf_number_buffer] 650,000,000,000,006.5: zp[1]:35 [ printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 ] 119,047,619,047,620.23: zp[1]:36 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ] 100,000,000,000,001: zp[2]:153 [ printf_number_buffer::$19 ] 35,500,000,000,416.3: zp[1]:33 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ] 10,000,000,000,000.1: zp[1]:30 [ printf_number_buffer::format_min_length#3 ] 9,375,000,000,000.09: zp[1]:32 [ printf_number_buffer::format_zero_padding#10 ] 6,451,612,903,225.87: zp[1]:31 [ printf_number_buffer::format_justify_left#10 ] 3,846,153,846,153.88: zp[1]:34 [ printf_number_buffer::format_upper_case#10 ] 
Uplift Scope [diff] 45,500,000,000,005: zp[1]:21 [ diff::return#4 diff::return#2 diff::return#3 ] 20,000,000,000,006.5: zp[1]:20 [ diff::b#2 diff::b#0 diff::b#1 ] 18,000,000,000,004.5: zp[1]:19 [ diff::a#2 diff::a#0 diff::a#1 ] 2,000,000,000,002: zp[1]:114 [ diff::return#0 ] 2,000,000,000,002: zp[1]:116 [ diff::return#1 ] 
Uplift Scope [print] 25,714,285,714,288.29: zp[1]:6 [ print::j#2 print::j#1 ] 3,000,000,000,003: zp[1]:4 [ print::i#2 print::i#1 ] 3,000,000,000,002.36: zp[1]:5 [ print::i1#2 print::i1#1 ] 
Uplift Scope [printf_uchar] 10,000,000,000,005.5: zp[1]:22 [ printf_uchar::uvalue#2 printf_uchar::uvalue#1 printf_uchar::uvalue#0 ] 
Uplift Scope [legal] 2,400,000,000,002.4: zp[1]:2 [ legal::i#2 legal::i#1 ] 2,000,000,000,002: zp[1]:98 [ legal::return#0 ] 2,000,000,000,002: zp[1]:113 [ legal::$0 ] 2,000,000,000,002: zp[1]:117 [ legal::$4 ] 333,333,333,333.67: zp[1]:3 [ legal::return#4 ] 333,333,333,333.67: zp[1]:115 [ legal::$3 ] 166,666,666,666.83: zp[1]:97 [ legal::column#0 ] 157,894,736,842.26: zp[1]:96 [ legal::row#0 ] 
Uplift Scope [queen] 2,000,000,000,002: zp[1]:99 [ queen::$1 ] 2,000,000,000,002: zp[1]:100 [ queen::$4 ] 294,117,647,065.06: zp[1]:95 [ queen::column ] 210,526,315,795: zp[1]:94 [ queen::r ] 202: zp[1]:93 [ queen::row#0 ] 
Uplift Scope [utoa_append] 25,055,003.5: zp[2]:50 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] 20,050,002.5: zp[1]:52 [ utoa_append::digit#2 utoa_append::digit#1 ] 3,335,000.5: zp[2]:147 [ utoa_append::sub#0 ] 20,002: zp[2]:149 [ utoa_append::return#0 ] 13,750.25: zp[2]:145 [ utoa_append::buffer#0 ] 
Uplift Scope [utoa] 38,003.93: zp[2]:28 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ] 30,717.36: zp[2]:25 [ utoa::value#2 utoa::value#6 utoa::value#0 ] 22,859.43: zp[1]:24 [ utoa::digit#2 utoa::digit#1 ] 20,002: zp[1]:142 [ utoa::$10 ] 15,001.5: zp[1]:27 [ utoa::started#2 utoa::started#4 ] 6,000.6: zp[2]:143 [ utoa::digit_value#0 ] 2,002: zp[1]:139 [ utoa::$11 ] 2,002: zp[2]:140 [ utoa::buffer#3 ] 
Uplift Scope [clrscr] 32,503.25: zp[1]:12 [ clrscr::c#2 clrscr::c#1 ] 2,501.38: zp[2]:10 [ clrscr::line_cols#5 clrscr::line_cols#1 ] 2,382.05: zp[2]:8 [ clrscr::line_text#5 clrscr::line_text#1 ] 2,335.67: zp[1]:7 [ clrscr::l#2 clrscr::l#1 ] 
Uplift Scope [tod_str] 202: zp[1]:123 [ tod_str::$0 ] 202: zp[1]:124 [ tod_str::$1 ] 202: zp[1]:125 [ tod_str::$2 ] 202: zp[1]:126 [ tod_str::$3 ] 202: zp[1]:127 [ tod_str::$4 ] 202: zp[1]:128 [ tod_str::$5 ] 202: zp[1]:129 [ tod_str::$6 ] 202: zp[1]:130 [ tod_str::$7 ] 202: zp[1]:131 [ tod_str::$8 ] 202: zp[1]:132 [ tod_str::$9 ] 202: zp[1]:133 [ tod_str::$10 ] 202: zp[1]:134 [ tod_str::$11 ] 202: zp[1]:135 [ tod_str::$12 ] 202: zp[1]:136 [ tod_str::$13 ] 202: zp[1]:137 [ tod_str::$14 ] 202: zp[1]:138 [ tod_str::$15 ] 53.25: zp[1]:112 [ tod_str::tod_HOURS#0 ] 19.36: zp[1]:111 [ tod_str::tod_MIN#0 ] 11.83: zp[1]:110 [ tod_str::tod_SEC#0 ] 8.52: zp[1]:109 [ tod_str::tod_TENTHS#0 ] 
Uplift Scope [tod_read] 37.33: zp[1]:122 [ tod_read::return_TENTHS#0 ] 22.4: zp[1]:121 [ tod_read::return_SEC#0 ] 16: zp[1]:120 [ tod_read::return_MIN#0 ] 12.44: zp[1]:119 [ tod_read::return_HOURS#0 ] 5.5: zp[1]:105 [ tod_read::return_TENTHS#2 ] 5.5: zp[1]:106 [ tod_read::return_SEC#2 ] 5.5: zp[1]:107 [ tod_read::return_MIN#2 ] 5.5: zp[1]:108 [ tod_read::return_HOURS#2 ] 
Uplift Scope [printf_ulong] 105.5: zp[4]:15 [ printf_ulong::uvalue#2 printf_ulong::uvalue#0 printf_ulong::uvalue#1 ] 
Uplift Scope [tod_init] 37.33: zp[1]:104 [ tod_init::tod_HOURS#0 ] 22.4: zp[1]:103 [ tod_init::tod_MIN#0 ] 16: zp[1]:102 [ tod_init::tod_SEC#0 ] 12.44: zp[1]:101 [ tod_init::tod_TENTHS#0 ] 
Uplift Scope [RADIX] 
Uplift Scope [MOS6526_CIA] 
Uplift Scope [MOS6569_VICII] 
Uplift Scope [MOS6581_SID] 
Uplift Scope [gotoxy] 
Uplift Scope [cputln] 
Uplift Scope [cscroll] 
Uplift Scope [printf_format_number] 
Uplift Scope [printf_buffer_number] 
Uplift Scope [printf_format_string] 
Uplift Scope [printf_uint] 
Uplift Scope [printf_string] 
Uplift Scope [TIME_OF_DAY] 
Uplift Scope [main] 
Uplift Scope [__start] 

Limited combination testing to 100 combinations of 256 possible.
Limited combination testing to 100 combinations of 1024 possible.
Limited combination testing to 100 combinations of 20736 possible.
Limited combination testing to 100 combinations of 65536 possible.
Attempting to uplift remaining variables inzp[1]:80 [ memset::c#4 ]
Attempting to uplift remaining variables inzp[1]:67 [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
Attempting to uplift remaining variables inzp[1]:68 [ uctoa_append::digit#2 uctoa_append::digit#1 ]
Attempting to uplift remaining variables inzp[1]:178 [ uctoa_append::sub#0 ]
Attempting to uplift remaining variables inzp[1]:84 [ conio_cursor_y ]
Attempting to uplift remaining variables inzp[1]:23 [ cputc::c#3 cputc::c#0 cputc::c#2 cputc::c#1 ]
Attempting to uplift remaining variables inzp[1]:69 [ toupper::return#2 toupper::return#0 toupper::ch#0 ]
Attempting to uplift remaining variables inzp[1]:118 [ cputs::c#1 ]
Attempting to uplift remaining variables inzp[1]:83 [ conio_cursor_x ]
Attempting to uplift remaining variables inzp[1]:59 [ printf_padding::i#2 printf_padding::i#1 ]
Attempting to uplift remaining variables inzp[1]:66 [ ultoa_append::digit#2 ultoa_append::digit#1 ]
Attempting to uplift remaining variables inzp[1]:180 [ toupper::return#3 ]
Attempting to uplift remaining variables inzp[1]:181 [ strupr::$0 ]
Attempting to uplift remaining variables inzp[1]:46 [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ]
Attempting to uplift remaining variables inzp[1]:45 [ uctoa::digit#2 uctoa::digit#1 ]
Attempting to uplift remaining variables inzp[1]:179 [ uctoa_append::return#0 ]
Attempting to uplift remaining variables inzp[1]:57 [ printf_padding::length#6 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ]
Attempting to uplift remaining variables inzp[1]:58 [ printf_padding::pad#7 ]
Attempting to uplift remaining variables inzp[1]:47 [ uctoa::started#2 uctoa::started#4 ]
Attempting to uplift remaining variables inzp[1]:175 [ uctoa::digit_value#0 ]
Attempting to uplift remaining variables inzp[1]:35 [ printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 ]
Attempting to uplift remaining variables inzp[1]:37 [ ultoa::digit#2 ultoa::digit#1 ]
Attempting to uplift remaining variables inzp[1]:158 [ ultoa::$10 ]
Attempting to uplift remaining variables inzp[1]:42 [ ultoa::started#2 ultoa::started#4 ]
Attempting to uplift remaining variables inzp[1]:36 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ]
Attempting to uplift remaining variables inzp[1]:21 [ diff::return#4 diff::return#2 diff::return#3 ]
Attempting to uplift remaining variables inzp[1]:33 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
Attempting to uplift remaining variables inzp[1]:6 [ print::j#2 print::j#1 ]
Attempting to uplift remaining variables inzp[1]:20 [ diff::b#2 diff::b#0 diff::b#1 ]
Attempting to uplift remaining variables inzp[1]:19 [ diff::a#2 diff::a#0 diff::a#1 ]
Attempting to uplift remaining variables inzp[1]:22 [ printf_uchar::uvalue#2 printf_uchar::uvalue#1 printf_uchar::uvalue#0 ]
Attempting to uplift remaining variables inzp[1]:30 [ printf_number_buffer::format_min_length#3 ]
Attempting to uplift remaining variables inzp[1]:32 [ printf_number_buffer::format_zero_padding#10 ]
Attempting to uplift remaining variables inzp[1]:31 [ printf_number_buffer::format_justify_left#10 ]
Attempting to uplift remaining variables inzp[1]:34 [ printf_number_buffer::format_upper_case#10 ]
Attempting to uplift remaining variables inzp[1]:4 [ print::i#2 print::i#1 ]
Attempting to uplift remaining variables inzp[1]:5 [ print::i1#2 print::i1#1 ]
Attempting to uplift remaining variables inzp[1]:2 [ legal::i#2 legal::i#1 ]
Attempting to uplift remaining variables inzp[1]:98 [ legal::return#0 ]
Attempting to uplift remaining variables inzp[1]:99 [ queen::$1 ]
Attempting to uplift remaining variables inzp[1]:100 [ queen::$4 ]
Attempting to uplift remaining variables inzp[1]:113 [ legal::$0 ]
Attempting to uplift remaining variables inzp[1]:114 [ diff::return#0 ]
Attempting to uplift remaining variables inzp[1]:116 [ diff::return#1 ]
Attempting to uplift remaining variables inzp[1]:117 [ legal::$4 ]
Attempting to uplift remaining variables inzp[1]:3 [ legal::return#4 ]
Attempting to uplift remaining variables inzp[1]:115 [ legal::$3 ]
Attempting to uplift remaining variables inzp[1]:95 [ queen::column ]
Attempting to uplift remaining variables inzp[1]:94 [ queen::r ]
Attempting to uplift remaining variables inzp[1]:97 [ legal::column#0 ]
Attempting to uplift remaining variables inzp[1]:96 [ legal::row#0 ]
Attempting to uplift remaining variables inzp[1]:52 [ utoa_append::digit#2 utoa_append::digit#1 ]
Attempting to uplift remaining variables inzp[1]:12 [ clrscr::c#2 clrscr::c#1 ]
Attempting to uplift remaining variables inzp[1]:24 [ utoa::digit#2 utoa::digit#1 ]
Attempting to uplift remaining variables inzp[1]:142 [ utoa::$10 ]
Attempting to uplift remaining variables inzp[1]:27 [ utoa::started#2 utoa::started#4 ]
Attempting to uplift remaining variables inzp[1]:7 [ clrscr::l#2 clrscr::l#1 ]
Attempting to uplift remaining variables inzp[1]:139 [ utoa::$11 ]
Attempting to uplift remaining variables inzp[1]:155 [ ultoa::$11 ]
Attempting to uplift remaining variables inzp[1]:93 [ queen::row#0 ]
Attempting to uplift remaining variables inzp[1]:123 [ tod_str::$0 ]
Attempting to uplift remaining variables inzp[1]:124 [ tod_str::$1 ]
Attempting to uplift remaining variables inzp[1]:125 [ tod_str::$2 ]
Attempting to uplift remaining variables inzp[1]:126 [ tod_str::$3 ]
Attempting to uplift remaining variables inzp[1]:127 [ tod_str::$4 ]
Attempting to uplift remaining variables inzp[1]:128 [ tod_str::$5 ]
Attempting to uplift remaining variables inzp[1]:129 [ tod_str::$6 ]
Attempting to uplift remaining variables inzp[1]:130 [ tod_str::$7 ]
Attempting to uplift remaining variables inzp[1]:131 [ tod_str::$8 ]
Attempting to uplift remaining variables inzp[1]:132 [ tod_str::$9 ]
Attempting to uplift remaining variables inzp[1]:133 [ tod_str::$10 ]
Attempting to uplift remaining variables inzp[1]:134 [ tod_str::$11 ]
Attempting to uplift remaining variables inzp[1]:135 [ tod_str::$12 ]
Attempting to uplift remaining variables inzp[1]:136 [ tod_str::$13 ]
Attempting to uplift remaining variables inzp[1]:137 [ tod_str::$14 ]
Attempting to uplift remaining variables inzp[1]:138 [ tod_str::$15 ]
Attempting to uplift remaining variables inzp[1]:112 [ tod_str::tod_HOURS#0 ]
Attempting to uplift remaining variables inzp[1]:104 [ tod_init::tod_HOURS#0 ]
Attempting to uplift remaining variables inzp[1]:122 [ tod_read::return_TENTHS#0 ]
Attempting to uplift remaining variables inzp[1]:103 [ tod_init::tod_MIN#0 ]
Attempting to uplift remaining variables inzp[1]:121 [ tod_read::return_SEC#0 ]
Attempting to uplift remaining variables inzp[1]:111 [ tod_str::tod_MIN#0 ]
Attempting to uplift remaining variables inzp[1]:102 [ tod_init::tod_SEC#0 ]
Attempting to uplift remaining variables inzp[1]:120 [ tod_read::return_MIN#0 ]
Attempting to uplift remaining variables inzp[1]:101 [ tod_init::tod_TENTHS#0 ]
Attempting to uplift remaining variables inzp[1]:119 [ tod_read::return_HOURS#0 ]
Attempting to uplift remaining variables inzp[1]:110 [ tod_str::tod_SEC#0 ]
Attempting to uplift remaining variables inzp[1]:109 [ tod_str::tod_TENTHS#0 ]
Attempting to uplift remaining variables inzp[1]:105 [ tod_read::return_TENTHS#2 ]
Attempting to uplift remaining variables inzp[1]:106 [ tod_read::return_SEC#2 ]
Attempting to uplift remaining variables inzp[1]:107 [ tod_read::return_MIN#2 ]
Attempting to uplift remaining variables inzp[1]:108 [ tod_read::return_HOURS#2 ]
Coalescing zero page register [ zp[4]:15 [ printf_ulong::uvalue#2 printf_ulong::uvalue#0 printf_ulong::uvalue#1 ] ] with [ zp[4]:89 [ count ] ] - score: 2
Coalescing zero page register [ zp[1]:19 [ diff::a#2 diff::a#0 diff::a#1 ] ] with [ zp[1]:21 [ diff::return#4 diff::return#2 diff::return#3 ] ] - score: 2
Coalescing zero page register [ zp[1]:3 [ legal::return#4 ] ] with [ zp[1]:98 [ legal::return#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:4 [ print::i#2 print::i#1 ] ] with [ zp[1]:22 [ printf_uchar::uvalue#2 printf_uchar::uvalue#1 printf_uchar::uvalue#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:23 [ cputc::c#3 cputc::c#0 cputc::c#2 cputc::c#1 ] ] with [ zp[1]:58 [ printf_padding::pad#7 ] ] - score: 1
Coalescing zero page register [ zp[1]:23 [ cputc::c#3 cputc::c#0 cputc::c#2 cputc::c#1 printf_padding::pad#7 ] ] with [ zp[1]:118 [ cputs::c#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:25 [ utoa::value#2 utoa::value#6 utoa::value#0 ] ] with [ zp[2]:50 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:25 [ utoa::value#2 utoa::value#6 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] ] with [ zp[2]:149 [ utoa_append::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:28 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ] ] with [ zp[2]:140 [ utoa::buffer#3 ] ] - score: 1
Coalescing zero page register [ zp[2]:28 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 ] ] with [ zp[2]:145 [ utoa_append::buffer#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:30 [ printf_number_buffer::format_min_length#3 ] ] with [ zp[1]:36 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ] ] - score: 1
Coalescing zero page register [ zp[4]:38 [ ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ] ] with [ zp[4]:62 [ ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ] ] - score: 1
Coalescing zero page register [ zp[4]:38 [ ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ] ] with [ zp[4]:169 [ ultoa_append::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:43 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ] ] with [ zp[2]:156 [ ultoa::buffer#3 ] ] - score: 1
Coalescing zero page register [ zp[2]:43 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ultoa::buffer#3 ] ] with [ zp[2]:163 [ ultoa_append::buffer#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:46 [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ] ] with [ zp[1]:67 [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ] ] - score: 1
Coalescing zero page register [ zp[1]:46 [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ] ] with [ zp[1]:179 [ uctoa_append::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:48 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 ] ] with [ zp[2]:173 [ uctoa::buffer#3 ] ] - score: 1
Coalescing zero page register [ zp[2]:48 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 uctoa::buffer#3 ] ] with [ zp[2]:176 [ uctoa_append::buffer#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:55 [ strlen::len#2 strlen::len#1 ] ] with [ zp[2]:151 [ strlen::return#2 ] ] - score: 1
Coalescing zero page register [ zp[1]:69 [ toupper::return#2 toupper::return#0 toupper::ch#0 ] ] with [ zp[1]:180 [ toupper::return#3 ] ] - score: 1
Coalescing zero page register [ zp[2]:70 [ memcpy::source#2 ] ] with [ zp[2]:74 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:72 [ memcpy::destination#2 ] ] with [ zp[2]:76 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:78 [ memset::str#3 ] ] with [ zp[2]:81 [ memset::dst#2 memset::dst#4 memset::dst#1 ] ] - score: 1
Coalescing zero page register [ zp[1]:93 [ queen::row#0 ] ] with [ zp[1]:94 [ queen::r ] ] - score: 1
Coalescing zero page register [ zp[1]:95 [ queen::column ] ] with [ zp[1]:97 [ legal::column#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:105 [ tod_read::return_TENTHS#2 ] ] with [ zp[1]:109 [ tod_str::tod_TENTHS#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:105 [ tod_read::return_TENTHS#2 tod_str::tod_TENTHS#0 ] ] with [ zp[1]:122 [ tod_read::return_TENTHS#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:106 [ tod_read::return_SEC#2 ] ] with [ zp[1]:110 [ tod_str::tod_SEC#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:106 [ tod_read::return_SEC#2 tod_str::tod_SEC#0 ] ] with [ zp[1]:121 [ tod_read::return_SEC#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:107 [ tod_read::return_MIN#2 ] ] with [ zp[1]:111 [ tod_str::tod_MIN#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:107 [ tod_read::return_MIN#2 tod_str::tod_MIN#0 ] ] with [ zp[1]:120 [ tod_read::return_MIN#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:108 [ tod_read::return_HOURS#2 ] ] with [ zp[1]:112 [ tod_str::tod_HOURS#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:108 [ tod_read::return_HOURS#2 tod_str::tod_HOURS#0 ] ] with [ zp[1]:119 [ tod_read::return_HOURS#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:114 [ diff::return#0 ] ] with [ zp[1]:115 [ legal::$3 ] ] - score: 1
Coalescing zero page register [ zp[1]:116 [ diff::return#1 ] ] with [ zp[1]:117 [ legal::$4 ] ] - score: 1
Coalescing zero page register [ zp[1]:123 [ tod_str::$0 ] ] with [ zp[1]:124 [ tod_str::$1 ] ] - score: 1
Coalescing zero page register [ zp[1]:125 [ tod_str::$2 ] ] with [ zp[1]:126 [ tod_str::$3 ] ] - score: 1
Coalescing zero page register [ zp[1]:127 [ tod_str::$4 ] ] with [ zp[1]:128 [ tod_str::$5 ] ] - score: 1
Coalescing zero page register [ zp[1]:129 [ tod_str::$6 ] ] with [ zp[1]:130 [ tod_str::$7 ] ] - score: 1
Coalescing zero page register [ zp[1]:131 [ tod_str::$8 ] ] with [ zp[1]:132 [ tod_str::$9 ] ] - score: 1
Coalescing zero page register [ zp[1]:133 [ tod_str::$10 ] ] with [ zp[1]:134 [ tod_str::$11 ] ] - score: 1
Coalescing zero page register [ zp[1]:135 [ tod_str::$12 ] ] with [ zp[1]:136 [ tod_str::$13 ] ] - score: 1
Coalescing zero page register [ zp[1]:137 [ tod_str::$14 ] ] with [ zp[1]:138 [ tod_str::$15 ] ] - score: 1
Coalescing zero page register [ zp[2]:143 [ utoa::digit_value#0 ] ] with [ zp[2]:147 [ utoa_append::sub#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:159 [ ultoa::digit_value#0 ] ] with [ zp[4]:165 [ ultoa_append::sub#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:175 [ uctoa::digit_value#0 ] ] with [ zp[1]:178 [ uctoa_append::sub#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:3 [ legal::return#4 legal::return#0 ] ] with [ zp[1]:99 [ queen::$1 ] ] - score: 1
Coalescing zero page register [ zp[1]:4 [ print::i#2 print::i#1 printf_uchar::uvalue#2 printf_uchar::uvalue#1 printf_uchar::uvalue#0 ] ] with [ zp[1]:5 [ print::i1#2 print::i1#1 ] ] - score: 1
Coalescing zero page register [ zp[1]:19 [ diff::a#2 diff::a#0 diff::a#1 diff::return#4 diff::return#2 diff::return#3 ] ] with [ zp[1]:116 [ diff::return#1 legal::$4 ] ] - score: 1
Coalescing zero page register [ zp[2]:55 [ strlen::len#2 strlen::len#1 strlen::return#2 ] ] with [ zp[2]:153 [ printf_number_buffer::$19 ] ] - score: 1
Coalescing zero page register [ zp[1]:69 [ toupper::return#2 toupper::return#0 toupper::ch#0 toupper::return#3 ] ] with [ zp[1]:181 [ strupr::$0 ] ] - score: 1
Coalescing zero page register [ zp[1]:93 [ queen::row#0 queen::r ] ] with [ zp[1]:96 [ legal::row#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:93 [ queen::row#0 queen::r legal::row#0 ] ] with [ zp[1]:100 [ queen::$4 ] ] - score: 1
Coalescing zero page register [ zp[1]:105 [ tod_read::return_TENTHS#2 tod_str::tod_TENTHS#0 tod_read::return_TENTHS#0 ] ] with [ zp[1]:137 [ tod_str::$14 tod_str::$15 ] ] - score: 1
Coalescing zero page register [ zp[1]:106 [ tod_read::return_SEC#2 tod_str::tod_SEC#0 tod_read::return_SEC#0 ] ] with [ zp[1]:133 [ tod_str::$10 tod_str::$11 ] ] - score: 1
Coalescing zero page register [ zp[1]:107 [ tod_read::return_MIN#2 tod_str::tod_MIN#0 tod_read::return_MIN#0 ] ] with [ zp[1]:129 [ tod_str::$6 tod_str::$7 ] ] - score: 1
Coalescing zero page register [ zp[1]:108 [ tod_read::return_HOURS#2 tod_str::tod_HOURS#0 tod_read::return_HOURS#0 ] ] with [ zp[1]:125 [ tod_str::$2 tod_str::$3 ] ] - score: 1
Coalescing zero page register [ zp[1]:4 [ print::i#2 print::i#1 printf_uchar::uvalue#2 printf_uchar::uvalue#1 printf_uchar::uvalue#0 print::i1#2 print::i1#1 ] ] with [ zp[1]:2 [ legal::i#2 legal::i#1 ] ]
Coalescing zero page register [ zp[1]:7 [ clrscr::l#2 clrscr::l#1 ] ] with [ zp[1]:3 [ legal::return#4 legal::return#0 queen::$1 ] ]
Coalescing zero page register [ zp[1]:12 [ clrscr::c#2 clrscr::c#1 ] ] with [ zp[1]:6 [ print::j#2 print::j#1 ] ]
Coalescing zero page register [ zp[2]:13 [ cputs::s#13 cputs::s#14 cputs::s#0 ] ] with [ zp[2]:8 [ clrscr::line_text#5 clrscr::line_text#1 ] ]
Coalescing zero page register [ zp[1]:23 [ cputc::c#3 cputc::c#0 cputc::c#2 cputc::c#1 printf_padding::pad#7 cputs::c#1 ] ] with [ zp[1]:19 [ diff::a#2 diff::a#0 diff::a#1 diff::return#4 diff::return#2 diff::return#3 diff::return#1 legal::$4 ] ]
Coalescing zero page register [ zp[1]:24 [ utoa::digit#2 utoa::digit#1 ] ] with [ zp[1]:20 [ diff::b#2 diff::b#0 diff::b#1 ] ]
Coalescing zero page register [ zp[2]:25 [ utoa::value#2 utoa::value#6 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 ] ] with [ zp[2]:10 [ clrscr::line_cols#5 clrscr::line_cols#1 ] ]
Coalescing zero page register [ zp[1]:30 [ printf_number_buffer::format_min_length#3 printf_number_buffer::padding#10 printf_number_buffer::padding#1 ] ] with [ zp[1]:27 [ utoa::started#2 utoa::started#4 ] ]
Coalescing zero page register [ zp[1]:37 [ ultoa::digit#2 ultoa::digit#1 ] ] with [ zp[1]:31 [ printf_number_buffer::format_justify_left#10 ] ]
Coalescing zero page register [ zp[1]:42 [ ultoa::started#2 ultoa::started#4 ] ] with [ zp[1]:32 [ printf_number_buffer::format_zero_padding#10 ] ]
Coalescing zero page register [ zp[2]:43 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ultoa::buffer#3 ultoa_append::buffer#0 ] ] with [ zp[2]:28 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 ] ]
Coalescing zero page register [ zp[1]:45 [ uctoa::digit#2 uctoa::digit#1 ] ] with [ zp[1]:33 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ] ]
Coalescing zero page register [ zp[1]:46 [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 uctoa_append::return#0 ] ] with [ zp[1]:34 [ printf_number_buffer::format_upper_case#10 ] ]
Coalescing zero page register [ zp[1]:47 [ uctoa::started#2 uctoa::started#4 ] ] with [ zp[1]:35 [ printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 ] ]
Coalescing zero page register [ zp[2]:53 [ strlen::str#3 strlen::str#0 ] ] with [ zp[2]:48 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 uctoa::buffer#3 uctoa_append::buffer#0 ] ]
Coalescing zero page register [ zp[1]:57 [ printf_padding::length#6 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ] ] with [ zp[1]:52 [ utoa_append::digit#2 utoa_append::digit#1 ] ]
Coalescing zero page register [ zp[1]:66 [ ultoa_append::digit#2 ultoa_append::digit#1 ] ] with [ zp[1]:59 [ printf_padding::i#2 printf_padding::i#1 ] ]
Coalescing zero page register [ zp[1]:69 [ toupper::return#2 toupper::return#0 toupper::ch#0 toupper::return#3 strupr::$0 ] ] with [ zp[1]:68 [ uctoa_append::digit#2 uctoa_append::digit#1 ] ]
Coalescing zero page register [ zp[2]:70 [ memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 ] ] with [ zp[2]:60 [ strupr::src#2 strupr::src#1 ] ]
Coalescing zero page register [ zp[2]:78 [ memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ] ] with [ zp[2]:72 [ memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] ]
Coalescing zero page register [ zp[1]:101 [ tod_init::tod_TENTHS#0 ] ] with [ zp[1]:80 [ memset::c#4 ] ]
Coalescing zero page register [ zp[1]:102 [ tod_init::tod_SEC#0 ] ] with [ zp[1]:93 [ queen::row#0 queen::r legal::row#0 queen::$4 ] ]
Coalescing zero page register [ zp[1]:103 [ tod_init::tod_MIN#0 ] ] with [ zp[1]:95 [ queen::column legal::column#0 ] ]
Coalescing zero page register [ zp[1]:105 [ tod_read::return_TENTHS#2 tod_str::tod_TENTHS#0 tod_read::return_TENTHS#0 tod_str::$14 tod_str::$15 ] ] with [ zp[1]:104 [ tod_init::tod_HOURS#0 ] ]
Coalescing zero page register [ zp[1]:113 [ legal::$0 ] ] with [ zp[1]:106 [ tod_read::return_SEC#2 tod_str::tod_SEC#0 tod_read::return_SEC#0 tod_str::$10 tod_str::$11 ] ]
Coalescing zero page register [ zp[1]:114 [ diff::return#0 legal::$3 ] ] with [ zp[1]:107 [ tod_read::return_MIN#2 tod_str::tod_MIN#0 tod_read::return_MIN#0 tod_str::$6 tod_str::$7 ] ]
Coalescing zero page register [ zp[1]:139 [ utoa::$11 ] ] with [ zp[1]:108 [ tod_read::return_HOURS#2 tod_str::tod_HOURS#0 tod_read::return_HOURS#0 tod_str::$2 tod_str::$3 ] ]
Coalescing zero page register [ zp[1]:142 [ utoa::$10 ] ] with [ zp[1]:123 [ tod_str::$0 tod_str::$1 ] ]
Coalescing zero page register [ zp[2]:143 [ utoa::digit_value#0 utoa_append::sub#0 ] ] with [ zp[2]:55 [ strlen::len#2 strlen::len#1 strlen::return#2 printf_number_buffer::$19 ] ]
Coalescing zero page register [ zp[1]:155 [ ultoa::$11 ] ] with [ zp[1]:127 [ tod_str::$4 tod_str::$5 ] ]
Coalescing zero page register [ zp[1]:158 [ ultoa::$10 ] ] with [ zp[1]:131 [ tod_str::$8 tod_str::$9 ] ]
Coalescing zero page register [ zp[1]:175 [ uctoa::digit_value#0 uctoa_append::sub#0 ] ] with [ zp[1]:135 [ tod_str::$12 tod_str::$13 ] ]
Coalescing zero page register [ zp[2]:184 [ memset::end#0 ] ] with [ zp[2]:182 [ memcpy::src_end#0 ] ]
Coalescing zero page register [ zp[1]:24 [ utoa::digit#2 utoa::digit#1 diff::b#2 diff::b#0 diff::b#1 ] ] with [ zp[1]:12 [ clrscr::c#2 clrscr::c#1 print::j#2 print::j#1 ] ]
Coalescing zero page register [ zp[2]:43 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ultoa::buffer#3 ultoa_append::buffer#0 utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 ] ] with [ zp[2]:13 [ cputs::s#13 cputs::s#14 cputs::s#0 clrscr::line_text#5 clrscr::line_text#1 ] ]
Coalescing zero page register [ zp[1]:47 [ uctoa::started#2 uctoa::started#4 printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 ] ] with [ zp[1]:23 [ cputc::c#3 cputc::c#0 cputc::c#2 cputc::c#1 printf_padding::pad#7 cputs::c#1 diff::a#2 diff::a#0 diff::a#1 diff::return#4 diff::return#2 diff::return#3 diff::return#1 legal::$4 ] ]
Coalescing zero page register [ zp[2]:53 [ strlen::str#3 strlen::str#0 uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 uctoa::buffer#3 uctoa_append::buffer#0 ] ] with [ zp[2]:25 [ utoa::value#2 utoa::value#6 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 clrscr::line_cols#5 clrscr::line_cols#1 ] ]
Coalescing zero page register [ zp[1]:69 [ toupper::return#2 toupper::return#0 toupper::ch#0 toupper::return#3 strupr::$0 uctoa_append::digit#2 uctoa_append::digit#1 ] ] with [ zp[1]:57 [ printf_padding::length#6 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 utoa_append::digit#2 utoa_append::digit#1 ] ]
Coalescing zero page register [ zp[1]:105 [ tod_read::return_TENTHS#2 tod_str::tod_TENTHS#0 tod_read::return_TENTHS#0 tod_str::$14 tod_str::$15 tod_init::tod_HOURS#0 ] ] with [ zp[1]:4 [ print::i#2 print::i#1 printf_uchar::uvalue#2 printf_uchar::uvalue#1 printf_uchar::uvalue#0 print::i1#2 print::i1#1 legal::i#2 legal::i#1 ] ]
Coalescing zero page register [ zp[1]:113 [ legal::$0 tod_read::return_SEC#2 tod_str::tod_SEC#0 tod_read::return_SEC#0 tod_str::$10 tod_str::$11 ] ] with [ zp[1]:30 [ printf_number_buffer::format_min_length#3 printf_number_buffer::padding#10 printf_number_buffer::padding#1 utoa::started#2 utoa::started#4 ] ]
Coalescing zero page register [ zp[1]:114 [ diff::return#0 legal::$3 tod_read::return_MIN#2 tod_str::tod_MIN#0 tod_read::return_MIN#0 tod_str::$6 tod_str::$7 ] ] with [ zp[1]:37 [ ultoa::digit#2 ultoa::digit#1 printf_number_buffer::format_justify_left#10 ] ]
Coalescing zero page register [ zp[1]:139 [ utoa::$11 tod_read::return_HOURS#2 tod_str::tod_HOURS#0 tod_read::return_HOURS#0 tod_str::$2 tod_str::$3 ] ] with [ zp[1]:7 [ clrscr::l#2 clrscr::l#1 legal::return#4 legal::return#0 queen::$1 ] ]
Coalescing zero page register [ zp[1]:142 [ utoa::$10 tod_str::$0 tod_str::$1 ] ] with [ zp[1]:42 [ ultoa::started#2 ultoa::started#4 printf_number_buffer::format_zero_padding#10 ] ]
Coalescing zero page register [ zp[2]:143 [ utoa::digit_value#0 utoa_append::sub#0 strlen::len#2 strlen::len#1 strlen::return#2 printf_number_buffer::$19 ] ] with [ zp[2]:70 [ memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 strupr::src#2 strupr::src#1 ] ]
Coalescing zero page register [ zp[1]:155 [ ultoa::$11 tod_str::$4 tod_str::$5 ] ] with [ zp[1]:45 [ uctoa::digit#2 uctoa::digit#1 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ] ]
Coalescing zero page register [ zp[1]:158 [ ultoa::$10 tod_str::$8 tod_str::$9 ] ] with [ zp[1]:46 [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 uctoa_append::return#0 printf_number_buffer::format_upper_case#10 ] ]
Coalescing zero page register [ zp[1]:175 [ uctoa::digit_value#0 uctoa_append::sub#0 tod_str::$12 tod_str::$13 ] ] with [ zp[1]:66 [ ultoa_append::digit#2 ultoa_append::digit#1 printf_padding::i#2 printf_padding::i#1 ] ]
Coalescing zero page register [ zp[2]:78 [ memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] ] with [ zp[2]:53 [ strlen::str#3 strlen::str#0 uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 uctoa::buffer#3 uctoa_append::buffer#0 utoa::value#2 utoa::value#6 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 clrscr::line_cols#5 clrscr::line_cols#1 ] ]
Coalescing zero page register [ zp[1]:139 [ utoa::$11 tod_read::return_HOURS#2 tod_str::tod_HOURS#0 tod_read::return_HOURS#0 tod_str::$2 tod_str::$3 clrscr::l#2 clrscr::l#1 legal::return#4 legal::return#0 queen::$1 ] ] with [ zp[1]:69 [ toupper::return#2 toupper::return#0 toupper::ch#0 toupper::return#3 strupr::$0 uctoa_append::digit#2 uctoa_append::digit#1 printf_padding::length#6 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 utoa_append::digit#2 utoa_append::digit#1 ] ]
Allocated (was zp[4]:15) zp[4]:2 [ printf_ulong::uvalue#2 printf_ulong::uvalue#0 printf_ulong::uvalue#1 count ]
Allocated (was zp[1]:24) zp[1]:6 [ utoa::digit#2 utoa::digit#1 diff::b#2 diff::b#0 diff::b#1 clrscr::c#2 clrscr::c#1 print::j#2 print::j#1 ]
Allocated (was zp[4]:38) zp[4]:7 [ ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ultoa_append::return#0 ]
Allocated (was zp[2]:43) zp[2]:11 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ultoa::buffer#3 ultoa_append::buffer#0 utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 cputs::s#13 cputs::s#14 cputs::s#0 clrscr::line_text#5 clrscr::line_text#1 ]
Allocated (was zp[1]:47) zp[1]:13 [ uctoa::started#2 uctoa::started#4 printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 cputc::c#3 cputc::c#0 cputc::c#2 cputc::c#1 printf_padding::pad#7 cputs::c#1 diff::a#2 diff::a#0 diff::a#1 diff::return#4 diff::return#2 diff::return#3 diff::return#1 legal::$4 ]
Allocated (was zp[2]:78) zp[2]:14 [ memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 strlen::str#3 strlen::str#0 uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 uctoa::buffer#3 uctoa_append::buffer#0 utoa::value#2 utoa::value#6 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 clrscr::line_cols#5 clrscr::line_cols#1 ]
Allocated (was zp[1]:83) zp[1]:16 [ conio_cursor_x ]
Allocated (was zp[1]:84) zp[1]:17 [ conio_cursor_y ]
Allocated (was zp[2]:85) zp[2]:18 [ conio_line_text ]
Allocated (was zp[2]:87) zp[2]:20 [ conio_line_color ]
Allocated (was zp[1]:101) zp[1]:22 [ tod_init::tod_TENTHS#0 memset::c#4 ]
Allocated (was zp[1]:102) zp[1]:23 [ tod_init::tod_SEC#0 queen::row#0 queen::r legal::row#0 queen::$4 ]
Allocated (was zp[1]:103) zp[1]:24 [ tod_init::tod_MIN#0 queen::column legal::column#0 ]
Allocated (was zp[1]:105) zp[1]:25 [ tod_read::return_TENTHS#2 tod_str::tod_TENTHS#0 tod_read::return_TENTHS#0 tod_str::$14 tod_str::$15 tod_init::tod_HOURS#0 print::i#2 print::i#1 printf_uchar::uvalue#2 printf_uchar::uvalue#1 printf_uchar::uvalue#0 print::i1#2 print::i1#1 legal::i#2 legal::i#1 ]
Allocated (was zp[1]:113) zp[1]:26 [ legal::$0 tod_read::return_SEC#2 tod_str::tod_SEC#0 tod_read::return_SEC#0 tod_str::$10 tod_str::$11 printf_number_buffer::format_min_length#3 printf_number_buffer::padding#10 printf_number_buffer::padding#1 utoa::started#2 utoa::started#4 ]
Allocated (was zp[1]:114) zp[1]:27 [ diff::return#0 legal::$3 tod_read::return_MIN#2 tod_str::tod_MIN#0 tod_read::return_MIN#0 tod_str::$6 tod_str::$7 ultoa::digit#2 ultoa::digit#1 printf_number_buffer::format_justify_left#10 ]
Allocated (was zp[1]:139) zp[1]:28 [ utoa::$11 tod_read::return_HOURS#2 tod_str::tod_HOURS#0 tod_read::return_HOURS#0 tod_str::$2 tod_str::$3 clrscr::l#2 clrscr::l#1 legal::return#4 legal::return#0 queen::$1 toupper::return#2 toupper::return#0 toupper::ch#0 toupper::return#3 strupr::$0 uctoa_append::digit#2 uctoa_append::digit#1 printf_padding::length#6 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 utoa_append::digit#2 utoa_append::digit#1 ]
Allocated (was zp[1]:142) zp[1]:29 [ utoa::$10 tod_str::$0 tod_str::$1 ultoa::started#2 ultoa::started#4 printf_number_buffer::format_zero_padding#10 ]
Allocated (was zp[2]:143) zp[2]:30 [ utoa::digit_value#0 utoa_append::sub#0 strlen::len#2 strlen::len#1 strlen::return#2 printf_number_buffer::$19 memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 strupr::src#2 strupr::src#1 ]
Allocated (was zp[1]:155) zp[1]:32 [ ultoa::$11 tod_str::$4 tod_str::$5 uctoa::digit#2 uctoa::digit#1 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
Allocated (was zp[1]:158) zp[1]:33 [ ultoa::$10 tod_str::$8 tod_str::$9 uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 uctoa_append::return#0 printf_number_buffer::format_upper_case#10 ]
Allocated (was zp[4]:159) zp[4]:34 [ ultoa::digit_value#0 ultoa_append::sub#0 ]
Allocated (was zp[1]:175) zp[1]:38 [ uctoa::digit_value#0 uctoa_append::sub#0 tod_str::$12 tod_str::$13 ultoa_append::digit#2 ultoa_append::digit#1 printf_padding::i#2 printf_padding::i#1 ]
Allocated (was zp[2]:184) zp[2]:39 [ memset::end#0 memcpy::src_end#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// N Queens Problem in C Using Backtracking
//
// N Queens Problem is a famous puzzle in which n-queens are to be placed on a nxn chess board such that no two queens are in the same row, column or diagonal.  
//
// This is a recursive solution
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__start)
.pc = $80d "Program"
  // Global Constants & labels
  .const LIGHT_BLUE = $e
  .const OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
  .const OFFSET_STRUCT_TIME_OF_DAY_SEC = 1
  .const OFFSET_STRUCT_TIME_OF_DAY_MIN = 2
  .const OFFSET_STRUCT_TIME_OF_DAY_HOURS = 3
  .const OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL = $e
  .const OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL = $f
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS = $b
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_MIN = $a
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_SEC = 9
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_10THS = 8
  .const STACK_BASE = $103
  .const SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = $c
  // Color Ram
  .label COLORRAM = $d800
  // Default address of screen character matrix
  .label DEFAULT_SCREEN = $400
  // The CIA#1: keyboard matrix, joystick #1/#2
  .label CIA1 = $dc00
  // The number of bytes on the screen
  // The current cursor x-position
  .label conio_cursor_x = $10
  // The current cursor y-position
  .label conio_cursor_y = $11
  // The current text cursor line start
  .label conio_line_text = $12
  // The current color cursor line start
  .label conio_line_color = $14
  // The number of found solutions
  .label count = 2
  // __start
__start: {
    jmp __init1
    // __start::__init1
  __init1:
    // [1] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [2] (byte) conio_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_y
    // [3] (byte*) conio_line_text ← (const nomodify byte*) DEFAULT_SCREEN -- pbuz1=pbuc1 
    lda #<DEFAULT_SCREEN
    sta.z conio_line_text
    lda #>DEFAULT_SCREEN
    sta.z conio_line_text+1
    // [4] (byte*) conio_line_color ← (const nomodify byte*) COLORRAM -- pbuz1=pbuc1 
    lda #<COLORRAM
    sta.z conio_line_color
    lda #>COLORRAM
    sta.z conio_line_color+1
    // [5] (dword) count ← (dword) 0 -- vduz1=vduc1 
    lda #<0
    sta.z count
    lda #>0
    sta.z count+1
    lda #<0>>$10
    sta.z count+2
    lda #>0>>$10
    sta.z count+3
    // [6] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
  __b1_from___init1:
    jmp __b1
    // __start::@1
  __b1:
    // [7] call main 
    // [31] phi from __start::@1 to main [phi:__start::@1->main]
  main_from___b1:
    jsr main
    jmp __breturn
    // __start::@return
  __breturn:
    // [8] return 
    rts
}
  // queen
// Generates all valid placements of queens on a NxN board recursively
// Works by generating all legal placements af a queen for a specific row taking into consideration the queens already placed on the rows below 
// and then recursively generating all legal placements on the rows above.  
// queen(byte zp($17) row)
queen: {
    .const OFFSET_STACK_ROW = 0
    .label r = $17
    .label column = $18
    .label __1 = $1c
    .label __4 = $17
    .label row = $17
    // [9] (byte) queen::row#0 ← stackidx(byte,(const byte) queen::OFFSET_STACK_ROW) -- vbuz1=_stackidxbyte_vbuc1 
    tsx
    lda STACK_BASE+OFFSET_STACK_ROW,x
    sta.z row
    // [10] (byte) queen::r ← (byte) queen::row#0
    // [11] (byte) queen::column ← (byte) 1 -- vbuz1=vbuc1 
    lda #1
    sta.z column
    jmp __b1
    // queen::@1
  __b1:
    // [12] if((byte) queen::column<(byte) 8+(byte) 1) goto queen::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z column
    cmp #8+1
    bcc __b2
    jmp __breturn
    // queen::@return
  __breturn:
    // [13] return 
    rts
    // queen::@2
  __b2:
    // [14] (byte) legal::row#0 ← (byte) queen::r
    // [15] (byte) legal::column#0 ← (byte) queen::column
    // [16] call legal 
    // [68] phi from queen::@2 to legal [phi:queen::@2->legal]
  legal_from___b2:
    jsr legal
    // [17] (byte) legal::return#0 ← (byte) legal::return#4
    jmp __b7
    // queen::@7
  __b7:
    // [18] (byte~) queen::$1 ← (byte) legal::return#0
    // [19] if((byte) 0==(byte~) queen::$1) goto queen::@3 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z __1
    beq __b3
    jmp __b5
    // queen::@5
  __b5:
    // [20] *((const byte*) board + (byte) queen::r) ← (byte) queen::column -- pbuc1_derefidx_vbuz1=vbuz2 
    //no conflicts so place queen
    lda.z column
    ldy.z r
    sta board,y
    // [21] if((byte) queen::r==(byte) 8) goto queen::@4 -- vbuz1_eq_vbuc1_then_la1 
    lda #8
    cmp.z r
    beq __b4
    jmp __b6
    // queen::@6
  __b6:
    // asm { ldacolumn pha ldar pha  }
    // Perform recussive placement on rows above
    // Push the local vars on the stack (waiting for proper recursion support)
    lda column
    pha
    lda r
    pha
    // [23] (byte~) queen::$4 ← (byte) queen::r + (byte) 1 -- vbuz1=vbuz1_plus_1 
    inc.z __4
    // [24] stackpush(byte) ← (byte~) queen::$4 -- _stackpushbyte_=vbuz1 
    // Do recursion        
    lda.z __4
    pha
    // [25] callexecute queen  -- jsr 
    jsr queen
    // sideeffect stackpullbytes((number) 1) -- _stackpullbyte_1 
    pla
    // asm { pla star pla stacolumn  }
    // Pop the local vars on the stack (waiting for proper recursion support)
    pla
    sta r
    pla
    sta column
    jmp __b3
    // queen::@3
  __b3:
    // [28] (byte) queen::column ← ++ (byte) queen::column -- vbuz1=_inc_vbuz1 
    inc.z column
    jmp __b1
    // queen::@4
  __b4:
    // [29] (dword) count ← ++ (dword) count -- vduz1=_inc_vduz1 
    inc.z count
    bne !+
    inc.z count+1
    bne !+
    inc.z count+2
    bne !+
    inc.z count+3
  !:
    // [30] call print 
    // [87] phi from queen::@4 to print [phi:queen::@4->print]
  print_from___b4:
    jsr print
    jmp __b3
}
  // main
main: {
    // [32] call clrscr 
    // [116] phi from main to clrscr [phi:main->clrscr]
  clrscr_from_main:
    jsr clrscr
    // [33] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [34] call cputs 
    // [132] phi from main::@1 to cputs [phi:main::@1->cputs]
  cputs_from___b1:
    // [132] phi (to_nomodify byte*) cputs::s#14 = (const byte*) main::s [phi:main::@1->cputs#0] -- pbuz1=pbuc1 
    lda #<s
    sta.z cputs.s
    lda #>s
    sta.z cputs.s+1
    jsr cputs
    // [35] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [36] call cputs 
    // [132] phi from main::@2 to cputs [phi:main::@2->cputs]
  cputs_from___b2:
    // [132] phi (to_nomodify byte*) cputs::s#14 = (const byte*) main::s1 [phi:main::@2->cputs#0] -- pbuz1=pbuc1 
    lda #<s1
    sta.z cputs.s
    lda #>s1
    sta.z cputs.s+1
    jsr cputs
    // [37] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    jmp __b3
    // main::@3
  __b3:
    // [38] call printf_uint 
    // [140] phi from main::@3 to printf_uint [phi:main::@3->printf_uint]
  printf_uint_from___b3:
    jsr printf_uint
    jmp __b4
    // main::@4
  __b4:
    // [39] (byte) tod_init::tod_TENTHS#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO) -- vbuz1=_deref_pbuc1 
    lda TOD_ZERO
    sta.z tod_init.tod_TENTHS
    // [40] (byte) tod_init::tod_SEC#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_SEC) -- vbuz1=_deref_pbuc1 
    lda TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_SEC
    sta.z tod_init.tod_SEC
    // [41] (byte) tod_init::tod_MIN#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_MIN) -- vbuz1=_deref_pbuc1 
    lda TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_MIN
    sta.z tod_init.tod_MIN
    // [42] (byte) tod_init::tod_HOURS#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_HOURS) -- vbuz1=_deref_pbuc1 
    lda TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_HOURS
    sta.z tod_init.tod_HOURS
    // [43] call tod_init 
    jsr tod_init
    jmp __b5
    // main::@5
  __b5:
    // [44] stackpush(byte) ← (byte) 1 -- _stackpushbyte_=vbuc1 
    lda #1
    pha
    // [45] callexecute queen  -- jsr 
    jsr queen
    // sideeffect stackpullbytes((number) 1) -- _stackpullbyte_1 
    pla
    // [47] call tod_read 
    jsr tod_read
    // [48] (byte) tod_read::return_TENTHS#2 ← (byte) tod_read::return_TENTHS#0
    // [49] (byte) tod_read::return_SEC#2 ← (byte) tod_read::return_SEC#0
    // [50] (byte) tod_read::return_MIN#2 ← (byte) tod_read::return_MIN#0
    // [51] (byte) tod_read::return_HOURS#2 ← (byte) tod_read::return_HOURS#0
    jmp __b6
    // main::@6
  __b6:
    // [52] (byte) tod_str::tod_TENTHS#0 ← (byte) tod_read::return_TENTHS#2
    // [53] (byte) tod_str::tod_SEC#0 ← (byte) tod_read::return_SEC#2
    // [54] (byte) tod_str::tod_MIN#0 ← (byte) tod_read::return_MIN#2
    // [55] (byte) tod_str::tod_HOURS#0 ← (byte) tod_read::return_HOURS#2
    // [56] call tod_str 
    jsr tod_str
    // [57] phi from main::@6 to main::@7 [phi:main::@6->main::@7]
  __b7_from___b6:
    jmp __b7
    // main::@7
  __b7:
    // [58] call cputs 
    // [132] phi from main::@7 to cputs [phi:main::@7->cputs]
  cputs_from___b7:
    // [132] phi (to_nomodify byte*) cputs::s#14 = (const byte*) main::s2 [phi:main::@7->cputs#0] -- pbuz1=pbuc1 
    lda #<s2
    sta.z cputs.s
    lda #>s2
    sta.z cputs.s+1
    jsr cputs
    jmp __b8
    // main::@8
  __b8:
    // [59] (dword) printf_ulong::uvalue#0 ← (dword) count
    // [60] call printf_ulong 
    // [183] phi from main::@8 to printf_ulong [phi:main::@8->printf_ulong]
  printf_ulong_from___b8:
    // [183] phi (dword) printf_ulong::uvalue#2 = (dword) printf_ulong::uvalue#0 [phi:main::@8->printf_ulong#0] -- register_copy 
    jsr printf_ulong
    // [61] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
  __b9_from___b8:
    jmp __b9
    // main::@9
  __b9:
    // [62] call cputs 
    // [132] phi from main::@9 to cputs [phi:main::@9->cputs]
  cputs_from___b9:
    // [132] phi (to_nomodify byte*) cputs::s#14 = (const byte*) main::s3 [phi:main::@9->cputs#0] -- pbuz1=pbuc1 
    lda #<s3
    sta.z cputs.s
    lda #>s3
    sta.z cputs.s+1
    jsr cputs
    // [63] phi from main::@9 to main::@10 [phi:main::@9->main::@10]
  __b10_from___b9:
    jmp __b10
    // main::@10
  __b10:
    // [64] call printf_string 
    // [190] phi from main::@10 to printf_string [phi:main::@10->printf_string]
  printf_string_from___b10:
    jsr printf_string
    // [65] phi from main::@10 to main::@11 [phi:main::@10->main::@11]
  __b11_from___b10:
    jmp __b11
    // main::@11
  __b11:
    // [66] call cputs 
    // [132] phi from main::@11 to cputs [phi:main::@11->cputs]
  cputs_from___b11:
    // [132] phi (to_nomodify byte*) cputs::s#14 = (const byte*) main::s4 [phi:main::@11->cputs#0] -- pbuz1=pbuc1 
    lda #<s4
    sta.z cputs.s
    lda #>s4
    sta.z cputs.s+1
    jsr cputs
    jmp __breturn
    // main::@return
  __breturn:
    // [67] return 
    rts
    s: .text " - n queens problem using backtracking -"
    .byte 0
    s1: .text @"\nnumber of queens:"
    .byte 0
    s2: .text @"\n\nsolutions: "
    .byte 0
    s3: .text " time: "
    .byte 0
    s4: .text @".\n"
    .byte 0
}
  // legal
// Checks is a placement of the queen on the board is legal.
// Checks the passed (row, column) against all queens placed on the board on lower rows.
// If no conflict for desired position returns 1 otherwise returns 0
// legal(byte zp($17) row, byte zp($18) column)
legal: {
    .label __0 = $1a
    .label __3 = $1b
    .label __4 = $d
    .label row = $17
    .label column = $18
    // Placement is legal
    // The same column is a conflict.
    // The same diagonal is a conflict.
    .label return = $1c
    .label i = $19
    // [69] phi from legal to legal::@1 [phi:legal->legal::@1]
  __b1_from_legal:
    // [69] phi (byte) legal::i#2 = (byte) 1 [phi:legal->legal::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z i
    jmp __b1
    // legal::@1
  __b1:
    // [70] (byte~) legal::$0 ← (byte) legal::row#0 - (byte) 1 -- vbuz1=vbuz2_minus_1 
    ldx.z row
    dex
    stx.z __0
    // [71] if((byte) legal::i#2<=(byte~) legal::$0) goto legal::@2 -- vbuz1_le_vbuz2_then_la1 
    lda.z __0
    cmp.z i
    bcs __b2
    // [72] phi from legal::@1 to legal::@return [phi:legal::@1->legal::@return]
  __breturn_from___b1:
    // [72] phi (byte) legal::return#4 = (byte) 1 [phi:legal::@1->legal::@return#0] -- vbuz1=vbuc1 
    lda #1
    sta.z return
    jmp __breturn
    // [72] phi from legal::@2 legal::@6 to legal::@return [phi:legal::@2/legal::@6->legal::@return]
  __breturn_from___b2:
  __breturn_from___b6:
    // [72] phi (byte) legal::return#4 = (byte) 0 [phi:legal::@2/legal::@6->legal::@return#0] -- vbuz1=vbuc1 
    lda #0
    sta.z return
    jmp __breturn
    // legal::@return
  __breturn:
    // [73] return 
    rts
    // legal::@2
  __b2:
    // [74] if(*((const byte*) board + (byte) legal::i#2)==(byte) legal::column#0) goto legal::@return -- pbuc1_derefidx_vbuz1_eq_vbuz2_then_la1 
    ldy.z i
    lda board,y
    cmp.z column
    beq __breturn_from___b2
    jmp __b4
    // legal::@4
  __b4:
    // [75] (byte) diff::a#0 ← *((const byte*) board + (byte) legal::i#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z i
    lda board,y
    sta.z diff.a
    // [76] (byte) diff::b#0 ← (byte) legal::column#0 -- vbuz1=vbuz2 
    lda.z column
    sta.z diff.b
    // [77] call diff 
    // [194] phi from legal::@4 to diff [phi:legal::@4->diff]
  diff_from___b4:
    // [194] phi (byte) diff::b#2 = (byte) diff::b#0 [phi:legal::@4->diff#0] -- register_copy 
    // [194] phi (byte) diff::a#2 = (byte) diff::a#0 [phi:legal::@4->diff#1] -- register_copy 
    jsr diff
    // [78] (byte) diff::return#0 ← (byte) diff::return#4 -- vbuz1=vbuz2 
    lda.z diff.return_1
    sta.z diff.return
    jmp __b5
    // legal::@5
  __b5:
    // [79] (byte~) legal::$3 ← (byte) diff::return#0
    // [80] (byte) diff::a#1 ← (byte) legal::i#2 -- vbuz1=vbuz2 
    lda.z i
    sta.z diff.a
    // [81] (byte) diff::b#1 ← (byte) legal::row#0 -- vbuz1=vbuz2 
    lda.z row
    sta.z diff.b
    // [82] call diff 
    // [194] phi from legal::@5 to diff [phi:legal::@5->diff]
  diff_from___b5:
    // [194] phi (byte) diff::b#2 = (byte) diff::b#1 [phi:legal::@5->diff#0] -- register_copy 
    // [194] phi (byte) diff::a#2 = (byte) diff::a#1 [phi:legal::@5->diff#1] -- register_copy 
    jsr diff
    // [83] (byte) diff::return#1 ← (byte) diff::return#4
    jmp __b6
    // legal::@6
  __b6:
    // [84] (byte~) legal::$4 ← (byte) diff::return#1
    // [85] if((byte~) legal::$3!=(byte~) legal::$4) goto legal::@3 -- vbuz1_neq_vbuz2_then_la1 
    lda.z __3
    cmp.z __4
    bne __b3
    jmp __breturn_from___b6
    // legal::@3
  __b3:
    // [86] (byte) legal::i#1 ← ++ (byte) legal::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [69] phi from legal::@3 to legal::@1 [phi:legal::@3->legal::@1]
  __b1_from___b3:
    // [69] phi (byte) legal::i#2 = (byte) legal::i#1 [phi:legal::@3->legal::@1#0] -- register_copy 
    jmp __b1
}
  // print
// Print the board with a legal placement. Also increments the solution count.
print: {
    .label i = $19
    .label i1 = $19
    .label j = 6
    // [88] call gotoxy 
    // [200] phi from print to gotoxy [phi:print->gotoxy]
  gotoxy_from_print:
    jsr gotoxy
    // [89] phi from print to print::@11 [phi:print->print::@11]
  __b11_from_print:
    jmp __b11
    // print::@11
  __b11:
    // [90] call cputs 
    // [132] phi from print::@11 to cputs [phi:print::@11->cputs]
  cputs_from___b11:
    // [132] phi (to_nomodify byte*) cputs::s#14 = (const byte*) print::s [phi:print::@11->cputs#0] -- pbuz1=pbuc1 
    lda #<s
    sta.z cputs.s
    lda #>s
    sta.z cputs.s+1
    jsr cputs
    jmp __b12
    // print::@12
  __b12:
    // [91] (dword) printf_ulong::uvalue#1 ← (dword) count
    // [92] call printf_ulong 
    // [183] phi from print::@12 to printf_ulong [phi:print::@12->printf_ulong]
  printf_ulong_from___b12:
    // [183] phi (dword) printf_ulong::uvalue#2 = (dword) printf_ulong::uvalue#1 [phi:print::@12->printf_ulong#0] -- register_copy 
    jsr printf_ulong
    // [93] phi from print::@12 to print::@13 [phi:print::@12->print::@13]
  __b13_from___b12:
    jmp __b13
    // print::@13
  __b13:
    // [94] call cputs 
    // [132] phi from print::@13 to cputs [phi:print::@13->cputs]
  cputs_from___b13:
    // [132] phi (to_nomodify byte*) cputs::s#14 = (const byte*) print::s1 [phi:print::@13->cputs#0] -- pbuz1=pbuc1 
    lda #<s1
    sta.z cputs.s
    lda #>s1
    sta.z cputs.s+1
    jsr cputs
    // [95] phi from print::@13 to print::@1 [phi:print::@13->print::@1]
  __b1_from___b13:
    // [95] phi (byte) print::i#2 = (byte) 1 [phi:print::@13->print::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z i
    jmp __b1
    // print::@1
  __b1:
    // [96] if((byte) print::i#2<(byte) 8+(byte) 1) goto print::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #8+1
    bcc __b2
    // [97] phi from print::@1 to print::@3 [phi:print::@1->print::@3]
  __b3_from___b1:
    // [97] phi (byte) print::i1#2 = (byte) 1 [phi:print::@1->print::@3#0] -- vbuz1=vbuc1 
    lda #1
    sta.z i1
    jmp __b3
    // print::@3
  __b3:
    // [98] if((byte) print::i1#2<(byte) 8+(byte) 1) goto print::@4 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i1
    cmp #8+1
    bcc __b4_from___b3
    jmp __breturn
    // print::@return
  __breturn:
    // [99] return 
    rts
    // [100] phi from print::@3 to print::@4 [phi:print::@3->print::@4]
  __b4_from___b3:
    jmp __b4
    // print::@4
  __b4:
    // [101] call cputs 
    // [132] phi from print::@4 to cputs [phi:print::@4->cputs]
  cputs_from___b4:
    // [132] phi (to_nomodify byte*) cputs::s#14 = (const byte*) print::s2 [phi:print::@4->cputs#0] -- pbuz1=pbuc1 
    lda #<s2
    sta.z cputs.s
    lda #>s2
    sta.z cputs.s+1
    jsr cputs
    jmp __b15
    // print::@15
  __b15:
    // [102] (byte) printf_uchar::uvalue#1 ← (byte) print::i1#2
    // [103] call printf_uchar 
    // [206] phi from print::@15 to printf_uchar [phi:print::@15->printf_uchar]
  printf_uchar_from___b15:
    // [206] phi (byte) printf_uchar::uvalue#2 = (byte) printf_uchar::uvalue#1 [phi:print::@15->printf_uchar#0] -- register_copy 
    jsr printf_uchar
    // [104] phi from print::@15 to print::@5 [phi:print::@15->print::@5]
  __b5_from___b15:
    // [104] phi (byte) print::j#2 = (byte) 1 [phi:print::@15->print::@5#0] -- vbuz1=vbuc1 
    lda #1
    sta.z j
    jmp __b5
    // print::@5
  __b5:
    // [105] if((byte) print::j#2<(byte) 8+(byte) 1) goto print::@6 -- vbuz1_lt_vbuc1_then_la1 
    lda.z j
    cmp #8+1
    bcc __b6
    jmp __b7
    // print::@7
  __b7:
    // [106] (byte) print::i1#1 ← ++ (byte) print::i1#2 -- vbuz1=_inc_vbuz1 
    inc.z i1
    // [97] phi from print::@7 to print::@3 [phi:print::@7->print::@3]
  __b3_from___b7:
    // [97] phi (byte) print::i1#2 = (byte) print::i1#1 [phi:print::@7->print::@3#0] -- register_copy 
    jmp __b3
    // print::@6
  __b6:
    // [107] if(*((const byte*) board + (byte) print::i1#2)==(byte) print::j#2) goto print::@8 -- pbuc1_derefidx_vbuz1_eq_vbuz2_then_la1 
    ldy.z i1
    lda board,y
    cmp.z j
    beq __b8_from___b6
    // [108] phi from print::@6 to print::@10 [phi:print::@6->print::@10]
  __b10_from___b6:
    jmp __b10
    // print::@10
  __b10:
    // [109] call cputs 
    // [132] phi from print::@10 to cputs [phi:print::@10->cputs]
  cputs_from___b10:
    // [132] phi (to_nomodify byte*) cputs::s#14 = (const byte*) print::s4 [phi:print::@10->cputs#0] -- pbuz1=pbuc1 
    lda #<s4
    sta.z cputs.s
    lda #>s4
    sta.z cputs.s+1
    jsr cputs
    jmp __b9
    // print::@9
  __b9:
    // [110] (byte) print::j#1 ← ++ (byte) print::j#2 -- vbuz1=_inc_vbuz1 
    inc.z j
    // [104] phi from print::@9 to print::@5 [phi:print::@9->print::@5]
  __b5_from___b9:
    // [104] phi (byte) print::j#2 = (byte) print::j#1 [phi:print::@9->print::@5#0] -- register_copy 
    jmp __b5
    // [111] phi from print::@6 to print::@8 [phi:print::@6->print::@8]
  __b8_from___b6:
    jmp __b8
    // print::@8
  __b8:
    // [112] call cputs 
    // [132] phi from print::@8 to cputs [phi:print::@8->cputs]
  cputs_from___b8:
    // [132] phi (to_nomodify byte*) cputs::s#14 = (const byte*) print::s3 [phi:print::@8->cputs#0] -- pbuz1=pbuc1 
    lda #<s3
    sta.z cputs.s
    lda #>s3
    sta.z cputs.s+1
    jsr cputs
    jmp __b9
    // print::@2
  __b2:
    // [113] (byte) printf_uchar::uvalue#0 ← (byte) print::i#2
    // [114] call printf_uchar 
    // [206] phi from print::@2 to printf_uchar [phi:print::@2->printf_uchar]
  printf_uchar_from___b2:
    // [206] phi (byte) printf_uchar::uvalue#2 = (byte) printf_uchar::uvalue#0 [phi:print::@2->printf_uchar#0] -- register_copy 
    jsr printf_uchar
    jmp __b14
    // print::@14
  __b14:
    // [115] (byte) print::i#1 ← ++ (byte) print::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [95] phi from print::@14 to print::@1 [phi:print::@14->print::@1]
  __b1_from___b14:
    // [95] phi (byte) print::i#2 = (byte) print::i#1 [phi:print::@14->print::@1#0] -- register_copy 
    jmp __b1
    s: .text @"\n#"
    .byte 0
    s1: .text @":\n "
    .byte 0
    s2: .text @"\n"
    .byte 0
    s3: .text "Q"
    .byte 0
    s4: .text "-"
    .byte 0
}
  // clrscr
// clears the screen and moves the cursor to the upper left-hand corner of the screen.
clrscr: {
    .label c = 6
    .label line_text = $b
    .label line_cols = $e
    .label l = $1c
    // [117] phi from clrscr to clrscr::@1 [phi:clrscr->clrscr::@1]
  __b1_from_clrscr:
    // [117] phi (byte*) clrscr::line_cols#5 = (const nomodify byte*) COLORRAM [phi:clrscr->clrscr::@1#0] -- pbuz1=pbuc1 
    lda #<COLORRAM
    sta.z line_cols
    lda #>COLORRAM
    sta.z line_cols+1
    // [117] phi (byte*) clrscr::line_text#5 = (const nomodify byte*) DEFAULT_SCREEN [phi:clrscr->clrscr::@1#1] -- pbuz1=pbuc1 
    lda #<DEFAULT_SCREEN
    sta.z line_text
    lda #>DEFAULT_SCREEN
    sta.z line_text+1
    // [117] phi (byte) clrscr::l#2 = (byte) 0 [phi:clrscr->clrscr::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    jmp __b1
    // clrscr::@1
  __b1:
    // [118] if((byte) clrscr::l#2<(byte) $19) goto clrscr::@3 -- vbuz1_lt_vbuc1_then_la1 
    lda.z l
    cmp #$19
    bcc __b3_from___b1
    jmp __b2
    // clrscr::@2
  __b2:
    // [119] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [120] (byte) conio_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_y
    // [121] (byte*) conio_line_text ← (const nomodify byte*) DEFAULT_SCREEN -- pbuz1=pbuc1 
    lda #<DEFAULT_SCREEN
    sta.z conio_line_text
    lda #>DEFAULT_SCREEN
    sta.z conio_line_text+1
    // [122] (byte*) conio_line_color ← (const nomodify byte*) COLORRAM -- pbuz1=pbuc1 
    lda #<COLORRAM
    sta.z conio_line_color
    lda #>COLORRAM
    sta.z conio_line_color+1
    jmp __breturn
    // clrscr::@return
  __breturn:
    // [123] return 
    rts
    // [124] phi from clrscr::@1 to clrscr::@3 [phi:clrscr::@1->clrscr::@3]
  __b3_from___b1:
    // [124] phi (byte) clrscr::c#2 = (byte) 0 [phi:clrscr::@1->clrscr::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    jmp __b3
    // clrscr::@3
  __b3:
    // [125] if((byte) clrscr::c#2<(byte) $28) goto clrscr::@4 -- vbuz1_lt_vbuc1_then_la1 
    lda.z c
    cmp #$28
    bcc __b4
    jmp __b5
    // clrscr::@5
  __b5:
    // [126] (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#5 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line_text
    sta.z line_text
    bcc !+
    inc.z line_text+1
  !:
    // [127] (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#5 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line_cols
    sta.z line_cols
    bcc !+
    inc.z line_cols+1
  !:
    // [128] (byte) clrscr::l#1 ← ++ (byte) clrscr::l#2 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [117] phi from clrscr::@5 to clrscr::@1 [phi:clrscr::@5->clrscr::@1]
  __b1_from___b5:
    // [117] phi (byte*) clrscr::line_cols#5 = (byte*) clrscr::line_cols#1 [phi:clrscr::@5->clrscr::@1#0] -- register_copy 
    // [117] phi (byte*) clrscr::line_text#5 = (byte*) clrscr::line_text#1 [phi:clrscr::@5->clrscr::@1#1] -- register_copy 
    // [117] phi (byte) clrscr::l#2 = (byte) clrscr::l#1 [phi:clrscr::@5->clrscr::@1#2] -- register_copy 
    jmp __b1
    // clrscr::@4
  __b4:
    // [129] *((byte*) clrscr::line_text#5 + (byte) clrscr::c#2) ← (byte) ' ' -- pbuz1_derefidx_vbuz2=vbuc1 
    lda #' '
    ldy.z c
    sta (line_text),y
    // [130] *((byte*) clrscr::line_cols#5 + (byte) clrscr::c#2) ← (const nomodify byte) LIGHT_BLUE -- pbuz1_derefidx_vbuz2=vbuc1 
    lda #LIGHT_BLUE
    ldy.z c
    sta (line_cols),y
    // [131] (byte) clrscr::c#1 ← ++ (byte) clrscr::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [124] phi from clrscr::@4 to clrscr::@3 [phi:clrscr::@4->clrscr::@3]
  __b3_from___b4:
    // [124] phi (byte) clrscr::c#2 = (byte) clrscr::c#1 [phi:clrscr::@4->clrscr::@3#0] -- register_copy 
    jmp __b3
}
  // cputs
// Output a NUL-terminated string at the current cursor position
// cputs(byte* zp($b) s)
cputs: {
    .label c = $d
    .label s = $b
    // [133] phi from cputs cputs::@2 to cputs::@1 [phi:cputs/cputs::@2->cputs::@1]
  __b1_from_cputs:
  __b1_from___b2:
    // [133] phi (to_nomodify byte*) cputs::s#13 = (to_nomodify byte*) cputs::s#14 [phi:cputs/cputs::@2->cputs::@1#0] -- register_copy 
    jmp __b1
    // cputs::@1
  __b1:
    // [134] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#13) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (s),y
    sta.z c
    // [135] (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#13 -- pbuz1=_inc_pbuz1 
    inc.z s
    bne !+
    inc.z s+1
  !:
    // [136] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z c
    bne __b2
    jmp __breturn
    // cputs::@return
  __breturn:
    // [137] return 
    rts
    // cputs::@2
  __b2:
    // [138] (byte) cputc::c#0 ← (byte) cputs::c#1
    // [139] call cputc 
    // [213] phi from cputs::@2 to cputc [phi:cputs::@2->cputc]
  cputc_from___b2:
    // [213] phi (byte) cputc::c#3 = (byte) cputc::c#0 [phi:cputs::@2->cputc#0] -- register_copy 
    jsr cputc
    jmp __b1_from___b2
}
  // printf_uint
// Print an unsigned int using a specific format
printf_uint: {
    .const format_min_length = 0
    .const format_justify_left = 0
    .const format_zero_padding = 0
    .const format_upper_case = 0
    .label uvalue = 8
    jmp __b1
    // printf_uint::@1
  __b1:
    // [141] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // [142] call utoa 
  // Format number into buffer
    // [224] phi from printf_uint::@1 to utoa [phi:printf_uint::@1->utoa]
  utoa_from___b1:
    jsr utoa
    jmp __b2
    // printf_uint::@2
  __b2:
    // [143] (byte) printf_number_buffer::buffer_sign#1 ← *((byte*)&(struct printf_buffer_number) printf_buffer) -- vbuz1=_deref_pbuc1 
    lda printf_buffer
    sta.z printf_number_buffer.buffer_sign
    // [144] call printf_number_buffer 
  // Print using format
    // [245] phi from printf_uint::@2 to printf_number_buffer [phi:printf_uint::@2->printf_number_buffer]
  printf_number_buffer_from___b2:
    // [245] phi (byte) printf_number_buffer::format_upper_case#10 = (const byte) printf_uint::format_upper_case#0 [phi:printf_uint::@2->printf_number_buffer#0] -- vbuz1=vbuc1 
    lda #format_upper_case
    sta.z printf_number_buffer.format_upper_case
    // [245] phi (byte) printf_number_buffer::buffer_sign#10 = (byte) printf_number_buffer::buffer_sign#1 [phi:printf_uint::@2->printf_number_buffer#1] -- register_copy 
    // [245] phi (byte) printf_number_buffer::format_zero_padding#10 = (const byte) printf_uint::format_zero_padding#0 [phi:printf_uint::@2->printf_number_buffer#2] -- vbuz1=vbuc1 
    lda #format_zero_padding
    sta.z printf_number_buffer.format_zero_padding
    // [245] phi (byte) printf_number_buffer::format_justify_left#10 = (const byte) printf_uint::format_justify_left#0 [phi:printf_uint::@2->printf_number_buffer#3] -- vbuz1=vbuc1 
    lda #format_justify_left
    sta.z printf_number_buffer.format_justify_left
    // [245] phi (byte) printf_number_buffer::format_min_length#3 = (const byte) printf_uint::format_min_length#0 [phi:printf_uint::@2->printf_number_buffer#4] -- vbuz1=vbuc1 
    lda #format_min_length
    sta.z printf_number_buffer.format_min_length
    jsr printf_number_buffer
    jmp __breturn
    // printf_uint::@return
  __breturn:
    // [145] return 
    rts
}
  // tod_init
// Initialize time-of-day clock
// This uses the MOS6526 CIA#1
// tod_init(byte zp($16) tod_TENTHS, byte zp($17) tod_SEC, byte zp($18) tod_MIN, byte zp($19) tod_HOURS)
tod_init: {
    .label tod_TENTHS = $16
    .label tod_SEC = $17
    .label tod_MIN = $18
    .label tod_HOURS = $19
    // [146] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) | (byte) $80 -- _deref_pbuc1=_deref_pbuc1_bor_vbuc2 
    // Set 50hz (this assumes PAL!) (bit7=1)
    lda #$80
    ora CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL
    // [147] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) & (byte) $7f -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    // Writing TOD clock (bit7=0)
    lda #$7f
    and CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL
    // [148] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS) ← (byte) tod_init::tod_HOURS#0 -- _deref_pbuc1=vbuz1 
    // Reset TOD clock
    // Writing sequence is important. TOD stops when hours is written and starts when 10ths is written.
    lda.z tod_HOURS
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS
    // [149] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN) ← (byte) tod_init::tod_MIN#0 -- _deref_pbuc1=vbuz1 
    lda.z tod_MIN
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_MIN
    // [150] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC) ← (byte) tod_init::tod_SEC#0 -- _deref_pbuc1=vbuz1 
    lda.z tod_SEC
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_SEC
    // [151] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS) ← (byte) tod_init::tod_TENTHS#0 -- _deref_pbuc1=vbuz1 
    lda.z tod_TENTHS
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_10THS
    jmp __breturn
    // tod_init::@return
  __breturn:
    // [152] return 
    rts
}
  // tod_read
// Read time of day
tod_read: {
    .label return_TENTHS = $19
    .label return_SEC = $1a
    .label return_MIN = $1b
    .label return_HOURS = $1c
    // [153] (byte) tod_read::return_HOURS#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS) -- vbuz1=_deref_pbuc1 
    // Reading sequence is important. TOD latches on reading hours until 10ths is read.
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS
    sta.z return_HOURS
    // [154] (byte) tod_read::return_MIN#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN) -- vbuz1=_deref_pbuc1 
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_MIN
    sta.z return_MIN
    // [155] (byte) tod_read::return_SEC#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC) -- vbuz1=_deref_pbuc1 
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_SEC
    sta.z return_SEC
    // [156] (byte) tod_read::return_TENTHS#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS) -- vbuz1=_deref_pbuc1 
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_10THS
    sta.z return_TENTHS
    jmp __breturn
    // tod_read::@return
  __breturn:
    // [157] return 
    rts
}
  // tod_str
// Convert time of day to a human-readable string "hh:mm:ss:10"
// tod_str(byte zp($19) tod_TENTHS, byte zp($1a) tod_SEC, byte zp($1b) tod_MIN, byte zp($1c) tod_HOURS)
tod_str: {
    .label __0 = $1d
    .label __1 = $1d
    .label __2 = $1c
    .label __3 = $1c
    .label __4 = $20
    .label __5 = $20
    .label __6 = $1b
    .label __7 = $1b
    .label __8 = $21
    .label __9 = $21
    .label __10 = $1a
    .label __11 = $1a
    .label __12 = $26
    .label __13 = $26
    .label __14 = $19
    .label __15 = $19
    .label tod_TENTHS = $19
    .label tod_SEC = $1a
    .label tod_MIN = $1b
    .label tod_HOURS = $1c
    // [158] (byte~) tod_str::$0 ← (byte) tod_str::tod_HOURS#0 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda.z tod_HOURS
    lsr
    lsr
    lsr
    lsr
    sta.z __0
    // [159] (byte~) tod_str::$1 ← (byte) '0' + (byte~) tod_str::$0 -- vbuz1=vbuc1_plus_vbuz1 
    lax.z __1
    axs #-['0']
    stx.z __1
    // [160] *((const byte*) tod_buffer) ← (byte~) tod_str::$1 -- _deref_pbuc1=vbuz1 
    lda.z __1
    sta tod_buffer
    // [161] (byte~) tod_str::$2 ← (byte) tod_str::tod_HOURS#0 & (byte) $f -- vbuz1=vbuz1_band_vbuc1 
    lda #$f
    and.z __2
    sta.z __2
    // [162] (byte~) tod_str::$3 ← (byte) '0' + (byte~) tod_str::$2 -- vbuz1=vbuc1_plus_vbuz1 
    lax.z __3
    axs #-['0']
    stx.z __3
    // [163] *((const byte*) tod_buffer+(byte) 1) ← (byte~) tod_str::$3 -- _deref_pbuc1=vbuz1 
    lda.z __3
    sta tod_buffer+1
    // [164] (byte~) tod_str::$4 ← (byte) tod_str::tod_MIN#0 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda.z tod_MIN
    lsr
    lsr
    lsr
    lsr
    sta.z __4
    // [165] (byte~) tod_str::$5 ← (byte) '0' + (byte~) tod_str::$4 -- vbuz1=vbuc1_plus_vbuz1 
    lax.z __5
    axs #-['0']
    stx.z __5
    // [166] *((const byte*) tod_buffer+(byte) 3) ← (byte~) tod_str::$5 -- _deref_pbuc1=vbuz1 
    lda.z __5
    sta tod_buffer+3
    // [167] (byte~) tod_str::$6 ← (byte) tod_str::tod_MIN#0 & (byte) $f -- vbuz1=vbuz1_band_vbuc1 
    lda #$f
    and.z __6
    sta.z __6
    // [168] (byte~) tod_str::$7 ← (byte) '0' + (byte~) tod_str::$6 -- vbuz1=vbuc1_plus_vbuz1 
    lax.z __7
    axs #-['0']
    stx.z __7
    // [169] *((const byte*) tod_buffer+(byte) 4) ← (byte~) tod_str::$7 -- _deref_pbuc1=vbuz1 
    lda.z __7
    sta tod_buffer+4
    // [170] (byte~) tod_str::$8 ← (byte) tod_str::tod_SEC#0 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda.z tod_SEC
    lsr
    lsr
    lsr
    lsr
    sta.z __8
    // [171] (byte~) tod_str::$9 ← (byte) '0' + (byte~) tod_str::$8 -- vbuz1=vbuc1_plus_vbuz1 
    lax.z __9
    axs #-['0']
    stx.z __9
    // [172] *((const byte*) tod_buffer+(byte) 6) ← (byte~) tod_str::$9 -- _deref_pbuc1=vbuz1 
    lda.z __9
    sta tod_buffer+6
    // [173] (byte~) tod_str::$10 ← (byte) tod_str::tod_SEC#0 & (byte) $f -- vbuz1=vbuz1_band_vbuc1 
    lda #$f
    and.z __10
    sta.z __10
    // [174] (byte~) tod_str::$11 ← (byte) '0' + (byte~) tod_str::$10 -- vbuz1=vbuc1_plus_vbuz1 
    lax.z __11
    axs #-['0']
    stx.z __11
    // [175] *((const byte*) tod_buffer+(byte) 7) ← (byte~) tod_str::$11 -- _deref_pbuc1=vbuz1 
    lda.z __11
    sta tod_buffer+7
    // [176] (byte~) tod_str::$12 ← (byte) tod_str::tod_TENTHS#0 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda.z tod_TENTHS
    lsr
    lsr
    lsr
    lsr
    sta.z __12
    // [177] (byte~) tod_str::$13 ← (byte) '0' + (byte~) tod_str::$12 -- vbuz1=vbuc1_plus_vbuz1 
    lax.z __13
    axs #-['0']
    stx.z __13
    // [178] *((const byte*) tod_buffer+(byte) 9) ← (byte~) tod_str::$13 -- _deref_pbuc1=vbuz1 
    lda.z __13
    sta tod_buffer+9
    // [179] (byte~) tod_str::$14 ← (byte) tod_str::tod_TENTHS#0 & (byte) $f -- vbuz1=vbuz1_band_vbuc1 
    lda #$f
    and.z __14
    sta.z __14
    // [180] (byte~) tod_str::$15 ← (byte) '0' + (byte~) tod_str::$14 -- vbuz1=vbuc1_plus_vbuz1 
    lax.z __15
    axs #-['0']
    stx.z __15
    // [181] *((const byte*) tod_buffer+(byte) $a) ← (byte~) tod_str::$15 -- _deref_pbuc1=vbuz1 
    lda.z __15
    sta tod_buffer+$a
    jmp __breturn
    // tod_str::@return
  __breturn:
    // [182] return 
    rts
}
  // printf_ulong
// Print an unsigned int using a specific format
// printf_ulong(dword zp(2) uvalue)
printf_ulong: {
    .label uvalue = 2
    jmp __b1
    // printf_ulong::@1
  __b1:
    // [184] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // [185] (dword) ultoa::value#1 ← (dword) printf_ulong::uvalue#2 -- vduz1=vduz2 
    lda.z uvalue
    sta.z ultoa.value
    lda.z uvalue+1
    sta.z ultoa.value+1
    lda.z uvalue+2
    sta.z ultoa.value+2
    lda.z uvalue+3
    sta.z ultoa.value+3
    // [186] call ultoa 
  // Format number into buffer
    // [282] phi from printf_ulong::@1 to ultoa [phi:printf_ulong::@1->ultoa]
  ultoa_from___b1:
    jsr ultoa
    jmp __b2
    // printf_ulong::@2
  __b2:
    // [187] (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer) -- vbuz1=_deref_pbuc1 
    lda printf_buffer
    sta.z printf_number_buffer.buffer_sign
    // [188] call printf_number_buffer 
  // Print using format
    // [245] phi from printf_ulong::@2 to printf_number_buffer [phi:printf_ulong::@2->printf_number_buffer]
  printf_number_buffer_from___b2:
    // [245] phi (byte) printf_number_buffer::format_upper_case#10 = (byte) 0 [phi:printf_ulong::@2->printf_number_buffer#0] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_number_buffer.format_upper_case
    // [245] phi (byte) printf_number_buffer::buffer_sign#10 = (byte) printf_number_buffer::buffer_sign#0 [phi:printf_ulong::@2->printf_number_buffer#1] -- register_copy 
    // [245] phi (byte) printf_number_buffer::format_zero_padding#10 = (byte) 0 [phi:printf_ulong::@2->printf_number_buffer#2] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_number_buffer.format_zero_padding
    // [245] phi (byte) printf_number_buffer::format_justify_left#10 = (byte) 0 [phi:printf_ulong::@2->printf_number_buffer#3] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_number_buffer.format_justify_left
    // [245] phi (byte) printf_number_buffer::format_min_length#3 = (byte) 0 [phi:printf_ulong::@2->printf_number_buffer#4] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_number_buffer.format_min_length
    jsr printf_number_buffer
    jmp __breturn
    // printf_ulong::@return
  __breturn:
    // [189] return 
    rts
}
  // printf_string
// Print a string value using a specific format
// Handles justification and min length 
printf_string: {
    // [191] phi from printf_string to printf_string::@1 [phi:printf_string->printf_string::@1]
  __b1_from_printf_string:
    jmp __b1
    // printf_string::@1
  __b1:
    // [192] call cputs 
    // [132] phi from printf_string::@1 to cputs [phi:printf_string::@1->cputs]
  cputs_from___b1:
    // [132] phi (to_nomodify byte*) cputs::s#14 = (const byte*) tod_buffer [phi:printf_string::@1->cputs#0] -- pbuz1=pbuc1 
    lda #<tod_buffer
    sta.z cputs.s
    lda #>tod_buffer
    sta.z cputs.s+1
    jsr cputs
    jmp __breturn
    // printf_string::@return
  __breturn:
    // [193] return 
    rts
}
  // diff
// Find the absolute difference between two unsigned chars
// diff(byte zp($d) a, byte zp(6) b)
diff: {
    .label a = $d
    .label b = 6
    .label return = $1b
    .label return_1 = $d
    // [195] if((byte) diff::a#2<(byte) diff::b#2) goto diff::@1 -- vbuz1_lt_vbuz2_then_la1 
    lda.z a
    cmp.z b
    bcc __b1
    jmp __b2
    // diff::@2
  __b2:
    // [196] (byte) diff::return#3 ← (byte) diff::a#2 - (byte) diff::b#2 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z return_1
    sec
    sbc.z b
    sta.z return_1
    // [197] phi from diff::@1 diff::@2 to diff::@return [phi:diff::@1/diff::@2->diff::@return]
  __breturn_from___b1:
  __breturn_from___b2:
    // [197] phi (byte) diff::return#4 = (byte) diff::return#2 [phi:diff::@1/diff::@2->diff::@return#0] -- register_copy 
    jmp __breturn
    // diff::@return
  __breturn:
    // [198] return 
    rts
    // diff::@1
  __b1:
    // [199] (byte) diff::return#2 ← (byte) diff::b#2 - (byte) diff::a#2 -- vbuz1=vbuz2_minus_vbuz1 
    lda.z b
    sec
    sbc.z return_1
    sta.z return_1
    jmp __breturn_from___b1
}
  // gotoxy
// Set the cursor to the specified position
gotoxy: {
    .const x = 0
    .const y = 5
    .const line_offset = y*$28
    jmp __b1
    // gotoxy::@1
  __b1:
    // [201] (byte) conio_cursor_x ← (const byte) gotoxy::x#2 -- vbuz1=vbuc1 
    lda #x
    sta.z conio_cursor_x
    // [202] (byte) conio_cursor_y ← (const byte) gotoxy::y#2 -- vbuz1=vbuc1 
    lda #y
    sta.z conio_cursor_y
    // [203] (byte*) conio_line_text ← (const nomodify byte*) DEFAULT_SCREEN+(const word) gotoxy::line_offset#0 -- pbuz1=pbuc1 
    lda #<DEFAULT_SCREEN+line_offset
    sta.z conio_line_text
    lda #>DEFAULT_SCREEN+line_offset
    sta.z conio_line_text+1
    // [204] (byte*) conio_line_color ← (const nomodify byte*) COLORRAM+(const word) gotoxy::line_offset#0 -- pbuz1=pbuc1 
    lda #<COLORRAM+line_offset
    sta.z conio_line_color
    lda #>COLORRAM+line_offset
    sta.z conio_line_color+1
    jmp __breturn
    // gotoxy::@return
  __breturn:
    // [205] return 
    rts
}
  // printf_uchar
// Print an unsigned char using a specific format
// printf_uchar(byte zp($19) uvalue)
printf_uchar: {
    .label uvalue = $19
    jmp __b1
    // printf_uchar::@1
  __b1:
    // [207] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // [208] (byte) uctoa::value#1 ← (byte) printf_uchar::uvalue#2 -- vbuz1=vbuz2 
    lda.z uvalue
    sta.z uctoa.value
    // [209] call uctoa 
  // Format number into buffer
    // [303] phi from printf_uchar::@1 to uctoa [phi:printf_uchar::@1->uctoa]
  uctoa_from___b1:
    jsr uctoa
    jmp __b2
    // printf_uchar::@2
  __b2:
    // [210] (byte) printf_number_buffer::buffer_sign#2 ← *((byte*)&(struct printf_buffer_number) printf_buffer) -- vbuz1=_deref_pbuc1 
    lda printf_buffer
    sta.z printf_number_buffer.buffer_sign
    // [211] call printf_number_buffer 
  // Print using format
    // [245] phi from printf_uchar::@2 to printf_number_buffer [phi:printf_uchar::@2->printf_number_buffer]
  printf_number_buffer_from___b2:
    // [245] phi (byte) printf_number_buffer::format_upper_case#10 = (byte) 0 [phi:printf_uchar::@2->printf_number_buffer#0] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_number_buffer.format_upper_case
    // [245] phi (byte) printf_number_buffer::buffer_sign#10 = (byte) printf_number_buffer::buffer_sign#2 [phi:printf_uchar::@2->printf_number_buffer#1] -- register_copy 
    // [245] phi (byte) printf_number_buffer::format_zero_padding#10 = (byte) 0 [phi:printf_uchar::@2->printf_number_buffer#2] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_number_buffer.format_zero_padding
    // [245] phi (byte) printf_number_buffer::format_justify_left#10 = (byte) 0 [phi:printf_uchar::@2->printf_number_buffer#3] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_number_buffer.format_justify_left
    // [245] phi (byte) printf_number_buffer::format_min_length#3 = (byte) 0 [phi:printf_uchar::@2->printf_number_buffer#4] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_number_buffer.format_min_length
    jsr printf_number_buffer
    jmp __breturn
    // printf_uchar::@return
  __breturn:
    // [212] return 
    rts
}
  // cputc
// Output one character at the current cursor position
// Moves the cursor forward. Scrolls the entire screen if needed
// cputc(byte zp($d) c)
cputc: {
    .label c = $d
    // [214] if((byte) cputc::c#3==(byte) ' ') goto cputc::@1 -- vbuz1_eq_vbuc1_then_la1 
    lda #'\n'
    cmp.z c
    beq __b1_from_cputc
    jmp __b2
    // cputc::@2
  __b2:
    // [215] *((byte*) conio_line_text + (byte) conio_cursor_x) ← (byte) cputc::c#3 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda.z c
    ldy.z conio_cursor_x
    sta (conio_line_text),y
    // [216] *((byte*) conio_line_color + (byte) conio_cursor_x) ← (const nomodify byte) LIGHT_BLUE -- pbuz1_derefidx_vbuz2=vbuc1 
    lda #LIGHT_BLUE
    ldy.z conio_cursor_x
    sta (conio_line_color),y
    // [217] (byte) conio_cursor_x ← ++ (byte) conio_cursor_x -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_x
    // [218] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z conio_cursor_x
    bne __breturn
    // [219] phi from cputc::@2 to cputc::@3 [phi:cputc::@2->cputc::@3]
  __b3_from___b2:
    jmp __b3
    // cputc::@3
  __b3:
    // [220] call cputln 
    jsr cputln
    jmp __breturn
    // cputc::@return
  __breturn:
    // [221] return 
    rts
    // [222] phi from cputc to cputc::@1 [phi:cputc->cputc::@1]
  __b1_from_cputc:
    jmp __b1
    // cputc::@1
  __b1:
    // [223] call cputln 
    jsr cputln
    jmp __breturn
}
  // utoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// utoa(word zp($e) value, byte* zp($b) buffer)
utoa: {
    .const max_digits = 5
    .label __10 = $1d
    .label __11 = $1c
    .label digit_value = $1e
    .label buffer = $b
    .label digit = 6
    .label value = $e
    .label started = $1a
    // [225] phi from utoa to utoa::@1 [phi:utoa->utoa::@1]
  __b1_from_utoa:
    // [225] phi (byte*) utoa::buffer#11 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:utoa->utoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer+1
    // [225] phi (byte) utoa::started#2 = (byte) 0 [phi:utoa->utoa::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z started
    // [225] phi (word) utoa::value#2 = (const word) printf_uint::uvalue#0 [phi:utoa->utoa::@1#2] -- vwuz1=vwuc1 
    lda #<printf_uint.uvalue
    sta.z value
    lda #>printf_uint.uvalue
    sta.z value+1
    // [225] phi (byte) utoa::digit#2 = (byte) 0 [phi:utoa->utoa::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    jmp __b1
    // utoa::@1
  __b1:
    // [226] if((byte) utoa::digit#2<(const byte) utoa::max_digits#1-(byte) 1) goto utoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #max_digits-1
    bcc __b2
    jmp __b3
    // utoa::@3
  __b3:
    // [227] (byte~) utoa::$11 ← (byte)(word) utoa::value#2 -- vbuz1=_byte_vwuz2 
    lda.z value
    sta.z __11
    // [228] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __11
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    // [229] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [230] *((byte*) utoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (buffer),y
    jmp __breturn
    // utoa::@return
  __breturn:
    // [231] return 
    rts
    // utoa::@2
  __b2:
    // [232] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z digit
    asl
    sta.z __10
    // [233] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10) -- vwuz1=pwuc1_derefidx_vbuz2 
    ldy.z __10
    lda RADIX_DECIMAL_VALUES,y
    sta.z digit_value
    lda RADIX_DECIMAL_VALUES+1,y
    sta.z digit_value+1
    // [234] if((byte) 0!=(byte) utoa::started#2) goto utoa::@5 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z started
    bne __b5
    jmp __b7
    // utoa::@7
  __b7:
    // [235] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5 -- vwuz1_ge_vwuz2_then_la1 
    lda.z digit_value+1
    cmp.z value+1
    bne !+
    lda.z digit_value
    cmp.z value
    beq __b5
  !:
    bcc __b5
    // [236] phi from utoa::@7 to utoa::@4 [phi:utoa::@7->utoa::@4]
  __b4_from___b7:
    // [236] phi (byte*) utoa::buffer#14 = (byte*) utoa::buffer#11 [phi:utoa::@7->utoa::@4#0] -- register_copy 
    // [236] phi (byte) utoa::started#4 = (byte) utoa::started#2 [phi:utoa::@7->utoa::@4#1] -- register_copy 
    // [236] phi (word) utoa::value#6 = (word) utoa::value#2 [phi:utoa::@7->utoa::@4#2] -- register_copy 
    jmp __b4
    // utoa::@4
  __b4:
    // [237] (byte) utoa::digit#1 ← ++ (byte) utoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [225] phi from utoa::@4 to utoa::@1 [phi:utoa::@4->utoa::@1]
  __b1_from___b4:
    // [225] phi (byte*) utoa::buffer#11 = (byte*) utoa::buffer#14 [phi:utoa::@4->utoa::@1#0] -- register_copy 
    // [225] phi (byte) utoa::started#2 = (byte) utoa::started#4 [phi:utoa::@4->utoa::@1#1] -- register_copy 
    // [225] phi (word) utoa::value#2 = (word) utoa::value#6 [phi:utoa::@4->utoa::@1#2] -- register_copy 
    // [225] phi (byte) utoa::digit#2 = (byte) utoa::digit#1 [phi:utoa::@4->utoa::@1#3] -- register_copy 
    jmp __b1
    // utoa::@5
  __b5:
    // [238] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11
    // [239] (word) utoa_append::value#0 ← (word) utoa::value#2
    // [240] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0
    // [241] call utoa_append 
    // [328] phi from utoa::@5 to utoa_append [phi:utoa::@5->utoa_append]
  utoa_append_from___b5:
    jsr utoa_append
    // [242] (word) utoa_append::return#0 ← (word) utoa_append::value#2
    jmp __b6
    // utoa::@6
  __b6:
    // [243] (word) utoa::value#0 ← (word) utoa_append::return#0
    // [244] (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [236] phi from utoa::@6 to utoa::@4 [phi:utoa::@6->utoa::@4]
  __b4_from___b6:
    // [236] phi (byte*) utoa::buffer#14 = (byte*) utoa::buffer#4 [phi:utoa::@6->utoa::@4#0] -- register_copy 
    // [236] phi (byte) utoa::started#4 = (byte) 1 [phi:utoa::@6->utoa::@4#1] -- vbuz1=vbuc1 
    lda #1
    sta.z started
    // [236] phi (word) utoa::value#6 = (word) utoa::value#0 [phi:utoa::@6->utoa::@4#2] -- register_copy 
    jmp __b4
}
  // printf_number_buffer
// Print the contents of the number buffer using a specific format.
// This handles minimum length, zero-filling, and left/right justification from the format
// printf_number_buffer(byte zp($20) buffer_sign, byte zp($1a) format_min_length, byte zp($1b) format_justify_left, byte zp($1d) format_zero_padding, byte zp($21) format_upper_case)
printf_number_buffer: {
    .label __19 = $1e
    .label buffer_sign = $20
    .label len = $d
    .label padding = $1a
    .label format_min_length = $1a
    .label format_zero_padding = $1d
    .label format_justify_left = $1b
    .label format_upper_case = $21
    // [246] if((byte) 0==(byte) printf_number_buffer::format_min_length#3) goto printf_number_buffer::@1 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_min_length
    beq __b1_from_printf_number_buffer
    // [247] phi from printf_number_buffer to printf_number_buffer::@6 [phi:printf_number_buffer->printf_number_buffer::@6]
  __b6_from_printf_number_buffer:
    jmp __b6
    // printf_number_buffer::@6
  __b6:
    // [248] call strlen 
    // [335] phi from printf_number_buffer::@6 to strlen [phi:printf_number_buffer::@6->strlen]
  strlen_from___b6:
    jsr strlen
    // [249] (word) strlen::return#2 ← (word) strlen::len#2
    jmp __b14
    // printf_number_buffer::@14
  __b14:
    // [250] (word~) printf_number_buffer::$19 ← (word) strlen::return#2
    // [251] (signed byte) printf_number_buffer::len#0 ← (signed byte)(word~) printf_number_buffer::$19 -- vbsz1=_sbyte_vwuz2 
    // There is a minimum length - work out the padding
    lda.z __19
    sta.z len
    // [252] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@13 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z buffer_sign
    beq __b13_from___b14
    jmp __b7
    // printf_number_buffer::@7
  __b7:
    // [253] (signed byte) printf_number_buffer::len#1 ← ++ (signed byte) printf_number_buffer::len#0 -- vbsz1=_inc_vbsz1 
    inc.z len
    // [254] phi from printf_number_buffer::@14 printf_number_buffer::@7 to printf_number_buffer::@13 [phi:printf_number_buffer::@14/printf_number_buffer::@7->printf_number_buffer::@13]
  __b13_from___b14:
  __b13_from___b7:
    // [254] phi (signed byte) printf_number_buffer::len#2 = (signed byte) printf_number_buffer::len#0 [phi:printf_number_buffer::@14/printf_number_buffer::@7->printf_number_buffer::@13#0] -- register_copy 
    jmp __b13
    // printf_number_buffer::@13
  __b13:
    // [255] (signed byte) printf_number_buffer::padding#1 ← (signed byte)(byte) printf_number_buffer::format_min_length#3 - (signed byte) printf_number_buffer::len#2 -- vbsz1=vbsz1_minus_vbsz2 
    lda.z padding
    sec
    sbc.z len
    sta.z padding
    // [256] if((signed byte) printf_number_buffer::padding#1>=(signed byte) 0) goto printf_number_buffer::@21 -- vbsz1_ge_0_then_la1 
    lda.z padding
    cmp #0
    bpl __b21_from___b13
    // [258] phi from printf_number_buffer printf_number_buffer::@13 to printf_number_buffer::@1 [phi:printf_number_buffer/printf_number_buffer::@13->printf_number_buffer::@1]
  __b1_from_printf_number_buffer:
  __b1_from___b13:
    // [258] phi (signed byte) printf_number_buffer::padding#10 = (signed byte) 0 [phi:printf_number_buffer/printf_number_buffer::@13->printf_number_buffer::@1#0] -- vbsz1=vbsc1 
    lda #0
    sta.z padding
    jmp __b1
    // [257] phi from printf_number_buffer::@13 to printf_number_buffer::@21 [phi:printf_number_buffer::@13->printf_number_buffer::@21]
  __b21_from___b13:
    jmp __b21
    // printf_number_buffer::@21
  __b21:
    // [258] phi from printf_number_buffer::@21 to printf_number_buffer::@1 [phi:printf_number_buffer::@21->printf_number_buffer::@1]
  __b1_from___b21:
    // [258] phi (signed byte) printf_number_buffer::padding#10 = (signed byte) printf_number_buffer::padding#1 [phi:printf_number_buffer::@21->printf_number_buffer::@1#0] -- register_copy 
    jmp __b1
    // printf_number_buffer::@1
  __b1:
    // [259] if((byte) 0!=(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@2 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z format_justify_left
    bne __b2
    jmp __b17
    // printf_number_buffer::@17
  __b17:
    // [260] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@2 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z format_zero_padding
    bne __b2
    jmp __b16
    // printf_number_buffer::@16
  __b16:
    // [261] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@8 -- vbsc1_neq_vbsz1_then_la1 
    lda #0
    cmp.z padding
    bne __b8
    jmp __b2
    // printf_number_buffer::@8
  __b8:
    // [262] (byte) printf_padding::length#0 ← (byte)(signed byte) printf_number_buffer::padding#10 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [263] call printf_padding 
    // [341] phi from printf_number_buffer::@8 to printf_padding [phi:printf_number_buffer::@8->printf_padding]
  printf_padding_from___b8:
    // [341] phi (byte) printf_padding::pad#7 = (byte) ' ' [phi:printf_number_buffer::@8->printf_padding#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z printf_padding.pad
    // [341] phi (byte) printf_padding::length#6 = (byte) printf_padding::length#0 [phi:printf_number_buffer::@8->printf_padding#1] -- register_copy 
    jsr printf_padding
    jmp __b2
    // printf_number_buffer::@2
  __b2:
    // [264] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@3 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z buffer_sign
    beq __b3
    jmp __b9
    // printf_number_buffer::@9
  __b9:
    // [265] (byte) cputc::c#2 ← (byte) printf_number_buffer::buffer_sign#10 -- vbuz1=vbuz2 
    lda.z buffer_sign
    sta.z cputc.c
    // [266] call cputc 
    // [213] phi from printf_number_buffer::@9 to cputc [phi:printf_number_buffer::@9->cputc]
  cputc_from___b9:
    // [213] phi (byte) cputc::c#3 = (byte) cputc::c#2 [phi:printf_number_buffer::@9->cputc#0] -- register_copy 
    jsr cputc
    jmp __b3
    // printf_number_buffer::@3
  __b3:
    // [267] if((byte) 0==(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@4 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_zero_padding
    beq __b4
    jmp __b18
    // printf_number_buffer::@18
  __b18:
    // [268] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@10 -- vbsc1_neq_vbsz1_then_la1 
    lda #0
    cmp.z padding
    bne __b10
    jmp __b4
    // printf_number_buffer::@10
  __b10:
    // [269] (byte) printf_padding::length#1 ← (byte)(signed byte) printf_number_buffer::padding#10 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [270] call printf_padding 
    // [341] phi from printf_number_buffer::@10 to printf_padding [phi:printf_number_buffer::@10->printf_padding]
  printf_padding_from___b10:
    // [341] phi (byte) printf_padding::pad#7 = (byte) '0' [phi:printf_number_buffer::@10->printf_padding#0] -- vbuz1=vbuc1 
    lda #'0'
    sta.z printf_padding.pad
    // [341] phi (byte) printf_padding::length#6 = (byte) printf_padding::length#1 [phi:printf_number_buffer::@10->printf_padding#1] -- register_copy 
    jsr printf_padding
    jmp __b4
    // printf_number_buffer::@4
  __b4:
    // [271] if((byte) 0==(byte) printf_number_buffer::format_upper_case#10) goto printf_number_buffer::@5 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_upper_case
    beq __b5_from___b4
    // [272] phi from printf_number_buffer::@4 to printf_number_buffer::@11 [phi:printf_number_buffer::@4->printf_number_buffer::@11]
  __b11_from___b4:
    jmp __b11
    // printf_number_buffer::@11
  __b11:
    // [273] call strupr 
    // [348] phi from printf_number_buffer::@11 to strupr [phi:printf_number_buffer::@11->strupr]
  strupr_from___b11:
    jsr strupr
    // [274] phi from printf_number_buffer::@11 printf_number_buffer::@4 to printf_number_buffer::@5 [phi:printf_number_buffer::@11/printf_number_buffer::@4->printf_number_buffer::@5]
  __b5_from___b11:
  __b5_from___b4:
    jmp __b5
    // printf_number_buffer::@5
  __b5:
    // [275] call cputs 
    // [132] phi from printf_number_buffer::@5 to cputs [phi:printf_number_buffer::@5->cputs]
  cputs_from___b5:
    // [132] phi (to_nomodify byte*) cputs::s#14 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:printf_number_buffer::@5->cputs#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z cputs.s
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z cputs.s+1
    jsr cputs
    jmp __b15
    // printf_number_buffer::@15
  __b15:
    // [276] if((byte) 0==(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@return -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_justify_left
    beq __breturn
    jmp __b20
    // printf_number_buffer::@20
  __b20:
    // [277] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@return -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z format_zero_padding
    bne __breturn
    jmp __b19
    // printf_number_buffer::@19
  __b19:
    // [278] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@12 -- vbsc1_neq_vbsz1_then_la1 
    lda #0
    cmp.z padding
    bne __b12
    jmp __breturn
    // printf_number_buffer::@12
  __b12:
    // [279] (byte) printf_padding::length#2 ← (byte)(signed byte) printf_number_buffer::padding#10 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [280] call printf_padding 
    // [341] phi from printf_number_buffer::@12 to printf_padding [phi:printf_number_buffer::@12->printf_padding]
  printf_padding_from___b12:
    // [341] phi (byte) printf_padding::pad#7 = (byte) ' ' [phi:printf_number_buffer::@12->printf_padding#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z printf_padding.pad
    // [341] phi (byte) printf_padding::length#6 = (byte) printf_padding::length#2 [phi:printf_number_buffer::@12->printf_padding#1] -- register_copy 
    jsr printf_padding
    jmp __breturn
    // printf_number_buffer::@return
  __breturn:
    // [281] return 
    rts
}
  // ultoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// ultoa(dword zp(7) value, byte* zp($b) buffer)
ultoa: {
    .label __10 = $21
    .label __11 = $20
    .label digit_value = $22
    .label buffer = $b
    .label digit = $1b
    .label value = 7
    .label started = $1d
    // [283] phi from ultoa to ultoa::@1 [phi:ultoa->ultoa::@1]
  __b1_from_ultoa:
    // [283] phi (byte*) ultoa::buffer#11 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:ultoa->ultoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer+1
    // [283] phi (byte) ultoa::started#2 = (byte) 0 [phi:ultoa->ultoa::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z started
    // [283] phi (dword) ultoa::value#2 = (dword) ultoa::value#1 [phi:ultoa->ultoa::@1#2] -- register_copy 
    // [283] phi (byte) ultoa::digit#2 = (byte) 0 [phi:ultoa->ultoa::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    jmp __b1
    // ultoa::@1
  __b1:
    // [284] if((byte) ultoa::digit#2<(byte) $a-(byte) 1) goto ultoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #$a-1
    bcc __b2
    jmp __b3
    // ultoa::@3
  __b3:
    // [285] (byte~) ultoa::$11 ← (byte)(dword) ultoa::value#2 -- vbuz1=_byte_vduz2 
    lda.z value
    sta.z __11
    // [286] *((byte*) ultoa::buffer#11) ← *((const byte*) DIGITS + (byte~) ultoa::$11) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __11
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    // [287] (byte*) ultoa::buffer#3 ← ++ (byte*) ultoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [288] *((byte*) ultoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (buffer),y
    jmp __breturn
    // ultoa::@return
  __breturn:
    // [289] return 
    rts
    // ultoa::@2
  __b2:
    // [290] (byte~) ultoa::$10 ← (byte) ultoa::digit#2 << (byte) 2 -- vbuz1=vbuz2_rol_2 
    lda.z digit
    asl
    asl
    sta.z __10
    // [291] (dword) ultoa::digit_value#0 ← *((const dword*) RADIX_DECIMAL_VALUES_LONG + (byte~) ultoa::$10) -- vduz1=pduc1_derefidx_vbuz2 
    ldy.z __10
    lda RADIX_DECIMAL_VALUES_LONG,y
    sta.z digit_value
    lda RADIX_DECIMAL_VALUES_LONG+1,y
    sta.z digit_value+1
    lda RADIX_DECIMAL_VALUES_LONG+2,y
    sta.z digit_value+2
    lda RADIX_DECIMAL_VALUES_LONG+3,y
    sta.z digit_value+3
    // [292] if((byte) 0!=(byte) ultoa::started#2) goto ultoa::@5 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z started
    bne __b5
    jmp __b7
    // ultoa::@7
  __b7:
    // [293] if((dword) ultoa::value#2>=(dword) ultoa::digit_value#0) goto ultoa::@5 -- vduz1_ge_vduz2_then_la1 
    lda.z value+3
    cmp.z digit_value+3
    bcc !+
    bne __b5
    lda.z value+2
    cmp.z digit_value+2
    bcc !+
    bne __b5
    lda.z value+1
    cmp.z digit_value+1
    bcc !+
    bne __b5
    lda.z value
    cmp.z digit_value
    bcs __b5
  !:
    // [294] phi from ultoa::@7 to ultoa::@4 [phi:ultoa::@7->ultoa::@4]
  __b4_from___b7:
    // [294] phi (byte*) ultoa::buffer#14 = (byte*) ultoa::buffer#11 [phi:ultoa::@7->ultoa::@4#0] -- register_copy 
    // [294] phi (byte) ultoa::started#4 = (byte) ultoa::started#2 [phi:ultoa::@7->ultoa::@4#1] -- register_copy 
    // [294] phi (dword) ultoa::value#6 = (dword) ultoa::value#2 [phi:ultoa::@7->ultoa::@4#2] -- register_copy 
    jmp __b4
    // ultoa::@4
  __b4:
    // [295] (byte) ultoa::digit#1 ← ++ (byte) ultoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [283] phi from ultoa::@4 to ultoa::@1 [phi:ultoa::@4->ultoa::@1]
  __b1_from___b4:
    // [283] phi (byte*) ultoa::buffer#11 = (byte*) ultoa::buffer#14 [phi:ultoa::@4->ultoa::@1#0] -- register_copy 
    // [283] phi (byte) ultoa::started#2 = (byte) ultoa::started#4 [phi:ultoa::@4->ultoa::@1#1] -- register_copy 
    // [283] phi (dword) ultoa::value#2 = (dword) ultoa::value#6 [phi:ultoa::@4->ultoa::@1#2] -- register_copy 
    // [283] phi (byte) ultoa::digit#2 = (byte) ultoa::digit#1 [phi:ultoa::@4->ultoa::@1#3] -- register_copy 
    jmp __b1
    // ultoa::@5
  __b5:
    // [296] (byte*) ultoa_append::buffer#0 ← (byte*) ultoa::buffer#11
    // [297] (dword) ultoa_append::value#0 ← (dword) ultoa::value#2
    // [298] (dword) ultoa_append::sub#0 ← (dword) ultoa::digit_value#0
    // [299] call ultoa_append 
    // [358] phi from ultoa::@5 to ultoa_append [phi:ultoa::@5->ultoa_append]
  ultoa_append_from___b5:
    jsr ultoa_append
    // [300] (dword) ultoa_append::return#0 ← (dword) ultoa_append::value#2
    jmp __b6
    // ultoa::@6
  __b6:
    // [301] (dword) ultoa::value#0 ← (dword) ultoa_append::return#0
    // [302] (byte*) ultoa::buffer#4 ← ++ (byte*) ultoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [294] phi from ultoa::@6 to ultoa::@4 [phi:ultoa::@6->ultoa::@4]
  __b4_from___b6:
    // [294] phi (byte*) ultoa::buffer#14 = (byte*) ultoa::buffer#4 [phi:ultoa::@6->ultoa::@4#0] -- register_copy 
    // [294] phi (byte) ultoa::started#4 = (byte) 1 [phi:ultoa::@6->ultoa::@4#1] -- vbuz1=vbuc1 
    lda #1
    sta.z started
    // [294] phi (dword) ultoa::value#6 = (dword) ultoa::value#0 [phi:ultoa::@6->ultoa::@4#2] -- register_copy 
    jmp __b4
}
  // uctoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// uctoa(byte zp($21) value, byte* zp($e) buffer)
uctoa: {
    .label digit_value = $26
    .label buffer = $e
    .label digit = $20
    .label value = $21
    .label started = $d
    // [304] phi from uctoa to uctoa::@1 [phi:uctoa->uctoa::@1]
  __b1_from_uctoa:
    // [304] phi (byte*) uctoa::buffer#11 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:uctoa->uctoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer+1
    // [304] phi (byte) uctoa::started#2 = (byte) 0 [phi:uctoa->uctoa::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z started
    // [304] phi (byte) uctoa::value#2 = (byte) uctoa::value#1 [phi:uctoa->uctoa::@1#2] -- register_copy 
    // [304] phi (byte) uctoa::digit#2 = (byte) 0 [phi:uctoa->uctoa::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    jmp __b1
    // uctoa::@1
  __b1:
    // [305] if((byte) uctoa::digit#2<(byte) 2-(byte) 1) goto uctoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #2-1
    bcc __b2
    jmp __b3
    // uctoa::@3
  __b3:
    // [306] *((byte*) uctoa::buffer#11) ← *((const byte*) DIGITS + (byte) uctoa::value#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z value
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    // [307] (byte*) uctoa::buffer#3 ← ++ (byte*) uctoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [308] *((byte*) uctoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (buffer),y
    jmp __breturn
    // uctoa::@return
  __breturn:
    // [309] return 
    rts
    // uctoa::@2
  __b2:
    // [310] (byte) uctoa::digit_value#0 ← *((const byte*) RADIX_HEXADECIMAL_VALUES_CHAR + (byte) uctoa::digit#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z digit
    lda RADIX_HEXADECIMAL_VALUES_CHAR,y
    sta.z digit_value
    // [311] if((byte) 0!=(byte) uctoa::started#2) goto uctoa::@5 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z started
    bne __b5
    jmp __b7
    // uctoa::@7
  __b7:
    // [312] if((byte) uctoa::value#2>=(byte) uctoa::digit_value#0) goto uctoa::@5 -- vbuz1_ge_vbuz2_then_la1 
    lda.z value
    cmp.z digit_value
    bcs __b5
    // [313] phi from uctoa::@7 to uctoa::@4 [phi:uctoa::@7->uctoa::@4]
  __b4_from___b7:
    // [313] phi (byte*) uctoa::buffer#14 = (byte*) uctoa::buffer#11 [phi:uctoa::@7->uctoa::@4#0] -- register_copy 
    // [313] phi (byte) uctoa::started#4 = (byte) uctoa::started#2 [phi:uctoa::@7->uctoa::@4#1] -- register_copy 
    // [313] phi (byte) uctoa::value#6 = (byte) uctoa::value#2 [phi:uctoa::@7->uctoa::@4#2] -- register_copy 
    jmp __b4
    // uctoa::@4
  __b4:
    // [314] (byte) uctoa::digit#1 ← ++ (byte) uctoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [304] phi from uctoa::@4 to uctoa::@1 [phi:uctoa::@4->uctoa::@1]
  __b1_from___b4:
    // [304] phi (byte*) uctoa::buffer#11 = (byte*) uctoa::buffer#14 [phi:uctoa::@4->uctoa::@1#0] -- register_copy 
    // [304] phi (byte) uctoa::started#2 = (byte) uctoa::started#4 [phi:uctoa::@4->uctoa::@1#1] -- register_copy 
    // [304] phi (byte) uctoa::value#2 = (byte) uctoa::value#6 [phi:uctoa::@4->uctoa::@1#2] -- register_copy 
    // [304] phi (byte) uctoa::digit#2 = (byte) uctoa::digit#1 [phi:uctoa::@4->uctoa::@1#3] -- register_copy 
    jmp __b1
    // uctoa::@5
  __b5:
    // [315] (byte*) uctoa_append::buffer#0 ← (byte*) uctoa::buffer#11
    // [316] (byte) uctoa_append::value#0 ← (byte) uctoa::value#2
    // [317] (byte) uctoa_append::sub#0 ← (byte) uctoa::digit_value#0
    // [318] call uctoa_append 
    // [365] phi from uctoa::@5 to uctoa_append [phi:uctoa::@5->uctoa_append]
  uctoa_append_from___b5:
    jsr uctoa_append
    // [319] (byte) uctoa_append::return#0 ← (byte) uctoa_append::value#2
    jmp __b6
    // uctoa::@6
  __b6:
    // [320] (byte) uctoa::value#0 ← (byte) uctoa_append::return#0
    // [321] (byte*) uctoa::buffer#4 ← ++ (byte*) uctoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [313] phi from uctoa::@6 to uctoa::@4 [phi:uctoa::@6->uctoa::@4]
  __b4_from___b6:
    // [313] phi (byte*) uctoa::buffer#14 = (byte*) uctoa::buffer#4 [phi:uctoa::@6->uctoa::@4#0] -- register_copy 
    // [313] phi (byte) uctoa::started#4 = (byte) 1 [phi:uctoa::@6->uctoa::@4#1] -- vbuz1=vbuc1 
    lda #1
    sta.z started
    // [313] phi (byte) uctoa::value#6 = (byte) uctoa::value#0 [phi:uctoa::@6->uctoa::@4#2] -- register_copy 
    jmp __b4
}
  // cputln
// Print a newline
cputln: {
    // [322] (byte*) conio_line_text ← (byte*) conio_line_text + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z conio_line_text
    sta.z conio_line_text
    bcc !+
    inc.z conio_line_text+1
  !:
    // [323] (byte*) conio_line_color ← (byte*) conio_line_color + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z conio_line_color
    sta.z conio_line_color
    bcc !+
    inc.z conio_line_color+1
  !:
    // [324] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [325] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // [326] call cscroll 
    jsr cscroll
    jmp __breturn
    // cputln::@return
  __breturn:
    // [327] return 
    rts
}
  // utoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// utoa_append(byte* zp($b) buffer, word zp($e) value, word zp($1e) sub)
utoa_append: {
    .label buffer = $b
    .label value = $e
    .label sub = $1e
    .label return = $e
    .label digit = $1c
    // [329] phi from utoa_append to utoa_append::@1 [phi:utoa_append->utoa_append::@1]
  __b1_from_utoa_append:
    // [329] phi (byte) utoa_append::digit#2 = (byte) 0 [phi:utoa_append->utoa_append::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    // [329] phi (word) utoa_append::value#2 = (word) utoa_append::value#0 [phi:utoa_append->utoa_append::@1#1] -- register_copy 
    jmp __b1
    // utoa_append::@1
  __b1:
    // [330] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2 -- vwuz1_ge_vwuz2_then_la1 
    lda.z sub+1
    cmp.z value+1
    bne !+
    lda.z sub
    cmp.z value
    beq __b2
  !:
    bcc __b2
    jmp __b3
    // utoa_append::@3
  __b3:
    // [331] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z digit
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    jmp __breturn
    // utoa_append::@return
  __breturn:
    // [332] return 
    rts
    // utoa_append::@2
  __b2:
    // [333] (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [334] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    lda.z value+1
    sbc.z sub+1
    sta.z value+1
    // [329] phi from utoa_append::@2 to utoa_append::@1 [phi:utoa_append::@2->utoa_append::@1]
  __b1_from___b2:
    // [329] phi (byte) utoa_append::digit#2 = (byte) utoa_append::digit#1 [phi:utoa_append::@2->utoa_append::@1#0] -- register_copy 
    // [329] phi (word) utoa_append::value#2 = (word) utoa_append::value#1 [phi:utoa_append::@2->utoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // strlen
// Computes the length of the string str up to but not including the terminating null character.
// strlen(byte* zp($e) str)
strlen: {
    .label len = $1e
    .label str = $e
    .label return = $1e
    // [336] phi from strlen to strlen::@1 [phi:strlen->strlen::@1]
  __b1_from_strlen:
    // [336] phi (word) strlen::len#2 = (word) 0 [phi:strlen->strlen::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z len
    lda #>0
    sta.z len+1
    // [336] phi (byte*) strlen::str#3 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:strlen->strlen::@1#1] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z str
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z str+1
    jmp __b1
    // strlen::@1
  __b1:
    // [337] if((byte) 0!=*((byte*) strlen::str#3)) goto strlen::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // strlen::@return
  __breturn:
    // [338] return 
    rts
    // strlen::@2
  __b2:
    // [339] (word) strlen::len#1 ← ++ (word) strlen::len#2 -- vwuz1=_inc_vwuz1 
    inc.z len
    bne !+
    inc.z len+1
  !:
    // [340] (byte*) strlen::str#0 ← ++ (byte*) strlen::str#3 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [336] phi from strlen::@2 to strlen::@1 [phi:strlen::@2->strlen::@1]
  __b1_from___b2:
    // [336] phi (word) strlen::len#2 = (word) strlen::len#1 [phi:strlen::@2->strlen::@1#0] -- register_copy 
    // [336] phi (byte*) strlen::str#3 = (byte*) strlen::str#0 [phi:strlen::@2->strlen::@1#1] -- register_copy 
    jmp __b1
}
  // printf_padding
// Print a padding char a number of times
// printf_padding(byte zp($d) pad, byte zp($1c) length)
printf_padding: {
    .label i = $26
    .label length = $1c
    .label pad = $d
    // [342] phi from printf_padding to printf_padding::@1 [phi:printf_padding->printf_padding::@1]
  __b1_from_printf_padding:
    // [342] phi (byte) printf_padding::i#2 = (byte) 0 [phi:printf_padding->printf_padding::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // printf_padding::@1
  __b1:
    // [343] if((byte) printf_padding::i#2<(byte) printf_padding::length#6) goto printf_padding::@2 -- vbuz1_lt_vbuz2_then_la1 
    lda.z i
    cmp.z length
    bcc __b2
    jmp __breturn
    // printf_padding::@return
  __breturn:
    // [344] return 
    rts
    // printf_padding::@2
  __b2:
    // [345] (byte) cputc::c#1 ← (byte) printf_padding::pad#7
    // [346] call cputc 
    // [213] phi from printf_padding::@2 to cputc [phi:printf_padding::@2->cputc]
  cputc_from___b2:
    // [213] phi (byte) cputc::c#3 = (byte) cputc::c#1 [phi:printf_padding::@2->cputc#0] -- register_copy 
    jsr cputc
    jmp __b3
    // printf_padding::@3
  __b3:
    // [347] (byte) printf_padding::i#1 ← ++ (byte) printf_padding::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [342] phi from printf_padding::@3 to printf_padding::@1 [phi:printf_padding::@3->printf_padding::@1]
  __b1_from___b3:
    // [342] phi (byte) printf_padding::i#2 = (byte) printf_padding::i#1 [phi:printf_padding::@3->printf_padding::@1#0] -- register_copy 
    jmp __b1
}
  // strupr
// Converts a string to uppercase.
strupr: {
    .label str = printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    .label __0 = $1c
    .label src = $1e
    // [349] phi from strupr to strupr::@1 [phi:strupr->strupr::@1]
  __b1_from_strupr:
    // [349] phi (byte*) strupr::src#2 = (const byte*) strupr::str#0 [phi:strupr->strupr::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z src
    lda #>str
    sta.z src+1
    jmp __b1
    // strupr::@1
  __b1:
    // [350] if((byte) 0!=*((byte*) strupr::src#2)) goto strupr::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (src),y
    cmp #0
    bne __b2
    jmp __breturn
    // strupr::@return
  __breturn:
    // [351] return 
    rts
    // strupr::@2
  __b2:
    // [352] (byte) toupper::ch#0 ← *((byte*) strupr::src#2) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    sta.z toupper.ch
    // [353] call toupper 
    jsr toupper
    // [354] (byte) toupper::return#3 ← (byte) toupper::return#2
    jmp __b3
    // strupr::@3
  __b3:
    // [355] (byte~) strupr::$0 ← (byte) toupper::return#3
    // [356] *((byte*) strupr::src#2) ← (byte~) strupr::$0 -- _deref_pbuz1=vbuz2 
    lda.z __0
    ldy #0
    sta (src),y
    // [357] (byte*) strupr::src#1 ← ++ (byte*) strupr::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    // [349] phi from strupr::@3 to strupr::@1 [phi:strupr::@3->strupr::@1]
  __b1_from___b3:
    // [349] phi (byte*) strupr::src#2 = (byte*) strupr::src#1 [phi:strupr::@3->strupr::@1#0] -- register_copy 
    jmp __b1
}
  // ultoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// ultoa_append(byte* zp($b) buffer, dword zp(7) value, dword zp($22) sub)
ultoa_append: {
    .label buffer = $b
    .label value = 7
    .label sub = $22
    .label return = 7
    .label digit = $26
    // [359] phi from ultoa_append to ultoa_append::@1 [phi:ultoa_append->ultoa_append::@1]
  __b1_from_ultoa_append:
    // [359] phi (byte) ultoa_append::digit#2 = (byte) 0 [phi:ultoa_append->ultoa_append::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    // [359] phi (dword) ultoa_append::value#2 = (dword) ultoa_append::value#0 [phi:ultoa_append->ultoa_append::@1#1] -- register_copy 
    jmp __b1
    // ultoa_append::@1
  __b1:
    // [360] if((dword) ultoa_append::value#2>=(dword) ultoa_append::sub#0) goto ultoa_append::@2 -- vduz1_ge_vduz2_then_la1 
    lda.z value+3
    cmp.z sub+3
    bcc !+
    bne __b2
    lda.z value+2
    cmp.z sub+2
    bcc !+
    bne __b2
    lda.z value+1
    cmp.z sub+1
    bcc !+
    bne __b2
    lda.z value
    cmp.z sub
    bcs __b2
  !:
    jmp __b3
    // ultoa_append::@3
  __b3:
    // [361] *((byte*) ultoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) ultoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z digit
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    jmp __breturn
    // ultoa_append::@return
  __breturn:
    // [362] return 
    rts
    // ultoa_append::@2
  __b2:
    // [363] (byte) ultoa_append::digit#1 ← ++ (byte) ultoa_append::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [364] (dword) ultoa_append::value#1 ← (dword) ultoa_append::value#2 - (dword) ultoa_append::sub#0 -- vduz1=vduz1_minus_vduz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    lda.z value+1
    sbc.z sub+1
    sta.z value+1
    lda.z value+2
    sbc.z sub+2
    sta.z value+2
    lda.z value+3
    sbc.z sub+3
    sta.z value+3
    // [359] phi from ultoa_append::@2 to ultoa_append::@1 [phi:ultoa_append::@2->ultoa_append::@1]
  __b1_from___b2:
    // [359] phi (byte) ultoa_append::digit#2 = (byte) ultoa_append::digit#1 [phi:ultoa_append::@2->ultoa_append::@1#0] -- register_copy 
    // [359] phi (dword) ultoa_append::value#2 = (dword) ultoa_append::value#1 [phi:ultoa_append::@2->ultoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // uctoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// uctoa_append(byte* zp($e) buffer, byte zp($21) value, byte zp($26) sub)
uctoa_append: {
    .label buffer = $e
    .label value = $21
    .label sub = $26
    .label return = $21
    .label digit = $1c
    // [366] phi from uctoa_append to uctoa_append::@1 [phi:uctoa_append->uctoa_append::@1]
  __b1_from_uctoa_append:
    // [366] phi (byte) uctoa_append::digit#2 = (byte) 0 [phi:uctoa_append->uctoa_append::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    // [366] phi (byte) uctoa_append::value#2 = (byte) uctoa_append::value#0 [phi:uctoa_append->uctoa_append::@1#1] -- register_copy 
    jmp __b1
    // uctoa_append::@1
  __b1:
    // [367] if((byte) uctoa_append::value#2>=(byte) uctoa_append::sub#0) goto uctoa_append::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z value
    cmp.z sub
    bcs __b2
    jmp __b3
    // uctoa_append::@3
  __b3:
    // [368] *((byte*) uctoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) uctoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z digit
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    jmp __breturn
    // uctoa_append::@return
  __breturn:
    // [369] return 
    rts
    // uctoa_append::@2
  __b2:
    // [370] (byte) uctoa_append::digit#1 ← ++ (byte) uctoa_append::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [371] (byte) uctoa_append::value#1 ← (byte) uctoa_append::value#2 - (byte) uctoa_append::sub#0 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    // [366] phi from uctoa_append::@2 to uctoa_append::@1 [phi:uctoa_append::@2->uctoa_append::@1]
  __b1_from___b2:
    // [366] phi (byte) uctoa_append::digit#2 = (byte) uctoa_append::digit#1 [phi:uctoa_append::@2->uctoa_append::@1#0] -- register_copy 
    // [366] phi (byte) uctoa_append::value#2 = (byte) uctoa_append::value#1 [phi:uctoa_append::@2->uctoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // cscroll
// Scroll the entire screen if the cursor is beyond the last line
cscroll: {
    // [372] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z conio_cursor_y
    bne __breturn
    // [373] phi from cscroll to cscroll::@1 [phi:cscroll->cscroll::@1]
  __b1_from_cscroll:
    jmp __b1
    // cscroll::@1
  __b1:
    // [374] call memcpy 
    // [390] phi from cscroll::@1 to memcpy [phi:cscroll::@1->memcpy]
  memcpy_from___b1:
    // [390] phi (void*) memcpy::destination#2 = (void*)(const nomodify byte*) DEFAULT_SCREEN [phi:cscroll::@1->memcpy#0] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN
    sta.z memcpy.destination
    lda #>DEFAULT_SCREEN
    sta.z memcpy.destination+1
    // [390] phi (void*) memcpy::source#2 = (void*)(const nomodify byte*) DEFAULT_SCREEN+(byte) $28 [phi:cscroll::@1->memcpy#1] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN+$28
    sta.z memcpy.source
    lda #>DEFAULT_SCREEN+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [375] phi from cscroll::@1 to cscroll::@2 [phi:cscroll::@1->cscroll::@2]
  __b2_from___b1:
    jmp __b2
    // cscroll::@2
  __b2:
    // [376] call memcpy 
    // [390] phi from cscroll::@2 to memcpy [phi:cscroll::@2->memcpy]
  memcpy_from___b2:
    // [390] phi (void*) memcpy::destination#2 = (void*)(const nomodify byte*) COLORRAM [phi:cscroll::@2->memcpy#0] -- pvoz1=pvoc1 
    lda #<COLORRAM
    sta.z memcpy.destination
    lda #>COLORRAM
    sta.z memcpy.destination+1
    // [390] phi (void*) memcpy::source#2 = (void*)(const nomodify byte*) COLORRAM+(byte) $28 [phi:cscroll::@2->memcpy#1] -- pvoz1=pvoc1 
    lda #<COLORRAM+$28
    sta.z memcpy.source
    lda #>COLORRAM+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [377] phi from cscroll::@2 to cscroll::@3 [phi:cscroll::@2->cscroll::@3]
  __b3_from___b2:
    jmp __b3
    // cscroll::@3
  __b3:
    // [378] call memset 
    // [400] phi from cscroll::@3 to memset [phi:cscroll::@3->memset]
  memset_from___b3:
    // [400] phi (byte) memset::c#4 = (byte) ' ' [phi:cscroll::@3->memset#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z memset.c
    // [400] phi (void*) memset::str#3 = (void*)(const nomodify byte*) DEFAULT_SCREEN+(word)(number) $19*(number) $28-(byte) $28 [phi:cscroll::@3->memset#1] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN+$19*$28-$28
    sta.z memset.str
    lda #>DEFAULT_SCREEN+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    // [379] phi from cscroll::@3 to cscroll::@4 [phi:cscroll::@3->cscroll::@4]
  __b4_from___b3:
    jmp __b4
    // cscroll::@4
  __b4:
    // [380] call memset 
    // [400] phi from cscroll::@4 to memset [phi:cscroll::@4->memset]
  memset_from___b4:
    // [400] phi (byte) memset::c#4 = (const nomodify byte) LIGHT_BLUE [phi:cscroll::@4->memset#0] -- vbuz1=vbuc1 
    lda #LIGHT_BLUE
    sta.z memset.c
    // [400] phi (void*) memset::str#3 = (void*)(const nomodify byte*) COLORRAM+(word)(number) $19*(number) $28-(byte) $28 [phi:cscroll::@4->memset#1] -- pvoz1=pvoc1 
    lda #<COLORRAM+$19*$28-$28
    sta.z memset.str
    lda #>COLORRAM+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    jmp __b5
    // cscroll::@5
  __b5:
    // [381] (byte*) conio_line_text ← (byte*) conio_line_text - (byte) $28 -- pbuz1=pbuz1_minus_vbuc1 
    sec
    lda.z conio_line_text
    sbc #$28
    sta.z conio_line_text
    lda.z conio_line_text+1
    sbc #0
    sta.z conio_line_text+1
    // [382] (byte*) conio_line_color ← (byte*) conio_line_color - (byte) $28 -- pbuz1=pbuz1_minus_vbuc1 
    sec
    lda.z conio_line_color
    sbc #$28
    sta.z conio_line_color
    lda.z conio_line_color+1
    sbc #0
    sta.z conio_line_color+1
    // [383] (byte) conio_cursor_y ← -- (byte) conio_cursor_y -- vbuz1=_dec_vbuz1 
    dec.z conio_cursor_y
    jmp __breturn
    // cscroll::@return
  __breturn:
    // [384] return 
    rts
}
  // toupper
// Convert lowercase alphabet to uppercase
// Returns uppercase equivalent to c, if such value exists, else c remains unchanged
// toupper(byte zp($1c) ch)
toupper: {
    .label return = $1c
    .label ch = $1c
    // [385] if((byte) toupper::ch#0<(byte) 'a') goto toupper::@return -- vbuz1_lt_vbuc1_then_la1 
    lda.z ch
    cmp #'a'
    bcc __breturn_from_toupper
    jmp __b2
    // toupper::@2
  __b2:
    // [386] if((byte) toupper::ch#0<=(byte) 'z') goto toupper::@1 -- vbuz1_le_vbuc1_then_la1 
    lda #'z'
    cmp.z ch
    bcs __b1
    // [388] phi from toupper toupper::@1 toupper::@2 to toupper::@return [phi:toupper/toupper::@1/toupper::@2->toupper::@return]
  __breturn_from_toupper:
  __breturn_from___b1:
  __breturn_from___b2:
    // [388] phi (byte) toupper::return#2 = (byte) toupper::ch#0 [phi:toupper/toupper::@1/toupper::@2->toupper::@return#0] -- register_copy 
    jmp __breturn
    // toupper::@1
  __b1:
    // [387] (byte) toupper::return#0 ← (byte) toupper::ch#0 + (byte) 'A'-(byte) 'a' -- vbuz1=vbuz1_plus_vbuc1 
    lax.z return
    axs #-['A'-'a']
    stx.z return
    jmp __breturn_from___b1
    // toupper::@return
  __breturn:
    // [389] return 
    rts
}
  // memcpy
// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
// memcpy(void* zp($e) destination, void* zp($1e) source)
memcpy: {
    .label src_end = $27
    .label dst = $e
    .label src = $1e
    .label source = $1e
    .label destination = $e
    // [391] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z source
    clc
    adc #<$19*$28-$28
    sta.z src_end
    lda.z source+1
    adc #>$19*$28-$28
    sta.z src_end+1
    // [392] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2
    // [393] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2
    // [394] phi from memcpy memcpy::@2 to memcpy::@1 [phi:memcpy/memcpy::@2->memcpy::@1]
  __b1_from_memcpy:
  __b1_from___b2:
    // [394] phi (byte*) memcpy::dst#2 = (byte*) memcpy::dst#4 [phi:memcpy/memcpy::@2->memcpy::@1#0] -- register_copy 
    // [394] phi (byte*) memcpy::src#2 = (byte*) memcpy::src#4 [phi:memcpy/memcpy::@2->memcpy::@1#1] -- register_copy 
    jmp __b1
    // memcpy::@1
  __b1:
    // [395] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2 -- pbuz1_neq_pbuz2_then_la1 
    lda.z src+1
    cmp.z src_end+1
    bne __b2
    lda.z src
    cmp.z src_end
    bne __b2
    jmp __breturn
    // memcpy::@return
  __breturn:
    // [396] return 
    rts
    // memcpy::@2
  __b2:
    // [397] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    ldy #0
    sta (dst),y
    // [398] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [399] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    jmp __b1_from___b2
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp($e) str, byte zp($16) c)
memset: {
    .label end = $27
    .label dst = $e
    .label str = $e
    .label c = $16
    jmp __b1
    // memset::@1
  __b1:
    // [401] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (byte) $28 -- pbuz1=pbuz2_plus_vbuc1 
    lda #$28
    clc
    adc.z str
    sta.z end
    lda #0
    adc.z str+1
    sta.z end+1
    // [402] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
    // [403] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [403] phi (byte*) memset::dst#2 = (byte*) memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    jmp __b2
    // memset::@2
  __b2:
    // [404] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    jmp __breturn
    // memset::@return
  __breturn:
    // [405] return 
    rts
    // memset::@3
  __b3:
    // [406] *((byte*) memset::dst#2) ← (byte) memset::c#4 -- _deref_pbuz1=vbuz2 
    lda.z c
    ldy #0
    sta (dst),y
    // [407] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2_from___b3
}
  // File Data
  // The digits used for numbers
  DIGITS: .text "0123456789abcdef"
  // Values of hexadecimal digits
  RADIX_HEXADECIMAL_VALUES_CHAR: .byte $10
  // Values of decimal digits
  RADIX_DECIMAL_VALUES: .word $2710, $3e8, $64, $a
  // Values of decimal digits
  RADIX_DECIMAL_VALUES_LONG: .dword $3b9aca00, $5f5e100, $989680, $f4240, $186a0, $2710, $3e8, $64, $a
  // The buffer used by tod_str()
  tod_buffer: .text "00:00:00:00"
  .byte 0
  // The board. board[i] holds the column position of the queen on row i. 
  board: .fill $14, 0
  // Buffer used for stringified number being printed
  printf_buffer: .fill SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER, 0
  // Time of Day 00:00:00:00
  TOD_ZERO: .byte 0, 0, 0, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __init1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b7
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b4
Removing instruction jmp __b15
Removing instruction jmp __b5
Removing instruction jmp __b7
Removing instruction jmp __b10
Removing instruction jmp __b9
Removing instruction jmp __b8
Removing instruction jmp __b14
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b5
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b7
Removing instruction jmp __b4
Removing instruction jmp __b6
Removing instruction jmp __b6
Removing instruction jmp __b14
Removing instruction jmp __b7
Removing instruction jmp __b13
Removing instruction jmp __b21
Removing instruction jmp __b1
Removing instruction jmp __b17
Removing instruction jmp __b16
Removing instruction jmp __b2
Removing instruction jmp __b9
Removing instruction jmp __b3
Removing instruction jmp __b18
Removing instruction jmp __b4
Removing instruction jmp __b11
Removing instruction jmp __b5
Removing instruction jmp __b15
Removing instruction jmp __b20
Removing instruction jmp __b19
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b7
Removing instruction jmp __b4
Removing instruction jmp __b6
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b7
Removing instruction jmp __b4
Removing instruction jmp __b6
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda #>0
Replacing instruction lda.z __0 with TXA
Removing instruction lda #0
Removing instruction ldy.z c
Replacing instruction lda.z __1 with TXA
Replacing instruction lda.z __3 with TXA
Replacing instruction lda.z __5 with TXA
Replacing instruction lda.z __7 with TXA
Replacing instruction lda.z __9 with TXA
Replacing instruction lda.z __11 with TXA
Replacing instruction lda.z __13 with TXA
Replacing instruction lda.z __15 with TXA
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction ldy.z conio_cursor_x
Replacing instruction ldy.z __11 with TAY
Replacing instruction ldy #0 with TAY
Replacing instruction ldy.z __10 with TAY
Removing instruction lda.z padding
Removing instruction lda #0
Replacing instruction ldy.z __11 with TAY
Replacing instruction ldy #0 with TAY
Replacing instruction ldy.z __10 with TAY
Removing instruction lda #0
Replacing instruction ldy #0 with TAY
Removing instruction lda #>0
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __breturn_from___b2 with __breturn_from___b6
Replacing label __b4_from___b3 with __b4
Replacing label __b8_from___b6 with __b8
Replacing label __b1_from___b2 with __b1
Replacing label __breturn_from___b1 with __breturn
Replacing label __b1_from_cputc with __b1
Replacing label __b1_from_printf_number_buffer with __b1_from___b13
Replacing label __b13_from___b14 with __b13
Replacing label __b21_from___b13 with __b1
Replacing label __b5_from___b4 with __b5
Replacing label __breturn_from_toupper with __breturn_from___b2
Replacing label __breturn_from___b1 with __breturn_from___b2
Replacing label __b1_from___b2 with __b1
Replacing label __b2_from___b3 with __b2
Removing instruction __b1_from___init1:
Removing instruction main_from___b1:
Removing instruction legal_from___b2:
Removing instruction __b1_from_main:
Removing instruction cputs_from___b1:
Removing instruction __b2_from___b1:
Removing instruction cputs_from___b2:
Removing instruction __b3_from___b2:
Removing instruction printf_uint_from___b3:
Removing instruction __b7_from___b6:
Removing instruction cputs_from___b7:
Removing instruction printf_ulong_from___b8:
Removing instruction __b9_from___b8:
Removing instruction cputs_from___b9:
Removing instruction __b10_from___b9:
Removing instruction printf_string_from___b10:
Removing instruction __b11_from___b10:
Removing instruction cputs_from___b11:
Removing instruction __breturn_from___b2:
Removing instruction __b11_from_print:
Removing instruction cputs_from___b11:
Removing instruction printf_ulong_from___b12:
Removing instruction __b13_from___b12:
Removing instruction cputs_from___b13:
Removing instruction __b4_from___b3:
Removing instruction cputs_from___b4:
Removing instruction printf_uchar_from___b15:
Removing instruction __b10_from___b6:
Removing instruction cputs_from___b10:
Removing instruction __b8_from___b6:
Removing instruction cputs_from___b8:
Removing instruction printf_uchar_from___b2:
Removing instruction __b1_from_cputs:
Removing instruction __b1_from___b2:
Removing instruction cputc_from___b2:
Removing instruction __b1_from_printf_string:
Removing instruction cputs_from___b1:
Removing instruction __breturn_from___b1:
Removing instruction __breturn_from___b2:
Removing instruction __b3_from___b2:
Removing instruction __b1_from_cputc:
Removing instruction __b4_from___b7:
Removing instruction utoa_append_from___b5:
Removing instruction __b6_from_printf_number_buffer:
Removing instruction strlen_from___b6:
Removing instruction __b13_from___b14:
Removing instruction __b13_from___b7:
Removing instruction __b1_from_printf_number_buffer:
Removing instruction __b21_from___b13:
Removing instruction __b21:
Removing instruction __b1_from___b21:
Removing instruction __b11_from___b4:
Removing instruction strupr_from___b11:
Removing instruction __b5_from___b11:
Removing instruction __b5_from___b4:
Removing instruction cputs_from___b5:
Removing instruction __b4_from___b7:
Removing instruction ultoa_append_from___b5:
Removing instruction __b4_from___b7:
Removing instruction uctoa_append_from___b5:
Removing instruction cputc_from___b2:
Removing instruction __b1_from_cscroll:
Removing instruction memcpy_from___b1:
Removing instruction __b2_from___b1:
Removing instruction memcpy_from___b2:
Removing instruction __b3_from___b2:
Removing instruction memset_from___b3:
Removing instruction __b4_from___b3:
Removing instruction memset_from___b4:
Removing instruction __breturn_from_toupper:
Removing instruction __breturn_from___b1:
Removing instruction __b1_from_memcpy:
Removing instruction __b1_from___b2:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b3:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __init1:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b7:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction print_from___b4:
Removing instruction clrscr_from_main:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction __b8:
Removing instruction __b9:
Removing instruction __b10:
Removing instruction __b11:
Removing instruction __breturn:
Removing instruction __b1_from_legal:
Removing instruction __breturn_from___b1:
Removing instruction __b4:
Removing instruction diff_from___b4:
Removing instruction __b5:
Removing instruction diff_from___b5:
Removing instruction __b6:
Removing instruction __b1_from___b3:
Removing instruction gotoxy_from_print:
Removing instruction __b11:
Removing instruction __b12:
Removing instruction __b13:
Removing instruction __b1_from___b13:
Removing instruction __b3_from___b1:
Removing instruction __breturn:
Removing instruction __b15:
Removing instruction __b5_from___b15:
Removing instruction __b7:
Removing instruction __b3_from___b7:
Removing instruction __b10:
Removing instruction __b5_from___b9:
Removing instruction __b14:
Removing instruction __b1_from___b14:
Removing instruction __b1_from_clrscr:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __b5:
Removing instruction __b1_from___b5:
Removing instruction __b3_from___b4:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction utoa_from___b1:
Removing instruction __b2:
Removing instruction printf_number_buffer_from___b2:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction ultoa_from___b1:
Removing instruction __b2:
Removing instruction printf_number_buffer_from___b2:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b2:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction uctoa_from___b1:
Removing instruction __b2:
Removing instruction printf_number_buffer_from___b2:
Removing instruction __breturn:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b1_from_utoa:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b7:
Removing instruction __b1_from___b4:
Removing instruction __b6:
Removing instruction __b4_from___b6:
Removing instruction __b6:
Removing instruction __b14:
Removing instruction __b7:
Removing instruction __b17:
Removing instruction __b16:
Removing instruction printf_padding_from___b8:
Removing instruction __b9:
Removing instruction cputc_from___b9:
Removing instruction __b18:
Removing instruction printf_padding_from___b10:
Removing instruction __b11:
Removing instruction __b15:
Removing instruction __b20:
Removing instruction __b19:
Removing instruction printf_padding_from___b12:
Removing instruction __b1_from_ultoa:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b7:
Removing instruction __b1_from___b4:
Removing instruction __b6:
Removing instruction __b4_from___b6:
Removing instruction __b1_from_uctoa:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b7:
Removing instruction __b1_from___b4:
Removing instruction __b6:
Removing instruction __b4_from___b6:
Removing instruction __breturn:
Removing instruction __b1_from_utoa_append:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __b1_from_strlen:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __b1_from_printf_padding:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction __b1_from_strupr:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction __b1_from_ultoa_append:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __b1_from_uctoa_append:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Skipping double jump to __breturn in bcc __breturn_from___b2
Replacing jump to rts with rts in jmp __breturn
Skipping double jump to __breturn in jmp __breturn_from___b2
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label __breturn_from___b6 to __b4
Relabelling long label __b3_from___b1 to __b2
Relabelling long label __b1_from___b13 to __b6
Relabelling long label __breturn_from___b2 to __b2
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction lda r with TYA
Removing instruction ldy.z i
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b2:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(const nomodify struct MOS6526_CIA*) CIA1 = (struct MOS6526_CIA*) 56320
(const nomodify byte*) COLORRAM = (byte*) 55296
(const nomodify byte*) DEFAULT_SCREEN = (byte*) 1024
(const byte*) DIGITS[]  = (byte*) "0123456789abcdef"z
(const nomodify byte) LIGHT_BLUE = (byte) $e
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6569_VICII::BG_COLOR
(byte) MOS6569_VICII::BG_COLOR1
(byte) MOS6569_VICII::BG_COLOR2
(byte) MOS6569_VICII::BG_COLOR3
(byte) MOS6569_VICII::BORDER_COLOR
(byte) MOS6569_VICII::CONTROL1
(byte) MOS6569_VICII::CONTROL2
(byte) MOS6569_VICII::IRQ_ENABLE
(byte) MOS6569_VICII::IRQ_STATUS
(byte) MOS6569_VICII::LIGHTPEN_X
(byte) MOS6569_VICII::LIGHTPEN_Y
(byte) MOS6569_VICII::MEMORY
(byte) MOS6569_VICII::RASTER
(byte) MOS6569_VICII::SPRITE0_COLOR
(byte) MOS6569_VICII::SPRITE0_X
(byte) MOS6569_VICII::SPRITE0_Y
(byte) MOS6569_VICII::SPRITE1_COLOR
(byte) MOS6569_VICII::SPRITE1_X
(byte) MOS6569_VICII::SPRITE1_Y
(byte) MOS6569_VICII::SPRITE2_COLOR
(byte) MOS6569_VICII::SPRITE2_X
(byte) MOS6569_VICII::SPRITE2_Y
(byte) MOS6569_VICII::SPRITE3_COLOR
(byte) MOS6569_VICII::SPRITE3_X
(byte) MOS6569_VICII::SPRITE3_Y
(byte) MOS6569_VICII::SPRITE4_COLOR
(byte) MOS6569_VICII::SPRITE4_X
(byte) MOS6569_VICII::SPRITE4_Y
(byte) MOS6569_VICII::SPRITE5_COLOR
(byte) MOS6569_VICII::SPRITE5_X
(byte) MOS6569_VICII::SPRITE5_Y
(byte) MOS6569_VICII::SPRITE6_COLOR
(byte) MOS6569_VICII::SPRITE6_X
(byte) MOS6569_VICII::SPRITE6_Y
(byte) MOS6569_VICII::SPRITE7_COLOR
(byte) MOS6569_VICII::SPRITE7_X
(byte) MOS6569_VICII::SPRITE7_Y
(byte) MOS6569_VICII::SPRITES_BG_COLLISION
(byte) MOS6569_VICII::SPRITES_COLLISION
(byte) MOS6569_VICII::SPRITES_ENABLE
(byte) MOS6569_VICII::SPRITES_EXPAND_X
(byte) MOS6569_VICII::SPRITES_EXPAND_Y
(byte) MOS6569_VICII::SPRITES_MC
(byte) MOS6569_VICII::SPRITES_MCOLOR1
(byte) MOS6569_VICII::SPRITES_MCOLOR2
(byte) MOS6569_VICII::SPRITES_PRIORITY
(byte) MOS6569_VICII::SPRITES_XMSB
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL = (byte) $e
(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL = (byte) $f
(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS = (byte) 8
(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS = (byte) $b
(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN = (byte) $a
(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC = (byte) 9
(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = (byte) 1
(const byte) OFFSET_STRUCT_TIME_OF_DAY_HOURS = (byte) 3
(const byte) OFFSET_STRUCT_TIME_OF_DAY_MIN = (byte) 2
(const byte) OFFSET_STRUCT_TIME_OF_DAY_SEC = (byte) 1
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(const word*) RADIX_DECIMAL_VALUES[]  = { (word) $2710, (word) $3e8, (word) $64, (word) $a }
(const dword*) RADIX_DECIMAL_VALUES_LONG[]  = { (dword) $3b9aca00, (dword) $5f5e100, (dword) $989680, (dword) $f4240, (dword) $186a0, (dword) $2710, (dword) $3e8, (dword) $64, (dword) $a }
(const byte*) RADIX_HEXADECIMAL_VALUES_CHAR[]  = { (byte) $10 }
(const byte) SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = (byte) $c
(const word) STACK_BASE = (word) $103
(byte) TIME_OF_DAY::HOURS
(byte) TIME_OF_DAY::MIN
(byte) TIME_OF_DAY::SEC
(byte) TIME_OF_DAY::TENTHS
(struct TIME_OF_DAY) TOD_ZERO loadstore mem[4] = { TENTHS: (byte) 0, SEC: (byte) 0, MIN: (byte) 0, HOURS: (byte) 0 }
(void()) __start()
(label) __start::@1
(label) __start::@return
(label) __start::__init1
(const byte*) board[(number) $14]  = { fill( $14, 0) }
(void()) clrscr()
(label) clrscr::@1
(label) clrscr::@2
(label) clrscr::@3
(label) clrscr::@4
(label) clrscr::@5
(label) clrscr::@return
(byte) clrscr::c
(byte) clrscr::c#1 c zp[1]:6 20002.0
(byte) clrscr::c#2 c zp[1]:6 12501.25
(byte) clrscr::l
(byte) clrscr::l#1 l zp[1]:28 2002.0
(byte) clrscr::l#2 l zp[1]:28 333.6666666666667
(byte*) clrscr::line_cols
(byte*) clrscr::line_cols#1 line_cols zp[2]:14 1001.0
(byte*) clrscr::line_cols#5 line_cols zp[2]:14 1500.375
(byte*) clrscr::line_text
(byte*) clrscr::line_text#1 line_text zp[2]:11 667.3333333333334
(byte*) clrscr::line_text#5 line_text zp[2]:11 1714.7142857142858
(byte) conio_cursor_x loadstore zp[1]:16 8.241758241758241E27
(byte) conio_cursor_y loadstore zp[1]:17 1.6243654822335025E29
(byte*) conio_line_color loadstore zp[2]:20 1.1450777202072537E29
(byte*) conio_line_text loadstore zp[2]:18 1.1333333333333334E29
(dword) count loadstore zp[4]:2 2.4691358025012344E10
(void()) cputc((byte) cputc::c)
(label) cputc::@1
(label) cputc::@2
(label) cputc::@3
(label) cputc::@return
(byte) cputc::c
(byte) cputc::c#0 c zp[1]:13 2.0E28
(byte) cputc::c#1 c zp[1]:13 2.0E27
(byte) cputc::c#2 c zp[1]:13 2.00000000000002E14
(byte) cputc::c#3 c zp[1]:13 1.0550000000000004E29
(void()) cputln()
(label) cputln::@return
(void()) cputs((to_nomodify byte*) cputs::s)
(label) cputs::@1
(label) cputs::@2
(label) cputs::@return
(byte) cputs::c
(byte) cputs::c#1 c zp[1]:13 1.0E28
(to_nomodify byte*) cputs::s
(to_nomodify byte*) cputs::s#0 s zp[2]:11 5.0E27
(to_nomodify byte*) cputs::s#13 s zp[2]:11 1.5000000000000497E28
(to_nomodify byte*) cputs::s#14 s zp[2]:11 1.000000000000001E15
(void()) cscroll()
(label) cscroll::@1
(label) cscroll::@2
(label) cscroll::@3
(label) cscroll::@4
(label) cscroll::@5
(label) cscroll::@return
(byte()) diff((byte) diff::a , (byte) diff::b)
(label) diff::@1
(label) diff::@2
(label) diff::@return
(byte) diff::a
(byte) diff::a#0 a zp[1]:13 1.000000000001E12
(byte) diff::a#1 a zp[1]:13 1.000000000001E12
(byte) diff::a#2 a zp[1]:13 1.60000000000025E13
(byte) diff::b
(byte) diff::b#0 b zp[1]:6 2.000000000002E12
(byte) diff::b#1 b zp[1]:6 2.000000000002E12
(byte) diff::b#2 b zp[1]:6 1.60000000000025E13
(byte) diff::return
(byte) diff::return#0 return zp[1]:27 2.000000000002E12
(byte) diff::return#1 return_1 zp[1]:13 2.000000000002E12
(byte) diff::return#2 return_1 zp[1]:13 2.0000000000002E13
(byte) diff::return#3 return_1 zp[1]:13 2.0000000000002E13
(byte) diff::return#4 return_1 zp[1]:13 5.500000000001E12
(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
(label) gotoxy::@1
(label) gotoxy::@return
(word) gotoxy::line_offset
(const word) gotoxy::line_offset#0 line_offset = (word)(const byte) gotoxy::y#2*(byte) $28
(byte) gotoxy::x
(const byte) gotoxy::x#2 x = (byte) 0
(byte) gotoxy::y
(const byte) gotoxy::y#2 y = (byte) 5
(byte()) legal((byte) legal::row , (byte) legal::column)
(byte~) legal::$0 zp[1]:26 2.000000000002E12
(byte~) legal::$3 zp[1]:27 3.333333333336667E11
(byte~) legal::$4 zp[1]:13 2.000000000002E12
(label) legal::@1
(label) legal::@2
(label) legal::@3
(label) legal::@4
(label) legal::@5
(label) legal::@6
(label) legal::@return
(byte) legal::column
(byte) legal::column#0 column zp[1]:24 1.6666666666683334E11
(byte) legal::i
(byte) legal::i#1 i zp[1]:25 2.000000000002E12
(byte) legal::i#2 i zp[1]:25 4.0000000000039996E11
(byte) legal::return
(byte) legal::return#0 return zp[1]:28 2.000000000002E12
(byte) legal::return#4 return zp[1]:28 3.333333333336667E11
(byte) legal::row
(byte) legal::row#0 row zp[1]:23 1.5789473684226315E11
(void()) main()
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(const byte*) main::s[(byte) $29]  = (byte*) " - n queens problem using backtracking -"
(const byte*) main::s1[(byte) $13]  = (byte*) "
number of queens:"
(const byte*) main::s2[(byte) $e]  = (byte*) "

solutions: "
(const byte*) main::s3[(byte) 8]  = (byte*) " time: "
(const byte*) main::s4[(byte) 3]  = (byte*) ".
"
(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
(label) memcpy::@1
(label) memcpy::@2
(label) memcpy::@return
(void*) memcpy::destination
(void*) memcpy::destination#2 destination zp[2]:14
(byte*) memcpy::dst
(byte*) memcpy::dst#1 dst zp[2]:14 1.0E46
(byte*) memcpy::dst#2 dst zp[2]:14 1.0000000000000033E46
(byte*) memcpy::dst#4 dst zp[2]:14 2.0E32
(word) memcpy::num
(void*) memcpy::return
(void*) memcpy::source
(void*) memcpy::source#2 source zp[2]:30
(byte*) memcpy::src
(byte*) memcpy::src#1 src zp[2]:30 2.0E46
(byte*) memcpy::src#2 src zp[2]:30 1.0000000000000025E46
(byte*) memcpy::src#4 src zp[2]:30 1.0E32
(byte*) memcpy::src_end
(byte*) memcpy::src_end#0 src_end zp[2]:39 1.2500000000000125E45
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@3
(label) memset::@return
(byte) memset::c
(byte) memset::c#4 c zp[1]:22 1.4285714285714287E45
(byte*) memset::dst
(byte*) memset::dst#1 dst zp[2]:14 2.0E46
(byte*) memset::dst#2 dst zp[2]:14 1.3333333333333366E46
(byte*) memset::dst#4 dst zp[2]:14 2.0E32
(byte*) memset::end
(byte*) memset::end#0 end zp[2]:39 1.6666666666666835E45
(word) memset::num
(void*) memset::return
(void*) memset::str
(void*) memset::str#3 str zp[2]:14
(void()) print()
(label) print::@1
(label) print::@10
(label) print::@11
(label) print::@12
(label) print::@13
(label) print::@14
(label) print::@15
(label) print::@2
(label) print::@3
(label) print::@4
(label) print::@5
(label) print::@6
(label) print::@7
(label) print::@8
(label) print::@9
(label) print::@return
(byte) print::i
(byte) print::i#1 i zp[1]:25 2.000000000002E12
(byte) print::i#2 i zp[1]:25 1.000000000001E12
(byte) print::i1
(byte) print::i1#1 i1 zp[1]:25 2.000000000002E12
(byte) print::i1#2 i1 zp[1]:25 1.0000000000003572E12
(byte) print::j
(byte) print::j#1 j zp[1]:6 2.0000000000002E13
(byte) print::j#2 j zp[1]:6 5.714285714286286E12
(const byte*) print::s[(byte) 3]  = (byte*) "
#"
(const byte*) print::s1[(byte) 4]  = (byte*) ":
 "
(const byte*) print::s2[(byte) 2]  = (byte*) "
"
(const byte*) print::s3[(byte) 2]  = (byte*) "Q"
(const byte*) print::s4[(byte) 2]  = (byte*) "-"
(struct printf_buffer_number) printf_buffer loadstore mem[12] = {}
(const byte*) printf_buffer_number::digits[(number) $b]  = { fill( $b, 0) }
(byte) printf_buffer_number::sign
(byte) printf_format_number::justify_left
(byte) printf_format_number::min_length
(byte) printf_format_number::radix
(byte) printf_format_number::sign_always
(byte) printf_format_number::upper_case
(byte) printf_format_number::zero_padding
(byte) printf_format_string::justify_left
(byte) printf_format_string::min_length
(void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
(word~) printf_number_buffer::$19 zp[2]:30 1.00000000000001E14
(label) printf_number_buffer::@1
(label) printf_number_buffer::@10
(label) printf_number_buffer::@11
(label) printf_number_buffer::@12
(label) printf_number_buffer::@13
(label) printf_number_buffer::@14
(label) printf_number_buffer::@15
(label) printf_number_buffer::@16
(label) printf_number_buffer::@17
(label) printf_number_buffer::@18
(label) printf_number_buffer::@19
(label) printf_number_buffer::@2
(label) printf_number_buffer::@20
(label) printf_number_buffer::@21
(label) printf_number_buffer::@3
(label) printf_number_buffer::@4
(label) printf_number_buffer::@5
(label) printf_number_buffer::@6
(label) printf_number_buffer::@7
(label) printf_number_buffer::@8
(label) printf_number_buffer::@9
(label) printf_number_buffer::@return
(struct printf_buffer_number) printf_number_buffer::buffer
(byte*) printf_number_buffer::buffer_digits
(byte) printf_number_buffer::buffer_sign
(byte) printf_number_buffer::buffer_sign#0 buffer_sign zp[1]:32 202.0
(byte) printf_number_buffer::buffer_sign#1 buffer_sign zp[1]:32 202.0
(byte) printf_number_buffer::buffer_sign#10 buffer_sign zp[1]:32 1.55000000000103E13
(byte) printf_number_buffer::buffer_sign#2 buffer_sign zp[1]:32 2.0000000000002E13
(struct printf_format_number) printf_number_buffer::format
(byte) printf_number_buffer::format_justify_left
(byte) printf_number_buffer::format_justify_left#10 format_justify_left zp[1]:27 6.451612903225871E12
(byte) printf_number_buffer::format_min_length
(byte) printf_number_buffer::format_min_length#3 format_min_length zp[1]:26 1.00000000000001E13
(byte) printf_number_buffer::format_radix
(byte) printf_number_buffer::format_sign_always
(byte) printf_number_buffer::format_upper_case
(byte) printf_number_buffer::format_upper_case#10 format_upper_case zp[1]:33 3.846153846153885E12
(byte) printf_number_buffer::format_zero_padding
(byte) printf_number_buffer::format_zero_padding#10 format_zero_padding zp[1]:29 9.375000000000094E12
(signed byte) printf_number_buffer::len
(signed byte) printf_number_buffer::len#0 len zp[1]:13 1.500000000000015E14
(signed byte) printf_number_buffer::len#1 len zp[1]:13 2.00000000000002E14
(signed byte) printf_number_buffer::len#2 len zp[1]:13 3.00000000000003E14
(signed byte) printf_number_buffer::padding
(signed byte) printf_number_buffer::padding#1 padding zp[1]:26 1.00000000000001E14
(signed byte) printf_number_buffer::padding#10 padding zp[1]:26 1.904761904761924E13
(void()) printf_padding((byte) printf_padding::pad , (byte) printf_padding::length)
(label) printf_padding::@1
(label) printf_padding::@2
(label) printf_padding::@3
(label) printf_padding::@return
(byte) printf_padding::i
(byte) printf_padding::i#1 i zp[1]:38 2.0E27
(byte) printf_padding::i#2 i zp[1]:38 7.500000000000001E26
(byte) printf_padding::length
(byte) printf_padding::length#0 length zp[1]:28 2.00000000000002E14
(byte) printf_padding::length#1 length zp[1]:28 2.00000000000002E14
(byte) printf_padding::length#2 length zp[1]:28 2.00000000000002E14
(byte) printf_padding::length#6 length zp[1]:28 1.6666666666671665E26
(byte) printf_padding::pad
(byte) printf_padding::pad#7 pad zp[1]:13 1.6666666666666666E26
(void()) printf_string((byte*) printf_string::str , (byte) printf_string::format_min_length , (byte) printf_string::format_justify_left)
(label) printf_string::@1
(label) printf_string::@return
(struct printf_format_string) printf_string::format
(byte) printf_string::format_justify_left
(byte) printf_string::format_min_length
(signed byte) printf_string::len
(signed byte) printf_string::padding
(byte*) printf_string::str
(void()) printf_uchar((byte) printf_uchar::uvalue , (byte) printf_uchar::format_min_length , (byte) printf_uchar::format_justify_left , (byte) printf_uchar::format_sign_always , (byte) printf_uchar::format_zero_padding , (byte) printf_uchar::format_upper_case , (byte) printf_uchar::format_radix)
(label) printf_uchar::@1
(label) printf_uchar::@2
(label) printf_uchar::@return
(struct printf_format_number) printf_uchar::format
(byte) printf_uchar::format_justify_left
(byte) printf_uchar::format_min_length
(byte) printf_uchar::format_radix
(byte) printf_uchar::format_sign_always
(byte) printf_uchar::format_upper_case
(byte) printf_uchar::format_zero_padding
(byte) printf_uchar::uvalue
(byte) printf_uchar::uvalue#0 uvalue zp[1]:25 2.000000000002E12
(byte) printf_uchar::uvalue#1 uvalue zp[1]:25 2.000000000002E12
(byte) printf_uchar::uvalue#2 uvalue zp[1]:25 6.0000000000015E12
(void()) printf_uint((word) printf_uint::uvalue , (byte) printf_uint::format_min_length , (byte) printf_uint::format_justify_left , (byte) printf_uint::format_sign_always , (byte) printf_uint::format_zero_padding , (byte) printf_uint::format_upper_case , (byte) printf_uint::format_radix)
(label) printf_uint::@1
(label) printf_uint::@2
(label) printf_uint::@return
(struct printf_format_number) printf_uint::format
(byte) printf_uint::format_justify_left
(const byte) printf_uint::format_justify_left#0 format_justify_left = (byte) 0
(byte) printf_uint::format_min_length
(const byte) printf_uint::format_min_length#0 format_min_length = (byte) 0
(byte) printf_uint::format_radix
(byte) printf_uint::format_sign_always
(byte) printf_uint::format_upper_case
(const byte) printf_uint::format_upper_case#0 format_upper_case = (byte) 0
(byte) printf_uint::format_zero_padding
(const byte) printf_uint::format_zero_padding#0 format_zero_padding = (byte) 0
(word) printf_uint::uvalue
(const word) printf_uint::uvalue#0 uvalue = (byte) 8
(void()) printf_ulong((dword) printf_ulong::uvalue , (byte) printf_ulong::format_min_length , (byte) printf_ulong::format_justify_left , (byte) printf_ulong::format_sign_always , (byte) printf_ulong::format_zero_padding , (byte) printf_ulong::format_upper_case , (byte) printf_ulong::format_radix)
(label) printf_ulong::@1
(label) printf_ulong::@2
(label) printf_ulong::@return
(struct printf_format_number) printf_ulong::format
(byte) printf_ulong::format_justify_left
(byte) printf_ulong::format_min_length
(byte) printf_ulong::format_radix
(byte) printf_ulong::format_sign_always
(byte) printf_ulong::format_upper_case
(byte) printf_ulong::format_zero_padding
(dword) printf_ulong::uvalue
(dword) printf_ulong::uvalue#0 uvalue zp[4]:2 22.0
(dword) printf_ulong::uvalue#1 uvalue zp[4]:2 22.0
(dword) printf_ulong::uvalue#2 uvalue zp[4]:2 61.5
__stackcall (void()) queen((byte) queen::row)
(byte~) queen::$1 zp[1]:28 2.000000000002E12
(byte~) queen::$4 zp[1]:23 2.000000000002E12
(label) queen::@1
(label) queen::@2
(label) queen::@3
(label) queen::@4
(label) queen::@5
(label) queen::@6
(label) queen::@7
(label) queen::@return
(const byte) queen::OFFSET_STACK_ROW = (byte) 0
(byte) queen::column loadstore zp[1]:24 2.9411764706505884E11
(byte) queen::r loadstore zp[1]:23 2.10526315795E11
(byte) queen::row
(byte) queen::row#0 row zp[1]:23 202.0
(word()) strlen((byte*) strlen::str)
(label) strlen::@1
(label) strlen::@2
(label) strlen::@return
(word) strlen::len
(word) strlen::len#1 len zp[2]:30 1.0E27
(word) strlen::len#2 len zp[2]:30 5.00000000000025E26
(word) strlen::return
(word) strlen::return#2 return zp[2]:30 2.00000000000002E14
(byte*) strlen::str
(byte*) strlen::str#0 str zp[2]:14 2.0E27
(byte*) strlen::str#3 str zp[2]:14 1.0E27
(byte*()) strupr((byte*) strupr::str)
(byte~) strupr::$0 zp[1]:28 2.0E27
(label) strupr::@1
(label) strupr::@2
(label) strupr::@3
(label) strupr::@return
(byte*) strupr::return
(byte*) strupr::src
(byte*) strupr::src#1 src zp[2]:30 2.0E27
(byte*) strupr::src#2 src zp[2]:30 7.142857142857143E26
(byte*) strupr::str
(const byte*) strupr::str#0 str = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
(const byte*) tod_buffer[]  = (byte*) "00:00:00:00"
(void()) tod_init((byte) tod_init::tod_TENTHS , (byte) tod_init::tod_SEC , (byte) tod_init::tod_MIN , (byte) tod_init::tod_HOURS)
(label) tod_init::@return
(struct TIME_OF_DAY) tod_init::tod
(byte) tod_init::tod_HOURS
(byte) tod_init::tod_HOURS#0 tod_HOURS zp[1]:25 37.33333333333333
(byte) tod_init::tod_MIN
(byte) tod_init::tod_MIN#0 tod_MIN zp[1]:24 22.4
(byte) tod_init::tod_SEC
(byte) tod_init::tod_SEC#0 tod_SEC zp[1]:23 16.0
(byte) tod_init::tod_TENTHS
(byte) tod_init::tod_TENTHS#0 tod_TENTHS zp[1]:22 12.444444444444443
(struct TIME_OF_DAY()) tod_read()
(label) tod_read::@return
(byte) tod_read::hours
(byte) tod_read::mins
(struct TIME_OF_DAY) tod_read::return
(byte) tod_read::return_HOURS
(byte) tod_read::return_HOURS#0 return_HOURS zp[1]:28 12.444444444444443
(byte) tod_read::return_HOURS#2 return_HOURS zp[1]:28 5.5
(byte) tod_read::return_MIN
(byte) tod_read::return_MIN#0 return_MIN zp[1]:27 16.0
(byte) tod_read::return_MIN#2 return_MIN zp[1]:27 5.5
(byte) tod_read::return_SEC
(byte) tod_read::return_SEC#0 return_SEC zp[1]:26 22.4
(byte) tod_read::return_SEC#2 return_SEC zp[1]:26 5.5
(byte) tod_read::return_TENTHS
(byte) tod_read::return_TENTHS#0 return_TENTHS zp[1]:25 37.33333333333333
(byte) tod_read::return_TENTHS#2 return_TENTHS zp[1]:25 5.5
(byte) tod_read::secs
(byte) tod_read::tenths
(byte) tod_read::tod_HOURS
(byte) tod_read::tod_MIN
(byte) tod_read::tod_SEC
(byte) tod_read::tod_TENTHS
(byte*()) tod_str((byte) tod_str::tod_TENTHS , (byte) tod_str::tod_SEC , (byte) tod_str::tod_MIN , (byte) tod_str::tod_HOURS)
(byte~) tod_str::$0 zp[1]:29 202.0
(byte~) tod_str::$1 zp[1]:29 202.0
(byte~) tod_str::$10 zp[1]:26 202.0
(byte~) tod_str::$11 zp[1]:26 202.0
(byte~) tod_str::$12 zp[1]:38 202.0
(byte~) tod_str::$13 zp[1]:38 202.0
(byte~) tod_str::$14 zp[1]:25 202.0
(byte~) tod_str::$15 zp[1]:25 202.0
(byte~) tod_str::$2 zp[1]:28 202.0
(byte~) tod_str::$3 zp[1]:28 202.0
(byte~) tod_str::$4 zp[1]:32 202.0
(byte~) tod_str::$5 zp[1]:32 202.0
(byte~) tod_str::$6 zp[1]:27 202.0
(byte~) tod_str::$7 zp[1]:27 202.0
(byte~) tod_str::$8 zp[1]:33 202.0
(byte~) tod_str::$9 zp[1]:33 202.0
(label) tod_str::@return
(byte*) tod_str::return
(struct TIME_OF_DAY) tod_str::tod
(byte) tod_str::tod_HOURS
(byte) tod_str::tod_HOURS#0 tod_HOURS zp[1]:28 53.25
(byte) tod_str::tod_MIN
(byte) tod_str::tod_MIN#0 tod_MIN zp[1]:27 19.363636363636363
(byte) tod_str::tod_SEC
(byte) tod_str::tod_SEC#0 tod_SEC zp[1]:26 11.833333333333332
(byte) tod_str::tod_TENTHS
(byte) tod_str::tod_TENTHS#0 tod_TENTHS zp[1]:25 8.52
(byte()) toupper((byte) toupper::ch)
(label) toupper::@1
(label) toupper::@2
(label) toupper::@return
(byte) toupper::ch
(byte) toupper::ch#0 ch zp[1]:28 1.6999999999999998E28
(byte) toupper::return
(byte) toupper::return#0 return zp[1]:28 2.0E28
(byte) toupper::return#2 return zp[1]:28 1.0333333333333333E28
(byte) toupper::return#3 return zp[1]:28 2.0E27
(void()) uctoa((byte) uctoa::value , (byte*) uctoa::buffer , (byte) uctoa::radix)
(label) uctoa::@1
(label) uctoa::@2
(label) uctoa::@3
(label) uctoa::@4
(label) uctoa::@5
(label) uctoa::@6
(label) uctoa::@7
(label) uctoa::@return
(byte*) uctoa::buffer
(byte*) uctoa::buffer#11 buffer zp[2]:14 3.3333333333350004E25
(byte*) uctoa::buffer#14 buffer zp[2]:14 1.5000000000000002E26
(byte*) uctoa::buffer#3 buffer zp[2]:14 2.00000000000002E14
(byte*) uctoa::buffer#4 buffer zp[2]:14 2.0E26
(byte) uctoa::digit
(byte) uctoa::digit#1 digit zp[1]:32 2.0E26
(byte) uctoa::digit#2 digit zp[1]:32 3.076923076923077E25
(byte) uctoa::digit_value
(byte) uctoa::digit_value#0 digit_value zp[1]:38 6.000000000000001E25
(byte*) uctoa::digit_values
(byte) uctoa::max_digits
(byte) uctoa::radix
(byte) uctoa::started
(byte) uctoa::started#2 started zp[1]:13 6.000000000000001E25
(byte) uctoa::started#4 started zp[1]:13 1.0E26
(byte) uctoa::value
(byte) uctoa::value#0 value zp[1]:33 1.0E26
(byte) uctoa::value#1 value zp[1]:33 5.5000000000001E13
(byte) uctoa::value#2 value zp[1]:33 6.666666666670001E25
(byte) uctoa::value#6 value zp[1]:33 1.5000000000000002E26
(byte()) uctoa_append((byte*) uctoa_append::buffer , (byte) uctoa_append::value , (byte) uctoa_append::sub)
(label) uctoa_append::@1
(label) uctoa_append::@2
(label) uctoa_append::@3
(label) uctoa_append::@return
(byte*) uctoa_append::buffer
(byte*) uctoa_append::buffer#0 buffer zp[2]:14 1.3750000000000001E26
(byte) uctoa_append::digit
(byte) uctoa_append::digit#1 digit zp[1]:28 1.0E40
(byte) uctoa_append::digit#2 digit zp[1]:28 1.00000000000005E40
(byte) uctoa_append::return
(byte) uctoa_append::return#0 return zp[1]:33 2.0E26
(byte) uctoa_append::sub
(byte) uctoa_append::sub#0 sub zp[1]:38 3.33333333333335E39
(byte) uctoa_append::value
(byte) uctoa_append::value#0 value zp[1]:33 3.666666666666667E26
(byte) uctoa_append::value#1 value zp[1]:33 2.0E40
(byte) uctoa_append::value#2 value zp[1]:33 5.0000000000001833E39
(void()) ultoa((dword) ultoa::value , (byte*) ultoa::buffer , (byte) ultoa::radix)
(byte~) ultoa::$10 zp[1]:33 2.00000000000002E14
(byte~) ultoa::$11 zp[1]:32 2002.0
(label) ultoa::@1
(label) ultoa::@2
(label) ultoa::@3
(label) ultoa::@4
(label) ultoa::@5
(label) ultoa::@6
(label) ultoa::@7
(label) ultoa::@return
(byte*) ultoa::buffer
(byte*) ultoa::buffer#11 buffer zp[2]:11 2.8571428571571855E13
(byte*) ultoa::buffer#14 buffer zp[2]:11 1.500000000000015E14
(byte*) ultoa::buffer#3 buffer zp[2]:11 2002.0
(byte*) ultoa::buffer#4 buffer zp[2]:11 2.00000000000002E14
(byte) ultoa::digit
(byte) ultoa::digit#1 digit zp[1]:27 2.00000000000002E14
(byte) ultoa::digit#2 digit zp[1]:27 2.8571428571428855E13
(dword) ultoa::digit_value
(dword) ultoa::digit_value#0 digit_value zp[4]:34 6.000000000000059E13
(dword*) ultoa::digit_values
(byte) ultoa::max_digits
(byte) ultoa::radix
(byte) ultoa::started
(byte) ultoa::started#2 started zp[1]:29 5.00000000000005E13
(byte) ultoa::started#4 started zp[1]:29 1.00000000000001E14
(dword) ultoa::value
(dword) ultoa::value#0 value zp[4]:7 1.00000000000001E14
(dword) ultoa::value#1 value zp[4]:7 551.0
(dword) ultoa::value#2 value zp[4]:7 5.714285714300071E13
(dword) ultoa::value#6 value zp[4]:7 1.500000000000015E14
(dword()) ultoa_append((byte*) ultoa_append::buffer , (dword) ultoa_append::value , (dword) ultoa_append::sub)
(label) ultoa_append::@1
(label) ultoa_append::@2
(label) ultoa_append::@3
(label) ultoa_append::@return
(byte*) ultoa_append::buffer
(byte*) ultoa_append::buffer#0 buffer zp[2]:11 1.3750000000000025E14
(byte) ultoa_append::digit
(byte) ultoa_append::digit#1 digit zp[1]:38 1.0E27
(byte) ultoa_append::digit#2 digit zp[1]:38 1.0000000000005E27
(dword) ultoa_append::return
(dword) ultoa_append::return#0 return zp[4]:7 2.00000000000002E14
(dword) ultoa_append::sub
(dword) ultoa_append::sub#0 sub zp[4]:34 3.3333333333335E26
(dword) ultoa_append::value
(dword) ultoa_append::value#0 value zp[4]:7 3.666666666666674E14
(dword) ultoa_append::value#1 value zp[4]:7 2.0E27
(dword) ultoa_append::value#2 value zp[4]:7 5.0000000000018335E26
(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
(byte~) utoa::$10 zp[1]:29 20002.0
(byte~) utoa::$11 zp[1]:28 2002.0
(label) utoa::@1
(label) utoa::@2
(label) utoa::@3
(label) utoa::@4
(label) utoa::@5
(label) utoa::@6
(label) utoa::@7
(label) utoa::@return
(byte*) utoa::buffer
(byte*) utoa::buffer#11 buffer zp[2]:11 3000.4285714285716
(byte*) utoa::buffer#14 buffer zp[2]:11 15001.5
(byte*) utoa::buffer#3 buffer zp[2]:11 2002.0
(byte*) utoa::buffer#4 buffer zp[2]:11 20002.0
(byte) utoa::digit
(byte) utoa::digit#1 digit zp[1]:6 20002.0
(byte) utoa::digit#2 digit zp[1]:6 2857.4285714285716
(word) utoa::digit_value
(word) utoa::digit_value#0 digit_value zp[2]:30 6000.6
(word*) utoa::digit_values
(byte) utoa::max_digits
(const byte) utoa::max_digits#1 max_digits = (byte) 5
(byte) utoa::radix
(byte) utoa::started
(byte) utoa::started#2 started zp[1]:26 5000.5
(byte) utoa::started#4 started zp[1]:26 10001.0
(word) utoa::value
(word) utoa::value#0 value zp[2]:14 10001.0
(word) utoa::value#2 value zp[2]:14 5714.857142857143
(word) utoa::value#6 value zp[2]:14 15001.5
(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
(label) utoa_append::@1
(label) utoa_append::@2
(label) utoa_append::@3
(label) utoa_append::@return
(byte*) utoa_append::buffer
(byte*) utoa_append::buffer#0 buffer zp[2]:11 13750.25
(byte) utoa_append::digit
(byte) utoa_append::digit#1 digit zp[1]:28 1.0000001E7
(byte) utoa_append::digit#2 digit zp[1]:28 1.00500015E7
(word) utoa_append::return
(word) utoa_append::return#0 return zp[2]:14 20002.0
(word) utoa_append::sub
(word) utoa_append::sub#0 sub zp[2]:30 3335000.5
(word) utoa_append::value
(word) utoa_append::value#0 value zp[2]:14 36667.33333333333
(word) utoa_append::value#1 value zp[2]:14 2.0000002E7
(word) utoa_append::value#2 value zp[2]:14 5018334.166666666

zp[4]:2 [ printf_ulong::uvalue#2 printf_ulong::uvalue#0 printf_ulong::uvalue#1 count ]
zp[1]:6 [ utoa::digit#2 utoa::digit#1 diff::b#2 diff::b#0 diff::b#1 clrscr::c#2 clrscr::c#1 print::j#2 print::j#1 ]
zp[4]:7 [ ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ultoa_append::return#0 ]
zp[2]:11 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ultoa::buffer#3 ultoa_append::buffer#0 utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 cputs::s#13 cputs::s#14 cputs::s#0 clrscr::line_text#5 clrscr::line_text#1 ]
zp[1]:13 [ uctoa::started#2 uctoa::started#4 printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 cputc::c#3 cputc::c#0 cputc::c#2 cputc::c#1 printf_padding::pad#7 cputs::c#1 diff::a#2 diff::a#0 diff::a#1 diff::return#4 diff::return#2 diff::return#3 diff::return#1 legal::$4 ]
zp[2]:14 [ memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 strlen::str#3 strlen::str#0 uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 uctoa::buffer#3 uctoa_append::buffer#0 utoa::value#2 utoa::value#6 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 clrscr::line_cols#5 clrscr::line_cols#1 ]
zp[1]:16 [ conio_cursor_x ]
zp[1]:17 [ conio_cursor_y ]
zp[2]:18 [ conio_line_text ]
zp[2]:20 [ conio_line_color ]
zp[1]:22 [ tod_init::tod_TENTHS#0 memset::c#4 ]
zp[1]:23 [ tod_init::tod_SEC#0 queen::row#0 queen::r legal::row#0 queen::$4 ]
zp[1]:24 [ tod_init::tod_MIN#0 queen::column legal::column#0 ]
zp[1]:25 [ tod_read::return_TENTHS#2 tod_str::tod_TENTHS#0 tod_read::return_TENTHS#0 tod_str::$14 tod_str::$15 tod_init::tod_HOURS#0 print::i#2 print::i#1 printf_uchar::uvalue#2 printf_uchar::uvalue#1 printf_uchar::uvalue#0 print::i1#2 print::i1#1 legal::i#2 legal::i#1 ]
zp[1]:26 [ legal::$0 tod_read::return_SEC#2 tod_str::tod_SEC#0 tod_read::return_SEC#0 tod_str::$10 tod_str::$11 printf_number_buffer::format_min_length#3 printf_number_buffer::padding#10 printf_number_buffer::padding#1 utoa::started#2 utoa::started#4 ]
zp[1]:27 [ diff::return#0 legal::$3 tod_read::return_MIN#2 tod_str::tod_MIN#0 tod_read::return_MIN#0 tod_str::$6 tod_str::$7 ultoa::digit#2 ultoa::digit#1 printf_number_buffer::format_justify_left#10 ]
zp[1]:28 [ utoa::$11 tod_read::return_HOURS#2 tod_str::tod_HOURS#0 tod_read::return_HOURS#0 tod_str::$2 tod_str::$3 clrscr::l#2 clrscr::l#1 legal::return#4 legal::return#0 queen::$1 toupper::return#2 toupper::return#0 toupper::ch#0 toupper::return#3 strupr::$0 uctoa_append::digit#2 uctoa_append::digit#1 printf_padding::length#6 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 utoa_append::digit#2 utoa_append::digit#1 ]
zp[1]:29 [ utoa::$10 tod_str::$0 tod_str::$1 ultoa::started#2 ultoa::started#4 printf_number_buffer::format_zero_padding#10 ]
zp[2]:30 [ utoa::digit_value#0 utoa_append::sub#0 strlen::len#2 strlen::len#1 strlen::return#2 printf_number_buffer::$19 memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 strupr::src#2 strupr::src#1 ]
zp[1]:32 [ ultoa::$11 tod_str::$4 tod_str::$5 uctoa::digit#2 uctoa::digit#1 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
zp[1]:33 [ ultoa::$10 tod_str::$8 tod_str::$9 uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 uctoa_append::return#0 printf_number_buffer::format_upper_case#10 ]
zp[4]:34 [ ultoa::digit_value#0 ultoa_append::sub#0 ]
zp[1]:38 [ uctoa::digit_value#0 uctoa_append::sub#0 tod_str::$12 tod_str::$13 ultoa_append::digit#2 ultoa_append::digit#1 printf_padding::i#2 printf_padding::i#1 ]
zp[2]:39 [ memset::end#0 memcpy::src_end#0 ]
mem[12] [ printf_buffer ]
mem[4] [ TOD_ZERO ]


FINAL ASSEMBLER
Score: 2147483647

  // File Comments
// N Queens Problem in C Using Backtracking
//
// N Queens Problem is a famous puzzle in which n-queens are to be placed on a nxn chess board such that no two queens are in the same row, column or diagonal.  
//
// This is a recursive solution
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__start)
.pc = $80d "Program"
  // Global Constants & labels
  .const LIGHT_BLUE = $e
  .const OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
  .const OFFSET_STRUCT_TIME_OF_DAY_SEC = 1
  .const OFFSET_STRUCT_TIME_OF_DAY_MIN = 2
  .const OFFSET_STRUCT_TIME_OF_DAY_HOURS = 3
  .const OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL = $e
  .const OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL = $f
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS = $b
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_MIN = $a
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_SEC = 9
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_10THS = 8
  .const STACK_BASE = $103
  .const SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = $c
  // Color Ram
  .label COLORRAM = $d800
  // Default address of screen character matrix
  .label DEFAULT_SCREEN = $400
  // The CIA#1: keyboard matrix, joystick #1/#2
  .label CIA1 = $dc00
  // The number of bytes on the screen
  // The current cursor x-position
  .label conio_cursor_x = $10
  // The current cursor y-position
  .label conio_cursor_y = $11
  // The current text cursor line start
  .label conio_line_text = $12
  // The current color cursor line start
  .label conio_line_color = $14
  // The number of found solutions
  .label count = 2
  // __start
__start: {
    // __start::__init1
    // conio_cursor_x = 0
    // [1] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // conio_cursor_y = 0
    // [2] (byte) conio_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
    sta.z conio_cursor_y
    // conio_line_text = CONIO_SCREEN_TEXT
    // [3] (byte*) conio_line_text ← (const nomodify byte*) DEFAULT_SCREEN -- pbuz1=pbuc1 
    lda #<DEFAULT_SCREEN
    sta.z conio_line_text
    lda #>DEFAULT_SCREEN
    sta.z conio_line_text+1
    // conio_line_color = CONIO_SCREEN_COLORS
    // [4] (byte*) conio_line_color ← (const nomodify byte*) COLORRAM -- pbuz1=pbuc1 
    lda #<COLORRAM
    sta.z conio_line_color
    lda #>COLORRAM
    sta.z conio_line_color+1
    // count = 0
    // [5] (dword) count ← (dword) 0 -- vduz1=vduc1 
    lda #<0
    sta.z count
    sta.z count+1
    lda #<0>>$10
    sta.z count+2
    lda #>0>>$10
    sta.z count+3
    // [6] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
    // __start::@1
    // [7] call main 
    // [31] phi from __start::@1 to main [phi:__start::@1->main]
    jsr main
    // __start::@return
    // [8] return 
    rts
}
  // queen
// Generates all valid placements of queens on a NxN board recursively
// Works by generating all legal placements af a queen for a specific row taking into consideration the queens already placed on the rows below 
// and then recursively generating all legal placements on the rows above.  
// queen(byte zp($17) row)
queen: {
    .const OFFSET_STACK_ROW = 0
    .label r = $17
    .label column = $18
    .label __1 = $1c
    .label __4 = $17
    .label row = $17
    // }
    // [9] (byte) queen::row#0 ← stackidx(byte,(const byte) queen::OFFSET_STACK_ROW) -- vbuz1=_stackidxbyte_vbuc1 
    tsx
    lda STACK_BASE+OFFSET_STACK_ROW,x
    sta.z row
    // r = row
    // [10] (byte) queen::r ← (byte) queen::row#0
    // column=1
    // [11] (byte) queen::column ← (byte) 1 -- vbuz1=vbuc1 
    lda #1
    sta.z column
    // queen::@1
  __b1:
    // for(__ma char column=1;column<=QUEENS;++column)
    // [12] if((byte) queen::column<(byte) 8+(byte) 1) goto queen::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z column
    cmp #8+1
    bcc __b2
    // queen::@return
    // }
    // [13] return 
    rts
    // queen::@2
  __b2:
    // legal(r,column)
    // [14] (byte) legal::row#0 ← (byte) queen::r
    // [15] (byte) legal::column#0 ← (byte) queen::column
    // [16] call legal 
    // [68] phi from queen::@2 to legal [phi:queen::@2->legal]
    jsr legal
    // legal(r,column)
    // [17] (byte) legal::return#0 ← (byte) legal::return#4
    // queen::@7
    // [18] (byte~) queen::$1 ← (byte) legal::return#0
    // if(legal(r,column))
    // [19] if((byte) 0==(byte~) queen::$1) goto queen::@3 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z __1
    beq __b3
    // queen::@5
    // board[r]=column
    // [20] *((const byte*) board + (byte) queen::r) ← (byte) queen::column -- pbuc1_derefidx_vbuz1=vbuz2 
    //no conflicts so place queen
    lda.z column
    ldy.z r
    sta board,y
    // if(r==QUEENS)
    // [21] if((byte) queen::r==(byte) 8) goto queen::@4 -- vbuz1_eq_vbuc1_then_la1 
    lda #8
    cmp.z r
    beq __b4
    // queen::@6
    // asm
    // asm { ldacolumn pha ldar pha  }
    // Perform recussive placement on rows above
    // Push the local vars on the stack (waiting for proper recursion support)
    lda column
    pha
    tya
    pha
    // r+1
    // [23] (byte~) queen::$4 ← (byte) queen::r + (byte) 1 -- vbuz1=vbuz1_plus_1 
    inc.z __4
    // queen(r+1)
    // [24] stackpush(byte) ← (byte~) queen::$4 -- _stackpushbyte_=vbuz1 
    // Do recursion        
    lda.z __4
    pha
    // [25] callexecute queen  -- jsr 
    jsr queen
    // sideeffect stackpullbytes((number) 1) -- _stackpullbyte_1 
    pla
    // asm
    // asm { pla star pla stacolumn  }
    // Pop the local vars on the stack (waiting for proper recursion support)
    pla
    sta r
    pla
    sta column
    // queen::@3
  __b3:
    // for(__ma char column=1;column<=QUEENS;++column)
    // [28] (byte) queen::column ← ++ (byte) queen::column -- vbuz1=_inc_vbuz1 
    inc.z column
    jmp __b1
    // queen::@4
  __b4:
    // count++;
    // [29] (dword) count ← ++ (dword) count -- vduz1=_inc_vduz1 
    inc.z count
    bne !+
    inc.z count+1
    bne !+
    inc.z count+2
    bne !+
    inc.z count+3
  !:
    // print()
    // [30] call print 
    // [87] phi from queen::@4 to print [phi:queen::@4->print]
    jsr print
    jmp __b3
}
  // main
main: {
    // clrscr()
    // [32] call clrscr 
    // [116] phi from main to clrscr [phi:main->clrscr]
    jsr clrscr
    // [33] phi from main to main::@1 [phi:main->main::@1]
    // main::@1
    // printf(" - n queens problem using backtracking -")
    // [34] call cputs 
    // [132] phi from main::@1 to cputs [phi:main::@1->cputs]
    // [132] phi (to_nomodify byte*) cputs::s#14 = (const byte*) main::s [phi:main::@1->cputs#0] -- pbuz1=pbuc1 
    lda #<s
    sta.z cputs.s
    lda #>s
    sta.z cputs.s+1
    jsr cputs
    // [35] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // main::@2
    // printf("\nnumber of queens:%u",QUEENS)
    // [36] call cputs 
    // [132] phi from main::@2 to cputs [phi:main::@2->cputs]
    // [132] phi (to_nomodify byte*) cputs::s#14 = (const byte*) main::s1 [phi:main::@2->cputs#0] -- pbuz1=pbuc1 
    lda #<s1
    sta.z cputs.s
    lda #>s1
    sta.z cputs.s+1
    jsr cputs
    // [37] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
    // main::@3
    // printf("\nnumber of queens:%u",QUEENS)
    // [38] call printf_uint 
    // [140] phi from main::@3 to printf_uint [phi:main::@3->printf_uint]
    jsr printf_uint
    // main::@4
    // tod_init(TOD_ZERO)
    // [39] (byte) tod_init::tod_TENTHS#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO) -- vbuz1=_deref_pbuc1 
    lda TOD_ZERO
    sta.z tod_init.tod_TENTHS
    // [40] (byte) tod_init::tod_SEC#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_SEC) -- vbuz1=_deref_pbuc1 
    lda TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_SEC
    sta.z tod_init.tod_SEC
    // [41] (byte) tod_init::tod_MIN#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_MIN) -- vbuz1=_deref_pbuc1 
    lda TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_MIN
    sta.z tod_init.tod_MIN
    // [42] (byte) tod_init::tod_HOURS#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_HOURS) -- vbuz1=_deref_pbuc1 
    lda TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_HOURS
    sta.z tod_init.tod_HOURS
    // [43] call tod_init 
    jsr tod_init
    // main::@5
    // queen(1)
    // [44] stackpush(byte) ← (byte) 1 -- _stackpushbyte_=vbuc1 
    lda #1
    pha
    // [45] callexecute queen  -- jsr 
    jsr queen
    // sideeffect stackpullbytes((number) 1) -- _stackpullbyte_1 
    pla
    // tod_read()
    // [47] call tod_read 
    jsr tod_read
    // [48] (byte) tod_read::return_TENTHS#2 ← (byte) tod_read::return_TENTHS#0
    // [49] (byte) tod_read::return_SEC#2 ← (byte) tod_read::return_SEC#0
    // [50] (byte) tod_read::return_MIN#2 ← (byte) tod_read::return_MIN#0
    // [51] (byte) tod_read::return_HOURS#2 ← (byte) tod_read::return_HOURS#0
    // main::@6
    // tod_str(tod_read())
    // [52] (byte) tod_str::tod_TENTHS#0 ← (byte) tod_read::return_TENTHS#2
    // [53] (byte) tod_str::tod_SEC#0 ← (byte) tod_read::return_SEC#2
    // [54] (byte) tod_str::tod_MIN#0 ← (byte) tod_read::return_MIN#2
    // [55] (byte) tod_str::tod_HOURS#0 ← (byte) tod_read::return_HOURS#2
    // [56] call tod_str 
    jsr tod_str
    // [57] phi from main::@6 to main::@7 [phi:main::@6->main::@7]
    // main::@7
    // printf("\n\nsolutions: %lu time: %s.\n",count,tod_str(tod_read()))
    // [58] call cputs 
    // [132] phi from main::@7 to cputs [phi:main::@7->cputs]
    // [132] phi (to_nomodify byte*) cputs::s#14 = (const byte*) main::s2 [phi:main::@7->cputs#0] -- pbuz1=pbuc1 
    lda #<s2
    sta.z cputs.s
    lda #>s2
    sta.z cputs.s+1
    jsr cputs
    // main::@8
    // printf("\n\nsolutions: %lu time: %s.\n",count,tod_str(tod_read()))
    // [59] (dword) printf_ulong::uvalue#0 ← (dword) count
    // [60] call printf_ulong 
    // [183] phi from main::@8 to printf_ulong [phi:main::@8->printf_ulong]
    // [183] phi (dword) printf_ulong::uvalue#2 = (dword) printf_ulong::uvalue#0 [phi:main::@8->printf_ulong#0] -- register_copy 
    jsr printf_ulong
    // [61] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
    // main::@9
    // printf("\n\nsolutions: %lu time: %s.\n",count,tod_str(tod_read()))
    // [62] call cputs 
    // [132] phi from main::@9 to cputs [phi:main::@9->cputs]
    // [132] phi (to_nomodify byte*) cputs::s#14 = (const byte*) main::s3 [phi:main::@9->cputs#0] -- pbuz1=pbuc1 
    lda #<s3
    sta.z cputs.s
    lda #>s3
    sta.z cputs.s+1
    jsr cputs
    // [63] phi from main::@9 to main::@10 [phi:main::@9->main::@10]
    // main::@10
    // printf("\n\nsolutions: %lu time: %s.\n",count,tod_str(tod_read()))
    // [64] call printf_string 
    // [190] phi from main::@10 to printf_string [phi:main::@10->printf_string]
    jsr printf_string
    // [65] phi from main::@10 to main::@11 [phi:main::@10->main::@11]
    // main::@11
    // printf("\n\nsolutions: %lu time: %s.\n",count,tod_str(tod_read()))
    // [66] call cputs 
    // [132] phi from main::@11 to cputs [phi:main::@11->cputs]
    // [132] phi (to_nomodify byte*) cputs::s#14 = (const byte*) main::s4 [phi:main::@11->cputs#0] -- pbuz1=pbuc1 
    lda #<s4
    sta.z cputs.s
    lda #>s4
    sta.z cputs.s+1
    jsr cputs
    // main::@return
    // }
    // [67] return 
    rts
    s: .text " - n queens problem using backtracking -"
    .byte 0
    s1: .text @"\nnumber of queens:"
    .byte 0
    s2: .text @"\n\nsolutions: "
    .byte 0
    s3: .text " time: "
    .byte 0
    s4: .text @".\n"
    .byte 0
}
  // legal
// Checks is a placement of the queen on the board is legal.
// Checks the passed (row, column) against all queens placed on the board on lower rows.
// If no conflict for desired position returns 1 otherwise returns 0
// legal(byte zp($17) row, byte zp($18) column)
legal: {
    .label __0 = $1a
    .label __3 = $1b
    .label __4 = $d
    .label row = $17
    .label column = $18
    // Placement is legal
    // The same column is a conflict.
    // The same diagonal is a conflict.
    .label return = $1c
    .label i = $19
    // [69] phi from legal to legal::@1 [phi:legal->legal::@1]
    // [69] phi (byte) legal::i#2 = (byte) 1 [phi:legal->legal::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z i
    // legal::@1
  __b1:
    // row-1
    // [70] (byte~) legal::$0 ← (byte) legal::row#0 - (byte) 1 -- vbuz1=vbuz2_minus_1 
    ldx.z row
    dex
    stx.z __0
    // for(char i=1;i<=row-1;++i)
    // [71] if((byte) legal::i#2<=(byte~) legal::$0) goto legal::@2 -- vbuz1_le_vbuz2_then_la1 
    txa
    cmp.z i
    bcs __b2
    // [72] phi from legal::@1 to legal::@return [phi:legal::@1->legal::@return]
    // [72] phi (byte) legal::return#4 = (byte) 1 [phi:legal::@1->legal::@return#0] -- vbuz1=vbuc1 
    lda #1
    sta.z return
    rts
    // [72] phi from legal::@2 legal::@6 to legal::@return [phi:legal::@2/legal::@6->legal::@return]
  __b4:
    // [72] phi (byte) legal::return#4 = (byte) 0 [phi:legal::@2/legal::@6->legal::@return#0] -- vbuz1=vbuc1 
    lda #0
    sta.z return
    // legal::@return
    // }
    // [73] return 
    rts
    // legal::@2
  __b2:
    // if(board[i]==column)
    // [74] if(*((const byte*) board + (byte) legal::i#2)==(byte) legal::column#0) goto legal::@return -- pbuc1_derefidx_vbuz1_eq_vbuz2_then_la1 
    ldy.z i
    lda board,y
    cmp.z column
    beq __b4
    // legal::@4
    // diff(board[i],column)
    // [75] (byte) diff::a#0 ← *((const byte*) board + (byte) legal::i#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    lda board,y
    sta.z diff.a
    // [76] (byte) diff::b#0 ← (byte) legal::column#0 -- vbuz1=vbuz2 
    lda.z column
    sta.z diff.b
    // [77] call diff 
    // [194] phi from legal::@4 to diff [phi:legal::@4->diff]
    // [194] phi (byte) diff::b#2 = (byte) diff::b#0 [phi:legal::@4->diff#0] -- register_copy 
    // [194] phi (byte) diff::a#2 = (byte) diff::a#0 [phi:legal::@4->diff#1] -- register_copy 
    jsr diff
    // diff(board[i],column)
    // [78] (byte) diff::return#0 ← (byte) diff::return#4 -- vbuz1=vbuz2 
    lda.z diff.return_1
    sta.z diff.return
    // legal::@5
    // [79] (byte~) legal::$3 ← (byte) diff::return#0
    // diff(i,row)
    // [80] (byte) diff::a#1 ← (byte) legal::i#2 -- vbuz1=vbuz2 
    lda.z i
    sta.z diff.a
    // [81] (byte) diff::b#1 ← (byte) legal::row#0 -- vbuz1=vbuz2 
    lda.z row
    sta.z diff.b
    // [82] call diff 
    // [194] phi from legal::@5 to diff [phi:legal::@5->diff]
    // [194] phi (byte) diff::b#2 = (byte) diff::b#1 [phi:legal::@5->diff#0] -- register_copy 
    // [194] phi (byte) diff::a#2 = (byte) diff::a#1 [phi:legal::@5->diff#1] -- register_copy 
    jsr diff
    // diff(i,row)
    // [83] (byte) diff::return#1 ← (byte) diff::return#4
    // legal::@6
    // [84] (byte~) legal::$4 ← (byte) diff::return#1
    // if(diff(board[i],column)==diff(i,row))
    // [85] if((byte~) legal::$3!=(byte~) legal::$4) goto legal::@3 -- vbuz1_neq_vbuz2_then_la1 
    lda.z __3
    cmp.z __4
    bne __b3
    jmp __b4
    // legal::@3
  __b3:
    // for(char i=1;i<=row-1;++i)
    // [86] (byte) legal::i#1 ← ++ (byte) legal::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [69] phi from legal::@3 to legal::@1 [phi:legal::@3->legal::@1]
    // [69] phi (byte) legal::i#2 = (byte) legal::i#1 [phi:legal::@3->legal::@1#0] -- register_copy 
    jmp __b1
}
  // print
// Print the board with a legal placement. Also increments the solution count.
print: {
    .label i = $19
    .label i1 = $19
    .label j = 6
    // gotoxy(0,5)
    // [88] call gotoxy 
    // [200] phi from print to gotoxy [phi:print->gotoxy]
    jsr gotoxy
    // [89] phi from print to print::@11 [phi:print->print::@11]
    // print::@11
    // printf("\n#%lu:\n ",count)
    // [90] call cputs 
    // [132] phi from print::@11 to cputs [phi:print::@11->cputs]
    // [132] phi (to_nomodify byte*) cputs::s#14 = (const byte*) print::s [phi:print::@11->cputs#0] -- pbuz1=pbuc1 
    lda #<s
    sta.z cputs.s
    lda #>s
    sta.z cputs.s+1
    jsr cputs
    // print::@12
    // printf("\n#%lu:\n ",count)
    // [91] (dword) printf_ulong::uvalue#1 ← (dword) count
    // [92] call printf_ulong 
    // [183] phi from print::@12 to printf_ulong [phi:print::@12->printf_ulong]
    // [183] phi (dword) printf_ulong::uvalue#2 = (dword) printf_ulong::uvalue#1 [phi:print::@12->printf_ulong#0] -- register_copy 
    jsr printf_ulong
    // [93] phi from print::@12 to print::@13 [phi:print::@12->print::@13]
    // print::@13
    // printf("\n#%lu:\n ",count)
    // [94] call cputs 
    // [132] phi from print::@13 to cputs [phi:print::@13->cputs]
    // [132] phi (to_nomodify byte*) cputs::s#14 = (const byte*) print::s1 [phi:print::@13->cputs#0] -- pbuz1=pbuc1 
    lda #<s1
    sta.z cputs.s
    lda #>s1
    sta.z cputs.s+1
    jsr cputs
    // [95] phi from print::@13 to print::@1 [phi:print::@13->print::@1]
    // [95] phi (byte) print::i#2 = (byte) 1 [phi:print::@13->print::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z i
    // print::@1
  __b1:
    // for(char i=1;i<=QUEENS;++i)
    // [96] if((byte) print::i#2<(byte) 8+(byte) 1) goto print::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #8+1
    bcc __b2
    // [97] phi from print::@1 to print::@3 [phi:print::@1->print::@3]
    // [97] phi (byte) print::i1#2 = (byte) 1 [phi:print::@1->print::@3#0] -- vbuz1=vbuc1 
    lda #1
    sta.z i1
    // print::@3
  __b3:
    // for(char i=1;i<=QUEENS;++i)
    // [98] if((byte) print::i1#2<(byte) 8+(byte) 1) goto print::@4 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i1
    cmp #8+1
    bcc __b4
    // print::@return
    // }
    // [99] return 
    rts
    // [100] phi from print::@3 to print::@4 [phi:print::@3->print::@4]
    // print::@4
  __b4:
    // printf("\n%x",i)
    // [101] call cputs 
    // [132] phi from print::@4 to cputs [phi:print::@4->cputs]
    // [132] phi (to_nomodify byte*) cputs::s#14 = (const byte*) print::s2 [phi:print::@4->cputs#0] -- pbuz1=pbuc1 
    lda #<s2
    sta.z cputs.s
    lda #>s2
    sta.z cputs.s+1
    jsr cputs
    // print::@15
    // printf("\n%x",i)
    // [102] (byte) printf_uchar::uvalue#1 ← (byte) print::i1#2
    // [103] call printf_uchar 
    // [206] phi from print::@15 to printf_uchar [phi:print::@15->printf_uchar]
    // [206] phi (byte) printf_uchar::uvalue#2 = (byte) printf_uchar::uvalue#1 [phi:print::@15->printf_uchar#0] -- register_copy 
    jsr printf_uchar
    // [104] phi from print::@15 to print::@5 [phi:print::@15->print::@5]
    // [104] phi (byte) print::j#2 = (byte) 1 [phi:print::@15->print::@5#0] -- vbuz1=vbuc1 
    lda #1
    sta.z j
    // print::@5
  __b5:
    // for(char j=1;j<=QUEENS;++j)
    // [105] if((byte) print::j#2<(byte) 8+(byte) 1) goto print::@6 -- vbuz1_lt_vbuc1_then_la1 
    lda.z j
    cmp #8+1
    bcc __b6
    // print::@7
    // for(char i=1;i<=QUEENS;++i)
    // [106] (byte) print::i1#1 ← ++ (byte) print::i1#2 -- vbuz1=_inc_vbuz1 
    inc.z i1
    // [97] phi from print::@7 to print::@3 [phi:print::@7->print::@3]
    // [97] phi (byte) print::i1#2 = (byte) print::i1#1 [phi:print::@7->print::@3#0] -- register_copy 
    jmp __b3
    // print::@6
  __b6:
    // if(board[i]==j)
    // [107] if(*((const byte*) board + (byte) print::i1#2)==(byte) print::j#2) goto print::@8 -- pbuc1_derefidx_vbuz1_eq_vbuz2_then_la1 
    ldy.z i1
    lda board,y
    cmp.z j
    beq __b8
    // [108] phi from print::@6 to print::@10 [phi:print::@6->print::@10]
    // print::@10
    // printf("-")
    // [109] call cputs 
    // [132] phi from print::@10 to cputs [phi:print::@10->cputs]
    // [132] phi (to_nomodify byte*) cputs::s#14 = (const byte*) print::s4 [phi:print::@10->cputs#0] -- pbuz1=pbuc1 
    lda #<s4
    sta.z cputs.s
    lda #>s4
    sta.z cputs.s+1
    jsr cputs
    // print::@9
  __b9:
    // for(char j=1;j<=QUEENS;++j)
    // [110] (byte) print::j#1 ← ++ (byte) print::j#2 -- vbuz1=_inc_vbuz1 
    inc.z j
    // [104] phi from print::@9 to print::@5 [phi:print::@9->print::@5]
    // [104] phi (byte) print::j#2 = (byte) print::j#1 [phi:print::@9->print::@5#0] -- register_copy 
    jmp __b5
    // [111] phi from print::@6 to print::@8 [phi:print::@6->print::@8]
    // print::@8
  __b8:
    // printf("Q")
    // [112] call cputs 
    // [132] phi from print::@8 to cputs [phi:print::@8->cputs]
    // [132] phi (to_nomodify byte*) cputs::s#14 = (const byte*) print::s3 [phi:print::@8->cputs#0] -- pbuz1=pbuc1 
    lda #<s3
    sta.z cputs.s
    lda #>s3
    sta.z cputs.s+1
    jsr cputs
    jmp __b9
    // print::@2
  __b2:
    // printf("%x",i)
    // [113] (byte) printf_uchar::uvalue#0 ← (byte) print::i#2
    // [114] call printf_uchar 
    // [206] phi from print::@2 to printf_uchar [phi:print::@2->printf_uchar]
    // [206] phi (byte) printf_uchar::uvalue#2 = (byte) printf_uchar::uvalue#0 [phi:print::@2->printf_uchar#0] -- register_copy 
    jsr printf_uchar
    // print::@14
    // for(char i=1;i<=QUEENS;++i)
    // [115] (byte) print::i#1 ← ++ (byte) print::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [95] phi from print::@14 to print::@1 [phi:print::@14->print::@1]
    // [95] phi (byte) print::i#2 = (byte) print::i#1 [phi:print::@14->print::@1#0] -- register_copy 
    jmp __b1
    s: .text @"\n#"
    .byte 0
    s1: .text @":\n "
    .byte 0
    s2: .text @"\n"
    .byte 0
    s3: .text "Q"
    .byte 0
    s4: .text "-"
    .byte 0
}
  // clrscr
// clears the screen and moves the cursor to the upper left-hand corner of the screen.
clrscr: {
    .label c = 6
    .label line_text = $b
    .label line_cols = $e
    .label l = $1c
    // [117] phi from clrscr to clrscr::@1 [phi:clrscr->clrscr::@1]
    // [117] phi (byte*) clrscr::line_cols#5 = (const nomodify byte*) COLORRAM [phi:clrscr->clrscr::@1#0] -- pbuz1=pbuc1 
    lda #<COLORRAM
    sta.z line_cols
    lda #>COLORRAM
    sta.z line_cols+1
    // [117] phi (byte*) clrscr::line_text#5 = (const nomodify byte*) DEFAULT_SCREEN [phi:clrscr->clrscr::@1#1] -- pbuz1=pbuc1 
    lda #<DEFAULT_SCREEN
    sta.z line_text
    lda #>DEFAULT_SCREEN
    sta.z line_text+1
    // [117] phi (byte) clrscr::l#2 = (byte) 0 [phi:clrscr->clrscr::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    // clrscr::@1
  __b1:
    // for( char l=0;l<CONIO_HEIGHT; l++ )
    // [118] if((byte) clrscr::l#2<(byte) $19) goto clrscr::@3 -- vbuz1_lt_vbuc1_then_la1 
    lda.z l
    cmp #$19
    bcc __b2
    // clrscr::@2
    // conio_cursor_x = 0
    // [119] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // conio_cursor_y = 0
    // [120] (byte) conio_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
    sta.z conio_cursor_y
    // conio_line_text = CONIO_SCREEN_TEXT
    // [121] (byte*) conio_line_text ← (const nomodify byte*) DEFAULT_SCREEN -- pbuz1=pbuc1 
    lda #<DEFAULT_SCREEN
    sta.z conio_line_text
    lda #>DEFAULT_SCREEN
    sta.z conio_line_text+1
    // conio_line_color = CONIO_SCREEN_COLORS
    // [122] (byte*) conio_line_color ← (const nomodify byte*) COLORRAM -- pbuz1=pbuc1 
    lda #<COLORRAM
    sta.z conio_line_color
    lda #>COLORRAM
    sta.z conio_line_color+1
    // clrscr::@return
    // }
    // [123] return 
    rts
    // [124] phi from clrscr::@1 to clrscr::@3 [phi:clrscr::@1->clrscr::@3]
  __b2:
    // [124] phi (byte) clrscr::c#2 = (byte) 0 [phi:clrscr::@1->clrscr::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    // clrscr::@3
  __b3:
    // for( char c=0;c<CONIO_WIDTH; c++ )
    // [125] if((byte) clrscr::c#2<(byte) $28) goto clrscr::@4 -- vbuz1_lt_vbuc1_then_la1 
    lda.z c
    cmp #$28
    bcc __b4
    // clrscr::@5
    // line_text += CONIO_WIDTH
    // [126] (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#5 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line_text
    sta.z line_text
    bcc !+
    inc.z line_text+1
  !:
    // line_cols += CONIO_WIDTH
    // [127] (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#5 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line_cols
    sta.z line_cols
    bcc !+
    inc.z line_cols+1
  !:
    // for( char l=0;l<CONIO_HEIGHT; l++ )
    // [128] (byte) clrscr::l#1 ← ++ (byte) clrscr::l#2 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [117] phi from clrscr::@5 to clrscr::@1 [phi:clrscr::@5->clrscr::@1]
    // [117] phi (byte*) clrscr::line_cols#5 = (byte*) clrscr::line_cols#1 [phi:clrscr::@5->clrscr::@1#0] -- register_copy 
    // [117] phi (byte*) clrscr::line_text#5 = (byte*) clrscr::line_text#1 [phi:clrscr::@5->clrscr::@1#1] -- register_copy 
    // [117] phi (byte) clrscr::l#2 = (byte) clrscr::l#1 [phi:clrscr::@5->clrscr::@1#2] -- register_copy 
    jmp __b1
    // clrscr::@4
  __b4:
    // line_text[c] = ' '
    // [129] *((byte*) clrscr::line_text#5 + (byte) clrscr::c#2) ← (byte) ' ' -- pbuz1_derefidx_vbuz2=vbuc1 
    lda #' '
    ldy.z c
    sta (line_text),y
    // line_cols[c] = conio_textcolor
    // [130] *((byte*) clrscr::line_cols#5 + (byte) clrscr::c#2) ← (const nomodify byte) LIGHT_BLUE -- pbuz1_derefidx_vbuz2=vbuc1 
    lda #LIGHT_BLUE
    sta (line_cols),y
    // for( char c=0;c<CONIO_WIDTH; c++ )
    // [131] (byte) clrscr::c#1 ← ++ (byte) clrscr::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [124] phi from clrscr::@4 to clrscr::@3 [phi:clrscr::@4->clrscr::@3]
    // [124] phi (byte) clrscr::c#2 = (byte) clrscr::c#1 [phi:clrscr::@4->clrscr::@3#0] -- register_copy 
    jmp __b3
}
  // cputs
// Output a NUL-terminated string at the current cursor position
// cputs(byte* zp($b) s)
cputs: {
    .label c = $d
    .label s = $b
    // [133] phi from cputs cputs::@2 to cputs::@1 [phi:cputs/cputs::@2->cputs::@1]
    // [133] phi (to_nomodify byte*) cputs::s#13 = (to_nomodify byte*) cputs::s#14 [phi:cputs/cputs::@2->cputs::@1#0] -- register_copy 
    // cputs::@1
  __b1:
    // while(c=*s++)
    // [134] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#13) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (s),y
    sta.z c
    // [135] (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#13 -- pbuz1=_inc_pbuz1 
    inc.z s
    bne !+
    inc.z s+1
  !:
    // [136] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z c
    bne __b2
    // cputs::@return
    // }
    // [137] return 
    rts
    // cputs::@2
  __b2:
    // cputc(c)
    // [138] (byte) cputc::c#0 ← (byte) cputs::c#1
    // [139] call cputc 
    // [213] phi from cputs::@2 to cputc [phi:cputs::@2->cputc]
    // [213] phi (byte) cputc::c#3 = (byte) cputc::c#0 [phi:cputs::@2->cputc#0] -- register_copy 
    jsr cputc
    jmp __b1
}
  // printf_uint
// Print an unsigned int using a specific format
printf_uint: {
    .const format_min_length = 0
    .const format_justify_left = 0
    .const format_zero_padding = 0
    .const format_upper_case = 0
    .label uvalue = 8
    // printf_uint::@1
    // printf_buffer.sign = format.sign_always?'+':0
    // [141] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // utoa(uvalue, printf_buffer.digits, format.radix)
    // [142] call utoa 
  // Format number into buffer
    // [224] phi from printf_uint::@1 to utoa [phi:printf_uint::@1->utoa]
    jsr utoa
    // printf_uint::@2
    // printf_number_buffer(printf_buffer, format)
    // [143] (byte) printf_number_buffer::buffer_sign#1 ← *((byte*)&(struct printf_buffer_number) printf_buffer) -- vbuz1=_deref_pbuc1 
    lda printf_buffer
    sta.z printf_number_buffer.buffer_sign
    // [144] call printf_number_buffer 
  // Print using format
    // [245] phi from printf_uint::@2 to printf_number_buffer [phi:printf_uint::@2->printf_number_buffer]
    // [245] phi (byte) printf_number_buffer::format_upper_case#10 = (const byte) printf_uint::format_upper_case#0 [phi:printf_uint::@2->printf_number_buffer#0] -- vbuz1=vbuc1 
    lda #format_upper_case
    sta.z printf_number_buffer.format_upper_case
    // [245] phi (byte) printf_number_buffer::buffer_sign#10 = (byte) printf_number_buffer::buffer_sign#1 [phi:printf_uint::@2->printf_number_buffer#1] -- register_copy 
    // [245] phi (byte) printf_number_buffer::format_zero_padding#10 = (const byte) printf_uint::format_zero_padding#0 [phi:printf_uint::@2->printf_number_buffer#2] -- vbuz1=vbuc1 
    lda #format_zero_padding
    sta.z printf_number_buffer.format_zero_padding
    // [245] phi (byte) printf_number_buffer::format_justify_left#10 = (const byte) printf_uint::format_justify_left#0 [phi:printf_uint::@2->printf_number_buffer#3] -- vbuz1=vbuc1 
    lda #format_justify_left
    sta.z printf_number_buffer.format_justify_left
    // [245] phi (byte) printf_number_buffer::format_min_length#3 = (const byte) printf_uint::format_min_length#0 [phi:printf_uint::@2->printf_number_buffer#4] -- vbuz1=vbuc1 
    lda #format_min_length
    sta.z printf_number_buffer.format_min_length
    jsr printf_number_buffer
    // printf_uint::@return
    // }
    // [145] return 
    rts
}
  // tod_init
// Initialize time-of-day clock
// This uses the MOS6526 CIA#1
// tod_init(byte zp($16) tod_TENTHS, byte zp($17) tod_SEC, byte zp($18) tod_MIN, byte zp($19) tod_HOURS)
tod_init: {
    .label tod_TENTHS = $16
    .label tod_SEC = $17
    .label tod_MIN = $18
    .label tod_HOURS = $19
    // CIA1->TIMER_A_CONTROL |= 0x80
    // [146] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) | (byte) $80 -- _deref_pbuc1=_deref_pbuc1_bor_vbuc2 
    // Set 50hz (this assumes PAL!) (bit7=1)
    lda #$80
    ora CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL
    // CIA1->TIMER_B_CONTROL &= 0x7f
    // [147] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) & (byte) $7f -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    // Writing TOD clock (bit7=0)
    lda #$7f
    and CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL
    // CIA1->TOD_HOURS = tod.HOURS
    // [148] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS) ← (byte) tod_init::tod_HOURS#0 -- _deref_pbuc1=vbuz1 
    // Reset TOD clock
    // Writing sequence is important. TOD stops when hours is written and starts when 10ths is written.
    lda.z tod_HOURS
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS
    // CIA1->TOD_MIN = tod.MIN
    // [149] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN) ← (byte) tod_init::tod_MIN#0 -- _deref_pbuc1=vbuz1 
    lda.z tod_MIN
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_MIN
    // CIA1->TOD_SEC = tod.SEC
    // [150] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC) ← (byte) tod_init::tod_SEC#0 -- _deref_pbuc1=vbuz1 
    lda.z tod_SEC
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_SEC
    // CIA1->TOD_10THS = tod.TENTHS
    // [151] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS) ← (byte) tod_init::tod_TENTHS#0 -- _deref_pbuc1=vbuz1 
    lda.z tod_TENTHS
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_10THS
    // tod_init::@return
    // }
    // [152] return 
    rts
}
  // tod_read
// Read time of day
tod_read: {
    .label return_TENTHS = $19
    .label return_SEC = $1a
    .label return_MIN = $1b
    .label return_HOURS = $1c
    // hours = CIA1->TOD_HOURS
    // [153] (byte) tod_read::return_HOURS#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS) -- vbuz1=_deref_pbuc1 
    // Reading sequence is important. TOD latches on reading hours until 10ths is read.
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS
    sta.z return_HOURS
    // mins = CIA1->TOD_MIN
    // [154] (byte) tod_read::return_MIN#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN) -- vbuz1=_deref_pbuc1 
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_MIN
    sta.z return_MIN
    // secs = CIA1->TOD_SEC
    // [155] (byte) tod_read::return_SEC#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC) -- vbuz1=_deref_pbuc1 
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_SEC
    sta.z return_SEC
    // tenths = CIA1->TOD_10THS
    // [156] (byte) tod_read::return_TENTHS#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS) -- vbuz1=_deref_pbuc1 
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_10THS
    sta.z return_TENTHS
    // tod_read::@return
    // }
    // [157] return 
    rts
}
  // tod_str
// Convert time of day to a human-readable string "hh:mm:ss:10"
// tod_str(byte zp($19) tod_TENTHS, byte zp($1a) tod_SEC, byte zp($1b) tod_MIN, byte zp($1c) tod_HOURS)
tod_str: {
    .label __0 = $1d
    .label __1 = $1d
    .label __2 = $1c
    .label __3 = $1c
    .label __4 = $20
    .label __5 = $20
    .label __6 = $1b
    .label __7 = $1b
    .label __8 = $21
    .label __9 = $21
    .label __10 = $1a
    .label __11 = $1a
    .label __12 = $26
    .label __13 = $26
    .label __14 = $19
    .label __15 = $19
    .label tod_TENTHS = $19
    .label tod_SEC = $1a
    .label tod_MIN = $1b
    .label tod_HOURS = $1c
    // tod.HOURS>>4
    // [158] (byte~) tod_str::$0 ← (byte) tod_str::tod_HOURS#0 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda.z tod_HOURS
    lsr
    lsr
    lsr
    lsr
    sta.z __0
    // '0'+(tod.HOURS>>4)
    // [159] (byte~) tod_str::$1 ← (byte) '0' + (byte~) tod_str::$0 -- vbuz1=vbuc1_plus_vbuz1 
    lax.z __1
    axs #-['0']
    stx.z __1
    // tod_buffer[0] = '0'+(tod.HOURS>>4)
    // [160] *((const byte*) tod_buffer) ← (byte~) tod_str::$1 -- _deref_pbuc1=vbuz1 
    txa
    sta tod_buffer
    // tod.HOURS&0x0f
    // [161] (byte~) tod_str::$2 ← (byte) tod_str::tod_HOURS#0 & (byte) $f -- vbuz1=vbuz1_band_vbuc1 
    lda #$f
    and.z __2
    sta.z __2
    // '0'+(tod.HOURS&0x0f)
    // [162] (byte~) tod_str::$3 ← (byte) '0' + (byte~) tod_str::$2 -- vbuz1=vbuc1_plus_vbuz1 
    lax.z __3
    axs #-['0']
    stx.z __3
    // tod_buffer[1] = '0'+(tod.HOURS&0x0f)
    // [163] *((const byte*) tod_buffer+(byte) 1) ← (byte~) tod_str::$3 -- _deref_pbuc1=vbuz1 
    txa
    sta tod_buffer+1
    // tod.MIN>>4
    // [164] (byte~) tod_str::$4 ← (byte) tod_str::tod_MIN#0 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda.z tod_MIN
    lsr
    lsr
    lsr
    lsr
    sta.z __4
    // '0'+(tod.MIN>>4)
    // [165] (byte~) tod_str::$5 ← (byte) '0' + (byte~) tod_str::$4 -- vbuz1=vbuc1_plus_vbuz1 
    lax.z __5
    axs #-['0']
    stx.z __5
    // tod_buffer[3] = '0'+(tod.MIN>>4)
    // [166] *((const byte*) tod_buffer+(byte) 3) ← (byte~) tod_str::$5 -- _deref_pbuc1=vbuz1 
    txa
    sta tod_buffer+3
    // tod.MIN&0x0f
    // [167] (byte~) tod_str::$6 ← (byte) tod_str::tod_MIN#0 & (byte) $f -- vbuz1=vbuz1_band_vbuc1 
    lda #$f
    and.z __6
    sta.z __6
    // '0'+(tod.MIN&0x0f)
    // [168] (byte~) tod_str::$7 ← (byte) '0' + (byte~) tod_str::$6 -- vbuz1=vbuc1_plus_vbuz1 
    lax.z __7
    axs #-['0']
    stx.z __7
    // tod_buffer[4] = '0'+(tod.MIN&0x0f)
    // [169] *((const byte*) tod_buffer+(byte) 4) ← (byte~) tod_str::$7 -- _deref_pbuc1=vbuz1 
    txa
    sta tod_buffer+4
    // tod.SEC>>4
    // [170] (byte~) tod_str::$8 ← (byte) tod_str::tod_SEC#0 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda.z tod_SEC
    lsr
    lsr
    lsr
    lsr
    sta.z __8
    // '0'+(tod.SEC>>4)
    // [171] (byte~) tod_str::$9 ← (byte) '0' + (byte~) tod_str::$8 -- vbuz1=vbuc1_plus_vbuz1 
    lax.z __9
    axs #-['0']
    stx.z __9
    // tod_buffer[6] = '0'+(tod.SEC>>4)
    // [172] *((const byte*) tod_buffer+(byte) 6) ← (byte~) tod_str::$9 -- _deref_pbuc1=vbuz1 
    txa
    sta tod_buffer+6
    // tod.SEC&0x0f
    // [173] (byte~) tod_str::$10 ← (byte) tod_str::tod_SEC#0 & (byte) $f -- vbuz1=vbuz1_band_vbuc1 
    lda #$f
    and.z __10
    sta.z __10
    // '0'+(tod.SEC&0x0f)
    // [174] (byte~) tod_str::$11 ← (byte) '0' + (byte~) tod_str::$10 -- vbuz1=vbuc1_plus_vbuz1 
    lax.z __11
    axs #-['0']
    stx.z __11
    // tod_buffer[7] = '0'+(tod.SEC&0x0f)
    // [175] *((const byte*) tod_buffer+(byte) 7) ← (byte~) tod_str::$11 -- _deref_pbuc1=vbuz1 
    txa
    sta tod_buffer+7
    // tod.TENTHS>>4
    // [176] (byte~) tod_str::$12 ← (byte) tod_str::tod_TENTHS#0 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda.z tod_TENTHS
    lsr
    lsr
    lsr
    lsr
    sta.z __12
    // '0'+(tod.TENTHS>>4)
    // [177] (byte~) tod_str::$13 ← (byte) '0' + (byte~) tod_str::$12 -- vbuz1=vbuc1_plus_vbuz1 
    lax.z __13
    axs #-['0']
    stx.z __13
    // tod_buffer[9] = '0'+(tod.TENTHS>>4)
    // [178] *((const byte*) tod_buffer+(byte) 9) ← (byte~) tod_str::$13 -- _deref_pbuc1=vbuz1 
    txa
    sta tod_buffer+9
    // tod.TENTHS&0x0f
    // [179] (byte~) tod_str::$14 ← (byte) tod_str::tod_TENTHS#0 & (byte) $f -- vbuz1=vbuz1_band_vbuc1 
    lda #$f
    and.z __14
    sta.z __14
    // '0'+(tod.TENTHS&0x0f)
    // [180] (byte~) tod_str::$15 ← (byte) '0' + (byte~) tod_str::$14 -- vbuz1=vbuc1_plus_vbuz1 
    lax.z __15
    axs #-['0']
    stx.z __15
    // tod_buffer[10] = '0'+(tod.TENTHS&0x0f)
    // [181] *((const byte*) tod_buffer+(byte) $a) ← (byte~) tod_str::$15 -- _deref_pbuc1=vbuz1 
    txa
    sta tod_buffer+$a
    // tod_str::@return
    // }
    // [182] return 
    rts
}
  // printf_ulong
// Print an unsigned int using a specific format
// printf_ulong(dword zp(2) uvalue)
printf_ulong: {
    .label uvalue = 2
    // printf_ulong::@1
    // printf_buffer.sign = format.sign_always?'+':0
    // [184] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // ultoa(uvalue, printf_buffer.digits, format.radix)
    // [185] (dword) ultoa::value#1 ← (dword) printf_ulong::uvalue#2 -- vduz1=vduz2 
    lda.z uvalue
    sta.z ultoa.value
    lda.z uvalue+1
    sta.z ultoa.value+1
    lda.z uvalue+2
    sta.z ultoa.value+2
    lda.z uvalue+3
    sta.z ultoa.value+3
    // [186] call ultoa 
  // Format number into buffer
    // [282] phi from printf_ulong::@1 to ultoa [phi:printf_ulong::@1->ultoa]
    jsr ultoa
    // printf_ulong::@2
    // printf_number_buffer(printf_buffer, format)
    // [187] (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer) -- vbuz1=_deref_pbuc1 
    lda printf_buffer
    sta.z printf_number_buffer.buffer_sign
    // [188] call printf_number_buffer 
  // Print using format
    // [245] phi from printf_ulong::@2 to printf_number_buffer [phi:printf_ulong::@2->printf_number_buffer]
    // [245] phi (byte) printf_number_buffer::format_upper_case#10 = (byte) 0 [phi:printf_ulong::@2->printf_number_buffer#0] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_number_buffer.format_upper_case
    // [245] phi (byte) printf_number_buffer::buffer_sign#10 = (byte) printf_number_buffer::buffer_sign#0 [phi:printf_ulong::@2->printf_number_buffer#1] -- register_copy 
    // [245] phi (byte) printf_number_buffer::format_zero_padding#10 = (byte) 0 [phi:printf_ulong::@2->printf_number_buffer#2] -- vbuz1=vbuc1 
    sta.z printf_number_buffer.format_zero_padding
    // [245] phi (byte) printf_number_buffer::format_justify_left#10 = (byte) 0 [phi:printf_ulong::@2->printf_number_buffer#3] -- vbuz1=vbuc1 
    sta.z printf_number_buffer.format_justify_left
    // [245] phi (byte) printf_number_buffer::format_min_length#3 = (byte) 0 [phi:printf_ulong::@2->printf_number_buffer#4] -- vbuz1=vbuc1 
    sta.z printf_number_buffer.format_min_length
    jsr printf_number_buffer
    // printf_ulong::@return
    // }
    // [189] return 
    rts
}
  // printf_string
// Print a string value using a specific format
// Handles justification and min length 
printf_string: {
    // [191] phi from printf_string to printf_string::@1 [phi:printf_string->printf_string::@1]
    // printf_string::@1
    // cputs(str)
    // [192] call cputs 
    // [132] phi from printf_string::@1 to cputs [phi:printf_string::@1->cputs]
    // [132] phi (to_nomodify byte*) cputs::s#14 = (const byte*) tod_buffer [phi:printf_string::@1->cputs#0] -- pbuz1=pbuc1 
    lda #<tod_buffer
    sta.z cputs.s
    lda #>tod_buffer
    sta.z cputs.s+1
    jsr cputs
    // printf_string::@return
    // }
    // [193] return 
    rts
}
  // diff
// Find the absolute difference between two unsigned chars
// diff(byte zp($d) a, byte zp(6) b)
diff: {
    .label a = $d
    .label b = 6
    .label return = $1b
    .label return_1 = $d
    // if(a<b)
    // [195] if((byte) diff::a#2<(byte) diff::b#2) goto diff::@1 -- vbuz1_lt_vbuz2_then_la1 
    lda.z a
    cmp.z b
    bcc __b1
    // diff::@2
    // return a-b;
    // [196] (byte) diff::return#3 ← (byte) diff::a#2 - (byte) diff::b#2 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z return_1
    sec
    sbc.z b
    sta.z return_1
    // [197] phi from diff::@1 diff::@2 to diff::@return [phi:diff::@1/diff::@2->diff::@return]
    // [197] phi (byte) diff::return#4 = (byte) diff::return#2 [phi:diff::@1/diff::@2->diff::@return#0] -- register_copy 
    // diff::@return
    // }
    // [198] return 
    rts
    // diff::@1
  __b1:
    // return b-a;
    // [199] (byte) diff::return#2 ← (byte) diff::b#2 - (byte) diff::a#2 -- vbuz1=vbuz2_minus_vbuz1 
    lda.z b
    sec
    sbc.z return_1
    sta.z return_1
    rts
}
  // gotoxy
// Set the cursor to the specified position
gotoxy: {
    .const x = 0
    .const y = 5
    .const line_offset = y*$28
    // gotoxy::@1
    // conio_cursor_x = x
    // [201] (byte) conio_cursor_x ← (const byte) gotoxy::x#2 -- vbuz1=vbuc1 
    lda #x
    sta.z conio_cursor_x
    // conio_cursor_y = y
    // [202] (byte) conio_cursor_y ← (const byte) gotoxy::y#2 -- vbuz1=vbuc1 
    lda #y
    sta.z conio_cursor_y
    // conio_line_text = CONIO_SCREEN_TEXT + line_offset
    // [203] (byte*) conio_line_text ← (const nomodify byte*) DEFAULT_SCREEN+(const word) gotoxy::line_offset#0 -- pbuz1=pbuc1 
    lda #<DEFAULT_SCREEN+line_offset
    sta.z conio_line_text
    lda #>DEFAULT_SCREEN+line_offset
    sta.z conio_line_text+1
    // conio_line_color = CONIO_SCREEN_COLORS + line_offset
    // [204] (byte*) conio_line_color ← (const nomodify byte*) COLORRAM+(const word) gotoxy::line_offset#0 -- pbuz1=pbuc1 
    lda #<COLORRAM+line_offset
    sta.z conio_line_color
    lda #>COLORRAM+line_offset
    sta.z conio_line_color+1
    // gotoxy::@return
    // }
    // [205] return 
    rts
}
  // printf_uchar
// Print an unsigned char using a specific format
// printf_uchar(byte zp($19) uvalue)
printf_uchar: {
    .label uvalue = $19
    // printf_uchar::@1
    // printf_buffer.sign = format.sign_always?'+':0
    // [207] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // uctoa(uvalue, printf_buffer.digits, format.radix)
    // [208] (byte) uctoa::value#1 ← (byte) printf_uchar::uvalue#2 -- vbuz1=vbuz2 
    lda.z uvalue
    sta.z uctoa.value
    // [209] call uctoa 
  // Format number into buffer
    // [303] phi from printf_uchar::@1 to uctoa [phi:printf_uchar::@1->uctoa]
    jsr uctoa
    // printf_uchar::@2
    // printf_number_buffer(printf_buffer, format)
    // [210] (byte) printf_number_buffer::buffer_sign#2 ← *((byte*)&(struct printf_buffer_number) printf_buffer) -- vbuz1=_deref_pbuc1 
    lda printf_buffer
    sta.z printf_number_buffer.buffer_sign
    // [211] call printf_number_buffer 
  // Print using format
    // [245] phi from printf_uchar::@2 to printf_number_buffer [phi:printf_uchar::@2->printf_number_buffer]
    // [245] phi (byte) printf_number_buffer::format_upper_case#10 = (byte) 0 [phi:printf_uchar::@2->printf_number_buffer#0] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_number_buffer.format_upper_case
    // [245] phi (byte) printf_number_buffer::buffer_sign#10 = (byte) printf_number_buffer::buffer_sign#2 [phi:printf_uchar::@2->printf_number_buffer#1] -- register_copy 
    // [245] phi (byte) printf_number_buffer::format_zero_padding#10 = (byte) 0 [phi:printf_uchar::@2->printf_number_buffer#2] -- vbuz1=vbuc1 
    sta.z printf_number_buffer.format_zero_padding
    // [245] phi (byte) printf_number_buffer::format_justify_left#10 = (byte) 0 [phi:printf_uchar::@2->printf_number_buffer#3] -- vbuz1=vbuc1 
    sta.z printf_number_buffer.format_justify_left
    // [245] phi (byte) printf_number_buffer::format_min_length#3 = (byte) 0 [phi:printf_uchar::@2->printf_number_buffer#4] -- vbuz1=vbuc1 
    sta.z printf_number_buffer.format_min_length
    jsr printf_number_buffer
    // printf_uchar::@return
    // }
    // [212] return 
    rts
}
  // cputc
// Output one character at the current cursor position
// Moves the cursor forward. Scrolls the entire screen if needed
// cputc(byte zp($d) c)
cputc: {
    .label c = $d
    // if(c=='\n')
    // [214] if((byte) cputc::c#3==(byte) ' ') goto cputc::@1 -- vbuz1_eq_vbuc1_then_la1 
    lda #'\n'
    cmp.z c
    beq __b1
    // cputc::@2
    // conio_line_text[conio_cursor_x] = c
    // [215] *((byte*) conio_line_text + (byte) conio_cursor_x) ← (byte) cputc::c#3 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda.z c
    ldy.z conio_cursor_x
    sta (conio_line_text),y
    // conio_line_color[conio_cursor_x] = conio_textcolor
    // [216] *((byte*) conio_line_color + (byte) conio_cursor_x) ← (const nomodify byte) LIGHT_BLUE -- pbuz1_derefidx_vbuz2=vbuc1 
    lda #LIGHT_BLUE
    sta (conio_line_color),y
    // if(++conio_cursor_x==CONIO_WIDTH)
    // [217] (byte) conio_cursor_x ← ++ (byte) conio_cursor_x -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_x
    // [218] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z conio_cursor_x
    bne __breturn
    // [219] phi from cputc::@2 to cputc::@3 [phi:cputc::@2->cputc::@3]
    // cputc::@3
    // cputln()
    // [220] call cputln 
    jsr cputln
    // cputc::@return
  __breturn:
    // }
    // [221] return 
    rts
    // [222] phi from cputc to cputc::@1 [phi:cputc->cputc::@1]
    // cputc::@1
  __b1:
    // cputln()
    // [223] call cputln 
    jsr cputln
    rts
}
  // utoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// utoa(word zp($e) value, byte* zp($b) buffer)
utoa: {
    .const max_digits = 5
    .label __10 = $1d
    .label __11 = $1c
    .label digit_value = $1e
    .label buffer = $b
    .label digit = 6
    .label value = $e
    .label started = $1a
    // [225] phi from utoa to utoa::@1 [phi:utoa->utoa::@1]
    // [225] phi (byte*) utoa::buffer#11 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:utoa->utoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer+1
    // [225] phi (byte) utoa::started#2 = (byte) 0 [phi:utoa->utoa::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z started
    // [225] phi (word) utoa::value#2 = (const word) printf_uint::uvalue#0 [phi:utoa->utoa::@1#2] -- vwuz1=vwuc1 
    lda #<printf_uint.uvalue
    sta.z value
    lda #>printf_uint.uvalue
    sta.z value+1
    // [225] phi (byte) utoa::digit#2 = (byte) 0 [phi:utoa->utoa::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    // utoa::@1
  __b1:
    // for( char digit=0; digit<max_digits-1; digit++ )
    // [226] if((byte) utoa::digit#2<(const byte) utoa::max_digits#1-(byte) 1) goto utoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #max_digits-1
    bcc __b2
    // utoa::@3
    // *buffer++ = DIGITS[(char)value]
    // [227] (byte~) utoa::$11 ← (byte)(word) utoa::value#2 -- vbuz1=_byte_vwuz2 
    lda.z value
    sta.z __11
    // [228] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    tay
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    // *buffer++ = DIGITS[(char)value];
    // [229] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // *buffer = 0
    // [230] *((byte*) utoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (buffer),y
    // utoa::@return
    // }
    // [231] return 
    rts
    // utoa::@2
  __b2:
    // digit_value = digit_values[digit]
    // [232] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z digit
    asl
    sta.z __10
    // [233] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10) -- vwuz1=pwuc1_derefidx_vbuz2 
    tay
    lda RADIX_DECIMAL_VALUES,y
    sta.z digit_value
    lda RADIX_DECIMAL_VALUES+1,y
    sta.z digit_value+1
    // if (started || value >= digit_value)
    // [234] if((byte) 0!=(byte) utoa::started#2) goto utoa::@5 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z started
    bne __b5
    // utoa::@7
    // [235] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5 -- vwuz1_ge_vwuz2_then_la1 
    lda.z digit_value+1
    cmp.z value+1
    bne !+
    lda.z digit_value
    cmp.z value
    beq __b5
  !:
    bcc __b5
    // [236] phi from utoa::@7 to utoa::@4 [phi:utoa::@7->utoa::@4]
    // [236] phi (byte*) utoa::buffer#14 = (byte*) utoa::buffer#11 [phi:utoa::@7->utoa::@4#0] -- register_copy 
    // [236] phi (byte) utoa::started#4 = (byte) utoa::started#2 [phi:utoa::@7->utoa::@4#1] -- register_copy 
    // [236] phi (word) utoa::value#6 = (word) utoa::value#2 [phi:utoa::@7->utoa::@4#2] -- register_copy 
    // utoa::@4
  __b4:
    // for( char digit=0; digit<max_digits-1; digit++ )
    // [237] (byte) utoa::digit#1 ← ++ (byte) utoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [225] phi from utoa::@4 to utoa::@1 [phi:utoa::@4->utoa::@1]
    // [225] phi (byte*) utoa::buffer#11 = (byte*) utoa::buffer#14 [phi:utoa::@4->utoa::@1#0] -- register_copy 
    // [225] phi (byte) utoa::started#2 = (byte) utoa::started#4 [phi:utoa::@4->utoa::@1#1] -- register_copy 
    // [225] phi (word) utoa::value#2 = (word) utoa::value#6 [phi:utoa::@4->utoa::@1#2] -- register_copy 
    // [225] phi (byte) utoa::digit#2 = (byte) utoa::digit#1 [phi:utoa::@4->utoa::@1#3] -- register_copy 
    jmp __b1
    // utoa::@5
  __b5:
    // utoa_append(buffer++, value, digit_value)
    // [238] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11
    // [239] (word) utoa_append::value#0 ← (word) utoa::value#2
    // [240] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0
    // [241] call utoa_append 
    // [328] phi from utoa::@5 to utoa_append [phi:utoa::@5->utoa_append]
    jsr utoa_append
    // utoa_append(buffer++, value, digit_value)
    // [242] (word) utoa_append::return#0 ← (word) utoa_append::value#2
    // utoa::@6
    // value = utoa_append(buffer++, value, digit_value)
    // [243] (word) utoa::value#0 ← (word) utoa_append::return#0
    // value = utoa_append(buffer++, value, digit_value);
    // [244] (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [236] phi from utoa::@6 to utoa::@4 [phi:utoa::@6->utoa::@4]
    // [236] phi (byte*) utoa::buffer#14 = (byte*) utoa::buffer#4 [phi:utoa::@6->utoa::@4#0] -- register_copy 
    // [236] phi (byte) utoa::started#4 = (byte) 1 [phi:utoa::@6->utoa::@4#1] -- vbuz1=vbuc1 
    lda #1
    sta.z started
    // [236] phi (word) utoa::value#6 = (word) utoa::value#0 [phi:utoa::@6->utoa::@4#2] -- register_copy 
    jmp __b4
}
  // printf_number_buffer
// Print the contents of the number buffer using a specific format.
// This handles minimum length, zero-filling, and left/right justification from the format
// printf_number_buffer(byte zp($20) buffer_sign, byte zp($1a) format_min_length, byte zp($1b) format_justify_left, byte zp($1d) format_zero_padding, byte zp($21) format_upper_case)
printf_number_buffer: {
    .label __19 = $1e
    .label buffer_sign = $20
    .label len = $d
    .label padding = $1a
    .label format_min_length = $1a
    .label format_zero_padding = $1d
    .label format_justify_left = $1b
    .label format_upper_case = $21
    // if(format.min_length)
    // [246] if((byte) 0==(byte) printf_number_buffer::format_min_length#3) goto printf_number_buffer::@1 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_min_length
    beq __b6
    // [247] phi from printf_number_buffer to printf_number_buffer::@6 [phi:printf_number_buffer->printf_number_buffer::@6]
    // printf_number_buffer::@6
    // strlen(buffer.digits)
    // [248] call strlen 
    // [335] phi from printf_number_buffer::@6 to strlen [phi:printf_number_buffer::@6->strlen]
    jsr strlen
    // strlen(buffer.digits)
    // [249] (word) strlen::return#2 ← (word) strlen::len#2
    // printf_number_buffer::@14
    // [250] (word~) printf_number_buffer::$19 ← (word) strlen::return#2
    // len = (signed char)strlen(buffer.digits)
    // [251] (signed byte) printf_number_buffer::len#0 ← (signed byte)(word~) printf_number_buffer::$19 -- vbsz1=_sbyte_vwuz2 
    // There is a minimum length - work out the padding
    lda.z __19
    sta.z len
    // if(buffer.sign)
    // [252] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@13 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z buffer_sign
    beq __b13
    // printf_number_buffer::@7
    // len++;
    // [253] (signed byte) printf_number_buffer::len#1 ← ++ (signed byte) printf_number_buffer::len#0 -- vbsz1=_inc_vbsz1 
    inc.z len
    // [254] phi from printf_number_buffer::@14 printf_number_buffer::@7 to printf_number_buffer::@13 [phi:printf_number_buffer::@14/printf_number_buffer::@7->printf_number_buffer::@13]
    // [254] phi (signed byte) printf_number_buffer::len#2 = (signed byte) printf_number_buffer::len#0 [phi:printf_number_buffer::@14/printf_number_buffer::@7->printf_number_buffer::@13#0] -- register_copy 
    // printf_number_buffer::@13
  __b13:
    // padding = (signed char)format.min_length - len
    // [255] (signed byte) printf_number_buffer::padding#1 ← (signed byte)(byte) printf_number_buffer::format_min_length#3 - (signed byte) printf_number_buffer::len#2 -- vbsz1=vbsz1_minus_vbsz2 
    lda.z padding
    sec
    sbc.z len
    sta.z padding
    // if(padding<0)
    // [256] if((signed byte) printf_number_buffer::padding#1>=(signed byte) 0) goto printf_number_buffer::@21 -- vbsz1_ge_0_then_la1 
    cmp #0
    bpl __b1
    // [258] phi from printf_number_buffer printf_number_buffer::@13 to printf_number_buffer::@1 [phi:printf_number_buffer/printf_number_buffer::@13->printf_number_buffer::@1]
  __b6:
    // [258] phi (signed byte) printf_number_buffer::padding#10 = (signed byte) 0 [phi:printf_number_buffer/printf_number_buffer::@13->printf_number_buffer::@1#0] -- vbsz1=vbsc1 
    lda #0
    sta.z padding
    // [257] phi from printf_number_buffer::@13 to printf_number_buffer::@21 [phi:printf_number_buffer::@13->printf_number_buffer::@21]
    // printf_number_buffer::@21
    // [258] phi from printf_number_buffer::@21 to printf_number_buffer::@1 [phi:printf_number_buffer::@21->printf_number_buffer::@1]
    // [258] phi (signed byte) printf_number_buffer::padding#10 = (signed byte) printf_number_buffer::padding#1 [phi:printf_number_buffer::@21->printf_number_buffer::@1#0] -- register_copy 
    // printf_number_buffer::@1
  __b1:
    // if(!format.justify_left && !format.zero_padding && padding)
    // [259] if((byte) 0!=(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@2 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z format_justify_left
    bne __b2
    // printf_number_buffer::@17
    // [260] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@2 -- vbuc1_neq_vbuz1_then_la1 
    cmp.z format_zero_padding
    bne __b2
    // printf_number_buffer::@16
    // [261] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@8 -- vbsc1_neq_vbsz1_then_la1 
    cmp.z padding
    bne __b8
    jmp __b2
    // printf_number_buffer::@8
  __b8:
    // printf_padding(' ',(char)padding)
    // [262] (byte) printf_padding::length#0 ← (byte)(signed byte) printf_number_buffer::padding#10 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [263] call printf_padding 
    // [341] phi from printf_number_buffer::@8 to printf_padding [phi:printf_number_buffer::@8->printf_padding]
    // [341] phi (byte) printf_padding::pad#7 = (byte) ' ' [phi:printf_number_buffer::@8->printf_padding#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z printf_padding.pad
    // [341] phi (byte) printf_padding::length#6 = (byte) printf_padding::length#0 [phi:printf_number_buffer::@8->printf_padding#1] -- register_copy 
    jsr printf_padding
    // printf_number_buffer::@2
  __b2:
    // if(buffer.sign)
    // [264] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@3 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z buffer_sign
    beq __b3
    // printf_number_buffer::@9
    // cputc(buffer.sign)
    // [265] (byte) cputc::c#2 ← (byte) printf_number_buffer::buffer_sign#10 -- vbuz1=vbuz2 
    lda.z buffer_sign
    sta.z cputc.c
    // [266] call cputc 
    // [213] phi from printf_number_buffer::@9 to cputc [phi:printf_number_buffer::@9->cputc]
    // [213] phi (byte) cputc::c#3 = (byte) cputc::c#2 [phi:printf_number_buffer::@9->cputc#0] -- register_copy 
    jsr cputc
    // printf_number_buffer::@3
  __b3:
    // if(format.zero_padding && padding)
    // [267] if((byte) 0==(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@4 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_zero_padding
    beq __b4
    // printf_number_buffer::@18
    // [268] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@10 -- vbsc1_neq_vbsz1_then_la1 
    cmp.z padding
    bne __b10
    jmp __b4
    // printf_number_buffer::@10
  __b10:
    // printf_padding('0',(char)padding)
    // [269] (byte) printf_padding::length#1 ← (byte)(signed byte) printf_number_buffer::padding#10 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [270] call printf_padding 
    // [341] phi from printf_number_buffer::@10 to printf_padding [phi:printf_number_buffer::@10->printf_padding]
    // [341] phi (byte) printf_padding::pad#7 = (byte) '0' [phi:printf_number_buffer::@10->printf_padding#0] -- vbuz1=vbuc1 
    lda #'0'
    sta.z printf_padding.pad
    // [341] phi (byte) printf_padding::length#6 = (byte) printf_padding::length#1 [phi:printf_number_buffer::@10->printf_padding#1] -- register_copy 
    jsr printf_padding
    // printf_number_buffer::@4
  __b4:
    // if(format.upper_case)
    // [271] if((byte) 0==(byte) printf_number_buffer::format_upper_case#10) goto printf_number_buffer::@5 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_upper_case
    beq __b5
    // [272] phi from printf_number_buffer::@4 to printf_number_buffer::@11 [phi:printf_number_buffer::@4->printf_number_buffer::@11]
    // printf_number_buffer::@11
    // strupr(buffer.digits)
    // [273] call strupr 
    // [348] phi from printf_number_buffer::@11 to strupr [phi:printf_number_buffer::@11->strupr]
    jsr strupr
    // [274] phi from printf_number_buffer::@11 printf_number_buffer::@4 to printf_number_buffer::@5 [phi:printf_number_buffer::@11/printf_number_buffer::@4->printf_number_buffer::@5]
    // printf_number_buffer::@5
  __b5:
    // cputs(buffer.digits)
    // [275] call cputs 
    // [132] phi from printf_number_buffer::@5 to cputs [phi:printf_number_buffer::@5->cputs]
    // [132] phi (to_nomodify byte*) cputs::s#14 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:printf_number_buffer::@5->cputs#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z cputs.s
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z cputs.s+1
    jsr cputs
    // printf_number_buffer::@15
    // if(format.justify_left && !format.zero_padding && padding)
    // [276] if((byte) 0==(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@return -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_justify_left
    beq __breturn
    // printf_number_buffer::@20
    // [277] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@return -- vbuc1_neq_vbuz1_then_la1 
    cmp.z format_zero_padding
    bne __breturn
    // printf_number_buffer::@19
    // [278] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@12 -- vbsc1_neq_vbsz1_then_la1 
    cmp.z padding
    bne __b12
    rts
    // printf_number_buffer::@12
  __b12:
    // printf_padding(' ',(char)padding)
    // [279] (byte) printf_padding::length#2 ← (byte)(signed byte) printf_number_buffer::padding#10 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [280] call printf_padding 
    // [341] phi from printf_number_buffer::@12 to printf_padding [phi:printf_number_buffer::@12->printf_padding]
    // [341] phi (byte) printf_padding::pad#7 = (byte) ' ' [phi:printf_number_buffer::@12->printf_padding#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z printf_padding.pad
    // [341] phi (byte) printf_padding::length#6 = (byte) printf_padding::length#2 [phi:printf_number_buffer::@12->printf_padding#1] -- register_copy 
    jsr printf_padding
    // printf_number_buffer::@return
  __breturn:
    // }
    // [281] return 
    rts
}
  // ultoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// ultoa(dword zp(7) value, byte* zp($b) buffer)
ultoa: {
    .label __10 = $21
    .label __11 = $20
    .label digit_value = $22
    .label buffer = $b
    .label digit = $1b
    .label value = 7
    .label started = $1d
    // [283] phi from ultoa to ultoa::@1 [phi:ultoa->ultoa::@1]
    // [283] phi (byte*) ultoa::buffer#11 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:ultoa->ultoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer+1
    // [283] phi (byte) ultoa::started#2 = (byte) 0 [phi:ultoa->ultoa::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z started
    // [283] phi (dword) ultoa::value#2 = (dword) ultoa::value#1 [phi:ultoa->ultoa::@1#2] -- register_copy 
    // [283] phi (byte) ultoa::digit#2 = (byte) 0 [phi:ultoa->ultoa::@1#3] -- vbuz1=vbuc1 
    sta.z digit
    // ultoa::@1
  __b1:
    // for( char digit=0; digit<max_digits-1; digit++ )
    // [284] if((byte) ultoa::digit#2<(byte) $a-(byte) 1) goto ultoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #$a-1
    bcc __b2
    // ultoa::@3
    // *buffer++ = DIGITS[(char)value]
    // [285] (byte~) ultoa::$11 ← (byte)(dword) ultoa::value#2 -- vbuz1=_byte_vduz2 
    lda.z value
    sta.z __11
    // [286] *((byte*) ultoa::buffer#11) ← *((const byte*) DIGITS + (byte~) ultoa::$11) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    tay
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    // *buffer++ = DIGITS[(char)value];
    // [287] (byte*) ultoa::buffer#3 ← ++ (byte*) ultoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // *buffer = 0
    // [288] *((byte*) ultoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (buffer),y
    // ultoa::@return
    // }
    // [289] return 
    rts
    // ultoa::@2
  __b2:
    // digit_value = digit_values[digit]
    // [290] (byte~) ultoa::$10 ← (byte) ultoa::digit#2 << (byte) 2 -- vbuz1=vbuz2_rol_2 
    lda.z digit
    asl
    asl
    sta.z __10
    // [291] (dword) ultoa::digit_value#0 ← *((const dword*) RADIX_DECIMAL_VALUES_LONG + (byte~) ultoa::$10) -- vduz1=pduc1_derefidx_vbuz2 
    tay
    lda RADIX_DECIMAL_VALUES_LONG,y
    sta.z digit_value
    lda RADIX_DECIMAL_VALUES_LONG+1,y
    sta.z digit_value+1
    lda RADIX_DECIMAL_VALUES_LONG+2,y
    sta.z digit_value+2
    lda RADIX_DECIMAL_VALUES_LONG+3,y
    sta.z digit_value+3
    // if (started || value >= digit_value)
    // [292] if((byte) 0!=(byte) ultoa::started#2) goto ultoa::@5 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z started
    bne __b5
    // ultoa::@7
    // [293] if((dword) ultoa::value#2>=(dword) ultoa::digit_value#0) goto ultoa::@5 -- vduz1_ge_vduz2_then_la1 
    lda.z value+3
    cmp.z digit_value+3
    bcc !+
    bne __b5
    lda.z value+2
    cmp.z digit_value+2
    bcc !+
    bne __b5
    lda.z value+1
    cmp.z digit_value+1
    bcc !+
    bne __b5
    lda.z value
    cmp.z digit_value
    bcs __b5
  !:
    // [294] phi from ultoa::@7 to ultoa::@4 [phi:ultoa::@7->ultoa::@4]
    // [294] phi (byte*) ultoa::buffer#14 = (byte*) ultoa::buffer#11 [phi:ultoa::@7->ultoa::@4#0] -- register_copy 
    // [294] phi (byte) ultoa::started#4 = (byte) ultoa::started#2 [phi:ultoa::@7->ultoa::@4#1] -- register_copy 
    // [294] phi (dword) ultoa::value#6 = (dword) ultoa::value#2 [phi:ultoa::@7->ultoa::@4#2] -- register_copy 
    // ultoa::@4
  __b4:
    // for( char digit=0; digit<max_digits-1; digit++ )
    // [295] (byte) ultoa::digit#1 ← ++ (byte) ultoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [283] phi from ultoa::@4 to ultoa::@1 [phi:ultoa::@4->ultoa::@1]
    // [283] phi (byte*) ultoa::buffer#11 = (byte*) ultoa::buffer#14 [phi:ultoa::@4->ultoa::@1#0] -- register_copy 
    // [283] phi (byte) ultoa::started#2 = (byte) ultoa::started#4 [phi:ultoa::@4->ultoa::@1#1] -- register_copy 
    // [283] phi (dword) ultoa::value#2 = (dword) ultoa::value#6 [phi:ultoa::@4->ultoa::@1#2] -- register_copy 
    // [283] phi (byte) ultoa::digit#2 = (byte) ultoa::digit#1 [phi:ultoa::@4->ultoa::@1#3] -- register_copy 
    jmp __b1
    // ultoa::@5
  __b5:
    // ultoa_append(buffer++, value, digit_value)
    // [296] (byte*) ultoa_append::buffer#0 ← (byte*) ultoa::buffer#11
    // [297] (dword) ultoa_append::value#0 ← (dword) ultoa::value#2
    // [298] (dword) ultoa_append::sub#0 ← (dword) ultoa::digit_value#0
    // [299] call ultoa_append 
    // [358] phi from ultoa::@5 to ultoa_append [phi:ultoa::@5->ultoa_append]
    jsr ultoa_append
    // ultoa_append(buffer++, value, digit_value)
    // [300] (dword) ultoa_append::return#0 ← (dword) ultoa_append::value#2
    // ultoa::@6
    // value = ultoa_append(buffer++, value, digit_value)
    // [301] (dword) ultoa::value#0 ← (dword) ultoa_append::return#0
    // value = ultoa_append(buffer++, value, digit_value);
    // [302] (byte*) ultoa::buffer#4 ← ++ (byte*) ultoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [294] phi from ultoa::@6 to ultoa::@4 [phi:ultoa::@6->ultoa::@4]
    // [294] phi (byte*) ultoa::buffer#14 = (byte*) ultoa::buffer#4 [phi:ultoa::@6->ultoa::@4#0] -- register_copy 
    // [294] phi (byte) ultoa::started#4 = (byte) 1 [phi:ultoa::@6->ultoa::@4#1] -- vbuz1=vbuc1 
    lda #1
    sta.z started
    // [294] phi (dword) ultoa::value#6 = (dword) ultoa::value#0 [phi:ultoa::@6->ultoa::@4#2] -- register_copy 
    jmp __b4
}
  // uctoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// uctoa(byte zp($21) value, byte* zp($e) buffer)
uctoa: {
    .label digit_value = $26
    .label buffer = $e
    .label digit = $20
    .label value = $21
    .label started = $d
    // [304] phi from uctoa to uctoa::@1 [phi:uctoa->uctoa::@1]
    // [304] phi (byte*) uctoa::buffer#11 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:uctoa->uctoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer+1
    // [304] phi (byte) uctoa::started#2 = (byte) 0 [phi:uctoa->uctoa::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z started
    // [304] phi (byte) uctoa::value#2 = (byte) uctoa::value#1 [phi:uctoa->uctoa::@1#2] -- register_copy 
    // [304] phi (byte) uctoa::digit#2 = (byte) 0 [phi:uctoa->uctoa::@1#3] -- vbuz1=vbuc1 
    sta.z digit
    // uctoa::@1
  __b1:
    // for( char digit=0; digit<max_digits-1; digit++ )
    // [305] if((byte) uctoa::digit#2<(byte) 2-(byte) 1) goto uctoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #2-1
    bcc __b2
    // uctoa::@3
    // *buffer++ = DIGITS[(char)value]
    // [306] *((byte*) uctoa::buffer#11) ← *((const byte*) DIGITS + (byte) uctoa::value#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z value
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    // *buffer++ = DIGITS[(char)value];
    // [307] (byte*) uctoa::buffer#3 ← ++ (byte*) uctoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // *buffer = 0
    // [308] *((byte*) uctoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (buffer),y
    // uctoa::@return
    // }
    // [309] return 
    rts
    // uctoa::@2
  __b2:
    // digit_value = digit_values[digit]
    // [310] (byte) uctoa::digit_value#0 ← *((const byte*) RADIX_HEXADECIMAL_VALUES_CHAR + (byte) uctoa::digit#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z digit
    lda RADIX_HEXADECIMAL_VALUES_CHAR,y
    sta.z digit_value
    // if (started || value >= digit_value)
    // [311] if((byte) 0!=(byte) uctoa::started#2) goto uctoa::@5 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z started
    bne __b5
    // uctoa::@7
    // [312] if((byte) uctoa::value#2>=(byte) uctoa::digit_value#0) goto uctoa::@5 -- vbuz1_ge_vbuz2_then_la1 
    lda.z value
    cmp.z digit_value
    bcs __b5
    // [313] phi from uctoa::@7 to uctoa::@4 [phi:uctoa::@7->uctoa::@4]
    // [313] phi (byte*) uctoa::buffer#14 = (byte*) uctoa::buffer#11 [phi:uctoa::@7->uctoa::@4#0] -- register_copy 
    // [313] phi (byte) uctoa::started#4 = (byte) uctoa::started#2 [phi:uctoa::@7->uctoa::@4#1] -- register_copy 
    // [313] phi (byte) uctoa::value#6 = (byte) uctoa::value#2 [phi:uctoa::@7->uctoa::@4#2] -- register_copy 
    // uctoa::@4
  __b4:
    // for( char digit=0; digit<max_digits-1; digit++ )
    // [314] (byte) uctoa::digit#1 ← ++ (byte) uctoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [304] phi from uctoa::@4 to uctoa::@1 [phi:uctoa::@4->uctoa::@1]
    // [304] phi (byte*) uctoa::buffer#11 = (byte*) uctoa::buffer#14 [phi:uctoa::@4->uctoa::@1#0] -- register_copy 
    // [304] phi (byte) uctoa::started#2 = (byte) uctoa::started#4 [phi:uctoa::@4->uctoa::@1#1] -- register_copy 
    // [304] phi (byte) uctoa::value#2 = (byte) uctoa::value#6 [phi:uctoa::@4->uctoa::@1#2] -- register_copy 
    // [304] phi (byte) uctoa::digit#2 = (byte) uctoa::digit#1 [phi:uctoa::@4->uctoa::@1#3] -- register_copy 
    jmp __b1
    // uctoa::@5
  __b5:
    // uctoa_append(buffer++, value, digit_value)
    // [315] (byte*) uctoa_append::buffer#0 ← (byte*) uctoa::buffer#11
    // [316] (byte) uctoa_append::value#0 ← (byte) uctoa::value#2
    // [317] (byte) uctoa_append::sub#0 ← (byte) uctoa::digit_value#0
    // [318] call uctoa_append 
    // [365] phi from uctoa::@5 to uctoa_append [phi:uctoa::@5->uctoa_append]
    jsr uctoa_append
    // uctoa_append(buffer++, value, digit_value)
    // [319] (byte) uctoa_append::return#0 ← (byte) uctoa_append::value#2
    // uctoa::@6
    // value = uctoa_append(buffer++, value, digit_value)
    // [320] (byte) uctoa::value#0 ← (byte) uctoa_append::return#0
    // value = uctoa_append(buffer++, value, digit_value);
    // [321] (byte*) uctoa::buffer#4 ← ++ (byte*) uctoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [313] phi from uctoa::@6 to uctoa::@4 [phi:uctoa::@6->uctoa::@4]
    // [313] phi (byte*) uctoa::buffer#14 = (byte*) uctoa::buffer#4 [phi:uctoa::@6->uctoa::@4#0] -- register_copy 
    // [313] phi (byte) uctoa::started#4 = (byte) 1 [phi:uctoa::@6->uctoa::@4#1] -- vbuz1=vbuc1 
    lda #1
    sta.z started
    // [313] phi (byte) uctoa::value#6 = (byte) uctoa::value#0 [phi:uctoa::@6->uctoa::@4#2] -- register_copy 
    jmp __b4
}
  // cputln
// Print a newline
cputln: {
    // conio_line_text +=  CONIO_WIDTH
    // [322] (byte*) conio_line_text ← (byte*) conio_line_text + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z conio_line_text
    sta.z conio_line_text
    bcc !+
    inc.z conio_line_text+1
  !:
    // conio_line_color += CONIO_WIDTH
    // [323] (byte*) conio_line_color ← (byte*) conio_line_color + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z conio_line_color
    sta.z conio_line_color
    bcc !+
    inc.z conio_line_color+1
  !:
    // conio_cursor_x = 0
    // [324] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // conio_cursor_y++;
    // [325] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // cscroll()
    // [326] call cscroll 
    jsr cscroll
    // cputln::@return
    // }
    // [327] return 
    rts
}
  // utoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// utoa_append(byte* zp($b) buffer, word zp($e) value, word zp($1e) sub)
utoa_append: {
    .label buffer = $b
    .label value = $e
    .label sub = $1e
    .label return = $e
    .label digit = $1c
    // [329] phi from utoa_append to utoa_append::@1 [phi:utoa_append->utoa_append::@1]
    // [329] phi (byte) utoa_append::digit#2 = (byte) 0 [phi:utoa_append->utoa_append::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    // [329] phi (word) utoa_append::value#2 = (word) utoa_append::value#0 [phi:utoa_append->utoa_append::@1#1] -- register_copy 
    // utoa_append::@1
  __b1:
    // while (value >= sub)
    // [330] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2 -- vwuz1_ge_vwuz2_then_la1 
    lda.z sub+1
    cmp.z value+1
    bne !+
    lda.z sub
    cmp.z value
    beq __b2
  !:
    bcc __b2
    // utoa_append::@3
    // *buffer = DIGITS[digit]
    // [331] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z digit
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    // utoa_append::@return
    // }
    // [332] return 
    rts
    // utoa_append::@2
  __b2:
    // digit++;
    // [333] (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // value -= sub
    // [334] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    lda.z value+1
    sbc.z sub+1
    sta.z value+1
    // [329] phi from utoa_append::@2 to utoa_append::@1 [phi:utoa_append::@2->utoa_append::@1]
    // [329] phi (byte) utoa_append::digit#2 = (byte) utoa_append::digit#1 [phi:utoa_append::@2->utoa_append::@1#0] -- register_copy 
    // [329] phi (word) utoa_append::value#2 = (word) utoa_append::value#1 [phi:utoa_append::@2->utoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // strlen
// Computes the length of the string str up to but not including the terminating null character.
// strlen(byte* zp($e) str)
strlen: {
    .label len = $1e
    .label str = $e
    .label return = $1e
    // [336] phi from strlen to strlen::@1 [phi:strlen->strlen::@1]
    // [336] phi (word) strlen::len#2 = (word) 0 [phi:strlen->strlen::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z len
    sta.z len+1
    // [336] phi (byte*) strlen::str#3 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:strlen->strlen::@1#1] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z str
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z str+1
    // strlen::@1
  __b1:
    // while(*str)
    // [337] if((byte) 0!=*((byte*) strlen::str#3)) goto strlen::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    // strlen::@return
    // }
    // [338] return 
    rts
    // strlen::@2
  __b2:
    // len++;
    // [339] (word) strlen::len#1 ← ++ (word) strlen::len#2 -- vwuz1=_inc_vwuz1 
    inc.z len
    bne !+
    inc.z len+1
  !:
    // str++;
    // [340] (byte*) strlen::str#0 ← ++ (byte*) strlen::str#3 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [336] phi from strlen::@2 to strlen::@1 [phi:strlen::@2->strlen::@1]
    // [336] phi (word) strlen::len#2 = (word) strlen::len#1 [phi:strlen::@2->strlen::@1#0] -- register_copy 
    // [336] phi (byte*) strlen::str#3 = (byte*) strlen::str#0 [phi:strlen::@2->strlen::@1#1] -- register_copy 
    jmp __b1
}
  // printf_padding
// Print a padding char a number of times
// printf_padding(byte zp($d) pad, byte zp($1c) length)
printf_padding: {
    .label i = $26
    .label length = $1c
    .label pad = $d
    // [342] phi from printf_padding to printf_padding::@1 [phi:printf_padding->printf_padding::@1]
    // [342] phi (byte) printf_padding::i#2 = (byte) 0 [phi:printf_padding->printf_padding::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // printf_padding::@1
  __b1:
    // for(char i=0;i<length; i++)
    // [343] if((byte) printf_padding::i#2<(byte) printf_padding::length#6) goto printf_padding::@2 -- vbuz1_lt_vbuz2_then_la1 
    lda.z i
    cmp.z length
    bcc __b2
    // printf_padding::@return
    // }
    // [344] return 
    rts
    // printf_padding::@2
  __b2:
    // cputc(pad)
    // [345] (byte) cputc::c#1 ← (byte) printf_padding::pad#7
    // [346] call cputc 
    // [213] phi from printf_padding::@2 to cputc [phi:printf_padding::@2->cputc]
    // [213] phi (byte) cputc::c#3 = (byte) cputc::c#1 [phi:printf_padding::@2->cputc#0] -- register_copy 
    jsr cputc
    // printf_padding::@3
    // for(char i=0;i<length; i++)
    // [347] (byte) printf_padding::i#1 ← ++ (byte) printf_padding::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [342] phi from printf_padding::@3 to printf_padding::@1 [phi:printf_padding::@3->printf_padding::@1]
    // [342] phi (byte) printf_padding::i#2 = (byte) printf_padding::i#1 [phi:printf_padding::@3->printf_padding::@1#0] -- register_copy 
    jmp __b1
}
  // strupr
// Converts a string to uppercase.
strupr: {
    .label str = printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    .label __0 = $1c
    .label src = $1e
    // [349] phi from strupr to strupr::@1 [phi:strupr->strupr::@1]
    // [349] phi (byte*) strupr::src#2 = (const byte*) strupr::str#0 [phi:strupr->strupr::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z src
    lda #>str
    sta.z src+1
    // strupr::@1
  __b1:
    // while(*src)
    // [350] if((byte) 0!=*((byte*) strupr::src#2)) goto strupr::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (src),y
    cmp #0
    bne __b2
    // strupr::@return
    // }
    // [351] return 
    rts
    // strupr::@2
  __b2:
    // toupper(*src)
    // [352] (byte) toupper::ch#0 ← *((byte*) strupr::src#2) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    sta.z toupper.ch
    // [353] call toupper 
    jsr toupper
    // [354] (byte) toupper::return#3 ← (byte) toupper::return#2
    // strupr::@3
    // [355] (byte~) strupr::$0 ← (byte) toupper::return#3
    // *src = toupper(*src)
    // [356] *((byte*) strupr::src#2) ← (byte~) strupr::$0 -- _deref_pbuz1=vbuz2 
    lda.z __0
    ldy #0
    sta (src),y
    // src++;
    // [357] (byte*) strupr::src#1 ← ++ (byte*) strupr::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    // [349] phi from strupr::@3 to strupr::@1 [phi:strupr::@3->strupr::@1]
    // [349] phi (byte*) strupr::src#2 = (byte*) strupr::src#1 [phi:strupr::@3->strupr::@1#0] -- register_copy 
    jmp __b1
}
  // ultoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// ultoa_append(byte* zp($b) buffer, dword zp(7) value, dword zp($22) sub)
ultoa_append: {
    .label buffer = $b
    .label value = 7
    .label sub = $22
    .label return = 7
    .label digit = $26
    // [359] phi from ultoa_append to ultoa_append::@1 [phi:ultoa_append->ultoa_append::@1]
    // [359] phi (byte) ultoa_append::digit#2 = (byte) 0 [phi:ultoa_append->ultoa_append::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    // [359] phi (dword) ultoa_append::value#2 = (dword) ultoa_append::value#0 [phi:ultoa_append->ultoa_append::@1#1] -- register_copy 
    // ultoa_append::@1
  __b1:
    // while (value >= sub)
    // [360] if((dword) ultoa_append::value#2>=(dword) ultoa_append::sub#0) goto ultoa_append::@2 -- vduz1_ge_vduz2_then_la1 
    lda.z value+3
    cmp.z sub+3
    bcc !+
    bne __b2
    lda.z value+2
    cmp.z sub+2
    bcc !+
    bne __b2
    lda.z value+1
    cmp.z sub+1
    bcc !+
    bne __b2
    lda.z value
    cmp.z sub
    bcs __b2
  !:
    // ultoa_append::@3
    // *buffer = DIGITS[digit]
    // [361] *((byte*) ultoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) ultoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z digit
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    // ultoa_append::@return
    // }
    // [362] return 
    rts
    // ultoa_append::@2
  __b2:
    // digit++;
    // [363] (byte) ultoa_append::digit#1 ← ++ (byte) ultoa_append::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // value -= sub
    // [364] (dword) ultoa_append::value#1 ← (dword) ultoa_append::value#2 - (dword) ultoa_append::sub#0 -- vduz1=vduz1_minus_vduz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    lda.z value+1
    sbc.z sub+1
    sta.z value+1
    lda.z value+2
    sbc.z sub+2
    sta.z value+2
    lda.z value+3
    sbc.z sub+3
    sta.z value+3
    // [359] phi from ultoa_append::@2 to ultoa_append::@1 [phi:ultoa_append::@2->ultoa_append::@1]
    // [359] phi (byte) ultoa_append::digit#2 = (byte) ultoa_append::digit#1 [phi:ultoa_append::@2->ultoa_append::@1#0] -- register_copy 
    // [359] phi (dword) ultoa_append::value#2 = (dword) ultoa_append::value#1 [phi:ultoa_append::@2->ultoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // uctoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// uctoa_append(byte* zp($e) buffer, byte zp($21) value, byte zp($26) sub)
uctoa_append: {
    .label buffer = $e
    .label value = $21
    .label sub = $26
    .label return = $21
    .label digit = $1c
    // [366] phi from uctoa_append to uctoa_append::@1 [phi:uctoa_append->uctoa_append::@1]
    // [366] phi (byte) uctoa_append::digit#2 = (byte) 0 [phi:uctoa_append->uctoa_append::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    // [366] phi (byte) uctoa_append::value#2 = (byte) uctoa_append::value#0 [phi:uctoa_append->uctoa_append::@1#1] -- register_copy 
    // uctoa_append::@1
  __b1:
    // while (value >= sub)
    // [367] if((byte) uctoa_append::value#2>=(byte) uctoa_append::sub#0) goto uctoa_append::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z value
    cmp.z sub
    bcs __b2
    // uctoa_append::@3
    // *buffer = DIGITS[digit]
    // [368] *((byte*) uctoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) uctoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z digit
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    // uctoa_append::@return
    // }
    // [369] return 
    rts
    // uctoa_append::@2
  __b2:
    // digit++;
    // [370] (byte) uctoa_append::digit#1 ← ++ (byte) uctoa_append::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // value -= sub
    // [371] (byte) uctoa_append::value#1 ← (byte) uctoa_append::value#2 - (byte) uctoa_append::sub#0 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    // [366] phi from uctoa_append::@2 to uctoa_append::@1 [phi:uctoa_append::@2->uctoa_append::@1]
    // [366] phi (byte) uctoa_append::digit#2 = (byte) uctoa_append::digit#1 [phi:uctoa_append::@2->uctoa_append::@1#0] -- register_copy 
    // [366] phi (byte) uctoa_append::value#2 = (byte) uctoa_append::value#1 [phi:uctoa_append::@2->uctoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // cscroll
// Scroll the entire screen if the cursor is beyond the last line
cscroll: {
    // if(conio_cursor_y==CONIO_HEIGHT)
    // [372] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z conio_cursor_y
    bne __breturn
    // [373] phi from cscroll to cscroll::@1 [phi:cscroll->cscroll::@1]
    // cscroll::@1
    // memcpy(CONIO_SCREEN_TEXT, CONIO_SCREEN_TEXT+CONIO_WIDTH, CONIO_BYTES-CONIO_WIDTH)
    // [374] call memcpy 
    // [390] phi from cscroll::@1 to memcpy [phi:cscroll::@1->memcpy]
    // [390] phi (void*) memcpy::destination#2 = (void*)(const nomodify byte*) DEFAULT_SCREEN [phi:cscroll::@1->memcpy#0] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN
    sta.z memcpy.destination
    lda #>DEFAULT_SCREEN
    sta.z memcpy.destination+1
    // [390] phi (void*) memcpy::source#2 = (void*)(const nomodify byte*) DEFAULT_SCREEN+(byte) $28 [phi:cscroll::@1->memcpy#1] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN+$28
    sta.z memcpy.source
    lda #>DEFAULT_SCREEN+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [375] phi from cscroll::@1 to cscroll::@2 [phi:cscroll::@1->cscroll::@2]
    // cscroll::@2
    // memcpy(CONIO_SCREEN_COLORS, CONIO_SCREEN_COLORS+CONIO_WIDTH, CONIO_BYTES-CONIO_WIDTH)
    // [376] call memcpy 
    // [390] phi from cscroll::@2 to memcpy [phi:cscroll::@2->memcpy]
    // [390] phi (void*) memcpy::destination#2 = (void*)(const nomodify byte*) COLORRAM [phi:cscroll::@2->memcpy#0] -- pvoz1=pvoc1 
    lda #<COLORRAM
    sta.z memcpy.destination
    lda #>COLORRAM
    sta.z memcpy.destination+1
    // [390] phi (void*) memcpy::source#2 = (void*)(const nomodify byte*) COLORRAM+(byte) $28 [phi:cscroll::@2->memcpy#1] -- pvoz1=pvoc1 
    lda #<COLORRAM+$28
    sta.z memcpy.source
    lda #>COLORRAM+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [377] phi from cscroll::@2 to cscroll::@3 [phi:cscroll::@2->cscroll::@3]
    // cscroll::@3
    // memset(CONIO_SCREEN_TEXT+CONIO_BYTES-CONIO_WIDTH, ' ', CONIO_WIDTH)
    // [378] call memset 
    // [400] phi from cscroll::@3 to memset [phi:cscroll::@3->memset]
    // [400] phi (byte) memset::c#4 = (byte) ' ' [phi:cscroll::@3->memset#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z memset.c
    // [400] phi (void*) memset::str#3 = (void*)(const nomodify byte*) DEFAULT_SCREEN+(word)(number) $19*(number) $28-(byte) $28 [phi:cscroll::@3->memset#1] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN+$19*$28-$28
    sta.z memset.str
    lda #>DEFAULT_SCREEN+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    // [379] phi from cscroll::@3 to cscroll::@4 [phi:cscroll::@3->cscroll::@4]
    // cscroll::@4
    // memset(CONIO_SCREEN_COLORS+CONIO_BYTES-CONIO_WIDTH, conio_textcolor, CONIO_WIDTH)
    // [380] call memset 
    // [400] phi from cscroll::@4 to memset [phi:cscroll::@4->memset]
    // [400] phi (byte) memset::c#4 = (const nomodify byte) LIGHT_BLUE [phi:cscroll::@4->memset#0] -- vbuz1=vbuc1 
    lda #LIGHT_BLUE
    sta.z memset.c
    // [400] phi (void*) memset::str#3 = (void*)(const nomodify byte*) COLORRAM+(word)(number) $19*(number) $28-(byte) $28 [phi:cscroll::@4->memset#1] -- pvoz1=pvoc1 
    lda #<COLORRAM+$19*$28-$28
    sta.z memset.str
    lda #>COLORRAM+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    // cscroll::@5
    // conio_line_text -= CONIO_WIDTH
    // [381] (byte*) conio_line_text ← (byte*) conio_line_text - (byte) $28 -- pbuz1=pbuz1_minus_vbuc1 
    sec
    lda.z conio_line_text
    sbc #$28
    sta.z conio_line_text
    lda.z conio_line_text+1
    sbc #0
    sta.z conio_line_text+1
    // conio_line_color -= CONIO_WIDTH
    // [382] (byte*) conio_line_color ← (byte*) conio_line_color - (byte) $28 -- pbuz1=pbuz1_minus_vbuc1 
    sec
    lda.z conio_line_color
    sbc #$28
    sta.z conio_line_color
    lda.z conio_line_color+1
    sbc #0
    sta.z conio_line_color+1
    // conio_cursor_y--;
    // [383] (byte) conio_cursor_y ← -- (byte) conio_cursor_y -- vbuz1=_dec_vbuz1 
    dec.z conio_cursor_y
    // cscroll::@return
  __breturn:
    // }
    // [384] return 
    rts
}
  // toupper
// Convert lowercase alphabet to uppercase
// Returns uppercase equivalent to c, if such value exists, else c remains unchanged
// toupper(byte zp($1c) ch)
toupper: {
    .label return = $1c
    .label ch = $1c
    // if(ch>='a' && ch<='z')
    // [385] if((byte) toupper::ch#0<(byte) 'a') goto toupper::@return -- vbuz1_lt_vbuc1_then_la1 
    lda.z ch
    cmp #'a'
    bcc __breturn
    // toupper::@2
    // [386] if((byte) toupper::ch#0<=(byte) 'z') goto toupper::@1 -- vbuz1_le_vbuc1_then_la1 
    lda #'z'
    cmp.z ch
    bcs __b1
    // [388] phi from toupper toupper::@1 toupper::@2 to toupper::@return [phi:toupper/toupper::@1/toupper::@2->toupper::@return]
    // [388] phi (byte) toupper::return#2 = (byte) toupper::ch#0 [phi:toupper/toupper::@1/toupper::@2->toupper::@return#0] -- register_copy 
    rts
    // toupper::@1
  __b1:
    // return ch + ('A'-'a');
    // [387] (byte) toupper::return#0 ← (byte) toupper::ch#0 + (byte) 'A'-(byte) 'a' -- vbuz1=vbuz1_plus_vbuc1 
    lax.z return
    axs #-['A'-'a']
    stx.z return
    // toupper::@return
  __breturn:
    // }
    // [389] return 
    rts
}
  // memcpy
// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
// memcpy(void* zp($e) destination, void* zp($1e) source)
memcpy: {
    .label src_end = $27
    .label dst = $e
    .label src = $1e
    .label source = $1e
    .label destination = $e
    // src_end = (char*)source+num
    // [391] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z source
    clc
    adc #<$19*$28-$28
    sta.z src_end
    lda.z source+1
    adc #>$19*$28-$28
    sta.z src_end+1
    // [392] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2
    // [393] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2
    // [394] phi from memcpy memcpy::@2 to memcpy::@1 [phi:memcpy/memcpy::@2->memcpy::@1]
    // [394] phi (byte*) memcpy::dst#2 = (byte*) memcpy::dst#4 [phi:memcpy/memcpy::@2->memcpy::@1#0] -- register_copy 
    // [394] phi (byte*) memcpy::src#2 = (byte*) memcpy::src#4 [phi:memcpy/memcpy::@2->memcpy::@1#1] -- register_copy 
    // memcpy::@1
  __b1:
    // while(src!=src_end)
    // [395] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2 -- pbuz1_neq_pbuz2_then_la1 
    lda.z src+1
    cmp.z src_end+1
    bne __b2
    lda.z src
    cmp.z src_end
    bne __b2
    // memcpy::@return
    // }
    // [396] return 
    rts
    // memcpy::@2
  __b2:
    // *dst++ = *src++
    // [397] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    sta (dst),y
    // *dst++ = *src++;
    // [398] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [399] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    jmp __b1
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp($e) str, byte zp($16) c)
memset: {
    .label end = $27
    .label dst = $e
    .label str = $e
    .label c = $16
    // memset::@1
    // end = (char*)str + num
    // [401] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (byte) $28 -- pbuz1=pbuz2_plus_vbuc1 
    lda #$28
    clc
    adc.z str
    sta.z end
    lda #0
    adc.z str+1
    sta.z end+1
    // [402] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
    // [403] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
    // [403] phi (byte*) memset::dst#2 = (byte*) memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    // memset::@2
  __b2:
    // for(char* dst = str; dst!=end; dst++)
    // [404] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    // memset::@return
    // }
    // [405] return 
    rts
    // memset::@3
  __b3:
    // *dst = c
    // [406] *((byte*) memset::dst#2) ← (byte) memset::c#4 -- _deref_pbuz1=vbuz2 
    lda.z c
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [407] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2
}
  // File Data
  // The digits used for numbers
  DIGITS: .text "0123456789abcdef"
  // Values of hexadecimal digits
  RADIX_HEXADECIMAL_VALUES_CHAR: .byte $10
  // Values of decimal digits
  RADIX_DECIMAL_VALUES: .word $2710, $3e8, $64, $a
  // Values of decimal digits
  RADIX_DECIMAL_VALUES_LONG: .dword $3b9aca00, $5f5e100, $989680, $f4240, $186a0, $2710, $3e8, $64, $a
  // The buffer used by tod_str()
  tod_buffer: .text "00:00:00:00"
  .byte 0
  // The board. board[i] holds the column position of the queen on row i. 
  board: .fill $14, 0
  // Buffer used for stringified number being printed
  printf_buffer: .fill SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER, 0
  // Time of Day 00:00:00:00
  TOD_ZERO: .byte 0, 0, 0, 0

