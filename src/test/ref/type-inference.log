
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::b#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  main::b#2 = phi( main/main::b#0, main::@1/main::b#1 )
  main::$0 = -$30 + main::b#2
  main::$2 = main::b#2 * SIZEOF_WORD
  main::screen[main::$2] = main::$0
  main::b#1 = main::b#2 + rangenext(0,$14)
  main::$1 = main::b#1 != rangelast(0,$14)
  if(main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
const byte SIZEOF_WORD = 2
void __start()
void main()
number~ main::$0
bool~ main::$1
byte~ main::$2
byte main::b
byte main::b#0
byte main::b#1
byte main::b#2
const nomodify word* main::screen = (word*)$400

Adding number conversion cast (unumber) -$30 in main::$0 = -$30 + main::b#2
Adding number conversion cast (unumber) main::$0 in main::$0 = (unumber)-$30 + main::b#2
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (word*) 1024
Simplifying constant integer cast -$30
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) -$30
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in main::$0 = -$30 + main::b#2
Simple Condition main::$1 [7] if(main::b#1!=rangelast(0,$14)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::b#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [5] main::b#1 = ++ main::b#2 to ++
Resolved ranged comparison value [7] if(main::b#1!=rangelast(0,$14)) goto main::@1 to $15
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) $15 in [5] if(main::b#1!=$15) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $15
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $15
Successful SSA optimization PassNFinalizeNumberTypeConversions
Rewriting multiplication to use shift [2] main::$2 = main::b#2 * SIZEOF_WORD
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings main::b#0
Constant inlined main::b#0 = 0
Successful SSA optimization Pass2ConstantInlining
Eliminating unused constant SIZEOF_WORD
Successful SSA optimization PassNEliminateUnusedVars
Added new block during phi lifting main::@2(between main::@1 and main::@1)
Adding NOP phi() at start of main
CALL GRAPH

Created 1 initial phi equivalence classes
Coalesced [8] main::b#3 = main::b#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block label main::@2
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [1] main::b#2 = phi( main/0, main::@1/main::b#1 )
  [2] main::$0 = -$30 + main::b#2
  [3] main::$2 = main::b#2 << 1
  [4] main::screen[main::$2] = main::$0
  [5] main::b#1 = ++ main::b#2
  [6] if(main::b#1!=$15) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [7] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
byte~ main::$0 11.0
byte~ main::$2 22.0
byte main::b
byte main::b#1 16.5
byte main::b#2 11.0

Initial phi equivalence classes
[ main::b#2 main::b#1 ]
Added variable main::$0 to live range equivalence class [ main::$0 ]
Added variable main::$2 to live range equivalence class [ main::$2 ]
Complete equivalence classes
[ main::b#2 main::b#1 ]
[ main::$0 ]
[ main::$2 ]
Allocated zp[1]:2 [ main::b#2 main::b#1 ]
Allocated zp[1]:3 [ main::$0 ]
Allocated zp[1]:4 [ main::$2 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [3] main::$2 = main::b#2 << 1 [ main::b#2 main::$0 main::$2 ] (  [ main::b#2 main::$0 main::$2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::b#2 main::b#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::$0 ]
Statement [4] main::screen[main::$2] = main::$0 [ main::b#2 ] (  [ main::b#2 ] { }  ) always clobbers reg byte a 
Statement [2] main::$0 = -$30 + main::b#2 [ main::b#2 main::$0 ] (  [ main::b#2 main::$0 ] { }  ) always clobbers reg byte a 
Statement [3] main::$2 = main::b#2 << 1 [ main::b#2 main::$0 main::$2 ] (  [ main::b#2 main::$0 main::$2 ] { }  ) always clobbers reg byte a 
Statement [4] main::screen[main::$2] = main::$0 [ main::b#2 ] (  [ main::b#2 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::b#2 main::b#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::$0 ] : zp[1]:3 , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ main::$2 ] : zp[1]:4 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 27.5: zp[1]:2 [ main::b#2 main::b#1 ] 22: zp[1]:4 [ main::$2 ] 11: zp[1]:3 [ main::$0 ] 
Uplift Scope [] 

Uplifting [main] best 481 combination reg byte y [ main::b#2 main::b#1 ] reg byte x [ main::$2 ] zp[1]:3 [ main::$0 ] 
Uplifting [] best 481 combination 
Attempting to uplift remaining variables inzp[1]:3 [ main::$0 ]
Uplifting [main] best 481 combination zp[1]:3 [ main::$0 ] 
Allocated (was zp[1]:3) zp[1]:2 [ main::$0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test inference of integer types in expressions
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label screen = $400
    .label __0 = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::b#2 = 0 [phi:main->main::@1#0] -- vbuyy=vbuc1 
    ldy #0
    jmp __b1
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [1] phi main::b#2 = main::b#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] main::$0 = -$30 + main::b#2 -- vbuz1=vbuc1_plus_vbuyy 
    tya
    clc
    adc #-$30
    sta.z __0
    // [3] main::$2 = main::b#2 << 1 -- vbuxx=vbuyy_rol_1 
    tya
    asl
    tax
    // [4] main::screen[main::$2] = main::$0 -- pwuc1_derefidx_vbuxx=vbuz1 
    lda.z __0
    sta screen,x
    lda #0
    sta screen+1,x
    // [5] main::b#1 = ++ main::b#2 -- vbuyy=_inc_vbuyy 
    iny
    // [6] if(main::b#1!=$15) goto main::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$15
    bne __b1_from___b1
    jmp __breturn
    // main::@return
  __breturn:
    // [7] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b1 with __b1
Removing instruction __b1_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
void main()
byte~ main::$0 zp[1]:2 11.0
byte~ main::$2 reg byte x 22.0
byte main::b
byte main::b#1 reg byte y 16.5
byte main::b#2 reg byte y 11.0
const nomodify word* main::screen = (word*) 1024

reg byte y [ main::b#2 main::b#1 ]
zp[1]:2 [ main::$0 ]
reg byte x [ main::$2 ]


FINAL ASSEMBLER
Score: 391

  // File Comments
// Test inference of integer types in expressions
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label screen = $400
    .label __0 = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::b#2 = 0 [phi:main->main::@1#0] -- vbuyy=vbuc1 
    ldy #0
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [1] phi main::b#2 = main::b#1 [phi:main::@1->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // -0x30+b
    // [2] main::$0 = -$30 + main::b#2 -- vbuz1=vbuc1_plus_vbuyy 
    tya
    clc
    adc #-$30
    sta.z __0
    // screen[b] = -0x30+b
    // [3] main::$2 = main::b#2 << 1 -- vbuxx=vbuyy_rol_1 
    tya
    asl
    tax
    // [4] main::screen[main::$2] = main::$0 -- pwuc1_derefidx_vbuxx=vbuz1 
    lda.z __0
    sta screen,x
    lda #0
    sta screen+1,x
    // for( byte b: 0..20)
    // [5] main::b#1 = ++ main::b#2 -- vbuyy=_inc_vbuyy 
    iny
    // [6] if(main::b#1!=$15) goto main::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$15
    bne __b1
    // main::@return
    // }
    // [7] return 
    rts
}
  // File Data

