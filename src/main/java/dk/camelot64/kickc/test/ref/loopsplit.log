main();

void main() {
  byte i=100;
  byte s=0;
  while(--i>0) {
      if(i>50) {
         s++;
      } else {
         s--;
      }
  }
}

Adding pre/post-modifier (byte) main::i ← -- (byte) main::i
Adding pre/post-modifier (byte) main::s ← ++ (byte) main::s
Adding pre/post-modifier (byte) main::s ← -- (byte) main::s
PROGRAM
  (void~) $0 ← call main 
proc (void()) main()
  (byte) main::i ← (byte) 100
  (byte) main::s ← (byte) 0
main::@1:
  (byte) main::i ← -- (byte) main::i
  (boolean~) main::$0 ← (byte) main::i > (byte) 0
  if((boolean~) main::$0) goto main::@2
  goto main::@3
main::@2:
  (boolean~) main::$1 ← (byte) main::i > (byte) 50
  (boolean~) main::$2 ← ! (boolean~) main::$1
  if((boolean~) main::$2) goto main::@4
  (byte) main::s ← ++ (byte) main::s
  goto main::@5
main::@4:
  (byte) main::s ← -- (byte) main::s
main::@5:
  goto main::@1
main::@3:
main::@return:
  return 
endproc // main()

SYMBOLS
(void~) $0
(void()) main()
(boolean~) main::$0
(boolean~) main::$1
(boolean~) main::$2
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@return
(byte) main::i
(byte) main::s

INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  (void~) $0 ← call main 
  to:@1
main: scope:[main]  from
  (byte) main::i ← (byte) 100
  (byte) main::s ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@5
  (byte) main::i ← -- (byte) main::i
  (boolean~) main::$0 ← (byte) main::i > (byte) 0
  if((boolean~) main::$0) goto main::@2
  to:main::@6
main::@2: scope:[main]  from main::@1 main::@7
  (boolean~) main::$1 ← (byte) main::i > (byte) 50
  (boolean~) main::$2 ← ! (boolean~) main::$1
  if((boolean~) main::$2) goto main::@4
  to:main::@8
main::@6: scope:[main]  from main::@1
  to:main::@3
main::@3: scope:[main]  from main::@10 main::@6
  to:main::@return
main::@7: scope:[main]  from
  to:main::@2
main::@4: scope:[main]  from main::@2 main::@9
  (byte) main::s ← -- (byte) main::s
  to:main::@5
main::@8: scope:[main]  from main::@2
  (byte) main::s ← ++ (byte) main::s
  to:main::@5
main::@5: scope:[main]  from main::@4 main::@8
  to:main::@1
main::@9: scope:[main]  from
  to:main::@4
main::@10: scope:[main]  from
  to:main::@3
main::@return: scope:[main]  from main::@3
  return 
  to:@return
@1: scope:[]  from @begin
  to:@end
@end: scope:[]  from @1

Removing empty block main::@6
Removing empty block main::@3
Removing empty block main::@7
Removing empty block main::@5
Removing empty block main::@9
Removing empty block main::@10
Removing empty block @1
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (void~) $0 ← call main 
  to:@end
main: scope:[main]  from
  (byte) main::i ← (byte) 100
  (byte) main::s ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@4 main::@8
  (byte) main::i ← -- (byte) main::i
  (boolean~) main::$0 ← (byte) main::i > (byte) 0
  if((boolean~) main::$0) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (boolean~) main::$1 ← (byte) main::i > (byte) 50
  (boolean~) main::$2 ← ! (boolean~) main::$1
  if((boolean~) main::$2) goto main::@4
  to:main::@8
main::@4: scope:[main]  from main::@2
  (byte) main::s ← -- (byte) main::s
  to:main::@1
main::@8: scope:[main]  from main::@2
  (byte) main::s ← ++ (byte) main::s
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@end: scope:[]  from @begin

PROCEDURE MODIFY VARIABLE ANALYSIS

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL
@begin: scope:[]  from
  call main param-assignment
  to:@2
@2: scope:[]  from @begin
  to:@end
main: scope:[main]  from @begin
  (byte) main::i ← (byte) 100
  (byte) main::s ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@4 main::@8
  (byte) main::i ← -- (byte) main::i
  (boolean~) main::$0 ← (byte) main::i > (byte) 0
  if((boolean~) main::$0) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (boolean~) main::$1 ← (byte) main::i > (byte) 50
  (boolean~) main::$2 ← ! (boolean~) main::$1
  if((boolean~) main::$2) goto main::@4
  to:main::@8
main::@4: scope:[main]  from main::@2
  (byte) main::s ← -- (byte) main::s
  to:main::@1
main::@8: scope:[main]  from main::@2
  (byte) main::s ← ++ (byte) main::s
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@end: scope:[]  from @2

Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  call main param-assignment
  to:@2
@2: scope:[]  from @begin
  to:@end
main: scope:[main]  from @begin
  (byte) main::i#0 ← (byte) 100
  (byte) main::s#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@4 main::@8
  (byte) main::s#6 ← phi( main/(byte) main::s#0 main::@4/(byte) main::s#1 main::@8/(byte) main::s#2 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@4/(byte) main::i#4 main::@8/(byte) main::i#5 )
  (byte) main::i#1 ← -- (byte) main::i#2
  (boolean~) main::$0 ← (byte) main::i#1 > (byte) 0
  if((boolean~) main::$0) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) main::s#5 ← phi( main::@1/(byte) main::s#6 )
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#1 )
  (boolean~) main::$1 ← (byte) main::i#3 > (byte) 50
  (boolean~) main::$2 ← ! (boolean~) main::$1
  if((boolean~) main::$2) goto main::@4
  to:main::@8
main::@4: scope:[main]  from main::@2
  (byte) main::i#4 ← phi( main::@2/(byte) main::i#3 )
  (byte) main::s#3 ← phi( main::@2/(byte) main::s#5 )
  (byte) main::s#1 ← -- (byte) main::s#3
  to:main::@1
main::@8: scope:[main]  from main::@2
  (byte) main::i#5 ← phi( main::@2/(byte) main::i#3 )
  (byte) main::s#4 ← phi( main::@2/(byte) main::s#5 )
  (byte) main::s#2 ← ++ (byte) main::s#4
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@end: scope:[]  from @2

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  call main param-assignment
  to:@2
@2: scope:[]  from @begin
  to:@end
main: scope:[main]  from @begin
  (byte) main::i#0 ← (byte) 100
  (byte) main::s#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@4 main::@8
  (byte) main::s#6 ← phi( main/(byte) main::s#0 main::@4/(byte) main::s#1 main::@8/(byte) main::s#2 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@4/(byte) main::i#4 main::@8/(byte) main::i#5 )
  (byte) main::i#1 ← -- (byte) main::i#2
  (boolean~) main::$0 ← (byte) main::i#1 > (byte) 0
  if((boolean~) main::$0) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) main::s#5 ← phi( main::@1/(byte) main::s#6 )
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#1 )
  (boolean~) main::$1 ← (byte) main::i#3 > (byte) 50
  (boolean~) main::$2 ← ! (boolean~) main::$1
  if((boolean~) main::$2) goto main::@4
  to:main::@8
main::@4: scope:[main]  from main::@2
  (byte) main::i#4 ← phi( main::@2/(byte) main::i#3 )
  (byte) main::s#3 ← phi( main::@2/(byte) main::s#5 )
  (byte) main::s#1 ← -- (byte) main::s#3
  to:main::@1
main::@8: scope:[main]  from main::@2
  (byte) main::i#5 ← phi( main::@2/(byte) main::i#3 )
  (byte) main::s#4 ← phi( main::@2/(byte) main::s#5 )
  (byte) main::s#2 ← ++ (byte) main::s#4
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@end: scope:[]  from @2

INITIAL SSA SYMBOL TABLE
(label) @2
(label) @begin
(label) @end
(void()) main()
(boolean~) main::$0
(boolean~) main::$1
(boolean~) main::$2
(label) main::@1
(label) main::@2
(label) main::@4
(label) main::@8
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3
(byte) main::i#4
(byte) main::i#5
(byte) main::s
(byte) main::s#0
(byte) main::s#1
(byte) main::s#2
(byte) main::s#3
(byte) main::s#4
(byte) main::s#5
(byte) main::s#6

Culled Empty Block (label) @2
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  (byte) main::i#0 ← (byte) 100
  (byte) main::s#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@4 main::@8
  (byte) main::s#6 ← phi( main/(byte) main::s#0 main::@4/(byte) main::s#1 main::@8/(byte) main::s#2 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@4/(byte) main::i#4 main::@8/(byte) main::i#5 )
  (byte) main::i#1 ← -- (byte) main::i#2
  (boolean~) main::$0 ← (byte) main::i#1 > (byte) 0
  if((boolean~) main::$0) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) main::s#5 ← phi( main::@1/(byte) main::s#6 )
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#1 )
  (boolean~) main::$1 ← (byte) main::i#3 > (byte) 50
  (boolean~) main::$2 ← ! (boolean~) main::$1
  if((boolean~) main::$2) goto main::@4
  to:main::@8
main::@4: scope:[main]  from main::@2
  (byte) main::i#4 ← phi( main::@2/(byte) main::i#3 )
  (byte) main::s#3 ← phi( main::@2/(byte) main::s#5 )
  (byte) main::s#1 ← -- (byte) main::s#3
  to:main::@1
main::@8: scope:[main]  from main::@2
  (byte) main::i#5 ← phi( main::@2/(byte) main::i#3 )
  (byte) main::s#4 ← phi( main::@2/(byte) main::s#5 )
  (byte) main::s#2 ← ++ (byte) main::s#4
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@end: scope:[]  from @begin

Constant (byte) main::i#0 (byte) 100
Constant (byte) main::s#0 (byte) 0
Succesful SSA optimization Pass2ConstantPropagation
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  to:main::@1
main::@1: scope:[main]  from main main::@4 main::@8
  (byte) main::s#6 ← phi( main/(byte) 0 main::@4/(byte) main::s#1 main::@8/(byte) main::s#2 )
  (byte) main::i#2 ← phi( main/(byte) 100 main::@4/(byte) main::i#4 main::@8/(byte) main::i#5 )
  (byte) main::i#1 ← -- (byte) main::i#2
  (boolean~) main::$0 ← (byte) main::i#1 > (byte) 0
  if((boolean~) main::$0) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) main::s#5 ← phi( main::@1/(byte) main::s#6 )
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#1 )
  (boolean~) main::$1 ← (byte) main::i#3 > (byte) 50
  (boolean~) main::$2 ← ! (boolean~) main::$1
  if((boolean~) main::$2) goto main::@4
  to:main::@8
main::@4: scope:[main]  from main::@2
  (byte) main::i#4 ← phi( main::@2/(byte) main::i#3 )
  (byte) main::s#3 ← phi( main::@2/(byte) main::s#5 )
  (byte) main::s#1 ← -- (byte) main::s#3
  to:main::@1
main::@8: scope:[main]  from main::@2
  (byte) main::i#5 ← phi( main::@2/(byte) main::i#3 )
  (byte) main::s#4 ← phi( main::@2/(byte) main::s#5 )
  (byte) main::s#2 ← ++ (byte) main::s#4
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@end: scope:[]  from @begin

Inversing boolean not (boolean~) main::$2 ← (byte) main::i#3 <= (byte) 50 from (boolean~) main::$1 ← (byte) main::i#3 > (byte) 50
Succesful SSA optimization Pass2UnaryNotSimplification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  to:main::@1
main::@1: scope:[main]  from main main::@4 main::@8
  (byte) main::s#6 ← phi( main/(byte) 0 main::@4/(byte) main::s#1 main::@8/(byte) main::s#2 )
  (byte) main::i#2 ← phi( main/(byte) 100 main::@4/(byte) main::i#4 main::@8/(byte) main::i#5 )
  (byte) main::i#1 ← -- (byte) main::i#2
  (boolean~) main::$0 ← (byte) main::i#1 > (byte) 0
  if((boolean~) main::$0) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) main::s#5 ← phi( main::@1/(byte) main::s#6 )
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#1 )
  (boolean~) main::$2 ← (byte) main::i#3 <= (byte) 50
  if((boolean~) main::$2) goto main::@4
  to:main::@8
main::@4: scope:[main]  from main::@2
  (byte) main::i#4 ← phi( main::@2/(byte) main::i#3 )
  (byte) main::s#3 ← phi( main::@2/(byte) main::s#5 )
  (byte) main::s#1 ← -- (byte) main::s#3
  to:main::@1
main::@8: scope:[main]  from main::@2
  (byte) main::i#5 ← phi( main::@2/(byte) main::i#3 )
  (byte) main::s#4 ← phi( main::@2/(byte) main::s#5 )
  (byte) main::s#2 ← ++ (byte) main::s#4
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@end: scope:[]  from @begin

Alias (byte) main::i#1 = (byte) main::i#3 (byte) main::i#4 (byte) main::i#5 
Alias (byte) main::s#3 = (byte) main::s#5 (byte) main::s#6 (byte) main::s#4 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  to:main::@1
main::@1: scope:[main]  from main main::@4 main::@8
  (byte) main::s#3 ← phi( main/(byte) 0 main::@4/(byte) main::s#1 main::@8/(byte) main::s#2 )
  (byte) main::i#2 ← phi( main/(byte) 100 main::@4/(byte) main::i#1 main::@8/(byte) main::i#1 )
  (byte) main::i#1 ← -- (byte) main::i#2
  (boolean~) main::$0 ← (byte) main::i#1 > (byte) 0
  if((boolean~) main::$0) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (boolean~) main::$2 ← (byte) main::i#1 <= (byte) 50
  if((boolean~) main::$2) goto main::@4
  to:main::@8
main::@4: scope:[main]  from main::@2
  (byte) main::s#1 ← -- (byte) main::s#3
  to:main::@1
main::@8: scope:[main]  from main::@2
  (byte) main::s#2 ← ++ (byte) main::s#3
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@end: scope:[]  from @begin

Simple Condition (boolean~) main::$0 if((byte) main::i#1>(byte) 0) goto main::@2
Simple Condition (boolean~) main::$2 if((byte) main::i#1<=(byte) 50) goto main::@4
Succesful SSA optimization Pass2ConditionalJumpSimplification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  to:main::@1
main::@1: scope:[main]  from main main::@4 main::@8
  (byte) main::s#3 ← phi( main/(byte) 0 main::@4/(byte) main::s#1 main::@8/(byte) main::s#2 )
  (byte) main::i#2 ← phi( main/(byte) 100 main::@4/(byte) main::i#1 main::@8/(byte) main::i#1 )
  (byte) main::i#1 ← -- (byte) main::i#2
  if((byte) main::i#1>(byte) 0) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  if((byte) main::i#1<=(byte) 50) goto main::@4
  to:main::@8
main::@4: scope:[main]  from main::@2
  (byte) main::s#1 ← -- (byte) main::s#3
  to:main::@1
main::@8: scope:[main]  from main::@2
  (byte) main::s#2 ← ++ (byte) main::s#3
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@end: scope:[]  from @begin

FINAL SYMBOL TABLE
(label) @begin
(label) @end
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@4
(label) main::@8
(label) main::@return
(byte) main::i
(byte) main::i#1
(byte) main::i#2
(byte) main::s
(byte) main::s#1
(byte) main::s#2
(byte) main::s#3

Block Sequence Planned @begin @end main main::@1 main::@return main::@2 main::@8 main::@4 
Block Sequence Planned @begin @end main main::@1 main::@return main::@2 main::@8 main::@4 
CONTROL FLOW GRAPH - PHI LIFTED
@begin: scope:[]  from
  call main param-assignment
  to:@end
@end: scope:[]  from @begin
main: scope:[main]  from @begin
  to:main::@1
main::@1: scope:[main]  from main main::@4 main::@8
  (byte) main::s#3 ← phi( main/(byte) 0 main::@4/(byte~) main::s#7 main::@8/(byte~) main::s#8 )
  (byte) main::i#2 ← phi( main/(byte) 100 main::@4/(byte~) main::i#6 main::@8/(byte~) main::i#7 )
  (byte) main::i#1 ← -- (byte) main::i#2
  if((byte) main::i#1>(byte) 0) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
main::@2: scope:[main]  from main::@1
  if((byte) main::i#1<=(byte) 50) goto main::@4
  to:main::@8
main::@8: scope:[main]  from main::@2
  (byte) main::s#2 ← ++ (byte) main::s#3
  (byte~) main::i#7 ← (byte) main::i#1
  (byte~) main::s#8 ← (byte) main::s#2
  to:main::@1
main::@4: scope:[main]  from main::@2
  (byte) main::s#1 ← -- (byte) main::s#3
  (byte~) main::i#6 ← (byte) main::i#1
  (byte~) main::s#7 ← (byte) main::s#1
  to:main::@1

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - LIVE RANGES
@begin: scope:[]  from
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @begin
main: scope:[main]  from @begin
  to:main::@1
main::@1: scope:[main]  from main main::@4 main::@8
  [1] (byte) main::s#3 ← phi( main/(byte) 0 main::@4/(byte~) main::s#7 main::@8/(byte~) main::s#8 ) [ main::i#2 main::s#3 ]
  [1] (byte) main::i#2 ← phi( main/(byte) 100 main::@4/(byte~) main::i#6 main::@8/(byte~) main::i#7 ) [ main::i#2 main::s#3 ]
  [2] (byte) main::i#1 ← -- (byte) main::i#2 [ main::i#1 main::s#3 ]
  [3] if((byte) main::i#1>(byte) 0) goto main::@2 [ main::i#1 main::s#3 ]
  to:main::@return
main::@return: scope:[main]  from main::@1
  [4] return  [ ]
  to:@return
main::@2: scope:[main]  from main::@1
  [5] if((byte) main::i#1<=(byte) 50) goto main::@4 [ main::i#1 main::s#3 ]
  to:main::@8
main::@8: scope:[main]  from main::@2
  [6] (byte) main::s#2 ← ++ (byte) main::s#3 [ main::i#1 main::s#2 ]
  [7] (byte~) main::i#7 ← (byte) main::i#1 [ main::i#7 main::s#2 ]
  [8] (byte~) main::s#8 ← (byte) main::s#2 [ main::i#7 main::s#8 ]
  to:main::@1
main::@4: scope:[main]  from main::@2
  [9] (byte) main::s#1 ← -- (byte) main::s#3 [ main::i#1 main::s#1 ]
  [10] (byte~) main::i#6 ← (byte) main::i#1 [ main::i#6 main::s#1 ]
  [11] (byte~) main::s#7 ← (byte) main::s#1 [ main::i#6 main::s#7 ]
  to:main::@1

Created 2 initial phi equivalence classes
Coalesced [7] main::i#7 ← main::i#1
Coalesced [8] main::s#8 ← main::s#2
Coalesced (already) [10] main::i#6 ← main::i#1
Coalesced [11] main::s#7 ← main::s#1
Coalesced down to 2 phi equivalence classes
Block Sequence Planned @begin @end main main::@1 main::@return main::@2 main::@8 main::@4 
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - PHI MEM COALESCED
@begin: scope:[]  from
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @begin
main: scope:[main]  from @begin
  to:main::@1
main::@1: scope:[main]  from main main::@4 main::@8
  [1] (byte) main::s#3 ← phi( main/(byte) 0 main::@4/(byte) main::s#1 main::@8/(byte) main::s#2 ) [ main::i#2 main::s#3 ]
  [1] (byte) main::i#2 ← phi( main/(byte) 100 main::@4/(byte) main::i#1 main::@8/(byte) main::i#1 ) [ main::i#2 main::s#3 ]
  [2] (byte) main::i#1 ← -- (byte) main::i#2 [ main::i#1 main::s#3 ]
  [3] if((byte) main::i#1>(byte) 0) goto main::@2 [ main::i#1 main::s#3 ]
  to:main::@return
main::@return: scope:[main]  from main::@1
  [4] return  [ ]
  to:@return
main::@2: scope:[main]  from main::@1
  [5] if((byte) main::i#1<=(byte) 50) goto main::@4 [ main::i#1 main::s#3 ]
  to:main::@8
main::@8: scope:[main]  from main::@2
  [6] (byte) main::s#2 ← ++ (byte) main::s#3 [ main::i#1 main::s#2 ]
  to:main::@1
main::@4: scope:[main]  from main::@2
  [7] (byte) main::s#1 ← -- (byte) main::s#3 [ main::i#1 main::s#1 ]
  to:main::@1

CALL GRAPH
Calls in [] to 0:main 

DOMINATORS
@begin dominated by  @begin 
@end dominated by  @end @begin 
main dominated by  @begin main 
main::@1 dominated by  @begin main::@1 main 
main::@return dominated by  main::@return @begin main::@1 main 
main::@2 dominated by  @begin main::@2 main::@1 main 
main::@8 dominated by  main::@8 @begin main::@2 main::@1 main 
main::@4 dominated by  @begin main::@2 main::@1 main::@4 main 

Found back edge: Loop head: main::@1 tails: main::@8 blocks: null
Found back edge: Loop head: main::@1 tails: main::@4 blocks: null
Populated: Loop head: main::@1 tails: main::@8 blocks: main::@8 main::@2 main::@1 
Populated: Loop head: main::@1 tails: main::@4 blocks: main::@4 main::@2 main::@1 
Coalesced: Loop head: main::@1 tails: main::@8 main::@4 blocks: main::@8 main::@2 main::@1 main::@4 
NATURAL LOOPS
Loop head: main::@1 tails: main::@8 main::@4 blocks: main::@8 main::@2 main::@1 main::@4 

Found 0 loops in scope []
Found 1 loops in scope [main]
  Loop head: main::@1 tails: main::@8 main::@4 blocks: main::@8 main::@2 main::@1 main::@4 
NATURAL LOOPS WITH DEPTH
Loop head: main::@1 tails: main::@8 main::@4 blocks: main::@8 main::@2 main::@1 main::@4  depth: 1


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte) main::i
(byte) main::i#1 11.0
(byte) main::i#2 33.0
(byte) main::s
(byte) main::s#1 22.0
(byte) main::s#2 22.0
(byte) main::s#3 11.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::s#3 main::s#1 main::s#2 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::s#3 main::s#1 main::s#2 ]
Allocated zp byte:2 [ main::i#2 main::i#1 ]
Allocated zp byte:3 [ main::s#3 main::s#1 main::s#2 ]
INITIAL ASM
//SEG0 @begin
bbegin:
//SEG1 [0] call main param-assignment [ ]
  jsr main
  jmp bend
//SEG2 @end
bend:
//SEG3 main
main: {
  //SEG4 [1] phi from main to main::@1
  b1_from_main:
  //SEG5 [1] phi (byte) main::s#3 = (byte) 0 -- zpby1=coby1 
    lda #$0
    sta $3
  //SEG6 [1] phi (byte) main::i#2 = (byte) 100 -- zpby1=coby1 
    lda #$64
    sta $2
    jmp b1
  //SEG7 main::@1
  b1:
  //SEG8 [2] (byte) main::i#1 ← -- (byte) main::i#2 [ main::i#1 main::s#3 ] -- zpby1=_dec_zpby1 
    dec $2
  //SEG9 [3] if((byte) main::i#1>(byte) 0) goto main::@2 [ main::i#1 main::s#3 ] -- zpby1_gt_0_then_la1 
    lda $2
    bne b2
    jmp breturn
  //SEG10 main::@return
  breturn:
  //SEG11 [4] return  [ ]
    rts
  //SEG12 main::@2
  b2:
  //SEG13 [5] if((byte) main::i#1<=(byte) 50) goto main::@4 [ main::i#1 main::s#3 ] -- zpby1_le_coby1_then_la1 
    lda $2
    cmp #$32
    bcc b4
    beq b4
    jmp b8
  //SEG14 main::@8
  b8:
  //SEG15 [6] (byte) main::s#2 ← ++ (byte) main::s#3 [ main::i#1 main::s#2 ] -- zpby1=_inc_zpby1 
    inc $3
  //SEG16 [1] phi from main::@8 to main::@1
  b1_from_b8:
  //SEG17 [1] phi (byte) main::s#3 = (byte) main::s#2 -- register_copy 
  //SEG18 [1] phi (byte) main::i#2 = (byte) main::i#1 -- register_copy 
    jmp b1
  //SEG19 main::@4
  b4:
  //SEG20 [7] (byte) main::s#1 ← -- (byte) main::s#3 [ main::i#1 main::s#1 ] -- zpby1=_dec_zpby1 
    dec $3
  //SEG21 [1] phi from main::@4 to main::@1
  b1_from_b4:
  //SEG22 [1] phi (byte) main::s#3 = (byte) main::s#1 -- register_copy 
  //SEG23 [1] phi (byte) main::i#2 = (byte) main::i#1 -- register_copy 
    jmp b1
}

REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp byte:2 [ main::i#2 main::i#1 ] : zp byte:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp byte:3 [ main::s#3 main::s#1 main::s#2 ] : zp byte:3 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 55: zp byte:3 [ main::s#3 main::s#1 main::s#2 ] 44: zp byte:2 [ main::i#2 main::i#1 ] 
Uplift Scope [] 

Uplifting [main] best 380 combination reg byte y [ main::s#3 main::s#1 main::s#2 ] reg byte x [ main::i#2 main::i#1 ] 
Uplifting [] best 380 combination 
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b8
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 @begin
bbegin:
//SEG1 [0] call main param-assignment [ ]
  jsr main
//SEG2 @end
bend:
//SEG3 main
main: {
  //SEG4 [1] phi from main to main::@1
  b1_from_main:
  //SEG5 [1] phi (byte) main::s#3 = (byte) 0 -- yby=coby1 
    ldy #$0
  //SEG6 [1] phi (byte) main::i#2 = (byte) 100 -- xby=coby1 
    ldx #$64
  //SEG7 main::@1
  b1:
  //SEG8 [2] (byte) main::i#1 ← -- (byte) main::i#2 [ main::i#1 main::s#3 ] -- xby=_dec_xby 
    dex
  //SEG9 [3] if((byte) main::i#1>(byte) 0) goto main::@2 [ main::i#1 main::s#3 ] -- xby_gt_0_then_la1 
    cpx #$0
    bne b2
  //SEG10 main::@return
  breturn:
  //SEG11 [4] return  [ ]
    rts
  //SEG12 main::@2
  b2:
  //SEG13 [5] if((byte) main::i#1<=(byte) 50) goto main::@4 [ main::i#1 main::s#3 ] -- xby_le_coby1_then_la1 
    cpx #$32
    bcc b4
    beq b4
  //SEG14 main::@8
  b8:
  //SEG15 [6] (byte) main::s#2 ← ++ (byte) main::s#3 [ main::i#1 main::s#2 ] -- yby=_inc_yby 
    iny
  //SEG16 [1] phi from main::@8 to main::@1
  b1_from_b8:
  //SEG17 [1] phi (byte) main::s#3 = (byte) main::s#2 -- register_copy 
  //SEG18 [1] phi (byte) main::i#2 = (byte) main::i#1 -- register_copy 
    jmp b1
  //SEG19 main::@4
  b4:
  //SEG20 [7] (byte) main::s#1 ← -- (byte) main::s#3 [ main::i#1 main::s#1 ] -- yby=_dec_yby 
    dey
  //SEG21 [1] phi from main::@4 to main::@1
  b1_from_b4:
  //SEG22 [1] phi (byte) main::s#3 = (byte) main::s#1 -- register_copy 
  //SEG23 [1] phi (byte) main::i#2 = (byte) main::i#1 -- register_copy 
    jmp b1
}

Removing instruction bbegin:
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction breturn:
Removing instruction b8:
Removing instruction b1_from_b8:
Removing instruction b1_from_b4:
Succesful ASM optimization Pass5UnusedLabelElimination
ASSEMBLER
//SEG0 @begin
//SEG1 [0] call main param-assignment [ ]
  jsr main
//SEG2 @end
//SEG3 main
main: {
  //SEG4 [1] phi from main to main::@1
  //SEG5 [1] phi (byte) main::s#3 = (byte) 0 -- yby=coby1 
    ldy #$0
  //SEG6 [1] phi (byte) main::i#2 = (byte) 100 -- xby=coby1 
    ldx #$64
  //SEG7 main::@1
  b1:
  //SEG8 [2] (byte) main::i#1 ← -- (byte) main::i#2 [ main::i#1 main::s#3 ] -- xby=_dec_xby 
    dex
  //SEG9 [3] if((byte) main::i#1>(byte) 0) goto main::@2 [ main::i#1 main::s#3 ] -- xby_gt_0_then_la1 
    cpx #$0
    bne b2
  //SEG10 main::@return
  //SEG11 [4] return  [ ]
    rts
  //SEG12 main::@2
  b2:
  //SEG13 [5] if((byte) main::i#1<=(byte) 50) goto main::@4 [ main::i#1 main::s#3 ] -- xby_le_coby1_then_la1 
    cpx #$32
    bcc b4
    beq b4
  //SEG14 main::@8
  //SEG15 [6] (byte) main::s#2 ← ++ (byte) main::s#3 [ main::i#1 main::s#2 ] -- yby=_inc_yby 
    iny
  //SEG16 [1] phi from main::@8 to main::@1
  //SEG17 [1] phi (byte) main::s#3 = (byte) main::s#2 -- register_copy 
  //SEG18 [1] phi (byte) main::i#2 = (byte) main::i#1 -- register_copy 
    jmp b1
  //SEG19 main::@4
  b4:
  //SEG20 [7] (byte) main::s#1 ← -- (byte) main::s#3 [ main::i#1 main::s#1 ] -- yby=_dec_yby 
    dey
  //SEG21 [1] phi from main::@4 to main::@1
  //SEG22 [1] phi (byte) main::s#3 = (byte) main::s#1 -- register_copy 
  //SEG23 [1] phi (byte) main::i#2 = (byte) main::i#1 -- register_copy 
    jmp b1
}

FINAL SYMBOL TABLE
(label) @begin
(label) @end
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@4
(label) main::@8
(label) main::@return
(byte) main::i
(byte) main::i#1 reg byte x 11.0
(byte) main::i#2 reg byte x 33.0
(byte) main::s
(byte) main::s#1 reg byte y 22.0
(byte) main::s#2 reg byte y 22.0
(byte) main::s#3 reg byte y 11.0

reg byte x [ main::i#2 main::i#1 ]
reg byte y [ main::s#3 main::s#1 main::s#2 ]

FINAL CODE
//SEG0 @begin
//SEG1 [0] call main param-assignment [ ]
  jsr main
//SEG2 @end
//SEG3 main
main: {
  //SEG4 [1] phi from main to main::@1
  //SEG5 [1] phi (byte) main::s#3 = (byte) 0 -- yby=coby1 
    ldy #$0
  //SEG6 [1] phi (byte) main::i#2 = (byte) 100 -- xby=coby1 
    ldx #$64
  //SEG7 main::@1
  b1:
  //SEG8 [2] (byte) main::i#1 ← -- (byte) main::i#2 [ main::i#1 main::s#3 ] -- xby=_dec_xby 
    dex
  //SEG9 [3] if((byte) main::i#1>(byte) 0) goto main::@2 [ main::i#1 main::s#3 ] -- xby_gt_0_then_la1 
    cpx #$0
    bne b2
  //SEG10 main::@return
  //SEG11 [4] return  [ ]
    rts
  //SEG12 main::@2
  b2:
  //SEG13 [5] if((byte) main::i#1<=(byte) 50) goto main::@4 [ main::i#1 main::s#3 ] -- xby_le_coby1_then_la1 
    cpx #$32
    bcc b4
    beq b4
  //SEG14 main::@8
  //SEG15 [6] (byte) main::s#2 ← ++ (byte) main::s#3 [ main::i#1 main::s#2 ] -- yby=_inc_yby 
    iny
  //SEG16 [1] phi from main::@8 to main::@1
  //SEG17 [1] phi (byte) main::s#3 = (byte) main::s#2 -- register_copy 
  //SEG18 [1] phi (byte) main::i#2 = (byte) main::i#1 -- register_copy 
    jmp b1
  //SEG19 main::@4
  b4:
  //SEG20 [7] (byte) main::s#1 ← -- (byte) main::s#3 [ main::i#1 main::s#1 ] -- yby=_dec_yby 
    dey
  //SEG21 [1] phi from main::@4 to main::@1
  //SEG22 [1] phi (byte) main::s#3 = (byte) main::s#1 -- register_copy 
  //SEG23 [1] phi (byte) main::i#2 = (byte) main::i#1 -- register_copy 
    jmp b1
}

