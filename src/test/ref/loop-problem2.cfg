@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  [5] call print_cls 
  to:main::@1
main::@1: scope:[main]  from main
  [6] phi()
  [7] call mode_ctrl 
  to:main::@return
main::@return: scope:[main]  from main::@1
  [8] return 
  to:@return

(void()) mode_ctrl()
mode_ctrl: scope:[mode_ctrl]  from main::@1
  [9] phi()
  to:mode_ctrl::@1
mode_ctrl::@1: scope:[mode_ctrl]  from mode_ctrl mode_ctrl::@2 mode_ctrl::@3
  [10] (byte) mode_ctrl::before#0 ← *((const nomodify byte*) BORDERCOL)
  [11] if((byte) mode_ctrl::before#0==(byte) $ff) goto mode_ctrl::@2
  to:mode_ctrl::@3
mode_ctrl::@3: scope:[mode_ctrl]  from mode_ctrl::@1
  [12] *((const nomodify byte*) BORDERCOL) ← (byte) 3
  to:mode_ctrl::@1
mode_ctrl::@2: scope:[mode_ctrl]  from mode_ctrl::@1
  [13] *((const nomodify byte*) BORDERCOL) ← (byte) 2
  to:mode_ctrl::@1

(void()) print_cls()
print_cls: scope:[print_cls]  from main
  [14] phi()
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@2
  [15] (byte*) print_cls::sc#2 ← phi( print_cls/(const nomodify byte*) SCREEN print_cls::@2/(byte*) print_cls::sc#1 )
  [16] if((byte*) print_cls::sc#2!=(const nomodify byte*) SCREEN+(word) $3e8) goto print_cls::@2
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  [17] return 
  to:@return
print_cls::@2: scope:[print_cls]  from print_cls::@1
  [18] *((byte*) print_cls::sc#2) ← (byte) ' '
  [19] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2
  to:print_cls::@1
